void sub_25B4CEF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }

  sub_25B414644((uint64_t)&STACK[0x2B0]);
  JUMPOUT(0x25B4CF134);
}

void sub_25B4CEFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_25B414644((uint64_t)&a71);
  sub_25B414644((uint64_t)&STACK[0x230]);

  if (a37) {
    operator delete(a37);
  }
  sub_25B4CC5B0((uint64_t)&a40);
  if (a50) {
    operator delete(a50);
  }

  JUMPOUT(0x25B4CF174);
}

void sub_25B4CEFB0()
{
  JUMPOUT(0x25B4CEFE8);
}

void sub_25B4CEFB8()
{
  JUMPOUT(0x25B4CF004);
}

void sub_25B4CEFC0()
{
  JUMPOUT(0x25B4CF000);
}

void sub_25B4CEFCC()
{
  JUMPOUT(0x25B4CF054);
}

void sub_25B4CEFD4()
{
  JUMPOUT(0x25B4CF04CLL);
}

void sub_25B4CEFDC()
{
  JUMPOUT(0x25B4CEFE4);
}

void sub_25B4CEFF4()
{
  JUMPOUT(0x25B4CEFFCLL);
}

void sub_25B4CF030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  sub_25B414644((uint64_t)&STACK[0x2B0]);
  if (a37) {
    operator delete(a37);
  }
  sub_25B4CC5B0((uint64_t)&a40);
  if (a50) {
    operator delete(a50);
  }

  JUMPOUT(0x25B4CF174);
}

void sub_25B4CF038()
{
  JUMPOUT(0x25B4CF0C4);
}

void sub_25B4CF040()
{
  JUMPOUT(0x25B4CF048);
}

void sub_25B4CF0B8()
{
  JUMPOUT(0x25B4CF0C0);
}

void sub_25B4CF0F8()
{
  JUMPOUT(0x25B4CF100);
}

void sub_25B4CF108()
{
  JUMPOUT(0x25B4CF110);
}

void sub_25B4CF17C(float32x2_t **a1, float32x2_t *a2, float32x2_t **a3, unint64_t a4, double a5, double a6, __n128 a7, double a8)
{
  v8 = a1;
  uint64_t v9 = (char *)a3[1] - (char *)*a3;
  if (!v9)
  {
LABEL_76:
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    return;
  }
  v10 = a2;
  unint64_t v11 = (unint64_t)(v9 >> 3) >> 1;
  if (v11 >= a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = v11;
  }
  float v13 = 0.0;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    unint64_t v16 = 0;
    v17 = 0;
    v18 = 0;
    unint64_t v19 = 0;
    for (uint64_t i = 0; i != v12; ++i)
    {
      a7.n128_u64[0] = (unint64_t)vsub_f32((*a3)[2 * i + 1], (*a3)[2 * i]);
      __n128 v136 = a7;
      if (a7.n128_f32[1] <= 0.0) {
        float v21 = -a7.n128_f32[0];
      }
      else {
        float v21 = a7.n128_f32[0];
      }
      float v131 = acosf(v21 / sqrtf(vaddv_f32(vmul_f32((float32x2_t)a7.n128_u64[0], (float32x2_t)a7.n128_u64[0]))));
      __n128 v22 = v136;
      v22.n128_f32[2] = v131;
      if ((unint64_t)v15 >= v16)
      {
        __n128 v137 = v22;
        uint64_t v23 = v15 - v14;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v16 - (void)v14) >> 3 > v24) {
          unint64_t v24 = (uint64_t)(v16 - (void)v14) >> 3;
        }
        if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)sub_25B3FFAEC(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        v27 = (float32x4_t *)(v25 + 16 * v23);
        float32x4_t *v27 = (float32x4_t)v137;
        v28 = v27 + 1;
        while (v15 != v14)
        {
          float32x4_t v29 = v15[-1];
          --v15;
          v27[-1] = v29;
          --v27;
        }
        unint64_t v16 = v25 + 16 * v26;
        if (v14) {
          operator delete(v14);
        }
        v14 = v27;
        v15 = v28;
      }
      else
      {
        *v15++ = (float32x4_t)v22;
      }
      if ((unint64_t)v18 >= v19)
      {
        uint64_t v30 = v18 - v17;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v19 - (void)v17) >> 1 > v31) {
          unint64_t v31 = (uint64_t)(v19 - (void)v17) >> 1;
        }
        if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          unint64_t v32 = (unint64_t)sub_25B3FBC64(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        v34 = (float *)(v32 + 4 * v30);
        float *v34 = v131;
        v35 = v34 + 1;
        while (v18 != v17)
        {
          int v36 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v34-- - 1) = v36;
        }
        unint64_t v19 = v32 + 4 * v33;
        if (v17) {
          operator delete(v17);
        }
        v17 = v34;
        v18 = v35;
      }
      else
      {
        *v18++ = v131;
      }
    }
    int32x2_t v37 = 0;
    if (v17 == v18)
    {
      v8 = a1;
      v10 = a2;
    }
    else
    {
      float v13 = 0.0;
      v38 = v17;
      v10 = a2;
      do
      {
        a8 = 0.0;
        float v39 = 0.0;
        if (v14 != v15)
        {
          v40 = v14;
          do
          {
            float v41 = COERCE_FLOAT(v40->i64[1]);
            if (v41 >= *v38 && v41 < (float)(*v38 + 0.1))
            {
              float v43 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(*v40, *v40)));
              *(float *)&a8 = *(float *)&a8 + (float)(v43 * v41);
              float v39 = v39 + v43;
            }
            ++v40;
          }
          while (v40 != v15);
        }
        if (v39 > v13)
        {
          float v13 = v39;
          v37.i32[0] = SLODWORD(a8);
        }
        ++v38;
      }
      while (v38 != v18);
      v8 = a1;
    }
  }
  else
  {
    v14 = 0;
    v17 = 0;
    int32x2_t v37 = 0;
  }
  if (v13 < 0.001)
  {
    float32x2_t v44 = 0;
    char v45 = 0;
    if (!v17) {
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v17);
    goto LABEL_73;
  }
  float v46 = *(float *)v37.i32 / v13;
  float v47 = fabsf(v46 + -1.5708);
  HIDWORD(a8) = 872415232;
  float v48 = (float)(fabsf(v46 + 1.5708) * 0.00000011921) * 10.0;
  if (v47 >= 1.1755e-38 && v47 > v48)
  {
    float v50 = tanf(v46);
    __asm { FMOV            V1.2S, #1.0 }
    _D1.f32[1] = v50;
    int32x2_t v55 = (int32x2_t)vmul_f32(_D1, _D1);
    *(float *)v55.i32 = sqrtf(vaddv_f32((float32x2_t)v55));
    int32x2_t v37 = (int32x2_t)vdiv_f32(_D1, (float32x2_t)vdup_lane_s32(v55, 0));
    float32x2_t v44 = (float32x2_t)v37;
  }
  else
  {
    float32x2_t v44 = (float32x2_t)0x3F80000000000000;
  }
  char v45 = 1;
  if (v17) {
    goto LABEL_72;
  }
LABEL_73:
  if (v14) {
    operator delete(v14);
  }
  if (v13 < 0.001) {
    goto LABEL_76;
  }
  int32x2_t v56 = (int32x2_t)v44;
  if (v10[1].i8[0])
  {
    float32x2_t v138 = v44;
    v57 = (float32x2_t *)operator new(8uLL);
    float32x2_t *v57 = vneg_f32(v44);
    v58 = (float32x2_t *)sub_25B3FCAD4(2uLL);
    uint64_t v60 = v59;
    v61.f32[0] = -v44.f32[1];
    v61.i32[1] = v44.i32[0];
    float32x2_t v132 = v61;
    v58[1] = v61;
    float32x2_t *v58 = *v57;
    operator delete(v57);
    float32x2_t v62 = vneg_f32(v132);
    if (v60 < 3)
    {
      uint64_t v65 = 3;
      if ((unint64_t)((8 * v60) >> 2) > 3) {
        uint64_t v65 = (8 * v60) >> 2;
      }
      if ((unint64_t)(8 * v60) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        unint64_t v66 = (unint64_t)sub_25B3FCAD4(v66);
      }
      uint64_t v67 = 0;
      *(float32x2_t *)(v66 + 16) = v62;
      v63 = (float32x2_t *)(v66 + 24);
      do
      {
        *(float32x2_t *)(v66 + 16 + v67 * 8 - 8) = v58[v67 + 1];
        --v67;
      }
      while (v67 != -2);
      v64 = (float32x2_t *)v66;
      operator delete(v58);
    }
    else
    {
      v58[2] = v62;
      v63 = v58 + 3;
      v64 = v58;
    }
    int8x8_t v68 = (int8x8_t)v138;
    if (!v10[1].i8[0]) {
      sub_25B4704D8();
    }
    if (v64 != v63)
    {
      float32x2_t v69 = vmul_f32(*v10, v138);
      v69.f32[0] = vaddv_f32(v69);
      v70 = v64;
      do
      {
        float32x2_t v71 = *v70++;
        int32x2_t v72 = (int32x2_t)vmul_f32(*v10, v71);
        float32x2_t v73 = vadd_f32((float32x2_t)v72, (float32x2_t)vdup_lane_s32(v72, 1));
        float v74 = vaddv_f32((float32x2_t)v72);
        int8x8_t v68 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v73, v69), 0), (int8x8_t)v71, v68);
        if (v45) {
          BOOL v75 = 1;
        }
        else {
          BOOL v75 = v74 <= v69.f32[0];
        }
        if (!v75) {
          char v45 = 1;
        }
        if (v74 > v69.f32[0]) {
          v69.f32[0] = v74;
        }
      }
      while (v70 != v63);
    }
    int32x2_t v139 = (int32x2_t)v68;
    operator delete(v64);
    int32x2_t v56 = v139;
  }
  float32x2_t *v10 = (float32x2_t)v56;
  v10[1].i8[0] = v45;
  if (!v45) {
    sub_25B4704D8();
  }
  v76 = *a3;
  v77 = a3[1];
  float32x2_t v78 = **a3;
  uint64_t v79 = (char *)v77 - (char *)*a3;
  if ((unint64_t)v79 >= 9)
  {
    unint64_t v80 = v79 >> 3;
    if (v80 <= 2) {
      unint64_t v80 = 2;
    }
    unint64_t v81 = v80 - 1;
    v82 = v76 + 1;
    v37.i32[1] = 872415232;
    do
    {
      LODWORD(v83) = HIDWORD(*(unint64_t *)v82);
      float v84 = vabds_f32(v83, v78.f32[1]);
      float v85 = (float)(fabsf(v78.f32[1] + v83) * 0.00000011921) * 100.0;
      if (v84 >= 1.1755e-38 && v84 > v85)
      {
        if (v83 < v78.f32[1]) {
          float32x2_t v78 = *v82;
        }
      }
      else
      {
        float32x2_t v78 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v78, *v82), 0), (int8x8_t)*v82, (int8x8_t)v78);
      }
      ++v82;
      --v81;
    }
    while (v81);
  }
  *(float *)v37.i32 = -*(float *)&v56.i32[1];
  float32x2_t v87 = (float32x2_t)vzip1_s32(v37, v56);
  if (v76 == v77)
  {
    int32x2_t v94 = (int32x2_t)0x7F800000FF800000;
    v88.i32[0] = -8388608;
    LODWORD(a8) = 2139095040;
  }
  else
  {
    a8 = COERCE_DOUBLE(vdup_n_s32(0x7F800000u));
    int32x2_t v88 = (int32x2_t)0x7F0000007FLL;
    do
    {
      float32x2_t v89 = *v76++;
      float32x2_t v90 = vsub_f32(v89, v78);
      int32x2_t v91 = (int32x2_t)vmul_f32(v90, (float32x2_t)v56);
      int32x2_t v92 = (int32x2_t)vmul_f32(v87, v90);
      float32x2_t v93 = vadd_f32((float32x2_t)vzip1_s32(v92, v91), (float32x2_t)vzip2_s32(v92, v91));
      a8 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&a8, v93), (int8x8_t)v93, *(int8x8_t *)&a8));
      int32x2_t v88 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v93, (float32x2_t)v88), (int8x8_t)v93, (int8x8_t)v88);
    }
    while (v76 != v77);
    int32x2_t v94 = vzip2_s32(v88, *(int32x2_t *)&a8);
  }
  float v125 = *(float *)v94.i32;
  if ((float)(*(float *)v94.i32 - *(float *)&v94.i32[1]) < 0.01
    || (float v95 = 0.0, (float)(*(float *)v88.i32 - *(float *)&a8) < 0.01))
  {
    float v95 = 0.1;
  }
  double v127 = a8;
  float v129 = *(float *)v88.i32;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  float32x2_t v133 = v78;
  float32x2_t v140 = (float32x2_t)v56;
  float32x2_t v96 = vmla_n_f32(v78, (float32x2_t)v56, *(float *)&v94.i32[1] - v95);
  v97 = (float32x2_t *)operator new(8uLL);
  *(float *)v98.i32 = v129 + v95;
  int32x2_t v123 = v98;
  float32x2_t *v97 = vmla_n_f32(v96, v87, v129 + v95);
  *v8 = v97;
  v8[1] = v97 + 1;
  v8[2] = v97 + 1;
  v99 = (float32x2_t *)sub_25B3FCAD4(2uLL);
  uint64_t v101 = v100;
  v102.i32[1] = HIDWORD(v127);
  *(float *)v102.i32 = *(float *)&v127 - v95;
  int32x2_t v130 = v102;
  float32x2_t v134 = vmla_n_f32(v133, v140, v125 + v95);
  v103 = &v99[v100];
  v99[1] = vmla_f32(v134, v87, (float32x2_t)vdup_lane_s32(v123, 0));
  float32x2_t *v99 = *v97;
  v104 = *v8;
  *v8 = v99;
  v8[1] = v99 + 2;
  v8[2] = v103;
  if (v104) {
    operator delete(v104);
  }
  v8[1] = v99 + 2;
  float32x2_t v105 = vmla_n_f32(v134, v87, *(float *)v130.i32);
  if (v101 < 3)
  {
    float32x2_t v135 = v105;
    uint64_t v107 = 3;
    if ((unint64_t)(((char *)v103 - (char *)v99) >> 2) > 3) {
      uint64_t v107 = ((char *)v103 - (char *)v99) >> 2;
    }
    if ((unint64_t)((char *)v103 - (char *)v99) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v108 = v107;
    }
    if (v108) {
      unint64_t v108 = (unint64_t)sub_25B3FCAD4(v108);
    }
    else {
      uint64_t v109 = 0;
    }
    uint64_t v110 = 0;
    unint64_t v111 = v108 + 16;
    v103 = (float32x2_t *)(v108 + 8 * v109);
    *(float32x2_t *)(v108 + 16) = v135;
    v106 = (float32x2_t *)(v108 + 24);
    do
    {
      *(float32x2_t *)(v111 + v110 * 8 - 8) = v99[v110 + 1];
      --v110;
    }
    while (v110 != -2);
    v112 = *v8;
    *v8 = (float32x2_t *)(v111 - 16);
    v8[1] = v106;
    v8[2] = v103;
    if (v112) {
      operator delete(v112);
    }
  }
  else
  {
    v99[2] = v105;
    v106 = v99 + 3;
  }
  v8[1] = v106;
  float32x2_t v113 = vmla_f32(v96, v87, (float32x2_t)vdup_lane_s32(v130, 0));
  if (v106 >= v103)
  {
    v115 = *v8;
    uint64_t v116 = v106 - *v8;
    unint64_t v117 = v116 + 1;
    if ((unint64_t)(v116 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    if (((char *)v103 - (char *)v115) >> 2 > v117) {
      unint64_t v117 = ((char *)v103 - (char *)v115) >> 2;
    }
    if ((unint64_t)((char *)v103 - (char *)v115) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v118 = v117;
    }
    if (v118) {
      unint64_t v118 = (unint64_t)sub_25B3FCAD4(v118);
    }
    else {
      uint64_t v119 = 0;
    }
    v120 = (float32x2_t *)(v118 + 8 * v116);
    unint64_t v121 = v118 + 8 * v119;
    float32x2_t *v120 = v113;
    v114 = v120 + 1;
    if (v106 == v115)
    {
      *v8 = v120;
      v8[1] = v114;
      v8[2] = (float32x2_t *)v121;
    }
    else
    {
      do
      {
        float32x2_t v122 = v106[-1];
        --v106;
        v120[-1] = v122;
        --v120;
      }
      while (v106 != v115);
      v106 = *v8;
      *v8 = v120;
      v8[1] = v114;
      v8[2] = (float32x2_t *)v121;
      if (!v106) {
        goto LABEL_156;
      }
    }
    operator delete(v106);
  }
  else
  {
    float32x2_t *v106 = v113;
    v114 = v106 + 1;
  }
LABEL_156:
  v8[1] = v114;
}

void sub_25B4CFA2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B4CFA98(unsigned char *a1, void *a2, void *a3)
{
  id v21 = a2;
  id v7 = a3;
  unint64_t v8 = 0;
  unsigned int v9 = -1;
  while (objc_msgSend_count(v7, v5, v6) > v8)
  {
    unint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v7, v10, v8);
    v14 = objc_msgSend_identifier(v11, v12, v13);
    v17 = objc_msgSend_parentIdentifier(v21, v15, v16);
    int isEqual = objc_msgSend_isEqual_(v14, v18, (uint64_t)v17);

    if (isEqual) {
      unsigned int v9 = v8;
    }

    ++v8;
  }
  if ((v9 & 0x80000000) != 0)
  {
    char v20 = 0;
    *a1 = 0;
  }
  else
  {
    *(void *)a1 = objc_msgSend_objectAtIndexedSubscript_(v7, v10, v9);
    char v20 = 1;
  }
  a1[8] = v20;
}

void sub_25B4CFBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 sub_25B4CFBE8(void *a1, unsigned char *a2)
{
  v3 = a1;
  float32x2_t v5 = (float32x2_t)sub_25B477C40(v3).n128_u64[0];
  float32x2_t v7 = v6;
  if (v3) {
    objc_copyStruct(&dest, v3 + 240, 16, 1, 0);
  }
  if (a2[8] && *(void *)a2) {
    objc_copyStruct(&dest, (const void *)(*(void *)a2 + 240), 16, 1, 0);
  }
  float32x2_t v8 = vsub_f32(v5, v7);
  int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)v9, (float32x2_t)vdup_lane_s32(v9, 1)).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  v4.n128_u64[0] = (unint64_t)vmul_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  __n128 v13 = v4;

  return v13;
}

void sub_25B4CFDC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4CFDDC(float32x2_t **a1, void *a2, void *a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id obj = v6;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v72, v76, 16);
  if (v8)
  {
    int32x2_t v9 = 0;
    uint64_t v10 = *(void *)v73;
    float32x2_t v69 = (float32x2_t)vdup_n_s32(0x3ECCCCCDu);
    float32x2_t v11 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
    do
    {
      uint64_t v12 = 0;
      uint64_t v63 = v8;
      do
      {
        if (*(void *)v73 != v10) {
          objc_enumerationMutation(obj);
        }
        __n128 v13 = *(void **)(*((void *)&v72 + 1) + 8 * v12);
        sub_25B4CFA98(&v70, v13, v5);
        if (v71)
        {
          float32x2_t v15 = (float32x2_t)sub_25B4CFBE8(v13, &v70).n128_u64[0];
          float32x2_t v17 = v16;
          v18 = v70;
          float32x2_t v19 = (float32x2_t)sub_25B477C40(v70).n128_u64[0];
          float32x2_t v21 = v20;
          float32x2_t v22 = (float32x2_t)sub_25B477C40(v13).n128_u64[0];
          float32x2_t v24 = v23;
          unint64_t v25 = operator new(0x10uLL);
          float32x2_t v26 = vsub_f32(v21, v24);
          int32x2_t v27 = (int32x2_t)vmul_f32(v26, v26);
          float32x2_t v28 = vsub_f32(v21, v22);
          int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
          float32x2_t v30 = vsub_f32(v19, v24);
          int32x2_t v31 = (int32x2_t)vmul_f32(v30, v30);
          float32x2_t v32 = vsub_f32(v19, v22);
          int32x2_t v33 = (int32x2_t)vmul_f32(v32, v32);
          float32x2_t v34 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v31, v27), (float32x2_t)vzip2_s32(v31, v27)));
          float32x2_t v35 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v33, v29), (float32x2_t)vzip2_s32(v33, v29)));
          float32x2_t v36 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v35, v34), (int8x8_t)v34, (int8x8_t)v35);
          *unint64_t v25 = vbsl_s8((int8x8_t)vcgt_f32(v36, v69), (int8x8_t)0x3F0000003F000000, (int8x8_t)vadd_f32(v36, v11));
          v25[1] = 0x3F6666663DCCCCCDLL;
          objc_msgSend_quad(v13, v37, v38);
          float32x2_t v40 = *(float32x2_t *)((char *)v25 + 4);
          float32x2_t v42 = vmls_lane_f32(v41, v15, v40, 0);
          float32x2_t v44 = vmls_lane_f32(v43, v15, v40, 0);
          float32x2_t v46 = (float32x2_t)v25[1];
          float32x2_t v47 = vmls_lane_f32(vmla_n_f32(v39, v15, COERCE_FLOAT(*v25)), v17, v46, 0);
          float32x2_t v48 = vmls_lane_f32(v42, v17, v46, 0);
          float32x2_t v49 = vmla_lane_f32(v44, v17, v46, 1);
          float32x2_t v50 = vmla_lane_f32(vmla_n_f32(v45, v15, COERCE_FLOAT(*v25)), v17, v46, 1);
          unint64_t v51 = (unint64_t)a1[2];
          if ((unint64_t)v9 >= v51)
          {
            id v52 = v5;
            v53 = *a1;
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*a1) >> 4);
            unint64_t v55 = v54 + 1;
            if (v54 + 1 > 0x555555555555555) {
              sub_25B3FBC4C();
            }
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (void)v53) >> 4);
            if (2 * v56 > v55) {
              unint64_t v55 = 2 * v56;
            }
            if (v56 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v57 = 0x555555555555555;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              float32x2_t v64 = v47;
              float32x2_t v65 = v48;
              float32x2_t v66 = v49;
              float32x2_t v67 = v50;
              if (v57 > 0x555555555555555) {
                sub_25B3FA70C();
              }
              v58 = (char *)operator new(48 * v57);
              float32x2_t v49 = v66;
              float32x2_t v50 = v67;
              float32x2_t v47 = v64;
              float32x2_t v48 = v65;
            }
            else
            {
              v58 = 0;
            }
            uint64_t v59 = (float32x2_t *)&v58[48 * v54];
            *uint64_t v59 = v47;
            v59[1] = v48;
            v59[2] = v49;
            v59[3] = v50;
            v59[4] = v15;
            v59[5] = v17;
            if (v9 == v53)
            {
              v53 = v9;
              uint64_t v60 = &v58[48 * v54];
              id v5 = v52;
            }
            else
            {
              uint64_t v60 = &v58[48 * v54];
              id v5 = v52;
              do
              {
                long long v61 = *(_OWORD *)v9[-6].f32;
                long long v62 = *(_OWORD *)v9[-2].f32;
                *((_OWORD *)v60 - 2) = *(_OWORD *)v9[-4].f32;
                *((_OWORD *)v60 - 1) = v62;
                *((_OWORD *)v60 - 3) = v61;
                v60 -= 48;
                v9 -= 6;
              }
              while (v9 != v53);
            }
            int32x2_t v9 = v59 + 6;
            *a1 = (float32x2_t *)v60;
            a1[1] = v59 + 6;
            a1[2] = (float32x2_t *)&v58[48 * v57];
            if (v53) {
              operator delete(v53);
            }
            uint64_t v8 = v63;
          }
          else
          {
            *int32x2_t v9 = v47;
            v9[1] = v48;
            v9[2] = v49;
            v9[3] = v50;
            v9[4] = v15;
            v9[5] = v17;
            v9 += 6;
          }
          a1[1] = v9;
          operator delete(v25);
        }
        ++v12;
      }
      while (v12 != v8);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v72, v76, 16);
    }
    while (v8);
  }
}

void sub_25B4D0194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  float32x2_t v22 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + 8) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void sub_25B4D021C(char **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  v62[0] = (float32x2_t)sub_25B477C40(v5).n128_u64[0];
  v62[1] = v9;
  float32x2_t v45 = __p;
  float32x2_t v46 = v52;
  while (objc_msgSend_count(v6, v10, v11, v45, v46) > v7)
  {
    __n128 v13 = objc_msgSend_objectAtIndexedSubscript_(v6, v12, v7);
    float32x2_t v16 = objc_msgSend_identifier(v13, v14, v15);
    float32x2_t v19 = objc_msgSend_identifier(v5, v17, v18);
    char isEqual = objc_msgSend_isEqual_(v16, v20, (uint64_t)v19);

    if (isEqual) {
      goto LABEL_32;
    }
    v61[0] = (float32x2_t)sub_25B477C40(v13).n128_u64[0];
    v61[1] = v22;
    sub_25B4D4E4C((uint64_t)v56, v62, v61, flt_26A501CC8);
    if (LODWORD(v56[0]) <= 1)
    {
      sub_25B4D0678((uint64_t)&v47, v7, v56);
      unint64_t v23 = (unint64_t)a1[2];
      if ((unint64_t)v8 < v23)
      {
        *(void *)uint64_t v8 = v47;
        long long v25 = v49;
        long long v24 = v50;
        __int16 v26 = v51;
        *(_OWORD *)(v8 + 8) = v48;
        *((_WORD *)v8 + 28) = v26;
        *(_OWORD *)(v8 + 40) = v24;
        *(_OWORD *)(v8 + 24) = v25;
        *((void *)v8 + 9) = 0;
        *((void *)v8 + 10) = 0;
        *((void *)v8 + 8) = 0;
        *((_OWORD *)v8 + 4) = *(_OWORD *)v52;
        *((void *)v8 + 10) = v53;
        *((void *)v8 + 11) = 0;
        *float32x2_t v46 = 0;
        v46[1] = 0;
        v46[2] = 0;
        *((void *)v8 + 12) = 0;
        *((void *)v8 + 13) = 0;
        *(_OWORD *)(v8 + 88) = *(_OWORD *)__p;
        *((void *)v8 + 13) = v55;
        *float32x2_t v45 = 0;
        v45[1] = 0;
        v45[2] = 0;
        int32x2_t v27 = v8 + 112;
        a1[1] = v8 + 112;
LABEL_25:
        if (v52[0])
        {
          v52[1] = v52[0];
          operator delete(v52[0]);
        }
        goto LABEL_27;
      }
      float32x2_t v28 = *a1;
      uint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4);
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) > 0x249249249249249) {
        sub_25B3FBC4C();
      }
      unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - (void)v28) >> 4);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x124924924924924) {
        unint64_t v32 = 0x249249249249249;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32 > 0x249249249249249) {
        sub_25B3FA70C();
      }
      int32x2_t v33 = (char *)operator new(112 * v32);
      long long v34 = v49;
      float32x2_t v35 = &v33[112 * v29];
      *(_OWORD *)(v35 + 8) = v48;
      float32x2_t v36 = &v33[112 * v32];
      *(void *)float32x2_t v35 = v47;
      *(_OWORD *)(v35 + 24) = v34;
      *(_OWORD *)(v35 + 40) = v50;
      *((_WORD *)v35 + 28) = v51;
      *((_OWORD *)v35 + 4) = *(_OWORD *)v52;
      *((void *)v35 + 10) = v53;
      v46[1] = 0;
      v46[2] = 0;
      *float32x2_t v46 = 0;
      *((void *)v35 + 13) = 0;
      *(_OWORD *)(v35 + 88) = *(_OWORD *)__p;
      *((void *)v35 + 13) = v55;
      *float32x2_t v45 = 0;
      v45[1] = 0;
      int32x2_t v27 = v35 + 112;
      v45[2] = 0;
      if (v8 == v28)
      {
        *a1 = v35;
        a1[1] = v27;
        a1[2] = v36;
        if (v8) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v37 = 0;
        do
        {
          uint64_t v38 = &v35[v37];
          float32x2_t v39 = &v8[v37];
          *((void *)v38 - 14) = *(void *)&v8[v37 - 112];
          long long v40 = *(_OWORD *)&v8[v37 - 104];
          long long v41 = *(_OWORD *)&v8[v37 - 88];
          long long v42 = *(_OWORD *)&v8[v37 - 72];
          *((_WORD *)v38 - 28) = *(_WORD *)&v8[v37 - 56];
          *(_OWORD *)(v38 - 72) = v42;
          *(_OWORD *)(v38 - 88) = v41;
          *(_OWORD *)(v38 - 104) = v40;
          *((void *)v38 - 5) = 0;
          *((void *)v38 - 4) = 0;
          *((void *)v38 - 6) = 0;
          *((_OWORD *)v38 - 3) = *(_OWORD *)&v8[v37 - 48];
          *((void *)v38 - 4) = *(void *)&v8[v37 - 32];
          *((void *)v39 - 6) = 0;
          *((void *)v39 - 5) = 0;
          *((void *)v39 - 4) = 0;
          *((void *)v38 - 3) = 0;
          *((void *)v38 - 2) = 0;
          *((void *)v38 - 1) = 0;
          *(_OWORD *)(v38 - 24) = *(_OWORD *)&v8[v37 - 24];
          *((void *)v38 - 1) = *(void *)&v8[v37 - 8];
          *((void *)v39 - 3) = 0;
          *((void *)v39 - 2) = 0;
          *((void *)v39 - 1) = 0;
          v37 -= 112;
        }
        while (&v8[v37] != v28);
        float32x2_t v43 = *a1;
        uint64_t v8 = a1[1];
        *a1 = &v35[v37];
        a1[1] = v27;
        a1[2] = v36;
        if (v8 != v43)
        {
          do
          {
            v8 -= 112;
            sub_25B4CC9D0(v8);
          }
          while (v8 != v43);
          uint64_t v8 = v43;
        }
        if (v8) {
LABEL_22:
        }
          operator delete(v8);
      }
      float32x2_t v44 = __p[0];
      a1[1] = v27;
      if (v44)
      {
        __p[1] = v44;
        operator delete(v44);
      }
      goto LABEL_25;
    }
    int32x2_t v27 = v8;
LABEL_27:
    if (v59)
    {
      uint64_t v60 = v59;
      operator delete(v59);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    uint64_t v8 = v27;
LABEL_32:

    ++v7;
  }
}

void sub_25B4D0600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_25B4CC5FC((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t sub_25B4D0678(uint64_t a1, int a2, long long *a3)
{
  *(_DWORD *)a1 = a2;
  long long v5 = *a3;
  long long v6 = a3[1];
  long long v7 = a3[2];
  *(_WORD *)(a1 + 56) = *((_WORD *)a3 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_25B3FCA58((void *)(a1 + 64), *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 2);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_25B3FCA58((void *)(a1 + 88), *((const void **)a3 + 10), *((void *)a3 + 11), (uint64_t)(*((void *)a3 + 11) - *((void *)a3 + 10)) >> 2);
  return a1;
}

void sub_25B4D0704(_Unwind_Exception *exception_object)
{
  __n128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B4D0720(void *a1)
{
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  return a1;
}

float sub_25B4D0764(float32x2_t *a1, float32x2_t *a2, void *a3, float a4)
{
  id v7 = a3;
  float32x2_t v8 = *a2;
  float32x2_t v9 = a2[1];
  float32x2_t v10 = *a1;
  float32x2_t v11 = a1[1];
  float32x2_t v12 = (float32x2_t)sub_25B477C40(v7).n128_u64[0];
  float32x2_t v14 = vsub_f32(v9, v8);
  float v15 = vaddv_f32(vmul_f32(vsub_f32(v11, v8), v14));
  float v16 = vaddv_f32(vmul_f32(v14, v14));
  if (v16 < 0.000001) {
    float v16 = 0.000001;
  }
  float32x2_t v17 = vsub_f32(vmul_f32(vadd_f32(vmla_n_f32(v8, v14, vaddv_f32(vmul_f32(vsub_f32(v10, v8), v14)) / v16), vmla_n_f32(v8, v14, v15 / v16)), (float32x2_t)0x3F0000003F000000), vmul_f32(vadd_f32(v12, v13), (float32x2_t)0x3F0000003F000000));
  float v18 = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
  if (a4 <= 0.0) {
    float v19 = v18;
  }
  else {
    float v19 = (float)(v18 + a4) * 0.5;
  }

  return v19;
}

void sub_25B4D0848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D0858(void *a1, void *a2, void *a3, void *a4)
{
  v185 = a1;
  uint64_t v239 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v189 = a3;
  long long v231 = 0u;
  long long v232 = 0u;
  int v233 = 1065353216;
  v194 = v5;
  if (!objc_msgSend_count(v5, v6, v7) || !objc_msgSend_count(v189, v8, v9))
  {
    void *v185 = v5;
    id v181 = v189;
    v185[2] = 0;
    v185[1] = v181;
    v185[3] = 0;
    v185[4] = 0;
    sub_25B4D21A8(v185 + 2, 0, 0, 0);
    sub_25B4D2240((uint64_t)(v185 + 5), (uint64_t)&v231);
    sub_25B414644((uint64_t)&v231);
    goto LABEL_121;
  }
  memset(v229, 0, sizeof(v229));
  int v230 = 1065353216;
  memset(v227, 0, sizeof(v227));
  int v228 = 1065353216;
  float32x2_t v12 = (_OWORD *)*a4;
  if (a4[1] == *a4) {
    goto LABEL_68;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v188 = v11;
    float32x2_t v13 = objc_msgSend_objectAtIndexedSubscript_(v189, v10, v11, v185);
    sub_25B4CFA98(&v225, v13, v194);
    if (!v226) {
      goto LABEL_67;
    }
    v191 = v13;
    unint64_t v192 = 0;
    v190 = (void **)&v12[3 * v188];
    unint64_t v223 = sub_25B477C40(v225).n128_u64[0];
    float32x2_t v224 = v14;
    while (objc_msgSend_count(v194, v15, v16) > v192)
    {
      float v18 = objc_msgSend_objectAtIndexedSubscript_(v194, v17, v192);
      unint64_t v23 = objc_msgSend_identifier(v18, v19, v20);
      v193 = v18;
      if (!v226) {
        sub_25B4704D8();
      }
      long long v24 = v225;
      long long v25 = objc_msgSend_identifier(v225, v21, v22);
      char isEqual = objc_msgSend_isEqual_(v23, v26, (uint64_t)v25);

      if ((isEqual & 1) == 0)
      {
        unint64_t v30 = objc_msgSend_identifier(v18, v28, v29);
        objc_msgSend_UUIDString(v30, v31, v32);
        id v33 = objc_claimAutoreleasedReturnValue();
        float32x2_t v36 = (char *)objc_msgSend_UTF8String(v33, v34, v35);
        sub_25B403500(v221, v36);

        float32x2_t v39 = objc_msgSend_identifier(v191, v37, v38);
        objc_msgSend_UUIDString(v39, v40, v41);
        id v42 = objc_claimAutoreleasedReturnValue();
        float32x2_t v45 = (char *)objc_msgSend_UTF8String(v42, v43, v44);
        sub_25B403500(v219, v45);

        unint64_t v217 = sub_25B477C40(v18).n128_u64[0];
        float32x2_t v218 = v46;
        v210[0] = *v190;
        v210[1] = v190[1];
        float v47 = sub_25B3FCCE0((float32x2_t *)&v217, (float32x2_t *)v210, 0);
        int v48 = sub_25B4D18E4((uint64_t)v190, (uint64_t)&v217);
        int v49 = sub_25B4D18E4((uint64_t)v190, (uint64_t)&v218);
        if ((v48 | v49) != 1 || v47 > *(float *)&dword_26A501CDC && v47 < (float)(180.0 - *(float *)&dword_26A501CDC)) {
          goto LABEL_34;
        }
        sub_25B4D4E4C((uint64_t)v210, (float32x2_t *)&v223, (float32x2_t *)&v217, flt_26A501CC8);
        if (LODWORD(v210[0]) < 3 || *((float *)&v211 + 2) < 0.5)
        {
          if (v215)
          {
            v216 = v215;
            operator delete(v215);
          }
          if (v213)
          {
            v214 = v213;
            operator delete(v213);
          }
        }
        else
        {
          sub_25B4D1CEC((uint64_t)v229, (unsigned __int8 *)v221, (uint64_t)v221);
          float32x2_t v50 = (float32x2_t)v223;
          float32x2_t v51 = v224;
          float32x2_t v53 = (float32x2_t)v217;
          float32x2_t v52 = v218;
          *(void *)&long long v207 = v219;
          unint64_t v54 = sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)&v207);
          float32x2_t v55 = vsub_f32(v51, v50);
          float v56 = vaddv_f32(vmul_f32(vsub_f32(v53, v50), v55));
          float v57 = vaddv_f32(vmul_f32(v55, v55));
          if (v57 < 0.000001) {
            float v57 = 0.000001;
          }
          float32x2_t v58 = vsub_f32(vmla_n_f32(v50, v55, v56 / v57), v53);
          int32x2_t v59 = (int32x2_t)vmul_f32(v58, v58);
          float32x2_t v60 = vsub_f32(vmla_n_f32(v50, v55, vaddv_f32(vmul_f32(v55, vsub_f32(v52, v50))) / v57), v52);
          int32x2_t v61 = (int32x2_t)vmul_f32(v60, v60);
          *((float *)v54 + 10) = vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v59, v61), (float32x2_t)vzip2_s32(v59, v61))))
                               * 0.5;
          id v62 = v18;
          id v65 = v189;
          unint64_t v66 = 0;
          long long v207 = 0u;
          long long v208 = 0u;
          int v209 = 1065353216;
          while (objc_msgSend_count(v65, v63, v64) > v66)
          {
            int8x8_t v68 = objc_msgSend_objectAtIndexedSubscript_(v65, v67, v66);
            char v71 = objc_msgSend_identifier(v62, v69, v70);
            long long v74 = objc_msgSend_parentIdentifier(v68, v72, v73);
            int v76 = objc_msgSend_isEqual_(v71, v75, (uint64_t)v74);

            if (v76)
            {
              uint64_t v79 = objc_msgSend_identifier(v68, v77, v78);
              objc_msgSend_UUIDString(v79, v80, v81);
              id v82 = objc_claimAutoreleasedReturnValue();
              float v85 = (char *)objc_msgSend_UTF8String(v82, v83, v84);
              sub_25B403500(__p, v85);
              sub_25B414308((uint64_t)&v207, (unsigned __int8 *)__p, (uint64_t)__p);
              if (v235 < 0) {
                operator delete(__p[0]);
              }
            }
            ++v66;
          }

          for (uint64_t i = (unsigned __int8 *)v208; i; uint64_t i = *(unsigned __int8 **)i)
            sub_25B4D1CEC((uint64_t)v227, i + 16, (uint64_t)(i + 16));
          sub_25B414644((uint64_t)&v207);
          if (v215)
          {
            v216 = v215;
            operator delete(v215);
          }
          if (v213)
          {
            v214 = v213;
            operator delete(v213);
          }
LABEL_34:
          if ((v48 & v49) == 1
            && v47 >= (float)(90.0 - *(float *)&dword_26A501CDC)
            && v47 <= (float)(*(float *)&dword_26A501CDC + 90.0))
          {
            sub_25B4D021C((char **)v210, v193, v194);
            float32x2_t v89 = v210[0];
            float32x2_t v90 = v210[1];
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v210[1] - (char *)v210[0]) >> 4)) <= 1)
            {
              sub_25B4D1CEC((uint64_t)v229, (unsigned __int8 *)v221, (uint64_t)v221);
              __p[0] = v219;
              int32x2_t v91 = sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p);
              float v92 = sub_25B4D0764((float32x2_t *)&v217, (float32x2_t *)&v223, v191, *((float *)v91 + 11));
              __p[0] = v219;
              *((float *)sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p) + 11) = v92;
              float32x2_t v89 = v210[0];
              float32x2_t v90 = v210[1];
            }
            if (v90 - (unsigned char *)v89 == 224)
            {
              int v93 = v89[2];
              if (v93 == 1 || (int v94 = v89[30], v94 == 1))
              {
                sub_25B4D1CEC((uint64_t)v229, (unsigned __int8 *)v221, (uint64_t)v221);
                __p[0] = v219;
                float v95 = sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p);
                float v96 = sub_25B4D0764((float32x2_t *)&v217, (float32x2_t *)&v223, v191, *((float *)v95 + 11));
                __p[0] = v219;
                *((float *)sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p) + 11) = v96;
              }
              else if (!(v94 | v93))
              {
                v97 = objc_msgSend_objectAtIndexedSubscript_(v194, v88, *(void *)v89);
                uint64_t v100 = objc_msgSend_identifier(v97, v98, v99);
                v103 = objc_msgSend_identifier(v24, v101, v102);
                unsigned int v105 = objc_msgSend_isEqual_(v100, v104, (uint64_t)v103);

                uint64_t v106 = *((void *)v210[0] + 14 * v105);
                long long v203 = 0u;
                long long v204 = 0u;
                long long v205 = 0u;
                long long v206 = 0u;
                id v107 = v189;
                uint64_t v110 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v108, (uint64_t)&v203, v238, 16);
                if (v110)
                {
                  uint64_t v111 = *(void *)v204;
                  float32x2_t v112 = (float32x2_t)v223;
                  float32x2_t v113 = v224;
                  do
                  {
                    for (uint64_t j = 0; j != v110; ++j)
                    {
                      if (*(void *)v204 != v111) {
                        objc_enumerationMutation(v107);
                      }
                      v115 = *(void **)(*((void *)&v203 + 1) + 8 * j);
                      uint64_t v116 = objc_msgSend_objectAtIndexedSubscript_(v194, v109, v106);
                      uint64_t v119 = objc_msgSend_identifier(v116, v117, v118);
                      float32x2_t v122 = objc_msgSend_parentIdentifier(v115, v120, v121);
                      LODWORD(v115) = objc_msgSend_isEqual_(v119, v123, (uint64_t)v122);

                      if (v115)
                      {
                        v124 = objc_msgSend_objectAtIndexedSubscript_(v194, v109, v106);
                        float32x2_t v125 = (float32x2_t)sub_25B477C40(v124).n128_u64[0];
                        float32x2_t v127 = v126;

                        float v128 = sub_25B40E468(v125, v127, v112, v113);
                        float v129 = sub_25B40E468(v112, v113, v125, v127);
                        if (v128 >= v129) {
                          float v129 = v128;
                        }
                        if (v129 > 0.5)
                        {
                          sub_25B4D1CEC((uint64_t)v229, (unsigned __int8 *)v221, (uint64_t)v221);
                          __p[0] = v219;
                          int32x2_t v130 = sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p);
                          float v131 = sub_25B4D0764((float32x2_t *)&v217, (float32x2_t *)&v223, v191, *((float *)v130 + 11));
                          __p[0] = v219;
                          *((float *)sub_25B4D1F44((uint64_t)&v231, (unsigned __int8 *)v219, (long long **)__p) + 11) = v131;
                        }
                      }
                    }
                    uint64_t v110 = objc_msgSend_countByEnumeratingWithState_objects_count_(v107, v109, (uint64_t)&v203, v238, 16);
                  }
                  while (v110);
                }
              }
            }
            *(void *)&long long v207 = v210;
            sub_25B4CC5FC((void ***)&v207);
          }
        }
        if (v220 < 0) {
          operator delete(v219[0]);
        }
        if (v222 < 0) {
          operator delete(v221[0]);
        }
      }

      float32x2_t v13 = v191;
      ++v192;
    }
    if (v226)
    {

      float32x2_t v13 = v191;
    }
LABEL_67:

    uint64_t v11 = v188 + 1;
    float32x2_t v12 = (_OWORD *)*a4;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 4) > v188 + 1);
LABEL_68:
  float32x2_t v132 = objc_msgSend_array(MEMORY[0x263EFF980], v10, v11, v185);
  long long v201 = 0u;
  long long v202 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  id v133 = v194;
  uint64_t v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(v133, v134, (uint64_t)&v199, v237, 16);
  if (v137)
  {
    uint64_t v138 = *(void *)v200;
    do
    {
      for (uint64_t k = 0; k != v137; ++k)
      {
        if (*(void *)v200 != v138) {
          objc_enumerationMutation(v133);
        }
        float32x2_t v140 = *(void **)(*((void *)&v199 + 1) + 8 * k);
        v141 = objc_msgSend_identifier(v140, v135, v136);
        objc_msgSend_UUIDString(v141, v142, v143);
        id v144 = objc_claimAutoreleasedReturnValue();
        v147 = (char *)objc_msgSend_UTF8String(v144, v145, v146);
        sub_25B403500(v210, v147);

        if (!sub_25B414548(v229, (unsigned __int8 *)v210)) {
          objc_msgSend_addObject_(v132, v135, (uint64_t)v140);
        }
        if (SBYTE7(v211) < 0) {
          operator delete(v210[0]);
        }
      }
      uint64_t v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(v133, v135, (uint64_t)&v199, v237, 16);
    }
    while (v137);
  }

  v150 = objc_msgSend_array(MEMORY[0x263EFF980], v148, v149);
  long long v197 = 0u;
  long long v198 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  id v151 = v189;
  uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v152, (uint64_t)&v195, v236, 16);
  if (v155)
  {
    uint64_t v156 = *(void *)v196;
    do
    {
      for (uint64_t m = 0; m != v155; ++m)
      {
        if (*(void *)v196 != v156) {
          objc_enumerationMutation(v151);
        }
        v158 = *(void **)(*((void *)&v195 + 1) + 8 * m);
        v159 = objc_msgSend_identifier(v158, v153, v154);
        objc_msgSend_UUIDString(v159, v160, v161);
        id v162 = objc_claimAutoreleasedReturnValue();
        v165 = (char *)objc_msgSend_UTF8String(v162, v163, v164);
        sub_25B403500(v210, v165);

        if (!sub_25B414548(v227, (unsigned __int8 *)v210)) {
          objc_msgSend_addObject_(v150, v153, (uint64_t)v158);
        }
        if (SBYTE7(v211) < 0) {
          operator delete(v210[0]);
        }
      }
      uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v153, (uint64_t)&v195, v236, 16);
    }
    while (v155);
  }

  v166 = (_OWORD *)*a4;
  v167 = (_OWORD *)a4[1];
  if ((_OWORD *)*a4 == v167)
  {
    v169 = 0;
    v170 = 0;
  }
  else
  {
    unint64_t v168 = 0;
    v169 = 0;
    v170 = 0;
    do
    {
      if ((unint64_t)v169 >= v168)
      {
        uint64_t v172 = (v169 - v170) >> 5;
        unint64_t v173 = v172 + 1;
        if ((unint64_t)(v172 + 1) >> 59) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v168 - (void)v170) >> 4 > v173) {
          unint64_t v173 = (uint64_t)(v168 - (void)v170) >> 4;
        }
        if (v168 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v174 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v174 = v173;
        }
        if (v174) {
          unint64_t v174 = (unint64_t)sub_25B3FBC9C(v174);
        }
        else {
          uint64_t v175 = 0;
        }
        long long v176 = v166[1];
        v177 = (_OWORD *)(v174 + 32 * v172);
        _OWORD *v177 = *v166;
        v177[1] = v176;
        if (v169 == v170)
        {
          v180 = (char *)(v174 + 32 * v172);
        }
        else
        {
          unint64_t v178 = v174 + 32 * v172;
          do
          {
            long long v179 = *((_OWORD *)v169 - 1);
            v180 = (char *)(v178 - 32);
            *(_OWORD *)(v178 - 32) = *((_OWORD *)v169 - 2);
            *(_OWORD *)(v178 - 16) = v179;
            v169 -= 32;
            v178 -= 32;
          }
          while (v169 != v170);
        }
        unint64_t v168 = v174 + 32 * v175;
        v169 = (char *)(v177 + 2);
        if (v170) {
          operator delete(v170);
        }
        v170 = v180;
      }
      else
      {
        long long v171 = v166[1];
        *(_OWORD *)v169 = *v166;
        *((_OWORD *)v169 + 1) = v171;
        v169 += 32;
      }
      v166 += 3;
    }
    while (v166 != v167);
  }
  *(_OWORD *)v210 = 0u;
  long long v211 = 0u;
  int v212 = 1065353216;
  for (n = (unsigned __int8 *)v232; n; n = *(unsigned __int8 **)n)
  {
    if (!sub_25B414548(v227, n + 16))
    {
      *(void *)&long long v207 = n + 16;
      *((void *)sub_25B4D1F44((uint64_t)v210, n + 16, (long long **)&v207) + 5) = *((void *)n + 5);
    }
  }
  id v183 = v132;
  void *v186 = v183;
  id v184 = v150;
  v186[2] = 0;
  v186[1] = v184;
  v186[3] = 0;
  v186[4] = 0;
  sub_25B4D21A8(v186 + 2, v170, (uint64_t)v169, (v169 - v170) >> 5);
  sub_25B4D2240((uint64_t)(v186 + 5), (uint64_t)v210);
  sub_25B414644((uint64_t)v210);

  sub_25B414644((uint64_t)v227);
  sub_25B414644((uint64_t)v229);
  sub_25B414644((uint64_t)&v231);
  if (v170) {
    operator delete(v170);
  }
LABEL_121:
}

void sub_25B4D1548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  unint64_t v54 = *v52;
  if (*v52)
  {
    *(void *)(a9 + 24) = v54;
    operator delete(v54);
  }

  sub_25B414644((uint64_t)&a49);
  sub_25B414644((uint64_t)&STACK[0x210]);
  sub_25B414644((uint64_t)&STACK[0x240]);
  sub_25B414644((uint64_t)&STACK[0x270]);
  if (v51) {
    operator delete(v51);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_25B4D18E4(uint64_t a1, uint64_t a2)
{
  if (a2 && a1) {
    operator new[]();
  }
  return 0;
}

void sub_25B4D1CEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float32x2_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float v15 = operator new(0x28uLL);
  void *v15 = 0;
  v15[1] = v8;
  uint64_t v16 = v15 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_25B4002F4(v16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
    v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_25B3FA4B0(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v15 = *v24;
LABEL_41:
    *long long v24 = v15;
    goto LABEL_42;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_25B4D1F20(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

char *sub_25B4D1F44(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float32x2_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float32x2_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_25B403F44((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float32x2_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  float32x2_t v13 = (char *)operator new(0x30uLL);
  *(void *)float32x2_t v13 = 0;
  *((void *)v13 + 1) = v8;
  float v15 = v13 + 16;
  uint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)float v15 = v17;
  }
  *((void *)v13 + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_25B3FA4B0(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)float32x2_t v13 = *v25;
LABEL_41:
    *unint64_t v25 = v13;
    goto LABEL_42;
  }
  *(void *)float32x2_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_25B4D2184(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

void *sub_25B4D21A8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __n128 v4 = result;
    if (a4 >> 59) {
      sub_25B3FBC4C();
    }
    result = sub_25B3FBC9C(a4);
    unint64_t v7 = result;
    *__n128 v4 = result;
    v4[1] = result;
    v4[2] = &result[4 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_25B4D2224(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4D2240(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_25B3FA4B0(a1, *(void *)(a2 + 8));
  id v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = sub_25B403AF4((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        float32x2_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (sub_25B403F44(i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      float v15 = operator new(0x30uLL);
      void *v15 = 0;
      v15[1] = v8;
      uint64_t v16 = v15 + 2;
      if ((char)v5[39] < 0)
      {
        sub_25B4002F4(v16, *((void **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((void *)v5 + 4);
        *(_OWORD *)uint64_t v16 = v17;
      }
      v15[5] = *((void *)v5 + 5);
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        sub_25B3FA4B0(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void *)a1;
      unint64_t v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        void *v15 = *v25;
      }
      else
      {
        void *v15 = *v6;
        *long long v6 = v15;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      *unint64_t v25 = v15;
LABEL_43:
      ++*(void *)(a1 + 24);
LABEL_44:
      id v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_25B4D24A4(_Unwind_Exception *a1)
{
  sub_25B414644(v1);
  _Unwind_Resume(a1);
}

void sub_25B4D24DC(void *a1, long long *a2, long long *a3)
{
  id v5 = a1;
  unint64_t v11 = v5;
  if (v5)
  {
    v5[105] = 0;
    long long src = *a2;
    objc_copyStruct(v5 + 240, &src, 16, 1, 0);
    long long src = *a3;
    objc_copyStruct(v11 + 256, &src, 16, 1, 0);
    id v5 = v11;
    *((_DWORD *)v11 + 31) = 0;
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v11 + 14) = _Q0;
  }
  sub_25B4EEC88(v5);
}

void sub_25B4D2584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id *sub_25B4D259C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, void *a6, float a7, float a8)
{
  float v15 = a6;
  uint64_t v16 = objc_alloc_init(RS3DSurface);
  sub_25B477DB0(a2, (uint64_t)v16, a7, a8, v17, v18);
  if (v15)
  {
    objc_copyStruct(&dest, v15 + 240, 16, 1, 0);
    long long v62 = dest;
    objc_copyStruct(&dest, v15 + 256, 16, 1, 0);
    long long v19 = dest;
  }
  else
  {
    long long v19 = 0uLL;
    long long v62 = 0u;
  }
  long long v61 = v19;
  sub_25B4D24DC(v16, &v62, &v61);
  BOOL v20 = objc_alloc_init(RS3DSurface);
  sub_25B477DB0(a3, (uint64_t)v20, a7, a8, v21, v22);
  if (v15)
  {
    objc_copyStruct(&dest, v15 + 240, 16, 1, 0);
    long long v62 = dest;
    objc_copyStruct(&dest, v15 + 256, 16, 1, 0);
    long long v23 = dest;
  }
  else
  {
    long long v23 = 0uLL;
    long long v62 = 0u;
  }
  long long v61 = v23;
  sub_25B4D24DC(v20, &v62, &v61);
  uint64_t v24 = objc_alloc_init(RS3DSurface);
  sub_25B477DB0(a1, (uint64_t)v24, a7, a8, v25, v26);
  if (v15)
  {
    objc_copyStruct(&dest, v15 + 240, 16, 1, 0);
    long long v62 = dest;
    objc_copyStruct(&dest, v15 + 256, 16, 1, 0);
    long long v27 = dest;
  }
  else
  {
    long long v27 = 0uLL;
    long long v62 = 0u;
  }
  long long v61 = v27;
  sub_25B4D24DC(v24, &v62, &v61);
  unint64_t v30 = objc_msgSend_identifier(v15, v28, v29);
  id v33 = objc_msgSend_copy(v30, v31, v32);
  sub_25B4FD504((uint64_t)v24, v33);

  long long v34 = objc_alloc_init(RS3DSurface);
  sub_25B477DB0(a4, (uint64_t)v34, a7, a8, v35, v36);
  if (v15)
  {
    objc_copyStruct(&dest, v15 + 240, 16, 1, 0);
    long long v62 = dest;
    objc_copyStruct(&dest, v15 + 256, 16, 1, 0);
    long long v37 = dest;
  }
  else
  {
    long long v37 = 0uLL;
    long long v62 = 0u;
  }
  long long v61 = v37;
  sub_25B4D24DC(v34, &v62, &v61);
  uint64_t v38 = objc_alloc_init(RS3DSurface);
  sub_25B477DB0(a5, (uint64_t)v38, a7, a8, v39, v40);
  if (v15)
  {
    objc_copyStruct(&dest, v15 + 240, 16, 1, 0);
    long long v62 = dest;
    objc_copyStruct(&dest, v15 + 256, 16, 1, 0);
    long long v41 = dest;
  }
  else
  {
    long long v41 = 0uLL;
    long long v62 = 0u;
  }
  long long v61 = v41;
  sub_25B4D24DC(v38, &v62, &v61);
  uint64_t v44 = objc_msgSend_identifier(v34, v42, v43);
  float v47 = objc_msgSend_copy(v44, v45, v46);
  sub_25B4FD504((uint64_t)v38, v47);

  float32x2_t v50 = objc_msgSend_array(MEMORY[0x263EFF980], v48, v49);
  objc_msgSend_addObject_(v50, v51, (uint64_t)v16);
  objc_msgSend_addObject_(v50, v52, (uint64_t)v20);
  objc_msgSend_addObject_(v50, v53, (uint64_t)v34);
  float v56 = objc_msgSend_array(MEMORY[0x263EFF980], v54, v55);
  objc_msgSend_addObject_(v56, v57, (uint64_t)v38);
  float32x2_t v58 = objc_alloc_init(RSRecessedArea);
  p_isa = (id *)&v58->super.isa;
  if (v58)
  {
    objc_storeStrong((id *)&v58->recessedWalls, v50);
    objc_storeStrong(p_isa + 2, v56);
    objc_storeStrong(p_isa + 3, v24);
  }

  return p_isa;
}

void sub_25B4D29A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D2A50(void *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  id v2 = v1;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  if (v1) {
    unint64_t v3 = (void *)v1[1];
  }
  else {
    unint64_t v3 = 0;
  }
  id v4 = v3;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v24, v29, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v24 + 1) + 8 * i);
        if (v10) {
          *(unsigned char *)(v10 + 105) = 1;
        }
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v24, v29, 16);
    }
    while (v7);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  if (v2) {
    unint64_t v11 = (void *)*((void *)v2 + 2);
  }
  else {
    unint64_t v11 = 0;
  }
  id v12 = v11;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v20, v28, 16);
  if (v15)
  {
    uint64_t v16 = *(void *)v21;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v21 != v16) {
          objc_enumerationMutation(v12);
        }
        uint64_t v18 = *(void *)(*((void *)&v20 + 1) + 8 * j);
        if (v18) {
          *(unsigned char *)(v18 + 105) = 1;
        }
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v14, (uint64_t)&v20, v28, 16);
    }
    while (v15);
  }

  if (v2)
  {
    long long v19 = *((id *)v2 + 3);
    if (v19) {
      v19[105] = 1;
    }
  }
  else
  {
    long long v19 = 0;
  }
}

void sub_25B4D2C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D2C68(void *a1, void *a2)
{
  unint64_t v54 = a1;
  unint64_t v3 = a2;
  unint64_t v4 = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_2:
  for (uint64_t i = (void *)v3[1]; ; uint64_t i = 0)
  {
    id v6 = i;
    unint64_t v9 = objc_msgSend_count(v6, v7, v8);

    if (v9 <= v4) {
      break;
    }
    if (v54) {
      uint64_t v10 = (void *)v54[1];
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = v10;
    float32x2_t v13 = objc_msgSend_objectAtIndexedSubscript_(v11, v12, v4);
    uint64_t v16 = objc_msgSend_identifier(v13, v14, v15);
    long long v19 = objc_msgSend_copy(v16, v17, v18);
    if (v3) {
      long long v20 = (void *)v3[1];
    }
    else {
      long long v20 = 0;
    }
    id v21 = v20;
    long long v23 = objc_msgSend_objectAtIndexedSubscript_(v21, v22, v4);
    sub_25B4FD4F4((uint64_t)v23, v19);

    ++v4;
    if (v3) {
      goto LABEL_2;
    }
LABEL_9:
    ;
  }
  unint64_t v24 = 0;
  if (!v3) {
    goto LABEL_20;
  }
LABEL_13:
  for (uint64_t j = (void *)v3[2]; ; uint64_t j = 0)
  {
    id v26 = j;
    unint64_t v29 = objc_msgSend_count(v26, v27, v28);

    if (v29 <= v24) {
      break;
    }
    if (v54) {
      uint64_t v30 = (void *)v54[2];
    }
    else {
      uint64_t v30 = 0;
    }
    id v31 = v30;
    id v33 = objc_msgSend_objectAtIndexedSubscript_(v31, v32, v24);
    __n128 v36 = objc_msgSend_identifier(v33, v34, v35);
    __n128 v39 = objc_msgSend_copy(v36, v37, v38);
    if (v3) {
      __n128 v40 = (void *)v3[2];
    }
    else {
      __n128 v40 = 0;
    }
    id v41 = v40;
    uint64_t v43 = objc_msgSend_objectAtIndexedSubscript_(v41, v42, v24);
    sub_25B4FD4F4((uint64_t)v43, v39);

    ++v24;
    if (v3) {
      goto LABEL_13;
    }
LABEL_20:
    ;
  }
  if (v54) {
    uint64_t v44 = (void *)v54[3];
  }
  else {
    uint64_t v44 = 0;
  }
  id v45 = v44;
  int v48 = objc_msgSend_identifier(v45, v46, v47);
  float32x2_t v51 = objc_msgSend_copy(v48, v49, v50);
  if (v3) {
    float32x2_t v52 = (void *)v3[3];
  }
  else {
    float32x2_t v52 = 0;
  }
  id v53 = v52;
  sub_25B4FD4F4((uint64_t)v53, v51);
}

void sub_25B4D2EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D2F14(char **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  v61[0] = (float32x2_t)sub_25B477C40(v5).n128_u64[0];
  v61[1] = v9;
  id v45 = v51;
  while (objc_msgSend_count(v6, v10, v11, v45) > v7)
  {
    float32x2_t v13 = objc_msgSend_objectAtIndexedSubscript_(v6, v12, v7);
    uint64_t v16 = objc_msgSend_identifier(v13, v14, v15);
    long long v19 = objc_msgSend_identifier(v5, v17, v18);
    char isEqual = objc_msgSend_isEqual_(v16, v20, (uint64_t)v19);

    if (isEqual) {
      goto LABEL_32;
    }
    v60[0] = (float32x2_t)sub_25B477C40(v13).n128_u64[0];
    v60[1] = v22;
    sub_25B4D4E4C((uint64_t)v55, v61, v60, flt_26A501CC8);
    if (BYTE12(v55[0]))
    {
      sub_25B4D0678((uint64_t)&v46, v7, v55);
      unint64_t v23 = (unint64_t)a1[2];
      if ((unint64_t)v8 < v23)
      {
        *(_DWORD *)uint64_t v8 = v46;
        long long v24 = v47;
        long long v25 = v48;
        long long v26 = v49;
        *((_WORD *)v8 + 28) = v50;
        *(_OWORD *)(v8 + 40) = v26;
        *(_OWORD *)(v8 + 24) = v25;
        *(_OWORD *)(v8 + 8) = v24;
        *((void *)v8 + 9) = 0;
        *((void *)v8 + 10) = 0;
        *((void *)v8 + 8) = 0;
        *((_OWORD *)v8 + 4) = *(_OWORD *)v51;
        *((void *)v8 + 10) = v52;
        *((void *)v8 + 11) = 0;
        *id v45 = 0;
        v45[1] = 0;
        v45[2] = 0;
        *((void *)v8 + 12) = 0;
        *((void *)v8 + 13) = 0;
        *(_OWORD *)(v8 + 88) = *(_OWORD *)__p;
        *((void *)v8 + 13) = v54;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v54 = 0;
        long long v27 = v8 + 112;
        a1[1] = v8 + 112;
LABEL_25:
        if (v51[0])
        {
          v51[1] = v51[0];
          operator delete(v51[0]);
        }
        goto LABEL_27;
      }
      uint64_t v28 = *a1;
      uint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4);
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) > 0x249249249249249) {
        sub_25B3FBC4C();
      }
      unint64_t v31 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - (void)v28) >> 4);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x124924924924924) {
        unint64_t v32 = 0x249249249249249;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32 > 0x249249249249249) {
        sub_25B3FA70C();
      }
      id v33 = (char *)operator new(112 * v32);
      long long v34 = v48;
      uint64_t v35 = &v33[112 * v29];
      *(_OWORD *)(v35 + 8) = v47;
      __n128 v36 = &v33[112 * v32];
      *(_DWORD *)uint64_t v35 = v46;
      *(_OWORD *)(v35 + 24) = v34;
      *(_OWORD *)(v35 + 40) = v49;
      *((_WORD *)v35 + 28) = v50;
      *((_OWORD *)v35 + 4) = *(_OWORD *)v51;
      *((void *)v35 + 10) = v52;
      v45[1] = 0;
      v45[2] = 0;
      *id v45 = 0;
      *((void *)v35 + 13) = 0;
      *(_OWORD *)(v35 + 88) = *(_OWORD *)__p;
      *((void *)v35 + 13) = v54;
      __p[0] = 0;
      __p[1] = 0;
      long long v27 = v35 + 112;
      uint64_t v54 = 0;
      if (v8 == v28)
      {
        *a1 = v35;
        a1[1] = v27;
        a1[2] = v36;
        if (v8) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v37 = 0;
        do
        {
          uint64_t v38 = &v35[v37];
          __n128 v39 = &v8[v37];
          *((_DWORD *)v38 - 28) = *(_DWORD *)&v8[v37 - 112];
          long long v40 = *(_OWORD *)&v8[v37 - 104];
          long long v41 = *(_OWORD *)&v8[v37 - 88];
          long long v42 = *(_OWORD *)&v8[v37 - 72];
          *((_WORD *)v38 - 28) = *(_WORD *)&v8[v37 - 56];
          *(_OWORD *)(v38 - 72) = v42;
          *(_OWORD *)(v38 - 88) = v41;
          *(_OWORD *)(v38 - 104) = v40;
          *((void *)v38 - 5) = 0;
          *((void *)v38 - 4) = 0;
          *((void *)v38 - 6) = 0;
          *((_OWORD *)v38 - 3) = *(_OWORD *)&v8[v37 - 48];
          *((void *)v38 - 4) = *(void *)&v8[v37 - 32];
          *((void *)v39 - 6) = 0;
          *((void *)v39 - 5) = 0;
          *((void *)v39 - 4) = 0;
          *((void *)v38 - 3) = 0;
          *((void *)v38 - 2) = 0;
          *((void *)v38 - 1) = 0;
          *(_OWORD *)(v38 - 24) = *(_OWORD *)&v8[v37 - 24];
          *((void *)v38 - 1) = *(void *)&v8[v37 - 8];
          *((void *)v39 - 3) = 0;
          *((void *)v39 - 2) = 0;
          *((void *)v39 - 1) = 0;
          v37 -= 112;
        }
        while (&v8[v37] != v28);
        uint64_t v43 = *a1;
        uint64_t v8 = a1[1];
        *a1 = &v35[v37];
        a1[1] = v27;
        a1[2] = v36;
        if (v8 != v43)
        {
          do
          {
            v8 -= 112;
            sub_25B4CC9D0(v8);
          }
          while (v8 != v43);
          uint64_t v8 = v43;
        }
        if (v8) {
LABEL_22:
        }
          operator delete(v8);
      }
      uint64_t v44 = __p[0];
      a1[1] = v27;
      if (v44)
      {
        __p[1] = v44;
        operator delete(v44);
      }
      goto LABEL_25;
    }
    long long v27 = v8;
LABEL_27:
    if (v58)
    {
      int32x2_t v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      float v57 = v56;
      operator delete(v56);
    }
    uint64_t v8 = v27;
LABEL_32:

    ++v7;
  }
}

void sub_25B4D32F4(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_start(va, a3);
  sub_25B4CC5FC((void ***)va);

  _Unwind_Resume(a1);
}

void sub_25B4D3540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D3AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D3D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_25B4D3D18(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float32x2_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    result = sub_25B40F000(v7, v11);
    float32x2_t v13 = (char *)v7[1];
    id v12 = (void **)(v7 + 1);
    float32x2_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  id v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float32x2_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *id v12 = &v9[v17];
  return result;
}

void sub_25B4D3EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B4D3EC4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40F000(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_25B4D3F20(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4D3F3C(void *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1)
  {
    id v6 = (__n128 *)a1[11];
    unint64_t v7 = a1[12];
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v9 = a1[10];
      uint64_t v10 = ((uint64_t)v6 - v9) >> 6;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 58) {
        sub_25B3FBC4C();
      }
      uint64_t v12 = v7 - v9;
      if (v12 >> 5 > v11) {
        unint64_t v11 = v12 >> 5;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        __n128 v25 = a5;
        __n128 v23 = a3;
        __n128 v24 = a4;
        __n128 v22 = a2;
        unint64_t v13 = (unint64_t)sub_25B4AF474(v13);
        a2 = v22;
        a3 = v23;
        a4 = v24;
        a5 = v25;
      }
      else
      {
        uint64_t v14 = 0;
      }
      unint64_t v15 = (__n128 *)(v13 + (v10 << 6));
      unint64_t v16 = v13 + (v14 << 6);
      __n128 *v15 = a2;
      v15[1] = a3;
      v15[2] = a4;
      v15[3] = a5;
      uint64_t v8 = v15 + 4;
      uint64_t v18 = (__n128 *)a1[10];
      size_t v17 = (__n128 *)a1[11];
      if (v17 != v18)
      {
        do
        {
          __n128 v19 = v17[-4];
          __n128 v20 = v17[-3];
          __n128 v21 = v17[-1];
          v15[-2] = v17[-2];
          v15[-1] = v21;
          v15[-4] = v19;
          v15[-3] = v20;
          v15 -= 4;
          v17 -= 4;
        }
        while (v17 != v18);
        size_t v17 = (__n128 *)a1[10];
      }
      a1[10] = v15;
      a1[11] = v8;
      a1[12] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *id v6 = a2;
      v6[1] = a3;
      uint64_t v8 = v6 + 4;
      v6[2] = a4;
      v6[3] = a5;
    }
    a1[11] = v8;
  }
}

uint64_t sub_25B4D4040(uint64_t result, const char *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 104) = 0;
    objc_msgSend_removeAllObjects(*(void **)(result + 112), a2, a3);
    result = objc_msgSend_removeAllObjects(*(void **)(v3 + 120), v4, v5);
    *(void *)(v3 + 88) = *(void *)(v3 + 80);
    *(void *)(v3 + 16) = *(void *)(v3 + 8);
    *(void *)(v3 + 40) = *(void *)(v3 + 32);
    *(void *)(v3 + 64) = *(void *)(v3 + 56);
  }
  return result;
}

uint64_t sub_25B4D409C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1D10;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }

  return a1;
}

double sub_25B4D4150(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 88) = 1092616192;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 412) = 0;
  *(void *)(a1 + 404) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 544) = &unk_2708F21F8;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = 257;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 752) = 1065353216;
  *(void *)(a1 + 760) = &unk_2708F16F8;
  *(_OWORD *)(a1 + 768) = xmmword_25B5F1490;
  *(_OWORD *)(a1 + 784) = xmmword_25B5F14A0;
  *(_OWORD *)(a1 + 800) = xmmword_25B5F1070;
  *(_OWORD *)(a1 + 816) = xmmword_25B5F1080;
  *(_OWORD *)(a1 + 832) = xmmword_25B5F1090;
  *(void *)(a1 + 848) = 0x3F0000003E4CCCCDLL;
  *(void *)(a1 + 856) = 0x3F40000000000003;
  *(_DWORD *)(a1 + 864) = 3;
  *(_OWORD *)(a1 + 868) = xmmword_25B5F10A0;
  *(_OWORD *)(a1 + 884) = xmmword_25B5F10B0;
  *(_OWORD *)(a1 + 900) = xmmword_25B5F10C0;
  *(_DWORD *)(a1 + 916) = 2;
  *(void *)a1 = 0x23F800000;
  *(_OWORD *)(a1 + 8) = xmmword_25B5F14E0;
  *(_OWORD *)(a1 + 24) = xmmword_25B5F14F0;
  *(_OWORD *)(a1 + 40) = xmmword_25B5F1500;
  *(_OWORD *)(a1 + 56) = xmmword_25B5F1510;
  *(_OWORD *)(a1 + 72) = xmmword_25B5F1520;
  *(_OWORD *)(a1 + 88) = xmmword_25B5F1530;
  *(_OWORD *)(a1 + 104) = xmmword_25B5F1540;
  double result = 8192.00192;
  *(void *)(a1 + 120) = 0x40C000003F000000;
  *(_DWORD *)(a1 + 128) = 1036831949;
  return result;
}

uint64_t sub_25B4D433C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 696);
  if (v2)
  {
    *(void *)(a1 + 704) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 544) = &unk_2708F21F8;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 672);
  if (v3) {
    sub_25B404120(v3);
  }
  unint64_t v4 = *(void **)(a1 + 352);
  if (v4)
  {
    *(void *)(a1 + 360) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 328);
  if (v5)
  {
    *(void *)(a1 + 336) = v5;
    operator delete(v5);
  }
  id v6 = *(void **)(a1 + 304);
  if (v6)
  {
    *(void *)(a1 + 312) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(a1 + 280);
  if (v7)
  {
    *(void *)(a1 + 288) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(void *)(a1 + 264) = v8;
    operator delete(v8);
  }
  unint64_t v13 = (void **)(a1 + 232);
  sub_25B413C78(&v13);
  unint64_t v13 = (void **)(a1 + 208);
  sub_25B413C78(&v13);
  uint64_t v9 = *(void **)(a1 + 184);
  if (v9)
  {
    *(void *)(a1 + 192) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(void *)(a1 + 168) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 136);
  if (v11)
  {
    *(void *)(a1 + 144) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_25B4D452C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4D453C(id a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a2;
  id v9 = a3;
  if (a1)
  {
    LODWORD(v19) = 13125;
    uint64_t v20 = 0;
    kdebug_trace();
    sub_25B4EC780(v8);
    if (*((unsigned char *)a1 + 954))
    {
      kdebug_trace();
      sub_25B479810((uint64_t)a1 + 16, v8, v9, a4);
      kdebug_trace();
    }
    uint64_t v12 = objc_msgSend_objects(v8, v10, v11, v19, v20);

    if (!v12)
    {
      unint64_t v15 = objc_msgSend_array(MEMORY[0x263EFF8C0], v13, v14);
      sub_25B477C20((uint64_t)v8, v15);
    }
    sub_25B4E97D4(v8);
    sub_25B4E9AA0(v8, v16, v17);
    sub_25B4E9F44(v8);
    if (!*((unsigned char *)a1 + 956)) {
      sub_25B4E9D70((uint64_t)v8);
    }
    objc_storeStrong((id *)a1 + 120, a2);
    a1 = *((id *)a1 + 120);
    sub_25B400F2C((uint64_t)&v19);
  }

  return a1;
}

void sub_25B4D46B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4D46DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v11 = a4;
  if (a1)
  {
    if (objc_msgSend_count(v7, v9, v10))
    {
      LODWORD(v23[0]) = 12943;
      v23[1] = 0;
      kdebug_trace();
      uint64_t v12 = objc_alloc_init(RSObjectAsset);
      sub_25B4E5180((uint64_t)v12, v7);
      uint64_t v13 = *(void *)(a1 + 944);
      unint64_t v16 = objc_msgSend_walls(v8, v14, v15, v23[0], 0);
      uint64_t v19 = objc_msgSend_openings(v8, v17, v18);
      uint64_t v20 = sub_25B415848(v13, v16, v19, v12, *(unsigned __int8 *)(a1 + 952), *(unsigned __int8 *)(a1 + 953));

      sub_25B400F2C((uint64_t)v23);
      __n128 v21 = v7;
      id v7 = (id)v20;
    }
    else
    {
      __n128 v21 = 0;
    }
  }
  else
  {
    __n128 v21 = v7;
    id v7 = 0;
  }

  return v7;
}

void sub_25B4D4824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_25B400F2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id *sub_25B4D4874(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[120];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_25B4D48A4()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26A5021D8, memory_order_acquire) != -1)
  {
    id v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(&qword_26A5021D8, &v1, (void (__cdecl *)(void *))nullsub_19);
  }
}

void sub_25B4D4908(float32x4_t **a1, uint64_t *a2, __n128 a3, double a4, float a5)
{
  __float2 v8 = __sincosf_stret((float)((float)(a5 * 0.5) / 180.0) * 3.1416);
  float32x2_t v9 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 1);
  __float2 v10 = __sincosf_stret((float)((float)(a5 * -0.5) / 180.0) * 3.1416);
  v11.f32[0] = -v10.__sinval;
  v11.i32[1] = LODWORD(v10.__cosval);
  __asm { FMOV            V8.2S, #5.0 }
  uint64_t v17 = (void *)vmla_f32((float32x2_t)a3.n128_u64[0], _D8, vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v10.__sinval), LODWORD(v10.__cosval)), *(float *)&a4), v11, *(float32x2_t *)&a4, 1));
  float32x2_t v18 = vsub_f32((float32x2_t)a3.n128_u64[0], (float32x2_t)v17);
  int32x2_t v19 = (int32x2_t)vmul_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)v19, (float32x2_t)vdup_lane_s32(v19, 1)).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  float32x2_t v22 = vmul_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  for (float32x2_t i = (float32x2_t)vdup_n_s32(0x3C23D70Au); ; v17 = (void *)vmla_f32((float32x2_t)__p, i, v22))
  {
    __p = v17;
    char v24 = sub_25B47D97C(*a2, (a2[1] - *a2) >> 4, (uint64_t)&__p);
    *(void *)&long long v25 = __p;
    if (v24) {
      break;
    }
  }
  long long v67 = v25;
  long long v26 = (void *)vmla_f32((float32x2_t)a3.n128_u64[0], _D8, *(float32x2_t *)&a4);
  float32x2_t v27 = vsub_f32((float32x2_t)a3.n128_u64[0], (float32x2_t)v26);
  int32x2_t v28 = (int32x2_t)vmul_f32(v27, v27);
  v28.i32[0] = vadd_f32((float32x2_t)v28, (float32x2_t)vdup_lane_s32(v28, 1)).u32[0];
  float32x2_t v29 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v8.__sinval), LODWORD(v8.__cosval)), *(float *)&a4);
  float32x2_t v30 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30)));
  float32x2_t v32 = vmul_n_f32(v27, vmul_f32(v31, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v31, v31))).f32[0]);
  for (j = (float32x2_t)vdup_n_s32(0x3C23D70Au); ; long long v26 = (void *)vmla_f32((float32x2_t)__p, j, v32))
  {
    __p = v26;
    char v34 = sub_25B47D97C(*a2, (a2[1] - *a2) >> 4, (uint64_t)&__p);
    *(void *)&long long v35 = __p;
    if (v34) {
      break;
    }
  }
  long long v70 = v35;
  __n128 v36 = (void *)vmla_f32((float32x2_t)a3.n128_u64[0], _D8, vmla_f32(v29, v9, (float32x2_t)__PAIR64__(LODWORD(v8.__cosval), -v8.__sinval)));
  float32x2_t v37 = vsub_f32((float32x2_t)a3.n128_u64[0], (float32x2_t)v36);
  int32x2_t v38 = (int32x2_t)vmul_f32(v37, v37);
  v38.i32[0] = vadd_f32((float32x2_t)v38, (float32x2_t)vdup_lane_s32(v38, 1)).u32[0];
  float32x2_t v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
  float32x2_t v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
  float32x2_t v41 = vmul_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
  for (k = (float32x2_t)vdup_n_s32(0x3C23D70Au); ; __n128 v36 = (void *)vmla_f32((float32x2_t)__p, k, v41))
  {
    __p = v36;
    char v43 = sub_25B47D97C(*a2, (a2[1] - *a2) >> 4, (uint64_t)&__p);
    *(void *)&long long v44 = __p;
    if (v43) {
      break;
    }
  }
  long long v68 = v44;
  __p = 0;
  uint64_t v73 = 0;
  long long v74 = 0;
  id v45 = (char *)operator new(0x10uLL);
  __n128 v46 = a3;
  v46.n128_u32[2] = 0;
  *(__n128 *)id v45 = v46;
  uint64_t v73 = v45 + 16;
  long long v74 = v45 + 16;
  __p = v45;
  long long v47 = (char *)sub_25B3FFAEC(2uLL);
  uint64_t v49 = v48;
  __int16 v50 = &v47[16 * v48];
  *((_OWORD *)v47 + 1) = v67;
  *(_OWORD *)long long v47 = *(_OWORD *)v45;
  float32x2_t v51 = __p;
  __p = v47;
  long long v74 = v50;
  if (v51) {
    operator delete(v51);
  }
  uint64_t v73 = v47 + 32;
  if (v49 < 3)
  {
    uint64_t v53 = 3;
    if ((unint64_t)((v50 - v47) >> 3) > 3) {
      uint64_t v53 = (v50 - v47) >> 3;
    }
    if ((unint64_t)(v50 - v47) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v53;
    }
    if (v54) {
      unint64_t v54 = (unint64_t)sub_25B3FFAEC(v54);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v56 = 0;
    unint64_t v57 = v54 + 32;
    __int16 v50 = (char *)(v54 + 16 * v55);
    *(_OWORD *)(v54 + 32) = v70;
    uint64_t v52 = (char *)(v54 + 48);
    do
    {
      *(_OWORD *)(v57 + v56 - 16) = *(_OWORD *)&v47[v56 + 16];
      v56 -= 16;
    }
    while (v56 != -32);
    float32x2_t v58 = __p;
    __p = (void *)(v57 - 32);
    uint64_t v73 = v52;
    long long v74 = v50;
    if (v58)
    {
      operator delete(v58);
      __int16 v50 = v74;
    }
  }
  else
  {
    *((_OWORD *)v47 + 2) = v70;
    uint64_t v52 = v47 + 48;
  }
  uint64_t v73 = v52;
  if (v52 < v50)
  {
    *(_OWORD *)uint64_t v52 = v68;
    int32x2_t v59 = v52 + 16;
    goto LABEL_43;
  }
  float32x2_t v60 = (char *)__p;
  uint64_t v61 = (v52 - (unsigned char *)__p) >> 4;
  unint64_t v62 = v61 + 1;
  if ((unint64_t)(v61 + 1) >> 60) {
    sub_25B3FBC4C();
  }
  if ((v50 - (unsigned char *)__p) >> 3 > v62) {
    unint64_t v62 = (v50 - (unsigned char *)__p) >> 3;
  }
  if ((unint64_t)(v50 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v62;
  }
  if (v63) {
    unint64_t v63 = (unint64_t)sub_25B3FFAEC(v63);
  }
  else {
    uint64_t v64 = 0;
  }
  id v65 = (char *)(v63 + 16 * v61);
  *(_OWORD *)id v65 = v68;
  int32x2_t v59 = v65 + 16;
  if (v52 == v60)
  {
    __p = v65;
    uint64_t v73 = v65 + 16;
    long long v74 = (char *)(v63 + 16 * v64);
LABEL_42:
    operator delete(v52);
    goto LABEL_43;
  }
  do
  {
    long long v66 = *((_OWORD *)v52 - 1);
    v52 -= 16;
    *((_OWORD *)v65 - 1) = v66;
    v65 -= 16;
  }
  while (v52 != v60);
  uint64_t v52 = (char *)__p;
  __p = v65;
  uint64_t v73 = v59;
  long long v74 = (char *)(v63 + 16 * v64);
  if (v52) {
    goto LABEL_42;
  }
LABEL_43:
  uint64_t v73 = v59;
  sub_25B49C544(a1, (float32x4_t **)&__p);
  if (__p) {
    operator delete(__p);
  }
}

void sub_25B4D4D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_25B4D4D94(uint64_t *a1, __n128 a2, float32x2_t a3)
{
  __asm { FMOV            V3.2S, #5.0 }
  float32x2_t v9 = vmla_f32((float32x2_t)a2.n128_u64[0], _D3, a3);
  float32x2_t v10 = vsub_f32((float32x2_t)a2.n128_u64[0], v9);
  int32x2_t v11 = (int32x2_t)vmul_f32(v10, v10);
  v11.i32[0] = vadd_f32((float32x2_t)v11, (float32x2_t)vdup_lane_s32(v11, 1)).u32[0];
  float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  float32x2_t v14 = vmul_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  for (i = (float32x2_t)vdup_n_s32(0x3C23D70Au); ; float32x2_t v9 = vmla_f32(v18, i, v14))
  {
    float32x2_t v18 = v9;
    if (sub_25B47D97C(*a1, (a1[1] - *a1) >> 4, (uint64_t)&v18)) {
      break;
    }
  }
  return a2;
}

void sub_25B4D4E4C(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4)
{
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v8 = a1 + 56;
  *(_OWORD *)(a1 + 16) = xmmword_25B5F1380;
  *(int32x2_t *)(a1 + 32) = vdup_n_s32(0x49742400u);
  *(void *)(a1 + 40) = -3175874560;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_25B477E0C((uint64_t)&v140, a2, a3);
  BOOL v9 = 0;
  float v10 = *(float *)v141;
  float v12 = v142;
  float v11 = v143;
  float32x2_t v13 = a2[1];
  float32x2_t v14 = vsub_f32(*a2, v13);
  float v15 = sqrtf(vaddv_f32(vmul_f32(v14, v14)));
  float32x2_t v16 = a3[1];
  float32x2_t v17 = vsub_f32(*a3, v16);
  float v18 = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
  if (v18 < v15) {
    float v15 = v18;
  }
  int32x2_t v19 = a4 + 5;
  if (v15 >= a4[6]) {
    int32x2_t v19 = a4 + 4;
  }
  float v20 = *v19;
  float v22 = a4[2];
  float v21 = a4[3];
  BOOL v23 = v142 < v22;
  if (v143 >= v20) {
    BOOL v23 = 0;
  }
  BOOL v24 = *(float *)v141 >= v21 && v23;
  if (*(float *)v141 < a4[10]) {
    BOOL v23 = 0;
  }
  if (v142 < v22 && *(float *)v141 >= v21) {
    BOOL v9 = v143 < a4[8];
  }
  long long v25 = v140;
  uint64_t v26 = *(void *)&v141[4];
  int v27 = v144;
  BOOL v28 = v23 || v9;
  float32x2_t v29 = vsub_f32(*a2, *a3);
  float32x2_t v30 = vsub_f32(v13, v16);
  if (sqrtf(vaddv_f32(vadd_f32(vmul_f32(v29, v29), vmul_f32(v30, v30)))) < 0.001)
  {
    *(_DWORD *)a1 = 4;
    *(unsigned char *)(a1 + 12) = 1;
    *(void *)(a1 + 16) = v25;
    *(float *)(a1 + 24) = v10;
    *(void *)(a1 + 28) = v26;
    *(float *)(a1 + 36) = v12;
    *(float *)(a1 + 40) = v11;
    *(_DWORD *)(a1 + 44) = v27;
    *(unsigned char *)(a1 + 48) = v24;
    *(unsigned char *)(a1 + 49) = v28;
    return;
  }
  uint64_t v138 = v140;
  uint64_t v139 = *(void *)&v141[4];
  sub_25B40E03C(&v140, a2, a3);
  float32x2_t v32 = *a2;
  float32x2_t v31 = a2[1];
  int32x2_t v33 = (int32x2_t)vsub_f32(v31, *a2);
  float32x2_t v35 = *a3;
  float32x2_t v34 = a3[1];
  float32x2_t v36 = vsub_f32(v34, *a3);
  *(float *)v37.i32 = -*(float *)&v33.i32[1];
  float32x2_t v38 = (float32x2_t)vzip1_s32(v37, v33);
  float32x2_t v137 = vmul_f32(v36, v38);
  float v39 = vaddv_f32(v137);
  float32x2_t v40 = 0;
  if (v39 == 0.0)
  {
    __n128 v46 = 0;
    int v42 = 3;
    LODWORD(v43) = -1;
    LODWORD(v54) = -1;
  }
  else
  {
    float v41 = a4[23];
    int v42 = 3;
    LODWORD(v43) = -1;
    if (v11 < v41 || v11 > (float)(180.0 - v41) || v39 == 0.0)
    {
      __n128 v46 = 0;
    }
    else
    {
      long long v44 = (float *)sub_25B3FBC64(1uLL);
      __n128 v46 = v44;
      float32x2_t v47 = vmul_f32(vsub_f32(v32, v35), v38);
      float32x2_t v48 = vmla_n_f32(v35, v36, vdiv_f32(vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)), vadd_f32(v137, (float32x2_t)vdup_lane_s32((int32x2_t)v137, 1))).f32[0]);
      float32x2_t v49 = vsub_f32(v32, v48);
      __int16 v50 = &v44[v45];
      *long long v44 = sqrtf(vaddv_f32(vmul_f32(v49, v49)));
      float32x2_t v51 = vsub_f32(a2[1], v48);
      float v52 = sqrtf(vaddv_f32(vmul_f32(v51, v51)));
      BOOL v135 = v28;
      int v136 = v27;
      if (v45 < 2)
      {
        uint64_t v55 = 2;
        if ((unint64_t)((4 * v45) >> 1) > 2) {
          uint64_t v55 = (4 * v45) >> 1;
        }
        if ((unint64_t)(4 * v45) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          unint64_t v56 = (unint64_t)sub_25B3FBC64(v56);
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v58 = 0;
        __int16 v50 = (float *)(v56 + 4 * v57);
        *(float *)(v56 + 4) = v52;
        uint64_t v53 = (float *)(v56 + 8);
        do
        {
          *(float *)(v56 + v58 * 4) = v46[v58];
          --v58;
        }
        while (v58 != -1);
        int32x2_t v59 = (float *)v56;
        operator delete(v46);
        __n128 v46 = v59;
        int v27 = v136;
      }
      else
      {
        v44[1] = v52;
        uint64_t v53 = v44 + 2;
      }
      float32x2_t v60 = vsub_f32(*a3, v48);
      float v61 = sqrtf(vaddv_f32(vmul_f32(v60, v60)));
      BOOL v134 = v24;
      if (v53 >= v50)
      {
        uint64_t v63 = v53 - v46;
        unint64_t v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if (((char *)v50 - (char *)v46) >> 1 > v64) {
          unint64_t v64 = ((char *)v50 - (char *)v46) >> 1;
        }
        if ((unint64_t)((char *)v50 - (char *)v46) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65) {
          unint64_t v65 = (unint64_t)sub_25B3FBC64(v65);
        }
        else {
          uint64_t v66 = 0;
        }
        long long v67 = (float *)(v65 + 4 * v63);
        __int16 v50 = (float *)(v65 + 4 * v66);
        *long long v67 = v61;
        unint64_t v62 = v67 + 1;
        while (v53 != v46)
        {
          int v68 = *((_DWORD *)v53-- - 1);
          *((_DWORD *)v67-- - 1) = v68;
        }
        operator delete(v46);
        __n128 v46 = v67;
        int v27 = v136;
      }
      else
      {
        float *v53 = v61;
        unint64_t v62 = v53 + 1;
      }
      float32x2_t v69 = vsub_f32(a3[1], v48);
      float v70 = sqrtf(vaddv_f32(vmul_f32(v69, v69)));
      if (v62 >= v50)
      {
        uint64_t v71 = v62 - v46;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if (((char *)v50 - (char *)v46) >> 1 > v72) {
          unint64_t v72 = ((char *)v50 - (char *)v46) >> 1;
        }
        if ((unint64_t)((char *)v50 - (char *)v46) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73) {
          unint64_t v73 = (unint64_t)sub_25B3FBC64(v73);
        }
        long long v74 = (float *)(v73 + 4 * v71);
        float *v74 = v70;
        float32x2_t v40 = v74 + 1;
        while (v62 != v46)
        {
          int v75 = *((_DWORD *)v62-- - 1);
          *((_DWORD *)v74-- - 1) = v75;
        }
        operator delete(v46);
        __n128 v46 = v74;
      }
      else
      {
        *unint64_t v62 = v70;
        float32x2_t v40 = v62 + 1;
      }
      BOOL v24 = v134;
      BOOL v28 = v135;
      int v76 = v46 + 3;
      uint64_t v77 = v46 + 1;
      float v78 = v46[1];
      if (v78 >= *v46) {
        float v79 = *v46;
      }
      else {
        float v79 = v46[1];
      }
      if (v78 >= *v46) {
        uint64_t v77 = v46;
      }
      unint64_t v80 = v46 + 2;
      float v81 = v46[2];
      if (v46 + 2 != v40 && v76 != v40)
      {
        float v83 = v46[2];
        uint64_t v84 = v46 + 3;
        float v85 = v46 + 2;
        v86 = v46 + 3;
        do
        {
          float v87 = *v86++;
          float v88 = v87;
          if (v87 < v83)
          {
            float v83 = v88;
            float v85 = v84;
          }
          uint64_t v84 = v86;
        }
        while (v86 != v40);
        float v89 = *v85;
        float32x2_t v90 = v46 + 3;
        do
        {
          float v91 = *v90++;
          float v92 = v91;
          if (v91 < v81)
          {
            float v81 = v92;
            unint64_t v80 = v76;
          }
          int v76 = v90;
        }
        while (v90 != v40);
        float v81 = v89;
      }
      float32x2_t v32 = *a2;
      float32x2_t v31 = a2[1];
      float32x2_t v34 = a3[1];
      unint64_t v54 = (char *)v77 - (char *)v46;
      uint64_t v43 = v80 - v46 - 2;
      float v93 = a4[7];
      if (v79 < v93 && v81 < v93)
      {
        int v42 = 0;
        v54 >>= 2;
LABEL_96:
        float32x2_t v35 = *a3;
        goto LABEL_97;
      }
      float v95 = vaddv_f32(vmul_f32(vsub_f32(v48, *a3), vsub_f32(v48, v34)));
      if (v79 < v93)
      {
        if (v95 > 0.00001) {
          LODWORD(v54) = -1;
        }
        else {
          LODWORD(v54) = v54 >> 2;
        }
        LODWORD(v43) = -1;
        if (v95 <= 0.00001) {
          int v42 = 1;
        }
        else {
          int v42 = -1;
        }
        goto LABEL_96;
      }
      float v132 = vaddv_f32(vmul_f32(vsub_f32(v48, v32), vsub_f32(v48, v31)));
      if (v81 < v93)
      {
        if (v132 > 0.00001) {
          LODWORD(v43) = -1;
        }
        LODWORD(v54) = -1;
        if (v132 <= 0.00001) {
          int v42 = 1;
        }
        else {
          int v42 = -1;
        }
        goto LABEL_96;
      }
      if (v95 > 0.00001 || v132 > 0.00001) {
        int v42 = -1;
      }
      else {
        int v42 = 2;
      }
      LODWORD(v43) = -1;
      float32x2_t v35 = *a3;
    }
    LODWORD(v54) = -1;
  }
LABEL_97:
  BOOL v96 = v11 < a4[8];
  if (v12 >= a4[9]) {
    BOOL v96 = 0;
  }
  if (v10 <= 0.8) {
    BOOL v96 = 0;
  }
  v97 = v140;
  int32x2_t v98 = *(float **)v141;
  uint64_t v99 = v140 + 1;
  float v100 = *v140;
  if (v140 == *(float **)v141 || v99 == *(float **)v141)
  {
    float v107 = *v140;
    unint64_t v108 = v140;
  }
  else
  {
    float v101 = *v140;
    uint64_t v102 = v140 + 1;
    v103 = v140;
    v104 = v140 + 1;
    do
    {
      float v105 = *v104++;
      float v106 = v105;
      if (v105 < v101)
      {
        float v101 = v106;
        v103 = v102;
      }
      uint64_t v102 = v104;
    }
    while (v104 != *(float **)v141);
    float v107 = *v103;
    unint64_t v108 = v140;
    uint64_t v109 = v140 + 1;
    do
    {
      float v110 = *v109++;
      float v111 = v110;
      if (v110 < v100)
      {
        float v100 = v111;
        unint64_t v108 = v99;
      }
      uint64_t v99 = v109;
    }
    while (v109 != *(float **)v141);
  }
  BOOL v112 = v42 == 2;
  float v113 = a4[7];
  if (v107 < v113) {
    BOOL v112 = 1;
  }
  if (v11 >= a4[11]) {
    BOOL v112 = 0;
  }
  if (v10 <= a4[10]) {
    BOOL v112 = 0;
  }
  unint64_t v114 = (char *)v108 - (char *)v140;
  int v115 = (int)(v114 >> 2) / 2;
  uint64_t v116 = (v114 >> 2) & 1;
  BOOL v117 = v112 || v96;
  if (v107 < v113)
  {
    LODWORD(v43) = v116;
    LODWORD(v54) = v115;
    int v42 = 0;
  }
  float32x2_t v118 = vsub_f32(v32, v31);
  float v119 = sqrtf(vaddv_f32(vmul_f32(v118, v118)));
  float32x2_t v120 = vsub_f32(v35, v34);
  float v121 = sqrtf(vaddv_f32(vmul_f32(v120, v120)));
  if (v121 < v119) {
    float v119 = v121;
  }
  float v122 = a4[4];
  if (v119 >= a4[6]) {
    float v123 = a4[4];
  }
  else {
    float v123 = a4[5];
  }
  BOOL v124 = (float)(90.0 - v123) < v11;
  if (v11 >= (float)(v123 + 90.0)) {
    BOOL v124 = 0;
  }
  BOOL v125 = (float)(135.0 - v123) < v11;
  if (v11 >= (float)(v123 + 135.0)) {
    BOOL v125 = 0;
  }
  BOOL v126 = v124 || v125;
  char v127 = v42 == 1 && v126;
  *(_DWORD *)a1 = v42;
  *(_DWORD *)(a1 + 4) = v54;
  *(_DWORD *)(a1 + 8) = v43;
  BOOL v128 = v11 > (float)(90.0 - v122) && v42 == 0;
  *(unsigned char *)(a1 + 12) = v117;
  *(unsigned char *)(a1 + 13) = v126;
  if (v128) {
    char v129 = 1;
  }
  else {
    char v129 = v127;
  }
  *(unsigned char *)(a1 + 14) = v129;
  v145[0] = v8;
  if (v97 != v98)
  {
    int32x2_t v130 = v97;
    do
      sub_25B4432A0(v145, v130++);
    while (v130 != v98);
  }
  v145[0] = a1 + 80;
  if (v46 != v40)
  {
    float v131 = v46;
    do
      sub_25B4432A0(v145, v131++);
    while (v131 != v40);
  }
  *(void *)(a1 + 16) = v138;
  *(float *)(a1 + 24) = v10;
  *(void *)(a1 + 28) = v139;
  *(float *)(a1 + 36) = v12;
  *(float *)(a1 + 40) = v11;
  *(_DWORD *)(a1 + 44) = v27;
  *(unsigned char *)(a1 + 48) = v24;
  *(unsigned char *)(a1 + 49) = v28;
  if (v46)
  {
    operator delete(v46);
    v97 = v140;
  }
  if (v97) {
    operator delete(v97);
  }
}

void sub_25B4D5660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  operator delete(v17);
  if (__p) {
    operator delete(__p);
  }
  sub_25B4900CC(v16);
  _Unwind_Resume(a1);
}

void sub_25B4D56B4(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4)
{
  *(_OWORD *)(a1 + 16) = xmmword_25B5F1380;
  *(int32x2_t *)(a1 + 32) = vdup_n_s32(0x49742400u);
  *(void *)(a1 + 40) = -3175874560;
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_25B477FD8((uint64_t)&v64, a2, a3);
  BOOL v8 = 0;
  float v9 = *(float *)v65;
  float v10 = v66;
  float v11 = v67;
  float32x2_t v12 = vsub_f32(*a2, a2[1]);
  float v13 = sqrtf(vaddv_f32(vmul_f32(v12, v12)));
  float32x2_t v14 = vsub_f32(*a3, a3[1]);
  float v15 = sqrtf(vaddv_f32(vmul_f32(v14, v14)));
  if (v15 < v13) {
    float v13 = v15;
  }
  float32x2_t v16 = a4 + 3;
  if (v13 >= a4[4]) {
    float32x2_t v16 = a4 + 2;
  }
  float v17 = *v16;
  float v18 = a4[1];
  BOOL v19 = v66 < *a4;
  if (v67 >= v17) {
    BOOL v19 = 0;
  }
  BOOL v20 = *(float *)v65 >= v18 && v19;
  BOOL v21 = *(float *)v65 >= a4[8] && v19;
  if (v66 < *a4 && *(float *)v65 >= v18) {
    BOOL v8 = v67 < a4[6];
  }
  float v22 = v64;
  uint64_t v23 = *(void *)&v65[4];
  int v24 = v68;
  sub_25B40E03C(&v64, a2, a3);
  int v27 = v64;
  BOOL v28 = v64;
  if (v64 != *(float **)v65)
  {
    float32x2_t v29 = v64 + 1;
    BOOL v28 = v64;
    if (v64 + 1 != *(float **)v65)
    {
      float v30 = *v64;
      BOOL v28 = v64;
      float32x2_t v31 = v64 + 1;
      do
      {
        float v32 = *v31++;
        float v33 = v32;
        if (v32 < v30)
        {
          float v30 = v33;
          BOOL v28 = v29;
        }
        float32x2_t v29 = v31;
      }
      while (v31 != *(float **)v65);
    }
  }
  float v34 = *v28;
  float32x2_t v35 = *a2;
  *(float32x2_t *)v25.f32 = a2[1];
  float32x2_t v36 = vsub_f32(*(float32x2_t *)v25.f32, *a2);
  int32x2_t v37 = (int32x2_t)vmul_f32(v36, v36);
  float32x2_t v38 = *a3;
  *(float32x2_t *)v26.f32 = a3[1];
  float32x2_t v39 = vsub_f32(*(float32x2_t *)v26.f32, *a3);
  int32x2_t v40 = (int32x2_t)vmul_f32(v39, v39);
  int32x2_t v41 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v37, v40), (float32x2_t)vzip2_s32(v37, v40)));
  float v42 = fabsf(vsub_f32((float32x2_t)v41, (float32x2_t)vdup_lane_s32(v41, 1)).f32[0]);
  float v44 = a4[6];
  float v43 = a4[7];
  float v45 = a4[17];
  if (v42 < a4[15] && v11 < v44 && v10 < v43)
  {
    float v48 = a4[16];
    if (*(float *)&v22 > v45 && *((float *)&v22 + 1) > v45 && v34 < v48)
    {
      char v54 = 1;
      int v55 = 4;
      goto LABEL_56;
    }
  }
  else
  {
    float v48 = a4[16];
  }
  BOOL v51 = v11 < v44;
  if (v10 >= v43) {
    BOOL v51 = 0;
  }
  if (v51 && v9 > v45 && v34 < v48)
  {
    char v54 = 1;
    int v55 = 5;
  }
  else
  {
    if (v9 <= a4[8]) {
      LOBYTE(v51) = 0;
    }
    if (v51)
    {
      char v54 = 0;
      int v55 = 6;
    }
    else
    {
      if (v11 >= a4[14]) {
        goto LABEL_55;
      }
      *(float32x2_t *)v26.f32 = vsub_f32((float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v38, 4uLL), (float32x2_t)vext_s8((int8x8_t)v38, *(int8x8_t *)v26.f32, 4uLL));
      int32x2_t v56 = (int32x2_t)vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
      v56.i32[0] = vadd_f32((float32x2_t)v56, (float32x2_t)vdup_lane_s32(v56, 1)).u32[0];
      float32x2_t v57 = vrsqrte_f32((float32x2_t)v56.u32[0]);
      float32x2_t v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v57, v57)));
      *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v58, v58))).f32[0]);
      *(int8x8_t *)v26.f32 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v26.f32[0] < 0.0), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)v26.f32), *(int8x8_t *)v26.f32);
      v26.f32[2] = -(float)(COERCE_FLOAT(vmul_f32(v38, *(float32x2_t *)&v26).i32[1]) + (float)(v26.f32[0] * v38.f32[0]));
      *(float32x2_t *)v25.f32 = vsub_f32((float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v35, 4uLL), (float32x2_t)vext_s8((int8x8_t)v35, *(int8x8_t *)v25.f32, 4uLL));
      int32x2_t v59 = (int32x2_t)vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32);
      v59.i32[0] = vadd_f32((float32x2_t)v59, (float32x2_t)vdup_lane_s32(v59, 1)).u32[0];
      float32x2_t v60 = vrsqrte_f32((float32x2_t)v59.u32[0]);
      float32x2_t v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v60, v60)));
      *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v25.f32, vmul_f32(v61, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v61, v61))).f32[0]);
      *(int8x8_t *)v25.f32 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v25.f32[0] < 0.0), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)v25.f32), *(int8x8_t *)v25.f32);
      v25.f32[2] = -(float)(COERCE_FLOAT(vmul_f32(v35, *(float32x2_t *)&v25).i32[1]) + (float)(v25.f32[0] * v35.f32[0]));
      float32x4_t v62 = vsubq_f32(v25, v26);
      float32x4_t v63 = vmulq_f32(v62, v62);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0]) >= a4[13])
      {
LABEL_55:
        char v54 = 0;
        int v55 = -1;
      }
      else
      {
        char v54 = 0;
        int v55 = 3;
      }
    }
  }
LABEL_56:
  *(_DWORD *)a1 = v55;
  *(unsigned char *)(a1 + 12) = v54;
  *(void *)(a1 + 16) = v22;
  *(float *)(a1 + 24) = v9;
  *(void *)(a1 + 28) = v23;
  *(float *)(a1 + 36) = v10;
  *(float *)(a1 + 40) = v11;
  *(_DWORD *)(a1 + 44) = v24;
  *(unsigned char *)(a1 + 48) = v20;
  *(unsigned char *)(a1 + 49) = v21 || v8;
  if (v27)
  {
    operator delete(v27);
  }
}

void sub_25B4D5AA4(_Unwind_Exception *a1)
{
  sub_25B4900CC(v1);
  _Unwind_Resume(a1);
}

int8x8_t *sub_25B4D5ABC(int8x8_t *result, float32x2_t *a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v5 = *a2;
  float32x2_t v4 = a2[1];
  float32x2_t v6 = vsub_f32(v4, *a2);
  float v7 = vaddv_f32(vmul_f32(v6, v6));
  if (v7 < 0.000001) {
    float v7 = 0.000001;
  }
  while (1)
  {
    double v8 = *(double *)&a3;
    float32x2_t v9 = vmla_n_f32(v5, v6, vaddv_f32(vmul_f32(vsub_f32(a3, v5), v6)) / v7);
    float32x2_t v10 = vmla_n_f32(v5, v6, vaddv_f32(vmul_f32(vsub_f32(a4, v5), v6)) / v7);
    float v11 = vaddv_f32(vmul_f32(vsub_f32(v9, v5), vsub_f32(v9, v4)));
    float v12 = vaddv_f32(vmul_f32(vsub_f32(v10, v5), vsub_f32(v10, v4)));
    if (v11 <= 0.00001 && v12 <= 0.00001) {
      break;
    }
    if (v11 <= 0.00001 && v12 > 0.00001)
    {
      float32x2_t v23 = vsub_f32(v5, v10);
      int32x2_t v24 = (int32x2_t)vmul_f32(v23, v23);
      float32x2_t v25 = vsub_f32(v4, v10);
      int32x2_t v26 = (int32x2_t)vmul_f32(v25, v25);
      float32x2_t v27 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v24, v26), (float32x2_t)vzip2_s32(v24, v26)));
      result->i8[0] = 1;
      result[1] = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27), 0), (int8x8_t)v4, (int8x8_t)v5);
      result[2] = (int8x8_t)v9;
      return result;
    }
    if (v11 > 0.00001)
    {
      a3 = a4;
      *(double *)&a4 = v8;
      if (v12 <= 0.00001) {
        continue;
      }
    }
    result[1] = 0;
    result[2] = 0;
    result->i8[0] = 0;
    return result;
  }
  float32x2_t v13 = vsub_f32(v5, v9);
  int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
  float32x2_t v15 = vsub_f32(v5, v10);
  int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v17 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v14), (float32x2_t)vzip2_s32(v16, v14)));
  if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u8[0]) {
    unsigned int v18 = -1;
  }
  else {
    unsigned int v18 = 0;
  }
  int8x8_t v19 = (int8x8_t)vdup_n_s32(v18);
  float32x2_t v30 = *a2;
  float32x2_t v31 = (float32x2_t)vbsl_s8(v19, (int8x8_t)v10, (int8x8_t)v9);
  float32x2_t v28 = v4;
  float32x2_t v29 = (float32x2_t)vbsl_s8(v19, (int8x8_t)v9, (int8x8_t)v10);
  float32x2_t v20 = vsub_f32(v5, v31);
  float32x2_t v21 = vsub_f32(v4, v29);
  float v22 = &v28;
  if (sqrtf(vaddv_f32(vmul_f32(v20, v20))) > sqrtf(vaddv_f32(vmul_f32(v21, v21)))) {
    float v22 = &v30;
  }
  *(_OWORD *)result[1].i8 = *(_OWORD *)v22->f32;
  result->i8[0] = 1;
  return result;
}

uint64_t sub_25B4D5C54(float32x2_t *a1, void **a2, void **a3, float32x2_t a4, float32x2_t a5, float a6)
{
  float32x2_t v12 = *a1;
  float32x2_t v11 = a1[1];
  float32x2_t v13 = sub_25B40DED8(a4, *a1, v11);
  float32x2_t v14 = sub_25B40DED8(a5, v12, v11);
  float32x2_t v15 = vsub_f32(v12, v13);
  int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v17 = vsub_f32(v12, v14);
  int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
  int32x2_t v19 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v18, v16), (float32x2_t)vzip2_s32(v18, v16)));
  if (vcgt_f32((float32x2_t)vdup_lane_s32(v19, 1), (float32x2_t)v19).u8[0]) {
    unsigned int v20 = -1;
  }
  else {
    unsigned int v20 = 0;
  }
  int8x8_t v21 = (int8x8_t)vdup_n_s32(v20);
  float32x2_t v22 = (float32x2_t)vbsl_s8(v21, (int8x8_t)v13, (int8x8_t)v14);
  float32x2_t v23 = (float32x2_t)vbsl_s8(v21, (int8x8_t)v14, (int8x8_t)v13);
  float32x2_t v24 = vsub_f32(v23, v22);
  if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) < a6)
  {
    int32x2_t v26 = a3[1];
    unint64_t v25 = (unint64_t)a3[2];
    if ((unint64_t)v26 < v25)
    {
      *int32x2_t v26 = *(_OWORD *)a1->f32;
      float32x2_t v27 = v26 + 1;
LABEL_42:
      uint64_t result = 0;
      a3[1] = v27;
      return result;
    }
    uint64_t v36 = ((char *)v26 - (unsigned char *)*a3) >> 4;
    unint64_t v37 = v36 + 1;
    if (!((unint64_t)(v36 + 1) >> 60))
    {
      uint64_t v38 = v25 - (void)*a3;
      if (v38 >> 3 > v37) {
        unint64_t v37 = v38 >> 3;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39) {
        unint64_t v39 = (unint64_t)sub_25B3FFAEC(v39);
      }
      else {
        uint64_t v40 = 0;
      }
      float v48 = (_OWORD *)(v39 + 16 * v36);
      unint64_t v49 = v39 + 16 * v40;
      *float v48 = *(_OWORD *)a1->f32;
      float32x2_t v27 = v48 + 1;
      BOOL v51 = (char *)*a3;
      __int16 v50 = (char *)a3[1];
      if (v50 != *a3)
      {
        do
        {
          *--float v48 = *((_OWORD *)v50 - 1);
          v50 -= 16;
        }
        while (v50 != v51);
        __int16 v50 = (char *)*a3;
      }
      *a3 = v48;
      a3[1] = v27;
      a3[2] = (void *)v49;
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_42;
    }
LABEL_156:
    sub_25B3FBC4C();
  }
  float32x2_t v28 = vsub_f32(v11, v22);
  float v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
  float32x2_t v30 = vsub_f32(v12, v23);
  float v31 = sqrtf(vaddv_f32(vmul_f32(v30, v30)));
  float v33 = (float32x2_t *)a2[1];
  unint64_t v32 = (unint64_t)a2[2];
  if (v31 > a6 && v29 > a6)
  {
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v43 = ((char *)v33 - (unsigned char *)*a2) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v45 = v32 - (void)*a2;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        unint64_t v46 = (unint64_t)sub_25B3FFAEC(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      int32x2_t v59 = (float32x2_t *)(v46 + 16 * v43);
      unint64_t v60 = v46 + 16 * v47;
      *int32x2_t v59 = v23;
      v59[1] = v22;
      int32x2_t v41 = v59 + 2;
      float32x4_t v62 = (char *)*a2;
      float32x2_t v61 = (char *)a2[1];
      if (v61 != *a2)
      {
        do
        {
          *(_OWORD *)v59[-2].f32 = *((_OWORD *)v61 - 1);
          v59 -= 2;
          v61 -= 16;
        }
        while (v61 != v62);
        float32x2_t v61 = (char *)*a2;
      }
      *a2 = v59;
      a2[1] = v41;
      a2[2] = (void *)v60;
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *float v33 = v23;
      v33[1] = v22;
      int32x2_t v41 = v33 + 2;
    }
    a2[1] = v41;
    unint64_t v64 = (float32x2_t *)a3[1];
    unint64_t v63 = (unint64_t)a3[2];
    if ((unint64_t)v64 >= v63)
    {
      uint64_t v66 = ((char *)v64 - (unsigned char *)*a3) >> 4;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v68 = v63 - (void)*a3;
      if (v68 >> 3 > v67) {
        unint64_t v67 = v68 >> 3;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69) {
        unint64_t v69 = (unint64_t)sub_25B3FFAEC(v69);
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v71 = (float32x2_t *)(v69 + 16 * v66);
      unint64_t v72 = v69 + 16 * v70;
      float32x2_t *v71 = v12;
      v71[1] = v23;
      unint64_t v65 = v71 + 2;
      long long v74 = (char *)*a3;
      unint64_t v73 = (char *)a3[1];
      if (v73 != *a3)
      {
        do
        {
          *(_OWORD *)v71[-2].f32 = *((_OWORD *)v73 - 1);
          v71 -= 2;
          v73 -= 16;
        }
        while (v73 != v74);
        unint64_t v73 = (char *)*a3;
      }
      *a3 = v71;
      a3[1] = v65;
      a3[2] = (void *)v72;
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      float32x2_t *v64 = v12;
      v64[1] = v23;
      unint64_t v65 = v64 + 2;
    }
    a3[1] = v65;
    unint64_t v75 = (unint64_t)a3[2];
    if ((unint64_t)v65 < v75)
    {
      *unint64_t v65 = v11;
      v65[1] = v22;
      int v76 = v65 + 2;
LABEL_155:
      a3[1] = v76;
      return 1;
    }
    uint64_t v77 = ((char *)v65 - (unsigned char *)*a3) >> 4;
    if ((unint64_t)(v77 + 1) >> 60) {
      goto LABEL_156;
    }
    uint64_t v78 = v75 - (void)*a3;
    uint64_t v79 = v78 >> 3;
    if (v78 >> 3 <= (unint64_t)(v77 + 1)) {
      uint64_t v79 = v77 + 1;
    }
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v80 = v79;
    }
    if (v80) {
      unint64_t v80 = (unint64_t)sub_25B3FFAEC(v80);
    }
    else {
      uint64_t v81 = 0;
    }
    id v82 = (float32x2_t *)(v80 + 16 * v77);
    unint64_t v83 = v80 + 16 * v81;
    float32x2_t *v82 = v11;
    v82[1] = v22;
    int v76 = v82 + 2;
    float v85 = (char *)*a3;
    uint64_t v84 = (char *)a3[1];
    if (v84 == *a3)
    {
LABEL_153:
      *a3 = v82;
      a3[1] = v76;
      a3[2] = (void *)v83;
      if (v84) {
        operator delete(v84);
      }
      goto LABEL_155;
    }
    do
    {
      *(_OWORD *)v82[-2].f32 = *((_OWORD *)v84 - 1);
      v82 -= 2;
      v84 -= 16;
    }
    while (v84 != v85);
LABEL_152:
    uint64_t v84 = (char *)*a3;
    goto LABEL_153;
  }
  if (v31 > a6)
  {
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v53 = ((char *)v33 - (unsigned char *)*a2) >> 4;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v55 = v32 - (void)*a2;
      if (v55 >> 3 > v54) {
        unint64_t v54 = v55 >> 3;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56) {
        unint64_t v56 = (unint64_t)sub_25B3FFAEC(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      BOOL v96 = (float32x2_t *)(v56 + 16 * v53);
      unint64_t v97 = v56 + 16 * v57;
      *BOOL v96 = v23;
      v96[1] = v11;
      float32x2_t v35 = v96 + 2;
      uint64_t v99 = (char *)*a2;
      int32x2_t v98 = (char *)a2[1];
      if (v98 != *a2)
      {
        do
        {
          *(_OWORD *)v96[-2].f32 = *((_OWORD *)v98 - 1);
          v96 -= 2;
          v98 -= 16;
        }
        while (v98 != v99);
        int32x2_t v98 = (char *)*a2;
      }
      *a2 = v96;
      a2[1] = v35;
      a2[2] = (void *)v97;
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      *float v33 = v23;
      v33[1] = v11;
      float32x2_t v35 = v33 + 2;
    }
    a2[1] = v35;
    float v101 = (float32x2_t *)a3[1];
    unint64_t v100 = (unint64_t)a3[2];
    if ((unint64_t)v101 >= v100)
    {
      uint64_t v102 = ((char *)v101 - (unsigned char *)*a3) >> 4;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v104 = v100 - (void)*a3;
      if (v104 >> 3 > v103) {
        unint64_t v103 = v104 >> 3;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v105 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v105 = v103;
      }
      if (v105) {
        unint64_t v105 = (unint64_t)sub_25B3FFAEC(v105);
      }
      else {
        uint64_t v106 = 0;
      }
      id v82 = (float32x2_t *)(v105 + 16 * v102);
      unint64_t v83 = v105 + 16 * v106;
      float32x2_t *v82 = v12;
      v82[1] = v23;
      int v76 = v82 + 2;
      float v107 = (char *)*a3;
      uint64_t v84 = (char *)a3[1];
      if (v84 == *a3) {
        goto LABEL_153;
      }
      do
      {
        *(_OWORD *)v82[-2].f32 = *((_OWORD *)v84 - 1);
        v82 -= 2;
        v84 -= 16;
      }
      while (v84 != v107);
      goto LABEL_152;
    }
    *float v101 = v12;
    v101[1] = v23;
    goto LABEL_133;
  }
  if (v29 > a6)
  {
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v86 = ((char *)v33 - (unsigned char *)*a2) >> 4;
      unint64_t v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v88 = v32 - (void)*a2;
      if (v88 >> 3 > v87) {
        unint64_t v87 = v88 >> 3;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89) {
        unint64_t v89 = (unint64_t)sub_25B3FFAEC(v89);
      }
      else {
        uint64_t v90 = 0;
      }
      unint64_t v108 = (float32x2_t *)(v89 + 16 * v86);
      unint64_t v109 = v89 + 16 * v90;
      *unint64_t v108 = v12;
      v108[1] = v22;
      float v42 = v108 + 2;
      float v111 = (char *)*a2;
      float v110 = (char *)a2[1];
      if (v110 != *a2)
      {
        do
        {
          *(_OWORD *)v108[-2].f32 = *((_OWORD *)v110 - 1);
          v108 -= 2;
          v110 -= 16;
        }
        while (v110 != v111);
        float v110 = (char *)*a2;
      }
      *a2 = v108;
      a2[1] = v42;
      a2[2] = (void *)v109;
      if (v110) {
        operator delete(v110);
      }
    }
    else
    {
      *float v33 = v12;
      v33[1] = v22;
      float v42 = v33 + 2;
    }
    a2[1] = v42;
    float v101 = (float32x2_t *)a3[1];
    unint64_t v112 = (unint64_t)a3[2];
    if ((unint64_t)v101 >= v112)
    {
      uint64_t v113 = ((char *)v101 - (unsigned char *)*a3) >> 4;
      unint64_t v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 60) {
        goto LABEL_156;
      }
      uint64_t v115 = v112 - (void)*a3;
      if (v115 >> 3 > v114) {
        unint64_t v114 = v115 >> 3;
      }
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v116 = v114;
      }
      if (v116) {
        unint64_t v116 = (unint64_t)sub_25B3FFAEC(v116);
      }
      else {
        uint64_t v117 = 0;
      }
      id v82 = (float32x2_t *)(v116 + 16 * v113);
      unint64_t v83 = v116 + 16 * v117;
      float32x2_t *v82 = v11;
      v82[1] = v22;
      int v76 = v82 + 2;
      float v122 = (char *)*a3;
      uint64_t v84 = (char *)a3[1];
      if (v84 == *a3) {
        goto LABEL_153;
      }
      do
      {
        *(_OWORD *)v82[-2].f32 = *((_OWORD *)v84 - 1);
        v82 -= 2;
        v84 -= 16;
      }
      while (v84 != v122);
      goto LABEL_152;
    }
    *float v101 = v11;
    v101[1] = v22;
LABEL_133:
    int v76 = v101 + 2;
    goto LABEL_155;
  }
  if ((unint64_t)v33 >= v32)
  {
    uint64_t v91 = ((char *)v33 - (unsigned char *)*a2) >> 4;
    unint64_t v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60) {
      goto LABEL_156;
    }
    uint64_t v93 = v32 - (void)*a2;
    if (v93 >> 3 > v92) {
      unint64_t v92 = v93 >> 3;
    }
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v92;
    }
    if (v94) {
      unint64_t v94 = (unint64_t)sub_25B3FFAEC(v94);
    }
    else {
      uint64_t v95 = 0;
    }
    float32x2_t v118 = (float32x2_t *)(v94 + 16 * v91);
    unint64_t v119 = v94 + 16 * v95;
    *(_OWORD *)v118->f32 = *(_OWORD *)a1->f32;
    float32x2_t v58 = v118 + 2;
    float v121 = (char *)*a2;
    float32x2_t v120 = (char *)a2[1];
    if (v120 != *a2)
    {
      do
      {
        *(_OWORD *)v118[-2].f32 = *((_OWORD *)v120 - 1);
        v118 -= 2;
        v120 -= 16;
      }
      while (v120 != v121);
      float32x2_t v120 = (char *)*a2;
    }
    *a2 = v118;
    a2[1] = v58;
    a2[2] = (void *)v119;
    if (v120) {
      operator delete(v120);
    }
  }
  else
  {
    *(_OWORD *)v33->f32 = *(_OWORD *)a1->f32;
    float32x2_t v58 = v33 + 2;
  }
  uint64_t result = 0;
  a2[1] = v58;
  return result;
}

float sub_25B4D637C(float32x2_t *a1, float32x2_t *a2, float32x2_t a3)
{
  if (a2 == a1) {
    return -1.0;
  }
  unint64_t v3 = ((char *)a2 - (char *)a1) >> 4;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  for (float32x2_t i = a1 + 1; ; i += 2)
  {
    float32x2_t v5 = i[-1];
    float32x2_t v6 = vsub_f32(a3, v5);
    int32x2_t v7 = (int32x2_t)vmul_f32(v6, v6);
    float32x2_t v8 = vsub_f32(a3, *i);
    int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
    float32x2_t v10 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v9, v7), (float32x2_t)vzip2_s32(v9, v7)));
    if (v10.f32[0] >= v10.f32[1]) {
      v10.f32[0] = v10.f32[1];
    }
    if (v10.f32[0] < 0.00001) {
      break;
    }
    if (!--v3) {
      return -1.0;
    }
  }
  float32x2_t v12 = vsub_f32(v5, *i);
  return sqrtf(vaddv_f32(vmul_f32(v12, v12)));
}

void *sub_25B4D6400(void *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_25B40DE18(a1, a3);
    sub_25B4955CC(a1, a2, &a2[a3], a3);
  }
  return a1;
}

void sub_25B4D6460(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
LABEL_2:
  uint64_t v5 = *a1;
  if (v4 != *a1)
  {
    LOBYTE(v6) = 0;
    unint64_t v7 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    while (1)
    {
      if (v6) {
        goto LABEL_82;
      }
      if (v4 == v5) {
        return;
      }
      uint64_t v8 = *(void *)(v5 + 176 * v7 + 8);
      if (v8) {
        int v9 = *(_DWORD *)(v8 + 116);
      }
      else {
        int v9 = 0;
      }
      unint64_t v10 = 0;
      while (1)
      {
        if (v7 >= v10) {
          goto LABEL_71;
        }
        uint64_t v11 = *(void *)(v5 + 176 * v10 + 8);
        if (v11) {
          LODWORD(v11) = *(_DWORD *)(v11 + 116);
        }
        BOOL v12 = v11 == 3;
        BOOL v13 = v11 == 3 && v9 != 3;
        BOOL v14 = !v12 && v9 == 3;
        if (v14 || v13) {
          goto LABEL_71;
        }
        float32x2_t v15 = (float32x2_t *)(v5 + 176 * v7 + 16);
        int32x2_t v16 = (float32x2_t *)(v5 + 176 * v10 + 16);
        float v17 = sub_25B3FCCE0(v15, v16, 0);
        float v18 = *(float *)(a2 + 16);
        if (v18 < v17 && v17 < (float)(180.0 - v18))
        {
          uint64_t v5 = *a1;
          goto LABEL_59;
        }
        float32x2_t v20 = *v16;
        float32x2_t v21 = *(float32x2_t *)(v5 + 176 * v10 + 24);
        LOBYTE(__p) = vaddv_f32(vmul_f32(vsub_f32(*v15, *v16), vsub_f32(*v15, v21))) <= 0.00001;
        BYTE1(__p) = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)(v5 + 176 * v7 + 24), v20), vsub_f32(*(float32x2_t *)(v5 + 176 * v7 + 24), v21))) <= 0.00001;
        sub_25B4D6400(src, &__p, 2);
        float32x2_t v22 = *v15;
        float32x2_t v23 = *(float32x2_t *)(v5 + 176 * v7 + 24);
        v74[0] = vaddv_f32(vmul_f32(vsub_f32(*v16, *v15), vsub_f32(*v16, v23))) <= 0.00001;
        v74[1] = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)(v5 + 176 * v10 + 24), v22), vsub_f32(*(float32x2_t *)(v5 + 176 * v10 + 24), v23))) <= 0.00001;
        sub_25B4D6400(&__p, v74, 2);
        float32x2_t v24 = *(void **)&src[0];
        if (*((void *)&src[0] + 1) <= 0x3FuLL && (BYTE8(src[0]) & 0x3F) == 0) {
          goto LABEL_53;
        }
        int v25 = 0;
        int32x2_t v26 = *(void **)&src[0];
        while (((*v26 >> v25) & 1) == 0)
        {
          v26 += v25 == 63;
          if (v25 == 63) {
            int v25 = 0;
          }
          else {
            ++v25;
          }
          if (v26 == (void *)(*(void *)&src[0] + 8 * (*((void *)&src[0] + 1) >> 6))
            && v25 == (BYTE8(src[0]) & 0x3F))
          {
            goto LABEL_53;
          }
        }
        int v28 = v76 & 0x3F;
        if (v76 <= 0x3F && v28 == 0)
        {
LABEL_53:
          BOOL v34 = 0;
        }
        else
        {
          int v30 = 0;
          float v31 = __p;
          unint64_t v32 = __p;
          while (((*v32 >> v30) & 1) == 0)
          {
            v32 += v30 == 63;
            if (v30 == 63) {
              int v30 = 0;
            }
            else {
              ++v30;
            }
            if (v32 == (void *)((char *)__p + 8 * (v76 >> 6)) && v30 == v28)
            {
              BOOL v34 = 0;
              goto LABEL_54;
            }
          }
          float v45 = sub_25B40DB9C(v15[(**(_DWORD **)&src[0] & 1) == 0], *v16, v16[1], 0.00001);
          BOOL v34 = sub_25B40DB9C(v16[(*v31 & 1) == 0], *v15, v15[1], 0.00001) <= 0.15 && v45 <= 0.15;
        }
LABEL_54:
        if (__p)
        {
          operator delete(__p);
          float32x2_t v24 = *(void **)&src[0];
        }
        if (v24) {
          operator delete(v24);
        }
        uint64_t v5 = *a1;
        if (v34) {
          break;
        }
LABEL_59:
        float32x2_t v35 = (float32x2_t *)(v5 + 176 * v7 + 16);
        uint64_t v36 = (float32x2_t *)(v5 + 176 * v10 + 16);
        sub_25B40E03C((float **)src, v35, v36);
        unint64_t v37 = *(void **)&src[0];
        uint64_t v38 = *(float **)&src[0];
        if (*(void *)&src[0] != *((void *)&src[0] + 1))
        {
          uint64_t v39 = *(void *)&src[0] + 4;
          uint64_t v38 = *(float **)&src[0];
          if (*(void *)&src[0] + 4 != *((void *)&src[0] + 1))
          {
            float v40 = **(float **)&src[0];
            uint64_t v38 = *(float **)&src[0];
            int32x2_t v41 = (float *)(*(void *)&src[0] + 4);
            do
            {
              float v42 = *v41++;
              float v43 = v42;
              if (v42 < v40)
              {
                float v40 = v43;
                uint64_t v38 = (float *)v39;
              }
              uint64_t v39 = (uint64_t)v41;
            }
            while (v41 != *((float **)&src[0] + 1));
          }
        }
        if (*v38 >= *(float *)(a2 + 28))
        {
          BOOL v44 = 0;
          if (!*(void *)&src[0]) {
            goto LABEL_70;
          }
LABEL_69:
          operator delete(v37);
          goto LABEL_70;
        }
        BOOL v44 = sub_25B3FCCE0(v35, v36, 0) >= (float)(180.0 - *(float *)(a2 + 16));
        if (v37) {
          goto LABEL_69;
        }
LABEL_70:
        uint64_t v5 = *a1;
        uint64_t v4 = a1[1];
        if (v44)
        {
          int v6 = 1;
          uint64_t v72 = v7;
          uint64_t v73 = v10;
          goto LABEL_76;
        }
LABEL_71:
        if (++v10 >= 0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4))
        {
          int v6 = 0;
          goto LABEL_76;
        }
      }
      uint64_t v4 = a1[1];
      int v6 = 1;
      uint64_t v72 = v7;
      uint64_t v73 = v10;
LABEL_76:
      if (++v7 >= 0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4))
      {
        if (!v6) {
          return;
        }
LABEL_82:
        uint64_t v47 = v72;
        uint64_t v46 = v73;
        *(double *)&long long v50 = sub_25B40D3C8(*(double *)(v5 + 176 * v72 + 16), *(double *)(v5 + 176 * v72 + 24), *(double *)(v5 + 176 * v73 + 16), *(double *)(v5 + 176 * v73 + 24));
        uint64_t v51 = *a1 + 176 * v72;
        long long v52 = v50;
        DWORD2(v52) = *(_DWORD *)(v51 + 64);
        long long v54 = v53;
        DWORD2(v54) = *(_DWORD *)(v51 + 68);
        *(void *)(v51 + 16) = v50;
        *(void *)(v51 + 24) = v53;
        DWORD2(v50) = DWORD2(v54);
        DWORD2(v53) = DWORD2(v52);
        *(_OWORD *)(v51 + 32) = v52;
        *(_OWORD *)(v51 + 48) = v54;
        uint64_t v55 = *(void *)(v51 + 8);
        src[0] = v50;
        src[1] = v54;
        src[2] = v53;
        src[3] = v52;
        if (v55) {
          objc_copyStruct((void *)(v55 + 272), src, 64, 1, 0);
        }
        objc_msgSend_confidence(*(void **)(*a1 + 176 * v72 + 8), v48, v49, v72, v73);
        float v57 = v56;
        objc_msgSend_confidence(*(void **)(*a1 + 176 * v46 + 8), v58, v59);
        uint64_t v61 = *a1;
        uint64_t v62 = *(void *)(*a1 + 176 * v47 + 8);
        if (v62)
        {
          if (v57 >= v60) {
            float v60 = v57;
          }
          *(float *)(v62 + 108) = v60;
          uint64_t v61 = *a1;
          uint64_t v62 = *(void *)(*a1 + 176 * v47 + 8);
          BOOL v63 = v62 == 0;
          if (v62) {
            int v64 = *(_DWORD *)(v62 + 116);
          }
          else {
            int v64 = 0;
          }
        }
        else
        {
          int v64 = 0;
          BOOL v63 = 1;
        }
        uint64_t v65 = *(void *)(v61 + 176 * v46 + 8);
        if (v65) {
          LODWORD(v65) = *(_DWORD *)(v65 + 116);
        }
        if (!v63)
        {
          if ((int)v65 >= v64) {
            int v66 = v64;
          }
          else {
            int v66 = v65;
          }
          *(_DWORD *)(v62 + 116) = v66;
          uint64_t v61 = *a1;
        }
        *(_DWORD *)(v61 + 176 * v47 + 88) = 6;
        uint64_t v4 = sub_25B487EC4(v61 + 176 * v46 + 176, a1[1], v61 + 176 * v46);
        uint64_t v67 = a1[1];
        if (v67 != v4)
        {
          uint64_t v68 = v67 - 176;
          unint64_t v69 = (void (***)(void))(v67 - 176);
          uint64_t v70 = (void (***)(void))(v67 - 176);
          do
          {
            uint64_t v71 = *v70;
            v70 -= 22;
            (*v71)(v69);
            v68 -= 176;
            BOOL v12 = v69 == (void (***)(void))v4;
            unint64_t v69 = v70;
          }
          while (!v12);
        }
        a1[1] = v4;
        goto LABEL_2;
      }
    }
  }
}

void sub_25B4D6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4D6A60(uint64_t a1, float32x2_t *a2, float32x2_t **a3, float *a4)
{
  int v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5 == *a3)
  {
    *(unsigned char *)a1 = 0;
    sub_25B403500((void *)(a1 + 8), "");
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = a2 + 2;
    do
    {
      sub_25B4D4E4C((uint64_t)v47, v11, v6 + 2, a4);
      if (v49)
      {
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v14 = v9 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v10 - (void)v8) >> 1 > v15) {
            unint64_t v15 = (uint64_t)(v10 - (void)v8) >> 1;
          }
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)sub_25B3FBC64(v16);
          }
          else {
            BOOL v12 = 0;
          }
          float32x2_t v20 = (float *)(v16 + 4 * v14);
          *(_DWORD *)float32x2_t v20 = v48;
          float32x2_t v21 = v20 + 1;
          while (v9 != v8)
          {
            int v22 = *((_DWORD *)v9-- - 1);
            *((_DWORD *)v20-- - 1) = v22;
          }
          unint64_t v10 = v16 + 4 * (void)v12;
          if (v8) {
            operator delete(v8);
          }
          uint64_t v8 = v20;
          int v9 = v21;
        }
        else
        {
          *(_DWORD *)v9++ = v48;
        }
      }
      else if ((unint64_t)v9 >= v10)
      {
        uint64_t v17 = v9 - v8;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v10 - (void)v8) >> 1 > v18) {
          unint64_t v18 = (uint64_t)(v10 - (void)v8) >> 1;
        }
        if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)sub_25B3FBC64(v19);
        }
        else {
          BOOL v12 = 0;
        }
        float32x2_t v23 = (float *)(v19 + 4 * v17);
        *float32x2_t v23 = 0.0;
        float32x2_t v24 = v23 + 1;
        while (v9 != v8)
        {
          int v25 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v23-- - 1) = v25;
        }
        unint64_t v10 = v19 + 4 * (void)v12;
        if (v8) {
          operator delete(v8);
        }
        uint64_t v8 = v23;
        int v9 = v24;
      }
      else
      {
        *v9++ = 0.0;
      }
      if (__p)
      {
        long long v53 = __p;
        operator delete(__p);
      }
      if (v50)
      {
        uint64_t v51 = v50;
        operator delete(v50);
      }
      v6 += 22;
    }
    while (v6 != v5);
    int32x2_t v26 = v8 + 1;
    float v27 = *v8;
    if (v8 == v9)
    {
      float v35 = *v8;
      uint64_t v36 = v8;
      uint64_t v28 = a1;
    }
    else
    {
      uint64_t v28 = a1;
      if (v26 == v9)
      {
        float v35 = *v8;
        uint64_t v36 = v8;
      }
      else
      {
        float v29 = *v8;
        int v30 = v8 + 1;
        float v31 = v8;
        unint64_t v32 = v8 + 1;
        do
        {
          float v33 = *v32++;
          float v34 = v33;
          if (v29 < v33)
          {
            float v29 = v34;
            float v31 = v30;
          }
          int v30 = v32;
        }
        while (v32 != v9);
        float v35 = *v31;
        uint64_t v36 = v8;
        unint64_t v37 = v8 + 1;
        do
        {
          float v38 = *v37++;
          float v39 = v38;
          if (v27 < v38)
          {
            float v27 = v39;
            uint64_t v36 = v26;
          }
          int32x2_t v26 = v37;
        }
        while (v37 != v9);
      }
    }
    if (v35 <= 0.3)
    {
      *(unsigned char *)uint64_t v28 = 0;
      sub_25B403500((void *)(v28 + 8), "");
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v40 = (uint64_t)&(*a3)[22 * (v36 - v8)];
      uint64_t v41 = objc_msgSend_identifier(*(void **)(v40 + 8), v12, v13);
      float v42 = (void **)(v40 + 128);
      *(unsigned char *)uint64_t v28 = 1;
      float v43 = (unsigned char *)(v28 + 8);
      if (*(char *)(v40 + 151) < 0)
      {
        sub_25B4002F4(v43, *v42, *(void *)(v40 + 136));
      }
      else
      {
        long long v44 = *(_OWORD *)v42;
        *(void *)(v28 + 24) = *(void *)(v40 + 144);
        *(_OWORD *)float v43 = v44;
      }
    }
    *(void *)(v28 + 32) = v41;
    operator delete(v8);
  }
}

void sub_25B4D6D84(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_25B4D6DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, float *a5)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v8 = *a4;
      uint64_t v7 = a4[1];
      if (*a4 != v7)
      {
        do
        {
          sub_25B4D4E4C((uint64_t)&v38, (float32x2_t *)(v5 + 16), (float32x2_t *)(v8 + 16), a5);
          long long v29 = v38;
          *(_OWORD *)int v30 = *(_OWORD *)v39;
          *(_OWORD *)&v30[16] = *(_OWORD *)&v39[16];
          __int16 v31 = v40;
          float v33 = 0;
          uint64_t v34 = 0;
          unint64_t v32 = 0;
          sub_25B3FCA58(&v32, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
          float v35 = 0;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          sub_25B3FCA58(&v35, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 2);
          *(int32x2_t *)int v30 = vrev64_s32(*(int32x2_t *)v39);
          *(int32x2_t *)&v30[12] = vrev64_s32(*(int32x2_t *)&v39[12]);
          if (*(char *)(v5 + 151) < 0)
          {
            sub_25B4002F4(__dst, *(void **)(v5 + 128), *(void *)(v5 + 136));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v5 + 128);
            uint64_t v28 = *(void *)(v5 + 144);
          }
          if (*(char *)(v8 + 151) < 0)
          {
            sub_25B4002F4(__p, *(void **)(v8 + 128), *(void *)(v8 + 136));
          }
          else
          {
            long long v9 = *(_OWORD *)(v8 + 128);
            uint64_t v26 = *(void *)(v8 + 144);
            *(_OWORD *)__p = v9;
          }
          v45[0] = (long long *)__dst;
          unint64_t v10 = sub_25B48F7D8(a1, (unsigned __int8 *)__dst, v45);
          v45[0] = (long long *)__p;
          uint64_t v11 = sub_25B48FC44((uint64_t)(v10 + 40), (unsigned __int8 *)__p, v45);
          BOOL v12 = v11;
          __int16 v13 = v40;
          long long v14 = *(_OWORD *)&v39[16];
          long long v15 = *(_OWORD *)v39;
          *(_OWORD *)(v11 + 40) = v38;
          *(_OWORD *)(v11 + 56) = v15;
          *(_OWORD *)(v11 + 72) = v14;
          *((_WORD *)v11 + 44) = v13;
          if (v11 + 40 != (unsigned __int8 *)&v38)
          {
            sub_25B3FE7A8((char *)v11 + 96, (char *)v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
            sub_25B3FE7A8((char *)v12 + 120, (char *)v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 2);
          }
          v45[0] = (long long *)__p;
          unint64_t v16 = sub_25B48F7D8(a1, (unsigned __int8 *)__p, v45);
          v45[0] = (long long *)__dst;
          uint64_t v17 = sub_25B48FC44((uint64_t)(v16 + 40), (unsigned __int8 *)__dst, v45);
          unint64_t v18 = v17;
          __int16 v19 = v31;
          long long v21 = *(_OWORD *)v30;
          long long v20 = *(_OWORD *)&v30[16];
          *(_OWORD *)(v17 + 40) = v29;
          *(_OWORD *)(v17 + 56) = v21;
          *(_OWORD *)(v17 + 72) = v20;
          *((_WORD *)v17 + 44) = v19;
          if (v17 + 40 != (unsigned __int8 *)&v29)
          {
            sub_25B3FE7A8((char *)v17 + 96, (char *)v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 2);
            sub_25B3FE7A8((char *)v18 + 120, (char *)v35, (uint64_t)v36, (v36 - (unsigned char *)v35) >> 2);
          }
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(__dst[0]);
          }
          if (v35)
          {
            uint64_t v36 = v35;
            operator delete(v35);
          }
          if (v32)
          {
            float v33 = v32;
            operator delete(v32);
          }
          if (v43)
          {
            long long v44 = v43;
            operator delete(v43);
          }
          if (v41)
          {
            float v42 = v41;
            operator delete(v41);
          }
          v8 += 176;
        }
        while (v8 != v7);
      }
      v5 += 176;
    }
    while (v5 != a3);
  }
}

void sub_25B4D70BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_25B4900CC(&a27);
  sub_25B4900CC(&a40);
  sub_25B490778(v40);
  _Unwind_Resume(a1);
}

void sub_25B4D7138(uint64_t a1)
{
  sub_25B4D7170(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B4D7170(uint64_t a1)
{
  *(void *)a1 = &unk_2708F16D8;
  if (*(void *)(a1 + 8) && e5rt_execution_stream_operation_release()
    || *(void *)(a1 + 16) && e5rt_execution_stream_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  sub_25B4D7240(*(void **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  sub_25B4D7240(*(void **)(a1 + 56));
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  sub_25B4D7240(*(void **)(a1 + 32));
  return a1;
}

void sub_25B4D7240(void *a1)
{
  if (a1)
  {
    sub_25B4D7240(*a1);
    sub_25B4D7240(a1[1]);
    sub_25B4792BC((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_25B4D7298(uint64_t a1, uint64_t a2)
{
  if (e5rt_io_port_retain_tensor_desc()
    || e5rt_tensor_desc_get_shape()
    || e5rt_tensor_desc_retain_dtype()
    || e5rt_tensor_desc_dtype_get_component_dtype()
    || (*(_DWORD *)(a2 + 24) = 0,
        e5rt_tensor_desc_dtype_get_component_pack(),
        *(_DWORD *)(a2 + 28) = 0,
        e5rt_tensor_desc_dtype_release())
    || (uint64_t result = e5rt_tensor_desc_release(), result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  return result;
}

void sub_25B4D744C(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  sub_25B47B994((uint64_t)v41, v4 + 15);
  if (v42 >= 0) {
    uint64_t v5 = v41;
  }
  else {
    uint64_t v5 = (void **)v41[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v6 = a2;
    }
    else {
      int v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_operation_name");
  if (e5rt_execution_stream_operation_create_precompiled_compute_operation())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  unint64_t v40 = 0;
  if (e5rt_execution_stream_operation_get_num_inputs())
  {
    int v22 = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", v22);
    exit(1);
  }
  sub_25B4D798C(&v38, v40);
  if (e5rt_execution_stream_operation_get_input_names())
  {
    float32x2_t v23 = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", v23);
    exit(1);
  }
  uint64_t v7 = (char **)v38;
  uint64_t v8 = v39;
  if (v38 != v39)
  {
    do
    {
      long long v9 = *v7;
      float v43 = 0;
      if (e5rt_execution_stream_operation_retain_input_port())
      {
        unint64_t v18 = (const char *)e5rt_get_last_error_message();
        printf("E5RT operation failed with message = %s", v18);
        exit(1);
      }
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      sub_25B4D7298((uint64_t)v43, (uint64_t)&v34);
      sub_25B403500(&__p, v9);
      v27[0] = &__p;
      unint64_t v10 = (char *)sub_25B4D7A20((uint64_t **)(a1 + 24), &__p, (_OWORD **)v27);
      uint64_t v11 = v34;
      sub_25B469194(v10 + 56, v34, v35, (v35 - (uint64_t)v34) >> 3);
      *((void *)v10 + 10) = v37;
      if (v33 < 0) {
        operator delete(__p);
      }
      if (e5rt_io_port_release())
      {
        uint64_t v17 = (const char *)e5rt_get_last_error_message();
        printf("E5RT operation failed with message = %s", v17);
        exit(1);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  unint64_t v30 = 0;
  if (e5rt_execution_stream_operation_get_num_outputs())
  {
    float32x2_t v24 = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", v24);
    exit(1);
  }
  sub_25B4D798C(&__p, v30);
  if (e5rt_execution_stream_operation_get_output_names())
  {
    int v25 = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", v25);
    exit(1);
  }
  BOOL v12 = (char **)__p;
  __int16 v13 = v32;
  if (__p != v32)
  {
    do
    {
      long long v14 = *v12;
      uint64_t v29 = 0;
      if (e5rt_execution_stream_operation_retain_output_port())
      {
        long long v20 = (const char *)e5rt_get_last_error_message();
        printf("E5RT operation failed with message = %s", v20);
        exit(1);
      }
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      sub_25B4D7298(v29, (uint64_t)&v34);
      sub_25B403500(v27, v14);
      float v43 = v27;
      long long v15 = (char *)sub_25B4D7A20((uint64_t **)(a1 + 48), v27, (_OWORD **)&v43);
      unint64_t v16 = v34;
      sub_25B469194(v15 + 56, v34, v35, (v35 - (uint64_t)v34) >> 3);
      *((void *)v15 + 10) = v37;
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (e5rt_io_port_release())
      {
        __int16 v19 = (const char *)e5rt_get_last_error_message();
        printf("E5RT operation failed with message = %s", v19);
        exit(1);
      }
      if (v16) {
        operator delete(v16);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  if (e5rt_execution_stream_create())
  {
    uint64_t v26 = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", v26);
    exit(1);
  }
  if (__p)
  {
    unint64_t v32 = (char **)__p;
    operator delete(__p);
  }
  if (v38)
  {
    float v39 = (char **)v38;
    operator delete(v38);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
}

void sub_25B4D78A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B4D798C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_25B4D7A04(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_25B4D7A20(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)sub_25B4953D4((uint64_t)a1, &v13, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = operator new(0x58uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_OWORD *)((char *)v6 + 56) = 0u;
    *(_OWORD *)((char *)v6 + 72) = 0u;
    char v12 = 1;
    sub_25B3FA740(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    sub_25B4D7ADC((uint64_t)v11);
  }
  return v6;
}

void sub_25B4D7ADC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4792BC((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B4D7B34()
{
  uint64_t result = e5rt_execution_stream_encode_operation();
  if (result)
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  return result;
}

uint64_t sub_25B4D7B80()
{
  uint64_t result = e5rt_execution_stream_execute_sync();
  if (result)
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  return result;
}

uint64_t sub_25B4D7BC0(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  if (e5rt_execution_stream_operation_retain_input_port()
    || (CVPixelBufferGetIOSurface(a3), e5rt_buffer_object_create_from_iosurface())
    || e5rt_io_port_bind_buffer_object()
    || e5rt_buffer_object_release()
    || (uint64_t result = e5rt_io_port_release(), result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  return result;
}

uint64_t sub_25B4D7C64(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  if (e5rt_execution_stream_operation_retain_output_port()
    || (CVPixelBufferGetIOSurface(a3), e5rt_buffer_object_create_from_iosurface())
    || e5rt_io_port_bind_buffer_object()
    || e5rt_buffer_object_release()
    || (uint64_t result = e5rt_io_port_release(), result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    printf("E5RT operation failed with message = %s", last_error_message);
    exit(1);
  }
  return result;
}

char *sub_25B4D7D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 48);
  uint64_t v5 = (void **)sub_25B4953D4(a1 + 48, &v12, (void *)a2);
  int v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (char *)operator new(0x58uLL);
    v10[0] = v6;
    v10[1] = a1 + 56;
    char v11 = 0;
    uint64_t v8 = v6 + 32;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_25B4002F4(v8, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      *((void *)v6 + 6) = *(void *)(a2 + 16);
    }
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    char v11 = 1;
    sub_25B3FA740(v4, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    sub_25B4D7ADC((uint64_t)v10);
  }
  return v6 + 56;
}

void sub_25B4D7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25B4D8128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D8360(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25B4D85F0(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    long long v15 = WeakRetained;
    uint64_t v4 = objc_msgSend_generatePointListsWithFloorplan_(WeakRetained, v3, *(void *)(a1 + 32));
    uint64_t v7 = objc_msgSend_getRSPointLists(v4, v5, v6);
    unint64_t v10 = objc_msgSend_getRSWallLists(v4, v8, v9);
    uint64_t v13 = objc_msgSend_getRSOuterPointList(v4, v11, v12);
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14) {
      (*(void (**)(uint64_t, void *, void *, void *))(v14 + 16))(v14, v7, v10, v13);
    }
    dispatch_semaphore_signal(v15[1]);

    WeakRetained = v15;
  }
}

void sub_25B4D86C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D877C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25B4D88A4(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v7 = objc_msgSend_array(MEMORY[0x263EFF980], v2, v3);
    for (unint64_t i = 0; i < objc_msgSend_count(*(void **)(a1 + 32), v5, v6); ++i)
    {
      unint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, i);
      char v11 = sub_25B4E7B60([RSFloorPlan alloc], v10, i);
      objc_msgSend_addObject_(v7, v12, (uint64_t)v11);
    }
    id v16 = 0;
    uint64_t v13 = objc_msgSend_processWithMultiFloorPlan_error_(WeakRetained, v9, (uint64_t)v7, &v16);
    id v14 = v16;
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15) {
      (*(void (**)(uint64_t, void *, id))(v15 + 16))(v15, v13, v14);
    }
    dispatch_semaphore_signal(WeakRetained[1]);
  }
}

void sub_25B4D89C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D8B0C(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v15 = WeakRetained;
    uint64_t v7 = objc_msgSend_array(MEMORY[0x263EFF980], v3, v4);
    for (unint64_t i = 0; i < objc_msgSend_count(*(void **)(a1 + 32), v5, v6); ++i)
    {
      unint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, i);
      char v11 = sub_25B4E7B60([RSFloorPlan alloc], v10, i);
      objc_msgSend_addObject_(v7, v12, (uint64_t)v11);
    }
    uint64_t v13 = objc_msgSend_processWithMultiFloorPlan_(v15, v9, (uint64_t)v7);
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14) {
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v13);
    }
    dispatch_semaphore_signal(v15[1]);

    WeakRetained = v15;
  }
}

void sub_25B4D8C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D8D64(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v9 = 0;
    uint64_t v6 = objc_msgSend_processWithMultiFloorPlan_error_(WeakRetained, v3, v5, &v9);
    id v7 = v9;
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v6, v7);
    }
    dispatch_semaphore_signal(v4[1]);
  }
}

void sub_25B4D8DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D8F18(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    uint64_t v4 = objc_msgSend_processWithMultiFloorPlan_(WeakRetained, v3, *(void *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
    }
    dispatch_semaphore_signal(v6[1]);

    WeakRetained = v6;
  }
}

void sub_25B4D8F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D902C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9234(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    kdebug_trace();
    uint64_t v3 = objc_alloc_init(RSMultiRoom);
    uint64_t v4 = *(void **)(a1 + 32);
    id v8 = 0;
    uint64_t v5 = sub_25B5A5E54((float *)v3, v4, &v8);
    id v6 = v8;
    kdebug_trace();
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v5, v6);
    }
    dispatch_semaphore_signal(WeakRetained[1]);
  }
}

void sub_25B4D931C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9470(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = sub_25B4D9544;
    v6[3] = &unk_2654951E8;
    id v7 = *(id *)(a1 + 48);
    objc_msgSend_processMultiLevelWithMultiFloorPlan_withKeyframes_completionHandlerWithError_(WeakRetained, v5, v3, v4, v6);
    dispatch_semaphore_signal(WeakRetained[1]);
  }
}

void sub_25B4D952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9544(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_25B4D95A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4D9A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v37 = v36;

  sub_25B4820B0(&a11);
  sub_25B4820B0(&a35);

  _Unwind_Resume(a1);
}

void sub_25B4D9CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = v11;

  sub_25B479790((uint64_t)&STACK[0x2D0]);
  sub_25B4D433C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_25B4D9E54(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 56));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = 0;
    id v7 = objc_msgSend_processWithKeyframes_initialAsset_error_(WeakRetained, v3, v5, v6, &v10);
    id v8 = v10;
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v7, v8);
    }
    dispatch_semaphore_signal(v4[1]);
  }
}

void sub_25B4D9EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DA030(uint64_t a1)
{
  WeakRetained = (dispatch_semaphore_t *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    id v4 = objc_msgSend_processWithKeyframes_initialAsset_(WeakRetained, v3, *(void *)(a1 + 32), *(void *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
    }
    dispatch_semaphore_signal(v6[1]);

    WeakRetained = v6;
  }
}

void sub_25B4DA0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DA420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DA478(uint64_t a1, void *a2)
{
  id v50 = a2;
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    uint64_t isWindowDoorDetectionEnabled = objc_msgSend_isWindowDoorDetectionEnabled(v50, v3, v4);
    objc_msgSend_setDoorWindowEnable_(v5, v7, isWindowDoorDetectionEnabled);
    id v8 = *(void **)(a1 + 24);
    uint64_t isObjectBeautificationEnabled = objc_msgSend_isObjectBeautificationEnabled(v50, v9, v10);
    objc_msgSend_setObjectBeautificationEnable_(v8, v12, isObjectBeautificationEnabled);
    uint64_t v13 = *(void **)(a1 + 24);
    uint64_t isChairBeautificationEnabled = objc_msgSend_isChairBeautificationEnabled(v50, v14, v15);
    objc_msgSend_setChairBeautificationEnable_(v13, v17, isChairBeautificationEnabled);
    unint64_t v18 = *(void **)(a1 + 24);
    uint64_t isStandardizationEnabled = objc_msgSend_isStandardizationEnabled(v50, v19, v20);
    objc_msgSend_setStandardizationEnable_(v18, v22, isStandardizationEnabled);
    uint64_t v23 = *(void *)(a1 + 24);
    char isWallOpeningMergeEnabled = objc_msgSend_isWallOpeningMergeEnabled(v50, v24, v25);
    if (v23) {
      *(unsigned char *)(v23 + 160) = isWallOpeningMergeEnabled;
    }
    uint64_t v29 = *(void *)(a1 + 24);
    char isOpeningReplaceOpendoorEnabled = objc_msgSend_isOpeningReplaceOpendoorEnabled(v50, v27, v28);
    if (v29) {
      *(unsigned char *)(v29 + 161) = isOpeningReplaceOpendoorEnabled;
    }
    uint64_t v33 = *(void *)(a1 + 24);
    char isNonUniformHeightEnabled = objc_msgSend_isNonUniformHeightEnabled(v50, v31, v32);
    if (v33)
    {
      uint64_t v37 = *(void *)(v33 + 112);
      if (v37) {
        *(unsigned char *)(v37 + 400) = isNonUniformHeightEnabled;
      }
    }
    uint64_t v38 = *(void *)(a1 + 24);
    char isCurveEnabled = objc_msgSend_isCurveEnabled(v50, v35, v36);
    if (v38)
    {
      uint64_t v42 = *(void *)(v38 + 104);
      if (v42) {
        *(unsigned char *)(v42 + 144) = isCurveEnabled;
      }
      uint64_t v43 = *(void *)(v38 + 32);
      if (v43) {
        *(unsigned char *)(v43 + 16) = isCurveEnabled;
      }
    }
    uint64_t v44 = *(void *)(a1 + 24);
    char isRoomTypeEnabled = objc_msgSend_isRoomTypeEnabled(v50, v40, v41);
    if (v44) {
      *(unsigned char *)(v44 + 163) = isRoomTypeEnabled;
    }
    uint64_t v48 = *(void *)(a1 + 24);
    char isOpendoorReplaceOpeningEnabled = objc_msgSend_isOpendoorReplaceOpeningEnabled(v50, v46, v47);
    if (v48) {
      *(unsigned char *)(v48 + 162) = isOpendoorReplaceOpeningEnabled;
    }
  }
}

void sub_25B4DA5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DA68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DA830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DACB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DB078(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25B4DB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)RSCaptureSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25B4DB678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_25B479790((uint64_t)&STACK[0x2D0]);
  sub_25B4D433C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_25B4DB72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DB904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DBA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DBCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DBF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
}

uint64_t sub_25B4DBF98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_25B4DBFA8(uint64_t a1)
{
}

void sub_25B4DBFB0(uint64_t a1)
{
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    uint64_t v5 = objc_msgSend_copy(WeakRetained[13], v3, v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    WeakRetained = v8;
  }
}

void sub_25B4DC018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DC02C(uint64_t a1)
{
  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    __int16 v19 = WeakRetained;
    uint64_t v3 = sub_25B429050(WeakRetained[2]);
    uint64_t v6 = objc_msgSend_floorPlan(v3, v4, v5);
    objc_msgSend_updateStructure_(v6, v7, v19[12]);

    uint64_t v10 = objc_msgSend_floorPlan(v3, v8, v9);
    objc_msgSend_updateObjects_((void *)v10, v11, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));

    uint64_t v14 = objc_msgSend_delegate(v19, v12, v13);
    LOBYTE(v10) = objc_opt_respondsToSelector();

    if (v10)
    {
      uint64_t v17 = objc_msgSend_delegate(v19, v15, v16);
      objc_msgSend_session_didUpdateAsset_(v17, v18, (uint64_t)v19, v3);
    }
    WeakRetained = v19;
  }
}

void sub_25B4DC120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DC4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  objc_destroyWeak((id *)(v10 - 88));

  _Unwind_Resume(a1);
}

uint64_t sub_25B4DC540(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = v3;
  if (a1)
  {
    if (objc_msgSend_depthBuffer(v3, v4, v5))
    {
      uint64_t v9 = (__CVBuffer *)objc_msgSend_depthBuffer(v6, v7, v8);
      size_t Width = CVPixelBufferGetWidth(v9);
      uint64_t v13 = (__CVBuffer *)objc_msgSend_depthBuffer(v6, v11, v12);
      if (CVPixelBufferGetHeight(v13)) {
        BOOL v14 = Width == 0;
      }
      else {
        BOOL v14 = 1;
      }
      a1 = !v14;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_25B4DC5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4DC5C8(uint64_t a1)
{
  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = (dispatch_semaphore_t *)WeakRetained;
    sub_25B42841C(WeakRetained[2], *(void **)(a1 + 32));
    dispatch_semaphore_signal(v3[18]);
    WeakRetained = (uint64_t *)v3;
  }
}

void sub_25B4DC62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DC640(uint64_t a1)
{
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v8 = WeakRetained;
    uint64_t v5 = objc_msgSend_copy(WeakRetained[5], v3, v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    WeakRetained = v8;
  }
}

void sub_25B4DC6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DC6BC(uint64_t a1)
{
  uint64_t v821 = *MEMORY[0x263EF8340];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v795 = (uint64_t)WeakRetained;
    uint64_t v4 = objc_msgSend_date(MEMORY[0x263EFF910], v1, v2);
    uint64_t v5 = (void *)WeakRetained[9];
    WeakRetained[9] = v4;

    objc_msgSend_referenceOriginTransform(*(void **)(a1 + 32), v6, v7);
    simd_float4x4 v823 = __invert_f4(v822);
    uint64_t v10 = 0;
    v809[0] = v823;
    do
    {
      *(float32x4_t *)&block[v10 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_25B5F13E0, COERCE_FLOAT(*(_OWORD *)&v809[0].columns[v10])), (float32x4_t)xmmword_25B5F10E0, *(float32x2_t *)v809[0].columns[v10].f32, 1), (float32x4_t)xmmword_25B5F13F0, (float32x4_t)v809[0].columns[v10], 2), (float32x4_t)xmmword_25B5F12B0, (float32x4_t)v809[0].columns[v10], 3);
      ++v10;
    }
    while (v10 != 4);
    float32x4_t v783 = *(float32x4_t *)&block[16];
    *(_OWORD *)id obj = *(_OWORD *)block;
    *(float32x4_t *)location = v812;
    float32x4_t v778 = v811;
    char v11 = objc_msgSend_camera(*(void **)(a1 + 32), v8, v9);
    objc_msgSend_transform(v11, v12, v13);
    uint64_t v14 = 0;
    v809[0].columns[0] = v15;
    v809[0].columns[1] = v16;
    v809[0].columns[2] = v17;
    v809[0].columns[3] = v18;
    do
    {
      *(float32x4_t *)&block[v14 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)obj, COERCE_FLOAT(*(_OWORD *)&v809[0].columns[v14])), v783, *(float32x2_t *)v809[0].columns[v14].f32, 1), v778, (float32x4_t)v809[0].columns[v14], 2), *(float32x4_t *)location, (float32x4_t)v809[0].columns[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    uint64_t v19 = 0;
    float32x4_t v20 = *(float32x4_t *)block;
    float32x4_t v21 = *(float32x4_t *)&block[16];
    float32x4_t v22 = v811;
    float32x4_t v23 = v812;
    v809[0].columns[0] = (simd_float4)xmmword_25B5F1360;
    v809[0].columns[1] = (simd_float4)xmmword_25B5F13E0;
    v809[0].columns[2] = (simd_float4)xmmword_25B5F1400;
    v809[0].columns[3] = (simd_float4)xmmword_25B5F12B0;
    do
    {
      *(float32x4_t *)&block[v19 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)&v809[0].columns[v19])), v21, *(float32x2_t *)v809[0].columns[v19].f32, 1), v22, (float32x4_t)v809[0].columns[v19], 2), v23, (float32x4_t)v809[0].columns[v19], 3);
      ++v19;
    }
    while (v19 != 4);
    int32x4_t v789 = *(int32x4_t *)&block[16];
    int32x4_t v791 = *(int32x4_t *)block;
    float32x4_t v784 = v812;
    int32x4_t obja = (int32x4_t)v811;

    uint64_t v24 = WeakRetained[19];
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v27 = v25;
    id v30 = v26;
    if (v24)
    {
      if (objc_msgSend_depthBuffer(v27, v28, v29))
      {
        id v32 = v27;
        if (*(unsigned char *)(v24 + 177))
        {
          objc_storeStrong((id *)(v24 + 104), v25);
          *(int32x4_t *)(v24 + 112) = v791;
          *(int32x4_t *)(v24 + 128) = v789;
          *(int32x4_t *)(v24 + 144) = obja;
          *(float32x4_t *)(v24 + 160) = v784;
        }
      }
      if (*(unsigned char *)(v24 + 177))
      {
        if (*(unsigned char *)(v24 + 176))
        {
          uint64_t v33 = *(void **)(v24 + 24);
          if (v33)
          {
            uint64_t v34 = objc_msgSend_stringByAppendingPathComponent_(v33, v31, @"Live");
            uint64_t v35 = *(void *)(v24 + 72);
            uint64_t v36 = *(id *)(v24 + 16);
            uint64_t v39 = objc_msgSend_count(v30, v37, v38);
            dispatch_group_enter(v36);
            unint64_t v40 = *(NSObject **)(v24 + 8);
            *(void *)blocunint64_t k = MEMORY[0x263EF8330];
            *(void *)&block[8] = 3221225472;
            *(void *)&block[16] = sub_25B41F374;
            *(void *)&block[24] = &unk_265495040;
            id v815 = v34;
            id v41 = v27;
            uint64_t v820 = v35;
            float32x4_t v811 = (float32x4_t)v791;
            float32x4_t v812 = (float32x4_t)v789;
            int32x4_t v813 = obja;
            float32x4_t v814 = v784;
            id v816 = v41;
            uint64_t v817 = v24;
            uint64_t v819 = v39;
            v818 = v36;
            uint64_t v42 = v36;
            id v43 = v34;
            dispatch_async(v40, block);
          }
        }
      }
    }

    uint64_t v44 = v795;
    if (!objc_msgSend_isDriftDetectionEnabled(*(void **)(v795 + 8), v45, v46)
      || !sub_25B4DC540(*(void *)(a1 + 40), *(void **)(a1 + 32)))
    {
      float v56 = 0;
      goto LABEL_65;
    }
    uint64_t v49 = *(void *)(v795 + 80);
    id v50 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v51 = *(id *)(a1 + 32);
    id v52 = v50;
    v746 = v52;
    if (!v49)
    {
      float v56 = 0;
      goto LABEL_577;
    }
    long long v53 = v52;
    int v806 = 6194;
    uint64_t v807 = 0;
    kdebug_trace();
    id v779 = v51;
    id v764 = v53;
    float v56 = objc_alloc_init(RSDriftDetectionSignal);
    unint64_t v57 = *(void *)(v49 + 104);
    unint64_t v58 = *(void *)(v49 + 112);
    *(void *)(v49 + 104) = v57 + 1;
    if (v57 < v58)
    {
LABEL_576:

      sub_25B400F2C((uint64_t)&v806);
LABEL_577:

      if (v56 && v56->_type < 0)
      {
        uint64_t v44 = v795;
      }
      else
      {
        if (qword_26A502100 != -1) {
          dispatch_once(&qword_26A502100, &unk_2708F12B8);
        }
        v703 = (id)qword_26A5020F8;
        if (os_log_type_enabled(v703, OS_LOG_TYPE_ERROR))
        {
          if (v56) {
            int64_t type = v56->_type;
          }
          else {
            int64_t type = 0;
          }
          *(_DWORD *)blocunint64_t k = 134217984;
          *(void *)&block[4] = type;
          _os_log_error_impl(&dword_25B3F3000, v703, OS_LOG_TYPE_ERROR, "RSError: kRSError_Runtime_DriftDetection: %ld", block, 0xCu);
        }

        uint64_t v704 = *(void *)(v795 + 152);
        id v705 = *(id *)(a1 + 32);
        v706 = v56;
        id v707 = v705;
        v708 = v706;
        v711 = v706;
        if (v704 && *(unsigned char *)(v704 + 177))
        {
          v712 = *(void **)(v704 + 56);
          v809[0].columns[0].i64[0] = @"timestamp";
          v713 = NSNumber;
          objc_msgSend_timestamp(v707, v709, v710);
          v716 = objc_msgSend_numberWithDouble_(v713, v714, v715);
          *(void *)blocunint64_t k = v716;
          v809[0].columns[0].i64[1] = @"video_timestamp";
          v717 = NSNumber;
          objc_msgSend_timestamp(v707, v718, v719);
          v724 = objc_msgSend_numberWithDouble_(v717, v721, v722, v720 - *(double *)(v704 + 72));
          *(void *)&block[8] = v724;
          v809[0].columns[1].i64[0] = @"type";
          if (v708) {
            objc_msgSend_numberWithInteger_(NSNumber, v723, v711[2]);
          }
          else {
          v725 = objc_msgSend_numberWithInteger_(NSNumber, v723, 0);
          }
          *(void *)&block[16] = v725;
          v727 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v726, (uint64_t)block, v809, 3);
          objc_msgSend_addObject_(v712, v728, (uint64_t)v727);
        }
        v731 = objc_msgSend_delegate((void *)v795, v729, v730);
        char v732 = objc_opt_respondsToSelector();

        if (v732)
        {
          v733 = objc_msgSend_delegate((void *)v795, v47, v48);
          objc_msgSend_session_didFailWithError_(v733, v734, v795, -2);
        }
        uint64_t v44 = v795;
        float v56 = (RSDriftDetectionSignal *)v711;
      }
LABEL_65:
      if (!objc_msgSend_isTextCoachingEnabled(*(void **)(v44 + 8), v47, v48))
      {
LABEL_563:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v44 + 136));

        WeakRetained = (void *)v795;
        goto LABEL_564;
      }
      uint64_t v101 = *(void *)(v44 + 64);
      id v770 = *(id *)(a1 + 32);
      v765 = v56;
      v747 = v56;
      if (!v101)
      {
        v652 = 0;
LABEL_556:

        if (objc_msgSend_type(v652, v654, v655) != -1)
        {
          uint64_t v656 = *(void *)(v795 + 152);
          id v657 = *(id *)(a1 + 32);
          v660 = v652;
          if (v656 && *(unsigned char *)(v656 + 177))
          {
            v661 = *(void **)(v656 + 48);
            v809[0].columns[0].i64[0] = @"timestamp";
            v662 = NSNumber;
            objc_msgSend_timestamp(v657, v658, v659);
            v665 = objc_msgSend_numberWithDouble_(v662, v663, v664);
            *(void *)blocunint64_t k = v665;
            v809[0].columns[0].i64[1] = @"state";
            v666 = NSNumber;
            uint64_t v669 = objc_msgSend_state(v660, v667, v668);
            v671 = objc_msgSend_numberWithInteger_(v666, v670, v669);
            *(void *)&block[8] = v671;
            v809[0].columns[1].i64[0] = @"video_timestamp";
            v672 = NSNumber;
            objc_msgSend_timestamp(v657, v673, v674);
            v678 = objc_msgSend_numberWithDouble_(v672, v676, v677, v675 - *(double *)(v656 + 72));
            *(void *)&block[16] = v678;
            v809[0].columns[1].i64[1] = @"type";
            v679 = NSNumber;
            uint64_t v682 = objc_msgSend_type(v660, v680, v681);
            v684 = objc_msgSend_numberWithInteger_(v679, v683, v682);
            *(void *)&block[24] = v684;
            v809[0].columns[2].i64[0] = @"score";
            v685 = NSNumber;
            objc_msgSend_score(v660, v686, v687);
            v690 = objc_msgSend_numberWithFloat_(v685, v688, v689);
            v811.i64[0] = (uint64_t)v690;
            v692 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v691, (uint64_t)block, v809, 5);
            objc_msgSend_addObject_(v661, v693, (uint64_t)v692);
          }
          v696 = objc_msgSend_delegate((void *)v795, v694, v695);
          char v697 = objc_opt_respondsToSelector();

          if (v697)
          {
            v700 = objc_msgSend_delegate((void *)v795, v698, v699);
            objc_msgSend_session_didUpdateTextCoaching_(v700, v701, v795, v660);
          }
        }

        uint64_t v44 = v795;
        float v56 = v747;
        goto LABEL_563;
      }
      int v806 = 12201;
      uint64_t v807 = 0;
      kdebug_trace();
      uint64_t v104 = objc_msgSend_camera(v770, v102, v103);
      objc_msgSend_intrinsics(v104, v105, v106);
      *(float32x4_t *)locationb = v107;
      float32x4_t v780 = v109;
      if (fabsf(v108.f32[0] + -128.0) <= 50.0)
      {
        simd_float4 v766 = v108;
      }
      else
      {
        float32x4_t v110 = (float32x4_t)vdupq_n_s32(0x3E088889u);
        *(float32x4_t *)locationb = vmulq_f32(v107, v110);
        float32x4_t v780 = vmulq_f32(v780, v110);
        __asm { FMOV            V1.4S, #1.0 }
        *(float32x2_t *)_Q1.f32 = vmul_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v110.f32);
        simd_float4 v766 = _Q1;
      }

      if (!*(void *)(v101 + 896))
      {
        uint64_t v116 = objc_msgSend_date(MEMORY[0x263EFF910], v114, v115);
        uint64_t v117 = *(void **)(v101 + 896);
        *(void *)(v101 + 896) = v116;
      }
      if (v765 && (v765->_type & 0x8000000000000000) == 0 || objc_msgSend_vioTrackingState(v770, v114, v115))
      {
        BOOL v748 = 1;
      }
      else
      {
        float32x2_t v120 = objc_msgSend_camera(v770, v118, v119);
        BOOL v748 = objc_msgSend_trackingState(v120, v121, v122) == 1;
      }
      id v123 = v770;
      objc_msgSend_timestamp(v123, v124, v125);
      uint64_t v129 = v128;
      int32x2_t v130 = *(char **)(v101 + 48);
      float v131 = *(char **)(v101 + 40);
      uint64_t v132 = v130 - v131;
      if (v130 == v131) {
        uint64_t v133 = 0;
      }
      else {
        uint64_t v133 = 51 * ((v130 - v131) >> 3) - 1;
      }
      unint64_t v134 = *(void *)(v101 + 64);
      unint64_t v135 = *(void *)(v101 + 72) + v134;
      if (v133 != v135) {
        goto LABEL_408;
      }
      if (v134 >= 0x33)
      {
        *(void *)(v101 + 64) = v134 - 51;
        uint64_t v138 = *(void *)v131;
        int v136 = v131 + 8;
        uint64_t v137 = v138;
        *(void *)(v101 + 40) = v136;
        if (*(char **)(v101 + 56) == v130)
        {
          unint64_t v139 = *(void *)(v101 + 32);
          uint64_t v140 = (uint64_t)&v136[-v139];
          if ((unint64_t)v136 <= v139)
          {
            uint64_t v187 = (uint64_t)&v130[-v139];
            _ZF = v187 == 0;
            uint64_t v188 = v187 >> 2;
            if (_ZF) {
              unint64_t v189 = 1;
            }
            else {
              unint64_t v189 = v188;
            }
            v190 = (char *)sub_25B3FCAD4(v189);
            v191 = &v190[8 * (v189 >> 2)];
            unint64_t v192 = *(uint64_t **)(v101 + 40);
            int32x2_t v130 = v191;
            uint64_t v193 = *(void *)(v101 + 48) - (void)v192;
            if (v193)
            {
              int32x2_t v130 = &v191[v193 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v194 = 8 * (v193 >> 3);
              long long v195 = &v190[8 * (v189 >> 2)];
              do
              {
                uint64_t v196 = *v192++;
                *(void *)long long v195 = v196;
                v195 += 8;
                v194 -= 8;
              }
              while (v194);
            }
            long long v197 = *(void **)(v101 + 32);
            *(void *)(v101 + 32) = v190;
            *(void *)(v101 + 40) = v191;
            *(void *)(v101 + 48) = v130;
            *(void *)(v101 + 56) = &v190[8 * (void)v126];
            if (v197)
            {
              operator delete(v197);
              int32x2_t v130 = *(char **)(v101 + 48);
            }
          }
          else
          {
            uint64_t v141 = v140 >> 3;
            BOOL v142 = v140 >> 3 < -1;
            uint64_t v143 = (v140 >> 3) + 2;
            if (v142) {
              uint64_t v144 = v143;
            }
            else {
              uint64_t v144 = v141 + 1;
            }
            uint64_t v145 = -(v144 >> 1);
            uint64_t v146 = v144 >> 1;
            v147 = &v136[-8 * v146];
            int64_t v148 = v130 - v136;
            if (v130 == v136)
            {
              uint64_t v149 = v130;
            }
            else
            {
              memmove(&v136[-8 * v146], v136, v130 - v136);
              uint64_t v149 = *(char **)(v101 + 40);
            }
            int32x2_t v130 = &v147[v148];
            *(void *)(v101 + 40) = &v149[8 * v145];
            *(void *)(v101 + 48) = &v147[v148];
          }
        }
        *(void *)int32x2_t v130 = v137;
LABEL_406:
        *(void *)(v101 + 48) += 8;
LABEL_407:
        float v131 = *(char **)(v101 + 40);
        unint64_t v135 = *(void *)(v101 + 72) + *(void *)(v101 + 64);
LABEL_408:
        unint64_t v407 = *(void *)&v131[8 * (v135 / 0x33)] + 80 * (v135 % 0x33);
        *(int32x4_t *)unint64_t v407 = v791;
        *(int32x4_t *)(v407 + 16) = v789;
        *(int32x4_t *)(v407 + 32) = obja;
        *(float32x4_t *)(v407 + 48) = v784;
        *(void *)(v407 + 64) = v129;
        uint64_t v408 = *(void *)(v101 + 72);
        *(void *)(v101 + 72) = v408 + 1;
        if ((unint64_t)(v408 + 1) <= 2)
        {
          v410 = *(void ***)(v101 + 40);
          unint64_t v409 = *(void *)(v101 + 64);
        }
        else
        {
          unint64_t v409 = *(void *)(v101 + 64) + 1;
          *(void *)(v101 + 64) = v409;
          *(void *)(v101 + 72) = v408;
          v410 = *(void ***)(v101 + 40);
          if (v409 >= 0x66)
          {
            operator delete(*v410);
            v410 = (void **)(*(void *)(v101 + 40) + 8);
            *(void *)(v101 + 40) = v410;
            unint64_t v409 = *(void *)(v101 + 64) - 51;
            *(void *)(v101 + 64) = v409;
          }
        }
        unint64_t v411 = (unint64_t)v410[v409 / 0x33] + 80 * (v409 % 0x33);
        int32x4_t v753 = *(int32x4_t *)(v411 + 32);
        int32x4_t v761 = *(int32x4_t *)v411;
        float32x4_t v742 = *(float32x4_t *)(v411 + 48);
        *(_OWORD *)__pa = *(_OWORD *)(v411 + 16);
        double v412 = *(double *)(v411 + 64);
        objc_msgSend_timestamp(v123, v126, v127);
        double v414 = v413 - v412;
        float32x4_t v415 = 0uLL;
        float32x4_t v416 = 0uLL;
        if (v414 >= 0.001)
        {
          uint64_t v417 = 0;
          float32x4_t v418 = vsubq_f32(v784, v742);
          *(float *)&double v414 = v414;
          float32x4_t v419 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v414, 0);
          simd_float4 v420 = (simd_float4)v791;
          v420.i32[3] = 0;
          simd_float4 v421 = (simd_float4)v789;
          v421.i32[3] = 0;
          simd_float4 v422 = (simd_float4)obja;
          v422.i32[3] = 0;
          int32x4_t v423 = vzip1q_s32(v791, obja);
          int32x4_t v424 = vzip1q_s32(v789, (int32x4_t)0);
          float32x4_t v425 = (float32x4_t)vzip2q_s32(v423, v424);
          float32x4_t v426 = (float32x4_t)vzip1q_s32(v761, *(int32x4_t *)__pa);
          v426.i32[2] = v753.i32[0];
          float32x4_t v427 = (float32x4_t)vzip2q_s32(v761, *(int32x4_t *)__pa);
          v427.i32[2] = v753.i32[2];
          float32x4_t v428 = (float32x4_t)vzip2q_s32(vzip1q_s32(v761, v753), vdupq_lane_s32((int32x2_t)__pa[0], 1));
          v809[0].columns[0] = v420;
          v809[0].columns[1] = v421;
          v809[0].columns[2] = v422;
          do
          {
            *(float32x4_t *)&block[v417 * 16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v426, COERCE_FLOAT(*(_OWORD *)&v809[0].columns[v417])), v428, *(float32x2_t *)v809[0].columns[v417].f32, 1), v427, (float32x4_t)v809[0].columns[v417], 2);
            ++v417;
          }
          while (v417 != 3);
          float32x4_t v429 = vdivq_f32(v418, v419);
          float32x4_t v432 = (float32x4_t)vzip1q_s32(v423, v424);
          float32x4_t v430 = (float32x4_t)vzip1q_s32(vzip2q_s32(v791, obja), vdupq_laneq_s32(v789, 2));
          float32x4_t v431 = vmlaq_lane_f32(vmulq_n_f32(v432, v429.f32[0]), v425, *(float32x2_t *)v429.f32, 1);
          v432.i64[1] = *(void *)&block[24];
          float v433 = v811.f32[2] + (float)(*(float *)block + *(float *)&block[20]);
          float32x4_t v743 = v419;
          if (v433 >= 0.0)
          {
            float v441 = sqrtf(v433 + 1.0);
            float32_t v442 = v441 + v441;
            float32x2_t v443 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v441 + v441));
            float32x2_t v444 = vmul_f32(v443, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v441 + v441), v443));
            v444.i32[0] = vmul_f32(v444, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v441 + v441), v444)).u32[0];
            *(float32x2_t *)v452.f32 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(*(int32x4_t *)&block[16], vuzp1q_s32(*(int32x4_t *)&block[16], (int32x4_t)v811)), (float32x2_t)*(_OWORD *)&vtrn2q_s32((int32x4_t)v811, vzip2q_s32((int32x4_t)v811, *(int32x4_t *)block))), v444.f32[0]);
            v445.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)block, 1), *(float32x2_t *)&block[16]).u32[0];
            v445.f32[1] = v442;
            v444.i32[1] = 0.25;
            int32x2_t v455 = (int32x2_t)vmul_f32(v445, v444);
          }
          else if (*(float *)block < *(float *)&block[20] || *(float *)block < v811.f32[2])
          {
            float v435 = 1.0 - *(float *)block;
            if (*(float *)&block[20] >= v811.f32[2])
            {
              float v456 = sqrtf(*(float *)&block[20] + (float)(v435 - v811.f32[2]));
              *(float *)&unsigned int v457 = v456 + v456;
              float32x2_t v458 = vrecpe_f32((float32x2_t)v457);
              float32x2_t v459 = vmul_f32(v458, vrecps_f32((float32x2_t)v457, v458));
              v460.i32[0] = vmul_f32(v459, vrecps_f32((float32x2_t)v457, v459)).u32[0];
              v459.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)block, 1), *(float32x2_t *)&block[16]).u32[0];
              v459.i32[1] = v457;
              float32x2_t v461 = (float32x2_t)vrev64_s32(*(int32x2_t *)v811.f32);
              float32x2_t v462 = (float32x2_t)vzip2q_s32(*(int32x4_t *)&block[16], *(int32x4_t *)block).u64[0];
              v463.i32[0] = vadd_f32(v461, v462).u32[0];
              v463.i32[1] = vsub_f32(v461, v462).i32[1];
              int32x2_t v455 = (int32x2_t)vmul_n_f32(v463, v460.f32[0]);
              v460.i32[1] = 0.25;
              *(float32x2_t *)v452.f32 = vmul_f32(v459, v460);
            }
            else
            {
              float32x2_t v436 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&block[16], 0);
              float32x2_t v437 = vsub_f32(*(float32x2_t *)block, v436);
              v436.i32[0] = 2.0;
              v436.i32[0] = vmul_f32((float32x2_t)__PAIR64__(*(unsigned int *)&block[4], COERCE_UNSIGNED_INT(sqrtf(v811.f32[2] + (float)(v435 - *(float *)&block[20])))), v436).u32[0];
              v436.i32[1] = v437.i32[1];
              float32x2_t v438 = vrecpe_f32((float32x2_t)v436.u32[0]);
              float32x2_t v439 = vmul_f32(v438, vrecps_f32((float32x2_t)v436.u32[0], v438));
              v437.i32[0] = vmul_f32(v439, vrecps_f32((float32x2_t)v436.u32[0], v439)).u32[0];
              *(float32x2_t *)v452.f32 = vmul_n_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(*(int32x4_t *)block, *(int32x4_t *)&block[16]), *(float32x2_t *)v811.f32), v437.f32[0]);
              __asm { FMOV            V4.2S, #0.25 }
              _D4.i32[1] = v437.i32[0];
              int32x2_t v455 = (int32x2_t)vmul_f32(v436, _D4);
            }
          }
          else
          {
            float32x2_t v446 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&block[16], 0);
            float32x2_t v447 = vadd_f32(*(float32x2_t *)block, v446);
            v446.i32[0] = 2.0;
            v446.i32[0] = vmul_f32((float32x2_t)__PAIR64__(*(unsigned int *)&block[4], COERCE_UNSIGNED_INT(sqrtf(*(float *)block+ (float)((float)(1.0 - *(float *)&block[20]) - v811.f32[2])))), v446).u32[0];
            v446.i32[1] = v447.i32[1];
            float32x2_t v448 = vrecpe_f32((float32x2_t)v446.u32[0]);
            float32x2_t v449 = vmul_f32(v448, vrecps_f32((float32x2_t)v446.u32[0], v448));
            LODWORD(v450) = vmul_f32(v449, vrecps_f32((float32x2_t)v446.u32[0], v449)).u32[0];
            __asm { FMOV            V7.2S, #0.25 }
            _D7.f32[1] = v450;
            *(float32x2_t *)v452.f32 = vmul_f32(v446, _D7);
            float32x2_t v453 = (float32x2_t)vzip2q_s32(*(int32x4_t *)block, *(int32x4_t *)&block[16]).u64[0];
            v454.i32[0] = vadd_f32(v453, *(float32x2_t *)v811.f32).u32[0];
            v454.i32[1] = vsub_f32(v453, *(float32x2_t *)&v811).i32[1];
            int32x2_t v455 = (int32x2_t)vmul_n_f32(v454, v450);
          }
          *(int32x2_t *)&v452.u32[2] = v455;
          v432.i64[0] = 0;
          float32x4_t v464 = vmlaq_laneq_f32(v431, v430, v429, 2);
          float32x4_t v465 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v432, (float32x4_t)vdupq_lane_s32(v455, 1)), 0), (int8x16_t)vnegq_f32(v452), (int8x16_t)v452);
          float32x4_t v466 = vmulq_f32(v465, v465);
          float32x4_t v754 = v465;
          float32x4_t v762 = v464;
          float v467 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v466, 2), vaddq_f32(v466, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v466.f32, 1))).f32[0]), v465.f32[3]);
          float v468 = v467 + v467;
          long double v469 = (float)(v467 + v467);
          if (v469 <= 0.001) {
            float v470 = v469 * v469 / 12.0 + 2.0 + pow(v469, 4.0) * 7.0 / 2880.0;
          }
          else {
            float v470 = v468 / sinf(v468 * 0.5);
          }
          float32x4_t v415 = v762;
          float32x4_t v416 = vmulq_f32(vdivq_f32(vmulq_n_f32(v754, v470), v743), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
        }
        *(float32x4_t *)(v101 + 192) = v416;
        *(float32x4_t *)(v101 + 176) = v415;

        float32x4_t v755 = *(float32x4_t *)(v101 + 176);
        float32x4_t v763 = *(float32x4_t *)(v101 + 192);
        v473 = objc_msgSend_rawFeaturePoints(v123, v471, v472);
        uint64_t v476 = objc_msgSend_count(v473, v474, v475);

        *(_DWORD *)blocunint64_t k = fminf(fmaxf((float)(unint64_t)v476 / *(float *)(v101 + 288), -1.0), 1.0);
        float32x4_t v477 = vmulq_f32(v755, v755);
        _NF = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v477, 2), vaddq_f32(v477, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v477.f32, 1))).f32[0]) < 0.2;
        float32x4_t v478 = vmulq_f32(v763, v763);
        float v479 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v478, 2), vaddq_f32(v478, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v478.f32, 1))).f32[0]);
        if (!_NF || v479 >= 0.5) {
          sub_25B545174((void *)(v101 + 344), (float *)block);
        }
        unint64_t v481 = *(void *)(v101 + 384);
        if (!v481)
        {
          uint64_t v482 = *(void *)(v101 + 360);
          uint64_t v483 = *(void *)(v101 + 352);
          uint64_t v484 = ((v482 - v483) << 7) - 1;
          if (v482 == v483) {
            uint64_t v484 = 0;
          }
          unint64_t v485 = *(void *)(v101 + 376);
          if (v484 == v485)
          {
            sub_25B54524C((void *)(v101 + 344));
            uint64_t v483 = *(void *)(v101 + 352);
            uint64_t v486 = *(void *)(v101 + 384);
            unint64_t v485 = *(void *)(v101 + 376) + v486;
          }
          else
          {
            uint64_t v486 = 0;
          }
          *(_DWORD *)(*(void *)(v483 + ((v485 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v485 & 0x3FF)) = 1056964608;
          unint64_t v481 = v486 + 1;
          *(void *)(v101 + 384) = v486 + 1;
        }
        if (v481 >= 2)
        {
          ++*(void *)(v101 + 376);
          *(void *)(v101 + 384) = v481 - 1;
          sub_25B5451FC(v101 + 344);
        }
        std::mutex::lock((std::mutex *)(v101 + 936));
        simd_float4 v492 = (simd_float4)v780;
        v492.i32[3] = 0;
        simd_float4 v781 = v492;
        long long v493 = *(_OWORD *)locationb;
        HIDWORD(v493) = 0;
        *(_OWORD *)locationd = v493;
        simd_float4 v494 = v766;
        v494.i32[3] = 0;
        simd_float4 v768 = v494;
        if ((*(void *)(v101 + 1000) & 0x8000000000000000) == 0)
        {
          *(int32x4_t *)blocunint64_t k = v791;
          *(int32x4_t *)&block[16] = v789;
          float32x4_t v811 = (float32x4_t)obja;
          float32x4_t v812 = v784;
          v809[0].columns[0] = v781;
          v809[0].columns[1] = *(simd_float4 *)locationd;
          v809[0].columns[2] = v494;
          *(double *)v495.i64 = sub_25B4781B8((float32x4_t *)block, (uint64_t)v809, 100, 100, *(double *)v494.i64, *(double *)v781.i64, v488, v489, v490, v491);
          float32x4_t v792 = v495;
          uint64_t v498 = objc_msgSend_type(*(void **)(v101 + 856), v496, v497);
          float32x4_t v501 = vmulq_f32(v792, (float32x4_t)xmmword_25B5F1400);
          float32x4_t v502 = vaddq_f32(v501, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v501.f32, 1));
          *(void *)&double v503 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v501, 2), v502).u64[0];
          double v793 = v503;
          if (v498 == -1)
          {
            LODWORD(v503) = 0.5;
            *(double *)v502.i64 = v793;
            if (*(float *)&v793 > 0.5)
            {
              v504 = [RSTextCoachingSignal alloc];
              if (v504) {
                v504 = (RSTextCoachingSignal *)sub_25B51F704(v504, 0, 1.0);
              }
              v505 = *(void **)(v101 + 856);
              *(void *)(v101 + 856) = v504;
            }
          }
          if (objc_msgSend_type(*(void **)(v101 + 864), v499, v500, v503, *(double *)v502.i64) == -1
            && *(float *)&v793 < -0.5)
          {
            v506 = [RSTextCoachingSignal alloc];
            if (v506) {
              v506 = (RSTextCoachingSignal *)sub_25B51F704(v506, 0, 1.0);
            }
            v507 = *(void **)(v101 + 864);
            *(void *)(v101 + 864) = v506;
          }
        }
        sub_25B5850C4(v101, 0, v487);
        if (v748 && !*(void *)(v101 + 1000))
        {
          sub_25B545EB8((void *)(v101 + 288));
          double v510 = sub_25B54573C(v101 + 16);
        }
        float v513 = 1.0 / (float)*(unint64_t *)(v101 + 920);
        if (objc_msgSend_type(*(void **)(v101 + 872), v508, v509, v510) == 3
          || objc_msgSend_type(*(void **)(v101 + 872), v511, v512) == 1)
        {
          float v513 = fmaxf(v513, 0.8);
        }
        if (*(void *)(v101 + 912))
        {
          v514 = *(void **)(v101 + 872);
          if (v514)
          {
            uint64_t v515 = *(void *)(v101 + 1000);
            if (v515 == objc_msgSend_state(v514, v511, v512))
            {
              v518 = objc_msgSend_date(MEMORY[0x263EFF910], v516, v517);
              objc_msgSend_timeIntervalSinceDate_(v518, v519, *(void *)(v101 + 912));
              BOOL v521 = v520 < v513;

              if (v521)
              {
                v526 = objc_msgSend_copy(*(void **)(v101 + 872), v522, v523);
LABEL_546:
                if (v526) {
                  v526[3] = *(void *)(v101 + 1000);
                }
                if (*(void *)(v101 + 872)
                  && (uint64_t v642 = objc_msgSend_type(v526, v524, v525),
                      v642 == objc_msgSend_type(*(void **)(v101 + 872), v643, v644))
                  && (uint64_t v647 = objc_msgSend_state(v526, v645, v646),
                      v647 == objc_msgSend_state(*(void **)(v101 + 872), v648, v649)))
                {
                  v650 = [RSTextCoachingSignal alloc];
                  if (v650)
                  {
                    v651 = sub_25B51F704(v650, -1, 1.0);
                    v652 = v651;
                    if (v651) {
                      *((void *)v651 + 3) = *(void *)(v101 + 1000);
                    }
                  }
                  else
                  {
                    v652 = 0;
                  }
                }
                else
                {
                  v652 = v526;
                }
                std::mutex::unlock((std::mutex *)(v101 + 936));
                v653 = *(void **)(v101 + 872);
                *(void *)(v101 + 872) = v526;

                sub_25B400F2C((uint64_t)&v806);
                goto LABEL_556;
              }
            }
          }
        }
        simd_float4 v797 = v781;
        *(_OWORD *)v798 = *(_OWORD *)locationd;
        simd_float4 v799 = v768;
        id v527 = v123;
        v794 = v765;
        switch(*(void *)(v101 + 1000))
        {
          case 0xFFFFFFFFFFFFFFFFLL:
            v530 = [RSTextCoachingSignal alloc];
            if (!v530) {
              goto LABEL_468;
            }
            v526 = sub_25B51F704(v530, 0, 1.0);
            goto LABEL_545;
          case 0:
            if (v765 && (v794->_type & 0x8000000000000000) == 0 || objc_msgSend_vioTrackingState(v527, v528, v529))
            {
              char v541 = 1;
            }
            else
            {
              v542 = objc_msgSend_camera(v527, v539, v540);
              char v541 = objc_msgSend_trackingState(v542, v543, v544) == 1;
            }
            id v545 = sub_25B546840(v101 + 464, v527);
            id v546 = sub_25B545878(v101 + 288, v527);
            LODWORD(v547) = *(_DWORD *)(v101 + 568);
            v790 = sub_25B544BEC(v101 + 16, v527, (uint64_t)&v797, v547);
            float v550 = 0.0;
            float v551 = 0.0;
            if (objc_msgSend_type(v790, v548, v549) == 1)
            {
              float32x4_t v552 = vmulq_f32(*(float32x4_t *)(v101 + 176), *(float32x4_t *)(v101 + 176));
              float32x4_t v553 = vmulq_f32(*(float32x4_t *)(v101 + 192), *(float32x4_t *)(v101 + 192));
              float v550 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v552, 2), vaddq_f32(v552, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v552.f32, 1))).f32[0]);
              float v551 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v553, 2), vaddq_f32(v553, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v553.f32, 1))).f32[0]);
            }
            float v554 = *(float *)(v101 + 392);
            float v555 = *(float *)(v101 + 396);
            float v556 = *(float *)(v101 + 568);
            id v785 = v527;
            v559 = objc_msgSend_array(MEMORY[0x263EFF980], v557, v558);
            objb = objc_msgSend_date(MEMORY[0x263EFF910], v560, v561);
            locatione = (id *)(v101 + 776);
            if (!*(void *)(v101 + 776)) {
              objc_storeStrong(locatione, objb);
            }
            float v562 = 1.0 / (float)(expf(-(float)(*(float *)(v101 + 820) + (float)(*(float *)(v101 + 816) * v556))) + 1.0);
            if (v562 > 0.5)
            {
              v563 = [RSTextCoachingSignal alloc];
              if (v563)
              {
                v565 = sub_25B51F704(v563, 2, v562);
                objc_msgSend_addObject_(v559, v566, (uint64_t)v565);
              }
              else
              {
                v565 = 0;
                objc_msgSend_addObject_(v559, v564, 0);
              }
            }
            v782 = sub_25B546E20(v101 + 640, v785, v541, v550, v551);
            if (v782) {
              objc_msgSend_addObject_(v559, v567, (uint64_t)v782);
            }
            float v568 = expf(-(float)(*(float *)(v101 + 812) + (float)(*(float *)(v101 + 808) * v554)));
            if (v555 < 25.0)
            {
              float v569 = 1.0 / (float)(v568 + 1.0);
              if (v569 > 0.5)
              {
                v570 = [RSTextCoachingSignal alloc];
                if (v570)
                {
                  v572 = sub_25B51F704(v570, 3, v569);
                  objc_msgSend_addObject_(v559, v573, (uint64_t)v572);
                }
                else
                {
                  v572 = 0;
                  objc_msgSend_addObject_(v559, v571, 0);
                }
              }
            }
            float v808 = 1.0 / (float)(expf(-(float)(*(float *)(v101 + 828) + (float)(*(float *)(v101 + 824) * v555))) + 1.0);
            sub_25B545174((void *)(v101 + 680), &v808);
            unint64_t v576 = *(void *)(v101 + 720);
            if (v576 >= 6)
            {
              uint64_t v577 = *(void *)(v101 + 712);
              *(void *)(v101 + 720) = v576 - 1;
              *(void *)(v101 + 712) = v577 + 1;
              sub_25B5451FC(v101 + 680);
            }
            uint64_t v578 = *(void *)(v101 + 688);
            if (*(void *)(v101 + 696) == v578)
            {
              unint64_t v583 = *(void *)(v101 + 720);
            }
            else
            {
              unint64_t v579 = *(void *)(v101 + 712);
              v580 = (float **)(v578 + 8 * (v579 >> 10));
              v581 = *v580;
              v582 = &(*v580)[v579 & 0x3FF];
              unint64_t v583 = *(void *)(v101 + 720);
              uint64_t v584 = *(void *)(v578 + (((v583 + v579) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v583 + v579) & 0x3FF);
              if (v582 != (float *)v584)
              {
                float v585 = 0.0;
                do
                {
                  float v586 = *v582++;
                  float v587 = v586;
                  if ((char *)v582 - (char *)v581 == 4096)
                  {
                    v588 = v580[1];
                    ++v580;
                    v581 = v588;
                    v582 = v588;
                  }
                  float v585 = v585 + v587;
                }
                while (v582 != (float *)v584);
LABEL_508:
                float v589 = v585 / (float)v583;
                float v808 = v589;
                if (!objc_msgSend_count(v559, v574, v575) && v554 > 0.22 && v589 > 0.5)
                {
                  v592 = [RSTextCoachingSignal alloc];
                  if (v592)
                  {
                    v594 = sub_25B51F704(v592, 5, v589);
                    objc_msgSend_addObject_(v559, v595, (uint64_t)v594);
                  }
                  else
                  {
                    v594 = 0;
                    objc_msgSend_addObject_(v559, v593, 0);
                  }
                }
                if (!objc_msgSend_count(v559, v590, v591))
                {
                  v598 = [RSTextCoachingSignal alloc];
                  if (v598)
                  {
                    v600 = sub_25B51F704(v598, 0, 1.0);
                    objc_msgSend_addObject_(v559, v601, (uint64_t)v600);
                  }
                  else
                  {
                    v600 = 0;
                    objc_msgSend_addObject_(v559, v599, 0);
                  }
                }
                v602 = *(void **)(v101 + 784);
                if (v602 && objc_msgSend_type(v602, v596, v597))
                {
                  memset(v809, 0, 64);
                  id v603 = v559;
                  uint64_t v605 = objc_msgSend_countByEnumeratingWithState_objects_count_(v603, v604, (uint64_t)v809, block, 16);
                  if (!v605) {
                    goto LABEL_528;
                  }
                  uint64_t v606 = *(void *)v809[0].columns[1].i64[0];
                  while (1)
                  {
                    for (uint64_t i = 0; i != v605; ++i)
                    {
                      if (*(void *)v809[0].columns[1].i64[0] != v606) {
                        objc_enumerationMutation(v603);
                      }
                      id v608 = *(id *)(v809[0].columns[0].i64[1] + 8 * i);
                      uint64_t v611 = objc_msgSend_type(v608, v609, v610);
                      if (v611 == objc_msgSend_type(*(void **)(v101 + 784), v612, v613))
                      {
                        v616 = *(void **)(v101 + 784);
                        *(void *)(v101 + 784) = v608;

                        goto LABEL_532;
                      }
                    }
                    uint64_t v605 = objc_msgSend_countByEnumeratingWithState_objects_count_(v603, v614, (uint64_t)v809, block, 16);
                    if (!v605)
                    {
LABEL_528:

                      uint64_t v615 = sub_25B543FE4(v603);
                      goto LABEL_530;
                    }
                  }
                }
                uint64_t v615 = sub_25B543FE4(v559);
LABEL_530:
                id v603 = *(id *)(v101 + 784);
                *(void *)(v101 + 784) = v615;
LABEL_532:

                objc_msgSend_timeIntervalSinceDate_(objb, v617, (uint64_t)*locatione);
                if (v618 >= 1.0)
                {
                  v620 = (float *)*(id *)(v101 + 784);
                }
                else
                {
                  v619 = [RSTextCoachingSignal alloc];
                  if (!v619)
                  {
                    v526 = 0;
                    goto LABEL_537;
                  }
                  v620 = sub_25B51F704(v619, 0, 1.0);
                }
                v526 = v620;
LABEL_537:

                goto LABEL_544;
              }
            }
            float v585 = 0.0;
            goto LABEL_508;
          case 1:
            uint64_t v538 = objc_msgSend_copy(*(void **)(v101 + 856), v528, v529);
            goto LABEL_475;
          case 2:
            uint64_t v538 = objc_msgSend_copy(*(void **)(v101 + 864), v528, v529);
LABEL_475:
            v526 = (void *)v538;
            if (v538) {
              *(void *)(v538 + 16) = 0;
            }
            goto LABEL_545;
          case 3:
            uint64_t v531 = sub_25B546840(v101 + 464, v527);
            LODWORD(v532) = *(_DWORD *)(v101 + 568);
            v790 = (void *)v531;
            v533 = sub_25B544BEC(v101 + 16, v527, (uint64_t)&v797, v532);
            v536 = sub_25B545878(v101 + 288, v527);
            if (v765 && (v794->_type & 0x8000000000000000) == 0 || objc_msgSend_vioTrackingState(v527, v534, v535))
            {
              char v537 = 1;
            }
            else
            {
              v621 = objc_msgSend_camera(v527, v534, v535);
              char v537 = objc_msgSend_trackingState(v621, v622, v623) == 1;
            }
            v624 = objc_msgSend_array(MEMORY[0x263EFF980], v534, v535);
            objc_msgSend_addObject_(v624, v625, (uint64_t)v533);
            objc_msgSend_addObject_(v624, v626, (uint64_t)v790);
            float32x4_t v627 = vmulq_f32(*(float32x4_t *)(v101 + 176), *(float32x4_t *)(v101 + 176));
            float32x4_t v628 = vmulq_f32(*(float32x4_t *)(v101 + 192), *(float32x4_t *)(v101 + 192));
            uint64_t v629 = sub_25B546E20(v101 + 640, v527, v537, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v627, 2), vaddq_f32(v627, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v627.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v628, 2), vaddq_f32(v628, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v628.f32, 1))).f32[0]));

            v632 = (void *)v629;
            if (v629) {
              objc_msgSend_addObject_(v624, v630, v629);
            }
            v633 = objc_msgSend_date(MEMORY[0x263EFF910], v630, v631);
            objc_msgSend_timeIntervalSinceDate_(v633, v634, *(void *)(v101 + 896));
            BOOL v636 = v635 < 1.0;

            if (!v636) {
              objc_msgSend_addObject_(v624, v637, (uint64_t)v536);
            }
            v526 = sub_25B543FE4(v624);

LABEL_544:
            goto LABEL_545;
          default:
LABEL_468:
            v526 = 0;
LABEL_545:

            uint64_t v640 = objc_msgSend_date(MEMORY[0x263EFF910], v638, v639);
            v641 = *(void **)(v101 + 912);
            *(void *)(v101 + 912) = v640;

            goto LABEL_546;
        }
      }
      uint64_t v150 = v132 >> 3;
      id v151 = *(char **)(v101 + 56);
      v152 = *(char **)(v101 + 32);
      if (v132 >> 3 < (unint64_t)((v151 - v152) >> 3))
      {
        if (v151 == v130)
        {
          long long v198 = operator new(0xFF0uLL);
          long long v199 = *(char **)(v101 + 40);
          if (v199 == *(char **)(v101 + 32))
          {
            v322 = *(unsigned char **)(v101 + 48);
            v323 = *(unsigned char **)(v101 + 56);
            if (v322 >= v323)
            {
              if (v323 == v199) {
                unint64_t v375 = 1;
              }
              else {
                unint64_t v375 = (v323 - v199) >> 2;
              }
              v376 = (char *)sub_25B3FCAD4(v375);
              long long v200 = &v376[(2 * v375 + 6) & 0xFFFFFFFFFFFFFFF8];
              v378 = *(uint64_t **)(v101 + 40);
              v379 = v200;
              uint64_t v380 = *(void *)(v101 + 48) - (void)v378;
              if (v380)
              {
                v379 = &v200[v380 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v381 = 8 * (v380 >> 3);
                v382 = &v376[(2 * v375 + 6) & 0xFFFFFFFFFFFFFFF8];
                do
                {
                  uint64_t v383 = *v378++;
                  *(void *)v382 = v383;
                  v382 += 8;
                  v381 -= 8;
                }
                while (v381);
              }
              v384 = *(void **)(v101 + 32);
              *(void *)(v101 + 32) = v376;
              *(void *)(v101 + 40) = v200;
              *(void *)(v101 + 48) = v379;
              *(void *)(v101 + 56) = &v376[8 * v377];
              if (v384)
              {
                operator delete(v384);
                long long v200 = *(char **)(v101 + 40);
              }
            }
            else
            {
              uint64_t v324 = (v323 - v322) >> 3;
              if (v324 >= -1) {
                uint64_t v325 = v324 + 1;
              }
              else {
                uint64_t v325 = v324 + 2;
              }
              uint64_t v326 = v325 >> 1;
              long long v200 = &v199[8 * (v325 >> 1)];
              size_t v127 = v322 - v199;
              if (v322 != v199)
              {
                memmove(&v199[8 * (v325 >> 1)], v199, v127);
                long long v199 = *(char **)(v101 + 48);
              }
              *(void *)(v101 + 40) = v200;
              *(void *)(v101 + 48) = &v199[8 * v326];
            }
          }
          else
          {
            long long v200 = *(char **)(v101 + 40);
          }
          *((void *)v200 - 1) = v198;
          BOOL v126 = *(const char **)(v101 + 40);
          v385 = *(char **)(v101 + 48);
          *(void *)(v101 + 40) = v126 - 8;
          uint64_t v386 = *((void *)v126 - 1);
          *(void *)(v101 + 40) = v126;
          if (v385 == *(char **)(v101 + 56))
          {
            unint64_t v387 = *(void *)(v101 + 32);
            uint64_t v388 = (uint64_t)&v126[-v387];
            if ((unint64_t)v126 <= v387)
            {
              uint64_t v396 = (uint64_t)&v385[-v387];
              _ZF = v396 == 0;
              uint64_t v397 = v396 >> 2;
              if (_ZF) {
                unint64_t v398 = 1;
              }
              else {
                unint64_t v398 = v397;
              }
              v399 = (char *)sub_25B3FCAD4(v398);
              v400 = &v399[8 * (v398 >> 2)];
              v401 = *(uint64_t **)(v101 + 40);
              v385 = v400;
              uint64_t v402 = *(void *)(v101 + 48) - (void)v401;
              if (v402)
              {
                v385 = &v400[v402 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v403 = 8 * (v402 >> 3);
                v404 = &v399[8 * (v398 >> 2)];
                do
                {
                  uint64_t v405 = *v401++;
                  *(void *)v404 = v405;
                  v404 += 8;
                  v403 -= 8;
                }
                while (v403);
              }
              v406 = *(void **)(v101 + 32);
              *(void *)(v101 + 32) = v399;
              *(void *)(v101 + 40) = v400;
              *(void *)(v101 + 48) = v385;
              *(void *)(v101 + 56) = &v399[8 * (void)v126];
              if (v406)
              {
                operator delete(v406);
                v385 = *(char **)(v101 + 48);
              }
            }
            else
            {
              uint64_t v389 = v388 >> 3;
              BOOL v142 = v388 >> 3 < -1;
              uint64_t v390 = (v388 >> 3) + 2;
              if (v142) {
                uint64_t v391 = v390;
              }
              else {
                uint64_t v391 = v389 + 1;
              }
              uint64_t v392 = -(v391 >> 1);
              uint64_t v393 = v391 >> 1;
              v394 = &v126[-8 * v393];
              uint64_t v395 = v385 - v126;
              if (v385 != v126)
              {
                memmove((void *)&v126[-8 * v393], v126, v385 - v126);
                BOOL v126 = *(const char **)(v101 + 40);
              }
              v385 = (char *)&v394[v395];
              *(void *)(v101 + 40) = &v126[8 * v392];
              *(void *)(v101 + 48) = &v394[v395];
            }
          }
          *(void *)v385 = v386;
        }
        else
        {
          v153 = operator new(0xFF0uLL);
          uint64_t v154 = *(char **)(v101 + 48);
          if (v154 == *(char **)(v101 + 56))
          {
            unint64_t v155 = *(void *)(v101 + 32);
            BOOL v126 = *(const char **)(v101 + 40);
            uint64_t v156 = (uint64_t)&v126[-v155];
            if ((unint64_t)v126 <= v155)
            {
              uint64_t v362 = (uint64_t)&v154[-v155];
              _ZF = v362 == 0;
              uint64_t v363 = v362 >> 2;
              if (_ZF) {
                unint64_t v364 = 1;
              }
              else {
                unint64_t v364 = v363;
              }
              v365 = (char *)sub_25B3FCAD4(v364);
              v366 = &v365[8 * (v364 >> 2)];
              v367 = *(uint64_t **)(v101 + 40);
              uint64_t v154 = v366;
              uint64_t v368 = *(void *)(v101 + 48) - (void)v367;
              if (v368)
              {
                uint64_t v154 = &v366[v368 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v369 = 8 * (v368 >> 3);
                v370 = &v365[8 * (v364 >> 2)];
                do
                {
                  uint64_t v371 = *v367++;
                  *(void *)v370 = v371;
                  v370 += 8;
                  v369 -= 8;
                }
                while (v369);
              }
              v372 = *(void **)(v101 + 32);
              *(void *)(v101 + 32) = v365;
              *(void *)(v101 + 40) = v366;
              *(void *)(v101 + 48) = v154;
              *(void *)(v101 + 56) = &v365[8 * (void)v126];
              if (v372)
              {
                operator delete(v372);
                uint64_t v154 = *(char **)(v101 + 48);
              }
            }
            else
            {
              uint64_t v157 = v156 >> 3;
              BOOL v142 = v156 >> 3 < -1;
              uint64_t v158 = (v156 >> 3) + 2;
              if (v142) {
                uint64_t v159 = v158;
              }
              else {
                uint64_t v159 = v157 + 1;
              }
              uint64_t v160 = -(v159 >> 1);
              uint64_t v161 = v159 >> 1;
              id v162 = &v126[-8 * v161];
              uint64_t v163 = v154 - v126;
              if (v154 != v126)
              {
                memmove((void *)&v126[-8 * v161], v126, v154 - v126);
                uint64_t v154 = *(char **)(v101 + 40);
              }
              uint64_t v164 = &v154[8 * v160];
              uint64_t v154 = (char *)&v162[v163];
              *(void *)(v101 + 40) = v164;
              *(void *)(v101 + 48) = &v162[v163];
            }
          }
          *(void *)uint64_t v154 = v153;
        }
        goto LABEL_406;
      }
      if (v151 == v152) {
        unint64_t v165 = 1;
      }
      else {
        unint64_t v165 = (v151 - v152) >> 2;
      }
      v166 = (char *)sub_25B3FCAD4(v165);
      uint64_t v168 = v167;
      v169 = &v166[8 * v150];
      *(void *)&long long v170 = v166;
      *((void *)&v170 + 1) = v169;
      long long v757 = v170;
      long long v171 = operator new(0xFF0uLL);
      *(void *)&long long v172 = v169;
      *((void *)&v172 + 1) = &v166[8 * v168];
      if (v150 == v168)
      {
        uint64_t v173 = 8 * v150;
        *(void *)&long long v174 = v757;
        if (v132 >= 1)
        {
          uint64_t v175 = v173 >> 3;
          if (v175 >= -1) {
            unint64_t v176 = v175 + 1;
          }
          else {
            unint64_t v176 = v175 + 2;
          }
          v169 -= 8 * (v176 >> 1);
          *(void *)&long long v172 = v169;
          *((void *)&v174 + 1) = v169;
          goto LABEL_280;
        }
        uint64_t v301 = v173 >> 2;
        if (v130 == v131) {
          unint64_t v302 = 1;
        }
        else {
          unint64_t v302 = v301;
        }
        v303 = (char *)sub_25B3FCAD4(v302);
        v169 = &v303[8 * (v302 >> 2)];
        *(void *)&long long v174 = v303;
        *((void *)&v174 + 1) = v169;
        *(void *)&long long v172 = v169;
        *((void *)&v172 + 1) = &v303[8 * (void)v126];
        if (!v166) {
          goto LABEL_280;
        }
        long long v751 = v172;
        long long v757 = v174;
        operator delete(v166);
        long long v172 = v751;
      }
      long long v174 = v757;
LABEL_280:
      *(void *)v169 = v171;
      *(void *)&long long v172 = v172 + 8;
      for (uint64_t j = *(void *)(v101 + 48); j != *(void *)(v101 + 40); j -= 8)
      {
        v305 = (void *)*((void *)&v174 + 1);
        if (*((void *)&v174 + 1) == (void)v174)
        {
          v307 = (unsigned char *)v172;
          if ((unint64_t)v172 >= *((void *)&v172 + 1))
          {
            if (*((void *)&v172 + 1) == *((void *)&v174 + 1)) {
              unint64_t v312 = 1;
            }
            else {
              unint64_t v312 = (uint64_t)(*((void *)&v172 + 1) - *((void *)&v174 + 1)) >> 2;
            }
            v313 = (char *)sub_25B3FCAD4(v312);
            v306 = &v313[(2 * v312 + 6) & 0xFFFFFFFFFFFFFFF8];
            v314 = v306;
            uint64_t v315 = v307 - (unsigned char *)v305;
            if (v307 != (unsigned char *)v305)
            {
              v314 = &v306[v315 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v316 = 8 * (v315 >> 3);
              v317 = &v313[(2 * v312 + 6) & 0xFFFFFFFFFFFFFFF8];
              v318 = v305;
              do
              {
                uint64_t v319 = *v318++;
                *(void *)v317 = v319;
                v317 += 8;
                v316 -= 8;
              }
              while (v316);
            }
            *(void *)&long long v174 = v313;
            *((void *)&v174 + 1) = &v313[(2 * v312 + 6) & 0xFFFFFFFFFFFFFFF8];
            *(void *)&long long v172 = v314;
            *((void *)&v172 + 1) = &v313[8 * (void)v126];
            if (v305)
            {
              long long v752 = v172;
              long long v760 = v174;
              operator delete(v305);
              long long v172 = v752;
              long long v174 = v760;
            }
          }
          else
          {
            uint64_t v308 = (uint64_t)(*((void *)&v172 + 1) - v172) >> 3;
            if (v308 >= -1) {
              uint64_t v309 = v308 + 1;
            }
            else {
              uint64_t v309 = v308 + 2;
            }
            uint64_t v310 = v309 >> 1;
            uint64_t v311 = v172 + 8 * (v309 >> 1);
            v306 = (char *)(v311 - (v172 - *((void *)&v174 + 1)));
            size_t v127 = v172 - *((void *)&v174 + 1);
            if ((void)v172 == *((void *)&v174 + 1))
            {
              v307 = (unsigned char *)*((void *)&v174 + 1);
            }
            else
            {
              uint64_t v756 = *((void *)&v172 + 1);
              uint64_t v759 = v174;
              memmove((void *)(v311 - (v172 - *((void *)&v174 + 1))), *((const void **)&v174 + 1), v127);
              *((void *)&v172 + 1) = v756;
              *(void *)&long long v174 = v759;
            }
            *((void *)&v174 + 1) = v306;
            *(void *)&long long v172 = &v307[8 * v310];
          }
        }
        else
        {
          v306 = (char *)*((void *)&v174 + 1);
        }
        uint64_t v320 = *(void *)(j - 8);
        *((void *)v306 - 1) = v320;
        *((void *)&v174 + 1) -= 8;
      }
      v321 = *(void **)(v101 + 32);
      *(_OWORD *)(v101 + 32) = v174;
      *(_OWORD *)(v101 + 48) = v172;
      if (v321) {
        operator delete(v321);
      }
      goto LABEL_407;
    }
    *(_OWORD *)v798 = 0u;
    simd_float4 v799 = 0u;
    int32x4_t v802 = v791;
    int32x4_t v803 = v789;
    int32x4_t v804 = obja;
    float32x4_t v805 = v784;
    v797.i64[0] = objc_msgSend_rawFeaturePoints(v779, v54, v55);
    objc_msgSend_timestamp(v779, v59, v60);
    v797.i64[1] = v61;
    v798[0] = objc_msgSend_camera(v779, v62, v63);
    uint64_t v800 = objc_msgSend_vioTrackingState(v779, v64, v65);
    float32x4_t v801 = v784;
    if (*(unsigned char *)(v49 + 20))
    {
      uint64_t v68 = (__CVBuffer *)objc_msgSend_colorBuffer(v779, v66, v67);
      unint64_t v69 = v68;
      if (v68)
      {
        size_t Width = CVPixelBufferGetWidth(v68);
        size_t locationa = CVPixelBufferGetHeight(v69);
        sub_25B46E7E4((uint64_t)block, v69);
        uint64_t v769 = v49;
        v737 = v56;
        if (locationa)
        {
          uint64_t v71 = 0;
          for (unint64_t k = 0; k < locationa; k += 16)
          {
            if (Width)
            {
              unint64_t v73 = 0;
              uint64_t v74 = (int)(float)k;
              do
              {
                int v75 = (int)(float)v73;
                if (v75 < 0)
                {
                  v76.i8[0] = 0;
                }
                else
                {
                  uint8x8_t v76 = 0;
                  if (*(int *)&block[8] > v75 && (v74 & 0x80000000) == 0 && *(int *)&block[12] > (int)v74)
                  {
                    v76.i32[0] = *(_DWORD *)(*(void *)&block[16]
                                           + *(void *)&block[24] * v74
                                           + 4 * v75);
                    v76.i8[0] = vmovl_u8(v76).u8[0];
                  }
                }
                __int8 v77 = v76.i8[0];
                if ((unint64_t)v71 >= v799.i64[1])
                {
                  unint64_t v79 = (unint64_t)v798[1];
                  uint64_t v80 = v71 - (char *)v798[1];
                  int64_t v81 = v71 - (char *)v798[1] + 1;
                  if (v81 < 0) {
                    sub_25B3FBC4C();
                  }
                  unint64_t v82 = v799.i64[1] - (unint64_t)v798[1];
                  if (2 * (v799.i64[1] - (unint64_t)v798[1]) > v81) {
                    int64_t v81 = 2 * v82;
                  }
                  if (v82 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v83 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v83 = v81;
                  }
                  if (v83) {
                    uint64_t v84 = (char *)operator new(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  float v85 = &v84[v80];
                  uint64_t v86 = &v84[v80];
                  __int8 *v86 = v77;
                  uint64_t v78 = v86 + 1;
                  if (v71 != (unsigned char *)v79)
                  {
                    unint64_t v87 = &v71[~v79];
                    do
                    {
                      char v88 = *--v71;
                      (v87--)[(void)v84] = v88;
                    }
                    while (v71 != (unsigned char *)v79);
                    uint64_t v71 = v798[1];
                    float v85 = v84;
                  }
                  v798[1] = v85;
                  v799.i64[0] = (uint64_t)v78;
                  v799.i64[1] = (uint64_t)&v84[v83];
                  if (v71) {
                    operator delete(v71);
                  }
                }
                else
                {
                  unsigned char *v71 = v76.i8[0];
                  uint64_t v78 = v71 + 1;
                }
                v799.i64[0] = (uint64_t)v78;
                v73 += 16;
                uint64_t v71 = v78;
              }
              while (v73 < Width);
            }
            else
            {
              uint64_t v78 = v71;
            }
            uint64_t v71 = v78;
          }
        }
        CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)block, 1uLL);
        float v56 = v737;
        uint64_t v49 = v769;
      }
    }
    unint64_t v89 = *(void *)(v49 + 24);
    uint64_t v90 = *(void *)(v49 + 32);
    if (0x8E38E38E38E38E39 * ((uint64_t)(v90 - v89) >> 4) == *(void *)(v49 + 120))
    {
      if (v89 + 144 != v90)
      {
        do
        {
          uint64_t v91 = *(void *)(v89 + 144);
          *(void *)(v89 + 144) = 0;
          unint64_t v92 = *(void **)v89;
          *(void *)unint64_t v89 = v91;

          *(void *)(v89 + 8) = *(void *)(v89 + 152);
          uint64_t v93 = *(void *)(v89 + 160);
          *(void *)(v89 + 160) = 0;
          unint64_t v94 = *(void **)(v89 + 16);
          *(void *)(v89 + 16) = v93;

          uint64_t v95 = *(void **)(v89 + 24);
          if (v95)
          {
            *(void *)(v89 + 32) = v95;
            operator delete(v95);
            *(void *)(v89 + 24) = 0;
            *(void *)(v89 + 32) = 0;
            *(void *)(v89 + 40) = 0;
          }
          *(_OWORD *)(v89 + 24) = *(_OWORD *)(v89 + 168);
          *(void *)(v89 + 40) = *(void *)(v89 + 184);
          *(void *)(v89 + 176) = 0;
          *(void *)(v89 + 184) = 0;
          *(void *)(v89 + 168) = 0;
          long long v96 = *(_OWORD *)(v89 + 240);
          *(_OWORD *)(v89 + 80) = *(_OWORD *)(v89 + 224);
          *(_OWORD *)(v89 + 96) = v96;
          long long v97 = *(_OWORD *)(v89 + 272);
          *(_OWORD *)(v89 + 112) = *(_OWORD *)(v89 + 256);
          *(_OWORD *)(v89 + 128) = v97;
          long long v98 = *(_OWORD *)(v89 + 208);
          unint64_t v99 = v89 + 144;
          unint64_t v100 = v89 + 288;
          *(_OWORD *)(v89 + 48) = *(_OWORD *)(v89 + 192);
          *(_OWORD *)(v89 + 64) = v98;
          v89 += 144;
        }
        while (v100 != v90);
        uint64_t v90 = *(void *)(v49 + 32);
        unint64_t v89 = v99;
      }
      while (v90 != v89)
      {
        v90 -= 144;
        sub_25B469774(v90);
      }
      *(void *)(v49 + 32) = v89;
    }
    else
    {
      unint64_t v89 = *(void *)(v49 + 32);
    }
    unint64_t v177 = *(void *)(v49 + 40);
    if (v89 >= v177)
    {
      uint64_t v181 = *(void *)(v49 + 24);
      unint64_t v182 = 0x8E38E38E38E38E39 * ((uint64_t)(v89 - v181) >> 4);
      if (v182 + 1 > 0x1C71C71C71C71C7) {
        sub_25B3FBC4C();
      }
      unint64_t v183 = 0x8E38E38E38E38E39 * ((uint64_t)(v177 - v181) >> 4);
      uint64_t v184 = 2 * v183;
      if (2 * v183 <= v182 + 1) {
        uint64_t v184 = v182 + 1;
      }
      if (v183 >= 0xE38E38E38E38E3) {
        unint64_t v185 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v185 = v184;
      }
      v811.i64[0] = v49 + 40;
      if (v185)
      {
        if (v185 > 0x1C71C71C71C71C7) {
          sub_25B3FA70C();
        }
        v186 = (char *)operator new(144 * v185);
      }
      else
      {
        v186 = 0;
      }
      *(void *)blocunint64_t k = v186;
      *(void *)&block[8] = &v186[144 * v182];
      *(void *)&block[16] = *(void *)&block[8];
      *(void *)&block[24] = &v186[144 * v185];
      sub_25B46E87C(*(uint64_t *)&block[8], (uint64_t)&v797);
      uint64_t v201 = *(void *)&block[8];
      uint64_t v180 = *(void *)&block[16] + 144;
      *(void *)&block[16] += 144;
      uint64_t v203 = *(void *)(v49 + 24);
      unint64_t v202 = *(void *)(v49 + 32);
      if (v202 == v203)
      {
        int64x2_t v213 = vdupq_n_s64(v202);
      }
      else
      {
        uint64_t v204 = 0;
        do
        {
          uint64_t v205 = v201 + v204;
          uint64_t v206 = v202 + v204;
          uint64_t v207 = *(void *)(v202 + v204 - 144);
          *(void *)(v206 - 144) = 0;
          *(void *)(v205 - 144) = v207;
          *(void *)(v205 - 136) = *(void *)(v202 + v204 - 136);
          uint64_t v208 = *(void *)(v202 + v204 - 128);
          *(void *)(v206 - 128) = 0;
          *(void *)(v205 - 112) = 0;
          *(void *)(v205 - 104) = 0;
          *(void *)(v205 - 128) = v208;
          *(void *)(v205 - 120) = 0;
          *(_OWORD *)(v205 - 120) = *(_OWORD *)(v202 + v204 - 120);
          *(void *)(v205 - 104) = *(void *)(v202 + v204 - 104);
          *(void *)(v206 - 112) = 0;
          *(void *)(v206 - 104) = 0;
          *(void *)(v206 - 120) = 0;
          long long v209 = *(_OWORD *)(v202 + v204 - 16);
          long long v211 = *(_OWORD *)(v202 + v204 - 64);
          long long v210 = *(_OWORD *)(v202 + v204 - 48);
          *(_OWORD *)(v205 - 32) = *(_OWORD *)(v202 + v204 - 32);
          *(_OWORD *)(v205 - 16) = v209;
          *(_OWORD *)(v205 - 64) = v211;
          *(_OWORD *)(v205 - 48) = v210;
          long long v212 = *(_OWORD *)(v202 + v204 - 80);
          *(_OWORD *)(v205 - 96) = *(_OWORD *)(v202 + v204 - 96);
          *(_OWORD *)(v205 - 80) = v212;
          v204 -= 144;
        }
        while (v202 + v204 != v203);
        v201 += v204;
        int64x2_t v213 = *(int64x2_t *)(v49 + 24);
        uint64_t v180 = *(void *)&block[16];
      }
      *(void *)(v49 + 24) = v201;
      *(void *)(v49 + 32) = v180;
      *(int64x2_t *)&block[8] = v213;
      uint64_t v214 = *(void *)(v49 + 40);
      *(void *)(v49 + 40) = *(void *)&block[24];
      *(void *)&block[24] = v214;
      *(void *)blocunint64_t k = v213.i64[0];
      sub_25B46E99C((uint64_t)block);
    }
    else
    {
      sub_25B46E87C(v89, (uint64_t)&v797);
      uint64_t v180 = v89 + 144;
      *(void *)(v49 + 32) = v89 + 144;
    }
    *(void *)(v49 + 32) = v180;
    if (*(unsigned char *)(v49 + 16))
    {
      *(unsigned char *)(v49 + 16) = 1;
    }
    else
    {
      v215 = objc_msgSend_camera(v779, v178, v179);
      *(unsigned char *)(v49 + 16) = objc_msgSend_trackingState(v215, v216, v217) == 2;
    }
    if (*(unsigned char *)(v49 + 17)) {
      int v218 = 1;
    }
    else {
      int v218 = objc_msgSend_vioTrackingState(v779, v178, v179) == 0;
    }
    *(unsigned char *)(v49 + 17) = v218;
    if (v764)
    {
      if (*(unsigned char *)(v49 + 19))
      {
        BOOL v219 = 1;
      }
      else
      {
        BOOL v219 = objc_msgSend_count(v764, v178, v179) != 0;
        int v218 = *(unsigned __int8 *)(v49 + 17);
      }
      *(unsigned char *)(v49 + 19) = v219;
    }
    if (!v218 || !*(unsigned char *)(v49 + 16))
    {
      float32x2_t v224 = 0;
LABEL_573:
      if (v798[1])
      {
        v799.i64[0] = (uint64_t)v798[1];
        operator delete(v798[1]);
      }

      goto LABEL_576;
    }
    uint64_t v220 = *(void *)(v49 + 24);
    unint64_t v221 = 0x8E38E38E38E38E39 * ((*(void *)(v49 + 32) - v220) >> 4);
    unint64_t v222 = v221 - 2;
    id v739 = v51;
    if (v221 < 2)
    {
      unint64_t v223 = 0;
      goto LABEL_164;
    }
    unint64_t v225 = sub_25B46E6C8(v220 + 144 * v221 - 144, v220 + 144 * v221 - 288, v179).n128_u64[0];
    float v228 = *((float *)&v225 + 1);
    if (*(float *)&v225 >= *((float *)&v225 + 1)) {
      float v228 = *(float *)&v225;
    }
    float v229 = v227;
    if (v226 >= v227) {
      float v229 = v226;
    }
    float v231 = *(float *)(v49 + 48);
    float v230 = *(float *)(v49 + 52);
    float v232 = (float)((float)((float)(v228 - v231) / v231) * 0.5) + 0.5;
    if (v232 > 1.0) {
      float v232 = 1.0;
    }
    _NF = v228 < v231;
    float v233 = 0.0;
    if (!_NF) {
      float v233 = v232;
    }
    if (v229 < v230) {
      goto LABEL_162;
    }
    float v296 = (float)((float)((float)(v229 - v230) / v230) * 0.5) + 0.5;
    if (v296 > 1.0) {
      float v296 = 1.0;
    }
    float v297 = v233 >= v296 ? v233 : v296;
    if (v233 < 0.5 || v296 < 0.5)
    {
LABEL_162:
      unint64_t v223 = 0;
      *(void *)(v49 + 128) = 0;
LABEL_163:
      id v51 = v739;
LABEL_164:
      uint64_t v234 = *(void *)(v49 + 24);
      unint64_t v235 = 0x8E38E38E38E38E39 * ((*(void *)(v49 + 32) - v234) >> 4);
      if (*(float *)(v49 + 64) >= (float)v235)
      {
        unint64_t v286 = 0;
      }
      else
      {
        unint64_t v736 = v223;
        v738 = v56;
        memset(block, 0, 24);
        if (v235 < 2)
        {
          v236 = 0;
          v237 = 0;
          v238 = 0;
          uint64_t v239 = 0;
          v240 = 0;
          __p = 0;
          unint64_t v284 = 0;
          v285 = 0;
        }
        else
        {
          unint64_t v741 = 0;
          v236 = 0;
          v237 = 0;
          unint64_t locationc = 0;
          v238 = 0;
          uint64_t v239 = 0;
          unint64_t v767 = 0;
          v240 = 0;
          __p = 0;
          unint64_t v241 = 1;
          uint64_t v771 = v49;
          do
          {
            int v242 = v235 - v241;
            uint64_t v243 = (int)v235 - (int)v241;
            if (objc_msgSend_count(*(void **)(v234 + 144 * v243), v178, v179)) {
              BOOL v244 = *(void *)(*(void *)(v49 + 24) + 144 * (int)v243 + 48) != 0;
            }
            else {
              BOOL v244 = 1;
            }
            v809[0].columns[0].i8[0] = v244;
            sub_25B40DC2C((uint64_t *)block, v809);
            uint64_t v246 = *(void *)(v49 + 24);
            uint64_t v247 = v246 + 144 * v242;
            uint64_t v248 = v246 + 144 * (v242 - 1);
            float32x2_t v749 = (float32x2_t)vsubq_f32(*(float32x4_t *)(v247 + 64), *(float32x4_t *)(v248 + 64)).u64[0];
            long long v750 = *(_OWORD *)(v248 + 64);
            int32x2_t v758 = (int32x2_t)vmul_f32(v749, v749);
            float v249 = *(double *)(v247 + 8) - *(double *)(v248 + 8);
            float v250 = (float)(sqrtf(vaddv_f32((float32x2_t)v758)) / fabsf(v249)) + 0.00000011921;
            if ((unint64_t)v237 >= locationc)
            {
              uint64_t v251 = v237 - v236;
              unint64_t v252 = v251 + 1;
              if ((unint64_t)(v251 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(locationc - (void)v236) >> 1 > v252) {
                unint64_t v252 = (uint64_t)(locationc - (void)v236) >> 1;
              }
              if (locationc - (unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v253 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v253 = v252;
              }
              if (v253) {
                unint64_t v253 = (unint64_t)sub_25B3FBC64(v253);
              }
              else {
                uint64_t v254 = 0;
              }
              v255 = (float *)(v253 + 4 * v251);
              float *v255 = v250;
              v256 = v255 + 1;
              while (v237 != v236)
              {
                int v257 = *((_DWORD *)v237-- - 1);
                *((_DWORD *)v255-- - 1) = v257;
              }
              unint64_t locationc = v253 + 4 * v254;
              if (v236) {
                operator delete(v236);
              }
              v236 = v255;
              v237 = v256;
            }
            else
            {
              *v237++ = v250;
            }
            sub_25B46E6C8(*(void *)(v771 + 24) + 144 * (int)v243, *(void *)(v771 + 24) + 144 * (v243 - 1), v245);
            float v260 = v259;
            if ((unint64_t)v239 >= v767)
            {
              float v740 = v258;
              uint64_t v262 = v239 - v238;
              unint64_t v263 = v262 + 1;
              if ((unint64_t)(v262 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v767 - (void)v238) >> 1 > v263) {
                unint64_t v263 = (uint64_t)(v767 - (void)v238) >> 1;
              }
              if (v767 - (unint64_t)v238 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v264 = v263;
              }
              if (v264) {
                unint64_t v264 = (unint64_t)sub_25B3FBC64(v264);
              }
              else {
                unint64_t v178 = 0;
              }
              v265 = (float *)(v264 + 4 * v262);
              float v266 = v740;
              if (v740 < v260) {
                float v266 = v260;
              }
              float *v265 = v266;
              v267 = v265 + 1;
              while (v239 != v238)
              {
                int v268 = *((_DWORD *)v239-- - 1);
                *((_DWORD *)v265-- - 1) = v268;
              }
              unint64_t v767 = v264 + 4 * (void)v178;
              if (v238) {
                operator delete(v238);
              }
              v238 = v265;
              uint64_t v239 = v267;
            }
            else
            {
              if (v258 >= v259) {
                float v261 = v258;
              }
              else {
                float v261 = v259;
              }
              *v239++ = v261;
            }
            uint64_t v49 = v771;
            uint64_t v234 = *(void *)(v771 + 24);
            if (*(float *)(v771 + 64) > (float)(int)v241)
            {
              float32x2_t v269 = vsub_f32(*(float32x2_t *)&v750, *(float32x2_t *)(v234 + 144 * (int)v243 - 224));
              float v270 = vaddv_f32(vmul_f32(v749, v269));
              int32x2_t v271 = (int32x2_t)vmul_f32(v269, v269);
              float32x2_t v272 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v758, v271), (float32x2_t)vzip2_s32(v758, v271)));
              float v273 = v270 / fmaxf(vmul_lane_f32(v272, v272, 1).f32[0], 1.1755e-38);
              if (v273 <= 1.0) {
                float v274 = v273;
              }
              else {
                float v274 = 1.0;
              }
              if (v273 >= -1.0) {
                float v275 = v274;
              }
              else {
                float v275 = -1.0;
              }
              float v276 = acosf(v275) * 180.0 / 3.14159274;
              if ((unint64_t)v240 >= v741)
              {
                uint64_t v278 = v240 - __p;
                unint64_t v279 = v278 + 1;
                if ((unint64_t)(v278 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v741 - (void)__p) >> 1 > v279) {
                  unint64_t v279 = (uint64_t)(v741 - (void)__p) >> 1;
                }
                if (v741 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v280 = v279;
                }
                if (v280) {
                  unint64_t v280 = (unint64_t)sub_25B3FBC64(v280);
                }
                else {
                  unint64_t v178 = 0;
                }
                v281 = (float *)(v280 + 4 * v278);
                float *v281 = v276;
                v277 = v281 + 1;
                if (v240 == __p)
                {
                  v282 = __p;
                }
                else
                {
                  v282 = __p;
                  do
                  {
                    int v283 = *((_DWORD *)v240-- - 1);
                    *((_DWORD *)v281-- - 1) = v283;
                  }
                  while (v240 != __p);
                }
                unint64_t v741 = v280 + 4 * (void)v178;
                if (v282) {
                  operator delete(v282);
                }
                __p = v281;
              }
              else
              {
                float *v240 = v276;
                v277 = v240 + 1;
              }
              uint64_t v234 = *(void *)(v771 + 24);
              v240 = v277;
            }
            ++v241;
            unint64_t v235 = 0x8E38E38E38E38E39 * ((*(void *)(v771 + 32) - v234) >> 4);
          }
          while (v235 > v241);
          unint64_t v284 = *(void *)&block[8];
          v285 = *(void **)block;
        }
        int v287 = v284 & 0x3F;
        if (v284 > 0x3F || (v284 & 0x3F) != 0)
        {
          int v288 = 0;
          v289 = &v285[v284 >> 6];
          uint64_t v290 = 1;
          while (((*v285 >> v288) & 1) != 0)
          {
            v285 += v288 == 63;
            if (v288 == 63) {
              int v288 = 0;
            }
            else {
              ++v288;
            }
            _ZF = v285 == v289 && v288 == v287;
            if (_ZF) {
              goto LABEL_252;
            }
          }
        }
        else
        {
LABEL_252:
          uint64_t v290 = 0;
        }
        v292 = __p;
        if (__p == v240)
        {
LABEL_257:
          uint64_t v293 = 0;
        }
        else
        {
          uint64_t v293 = 1;
          while (*v292 < *(float *)(v49 + 68))
          {
            if (++v292 == v240) {
              goto LABEL_257;
            }
          }
        }
        float v56 = v738;
        if (v236 == v237)
        {
          int v294 = 1;
        }
        else
        {
          int v294 = 1;
          v295 = v236;
          while (*v295 > *(float *)(v49 + 72))
          {
            if (++v295 == v237) {
              goto LABEL_315;
            }
          }
          int v294 = 0;
        }
LABEL_315:
        if (v238 == v239)
        {
LABEL_319:
          int v327 = 0;
        }
        else
        {
          int v327 = 1;
          v328 = v238;
          while (*v328 <= *(float *)(v49 + 76))
          {
            if (++v328 == v239) {
              goto LABEL_319;
            }
          }
        }
        v329 = v236;
        id v51 = v739;
        if (v236 != v237)
        {
          v330 = v236 + 1;
          v329 = v236;
          if (v236 + 1 != v237)
          {
            float v331 = *v236;
            v329 = v236;
            v332 = v236 + 1;
            do
            {
              float v333 = *v332++;
              float v334 = v333;
              if (v331 < v333)
              {
                float v331 = v334;
                v329 = v330;
              }
              v330 = v332;
            }
            while (v332 != v237);
          }
        }
        float v335 = *(float *)(v49 + 72);
        if (*v329 >= v335)
        {
          float v337 = (float)((float)((float)(*v329 - v335) / v335) * 0.5) + 0.5;
          if (v337 > 1.0) {
            float v337 = 1.0;
          }
          unint64_t v336 = (unint64_t)LODWORD(v337) << 32;
        }
        else
        {
          unint64_t v336 = 0;
        }
        unint64_t v223 = v736;
        uint64_t v338 = v290 | v293;
        uint64_t v339 = v294 & v327;
        if (v238) {
          operator delete(v238);
        }
        uint64_t v340 = v338 ^ 1;
        if (v236) {
          operator delete(v236);
        }
        uint64_t v341 = v339 & v340;
        if (__p) {
          operator delete(__p);
        }
        unint64_t v286 = v336 | v341;
        if (*(void *)block) {
          operator delete(*(void **)block);
        }
        uint64_t v234 = *(void *)(v49 + 24);
        unint64_t v235 = 0x8E38E38E38E38E39 * ((*(void *)(v49 + 32) - v234) >> 4);
      }
      if (v235 >= 3)
      {
        uint64_t v342 = (uint64_t)((v235 << 32) - 0x100000000) >> 32;
        uint64_t v343 = (v235 << 32) - 0x200000000;
        uint64_t v344 = v343 >> 32;
        float32x4_t v345 = vabsq_f32((float32x4_t)sub_25B46E6C8(v234 + 144 * (int)v342, v234 + 144 * SHIDWORD(v343), v179));
        float32x4_t v347 = vabsq_f32(v346);
        if (v345.f32[0] < v345.f32[1]) {
          v345.f32[0] = v345.f32[1];
        }
        if (v345.f32[0] < v345.f32[2]) {
          v345.f32[0] = v345.f32[2];
        }
        if (v347.f32[0] < v347.f32[1]) {
          v347.f32[0] = v347.f32[1];
        }
        if (v347.f32[0] < v347.f32[2]) {
          v347.f32[0] = v347.f32[2];
        }
        float v348 = *(float *)(v49 + 96);
        _NF = v345.f32[0] < v348 && v347.f32[0] < v348;
        if (_NF)
        {
          uint64_t v350 = *(void *)(v49 + 24);
          uint64_t v351 = *(void *)(v350 + 144 * (int)v342 + 24);
          unint64_t v352 = *(void *)(v350 + 144 * (int)v342 + 32) - v351;
          if (!v352) {
            *(unsigned char *)(v49 + 20) = 1;
          }
          v355 = (uint64_t *)(v350 + 144 * (int)v344 + 24);
          uint64_t v353 = *v355;
          uint64_t v354 = v355[1];
          if (v352 == v354 - *v355 && v354 != v353)
          {
            BOOL v356 = 0;
            uint64_t v357 = 0;
            int v358 = 0;
            do
            {
              int v359 = *(unsigned __int8 *)(v351 + v357) - *(unsigned __int8 *)(v353 + v357);
              if (v359 < 0) {
                int v359 = *(unsigned __int8 *)(v353 + v357) - *(unsigned __int8 *)(v351 + v357);
              }
              if (v359 >= 0xB && (float)((float)v352 * 0.2) <= (float)++v358) {
                break;
              }
              BOOL v356 = ++v357 >= v352;
            }
            while (v352 != v357);
            if (!v356)
            {
              uint64_t v360 = 0x3F80000000000001;
LABEL_366:
              if ((_BYTE)v223)
              {
                uint64_t v361 = 0;
              }
              else if ((_BYTE)v286)
              {
                uint64_t v361 = 1;
                unint64_t v223 = v286;
              }
              else
              {
                if ((v360 & 1) == 0)
                {
                  LODWORD(v373) = 0;
                  uint64_t v374 = -1;
LABEL_569:
                  v702 = [RSDriftDetectionSignal alloc];
                  if (v702)
                  {
                    *(void *)blocunint64_t k = v702;
                    *(void *)&block[8] = RSDriftDetectionSignal;
                    v702 = (RSDriftDetectionSignal *)objc_msgSendSuper2((objc_super *)block, sel_init);
                    if (v702)
                    {
                      v702->_int64_t type = v374;
                      LODWORD(v702->_score) = v373;
                    }
                  }
                  float32x2_t v224 = v56;
                  float v56 = v702;
                  goto LABEL_573;
                }
                uint64_t v361 = 3;
                unint64_t v223 = v360;
              }
              unint64_t v373 = HIDWORD(v223);
              if (*(unsigned char *)(v49 + 19)) {
                uint64_t v374 = v361;
              }
              else {
                uint64_t v374 = 4;
              }
              goto LABEL_569;
            }
          }
        }
        else
        {
          *(unsigned char *)(v49 + 20) = 0;
        }
      }
      uint64_t v360 = 0;
      goto LABEL_366;
    }
    unint64_t v298 = v221 - 1;
    if (objc_msgSend_count(*(void **)(*(void *)(v49 + 24) + 144 * (v221 - 1)), v178, v179)
      && (uint64_t v299 = *(void *)(v49 + 24), !*(void *)(v299 + 144 * v298 + 48)))
    {
      *(void *)(v49 + 128) = 0;
      if ((unint64_t)objc_msgSend_count(*(void **)(v299 + 144 * v222), v178, v179) >= 0xA
        && (unint64_t)objc_msgSend_count(*(void **)(*(void *)(v49 + 24) + 144 * v298), v178, v179) >= 0xA)
      {
        sub_25B46E30C((uint64_t)block, *(void **)(*(void *)(v49 + 24) + 144 * v222));
        sub_25B46E30C((uint64_t)v809, *(void **)(*(void *)(v49 + 24) + 144 * v298));
        sub_25B46C3D0(v49 + 8);
      }
      if (*(float *)(v49 + 60) >= 0.0) {
        goto LABEL_273;
      }
    }
    else
    {
      unint64_t v300 = *(void *)(v49 + 128) + 1;
      *(void *)(v49 + 128) = v300;
      if (v300 < *(int *)(v49 + 100))
      {
LABEL_273:
        unint64_t v223 = 0;
        goto LABEL_163;
      }
    }
    unint64_t v223 = ((unint64_t)LODWORD(v297) << 32) | 1;
    goto LABEL_163;
  }
LABEL_564:
}

void sub_25B4DF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a69 = (uint64_t)&unk_2708F21F8;
  if (STACK[0x260]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x260]);
  }
  STACK[0x280] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x300]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x300]);
  }
  sub_25B46E958((uint64_t)&a47);

  sub_25B400F2C((uint64_t)&a66);
  _Unwind_Resume(a1);
}

void sub_25B4DFB70(uint64_t a1)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v7 = WeakRetained;
    uint64_t v5 = objc_msgSend_copy(*(void **)(a1 + 32), v3, v4);
    uint64_t v6 = (void *)v7[13];
    v7[13] = v5;

    WeakRetained = v7;
  }
}

void sub_25B4DFBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4DFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  _Block_object_dispose(&a30, 8);

  objc_destroyWeak(v36);
  objc_destroyWeak((id *)(v37 - 120));

  _Unwind_Resume(a1);
}

void sub_25B4DFF4C(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong((id *)WeakRetained + 5, *(id *)(a1 + 32));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v4 = *(id *)(a1 + 32);
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v19, 16);
    if (v8)
    {
      uint64_t v9 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v4);
          }
          char v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v12 = (void *)v3[4];
          uint64_t v13 = objc_msgSend_identifier(v11, v6, v7, (void)v15);
          objc_msgSend_setObject_forKeyedSubscript_(v12, v14, (uint64_t)v11, v13);
        }
        uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v15, v19, 16);
      }
      while (v8);
    }
  }
}

void sub_25B4E0090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E00C0(uint64_t a1)
{
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v13 = WeakRetained;
    uint64_t v5 = objc_msgSend_copy(WeakRetained[4], v3, v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v10 = objc_msgSend_copy(v13[13], v8, v9);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    id WeakRetained = v13;
  }
}

void sub_25B4E0148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E015C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v449 = *MEMORY[0x263EF8340];
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained) {
    goto LABEL_157;
  }
  uint64_t v4 = objc_msgSend_date(MEMORY[0x263EFF910], v2, v3);
  uint64_t v5 = (void *)*((void *)WeakRetained + 6);
  *((void *)WeakRetained + 6) = v4;

  uint64_t v6 = *((void *)WeakRetained + 19);
  uint64_t v9 = objc_msgSend_allValues(*(void **)(*(void *)(*(void *)(v1 + 32) + 8) + 40), v7, v8);
  sub_25B41DA70(v6, v9, 0);

  uint64_t v395 = sub_25B420FE4(*((void **)WeakRetained + 2), *(void **)(*(void *)(*(void *)(v1 + 32) + 8) + 40), *(void **)(*(void *)(*(void *)(v1 + 40) + 8) + 40));
  if (objc_msgSend_isBoundaryRefinementEnabled(*((void **)WeakRetained + 1), v10, v11))
  {
    std::mutex::lock((std::mutex *)(WeakRetained + 200));
    uint64_t v14 = objc_msgSend_firstObject(*((void **)WeakRetained + 24), v12, v13);
    std::mutex::unlock((std::mutex *)(WeakRetained + 200));
    if (v14)
    {
      id v15 = (id)*((void *)WeakRetained + 23);
      id v396 = v395;
      uint64_t v391 = v14;
      id v400 = v14;
      id v408 = v15;
      if (v15)
      {
        int v438 = 9757;
        uint64_t v439 = 0;
        kdebug_trace();
        std::chrono::steady_clock::now();
        v389.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        double v412 = objc_msgSend_copy(v396, v16, v17);
        uint64_t v20 = objc_msgSend_windows(v396, v18, v19);
        uint64_t v393 = objc_msgSend_copy(v20, v21, v22);

        uint64_t v25 = objc_msgSend_doors(v396, v23, v24);
        id obj = objc_msgSend_copy(v25, v26, v27);

        id v28 = v400;
        if (!*((unsigned char *)v408 + 16))
        {
          __int16 v31 = (__CVBuffer *)objc_msgSend_colorBuffer(v28, v29, v30);
          CVPixelBufferGetWidth(v31);
          CVPixelBufferGetHeight(v31);
          operator new();
        }
        uint64_t v392 = v28;

        float32x2_t v436 = 0;
        uint64_t v437 = 0;
        float v435 = (uint64_t *)&v436;
        kdebug_trace();
        uint64_t v34 = objc_msgSend_walls(v412, v32, v33);
        BOOL v37 = objc_msgSend_count(v34, v35, v36) == 0;

        if (!v37)
        {
          id v404 = v412;
          unint64_t v40 = objc_msgSend_array(MEMORY[0x263EFF980], v38, v39);
          id v43 = objc_msgSend_windows(v404, v41, v42);
          objc_msgSend_addObjectsFromArray_(v40, v44, (uint64_t)v43);

          uint64_t v47 = objc_msgSend_doors(v404, v45, v46);
          objc_msgSend_addObjectsFromArray_(v40, v48, (uint64_t)v47);

          id v51 = objc_msgSend_opendoors(v404, v49, v50);
          objc_msgSend_addObjectsFromArray_(v40, v52, (uint64_t)v51);

          uint64_t v55 = objc_msgSend_openings(v404, v53, v54);
          objc_msgSend_addObjectsFromArray_(v40, v56, (uint64_t)v55);

          float32x4_t v432 = 0;
          float v433 = 0;
          v434 = 0;
          long long buf = 0u;
          long long v446 = 0u;
          long long v447 = 0u;
          long long v448 = 0u;
          id v57 = v40;
          uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v58, (uint64_t)&buf, &v442, 16);
          uint64_t v390 = v1;
          if (v61)
          {
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            int v64 = 0;
            uint64_t v65 = *(void *)v446;
            do
            {
              for (uint64_t i = 0; i != v61; ++i)
              {
                if (*(void *)v446 != v65) {
                  objc_enumerationMutation(v57);
                }
                objc_msgSend_quad(*(void **)(*((void *)&buf + 1) + 8 * i), v59, v60);
                if (v64 >= v63)
                {
                  uint64_t v72 = (v64 - v62) >> 6;
                  unint64_t v73 = v72 + 1;
                  if ((unint64_t)(v72 + 1) >> 58)
                  {
                    v434 = v63;
                    float32x4_t v432 = v62;
                    sub_25B3FBC4C();
                  }
                  if ((v63 - v62) >> 5 > v73) {
                    unint64_t v73 = (v63 - v62) >> 5;
                  }
                  if ((unint64_t)(v63 - v62) >= 0x7FFFFFFFFFFFFFC0) {
                    unint64_t v74 = 0x3FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v74 = v73;
                  }
                  if (v74)
                  {
                    long long v415 = v67;
                    long long v418 = v68;
                    long long v422 = v69;
                    long long v426 = v70;
                    if (v74 >> 58)
                    {
                      float v433 = v64;
                      v434 = v63;
                      float32x4_t v432 = v62;
                      sub_25B3FA70C();
                    }
                    int v75 = (char *)operator new(v74 << 6);
                    long long v69 = v422;
                    long long v70 = v426;
                    long long v67 = v415;
                    long long v68 = v418;
                  }
                  else
                  {
                    int v75 = 0;
                  }
                  uint8x8_t v76 = &v75[64 * v72];
                  *(void *)uint8x8_t v76 = v67;
                  *((_DWORD *)v76 + 2) = DWORD2(v67);
                  *((void *)v76 + 2) = v68;
                  *((_DWORD *)v76 + 6) = DWORD2(v68);
                  *((_DWORD *)v76 + 10) = DWORD2(v69);
                  *((void *)v76 + 4) = v69;
                  *((void *)v76 + 6) = v70;
                  *((_DWORD *)v76 + 14) = DWORD2(v70);
                  if (v64 == v62)
                  {
                    int64_t v81 = &v75[64 * v72];
                  }
                  else
                  {
                    __int8 v77 = &v75[64 * v72];
                    do
                    {
                      long long v78 = *((_OWORD *)v64 - 4);
                      long long v79 = *((_OWORD *)v64 - 3);
                      long long v80 = *((_OWORD *)v64 - 1);
                      int64_t v81 = v77 - 64;
                      *((_OWORD *)v77 - 2) = *((_OWORD *)v64 - 2);
                      *((_OWORD *)v77 - 1) = v80;
                      *((_OWORD *)v77 - 4) = v78;
                      *((_OWORD *)v77 - 3) = v79;
                      v64 -= 64;
                      v77 -= 64;
                    }
                    while (v64 != v62);
                  }
                  uint64_t v63 = &v75[64 * v74];
                  int v64 = v76 + 64;
                  if (v62) {
                    operator delete(v62);
                  }
                  uint64_t v62 = v81;
                }
                else
                {
                  *((_DWORD *)v64 + 2) = DWORD2(v67);
                  *(void *)int v64 = v67;
                  *((_DWORD *)v64 + 6) = DWORD2(v68);
                  *((void *)v64 + 2) = v68;
                  *((_DWORD *)v64 + 10) = DWORD2(v69);
                  *((void *)v64 + 4) = v69;
                  uint64_t v71 = v64 + 56;
                  *((void *)v64 + 6) = v70;
                  v64 += 64;
                  _DWORD *v71 = DWORD2(v70);
                }
              }
              float v433 = v64;
              v434 = v63;
              float32x4_t v432 = v62;
              uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v59, (uint64_t)&buf, &v442, 16);
            }
            while (v61);
          }
          else
          {
            uint64_t v62 = 0;
          }

          uint64_t v82 = *((void *)v408 + 1);
          float v85 = objc_msgSend_walls(v404, v83, v84);
          sub_25B49676C((uint64_t)&v442, v82, 0, v392, v85, &v432, 0);
          sub_25B49416C(v436);
          uint64_t v86 = v443;
          float v435 = v442;
          float32x2_t v436 = v443;
          uint64_t v437 = v444;
          if (v444)
          {
            v443[2] = &v436;
            float32_t v442 = (uint64_t *)&v443;
            float32x2_t v443 = 0;
            uint64_t v444 = 0;
            uint64_t v86 = 0;
          }
          else
          {
            float v435 = (uint64_t *)&v436;
          }
          sub_25B49416C(v86);

          unint64_t v89 = objc_msgSend_walls(v404, v87, v88);
          unint64_t v92 = objc_msgSend_walls(*((void **)v408 + 5), v90, v91);
          sub_25B522F70(v89, &v435, v92);

          objc_msgSend_walls(v404, v93, v94);
          id v95 = (id)objc_claimAutoreleasedReturnValue();
          long long buf = 0u;
          long long v446 = 0u;
          long long v447 = 0u;
          long long v448 = 0u;
          id v96 = v95;
          uint64_t v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v97, (uint64_t)&buf, &v442, 16);
          if (v100)
          {
            uint64_t v101 = *(void *)v446;
            do
            {
              for (uint64_t j = 0; j != v100; ++j)
              {
                if (*(void *)v446 != v101) {
                  objc_enumerationMutation(v96);
                }
                uint64_t v103 = *(void **)(*((void *)&buf + 1) + 8 * j);
                if ((unint64_t)objc_msgSend_polygonSize(v103, v98, v99) >= 3)
                {
                  unint64_t v104 = objc_msgSend_polygonSize(v103, v98, v99);
                  sub_25B4D3EC4(&__p, v104);
                  objc_msgSend_quad(v103, v105, v106);
                  long long v427 = v107;
                  uint64_t v110 = objc_msgSend_polygon(v103, v108, v109);
                  uint64_t v113 = objc_msgSend_polygonSize(v103, v111, v112);
                  long long v114 = v427;
                  DWORD2(v114) = *(_DWORD *)(v110 + 16 * v113 - 24);
                  *((_OWORD *)v441 - 2) = v114;
                  objc_msgSend_quad(v103, v115, v116);
                  long long v428 = v117;
                  uint64_t v120 = objc_msgSend_polygon(v103, v118, v119);
                  uint64_t v123 = objc_msgSend_polygonSize(v103, v121, v122);
                  long long v124 = v428;
                  DWORD2(v124) = *(_DWORD *)(v120 + 16 * v123 - 8);
                  *((_OWORD *)v441 - 1) = v124;
                  uint64_t v127 = objc_msgSend_polygon(v103, v125, v126);
                  uint64_t v130 = objc_msgSend_polygonSize(v103, v128, v129);
                  uint64_t v133 = objc_msgSend_polygon(v103, v131, v132);
                  int v136 = (float32x4_t *)(v127 + 16 * v130 - 16);
                  float32x4_t v139 = vsubq_f32(*(float32x4_t *)(v133 + 16 * objc_msgSend_polygonSize(v103, v134, v135) - 32), *v136);
                  float v140 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v139, v139)));
                  if (v140 >= 0.00000001) {
                    float v141 = v140;
                  }
                  else {
                    float v141 = 0.00000001;
                  }
                  if (v441 - (unsigned char *)__p != 32)
                  {
                    uint64_t v142 = 0;
                    unint64_t v143 = 0;
                    uint64_t v144 = v441 - 16;
                    float32x2_t v145 = vsub_f32(*(float32x2_t *)(v441 - 32), *(float32x2_t *)(v441 - 16));
                    do
                    {
                      uint64_t v146 = objc_msgSend_polygon(v103, v137, v138);
                      float32x4_t v419 = *v136;
                      float32x4_t v423 = *(float32x4_t *)(v146 + v142);
                      long long v429 = *(_OWORD *)v144;
                      uint64_t v149 = objc_msgSend_polygon(v103, v147, v148);
                      float32x4_t v150 = vsubq_f32(v423, v419);
                      *(float32x2_t *)&long long v151 = vmla_n_f32(*(float32x2_t *)&v429, v145, sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v150, v150))) / v141);
                      *((void *)&v151 + 1) = vextq_s8(*(int8x16_t *)(v149 + v142), *(int8x16_t *)(v149 + v142), 8uLL).u64[0];
                      *((_OWORD *)__p + v143++) = v151;
                      v142 += 16;
                    }
                    while (v143 < ((v441 - (unsigned char *)__p) >> 4) - 2);
                  }
                  size_t v152 = objc_msgSend_polygonSize(v103, v137, v138);
                  size_t v155 = v152;
                  if (v152)
                  {
                    if ((v152 & 0x8000000000000000) != 0) {
                      sub_25B3FBC4C();
                    }
                    unint64_t v156 = (unint64_t)operator new(v152);
                    uint64_t v157 = (char *)(v156 + v155);
                    bzero((void *)v156, v155);
                  }
                  else
                  {
                    unint64_t v156 = 0;
                    uint64_t v157 = 0;
                  }
                  v157[~v156 + v156] = objc_msgSend_edgeStates(v103, v153, v154) >> 24;
                  *(v157 - 2) = objc_msgSend_edgeStates(v103, v158, v159) >> 16;
                  *(v157 - 3) = (unsigned __int16)objc_msgSend_edgeStates(v103, v160, v161) >> 8;
                  if (v157 - 3 != (char *)v156)
                  {
                    uint64_t v164 = 0;
                    if ((unint64_t)&v157[-v156 - 3] <= 1) {
                      uint64_t v165 = 1;
                    }
                    else {
                      uint64_t v165 = (uint64_t)&v157[-v156 - 3];
                    }
                    do
                    {
                      *(unsigned char *)(v156 + v164) = *(unsigned char *)(objc_msgSend_polygonEdgeStates(v103, v162, v163) + v164);
                      ++v164;
                    }
                    while (v165 != v164);
                  }
                  v166 = (char *)__p;
                  uint64_t v167 = (char *)objc_msgSend_polygonEdgeConfidence(v103, v162, v163);
                  unint64_t v170 = objc_msgSend_polygonSize(v103, v168, v169);
                  sub_25B4FD368((uint64_t)v103, v166, (char *)v156, v167, v170);
                  operator delete((void *)v156);
                  if (__p)
                  {
                    float v441 = (char *)__p;
                    operator delete(__p);
                  }
                }
              }
              uint64_t v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v98, (uint64_t)&buf, &v442, 16);
            }
            while (v100);
          }

          uint64_t v1 = v390;
          uint64_t v173 = objc_msgSend_openings(v404, v171, v172);
          BOOL v176 = objc_msgSend_count(v173, v174, v175) == 0;

          if (!v176)
          {
            uint64_t v179 = objc_msgSend_openings(v404, v177, v178);
            sub_25B49C1C0(3, (uint64_t)&v435, v179);
            objc_claimAutoreleasedReturnValue();
            sub_25B4E666C((uint64_t)v404, v179);
          }
          uint64_t v180 = objc_msgSend_opendoors(v404, v177, v178);
          BOOL v183 = objc_msgSend_count(v180, v181, v182) == 0;

          if (!v183)
          {
            v186 = objc_msgSend_opendoors(v404, v184, v185);
            sub_25B49C1C0(4, (uint64_t)&v435, v186);
            objc_claimAutoreleasedReturnValue();
            sub_25B477C10((uint64_t)v404, v186);
          }
          if (v62)
          {
            float v433 = v62;
            operator delete(v62);
          }
        }
        kdebug_trace();
        kdebug_trace();
        char v187 = sub_25B5233E4(*((void **)v408 + 3), v393);
        objc_storeStrong((id *)v408 + 3, v393);
        float32_t v442 = 0;
        float32x2_t v443 = 0;
        uint64_t v444 = 0;
        v190 = objc_msgSend_windows(v412, v188, v189);
        BOOL v193 = objc_msgSend_count(v190, v191, v192) == 0;

        if (!v193)
        {
          uint64_t v196 = objc_msgSend_windows(v412, v194, v195);
          sub_25B49C1C0(1, (uint64_t)&v435, v196);
          objc_claimAutoreleasedReturnValue();
          sub_25B4E665C((uint64_t)v412, v196);

          uint64_t v197 = *((void *)v408 + 1);
          long long v200 = objc_msgSend_windows(v412, v198, v199);
          sub_25B49676C((uint64_t)&buf, v197, 1u, v392, v200, &v442, v187);

          uint64_t v203 = objc_msgSend_windows(v412, v201, v202);
          uint64_t v206 = objc_msgSend_windows(*((void **)v408 + 5), v204, v205);
          sub_25B522F70(v203, (uint64_t **)&buf, v206);

          long long v209 = objc_msgSend_windows(v412, v207, v208);
          sub_25B49C1C0(1, (uint64_t)&v435, v209);
          objc_claimAutoreleasedReturnValue();
          sub_25B4E665C((uint64_t)v412, v209);

          sub_25B49416C(*((void **)&buf + 1));
        }
        kdebug_trace();
        kdebug_trace();
        char v210 = sub_25B5233E4(*((void **)v408 + 4), obj);
        objc_storeStrong((id *)v408 + 4, obj);
        int64x2_t v213 = objc_msgSend_doors(v412, v211, v212);
        BOOL v216 = objc_msgSend_count(v213, v214, v215) == 0;

        if (!v216)
        {
          BOOL v219 = objc_msgSend_doors(v412, v217, v218);
          sub_25B49C1C0(2, (uint64_t)&v435, v219);
          objc_claimAutoreleasedReturnValue();
          sub_25B477C30((uint64_t)v412, v219);

          uint64_t v220 = *((void *)v408 + 1);
          unint64_t v223 = objc_msgSend_doors(v412, v221, v222);
          sub_25B49676C((uint64_t)&buf, v220, 2u, v392, v223, &v442, v210);

          float v226 = objc_msgSend_doors(v412, v224, v225);
          float v229 = objc_msgSend_doors(*((void **)v408 + 5), v227, v228);
          sub_25B522F70(v226, (uint64_t **)&buf, v229);

          float v232 = objc_msgSend_doors(v412, v230, v231);
          sub_25B49C1C0(2, (uint64_t)&v435, v232);
          objc_claimAutoreleasedReturnValue();
          sub_25B477C30((uint64_t)v412, v232);

          sub_25B49416C(*((void **)&buf + 1));
        }
        kdebug_trace();
        sub_25B4E9F44((void **)v412);
        float v233 = (void *)*((void *)v408 + 5);
        id v15 = v412;
        id v234 = v233;
        v237 = objc_msgSend_walls(v15, v235, v236);
        v240 = objc_msgSend_walls(v234, v238, v239);
        sub_25B523598(v237, v240);

        uint64_t v243 = objc_msgSend_openings(v15, v241, v242);
        uint64_t v246 = objc_msgSend_openings(v234, v244, v245);
        sub_25B523598(v243, v246);

        float v249 = objc_msgSend_windows(v15, v247, v248);
        unint64_t v252 = objc_msgSend_windows(v234, v250, v251);
        sub_25B5237FC(v249, v252);

        v255 = objc_msgSend_doors(v15, v253, v254);
        float v258 = objc_msgSend_doors(v234, v256, v257);
        sub_25B5237FC(v255, v258);

        float v261 = objc_msgSend_opendoors(v15, v259, v260);
        unint64_t v264 = objc_msgSend_opendoors(v234, v262, v263);
        sub_25B5237FC(v261, v264);

        *(void *)(*((void *)v408 + 1) + 208) = 0;
        uint64_t v267 = objc_msgSend_copy(v15, v265, v266);
        int v268 = (void *)*((void *)v408 + 5);
        *((void *)v408 + 5) = v267;

        v269.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (qword_26A502120 != -1) {
          dispatch_once(&qword_26A502120, &unk_2708F12F8);
        }
        float v270 = (id)qword_26A502118;
        if (os_log_type_enabled(v270, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = (v269.__d_.__rep_ - v389.__d_.__rep_) / 1000000;
          _os_log_debug_impl(&dword_25B3F3000, v270, OS_LOG_TYPE_DEBUG, "Boundary refinement consume: %lld ms", (uint8_t *)&buf, 0xCu);
        }

        sub_25B49416C(v436);
        sub_25B400F2C((uint64_t)&v438);
      }

      uint64_t v395 = v15;
      uint64_t v14 = v391;
    }
  }
  int32x2_t v271 = sub_25B428F7C(*((id ***)WeakRetained + 2), *(void **)(*(void *)(*(void *)(v1 + 40) + 8) + 40), v395);
  objc_msgSend_updateObjects_(v395, v272, (uint64_t)v271);

  sub_25B41F278(*((void *)WeakRetained + 19), v395);
  uint64_t v273 = *((void *)WeakRetained + 8);
  id v397 = v395;
  if (v273)
  {
    long long v447 = 0u;
    long long v448 = 0u;
    long long buf = 0u;
    long long v446 = 0u;
    float v276 = objc_msgSend_walls(v397, v274, v275);
    uint64_t v280 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v277, (uint64_t)&buf, &v442, 16);
    uint64_t v394 = v273;
    v281 = 0;
    if (v280)
    {
      uint64_t v282 = *(void *)v446;
      long long v430 = 0u;
      __asm { FMOV            V0.4S, #0.25 }
      float32x4_t v401 = _Q0;
      do
      {
        for (uint64_t k = 0; k != v280; ++k)
        {
          if (*(void *)v446 != v282) {
            objc_enumerationMutation(v276);
          }
          v289 = *(void **)(*((void *)&buf + 1) + 8 * k);
          objc_msgSend_quad(v289, v278, v279);
          float32x4_t v424 = v290;
          objc_msgSend_quad(v289, v291, v292);
          float32x4_t v420 = v293;
          objc_msgSend_quad(v289, v294, v295);
          float32x4_t v416 = v296;
          objc_msgSend_quad(v289, v297, v298);
          float32x4_t v413 = v299;
          objc_msgSend_quad(v289, v300, v301);
          float32x4_t v409 = v302;
          objc_msgSend_quad(v289, v303, v304);
          float32x4_t v405 = v305;
          objc_msgSend_quad(v289, v306, v307);
          *(_OWORD *)int32x4_t obja = v308;
          objc_msgSend_quad(v289, v309, v310);
          float32x4_t v313 = vsubq_f32(v409, v405);
          float32x4_t v315 = vsubq_f32(*(float32x4_t *)obja, v314);
          float32x4_t v410 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v315, (int32x4_t)v315), (int8x16_t)v315, 0xCuLL), vnegq_f32(v313)), v315, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v313, (int32x4_t)v313), (int8x16_t)v313, 0xCuLL));
          float32x4_t v316 = vmulq_f32(v410, v410);
          unint64_t v317 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v316.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v316, 2), v316)).u64[0];
          *(float *)&unint64_t v317 = sqrtf(*(float *)&v317);
          if (*(float *)&v317 < 0.001) {
            *(float *)&unint64_t v317 = 0.001;
          }
          int32x2_t v406 = (int32x2_t)v317;
          objc_msgSend_quad(v289, v311, v312);
          long long v321 = v318;
          long long v323 = v322;
          float32x4_t v324 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v424, v420), v416), v413), v401);
          float32x4_t v325 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v410, (int32x4_t)v410), (int8x16_t)v410, 0xCuLL), (float32x4_t)vdupq_lane_s32(v406, 0));
          uint64_t v326 = (char *)*((void *)&v430 + 1);
          if (*((void *)&v430 + 1) >= (unint64_t)v281)
          {
            unint64_t v328 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v430 + 1) - v430) >> 5) + 1;
            if (v328 > 0x2AAAAAAAAAAAAAALL) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)&v281[-v430] >> 5) > v328) {
              unint64_t v328 = 0x5555555555555556 * ((uint64_t)&v281[-v430] >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v281[-v430] >> 5) >= 0x155555555555555) {
              unint64_t v329 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v329 = v328;
            }
            if (v329)
            {
              float32x4_t v407 = v325;
              float32x4_t v411 = v324;
              long long v414 = v318;
              long long v417 = v323;
              long long v421 = v319;
              long long v425 = v320;
              if (v329 > 0x2AAAAAAAAAAAAAALL) {
                sub_25B3FA70C();
              }
              v330 = (char *)operator new(96 * v329);
              long long v319 = v421;
              long long v320 = v425;
              long long v321 = v414;
              long long v323 = v417;
              float32x4_t v325 = v407;
              float32x4_t v324 = v411;
            }
            else
            {
              v330 = 0;
            }
            float v331 = (float32x4_t *)&v330[32 * ((uint64_t)(*((void *)&v430 + 1) - v430) >> 5)];
            *float v331 = v324;
            v331[1] = v325;
            v331[2].i64[0] = v321;
            v331[2].i32[2] = DWORD2(v321);
            v331[3].i64[0] = v323;
            v331[3].i32[2] = DWORD2(v323);
            v331[4].i32[2] = DWORD2(v319);
            v331[4].i64[0] = v319;
            v331[5].i64[0] = v320;
            v331[5].i32[2] = DWORD2(v320);
            v332 = v331;
            if (*((void *)&v430 + 1) != (void)v430)
            {
              do
              {
                float32x4_t v333 = *((float32x4_t *)v326 - 5);
                v332[-6] = *((float32x4_t *)v326 - 6);
                v332[-5] = v333;
                float32x4_t v334 = *((float32x4_t *)v326 - 4);
                float32x4_t v335 = *((float32x4_t *)v326 - 3);
                float32x4_t v336 = *((float32x4_t *)v326 - 1);
                v332[-2] = *((float32x4_t *)v326 - 2);
                v332[-1] = v336;
                v332[-4] = v334;
                v332[-3] = v335;
                v332 -= 6;
                v326 -= 96;
              }
              while (v326 != (char *)v430);
              uint64_t v326 = (char *)v430;
            }
            v281 = &v330[96 * v329];
            uint64_t v327 = (uint64_t)&v331[6];
            *(void *)&long long v430 = v332;
            if (v326) {
              operator delete(v326);
            }
          }
          else
          {
            **((_OWORD **)&v430 + 1) = v324;
            *(float32x4_t *)(*((void *)&v430 + 1) + 16) = v325;
            *(_DWORD *)(*((void *)&v430 + 1) + 40) = DWORD2(v318);
            *(void *)(*((void *)&v430 + 1) + 32) = v318;
            *(_DWORD *)(*((void *)&v430 + 1) + 56) = DWORD2(v323);
            *(void *)(*((void *)&v430 + 1) + 48) = v323;
            *(_DWORD *)(*((void *)&v430 + 1) + 72) = DWORD2(v319);
            *(void *)(*((void *)&v430 + 1) + 64) = v319;
            *(_DWORD *)(*((void *)&v430 + 1) + 88) = DWORD2(v320);
            uint64_t v327 = *((void *)&v430 + 1) + 96;
            *(void *)(*((void *)&v430 + 1) + 80) = v320;
          }
          *(void *)&long long v337 = v430;
          *((void *)&v337 + 1) = v327;
          long long v430 = v337;
        }
        uint64_t v280 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v278, (uint64_t)&buf, &v442, 16);
      }
      while (v280);
    }
    else
    {
      long long v430 = 0u;
    }

    std::mutex::lock((std::mutex *)(v394 + 936));
    uint64_t v338 = *(void **)(v394 + 832);
    *(_OWORD *)(v394 + 832) = v430;
    *(void *)(v394 + 848) = v281;
    std::mutex::unlock((std::mutex *)(v394 + 936));
    if (v338) {
      operator delete(v338);
    }
  }

  uint64_t v341 = *((void *)WeakRetained + 8);
  uint64_t v342 = *((void *)WeakRetained + 2);
  if (v342)
  {
    uint64_t v343 = sub_25B400D94(*(id **)(v342 + 72));
    if (v343) {
      uint64_t v344 = v343[6];
    }
    else {
      uint64_t v344 = 0;
    }
    uint64_t v431 = v344;

    if (!v341) {
      goto LABEL_141;
    }
LABEL_117:
    float32x4_t v345 = objc_msgSend_date(MEMORY[0x263EFF910], v339, v340);
    uint64_t v346 = *(void *)(v341 + 888);
    if (!v346) {
      objc_storeStrong((id *)(v341 + 888), v345);
    }
    std::mutex::lock((std::mutex *)(v341 + 936));
    objc_msgSend_timeIntervalSinceDate_(v345, v347, *(void *)(v341 + 888));
    if (v350 >= -1.0)
    {
      if (objc_msgSend_type(*(void **)(v341 + 864), v348, v349))
      {
        uint64_t v357 = [RSTextCoachingSignal alloc];
        if (*((float *)&v431 + 1) >= 15.0)
        {
          uint64_t v358 = 0;
          float v359 = 1.0;
        }
        else
        {
          uint64_t v358 = -1;
          float v359 = (float)(15.0 - *((float *)&v431 + 1)) / 15.0;
        }
        if (v357) {
          uint64_t v357 = (RSTextCoachingSignal *)sub_25B51F704(v357, v358, v359);
        }
        uint64_t v360 = *(void **)(v341 + 864);
        *(void *)(v341 + 864) = v357;
      }
      if (!objc_msgSend_type(*(void **)(v341 + 856), v355, v356)) {
        goto LABEL_140;
      }
      if (*(float *)&v431 >= 15.0)
      {
        uint64_t v362 = [RSTextCoachingSignal alloc];
        if (v362) {
          uint64_t v362 = (RSTextCoachingSignal *)sub_25B51F704(v362, 0, 1.0);
        }
      }
      else
      {
        uint64_t v362 = [RSTextCoachingSignal alloc];
        if (v362) {
          uint64_t v362 = (RSTextCoachingSignal *)sub_25B51F704(v362, -1, (float)(15.0 - *(float *)&v431) / 15.0);
        }
      }
      uint64_t v354 = *(void **)(v341 + 856);
      *(void *)(v341 + 856) = v362;
    }
    else
    {
      uint64_t v351 = [RSTextCoachingSignal alloc];
      if (v351) {
        uint64_t v351 = (RSTextCoachingSignal *)sub_25B51F704(v351, -1, -1.0);
      }
      unint64_t v352 = *(void **)(v341 + 856);
      *(void *)(v341 + 856) = v351;

      uint64_t v353 = [RSTextCoachingSignal alloc];
      if (v353) {
        uint64_t v353 = (RSTextCoachingSignal *)sub_25B51F704(v353, -1, -1.0);
      }
      uint64_t v354 = *(void **)(v341 + 864);
      *(void *)(v341 + 864) = v353;
    }

LABEL_140:
    sub_25B5850C4(v341, (const char *)(v346 == 0), v361);
    std::mutex::unlock((std::mutex *)(v341 + 936));

    goto LABEL_141;
  }
  uint64_t v431 = 0;
  if (v341) {
    goto LABEL_117;
  }
LABEL_141:
  id v398 = v397;

  if (objc_msgSend_isOnboardingEnabled(*((void **)WeakRetained + 1), v363, v364)
    && objc_msgSend_isTextCoachingEnabled(*((void **)WeakRetained + 1), v365, v366)
    && ((uint64_t v367 = *((void *)WeakRetained + 8)) == 0 || *(void *)(v367 + 1000) != 3))
  {
    uint64_t v372 = *((void *)WeakRetained + 2);
    if (v372) {
      sub_25B51F628(*(void *)(v372 + 80));
    }
    uint64_t v373 = *((void *)WeakRetained + 23);
    if (v373)
    {
      uint64_t v374 = objc_alloc_init(RSFloorPlan);
      unint64_t v375 = *(void **)(v373 + 40);
      *(void *)(v373 + 40) = v374;
    }
  }
  else
  {
    uint64_t v368 = objc_msgSend_delegate(WeakRetained, v365, v366);
    char v369 = objc_opt_respondsToSelector();

    if (v369)
    {
      v370 = objc_msgSend_delegate(WeakRetained, v365, v366);
      objc_msgSend_session_didUpdateFloorPlan_(v370, v371, (uint64_t)WeakRetained, v398);
    }
  }
  if (objc_msgSend_isMarkerCoachingEnabled(*((void **)WeakRetained + 1), v365, v366))
  {
    v378 = objc_msgSend_delegate(WeakRetained, v376, v377);
    char v379 = objc_opt_respondsToSelector();

    if (v379)
    {
      uint64_t v383 = objc_msgSend_delegate(WeakRetained, v380, v381);
      uint64_t v384 = *((void *)WeakRetained + 2);
      if (v384)
      {
        id v385 = *(id *)(v384 + 152);
        objc_msgSend_session_didUpdateMarkerCoaching_(v383, v386, (uint64_t)WeakRetained, v385);
      }
      else
      {
        id v385 = 0;
        objc_msgSend_session_didUpdateMarkerCoaching_(v383, v382, (uint64_t)WeakRetained, 0);
      }
    }
  }
  unint64_t v387 = (void *)*((void *)WeakRetained + 12);
  *((void *)WeakRetained + 12) = v398;
  id v388 = v398;

  dispatch_semaphore_signal(*((dispatch_semaphore_t *)WeakRetained + 16));
LABEL_157:
}

void sub_25B4E1A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, id a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,long long a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *__p,uint64_t a46)
{
  sub_25B400F2C((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_25B4E274C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E2904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E2DA4(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_25B4E2DE8(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 120))
  {
    uint64_t v5 = MEMORY[0x2611649C0]();
    uint64_t v6 = v3[19];
    if (v6 && *(unsigned char *)(v6 + 177) && *(void *)(v6 + 104))
    {
      uint64_t v7 = *(void **)(v6 + 64);
      uint64_t v8 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v4, v5, @"avail_mem");
      v27[1] = @"time_stamp";
      *(void *)&long long buf = v8;
      uint64_t v9 = NSNumber;
      objc_msgSend_timestamp(*(void **)(v6 + 104), v10, v11);
      uint64_t v14 = objc_msgSend_numberWithDouble_(v9, v12, v13);
      *((void *)&buf + 1) = v14;
      long long v16 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v15, (uint64_t)&buf, v27, 2);
      objc_msgSend_addObject_(v7, v17, (uint64_t)v16);
    }
    if (*(double *)(a1 + 40) > (double)(unint64_t)v5)
    {
      if (qword_26A502100 != -1) {
        dispatch_once(&qword_26A502100, &unk_2708F12B8);
      }
      long long v18 = (id)qword_26A5020F8;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_error_impl(&dword_25B3F3000, v18, OS_LOG_TYPE_ERROR, "RSError: limited available memory: %{bytes}zu", (uint8_t *)&buf, 0xCu);
      }

      float32x4_t v21 = objc_msgSend_delegate(v3, v19, v20);
      char v22 = objc_opt_respondsToSelector();

      if (v22)
      {
        uint64_t v25 = objc_msgSend_delegate(v3, v23, v24);
        objc_msgSend_session_didFailWithError_(v25, v26, (uint64_t)v3, -1);
      }
    }
  }
}

void sub_25B4E2FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E32D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4E32F4(uint64_t a1, unint64_t a2, const void *a3)
{
  if (!a1) {
    return;
  }
  long long v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_25B4E35C4(&v18, a3, (uint64_t)a3 + 8 * a2, a2);
  sub_25B4E3640((uint64_t)&v21, a1 + 8, &v18);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 8) = v21;
  *(void *)(a1 + 24) = v22;
  sub_25B4E3640((uint64_t)&v21, a1 + 32, &v18);
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = v21;
  *(void *)(a1 + 48) = v22;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  uint64_t v6 = v18;
  uint64_t v7 = v19;
  unint64_t v8 = v19 - v18;
  sub_25B4E3720((void **)&v16, v8);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_25B4E37C8(&v21, *(const void **)(a1 + 56), *(void *)(a1 + 64), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2);
  uint64_t v24 = (void **)&v16;
  uint64_t v9 = (_DWORD *)v21;
  if (v6 == v7)
  {
    if (!(void)v21) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = v6;
    do
    {
      LODWORD(v23) = v9[*v10];
      sub_25B4E3844(&v24, &v23);
      ++v10;
    }
    while (v10 != v7);
  }
  operator delete(v9);
LABEL_12:
  uint64_t v11 = *(void **)(a1 + 56);
  if (v11)
  {
    *(void *)(a1 + 64) = v11;
    operator delete(v11);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = v16;
  *(void *)(a1 + 72) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  sub_25B443B1C((void **)&v16, v8);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_25B4E3924(&v21, *(const void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  uint64_t v24 = (void **)&v16;
  uint64_t v12 = (void *)v21;
  if (v6 != v7)
  {
    uint64_t v13 = v6;
    do
    {
      uint64_t v23 = v12[*v13];
      sub_25B4E39A0(&v24, &v23);
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_19;
  }
  if ((void)v21) {
LABEL_19:
  }
    operator delete(v12);
  uint64_t v14 = *(void **)(a1 + 80);
  if (v14)
  {
    *(void *)(a1 + 88) = v14;
    operator delete(v14);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = v16;
  *(void *)(a1 + 96) = v17;
  sub_25B4E3640((uint64_t)&v21, a1 + 104, &v18);
  id v15 = *(void **)(a1 + 104);
  if (v15)
  {
    *(void *)(a1 + 112) = v15;
    operator delete(v15);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = v21;
  *(void *)(a1 + 120) = v22;
  if (v6) {
    operator delete(v6);
  }
}

void sub_25B4E356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B4E35C4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_25B40040C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4E3624(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4E3640(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_25B4E3A80((void **)a1, (uint64_t)(a3[1] - *a3) >> 3);
  uint64_t v7 = (void *)*a3;
  uint64_t v6 = (void *)a3[1];
  memset(v9, 0, sizeof(v9));
  sub_25B40EE6C(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  uint64_t v11 = (void **)a1;
  size_t v8 = (_OWORD *)v9[0];
  if (v7 == v6)
  {
    if (!v9[0]) {
      return;
    }
  }
  else
  {
    do
    {
      long long v10 = v8[*v7];
      sub_25B4E3B24(&v11, &v10);
      ++v7;
    }
    while (v7 != v6);
  }
  operator delete(v8);
}

void sub_25B4E36F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4E3720(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_25B3FBC64(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    uint64_t v9 = (char *)*a1;
    size_t v8 = (char *)a1[1];
    long long v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        int v11 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v8 != v9);
      size_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_25B4E37C8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_25B3FCA18(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4E3828(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_25B4E3844(void ***a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 2;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v9 = v5 - (void)*v4;
    uint64_t v10 = v9 >> 1;
    if (v9 >> 1 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_25B3FBC64(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (_DWORD *)(v11 + 4 * v8);
    unint64_t v14 = v11 + 4 * v12;
    *uint64_t v13 = *a2;
    uint64_t v7 = v13 + 1;
    long long v16 = (char *)*v4;
    id v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        int v17 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--uint64_t v13 = v17;
      }
      while (v15 != v16);
      id v15 = (char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

void *sub_25B4E3924(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_25B40040C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4E3984(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_25B4E39A0(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v9 = v5 - (void)*v4;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_25B3FCAD4(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    *uint64_t v13 = *a2;
    uint64_t v7 = v13 + 1;
    long long v16 = (char *)*v4;
    id v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--uint64_t v13 = v17;
      }
      while (v15 != v16);
      id v15 = (char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

void sub_25B4E3A80(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_25B3FFAEC(a2);
    unint64_t v5 = &v4[v3];
    uint64_t v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void ***sub_25B4E3B24(void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 4;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v9 = v5 - (void)*v4;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_25B3FFAEC(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (_OWORD *)(v11 + 16 * v8);
    unint64_t v14 = v11 + 16 * v12;
    *uint64_t v13 = *a2;
    uint64_t v7 = v13 + 1;
    long long v16 = (char *)*v4;
    id v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        long long v17 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *--uint64_t v13 = v17;
      }
      while (v15 != v16);
      id v15 = (char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (void *)v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  v4[1] = v7;
  return a1;
}

void sub_25B4E3F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E40F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4E4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p)
{
  _Unwind_Resume(a1);
}

void sub_25B4E4CCC()
{
  JUMPOUT(0x25B4E4CA0);
}

void sub_25B4E4CDC()
{
  JUMPOUT(0x25B4E4CE4);
}

void sub_25B4E4CEC()
{
  JUMPOUT(0x25B4E4CA8);
}

void sub_25B4E4CFC()
{
  JUMPOUT(0x25B4E4D04);
}

void sub_25B4E4D0C()
{
  JUMPOUT(0x25B4E4CB4);
}

void *sub_25B4E4D24(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_25B46E9EC(v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    id v15 = &v9[v16];
    goto LABEL_20;
  }
  unint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  id v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *sub_25B4E4E30(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B3FCA18(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_25B4E4E8C(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B4E4EA8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_25B3FBC4C();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = sub_25B4E5020(v7, v11);
    size_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  size_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *sub_25B4E4FA8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40040C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25B4E5004(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B4E5020(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_25B3FBC4C();
  }
  uint64_t result = (char *)operator new(2 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

void sub_25B4E5138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E5180(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id RSKeyframeToDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v2, v3);
  unint64_t v5 = NSNumber;
  uint64_t v8 = objc_msgSend_count(v1, v6, v7);
  unint64_t v10 = objc_msgSend_numberWithInteger_(v5, v9, v8);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v11, (uint64_t)v10, @"count");

  objc_msgSend_cameraPose(v1, v12, v13);
  v134[0] = v14;
  v134[1] = v15;
  v134[2] = v16;
  v134[3] = v17;
  uint64_t v19 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v18, (uint64_t)v134, 64);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v20, (uint64_t)v19, @"cameraPose");

  uint64_t v23 = (const void *)objc_msgSend_points(v1, v21, v22);
  uint64_t v26 = objc_msgSend_points(v1, v24, v25);
  uint64_t v29 = objc_msgSend_count(v1, v27, v28);
  float v131 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  sub_25B487E48(&v131, v23, v26 + 16 * v29, (v26 + 16 * v29 - (uint64_t)v23) >> 4);
  uint64_t v30 = v131;
  __int16 v31 = v132;
  uint64_t v32 = (char *)v132 - (char *)v131;
  sub_25B443228(&v129, (((char *)v132 - (char *)v131) >> 3) + (((char *)v132 - (char *)v131) >> 4));
  if (v31 != v30)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v32 >> 4;
    if ((unint64_t)(v32 >> 4) <= 1) {
      uint64_t v35 = 1;
    }
    uint64_t v36 = v30;
    do
    {
      BOOL v37 = (char *)v129 + v34;
      uint64_t v38 = *(void *)v36;
      *((_DWORD *)v37 + 2) = v36[2];
      *(void *)BOOL v37 = v38;
      v36 += 4;
      v34 += 12;
      --v35;
    }
    while (v35);
  }
  if (v130 == v129)
  {
    id v39 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v33, (uint64_t)v129, v130 - (unsigned char *)v129);
    id v39 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v41 = v39;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v40, (uint64_t)v39, @"points");

  uint64_t v44 = (const void *)objc_msgSend_pointsToWorld(v1, v42, v43);
  uint64_t v47 = objc_msgSend_pointsToWorld(v1, v45, v46);
  uint64_t v50 = objc_msgSend_count(v1, v48, v49);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  sub_25B40EE6C(&v126, v44, v47 + 16 * v50, (v47 + 16 * v50 - (uint64_t)v44) >> 4);
  id v51 = v126;
  id v52 = v127;
  uint64_t v53 = (char *)v127 - (char *)v126;
  sub_25B443228(&v124, (((char *)v127 - (char *)v126) >> 3) + (((char *)v127 - (char *)v126) >> 4));
  if (v52 != v51)
  {
    uint64_t v55 = 0;
    uint64_t v56 = v53 >> 4;
    if ((unint64_t)(v53 >> 4) <= 1) {
      uint64_t v56 = 1;
    }
    id v57 = v51;
    do
    {
      unint64_t v58 = (char *)v124 + v55;
      uint64_t v59 = *(void *)v57;
      *((_DWORD *)v58 + 2) = v57[2];
      *(void *)unint64_t v58 = v59;
      v57 += 4;
      v55 += 12;
      --v56;
    }
    while (v56);
  }
  if (v125 == v124)
  {
    id v60 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v54, (uint64_t)v124, v125 - (unsigned char *)v124);
    id v60 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v62 = v60;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v61, (uint64_t)v60, @"pointsToWorld");

  uint64_t v65 = objc_msgSend_semanticLabels(v1, v63, v64);
  uint64_t v69 = objc_msgSend_count(v1, v66, v67);
  if (v65 && v69)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v68, v65, 4 * v69);
    id v70 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v70 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  uint64_t v72 = v70;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v71, (uint64_t)v70, @"semanticLabels");

  uint64_t v75 = objc_msgSend_semanticVotes(v1, v73, v74);
  uint64_t v79 = objc_msgSend_count(v1, v76, v77);
  if (v75 && v79)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v78, v75, 8 * v79);
    id v80 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v80 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  uint64_t v82 = v80;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v81, (uint64_t)v80, @"semanticVotes");

  float v85 = objc_msgSend_identifier(v1, v83, v84);
  uint64_t v88 = objc_msgSend_UUIDString(v85, v86, v87);

  objc_msgSend_setObject_forKeyedSubscript_(v4, v89, (uint64_t)v88, @"identifier");
  unint64_t v92 = (const void *)objc_msgSend_colors(v1, v90, v91);
  uint64_t v95 = objc_msgSend_colors(v1, v93, v94);
  uint64_t v98 = objc_msgSend_count(v1, v96, v97);
  float v121 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  sub_25B40EE6C(&v121, v92, v95 + 16 * v98, (v95 + 16 * v98 - (uint64_t)v92) >> 4);
  uint64_t v99 = v121;
  uint64_t v100 = v122;
  uint64_t v101 = (char *)v122 - (char *)v121;
  sub_25B443228(&__p, (((char *)v122 - (char *)v121) >> 3) + (((char *)v122 - (char *)v121) >> 4));
  if (v100 != v99)
  {
    uint64_t v103 = 0;
    uint64_t v104 = v101 >> 4;
    if ((unint64_t)(v101 >> 4) <= 1) {
      uint64_t v104 = 1;
    }
    unint64_t v105 = v99;
    do
    {
      uint64_t v106 = (char *)__p + v103;
      uint64_t v107 = *(void *)v105;
      *((_DWORD *)v106 + 2) = v105[2];
      *(void *)uint64_t v106 = v107;
      v105 += 4;
      v103 += 12;
      --v104;
    }
    while (v104);
  }
  if (v120 == __p)
  {
    id v108 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v102, (uint64_t)__p, v120 - (unsigned char *)__p);
    id v108 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v110 = v108;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v109, (uint64_t)v108, @"colors");

  float v111 = NSNumber;
  objc_msgSend_timestamp(v1, v112, v113);
  uint64_t v116 = objc_msgSend_numberWithDouble_(v111, v114, v115);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v117, (uint64_t)v116, @"timestamp");

  if (__p)
  {
    uint64_t v120 = __p;
    operator delete(__p);
  }
  if (v99) {
    operator delete(v99);
  }

  if (v124)
  {
    uint64_t v125 = v124;
    operator delete(v124);
  }
  if (v51) {
    operator delete(v51);
  }
  if (v129)
  {
    uint64_t v130 = v129;
    operator delete(v129);
  }
  if (v30) {
    operator delete(v30);
  }

  return v4;
}

void sub_25B4E568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v29 = v27;

  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }

  if (a15) {
    operator delete(a15);
  }
  if (v25) {
    operator delete(v25);
  }
  if (a21) {
    operator delete(a21);
  }
  if (v24) {
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

id RSKeyframeFromDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [RSKeyframeExtended alloc];
  uint64_t v4 = objc_msgSend_initWithDictionary_(v2, v3, (uint64_t)v1);

  return v4;
}

void sub_25B4E57E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id RSKeyframeSequenceToDictionary(void *a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x263EFF9A0];
  uint64_t v5 = objc_msgSend_count(v1, v3, v4);
  uint64_t v7 = objc_msgSend_dictionaryWithCapacity_(v2, v6, v5);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v10 = objc_msgSend_allKeys(v1, v8, v9, 0);
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v24, v28, 16);
  if (v13)
  {
    uint64_t v14 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v25 != v14) {
          objc_enumerationMutation(v10);
        }
        long long v16 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        long long v17 = objc_msgSend_objectForKeyedSubscript_(v1, v12, (uint64_t)v16);
        long long v18 = RSKeyframeToDictionary(v17);
        long long v21 = objc_msgSend_UUIDString(v16, v19, v20);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v22, (uint64_t)v18, v21);
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v24, v28, 16);
    }
    while (v13);
  }

  return v7;
}

void sub_25B4E5980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id RSKeyframeSequenceFromDictionary(void *a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x263EFF9A0];
  uint64_t v5 = objc_msgSend_count(v1, v3, v4);
  uint64_t v29 = objc_msgSend_dictionaryWithCapacity_(v2, v6, v5);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  objc_msgSend_allKeys(v1, v7, v8);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v31, v35, 16);
  if (v10)
  {
    uint64_t v11 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        id v14 = objc_alloc(MEMORY[0x263F08C38]);
        long long v16 = objc_msgSend_initWithUUIDString_(v14, v15, v13);
        long long v17 = [RSKeyframeExtended alloc];
        uint64_t v19 = objc_msgSend_objectForKeyedSubscript_(v1, v18, v13);
        long long v21 = objc_msgSend_initWithDictionary_(v17, v20, (uint64_t)v19);

        if (v16) {
          BOOL v23 = v21 == 0;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23) {
          objc_msgSend_setObject_forKeyedSubscript_(v29, v22, (uint64_t)v21, v16);
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v24, (uint64_t)&v31, v35, 16);
    }
    while (v10);
  }

  long long v27 = objc_msgSend_copy(v29, v25, v26);

  return v27;
}

void sub_25B4E5BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id RSKeyframeSequenceFromDictionaryWithId(void *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = (void *)MEMORY[0x263EFF9A0];
  id v33 = v3;
  uint64_t v7 = objc_msgSend_count(v3, v5, v6);
  long long v31 = objc_msgSend_dictionaryWithCapacity_(v4, v8, v7);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  objc_msgSend_allKeys(v33, v9, v10);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v34, v38, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v35 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v34 + 1) + 8 * i);
        id v16 = objc_alloc(MEMORY[0x263F08C38]);
        long long v18 = objc_msgSend_initWithUUIDString_(v16, v17, v15);
        uint64_t v19 = [RSKeyframeExtended alloc];
        long long v21 = objc_msgSend_objectForKeyedSubscript_(v33, v20, v15);
        BOOL v23 = objc_msgSend_initWithDictionary_withGroupId_(v19, v22, (uint64_t)v21, a2);

        if (v18) {
          BOOL v25 = v23 == 0;
        }
        else {
          BOOL v25 = 1;
        }
        if (!v25) {
          objc_msgSend_setObject_forKeyedSubscript_(v31, v24, (uint64_t)v23, v18);
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v26, (uint64_t)&v34, v38, 16);
    }
    while (v12);
  }

  uint64_t v29 = objc_msgSend_copy(v31, v27, v28);

  return v29;
}

void sub_25B4E5DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_25B4E6570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E664C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_25B4E665C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_25B4E666C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_25B4E667C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_25B4E668C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 104), a2);
  }
}

void sub_25B4E669C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

void sub_25B4E66AC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_25B4E66BC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_25B4E6730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E67B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25B4E6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25B4E6B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E6BB0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v4 = objc_msgSend_walls((void *)a1, a2, a3);
    uint64_t v7 = objc_msgSend_count(v4, v5, v6);

    if (!v7) {
      *(void *)(a1 + 12) = 0xBFC000003F99999ALL;
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v10 = objc_msgSend_walls((void *)a1, v8, v9);
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v27, v31, 16);
    if (v14)
    {
      uint64_t v15 = *(void *)v28;
      float v16 = -3.4028e38;
      float v17 = 3.4028e38;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v28 != v15) {
            objc_enumerationMutation(v10);
          }
          uint64_t v19 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          objc_msgSend_quad(v19, v12, v13);
          float v26 = v20;
          objc_msgSend_quad(v19, v21, v22);
          float v24 = v26;
          if (v26 >= v23) {
            float v25 = v26;
          }
          else {
            float v25 = v23;
          }
          if (v26 >= v23) {
            float v24 = v23;
          }
          if (v25 > v16) {
            float v16 = v25;
          }
          if (v24 < v17) {
            float v17 = v24;
          }
        }
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v27, v31, 16);
      }
      while (v14);
    }
    else
    {
      float v16 = -3.4028e38;
      float v17 = 3.4028e38;
    }

    *(float *)(a1 + 12) = v16;
    *(float *)(a1 + 16) = v17;
  }
}

void sub_25B4E6D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E6E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E705C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E7204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E7694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_25B4E77AC(void *a1, char a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v6 = v3;
  if (v3 && objc_msgSend_count(v3, v4, v5))
  {
    uint64_t v9 = (void *)MEMORY[0x263EFF980];
    uint64_t v10 = objc_msgSend_count(v6, v7, v8);
    uint64_t v12 = objc_msgSend_arrayWithCapacity_(v9, v11, v10);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v13 = v6;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v27, v31, 16);
    if (v17)
    {
      uint64_t v18 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v28 != v18) {
            objc_enumerationMutation(v13);
          }
          float v20 = *(unsigned char **)(*((void *)&v27 + 1) + 8 * i);
          if (v20) {
            v20[104] = a2;
          }
          long long v21 = objc_msgSend_dictionaryRepresentation(v20, v15, v16, (void)v27);
          objc_msgSend_addObject_(v12, v22, (uint64_t)v21);
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v27, v31, 16);
      }
      while (v17);
    }

    float v25 = objc_msgSend_copy(v12, v23, v24);
  }
  else
  {
    float v25 = (void *)MEMORY[0x263EFFA68];
  }

  return v25;
}

void sub_25B4E7938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4E7980(void *a1, char a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v6 = v3;
  if (v3 && objc_msgSend_count(v3, v4, v5))
  {
    uint64_t v9 = (void *)MEMORY[0x263EFF980];
    uint64_t v10 = objc_msgSend_count(v6, v7, v8);
    uint64_t v12 = objc_msgSend_arrayWithCapacity_(v9, v11, v10);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v13 = v6;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v27, v31, 16);
    if (v17)
    {
      uint64_t v18 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v28 != v18) {
            objc_enumerationMutation(v13);
          }
          float v20 = *(unsigned char **)(*((void *)&v27 + 1) + 8 * i);
          if (v20) {
            v20[104] = a2;
          }
          long long v21 = objc_msgSend_dictionaryRepresentation(v20, v15, v16, (void)v27);
          objc_msgSend_addObject_(v12, v22, (uint64_t)v21);
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v27, v31, 16);
      }
      while (v17);
    }

    float v25 = objc_msgSend_copy(v12, v23, v24);
  }
  else
  {
    float v25 = (void *)MEMORY[0x263EFFA68];
  }

  return v25;
}

void sub_25B4E7B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B4E7B60(void *a1, void *a2, uint64_t a3)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  id v116 = a2;
  if (a1)
  {
    v118.receiver = a1;
    v118.super_class = (Class)RSFloorPlan;
    long long v117 = objc_msgSendSuper2(&v118, sel_init);
    objc_msgSend_objectForKeyedSubscript_(v116, v5, @"walls");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }

    uint64_t v8 = sub_25B4E85B8(v7, 0, a3);
    uint64_t v9 = (void *)v117[3];
    v117[3] = v8;

    objc_msgSend_objectForKeyedSubscript_(v116, v10, @"doors");
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v12 = v11;
    }
    else {
      id v12 = 0;
    }

    uint64_t v13 = sub_25B4E85B8(v12, 2, a3);
    uint64_t v14 = (void *)v117[4];
    v117[4] = v13;

    objc_msgSend_objectForKeyedSubscript_(v116, v15, @"windows");
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v17 = v16;
    }
    else {
      id v17 = 0;
    }

    uint64_t v18 = sub_25B4E85B8(v17, 1, a3);
    uint64_t v19 = (void *)v117[5];
    v117[5] = v18;

    objc_msgSend_objectForKeyedSubscript_(v116, v20, @"openings");
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = v21;
    }
    else {
      id v22 = 0;
    }

    uint64_t v23 = sub_25B4E85B8(v22, 3, a3);
    uint64_t v24 = (void *)v117[6];
    v117[6] = v23;

    objc_msgSend_objectForKeyedSubscript_(v116, v25, @"open_doors");
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v27 = v26;
    }
    else {
      id v27 = 0;
    }

    uint64_t v28 = sub_25B4E85B8(v27, 4, a3);
    long long v29 = (void *)v117[7];
    v117[7] = v28;

    objc_msgSend_objectForKeyedSubscript_(v116, v30, @"objects");
    id v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v32 = v31;
    }
    else {
      id v32 = 0;
    }

    id v33 = v32;
    uint64_t v115 = v33;
    if (v33 && (long long v36 = v33, objc_msgSend_count(v33, v34, v35)))
    {
      uint64_t v39 = (void *)MEMORY[0x263EFF980];
      uint64_t v40 = objc_msgSend_count(v36, v37, v38);
      uint64_t v42 = objc_msgSend_arrayWithCapacity_(v39, v41, v40);
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      id v43 = v36;
      uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v43, v44, (uint64_t)&v119, v123, 16);
      if (v45)
      {
        uint64_t v46 = *(void *)v120;
        do
        {
          uint64_t v47 = 0;
          do
          {
            if (*(void *)v120 != v46) {
              objc_enumerationMutation(v43);
            }
            uint64_t v48 = *(void *)(*((void *)&v119 + 1) + 8 * v47);
            uint64_t v49 = [RS3DObject alloc];
            id v51 = objc_msgSend_initWithDictionaryRepresentation_(v49, v50, v48);

            sub_25B477A04((uint64_t)v51, a3, @"FloorPlan");
            if (v51) {
              objc_msgSend_addObject_(v42, v52, (uint64_t)v51);
            }

            ++v47;
          }
          while (v45 != v47);
          uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v43, v53, (uint64_t)&v119, v123, 16);
        }
        while (v45);
      }

      uint64_t v56 = objc_msgSend_copy(v42, v54, v55);
    }
    else
    {
      uint64_t v56 = MEMORY[0x263EFFA68];
    }

    id v57 = (void *)v117[8];
    v117[8] = v56;

    objc_msgSend_objectForKeyedSubscript_(v116, v58, @"curved_walls");
    id v59 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v60 = v59;
    }
    else {
      id v60 = 0;
    }

    uint64_t v61 = sub_25B4E87BC(v60, 0, a3);
    uint64_t v62 = (void *)v117[9];
    v117[9] = v61;

    objc_msgSend_objectForKeyedSubscript_(v116, v63, @"room_types");
    id v64 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v65 = v64;
    }
    else {
      id v65 = 0;
    }

    id v66 = v65;
    uint64_t v69 = v66;
    if (v66 && objc_msgSend_count(v66, v67, v68))
    {
      uint64_t v72 = (void *)MEMORY[0x263EFF980];
      uint64_t v73 = objc_msgSend_count(v69, v70, v71);
      uint64_t v75 = objc_msgSend_arrayWithCapacity_(v72, v74, v73);
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      id v76 = v69;
      uint64_t v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v77, (uint64_t)&v119, v123, 16);
      if (v78)
      {
        uint64_t v79 = *(void *)v120;
        do
        {
          uint64_t v80 = 0;
          do
          {
            if (*(void *)v120 != v79) {
              objc_enumerationMutation(v76);
            }
            uint64_t v81 = *(void *)(*((void *)&v119 + 1) + 8 * v80);
            uint64_t v82 = [RSRoomType alloc];
            float v85 = objc_msgSend_initWithDictionaryRepresentation_withGroupId_(v82, v83, v81, 0);
            if (v85) {
              objc_msgSend_addObject_(v75, v84, (uint64_t)v85);
            }

            ++v80;
          }
          while (v78 != v80);
          uint64_t v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v86, (uint64_t)&v119, v123, 16);
        }
        while (v78);
      }

      uint64_t v89 = objc_msgSend_copy(v75, v87, v88);
    }
    else
    {
      uint64_t v89 = MEMORY[0x263EFFA68];
    }

    uint64_t v90 = (void *)v117[10];
    v117[10] = v89;

    objc_msgSend_objectForKeyedSubscript_(v116, v91, @"floors");
    id v92 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v93 = v92;
    }
    else {
      id v93 = 0;
    }

    uint64_t v94 = sub_25B4E85B8(v93, 5, a3);
    uint64_t v95 = (void *)v117[11];
    v117[11] = v94;

    objc_msgSend_objectForKeyedSubscript_(v116, v96, @"curved_windows");
    id v97 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v98 = v97;
    }
    else {
      id v98 = 0;
    }

    uint64_t v99 = sub_25B4E87BC(v98, 1, a3);
    uint64_t v100 = (void *)v117[12];
    v117[12] = v99;

    objc_msgSend_objectForKeyedSubscript_(v116, v101, @"curved_doors");
    id v102 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v103 = v102;
    }
    else {
      id v103 = 0;
    }

    uint64_t v104 = sub_25B4E87BC(v103, 2, a3);
    unint64_t v105 = (void *)v117[13];
    v117[13] = v104;

    sub_25B4E6BB0((uint64_t)v117, v106, v107);
    *((_DWORD *)v117 + 2) = a3;
    uint64_t v109 = objc_msgSend_objectForKeyedSubscript_(v116, v108, @"story");
    uint64_t v112 = (const char *)objc_msgSend_integerValue(v109, v110, v111);
    sub_25B4E89C0(v117, v112, v113);
  }
  else
  {
    long long v117 = 0;
  }

  return v117;
}

void sub_25B4E83A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_25B4E85B8(void *a1, char a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v5 = a1;
  long long v29 = v5;
  if (v5 && objc_msgSend_count(v5, v6, v7))
  {
    uint64_t v10 = (void *)MEMORY[0x263EFF980];
    uint64_t v11 = objc_msgSend_count(v29, v8, v9);
    uint64_t v13 = objc_msgSend_arrayWithCapacity_(v10, v12, v11);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v14 = v29;
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v30, v34, 16);
    if (v16)
    {
      uint64_t v17 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          float v20 = [RS3DSurface alloc];
          id v22 = (unsigned char *)objc_msgSend_initWithDictionaryRepresentation_WithGroupId_(v20, v21, v19, a3);

          if (v22)
          {
            v22[104] = a2;
            objc_msgSend_addObject_(v13, v23, (uint64_t)v22);
          }
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v24, (uint64_t)&v30, v34, 16);
      }
      while (v16);
    }

    id v27 = objc_msgSend_copy(v13, v25, v26);
  }
  else
  {
    id v27 = (void *)MEMORY[0x263EFFA68];
  }

  return v27;
}

void sub_25B4E876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_25B4E87BC(void *a1, char a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v5 = a1;
  long long v29 = v5;
  if (v5 && objc_msgSend_count(v5, v6, v7))
  {
    uint64_t v10 = (void *)MEMORY[0x263EFF980];
    uint64_t v11 = objc_msgSend_count(v29, v8, v9);
    uint64_t v13 = objc_msgSend_arrayWithCapacity_(v10, v12, v11);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v14 = v29;
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v30, v34, 16);
    if (v16)
    {
      uint64_t v17 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          float v20 = [RS3DCurvedSurface alloc];
          id v22 = (unsigned char *)objc_msgSend_initWithDictionaryRepresentation_WithGroupId_(v20, v21, v19, a3);

          if (v22)
          {
            v22[104] = a2;
            objc_msgSend_addObject_(v13, v23, (uint64_t)v22);
          }
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v24, (uint64_t)&v30, v34, 16);
      }
      while (v16);
    }

    id v27 = objc_msgSend_copy(v13, v25, v26);
  }
  else
  {
    id v27 = (void *)MEMORY[0x263EFFA68];
  }

  return v27;
}

void sub_25B4E8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E89C0(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  if (a1)
  {
    a1[15] = a2;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    id v5 = objc_msgSend_walls(a1, a2, a3);
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v142, v156, 16);
    if (v8)
    {
      uint64_t v9 = *(void *)v143;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v143 != v9) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void *)(*((void *)&v142 + 1) + 8 * v10);
          if (v11) {
            *(void *)(v11 + 184) = a2;
          }
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v142, v156, 16);
      }
      while (v8);
    }

    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    id v14 = objc_msgSend_windows(a1, v12, v13);
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v138, v155, 16);
    if (v17)
    {
      uint64_t v18 = *(void *)v139;
      do
      {
        uint64_t v19 = 0;
        do
        {
          if (*(void *)v139 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = *(void *)(*((void *)&v138 + 1) + 8 * v19);
          if (v20) {
            *(void *)(v20 + 184) = a2;
          }
          ++v19;
        }
        while (v17 != v19);
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v16, (uint64_t)&v138, v155, 16);
      }
      while (v17);
    }

    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    uint64_t v23 = objc_msgSend_doors(a1, v21, v22);
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v134, v154, 16);
    if (v26)
    {
      uint64_t v27 = *(void *)v135;
      do
      {
        uint64_t v28 = 0;
        do
        {
          if (*(void *)v135 != v27) {
            objc_enumerationMutation(v23);
          }
          uint64_t v29 = *(void *)(*((void *)&v134 + 1) + 8 * v28);
          if (v29) {
            *(void *)(v29 + 184) = a2;
          }
          ++v28;
        }
        while (v26 != v28);
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v25, (uint64_t)&v134, v154, 16);
      }
      while (v26);
    }

    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v32 = objc_msgSend_opendoors(a1, v30, v31);
    uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v130, v153, 16);
    if (v35)
    {
      uint64_t v36 = *(void *)v131;
      do
      {
        uint64_t v37 = 0;
        do
        {
          if (*(void *)v131 != v36) {
            objc_enumerationMutation(v32);
          }
          uint64_t v38 = *(void *)(*((void *)&v130 + 1) + 8 * v37);
          if (v38) {
            *(void *)(v38 + 184) = a2;
          }
          ++v37;
        }
        while (v35 != v37);
        uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v34, (uint64_t)&v130, v153, 16);
      }
      while (v35);
    }

    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    id v41 = objc_msgSend_openings(a1, v39, v40);
    uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v126, v152, 16);
    if (v44)
    {
      uint64_t v45 = *(void *)v127;
      do
      {
        uint64_t v46 = 0;
        do
        {
          if (*(void *)v127 != v45) {
            objc_enumerationMutation(v41);
          }
          uint64_t v47 = *(void *)(*((void *)&v126 + 1) + 8 * v46);
          if (v47) {
            *(void *)(v47 + 184) = a2;
          }
          ++v46;
        }
        while (v44 != v46);
        uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v43, (uint64_t)&v126, v152, 16);
      }
      while (v44);
    }

    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    uint64_t v50 = objc_msgSend_objects(a1, v48, v49);
    uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v122, v151, 16);
    if (v53)
    {
      uint64_t v54 = *(void *)v123;
      do
      {
        uint64_t v55 = 0;
        do
        {
          if (*(void *)v123 != v54) {
            objc_enumerationMutation(v50);
          }
          uint64_t v56 = *(void *)(*((void *)&v122 + 1) + 8 * v55);
          if (v56) {
            *(void *)(v56 + 112) = a2;
          }
          ++v55;
        }
        while (v53 != v55);
        uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v52, (uint64_t)&v122, v151, 16);
      }
      while (v53);
    }

    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    id v59 = objc_msgSend_floors(a1, v57, v58);
    uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v60, (uint64_t)&v118, v150, 16);
    if (v62)
    {
      uint64_t v63 = *(void *)v119;
      do
      {
        uint64_t v64 = 0;
        do
        {
          if (*(void *)v119 != v63) {
            objc_enumerationMutation(v59);
          }
          uint64_t v65 = *(void *)(*((void *)&v118 + 1) + 8 * v64);
          if (v65) {
            *(void *)(v65 + 184) = a2;
          }
          ++v64;
        }
        while (v62 != v64);
        uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v59, v61, (uint64_t)&v118, v150, 16);
      }
      while (v62);
    }

    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    uint64_t v68 = objc_msgSend_roomTypes(a1, v66, v67);
    uint64_t v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v114, v149, 16);
    if (v71)
    {
      uint64_t v72 = *(void *)v115;
      do
      {
        uint64_t v73 = 0;
        do
        {
          if (*(void *)v115 != v72) {
            objc_enumerationMutation(v68);
          }
          uint64_t v74 = *(void *)(*((void *)&v114 + 1) + 8 * v73);
          if (v74) {
            *(void *)(v74 + 32) = a2;
          }
          ++v73;
        }
        while (v71 != v73);
        uint64_t v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v70, (uint64_t)&v114, v149, 16);
      }
      while (v71);
    }

    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    uint64_t v77 = objc_msgSend_curvedWalls(a1, v75, v76);
    uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v78, (uint64_t)&v110, v148, 16);
    if (v80)
    {
      uint64_t v81 = *(void *)v111;
      do
      {
        uint64_t v82 = 0;
        do
        {
          if (*(void *)v111 != v81) {
            objc_enumerationMutation(v77);
          }
          uint64_t v83 = *(void *)(*((void *)&v110 + 1) + 8 * v82);
          if (v83) {
            *(void *)(v83 + 184) = a2;
          }
          ++v82;
        }
        while (v80 != v82);
        uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v79, (uint64_t)&v110, v148, 16);
      }
      while (v80);
    }

    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v86 = objc_msgSend_curvedWindows(a1, v84, v85);
    uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v87, (uint64_t)&v106, v147, 16);
    if (v89)
    {
      uint64_t v90 = *(void *)v107;
      do
      {
        uint64_t v91 = 0;
        do
        {
          if (*(void *)v107 != v90) {
            objc_enumerationMutation(v86);
          }
          uint64_t v92 = *(void *)(*((void *)&v106 + 1) + 8 * v91);
          if (v92) {
            *(void *)(v92 + 184) = a2;
          }
          ++v91;
        }
        while (v89 != v91);
        uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v88, (uint64_t)&v106, v147, 16);
      }
      while (v89);
    }

    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    uint64_t v95 = objc_msgSend_curvedDoors(a1, v93, v94, 0);
    uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v95, v96, (uint64_t)&v102, v146, 16);
    if (v98)
    {
      uint64_t v99 = *(void *)v103;
      do
      {
        uint64_t v100 = 0;
        do
        {
          if (*(void *)v103 != v99) {
            objc_enumerationMutation(v95);
          }
          uint64_t v101 = *(void *)(*((void *)&v102 + 1) + 8 * v100);
          if (v101) {
            *(void *)(v101 + 184) = a2;
          }
          ++v100;
        }
        while (v98 != v100);
        uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v95, v97, (uint64_t)&v102, v146, 16);
      }
      while (v98);
    }
  }
}

void sub_25B4E9090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E92C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E92DC(uint64_t a1, void *a2)
{
  id v10 = a2;
  for (unint64_t i = 0; objc_msgSend_count(v10, v3, v4) > i; ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v10, v6, i);
    uint64_t v7 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      int v9 = *(_DWORD *)(a1 + 12);
      int v8 = *(_DWORD *)(a1 + 16);
      v7[70] = v9;
      v7[74] = v9;
      v7[78] = v8;
      v7[82] = v8;
    }
  }
}

void sub_25B4E9368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t sub_25B4E937C(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_25B4E92DC(result, *(void **)(result + 24));
    sub_25B4E92DC(v1, *(void **)(v1 + 72));
    float v2 = *(float *)(v1 + 16);
    if ((float)(v2 + 1.0) >= (float)(*(float *)(v1 + 12) + -0.3)) {
      float v3 = v2 + 1.0;
    }
    else {
      float v3 = *(float *)(v1 + 12) + -0.3;
    }
    id v6 = *(id *)(v1 + 48);
    for (unint64_t i = 0; objc_msgSend_count(v6, v4, v5) > i; ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(v6, v8, i);
      int v9 = (float *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v9[70] = v3;
        v9[74] = v3;
        v9[78] = v2;
        v9[82] = v2;
      }
    }
    if (objc_msgSend_count(*(void **)(v1 + 40), v10, v11))
    {
      unint64_t v14 = 0;
      do
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 40), v12, v14);
        uint64_t v15 = (float *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_quad(v15, v16, v17);
        float v56 = v18;
        float v19 = *(float *)(v1 + 12);
        objc_msgSend_quad(v15, v20, v21);
        if (v15)
        {
          float v23 = *(float *)(v1 + 16);
          if (v23 < v22) {
            float v23 = v22;
          }
          float v24 = v56;
          if (v56 >= v19) {
            float v24 = v19;
          }
          v15[70] = v24;
          v15[74] = v24;
          v15[78] = v23;
          v15[82] = v23;
        }

        ++v14;
      }
      while (objc_msgSend_count(*(void **)(v1 + 40), v25, v26) > v14);
    }
    if (objc_msgSend_count(*(void **)(v1 + 32), v12, v13))
    {
      unint64_t v29 = 0;
      do
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 32), v27, v29);
        long long v30 = (float *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_quad(v30, v31, v32);
        float v57 = v33;
        float v34 = *(float *)(v1 + 12);
        objc_msgSend_quad(v30, v35, v36);
        if (v30)
        {
          float v38 = *(float *)(v1 + 16);
          if (v38 < v37) {
            float v38 = v37;
          }
          float v39 = v57;
          if (v57 >= v34) {
            float v39 = v34;
          }
          v30[70] = v39;
          v30[74] = v39;
          v30[78] = v38;
          v30[82] = v38;
        }

        ++v29;
      }
      while (objc_msgSend_count(*(void **)(v1 + 32), v40, v41) > v29);
    }
    uint64_t result = objc_msgSend_count(*(void **)(v1 + 56), v27, v28);
    if (result)
    {
      for (unint64_t j = 0; j < result; ++j)
      {
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 56), v42, j);
        uint64_t v44 = (float *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_quad(v44, v45, v46);
        float v58 = v47;
        float v48 = *(float *)(v1 + 12);
        objc_msgSend_quad(v44, v49, v50);
        if (v44)
        {
          float v52 = *(float *)(v1 + 16);
          if (v52 < v51) {
            float v52 = v51;
          }
          float v53 = v58;
          if (v58 >= v48) {
            float v53 = v48;
          }
          v44[70] = v53;
          v44[74] = v53;
          v44[78] = v52;
          v44[82] = v52;
        }

        uint64_t result = objc_msgSend_count(*(void **)(v1 + 56), v54, v55);
      }
    }
  }
  return result;
}

void sub_25B4E95CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4E95F4(void *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v4 = objc_msgSend_array(MEMORY[0x263EFF980], v2, v3);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v5 = v1;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v28, v32, 16);
  if (v9)
  {
    uint64_t v10 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v5);
        }
        id v12 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        objc_msgSend_quad(v12, v7, v8);
        float32x4_t v27 = v13;
        objc_msgSend_quad(v12, v14, v15);
        float32x4_t v26 = v16;
        objc_msgSend_quad(v12, v17, v18);
        float32x4_t v25 = v19;
        objc_msgSend_quad(v12, v20, v21);
        float32x4_t v22 = vsubq_f32(v27, v26);
        if ((float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v22, v22)))
                   * fabsf(COERCE_FLOAT(vsubq_f32(v25, v23).i32[2]))) >= 0.00001)
          objc_msgSend_addObject_(v4, v7, (uint64_t)v12);
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v28, v32, 16);
    }
    while (v9);
  }

  return v4;
}

void sub_25B4E9790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E97D4(void **a1)
{
  if (a1)
  {
    uint64_t v2 = sub_25B4E95F4(a1[3]);
    uint64_t v3 = a1[3];
    a1[3] = (void *)v2;

    uint64_t v4 = sub_25B4E95F4(a1[5]);
    id v5 = a1[5];
    a1[5] = (void *)v4;

    uint64_t v6 = sub_25B4E95F4(a1[4]);
    uint64_t v7 = a1[4];
    a1[4] = (void *)v6;

    uint64_t v8 = sub_25B4E95F4(a1[6]);
    uint64_t v9 = a1[6];
    a1[6] = (void *)v8;

    uint64_t v10 = sub_25B4E95F4(a1[7]);
    uint64_t v11 = a1[7];
    a1[7] = (void *)v10;

    uint64_t v12 = sub_25B4E95F4(a1[9]);
    float32x4_t v13 = a1[9];
    a1[9] = (void *)v12;

    uint64_t v14 = sub_25B4E95F4(a1[12]);
    uint64_t v15 = a1[12];
    a1[12] = (void *)v14;

    uint64_t v16 = sub_25B4E95F4(a1[13]);
    uint64_t v17 = a1[13];
    a1[13] = (void *)v16;
  }
}

id sub_25B4E98C8(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  uint64_t v7 = objc_msgSend_array(MEMORY[0x263EFF980], v5, v6);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v8 = v3;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v21, v25, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v8);
        }
        uint64_t v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v16 = objc_msgSend_parentIdentifier(v15, v10, v11);
        if (v16)
        {
          uint64_t v17 = objc_msgSend_parentIdentifier(v15, v10, v11);
          char v19 = objc_msgSend_containsObject_(v4, v18, (uint64_t)v17);

          if (v19) {
            objc_msgSend_addObject_(v7, v10, (uint64_t)v15);
          }
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v21, v25, 16);
    }
    while (v12);
  }

  return v7;
}

void sub_25B4E9A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4E9AA0(id *a1, const char *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a1)
  {
    id v4 = objc_msgSend_set(MEMORY[0x263EFF9C0], a2, a3);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v5 = a1[3];
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v39, v44, 16);
    if (v9)
    {
      uint64_t v10 = *(void *)v40;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v40 != v10) {
            objc_enumerationMutation(v5);
          }
          uint64_t v12 = objc_msgSend_identifier(*(void **)(*((void *)&v39 + 1) + 8 * v11), v7, v8);
          objc_msgSend_addObject_(v4, v13, (uint64_t)v12);

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v39, v44, 16);
      }
      while (v9);
    }

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v14 = a1[9];
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v35, v43, 16);
    if (v18)
    {
      uint64_t v19 = *(void *)v36;
      do
      {
        uint64_t v20 = 0;
        do
        {
          if (*(void *)v36 != v19) {
            objc_enumerationMutation(v14);
          }
          long long v21 = objc_msgSend_identifier(*(void **)(*((void *)&v35 + 1) + 8 * v20), v16, v17, (void)v35);
          objc_msgSend_addObject_(v4, v22, (uint64_t)v21);

          ++v20;
        }
        while (v18 != v20);
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v16, (uint64_t)&v35, v43, 16);
      }
      while (v18);
    }

    uint64_t v23 = sub_25B4E98C8(a1[5], v4);
    id v24 = a1[5];
    a1[5] = (id)v23;

    uint64_t v25 = sub_25B4E98C8(a1[4], v4);
    id v26 = a1[4];
    a1[4] = (id)v25;

    uint64_t v27 = sub_25B4E98C8(a1[6], v4);
    id v28 = a1[6];
    a1[6] = (id)v27;

    uint64_t v29 = sub_25B4E98C8(a1[7], v4);
    id v30 = a1[7];
    a1[7] = (id)v29;

    uint64_t v31 = sub_25B4E98C8(a1[12], v4);
    id v32 = a1[12];
    a1[12] = (id)v31;

    uint64_t v33 = sub_25B4E98C8(a1[13], v4);
    id v34 = a1[13];
    a1[13] = (id)v33;
  }
}

void sub_25B4E9D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E9D70(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a1)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v1 = *(id *)(a1 + 24);
    uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v19, v23, 16);
    if (v5)
    {
      uint64_t v6 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v20 != v6) {
            objc_enumerationMutation(v1);
          }
          uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          int v9 = objc_msgSend_polygonSize(v8, v3, v4);
          if (v9 >= 3)
          {
            uint64_t v10 = 0;
            uint64_t v11 = (v9 - 2);
            float v12 = 3.4028e38;
            float v13 = -3.4028e38;
            do
            {
              long long v18 = *(_OWORD *)(objc_msgSend_polygon(v8, v3, v4) + v10);
              uint64_t v16 = objc_msgSend_polygon(v8, v14, v15);
              if (v13 < *((float *)&v18 + 2)) {
                float v13 = *((float *)&v18 + 2);
              }
              if (*(float *)(v16 + v10 + 8) < v12) {
                float v12 = *(float *)(v16 + v10 + 8);
              }
              v10 += 16;
              --v11;
            }
            while (v11);
            if (vabds_f32(v13, v12) < 0.001 && v8 != 0)
            {
              v8[2] = v8[1];
              v8[11] = v8[10];
              v8[5] = v8[4];
              v8[8] = v8[7];
            }
          }
        }
        uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v3, (uint64_t)&v19, v23, 16);
      }
      while (v5);
    }
  }
}

void sub_25B4E9F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4E9F44(void **a1)
{
  if (a1)
  {
    uint64_t v2 = sub_25B4EA01C(a1[6], a1[3]);
    id v3 = a1[6];
    a1[6] = (void *)v2;

    uint64_t v4 = sub_25B4EA01C(a1[5], a1[3]);
    uint64_t v5 = a1[5];
    a1[5] = (void *)v4;

    uint64_t v6 = sub_25B4EA01C(a1[4], a1[3]);
    uint64_t v7 = a1[4];
    a1[4] = (void *)v6;

    uint64_t v8 = sub_25B4EA01C(a1[7], a1[3]);
    int v9 = a1[7];
    a1[7] = (void *)v8;

    uint64_t v10 = sub_25B4EA01C(a1[12], a1[9]);
    uint64_t v11 = a1[12];
    a1[12] = (void *)v10;

    uint64_t v12 = sub_25B4EA01C(a1[13], a1[9]);
    float v13 = a1[13];
    a1[13] = (void *)v12;
  }
}

id sub_25B4EA01C(void *a1, void *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v48 = a2;
  objc_msgSend_array(MEMORY[0x263EFF980], v4, v5, v3);
  id v45 = (id)objc_claimAutoreleasedReturnValue();
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id obj = v3;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v57, v62, 16);
  if (v7)
  {
    uint64_t v47 = *(void *)v58;
    do
    {
      uint64_t v49 = v7;
      for (uint64_t i = 0; i != v49; ++i)
      {
        if (*(void *)v58 != v47) {
          objc_enumerationMutation(obj);
        }
        int v9 = *(float **)(*((void *)&v57 + 1) + 8 * i);
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        id v10 = v48;
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v53, v61, 16);
        if (v14)
        {
          uint64_t v15 = *(void *)v54;
          while (2)
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v54 != v15) {
                objc_enumerationMutation(v10);
              }
              uint64_t v17 = *(void **)(*((void *)&v53 + 1) + 8 * j);
              long long v18 = objc_msgSend_parentIdentifier(v9, v12, v13);
              long long v21 = objc_msgSend_identifier(v17, v19, v20);
              char isEqual = objc_msgSend_isEqual_(v18, v22, (uint64_t)v21);

              if (isEqual)
              {
                objc_msgSend_quad(v17, v12, v13);
                float v51 = v24;
                objc_msgSend_quad(v9, v25, v26);
                if (v29 >= (float)(v51 + -0.03)) {
                  float v30 = v51 + -0.03;
                }
                else {
                  float v30 = v29;
                }
                objc_msgSend_quad(v17, v27, v28);
                float v52 = v31;
                objc_msgSend_quad(v9, v32, v33);
                if (v9)
                {
                  float v37 = v52;
                  v9[70] = v30;
                  v9[74] = v30;
                  if (v52 < v36) {
                    float v37 = v36;
                  }
                  v9[78] = v37;
                  v9[82] = v37;
                }
                objc_msgSend_quad(v9, v34, v35);
                float32x4_t v50 = v38;
                objc_msgSend_quad(v9, v39, v40);
                if (vmovn_s32(vcgtq_f32(v50, v42)).i32[1]) {
                  objc_msgSend_addObject_(v45, v41, (uint64_t)v9);
                }
                goto LABEL_24;
              }
            }
            uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v53, v61, 16);
            if (v14) {
              continue;
            }
            break;
          }
        }
LABEL_24:
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v43, (uint64_t)&v57, v62, 16);
    }
    while (v7);
  }

  return v45;
}

void sub_25B4EA2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_25B4EA368(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  uint64_t v7 = objc_msgSend_array(MEMORY[0x263EFF980], v5, v6);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = v4;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v20, v24, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v8);
        }
        uint64_t v15 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v16 = objc_msgSend_parentIdentifier(v15, v10, v11, (void)v20);
        int isEqual = objc_msgSend_isEqual_(v16, v17, (uint64_t)v3);

        if (isEqual) {
          objc_msgSend_addObject_(v7, v10, (uint64_t)v15);
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v20, v24, 16);
    }
    while (v12);
  }

  return v7;
}

void sub_25B4EA4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4EA510(void *a1, void *a2, void *a3)
{
  uint64_t v352 = *MEMORY[0x263EF8340];
  id v311 = a1;
  id v312 = a2;
  id v315 = a3;
  unint64_t v7 = objc_msgSend_count(v315, v5, v6);
  unint64_t v10 = v7;
  long long v321 = 0;
  long long v322 = 0;
  long long v323 = 0;
  v335.i64[0] = (uint64_t)&v321;
  v335.i8[8] = 0;
  if (v7)
  {
    if (v7 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = v7;
    uint64_t v12 = (id *)operator new(8 * v7);
    long long v321 = v12;
    long long v323 = (char *)&v12[v10];
    bzero(v12, 8 * v10);
    long long v322 = &v12[v11];
  }
  for (unint64_t i = 0; objc_msgSend_count(v315, v8, v9) > i; ++i)
  {
    uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(v315, v14, i);
    id v16 = v321[i];
    v321[i] = (id)v15;
  }
  uint64_t v17 = @"lshaped";
  if (v321 == v322)
  {
    __p = 0;
    uint64_t v44 = 0;
    goto LABEL_79;
  }
  sub_25B443228(v343, v322 - v321);
  long long v18 = v321;
  long long v19 = v322;
  if (v321 != v322)
  {
    long long v20 = *(float **)v343;
    do
    {
      id v21 = *v18;
      float v25 = 0.0;
      if (objc_msgSend_hasBoxesDict_(v21, v22, @"lshaped"))
      {
        uint64_t v26 = objc_msgSend_boxesDict(v21, v23, v24);
        uint64_t v28 = objc_msgSend_objectForKeyedSubscript_(v26, v27, @"lshaped");
        sub_25B445344((uint64_t)&v335, v28);
        float v25 = sub_25B443CA8(&v335);
      }
      float v31 = objc_msgSend_parts(v21, v23, v24);
      if (v31)
      {
        id v32 = objc_msgSend_parts(v21, v29, v30);
        BOOL v35 = objc_msgSend_count(v32, v33, v34) == 0;

        if (!v35) {
          float v25 = v25 + v25;
        }
      }

      *v20++ = v25;
      ++v18;
    }
    while (v18 != v19);
  }
  sub_25B444638(&v325, (uint64_t)(*(void *)&v343[8] - *(void *)v343) >> 2);
  float v36 = (int *)v325;
  float v37 = (int *)v326;
  if (v325 != (void *)v326)
  {
    int v38 = 0;
    long long v39 = (int *)v325;
    do
      *v39++ = v38++;
    while (v39 != v37);
  }
  unint64_t v40 = 126 - 2 * __clz(v37 - v36);
  if (v37 == v36) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  v335.i64[0] = (uint64_t)v343;
  sub_25B4446B0(v36, v37, (uint64_t **)&v335, v41, 1);
  id v43 = (int *)v325;
  if (v325 != (void *)v326)
  {
    __p = 0;
    uint64_t v44 = 0;
    unint64_t v317 = 0;
    id v43 = (int *)v326;
    do
    {
      uint64_t v45 = *(v43 - 1);
      if (objc_msgSend_hasBoxesDict_(v321[v45], v42, @"lshaped"))
      {
        long long v341 = 0u;
        long long v342 = 0u;
        long long v339 = 0u;
        long long v340 = 0u;
        long long v337 = 0u;
        long long v338 = 0u;
        float32x4_t v335 = 0u;
        long long v336 = 0u;
        uint64_t v47 = objc_msgSend_boxesDict(v321[v45], v42, v46);
        uint64_t v49 = objc_msgSend_objectForKeyedSubscript_(v47, v48, @"lshaped");
        sub_25B445344((uint64_t)&v335, v49);

        if ((unint64_t)v44 >= v317)
        {
          uint64_t v51 = (v44 - __p) >> 3;
          unint64_t v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v317 - (void)__p) >> 2 > v52) {
            unint64_t v52 = (uint64_t)(v317 - (void)__p) >> 2;
          }
          if (v317 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53) {
            unint64_t v53 = (unint64_t)sub_25B3FCAD4(v53);
          }
          else {
            float32x4_t v42 = 0;
          }
          long long v54 = (char *)(v53 + 8 * v51);
          *(void *)long long v54 = v45;
          long long v55 = v54 + 8;
          if (v44 == __p)
          {
            long long v56 = __p;
          }
          else
          {
            long long v56 = __p;
            do
            {
              uint64_t v57 = *((void *)v44 - 1);
              v44 -= 8;
              *((void *)v54 - 1) = v57;
              v54 -= 8;
            }
            while (v44 != __p);
          }
          unint64_t v317 = v53 + 8 * (void)v42;
          if (v56) {
            operator delete(v56);
          }
          __p = v54;
          uint64_t v44 = v55;
        }
        else
        {
          *(void *)uint64_t v44 = v45;
          v44 += 8;
        }
        long long v58 = v325;
        if ((void)v326 - (void)v325 == 4)
        {
          float32x4_t v50 = 0;
          long long v319 = 0u;
        }
        else
        {
          float32x4_t v50 = 0;
          unint64_t v59 = 0;
          long long v319 = 0u;
          do
          {
            int v60 = v58[v59];
            if (objc_msgSend_hasBoxesDict_(v321[v60], v42, @"lshaped"))
            {
              uint64_t v62 = objc_msgSend_type(v321[v45], v42, v61);
              uint64_t v65 = objc_msgSend_type(v321[v60], v63, v64);
              int isEqualToString = objc_msgSend_isEqualToString_(v62, v66, (uint64_t)v65);

              if (!isEqualToString) {
                goto LABEL_51;
              }
              long long v333 = 0u;
              long long v334 = 0u;
              long long v331 = 0u;
              long long v332 = 0u;
              long long v329 = 0u;
              long long v330 = 0u;
              float32x4_t v327 = 0u;
              long long v328 = 0u;
              uint64_t v69 = objc_msgSend_boxesDict(v321[v60], v42, v68);
              uint64_t v71 = objc_msgSend_objectForKeyedSubscript_(v69, v70, @"lshaped");
              sub_25B445344((uint64_t)&v327, v71);

              sub_25B443EE4((uint64_t)buf, &v335, &v327);
              if (buf[0].f32[0] <= 0.1)
              {
LABEL_51:
                uint64_t v72 = (int *)v319;
                if ((unint64_t)v319 >= *((void *)&v319 + 1))
                {
                  uint64_t v74 = (uint64_t)(v319 - (void)v50) >> 2;
                  unint64_t v75 = v74 + 1;
                  if ((unint64_t)(v74 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v76 = *((void *)&v319 + 1) - (void)v50;
                  if ((uint64_t)(*((void *)&v319 + 1) - (void)v50) >> 1 > v75) {
                    unint64_t v75 = v76 >> 1;
                  }
                  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v77 = v75;
                  }
                  if (v77) {
                    unint64_t v77 = (unint64_t)sub_25B3FBC64(v77);
                  }
                  else {
                    float32x4_t v42 = 0;
                  }
                  uint64_t v78 = (int *)(v77 + 4 * v74);
                  *uint64_t v78 = v60;
                  uint64_t v73 = v78 + 1;
                  while (v72 != v50)
                  {
                    int v79 = *--v72;
                    *--uint64_t v78 = v79;
                  }
                  *((void *)&v319 + 1) = v77 + 4 * (void)v42;
                  if (v50) {
                    operator delete(v50);
                  }
                  float32x4_t v50 = v78;
                }
                else
                {
                  *(_DWORD *)long long v319 = v60;
                  uint64_t v73 = (_DWORD *)(v319 + 4);
                }
                *((void *)&v80 + 1) = *((void *)&v319 + 1);
                *(void *)&long long v80 = v73;
                long long v319 = v80;
              }
            }
            ++v59;
            long long v58 = v325;
          }
          while (((uint64_t)(v326 - (void)v325) >> 2) - 1 > v59);
        }
        if (v58)
        {
          *(void *)&long long v326 = v58;
          operator delete(v58);
        }
        float32x4_t v325 = v50;
        long long v326 = v319;
        id v43 = (int *)v319;
      }
      else
      {
        float32x4_t v50 = (int *)v325;
        id v43 = (int *)(v326 - 4);
        *(void *)&long long v326 = v326 - 4;
      }
    }
    while (v50 != v43);
    if (!v43) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  __p = 0;
  uint64_t v44 = 0;
  if (v325)
  {
LABEL_75:
    *(void *)&long long v326 = v43;
    operator delete(v43);
  }
LABEL_76:
  if (*(void *)v343)
  {
    *(void *)&v343[8] = *(void *)v343;
    operator delete(*(void **)v343);
  }
LABEL_79:

  float32x4_t v314 = objc_msgSend_arrayWithCapacity_(MEMORY[0x263EFF980], v81, (v44 - __p) >> 3);
  if (__p != v44)
  {
    uint64_t v84 = __p;
    do
    {
      objc_msgSend_addObject_(v314, v82, (uint64_t)v321[*(void *)v84]);
      v84 += 8;
    }
    while (v84 != v44);
  }
  if (v314)
  {
    id v85 = v314;
    uint64_t v320 = objc_msgSend_count(v85, v86, v87);
    long long v318 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v88, @"Dishwasher", @"Washer", @"Oven", 0);
    float32x4_t v316 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v89, @"Stove", @"Sink", 0);
    if (v320)
    {
      uint64_t v91 = 0;
      while (1)
      {
        uint64_t v92 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v91);
        uint64_t v95 = objc_msgSend_type(v92, v93, v94);
        if (objc_msgSend_isEqualToString_(v95, v96, @"Sofa")) {
          break;
        }
        uint64_t v98 = objc_msgSend_objectAtIndexedSubscript_(v85, v97, v91);
        uint64_t v101 = objc_msgSend_type(v98, v99, v100);
        char v103 = objc_msgSend_isEqualToString_(v101, v102, @"Table");

        if ((v103 & 1) == 0)
        {
          uint64_t v92 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v91);
          sub_25B477C20((uint64_t)v92, 0);
          goto LABEL_89;
        }
LABEL_90:
        if (v320 == ++v91)
        {
          uint64_t v104 = 0;
          while (1)
          {
            long long v105 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v104);
            long long v108 = objc_msgSend_type(v105, v106, v107);
            if (objc_msgSend_isEqualToString_(v108, v109, @"Cabinet")) {
              break;
            }
            long long v111 = objc_msgSend_objectAtIndexedSubscript_(v85, v110, v104);
            long long v114 = objc_msgSend_type(v111, v112, v113);
            char v116 = objc_msgSend_isEqualToString_(v114, v115, @"Storage");

            if (v116) {
              goto LABEL_95;
            }
LABEL_112:
            if (++v104 == v320)
            {
              uint64_t v168 = 0;
              while (1)
              {
                uint64_t v169 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v168);
                uint64_t v172 = objc_msgSend_type(v169, v170, v171);
                if (objc_msgSend_isEqualToString_(v172, v173, @"Cabinet")) {
                  break;
                }
                uint64_t v175 = objc_msgSend_objectAtIndexedSubscript_(v85, v174, v168);
                uint64_t v178 = objc_msgSend_type(v175, v176, v177);
                char v180 = objc_msgSend_isEqualToString_(v178, v179, @"Storage");

                if (v180) {
                  goto LABEL_117;
                }
LABEL_130:
                if (++v168 == v320)
                {
                  uint64_t v232 = 0;
                  while (1)
                  {
                    float v233 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v232);
                    uint64_t v236 = objc_msgSend_type(v233, v234, v235);
                    if (!objc_msgSend_isEqualToString_(v236, v237, @"Sink")) {
                      goto LABEL_153;
                    }
                    uint64_t v239 = objc_msgSend_objectAtIndexedSubscript_(v85, v238, v232);
                    if ((objc_msgSend_hasBoxesDict_(v239, v240, @"rawdetection") & 1) == 0) {
                      break;
                    }
                    uint64_t v242 = objc_msgSend_objectAtIndexedSubscript_(v85, v241, v232);
                    uint64_t v245 = objc_msgSend_parent_id(v242, v243, v244);
                    BOOL v246 = v245 == 0;

                    if (v246)
                    {
                      uint64_t v247 = 0;
                      while (1)
                      {
                        uint64_t v248 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v247);
                        uint64_t v251 = objc_msgSend_type(v248, v249, v250);
                        if (objc_msgSend_isEqualToString_(v251, v252, @"Cabinet")) {
                          goto LABEL_139;
                        }
                        uint64_t v254 = objc_msgSend_objectAtIndexedSubscript_(v85, v253, v247);
                        uint64_t v257 = objc_msgSend_type(v254, v255, v256);
                        if (objc_msgSend_isEqualToString_(v257, v258, @"Storage")) {
                          break;
                        }
                        float32x4_t v290 = objc_msgSend_objectAtIndexedSubscript_(v85, v259, v247);
                        float32x4_t v293 = objc_msgSend_type(v290, v291, v292);
                        char v295 = objc_msgSend_isEqualToString_(v293, v294, @"Table");

                        if (v295) {
                          goto LABEL_140;
                        }
LABEL_150:
                        if (v320 == ++v247) {
                          goto LABEL_154;
                        }
                      }

LABEL_139:
LABEL_140:
                      uint64_t v260 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v247);
                      char hasBoxesDict = objc_msgSend_hasBoxesDict_(v260, v261, @"rawdetection");

                      if (hasBoxesDict)
                      {
                        long long v341 = 0u;
                        long long v342 = 0u;
                        long long v339 = 0u;
                        long long v340 = 0u;
                        long long v337 = 0u;
                        long long v338 = 0u;
                        float32x4_t v335 = 0u;
                        long long v336 = 0u;
                        uint64_t v263 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v232);
                        uint64_t v266 = objc_msgSend_boxesDict(v263, v264, v265);
                        int v268 = objc_msgSend_objectForKeyedSubscript_(v266, v267, @"rawdetection");
                        sub_25B445344((uint64_t)&v335, v268);

                        long long v333 = 0u;
                        long long v334 = 0u;
                        long long v331 = 0u;
                        long long v332 = 0u;
                        long long v329 = 0u;
                        long long v330 = 0u;
                        float32x4_t v327 = 0u;
                        long long v328 = 0u;
                        float v270 = objc_msgSend_objectAtIndexedSubscript_(v85, v269, v247);
                        uint64_t v273 = objc_msgSend_boxesDict(v270, v271, v272);
                        uint64_t v275 = objc_msgSend_objectForKeyedSubscript_(v273, v274, @"rawdetection");
                        sub_25B445344((uint64_t)&v327, v275);

                        float v276 = *((float *)&v339 + 2);
                        float v277 = *((float *)&v331 + 2);
                        long long v350 = 0u;
                        long long v351 = 0u;
                        long long v348 = 0u;
                        long long v349 = 0u;
                        long long v346 = 0u;
                        long long v347 = 0u;
                        memset(buf, 0, sizeof(buf));
                        sub_25B4451F4(buf, &v335, 0.2);
                        float32x4_t v325 = 0;
                        long long v326 = 0uLL;
                        sub_25B443EE4((uint64_t)&v325, buf, &v327);
                        if (*(float *)&v325 > 0.01 && v276 > v277)
                        {
                          float v278 = *((float *)&v326 + 3);
                          if (*((float *)&v326 + 3) >= 0.5)
                          {
                            uint64_t v279 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v247, *(float *)&v325);
                            uint64_t v282 = objc_msgSend_identifier(v279, v280, v281);
                            v285 = objc_msgSend_copy(v282, v283, v284);
                            int v287 = objc_msgSend_objectAtIndexedSubscript_(v85, v286, v232);
                            sub_25B477C20((uint64_t)v287, v285);

                            if (qword_26A5020B0 != -1) {
                              dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                            }
                            int v288 = (id)qword_26A5020A8;
                            if (os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG))
                            {
                              float32x4_t v296 = objc_msgSend_objectAtIndexedSubscript_(v85, v289, v247);
                              float32x4_t v299 = objc_msgSend_type(v296, v297, v298);
                              uint64_t v301 = objc_msgSend_objectAtIndexedSubscript_(v85, v300, v232);
                              uint64_t v304 = objc_msgSend_parent_id(v301, v302, v303);
                              *(_DWORD *)uint64_t v343 = 138412802;
                              *(void *)&v343[4] = v299;
                              *(_WORD *)&v343[12] = 2112;
                              *(void *)&v343[14] = v304;
                              *(_WORD *)&v343[22] = 2048;
                              double v344 = v278;
                              _os_log_debug_impl(&dword_25B3F3000, v288, OS_LOG_TYPE_DEBUG, "The sink has parent object (%@) with parent_id: %@, %f", v343, 0x20u);
                            }
                          }
                        }
                      }
                      goto LABEL_150;
                    }
LABEL_154:
                    if (++v232 == v320) {
                      goto LABEL_155;
                    }
                  }

LABEL_153:
                  goto LABEL_154;
                }
              }

LABEL_117:
              uint64_t v181 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v168);
              int v183 = objc_msgSend_hasBoxesDict_(v181, v182, @"rawdetection");

              if (v183)
              {
                for (uint64_t j = 0; j != v320; ++j)
                {
                  uint64_t v185 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, j);
                  uint64_t v188 = objc_msgSend_type(v185, v186, v187);
                  if (objc_msgSend_containsObject_(v316, v189, (uint64_t)v188))
                  {
                    v191 = objc_msgSend_objectAtIndexedSubscript_(v85, v190, j);
                    char v193 = objc_msgSend_hasBoxesDict_(v191, v192, @"rawdetection");

                    if (v193)
                    {
                      long long v341 = 0u;
                      long long v342 = 0u;
                      long long v339 = 0u;
                      long long v340 = 0u;
                      long long v337 = 0u;
                      long long v338 = 0u;
                      float32x4_t v335 = 0u;
                      long long v336 = 0u;
                      uint64_t v194 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v168);
                      uint64_t v197 = objc_msgSend_boxesDict(v194, v195, v196);
                      uint64_t v199 = objc_msgSend_objectForKeyedSubscript_(v197, v198, @"rawdetection");
                      sub_25B445344((uint64_t)&v335, v199);

                      long long v333 = 0u;
                      long long v334 = 0u;
                      long long v331 = 0u;
                      long long v332 = 0u;
                      long long v329 = 0u;
                      long long v330 = 0u;
                      float32x4_t v327 = 0u;
                      long long v328 = 0u;
                      uint64_t v201 = objc_msgSend_objectAtIndexedSubscript_(v85, v200, j);
                      uint64_t v204 = objc_msgSend_boxesDict(v201, v202, v203);
                      uint64_t v206 = objc_msgSend_objectForKeyedSubscript_(v204, v205, @"rawdetection");
                      sub_25B445344((uint64_t)&v327, v206);

                      long long v350 = 0u;
                      long long v351 = 0u;
                      long long v348 = 0u;
                      long long v349 = 0u;
                      long long v346 = 0u;
                      long long v347 = 0u;
                      memset(buf, 0, sizeof(buf));
                      sub_25B4451F4(buf, &v327, 0.3);
                      float32x4_t v325 = 0;
                      long long v326 = 0uLL;
                      sub_25B443EE4((uint64_t)&v325, &v335, buf);
                      if (*(float *)&v325 >= 0.000001)
                      {
                        LODWORD(v207) = HIDWORD(v326);
                        if (*((float *)&v326 + 3) >= 0.5)
                        {
                          uint64_t v208 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v168, v207);
                          long long v211 = objc_msgSend_identifier(v208, v209, v210);
                          uint64_t v214 = objc_msgSend_copy(v211, v212, v213);
                          BOOL v216 = objc_msgSend_objectAtIndexedSubscript_(v85, v215, j);
                          sub_25B477C20((uint64_t)v216, v214);

                          if (qword_26A5020B0 != -1) {
                            dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                          }
                          uint64_t v217 = (id)qword_26A5020A8;
                          if (os_log_type_enabled(v217, OS_LOG_TYPE_DEBUG))
                          {
                            uint64_t v310 = objc_msgSend_objectAtIndexedSubscript_(v85, v218, j);
                            unint64_t v221 = objc_msgSend_type(v310, v219, v220);
                            unint64_t v223 = objc_msgSend_objectAtIndexedSubscript_(v85, v222, v168);
                            float v226 = objc_msgSend_type(v223, v224, v225);
                            uint64_t v228 = objc_msgSend_objectAtIndexedSubscript_(v85, v227, j);
                            objc_msgSend_parent_id(v228, v229, v230);
                            double v231 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
                            *(_DWORD *)uint64_t v343 = 138412802;
                            *(void *)&v343[4] = v221;
                            *(_WORD *)&v343[12] = 2112;
                            *(void *)&v343[14] = v226;
                            *(_WORD *)&v343[22] = 2112;
                            double v344 = v231;
                            _os_log_debug_impl(&dword_25B3F3000, v217, OS_LOG_TYPE_DEBUG, "%@ has parent object (%@) with parent_id: %@", v343, 0x20u);
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                  }
                }
              }
              goto LABEL_130;
            }
          }

LABEL_95:
          long long v117 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v104);
          char v119 = objc_msgSend_hasBoxesDict_(v117, v118, @"rawdetection");

          if (v119)
          {
            long long v341 = 0u;
            long long v342 = 0u;
            long long v339 = 0u;
            long long v340 = 0u;
            long long v337 = 0u;
            long long v338 = 0u;
            float32x4_t v335 = 0u;
            long long v336 = 0u;
            long long v120 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, v104);
            long long v123 = objc_msgSend_boxesDict(v120, v121, v122);
            long long v125 = objc_msgSend_objectForKeyedSubscript_(v123, v124, @"rawdetection");
            sub_25B445344((uint64_t)&v335, v125);

            for (uint64_t k = 0; k != v320; ++k)
            {
              long long v127 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, k);
              long long v130 = objc_msgSend_type(v127, v128, v129);
              if (objc_msgSend_containsObject_(v318, v131, (uint64_t)v130))
              {
                long long v133 = objc_msgSend_objectAtIndexedSubscript_(v85, v132, k);
                char v135 = objc_msgSend_hasBoxesDict_(v133, v134, @"rawdetection");

                if (v135)
                {
                  long long v333 = 0u;
                  long long v334 = 0u;
                  long long v331 = 0u;
                  long long v332 = 0u;
                  long long v329 = 0u;
                  long long v330 = 0u;
                  float32x4_t v327 = 0u;
                  long long v328 = 0u;
                  long long v136 = objc_msgSend_objectAtIndexedSubscript_(v85, v90, k);
                  long long v139 = objc_msgSend_boxesDict(v136, v137, v138);
                  long long v141 = objc_msgSend_objectForKeyedSubscript_(v139, v140, @"rawdetection");
                  sub_25B445344((uint64_t)&v327, v141);

                  memset(v343, 0, sizeof(v343));
                  sub_25B443EE4((uint64_t)v343, &v335, &v327);
                  if (*(float *)v343 >= 0.000001 && *(float *)&v343[12] >= 0.8)
                  {
                    sub_25B443BC4((uint64_t *)&v325, &v335);
                    sub_25B443BC4((uint64_t *)v324, &v327);
                    long long v143 = v324[0];
                    if ((float)((float)(*((float *)v324[0] + 3) * *((float *)v324[0] + 4)) * *((float *)v324[0] + 5)) >= (float)((float)(*((float *)v325 + 3) * *((float *)v325 + 4)) * *((float *)v325 + 5))) {
                      goto LABEL_107;
                    }
                    long long v144 = objc_msgSend_objectAtIndexedSubscript_(v85, v142, v104);
                    v147 = objc_msgSend_identifier(v144, v145, v146);
                    float32x4_t v150 = objc_msgSend_copy(v147, v148, v149);
                    size_t v152 = objc_msgSend_objectAtIndexedSubscript_(v85, v151, k);
                    sub_25B477C20((uint64_t)v152, v150);

                    if (qword_26A5020B0 != -1) {
                      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
                    }
                    v153 = (id)qword_26A5020A8;
                    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v309 = objc_msgSend_objectAtIndexedSubscript_(v85, v154, k);
                      uint64_t v157 = objc_msgSend_type(v309, v155, v156);
                      uint64_t v159 = objc_msgSend_objectAtIndexedSubscript_(v85, v158, v104);
                      id v162 = objc_msgSend_type(v159, v160, v161);
                      uint64_t v164 = objc_msgSend_objectAtIndexedSubscript_(v85, v163, k);
                      uint64_t v167 = objc_msgSend_parent_id(v164, v165, v166);
                      buf[0].i32[0] = 138412802;
                      *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v157;
                      buf[0].i16[6] = 2112;
                      *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v162;
                      buf[1].i16[3] = 2112;
                      buf[1].i64[1] = (uint64_t)v167;
                      _os_log_debug_impl(&dword_25B3F3000, v153, OS_LOG_TYPE_DEBUG, "%@ has parent object (%@) with parent_id: %@", (uint8_t *)buf, 0x20u);
                    }
                    long long v143 = v324[0];
                    if (v324[0])
                    {
LABEL_107:
                      v324[1] = v143;
                      operator delete(v143);
                    }
                    if (v325)
                    {
                      *(void *)&long long v326 = v325;
                      operator delete(v325);
                    }
                  }
                }
              }
              else
              {
              }
            }
          }
          goto LABEL_112;
        }
      }

LABEL_89:
      goto LABEL_90;
    }
LABEL_155:

    float32x4_t v305 = objc_alloc_init(RSObjectAsset);
    sub_25B4E5180((uint64_t)v305, v85);
    v306 = objc_alloc_init(RSObjectAlign);
    uint64_t v307 = sub_25B415848((uint64_t)v306, v311, v312, v305, 1, 1);
  }
  else
  {
    uint64_t v307 = objc_msgSend_array(MEMORY[0x263EFF8C0], v82, v83);
  }

  if (__p) {
    operator delete(__p);
  }
  v335.i64[0] = (uint64_t)&v321;
  sub_25B3F6050((void ***)&v335);

  return v307;
}

void sub_25B4EB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *__p, void *a19, void *a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_objecta,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  a51 = (uint64_t)&a26;
  sub_25B3F6050((void ***)&a51);

  _Unwind_Resume(a1);
}

void sub_25B4EBF6C(uint64_t a1)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  if (a1)
  {
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    id v2 = *(id *)(a1 + 24);
    uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v163, v177, 16);
    if (v6)
    {
      uint64_t v8 = *(void *)v164;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v164 != v8) {
            objc_enumerationMutation(v2);
          }
          unint64_t v10 = *(void **)(*((void *)&v163 + 1) + 8 * i);
          *(float *)&double v7 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v10, v4, v5, v7);
          objc_msgSend_translateBy_(v10, v11, v12, *(double *)(a1 + 128));
        }
        uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v4, (uint64_t)&v163, v177, 16);
      }
      while (v6);
    }

    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    id v13 = *(id *)(a1 + 32);
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v159, v176, 16);
    if (v17)
    {
      uint64_t v19 = *(void *)v160;
      do
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          if (*(void *)v160 != v19) {
            objc_enumerationMutation(v13);
          }
          id v21 = *(void **)(*((void *)&v159 + 1) + 8 * j);
          *(float *)&double v18 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v21, v15, v16, v18);
          objc_msgSend_translateBy_(v21, v22, v23, *(double *)(a1 + 128));
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v159, v176, 16);
      }
      while (v17);
    }

    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    id v24 = *(id *)(a1 + 40);
    uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v155, v175, 16);
    if (v28)
    {
      uint64_t v30 = *(void *)v156;
      do
      {
        for (uint64_t k = 0; k != v28; ++k)
        {
          if (*(void *)v156 != v30) {
            objc_enumerationMutation(v24);
          }
          id v32 = *(void **)(*((void *)&v155 + 1) + 8 * k);
          *(float *)&double v29 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v32, v26, v27, v29);
          objc_msgSend_translateBy_(v32, v33, v34, *(double *)(a1 + 128));
        }
        uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v155, v175, 16);
      }
      while (v28);
    }

    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    id v35 = *(id *)(a1 + 48);
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v35, v36, (uint64_t)&v151, v174, 16);
    if (v39)
    {
      uint64_t v41 = *(void *)v152;
      do
      {
        for (uint64_t m = 0; m != v39; ++m)
        {
          if (*(void *)v152 != v41) {
            objc_enumerationMutation(v35);
          }
          id v43 = *(void **)(*((void *)&v151 + 1) + 8 * m);
          *(float *)&double v40 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v43, v37, v38, v40);
          objc_msgSend_translateBy_(v43, v44, v45, *(double *)(a1 + 128));
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v35, v37, (uint64_t)&v151, v174, 16);
      }
      while (v39);
    }

    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    id v46 = *(id *)(a1 + 56);
    uint64_t v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v147, v173, 16);
    if (v50)
    {
      uint64_t v52 = *(void *)v148;
      do
      {
        for (uint64_t n = 0; n != v50; ++n)
        {
          if (*(void *)v148 != v52) {
            objc_enumerationMutation(v46);
          }
          long long v54 = *(void **)(*((void *)&v147 + 1) + 8 * n);
          *(float *)&double v51 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v54, v48, v49, v51);
          objc_msgSend_translateBy_(v54, v55, v56, *(double *)(a1 + 128));
        }
        uint64_t v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v48, (uint64_t)&v147, v173, 16);
      }
      while (v50);
    }

    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    id v57 = *(id *)(a1 + 64);
    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v58, (uint64_t)&v143, v172, 16);
    if (v61)
    {
      uint64_t v63 = *(void *)v144;
      do
      {
        for (iuint64_t i = 0; ii != v61; ++ii)
        {
          if (*(void *)v144 != v63) {
            objc_enumerationMutation(v57);
          }
          uint64_t v65 = *(void **)(*((void *)&v143 + 1) + 8 * ii);
          *(float *)&double v62 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v65, v59, v60, v62);
          objc_msgSend_translateBy_(v65, v66, v67, *(double *)(a1 + 128));
        }
        uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v59, (uint64_t)&v143, v172, 16);
      }
      while (v61);
    }

    long long v141 = 0u;
    long long v142 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    id v68 = *(id *)(a1 + 88);
    uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v139, v171, 16);
    if (v72)
    {
      uint64_t v74 = *(void *)v140;
      do
      {
        for (juint64_t j = 0; jj != v72; ++jj)
        {
          if (*(void *)v140 != v74) {
            objc_enumerationMutation(v68);
          }
          uint64_t v76 = *(void **)(*((void *)&v139 + 1) + 8 * jj);
          *(float *)&double v73 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v76, v70, v71, v73);
          objc_msgSend_translateBy_(v76, v77, v78, *(double *)(a1 + 128));
        }
        uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v70, (uint64_t)&v139, v171, 16);
      }
      while (v72);
    }

    long long v137 = 0u;
    long long v138 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    id v79 = *(id *)(a1 + 72);
    uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v79, v80, (uint64_t)&v135, v170, 16);
    if (v83)
    {
      uint64_t v85 = *(void *)v136;
      do
      {
        for (kuint64_t k = 0; kk != v83; ++kk)
        {
          if (*(void *)v136 != v85) {
            objc_enumerationMutation(v79);
          }
          uint64_t v87 = *(void **)(*((void *)&v135 + 1) + 8 * kk);
          *(float *)&double v84 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v87, v81, v82, v84);
          objc_msgSend_translateBy_(v87, v88, v89, *(double *)(a1 + 128));
        }
        uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v79, v81, (uint64_t)&v135, v170, 16);
      }
      while (v83);
    }

    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    id v90 = *(id *)(a1 + 104);
    uint64_t v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v91, (uint64_t)&v131, v169, 16);
    if (v94)
    {
      uint64_t v96 = *(void *)v132;
      do
      {
        for (muint64_t m = 0; mm != v94; ++mm)
        {
          if (*(void *)v132 != v96) {
            objc_enumerationMutation(v90);
          }
          uint64_t v98 = *(void **)(*((void *)&v131 + 1) + 8 * mm);
          *(float *)&double v95 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v98, v92, v93, v95);
          objc_msgSend_translateBy_(v98, v99, v100, *(double *)(a1 + 128));
        }
        uint64_t v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v92, (uint64_t)&v131, v169, 16);
      }
      while (v94);
    }

    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    id v101 = *(id *)(a1 + 96);
    uint64_t v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v101, v102, (uint64_t)&v127, v168, 16);
    if (v105)
    {
      uint64_t v107 = *(void *)v128;
      do
      {
        for (nuint64_t n = 0; nn != v105; ++nn)
        {
          if (*(void *)v128 != v107) {
            objc_enumerationMutation(v101);
          }
          long long v109 = *(void **)(*((void *)&v127 + 1) + 8 * nn);
          *(float *)&double v106 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v109, v103, v104, v106);
          objc_msgSend_translateBy_(v109, v110, v111, *(double *)(a1 + 128));
        }
        uint64_t v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v101, v103, (uint64_t)&v127, v168, 16);
      }
      while (v105);
    }

    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    id v112 = *(id *)(a1 + 80);
    uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v112, v113, (uint64_t)&v123, v167, 16);
    if (v116)
    {
      uint64_t v118 = *(void *)v124;
      do
      {
        for (uint64_t i1 = 0; i1 != v116; ++i1)
        {
          if (*(void *)v124 != v118) {
            objc_enumerationMutation(v112);
          }
          long long v120 = *(void **)(*((void *)&v123 + 1) + 8 * i1);
          *(float *)&double v117 = -*(float *)(a1 + 20);
          objc_msgSend_rotateAlongZAxisRightHand_(v120, v114, v115, v117, (void)v123);
          objc_msgSend_translateBy_(v120, v121, v122, *(double *)(a1 + 128));
        }
        uint64_t v116 = objc_msgSend_countByEnumeratingWithState_objects_count_(v112, v114, (uint64_t)&v123, v167, 16);
      }
      while (v116);
    }
  }
}

void sub_25B4EC6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4EC780(id *a1)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  if (a1)
  {
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    id v2 = a1[3];
    uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v97, v109, 16);
    if (v5)
    {
      uint64_t v6 = *(void *)v98;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v98 != v6) {
            objc_enumerationMutation(v2);
          }
          uint64_t v8 = *(void *)(*((void *)&v97 + 1) + 8 * i);
          if (v8) {
            *(_OWORD *)(v8 + 192) = xmmword_25B5F15B0;
          }
        }
        uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v4, (uint64_t)&v97, v109, 16);
      }
      while (v5);
    }

    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    id v9 = a1[5];
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v93, v108, 16);
    if (v12)
    {
      uint64_t v13 = *(void *)v94;
      do
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          if (*(void *)v94 != v13) {
            objc_enumerationMutation(v9);
          }
          uint64_t v15 = *(void *)(*((void *)&v93 + 1) + 8 * j);
          if (v15) {
            *(_OWORD *)(v15 + 192) = xmmword_25B5F15C0;
          }
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v11, (uint64_t)&v93, v108, 16);
      }
      while (v12);
    }

    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v16 = a1[4];
    uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v89, v107, 16);
    if (v19)
    {
      uint64_t v20 = *(void *)v90;
      do
      {
        for (uint64_t k = 0; k != v19; ++k)
        {
          if (*(void *)v90 != v20) {
            objc_enumerationMutation(v16);
          }
          uint64_t v22 = *(void *)(*((void *)&v89 + 1) + 8 * k);
          if (v22) {
            *(_OWORD *)(v22 + 192) = xmmword_25B5F15D0;
          }
        }
        uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v18, (uint64_t)&v89, v107, 16);
      }
      while (v19);
    }

    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    id v23 = a1[7];
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v85, v106, 16);
    if (v26)
    {
      uint64_t v27 = *(void *)v86;
      do
      {
        for (uint64_t m = 0; m != v26; ++m)
        {
          if (*(void *)v86 != v27) {
            objc_enumerationMutation(v23);
          }
          uint64_t v29 = *(void *)(*((void *)&v85 + 1) + 8 * m);
          if (v29) {
            *(_OWORD *)(v29 + 192) = xmmword_25B5F15E0;
          }
        }
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v25, (uint64_t)&v85, v106, 16);
      }
      while (v26);
    }

    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    id v30 = a1[6];
    uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v81, v105, 16);
    if (v33)
    {
      uint64_t v34 = *(void *)v82;
      do
      {
        for (uint64_t n = 0; n != v33; ++n)
        {
          if (*(void *)v82 != v34) {
            objc_enumerationMutation(v30);
          }
          uint64_t v36 = *(void *)(*((void *)&v81 + 1) + 8 * n);
          if (v36) {
            *(_OWORD *)(v36 + 192) = xmmword_25B5F15F0;
          }
        }
        uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v81, v105, 16);
      }
      while (v33);
    }

    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    id v37 = a1[9];
    uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v77, v104, 16);
    if (v40)
    {
      uint64_t v41 = *(void *)v78;
      do
      {
        for (iuint64_t i = 0; ii != v40; ++ii)
        {
          if (*(void *)v78 != v41) {
            objc_enumerationMutation(v37);
          }
          uint64_t v43 = *(void *)(*((void *)&v77 + 1) + 8 * ii);
          if (v43) {
            *(_OWORD *)(v43 + 192) = xmmword_25B5F1600;
          }
        }
        uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v39, (uint64_t)&v77, v104, 16);
      }
      while (v40);
    }

    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id v44 = a1[12];
    uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v45, (uint64_t)&v73, v103, 16);
    if (v47)
    {
      uint64_t v48 = *(void *)v74;
      do
      {
        for (juint64_t j = 0; jj != v47; ++jj)
        {
          if (*(void *)v74 != v48) {
            objc_enumerationMutation(v44);
          }
          uint64_t v50 = *(void *)(*((void *)&v73 + 1) + 8 * jj);
          if (v50) {
            *(_OWORD *)(v50 + 192) = xmmword_25B5F15C0;
          }
        }
        uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v44, v46, (uint64_t)&v73, v103, 16);
      }
      while (v47);
    }

    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v51 = a1[13];
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v69, v102, 16);
    if (v54)
    {
      uint64_t v55 = *(void *)v70;
      do
      {
        for (kuint64_t k = 0; kk != v54; ++kk)
        {
          if (*(void *)v70 != v55) {
            objc_enumerationMutation(v51);
          }
          uint64_t v57 = *(void *)(*((void *)&v69 + 1) + 8 * kk);
          if (v57) {
            *(_OWORD *)(v57 + 192) = xmmword_25B5F15D0;
          }
        }
        uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v53, (uint64_t)&v69, v102, 16);
      }
      while (v54);
    }

    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v58 = a1[11];
    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v59, (uint64_t)&v65, v101, 16);
    if (v61)
    {
      uint64_t v62 = *(void *)v66;
      do
      {
        for (muint64_t m = 0; mm != v61; ++mm)
        {
          if (*(void *)v66 != v62) {
            objc_enumerationMutation(v58);
          }
          uint64_t v64 = *(void *)(*((void *)&v65 + 1) + 8 * mm);
          if (v64) {
            *(_OWORD *)(v64 + 192) = xmmword_25B5F15D0;
          }
        }
        uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v60, (uint64_t)&v65, v101, 16);
      }
      while (v61);
    }
  }
}

void sub_25B4ECD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4ECF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_25B4ECF80(void *a1, void *a2, void *a3, void *a4, unsigned int a5, unsigned int a6, void *a7, void *a8, void *a9)
{
  unint64_t v153 = __PAIR64__(a5, a6);
  id v14 = a1;
  id v15 = a3;
  id v155 = a4;
  id v158 = a7;
  id v157 = a8;
  id v156 = a9;
  long long v154 = v15;
  if (v15)
  {
    float64x2_t v162 = *((float64x2_t *)v15 + 6);
    float64x2_t v164 = *((float64x2_t *)v15 + 5);
    float64x2_t v159 = *((float64x2_t *)v15 + 8);
    float64x2_t v165 = *((float64x2_t *)v15 + 7);
    signed int v16 = *((_DWORD *)v15 + 7);
    int v161 = *((_DWORD *)v15 + 8);
    float v17 = *((float *)v15 + 4);
    float v18 = *((float *)v15 + 6);
  }
  else
  {
    int v161 = 0;
    signed int v16 = 0;
    float v17 = 0.0;
    float64x2_t v162 = 0u;
    float64x2_t v164 = 0u;
    float64x2_t v165 = 0u;
    float64x2_t v159 = 0u;
    float v18 = 0.0;
  }
  long long v175 = 0uLL;
  long long v176 = 0uLL;
  int v177 = 1065353216;
  size_t v19 = (unint64_t)(float)(unint64_t)((double)(unint64_t)((uint64_t)(a2[1] - *a2) >> 3) * 0.25);
  sub_25B3FA4B0((uint64_t)&v175, v19);
  long long v172 = 0u;
  long long v173 = 0u;
  int v174 = 1065353216;
  if (v161 >= 1) {
    sub_25B3FA4B0((uint64_t)&v172, v19);
  }
  uint64_t v22 = (void *)*a2;
  id v23 = (void *)a2[1];
  if ((void *)*a2 != v23)
  {
    float v24 = v17 + v18;
    do
    {
      uint64_t v25 = objc_msgSend_points(v14, v20, v21, v153, v154, v155);
      float64x2_t v26 = vmulq_f64(v164, vaddq_f64(v165, vcvtq_f64_f32(*(float32x2_t *)(v25 + 16 * *v22))));
      signed int v27 = llround(v26.f64[0]);
      if ((v27 & 0x80000000) == 0 && v16 > v27)
      {
        signed int v28 = llround(v26.f64[1]);
        if ((v28 & 0x80000000) == 0 && v16 > v28)
        {
          uint64_t v29 = v25 + 16 * *v22;
          float v31 = *(float *)(v29 + 8);
          id v30 = (float *)(v29 + 8);
          float v32 = v31;
          int v33 = v28 + v16 * v27;
          LODWORD(v170[0]) = v33;
          uint64_t v34 = sub_25B3FA294((uint64_t)&v175, v33, v170);
          uint64_t v36 = v34;
          int v37 = *(_DWORD *)v22;
          uint64_t v39 = (char *)v34[4];
          unint64_t v38 = v34[5];
          if ((unint64_t)v39 >= v38)
          {
            uint64_t v41 = (char *)v34[3];
            uint64_t v42 = (v39 - v41) >> 2;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            uint64_t v44 = v38 - (void)v41;
            if (v44 >> 1 > v43) {
              unint64_t v43 = v44 >> 1;
            }
            _CF = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v46 = v43;
            }
            if (v46)
            {
              unint64_t v46 = (unint64_t)sub_25B3FBC64(v46);
              uint64_t v41 = (char *)v36[3];
              uint64_t v39 = (char *)v36[4];
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v47 = (_DWORD *)(v46 + 4 * v42);
            *uint64_t v47 = v37;
            uint64_t v40 = v47 + 1;
            while (v39 != v41)
            {
              int v48 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *--uint64_t v47 = v48;
            }
            v36[3] = v47;
            v36[4] = v40;
            v36[5] = v46 + 4 * (void)v20;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v39 = v37;
            uint64_t v40 = v39 + 4;
          }
          v35.f64[0] = v32;
          signed int v49 = llround(vmulq_f64(v162, vaddq_f64(v159, v35)).f64[0]);
          v36[4] = v40;
          if (v161 > v49 && (v49 & 0x80000000) == 0 && v17 <= *v30 && *v30 <= v24)
          {
            v169[0] = v33 + v16 * v16 * v49;
            id v51 = sub_25B4ED794((uint64_t)&v172, v169[0], v169);
            ++*((_DWORD *)v51 + 5);
          }
        }
      }
      ++v22;
    }
    while (v22 != v23);
  }
  uint64_t v52 = v155;
  long long v163 = sub_25B4FD95C(v52, 0);
  unint64_t v53 = v52;
  uint64_t v54 = sub_25B4FD95C(v53, 0x1AuLL);
  if (v53) {
    uint64_t v57 = v53[5] * v53[3];
  }
  else {
    uint64_t v57 = 0;
  }
  if (SHIDWORD(v153) <= 1) {
    int v58 = 1;
  }
  else {
    int v58 = HIDWORD(v153);
  }
  unint64_t v59 = (uint64_t **)v176;
  if ((void)v176)
  {
    long long v160 = v53;
    do
    {
      int v166 = v58;
      uint64_t v60 = v54;
      uint64_t v171 = 0;
      memset(v170, 0, sizeof(v170));
      uint64_t v62 = (int *)v59[3];
      uint64_t v61 = (int *)v59[4];
      uint64_t v63 = v62;
      if (v62 != v61)
      {
        do
        {
          uint64_t v64 = objc_msgSend_semanticLabels(v14, v55, v56, v153);
          uint64_t v65 = *v62;
          uint64_t v68 = objc_msgSend_semanticVotes(v14, v66, v67);
          sub_25B5032E8((__int32 *)(v64 + 4 * v65), (uint16x4_t *)(v68 + 8 * *v62), (uint64_t)v169, v69, v70, v71);
          for (uint64_t i = 0; i != 26; ++i)
            *(float *)((char *)v170 + i * 4) = *(float *)((char *)v170 + i * 4) + *(float *)&v169[i];
          ++v62;
        }
        while (v62 != v61);
        uint64_t v62 = (int *)v59[3];
        uint64_t v63 = (int *)v59[4];
      }
      uint64_t v73 = 0;
      unint64_t v74 = (unint64_t)((char *)v63 - (char *)v62) >> 2;
      _S0 = (float)(int)v74;
      __asm { FCVT            H1, S0 }
      uint64_t v80 = *((int *)v59 + 4);
      uint64_t v54 = v60;
      *((_WORD *)v60 + v80) = _H1;
      long long v81 = v163;
      do
      {
        _S1 = *(float *)((char *)v170 + v73) / _S0;
        __asm { FCVT            H1, S1 }
        *((_WORD *)v81 + v80) = LOWORD(_S1);
        v73 += 4;
        long long v81 = (void *)((char *)v81 + v57);
      }
      while (v73 != 104);
      int v58 = v166;
      if (v166 <= (int)v74) {
        int v58 = v74;
      }
      unint64_t v59 = (uint64_t **)*v59;
    }
    while (v59);
    long long v83 = (uint64_t **)v176;
    if ((void)v176)
    {
      unint64_t v53 = v160;
      do
      {
        uint64_t v85 = *((int *)v83 + 4);
        _H1 = *((_WORD *)v54 + v85);
        __asm { FCVT            S1, H1 }
        float v84 = 1.0 / (double)v58;
        _S1 = v84 * _S1;
        __asm { FCVT            H1, S1 }
        *((_WORD *)v54 + v85) = LOWORD(_S1);
        long long v83 = (uint64_t **)*v83;
      }
      while (v83);
    }
    else
    {
      unint64_t v53 = v160;
    }
  }
  if ((int)v153 <= 1) {
    uint64_t v89 = 1;
  }
  else {
    uint64_t v89 = v153;
  }
  if (v161 >= 1)
  {
    long long v90 = sub_25B4FD95C(v53, 0x1BuLL);
    long long v91 = (uint64_t **)v173;
    if ((void)v173)
    {
      long long v92 = (uint64_t *)v173;
      do
      {
        int v93 = *((_DWORD *)v92 + 5);
        _S0 = (float)v93;
        __asm { FCVT            H0, S0 }
        *((_WORD *)v90 + *((int *)v92 + 4)) = LOWORD(_S0);
        if ((int)v89 <= v93) {
          uint64_t v89 = v93;
        }
        else {
          uint64_t v89 = v89;
        }
        long long v92 = (uint64_t *)*v92;
      }
      while (v92);
      do
      {
        uint64_t v96 = *((int *)v91 + 4);
        _H1 = *((_WORD *)v90 + v96);
        __asm { FCVT            S1, H1 }
        float v95 = 1.0 / (double)(int)v89;
        _S1 = v95 * _S1;
        __asm { FCVT            H1, S1 }
        *((_WORD *)v90 + v96) = LOWORD(_S1);
        long long v91 = (uint64_t **)*v91;
      }
      while (v91);
    }
  }
  if (v158)
  {
    long long v100 = sub_25B4FD95C(v158, 0);
    char v103 = (uint64_t **)v176;
    if ((void)v176)
    {
      uint64_t v104 = v100;
      do
      {
        uint64_t v105 = (int *)v103[3];
        double v106 = (int *)v103[4];
        _S8 = -3.4028e38;
        while (v105 != v106)
        {
          uint64_t v108 = objc_msgSend_points(v14, v101, v102);
          uint64_t v109 = *v105++;
          uint64_t v110 = v108 + 16 * v109;
          if (_S8 < *(float *)(v110 + 8)) {
            _S8 = *(float *)(v110 + 8);
          }
        }
        __asm { FCVT            H0, S8 }
        *((_WORD *)v104 + *((int *)v103 + 4)) = _H0;
        char v103 = (uint64_t **)*v103;
      }
      while (v103);
    }
  }
  if (v157)
  {
    id v112 = sub_25B4FD95C(v157, 0);
    uint64_t v115 = (uint64_t **)v176;
    if ((void)v176)
    {
      uint64_t v116 = v112;
      float v117 = v164.f64[0] + v164.f64[0];
      do
      {
        uint64_t v118 = (int *)v115[3];
        char v119 = (int *)v115[4];
        if (v118 == v119)
        {
          unint64_t v120 = 0;
        }
        else
        {
          unint64_t v120 = 0;
          do
          {
            v121.i32[0] = *(_DWORD *)(objc_msgSend_semanticLabels(v14, v113, v114, v153) + 4 * *v118);
            if (vmovl_u8(v121).u8[0] == 6
              && (unsigned __int16)*(void *)(objc_msgSend_semanticVotes(v14, v113, v114) + 8 * *v118))
            {
              ++v120;
            }
            ++v118;
          }
          while (v118 != v119);
        }
        _S0 = (float)v120;
        __asm { FCVT            H1, S0 }
        *((_WORD *)v116 + *((int *)v115 + 4)) = _H1;
        if (v117 < (float)v120) {
          float v117 = (float)v120;
        }
        uint64_t v115 = (uint64_t **)*v115;
      }
      while (v115);
      for (uint64_t j = (uint64_t **)v176; j; uint64_t j = (uint64_t **)*j)
      {
        uint64_t v125 = *((int *)j + 4);
        _H2 = *((_WORD *)v116 + v125);
        __asm { FCVT            S2, H2 }
        float v128 = (float)(255.0 / v117) * _S2;
        float v129 = 255.0;
        if (v128 <= 255.0) {
          float v129 = v128;
        }
        if (v128 >= 0.0) {
          _S2 = v129;
        }
        else {
          _S2 = 0.0;
        }
        __asm { FCVT            H2, S2 }
        *((_WORD *)v116 + v125) = _H2;
      }
    }
  }
  if (v156)
  {
    long long v132 = v156;
    long long v133 = sub_25B4FD95C(v132, 0);
    long long v136 = (uint64_t **)v176;
    if ((void)v176)
    {
      long long v137 = v133;
      do
      {
        long long v138 = (int *)v136[3];
        long long v139 = (int *)v136[4];
        float32x2_t v140 = 0;
        while (v138 != v139)
        {
          long long v167 = *(_OWORD *)(objc_msgSend_cameraPositions(v14, v134, v135) + 16 * *v138);
          uint64_t v143 = objc_msgSend_points(v14, v141, v142);
          uint64_t v144 = *v138++;
          float32x2_t v140 = vadd_f32(v140, vsub_f32(*(float32x2_t *)&v167, *(float32x2_t *)(v143 + 16 * v144)));
        }
        uint64_t v145 = v132[7];
        if (v145)
        {
          uint64_t v146 = 0;
          float v147 = (float)(unint64_t)(((char *)v136[4] - (char *)v136[3]) >> 2);
          uint64_t v148 = *((int *)v136 + 4);
          long long v149 = v137;
          do
          {
            float32x2_t v168 = v140;
            _S1 = *(float *)((unint64_t)&v168 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v146 & 1))) / v147;
            __asm { FCVT            H1, S1 }
            *((_WORD *)v149 + v148) = LOWORD(_S1);
            ++v146;
            long long v149 = (void *)((char *)v149 + v57);
          }
          while (v145 != v146);
        }
        long long v136 = (uint64_t **)*v136;
      }
      while (v136);
    }
  }
  sub_25B3FB178((uint64_t)&v172);
  sub_25B3FAE18((void *)v176);
  long long v151 = (void *)v175;
  *(void *)&long long v175 = 0;
  if (v151) {
    operator delete(v151);
  }

  return v58 | (unint64_t)(v89 << 32);
}

void sub_25B4ED708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  sub_25B3FB178(v15 - 208);
  sub_25B3FACCC(v15 - 160);

  _Unwind_Resume(a1);
}

void *sub_25B4ED794(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    id v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_25B3FA4B0(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  size_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *size_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    size_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25B4ED990(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B4ED9A4()
{
}

void sub_25B4ED9BC(float *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v171 = *(void *)(a2 + 16);
    while (1)
    {
      uint64_t v5 = (_OWORD *)(v2 + 16);
      float32x2_t v6 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24));
      if (sqrtf(vaddv_f32(vmul_f32(v6, v6))) < a1[3]) {
        break;
      }
LABEL_153:
      v2 += 176;
      if (v2 == v3) {
        return;
      }
    }
    sub_25B4EE5D4((void **)&v177, (uint64_t)a1, v2, *(void *)(a2 + 8), *(void *)(a2 + 16));
    float v7 = a1[4];
    float v8 = a1[5];
    float v10 = a1[7];
    float v9 = a1[8];
    float v11 = a1[6];
    float v12 = a1[2];
    float v13 = v177;
    BOOL v14 = v178;
    if ((char *)v178 - (char *)v177 != 24)
    {
      int v174 = (float32x2_t *)(v2 + 16);
      if ((char *)v178 - (char *)v177 == 48 && v178 != v177)
      {
        uint64_t v25 = 0;
        int v26 = 0;
        signed int v27 = v177 + 1;
        unsigned int v28 = -1;
        float v29 = -100000.0;
        do
        {
          v26 += *v27;
          float32x2_t v30 = vsub_f32(*(float32x2_t *)(*((void *)v27 - 1) + 16), *(float32x2_t *)(*((void *)v27 - 1) + 24));
          float v31 = sqrtf(vaddv_f32(vmul_f32(v30, v30)));
          if (v31 > v29)
          {
            unsigned int v28 = v25;
            float v29 = v31;
          }
          ++v25;
          v27 += 6;
        }
        while (v25 != 2);
        if (v26 == 1 && (v28 & 0x80000000) == 0)
        {
          if (v29 > v12
            || (float32x2_t v32 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24)),
                v29 > (float)(v9 * sqrtf(vaddv_f32(vmul_f32(v32, v32))))))
          {
            int v33 = v177[3 * (int)(1 - v28)];
            uint64_t v34 = v33 + 2;
            float32x2_t v35 = vsub_f32(v33[2], v33[3]);
            float v36 = sqrtf(vaddv_f32(vmul_f32(v35, v35)));
            float v37 = a1[6];
            if (v36 > v7)
            {
              if (v36 <= a1[3]) {
                float v37 = a1[15];
              }
              else {
                float v37 = a1[14];
              }
            }
            long long v79 = v177[3 * v28];
            float v80 = sub_25B3FCCE0(v174, v79 + 2, 0);
            float v81 = sub_25B3FCCE0(v79 + 2, v34, 0);
            BOOL v82 = v81 >= v37 && v81 <= (float)(180.0 - v37);
            if ((uint64_t v3 = v171, !v82)
              && (float32x2_t v83 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24)),
                  sqrtf(vaddv_f32(vmul_f32(v83, v83))) <= v7)
              && (float v84 = vabds_f32(90.0, v80), v84 < v11)
              || (float v84 = vabds_f32(90.0, v80), v84 < v8))
            {
              if (v84 < v10) {
                goto LABEL_150;
              }
              float v85 = sub_25B3FCCE0(v174, v79 + 2, 0);
              float v86 = sub_25B3FCCE0(v174, v34, 0);
              float v87 = fabsf(v85 + -90.0);
              float v88 = fabsf(v86 + -90.0);
              float32x2_t v89 = vsub_f32(v33[2], v33[3]);
              float v90 = v88 + v88;
              BOOL v91 = sqrtf(vaddv_f32(vmul_f32(v89, v89))) < v7 || v87 < v90;
              uint64_t v3 = v171;
              if (v91)
              {
                long long v92 = &v13[3 * v28];
                uint64_t v93 = *((int *)v92 + 2);
                uint64_t v94 = *((int *)v92 + 3);
                int32x2_t v95 = (int32x2_t)v79[2];
                int32x2_t v96 = (int32x2_t)vsub_f32(v79[3], (float32x2_t)v95);
                *(float *)v95.i32 = -*(float *)&v96.i32[1];
                float32x2_t v97 = (float32x2_t)vzip1_s32(v95, v96);
                float32x2_t v98 = v174[1 - v93];
                float32x2_t v99 = vadd_f32(v98, v97);
                float32x2_t v100 = vsub_f32(v98, v99);
                float v101 = vaddv_f32(vmul_f32(vsub_f32(v174[v93], v99), v100));
                float v102 = vaddv_f32(vmul_f32(v100, v100));
                if (v102 < 0.000001) {
                  float v102 = 0.000001;
                }
                double v103 = COERCE_DOUBLE(vmla_n_f32(v99, v100, v101 / v102));
                sub_25B4EEB3C(v2, v93, v103);
                if (v94 != -1) {
                  sub_25B4EEB3C((uint64_t)v79, v94, v103);
                }
                goto LABEL_150;
              }
            }
          }
        }
      }
LABEL_67:
      if (v14 != v13)
      {
        float v104 = a1[5];
        float v106 = a1[7];
        float v105 = a1[8];
        float v108 = a1[2];
        float v107 = a1[3];
        long long v175 = v14;
        while (2)
        {
          if (*((_DWORD *)v13 + 4)) {
            goto LABEL_149;
          }
          float32x2_t v109 = vsub_f32((*v13)[2], (*v13)[3]);
          if (sqrtf(vaddv_f32(vmul_f32(v109, v109))) >= v107) {
            goto LABEL_149;
          }
          uint64_t v110 = a1;
          sub_25B4EE5D4(__p, (uint64_t)a1, (uint64_t)*v13, *(void *)(a2 + 8), *(void *)(a2 + 16));
          id v112 = __p[0];
          uint64_t v111 = __p[1];
          if (__p[0] != __p[1])
          {
            unint64_t v113 = 0;
            uint64_t v114 = 0;
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            while (1)
            {
              uint64_t v117 = *(unsigned __int8 *)(*v112 + 151);
              if ((v117 & 0x80u) == 0) {
                uint64_t v118 = *(unsigned __int8 *)(*v112 + 151);
              }
              else {
                uint64_t v118 = *(void *)(*v112 + 136);
              }
              if (v118)
              {
                uint64_t v119 = *(unsigned __int8 *)(v2 + 151);
                int v120 = (char)v119;
                if ((v119 & 0x80u) != 0) {
                  uint64_t v119 = *(void *)(v2 + 136);
                }
                if (v119)
                {
                  if (v118 != v119) {
                    goto LABEL_90;
                  }
                  uint8x8_t v121 = (const void **)(*v112 + 128);
                  if (v120 >= 0) {
                    uint64_t v122 = (unsigned __int8 *)(v2 + 128);
                  }
                  else {
                    uint64_t v122 = *(unsigned __int8 **)(v2 + 128);
                  }
                  if ((v117 & 0x80) != 0)
                  {
                    if (memcmp(*v121, v122, *(void *)(*v112 + 136))) {
                      goto LABEL_90;
                    }
                  }
                  else if (*(unsigned char *)(*v112 + 151))
                  {
                    while (*(unsigned __int8 *)v121 == *v122)
                    {
                      uint8x8_t v121 = (const void **)((char *)v121 + 1);
                      ++v122;
                      if (!--v117) {
                        goto LABEL_92;
                      }
                    }
LABEL_90:
                    if ((unint64_t)v116 >= v113)
                    {
                      unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (v116 - v115) + 1;
                      if (v125 > 0xAAAAAAAAAAAAAAALL) {
                        sub_25B3FBC4C();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v113 - (void)v115) >> 3) > v125) {
                        unint64_t v125 = 0x5555555555555556 * ((uint64_t)(v113 - (void)v115) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (void)v115) >> 3) >= 0x555555555555555) {
                        unint64_t v126 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v126 = v125;
                      }
                      if (v126) {
                        unint64_t v126 = (unint64_t)sub_25B413D74(v126);
                      }
                      else {
                        uint64_t v127 = 0;
                      }
                      long long v128 = *(_OWORD *)v112;
                      unint64_t v129 = v126 + 8 * (v116 - v115);
                      *(void *)(v129 + 16) = v112[2];
                      *(_OWORD *)unint64_t v129 = v128;
                      if (v114 == v115)
                      {
                        uint64_t v115 = (float32x2_t **)(v126 + 8 * (v116 - v115));
                      }
                      else
                      {
                        long long v130 = (float32x2_t **)(v126 + 8 * (v116 - v115));
                        do
                        {
                          long long v131 = *(_OWORD *)(v114 - 3);
                          *((_DWORD *)v130 - 2) = *((_DWORD *)v114 - 2);
                          *(_OWORD *)(v130 - 3) = v131;
                          v130 -= 3;
                          v114 -= 3;
                        }
                        while (v114 != v115);
                        uint64_t v114 = v115;
                        uint64_t v115 = v130;
                      }
                      unint64_t v113 = v126 + 24 * v127;
                      long long v124 = (float32x2_t **)(v129 + 24);
                      if (v114) {
                        operator delete(v114);
                      }
                    }
                    else
                    {
                      long long v123 = *(_OWORD *)v112;
                      v116[2] = (float32x2_t *)v112[2];
                      *(_OWORD *)uint64_t v116 = v123;
                      long long v124 = v116 + 3;
                    }
                    uint64_t v116 = v124;
                    goto LABEL_110;
                  }
                }
              }
LABEL_92:
              long long v124 = v114;
LABEL_110:
              v112 += 3;
              uint64_t v114 = v124;
              if (v112 == v111) {
                goto LABEL_113;
              }
            }
          }
          uint64_t v115 = 0;
          uint64_t v116 = 0;
LABEL_113:
          if ((char *)v116 - (char *)v115 == 24)
          {
            long long v132 = *v115;
            float32x2_t v133 = vsub_f32((*v115)[2], (*v115)[3]);
            float v134 = sqrtf(vaddv_f32(vmul_f32(v133, v133)));
            a1 = v110;
            if (v134 <= v108)
            {
              float32x2_t v135 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24));
              if (v134 <= (float)(v105 * sqrtf(vaddv_f32(vmul_f32(v135, v135)))))
              {
                int v140 = 1;
                BOOL v14 = v175;
                goto LABEL_145;
              }
            }
            float v136 = sub_25B3FCCE0(v174, *v115 + 2, 0);
            BOOL v14 = v175;
            if (v136 > v104 && v136 < (float)(180.0 - v104))
            {
              int v140 = 1;
              goto LABEL_145;
            }
            if (v136 < v106 || v136 > (float)(180.0 - v106))
            {
              int v140 = 0;
              goto LABEL_145;
            }
            float32x2_t v142 = *(float32x2_t *)(v2 + 16);
            float32x2_t v141 = *(float32x2_t *)(v2 + 24);
            float32x2_t v143 = vmul_f32(vadd_f32(v142, v141), (float32x2_t)0x3F0000003F000000);
            int32x2_t v144 = (int32x2_t)v132[2];
            int32x2_t v145 = (int32x2_t)vsub_f32(v132[3], (float32x2_t)v144);
            *(float *)v144.i32 = -*(float *)&v145.i32[1];
            float32x2_t v146 = (float32x2_t)vzip1_s32(v144, v145);
            float32x2_t v147 = vadd_f32(v142, v146);
            float32x2_t v148 = vadd_f32(v141, v146);
            float32x2_t v149 = vsub_f32(v147, v142);
            float v150 = vaddv_f32(vmul_f32(vsub_f32(v143, v142), v149));
            float v151 = vaddv_f32(vmul_f32(v149, v149));
            if (v151 < 0.000001) {
              float v151 = 0.000001;
            }
            float32x2_t v152 = vmla_n_f32(v142, v149, v150 / v151);
            *(float32x2_t *)&long long v153 = vsub_f32(v148, v141);
            *(float32x2_t *)&long long v154 = vmul_f32(vsub_f32(v143, v141), *(float32x2_t *)&v153);
            *(float *)&long long v154 = vaddv_f32(*(float32x2_t *)&v154);
            float v155 = vaddv_f32(vmul_f32(*(float32x2_t *)&v153, *(float32x2_t *)&v153));
            if (v155 < 0.000001) {
              float v155 = 0.000001;
            }
            int8x8_t v172 = (int8x8_t)vmla_n_f32(v141, *(float32x2_t *)&v153, *(float *)&v154 / v155);
            int8x8_t v173 = (int8x8_t)v152;
            id v156 = v177;
            id v157 = v178;
            while (v156 != v157)
            {
              if (!*((_DWORD *)v156 + 4))
              {
                uint64_t v158 = *((unsigned int *)v156 + 3);
                if (v158 <= 1)
                {
                  LODWORD(v154) = 0;
                  LODWORD(v153) = *((_DWORD *)v156 + 2);
                  float64x2_t v159 = *v156;
                  long long v180 = *(_OWORD *)(*v156)[2].f32;
                  *((void *)&v153 + 1) = *((void *)&v180 + 1);
                  *((int8x8_t *)&v180 + v158) = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)&v153, *(int32x2_t *)&v154), 0), v173, v172);
                  *((void *)&v154 + 1) = *((void *)&v180 + 1);
                  *(_OWORD *)v159[2].f32 = v180;
                  *(float32x2_t *)&long long v154 = v159[2];
                  *(float32x2_t *)&long long v153 = v159[3];
                  long long v137 = v154;
                  DWORD2(v137) = v159[8].i32[0];
                  long long v160 = v153;
                  DWORD2(v160) = v159[8].i32[1];
                  DWORD2(v154) = DWORD2(v160);
                  DWORD2(v153) = DWORD2(v137);
                  *(_OWORD *)v159[4].f32 = v137;
                  *(_OWORD *)v159[6].f32 = v160;
                  float32x2_t v161 = v159[1];
                  long long src = v154;
                  long long v182 = v160;
                  long long v183 = v153;
                  long long v184 = v137;
                  if (v161) {
                    objc_copyStruct((void *)(*(void *)&v161 + 272), &src, 64, 1, 0);
                  }
                }
              }
              v156 += 3;
            }
            int32x2_t v162 = *(int32x2_t *)(v2 + 64);
            *(int8x8_t *)&long long v163 = v173;
            *(int8x8_t *)&long long v164 = v173;
            *((int32x2_t *)&v164 + 1) = v162;
            *(void *)&long long v137 = *(void *)(v2 + 24);
            long long v165 = v137;
            DWORD2(v165) = v162.i32[1];
            *(int8x8_t *)(v2 + 16) = v173;
            *((int32x2_t *)&v163 + 1) = vdup_lane_s32(v162, 1);
            *((int32x2_t *)&v137 + 1) = v162;
            *(_OWORD *)(v2 + 32) = v164;
            *(_OWORD *)(v2 + 48) = v165;
            uint64_t v166 = *(void *)(v2 + 8);
            long long src = v163;
            long long v182 = v165;
            long long v183 = v137;
            long long v184 = v164;
            if (v166)
            {
              objc_copyStruct((void *)(v166 + 272), &src, 64, 1, 0);
              int32x2_t v162 = *(int32x2_t *)(v2 + 64);
              uint64_t v166 = *(void *)(v2 + 8);
            }
            long long v167 = *(_OWORD *)(v2 + 16);
            *(int8x8_t *)&long long v168 = v172;
            *(int8x8_t *)(v2 + 24) = v172;
            *(void *)&long long v169 = v167;
            *((int32x2_t *)&v169 + 1) = v162;
            *(int8x8_t *)&long long v170 = v172;
            *((int32x2_t *)&v170 + 1) = vdup_lane_s32(v162, 1);
            *(_OWORD *)(v2 + 32) = v169;
            *(_OWORD *)(v2 + 48) = v170;
            DWORD2(v167) = v162.i32[1];
            *((int32x2_t *)&v168 + 1) = v162;
            long long src = v167;
            long long v182 = v170;
            long long v183 = v168;
            long long v184 = v169;
            if (v166) {
              objc_copyStruct((void *)(v166 + 272), &src, 64, 1, 0);
            }
            int v140 = 0;
            if (v115) {
LABEL_145:
            }
              operator delete(v115);
          }
          else
          {
            int v140 = 1;
            a1 = v110;
            BOOL v14 = v175;
            if (v115) {
              goto LABEL_145;
            }
          }
          if (__p[0]) {
            operator delete(__p[0]);
          }
          if (!v140) {
            goto LABEL_150;
          }
LABEL_149:
          v13 += 3;
          if (v13 == v14) {
            goto LABEL_150;
          }
          continue;
        }
      }
      goto LABEL_151;
    }
    if (!*((_DWORD *)v177 + 4))
    {
      unint64_t v38 = *v177;
      float32x2_t v39 = vsub_f32((*v177)[2], (*v177)[3]);
      float v40 = sqrtf(vaddv_f32(vmul_f32(v39, v39)));
      if (v40 > v12
        || (float32x2_t v41 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24)),
            v40 > (float)(v9 * sqrtf(vaddv_f32(vmul_f32(v41, v41))))))
      {
        float v42 = sub_25B3FCCE0((float32x2_t *)(v2 + 16), *v177 + 2, 0);
        float32x2_t v44 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24));
        if (sqrtf(vaddv_f32(vmul_f32(v44, v44))) >= v7) {
          float v45 = v8;
        }
        else {
          float v45 = v11;
        }
        float v46 = fabsf(v42 + -90.0);
        if (v46 <= v45)
        {
          if (v46 < v10) {
            goto LABEL_150;
          }
          uint64_t v66 = *((int *)v13 + 2);
          int32x2_t v67 = (int32x2_t)v38[2];
          int32x2_t v68 = (int32x2_t)vsub_f32(v38[3], (float32x2_t)v67);
          *(float *)v67.i32 = -*(float *)&v68.i32[1];
          float32x2_t v69 = (float32x2_t)vzip1_s32(v67, v68);
          float32x2_t v70 = *(float32x2_t *)((char *)v5 + 8 * v66);
          float32x2_t v71 = vadd_f32(v70, v69);
          uint64_t v72 = 1 - v66;
          float32x2_t v73 = vsub_f32(v70, v71);
          float v74 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)v5 + 8 * v72), v71), v73));
          float v75 = vaddv_f32(vmul_f32(v73, v73));
          if (v75 < 0.000001) {
            float v75 = 0.000001;
          }
          *(_OWORD *)__p = *v5;
          __p[v72] = (void *)vmla_n_f32(v71, v73, v74 / v75);
          _OWORD *v5 = *(_OWORD *)__p;
          long long v76 = *(_OWORD *)(v2 + 16);
          long long v77 = v76;
          DWORD2(v77) = *(_DWORD *)(v2 + 64);
          *(void *)&long long v43 = *(void *)(v2 + 24);
          long long v78 = v43;
          DWORD2(v78) = *(_DWORD *)(v2 + 68);
          DWORD2(v76) = DWORD2(v78);
          DWORD2(v43) = DWORD2(v77);
          *(_OWORD *)(v2 + 32) = v77;
          *(_OWORD *)(v2 + 48) = v78;
          uint64_t v62 = *(void *)(v2 + 8);
          long long src = v76;
          long long v182 = v78;
          long long v183 = v43;
          long long v184 = v77;
          if (!v62) {
            goto LABEL_150;
          }
          goto LABEL_43;
        }
        float v7 = a1[4];
        float v8 = a1[5];
        float v10 = a1[7];
        float v9 = a1[8];
        float v11 = a1[6];
        float v12 = a1[2];
      }
    }
    if (*((_DWORD *)v13 + 4) != 1) {
      goto LABEL_13;
    }
    unint64_t v15 = *v13;
    float32x2_t v16 = vsub_f32((*v13)[2], (*v13)[3]);
    float v17 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
    if (v17 <= v12)
    {
      float32x2_t v18 = vsub_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)(v2 + 24));
      if (v17 <= (float)(v9 * sqrtf(vaddv_f32(vmul_f32(v18, v18))))) {
        goto LABEL_13;
      }
    }
    float v19 = sub_25B3FCCE0((float32x2_t *)(v2 + 16), *v13 + 2, 0);
    float32x2_t v20 = *(float32x2_t *)(v2 + 16);
    float32x2_t v21 = *(float32x2_t *)(v2 + 24);
    *(float32x2_t *)&long long v22 = vsub_f32(v20, v21);
    float v23 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v22, *(float32x2_t *)&v22))) >= v7 ? v8 : v11;
    float v24 = fabsf(v19 + -90.0);
    if (v24 > v23)
    {
LABEL_13:
      int v174 = (float32x2_t *)(v2 + 16);
      goto LABEL_67;
    }
    if (v24 < v10) {
      goto LABEL_150;
    }
    uint64_t v47 = *((int *)v13 + 2);
    float32x2_t v48 = vmul_f32(vadd_f32(v20, v21), (float32x2_t)0x3F0000003F000000);
    float32x2_t v49 = v15[2];
    float32x2_t v50 = vsub_f32(v15[3], v49);
    float v51 = vaddv_f32(vmul_f32(vsub_f32(v48, v49), v50));
    *(float *)&long long v22 = vaddv_f32(vmul_f32(v50, v50));
    if (*(float *)&v22 < 0.000001) {
      *(float *)&long long v22 = 0.000001;
    }
    uint64_t v52 = (void *)vmla_n_f32(v49, v50, v51 / *(float *)&v22);
    uint64_t v53 = 1 - v47;
    float32x2_t v54 = *(float32x2_t *)((char *)v5 + 8 * (1 - v47));
    float32x2_t v55 = vsub_f32(v48, (float32x2_t)v52);
    float v56 = vaddv_f32(vmul_f32(v55, v55));
    *(_OWORD *)__p = *v5;
    __p[v47] = v52;
    _OWORD *v5 = *(_OWORD *)__p;
    long long v57 = *(_OWORD *)(v2 + 16);
    *(void *)&long long v22 = *(void *)(v2 + 24);
    long long v60 = v22;
    uint64_t v58 = *(void *)(v2 + 64);
    *(void *)&long long v59 = *(void *)(v2 + 16);
    *((void *)&v59 + 1) = v58;
    DWORD2(v60) = HIDWORD(v58);
    if (v56 >= 0.000001) {
      float v61 = v56;
    }
    else {
      float v61 = 0.000001;
    }
    DWORD2(v57) = HIDWORD(v58);
    *((void *)&v22 + 1) = v58;
    *(_OWORD *)(v2 + 32) = v59;
    *(_OWORD *)(v2 + 48) = v60;
    uint64_t v62 = *(void *)(v2 + 8);
    long long src = v57;
    long long v182 = v60;
    long long v183 = v22;
    long long v184 = v59;
    if (v62)
    {
      objc_copyStruct((void *)(v62 + 272), &src, 64, 1, 0);
      uint64_t v58 = *(void *)(v2 + 64);
      uint64_t v62 = *(void *)(v2 + 8);
    }
    *(_OWORD *)__p = *v5;
    __p[v53] = (void *)vmla_n_f32((float32x2_t)v52, v55, vaddv_f32(vmul_f32(vsub_f32(v54, (float32x2_t)v52), v55)) / v61);
    _OWORD *v5 = *(_OWORD *)__p;
    long long v63 = *(_OWORD *)(v2 + 16);
    *(void *)&long long v64 = *(void *)(v2 + 16);
    *((void *)&v64 + 1) = v58;
    *(void *)&long long v22 = *(void *)(v2 + 24);
    long long v65 = v22;
    DWORD2(v65) = HIDWORD(v58);
    *(_OWORD *)(v2 + 32) = v64;
    *(_OWORD *)(v2 + 48) = v65;
    DWORD2(v63) = HIDWORD(v58);
    *((void *)&v22 + 1) = v58;
    long long src = v63;
    long long v182 = v65;
    long long v183 = v22;
    long long v184 = v64;
    if (!v62)
    {
LABEL_150:
      BOOL v14 = v177;
      uint64_t v3 = v171;
LABEL_151:
      if (v14) {
        operator delete(v14);
      }
      goto LABEL_153;
    }
LABEL_43:
    objc_copyStruct((void *)(v62 + 272), &src, 64, 1, 0);
    goto LABEL_150;
  }
}

void sub_25B4EE57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4EE5D4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 151);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 136);
  }
  if (v5)
  {
    uint64_t v7 = a4;
    float v9 = *(float *)(a2 + 36);
    *(_OWORD *)v83[0].f32 = *(_OWORD *)(a3 + 16);
    if (a4 != a5)
    {
      float v11 = 0;
      long long v76 = (const void **)(a3 + 128);
      do
      {
        uint64_t v12 = *(unsigned __int8 *)(v7 + 151);
        if ((v12 & 0x80u) == 0) {
          uint64_t v13 = *(unsigned __int8 *)(v7 + 151);
        }
        else {
          uint64_t v13 = *(void *)(v7 + 136);
        }
        if (!v13) {
          goto LABEL_103;
        }
        uint64_t v14 = *(unsigned __int8 *)(a3 + 151);
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(a3 + 136);
        }
        if (v13 != v14) {
          goto LABEL_23;
        }
        if (v15 >= 0) {
          float32x2_t v16 = (unsigned __int8 *)v76;
        }
        else {
          float32x2_t v16 = (unsigned __int8 *)*v76;
        }
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v7 + 128), v16, *(void *)(v7 + 136))) {
            goto LABEL_23;
          }
        }
        else if (*(unsigned char *)(v7 + 151))
        {
          uint64_t v17 = 0;
          while (*(unsigned __int8 *)(v7 + v17 + 128) == v16[v17])
          {
            if (v12 == ++v17) {
              goto LABEL_103;
            }
          }
LABEL_23:
          long long v82 = *(_OWORD *)(v7 + 16);
          sub_25B40E03C(&v80, v83, (float32x2_t *)&v82);
          float32x2_t v18 = v80;
          float v19 = v80 + 1;
          float v20 = *v80;
          if (v80 == v81 || v19 == v81)
          {
            long long v22 = v80;
            if (v20 >= v9) {
              goto LABEL_43;
            }
          }
          else
          {
            float v23 = *v80;
            float v24 = v80 + 1;
            uint64_t v25 = v80;
            int v26 = v80 + 1;
            do
            {
              float v27 = *v26++;
              float v28 = v27;
              if (v27 < v23)
              {
                float v23 = v28;
                uint64_t v25 = v24;
              }
              float v24 = v26;
            }
            while (v26 != v81);
            BOOL v40 = *v25 < v9;
            long long v22 = v80;
            if (!v40)
            {
LABEL_43:
              *(float *)&double v37 = sub_25B3FCCE0(v83, (float32x2_t *)&v82, 0);
              LODWORD(v39) = 1127153664;
              BOOL v40 = *(float *)&v37 > 5.0 && *(float *)&v37 < 175.0;
              if (!v40) {
                goto LABEL_102;
              }
              sub_25B40D7C0(&v78, v83, (float32x2_t *)&v82, v37, v39, v38);
              float32x2_t v44 = v78;
              if (v78 != v79)
              {
                float v45 = v78 + 3;
                if (v78[1] >= *v78) {
                  float v46 = *v78;
                }
                else {
                  float v46 = v78[1];
                }
                uint64_t v47 = v78 + 2;
                if (v78 + 2 != v79 && v45 != v79)
                {
                  float v48 = *v47;
                  float32x2_t v49 = v78 + 3;
                  do
                  {
                    float v50 = *v49++;
                    float v51 = v50;
                    if (v50 < v48)
                    {
                      float v48 = v51;
                      uint64_t v47 = v45;
                    }
                    float v45 = v49;
                  }
                  while (v49 != v79);
                }
                float v52 = *v47;
                sub_25B40DA84((uint64_t *)&__p, (float32x2_t *)&v82, v83[0], v83[1], v41, v42, v43);
                uint64_t v53 = __p;
                if (v46 >= v9 || v52 < v9)
                {
LABEL_98:
                  if (v53) {
                    goto LABEL_99;
                  }
                }
                else
                {
                  if ((*(unsigned char *)__p & 2) != 0)
                  {
                    if (v44[1] >= *v44) {
                      float32x2_t v54 = v44;
                    }
                    else {
                      float32x2_t v54 = v44 + 1;
                    }
                    unint64_t v55 = (unint64_t)((char *)v54 - (char *)v44) >> 2;
                    long long v57 = a1[1];
                    float v56 = a1[2];
                    if (v57 >= (void *)v56)
                    {
                      int v75 = v55;
                      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - v11) >> 3) + 1;
                      if (v66 > 0xAAAAAAAAAAAAAAALL) {
                        sub_25B3FBC4C();
                      }
                      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v11) >> 3);
                      if (2 * v67 > v66) {
                        unint64_t v66 = 2 * v67;
                      }
                      if (v67 >= 0x555555555555555) {
                        unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v68 = v66;
                      }
                      if (v68) {
                        unint64_t v68 = (unint64_t)sub_25B413D74(v68);
                      }
                      else {
                        uint64_t v69 = 0;
                      }
                      unint64_t v70 = v68 + 8 * (((char *)v57 - v11) >> 3);
                      *(void *)unint64_t v70 = v7;
                      *(_DWORD *)(v70 + 8) = v75;
                      *(void *)(v70 + 12) = 0x1FFFFFFFFLL;
                      float32x2_t v71 = (char *)v70;
                      if (v57 != (void *)v11)
                      {
                        do
                        {
                          long long v72 = *(_OWORD *)(v57 - 3);
                          *((_DWORD *)v71 - 2) = *((_DWORD *)v57 - 2);
                          *(_OWORD *)(v71 - 24) = v72;
                          v71 -= 24;
                          v57 -= 3;
                        }
                        while (v57 != (void *)v11);
                        float v11 = (char *)*a1;
                      }
                      uint64_t v58 = (void *)(v70 + 24);
                      *a1 = v71;
                      a1[1] = v58;
                      a1[2] = (void *)(v68 + 24 * v69);
                      if (v11)
                      {
                        float32x2_t v73 = v11;
                        float v74 = v58;
                        operator delete(v73);
                        uint64_t v58 = v74;
                      }
                      float v11 = v71;
                    }
                    else
                    {
                      void *v57 = v7;
                      *((_DWORD *)v57 + 2) = v55;
                      uint64_t v58 = v57 + 3;
                      *(void *)((char *)v57 + 12) = 0x1FFFFFFFFLL;
                    }
                    a1[1] = v58;
                    goto LABEL_98;
                  }
LABEL_99:
                  operator delete(v53);
                }
              }
              if (v44) {
                operator delete(v44);
              }
LABEL_102:
              operator delete(v18);
              goto LABEL_103;
            }
            do
            {
              float v29 = v19 + 1;
              if (*v19 < v20)
              {
                float v20 = *v19;
                long long v22 = v19;
              }
              ++v19;
            }
            while (v29 != v81);
          }
          unint64_t v30 = (unint64_t)((char *)v22 - (char *)v80) >> 2;
          if ((v30 & 0x80000000) == 0) {
            int v31 = (unint64_t)((char *)v22 - (char *)v80) >> 2;
          }
          else {
            int v31 = v30 + 1;
          }
          int v32 = v31 >> 1;
          int v33 = v30 - (v31 & 0xFFFFFFFE);
          float32x2_t v35 = (char *)a1[1];
          uint64_t v34 = (char *)a1[2];
          if (v35 >= v34)
          {
            unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v11) >> 3) + 1;
            if (v59 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FBC4C();
            }
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v11) >> 3);
            if (2 * v60 > v59) {
              unint64_t v59 = 2 * v60;
            }
            if (v60 >= 0x555555555555555) {
              unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61) {
              unint64_t v61 = (unint64_t)sub_25B413D74(v61);
            }
            else {
              uint64_t v62 = 0;
            }
            unint64_t v63 = v61 + 8 * ((v35 - v11) >> 3);
            *(void *)unint64_t v63 = v7;
            *(_DWORD *)(v63 + 8) = v32;
            *(_DWORD *)(v63 + 12) = v33;
            *(_DWORD *)(v63 + 16) = 0;
            long long v64 = (char *)v63;
            if (v35 != v11)
            {
              do
              {
                long long v65 = *(_OWORD *)(v35 - 24);
                *((_DWORD *)v64 - 2) = *((_DWORD *)v35 - 2);
                *(_OWORD *)(v64 - 24) = v65;
                v64 -= 24;
                v35 -= 24;
              }
              while (v35 != v11);
              float v11 = (char *)*a1;
            }
            float v36 = (_DWORD *)(v63 + 24);
            *a1 = v64;
            a1[1] = (void *)(v63 + 24);
            a1[2] = (void *)(v61 + 24 * v62);
            if (v11) {
              operator delete(v11);
            }
            float v11 = v64;
          }
          else
          {
            *(void *)float32x2_t v35 = v7;
            *((_DWORD *)v35 + 2) = v32;
            *((_DWORD *)v35 + 3) = v33;
            float v36 = v35 + 24;
            *((_DWORD *)v35 + 4) = 0;
          }
          a1[1] = v36;
          goto LABEL_102;
        }
LABEL_103:
        v7 += 176;
      }
      while (v7 != a5);
    }
  }
}

void sub_25B4EEAE0(_Unwind_Exception *a1)
{
  operator delete(v5);
  operator delete(v4);
  operator delete(v3);
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_25B4EEB3C(uint64_t a1, uint64_t a2, double a3)
{
  long long v8 = *(_OWORD *)(a1 + 16);
  *((void *)&v3 + 1) = *((void *)&v8 + 1);
  *((double *)&src[-1] + a2) = a3;
  *((void *)&v4 + 1) = *((void *)&v8 + 1);
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)&long long v4 = *(void *)(a1 + 16);
  *(void *)&long long v3 = *(void *)(a1 + 24);
  long long v5 = v4;
  DWORD2(v5) = *(_DWORD *)(a1 + 64);
  long long v6 = v3;
  DWORD2(v6) = *(_DWORD *)(a1 + 68);
  DWORD2(v4) = DWORD2(v6);
  DWORD2(v3) = DWORD2(v5);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  src[0] = v4;
  src[1] = v6;
  src[2] = v3;
  src[3] = v5;
  if (v7) {
    objc_copyStruct((void *)(v7 + 272), src, 64, 1, 0);
  }
}

uint64_t **sub_25B4EEBBC(uint64_t **a1, int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    float v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    float v10 = (uint64_t *)**a1;
    float v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      float v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_25B4EEC88(void *a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  objc_msgSend_quad(v1, v2, v3);
  float32x4_t v50 = v4;
  objc_msgSend_quad(v1, v5, v6);
  float32x4_t v48 = v7;

  if (v1)
  {
    objc_copyStruct(dest, v1 + 240, 16, 1, 0);
    float32x4_t v46 = (float32x4_t)dest[0];
    objc_copyStruct(dest, v1 + 240, 16, 1, 0);
    float32x4_t v44 = (float32x4_t)dest[0];
    objc_copyStruct(dest, v1 + 256, 16, 1, 0);
    float32x4_t v10 = v48;
    float32x4_t v11 = vsubq_f32(v50, v46);
    float32x4_t v12 = (float32x4_t)dest[0];
    float32x4_t v13 = v44;
  }
  else
  {
    float32x4_t v13 = 0uLL;
    float32x4_t v10 = v48;
    float32x4_t v11 = v50;
    float32x4_t v12 = 0uLL;
  }
  float32x4_t v14 = vsubq_f32(v10, v13);
  float v15 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v12, v12)));
  float v16 = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v11, v12))
              / sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v11, v11))))
      * v15;
  float v17 = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v14, v12))
              / sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v14, v14))))
      * v15;
  float v18 = vmlas_n_f32((float)-v12.f32[1] * v11.f32[0], v11.f32[1], v12.f32[0]);
  float v19 = vmlas_n_f32((float)-v12.f32[1] * v14.f32[0], v14.f32[1], v12.f32[0]);
  long long v53 = 0uLL;
  if (v18 <= 0.0 || v19 <= 0.0)
  {
    if (v18 >= 0.0 || v19 >= 0.0)
    {
      if (v18 > 0.0 || v19 < 0.0)
      {
        v12.i64[0] = 0;
        float32x4_t v49 = v12;
        if (v18 < 0.0 || v19 > 0.0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    else if (v16 > v17)
    {
      goto LABEL_16;
    }
  }
  else if (v16 <= v17)
  {
LABEL_16:
    *(void *)&long long v53 = v50.i64[0];
    *((void *)&v53 + 1) = v10.i64[0];
    float32x4_t v49 = v10;
    goto LABEL_17;
  }
  *(void *)&long long v53 = v10.i64[0];
  *((void *)&v53 + 1) = v50.i64[0];
  float32x4_t v49 = v50;
LABEL_17:
  objc_msgSend_quad(v1, v8, v9);
  float v51 = v20;
  objc_msgSend_quad(v1, v21, v22);
  int32x4_t v47 = v23;
  objc_msgSend_quad(v1, v24, v25);
  int32x4_t v45 = v26;
  objc_msgSend_quad(v1, v27, v28);
  int v43 = v29;
  unint64_t v30 = (float *)operator new(0x10uLL);
  int v31 = v30;
  float v32 = v51;
  *unint64_t v30 = v51;
  *(void *)(v30 + 1) = vzip2q_s32(v47, v45).u64[0];
  *((_DWORD *)v30 + 3) = v43;
  uint64_t v33 = 1;
  float v34 = v51;
  float32x2_t v35 = (char *)v30;
  do
  {
    if (v30[v33] < v34)
    {
      float v34 = v30[v33];
      float32x2_t v35 = (char *)&v30[v33];
    }
    ++v33;
  }
  while (v33 != 4);
  __int32 v36 = *(_DWORD *)v35;
  uint64_t v37 = 1;
  double v38 = (char *)v30;
  do
  {
    if (v32 < v30[v37])
    {
      float v32 = v30[v37];
      double v38 = (char *)&v30[v37];
    }
    ++v37;
  }
  while (v37 != 4);
  long long v39 = v53;
  long long v40 = v53;
  DWORD2(v40) = *(_DWORD *)v38;
  float32x4_t v41 = v49;
  float32x4_t v42 = v49;
  v42.i32[2] = *(_DWORD *)v38;
  v41.i32[2] = v36;
  DWORD2(v39) = v36;
  dest[0] = v40;
  dest[1] = v42;
  dest[2] = v41;
  dest[3] = v39;
  if (v1) {
    objc_copyStruct(v1 + 272, dest, 64, 1, 0);
  }
  operator delete(v31);
}

void sub_25B4EEF7C(_Unwind_Exception *a1)
{
  operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_25B4EEFD0(void *a1, int a2, __n128 *a3, __n128 *a4, _DWORD *a5, _OWORD *a6)
{
  float32x4_t v11 = a1;
  float32x4_t v12 = v11;
  if (v11)
  {
    v11[105] = a2;
    if (a2)
    {
      __n128 src = *a3;
      objc_copyStruct(v11 + 240, &src, 16, 1, 0);
      __n128 src = *a4;
      objc_copyStruct(v12 + 256, &src, 16, 1, 0);
      goto LABEL_11;
    }
  }
  else if (a2)
  {
    goto LABEL_11;
  }
  float32x4_t v13 = v11;
  __n128 v32 = *a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_circleCenter(v13, v14, v15);
    v32.n128_u64[0] = v16;
  }
  float32x2_t v17 = (float32x2_t)sub_25B477C40(v13).n128_u64[0];
  float32x2_t v19 = vsub_f32((float32x2_t)v18.n128_u64[0], v17);
  v20.n128_f32[0] = vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v32.n128_u64[0], v17), v19));
  float v21 = vaddv_f32(vmul_f32(v19, v19));
  if (v21 < 0.000001) {
    float v21 = 0.000001;
  }
  v20.n128_u64[0] = (unint64_t)vsub_f32(vmla_n_f32(v17, v19, v20.n128_f32[0] / v21), (float32x2_t)v32.n128_u64[0]);
  int32x2_t v22 = (int32x2_t)vmul_f32((float32x2_t)v20.n128_u64[0], (float32x2_t)v20.n128_u64[0]);
  v22.i32[0] = vadd_f32((float32x2_t)v22, (float32x2_t)vdup_lane_s32(v22, 1)).u32[0];
  float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  v20.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v20.n128_u64[0], vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  v18.n128_u64[0] = (unint64_t)vmul_f32(vadd_f32(v17, (float32x2_t)v18.n128_u64[0]), (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V0.2S, #-3.0 }
  v18.n128_u64[0] = (unint64_t)vmla_f32((float32x2_t)v18.n128_u64[0], _D0, (float32x2_t)v20.n128_u64[0]);
  v18.n128_u32[2] = 0;
  __n128 v31 = v20;
  __n128 v33 = v18;

  __n128 src = v33;
  if (v12)
  {
    objc_copyStruct(v13 + 240, &src, 16, 1, 0);
    __n128 v30 = v31;
    v30.n128_u32[2] = 0;
    __n128 src = v30;
    objc_copyStruct(v13 + 256, &src, 16, 1, 0);
  }
LABEL_11:
  sub_25B4EEC88(v12);
  if (v12)
  {
    *((_DWORD *)v12 + 31) = *a5;
    *((_OWORD *)v12 + 14) = *a6;
  }
}

void sub_25B4EF1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4EF1CC(void *a1, void *a2, unsigned int a3, uint64_t a4, float32_t a5)
{
  id v40 = a1;
  id v9 = a2;
  float32x2_t v12 = (float32x2_t)sub_25B477C40(v9).n128_u64[0];
  float32x2_t v14 = (float32x2_t)v13;
  unint64_t v15 = 0;
  v42[0] = v12;
  v42[1] = (float32x2_t)v13;
  uint64_t v16 = a3;
  int32x2_t v17 = (int32x2_t)vsub_f32((float32x2_t)v13, v12);
  *(float *)v13.i32 = -*(float *)&v17.i32[1];
  float32x2_t v18 = (float32x2_t)vzip1_s32(v13, v17);
  while (objc_msgSend_count(v40, v10, v11) > v15)
  {
    objc_msgSend_objectAtIndexedSubscript_(v40, v19, v15);
    __n128 v20 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    float v21 = v20;
    if (v16 == v15) {
      goto LABEL_23;
    }
    float32x2_t v22 = (float32x2_t)sub_25B477C40(v20).n128_u64[0];
    float32x2_t v24 = v23;
    v41[0] = v22;
    v41[1] = v23;
    float32x2_t v25 = v42[sub_25B40E348(v42, v41)];
    float32x2_t v27 = v41[v26];
    float32x2_t v28 = vsub_f32(v25, v27);
    if (sqrtf(vaddv_f32(vmul_f32(v28, v28))) < a5)
    {
      float32x2_t v29 = vsub_f32(v12, v25);
      if (sqrtf(vaddv_f32(vmul_f32(v29, v29))) < 0.00001
        || (float32x2_t v30 = vsub_f32(v12, v27), sqrtf(vaddv_f32(vmul_f32(v30, v30))) < 0.00001))
      {
        if (!v21 || v21[29] != 3) {
          *(unsigned char *)(a4 + 3) = 0;
        }
      }
      float32x2_t v31 = vsub_f32(v14, v25);
      if (sqrtf(vaddv_f32(vmul_f32(v31, v31))) < 0.00001
        || (float32x2_t v32 = vsub_f32(v14, v27), sqrtf(vaddv_f32(vmul_f32(v32, v32))) < 0.00001))
      {
        if (v21 && v21[29] == 3) {
          goto LABEL_23;
        }
        *(unsigned char *)(a4 + 1) = 0;
      }
    }
    if (!v21 || v21[29] != 3)
    {
      float32x2_t v33 = vsub_f32(v24, v22);
      int32x2_t v34 = (int32x2_t)vmul_f32(v33, v18);
      if (vaddv_f32((float32x2_t)v34) != 0.0)
      {
        float32x2_t v35 = v22;
        int32x2_t v36 = (int32x2_t)vmul_f32(vsub_f32(v12, v22), v18);
        float32x2_t v37 = vmla_n_f32(v22, v33, vdiv_f32(vadd_f32((float32x2_t)v36, (float32x2_t)vdup_lane_s32(v36, 1)), vadd_f32((float32x2_t)v34, (float32x2_t)vdup_lane_s32(v34, 1))).f32[0]);
        if (sub_25B40DB9C(v37, v35, v24, 0.00001) < a5)
        {
          float32x2_t v38 = vsub_f32(v12, v37);
          if (sqrtf(vaddv_f32(vmul_f32(v38, v38))) < a5) {
            *(unsigned char *)(a4 + 3) = 0;
          }
          float32x2_t v39 = vsub_f32(v14, v37);
          if (sqrtf(vaddv_f32(vmul_f32(v39, v39))) < a5) {
            *(unsigned char *)(a4 + 1) = 0;
          }
        }
      }
    }
LABEL_23:

    ++v15;
  }
}

void sub_25B4EF430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4EF460(void *a1, void *a2, void *a3, __n128 *a4, __n128 *a5, int a6)
{
  v188[8] = *MEMORY[0x263EF8340];
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = v8;
  id v12 = v9;
  unint64_t v15 = v12;
  long long v154 = v10;
  if (v11)
  {
    int v157 = objc_msgSend_count(v11, v13, v14);
    if (v15) {
      goto LABEL_3;
    }
  }
  else
  {
    int v157 = 0;
    if (v12)
    {
LABEL_3:
      int v16 = objc_msgSend_count(v15, v13, v14);
      long long v170 = 0;
      uint64_t v171 = 0;
      long long v169 = (uint64_t *)&v170;
      LODWORD(dest[0]) = 0;
      if (v16 >= 1)
      {
        uint64_t v18 = 0;
        uint64_t v155 = v16;
        do
        {
          if (v157 >= 1)
          {
            for (uint64_t i = 0; i != v157; ++i)
            {
              __n128 v20 = objc_msgSend_objectAtIndexedSubscript_(v15, v17, v18);
              float32x2_t v23 = objc_msgSend_identifier(v20, v21, v22);
              float32x2_t v25 = objc_msgSend_objectAtIndexedSubscript_(v11, v24, i);
              float32x2_t v28 = objc_msgSend_identifier(v25, v26, v27);
              int isEqual = objc_msgSend_isEqual_(v23, v29, (uint64_t)v28);

              if (isEqual) {
                *((_DWORD *)sub_25B4EEBBC(&v169, v18, dest) + 8) = i;
              }
            }
          }
          LODWORD(dest[0]) = ++v18;
        }
        while (v18 != v155);
      }
      goto LABEL_14;
    }
  }
  long long v170 = 0;
  uint64_t v171 = 0;
  long long v169 = (uint64_t *)&v170;
LABEL_14:

  int64_t v33 = 0;
  int v168 = -1;
  long long v167 = 0uLL;
  while (1)
  {
    LODWORD(v176) = v33;
    if (objc_msgSend_count(v15, v31, v32) <= (unint64_t)v33) {
      break;
    }
    float32x2_t v35 = objc_msgSend_objectAtIndexedSubscript_(v15, v34, v33);
    int32x2_t v36 = v35;
    float32x2_t v37 = v170;
    if (!v170) {
      goto LABEL_25;
    }
    float32x2_t v38 = &v170;
    do
    {
      float32x2_t v39 = v37;
      id v40 = v38;
      int64_t v41 = *((int *)v37 + 7);
      float32x4_t v42 = v37 + 1;
      if (v33 <= v41)
      {
        float32x4_t v42 = v39;
        float32x2_t v38 = (void **)v39;
      }
      float32x2_t v37 = (void *)*v42;
    }
    while (v37);
    if (v38 == &v170) {
      goto LABEL_25;
    }
    if (v33 > v41) {
      float32x2_t v39 = v40;
    }
    if (v33 < *((int *)v39 + 7))
    {
LABEL_25:
      sub_25B4EEFD0(v35, 0, a4, a5, &v168, &v167);
      goto LABEL_26;
    }
    uint64_t v44 = *((int *)sub_25B4EEBBC(&v169, v33, &v176) + 8);
    if (a6)
    {
      if (a6 == 3)
      {
        objc_msgSend_objectAtIndexedSubscript_(v11, v43, v44);
        int32x4_t v45 = (_DWORD *)objc_claimAutoreleasedReturnValue();
        if (v45)
        {
          BOOL v46 = v45[30] == 3;

          if (v46) {
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v43, v44);
      int32x4_t v47 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      if (v47)
      {
        BOOL v48 = v47[29] == 3;

        if (v48)
        {
LABEL_34:
          sub_25B4EEFD0(v36, 0, a4, a5, &v168, &v167);
          goto LABEL_26;
        }
      }
    }
    uint64_t v49 = objc_msgSend_objectAtIndexedSubscript_(v11, v43, v44);
    float v51 = (void *)v49;
    if (v49)
    {
      objc_copyStruct(dest, (const void *)(v49 + 240), 16, 1, 0);
      long long v52 = dest[0];
    }
    else
    {
      long long v52 = 0uLL;
    }
    *(_OWORD *)uint64_t v181 = v52;
    uint64_t v53 = objc_msgSend_objectAtIndexedSubscript_(v11, v50, v44);
    uint64_t v54 = (void *)v53;
    if (v53)
    {
      objc_copyStruct(dest, (const void *)(v53 + 256), 16, 1, 0);
      long long v55 = dest[0];
    }
    else
    {
      long long v55 = 0uLL;
    }
    *(_OWORD *)uint64_t v179 = v55;
    sub_25B4EEFD0(v36, 2, (__n128 *)v181, (__n128 *)v179, &v168, &v167);

LABEL_26:
    ++v33;
  }
  id v56 = v11;
  id v57 = v15;
  uint64_t v58 = 0;
  float32x4_t v59 = *(float32x4_t *)a5;
  float32x4_t v60 = vmulq_f32(*(float32x4_t *)a5, (float32x4_t)xmmword_25B5F10E0);
  int32x2_t v61 = (int32x2_t)vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
  v61.i32[0] = vadd_f32((float32x2_t)v61, (float32x2_t)vdup_lane_s32(v61, 1)).u32[0];
  float32x2_t v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
  float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
  *(float32x2_t *)v59.f32 = vmul_n_f32((float32x2_t)a5->n128_u64[0], vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
  float32x2_t v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.f32, 1);
  LODWORD(v153) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).u32[0];
  float32x4_t v165 = v59;
  v59.i32[2] = 0;
  __asm { FMOV            V2.4S, #5.0 }
  float32x4_t v158 = _Q2;
  float32x4_t v160 = *(float32x4_t *)a4;
  float32x4_t v156 = vmlaq_f32(*(float32x4_t *)a4, _Q2, v59);
  char v69 = 1;
  do
  {
    int v70 = v69 & 1;
    if (v69) {
      float v71 = -0.5236;
    }
    else {
      float v71 = -0.34907;
    }
    if (v69) {
      float v72 = 0.34907;
    }
    else {
      float v72 = 0.5236;
    }
    __float2 v73 = __sincosf_stret(v71);
    v74.f32[0] = -v73.__sinval;
    v74.i32[1] = LODWORD(v73.__cosval);
    v75.i32[3] = v165.i32[3];
    *(float32x2_t *)v75.f32 = vmla_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v73.__sinval), LODWORD(v73.__cosval)), v165.f32[0]), v64, v74);
    v75.i32[2] = 0;
    float32x4_t v162 = v75;
    long long v76 = (float32x4_t *)&dest[4 * v58];
    __float2 v79 = __sincosf_stret(v72);
    char v69 = 0;
    v80.f32[0] = -v79.__sinval;
    v80.i32[1] = LODWORD(v79.__cosval);
    v81.i32[3] = v165.i32[3];
    *(float32x2_t *)v81.f32 = vmla_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v79.__sinval), LODWORD(v79.__cosval)), v165.f32[0]), v64, v80);
    v81.i32[2] = 0;
    float32x4_t *v76 = v160;
    v76[1] = vmlaq_f32(v160, v158, v162);
    v76[2] = v156;
    v76[3] = vmlaq_f32(v160, v158, v81);
    uint64_t v58 = 1;
  }
  while (v70);
  int64_t v82 = 0;
  float v83 = fabsf(v153);
  while (objc_msgSend_count(v57, v77, *(void *)&v78) > (unint64_t)v82)
  {
    uint64_t v85 = objc_msgSend_objectAtIndexedSubscript_(v57, v84, v82);
    objc_msgSend_quad((void *)v85, v86, v87);
    float32x4_t v166 = v88;
    objc_msgSend_quad((void *)v85, v89, v90);
    float32x4_t v163 = v91;
    int v186 = 16843009;
    memset_pattern16(__b, &unk_25B5F18D0, 0x10uLL);
    if (objc_msgSend_individualUpdate((void *)v85, v92, v93))
    {
      if (objc_msgSend_individualUpdate((void *)v85, v94, v95) == 2)
      {
        float32x2_t v98 = v170;
        if (v170)
        {
          float32x2_t v99 = &v170;
          float32x2_t v100 = v170;
          do
          {
            float v101 = v100;
            float v102 = v99;
            int64_t v103 = *((int *)v100 + 7);
            if (v82 <= v103) {
              float32x2_t v99 = (void **)v100;
            }
            else {
              ++v100;
            }
            float32x2_t v100 = (void *)*v100;
          }
          while (v100);
          if (v99 != &v170)
          {
            if (v82 > v103) {
              float v101 = v102;
            }
            if (v82 >= *((int *)v101 + 7))
            {
              while (1)
              {
                while (1)
                {
                  int64_t v104 = *((int *)v98 + 7);
                  if (v82 >= v104) {
                    break;
                  }
                  float32x2_t v98 = (void *)*v98;
                  if (!v98) {
                    goto LABEL_122;
                  }
                }
                if (v82 <= v104) {
                  break;
                }
                float32x2_t v98 = (void *)v98[1];
                if (!v98) {
LABEL_122:
                }
                  sub_25B3FC090("map::at:  key not found");
              }
              unint64_t v105 = *((unsigned int *)v98 + 8);
              if ((v105 & 0x80000000) == 0 && objc_msgSend_count(v56, v96, v97) > v105)
              {
                float v107 = objc_msgSend_objectAtIndexedSubscript_(v56, v106, v105);
                id v152 = v56;
                objc_msgSend_quad(v107, v108, v109);
                float32x4_t v151 = v110;
                objc_msgSend_quad(v107, v111, v112);
                float v114 = fabsf(COERCE_FLOAT(vsubq_f32(v166, v151).i32[2])) / 0.15;
                if (v114 <= 1.0) {
                  float v115 = v114;
                }
                else {
                  float v115 = 1.0;
                }
                float v116 = fabsf(COERCE_FLOAT(vsubq_f32(v113, v163).i32[2])) / 0.15;
                if (v116 <= 1.0) {
                  float v117 = v116;
                }
                else {
                  float v117 = 1.0;
                }
                unint64_t v183 = sub_25B477C40((void *)v85).n128_u64[0];
                uint64_t v184 = v118;
                int v186 = 0;
                BYTE1(v186) = (unsigned __int16)objc_msgSend_edgeStates(v107, v119, v120) >> 8;
                HIBYTE(v186) = objc_msgSend_edgeStates(v107, v121, v122) >> 24;
                if (v83 < 0.86603)
                {
                  if (sub_25B47D97C((uint64_t)dest, 4, (uint64_t)&v183)) {
                    HIBYTE(v186) = 0;
                  }
                  if (sub_25B47D97C((uint64_t)v188, 4, (uint64_t)&v184)) {
                    BYTE1(v186) = 0;
                  }
                }
                v181[0] = 0;
                v181[1] = 0;
                uint64_t v182 = 0;
                v179[0] = 0;
                v179[1] = 0;
                uint64_t v180 = 0;
                long long v176 = (void *)sub_25B477C40((void *)v85).n128_u64[0];
                uint64_t v177 = v123;
                float32x2_t v124 = (float32x2_t)sub_25B477C40(v107).n128_u64[0];
                if (sub_25B4D5C54((float32x2_t *)&v176, v181, v179, v124, v125, 0.05))
                {
                  float32x2_t v126 = (float32x2_t)sub_25B477C40((void *)v85).n128_u64[0];
                  uint64_t v127 = (float32x2_t *)v179[0];
                  long long v128 = (float32x2_t *)v179[1];
                  float v129 = sub_25B4D637C((float32x2_t *)v179[0], (float32x2_t *)v179[1], v126);
                  sub_25B477C40((void *)v85);
                  float v131 = sub_25B4D637C(v127, v128, v130);
                  if (v129 > 0.0)
                  {
                    HIBYTE(v186) = 1;
                    float v132 = v129 / 0.15;
                    if ((float)(v129 / 0.15) > 1.0) {
                      float v132 = 1.0;
                    }
                    __b[3] = v132;
                  }
                  id v56 = v152;
                  if (v131 > 0.0)
                  {
                    BYTE1(v186) = 1;
                    float v133 = v131 / 0.15;
                    if (v133 > 1.0) {
                      float v133 = 1.0;
                    }
                    __b[1] = v133;
                  }
                }
                long long v176 = 0;
                uint64_t v177 = 0;
                uint64_t v178 = 0;
                __p = 0;
                int v174 = 0;
                uint64_t v175 = 0;
                v172[0] = (float32x2_t)sub_25B477C40(v107).n128_u64[0];
                v172[1] = v134;
                float32x2_t v135 = (float32x2_t)sub_25B477C40((void *)v85).n128_u64[0];
                if (sub_25B4D5C54(v172, &v176, &__p, v135, v136, 0.05))
                {
                  float32x2_t v137 = (float32x2_t)sub_25B477C40(v107).n128_u64[0];
                  long long v138 = (float32x2_t *)__p;
                  long long v139 = v174;
                  float v140 = sub_25B4D637C((float32x2_t *)__p, v174, v137);
                  sub_25B477C40(v107);
                  float v142 = sub_25B4D637C(v138, v139, v141);
                  if (v140 > 0.0)
                  {
                    HIBYTE(v186) = 1;
                    float v143 = v140 / 0.15;
                    if ((float)(v140 / 0.15) > 1.0) {
                      float v143 = 1.0;
                    }
                    __b[3] = v143;
                  }
                  id v56 = v152;
                  if (v142 > 0.0)
                  {
                    BYTE1(v186) = 1;
                    float v144 = v142 / 0.15;
                    if (v144 > 1.0) {
                      float v144 = 1.0;
                    }
                    __b[1] = v144;
                  }
                }
                sub_25B4EF1CC(v57, (void *)v85, v82, (uint64_t)&v186, 0.05);
                LOBYTE(v186) = 1;
                __b[0] = v115;
                BYTE2(v186) = 1;
                unint64_t v147 = 0;
                __b[2] = v117;
                do
                {
                  v172[0].i32[0] = objc_msgSend_edgeStates(v107, v145, v146);
                  _CF = v172[0].u8[v147] != *((unsigned __int8 *)&v186 + v147) || v147 >= 3;
                  ++v147;
                }
                while (!_CF);
                if (v85)
                {
                  *(unsigned char *)(v85 + 105) = 1;
                  *(_DWORD *)(v85 + 124) = v186;
                  float v149 = __b[3];
                  float v150 = __b[1];
                  *(float *)(v85 + 224) = v115;
                  *(float *)(v85 + 228) = v150;
                  *(float *)(v85 + 232) = v117;
                  *(float *)(v85 + 236) = v149;
                }
                if (__p) {
                  operator delete(__p);
                }
                if (v176) {
                  operator delete(v176);
                }
                if (v179[0]) {
                  operator delete(v179[0]);
                }
                if (v181[0]) {
                  operator delete(v181[0]);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      sub_25B4EF1CC(v57, (void *)v85, v82, (uint64_t)&v186, 0.05);
      if (v85)
      {
        *(_DWORD *)(v85 + 124) = v186;
        *(_OWORD *)(v85 + 224) = *(_OWORD *)__b;
      }
    }

    ++v82;
  }

  sub_25B3FA930(v170);
}

void sub_25B4EFE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (__p) {
    operator delete(__p);
  }
  if (a45) {
    operator delete(a45);
  }

  sub_25B3FA930(a31);
  _Unwind_Resume(a1);
}

void sub_25B4EFFD0(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B458EBC((uint64_t)v6, v5);
}

void sub_25B4F0370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4F03D0(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      float32x4_t v7 = v4 - 32;
      id v8 = v4 - 32;
      do
      {
        id v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        float32x4_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B4F0490(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v205 = result;
  uint64_t v244 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v9 = a2;
    unint64_t v10 = v205;
    locatiouint64_t n = (id *)(a2 - 320);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v205 = v10;
          uint64_t v11 = v9 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 6);
          if (!(!v6 & v5))
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = (*a3)((uint64_t)location, v205);
                if (result)
                {
                  uint64_t result = sub_25B4F1D58(v205, (uint64_t)location);
                }
                break;
              case 3uLL:
                uint64_t result = sub_25B4F1F80(v205, v205 + 320, (uint64_t)location, a3);
                break;
              case 4uLL:
                uint64_t result = sub_25B4F206C(v205, v205 + 320, v205 + 640, (uint64_t)location, a3);
                break;
              case 5uLL:
                uint64_t result = sub_25B4F2134(v205, v205 + 320, v205 + 640, v205 + 960, (uint64_t)location, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 7679)
          {
            if (a5)
            {
              if (v205 != a2)
              {
                uint64_t v57 = v205 + 320;
                if (v205 + 320 != a2)
                {
                  uint64_t v58 = 0;
                  uint64_t v59 = v205;
                  do
                  {
                    uint64_t v60 = v59;
                    uint64_t v59 = v57;
                    uint64_t result = (*a3)(v57, v60);
                    if (result)
                    {
                      sub_25B4901F0((uint64_t)&v226, v59);
                      uint64_t v61 = v58;
                      uint64_t v62 = v205;
                      while (1)
                      {
                        uint64_t v63 = v61;
                        uint64_t v64 = v62 + v61;
                        objc_storeStrong((id *)(v62 + v61 + 328), *(id *)(v62 + v61 + 8));
                        long long v65 = *(_OWORD *)(v64 + 96);
                        *(_OWORD *)(v64 + 400) = *(_OWORD *)(v64 + 80);
                        *(_OWORD *)(v64 + 416) = v65;
                        *(_OWORD *)(v64 + 425) = *(_OWORD *)(v64 + 105);
                        long long v66 = *(_OWORD *)(v64 + 32);
                        *(_OWORD *)(v64 + 336) = *(_OWORD *)(v64 + 16);
                        *(_OWORD *)(v64 + 352) = v66;
                        long long v67 = *(_OWORD *)(v64 + 64);
                        *(_OWORD *)(v64 + 368) = *(_OWORD *)(v64 + 48);
                        *(_OWORD *)(v64 + 384) = v67;
                        std::string::operator=((std::string *)(v64 + 448), (const std::string *)(v64 + 128));
                        uint64_t v68 = v205 + v63;
                        std::string::operator=((std::string *)(v205 + v63 + 472), (const std::string *)(v205 + v63 + 152));
                        objc_storeStrong((id *)(v68 + 496), *(id *)(v68 + 176));
                        *(_OWORD *)(v68 + 528) = *(_OWORD *)(v68 + 208);
                        *(_OWORD *)(v68 + 540) = *(_OWORD *)(v68 + 220);
                        uint64_t v62 = v205;
                        uint64_t v69 = v205 + v63;
                        long long v70 = *(_OWORD *)(v205 + v63 + 256);
                        *(_OWORD *)(v69 + 560) = *(_OWORD *)(v205 + v63 + 240);
                        *(_OWORD *)(v69 + 576) = v70;
                        *(_OWORD *)(v69 + 592) = *(_OWORD *)(v205 + v63 + 272);
                        sub_25B490828(v205 + v63 + 608, *(void ***)(v205 + v63 + 288), *(void ***)(v205 + v63 + 296), (uint64_t)(*(void *)(v205 + v63 + 296) - *(void *)(v205 + v63 + 288)) >> 3);
                        *(_DWORD *)(v69 + 632) = *(_DWORD *)(v69 + 312);
                        if (!v63) {
                          break;
                        }
                        char v71 = (*a3)((uint64_t)&v226, v205 + v63 - 320);
                        uint64_t v61 = v63 - 320;
                        if ((v71 & 1) == 0)
                        {
                          uint64_t v62 = v205 + v63;
                          uint64_t v72 = v205 + v63;
                          goto LABEL_80;
                        }
                      }
                      uint64_t v72 = v205;
LABEL_80:
                      __float2 v73 = (_OWORD *)(v72 + 16);
                      float32x2_t v74 = (std::string *)(v72 + 128);
                      float32x4_t v75 = (std::string *)(v72 + 152);
                      long long v76 = (_OWORD *)(v72 + 240);
                      long long v77 = (_OWORD *)(v72 + 208);
                      objc_storeStrong((id *)(v62 + 8), obj);
                      long long v78 = v228;
                      long long v79 = v230;
                      v73[1] = v229;
                      v73[2] = v79;
                      _OWORD *v73 = v78;
                      long long v80 = v231;
                      long long v81 = v232;
                      long long v82 = v233[0];
                      *(_OWORD *)((char *)v73 + 89) = *(_OWORD *)((char *)v233 + 9);
                      v73[4] = v81;
                      v73[5] = v82;
                      v73[3] = v80;
                      std::string::operator=(v74, &v234);
                      std::string::operator=(v75, &v235);
                      objc_storeStrong((id *)(v62 + 176), v236);
                      long long v83 = v237[0];
                      *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)v237 + 12);
                      _OWORD *v77 = v83;
                      long long v84 = v238;
                      long long v85 = v240;
                      v76[1] = v239;
                      v76[2] = v85;
                      _OWORD *v76 = v84;
                      if ((void ****)v62 != &v226) {
                        sub_25B490828(v62 + 288, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
                      }
                      *(_DWORD *)(v62 + 312) = v243;
                      float v226 = (void ***)off_2708F1738;
                      uint64_t v208 = (void **)v241;
                      sub_25B3F6050(&v208);

                      uint64_t result = sub_25B3F5FE8((uint64_t)&v226);
                    }
                    uint64_t v57 = v59 + 320;
                    v58 += 320;
                  }
                  while (v59 + 320 != a2);
                }
              }
            }
            else if (v205 != a2)
            {
              uint64_t v175 = v205 + 320;
              if (v205 + 320 != a2)
              {
                uint64_t v176 = v205 + 632;
                do
                {
                  uint64_t v206 = v175;
                  uint64_t result = ((uint64_t (*)(void))*a3)();
                  if (result)
                  {
                    sub_25B4901F0((uint64_t)&v226, v206);
                    uint64_t v177 = (_DWORD *)v176;
                    do
                    {
                      uint64_t v178 = v177;
                      objc_storeStrong((id *)v177 - 38, *((id *)v177 - 78));
                      uint64_t v179 = v177 - 74;
                      uint64_t v180 = v177 - 154;
                      long long v181 = *(_OWORD *)(v177 - 146);
                      *(_OWORD *)(v177 - 62) = *(_OWORD *)(v177 - 142);
                      long long v182 = *(_OWORD *)(v177 - 134);
                      *(_OWORD *)(v177 - 58) = *(_OWORD *)(v177 - 138);
                      *(_OWORD *)(v177 - 54) = v182;
                      long long v183 = *(_OWORD *)(v177 - 150);
                      *uint64_t v179 = *(_OWORD *)(v177 - 154);
                      v179[1] = v183;
                      v179[2] = v181;
                      uint64_t v184 = (std::string *)(v177 - 126);
                      *(_OWORD *)((char *)v177 - 207) = *(_OWORD *)((char *)v177 - 527);
                      std::string::operator=((std::string *)(v177 - 46), (const std::string *)v177 - 21);
                      uint64_t v185 = (std::string *)(v177 - 120);
                      std::string::operator=((std::string *)(v177 - 40), (const std::string *)v177 - 20);
                      objc_storeStrong((id *)v177 - 17, *((id *)v177 - 57));
                      int v186 = v177 - 106;
                      *(_OWORD *)(v177 - 26) = *(_OWORD *)(v177 - 106);
                      *(_OWORD *)(v177 - 23) = *(_OWORD *)(v177 - 103);
                      uint64_t v187 = v177 - 98;
                      long long v188 = *(_OWORD *)(v177 - 94);
                      *(_OWORD *)(v177 - 18) = *(_OWORD *)(v177 - 98);
                      *(_OWORD *)(v177 - 14) = v188;
                      *(_OWORD *)(v177 - 10) = *(_OWORD *)(v177 - 90);
                      uint64_t v189 = (uint64_t)(v177 - 86);
                      sub_25B490828((uint64_t)(v177 - 6), *((void ***)v177 - 43), *((void ***)v177 - 42), (uint64_t)(*((void *)v177 - 42) - *((void *)v177 - 43)) >> 3);
                      v177 -= 80;
                      *uint64_t v178 = *(v178 - 80);
                    }
                    while (((*a3)((uint64_t)&v226, (uint64_t)(v178 - 238)) & 1) != 0);
                    v190 = (id *)(v178 - 158);
                    objc_storeStrong(v190 + 1, obj);
                    long long v191 = v228;
                    long long v192 = v230;
                    v180[1] = v229;
                    v180[2] = v192;
                    _OWORD *v180 = v191;
                    long long v193 = v231;
                    long long v194 = v232;
                    long long v195 = v233[0];
                    *(_OWORD *)((char *)v180 + 89) = *(_OWORD *)((char *)v233 + 9);
                    v180[4] = v194;
                    v180[5] = v195;
                    v180[3] = v193;
                    std::string::operator=(v184, &v234);
                    std::string::operator=(v185, &v235);
                    objc_storeStrong(v190 + 22, v236);
                    long long v196 = v237[0];
                    *(_OWORD *)((char *)v186 + 12) = *(_OWORD *)((char *)v237 + 12);
                    _OWORD *v186 = v196;
                    long long v197 = v238;
                    long long v198 = v240;
                    v187[1] = v239;
                    v187[2] = v198;
                    *uint64_t v187 = v197;
                    if (v190 != (id *)&v226) {
                      sub_25B490828(v189, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
                    }
                    *((_DWORD *)v190 + 78) = v243;
                    float v226 = (void ***)off_2708F1738;
                    uint64_t v208 = (void **)v241;
                    sub_25B3F6050(&v208);

                    uint64_t result = sub_25B3F5FE8((uint64_t)&v226);
                  }
                  uint64_t v175 = v206 + 320;
                  v176 += 320;
                }
                while (v206 + 320 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v205 != a2)
            {
              int64_t v86 = (v12 - 2) >> 1;
              size_t locationa = (id *)v86;
              uint64_t v87 = v205;
              do
              {
                int64_t v88 = v86;
                if ((uint64_t)locationa >= v86)
                {
                  uint64_t v89 = (2 * v86) | 1;
                  uint64_t v90 = v87 + 320 * v89;
                  if (2 * v86 + 2 < (uint64_t)v12 && (*a3)(v87 + 320 * v89, v90 + 320))
                  {
                    v90 += 320;
                    uint64_t v89 = 2 * v88 + 2;
                  }
                  uint64_t v91 = v87 + 320 * v88;
                  uint64_t result = (*a3)(v90, v91);
                  if ((result & 1) == 0)
                  {
                    int64_t v200 = v88;
                    sub_25B4901F0((uint64_t)&v226, v87 + 320 * v88);
                    do
                    {
                      uint64_t v92 = v90;
                      objc_storeStrong((id *)(v91 + 8), *(id *)(v90 + 8));
                      long long v93 = *(_OWORD *)(v90 + 16);
                      long long v94 = *(_OWORD *)(v90 + 48);
                      *(_OWORD *)(v91 + 32) = *(_OWORD *)(v90 + 32);
                      *(_OWORD *)(v91 + 48) = v94;
                      *(_OWORD *)(v91 + 16) = v93;
                      long long v95 = *(_OWORD *)(v90 + 64);
                      long long v96 = *(_OWORD *)(v90 + 80);
                      long long v97 = *(_OWORD *)(v90 + 96);
                      *(_OWORD *)(v91 + 105) = *(_OWORD *)(v90 + 105);
                      *(_OWORD *)(v91 + 80) = v96;
                      *(_OWORD *)(v91 + 96) = v97;
                      *(_OWORD *)(v91 + 64) = v95;
                      std::string::operator=((std::string *)(v91 + 128), (const std::string *)(v90 + 128));
                      std::string::operator=((std::string *)(v91 + 152), (const std::string *)(v90 + 152));
                      objc_storeStrong((id *)(v91 + 176), *(id *)(v90 + 176));
                      long long v98 = *(_OWORD *)(v90 + 208);
                      *(_OWORD *)(v91 + 220) = *(_OWORD *)(v90 + 220);
                      *(_OWORD *)(v91 + 208) = v98;
                      long long v99 = *(_OWORD *)(v90 + 240);
                      long long v100 = *(_OWORD *)(v90 + 272);
                      *(_OWORD *)(v91 + 256) = *(_OWORD *)(v90 + 256);
                      *(_OWORD *)(v91 + 272) = v100;
                      *(_OWORD *)(v91 + 240) = v99;
                      if (v91 != v90) {
                        sub_25B490828(v91 + 288, *(void ***)(v90 + 288), *(void ***)(v90 + 296), (uint64_t)(*(void *)(v90 + 296) - *(void *)(v90 + 288)) >> 3);
                      }
                      *(_DWORD *)(v91 + 312) = *(_DWORD *)(v90 + 312);
                      if ((uint64_t)locationa < v89) {
                        break;
                      }
                      uint64_t v101 = (2 * v89) | 1;
                      uint64_t v90 = v205 + 320 * v101;
                      uint64_t v89 = 2 * v89 + 2;
                      if (v89 < (uint64_t)v12)
                      {
                        if ((*a3)(v205 + 320 * v101, v90 + 320)) {
                          v90 += 320;
                        }
                        else {
                          uint64_t v89 = v101;
                        }
                      }
                      else
                      {
                        uint64_t v89 = v101;
                      }
                      uint64_t v91 = v92;
                    }
                    while (!(*a3)(v90, (uint64_t)&v226));
                    objc_storeStrong((id *)(v92 + 8), obj);
                    long long v102 = v228;
                    long long v103 = v230;
                    *(_OWORD *)(v92 + 32) = v229;
                    *(_OWORD *)(v92 + 48) = v103;
                    *(_OWORD *)(v92 + 16) = v102;
                    long long v104 = v231;
                    long long v105 = v232;
                    long long v106 = v233[0];
                    *(_OWORD *)(v92 + 105) = *(_OWORD *)((char *)v233 + 9);
                    *(_OWORD *)(v92 + 80) = v105;
                    *(_OWORD *)(v92 + 96) = v106;
                    *(_OWORD *)(v92 + 64) = v104;
                    std::string::operator=((std::string *)(v92 + 128), &v234);
                    std::string::operator=((std::string *)(v92 + 152), &v235);
                    objc_storeStrong((id *)(v92 + 176), v236);
                    long long v107 = v237[0];
                    *(_OWORD *)(v92 + 220) = *(_OWORD *)((char *)v237 + 12);
                    *(_OWORD *)(v92 + 208) = v107;
                    long long v108 = v238;
                    long long v109 = v240;
                    *(_OWORD *)(v92 + 256) = v239;
                    *(_OWORD *)(v92 + 272) = v109;
                    *(_OWORD *)(v92 + 240) = v108;
                    if ((void ****)v92 != &v226) {
                      sub_25B490828(v92 + 288, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
                    }
                    *(_DWORD *)(v92 + 312) = v243;
                    float v226 = (void ***)off_2708F1738;
                    uint64_t v208 = (void **)v241;
                    sub_25B3F6050(&v208);

                    uint64_t result = sub_25B3F5FE8((uint64_t)&v226);
                    uint64_t v87 = v205;
                    int64_t v88 = v200;
                  }
                }
                int64_t v86 = v88 - 1;
              }
              while (v88);
              int64_t v110 = v11 / 0x140uLL;
              do
              {
                if (v110 >= 2)
                {
                  sub_25B4901F0((uint64_t)&v208, v205);
                  uint64_t v111 = 0;
                  uint64_t v112 = v205;
                  do
                  {
                    uint64_t v113 = v112 + 320 * v111 + 320;
                    uint64_t v114 = 2 * v111;
                    uint64_t v111 = (2 * v111) | 1;
                    uint64_t v115 = v114 + 2;
                    if (v114 + 2 < v110 && (*a3)(v113, v113 + 320))
                    {
                      v113 += 320;
                      uint64_t v111 = v115;
                    }
                    objc_storeStrong((id *)(v112 + 8), *(id *)(v113 + 8));
                    long long v116 = *(_OWORD *)(v113 + 16);
                    long long v117 = *(_OWORD *)(v113 + 48);
                    *(_OWORD *)(v112 + 32) = *(_OWORD *)(v113 + 32);
                    *(_OWORD *)(v112 + 48) = v117;
                    *(_OWORD *)(v112 + 16) = v116;
                    long long v118 = *(_OWORD *)(v113 + 64);
                    long long v119 = *(_OWORD *)(v113 + 80);
                    long long v120 = *(_OWORD *)(v113 + 96);
                    *(_OWORD *)(v112 + 105) = *(_OWORD *)(v113 + 105);
                    *(_OWORD *)(v112 + 80) = v119;
                    *(_OWORD *)(v112 + 96) = v120;
                    *(_OWORD *)(v112 + 64) = v118;
                    std::string::operator=((std::string *)(v112 + 128), (const std::string *)(v113 + 128));
                    std::string::operator=((std::string *)(v112 + 152), (const std::string *)(v113 + 152));
                    objc_storeStrong((id *)(v112 + 176), *(id *)(v113 + 176));
                    long long v121 = *(_OWORD *)(v113 + 208);
                    *(_OWORD *)(v112 + 220) = *(_OWORD *)(v113 + 220);
                    *(_OWORD *)(v112 + 208) = v121;
                    long long v122 = *(_OWORD *)(v113 + 240);
                    long long v123 = *(_OWORD *)(v113 + 272);
                    *(_OWORD *)(v112 + 256) = *(_OWORD *)(v113 + 256);
                    *(_OWORD *)(v112 + 272) = v123;
                    *(_OWORD *)(v112 + 240) = v122;
                    if (v112 != v113) {
                      sub_25B490828(v112 + 288, *(void ***)(v113 + 288), *(void ***)(v113 + 296), (uint64_t)(*(void *)(v113 + 296) - *(void *)(v113 + 288)) >> 3);
                    }
                    *(_DWORD *)(v112 + 312) = *(_DWORD *)(v113 + 312);
                    uint64_t v112 = v113;
                  }
                  while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
                  float32x2_t v124 = (_OWORD *)(v113 + 16);
                  float32x2_t v125 = (_OWORD *)(v113 + 208);
                  float32x2_t v126 = (_OWORD *)(v113 + 240);
                  uint64_t v127 = (id *)(v113 + 8);
                  locationb = (id *)(v113 + 176);
                  if (v113 == a2 - 320)
                  {
                    objc_storeStrong(v127, v209);
                    long long v166 = v210;
                    long long v167 = v212;
                    *(_OWORD *)(v113 + 32) = v211;
                    *(_OWORD *)(v113 + 48) = v167;
                    _OWORD *v124 = v166;
                    long long v168 = v213;
                    long long v169 = v214;
                    long long v170 = v215[0];
                    *(_OWORD *)(v113 + 105) = *(_OWORD *)((char *)v215 + 9);
                    *(_OWORD *)(v113 + 80) = v169;
                    *(_OWORD *)(v113 + 96) = v170;
                    *(_OWORD *)(v113 + 64) = v168;
                    std::string::operator=((std::string *)(v113 + 128), &v216);
                    std::string::operator=((std::string *)(v113 + 152), &v217);
                    objc_storeStrong(locationb, v218);
                    long long v171 = v219[0];
                    *(_OWORD *)(v113 + 220) = *(_OWORD *)((char *)v219 + 12);
                    *float32x2_t v125 = v171;
                    long long v172 = v220;
                    long long v173 = v222;
                    *(_OWORD *)(v113 + 256) = v221;
                    *(_OWORD *)(v113 + 272) = v173;
                    *float32x2_t v126 = v172;
                    if ((void ***)v113 != &v208) {
                      sub_25B490828(v113 + 288, v223, v224, v224 - v223);
                    }
                    *(_DWORD *)(v113 + 312) = v225;
                  }
                  else
                  {
                    objc_storeStrong(v127, *(id *)(a2 - 312));
                    long long v128 = *(_OWORD *)(a2 - 256);
                    long long v129 = *(_OWORD *)(a2 - 240);
                    long long v130 = *(_OWORD *)(a2 - 224);
                    *(_OWORD *)(v113 + 105) = *(_OWORD *)(a2 - 215);
                    *(_OWORD *)(v113 + 80) = v129;
                    *(_OWORD *)(v113 + 96) = v130;
                    *(_OWORD *)(v113 + 64) = v128;
                    long long v131 = *(_OWORD *)(a2 - 304);
                    long long v132 = *(_OWORD *)(a2 - 272);
                    *(_OWORD *)(v113 + 32) = *(_OWORD *)(a2 - 288);
                    *(_OWORD *)(v113 + 48) = v132;
                    _OWORD *v124 = v131;
                    std::string::operator=((std::string *)(v113 + 128), (const std::string *)(a2 - 192));
                    std::string::operator=((std::string *)(v113 + 152), (const std::string *)(a2 - 168));
                    objc_storeStrong(locationb, *(id *)(a2 - 144));
                    long long v133 = *(_OWORD *)(a2 - 112);
                    *(_OWORD *)(v113 + 220) = *(_OWORD *)(a2 - 100);
                    *float32x2_t v125 = v133;
                    long long v134 = *(_OWORD *)(a2 - 80);
                    long long v135 = *(_OWORD *)(a2 - 48);
                    *(_OWORD *)(v113 + 256) = *(_OWORD *)(a2 - 64);
                    *(_OWORD *)(v113 + 272) = v135;
                    *float32x2_t v126 = v134;
                    sub_25B490828(v113 + 288, *(void ***)(a2 - 32), *(void ***)(a2 - 24), (uint64_t)(*(void *)(a2 - 24) - *(void *)(a2 - 32)) >> 3);
                    *(_DWORD *)(v113 + 312) = *(_DWORD *)(a2 - 8);
                    objc_storeStrong((id *)(a2 - 312), v209);
                    long long v136 = v210;
                    long long v137 = v212;
                    *(_OWORD *)(a2 - 288) = v211;
                    *(_OWORD *)(a2 - 272) = v137;
                    *(_OWORD *)(a2 - 304) = v136;
                    long long v138 = v213;
                    long long v139 = v214;
                    long long v140 = v215[0];
                    *(_OWORD *)(a2 - 215) = *(_OWORD *)((char *)v215 + 9);
                    *(_OWORD *)(a2 - 240) = v139;
                    *(_OWORD *)(a2 - 224) = v140;
                    *(_OWORD *)(a2 - 256) = v138;
                    std::string::operator=((std::string *)(a2 - 192), &v216);
                    std::string::operator=((std::string *)(a2 - 168), &v217);
                    objc_storeStrong((id *)(a2 - 144), v218);
                    float32x2_t v141 = (_OWORD *)(a2 - 112);
                    float v142 = (_OWORD *)(a2 - 80);
                    long long v143 = v219[0];
                    *(_OWORD *)((char *)v141 + 12) = *(_OWORD *)((char *)v219 + 12);
                    _OWORD *v141 = v143;
                    long long v144 = v220;
                    long long v145 = v222;
                    v142[1] = v221;
                    v142[2] = v145;
                    _OWORD *v142 = v144;
                    if ((void ***)(a2 - 320) != &v208) {
                      sub_25B490828(a2 - 32, v223, v224, v224 - v223);
                    }
                    *(_DWORD *)(a2 - 8) = v225;
                    uint64_t v146 = v113 - v205 + 320;
                    if (v146 >= 321)
                    {
                      unint64_t v147 = (unint64_t)(-2 - 0x3333333333333333 * (v146 >> 6)) >> 1;
                      uint64_t v148 = v205 + 320 * v147;
                      if ((*a3)(v148, v113))
                      {
                        sub_25B4901F0((uint64_t)&v226, v113);
                        do
                        {
                          uint64_t v149 = v148;
                          objc_storeStrong((id *)(v113 + 8), *(id *)(v148 + 8));
                          long long v150 = *(_OWORD *)(v148 + 16);
                          long long v151 = *(_OWORD *)(v148 + 48);
                          *(_OWORD *)(v113 + 32) = *(_OWORD *)(v148 + 32);
                          *(_OWORD *)(v113 + 48) = v151;
                          *(_OWORD *)(v113 + 16) = v150;
                          long long v152 = *(_OWORD *)(v148 + 64);
                          long long v153 = *(_OWORD *)(v148 + 80);
                          long long v154 = *(_OWORD *)(v148 + 96);
                          *(_OWORD *)(v113 + 105) = *(_OWORD *)(v148 + 105);
                          *(_OWORD *)(v113 + 80) = v153;
                          *(_OWORD *)(v113 + 96) = v154;
                          *(_OWORD *)(v113 + 64) = v152;
                          std::string::operator=((std::string *)(v113 + 128), (const std::string *)(v148 + 128));
                          std::string::operator=((std::string *)(v113 + 152), (const std::string *)(v148 + 152));
                          objc_storeStrong((id *)(v113 + 176), *(id *)(v148 + 176));
                          long long v155 = *(_OWORD *)(v148 + 208);
                          *(_OWORD *)(v113 + 220) = *(_OWORD *)(v148 + 220);
                          *(_OWORD *)(v113 + 208) = v155;
                          long long v156 = *(_OWORD *)(v148 + 240);
                          long long v157 = *(_OWORD *)(v148 + 272);
                          *(_OWORD *)(v113 + 256) = *(_OWORD *)(v148 + 256);
                          *(_OWORD *)(v113 + 272) = v157;
                          *(_OWORD *)(v113 + 240) = v156;
                          if (v113 != v148) {
                            sub_25B490828(v113 + 288, *(void ***)(v148 + 288), *(void ***)(v148 + 296), (uint64_t)(*(void *)(v148 + 296) - *(void *)(v148 + 288)) >> 3);
                          }
                          *(_DWORD *)(v113 + 312) = *(_DWORD *)(v148 + 312);
                          if (!v147) {
                            break;
                          }
                          unint64_t v147 = (v147 - 1) >> 1;
                          uint64_t v148 = v205 + 320 * v147;
                          uint64_t v113 = v149;
                        }
                        while (((*a3)(v148, (uint64_t)&v226) & 1) != 0);
                        objc_storeStrong((id *)(v149 + 8), obj);
                        long long v158 = v228;
                        long long v159 = v230;
                        *(_OWORD *)(v149 + 32) = v229;
                        *(_OWORD *)(v149 + 48) = v159;
                        *(_OWORD *)(v149 + 16) = v158;
                        long long v160 = v231;
                        long long v161 = v232;
                        long long v162 = v233[0];
                        *(_OWORD *)(v149 + 105) = *(_OWORD *)((char *)v233 + 9);
                        *(_OWORD *)(v149 + 80) = v161;
                        *(_OWORD *)(v149 + 96) = v162;
                        *(_OWORD *)(v149 + 64) = v160;
                        std::string::operator=((std::string *)(v149 + 128), &v234);
                        std::string::operator=((std::string *)(v149 + 152), &v235);
                        objc_storeStrong((id *)(v149 + 176), v236);
                        long long v163 = v237[0];
                        *(_OWORD *)(v149 + 220) = *(_OWORD *)((char *)v237 + 12);
                        *(_OWORD *)(v149 + 208) = v163;
                        long long v164 = v238;
                        long long v165 = v240;
                        *(_OWORD *)(v149 + 256) = v239;
                        *(_OWORD *)(v149 + 272) = v165;
                        *(_OWORD *)(v149 + 240) = v164;
                        if ((void ****)v149 != &v226) {
                          sub_25B490828(v149 + 288, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
                        }
                        *(_DWORD *)(v149 + 312) = v243;
                        float v226 = (void ***)off_2708F1738;
                        double v207 = (void **)v241;
                        sub_25B3F6050(&v207);

                        sub_25B3F5FE8((uint64_t)&v226);
                      }
                    }
                  }
                  uint64_t v208 = (void **)off_2708F1738;
                  float v226 = &v223;
                  sub_25B3F6050((void ***)&v226);

                  uint64_t result = sub_25B3F5FE8((uint64_t)&v208);
                }
                a2 -= 320;
              }
              while ((unint64_t)v110-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = v205 + 320 * (v12 >> 1);
          if ((unint64_t)v11 > 0xA000)
          {
            sub_25B4F1F80(v205, v205 + 320 * (v12 >> 1), (uint64_t)location, a3);
            uint64_t v15 = 5 * v13;
            uint64_t v16 = v205 + 320 * v13 - 320;
            sub_25B4F1F80(v205 + 320, v16, a2 - 640, a3);
            sub_25B4F1F80(v205 + 640, v205 + 320 + (v15 << 6), a2 - 960, a3);
            sub_25B4F1F80(v16, v14, v205 + 320 + (v15 << 6), a3);
            sub_25B4F1D58(v205, v14);
          }
          else
          {
            sub_25B4F1F80(v205 + 320 * (v12 >> 1), v205, (uint64_t)location, a3);
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(uint64_t))*a3)(v205 - 320)) {
            break;
          }
          sub_25B4901F0((uint64_t)&v226, v205);
          if ((*a3)((uint64_t)&v226, (uint64_t)location))
          {
            unint64_t v10 = v205;
            do
              v10 += 320;
            while (((*a3)((uint64_t)&v226, v10) & 1) == 0);
          }
          else
          {
            unint64_t v38 = v205 + 320;
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              int v39 = (*a3)((uint64_t)&v226, v38);
              unint64_t v38 = v10 + 320;
            }
            while (!v39);
          }
          unint64_t v40 = a2;
          if (v10 < a2)
          {
            unint64_t v40 = a2;
            do
              v40 -= 320;
            while (((*a3)((uint64_t)&v226, v40) & 1) != 0);
          }
          while (v10 < v40)
          {
            sub_25B4F1D58(v10, v40);
            do
              v10 += 320;
            while (!(*a3)((uint64_t)&v226, v10));
            do
              v40 -= 320;
            while (((*a3)((uint64_t)&v226, v40) & 1) != 0);
          }
          if (v10 - 320 != v205)
          {
            objc_storeStrong((id *)(v205 + 8), *(id *)(v10 - 312));
            long long v41 = *(_OWORD *)(v10 - 256);
            long long v42 = *(_OWORD *)(v10 - 240);
            long long v43 = *(_OWORD *)(v10 - 224);
            *(_OWORD *)(v205 + 105) = *(_OWORD *)(v10 - 215);
            *(_OWORD *)(v205 + 80) = v42;
            *(_OWORD *)(v205 + 96) = v43;
            *(_OWORD *)(v205 + 64) = v41;
            long long v44 = *(_OWORD *)(v10 - 304);
            long long v45 = *(_OWORD *)(v10 - 272);
            *(_OWORD *)(v205 + 32) = *(_OWORD *)(v10 - 288);
            *(_OWORD *)(v205 + 48) = v45;
            *(_OWORD *)(v205 + 16) = v44;
            std::string::operator=((std::string *)(v205 + 128), (const std::string *)(v10 - 192));
            std::string::operator=((std::string *)(v205 + 152), (const std::string *)(v10 - 168));
            objc_storeStrong((id *)(v205 + 176), *(id *)(v10 - 144));
            long long v46 = *(_OWORD *)(v10 - 112);
            *(_OWORD *)(v205 + 220) = *(_OWORD *)(v10 - 100);
            *(_OWORD *)(v205 + 208) = v46;
            long long v47 = *(_OWORD *)(v10 - 80);
            long long v48 = *(_OWORD *)(v10 - 48);
            *(_OWORD *)(v205 + 256) = *(_OWORD *)(v10 - 64);
            *(_OWORD *)(v205 + 272) = v48;
            *(_OWORD *)(v205 + 240) = v47;
            sub_25B490828(v205 + 288, *(void ***)(v10 - 32), *(void ***)(v10 - 24), (uint64_t)(*(void *)(v10 - 24) - *(void *)(v10 - 32)) >> 3);
            *(_DWORD *)(v205 + 312) = *(_DWORD *)(v10 - 8);
          }
          objc_storeStrong((id *)(v10 - 312), obj);
          long long v49 = v228;
          long long v50 = v230;
          *(_OWORD *)(v10 - 288) = v229;
          *(_OWORD *)(v10 - 272) = v50;
          *(_OWORD *)(v10 - 304) = v49;
          long long v51 = v231;
          long long v52 = v232;
          long long v53 = v233[0];
          *(_OWORD *)(v10 - 215) = *(_OWORD *)((char *)v233 + 9);
          *(_OWORD *)(v10 - 240) = v52;
          *(_OWORD *)(v10 - 224) = v53;
          *(_OWORD *)(v10 - 256) = v51;
          std::string::operator=((std::string *)(v10 - 192), &v234);
          std::string::operator=((std::string *)(v10 - 168), &v235);
          objc_storeStrong((id *)(v10 - 144), v236);
          long long v54 = v237[0];
          *(_OWORD *)(v10 - 100) = *(_OWORD *)((char *)v237 + 12);
          *(_OWORD *)(v10 - 112) = v54;
          long long v55 = v238;
          long long v56 = v240;
          *(_OWORD *)(v10 - 64) = v239;
          *(_OWORD *)(v10 - 48) = v56;
          *(_OWORD *)(v10 - 80) = v55;
          if ((void ****)(v10 - 320) != &v226) {
            sub_25B490828(v10 - 32, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
          }
          *(_DWORD *)(v10 - 8) = v243;
          float v226 = (void ***)off_2708F1738;
          uint64_t v208 = (void **)v241;
          sub_25B3F6050(&v208);

          uint64_t result = sub_25B3F5FE8((uint64_t)&v226);
          a5 = 0;
          unint64_t v9 = a2;
        }
        sub_25B4901F0((uint64_t)&v226, v205);
        unint64_t v17 = v205;
        do
          v17 += 320;
        while (((*a3)(v17, (uint64_t)&v226) & 1) != 0);
        unint64_t v18 = a2;
        if (v17 - 320 == v205)
        {
          unint64_t v18 = a2;
          do
          {
            if (v17 >= v18) {
              break;
            }
            v18 -= 320;
          }
          while (((*a3)(v18, (uint64_t)&v226) & 1) == 0);
        }
        else
        {
          do
            v18 -= 320;
          while (!(*a3)(v18, (uint64_t)&v226));
        }
        unint64_t v10 = v17;
        if (v17 < v18)
        {
          unint64_t v19 = v18;
          do
          {
            sub_25B4F1D58(v10, v19);
            do
              v10 += 320;
            while (((*a3)(v10, (uint64_t)&v226) & 1) != 0);
            do
              v19 -= 320;
            while (!(*a3)(v19, (uint64_t)&v226));
          }
          while (v10 < v19);
        }
        if (v10 - 320 != v205)
        {
          objc_storeStrong((id *)(v205 + 8), *(id *)(v10 - 312));
          long long v20 = *(_OWORD *)(v10 - 256);
          long long v21 = *(_OWORD *)(v10 - 240);
          long long v22 = *(_OWORD *)(v10 - 224);
          *(_OWORD *)(v205 + 105) = *(_OWORD *)(v10 - 215);
          *(_OWORD *)(v205 + 80) = v21;
          *(_OWORD *)(v205 + 96) = v22;
          *(_OWORD *)(v205 + 64) = v20;
          long long v23 = *(_OWORD *)(v10 - 304);
          long long v24 = *(_OWORD *)(v10 - 272);
          *(_OWORD *)(v205 + 32) = *(_OWORD *)(v10 - 288);
          *(_OWORD *)(v205 + 48) = v24;
          *(_OWORD *)(v205 + 16) = v23;
          std::string::operator=((std::string *)(v205 + 128), (const std::string *)(v10 - 192));
          std::string::operator=((std::string *)(v205 + 152), (const std::string *)(v10 - 168));
          objc_storeStrong((id *)(v205 + 176), *(id *)(v10 - 144));
          long long v25 = *(_OWORD *)(v10 - 112);
          *(_OWORD *)(v205 + 220) = *(_OWORD *)(v10 - 100);
          *(_OWORD *)(v205 + 208) = v25;
          long long v26 = *(_OWORD *)(v10 - 80);
          long long v27 = *(_OWORD *)(v10 - 48);
          *(_OWORD *)(v205 + 256) = *(_OWORD *)(v10 - 64);
          *(_OWORD *)(v205 + 272) = v27;
          *(_OWORD *)(v205 + 240) = v26;
          sub_25B490828(v205 + 288, *(void ***)(v10 - 32), *(void ***)(v10 - 24), (uint64_t)(*(void *)(v10 - 24) - *(void *)(v10 - 32)) >> 3);
          *(_DWORD *)(v205 + 312) = *(_DWORD *)(v10 - 8);
        }
        objc_storeStrong((id *)(v10 - 312), obj);
        long long v28 = v228;
        long long v29 = v230;
        *(_OWORD *)(v10 - 288) = v229;
        *(_OWORD *)(v10 - 272) = v29;
        *(_OWORD *)(v10 - 304) = v28;
        long long v30 = v231;
        long long v31 = v232;
        long long v32 = v233[0];
        *(_OWORD *)(v10 - 215) = *(_OWORD *)((char *)v233 + 9);
        *(_OWORD *)(v10 - 240) = v31;
        *(_OWORD *)(v10 - 224) = v32;
        *(_OWORD *)(v10 - 256) = v30;
        std::string::operator=((std::string *)(v10 - 192), &v234);
        std::string::operator=((std::string *)(v10 - 168), &v235);
        objc_storeStrong((id *)(v10 - 144), v236);
        long long v33 = v237[0];
        *(_OWORD *)(v10 - 100) = *(_OWORD *)((char *)v237 + 12);
        *(_OWORD *)(v10 - 112) = v33;
        long long v34 = v238;
        long long v35 = v240;
        *(_OWORD *)(v10 - 64) = v239;
        *(_OWORD *)(v10 - 48) = v35;
        *(_OWORD *)(v10 - 80) = v34;
        if ((void ****)(v10 - 320) != &v226) {
          sub_25B490828(v10 - 32, *(void ***)v241, *(void ***)v242, (uint64_t)(*(void *)v242 - *(void *)v241) >> 3);
        }
        BOOL v36 = v17 < v18;
        *(_DWORD *)(v10 - 8) = v243;
        float v226 = (void ***)off_2708F1738;
        uint64_t v208 = (void **)v241;
        sub_25B3F6050(&v208);

        sub_25B3F5FE8((uint64_t)&v226);
        unint64_t v9 = a2;
        if (!v36) {
          break;
        }
LABEL_33:
        uint64_t result = sub_25B4F0490(v205, v10 - 320, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_25B4F2220(v205, v10 - 320, a3);
      uint64_t result = sub_25B4F2220(v10, a2, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 320;
    if (!v37) {
      continue;
    }
    return result;
  }
}

void sub_25B4F1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_25B490B60((uint64_t)&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4F1C44(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  char v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_25B413D74(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  unint64_t v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *unint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_25B40EE6C(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  v13 += 3;
  sub_25B43EA54(a1, v12);
  uint64_t v10 = a1[1];
  sub_25B43EAC4((uint64_t)v12);
  return v10;
}

void sub_25B4F1D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B43EAC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4F1D58(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  sub_25B4901F0((uint64_t)v18, a1);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v4;
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  objc_storeStrong((id *)(a1 + 176), *(id *)(a2 + 176));
  long long v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 208) = v9;
  long long v10 = *(_OWORD *)(a2 + 240);
  long long v11 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v11;
  *(_OWORD *)(a1 + 240) = v10;
  if (a1 != a2) {
    sub_25B490828(a1 + 288, *(void ***)(a2 + 288), *(void ***)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3);
  }
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  objc_storeStrong((id *)(a2 + 8), (id)v18[1]);
  long long v12 = v24[0];
  *(_OWORD *)(a2 + 80) = v23;
  *(_OWORD *)(a2 + 96) = v12;
  *(_OWORD *)(a2 + 105) = *(_OWORD *)((char *)v24 + 9);
  long long v13 = v20;
  *(_OWORD *)(a2 + 16) = v19;
  *(_OWORD *)(a2 + 32) = v13;
  long long v14 = v22;
  *(_OWORD *)(a2 + 48) = v21;
  *(_OWORD *)(a2 + 64) = v14;
  std::string::operator=((std::string *)(a2 + 128), &v25);
  std::string::operator=((std::string *)(a2 + 152), &v26);
  objc_storeStrong((id *)(a2 + 176), v27);
  *(_OWORD *)(a2 + 208) = v28[0];
  *(_OWORD *)(a2 + 220) = *(_OWORD *)((char *)v28 + 12);
  long long v15 = v28[3];
  *(_OWORD *)(a2 + 240) = v28[2];
  *(_OWORD *)(a2 + 256) = v15;
  *(_OWORD *)(a2 + 272) = v28[4];
  if (v18 != (void *)a2) {
    sub_25B490828(a2 + 288, v29, v30, v30 - v29);
  }
  *(_DWORD *)(a2 + 312) = v31;
  unint64_t v17 = &v29;
  v18[0] = off_2708F1738;
  sub_25B3F6050((void ***)&v17);

  return sub_25B3F5FE8((uint64_t)v18);
}

void sub_25B4F1F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_25B490B60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4F1F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = a1;
    }
    else
    {
      sub_25B4F1D58(a1, a2);
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = a2;
    }
    uint64_t v11 = a3;
  }
  else
  {
    if (!result) {
      return result;
    }
    sub_25B4F1D58(a2, a3);
    uint64_t result = (*a4)(a2, a1);
    if (!result) {
      return result;
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
  }

  return sub_25B4F1D58(v10, v11);
}

uint64_t sub_25B4F206C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  sub_25B4F1F80(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    sub_25B4F1D58(a3, a4);
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      sub_25B4F1D58(a2, a3);
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        return sub_25B4F1D58(a1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_25B4F2134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  sub_25B4F206C(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    sub_25B4F1D58(a4, a5);
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      sub_25B4F1D58(a3, a4);
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        sub_25B4F1D58(a2, a3);
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          return sub_25B4F1D58(a1, a2);
        }
      }
    }
  }
  return result;
}

BOOL sub_25B4F2220(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v5 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v7 = a2 - 320;
      if ((*a3)(a2 - 320, a1)) {
        sub_25B4F1D58(a1, v7);
      }
      return 1;
    case 3uLL:
      sub_25B4F1F80(a1, a1 + 320, a2 - 320, a3);
      return 1;
    case 4uLL:
      sub_25B4F206C(a1, a1 + 320, a1 + 640, a2 - 320, a3);
      return 1;
    case 5uLL:
      sub_25B4F2134(a1, a1 + 320, a1 + 640, a1 + 960, a2 - 320, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 640;
      sub_25B4F1F80(a1, a1 + 320, a1 + 640, a3);
      uint64_t v9 = a1 + 960;
      if (a1 + 960 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v31 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v9, v8))
    {
      sub_25B4901F0((uint64_t)v34, v9);
      uint64_t v11 = v10;
      while (1)
      {
        uint64_t v12 = v11;
        uint64_t v13 = a1 + v11;
        objc_storeStrong((id *)(a1 + v11 + 968), *(id *)(a1 + v11 + 648));
        long long v14 = *(_OWORD *)(v13 + 736);
        *(_OWORD *)(v13 + 1040) = *(_OWORD *)(v13 + 720);
        *(_OWORD *)(v13 + 1056) = v14;
        long long v15 = *(_OWORD *)(v13 + 672);
        *(_OWORD *)(v13 + 976) = *(_OWORD *)(v13 + 656);
        *(_OWORD *)(v13 + 992) = v15;
        long long v16 = *(_OWORD *)(v13 + 704);
        *(_OWORD *)(v13 + 1008) = *(_OWORD *)(v13 + 688);
        *(_OWORD *)(v13 + 1024) = v16;
        *(_OWORD *)(v13 + 1065) = *(_OWORD *)(v13 + 745);
        std::string::operator=((std::string *)(v13 + 1088), (const std::string *)(v13 + 768));
        std::string::operator=((std::string *)(a1 + v12 + 1112), (const std::string *)(a1 + v12 + 792));
        objc_storeStrong((id *)(a1 + v12 + 1136), *(id *)(a1 + v12 + 816));
        uint64_t v17 = a1 + v12;
        *(_OWORD *)(v17 + 1168) = *(_OWORD *)(a1 + v12 + 848);
        *(_OWORD *)(a1 + v12 + 1180) = *(_OWORD *)(a1 + v12 + 860);
        long long v18 = *(_OWORD *)(a1 + v12 + 896);
        *(_OWORD *)(v17 + 1200) = *(_OWORD *)(a1 + v12 + 880);
        *(_OWORD *)(v17 + 1216) = v18;
        *(_OWORD *)(v17 + 1232) = *(_OWORD *)(a1 + v12 + 912);
        sub_25B490828(a1 + v12 + 1248, *(void ***)(a1 + v12 + 928), *(void ***)(a1 + v12 + 936), (uint64_t)(*(void *)(a1 + v12 + 936) - *(void *)(a1 + v12 + 928)) >> 3);
        *(_DWORD *)(v17 + 1272) = *(_DWORD *)(v17 + 952);
        if (v12 == -640) {
          break;
        }
        char v19 = (*a3)((uint64_t)v34, a1 + v12 + 320);
        uint64_t v11 = v12 - 320;
        if ((v19 & 1) == 0)
        {
          uint64_t v20 = a1 + v12;
          long long v21 = (_OWORD *)(a1 + v12 + 656);
          uint64_t v22 = a1 + v11 + 960;
          long long v23 = (std::string *)(a1 + v12 + 768);
          long long v24 = (std::string *)(a1 + v12 + 792);
          std::string v25 = (_OWORD *)(v20 + 880);
          std::string v26 = (_OWORD *)(v20 + 848);
          goto LABEL_12;
        }
      }
      long long v21 = (_OWORD *)(a1 + 16);
      long long v23 = (std::string *)(a1 + 128);
      long long v24 = (std::string *)(a1 + 152);
      std::string v25 = (_OWORD *)(a1 + 240);
      std::string v26 = (_OWORD *)(a1 + 208);
      uint64_t v22 = a1;
LABEL_12:
      objc_storeStrong((id *)(v22 + 8), (id)v34[1]);
      long long v27 = v40[0];
      v21[4] = v39;
      v21[5] = v27;
      *(_OWORD *)((char *)v21 + 89) = *(_OWORD *)((char *)v40 + 9);
      long long v28 = v36;
      *long long v21 = v35;
      v21[1] = v28;
      long long v29 = v38;
      v21[2] = v37;
      v21[3] = v29;
      std::string::operator=(v23, &v41);
      std::string::operator=(v24, &v42);
      objc_storeStrong((id *)(v22 + 176), v43);
      *std::string v26 = v44[0];
      *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)v44 + 12);
      long long v30 = v44[3];
      *std::string v25 = v44[2];
      v25[1] = v30;
      v25[2] = v44[4];
      if ((void *)v22 != v34) {
        sub_25B490828(v22 + 288, v45, v46, v46 - v45);
      }
      *(_DWORD *)(v22 + 312) = v47;
      ++v31;
      long long v33 = &v45;
      v34[0] = off_2708F1738;
      sub_25B3F6050((void ***)&v33);

      sub_25B3F5FE8((uint64_t)v34);
      if (v31 == 8) {
        return v9 + 320 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 320;
    v9 += 320;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_25B4F2628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_25B490B60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_25B4F2660(float *a1, float *a2)
{
  return (float)((float)((float)(a1[56] * 6.2832) * (float)(a1[58] - a1[57])) / 360.0) > (float)((float)((float)(a2[56] * 6.2832) * (float)(a2[58] - a2[57]))
                                                                                               / 360.0);
}

void sub_25B4F26AC()
{
}

uint64_t sub_25B4F26C4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v152 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 280))
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      uint64_t v10 = *(float **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          uint64_t v11 = *(float **)(a2 + 288);
          do
          {
            float v12 = *v11++;
            *v10++ = (float)(int)(float)(v12 * *(float *)(a2 + 344));
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(result + 56);
        uint64_t v78 = *(void *)(result + 64);
        uint64_t v79 = *(void *)(a2 + 288);
        do
        {
          uint64_t v80 = 0;
          v10[v77 * (void)v137 + v78 * *((void *)&v137 + 1)] = (float)(int)(float)(*(float *)(v79 + 4 * v76) * *(float *)(a2 + 344));
          do
          {
            uint64_t v81 = *(void *)((char *)&v137 + v80 + 8) + 1;
            *(void *)((char *)&v137 + v80 + 8) = v81;
            BOOL result = *(void *)(v3 + 16 + v80);
            if (v81 != result) {
              break;
            }
            *(void *)((char *)&v137 + v80 + 8) = 0;
            v80 -= 8;
          }
          while (v80 != -16);
          ++v76;
        }
        while (v76 != v9);
      }
    }
    else
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v39 = *(void *)(result + 104);
      uint64_t v40 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a2 + 200);
          uint64_t v43 = *(void *)(a2 + 208);
          uint64_t v44 = *(void *)(a2 + 288);
          do
          {
            uint64_t v45 = 0;
            *(float *)(v40 + 4 * v41) = (float)(int)(float)(*(float *)(v44
                                                                                   + 4
                                                                                   * (v42 * v137
                                                                                    + v43 * *((void *)&v137 + 1)))
                                                                        * *(float *)(a2 + 344));
            do
            {
              uint64_t v46 = *(void *)((char *)&v137 + v45 + 8) + 1;
              *(void *)((char *)&v137 + v45 + 8) = v46;
              BOOL result = *(void *)(v3 + 16 + v45);
              if (v46 != result) {
                break;
              }
              *(void *)((char *)&v137 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v41;
          }
          while (v41 != v39);
        }
      }
      else if (v39)
      {
        uint64_t v100 = 0;
        uint64_t v101 = *(void *)(result + 56);
        uint64_t v102 = *(void *)(result + 64);
        uint64_t v103 = *(void *)(a2 + 200);
        uint64_t v104 = *(void *)(a2 + 208);
        uint64_t v105 = *(void *)(a2 + 288);
        do
        {
          BOOL result = 0;
          *(float *)(v40 + 4 * (v101 * v137 + v102 * *((void *)&v137 + 1))) = (float)(int)(float)(*(float *)(v105 + 4 * (v103 * v137 + v104 * *((void *)&v137 + 1))) * *(float *)(a2 + 344));
          do
          {
            uint64_t v106 = *(void *)((char *)&v137 + result + 8) + 1;
            *(void *)((char *)&v137 + result + 8) = v106;
            if (v106 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v137 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v100;
        }
        while (v100 != v39);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 280))
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        uint64_t v15 = *((void *)&v128 + v13);
        uint64_t v16 = *((void *)v5 + v13);
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while (v15 == v16);
      if (v15 != v16)
      {
        uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        long long v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v18, (uint64_t)" ", 1);
        char v19 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        long long v21 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        uint64_t v22 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v23 = *(void *)(v3 + 104);
      uint64_t v24 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v23)
        {
          uint64_t v25 = 0;
          long long v27 = (uint64_t *)*((void *)&v138 + 1);
          std::string v26 = (uint64_t *)v139;
          unint64_t v28 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(a2 + 288);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v26 != v27)
            {
              long long v30 = v27;
              unint64_t v31 = v28;
              do
              {
                uint64_t v32 = *v30++;
                *((void *)&v131 + v32) = 0;
                --v31;
              }
              while (v31);
            }
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
            do
            {
              char v36 = v35;
              v34 += *((void *)&v149 + v33) * *((void *)&v131 + v33);
              uint64_t v33 = 1;
              char v35 = 0;
            }
            while ((v36 & 1) != 0);
            *(float *)(v24 + 4 * v25) = (float)(int)(float)(*(float *)(v29 + 4 * v34)
                                                                        * *(float *)(a2 + 344));
            for (uint64_t i = 1; i != -1; --i)
            {
              long long v38 = (std::locale::__imp *)((char *)v134[i].__locale_ + 1);
              v134[i].__locale_ = v38;
              if (v38 != *(std::locale::__imp **)((char *)&v128 + i * 8)) {
                break;
              }
              v134[i].__locale_ = 0;
            }
            ++v25;
          }
          while (v25 != v23);
        }
      }
      else if (v23)
      {
        uint64_t v82 = 0;
        long long v84 = (uint64_t *)*((void *)&v138 + 1);
        long long v83 = (uint64_t *)v139;
        unint64_t v85 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v85 <= 1) {
          unint64_t v85 = 1;
        }
        uint64_t v86 = *(void *)(v3 + 56);
        uint64_t v87 = *(void *)(v3 + 64);
        uint64_t v88 = *(void *)(a2 + 288);
        do
        {
          locale = v134[0].__locale_;
          uint64_t v89 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v83 != v84)
          {
            uint64_t v91 = v84;
            unint64_t v92 = v85;
            do
            {
              uint64_t v93 = *v91++;
              *((void *)&v131 + v93) = 0;
              --v92;
            }
            while (v92);
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          char v96 = 1;
          do
          {
            char v97 = v96;
            v95 += *((void *)&v149 + v94) * *((void *)&v131 + v94);
            uint64_t v94 = 1;
            char v96 = 0;
          }
          while ((v97 & 1) != 0);
          *(float *)(v24 + 4 * ((void)locale * v86 + (void)v89 * v87)) = (float)(int)(float)(*(float *)(v88 + 4 * v95) * *(float *)(a2 + 344));
          for (uint64_t j = 1; j != -1; --j)
          {
            long long v99 = (std::locale::__imp *)((char *)v134[j].__locale_ + 1);
            v134[j].__locale_ = v99;
            if (v99 != *(std::locale::__imp **)((char *)&v128 + j * 8)) {
              break;
            }
            v134[j].__locale_ = 0;
          }
          ++v82;
        }
        while (v82 != v23);
      }
    }
    else
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v128 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        long long v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        long long v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        long long v53 = (void *)MEMORY[0x263F8C0F8];
        long long v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        long long v55 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        long long v56 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v57 = *(void *)(v3 + 104);
      uint64_t v58 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v60 = (uint64_t *)v139;
          unint64_t v62 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          int v63 = *(unsigned __int8 *)(a2 + 280);
          uint64_t v64 = *(void *)(a2 + 200);
          uint64_t v65 = *(void *)(a2 + 208);
          uint64_t v66 = *(void *)(a2 + 288);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v60 != v61)
            {
              long long v67 = v61;
              unint64_t v68 = v62;
              do
              {
                uint64_t v69 = *v67++;
                *((void *)&v131 + v69) = 0;
                --v68;
              }
              while (v68);
            }
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            char v72 = 1;
            do
            {
              char v73 = v72;
              v71 += *((void *)&v149 + v70) * *((void *)&v131 + v70);
              uint64_t v70 = 1;
              char v72 = 0;
            }
            while ((v73 & 1) != 0);
            if (!v63) {
              uint64_t v71 = v131 * v64 + *((void *)&v131 + 1) * v65;
            }
            *(float *)(v58 + 4 * v59) = (float)(int)(float)(*(float *)(v66 + 4 * v71)
                                                                        * *(float *)(a2 + 344));
            for (uint64_t k = 1; k != -1; --k)
            {
              float32x4_t v75 = (std::locale::__imp *)((char *)v134[k].__locale_ + 1);
              v134[k].__locale_ = v75;
              if (v75 != *(std::locale::__imp **)((char *)&v128 + k * 8)) {
                break;
              }
              v134[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v107 = 0;
        long long v109 = (uint64_t *)*((void *)&v138 + 1);
        long long v108 = (uint64_t *)v139;
        unint64_t v110 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        uint64_t v111 = *(void *)(v3 + 56);
        uint64_t v112 = *(void *)(v3 + 64);
        int v113 = *(unsigned __int8 *)(a2 + 280);
        uint64_t v114 = *(void *)(a2 + 200);
        uint64_t v115 = *(void *)(a2 + 208);
        uint64_t v116 = *(void *)(a2 + 288);
        do
        {
          long long v118 = v134[0].__locale_;
          long long v117 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v108 != v109)
          {
            long long v119 = v109;
            unint64_t v120 = v110;
            do
            {
              uint64_t v121 = *v119++;
              *((void *)&v131 + v121) = 0;
              --v120;
            }
            while (v120);
          }
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          do
          {
            char v125 = v124;
            v123 += *((void *)&v149 + v122) * *((void *)&v131 + v122);
            uint64_t v122 = 1;
            char v124 = 0;
          }
          while ((v125 & 1) != 0);
          if (!v113) {
            uint64_t v123 = v131 * v114 + *((void *)&v131 + 1) * v115;
          }
          *(float *)(v58 + 4 * ((void)v118 * v111 + (void)v117 * v112)) = (float)(int)(float)(*(float *)(v116 + 4 * v123) * *(float *)(a2 + 344));
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v127 = (std::locale::__imp *)((char *)v134[m].__locale_ + 1);
            v134[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v128 + m * 8)) {
              break;
            }
            v134[m].__locale_ = 0;
          }
          ++v107;
        }
        while (v107 != v57);
      }
    }
    return sub_25B3F9500((uint64_t)&v137);
  }
  return result;
}

void sub_25B4F3114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_25B4F3148(uint64_t a1, uint64_t a2, float *a3)
{
  long long v40 = *(_OWORD *)(a1 + 48);
  long long v42 = *(_OWORD *)(a1 + 32);
  char v6 = operator new(0x10uLL);
  long long v7 = v42;
  DWORD2(v7) = 0;
  *char v6 = v7;
  uint64_t v8 = (char *)sub_25B3FFAEC(2uLL);
  uint64_t v10 = v9;
  long long v11 = v40;
  DWORD2(v11) = 0;
  *((_OWORD *)v8 + 1) = v11;
  *(_OWORD *)uint64_t v8 = *v6;
  operator delete(v6);
  if (v10 < 3)
  {
    uint64_t v15 = 3;
    if ((unint64_t)((16 * v10) >> 3) > 3) {
      uint64_t v15 = (16 * v10) >> 3;
    }
    if ((unint64_t)(16 * v10) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)sub_25B3FFAEC(v16);
    }
    uint64_t v17 = 0;
    *(_OWORD *)(v16 + 32) = *(_OWORD *)(a2 + 208);
    uint64_t v13 = (char *)(v16 + 48);
    do
    {
      *(_OWORD *)(v16 + 32 + v17 - 16) = *(_OWORD *)&v8[v17 + 16];
      v17 -= 16;
    }
    while (v17 != -32);
    char v14 = (unsigned char *)v16;
    operator delete(v8);
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 208);
    *((_OWORD *)v8 + 2) = v12;
    uint64_t v13 = v8 + 48;
    char v14 = v8;
  }
  sub_25B5ED944(v44, (float32x4_t *)(a2 + 192), *(double *)&v12);
  long long v18 = v44[0];
  if (sub_25B48F32C((uint64_t)v14, (v13 - v14) >> 4, (uint64_t)v44[0], v44[1] - v44[0]))
  {
    float32x2_t v19 = vsub_f32(*(float32x2_t *)(a1 + 16), *(float32x2_t *)(a1 + 24));
    int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
    *(float *)v20.i32 = sqrtf(vaddv_f32((float32x2_t)v20));
    int v21 = (int)(float)((float)(*(float *)v20.i32 + -0.000001) / 0.01);
    if (v21 < 0)
    {
      int v23 = 0;
    }
    else
    {
      int v22 = 0;
      int v23 = 0;
      float32x4_t v25 = *(float32x4_t *)(a1 + 32);
      float32x4_t v24 = *(float32x4_t *)(a1 + 48);
      v25.i32[2] = 0;
      v24.i32[2] = 0;
      float32x4_t v43 = v25;
      float32x4_t v26 = vsubq_f32(v24, v25);
      if (*(float *)v20.i32 < 0.000001) {
        *(float *)v20.i32 = 0.000001;
      }
      float32x4_t v41 = vmulq_f32(vdivq_f32(v26, (float32x4_t)vdupq_lane_s32(v20, 0)), (float32x4_t)vdupq_n_s32(0x3C23D70Au));
      do
      {
        float32x4_t v27 = vmlaq_n_f32(v43, v41, (float)v22);
        float32x4_t v28 = *(float32x4_t *)(a2 + 208);
        float32x4_t v29 = vsubq_f32(v27, v28);
        float32x4_t v30 = vmulq_f32(v29, v29);
        int32x2_t v31 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
        *(float *)v31.i32 = sqrtf(*(float *)v31.i32);
        if (*(float *)v31.i32 < 0.000001) {
          *(float *)v31.i32 = 0.000001;
        }
        float32x4_t v32 = vdivq_f32(v29, (float32x4_t)vdupq_lane_s32(v31, 0));
        float32x4_t v33 = vmlaq_f32(vmlaq_n_f32(v28, v32, COERCE_FLOAT(*(_OWORD *)(a2 + 224))), (float32x4_t)0, v32);
        float32x4_t v34 = vsubq_f32(v27, v33);
        float32x4_t v35 = vmulq_f32(v34, v34);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]) <= a3[11])v23 += sub_25B5EDCEC((float32x4_t *)(a2 + 192), v33, 0.0); {
        ++v22;
        }
      }
      while (v21 + 1 != v22);
    }
    float v36 = (float)v23 / (float)(v21 + 1);
    if (v36 > a3[10])
    {
      float32x2_t v37 = vsub_f32(*(float32x2_t *)(a1 + 16), *(float32x2_t *)(a1 + 24));
      uint64_t v38 = (float)((float)(1.0 - v36) * sqrtf(vaddv_f32(vmul_f32(v37, v37)))) >= a3[17];
      if (!v18) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  uint64_t v38 = 0xFFFFFFFFLL;
  if (v18) {
LABEL_29:
  }
    operator delete(v18);
LABEL_30:
  operator delete(v14);
  return v38;
}

void sub_25B4F3458(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_25B4F348C(float32x4_t *a1, float32x4_t *a2, void *a3, void *a4, uint64_t a5)
{
  id v7 = a4;
  uint64_t v8 = (float32x4_t *)v7;
  float v10 = a2[14].f32[1];
  float v9 = a2[14].f32[2];
  float32x2_t v126 = a2;
  if (v9 <= v10
    || (!v7
      ? (unint64_t)(v13 = 0, v12.f64[0] = 0.0, float32x2_t v11 = 0)
      : (float32x2_t v11 = vcvt_f32_f64(*((float64x2_t *)v7 + 7)),
         float64x2_t v12 = *((float64x2_t *)v7 + 5),
         unint64_t v13 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0]),
        float v14 = v9 + 1.0,
        v10 >= (float)(v9 + 1.0)))
  {
    unint64_t v109 = 0;
    uint64_t v110 = 0;
    goto LABEL_157;
  }
  unint64_t v130 = 0;
  unint64_t v131 = 0;
  long long v132 = 0;
  __p = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v129 = 0;
  uint64_t v17 = 0;
  long long v18 = 0;
  int v19 = *(_DWORD *)(a5 + 32);
  *(void *)&v12.f64[1] = v13;
  float32x2_t v20 = vcvt_f32_f64(v12);
  int v125 = -5 - v19;
  int v137 = v19 + 6;
  long long v134 = a3;
  char v124 = (float32x4_t *)v7;
  do
  {
    long long v128 = v18;
    float v21 = v126[14].f32[0];
    __float2 v22 = __sincosf_stret((float)(v10 / 180.0) * 3.1416);
    int v23 = 0;
    float32x4_t v24 = 0;
    unint64_t v25 = 0;
    *(float *)&unint64_t v26 = v22.__cosval * v21;
    *((float *)&v26 + 1) = v22.__sinval * v21;
    float32x4_t v27 = v126[13];
    v27.i32[2] = 0;
    float32x4_t v28 = vaddq_f32((float32x4_t)v26, v27);
    float32x4_t v139 = v28;
    int v29 = v125;
    do
    {
      if (v8) {
        float32x4_t v28 = v8[5];
      }
      else {
        v28.i64[0] = 0;
      }
      float32x4_t v30 = a1[13];
      float32x4_t v31 = vsubq_f32(v139, v30);
      float32x4_t v32 = vmulq_f32(v31, v31);
      int32x2_t v34 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u64[0];
      float v33 = (float)v29 / *(double *)v28.i64;
      *(float *)v34.i32 = sqrtf(*(float *)v34.i32);
      if (*(float *)v34.i32 < 0.000001) {
        *(float *)v34.i32 = 0.000001;
      }
      float32x4_t v35 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v34, 0));
      float32x2_t v36 = vmul_f32(vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_n_f32(vmlaq_n_f32(v30, v35, COERCE_FLOAT(*(_OWORD *)&a1[14])), v35, v33), v11), v20);
      float v37 = -v36.f32[0];
      if (v36.f32[0] >= 0.0) {
        float v37 = v36.f32[0];
      }
      int v38 = (int)v37;
      float v39 = v37 - (float)(int)v37;
      if (v39 < 0.5) {
        int v40 = v38;
      }
      else {
        int v40 = v38 + 1;
      }
      int v41 = (v38 & 1) + v38;
      if (v39 != 0.5) {
        int v41 = v40;
      }
      if (v36.f32[0] < 0.0) {
        int v41 = -v41;
      }
      float v42 = -v36.f32[1];
      if (v36.f32[1] >= 0.0) {
        float v42 = v36.f32[1];
      }
      int v43 = (int)v42;
      float v44 = v42 - (float)(int)v42;
      if (v44 < 0.5) {
        int v45 = v43;
      }
      else {
        int v45 = v43 + 1;
      }
      int v46 = (v43 & 1) + v43;
      if (v44 != 0.5) {
        int v46 = v45;
      }
      if (v36.f32[1] < 0.0) {
        int v46 = -v46;
      }
      v28.i64[0] = __PAIR64__(v46, v41);
      if ((unint64_t)v24 >= v25)
      {
        float32x4_t v135 = v28;
        uint64_t v47 = (v24 - v23) >> 3;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v25 - (void)v23) >> 2 > v48) {
          unint64_t v48 = (uint64_t)(v25 - (void)v23) >> 2;
        }
        if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49) {
          unint64_t v49 = (unint64_t)sub_25B3FCAD4(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        long long v51 = (char *)(v49 + 8 * v47);
        v28.i64[1] = v135.i64[1];
        *(void *)long long v51 = v135.i64[0];
        long long v52 = v51 + 8;
        while (v24 != v23)
        {
          uint64_t v53 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v51 - 1) = v53;
          v51 -= 8;
        }
        unint64_t v25 = v49 + 8 * v50;
        if (v23) {
          operator delete(v23);
        }
        int v23 = v51;
        float32x4_t v24 = v52;
        a3 = v134;
      }
      else
      {
        *(void *)float32x4_t v24 = __PAIR64__(v46, v41);
        v24 += 8;
      }
      ++v29;
    }
    while (v29 != v137);
    long long v54 = 0;
    long long v55 = 0;
    unint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v136 = a3[18];
    uint64_t v58 = v23;
    do
    {
      uint64_t v59 = *(void *)v58;
      uint64_t v60 = HIDWORD(*(void *)v58);
      if ((v60 & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
      {
        unint64_t v61 = a3[2];
        if (v61 > v60 && a3[1] > (unint64_t)v59)
        {
          uint64_t v62 = v60 + v61 * v59;
          if ((unint64_t)v57 >= v56)
          {
            uint64_t v63 = v57 - v54;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v56 - (void)v54) >> 1 > v64) {
              unint64_t v64 = (uint64_t)(v56 - (void)v54) >> 1;
            }
            if (v56 - (unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              unint64_t v65 = (unint64_t)sub_25B3FBC64(v65);
              uint64_t v57 = v55;
            }
            else
            {
              uint64_t v66 = 0;
            }
            long long v67 = (float *)(v65 + 4 * v63);
            *long long v67 = *(float *)(v136 + 4 * v62);
            long long v55 = v67 + 1;
            while (v57 != v54)
            {
              int v68 = *((_DWORD *)v57-- - 1);
              *((_DWORD *)v67-- - 1) = v68;
            }
            unint64_t v56 = v65 + 4 * v66;
            if (v54)
            {
              unint64_t v69 = v65 + 4 * v66;
              operator delete(v54);
              unint64_t v56 = v69;
            }
            long long v54 = v67;
            uint64_t v57 = v55;
            a3 = v134;
          }
          else
          {
            *v57++ = *(float *)(v136 + 4 * v62);
            long long v55 = v57;
          }
        }
      }
      v58 += 8;
    }
    while (v58 != v24);
    uint64_t v70 = v54;
    if (v54 != v55)
    {
      uint64_t v71 = v54 + 1;
      uint64_t v70 = v54;
      if (v54 + 1 != v55)
      {
        float v72 = *v54;
        uint64_t v70 = v54;
        char v73 = v54 + 1;
        do
        {
          float v74 = *v73++;
          float v75 = v74;
          if (v72 < v74)
          {
            float v72 = v75;
            uint64_t v70 = v71;
          }
          uint64_t v71 = v73;
        }
        while (v73 != v55);
      }
    }
    float v76 = *v70;
    long long v18 = v128;
    if ((unint64_t)v17 >= v131)
    {
      uint64_t v77 = v17 - v128;
      unint64_t v78 = v77 + 1;
      uint64_t v8 = v124;
      if ((unint64_t)(v77 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v131 - (void)v128) >> 1 > v78) {
        unint64_t v78 = (uint64_t)(v131 - (void)v128) >> 1;
      }
      if (v131 - (unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v78;
      }
      if (v79) {
        unint64_t v79 = (unint64_t)sub_25B3FBC64(v79);
      }
      else {
        uint64_t v80 = 0;
      }
      uint64_t v81 = (float *)(v79 + 4 * v77);
      *uint64_t v81 = v76;
      uint64_t v82 = v81 + 1;
      while (v17 != v128)
      {
        int v83 = *((_DWORD *)v17-- - 1);
        *((_DWORD *)v81-- - 1) = v83;
      }
      unint64_t v131 = v79 + 4 * v80;
      if (v128) {
        operator delete(v128);
      }
      long long v18 = v81;
      uint64_t v17 = v82;
      a3 = v134;
    }
    else
    {
      *v17++ = v76;
      uint64_t v8 = v124;
    }
    if (v76 <= *(float *)(a5 + 20))
    {
      if ((unint64_t)v15 < v130)
      {
        *v15++ = 0;
        goto LABEL_129;
      }
      uint64_t v88 = v15 - __p;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v130 - (void)__p) >> 1 > v89) {
        unint64_t v89 = (uint64_t)(v130 - (void)__p) >> 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v89;
      }
      if (v86) {
        unint64_t v86 = (unint64_t)sub_25B3FBC64(v86);
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v90 = (_DWORD *)(v86 + 4 * v88);
      *uint64_t v90 = 0;
      uint64_t v91 = v90 + 1;
      if (v15 != __p)
      {
        unint64_t v92 = __p;
        do
        {
          int v94 = *--v15;
          *--uint64_t v90 = v94;
        }
        while (v15 != __p);
        goto LABEL_126;
      }
    }
    else
    {
      if ((unint64_t)v15 < v130)
      {
        *v15++ = 1;
        goto LABEL_129;
      }
      uint64_t v84 = v15 - __p;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v130 - (void)__p) >> 1 > v85) {
        unint64_t v85 = (uint64_t)(v130 - (void)__p) >> 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v85;
      }
      if (v86) {
        unint64_t v86 = (unint64_t)sub_25B3FBC64(v86);
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v90 = (_DWORD *)(v86 + 4 * v84);
      *uint64_t v90 = 1;
      uint64_t v91 = v90 + 1;
      if (v15 != __p)
      {
        unint64_t v92 = __p;
        do
        {
          int v93 = *--v15;
          *--uint64_t v90 = v93;
        }
        while (v15 != __p);
        goto LABEL_126;
      }
    }
    unint64_t v92 = __p;
LABEL_126:
    unint64_t v130 = v86 + 4 * v87;
    if (v92) {
      operator delete(v92);
    }
    __p = v90;
    uint64_t v15 = v91;
    a3 = v134;
LABEL_129:
    float32x4_t v95 = a1[13];
    float32x4_t v96 = vsubq_f32(v139, v95);
    float32x4_t v97 = vmulq_f32(v96, v96);
    int32x2_t v98 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).u64[0];
    *(float *)v98.i32 = sqrtf(*(float *)v98.i32);
    if (*(float *)v98.i32 < 0.000001) {
      *(float *)v98.i32 = 0.000001;
    }
    float32x4_t v99 = vdivq_f32(v96, (float32x4_t)vdupq_lane_s32(v98, 0));
    float32x4_t v100 = vmlaq_f32(vmlaq_n_f32(v95, v99, COERCE_FLOAT(*(_OWORD *)&a1[14])), (float32x4_t)0, v99);
    if ((unint64_t)v16 < v129)
    {
      *v16++ = v100;
      if (!v54) {
        goto LABEL_134;
      }
LABEL_133:
      operator delete(v54);
      goto LABEL_134;
    }
    float32x4_t v140 = v100;
    uint64_t v101 = v16 - v132;
    unint64_t v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 60) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v129 - (void)v132) >> 3 > v102) {
      unint64_t v102 = (uint64_t)(v129 - (void)v132) >> 3;
    }
    if (v129 - (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103) {
      unint64_t v103 = (unint64_t)sub_25B3FFAEC(v103);
    }
    else {
      uint64_t v104 = 0;
    }
    uint64_t v105 = (float32x4_t *)(v103 + 16 * v101);
    *uint64_t v105 = v140;
    uint64_t v106 = v105 + 1;
    if (v16 == v132)
    {
      uint64_t v107 = v132;
    }
    else
    {
      uint64_t v107 = v132;
      do
      {
        float32x4_t v108 = v16[-1];
        --v16;
        v105[-1] = v108;
        --v105;
      }
      while (v16 != v132);
    }
    unint64_t v129 = v103 + 16 * v104;
    if (v107) {
      operator delete(v107);
    }
    long long v132 = v105;
    unint64_t v16 = v106;
    a3 = v134;
    if (v54) {
      goto LABEL_133;
    }
LABEL_134:
    if (v23) {
      operator delete(v23);
    }
    float v10 = v10 + 1.0;
  }
  while (v10 < v14);
  if (v15 != __p)
  {
    _DWORD *__p = 1;
    *(v15 - 1) = 1;
    uint64_t v112 = __p;
    do
    {
      if (*v112 != 1) {
        goto LABEL_176;
      }
      ++v112;
    }
    while (v112 != v15);
    float32x4_t v141 = a1[13];
    __int32 v113 = a1[14].i32[0];
    v99.i32[0] = v113;
    float v114 = sub_25B5EDC28(v141, *(double *)v99.i64, *v132);
    LODWORD(v115) = v113;
    float v116 = sub_25B5EDC28(v141, v115, v16[-1]);
    float v117 = a1[14].f32[1];
    float v118 = v114 + -360.0;
    if (v114 <= v116) {
      float v118 = v114;
    }
    float v119 = vabds_f32(v117, v118);
    if (v118 < 0.0 && v117 > 0.0 && v119 > 180.0)
    {
      uint64_t v123 = v18;
      float v117 = v117 + -360.0;
      goto LABEL_182;
    }
    uint64_t v123 = v18;
    if (v118 <= 0.0)
    {
LABEL_182:
      uint64_t v122 = v132;
    }
    else
    {
      BOOL v121 = v117 >= 0.0 || v119 <= 180.0;
      uint64_t v122 = v132;
      if (!v121) {
        float v118 = v118 + -360.0;
      }
    }
    if (v118 < v117) {
      float v117 = v118;
    }
    unint64_t v109 = (unint64_t)LODWORD(v117) << 32;
    uint64_t v110 = 1;
    if (v122) {
      goto LABEL_177;
    }
    goto LABEL_178;
  }
LABEL_176:
  uint64_t v123 = v18;
  uint64_t v110 = 0;
  unint64_t v109 = 0;
  uint64_t v122 = v132;
  if (v132) {
LABEL_177:
  }
    operator delete(v122);
LABEL_178:
  if (__p) {
    operator delete(__p);
  }
  if (v123) {
    operator delete(v123);
  }
LABEL_157:

  return v109 | v110;
}

void sub_25B4F3DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  if (v21) {
    operator delete(v21);
  }
  if (v20)
  {
    operator delete(v20);
    if (!a18)
    {
LABEL_5:
      if (!a19) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!a18)
  {
    goto LABEL_5;
  }
  operator delete(a18);
  if (!a19)
  {
LABEL_6:
    if (!v19) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  operator delete(a19);
  if (!v19)
  {
LABEL_8:

    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v19);
  goto LABEL_8;
}

void sub_25B4F3E58(uint64_t a1, float a2, __n128 a3)
{
  float v3 = a3.n128_f32[0];
  *(float *)(a1 + 228) = a2;
  *(_DWORD *)(a1 + 232) = a3.n128_u32[0];
  a3.n128_u32[0] = *(_DWORD *)(a1 + 224);
  __n128 v26 = a3;
  __float2 v5 = __sincosf_stret((float)(a2 / 180.0) * 3.1416);
  v6.i64[1] = v26.n128_i64[1];
  *(float32x2_t *)v6.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v5.__sinval), LODWORD(v5.__cosval)), v26.n128_f32[0]);
  float32x4_t v7 = *(float32x4_t *)(a1 + 208);
  v7.i32[2] = 0;
  float32x4_t v24 = v7;
  float32x4_t v25 = vaddq_f32(v7, v6);
  __float2 v10 = __sincosf_stret((float)(v3 / 180.0) * 3.1416);
  v11.i64[1] = v26.n128_i64[1];
  *(float32x2_t *)v11.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v10.__sinval), LODWORD(v10.__cosval)), v26.n128_f32[0]);
  float32x4_t v12 = vaddq_f32(v24, v11);
  *(void *)&long long v13 = v25.i64[0];
  *((void *)&v13 + 1) = v12.i64[0];
  float32x4_t v14 = v25;
  float32x4_t v15 = v25;
  v14.i32[2] = *(_DWORD *)(a1 + 64);
  float32x4_t v16 = v12;
  v16.i32[2] = *(_DWORD *)(a1 + 68);
  *(_OWORD *)(a1 + 16) = v13;
  *(float32x4_t *)(a1 + 32) = v14;
  v15.i32[2] = v16.i32[2];
  v12.i32[2] = v14.i32[2];
  *(float32x4_t *)(a1 + 48) = v16;
  uint64_t v17 = *(void *)(a1 + 8);
  float32x4_t src = v15;
  float32x4_t v28 = v16;
  float32x4_t v29 = v12;
  float32x4_t v30 = v14;
  if (v17) {
    objc_copyStruct((void *)(v17 + 272), &src, 64, 1, 0);
  }
  uint64_t v18 = *(void *)(a1 + 176);
  if (v18)
  {
    *(unsigned char *)(v18 + 105) = 1;
    *(_DWORD *)(v18 + 336) = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(v18 + 340) = *(_DWORD *)(a1 + 228);
    *(_DWORD *)(v18 + 344) = *(_DWORD *)(a1 + 232);
    *(void *)(v18 + 360) = *(void *)(a1 + 208);
  }
  objc_msgSend_quad(*(void **)(a1 + 8), v8, *(void *)&v9, *(_OWORD *)&v24, *(_OWORD *)&v25);
  uint64_t v19 = *(void *)(a1 + 176);
  float32x4_t src = v20;
  float32x4_t v28 = v21;
  float32x4_t v29 = v22;
  float32x4_t v30 = v23;
  if (v19) {
    objc_copyStruct((void *)(v19 + 272), &src, 64, 1, 0);
  }
}

unsigned __int8 *sub_25B4F3FD0(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float32x4_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float32x4_t v15 = (void *)(a1 + 16);
  float32x4_t v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)float32x4_t v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          __n128 v26 = operator new(8 * *(void *)&prime);
          float32x4_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          float32x4_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            float32x4_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *float32x4_t v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  float32x4_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                float32x4_t v29 = v35;
                float32x4_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  float v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *float v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    float v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B4F4968((uint64_t)v41);
  return i;
}

void sub_25B4F4424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4F4968((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_25B4F443C(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    float32x4_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      long long v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_25B403F44((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  long long v13 = (char *)operator new(0x30uLL);
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = v8;
  float32x4_t v15 = v13 + 16;
  float32x4_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)float32x4_t v15 = v17;
  }
  uint64_t v18 = a1 + 2;
  *((_DWORD *)v13 + 10) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          float32x4_t v25 = operator new(8 * *(void *)&prime);
          __n128 v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                uint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  float v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)long long v13 = *v37;
LABEL_75:
    *float v37 = v13;
    goto LABEL_76;
  }
  *(void *)long long v13 = *v18;
  void *v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    float v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_25B4F4854(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4F4878(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_25B4F48D8((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B4F48D8(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    __float2 v5 = *(void **)a1;
    operator delete(v5);
  }
}

void sub_25B4F4968(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4F48D8((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_25B4F5224(void *a1, float32x2_t *a2)
{
  uint64_t v529 = *MEMORY[0x263EF8340];
  uint64_t v487 = (uint64_t *)v488;
  v488[0] = 0;
  double v490 = 0;
  uint64_t v491 = 0;
  v488[1] = 0;
  double v489 = &v490;
  memset(v492, 0, sizeof(v492));
  int v493 = 1065353216;
  long long v494 = 0u;
  long long v495 = 0u;
  long long v496 = 0u;
  uint64_t v497 = 0;
  int v498 = 1065353216;
  long long v525 = 0u;
  long long v526 = 0u;
  v527.i32[0] = 1065353216;
  *(_OWORD *)__p = 0u;
  long long v522 = 0u;
  LODWORD(v523) = 1065353216;
  unint64_t v3 = (int *)a2[47];
  uint64_t v4 = (int *)a2[48];
  if (v3 == v4) {
    goto LABEL_328;
  }
  unint64_t v2 = (unint64_t)&a2[40];
  float32x2_t v5 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  do
  {
    float32x4_t v6 = (int *)a2[47];
    unint64_t v7 = (int *)a2[48];
    while (v6 != v7)
    {
      int v8 = *v3;
      int v9 = *v6;
      if (*v3 < *v6)
      {
        uint8x8_t v10 = sub_25B3FAB54(*(void *)&a2[58], *(void *)&a2[59], *v3, *v6);
        if (v10)
        {
          unint64_t v11 = *(float32x2_t **)v2;
          if (!*(void *)v2) {
            goto LABEL_17;
          }
          float32x4_t v12 = (float32x2_t *)v2;
          long long v13 = *(float32x2_t **)v2;
          do
          {
            int v14 = v13[4].i32[0];
            BOOL v15 = v14 < v8;
            if (v14 >= v8) {
              float32x4_t v16 = (float32x2_t **)v13;
            }
            else {
              float32x4_t v16 = (float32x2_t **)&v13[1];
            }
            if (!v15) {
              float32x4_t v12 = v13;
            }
            long long v13 = *v16;
          }
          while (*v16);
          if (v12 == (float32x2_t *)v2 || v8 < v12[4].i32[0]) {
LABEL_17:
          }
            float32x4_t v12 = (float32x2_t *)v2;
          if (!v11) {
            goto LABEL_28;
          }
          long long v17 = (float32x2_t *)v2;
          do
          {
            int v18 = v11[4].i32[0];
            BOOL v19 = v18 < v9;
            if (v18 >= v9) {
              float v20 = (float32x2_t **)v11;
            }
            else {
              float v20 = (float32x2_t **)&v11[1];
            }
            if (!v19) {
              long long v17 = v11;
            }
            unint64_t v11 = *v20;
          }
          while (*v20);
          if (v17 == (float32x2_t *)v2 || v9 < v17[4].i32[0]) {
LABEL_28:
          }
            long long v17 = (float32x2_t *)v2;
          if (*((unsigned char *)v10 + 136))
          {
            BOOL v21 = (void *)v10[16];
            if (sub_25B40DB9C((float32x2_t)v21, v12[5], v12[6], 0.0) < 0.1
              && sub_25B40DB9C((float32x2_t)v21, v17[5], v17[6], 0.0) < 0.1)
            {
              v506[0] = (void *)vcvt_s32_f32(vrnda_f32(vdiv_f32((float32x2_t)v21, v5)));
              v506[1] = v21;
              unint64_t v22 = sub_25B4F9C00((uint64_t)&v525, (int *)v506);
              sub_25B3FAF64((uint64_t)v22, *v3, *v3);
              unint64_t v23 = sub_25B4F9C00((uint64_t)&v525, (int *)v506);
              sub_25B3FAF64((uint64_t)v23, *v6, *v6);
            }
          }
        }
      }
      ++v6;
    }
    ++v3;
  }
  while (v3 != v4);
  unint64_t v24 = (uint64_t *)v526;
  if (!(void)v526)
  {
LABEL_328:
    *(_OWORD *)v506 = 0u;
    long long v507 = 0u;
    float v508 = 1.0;
  }
  else
  {
    do
    {
      float32x4_t v25 = (uint64_t *)v24[6];
      if (v25)
      {
        while (1)
        {
          int v26 = *((_DWORD *)v25 + 4);
          unint64_t v27 = v26;
          unint64_t v28 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              unint64_t v2 = v26;
              if (__p[1] <= (void *)v26) {
                unint64_t v2 = v26 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v2 = ((unint64_t)__p[1] - 1) & v26;
            }
            uint8x8_t v30 = (char **)*((void *)__p[0] + v2);
            if (v30)
            {
              for (uint64_t i = *v30; i; uint64_t i = *(char **)i)
              {
                unint64_t v32 = *((void *)i + 1);
                if (v32 == v26)
                {
                  if (*((_DWORD *)i + 4) == v26) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  if (v29.u32[0] > 1uLL)
                  {
                    if ((void *)v32 >= __p[1]) {
                      v32 %= (unint64_t)__p[1];
                    }
                  }
                  else
                  {
                    v32 &= (unint64_t)__p[1] - 1;
                  }
                  if (v32 != v2) {
                    break;
                  }
                }
              }
            }
          }
          uint64_t v33 = operator new(0x40uLL);
          v506[0] = v33;
          v506[1] = &v522;
          *uint64_t v33 = 0;
          v33[1] = v26;
          *((_DWORD *)v33 + 4) = v26;
          *(_OWORD *)(v33 + 3) = 0u;
          *(_OWORD *)(v33 + 5) = 0u;
          *((_DWORD *)v33 + 14) = 1065353216;
          LOBYTE(v507) = 1;
          float v34 = (float)(unint64_t)(*((void *)&v522 + 1) + 1);
          if (!v28 || (float)(*(float *)&v523 * (float)v28) < v34) {
            break;
          }
LABEL_99:
          uint64_t v50 = (void *)*((void *)__p[0] + v2);
          if (v50)
          {
            *(void *)v506[0] = *v50;
            void *v50 = v506[0];
          }
          else
          {
            *(void *)v506[0] = v522;
            *(void **)&long long v522 = v506[0];
            *((void *)__p[0] + v2) = &v522;
            if (*(void *)v506[0])
            {
              unint64_t v51 = *(void *)(*(void *)v506[0] + 8);
              if ((v28 & (v28 - 1)) != 0)
              {
                if (v51 >= v28) {
                  v51 %= v28;
                }
              }
              else
              {
                v51 &= v28 - 1;
              }
              *((void **)__p[0] + v51) = v506[0];
            }
          }
          uint64_t i = (char *)v506[0];
          v506[0] = 0;
          ++*((void *)&v522 + 1);
          sub_25B4FA04C((uint64_t)v506);
LABEL_108:
          uint64_t v52 = *((int *)v24 + 4);
          uint64_t v53 = *((int *)v24 + 5);
          unint64_t v54 = v53 + 2654435769 + ((v52 + 2654435769) << 6) + ((unint64_t)(v52 + 2654435769) >> 2);
          unint64_t v55 = v54 ^ (v52 + 2654435769);
          unint64_t v56 = *((void *)i + 4);
          if (v56)
          {
            uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              unint64_t v2 = v54 ^ (v52 + 2654435769);
              if (v55 >= v56) {
                unint64_t v2 = v55 % v56;
              }
            }
            else
            {
              unint64_t v2 = v55 & (v56 - 1);
            }
            uint64_t v58 = *(uint64_t ***)(*((void *)i + 3) + 8 * v2);
            if (v58)
            {
              for (uint64_t j = *v58; j; uint64_t j = (uint64_t *)*j)
              {
                unint64_t v60 = j[1];
                if (v60 == v55)
                {
                  if (*((_DWORD *)j + 4) == v52 && *((_DWORD *)j + 5) == v53) {
                    goto LABEL_184;
                  }
                }
                else
                {
                  if (v57.u32[0] > 1uLL)
                  {
                    if (v60 >= v56) {
                      v60 %= v56;
                    }
                  }
                  else
                  {
                    v60 &= v56 - 1;
                  }
                  if (v60 != v2) {
                    break;
                  }
                }
              }
            }
          }
          uint64_t v62 = operator new(0x20uLL);
          *uint64_t v62 = 0;
          v62[1] = v55;
          *((_OWORD *)v62 + 1) = *((_OWORD *)v24 + 1);
          float v63 = (float)(unint64_t)(*((void *)i + 6) + 1);
          float v64 = *((float *)i + 14);
          if (!v56 || (float)(v64 * (float)v56) < v63)
          {
            BOOL v65 = (v56 & (v56 - 1)) == 0;
            if (v56 < 3) {
              BOOL v65 = 0;
            }
            unint64_t v66 = (2 * v56) | !v65;
            unint64_t v67 = vcvtps_u32_f32(v63 / v64);
            if (v66 <= v67) {
              int8x8_t prime = (int8x8_t)v67;
            }
            else {
              int8x8_t prime = (int8x8_t)v66;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
              unint64_t v56 = *((void *)i + 4);
            }
            if (*(void *)&prime <= v56)
            {
              if (*(void *)&prime < v56)
              {
                unint64_t v75 = vcvtps_u32_f32((float)*((unint64_t *)i + 6) / *((float *)i + 14));
                if (v56 < 3
                  || (uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
                {
                  unint64_t v75 = std::__next_prime(v75);
                }
                else
                {
                  uint64_t v77 = 1 << -(char)__clz(v75 - 1);
                  if (v75 >= 2) {
                    unint64_t v75 = v77;
                  }
                }
                if (*(void *)&prime <= v75) {
                  int8x8_t prime = (int8x8_t)v75;
                }
                if (*(void *)&prime >= v56)
                {
                  unint64_t v56 = *((void *)i + 4);
                }
                else
                {
                  if (prime) {
                    goto LABEL_140;
                  }
                  unint64_t v85 = (void *)*((void *)i + 3);
                  *((void *)i + 3) = 0;
                  if (v85) {
                    operator delete(v85);
                  }
                  unint64_t v56 = 0;
                  *((void *)i + 4) = 0;
                }
              }
            }
            else
            {
LABEL_140:
              if (*(void *)&prime >> 61) {
                sub_25B3FA70C();
              }
              unint64_t v69 = operator new(8 * *(void *)&prime);
              uint64_t v70 = (void *)*((void *)i + 3);
              *((void *)i + 3) = v69;
              if (v70) {
                operator delete(v70);
              }
              uint64_t v71 = 0;
              *((int8x8_t *)i + 4) = prime;
              do
                *(void *)(*((void *)i + 3) + 8 * v71++) = 0;
              while (*(void *)&prime != v71);
              float v72 = (void *)*((void *)i + 5);
              if (v72)
              {
                unint64_t v73 = v72[1];
                uint8x8_t v74 = (uint8x8_t)vcnt_s8(prime);
                v74.i16[0] = vaddlv_u8(v74);
                if (v74.u32[0] > 1uLL)
                {
                  if (v73 >= *(void *)&prime) {
                    v73 %= *(void *)&prime;
                  }
                }
                else
                {
                  v73 &= *(void *)&prime - 1;
                }
                *(void *)(*((void *)i + 3) + 8 * v73) = i + 40;
                unint64_t v78 = (void *)*v72;
                if (*v72)
                {
                  do
                  {
                    unint64_t v79 = v78[1];
                    if (v74.u32[0] > 1uLL)
                    {
                      if (v79 >= *(void *)&prime) {
                        v79 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v79 &= *(void *)&prime - 1;
                    }
                    if (v79 != v73)
                    {
                      uint64_t v80 = *((void *)i + 3);
                      if (!*(void *)(v80 + 8 * v79))
                      {
                        *(void *)(v80 + 8 * v79) = v72;
                        goto LABEL_165;
                      }
                      void *v72 = *v78;
                      *unint64_t v78 = **(void **)(*((void *)i + 3) + 8 * v79);
                      **(void **)(*((void *)i + 3) + 8 * v79) = v78;
                      unint64_t v78 = v72;
                    }
                    unint64_t v79 = v73;
LABEL_165:
                    float v72 = v78;
                    unint64_t v78 = (void *)*v78;
                    unint64_t v73 = v79;
                  }
                  while (v78);
                }
              }
              unint64_t v56 = (unint64_t)prime;
            }
            if ((v56 & (v56 - 1)) != 0)
            {
              if (v55 >= v56) {
                unint64_t v2 = v55 % v56;
              }
              else {
                unint64_t v2 = v55;
              }
            }
            else
            {
              unint64_t v2 = (v56 - 1) & v55;
            }
          }
          uint64_t v81 = *((void *)i + 3);
          uint64_t v82 = *(void **)(v81 + 8 * v2);
          if (v82)
          {
            *uint64_t v62 = *v82;
          }
          else
          {
            *uint64_t v62 = *((void *)i + 5);
            *((void *)i + 5) = v62;
            *(void *)(v81 + 8 * v2) = i + 40;
            if (!*v62) {
              goto LABEL_183;
            }
            unint64_t v83 = *(void *)(*v62 + 8);
            if ((v56 & (v56 - 1)) != 0)
            {
              if (v83 >= v56) {
                v83 %= v56;
              }
            }
            else
            {
              v83 &= v56 - 1;
            }
            uint64_t v82 = (void *)(*((void *)i + 3) + 8 * v83);
          }
          void *v82 = v62;
LABEL_183:
          ++*((void *)i + 6);
LABEL_184:
          float32x4_t v25 = (uint64_t *)*v25;
          if (!v25) {
            goto LABEL_204;
          }
        }
        BOOL v35 = (v28 & (v28 - 1)) == 0;
        if (v28 < 3) {
          BOOL v35 = 0;
        }
        unint64_t v36 = (2 * v28) | !v35;
        unint64_t v37 = vcvtps_u32_f32(v34 / *(float *)&v523);
        if (v36 <= v37) {
          int8x8_t v38 = (int8x8_t)v37;
        }
        else {
          int8x8_t v38 = (int8x8_t)v36;
        }
        if (*(void *)&v38 == 1)
        {
          int8x8_t v38 = (int8x8_t)2;
        }
        else if ((*(void *)&v38 & (*(void *)&v38 - 1)) != 0)
        {
          int8x8_t v38 = (int8x8_t)std::__next_prime(*(void *)&v38);
          unint64_t v28 = (unint64_t)__p[1];
        }
        if (*(void *)&v38 > v28) {
          goto LABEL_65;
        }
        if (*(void *)&v38 < v28)
        {
          unint64_t v45 = vcvtps_u32_f32((float)*((unint64_t *)&v522 + 1) / *(float *)&v523);
          if (v28 < 3 || (uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
          {
            unint64_t v45 = std::__next_prime(v45);
          }
          else
          {
            uint64_t v47 = 1 << -(char)__clz(v45 - 1);
            if (v45 >= 2) {
              unint64_t v45 = v47;
            }
          }
          if (*(void *)&v38 <= v45) {
            int8x8_t v38 = (int8x8_t)v45;
          }
          if (*(void *)&v38 >= v28)
          {
            unint64_t v28 = (unint64_t)__p[1];
          }
          else
          {
            if (v38)
            {
LABEL_65:
              if (*(void *)&v38 >> 61) {
                sub_25B3FA70C();
              }
              float v39 = operator new(8 * *(void *)&v38);
              int v40 = __p[0];
              __p[0] = v39;
              if (v40) {
                operator delete(v40);
              }
              uint64_t v41 = 0;
              __p[1] = (void *)v38;
              do
                *((void *)__p[0] + v41++) = 0;
              while (*(void *)&v38 != v41);
              char v42 = (void **)v522;
              if ((void)v522)
              {
                unint64_t v43 = *(void *)(v522 + 8);
                uint8x8_t v44 = (uint8x8_t)vcnt_s8(v38);
                v44.i16[0] = vaddlv_u8(v44);
                if (v44.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&v38) {
                    v43 %= *(void *)&v38;
                  }
                }
                else
                {
                  v43 &= *(void *)&v38 - 1;
                }
                *((void *)__p[0] + v43) = &v522;
                for (k = *v42; k; unint64_t v43 = v49)
                {
                  unint64_t v49 = k[1];
                  if (v44.u32[0] > 1uLL)
                  {
                    if (v49 >= *(void *)&v38) {
                      v49 %= *(void *)&v38;
                    }
                  }
                  else
                  {
                    v49 &= *(void *)&v38 - 1;
                  }
                  if (v49 != v43)
                  {
                    if (!*((void *)__p[0] + v49))
                    {
                      *((void *)__p[0] + v49) = v42;
                      goto LABEL_90;
                    }
                    *char v42 = (void *)*k;
                    *uint64_t k = **((void **)__p[0] + v49);
                    **((void **)__p[0] + v49) = k;
                    uint64_t k = v42;
                  }
                  unint64_t v49 = v43;
LABEL_90:
                  char v42 = (void **)k;
                  uint64_t k = (void *)*k;
                }
              }
              unint64_t v28 = (unint64_t)v38;
              goto LABEL_94;
            }
            uint64_t v84 = __p[0];
            __p[0] = 0;
            if (v84) {
              operator delete(v84);
            }
            unint64_t v28 = 0;
            __p[1] = 0;
          }
        }
LABEL_94:
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v28 <= v27) {
            unint64_t v2 = v27 % v28;
          }
          else {
            unint64_t v2 = v27;
          }
        }
        else
        {
          unint64_t v2 = (v28 - 1) & v27;
        }
        goto LABEL_99;
      }
LABEL_204:
      unint64_t v24 = (uint64_t *)*v24;
    }
    while (v24);
    unint64_t v86 = (uint64_t *)v526;
    *(_OWORD *)v506 = 0u;
    long long v507 = 0u;
    float v508 = 1.0;
    if ((void)v526)
    {
      while (1)
      {
        uint64_t v87 = *((int *)v86 + 4);
        int v88 = v491;
        uint64_t v89 = *((int *)v86 + 5);
        unint64_t v90 = v89 + 2654435769 + ((v87 + 2654435769) << 6) + ((unint64_t)(v87 + 2654435769) >> 2);
        unint64_t v91 = v90 ^ (v87 + 2654435769);
        unint64_t v92 = (unint64_t)v506[1];
        if (v506[1])
        {
          uint8x8_t v93 = (uint8x8_t)vcnt_s8((int8x8_t)v506[1]);
          v93.i16[0] = vaddlv_u8(v93);
          if (v93.u32[0] > 1uLL)
          {
            unint64_t v2 = v90 ^ (v87 + 2654435769);
            if ((void *)v91 >= v506[1]) {
              unint64_t v2 = v91 % (unint64_t)v506[1];
            }
          }
          else
          {
            unint64_t v2 = v91 & ((unint64_t)v506[1] - 1);
          }
          int v94 = (void **)*((void *)v506[0] + v2);
          if (v94)
          {
            float32x4_t v95 = *v94;
            if (*v94)
            {
              do
              {
                unint64_t v96 = v95[1];
                if (v96 == v91)
                {
                  if (*((_DWORD *)v95 + 4) == v87 && *((_DWORD *)v95 + 5) == v89) {
                    goto LABEL_282;
                  }
                }
                else
                {
                  if (v93.u32[0] > 1uLL)
                  {
                    if ((void *)v96 >= v506[1]) {
                      v96 %= (unint64_t)v506[1];
                    }
                  }
                  else
                  {
                    v96 &= (unint64_t)v506[1] - 1;
                  }
                  if (v96 != v2) {
                    break;
                  }
                }
                float32x4_t v95 = (void *)*v95;
              }
              while (v95);
            }
          }
        }
        float32x4_t v95 = operator new(0x28uLL);
        *float32x4_t v95 = 0;
        v95[1] = v91;
        *((_OWORD *)v95 + 1) = *((_OWORD *)v86 + 1);
        *((_DWORD *)v95 + 8) = 0;
        float v98 = (float)(unint64_t)(*((void *)&v507 + 1) + 1);
        if (!v92 || (float)(v508 * (float)v92) < v98) {
          break;
        }
LABEL_272:
        float v114 = v506[0];
        double v115 = (void *)*((void *)v506[0] + v2);
        if (v115)
        {
          *float32x4_t v95 = *v115;
        }
        else
        {
          *float32x4_t v95 = v507;
          *(void *)&long long v507 = v95;
          v114[v2] = &v507;
          if (!*v95) {
            goto LABEL_281;
          }
          unint64_t v116 = *(void *)(*v95 + 8);
          if ((v92 & (v92 - 1)) != 0)
          {
            if (v116 >= v92) {
              v116 %= v92;
            }
          }
          else
          {
            v116 &= v92 - 1;
          }
          double v115 = (char *)v506[0] + 8 * v116;
        }
        void *v115 = v95;
LABEL_281:
        ++*((void *)&v507 + 1);
LABEL_282:
        *((_DWORD *)v95 + 8) = v88;
        __c[0] = v88;
        v503[1] = 0;
        *(void *)&long long v504 = 0;
        v503[0] = &v503[1];
        float v117 = sub_25B3FA1DC(&v487, v88, __c);
        float v118 = (uint64_t *)(v117 + 6);
        sub_25B3FA930(v117[6]);
        float v119 = (uint64_t *)v503[1];
        v117[5] = (uint64_t *)v503[0];
        v117[6] = v119;
        uint64_t v120 = v504;
        v117[7] = (uint64_t *)v504;
        if (v120)
        {
          v119[2] = (uint64_t)v118;
          v503[0] = &v503[1];
          v503[1] = 0;
          *(void *)&long long v504 = 0;
          float v119 = 0;
        }
        else
        {
          v117[5] = v118;
        }
        sub_25B3FA930(v119);
        uint64_t v121 = v86[3];
        uint64_t v122 = v490;
        for (m = &v490; ; uint64_t v122 = *m)
        {
          char v124 = m;
          if (!v122) {
            break;
          }
          while (1)
          {
            uint64_t m = (uint64_t **)v122;
            int v125 = *((_DWORD *)v122 + 8);
            if (v125 > v88) {
              break;
            }
            if (v125 >= v88)
            {
              float32x2_t v126 = m;
              goto LABEL_296;
            }
            uint64_t v122 = m[1];
            if (!v122)
            {
              char v124 = m + 1;
              goto LABEL_293;
            }
          }
        }
LABEL_293:
        float32x2_t v126 = operator new(0x30uLL);
        v126[8] = v88;
        *((void *)v126 + 5) = 0;
        *(void *)float32x2_t v126 = 0;
        *((void *)v126 + 1) = 0;
        *((void *)v126 + 2) = m;
        float32x4_t *v124 = (uint64_t *)v126;
        uint64_t v127 = (uint64_t *)v126;
        if (*v489)
        {
          double v489 = (uint64_t **)*v489;
          uint64_t v127 = *v124;
        }
        sub_25B3FA798(v490, v127);
        ++v491;
LABEL_296:
        *((void *)v126 + 5) = v121;
        long long v128 = (__int32 *)*((void *)&v494 + 1);
        unint64_t v129 = wmemchr((__int32 *)v494, v88, (uint64_t)(*((void *)&v494 + 1) - v494) >> 2);
        if (v129) {
          unint64_t v130 = v129;
        }
        else {
          unint64_t v130 = v128;
        }
        if (v130 == *((__int32 **)&v494 + 1))
        {
          if ((unint64_t)v130 >= (unint64_t)v495)
          {
            long long v132 = (__int32 *)v494;
            uint64_t v133 = (uint64_t)(*((void *)&v494 + 1) - v494) >> 2;
            unint64_t v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            uint64_t v135 = v495 - v494;
            if ((uint64_t)(v495 - v494) >> 1 > v134) {
              unint64_t v134 = v135 >> 1;
            }
            _CF = (unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v137 = v134;
            }
            if (v137)
            {
              unint64_t v137 = (unint64_t)sub_25B3FBC64(v137);
              unint64_t v130 = (__int32 *)*((void *)&v494 + 1);
              long long v132 = (__int32 *)v494;
            }
            else
            {
              uint64_t v138 = 0;
            }
            float32x4_t v139 = (int *)(v137 + 4 * v133);
            *float32x4_t v139 = v88;
            unint64_t v131 = v139 + 1;
            while (v130 != v132)
            {
              int v140 = *--v130;
              *--float32x4_t v139 = v140;
            }
            *(void *)&long long v494 = v139;
            *((void *)&v494 + 1) = v131;
            *(void *)&long long v495 = v137 + 4 * v138;
            if (v132) {
              operator delete(v132);
            }
          }
          else
          {
            *unint64_t v130 = v88;
            unint64_t v131 = v130 + 1;
          }
          *((void *)&v494 + 1) = v131;
          v503[0] = 0;
          v503[1] = 0;
          *(void *)&long long v504 = 0;
          sub_25B3FF328((uint64_t)&v495 + 8, __c[0], __c[0], (uint64_t)v503);
          if (v503[0]) {
            operator delete(v503[0]);
          }
        }
        unint64_t v86 = (uint64_t *)*v86;
        if (!v86) {
          goto LABEL_329;
        }
      }
      BOOL v99 = (v92 & (v92 - 1)) == 0;
      if (v92 < 3) {
        BOOL v99 = 0;
      }
      unint64_t v100 = (2 * v92) | !v99;
      unint64_t v101 = vcvtps_u32_f32(v98 / v508);
      if (v100 <= v101) {
        int8x8_t v102 = (int8x8_t)v101;
      }
      else {
        int8x8_t v102 = (int8x8_t)v100;
      }
      if (*(void *)&v102 == 1)
      {
        int8x8_t v102 = (int8x8_t)2;
      }
      else if ((*(void *)&v102 & (*(void *)&v102 - 1)) != 0)
      {
        int8x8_t v102 = (int8x8_t)std::__next_prime(*(void *)&v102);
        unint64_t v92 = (unint64_t)v506[1];
      }
      if (*(void *)&v102 > v92) {
        goto LABEL_238;
      }
      if (*(void *)&v102 < v92)
      {
        unint64_t v109 = vcvtps_u32_f32((float)*((unint64_t *)&v507 + 1) / v508);
        if (v92 < 3 || (uint8x8_t v110 = (uint8x8_t)vcnt_s8((int8x8_t)v92), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
        {
          unint64_t v109 = std::__next_prime(v109);
        }
        else
        {
          uint64_t v111 = 1 << -(char)__clz(v109 - 1);
          if (v109 >= 2) {
            unint64_t v109 = v111;
          }
        }
        if (*(void *)&v102 <= v109) {
          int8x8_t v102 = (int8x8_t)v109;
        }
        if (*(void *)&v102 >= v92)
        {
          unint64_t v92 = (unint64_t)v506[1];
        }
        else
        {
          if (v102)
          {
LABEL_238:
            if (*(void *)&v102 >> 61) {
              sub_25B3FA70C();
            }
            unint64_t v103 = operator new(8 * *(void *)&v102);
            uint64_t v104 = v506[0];
            v506[0] = v103;
            if (v104) {
              operator delete(v104);
            }
            uint64_t v105 = 0;
            v506[1] = (void *)v102;
            do
              *((void *)v506[0] + v105++) = 0;
            while (*(void *)&v102 != v105);
            uint64_t v106 = (void **)v507;
            if ((void)v507)
            {
              unint64_t v107 = *(void *)(v507 + 8);
              uint8x8_t v108 = (uint8x8_t)vcnt_s8(v102);
              v108.i16[0] = vaddlv_u8(v108);
              if (v108.u32[0] > 1uLL)
              {
                if (v107 >= *(void *)&v102) {
                  v107 %= *(void *)&v102;
                }
              }
              else
              {
                v107 &= *(void *)&v102 - 1;
              }
              *((void *)v506[0] + v107) = &v507;
              for (n = *v106; n; unint64_t v107 = v113)
              {
                unint64_t v113 = n[1];
                if (v108.u32[0] > 1uLL)
                {
                  if (v113 >= *(void *)&v102) {
                    v113 %= *(void *)&v102;
                  }
                }
                else
                {
                  v113 &= *(void *)&v102 - 1;
                }
                if (v113 != v107)
                {
                  if (!*((void *)v506[0] + v113))
                  {
                    *((void *)v506[0] + v113) = v106;
                    goto LABEL_263;
                  }
                  float32x4_t *v106 = (void *)*n;
                  void *n = **((void **)v506[0] + v113);
                  **((void **)v506[0] + v113) = n;
                  uint64_t n = v106;
                }
                unint64_t v113 = v107;
LABEL_263:
                uint64_t v106 = (void **)n;
                uint64_t n = (void *)*n;
              }
            }
            unint64_t v92 = (unint64_t)v102;
            goto LABEL_267;
          }
          float32x4_t v141 = v506[0];
          v506[0] = 0;
          if (v141) {
            operator delete(v141);
          }
          unint64_t v92 = 0;
          v506[1] = 0;
        }
      }
LABEL_267:
      if ((v92 & (v92 - 1)) != 0)
      {
        if (v91 >= v92) {
          unint64_t v2 = v91 % v92;
        }
        else {
          unint64_t v2 = v91;
        }
      }
      else
      {
        unint64_t v2 = (v92 - 1) & v91;
      }
      goto LABEL_272;
    }
  }
LABEL_329:
  long long v142 = (uint64_t *)v522;
  if ((void)v522)
  {
    unint64_t v2 = (unint64_t)&a2[40];
    do
    {
      long long v143 = (uint64_t *)v142[5];
      long long v144 = v143;
      if (v143)
      {
        while (1)
        {
          while (!v143)
          {
            long long v144 = (uint64_t *)*v144;
            if (!v144) {
              goto LABEL_389;
            }
            long long v143 = (uint64_t *)v142[5];
          }
          int v145 = *((_DWORD *)v144 + 4);
          int v146 = *((_DWORD *)v143 + 4);
          if (v145 < v146)
          {
            int v147 = *((_DWORD *)v144 + 5);
            int v148 = *((_DWORD *)v143 + 5);
            if (v147 < v148)
            {
              long long v149 = v506[0];
              long long v150 = v506[1];
              int v151 = *((_DWORD *)sub_25B4FA154((uint64_t)v506[0], (unint64_t)v506[1], v145, v147) + 8);
              uint64_t v152 = sub_25B4FA154((uint64_t)v149, (unint64_t)v150, v146, v148);
              long long v153 = *(float32x2_t **)v2;
              if (!*(void *)v2) {
                goto LABEL_345;
              }
              int v154 = *((_DWORD *)v142 + 4);
              long long v155 = a2 + 40;
              do
              {
                __int32 v156 = v153[4].i32[0];
                BOOL v157 = v156 < v154;
                if (v156 >= v154) {
                  long long v158 = (float32x2_t **)v153;
                }
                else {
                  long long v158 = (float32x2_t **)&v153[1];
                }
                if (!v157) {
                  long long v155 = v153;
                }
                long long v153 = *v158;
              }
              while (*v158);
              if (v155 == (float32x2_t *)v2 || v154 < v155[4].i32[0]) {
LABEL_345:
              }
                long long v155 = a2 + 40;
              int v159 = *((_DWORD *)v152 + 8);
              __c[0] = v151;
              LODWORD(v499) = v159;
              v503[0] = (void *)__PAIR64__(v159, v151);
              long long v160 = sub_25B3FF558((uint64_t)v492, v151, v159, v503);
              long long v161 = *(_OWORD *)v155[5].f32;
              *(_OWORD *)(v160 + 40) = *(_OWORD *)v155[7].f32;
              *(_OWORD *)(v160 + 24) = v161;
              long long v162 = sub_25B3FA1DC(&v487, v151, __c);
              *((_DWORD *)sub_25B3FEBEC(v162 + 5, v159, (unsigned int *)&v499) + 8) = 1065353216;
              long long v163 = sub_25B3FA1DC(&v487, v159, &v499);
              *((_DWORD *)sub_25B3FEBEC(v163 + 5, v151, (unsigned int *)__c) + 8) = 1065353216;
              long long v164 = (__int32 *)sub_25B3FA294((uint64_t)&v495 + 8, v151, __c)[3];
              long long v165 = (__int32 *)sub_25B3FA294((uint64_t)&v495 + 8, v151, __c)[4];
              long long v166 = wmemchr(v164, v159, v165 - v164);
              long long v167 = sub_25B3FA294((uint64_t)&v495 + 8, v151, __c);
              if (v166) {
                long long v168 = v166;
              }
              else {
                long long v168 = v165;
              }
              if (v168 == (__int32 *)v167[4])
              {
                long long v169 = sub_25B3FA294((uint64_t)&v495 + 8, v151, __c);
                long long v170 = v169;
                long long v172 = (int *)v169[4];
                unint64_t v171 = v169[5];
                if ((unint64_t)v172 >= v171)
                {
                  int v174 = (int *)v169[3];
                  uint64_t v175 = v172 - v174;
                  unint64_t v176 = v175 + 1;
                  if ((unint64_t)(v175 + 1) >> 62) {
                    goto LABEL_842;
                  }
                  uint64_t v177 = v171 - (void)v174;
                  if (v177 >> 1 > v176) {
                    unint64_t v176 = v177 >> 1;
                  }
                  _CF = (unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF) {
                    unint64_t v178 = v176;
                  }
                  if (v178)
                  {
                    unint64_t v178 = (unint64_t)sub_25B3FBC64(v178);
                    int v174 = (int *)v170[3];
                    long long v172 = (int *)v170[4];
                  }
                  else
                  {
                    uint64_t v179 = 0;
                  }
                  uint64_t v180 = (int *)(v178 + 4 * v175);
                  int *v180 = v159;
                  long long v173 = v180 + 1;
                  while (v172 != v174)
                  {
                    int v181 = *--v172;
                    *--uint64_t v180 = v181;
                  }
                  v170[3] = v180;
                  v170[4] = v173;
                  v170[5] = v178 + 4 * v179;
                  if (v174) {
                    operator delete(v174);
                  }
                }
                else
                {
                  *long long v172 = v159;
                  long long v173 = v172 + 1;
                }
                v170[4] = v173;
                int v159 = v499;
              }
              long long v182 = (__int32 *)sub_25B3FA294((uint64_t)&v495 + 8, v159, &v499)[3];
              long long v183 = (__int32 *)sub_25B3FA294((uint64_t)&v495 + 8, v159, &v499)[4];
              __int32 v184 = __c[0];
              uint64_t v185 = wmemchr(v182, __c[0], v183 - v182);
              int v186 = sub_25B3FA294((uint64_t)&v495 + 8, v159, &v499);
              if (v185) {
                uint64_t v187 = v185;
              }
              else {
                uint64_t v187 = v183;
              }
              if (v187 == (__int32 *)v186[4])
              {
                long long v188 = sub_25B3FA294((uint64_t)&v495 + 8, v159, &v499);
                uint64_t v189 = v188;
                long long v191 = (__int32 *)v188[4];
                unint64_t v190 = v188[5];
                if ((unint64_t)v191 >= v190)
                {
                  long long v193 = (__int32 *)v188[3];
                  uint64_t v194 = v191 - v193;
                  unint64_t v195 = v194 + 1;
                  if ((unint64_t)(v194 + 1) >> 62) {
LABEL_842:
                  }
                    sub_25B3FBC4C();
                  uint64_t v196 = v190 - (void)v193;
                  if (v196 >> 1 > v195) {
                    unint64_t v195 = v196 >> 1;
                  }
                  _CF = (unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF) {
                    unint64_t v197 = v195;
                  }
                  if (v197)
                  {
                    unint64_t v197 = (unint64_t)sub_25B3FBC64(v197);
                    long long v193 = (__int32 *)v189[3];
                    long long v191 = (__int32 *)v189[4];
                  }
                  else
                  {
                    uint64_t v198 = 0;
                  }
                  uint64_t v199 = (__int32 *)(v197 + 4 * v194);
                  *uint64_t v199 = v184;
                  long long v192 = v199 + 1;
                  while (v191 != v193)
                  {
                    __int32 v200 = *--v191;
                    *--uint64_t v199 = v200;
                  }
                  v189[3] = v199;
                  v189[4] = v192;
                  v189[5] = v197 + 4 * v198;
                  if (v193) {
                    operator delete(v193);
                  }
                }
                else
                {
                  __int32 *v191 = v184;
                  long long v192 = v191 + 1;
                }
                v189[4] = v192;
              }
            }
          }
          long long v143 = (uint64_t *)*v143;
        }
      }
LABEL_389:
      long long v142 = (uint64_t *)*v142;
    }
    while (v142);
  }
  sub_25B3FB178((uint64_t)v506);
  sub_25B4FA094((uint64_t)__p);
  sub_25B4FA0F4((uint64_t)&v525);
  uint64_t v484 = 0;
  unint64_t v485 = 0;
  uint64_t v486 = 0;
  v519[0] = &unk_2708F1778;
  v519[1] = &v484;
  double v520 = v519;
  *(_OWORD *)v506 = 0u;
  long long v507 = 0u;
  float v508 = 1.0;
  *(_OWORD *)double v503 = 0u;
  long long v504 = 0u;
  float v505 = 1.0;
  uint64_t v202 = (int *)*((void *)&v494 + 1);
  uint64_t v201 = (int *)v494;
  if ((void)v494 == *((void *)&v494 + 1))
  {
    long long v526 = 0uLL;
    int64x2_t v527 = 0uLL;
    long long v525 = 0uLL;
    uint64_t v265 = a1;
    goto LABEL_632;
  }
  do
  {
    unint64_t v203 = *v201;
    uint64_t v204 = *((void *)&v507 + 1);
    unint64_t v205 = (unint64_t)v506[1];
    if (v506[1])
    {
      uint8x8_t v206 = (uint8x8_t)vcnt_s8((int8x8_t)v506[1]);
      v206.i16[0] = vaddlv_u8(v206);
      if (v206.u32[0] > 1uLL)
      {
        unint64_t v2 = *v201;
        if (v506[1] <= (void *)v203) {
          unint64_t v2 = v203 % (unint64_t)v506[1];
        }
      }
      else
      {
        unint64_t v2 = ((unint64_t)v506[1] - 1) & v203;
      }
      double v207 = (uint64_t **)*((void *)v506[0] + v2);
      if (v207)
      {
        for (iuint64_t i = *v207; ii; iuint64_t i = (uint64_t *)*ii)
        {
          unint64_t v209 = ii[1];
          if (v209 == v203)
          {
            if (*((_DWORD *)ii + 4) == v203) {
              goto LABEL_463;
            }
          }
          else
          {
            if (v206.u32[0] > 1uLL)
            {
              if ((void *)v209 >= v506[1]) {
                v209 %= (unint64_t)v506[1];
              }
            }
            else
            {
              v209 &= (unint64_t)v506[1] - 1;
            }
            if (v209 != v2) {
              break;
            }
          }
        }
      }
    }
    long long v210 = operator new(0x20uLL);
    *long long v210 = 0;
    v210[1] = v203;
    *((_DWORD *)v210 + 4) = *v201;
    v210[3] = v204;
    float v211 = (float)(unint64_t)(v204 + 1);
    if (!v205 || (float)(v508 * (float)v205) < v211)
    {
      BOOL v212 = (v205 & (v205 - 1)) != 0;
      if (v205 < 3) {
        BOOL v212 = 1;
      }
      unint64_t v213 = v212 | (2 * v205);
      unint64_t v214 = vcvtps_u32_f32(v211 / v508);
      if (v213 <= v214) {
        int8x8_t v215 = (int8x8_t)v214;
      }
      else {
        int8x8_t v215 = (int8x8_t)v213;
      }
      if (*(void *)&v215 == 1)
      {
        int8x8_t v215 = (int8x8_t)2;
      }
      else if ((*(void *)&v215 & (*(void *)&v215 - 1)) != 0)
      {
        int8x8_t v215 = (int8x8_t)std::__next_prime(*(void *)&v215);
        unint64_t v205 = (unint64_t)v506[1];
      }
      if (*(void *)&v215 > v205) {
        goto LABEL_419;
      }
      if (*(void *)&v215 < v205)
      {
        unint64_t v222 = vcvtps_u32_f32((float)*((unint64_t *)&v507 + 1) / v508);
        if (v205 < 3 || (uint8x8_t v223 = (uint8x8_t)vcnt_s8((int8x8_t)v205), v223.i16[0] = vaddlv_u8(v223), v223.u32[0] > 1uLL))
        {
          unint64_t v222 = std::__next_prime(v222);
        }
        else
        {
          uint64_t v224 = 1 << -(char)__clz(v222 - 1);
          if (v222 >= 2) {
            unint64_t v222 = v224;
          }
        }
        if (*(void *)&v215 <= v222) {
          int8x8_t v215 = (int8x8_t)v222;
        }
        if (*(void *)&v215 >= v205)
        {
          unint64_t v205 = (unint64_t)v506[1];
        }
        else
        {
          if (v215)
          {
LABEL_419:
            if (*(void *)&v215 >> 61) {
              sub_25B3FA70C();
            }
            std::string v216 = operator new(8 * *(void *)&v215);
            std::string v217 = v506[0];
            v506[0] = v216;
            if (v217) {
              operator delete(v217);
            }
            uint64_t v218 = 0;
            v506[1] = (void *)v215;
            do
              *((void *)v506[0] + v218++) = 0;
            while (*(void *)&v215 != v218);
            BOOL v219 = (void **)v507;
            if ((void)v507)
            {
              unint64_t v220 = *(void *)(v507 + 8);
              uint8x8_t v221 = (uint8x8_t)vcnt_s8(v215);
              v221.i16[0] = vaddlv_u8(v221);
              if (v221.u32[0] > 1uLL)
              {
                if (v220 >= *(void *)&v215) {
                  v220 %= *(void *)&v215;
                }
              }
              else
              {
                v220 &= *(void *)&v215 - 1;
              }
              *((void *)v506[0] + v220) = &v507;
              for (juint64_t j = *v219; jj; v220 = v226)
              {
                unint64_t v226 = jj[1];
                if (v221.u32[0] > 1uLL)
                {
                  if (v226 >= *(void *)&v215) {
                    v226 %= *(void *)&v215;
                  }
                }
                else
                {
                  v226 &= *(void *)&v215 - 1;
                }
                if (v226 != v220)
                {
                  if (!*((void *)v506[0] + v226))
                  {
                    *((void *)v506[0] + v226) = v219;
                    goto LABEL_444;
                  }
                  *BOOL v219 = (void *)*jj;
                  *juint64_t j = **((void **)v506[0] + v226);
                  **((void **)v506[0] + v226) = jj;
                  juint64_t j = v219;
                }
                unint64_t v226 = v220;
LABEL_444:
                BOOL v219 = (void **)jj;
                juint64_t j = (void *)*jj;
              }
            }
            unint64_t v205 = (unint64_t)v215;
            goto LABEL_448;
          }
          float v261 = v506[0];
          v506[0] = 0;
          if (v261) {
            operator delete(v261);
          }
          unint64_t v205 = 0;
          v506[1] = 0;
        }
      }
LABEL_448:
      if ((v205 & (v205 - 1)) != 0)
      {
        if (v205 <= v203) {
          unint64_t v2 = v203 % v205;
        }
        else {
          unint64_t v2 = v203;
        }
      }
      else
      {
        unint64_t v2 = (v205 - 1) & v203;
      }
    }
    float v227 = v506[0];
    long long v228 = (void *)*((void *)v506[0] + v2);
    if (v228)
    {
      *long long v210 = *v228;
LABEL_461:
      *long long v228 = v210;
      goto LABEL_462;
    }
    *long long v210 = v507;
    *(void *)&long long v507 = v210;
    v227[v2] = &v507;
    if (*v210)
    {
      unint64_t v229 = *(void *)(*v210 + 8);
      if ((v205 & (v205 - 1)) != 0)
      {
        if (v229 >= v205) {
          v229 %= v205;
        }
      }
      else
      {
        v229 &= v205 - 1;
      }
      long long v228 = (char *)v506[0] + 8 * v229;
      goto LABEL_461;
    }
LABEL_462:
    ++*((void *)&v507 + 1);
LABEL_463:
    long long v525 = 0u;
    long long v526 = 0u;
    v527.i32[0] = 1065353216;
    int v230 = *v201;
    long long v231 = sub_25B4B9780(*((uint64_t *)&v495 + 1), v496, *v201);
    if (v231)
    {
      long long v232 = (int *)v231[3];
      float v233 = (int *)v231[4];
      if (v232 != v233)
      {
        do
        {
          int v234 = *v232;
          if (!sub_25B3FAE64(v506, *v232)) {
            sub_25B3FAF64((uint64_t)&v525, v234, v234);
          }
          ++v232;
        }
        while (v232 != v233);
        int v230 = *v201;
      }
    }
    unint64_t v235 = v230;
    unint64_t v236 = (unint64_t)v503[1];
    if (v503[1])
    {
      uint8x8_t v237 = (uint8x8_t)vcnt_s8((int8x8_t)v503[1]);
      v237.i16[0] = vaddlv_u8(v237);
      if (v237.u32[0] > 1uLL)
      {
        unint64_t v2 = v230;
        if (v503[1] <= (void *)v230) {
          unint64_t v2 = v230 % (unint64_t)v503[1];
        }
      }
      else
      {
        unint64_t v2 = ((unint64_t)v503[1] - 1) & v230;
      }
      long long v238 = (uint64_t **)*((void *)v503[0] + v2);
      if (v238)
      {
        for (kuint64_t k = *v238; kk; kuint64_t k = (uint64_t *)*kk)
        {
          unint64_t v240 = kk[1];
          if (v240 == v230)
          {
            if (*((_DWORD *)kk + 4) == v230) {
              goto LABEL_541;
            }
          }
          else
          {
            if (v237.u32[0] > 1uLL)
            {
              if ((void *)v240 >= v503[1]) {
                v240 %= (unint64_t)v503[1];
              }
            }
            else
            {
              v240 &= (unint64_t)v503[1] - 1;
            }
            if (v240 != v2) {
              break;
            }
          }
        }
      }
    }
    unint64_t v241 = operator new(0x40uLL);
    __p[0] = v241;
    __p[1] = &v504;
    *unint64_t v241 = 0;
    v241[1] = v230;
    *((_DWORD *)v241 + 4) = *v201;
    sub_25B4F996C((uint64_t)(v241 + 3), (uint64_t *)&v525);
    LOBYTE(v522) = 1;
    float v242 = (float)(unint64_t)(*((void *)&v504 + 1) + 1);
    if (!v236 || (float)(v505 * (float)v236) < v242)
    {
      BOOL v243 = (v236 & (v236 - 1)) != 0;
      if (v236 < 3) {
        BOOL v243 = 1;
      }
      unint64_t v244 = v243 | (2 * v236);
      unint64_t v245 = vcvtps_u32_f32(v242 / v505);
      if (v244 <= v245) {
        int8x8_t v246 = (int8x8_t)v245;
      }
      else {
        int8x8_t v246 = (int8x8_t)v244;
      }
      if (*(void *)&v246 == 1)
      {
        int8x8_t v246 = (int8x8_t)2;
      }
      else if ((*(void *)&v246 & (*(void *)&v246 - 1)) != 0)
      {
        int8x8_t v246 = (int8x8_t)std::__next_prime(*(void *)&v246);
      }
      unint64_t v236 = (unint64_t)v503[1];
      if ((void *)*(void *)&v246 > v503[1]) {
        goto LABEL_497;
      }
      if ((void *)*(void *)&v246 < v503[1])
      {
        unint64_t v253 = vcvtps_u32_f32((float)*((unint64_t *)&v504 + 1) / v505);
        if (v503[1] < (void *)3
          || (uint8x8_t v254 = (uint8x8_t)vcnt_s8((int8x8_t)v503[1]), v254.i16[0] = vaddlv_u8(v254), v254.u32[0] > 1uLL))
        {
          unint64_t v253 = std::__next_prime(v253);
        }
        else
        {
          uint64_t v255 = 1 << -(char)__clz(v253 - 1);
          if (v253 >= 2) {
            unint64_t v253 = v255;
          }
        }
        if (*(void *)&v246 <= v253) {
          int8x8_t v246 = (int8x8_t)v253;
        }
        if (*(void *)&v246 >= v236)
        {
          unint64_t v236 = (unint64_t)v503[1];
        }
        else
        {
          if (v246)
          {
LABEL_497:
            if (*(void *)&v246 >> 61) {
              sub_25B3FA70C();
            }
            uint64_t v247 = operator new(8 * *(void *)&v246);
            uint64_t v248 = v503[0];
            v503[0] = v247;
            if (v248) {
              operator delete(v248);
            }
            uint64_t v249 = 0;
            v503[1] = (void *)v246;
            do
              *((void *)v503[0] + v249++) = 0;
            while (*(void *)&v246 != v249);
            uint64_t v250 = (void **)v504;
            if ((void)v504)
            {
              unint64_t v251 = *(void *)(v504 + 8);
              uint8x8_t v252 = (uint8x8_t)vcnt_s8(v246);
              v252.i16[0] = vaddlv_u8(v252);
              if (v252.u32[0] > 1uLL)
              {
                if (v251 >= *(void *)&v246) {
                  v251 %= *(void *)&v246;
                }
              }
              else
              {
                v251 &= *(void *)&v246 - 1;
              }
              *((void *)v503[0] + v251) = &v504;
              for (muint64_t m = *v250; mm; v251 = v257)
              {
                unint64_t v257 = mm[1];
                if (v252.u32[0] > 1uLL)
                {
                  if (v257 >= *(void *)&v246) {
                    v257 %= *(void *)&v246;
                  }
                }
                else
                {
                  v257 &= *(void *)&v246 - 1;
                }
                if (v257 != v251)
                {
                  if (!*((void *)v503[0] + v257))
                  {
                    *((void *)v503[0] + v257) = v250;
                    goto LABEL_522;
                  }
                  *uint64_t v250 = (void *)*mm;
                  *muint64_t m = **((void **)v503[0] + v257);
                  **((void **)v503[0] + v257) = mm;
                  muint64_t m = v250;
                }
                unint64_t v257 = v251;
LABEL_522:
                uint64_t v250 = (void **)mm;
                muint64_t m = (void *)*mm;
              }
            }
            unint64_t v236 = (unint64_t)v246;
            goto LABEL_526;
          }
          uint64_t v262 = v503[0];
          v503[0] = 0;
          if (v262) {
            operator delete(v262);
          }
          unint64_t v236 = 0;
          v503[1] = 0;
        }
      }
LABEL_526:
      if ((v236 & (v236 - 1)) != 0)
      {
        if (v236 <= v235) {
          unint64_t v2 = v235 % v236;
        }
        else {
          unint64_t v2 = v235;
        }
      }
      else
      {
        unint64_t v2 = (v236 - 1) & v235;
      }
    }
    float v258 = (void *)*((void *)v503[0] + v2);
    float v259 = __p[0];
    if (v258)
    {
      *(void *)__p[0] = *v258;
LABEL_539:
      *float v258 = v259;
      goto LABEL_540;
    }
    *(void *)__p[0] = v504;
    *(void *)&long long v504 = v259;
    *((void *)v503[0] + v2) = &v504;
    if (*(void *)v259)
    {
      unint64_t v260 = *(void *)(*(void *)v259 + 8);
      if ((v236 & (v236 - 1)) != 0)
      {
        if (v260 >= v236) {
          v260 %= v236;
        }
      }
      else
      {
        v260 &= v236 - 1;
      }
      float v258 = (char *)v503[0] + 8 * v260;
      goto LABEL_539;
    }
LABEL_540:
    __p[0] = 0;
    ++*((void *)&v504 + 1);
    sub_25B4F99DC((uint64_t)__p);
LABEL_541:
    sub_25B3FB178((uint64_t)&v525);
    ++v201;
  }
  while (v201 != v202);
  unint64_t v264 = (int *)*((void *)&v494 + 1);
  uint64_t v263 = (int *)v494;
  long long v526 = 0u;
  int64x2_t v527 = 0u;
  long long v525 = 0u;
  uint64_t v265 = a1;
  if ((void)v494 != *((void *)&v494 + 1))
  {
    do
    {
      __p[1] = 0;
      __p[0] = 0;
      *(void *)&long long v522 = 0;
      uint64_t v266 = sub_25B4B9780((uint64_t)v503[0], (unint64_t)v503[1], *v263);
      if (v266)
      {
        uint64_t v267 = v266[5];
        *(void *)__c = __p;
        if (v267)
        {
          do
          {
            sub_25B3FBF08((uint64_t *)__c, (_DWORD *)(v267 + 16));
            uint64_t v267 = *(void *)v267;
          }
          while (v267);
          uint64_t v266 = (uint64_t *)__p[0];
          int v268 = (int *)__p[1];
        }
        else
        {
          int v268 = 0;
          uint64_t v266 = 0;
        }
      }
      else
      {
        int v268 = 0;
      }
      unint64_t v269 = 126 - 2 * __clz(((char *)v268 - (char *)v266) >> 2);
      *(void *)__c = v506;
      if (v268 == (int *)v266) {
        uint64_t v270 = 0;
      }
      else {
        uint64_t v270 = v269;
      }
      sub_25B4F8264(v266, v268, (void **)__c, v270, 1);
      uint64_t v271 = *((void *)&v525 + 1);
      uint64_t v272 = v526;
      uint64_t v273 = 85 * ((uint64_t)(v526 - *((void *)&v525 + 1)) >> 3) - 1;
      __c[0] = *v263;
      if ((void)v526 == *((void *)&v525 + 1)) {
        uint64_t v273 = 0;
      }
      if (v273 == v527.i64[1] + v527.i64[0])
      {
        sub_25B4F8EF0(&v525);
        uint64_t v271 = *((void *)&v525 + 1);
        uint64_t v272 = v526;
      }
      if (v272 == v271) {
        unint64_t v274 = 0;
      }
      else {
        unint64_t v274 = *(void *)(v271 + 8 * ((v527.i64[1] + v527.i64[0]) / 0x55uLL))
      }
             + 48 * ((v527.i64[1] + v527.i64[0]) % 0x55uLL);
      *(void *)unint64_t v274 = 0;
      *(void *)(v274 + 8) = 0;
      *(void *)(v274 + 16) = 0;
      sub_25B3FCA18((void *)v274, 1uLL);
      uint64_t v275 = *(_DWORD **)(v274 + 8);
      *uint64_t v275 = __c[0];
      *(void *)(v274 + 8) = v275 + 1;
      *(_OWORD *)(v274 + 24) = *(_OWORD *)__p;
      *(void *)(v274 + 40) = v522;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v276 = ++v527.i64[1];
      ++v263;
    }
    while (v263 != v264);
    uint64_t v265 = a1;
    if (v276)
    {
      while (1)
      {
        unint64_t v277 = *(void *)(*((void *)&v525 + 1) + 8 * (v527.i64[0] / 0x55uLL)) + 48 * (v527.i64[0] % 0x55uLL);
        float v278 = *(unsigned char **)v277;
        __p[0] = *(void **)v277;
        float32x4_t v478 = *(void **)(v277 + 8);
        __p[1] = v478;
        *(void *)&long long v522 = *(void *)(v277 + 16);
        *(void *)(v277 + 8) = 0;
        *(void *)(v277 + 16) = 0;
        *(void *)unint64_t v277 = 0;
        uint64_t v279 = *(int **)(v277 + 24);
        *((void *)&v522 + 1) = v279;
        uint64_t v280 = *(int **)(v277 + 32);
        uint64_t v523 = v280;
        uint64_t v524 = *(void *)(v277 + 40);
        *(void *)(v277 + 24) = 0;
        *(void *)(v277 + 32) = 0;
        *(void *)(v277 + 40) = 0;
        sub_25B4F8E98(*(void *)(*((void *)&v525 + 1) + 8 * (v527.i64[0] / 0x55uLL)) + 48 * (v527.i64[0] % 0x55uLL));
        int64x2_t v527 = vaddq_s64(v527, (int64x2_t)xmmword_25B5F1620);
        if (v527.i64[0] >= 0xAAuLL)
        {
          operator delete(**((void ***)&v525 + 1));
          *((void *)&v525 + 1) += 8;
          v527.i64[0] -= 85;
        }
        *(void *)__c = v278;
        *(void *)&__c[2] = ((unsigned char *)v478 - v278) >> 2;
        if (!v520) {
          sub_25B3FAF18();
        }
        if (((*(uint64_t (**)(void *, __int32 *))(*v520 + 48))(v520, __c) & 1) == 0) {
          break;
        }
        uint64_t v475 = v279;
        if (v279 != v280)
        {
          uint64_t v281 = v279;
          do
          {
            memset(__c, 0, sizeof(__c));
            unint64_t v502 = 0;
            sub_25B3FC724(__c, v278, (uint64_t)v478, ((unsigned char *)v478 - v278) >> 2);
            int v283 = *(char **)&__c[2];
            unint64_t v282 = v502;
            if (*(void *)&__c[2] >= v502)
            {
              v285 = *(char **)__c;
              uint64_t v286 = (uint64_t)(*(void *)&__c[2] - *(void *)__c) >> 2;
              unint64_t v287 = v286 + 1;
              if ((unint64_t)(v286 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v502 - *(void *)__c) >> 1 > v287) {
                unint64_t v287 = (uint64_t)(v502 - *(void *)__c) >> 1;
              }
              if (v502 - *(void *)__c >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v288 = v287;
              }
              if (v288) {
                unint64_t v288 = (unint64_t)sub_25B3FBC64(v288);
              }
              else {
                uint64_t v289 = 0;
              }
              float32x4_t v290 = (int *)(v288 + 4 * v286);
              *float32x4_t v290 = *v281;
              uint64_t v284 = v290 + 1;
              while (v283 != v285)
              {
                int v291 = *((_DWORD *)v283 - 1);
                v283 -= 4;
                *--float32x4_t v290 = v291;
              }
              unint64_t v282 = v288 + 4 * v289;
              *(void *)__c = v290;
              unint64_t v502 = v282;
              if (v285) {
                operator delete(v285);
              }
            }
            else
            {
              **(_DWORD **)&__c[2] = *v281;
              uint64_t v284 = v283 + 4;
            }
            *(void *)&__c[2] = v284;
            long long v499 = 0uLL;
            uint64_t v500 = 0;
            uint64_t v292 = v281 + 1;
            uint64_t v509 = &v499;
            if (v281 + 1 != v280)
            {
              float32x4_t v293 = v281 + 1;
              do
                sub_25B3FBF08((uint64_t *)&v509, v293++);
              while (v293 != v280);
            }
            int v294 = sub_25B4B9780((uint64_t)v503[0], (unint64_t)v503[1], *v281);
            if (v294)
            {
              char v295 = (int *)*((void *)&v499 + 1);
              float32x4_t v296 = (int *)v499;
              if ((void)v499 != *((void *)&v499 + 1))
              {
                float v297 = v294 + 3;
                while (sub_25B3FAE64(v297, *v296))
                {
                  if (++v296 == v295) {
                    goto LABEL_619;
                  }
                }
                if (v296 != v295)
                {
                  for (nuint64_t n = v296 + 1; nn != v295; ++nn)
                  {
                    int v299 = *nn;
                    if (sub_25B3FAE64(v297, *nn)) {
                      *v296++ = v299;
                    }
                  }
                }
              }
              if (v295 != v296) {
                *((void *)&v499 + 1) = v296;
              }
            }
LABEL_619:
            uint64_t v300 = *((void *)&v525 + 1);
            if ((void)v526 == *((void *)&v525 + 1)) {
              uint64_t v301 = 0;
            }
            else {
              uint64_t v301 = 85 * ((uint64_t)(v526 - *((void *)&v525 + 1)) >> 3) - 1;
            }
            unint64_t v302 = v527.i64[1] + v527.i64[0];
            if (v301 == v527.i64[1] + v527.i64[0])
            {
              sub_25B4F8EF0(&v525);
              uint64_t v300 = *((void *)&v525 + 1);
              unint64_t v302 = v527.i64[1] + v527.i64[0];
            }
            unint64_t v303 = *(void *)(v300 + 8 * (v302 / 0x55)) + 48 * (v302 % 0x55);
            *(_OWORD *)unint64_t v303 = *(_OWORD *)__c;
            *(void *)(v303 + 16) = v282;
            *(void *)(v303 + 24) = 0;
            *(void *)(v303 + 32) = 0;
            *(void *)(v303 + 40) = 0;
            *(_OWORD *)(v303 + 24) = v499;
            *(void *)(v303 + 40) = v500;
            ++v527.i64[1];
            uint64_t v281 = v292;
          }
          while (v292 != v280);
        }
        if (v475) {
          operator delete(v475);
        }
        uint64_t v265 = a1;
        if (v278) {
          operator delete(v278);
        }
        if (!v527.i64[1]) {
          goto LABEL_632;
        }
      }
      if (v279) {
        operator delete(v279);
      }
      if (v278) {
        operator delete(v278);
      }
    }
  }
LABEL_632:
  sub_25B4F8CCC((uint64_t)&v525);
  sub_25B4F8E38((uint64_t)v503);
  sub_25B3FB178((uint64_t)v506);
  sub_25B4F8108(v519);
  uint64_t v304 = v484;
  v480 = v485;
  if (v484 == v485)
  {
    *(_OWORD *)__p = 0u;
    long long v522 = 0u;
    LODWORD(v523) = 1065353216;
    v265[1] = *v265;
    sub_25B3FB178((uint64_t)__p);
  }
  else
  {
    float32x4_t v305 = 0;
    uint64_t v476 = 0;
    float v479 = 0;
    do
    {
      v306 = 0;
      uint64_t v307 = 0;
      unint64_t v308 = 0;
      for (uint64_t i1 = 0; i1 != 3; ++i1)
      {
        uint64_t v310 = v490;
        if (!v490) {
          goto LABEL_645;
        }
        int v311 = *((_DWORD *)v304 + i1);
        id v312 = &v490;
        do
        {
          float32x4_t v313 = v310;
          float32x4_t v314 = v312;
          int v315 = *((_DWORD *)v310 + 8);
          if (v315 >= v311) {
            id v312 = (uint64_t **)v310;
          }
          else {
            ++v310;
          }
          uint64_t v310 = (uint64_t *)*v310;
        }
        while (v310);
        if (v312 == &v490) {
          goto LABEL_645;
        }
        if (v315 < v311) {
          float32x4_t v313 = (uint64_t *)v314;
        }
        if (*((_DWORD *)v313 + 8) > v311) {
LABEL_645:
        }
          id v312 = &v490;
        float32x4_t v316 = v312[5];
        if ((unint64_t)v307 >= v308)
        {
          uint64_t v318 = v307 - v306;
          unint64_t v319 = v318 + 1;
          if ((unint64_t)(v318 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v308 - (void)v306) >> 2 > v319) {
            unint64_t v319 = (uint64_t)(v308 - (void)v306) >> 2;
          }
          if (v308 - (unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v320 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v320 = v319;
          }
          if (v320) {
            unint64_t v320 = (unint64_t)sub_25B3FCAD4(v320);
          }
          else {
            uint64_t v321 = 0;
          }
          long long v322 = (float32x2_t *)(v320 + 8 * v318);
          float32x2_t *v322 = (float32x2_t)v316;
          unint64_t v317 = v322 + 1;
          while (v307 != v306)
          {
            float32x2_t v323 = v307[-1];
            --v307;
            v322[-1] = v323;
            --v322;
          }
          unint64_t v308 = v320 + 8 * v321;
          if (v306) {
            operator delete(v306);
          }
          v306 = v322;
        }
        else
        {
          float32x2_t *v307 = (float32x2_t)v316;
          unint64_t v317 = v307 + 1;
        }
        uint64_t v307 = v317;
      }
      float32x2_t v324 = v306[1];
      float32x2_t v325 = vsub_f32(*v306, v324);
      float v326 = sqrtf(vaddv_f32(vmul_f32(v325, v325)));
      float32x2_t v327 = v306[2];
      float32x2_t v328 = vsub_f32(v324, v327);
      float v329 = sqrtf(vaddv_f32(vmul_f32(v328, v328)));
      float32x2_t v330 = vsub_f32(v327, *v306);
      int v331 = *v304;
      float v332 = sqrtf(vaddv_f32(vmul_f32(v330, v330)));
      long long v333 = sub_25B3FDC44(v492, v331, HIDWORD(*v304));
      int v334 = HIDWORD(*(void *)((char *)v304 + 4));
      float32x4_t v335 = sub_25B3FDC44(v492, *(void *)((char *)v304 + 4), v334);
      long long v336 = sub_25B3FDC44(v492, v334, v331);
      if ((float)(v332 + (float)(v326 + v329)) >= 2.5)
      {
        operator delete(v306);
        long long v339 = a1;
      }
      else
      {
        int v337 = *((_DWORD *)v335 + 10);
        LODWORD(__p[0]) = *((_DWORD *)v333 + 10);
        HIDWORD(__p[0]) = v337;
        LODWORD(__p[1]) = *((_DWORD *)v336 + 10);
        uint64_t v338 = sub_25B3FB200((uint64_t)&v525, (int *)__p, 3);
        long long v339 = a1;
        uint64_t v340 = *((void *)&v526 + 1);
        sub_25B3FB178(v338);
        operator delete(v306);
        if (v340 == 3)
        {
          if (v305 >= v476)
          {
            uint64_t v341 = (v305 - v479) >> 3;
            unint64_t v342 = v341 + 1;
            if ((unint64_t)(v341 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((v476 - v479) >> 2 > v342) {
              unint64_t v342 = (v476 - v479) >> 2;
            }
            if ((unint64_t)(v476 - v479) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v343 = v342;
            }
            if (v343)
            {
              if (v343 >> 61) {
                sub_25B3FA70C();
              }
              double v344 = (char *)operator new(8 * v343);
            }
            else
            {
              double v344 = 0;
            }
            float32x4_t v345 = &v344[8 * v341];
            *(void *)float32x4_t v345 = v304;
            long long v346 = v345 + 8;
            if (v305 != v479)
            {
              do
              {
                uint64_t v347 = *((void *)v305 - 1);
                v305 -= 8;
                *((void *)v345 - 1) = v347;
                v345 -= 8;
              }
              while (v305 != v479);
              float32x4_t v305 = v479;
            }
            float v479 = v345;
            uint64_t v476 = &v344[8 * v343];
            if (v305) {
              operator delete(v305);
            }
            float32x4_t v305 = v346;
          }
          else
          {
            *(void *)float32x4_t v305 = v304;
            v305 += 8;
          }
        }
      }
      uint64_t v304 = (void *)((char *)v304 + 12);
    }
    while (v304 != v480);
    *(_OWORD *)__p = 0u;
    long long v522 = 0u;
    LODWORD(v523) = 1065353216;
    v339[1] = *v339;
    long long v348 = v479;
    if (v479 != v305)
    {
      v474 = (uint64_t *)&a2[18];
      while (1)
      {
        long long v349 = *(void **)v348;
        int v350 = **(void **)v348;
        long long v351 = (float32x2_t *)sub_25B3FDC44(v492, v350, HIDWORD(**(void **)v348));
        int v352 = HIDWORD(*(void *)((char *)v349 + 4));
        uint64_t v353 = sub_25B3FDC44(v492, *(void *)((char *)v349 + 4), v352);
        uint64_t v354 = (float32x2_t *)sub_25B3FDC44(v492, v352, v350);
        if (sub_25B3FAE64(__p, v351[5].i32[0])
          || sub_25B3FAE64(__p, *((_DWORD *)v353 + 10))
          || sub_25B3FAE64(__p, v354[5].i32[0]))
        {
          v506[0] = 0;
          v506[1] = 0;
          *(void *)&long long v507 = 0;
          uint64_t v356 = (void **)a1;
        }
        else
        {
          float32x2_t v374 = v351[3];
          int32x2_t v375 = (int32x2_t)vsub_f32(v351[4], v374);
          int32x2_t v376 = (int32x2_t)v353[3];
          int32x2_t v377 = (int32x2_t)v353[4];
          int32x2_t v378 = (int32x2_t)vsub_f32((float32x2_t)v377, (float32x2_t)v376);
          *(float *)v377.i32 = -*(float *)&v375.i32[1];
          float32x2_t v379 = (float32x2_t)vzip1_s32(v377, v375);
          int32x2_t v380 = (int32x2_t)vmul_f32((float32x2_t)v378, v379);
          float32x2_t v381 = 0;
          float32x2_t v382 = 0;
          if (vaddv_f32((float32x2_t)v380) != 0.0)
          {
            int32x2_t v383 = (int32x2_t)vmul_f32(vsub_f32(v374, (float32x2_t)v376), v379);
            int32x2_t v355 = vdup_lane_s32(v383, 1);
            float32x2_t v382 = vmla_n_f32((float32x2_t)v376, (float32x2_t)v378, vdiv_f32(vadd_f32((float32x2_t)v383, (float32x2_t)v355), vadd_f32((float32x2_t)v380, (float32x2_t)vdup_lane_s32(v380, 1))).f32[0]);
          }
          float32x2_t v384 = v354[3];
          int32x2_t v385 = (int32x2_t)vsub_f32(v354[4], v384);
          *(float *)v355.i32 = -*(float *)&v378.i32[1];
          float32x2_t v386 = (float32x2_t)vzip1_s32(v355, v378);
          int32x2_t v387 = (int32x2_t)vmul_f32((float32x2_t)v385, v386);
          uint64_t v356 = (void **)a1;
          if (vaddv_f32((float32x2_t)v387) != 0.0)
          {
            int32x2_t v388 = (int32x2_t)vmul_f32(vsub_f32((float32x2_t)v376, v384), v386);
            int32x2_t v376 = (int32x2_t)vdiv_f32(vadd_f32((float32x2_t)v388, (float32x2_t)vdup_lane_s32(v388, 1)), vadd_f32((float32x2_t)v387, (float32x2_t)vdup_lane_s32(v387, 1)));
            float32x2_t v381 = vmla_n_f32(v384, (float32x2_t)v385, *(float *)v376.i32);
          }
          *(float *)v376.i32 = -*(float *)&v385.i32[1];
          float32x2_t v389 = (float32x2_t)vzip1_s32(v376, v385);
          int32x2_t v390 = (int32x2_t)vmul_f32((float32x2_t)v375, v389);
          float32x2_t v391 = 0;
          if (vaddv_f32((float32x2_t)v390) != 0.0)
          {
            int32x2_t v392 = (int32x2_t)vmul_f32(vsub_f32(v384, v374), v389);
            float32x2_t v391 = vmla_n_f32(v374, (float32x2_t)v375, vdiv_f32(vadd_f32((float32x2_t)v392, (float32x2_t)vdup_lane_s32(v392, 1)), vadd_f32((float32x2_t)v390, (float32x2_t)vdup_lane_s32(v390, 1))).f32[0]);
          }
          float32x2_t v393 = vsub_f32(v381, v382);
          float32x2_t v394 = vsub_f32(v391, v382);
          float v395 = vaddv_f32(vmul_f32(v393, v394));
          int32x2_t v396 = (int32x2_t)vmul_f32(v393, v393);
          int32x2_t v397 = (int32x2_t)vmul_f32(v394, v394);
          float32x2_t v398 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v396, v397), (float32x2_t)vzip2_s32(v396, v397)));
          float v399 = v395 / fmaxf(vmul_lane_f32(v398, v398, 1).f32[0], 1.1755e-38);
          if (v399 <= 1.0) {
            float v400 = v399;
          }
          else {
            float v400 = 1.0;
          }
          if (v399 >= -1.0) {
            float v401 = v400;
          }
          else {
            float v401 = -1.0;
          }
          float v402 = acosf(v401) * 180.0 / 3.14159274;
          float32x2_t v403 = vsub_f32(v382, v381);
          float32x2_t v404 = vsub_f32(v391, v381);
          int32x2_t v405 = (int32x2_t)vmul_f32(v403, v404);
          int32x2_t v406 = (int32x2_t)vmul_f32(v403, v403);
          int32x2_t v407 = (int32x2_t)vmul_f32(v404, v404);
          int32x2_t v408 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v406, v407), (float32x2_t)vzip2_s32(v406, v407)));
          float32x2_t v409 = vsub_f32(v382, v391);
          float32x2_t v410 = vsub_f32(v381, v391);
          int32x2_t v411 = (int32x2_t)vmul_f32(v409, v410);
          int32x2_t v412 = (int32x2_t)vmul_f32(v409, v409);
          int32x2_t v413 = (int32x2_t)vmul_f32(v410, v410);
          int32x2_t v414 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v412, v413), (float32x2_t)vzip2_s32(v412, v413)));
          float32x2_t v415 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v411, v405), (float32x2_t)vzip2_s32(v411, v405)), vmaxnm_f32(vmul_f32((float32x2_t)vzip1_s32(v414, v408), (float32x2_t)vzip2_s32(v414, v408)), (float32x2_t)0x80000000800000));
          float v416 = v415.f32[1];
          float v481 = v415.f32[0];
          if (v415.f32[1] > 1.0) {
            float v416 = 1.0;
          }
          __asm { FMOV            V1.2S, #-1.0 }
          int32x2_t v419 = vcgt_f32(_D1, v415);
          __int8 v483 = v419.i8[0];
          if (v419.i8[4]) {
            float v416 = -1.0;
          }
          float v420 = acosf(v416) * 180.0 / 3.14159274;
          float v421 = v481;
          if (v481 > 1.0) {
            float v421 = 1.0;
          }
          if (v483) {
            float v421 = -1.0;
          }
          float v422 = acosf(v421) * 180.0 / 3.14159274;
          if (fabsf((float)((float)(v402 + v420) + v422) + -180.0) <= 0.1)
          {
            _NF = v402 < 80.0 && v420 < 80.0;
            if (!_NF || v422 >= 80.0)
            {
              if (v420 >= v402) {
                float v425 = v402;
              }
              else {
                float v425 = v420;
              }
              if (v425 <= v422) {
                float v422 = v425;
              }
              if (v422 >= 10.0)
              {
                if (v402 >= 80.0)
                {
                  long long v426 = (float32x2_t *)&v516;
                  long long v427 = &v517;
                  long long v428 = &v518;
                }
                else if (v420 >= 80.0)
                {
                  long long v426 = (float32x2_t *)&v513;
                  long long v428 = &v515;
                  long long v427 = &v514;
                }
                else
                {
                  long long v426 = (float32x2_t *)&v510;
                  long long v428 = &v512;
                  long long v427 = &v511;
                }
                float32x2_t v429 = vsub_f32(*v426, v426[1]);
                if (sqrtf(vaddv_f32(vmul_f32(v429, v429))) >= 0.35) {
                  goto LABEL_821;
                }
                float32x2_t v430 = vsub_f32(v426[4], (float32x2_t)v427[1]);
                if (sqrtf(vaddv_f32(vmul_f32(v430, v430))) >= 0.35) {
                  goto LABEL_821;
                }
                float32x2_t v431 = vsub_f32(v426[8], (float32x2_t)v428[1]);
                float v432 = sqrtf(vaddv_f32(vmul_f32(v431, v431)));
                if (v432 <= 0.6) {
                  goto LABEL_821;
                }
                uint64_t v433 = *v474;
                if (!*v474) {
                  goto LABEL_819;
                }
                __int32 v435 = v426[3].i32[0];
                __int32 v434 = v426[3].i32[1];
                int v437 = *((_DWORD *)v427 + 6);
                int v436 = *((_DWORD *)v427 + 7);
                int v438 = (uint64_t *)&a2[18];
                uint64_t v439 = *v474;
                int v441 = *((_DWORD *)v428 + 6);
                int v440 = *((_DWORD *)v428 + 7);
                do
                {
                  __int32 v442 = *(_DWORD *)(v439 + 32);
                  BOOL v443 = v442 < v435;
                  if (v442 >= v435) {
                    uint64_t v444 = (uint64_t *)v439;
                  }
                  else {
                    uint64_t v444 = (uint64_t *)(v439 + 8);
                  }
                  if (!v443) {
                    int v438 = (uint64_t *)v439;
                  }
                  uint64_t v439 = *v444;
                }
                while (*v444);
                if (v438 != v474 && *((_DWORD *)v438 + 8) <= v435 && (unint64_t)v438[7] >= 2)
                {
                  float32x2_t v445 = (uint64_t *)&a2[18];
                  uint64_t v446 = *v474;
                  do
                  {
                    __int32 v447 = *(_DWORD *)(v446 + 32);
                    BOOL v448 = v447 < v434;
                    if (v447 >= v434) {
                      uint64_t v449 = (uint64_t *)v446;
                    }
                    else {
                      uint64_t v449 = (uint64_t *)(v446 + 8);
                    }
                    if (!v448) {
                      float32x2_t v445 = (uint64_t *)v446;
                    }
                    uint64_t v446 = *v449;
                  }
                  while (*v449);
                  if (v445 != v474 && *((_DWORD *)v445 + 8) <= v434 && (unint64_t)v445[7] >= 2)
                  {
                    float v450 = (uint64_t *)&a2[18];
                    uint64_t v451 = *v474;
                    do
                    {
                      int v452 = *(_DWORD *)(v451 + 32);
                      BOOL v453 = v452 < v437;
                      if (v452 >= v437) {
                        float32x2_t v454 = (uint64_t *)v451;
                      }
                      else {
                        float32x2_t v454 = (uint64_t *)(v451 + 8);
                      }
                      if (!v453) {
                        float v450 = (uint64_t *)v451;
                      }
                      uint64_t v451 = *v454;
                    }
                    while (*v454);
                    if (v450 != v474 && *((_DWORD *)v450 + 8) <= v437 && (unint64_t)v450[7] >= 2)
                    {
                      int32x2_t v455 = (uint64_t *)&a2[18];
                      uint64_t v456 = *v474;
                      do
                      {
                        int v457 = *(_DWORD *)(v456 + 32);
                        BOOL v458 = v457 < v436;
                        if (v457 >= v436) {
                          float32x2_t v459 = (uint64_t *)v456;
                        }
                        else {
                          float32x2_t v459 = (uint64_t *)(v456 + 8);
                        }
                        if (!v458) {
                          int32x2_t v455 = (uint64_t *)v456;
                        }
                        uint64_t v456 = *v459;
                      }
                      while (*v459);
                      uint64_t v356 = (void **)a1;
                      if (v455 != v474 && *((_DWORD *)v455 + 8) <= v436 && (unint64_t)v455[7] > 1)
                      {
LABEL_821:
                        sub_25B3F9000((uint64_t)a2, *((_DWORD *)v428 + 4));
                        long long v471 = *((_OWORD *)v428 + 1);
                        long long v525 = *(_OWORD *)v428;
                        long long v526 = v471;
                        sub_25B4F81E0(v506, &v525, 1uLL);
                        goto LABEL_693;
                      }
                    }
                  }
                }
                float32x2_t v460 = (uint64_t *)&a2[18];
                uint64_t v461 = *v474;
                do
                {
                  int v462 = *(_DWORD *)(v461 + 32);
                  BOOL v463 = v462 < v441;
                  if (v462 >= v441) {
                    float32x4_t v464 = (uint64_t *)v461;
                  }
                  else {
                    float32x4_t v464 = (uint64_t *)(v461 + 8);
                  }
                  if (!v463) {
                    float32x2_t v460 = (uint64_t *)v461;
                  }
                  uint64_t v461 = *v464;
                }
                while (*v464);
                if (v460 == v474 || *((_DWORD *)v460 + 8) > v441 || (unint64_t)v460[7] < 2) {
                  goto LABEL_819;
                }
                float32x4_t v465 = (uint64_t *)&a2[18];
                do
                {
                  int v466 = *(_DWORD *)(v433 + 32);
                  BOOL v467 = v466 < v440;
                  if (v466 >= v440) {
                    float v468 = (uint64_t *)v433;
                  }
                  else {
                    float v468 = (uint64_t *)(v433 + 8);
                  }
                  if (!v467) {
                    float32x4_t v465 = (uint64_t *)v433;
                  }
                  uint64_t v433 = *v468;
                }
                while (*v468);
                if (v465 == v474 || *((_DWORD *)v465 + 8) > v440)
                {
LABEL_819:
                  if (v432 > 1.5) {
                    goto LABEL_820;
                  }
                }
                else if (v432 > 1.5 || (unint64_t)v465[7] > 1)
                {
LABEL_820:
                  sub_25B3F9000((uint64_t)a2, v426[2].i32[0]);
                  sub_25B3F9000((uint64_t)a2, *((_DWORD *)v427 + 4));
                  long long v469 = *(_OWORD *)v426[2].f32;
                  long long v525 = *(_OWORD *)v426->f32;
                  long long v526 = v469;
                  long long v470 = *((_OWORD *)v427 + 1);
                  int64x2_t v527 = *(int64x2_t *)v427;
                  long long v528 = v470;
                  sub_25B4F81E0(v506, &v525, 2uLL);
                  goto LABEL_693;
                }
              }
            }
          }
          v506[0] = 0;
          v506[1] = 0;
          *(void *)&long long v507 = 0;
        }
LABEL_693:
        uint64_t v358 = v506[0];
        uint64_t v357 = v506[1];
        if (v506[0] != v506[1])
        {
          do
          {
            sub_25B3FAF64((uint64_t)__p, v358[4], v358[4]);
            float v359 = v356[1];
            unint64_t v360 = (unint64_t)v356[2];
            if ((unint64_t)v359 >= v360)
            {
              uint64_t v363 = ((char *)v359 - (unsigned char *)*v356) >> 5;
              unint64_t v364 = v363 + 1;
              if ((unint64_t)(v363 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              uint64_t v365 = v360 - (void)*v356;
              if (v365 >> 4 > v364) {
                unint64_t v364 = v365 >> 4;
              }
              if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v366 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v366 = v364;
              }
              if (v366) {
                unint64_t v366 = (unint64_t)sub_25B3FBC9C(v366);
              }
              else {
                uint64_t v367 = 0;
              }
              uint64_t v368 = (_OWORD *)(v366 + 32 * v363);
              long long v369 = *((_OWORD *)v358 + 1);
              *uint64_t v368 = *(_OWORD *)v358;
              v368[1] = v369;
              uint64_t v371 = (char *)*v356;
              v370 = (char *)v356[1];
              uint64_t v372 = v368;
              if (v370 != *v356)
              {
                do
                {
                  long long v373 = *((_OWORD *)v370 - 1);
                  *(v372 - 2) = *((_OWORD *)v370 - 2);
                  *(v372 - 1) = v373;
                  v372 -= 2;
                  v370 -= 32;
                }
                while (v370 != v371);
                v370 = (char *)*v356;
              }
              uint64_t v362 = v368 + 2;
              *uint64_t v356 = v372;
              v356[1] = v368 + 2;
              v356[2] = (void *)(v366 + 32 * v367);
              if (v370) {
                operator delete(v370);
              }
            }
            else
            {
              long long v361 = *((_OWORD *)v358 + 1);
              *float v359 = *(_OWORD *)v358;
              v359[1] = v361;
              uint64_t v362 = v359 + 2;
            }
            v356[1] = v362;
            v358 += 8;
          }
          while (v358 != v357);
          uint64_t v358 = v506[0];
        }
        if (v358)
        {
          v506[1] = v358;
          operator delete(v358);
        }
        v348 += 8;
        if (v348 == v305)
        {
          float32x4_t v305 = v479;
          break;
        }
      }
    }
    sub_25B3FB178((uint64_t)__p);
    if (v305) {
      operator delete(v305);
    }
  }
  if (v484)
  {
    unint64_t v485 = v484;
    operator delete(v484);
  }
  sub_25B3FAE18(*((void **)&v496 + 1));
  v473 = (void *)*((void *)&v495 + 1);
  *((void *)&v495 + 1) = 0;
  if (v473) {
    operator delete(v473);
  }
  if ((void)v494)
  {
    *((void *)&v494 + 1) = v494;
    operator delete((void *)v494);
  }
  sub_25B3FB178((uint64_t)v492);
  sub_25B3FA930(v490);
  sub_25B3FAD70(v488[0]);
}

void sub_25B4F7ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  sub_25B4F818C((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void *sub_25B4F8108(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_25B4F818C(uint64_t a1)
{
  sub_25B3FACCC(a1 + 112);
  unint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_25B3FB178(a1 + 48);
  sub_25B3FA930(*(void **)(a1 + 32));
  sub_25B3FAD70(*(void **)(a1 + 8));
  return a1;
}

void *sub_25B4F81E0(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_25B43AF80(a1, a3);
    float32x4_t v6 = (char *)a1[1];
    memmove(v6, a2, 32 * a3);
    a1[1] = &v6[32 * a3];
  }
  return a1;
}

void sub_25B4F8248(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25B4F8264(uint64_t *result, int *a2, void **a3, uint64_t a4, char a5)
{
  int v8 = a3;
  int v9 = (int *)result;
  while (2)
  {
    uint8x8_t v10 = a2;
    uint64_t v135 = a2 - 1;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float32x4_t v12 = v11;
          uint64_t v13 = (char *)v10 - (char *)v11;
          uint64_t v14 = v10 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v57 = *v135;
                int v58 = *v12;
                uint64_t v59 = *v8;
                unint64_t v60 = sub_25B3FAE64(*v8, *v135)[3];
                BOOL result = sub_25B3FAE64(v59, v58);
                if (v60 < result[3])
                {
                  *float32x4_t v12 = v57;
                  *uint64_t v135 = v58;
                }
                break;
              case 3:
                unint64_t v61 = *v8;
                BOOL result = sub_25B4F93E0(v12, v12 + 1, v135, v61);
                break;
              case 4:
                BOOL result = sub_25B4F9508(v12, v12 + 1, v12 + 2, v135, v8);
                break;
              case 5:
                BOOL result = sub_25B4F9604(v12, v12 + 1, v12 + 2, v12 + 3, v135, v8);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            uint64_t v62 = v12 + 1;
            BOOL v64 = v12 == v10 || v62 == v10;
            if (a5)
            {
              if (!v64)
              {
                uint64_t v65 = 0;
                unint64_t v66 = *v8;
                unint64_t v67 = v12;
                do
                {
                  int v69 = *v67;
                  int v68 = v67[1];
                  unint64_t v67 = v62;
                  unint64_t v70 = sub_25B3FAE64(v66, v68)[3];
                  BOOL result = sub_25B3FAE64(v66, v69);
                  if (v70 < result[3])
                  {
                    uint64_t v71 = *v8;
                    uint64_t v72 = v65;
                    while (1)
                    {
                      *(int *)((char *)v12 + v72 + 4) = v69;
                      if (!v72) {
                        break;
                      }
                      int v69 = *(int *)((char *)v12 + v72 - 4);
                      unint64_t v73 = sub_25B3FAE64(v71, v68)[3];
                      BOOL result = sub_25B3FAE64(v71, v69);
                      v72 -= 4;
                      int v8 = a3;
                      if (v73 >= result[3])
                      {
                        uint8x8_t v74 = (int *)((char *)v12 + v72 + 4);
                        goto LABEL_82;
                      }
                    }
                    uint8x8_t v74 = v12;
LABEL_82:
                    int *v74 = v68;
                  }
                  uint64_t v62 = v67 + 1;
                  v65 += 4;
                }
                while (v67 + 1 != a2);
              }
            }
            else if (!v64)
            {
              float v118 = *v8;
              do
              {
                int v120 = *v12;
                int v119 = v12[1];
                float32x4_t v12 = v62;
                unint64_t v121 = sub_25B3FAE64(v118, v119)[3];
                BOOL result = sub_25B3FAE64(v118, v120);
                if (v121 < result[3])
                {
                  uint64_t v122 = v12;
                  do
                  {
                    *uint64_t v122 = v120;
                    int v120 = *(v122 - 2);
                    unint64_t v123 = sub_25B3FAE64(v118, v119)[3];
                    BOOL result = sub_25B3FAE64(v118, v120);
                    --v122;
                  }
                  while (v123 < result[3]);
                  *uint64_t v122 = v119;
                }
                uint64_t v62 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return result;
          }
          unint64_t v134 = v12;
          if (!a4)
          {
            if (v12 != v10)
            {
              int64_t v75 = (unint64_t)(v14 - 2) >> 1;
              uint8x8_t v76 = *v8;
              int64_t v139 = v75;
              uint64_t v124 = v13;
              uint64_t v127 = *v8;
              do
              {
                int64_t v77 = v75;
                if (v139 >= v75)
                {
                  uint64_t v78 = (2 * v75) | 1;
                  unint64_t v79 = &v12[v78];
                  uint64_t v80 = 2 * v75 + 2;
                  int v81 = *v79;
                  int64_t v130 = v75;
                  if (v80 < v14)
                  {
                    int v82 = v79[1];
                    unint64_t v83 = sub_25B3FAE64(v127, v81)[3];
                    BOOL v84 = v83 >= sub_25B3FAE64(v127, v82)[3];
                    uint64_t v13 = v124;
                    int v8 = a3;
                    if (!v84)
                    {
                      int v81 = v82;
                      ++v79;
                    }
                    uint8x8_t v76 = v127;
                    int64_t v77 = v130;
                    if (!v84) {
                      uint64_t v78 = v80;
                    }
                  }
                  unint64_t v85 = &v12[v77];
                  int v86 = *v85;
                  unint64_t v125 = sub_25B3FAE64(v76, v81)[3];
                  int v136 = v86;
                  BOOL result = sub_25B3FAE64(v76, v86);
                  int64_t v77 = v130;
                  if (v125 >= result[3])
                  {
                    uint64_t v87 = *v8;
                    do
                    {
                      int v88 = v79;
                      *unint64_t v85 = v81;
                      if (v139 < v78) {
                        break;
                      }
                      uint64_t v89 = (2 * v78) | 1;
                      unint64_t v79 = &v12[v89];
                      uint64_t v90 = 2 * v78 + 2;
                      int v81 = *v79;
                      if (v90 < v14)
                      {
                        int v91 = v79[1];
                        unint64_t v92 = sub_25B3FAE64(v87, *v79)[3];
                        BOOL v5 = v92 >= sub_25B3FAE64(v87, v91)[3];
                        float32x4_t v12 = v134;
                        if (!v5)
                        {
                          int v81 = v91;
                          ++v79;
                          uint64_t v89 = v90;
                        }
                      }
                      unint64_t v93 = sub_25B3FAE64(v87, v81)[3];
                      BOOL result = sub_25B3FAE64(v87, v136);
                      unint64_t v85 = v88;
                      uint64_t v78 = v89;
                    }
                    while (v93 >= result[3]);
                    *int v88 = v136;
                    int v8 = a3;
                    uint64_t v13 = v124;
                    uint8x8_t v76 = v127;
                    int64_t v77 = v130;
                  }
                }
                int64_t v75 = v77 - 1;
              }
              while (v77);
              uint64_t v94 = (unint64_t)v13 >> 2;
              float32x2_t v126 = *v8;
              do
              {
                uint64_t v95 = 0;
                int v128 = *v12;
                uint64_t v96 = v94 - 2;
                uint64_t v131 = v94 - 1;
                if (v94 < 2) {
                  uint64_t v96 = v94 - 1;
                }
                uint64_t v97 = v96 >> 1;
                unint64_t v137 = *v8;
                uint64_t v140 = v94;
                float v98 = v12;
                do
                {
                  BOOL v99 = &v98[v95];
                  int v102 = v99[1];
                  unint64_t v100 = v99 + 1;
                  int v101 = v102;
                  uint64_t v103 = (2 * v95) | 1;
                  uint64_t v104 = 2 * v95 + 2;
                  if (v104 < v94)
                  {
                    int v105 = v100[1];
                    unint64_t v106 = sub_25B3FAE64(v137, v101)[3];
                    BOOL result = sub_25B3FAE64(v137, v105);
                    BOOL v5 = v106 >= result[3];
                    uint64_t v94 = v140;
                    if (!v5)
                    {
                      int v101 = v105;
                      ++v100;
                      uint64_t v103 = v104;
                    }
                  }
                  *float v98 = v101;
                  float v98 = v100;
                  uint64_t v95 = v103;
                }
                while (v103 <= v97);
                unint64_t v107 = a2 - 1;
                if (v100 == a2 - 1)
                {
                  *unint64_t v100 = v128;
                }
                else
                {
                  *unint64_t v100 = *v107;
                  *unint64_t v107 = v128;
                  uint64_t v108 = (char *)v100 - (char *)v134 + 4;
                  if (v108 >= 5)
                  {
                    unint64_t v109 = (unint64_t)((v108 >> 2) - 2) >> 1;
                    uint8x8_t v110 = &v134[v109];
                    int v111 = *v110;
                    int v112 = *v100;
                    unint64_t v113 = sub_25B3FAE64(v126, *v110)[3];
                    BOOL result = sub_25B3FAE64(v126, v112);
                    if (v113 < result[3])
                    {
                      float v114 = *a3;
                      do
                      {
                        double v115 = v110;
                        *unint64_t v100 = v111;
                        if (!v109) {
                          break;
                        }
                        unint64_t v109 = (v109 - 1) >> 1;
                        uint8x8_t v110 = &v134[v109];
                        int v111 = *v110;
                        unint64_t v116 = sub_25B3FAE64(v114, *v110)[3];
                        BOOL result = sub_25B3FAE64(v114, v112);
                        unint64_t v100 = v115;
                      }
                      while (v116 < result[3]);
                      int *v115 = v112;
                    }
                  }
                }
                --a2;
                BOOL v117 = v94 <= 2;
                uint64_t v94 = v131;
                int v8 = a3;
                float32x4_t v12 = v134;
              }
              while (!v117);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          float32x4_t v16 = &v12[(unint64_t)v14 >> 1];
          long long v17 = *v8;
          if ((unint64_t)v13 < 0x201)
          {
            sub_25B4F93E0(v16, v12, v135, v17);
          }
          else
          {
            sub_25B4F93E0(v12, v16, v135, v17);
            sub_25B4F93E0(v12 + 1, v16 - 1, a2 - 2, *v8);
            sub_25B4F93E0(v12 + 2, &v12[v15 + 1], a2 - 3, *v8);
            sub_25B4F93E0(v16 - 1, v16, &v12[v15 + 1], *v8);
            int v18 = *v12;
            *float32x4_t v12 = *v16;
            *float32x4_t v16 = v18;
          }
          uint64_t v19 = a4 - 1;
          int v20 = *v12;
          BOOL v21 = *v8;
          if (a5) {
            break;
          }
          unint64_t v22 = sub_25B3FAE64(*v8, *(v12 - 1))[3];
          unint64_t v23 = sub_25B3FAE64(v21, v20)[3];
          if (v22 < v23) {
            break;
          }
          BOOL result = sub_25B3FAE64(v21, *v135);
          if (v23 >= result[3])
          {
            uint64_t v41 = v12;
            unint64_t v43 = v12 + 1;
            do
            {
              unint64_t v11 = v43;
              if (v43 >= v10) {
                break;
              }
              ++v43;
              int v44 = *v11;
              unint64_t v45 = sub_25B3FAE64(v21, v20)[3];
              BOOL result = sub_25B3FAE64(v21, v44);
            }
            while (v45 >= result[3]);
          }
          else
          {
            uint64_t v41 = v12;
            unint64_t v11 = v12;
            do
            {
              int v42 = v11[1];
              ++v11;
              BOOL result = sub_25B3FAE64(v21, v42);
            }
            while (v23 >= result[3]);
          }
          uint8x8_t v46 = v10;
          if (v11 < v10)
          {
            unint64_t v47 = sub_25B3FAE64(v21, v20)[3];
            uint8x8_t v46 = v10;
            do
            {
              int v48 = *--v46;
              BOOL result = sub_25B3FAE64(v21, v48);
            }
            while (v47 < result[3]);
          }
          uint64_t v49 = v19;
          if (v11 < v46)
          {
            int v50 = *v11;
            int v51 = *v46;
            do
            {
              *unint64_t v11 = v51;
              *uint8x8_t v46 = v50;
              unint64_t v52 = sub_25B3FAE64(v21, v20)[3];
              do
              {
                int v53 = v11[1];
                ++v11;
                int v50 = v53;
              }
              while (v52 >= sub_25B3FAE64(v21, v53)[3]);
              unint64_t v54 = sub_25B3FAE64(v21, v20)[3];
              do
              {
                int v55 = *--v46;
                int v51 = v55;
                BOOL result = sub_25B3FAE64(v21, v55);
              }
              while (v54 < result[3]);
            }
            while (v11 < v46);
          }
          unint64_t v56 = v11 - 1;
          BOOL v5 = v11 - 1 >= v41;
          BOOL v6 = v11 - 1 == v41;
          if (v11 - 1 != v41) {
            *uint64_t v41 = *v56;
          }
          a5 = 0;
          *unint64_t v56 = v20;
          int v8 = a3;
          a4 = v49;
        }
        do
        {
          unint64_t v24 = v12;
          int v26 = v12[1];
          ++v12;
          int v25 = v26;
          unint64_t v27 = sub_25B3FAE64(v21, v26)[3];
        }
        while (v27 < sub_25B3FAE64(v21, v20)[3]);
        uint64_t v138 = v19;
        unint64_t v28 = v10;
        if (v24 == v134)
        {
          unint64_t v28 = v10;
          do
          {
            if (v12 >= v28) {
              break;
            }
            int v31 = *--v28;
            unint64_t v32 = sub_25B3FAE64(v21, v31)[3];
          }
          while (v32 >= sub_25B3FAE64(v21, v20)[3]);
        }
        else
        {
          do
          {
            int v29 = *--v28;
            unint64_t v30 = sub_25B3FAE64(v21, v29)[3];
          }
          while (v30 >= sub_25B3FAE64(v21, v20)[3]);
        }
        if (v12 < v28)
        {
          int v33 = *v28;
          float v34 = v12;
          BOOL v35 = v28;
          do
          {
            int *v34 = v33;
            int *v35 = v25;
            do
            {
              unint64_t v24 = v34;
              int v36 = v34[1];
              ++v34;
              int v25 = v36;
              unint64_t v37 = sub_25B3FAE64(v21, v36)[3];
            }
            while (v37 < sub_25B3FAE64(v21, v20)[3]);
            do
            {
              int v38 = *--v35;
              int v33 = v38;
              unint64_t v39 = sub_25B3FAE64(v21, v38)[3];
            }
            while (v39 >= sub_25B3FAE64(v21, v20)[3]);
          }
          while (v34 < v35);
        }
        int v9 = v134;
        if (v24 != v134) {
          *unint64_t v134 = *v24;
        }
        *unint64_t v24 = v20;
        BOOL v5 = v12 >= v28;
        uint8x8_t v10 = a2;
        int v8 = a3;
        a4 = v138;
        if (v5) {
          break;
        }
LABEL_31:
        BOOL result = (uint64_t *)sub_25B4F8264(v134, v24, a3, v138, a5 & 1);
        a5 = 0;
        unint64_t v11 = v24 + 1;
      }
      BOOL v40 = sub_25B4F9744(v134, v24, a3);
      unint64_t v11 = v24 + 1;
      BOOL result = (uint64_t *)sub_25B4F9744(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v40) {
        goto LABEL_31;
      }
    }
    a2 = v24;
    if (!v40) {
      continue;
    }
    return result;
  }
}

uint64_t sub_25B4F8CCC(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = &v2[v5 / 0x55];
    uint64_t v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        sub_25B4F8E98(v7);
        v7 += 48;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B4F8E38(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_25B3FB178((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B4F8E98(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void sub_25B4F8EF0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    BOOL v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)sub_25B3FCAD4(v40);
      int v42 = &v41[8 * (v40 >> 2)];
      int v44 = &v41[8 * v43];
      unint64_t v45 = (uint64_t *)a1[1];
      BOOL v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        BOOL v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        int v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)int v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    long long v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    BOOL v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  int v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  BOOL v21 = (char *)*a1;
  unint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    int v25 = operator new(0xFF0uLL);
    int v26 = v25;
    if (v19 != v20)
    {
      *(void *)int v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      int v53 = (char *)sub_25B3FCAD4(v51);
      unint64_t v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      int v55 = (uint64_t *)a1[1];
      unint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        unint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      unint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        unint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    BOOL v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)BOOL v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)sub_25B3FCAD4(v85);
      int v42 = &v41[8 * (v85 >> 2)];
      int v44 = &v41[8 * v86];
      uint64_t v87 = (uint64_t *)a1[1];
      BOOL v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        BOOL v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        uint64_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)uint64_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      int v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        BOOL v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  int v29 = (char *)sub_25B3FCAD4(v28);
  uint64_t v31 = v30;
  unint64_t v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  float v34 = operator new(0xFF0uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    BOOL v64 = (char *)sub_25B3FCAD4(v63);
    unint64_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)unint64_t v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    unint64_t v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      int v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        int64_t v75 = (char *)sub_25B3FCAD4(v74);
        int v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        int64_t v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          int64_t v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = v68;
          int v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)uint64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        int v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          int v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      int v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  BOOL v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_25B4F93B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_25B4F93E0(int *a1, int *a2, int *a3, void *a4)
{
  int v8 = *a2;
  int v9 = *a1;
  unint64_t v10 = sub_25B3FAE64(a4, *a2)[3];
  unint64_t v11 = sub_25B3FAE64(a4, v9)[3];
  int v12 = *a3;
  BOOL result = sub_25B3FAE64(a4, *a3);
  unint64_t v14 = result[3];
  if (v10 >= v11)
  {
    if (v14 < v10)
    {
      *a2 = v12;
      *a3 = v8;
      int v15 = *a2;
      int v16 = *a1;
      unint64_t v17 = sub_25B3FAE64(a4, *a2)[3];
      BOOL result = sub_25B3FAE64(a4, v16);
      if (v17 < result[3])
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  else
  {
    if (v14 >= v10)
    {
      *a1 = v8;
      *a2 = v9;
      int v18 = *a3;
      unint64_t v19 = sub_25B3FAE64(a4, *a3)[3];
      BOOL result = sub_25B3FAE64(a4, v9);
      if (v19 >= result[3]) {
        return result;
      }
      *a2 = v18;
    }
    else
    {
      *a1 = v12;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t *sub_25B4F9508(int *a1, int *a2, int *a3, int *a4, void **a5)
{
  sub_25B4F93E0(a1, a2, a3, *a5);
  int v10 = *a4;
  int v11 = *a3;
  int v12 = *a5;
  unint64_t v13 = sub_25B3FAE64(v12, *a4)[3];
  BOOL result = sub_25B3FAE64(v12, v11);
  if (v13 < result[3])
  {
    *a3 = v10;
    *a4 = v11;
    int v15 = *a3;
    int v16 = *a2;
    unint64_t v17 = sub_25B3FAE64(v12, *a3)[3];
    BOOL result = sub_25B3FAE64(v12, v16);
    if (v17 < result[3])
    {
      *a2 = v15;
      *a3 = v16;
      int v18 = *a2;
      int v19 = *a1;
      unint64_t v20 = sub_25B3FAE64(v12, *a2)[3];
      BOOL result = sub_25B3FAE64(v12, v19);
      if (v20 < result[3])
      {
        *a1 = v18;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t *sub_25B4F9604(int *a1, int *a2, int *a3, int *a4, int *a5, void **a6)
{
  sub_25B4F9508(a1, a2, a3, a4, a6);
  int v12 = *a5;
  int v13 = *a4;
  unint64_t v14 = *a6;
  unint64_t v15 = sub_25B3FAE64(v14, *a5)[3];
  BOOL result = sub_25B3FAE64(v14, v13);
  if (v15 < result[3])
  {
    *a4 = v12;
    *a5 = v13;
    int v17 = *a4;
    int v18 = *a3;
    unint64_t v19 = sub_25B3FAE64(v14, *a4)[3];
    BOOL result = sub_25B3FAE64(v14, v18);
    if (v19 < result[3])
    {
      *a3 = v17;
      *a4 = v18;
      int v20 = *a3;
      int v21 = *a2;
      unint64_t v22 = sub_25B3FAE64(v14, *a3)[3];
      BOOL result = sub_25B3FAE64(v14, v21);
      if (v22 < result[3])
      {
        *a2 = v20;
        *a3 = v21;
        int v23 = *a2;
        int v24 = *a1;
        unint64_t v25 = sub_25B3FAE64(v14, *a2)[3];
        BOOL result = sub_25B3FAE64(v14, v24);
        if (v25 < result[3])
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B4F9744(int *a1, int *a2, void **a3)
{
  BOOL v3 = a3;
  unint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 1);
      int v9 = *a1;
      int v10 = *a3;
      unint64_t v11 = sub_25B3FAE64(*a3, v8)[3];
      if (v11 < sub_25B3FAE64(v10, v9)[3])
      {
        *a1 = v8;
        *(v4 - 1) = v9;
      }
      return 1;
    case 3:
      sub_25B4F93E0(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_25B4F9508(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_25B4F9604(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v12 = a1 + 2;
      sub_25B4F93E0(a1, a1 + 1, a1 + 2, *a3);
      int v13 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v14 = 0;
      unint64_t v15 = *v3;
      uint64_t v16 = 12;
      int v26 = v3;
      uint64_t v27 = v4;
      break;
  }
  while (1)
  {
    int v17 = *v13;
    int v18 = *v12;
    unint64_t v19 = sub_25B3FAE64(v15, *v13)[3];
    if (v19 < sub_25B3FAE64(v15, v18)[3])
    {
      int v20 = *v3;
      uint64_t v21 = v16;
      while (1)
      {
        *(int *)((char *)a1 + v21) = v18;
        uint64_t v22 = v21 - 4;
        if (v21 == 4) {
          break;
        }
        int v18 = *(int *)((char *)a1 + v21 - 8);
        unint64_t v23 = sub_25B3FAE64(v20, v17)[3];
        int v24 = sub_25B3FAE64(v20, v18);
        uint64_t v21 = v22;
        if (v23 >= v24[3])
        {
          unint64_t v25 = (int *)((char *)a1 + v22);
          goto LABEL_12;
        }
      }
      unint64_t v25 = a1;
LABEL_12:
      BOOL v3 = v26;
      unint64_t v4 = v27;
      *unint64_t v25 = v17;
      if (++v14 == 8) {
        return v13 + 1 == v27;
      }
    }
    int v12 = v13;
    v16 += 4;
    if (++v13 == v4) {
      return 1;
    }
  }
}

uint64_t sub_25B4F996C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)BOOL result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  BOOL v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_25B4F99DC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B3FB178((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B4F9A34(uint64_t a1, uint64_t **a2)
{
  if (a2[1] == (uint64_t *)3)
  {
    uint64_t v2 = *a2;
    BOOL v3 = *(char ***)(a1 + 8);
    uint64_t v5 = v3[1];
    unint64_t v4 = (unint64_t)v3[2];
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v7 = *v3;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v3) >> 2);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x1555555555555555) {
        sub_25B3FBC4C();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 2);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v11 = 0x1555555555555555;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 > 0x1555555555555555) {
          sub_25B3FA70C();
        }
        int v12 = (char *)operator new(12 * v11);
      }
      else
      {
        int v12 = 0;
      }
      int v13 = &v12[12 * v8];
      *((_DWORD *)v13 + 2) = 0;
      *(void *)int v13 = 0;
      uint64_t v6 = v13 + 12;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *(void *)(v5 - 12);
          v5 -= 12;
          int v15 = *((_DWORD *)v5 + 2);
          *(void *)(v13 - 12) = v14;
          v13 -= 12;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        uint64_t v5 = *v3;
      }
      void *v3 = v13;
      v3[1] = v6;
      v3[2] = &v12[12 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *((_DWORD *)v5 + 2) = 0;
      *(void *)uint64_t v5 = 0;
      uint64_t v6 = v5 + 12;
    }
    v3[1] = v6;
    uint64_t v16 = *v2;
    *((_DWORD *)v6 - 1) = *((_DWORD *)v2 + 2);
    *(void *)(v6 - 12) = v16;
  }
  return 1;
}

uint64_t sub_25B4F9B7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2708F1778;
  a2[1] = v2;
  return result;
}

void *sub_25B4F9BA0(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_2708F1778;
  result[1] = v3;
  return result;
}

void sub_25B4F9BE8()
{
}

uint64_t *sub_25B4F9C00(uint64_t a1, int *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = (v6 + ((v5 + 2654435769) << 6) + ((unint64_t)(v5 + 2654435769) >> 2) + 2654435769u) ^ (v5 + 2654435769);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = (v6 + ((v5 + 2654435769) << 6) + ((unint64_t)(v5 + 2654435769) >> 2) + 2654435769u) ^ (v5 + 2654435769);
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v5 && *((_DWORD *)i + 5) == v6) {
            return i + 4;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  int v15 = operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_DWORD *)v15 + 16) = 1065353216;
  char v38 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v18 = 0;
    }
    unint64_t v19 = (2 * v8) | !v18;
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          unint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v14;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  *unint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                unint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  long long v33 = *(void **)(*(void *)a1 + 8 * v2);
  if (v33)
  {
    *(void *)v37[0] = *v33;
    *long long v33 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v37[0])
    {
      unint64_t v34 = *(void *)(*(void *)v37[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v34 >= v8) {
          v34 %= v8;
        }
      }
      else
      {
        v34 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v37[0];
    }
  }
  uint64_t i = (uint64_t *)v37[0];
  v37[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B4FA280((uint64_t)v37);
  return i + 4;
}

void sub_25B4FA038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4FA280((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4FA04C(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4FA220((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_25B4FA094(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_25B4FA220((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_25B4FA0F4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_25B3FB178((uint64_t)(v2 + 4));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_25B4FA154(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = (((a3 + 2654435769) << 6) + a4 + ((unint64_t)(a3 + 2654435769) >> 2) + 2654435769u) ^ (a3 + 2654435769);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = (((a3 + 2654435769) << 6) + a4 + ((unint64_t)(a3 + 2654435769) >> 2) + 2654435769u) ^ (a3 + 2654435769);
    if (v4 >= a2) {
      unint64_t v6 = v4 % a2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (a2 - 1);
  }
  unint64_t v7 = *(uint64_t ***)(a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (BOOL result = *v7; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == a3 && *((_DWORD *)result + 5) == a4) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
      }
      else
      {
        v9 &= a2 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B4FA220(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t sub_25B4FA280(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B3FB178((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_25B4FA884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B4FA924(void *a1, _OWORD *a2)
{
  id v3 = a1;
  if (objc_msgSend_count(v3, v4, v5) == 4)
  {
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v6, v7);
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        break;
      }
      unint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v3, v10, v7);
      BOOL v12 = sub_25B4FB1B4(v11, a2);

      if (!v12) {
        break;
      }
      ++v7;
      ++a2;
      if (v7 == 4)
      {
        uint64_t v13 = 1;
        goto LABEL_8;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_8:

  return v13;
}

void sub_25B4FA9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FAA14(void *a1, _OWORD *a2)
{
  id v29 = a1;
  if (objc_msgSend_count(v29, v3, v4) == 4)
  {
    unint64_t v6 = objc_msgSend_objectAtIndexedSubscript_(v29, v5, 0);
    objc_msgSend_floatValue(v6, v7, v8);
    unsigned int v28 = v9;
    unint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v29, v10, 1);
    objc_msgSend_floatValue(v11, v12, v13);
    unsigned int v27 = v14;
    float v16 = objc_msgSend_objectAtIndexedSubscript_(v29, v15, 2);
    objc_msgSend_floatValue(v16, v17, v18);
    unsigned int v26 = v19;
    uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v29, v20, 3);
    objc_msgSend_floatValue(v21, v22, v23);
    *(void *)&long long v24 = __PAIR64__(v27, v28);
    *((void *)&v24 + 1) = __PAIR64__(v25, v26);
    *a2 = v24;
  }
}

void sub_25B4FAB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_25B4FAB4C(void *a1, void **a2)
{
  id v23 = a1;
  for (unint64_t i = 0; objc_msgSend_count(v23, v3, v4) > i; ++i)
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v23, v6, i);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0) {
      break;
    }
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    unint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v23, v9, i);
    BOOL v11 = sub_25B4FB1B4(v10, &v24);

    if (!v11) {
      break;
    }
    uint64_t v13 = (char *)a2[1];
    unint64_t v12 = (unint64_t)a2[2];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v14 = (v13 - (unsigned char *)*a2) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v16 = v12 - (void)*a2;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)sub_25B3FFAEC(v17);
      }
      else {
        id v3 = 0;
      }
      uint64_t v18 = (_OWORD *)(v17 + 16 * v14);
      _OWORD *v18 = v24;
      unsigned int v19 = v18 + 1;
      uint64_t v21 = (char *)*a2;
      unint64_t v20 = (char *)a2[1];
      if (v20 != *a2)
      {
        do
        {
          long long v22 = *((_OWORD *)v20 - 1);
          v20 -= 16;
          *--uint64_t v18 = v22;
        }
        while (v20 != v21);
        unint64_t v20 = (char *)*a2;
      }
      *a2 = v18;
      a2[1] = v19;
      a2[2] = (void *)(v17 + 16 * (void)v3);
      if (v20) {
        operator delete(v20);
      }
      a2[1] = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v13 = v24;
      a2[1] = v13 + 16;
    }
  }
}

void sub_25B4FACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4FAD10(void *a1, unint64_t *a2)
{
  id v27 = a1;
  for (unint64_t i = 0; objc_msgSend_count(v27, v3, v4) > i; ++i)
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v27, v6, i);
    unsigned int v9 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, 0);
    char v12 = objc_msgSend_intValue(v9, v10, v11);
    char v13 = v12;
    unint64_t v15 = (unsigned char *)a2[1];
    unint64_t v14 = a2[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a2;
      uint64_t v18 = &v15[-*a2];
      unint64_t v19 = (unint64_t)(v18 + 1);
      if ((uint64_t)(v18 + 1) < 0) {
        sub_25B3FBC4C();
      }
      unint64_t v20 = v14 - v17;
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v21 = v19;
      }
      if (v21) {
        long long v22 = (char *)operator new(v21);
      }
      else {
        long long v22 = 0;
      }
      id v23 = &v18[(void)v22];
      long long v24 = &v18[(void)v22];
      *long long v24 = v13;
      uint64_t v16 = v24 + 1;
      if (v15 != (unsigned char *)v17)
      {
        unsigned int v25 = &v15[~v17];
        do
        {
          char v26 = *--v15;
          (v25--)[(void)v22] = v26;
        }
        while (v15 != (unsigned char *)v17);
        id v23 = v22;
      }
      *a2 = (unint64_t)v23;
      a2[1] = (unint64_t)v16;
      a2[2] = (unint64_t)&v22[v21];
      if (v17) {
        operator delete((void *)v17);
      }
    }
    else
    {
      unsigned char *v15 = v12;
      uint64_t v16 = v15 + 1;
    }
    a2[1] = (unint64_t)v16;
  }
}

void sub_25B4FAE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4FAEAC(void *a1, uint64_t a2)
{
  id v23 = a1;
  for (unint64_t i = 0; objc_msgSend_count(v23, v3, v4) > i; ++i)
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v23, v6, i);
    objc_msgSend_floatValue(v7, v8, v9);
    int v11 = v10;
    char v13 = *(_DWORD **)(a2 + 8);
    unint64_t v12 = *(void *)(a2 + 16);
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = *(_DWORD **)a2;
      uint64_t v16 = ((uint64_t)v13 - *(void *)a2) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        unint64_t v19 = (unint64_t)sub_25B3FBC64(v19);
        unint64_t v15 = *(_DWORD **)a2;
        char v13 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        uint64_t v20 = 0;
      }
      size_t v21 = (_DWORD *)(v19 + 4 * v16);
      *size_t v21 = v11;
      unint64_t v14 = v21 + 1;
      while (v13 != v15)
      {
        int v22 = *--v13;
        *--size_t v21 = v22;
      }
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v19 + 4 * v20;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *char v13 = v10;
      unint64_t v14 = v13 + 1;
    }
    *(void *)(a2 + 8) = v14;
  }
}

void sub_25B4FAFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4FB018(void *a1, unint64_t *a2)
{
  id v27 = a1;
  for (unint64_t i = 0; objc_msgSend_count(v27, v3, v4) > i; ++i)
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v27, v6, i);
    uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, 0);
    char v12 = objc_msgSend_intValue(v9, v10, v11);
    char v13 = v12;
    unint64_t v15 = (unsigned char *)a2[1];
    unint64_t v14 = a2[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a2;
      uint64_t v18 = &v15[-*a2];
      unint64_t v19 = (unint64_t)(v18 + 1);
      if ((uint64_t)(v18 + 1) < 0) {
        sub_25B3FBC4C();
      }
      unint64_t v20 = v14 - v17;
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v21 = v19;
      }
      if (v21) {
        int v22 = (char *)operator new(v21);
      }
      else {
        int v22 = 0;
      }
      id v23 = &v18[(void)v22];
      long long v24 = &v18[(void)v22];
      *long long v24 = v13;
      uint64_t v16 = v24 + 1;
      if (v15 != (unsigned char *)v17)
      {
        unsigned int v25 = &v15[~v17];
        do
        {
          char v26 = *--v15;
          (v25--)[(void)v22] = v26;
        }
        while (v15 != (unsigned char *)v17);
        id v23 = v22;
      }
      *a2 = (unint64_t)v23;
      a2[1] = (unint64_t)v16;
      a2[2] = (unint64_t)&v22[v21];
      if (v17) {
        operator delete((void *)v17);
      }
    }
    else
    {
      unsigned char *v15 = v12;
      uint64_t v16 = v15 + 1;
    }
    a2[1] = (unint64_t)v16;
  }
}

void sub_25B4FB180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B4FB1B4(void *a1, _OWORD *a2)
{
  id v3 = a1;
  uint64_t v7 = objc_msgSend_count(v3, v4, v5);
  if (v7 == 3)
  {
    uint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v6, 0);
    objc_msgSend_floatValue(v8, v9, v10);
    *(void *)&long long v25 = v11;
    char v13 = objc_msgSend_objectAtIndexedSubscript_(v3, v12, 1);
    objc_msgSend_floatValue(v13, v14, v15);
    int v24 = v16;
    uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v3, v17, 2);
    objc_msgSend_floatValue(v18, v19, v20);
    long long v21 = v25;
    DWORD1(v21) = v24;
    DWORD2(v21) = v22;
    *a2 = v21;
  }
  return v7 == 3;
}

void sub_25B4FB280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FB548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_25B4FB59C(__n128 *a1, const char *a2, uint64_t a3)
{
  v17[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_25B4FB818(*a1, (uint64_t)a1, a2, a3);
  v17[0] = v4;
  uint64_t v7 = sub_25B4FB818(a1[1], (uint64_t)v4, v5, v6);
  v17[1] = v7;
  uint64_t v10 = sub_25B4FB818(a1[2], (uint64_t)v7, v8, v9);
  v17[2] = v10;
  char v13 = sub_25B4FB818(a1[3], (uint64_t)v10, v11, v12);
  v17[3] = v13;
  uint64_t v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v14, (uint64_t)v17, 4);

  return v15;
}

void sub_25B4FB690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4FB6CC(__n128 a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v19[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v19[0] = v4;
  HIDWORD(v5) = a1.n128_u32[1];
  LODWORD(v5) = a1.n128_u32[1];
  uint64_t v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v19[1] = v8;
  uint64_t v11 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v19[2] = v11;
  unint64_t v14 = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[3])));
  v19[3] = v14;
  int v16 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v15, (uint64_t)v19, 4);

  return v16;
}

void sub_25B4FB7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4FB818(__n128 a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v16[0] = v4;
  HIDWORD(v5) = a1.n128_u32[1];
  LODWORD(v5) = a1.n128_u32[1];
  uint64_t v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v16[1] = v8;
  uint64_t v11 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v16[2] = v11;
  uint64_t v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v12, (uint64_t)v16, 3);

  return v13;
}

void sub_25B4FB900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B4FB930(char **a1, const char *a2, uint64_t a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  double v5 = objc_msgSend_array(MEMORY[0x263EFF980], a2, a3);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      uint64_t v8 = objc_msgSend_numberWithChar_(NSNumber, v4, *v6);
      v13[0] = v8;
      v13[1] = &stru_2708F4750;
      uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v9, (uint64_t)v13, 2);
      objc_msgSend_addObject_(v5, v11, (uint64_t)v10);

      ++v6;
    }
    while (v6 != v7);
  }

  return v5;
}

void sub_25B4FBA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

id sub_25B4FBA5C(char **a1, const char *a2, uint64_t a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  double v5 = objc_msgSend_array(MEMORY[0x263EFF980], a2, a3);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      uint64_t v8 = objc_msgSend_numberWithChar_(NSNumber, v4, *v6);
      v13[0] = v8;
      v13[1] = &stru_2708F4750;
      uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v9, (uint64_t)v13, 2);
      objc_msgSend_addObject_(v5, v11, (uint64_t)v10);

      ++v6;
    }
    while (v6 != v7);
  }

  return v5;
}

void sub_25B4FBB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_25B4FBE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FC424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_25B4FC650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FCF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FD330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RS3DSurfaceTypeGetDirectionalAxis(unsigned int a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return qword_25B5F20B0[a1];
  }
}

void sub_25B4FD368(uint64_t a1, char *a2, char *a3, char *a4, unint64_t a5)
{
  if (a1)
  {
    sub_25B4D3D18((char *)(a1 + 8), a2, (uint64_t)&a2[16 * a5], a5);
    sub_25B4E4D24((void *)(a1 + 32), a3, &a3[a5], a5);
    sub_25B3FE7A8((char *)(a1 + 56), a4, (uint64_t)&a4[4 * a5], a5);
    unint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(char **)(a1 + 88);
    if (a5 <= (unint64_t)&v10[-v9])
    {
      if (a5 < (unint64_t)&v10[-v9]) {
        *(void *)(a1 + 88) = v9 + a5;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 96);
      if (v11 - (uint64_t)v10 >= a5 - (unint64_t)&v10[-v9])
      {
        bzero(*(void **)(a1 + 88), a5 - (void)&v10[-v9]);
        *(void *)(a1 + 88) = a5 + v9;
      }
      else
      {
        if ((a5 & 0x8000000000000000) != 0) {
          sub_25B3FBC4C();
        }
        unint64_t v12 = v11 - v9;
        uint64_t v13 = 2 * v12;
        if (2 * v12 <= a5) {
          uint64_t v13 = a5;
        }
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v13;
        }
        uint64_t v15 = (char *)operator new(v14);
        int v16 = &v15[v14];
        unint64_t v17 = &v15[a5];
        bzero(&v10[(void)v15 - v9], a5 - (void)&v10[-v9]);
        if (v10 == (char *)v9)
        {
          uint64_t v15 = &v10[(void)v15 - v9];
        }
        else
        {
          uint64_t v18 = &v10[~v9];
          do
          {
            char v19 = *--v10;
            (v18--)[(void)v15] = v19;
          }
          while (v10 != (char *)v9);
        }
        *(void *)(a1 + 80) = v15;
        *(void *)(a1 + 88) = v17;
        *(void *)(a1 + 96) = v16;
        if (v9) {
          operator delete((void *)v9);
        }
      }
    }
    if (a5 >= 3)
    {
      uint64_t v20 = *(char **)(a1 + 80);
      if (a5 != 3) {
        bzero(v20, a5 - 3);
      }
      v20[a5 - 3] = 1;
      *(_WORD *)&v20[a5 - 2] = 770;
    }
  }
}

void sub_25B4FD4F4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

void sub_25B4FD504(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 152), a2);
  }
}

void sub_25B4FD91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B4FD95C(void *result, unint64_t a2)
{
  if (result)
  {
    if (result[7] <= a2)
    {
      return 0;
    }
    else
    {
      id v3 = result;
      return (void *)((char *)sub_25B4FD9B4(v3) + *((void *)v3 + 3) * a2 * *((void *)v3 + 5));
    }
  }
  return result;
}

__CVBuffer *sub_25B4FD9B4(__CVBuffer *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 8);
    BOOL result = (__CVBuffer *)*((void *)result + 1);
    if (v2)
    {
      if (result)
      {
        int IsPlanar = CVPixelBufferIsPlanar(result);
        uint64_t v4 = (__CVBuffer *)*((void *)v1 + 1);
        if (IsPlanar)
        {
          return (__CVBuffer *)CVPixelBufferGetBaseAddressOfPlane(v4, 0);
        }
        else
        {
          return (__CVBuffer *)CVPixelBufferGetBaseAddress(v4);
        }
      }
    }
  }
  return result;
}

void sub_25B4FDA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)RSSemanticImage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25B4FDAAC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 64);
    id v3 = *(__CVBuffer **)(a1 + 8);
    if (v2)
    {
      if (!v3) {
        return;
      }
      CVPixelBufferRelease(v3);
    }
    else
    {
      if (!v3) {
        return;
      }
      free(v3);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_25B4FDB1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a1) {
    return 0;
  }
  v15.receiver = a1;
  v15.super_class = (Class)RSSemanticImage;
  uint64_t v11 = objc_msgSendSuper2(&v15, sel_init);
  uint64_t v13 = v11;
  if (v11)
  {
    v11[5] = a2;
    v11[6] = a3;
    v11[7] = a4;
    v11[8] = a5;
    *((_DWORD *)v11 + 4) = a6;
    sub_25B4FDBCC((size_t)v11, v12);
  }
  return v13;
}

void sub_25B4FDBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t sub_25B4FDBCC(size_t result, const char *a2)
{
  size_t v2 = result;
  v10[1] = *MEMORY[0x263EF8340];
  if (!*(void *)(result + 64))
  {
    uint64_t v4 = 4 * *(void *)(result + 48);
    BOOL result = *(void *)(result + 40) * v4 * *(void *)(result + 56);
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = result;
    if (result)
    {
      BOOL result = (size_t)malloc_type_calloc(result, 1uLL, 0x7CAA107AuLL);
      *(void *)(v2 + 8) = result;
    }
    else
    {
      *(void *)(v2 + 8) = 0;
    }
    return result;
  }
  if (!*(void *)(result + 40) || !*(void *)(result + 48) || !*(void *)(result + 56))
  {
    *(void *)(result + 8) = 0;
LABEL_9:
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    return result;
  }
  uint64_t v9 = *MEMORY[0x263F04130];
  v10[0] = MEMORY[0x263EFFA78];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v10, &v9, 1);
  CFDictionaryRef v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferRef texture = 0;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(v2 + 48), *(void *)(v2 + 56) * *(void *)(v2 + 40), *(_DWORD *)(v2 + 16), v3, &texture))
  {
    if (texture) {
      CVPixelBufferRelease(texture);
    }
  }
  else
  {
    *(void *)(v2 + 8) = texture;
  }

  BOOL result = *(void *)(v2 + 8);
  if (!result) {
    goto LABEL_9;
  }
  int IsPlanar = CVPixelBufferIsPlanar((CVPixelBufferRef)result);
  uint64_t v6 = *(__CVBuffer **)(v2 + 8);
  if (IsPlanar) {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
  }
  else {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v6);
  }
  *(void *)(v2 + 24) = BytesPerRowOfPlane;
  BOOL result = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(v2 + 8));
  *(void *)(v2 + 32) = result;
  return result;
}

void sub_25B4FDD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4FDD60(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = *(void *)(a1 + 64) == 1 && CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), 0) == 0;
    CFDictionaryRef v3 = (__CVBuffer *) (id) a1;
    uint64_t v4 = sub_25B4FD9B4(v3);
    if (v4)
    {
      size_t v5 = *((void *)v3 + 4);
      if (v5) {
        bzero(v4, v5);
      }
    }
    if (v2)
    {
      uint64_t v6 = (__CVBuffer *)*((void *)v3 + 1);
      CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    }
  }
}

void sub_25B4FDDF4(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 8);
  if (v2 == *(void **)a1)
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
    CFDictionaryRef v3 = 0;
  }
  else
  {
    CFDictionaryRef v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    BOOL v2 = *(void **)a1;
    do
    {
      if ((unint64_t)v4 >= v5)
      {
        uint64_t v8 = (v4 - v3) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v5 - (void)v3) >> 2 > v9) {
          unint64_t v9 = (uint64_t)(v5 - (void)v3) >> 2;
        }
        if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)sub_25B3FCAD4(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        unint64_t v12 = (char *)(v10 + 8 * v8);
        *(void *)unint64_t v12 = v2[v6];
        uint64_t v7 = v12 + 8;
        while (v4 != v3)
        {
          uint64_t v13 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        unint64_t v5 = v10 + 8 * v11;
        if (v3) {
          operator delete(v3);
        }
        CFDictionaryRef v3 = v12;
      }
      else
      {
        *(void *)uint64_t v4 = v2[v6];
        uint64_t v7 = v4 + 8;
      }
      v6 += 3;
      BOOL v2 = *(void **)a1;
      uint64_t v4 = v7;
    }
    while (v6 < (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v5;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_25B4FDF54(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4FDF70(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    CFDictionaryRef v3 = *(void **)a2;
    uint64_t v4 = *(void **)(a2 + 8);
    if (*(void **)a2 != v4)
    {
      unint64_t v6 = 0;
      memset(v24, 0, sizeof(v24));
      int v25 = 1065353216;
      float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x42C80000u);
      long long v23 = 0u;
      do
      {
        simd_float4 v7 = (simd_float4)vmulq_f32(*(float32x4_t *)(a1 + 16 * *v3), v22);
        v7.i32[3] = 0;
        simd_float4 v8 = _simd_round_f4(v7);
        *(int32x2_t *)v8.f32 = vcvt_s32_f32(*(float32x2_t *)v8.f32);
        LOWORD(v9) = 0;
        WORD1(v9) = v8.i16[0];
        WORD2(v9) = v8.i16[2];
        HIWORD(v9) = (int)v8.f32[2];
        unint64_t v10 = v9;
        if (!sub_25B4CC2F8(v24, v9))
        {
          sub_25B4FE164((uint64_t)v24, v10, v10);
          uint64_t v11 = *((void *)&v23 + 1);
          if (*((void *)&v23 + 1) >= v6)
          {
            uint64_t v13 = (void *)v23;
            uint64_t v14 = (uint64_t)(*((void *)&v23 + 1) - v23) >> 3;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v6 - v23) >> 2 > v15) {
              unint64_t v15 = (uint64_t)(v6 - v23) >> 2;
            }
            if (v6 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16) {
              unint64_t v16 = (unint64_t)sub_25B3FCAD4(v16);
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = (void *)(v16 + 8 * v14);
            void *v18 = *v3;
            uint64_t v12 = (uint64_t)(v18 + 1);
            while (v11 != (void)v23)
            {
              uint64_t v19 = *(void *)(v11 - 8);
              v11 -= 8;
              *--uint64_t v18 = v19;
            }
            unint64_t v6 = v16 + 8 * v17;
            *(void *)&long long v23 = v18;
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            **((void **)&v23 + 1) = *v3;
            uint64_t v12 = *((void *)&v23 + 1) + 8;
          }
          *(void *)&long long v20 = v23;
          *((void *)&v20 + 1) = v12;
          long long v23 = v20;
        }
        ++v3;
      }
      while (v3 != v4);
      long long v21 = *(void **)a2;
      *(_OWORD *)a2 = v23;
      *(void *)(a2 + 16) = v6;
      sub_25B3FB178((uint64_t)v24);
      if (v21) {
        operator delete(v21);
      }
    }
  }
}

void sub_25B4FE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_25B3FB178((uint64_t)va);
  if (a4) {
    operator delete(a4);
  }
  _Unwind_Resume(a1);
}

void sub_25B4FE164(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = (void *)*v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = a2;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_25B3FA4B0(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *long long v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_25B4FE358(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B4FE36C(uint64_t a1, char **a2)
{
  if (a1)
  {
    unint64_t v3 = a2[1];
    if (*a2 != v3)
    {
      uint64_t v4 = v3 - *a2;
      if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9) {
        sub_25B3FBC4C();
      }
      unint64_t v6 = (__n128 *)sub_25B3FFAEC(v4 >> 3);
      uint64_t v7 = 2 * v4;
      bzero(v6, 2 * v4);
      unint64_t v9 = (__n128 *)((char *)v6 + 2 * v4);
      unint64_t v10 = *a2;
      if (a2[1] != *a2)
      {
        unint64_t v11 = 0;
        v8.i32[0] = 0.5;
        do
        {
          uint64_t v12 = *(void *)&v10[8 * v11];
          float32x4_t v13 = *(float32x4_t *)(a1 + 16 * v12);
          float v14 = -(float)(v13.f32[0] * 100.0);
          if ((float)(100.0 * v13.f32[0]) >= 0.0) {
            float v14 = 100.0 * v13.f32[0];
          }
          int v15 = (int)v14;
          float v16 = v14 - (float)(int)v14;
          if (v16 < 0.5) {
            int v17 = v15;
          }
          else {
            int v17 = v15 + 1;
          }
          int v18 = (v15 & 1) + v15;
          if (v16 != 0.5) {
            int v18 = v17;
          }
          if ((float)(100.0 * v13.f32[0]) < 0.0) {
            int v18 = -v18;
          }
          float v19 = vmuls_lane_f32(100.0, *(float32x2_t *)v13.f32, 1);
          float v20 = -(float)(v13.f32[1] * 100.0);
          if (v19 >= 0.0) {
            float v20 = v19;
          }
          int v21 = (int)v20;
          float v22 = v20 - (float)(int)v20;
          if (v22 < 0.5) {
            int v23 = v21;
          }
          else {
            int v23 = v21 + 1;
          }
          int v24 = (v21 & 1) + v21;
          if (v22 != 0.5) {
            int v24 = v23;
          }
          if (v19 < 0.0) {
            int v24 = -v24;
          }
          v13.f32[0] = vmuls_lane_f32(100.0, v13, 2);
          float v25 = -(float)(v13.f32[2] * 100.0);
          if (v13.f32[0] >= 0.0) {
            float v25 = v13.f32[0];
          }
          int v26 = (int)v25;
          float v27 = v25 - (float)(int)v25;
          if (v27 < 0.5) {
            int v28 = v26;
          }
          else {
            int v28 = v26 + 1;
          }
          int v29 = (v26 & 1) + v26;
          if (v27 != 0.5) {
            int v29 = v28;
          }
          if (v13.f32[0] < 0.0) {
            int v29 = -v29;
          }
          v30.n128_u64[0] = __PAIR64__(v24, v18);
          v30.n128_u64[1] = __PAIR64__(v12, v29);
          v6[v11++] = v30;
          unint64_t v10 = *a2;
        }
        while (v11 < (a2[1] - *a2) >> 3);
      }
      unint64_t v31 = (char *)v9 - (char *)v6;
      unint64_t v32 = v9 - v6;
      if ((char *)v9 - (char *)v6 < 2049)
      {
LABEL_38:
        sub_25B4FE740(v6, v9, v9 - v6, 0, 0, v8);
      }
      else
      {
        long long v33 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        unint64_t v34 = v9 - v6;
        while (1)
        {
          long long v35 = (__n128 *)operator new(16 * v34, v33);
          if (v35) {
            break;
          }
          BOOL v36 = v34 > 1;
          v34 >>= 1;
          if (!v36) {
            goto LABEL_38;
          }
        }
        long long v37 = v35;
        sub_25B4FE740(v6, v9, v9 - v6, v35, v34, v8);
        operator delete(v37);
      }
      char v38 = *a2;
      if (v7)
      {
        if (v32 <= 1) {
          uint64_t v39 = 1;
        }
        else {
          uint64_t v39 = v32;
        }
        unint64_t v40 = &v6->n128_i32[3];
        uint64_t v41 = *a2;
        do
        {
          uint64_t v42 = *v40;
          v40 += 4;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          --v39;
        }
        while (v39);
      }
      uint64_t v43 = (char *)operator new(8uLL);
      int v44 = v43;
      *(void *)uint64_t v43 = *(void *)v38;
      unint64_t v45 = v43 + 8;
      if (v31 <= 0x10)
      {
        int v48 = v43 + 8;
        uint64_t v49 = v43 + 8;
      }
      else
      {
        unint64_t v46 = 1;
        int32x4_t v47 = *(int32x4_t *)v6;
        int v48 = v43 + 8;
        uint64_t v49 = v43 + 8;
        do
        {
          int32x4_t v59 = (int32x4_t)v6[v46];
          uint32x4_t v50 = (uint32x4_t)vceqq_s32(v47, v59);
          v50.i32[3] = v50.i32[2];
          if ((vminvq_u32(v50) & 0x80000000) == 0)
          {
            unint64_t v51 = *a2;
            if (v49 >= v48)
            {
              uint64_t v52 = (v49 - v44) >> 3;
              unint64_t v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((v48 - v44) >> 2 > v53) {
                unint64_t v53 = (v48 - v44) >> 2;
              }
              if ((unint64_t)(v48 - v44) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v53;
              }
              if (v54)
              {
                unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
                uint64_t v49 = v45;
              }
              else
              {
                uint64_t v55 = 0;
              }
              unint64_t v56 = (char *)(v54 + 8 * v52);
              *(void *)unint64_t v56 = *(void *)&v51[8 * v46];
              unint64_t v45 = v56 + 8;
              while (v49 != v44)
              {
                uint64_t v57 = *((void *)v49 - 1);
                v49 -= 8;
                *((void *)v56 - 1) = v57;
                v56 -= 8;
              }
              int v48 = (char *)(v54 + 8 * v55);
              if (v44) {
                operator delete(v44);
              }
              int v44 = v56;
              uint64_t v49 = v45;
            }
            else
            {
              *(void *)uint64_t v49 = *(void *)&v51[8 * v46];
              v49 += 8;
              unint64_t v45 = v49;
            }
            int32x4_t v47 = v59;
          }
          ++v46;
        }
        while (v46 < v32);
      }
      uint64_t v58 = *a2;
      *a2 = v44;
      a2[1] = v49;
      a2[2] = v48;
      if (v58) {
        operator delete(v58);
      }
      if (v6)
      {
        operator delete(v6);
      }
    }
  }
}

void sub_25B4FE710(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4FE740(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, int32x4_t a6)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (int32x4_t *)a1;
    if (a3 == 2)
    {
      int32x4_t v8 = (int32x4_t)a2[-1];
      int32x4_t v9 = *(int32x4_t *)a1;
      int v10 = (int)*a1;
      if (v8.i32[0] < v10
        || v8.i32[0] <= v10
        && (v8.i32[1] < v9.i32[1] || v8.i32[1] <= v9.i32[1] && (vmovn_s32(vcgtq_s32(v9, v8)).i32[1] & 1) != 0))
      {
        *a1 = (__n128)v8;
        a2[-1] = (__n128)v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      int v23 = (int32x4_t *)a4;
      unint64_t v24 = a3 >> 1;
      float v25 = &a1[a3 >> 1];
      unint64_t v26 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        int32x4_t v27 = sub_25B4FEA38(a1, v25, v26, a4, a6);
        int v28 = (__n128 *)&v23[v24];
        sub_25B4FEA38((__n128 *)&v7[a3 >> 1], a2, a3 - (a3 >> 1), v28, v27);
        int v29 = &v23[a3];
        __n128 v30 = v28;
        while (v30 != (__n128 *)v29)
        {
          int32x4_t v31 = *(int32x4_t *)v30;
          int v32 = (int)*v30;
          int32x4_t v33 = *v23;
          int v34 = (int)*v23;
          if (v32 < v34
            || v32 <= v34
            && (v31.i32[1] < v33.i32[1] || v31.i32[1] <= v33.i32[1] && (vmovn_s32(vcgtq_s32(v33, v31)).i32[1] & 1) != 0))
          {
            *uint64_t v7 = v31;
            ++v30;
          }
          else
          {
            *uint64_t v7 = v33;
            ++v23;
          }
          ++v7;
          if (v23 == (int32x4_t *)v28)
          {
            if (v30 != (__n128 *)v29)
            {
              uint64_t v35 = 0;
              do
              {
                v7[v35] = (int32x4_t)v30[v35];
                ++v35;
              }
              while (&v30[v35] != (__n128 *)v29);
            }
            return;
          }
        }
        if (v23 != (int32x4_t *)v28)
        {
          uint64_t v36 = 0;
          do
          {
            v7[v36] = v23[v36];
            ++v36;
          }
          while (&v23[v36] != (int32x4_t *)v28);
        }
      }
      else
      {
        sub_25B4FE740(a1, v25, v26, a4, a5);
        sub_25B4FE740(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v23, a5);
        sub_25B4FED04(v7, &v7[a3 >> 1], (int32x4_t *)a2, a3 >> 1, a3 - (a3 >> 1), v23, a5);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        float v14 = a1;
        do
        {
          int v15 = (int32x4_t *)v14;
          float v14 = v12;
          int32x4_t v16 = *(int32x4_t *)v12;
          int v17 = (int)*v12;
          int32x4_t v18 = *v15;
          int v19 = (int)*v15;
          if (v17 < v19
            || v17 <= v19
            && (v16.i32[1] < v18.i32[1] || v16.i32[1] <= v18.i32[1] && (vmovn_s32(vcgtq_s32(v18, v16)).i32[1] & 1) != 0))
          {
            _OWORD *v14 = v18;
            if (v15 == (int32x4_t *)a1)
            {
LABEL_27:
              int v15 = (int32x4_t *)a1;
            }
            else
            {
              uint64_t v20 = v13;
              while (1)
              {
                int32x4_t v21 = *(int32x4_t *)((char *)&a1[-1] + v20);
                if (v17 >= v21.i32[0])
                {
                  if (v17 > v21.i32[0]) {
                    goto LABEL_28;
                  }
                  if (v16.i32[1] >= v21.i32[1]
                    && (v16.i32[1] > v21.i32[1] || (vmovn_s32(vcgtq_s32(v21, v16)).i32[1] & 1) == 0))
                  {
                    break;
                  }
                }
                --v15;
                *(int32x4_t *)((char *)a1 + v20) = v21;
                v20 -= 16;
                if (!v20) {
                  goto LABEL_27;
                }
              }
              int v15 = (int32x4_t *)((char *)a1 + v20);
            }
LABEL_28:
            int32x4_t *v15 = v16;
          }
          uint64_t v12 = (__n128 *)(v14 + 1);
          v13 += 16;
        }
        while (v14 + 1 != (_OWORD *)a2);
      }
    }
  }
}

int32x4_t sub_25B4FEA38(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, int32x4_t result)
{
  if (a3)
  {
    n128_u64 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_48:
      BOOL result = *(int32x4_t *)v7;
      _OWORD *n128_u64 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      int32x4_t v9 = (int32x4_t)a2[-1];
      int32x4_t v10 = *(int32x4_t *)a1;
      int v11 = (int)*a1;
      if (v9.i32[0] >= v11
        && (v9.i32[0] > v11
         || v9.i32[1] >= v10.i32[1] && (v9.i32[1] > v10.i32[1] || (vmovn_s32(vcgtq_s32(v10, v9)).i32[1] & 1) == 0)))
      {
        int32x4_t v9 = *(int32x4_t *)a1;
        uint64_t v7 = a2 - 1;
      }
      *a4 = (__n128)v9;
      n128_u64 = a4[1].n128_u64;
      goto LABEL_48;
    }
    if ((uint64_t)a3 > 8)
    {
      float v25 = &a1[a3 >> 1];
      sub_25B4FE740(a1, v25, a3 >> 1, a4, a3 >> 1);
      sub_25B4FE740(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &n128_u64[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v26 = &v7[a3 >> 1];
      while (v26 != a2)
      {
        BOOL result = *(int32x4_t *)v26;
        int v27 = (int)*v26;
        int32x4_t v28 = *(int32x4_t *)v7;
        int v29 = (int)*v7;
        if (v27 < v29
          || v27 <= v29
          && (result.i32[1] < v28.i32[1]
           || result.i32[1] <= v28.i32[1] && (vmovn_s32(vcgtq_s32(v28, result)).i32[1] & 1) != 0))
        {
          _OWORD *n128_u64 = result;
          ++v26;
        }
        else
        {
          _OWORD *n128_u64 = v28;
          ++v7;
        }
        ++n128_u64;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            uint64_t v31 = 0;
            do
            {
              BOOL result = (int32x4_t)v26[v31];
              n128_u64[v31++] = result;
            }
            while (&v26[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        uint64_t v30 = 0;
        do
        {
          BOOL result = (int32x4_t)v7[v30];
          n128_u64[v30++] = result;
        }
        while (&v7[v30] != v25);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = (int32x4_t *)&a1[1];
      BOOL result = *(int32x4_t *)a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        float v14 = a4;
        int v15 = (int32x4_t *)a4;
        do
        {
          int32x4_t v16 = *v15++;
          BOOL result = v16;
          int32x4_t v17 = *v12;
          int v18 = (int)*v12;
          BOOL v19 = v18 <= v16.i32[0];
          if (v18 < v16.i32[0]
            || v19
            && (v17.i32[1] < result.i32[1]
             || v17.i32[1] <= result.i32[1] && (vmovn_s32(vcgtq_s32(result, v17)).i32[1] & 1) != 0))
          {
            v14[1] = (__n128)result;
            uint64_t v20 = a4;
            if (v14 != a4)
            {
              uint64_t v21 = v13;
              while (1)
              {
                int32x4_t v22 = *v12;
                int v23 = (int)*v12;
                int32x4_t v24 = *(int32x4_t *)((char *)&a4[-1] + v21);
                if (v23 >= v24.i32[0])
                {
                  if (v23 > v24.i32[0])
                  {
                    uint64_t v20 = v14;
                    goto LABEL_29;
                  }
                  if (v22.i32[1] >= v24.i32[1]
                    && (v22.i32[1] > v24.i32[1] || (vmovn_s32(vcgtq_s32(v24, v22)).i32[1] & 1) == 0))
                  {
                    break;
                  }
                }
                --v14;
                *(int32x4_t *)((char *)a4 + v21) = v24;
                v21 -= 16;
                if (!v21)
                {
                  uint64_t v20 = a4;
                  goto LABEL_29;
                }
              }
              uint64_t v20 = (__n128 *)((char *)a4 + v21);
            }
LABEL_29:
            BOOL result = *v12;
            *uint64_t v20 = *(__n128 *)v12;
          }
          else
          {
            int32x4_t *v15 = v17;
          }
          ++v12;
          v13 += 16;
          float v14 = (__n128 *)v15;
        }
        while (v12 != (int32x4_t *)a2);
      }
    }
  }
  return result;
}

int32x4_t *sub_25B4FED04(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, uint64_t a4, uint64_t a5, int32x4_t *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    int v11 = result;
    uint64_t v79 = a6;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      int32x4_t v12 = *a2;
      int v13 = (int)*a2;
      int v14 = HIDWORD(a2->i64[0]);
      while (1)
      {
        int32x4_t v15 = *v11;
        int v16 = (int)*v11;
        if (v13 < v16
          || v13 <= v16 && (v14 < v15.i32[1] || v14 <= v15.i32[1] && (vmovn_s32(vcgtq_s32(v15, v12)).i32[1] & 1) != 0))
        {
          break;
        }
        ++v11;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *int v11 = v12;
          *a2 = v15;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v32 = a4;
        }
        else {
          uint64_t v32 = a4 + 1;
        }
        uint64_t v30 = v32 >> 1;
        BOOL v19 = &v11[v32 >> 1];
        if (a2 == a3)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v33 = a3 - a2;
          int v34 = v19->i32[0];
          int v35 = v19->i32[1];
          do
          {
            unint64_t v36 = v33 >> 1;
            unint64_t v37 = v18 + (v33 >> 1);
            int32x4_t v38 = a2[v37];
            if (v38.i32[0] < v34
              || v38.i32[0] <= v34
              && (v38.i32[1] < v35 || (v38.i32[1] <= v35 ? (BOOL v39 = v38.i32[2] < v19->i32[2]) : (BOOL v39 = 0), v39)))
            {
              uint64_t v18 = v37 + 1;
              unint64_t v36 = v33 + ~v36;
            }
            unint64_t v33 = v36;
          }
          while (v36);
        }
        uint64_t v31 = (16 * v18) >> 4;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v17 = v8;
        }
        else {
          uint64_t v17 = v8 + 1;
        }
        uint64_t v18 = v17 >> 1;
        BOOL v19 = a2;
        if (a2 != v11)
        {
          uint64_t v20 = &a2[v18];
          unint64_t v21 = a2 - v11;
          __int32 v22 = v20->i32[0];
          int v23 = v20->i32[1];
          __int32 v24 = v20->i32[2];
          BOOL v19 = v11;
          do
          {
            unint64_t v25 = v21 >> 1;
            unint64_t v26 = &v19[v21 >> 1];
            int32x4_t v27 = *v26;
            int v28 = (int)*v26;
            if (v22 >= v28)
            {
              if (v22 > v28 || v23 >= v27.i32[1] && (v23 <= v27.i32[1] ? (char v29 = v24 < v27.i32[2]) : (char v29 = 0), !v29))
              {
                BOOL v19 = v26 + 1;
                unint64_t v25 = v21 + ~v25;
              }
            }
            unint64_t v21 = v25;
          }
          while (v25);
        }
        uint64_t v30 = v19 - v11;
        uint64_t v31 = v18;
      }
      unint64_t v40 = &a2[v18];
      if (v19 == a2)
      {
        uint64_t v41 = &a2[v18];
      }
      else
      {
        uint64_t v41 = v19;
        if (v18)
        {
          uint64_t v42 = v19 + 1;
          if (&v19[1] == a2)
          {
            int32x4_t v78 = *v19;
            uint64_t v44 = v18;
            memmove(v19, a2, 16 * v18);
            a6 = v79;
            uint64_t v41 = &v19[v44];
            *uint64_t v41 = v78;
          }
          else if (v18 == 1)
          {
            int32x4_t v43 = v40[-1];
            uint64_t v41 = v19 + 1;
            if (&v40[-1] != v19)
            {
              int32x4_t v77 = v40[-1];
              memmove(&v19[1], v19, (char *)&v40[-1] - (char *)v19);
              int32x4_t v43 = v77;
              a6 = v79;
            }
            *BOOL v19 = v43;
          }
          else
          {
            uint64_t v45 = a2 - v19;
            uint64_t v46 = 16 * v18;
            if (v45 == (16 * v18) >> 4)
            {
              uint64_t v47 = 16 * v18 - 16;
              int v48 = a2;
              do
              {
                int32x4_t v49 = v42[-1];
                v42[-1] = *v48;
                *v48++ = v49;
                if (v42 == a2) {
                  break;
                }
                ++v42;
                uint64_t v50 = v47;
                v47 -= 16;
              }
              while (v50);
              uint64_t v41 = a2;
            }
            else
            {
              uint64_t v51 = v46 >> 4;
              uint64_t v52 = v46 >> 4;
              uint64_t v53 = a2 - v19;
              do
              {
                uint64_t v54 = v53;
                uint64_t v53 = v52;
                uint64_t v52 = v54 % v52;
              }
              while (v52);
              if (v53)
              {
                uint64_t v55 = &v19[v53];
                do
                {
                  int32x4_t v56 = v55[-1];
                  --v55;
                  int32x4_t v57 = v56;
                  uint64_t v58 = &v55[v45];
                  int32x4_t v59 = v55;
                  do
                  {
                    uint64_t v60 = v58;
                    *int32x4_t v59 = *v58;
                    unint64_t v61 = &v58[v45];
                    BOOL v62 = __OFSUB__(v45, v40 - v58);
                    uint64_t v63 = v45 - (v40 - v58);
                    char v29 = (v63 < 0) ^ v62;
                    uint64_t v58 = &v19[v63];
                    if (v29) {
                      uint64_t v58 = v61;
                    }
                    int32x4_t v59 = v60;
                  }
                  while (v58 != v55);
                  *uint64_t v60 = v57;
                }
                while (v55 != v19);
              }
              uint64_t v41 = &v19[v51];
            }
          }
        }
      }
      a4 -= v30;
      v8 -= v31;
      if (v30 + v31 >= a4 + v8)
      {
        BOOL result = (int32x4_t *)sub_25B4FED04(v41, v40, a3, a4, v8, a6, a7);
        uint64_t v8 = v31;
        a4 = v30;
        a3 = v41;
      }
      else
      {
        BOOL result = (int32x4_t *)sub_25B4FED04(v11, v19, v41, v30, v31, a6, a7);
        int v11 = v41;
        BOOL v19 = v40;
      }
      a2 = v19;
      a6 = v79;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v70 = 0;
        do
        {
          a6[v70] = v11[v70];
          ++v70;
        }
        while (&v11[v70] != a2);
        uint64_t v71 = &a6[v70];
        if (v71 != a6)
        {
          while (a2 != a3)
          {
            int32x4_t v72 = *a2;
            int v73 = (int)*a2;
            int32x4_t v74 = *a6;
            int v75 = (int)*a6;
            if (v73 < v75
              || v73 <= v75
              && (v72.i32[1] < v74.i32[1] || v72.i32[1] <= v74.i32[1]
                                          && (vmovn_s32(vcgtq_s32(v74, v72)).i32[1] & 1) != 0))
            {
              *int v11 = v72;
              ++a2;
            }
            else
            {
              *int v11 = v74;
              ++a6;
            }
            ++v11;
            if (a6 == v71) {
              return result;
            }
          }
          return (int32x4_t *)memmove(v11, a6, (char *)v71 - (char *)a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v64 = 0;
      do
      {
        a6[v64] = a2[v64];
        ++v64;
      }
      while (&a2[v64] != a3);
      uint64_t v65 = &a6[v64];
      if (v65 != a6)
      {
        unint64_t v66 = a3 - 1;
        while (a2 != v11)
        {
          unint64_t v67 = a2 - 1;
          int32x4_t v68 = a2[-1];
          int32x4_t v69 = v65[-1];
          if (v69.i32[0] >= v68.i32[0]
            && (v69.i32[0] > v68.i32[0]
             || v69.i32[1] >= v68.i32[1]
             && (v69.i32[1] > v68.i32[1] || (vmovn_s32(vcgtq_s32(v68, v69)).i32[1] & 1) == 0)))
          {
            int32x4_t v68 = v65[-1];
            unint64_t v67 = a2;
            --v65;
          }
          *v66-- = v68;
          a2 = v67;
          if (v65 == a6) {
            return result;
          }
        }
        uint64_t v76 = 0;
        do
        {
          v66[v76] = v65[v76 - 1];
          --v76;
        }
        while (&v65[v76] != a6);
      }
    }
  }
  return result;
}

void sub_25B4FF26C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v3 = *(uint64_t **)a2;
    uint64_t v4 = *(uint64_t **)(a2 + 8);
    if (*(uint64_t **)a2 != v4)
    {
      float32x4_t v6 = 0uLL;
      uint64_t v7 = *(uint64_t **)a2;
      do
      {
        uint64_t v8 = *v7++;
        float32x4_t v9 = *(float32x4_t *)(a1 + 16 * v8);
        float32x4_t v6 = vaddq_f32(v6, v9);
      }
      while (v7 != v4);
      v9.f32[0] = (float)(unint64_t)(v4 - v3);
      float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
      float32x4_t v11 = vdivq_f32(v6, v10);
      float32x4_t v12 = 0uLL;
      int v13 = *(uint64_t **)a2;
      do
      {
        uint64_t v14 = *v13++;
        float32x4_t v15 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v14), v11);
        float32x4_t v12 = vmlaq_f32(v12, v15, v15);
      }
      while (v13 != v4);
      float32x4_t v38 = v11;
      int v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      BOOL v19 = 0;
      int8x16_t v20 = (int8x16_t)vdivq_f32(v12, v10);
      float v21 = sqrtf(*(float *)v20.i32);
      v20.i32[0] = vextq_s8(v20, v20, 8uLL).u32[0];
      float v22 = v21 * 3.0;
      __asm { FMOV            V1.2S, #3.0 }
      float32x2_t v28 = vmul_f32(vsqrt_f32(*(float32x2_t *)v20.i8), _D1);
      do
      {
        uint64_t v29 = *v3;
        int8x16_t v30 = (int8x16_t)vabdq_f32(*(float32x4_t *)(a1 + 16 * *v3), v38);
        if (*(float *)v30.i32 < v22)
        {
          v30.i32[0] = vextq_s8(v30, v30, 8uLL).u32[0];
          *(int8x8_t *)v30.i8 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v30.i8, v28));
          if (v30.i8[4] & 1) != 0 && (v30.i8[0])
          {
            if ((unint64_t)v19 >= v18)
            {
              uint64_t v31 = (v19 - v16) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v18 - (void)v16) >> 2 > v32) {
                unint64_t v32 = (uint64_t)(v18 - (void)v16) >> 2;
              }
              if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
                uint64_t v29 = *v3;
                BOOL v19 = v17;
              }
              else
              {
                uint64_t v34 = 0;
              }
              int v35 = (char *)(v33 + 8 * v31);
              *(void *)int v35 = v29;
              uint64_t v17 = v35 + 8;
              while (v19 != v16)
              {
                uint64_t v36 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v35 - 1) = v36;
                v35 -= 8;
              }
              unint64_t v18 = v33 + 8 * v34;
              if (v16) {
                operator delete(v16);
              }
              int v16 = v35;
              BOOL v19 = v17;
            }
            else
            {
              *(void *)BOOL v19 = v29;
              v19 += 8;
              uint64_t v17 = v19;
            }
          }
        }
        ++v3;
      }
      while (v3 != v4);
      unint64_t v37 = *(uint64_t **)a2;
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v19;
      *(void *)(a2 + 16) = v18;
      if (v37)
      {
        operator delete(v37);
      }
    }
  }
}

void sub_25B4FF480(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25B4FF49C(uint64_t a1, float32x2_t a2)
{
  BOOL v2 = *(float32x2_t **)(a1 + 72);
  unint64_t v3 = (float32x2_t **)(a1 + 80);
  if (v2 == (float32x2_t *)(a1 + 80)) {
    return 0;
  }
  while (1)
  {
    float32_t v5 = sub_25B40DB9C(a2, v2[5], v2[6], 0.00001);
    BOOL result = v5 <= 0.2;
    if (v5 <= 0.2) {
      break;
    }
    uint64_t v7 = (float32x2_t *)v2[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = (float32x2_t **)v7;
        uint64_t v7 = (float32x2_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (float32x2_t **)v2[2];
        BOOL v9 = *v8 == v2;
        BOOL v2 = (float32x2_t *)v8;
      }
      while (!v9);
    }
    BOOL v2 = (float32x2_t *)v8;
    if (v8 == v3) {
      return 0;
    }
  }
  return result;
}

char *sub_25B4FF578(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  float32x4_t v11 = __dst;
  float32x4_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    float32x4_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_25B4002F4(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      float32x4_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      float32x4_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_25B5029F4((uint64_t)v9);
  return v4;
}

void sub_25B4FF624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_25B4FF638(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_25B40040C(v7, v11);
    int v13 = (char *)v7[1];
    float32x4_t v12 = (void **)(v7 + 1);
    BOOL v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  float32x4_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    BOOL v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_17:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *float32x4_t v12 = &v9[v17];
  return result;
}

uint64_t *sub_25B4FF734(uint64_t *result)
{
  if (result[2])
  {
    uint64_t v1 = *result;
    uint64_t v2 = result[1];
    *BOOL result = (uint64_t)(result + 1);
    *(void *)(v2 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v1 + 8)) {
      uint64_t v1 = *(void *)(v1 + 8);
    }
    unint64_t v3 = result;
    uint64_t v4 = (void *)v1;
    uint64_t v5 = v1;
    if (v1) {
      uint64_t v4 = sub_25B3FFA98(v1);
    }
    return (uint64_t *)sub_25B50294C((uint64_t)&v3);
  }
  return result;
}

uint64_t sub_25B4FF7A0(uint64_t a1, int a2)
{
  v70[0] = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 16) = 1065353216;
  *(void *)(a1 + 24) = 3;
  if (a2)
  {
    *(_DWORD *)(a1 + 32) = 1058893870;
    uint64_t v4 = operator new(8uLL);
    *uint64_t v4 = 0x3F80000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v4, (uint64_t)(v4 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    uint64_t v5 = operator new(8uLL);
    void *v5 = 0x42C800003F800000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v5, (uint64_t)(v5 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 40), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      long long v7 = *(void **)((char *)&v58 + i + 8);
      if (v7)
      {
        *(uint64_t *)((char *)&v59 + i) = (uint64_t)v7;
        operator delete(v7);
      }
    }
    operator delete(v5);
    operator delete(v4);
    *(_OWORD *)(a1 + 64) = xmmword_25B5F12E0;
    *(_DWORD *)(a1 + 80) = 1027620402;
    *(void *)(a1 + 112) = 0xBC31136ABDB71A7DLL;
    *(_DWORD *)(a1 + 152) = 1033090475;
    uint64_t v8 = operator new(8uLL);
    *uint64_t v8 = 0x4000000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v8, (uint64_t)(v8 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    BOOL v9 = operator new(8uLL);
    *BOOL v9 = 0x42C8000040000000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v9, (uint64_t)(v9 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 160), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      unint64_t v11 = *(void **)((char *)&v58 + j + 8);
      if (v11)
      {
        *(uint64_t *)((char *)&v59 + j) = (uint64_t)v11;
        operator delete(v11);
      }
    }
    operator delete(v9);
    operator delete(v8);
    *(_DWORD *)(a1 + 184) = 1036831949;
    *(void *)(a1 + 144) = 0x4270000041F00000;
    float32x4_t v12 = operator new(8uLL);
    *float32x4_t v12 = 0x3F80000000000000;
    int v13 = operator new(4uLL);
    uint64_t v52 = v13;
    *int v13 = 1050253722;
    uint64_t v53 = v13 + 1;
    uint64_t v54 = v13 + 1;
    v43[0] = 0;
    long long v42 = 0uLL;
    *(void *)&long long v42 = operator new(0x18uLL);
    *((void *)&v42 + 1) = v42;
    v43[0] = v42 + 24;
    *((void *)&v42 + 1) = sub_25B44C094((uint64_t)v43, (uint64_t)&v52, (uint64_t)&v55, (void *)v42);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v12, (uint64_t)(v12 + 1), 2uLL);
    long long v58 = v42;
    uint64_t v59 = v43[0];
    v43[0] = 0;
    long long v42 = 0uLL;
    uint64_t v14 = operator new(8uLL);
    void *v14 = 0x400000003F800000;
    unint64_t v15 = operator new(4uLL);
    int32x4_t v49 = v15;
    _DWORD *v15 = 1045220557;
    uint64_t v50 = v15 + 1;
    uint64_t v51 = v15 + 1;
    v41[0] = 0;
    long long v40 = 0uLL;
    *(void *)&long long v40 = operator new(0x18uLL);
    *((void *)&v40 + 1) = v40;
    v41[0] = v40 + 24;
    *((void *)&v40 + 1) = sub_25B44C094((uint64_t)v41, (uint64_t)&v49, (uint64_t)&v52, (void *)v40);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v14, (uint64_t)(v14 + 1), 2uLL);
    long long v63 = v40;
    uint64_t v64 = v41[0];
    v41[0] = 0;
    long long v40 = 0uLL;
    int v16 = operator new(8uLL);
    *int v16 = 0x42C8000040000000;
    size_t v17 = operator new(4uLL);
    __p = v17;
    _DWORD *v17 = 1045220557;
    uint64_t v47 = v17 + 1;
    int v48 = v17 + 1;
    v39[0] = 0;
    long long v38 = 0uLL;
    uint64_t v44 = (void **)&v38;
    char v45 = 0;
    *(void *)&long long v38 = operator new(0x18uLL);
    *((void *)&v38 + 1) = v38;
    v39[0] = v38 + 24;
    *((void *)&v38 + 1) = sub_25B44C094((uint64_t)v39, (uint64_t)&__p, (uint64_t)&v49, (void *)v38);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    sub_25B3FCA58(&v65, v16, (uint64_t)(v16 + 1), 2uLL);
    long long v68 = v38;
    uint64_t v69 = v39[0];
    v39[0] = 0;
    long long v38 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 120), (uint64_t)&v55, (uint64_t)v70);
    for (uint64_t k = 0; k != -144; k -= 48)
    {
      uint64_t v44 = (void **)((char *)&v68 + k);
      sub_25B413C78(&v44);
      BOOL v19 = *(void **)((char *)&v65 + k);
      if (v19)
      {
        *(uint64_t *)((char *)&v66 + k) = (uint64_t)v19;
        operator delete(v19);
      }
    }
    uint64_t v44 = (void **)&v38;
    sub_25B413C78(&v44);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    operator delete(v16);
    *(void *)&long long v38 = &v40;
    sub_25B413C78((void ***)&v38);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    operator delete(v14);
    *(void *)&long long v40 = &v42;
    sub_25B413C78((void ***)&v40);
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
    operator delete(v12);
    if (sub_25B493F90())
    {
      *(_DWORD *)(a1 + 32) = 1063675494;
      *(_DWORD *)(a1 + 80) = 1041026751;
      *(void *)(a1 + 112) = 0xBDCCCCCD3D1BBD0FLL;
      int v20 = 1030306436;
LABEL_42:
      *(_DWORD *)(a1 + 152) = v20;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 1063675494;
    float v21 = operator new(8uLL);
    *float v21 = 0x3F80000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v21, (uint64_t)(v21 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    float v22 = operator new(8uLL);
    *float v22 = 0x42C800003F800000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v22, (uint64_t)(v22 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 40), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      __int32 v24 = *(void **)((char *)&v58 + m + 8);
      if (v24)
      {
        *(uint64_t *)((char *)&v59 + m) = (uint64_t)v24;
        operator delete(v24);
      }
    }
    operator delete(v22);
    operator delete(v21);
    *(_OWORD *)(a1 + 64) = xmmword_25B5F12E0;
    *(_DWORD *)(a1 + 80) = 1039348752;
    *(void *)(a1 + 112) = 0xBD11F167BCA30516;
    *(_DWORD *)(a1 + 152) = 1025477729;
    unint64_t v25 = operator new(8uLL);
    *unint64_t v25 = 0x4000000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v25, (uint64_t)(v25 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    unint64_t v26 = operator new(8uLL);
    *unint64_t v26 = 0x42C8000040000000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v26, (uint64_t)(v26 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 160), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t n = 0; n != -64; n -= 32)
    {
      float32x2_t v28 = *(void **)((char *)&v58 + n + 8);
      if (v28)
      {
        *(uint64_t *)((char *)&v59 + n) = (uint64_t)v28;
        operator delete(v28);
      }
    }
    operator delete(v26);
    operator delete(v25);
    *(_DWORD *)(a1 + 184) = 1036831949;
    *(void *)(a1 + 144) = 0x4270000041F00000;
    uint64_t v29 = operator new(8uLL);
    *uint64_t v29 = 0x3F80000000000000;
    int8x16_t v30 = operator new(4uLL);
    uint64_t v52 = v30;
    *int8x16_t v30 = 1050253722;
    uint64_t v53 = v30 + 1;
    uint64_t v54 = v30 + 1;
    v43[0] = 0;
    long long v42 = 0uLL;
    *(void *)&long long v42 = operator new(0x18uLL);
    *((void *)&v42 + 1) = v42;
    v43[0] = v42 + 24;
    *((void *)&v42 + 1) = sub_25B44C094((uint64_t)v43, (uint64_t)&v52, (uint64_t)&v55, (void *)v42);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v29, (uint64_t)(v29 + 1), 2uLL);
    long long v58 = v42;
    uint64_t v59 = v43[0];
    v43[0] = 0;
    long long v42 = 0uLL;
    uint64_t v31 = operator new(8uLL);
    *uint64_t v31 = 0x400000003F800000;
    unint64_t v32 = operator new(4uLL);
    int32x4_t v49 = v32;
    *unint64_t v32 = 1045220557;
    uint64_t v50 = v32 + 1;
    uint64_t v51 = v32 + 1;
    v41[0] = 0;
    long long v40 = 0uLL;
    *(void *)&long long v40 = operator new(0x18uLL);
    *((void *)&v40 + 1) = v40;
    v41[0] = v40 + 24;
    *((void *)&v40 + 1) = sub_25B44C094((uint64_t)v41, (uint64_t)&v49, (uint64_t)&v52, (void *)v40);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v31, (uint64_t)(v31 + 1), 2uLL);
    long long v63 = v40;
    uint64_t v64 = v41[0];
    v41[0] = 0;
    long long v40 = 0uLL;
    unint64_t v33 = operator new(8uLL);
    *unint64_t v33 = 0x42C8000040000000;
    uint64_t v34 = operator new(4uLL);
    __p = v34;
    _DWORD *v34 = 1045220557;
    uint64_t v47 = v34 + 1;
    int v48 = v34 + 1;
    v39[0] = 0;
    long long v38 = 0uLL;
    uint64_t v44 = (void **)&v38;
    char v45 = 0;
    *(void *)&long long v38 = operator new(0x18uLL);
    *((void *)&v38 + 1) = v38;
    v39[0] = v38 + 24;
    *((void *)&v38 + 1) = sub_25B44C094((uint64_t)v39, (uint64_t)&__p, (uint64_t)&v49, (void *)v38);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    sub_25B3FCA58(&v65, v33, (uint64_t)(v33 + 1), 2uLL);
    long long v68 = v38;
    uint64_t v69 = v39[0];
    v39[0] = 0;
    long long v38 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 120), (uint64_t)&v55, (uint64_t)v70);
    for (iuint64_t i = 0; ii != -144; ii -= 48)
    {
      uint64_t v44 = (void **)((char *)&v68 + ii);
      sub_25B413C78(&v44);
      uint64_t v36 = *(void **)((char *)&v65 + ii);
      if (v36)
      {
        *(uint64_t *)((char *)&v66 + ii) = (uint64_t)v36;
        operator delete(v36);
      }
    }
    uint64_t v44 = (void **)&v38;
    sub_25B413C78(&v44);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    operator delete(v33);
    *(void *)&long long v38 = &v40;
    sub_25B413C78((void ***)&v38);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    operator delete(v31);
    *(void *)&long long v40 = &v42;
    sub_25B413C78((void ***)&v40);
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
    operator delete(v29);
    if (sub_25B493F90())
    {
      *(_DWORD *)(a1 + 32) = 1036831949;
      *(_DWORD *)(a1 + 80) = 1032221226;
      *(void *)(a1 + 112) = 0xBC2F3E9FBD6FD301;
      int v20 = 1008981770;
      goto LABEL_42;
    }
  }
  return sub_25B501FF8(a1, a2);
}

void sub_25B500220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  for (uint64_t i = 96; i != -48; i -= 48)
    sub_25B44C2C0(v36 + i);
  a21 = (uint64_t *)&a9;
  sub_25B413C78((void ***)&a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v35);
  a9 = &a13;
  sub_25B413C78((void ***)&a9);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  operator delete(v34);
  a13 = &a17;
  sub_25B413C78((void ***)&a13);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_25B50066C(uint64_t a1, int a2)
{
  v70[0] = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 16) = 1065353216;
  *(void *)(a1 + 24) = 3;
  if (a2)
  {
    *(_DWORD *)(a1 + 32) = 1058811162;
    uint64_t v4 = operator new(8uLL);
    *uint64_t v4 = 0x3F80000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v4, (uint64_t)(v4 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    uint64_t v5 = operator new(8uLL);
    void *v5 = 0x42C800003F800000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v5, (uint64_t)(v5 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 40), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      long long v7 = *(void **)((char *)&v58 + i + 8);
      if (v7)
      {
        *(uint64_t *)((char *)&v59 + i) = (uint64_t)v7;
        operator delete(v7);
      }
    }
    operator delete(v5);
    operator delete(v4);
    *(_OWORD *)(a1 + 64) = xmmword_25B5F12E0;
    *(_DWORD *)(a1 + 80) = 1050374069;
    *(void *)(a1 + 112) = 0xBDCCCCCD3CC4E8F0;
    *(_DWORD *)(a1 + 152) = 1036276941;
    uint64_t v8 = operator new(8uLL);
    *uint64_t v8 = 0x4000000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v8, (uint64_t)(v8 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    BOOL v9 = operator new(8uLL);
    *BOOL v9 = 0x42C8000040000000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v9, (uint64_t)(v9 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 160), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      unint64_t v11 = *(void **)((char *)&v58 + j + 8);
      if (v11)
      {
        *(uint64_t *)((char *)&v59 + j) = (uint64_t)v11;
        operator delete(v11);
      }
    }
    operator delete(v9);
    operator delete(v8);
    *(_DWORD *)(a1 + 184) = 1036831949;
    *(void *)(a1 + 144) = 0x4270000041F00000;
    float32x4_t v12 = operator new(8uLL);
    *float32x4_t v12 = 0x3F80000000000000;
    int v13 = operator new(4uLL);
    uint64_t v52 = v13;
    *int v13 = 1050253722;
    uint64_t v53 = v13 + 1;
    uint64_t v54 = v13 + 1;
    v43[0] = 0;
    long long v42 = 0uLL;
    *(void *)&long long v42 = operator new(0x18uLL);
    *((void *)&v42 + 1) = v42;
    v43[0] = v42 + 24;
    *((void *)&v42 + 1) = sub_25B44C094((uint64_t)v43, (uint64_t)&v52, (uint64_t)&v55, (void *)v42);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v12, (uint64_t)(v12 + 1), 2uLL);
    long long v58 = v42;
    uint64_t v59 = v43[0];
    v43[0] = 0;
    long long v42 = 0uLL;
    uint64_t v14 = operator new(8uLL);
    void *v14 = 0x400000003F800000;
    unint64_t v15 = operator new(4uLL);
    int32x4_t v49 = v15;
    _DWORD *v15 = 1045220557;
    uint64_t v50 = v15 + 1;
    uint64_t v51 = v15 + 1;
    v41[0] = 0;
    long long v40 = 0uLL;
    *(void *)&long long v40 = operator new(0x18uLL);
    *((void *)&v40 + 1) = v40;
    v41[0] = v40 + 24;
    *((void *)&v40 + 1) = sub_25B44C094((uint64_t)v41, (uint64_t)&v49, (uint64_t)&v52, (void *)v40);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v14, (uint64_t)(v14 + 1), 2uLL);
    long long v63 = v40;
    uint64_t v64 = v41[0];
    v41[0] = 0;
    long long v40 = 0uLL;
    int v16 = operator new(8uLL);
    *int v16 = 0x42C8000040000000;
    size_t v17 = operator new(4uLL);
    __p = v17;
    _DWORD *v17 = 1045220557;
    uint64_t v47 = v17 + 1;
    int v48 = v17 + 1;
    v39[0] = 0;
    long long v38 = 0uLL;
    uint64_t v44 = (void **)&v38;
    char v45 = 0;
    *(void *)&long long v38 = operator new(0x18uLL);
    *((void *)&v38 + 1) = v38;
    v39[0] = v38 + 24;
    *((void *)&v38 + 1) = sub_25B44C094((uint64_t)v39, (uint64_t)&__p, (uint64_t)&v49, (void *)v38);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    sub_25B3FCA58(&v65, v16, (uint64_t)(v16 + 1), 2uLL);
    long long v68 = v38;
    uint64_t v69 = v39[0];
    v39[0] = 0;
    long long v38 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 120), (uint64_t)&v55, (uint64_t)v70);
    for (uint64_t k = 0; k != -144; k -= 48)
    {
      uint64_t v44 = (void **)((char *)&v68 + k);
      sub_25B413C78(&v44);
      BOOL v19 = *(void **)((char *)&v65 + k);
      if (v19)
      {
        *(uint64_t *)((char *)&v66 + k) = (uint64_t)v19;
        operator delete(v19);
      }
    }
    uint64_t v44 = (void **)&v38;
    sub_25B413C78(&v44);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    operator delete(v16);
    *(void *)&long long v38 = &v40;
    sub_25B413C78((void ***)&v38);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    operator delete(v14);
    *(void *)&long long v40 = &v42;
    sub_25B413C78((void ***)&v40);
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
    operator delete(v12);
    if (sub_25B493F90())
    {
      *(_DWORD *)(a1 + 32) = 1057920770;
      *(_DWORD *)(a1 + 80) = 1042980888;
      *(void *)(a1 + 112) = 0xBDA30DBDBD7E5176;
      int v20 = 1040684525;
LABEL_42:
      *(_DWORD *)(a1 + 152) = v20;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 1047642390;
    float v21 = operator new(8uLL);
    *float v21 = 0x3F80000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v21, (uint64_t)(v21 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    float v22 = operator new(8uLL);
    *float v22 = 0x42C800003F800000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v22, (uint64_t)(v22 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 40), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      __int32 v24 = *(void **)((char *)&v58 + m + 8);
      if (v24)
      {
        *(uint64_t *)((char *)&v59 + m) = (uint64_t)v24;
        operator delete(v24);
      }
    }
    operator delete(v22);
    operator delete(v21);
    *(_OWORD *)(a1 + 64) = xmmword_25B5F12E0;
    *(_DWORD *)(a1 + 80) = 1049802648;
    *(void *)(a1 + 112) = 0xBD5CE8C1BCB998DDLL;
    *(_DWORD *)(a1 + 152) = 1035019953;
    unint64_t v25 = operator new(8uLL);
    *unint64_t v25 = 0x4000000000000000;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v25, (uint64_t)(v25 + 1), 2uLL);
    *(void *)&long long v58 = 1;
    unint64_t v26 = operator new(8uLL);
    *unint64_t v26 = 0x42C8000040000000;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    *((void *)&v58 + 1) = 0;
    sub_25B3FCA58((void *)&v58 + 1, v26, (uint64_t)(v26 + 1), 2uLL);
    uint64_t v61 = 2;
    sub_25B44BF28((uint64_t *)(a1 + 160), (uint64_t)&v55, (uint64_t)&v62);
    for (uint64_t n = 0; n != -64; n -= 32)
    {
      float32x2_t v28 = *(void **)((char *)&v58 + n + 8);
      if (v28)
      {
        *(uint64_t *)((char *)&v59 + n) = (uint64_t)v28;
        operator delete(v28);
      }
    }
    operator delete(v26);
    operator delete(v25);
    *(_DWORD *)(a1 + 184) = 1036831949;
    *(void *)(a1 + 144) = 0x4270000041F00000;
    uint64_t v29 = operator new(8uLL);
    *uint64_t v29 = 0x3F80000000000000;
    int8x16_t v30 = operator new(4uLL);
    uint64_t v52 = v30;
    *int8x16_t v30 = 1050253722;
    uint64_t v53 = v30 + 1;
    uint64_t v54 = v30 + 1;
    v43[0] = 0;
    long long v42 = 0uLL;
    *(void *)&long long v42 = operator new(0x18uLL);
    *((void *)&v42 + 1) = v42;
    v43[0] = v42 + 24;
    *((void *)&v42 + 1) = sub_25B44C094((uint64_t)v43, (uint64_t)&v52, (uint64_t)&v55, (void *)v42);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v29, (uint64_t)(v29 + 1), 2uLL);
    long long v58 = v42;
    uint64_t v59 = v43[0];
    v43[0] = 0;
    long long v42 = 0uLL;
    uint64_t v31 = operator new(8uLL);
    *uint64_t v31 = 0x400000003F800000;
    unint64_t v32 = operator new(4uLL);
    int32x4_t v49 = v32;
    *unint64_t v32 = 1045220557;
    uint64_t v50 = v32 + 1;
    uint64_t v51 = v32 + 1;
    v41[0] = 0;
    long long v40 = 0uLL;
    *(void *)&long long v40 = operator new(0x18uLL);
    *((void *)&v40 + 1) = v40;
    v41[0] = v40 + 24;
    *((void *)&v40 + 1) = sub_25B44C094((uint64_t)v41, (uint64_t)&v49, (uint64_t)&v52, (void *)v40);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v31, (uint64_t)(v31 + 1), 2uLL);
    long long v63 = v40;
    uint64_t v64 = v41[0];
    v41[0] = 0;
    long long v40 = 0uLL;
    unint64_t v33 = operator new(8uLL);
    *unint64_t v33 = 0x42C8000040000000;
    uint64_t v34 = operator new(4uLL);
    __p = v34;
    _DWORD *v34 = 1045220557;
    uint64_t v47 = v34 + 1;
    int v48 = v34 + 1;
    v39[0] = 0;
    long long v38 = 0uLL;
    uint64_t v44 = (void **)&v38;
    char v45 = 0;
    *(void *)&long long v38 = operator new(0x18uLL);
    *((void *)&v38 + 1) = v38;
    v39[0] = v38 + 24;
    *((void *)&v38 + 1) = sub_25B44C094((uint64_t)v39, (uint64_t)&__p, (uint64_t)&v49, (void *)v38);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    sub_25B3FCA58(&v65, v33, (uint64_t)(v33 + 1), 2uLL);
    long long v68 = v38;
    uint64_t v69 = v39[0];
    v39[0] = 0;
    long long v38 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 120), (uint64_t)&v55, (uint64_t)v70);
    for (iuint64_t i = 0; ii != -144; ii -= 48)
    {
      uint64_t v44 = (void **)((char *)&v68 + ii);
      sub_25B413C78(&v44);
      uint64_t v36 = *(void **)((char *)&v65 + ii);
      if (v36)
      {
        *(uint64_t *)((char *)&v66 + ii) = (uint64_t)v36;
        operator delete(v36);
      }
    }
    uint64_t v44 = (void **)&v38;
    sub_25B413C78(&v44);
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    operator delete(v33);
    *(void *)&long long v38 = &v40;
    sub_25B413C78((void ***)&v38);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    operator delete(v31);
    *(void *)&long long v40 = &v42;
    sub_25B413C78((void ***)&v40);
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
    operator delete(v29);
    if (sub_25B493F90())
    {
      *(_DWORD *)(a1 + 32) = 1056314104;
      *(_DWORD *)(a1 + 80) = 1050998419;
      *(void *)(a1 + 112) = 0x3C94F25B3DCCCCCDLL;
      int v20 = 1026311452;
      goto LABEL_42;
    }
  }
  return sub_25B501620(a1, a2);
}

void sub_25B5010EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  for (uint64_t i = 96; i != -48; i -= 48)
    sub_25B44C2C0(v36 + i);
  a21 = (uint64_t *)&a9;
  sub_25B413C78((void ***)&a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v35);
  a9 = &a13;
  sub_25B413C78((void ***)&a9);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  operator delete(v34);
  a13 = &a17;
  sub_25B413C78((void ***)&a13);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_25B501538(void *a1)
{
  if (a1)
  {
    sub_25B501538(*a1);
    sub_25B501538(a1[1]);
    sub_25B5015C8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_25B50158C(uint64_t a1)
{
  sub_25B501538(*(void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_25B5015C8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_25B501620(uint64_t a1, int a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0x4000000000000000;
    uint64_t v4 = operator new(8uLL);
    *uint64_t v4 = 0x3F0000003ECCCCCDLL;
    uint64_t v50 = v4 + 1;
    uint64_t v51 = v4 + 1;
    int32x4_t v49 = v4;
    uint64_t v5 = operator new(8uLL);
    uint64_t v52 = v5;
    void *v5 = 0x3ECCCCCD3F59999ALL;
    uint64_t v53 = v5 + 1;
    uint64_t v54 = v5 + 1;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    unint64_t v37 = (void **)&v33;
    LOBYTE(v38) = 0;
    *(void *)&long long v33 = operator new(0x30uLL);
    *((void *)&v33 + 1) = v33;
    uint64_t v34 = v33 + 48;
    *((void *)&v33 + 1) = sub_25B44C094((uint64_t)&v34, (uint64_t)&v49, (uint64_t)&v55, (void *)v33);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v3, (uint64_t)(v3 + 1), 2uLL);
    long long v58 = v33;
    uint64_t v59 = v34;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    float32x4_t v6 = operator new(8uLL);
    *float32x4_t v6 = 0x42C8000040000000;
    long long v7 = (void **)operator new(8uLL);
    unint64_t v37 = v7;
    *long long v7 = (void *)0x3F00000000000000;
    long long v38 = v7 + 1;
    BOOL v39 = v7 + 1;
    long long v40 = 0;
    uint64_t v41 = 0;
    long long v42 = 0;
    uint64_t v8 = operator new(8uLL);
    long long v40 = v8;
    *uint64_t v8 = 0x3ECCCCCD3E4CCCCDLL;
    uint64_t v41 = v8 + 1;
    long long v42 = v8 + 1;
    int32x4_t v43 = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    BOOL v9 = operator new(8uLL);
    int32x4_t v43 = v9;
    *BOOL v9 = 0x3E99999A3F000000;
    uint64_t v44 = v9 + 1;
    char v45 = v9 + 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = 0;
    uint64_t v10 = operator new(8uLL);
    uint64_t v46 = v10;
    void *v10 = 0x3E4CCCCD3F733333;
    uint64_t v47 = v10 + 1;
    int v48 = v10 + 1;
    v32[0] = 0;
    long long v31 = 0uLL;
    int v35 = (void **)&v31;
    char v36 = 0;
    *(void *)&long long v31 = operator new(0x60uLL);
    *((void *)&v31 + 1) = v31;
    v32[0] = v31 + 96;
    *((void *)&v31 + 1) = sub_25B44C094((uint64_t)v32, (uint64_t)&v37, (uint64_t)&v49, (void *)v31);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v6, (uint64_t)(v6 + 1), 2uLL);
    long long v63 = v31;
    uint64_t v64 = v32[0];
    v32[0] = 0;
    long long v31 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 88), (uint64_t)&v55, (uint64_t)&v65);
    for (uint64_t i = 0; i != -96; i -= 48)
    {
      int v35 = (void **)((char *)&v63 + i);
      sub_25B413C78(&v35);
      float32x4_t v12 = *(void **)((char *)&v60 + i);
      if (v12)
      {
        *(uint64_t *)((char *)&v61 + i) = (uint64_t)v12;
        operator delete(v12);
      }
    }
    int v35 = (void **)&v31;
    sub_25B413C78(&v35);
    for (uint64_t j = 0; j != -12; j -= 3)
    {
      uint64_t v14 = (&v46)[j];
      if (v14)
      {
        (&v47)[j] = v14;
        operator delete(v14);
      }
    }
    operator delete(v6);
    unint64_t v37 = (void **)&v33;
    sub_25B413C78(&v37);
    for (uint64_t k = 0; k != -6; k -= 3)
    {
      int v16 = (&v52)[k];
      if (v16)
      {
        (&v53)[k] = v16;
        operator delete(v16);
      }
    }
  }
  else
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0x4000000000000000;
    size_t v17 = operator new(8uLL);
    void *v17 = 0x3F0000003ECCCCCDLL;
    uint64_t v50 = v17 + 1;
    uint64_t v51 = v17 + 1;
    int32x4_t v49 = v17;
    unint64_t v18 = operator new(8uLL);
    uint64_t v52 = v18;
    void *v18 = 0x3ECCCCCD3F59999ALL;
    uint64_t v53 = v18 + 1;
    uint64_t v54 = v18 + 1;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    unint64_t v37 = (void **)&v33;
    LOBYTE(v38) = 0;
    *(void *)&long long v33 = operator new(0x30uLL);
    *((void *)&v33 + 1) = v33;
    uint64_t v34 = v33 + 48;
    *((void *)&v33 + 1) = sub_25B44C094((uint64_t)&v34, (uint64_t)&v49, (uint64_t)&v55, (void *)v33);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v3, (uint64_t)(v3 + 1), 2uLL);
    long long v58 = v33;
    uint64_t v59 = v34;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    BOOL v19 = operator new(8uLL);
    *BOOL v19 = 0x42C8000040000000;
    int v20 = (void **)operator new(8uLL);
    unint64_t v37 = v20;
    *int v20 = (void *)0x3F00000000000000;
    long long v38 = v20 + 1;
    BOOL v39 = v20 + 1;
    long long v40 = 0;
    uint64_t v41 = 0;
    long long v42 = 0;
    float v21 = operator new(8uLL);
    long long v40 = v21;
    *float v21 = 0x3ECCCCCD3E4CCCCDLL;
    uint64_t v41 = v21 + 1;
    long long v42 = v21 + 1;
    int32x4_t v43 = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    float v22 = operator new(8uLL);
    int32x4_t v43 = v22;
    *float v22 = 0x3E99999A3F000000;
    uint64_t v44 = v22 + 1;
    char v45 = v22 + 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = 0;
    int v23 = operator new(8uLL);
    uint64_t v46 = v23;
    *int v23 = 0x3E4CCCCD3F733333;
    uint64_t v47 = v23 + 1;
    int v48 = v23 + 1;
    v32[0] = 0;
    long long v31 = 0uLL;
    int v35 = (void **)&v31;
    char v36 = 0;
    *(void *)&long long v31 = operator new(0x60uLL);
    *((void *)&v31 + 1) = v31;
    v32[0] = v31 + 96;
    *((void *)&v31 + 1) = sub_25B44C094((uint64_t)v32, (uint64_t)&v37, (uint64_t)&v49, (void *)v31);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v19, (uint64_t)(v19 + 1), 2uLL);
    long long v63 = v31;
    uint64_t v64 = v32[0];
    v32[0] = 0;
    long long v31 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 88), (uint64_t)&v55, (uint64_t)&v65);
    for (uint64_t m = 0; m != -96; m -= 48)
    {
      int v35 = (void **)((char *)&v63 + m);
      sub_25B413C78(&v35);
      unint64_t v25 = *(void **)((char *)&v60 + m);
      if (v25)
      {
        *(uint64_t *)((char *)&v61 + m) = (uint64_t)v25;
        operator delete(v25);
      }
    }
    int v35 = (void **)&v31;
    sub_25B413C78(&v35);
    for (uint64_t n = 0; n != -12; n -= 3)
    {
      int32x4_t v27 = (&v46)[n];
      if (v27)
      {
        (&v47)[n] = v27;
        operator delete(v27);
      }
    }
    operator delete(v19);
    unint64_t v37 = (void **)&v33;
    sub_25B413C78(&v37);
    for (iuint64_t i = 0; ii != -6; ii -= 3)
    {
      uint64_t v29 = (&v52)[ii];
      if (v29)
      {
        (&v53)[ii] = v29;
        operator delete(v29);
      }
    }
  }
  operator delete(v3);
  return sub_25B501F7C(a1);
}

void sub_25B501C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    sub_25B44C2C0(v32 + i);
  a16 = (void **)&a9;
  sub_25B413C78(&a16);
  uint64_t v35 = 0;
  while (1)
  {
    char v36 = (&a18)[v35 + 9];
    if (v36)
    {
      (&a18)[v35 + 10] = v36;
      operator delete(v36);
    }
    v35 -= 3;
    if (v35 == -12)
    {
      operator delete(v31);
      a18 = (void **)&a13;
      sub_25B413C78(&a18);
      uint64_t v37 = 0;
      while (1)
      {
        long long v38 = *(void **)(&a30 + v37 + 24);
        if (v38)
        {
          *(void *)(&a30 + v37 + 32) = v38;
          operator delete(v38);
        }
        v37 -= 24;
        if (v37 == -48)
        {
          operator delete(v30);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t sub_25B501F7C(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 88);
  if (v1 != (void *)(result + 96))
  {
    do
    {
      uint64_t v2 = (float **)v1[7];
      unint64_t v3 = (float **)v1[8];
      while (v2 != v3)
      {
        uint64_t v4 = *v2;
        v2 += 3;
        float v5 = v4[1];
        *uint64_t v4 = *(float *)(result + 112) + *v4;
        v4[1] = *(float *)(result + 116) + v5;
      }
      float32x4_t v6 = (void *)v1[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          float32x4_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v1[2];
          BOOL v8 = *v7 == (void)v1;
          uint64_t v1 = v7;
        }
        while (!v8);
      }
      uint64_t v1 = v7;
    }
    while (v7 != (void *)(result + 96));
  }
  return result;
}

uint64_t sub_25B501FF8(uint64_t a1, int a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0x3F80000000000000;
    uint64_t v4 = operator new(8uLL);
    *uint64_t v4 = 0x3F0000003F000000;
    uint64_t v50 = v4 + 1;
    uint64_t v51 = v4 + 1;
    int32x4_t v49 = v4;
    float v5 = operator new(8uLL);
    uint64_t v52 = v5;
    void *v5 = 0x3ECCCCCD3F733333;
    uint64_t v53 = v5 + 1;
    uint64_t v54 = v5 + 1;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    uint64_t v37 = (void **)&v33;
    LOBYTE(v38) = 0;
    *(void *)&long long v33 = operator new(0x30uLL);
    *((void *)&v33 + 1) = v33;
    uint64_t v34 = v33 + 48;
    *((void *)&v33 + 1) = sub_25B44C094((uint64_t)&v34, (uint64_t)&v49, (uint64_t)&v55, (void *)v33);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v3, (uint64_t)(v3 + 1), 2uLL);
    long long v58 = v33;
    uint64_t v59 = v34;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    float32x4_t v6 = operator new(8uLL);
    *float32x4_t v6 = 0x42C800003F800000;
    long long v7 = (void **)operator new(8uLL);
    uint64_t v37 = v7;
    *long long v7 = (void *)0x3F00000000000000;
    long long v38 = v7 + 1;
    BOOL v39 = v7 + 1;
    long long v40 = 0;
    uint64_t v41 = 0;
    long long v42 = 0;
    BOOL v8 = operator new(8uLL);
    long long v40 = v8;
    *BOOL v8 = 0x3ECCCCCD3E4CCCCDLL;
    uint64_t v41 = v8 + 1;
    long long v42 = v8 + 1;
    int32x4_t v43 = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    BOOL v9 = operator new(8uLL);
    int32x4_t v43 = v9;
    *BOOL v9 = 0x3E99999A3F000000;
    uint64_t v44 = v9 + 1;
    char v45 = v9 + 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = 0;
    uint64_t v10 = operator new(8uLL);
    uint64_t v46 = v10;
    void *v10 = 0x3E4CCCCD3F733333;
    uint64_t v47 = v10 + 1;
    int v48 = v10 + 1;
    v32[0] = 0;
    long long v31 = 0uLL;
    uint64_t v35 = (void **)&v31;
    char v36 = 0;
    *(void *)&long long v31 = operator new(0x60uLL);
    *((void *)&v31 + 1) = v31;
    v32[0] = v31 + 96;
    *((void *)&v31 + 1) = sub_25B44C094((uint64_t)v32, (uint64_t)&v37, (uint64_t)&v49, (void *)v31);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v6, (uint64_t)(v6 + 1), 2uLL);
    long long v63 = v31;
    uint64_t v64 = v32[0];
    v32[0] = 0;
    long long v31 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 88), (uint64_t)&v55, (uint64_t)&v65);
    for (uint64_t i = 0; i != -96; i -= 48)
    {
      uint64_t v35 = (void **)((char *)&v63 + i);
      sub_25B413C78(&v35);
      float32x4_t v12 = *(void **)((char *)&v60 + i);
      if (v12)
      {
        *(uint64_t *)((char *)&v61 + i) = (uint64_t)v12;
        operator delete(v12);
      }
    }
    uint64_t v35 = (void **)&v31;
    sub_25B413C78(&v35);
    for (uint64_t j = 0; j != -12; j -= 3)
    {
      uint64_t v14 = (&v46)[j];
      if (v14)
      {
        (&v47)[j] = v14;
        operator delete(v14);
      }
    }
    operator delete(v6);
    uint64_t v37 = (void **)&v33;
    sub_25B413C78(&v37);
    for (uint64_t k = 0; k != -6; k -= 3)
    {
      int v16 = (&v52)[k];
      if (v16)
      {
        (&v53)[k] = v16;
        operator delete(v16);
      }
    }
  }
  else
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0x3F80000000000000;
    size_t v17 = operator new(8uLL);
    void *v17 = 0x3F0000003F000000;
    uint64_t v50 = v17 + 1;
    uint64_t v51 = v17 + 1;
    int32x4_t v49 = v17;
    unint64_t v18 = operator new(8uLL);
    uint64_t v52 = v18;
    void *v18 = 0x3ECCCCCD3F733333;
    uint64_t v53 = v18 + 1;
    uint64_t v54 = v18 + 1;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    uint64_t v37 = (void **)&v33;
    LOBYTE(v38) = 0;
    *(void *)&long long v33 = operator new(0x30uLL);
    *((void *)&v33 + 1) = v33;
    uint64_t v34 = v33 + 48;
    *((void *)&v33 + 1) = sub_25B44C094((uint64_t)&v34, (uint64_t)&v49, (uint64_t)&v55, (void *)v33);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    sub_25B3FCA58(&v55, v3, (uint64_t)(v3 + 1), 2uLL);
    long long v58 = v33;
    uint64_t v59 = v34;
    uint64_t v34 = 0;
    long long v33 = 0uLL;
    BOOL v19 = operator new(8uLL);
    *BOOL v19 = 0x42C800003F800000;
    int v20 = (void **)operator new(8uLL);
    uint64_t v37 = v20;
    *int v20 = (void *)0x3F00000000000000;
    long long v38 = v20 + 1;
    BOOL v39 = v20 + 1;
    long long v40 = 0;
    uint64_t v41 = 0;
    long long v42 = 0;
    float v21 = operator new(8uLL);
    long long v40 = v21;
    *float v21 = 0x3ECCCCCD3E4CCCCDLL;
    uint64_t v41 = v21 + 1;
    long long v42 = v21 + 1;
    int32x4_t v43 = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    float v22 = operator new(8uLL);
    int32x4_t v43 = v22;
    *float v22 = 0x3E99999A3F000000;
    uint64_t v44 = v22 + 1;
    char v45 = v22 + 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = 0;
    int v23 = operator new(8uLL);
    uint64_t v46 = v23;
    *int v23 = 0x3E4CCCCD3F733333;
    uint64_t v47 = v23 + 1;
    int v48 = v23 + 1;
    v32[0] = 0;
    long long v31 = 0uLL;
    uint64_t v35 = (void **)&v31;
    char v36 = 0;
    *(void *)&long long v31 = operator new(0x60uLL);
    *((void *)&v31 + 1) = v31;
    v32[0] = v31 + 96;
    *((void *)&v31 + 1) = sub_25B44C094((uint64_t)v32, (uint64_t)&v37, (uint64_t)&v49, (void *)v31);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_25B3FCA58(&v60, v19, (uint64_t)(v19 + 1), 2uLL);
    long long v63 = v31;
    uint64_t v64 = v32[0];
    v32[0] = 0;
    long long v31 = 0uLL;
    sub_25B44C148((uint64_t *)(a1 + 88), (uint64_t)&v55, (uint64_t)&v65);
    for (uint64_t m = 0; m != -96; m -= 48)
    {
      uint64_t v35 = (void **)((char *)&v63 + m);
      sub_25B413C78(&v35);
      unint64_t v25 = *(void **)((char *)&v60 + m);
      if (v25)
      {
        *(uint64_t *)((char *)&v61 + m) = (uint64_t)v25;
        operator delete(v25);
      }
    }
    uint64_t v35 = (void **)&v31;
    sub_25B413C78(&v35);
    for (uint64_t n = 0; n != -12; n -= 3)
    {
      int32x4_t v27 = (&v46)[n];
      if (v27)
      {
        (&v47)[n] = v27;
        operator delete(v27);
      }
    }
    operator delete(v19);
    uint64_t v37 = (void **)&v33;
    sub_25B413C78(&v37);
    for (iuint64_t i = 0; ii != -6; ii -= 3)
    {
      uint64_t v29 = (&v52)[ii];
      if (v29)
      {
        (&v53)[ii] = v29;
        operator delete(v29);
      }
    }
  }
  operator delete(v3);
  return sub_25B501F7C(a1);
}

void sub_25B502628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  for (uint64_t i = 48; i != -48; i -= 48)
    sub_25B44C2C0(v32 + i);
  a16 = (void **)&a9;
  sub_25B413C78(&a16);
  uint64_t v35 = 0;
  while (1)
  {
    char v36 = (&a18)[v35 + 9];
    if (v36)
    {
      (&a18)[v35 + 10] = v36;
      operator delete(v36);
    }
    v35 -= 3;
    if (v35 == -12)
    {
      operator delete(v31);
      a18 = (void **)&a13;
      sub_25B413C78(&a18);
      uint64_t v37 = 0;
      while (1)
      {
        long long v38 = *(void **)(&a30 + v37 + 24);
        if (v38)
        {
          *(void *)(&a30 + v37 + 32) = v38;
          operator delete(v38);
        }
        v37 -= 24;
        if (v37 == -48)
        {
          operator delete(v30);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t sub_25B50294C(uint64_t a1)
{
  sub_25B501538(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_25B501538(v2);
  }
  return a1;
}

void sub_25B50299C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B5015C8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B5029F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

id sub_25B502A54(uint64_t *a1, const char *a2, float a3, double a4)
{
  char v5 = (char)a2;
  long long v7 = objc_msgSend_arrayWithCapacity_(MEMORY[0x263EFF980], a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 != v10)
  {
    *(float *)v8.i32 = a3 * 6.0;
    int32x4_t v11 = vdupq_lane_s32(v8, 0);
    *(double *)v12.i64 = a4;
    *(double *)&v12.i64[1] = a4;
    float32x4_t v29 = (float32x4_t)v11;
    float32x4_t v31 = v12;
    __asm { FMOV            V0.4S, #6.0 }
    float32x4_t v28 = _Q0;
    do
    {
      uint64_t v37 = *(void *)v9;
      uint64_t v36 = *(void *)(v9 + 8);
      int v18 = *(_DWORD *)(v9 + 16);
      BOOL v19 = objc_alloc_init(RS3DSurface);
      uint64_t v21 = (uint64_t)v19;
      v22.i64[0] = v37;
      v22.i64[1] = v36;
      int64x2_t v23 = (int64x2_t)vsubq_f32(vdivq_f32(vmulq_f32(v22, v28), v29), v31);
      int64x2_t v24 = vzip2q_s64(v23, (int64x2_t)0);
      v23.i32[2] = 0;
      int64x2_t v25 = v23;
      v25.i32[3] = v35;
      int64x2_t v26 = v24;
      v26.i32[3] = v34;
      v24.i32[3] = v33;
      v23.i32[3] = v32;
      src[0] = v25;
      src[1] = v26;
      src[2] = v24;
      src[3] = v23;
      if (v19)
      {
        objc_copyStruct(&v19[1], src, 64, 1, 0);
        *(_DWORD *)(v21 + 108) = v18;
        *(unsigned char *)(v21 + 104) = v5;
      }
      objc_msgSend_addObject_(v7, v20, v21, *(_OWORD *)&v28, *(_OWORD *)&v29);

      v9 += 24;
    }
    while (v9 != v10);
  }

  return v7;
}

void sub_25B502BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B502C00(uint64_t a1, void *a2, float a3)
{
  id v31 = a2;
  objc_msgSend_quad(v31, v5, v6);
  float32x4_t v30 = v7;
  objc_msgSend_quad(v31, v8, v9);
  float32x4_t v29 = v10;
  objc_msgSend_quad(v31, v11, v12);
  uint64_t v13 = 0;
  float32x4_t v14 = vsubq_f32(v30, v29);
  int32x4_t v15 = (int32x4_t)vmulq_f32(v14, v14);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  float32x2_t v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  float32x2_t v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
  *(float32x2_t *)v15.i8 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17)));
  int32x4_t v19 = (int32x4_t)vmulq_n_f32(v14, *(float *)v15.i32);
  *(float *)v15.i32 = -*(float *)&v19.i32[1];
  float32x4_t v20 = (float32x4_t)vzip1q_s32(v15, v19);
  v20.i32[2] = v19.i32[2];
  float v22 = v21;
  float32x4_t v23 = vmlsq_f32(v29, v18, v20);
  float32x4_t v24 = vmlaq_f32(v29, v18, v20);
  float32x4_t v25 = vmlaq_f32(v30, v18, v20);
  float32x4_t v26 = vmlsq_f32(v30, v18, v20);
  int32x4_t v27 = (float *)(a1 + 8);
  do
  {
    if (v13 == 4) {
      float v22 = a3;
    }
    float32x4_t v28 = v26;
    switch(v13)
    {
      case 1:
        float32x4_t v28 = v25;
        break;
      case 2:
        float32x4_t v28 = v24;
        break;
      case 3:
        float32x4_t v28 = v23;
        break;
      default:
        break;
    }
    *(float32x4_t *)(v27 - 2) = v28;
    float *v27 = v22;
    v27 += 4;
    ++v13;
  }
  while (v13 != 8);
}

void sub_25B502D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_25B502D74(float32x4_t *a1, void *a2, float32x4_t **a3, char **a4, char **a5, char **a6)
{
  id v11 = a2;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  float32x4_t v102 = *a1;
  float32x4_t v104 = a1[3];
  float32x4_t v106 = a1[4];
  float32x4_t v108 = a1[1];
  float32x4_t v99 = a1[6];
  id v101 = v11;
  uint64_t v14 = objc_msgSend_count(v11, v12, v13);
  uint64_t v17 = objc_msgSend_points(v101, v15, v16);
  uint64_t v100 = objc_msgSend_semanticLabels(v101, v18, v19);
  uint64_t v22 = objc_msgSend_semanticVotes(v101, v20, v21);
  uint64_t v25 = objc_msgSend_colors(v101, v23, v24);
  float32x4_t v26 = v101;
  if (v14)
  {
    uint64_t v27 = 0;
    float32x4_t v28 = vsubq_f32(v102, v104);
    float32x4_t v29 = vmulq_f32(v28, v28);
    v29.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
    float v30 = sqrtf(v29.f32[0]);
    float32x2_t v31 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31)));
    v29.i32[0] = vmul_f32(v32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v32, v32))).u32[0];
    float32x4_t v33 = vsubq_f32(v102, v108);
    float32x4_t v34 = vmulq_f32(v33, v33);
    v34.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).u32[0];
    float v35 = sqrtf(v34.f32[0]);
    float32x4_t v109 = vmulq_n_f32(v28, v29.f32[0]);
    *(float32x2_t *)v28.f32 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    *(float32x2_t *)v28.f32 = vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32)));
    v28.i32[0] = vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32))).u32[0];
    float32x4_t v36 = vsubq_f32(v102, v106);
    float32x4_t v37 = vmulq_f32(v36, v36);
    float32x4_t v107 = vmulq_n_f32(v33, v28.f32[0]);
    v28.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
    *(float32x2_t *)v37.f32 = vrsqrte_f32((float32x2_t)v28.u32[0]);
    *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)));
    float32x4_t v38 = vmulq_n_f32(v36, vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32))).f32[0]);
    float v39 = v30 * 0.5;
    float v40 = v35 * 0.5;
    float v41 = sqrtf(v28.f32[0]) * 0.5;
    v36.i64[0] = 0x3F0000003F000000;
    v36.i64[1] = 0x3F0000003F000000;
    float32x4_t v103 = vmulq_f32(vaddq_f32(v102, v99), v36);
    float32x4_t v105 = v38;
    do
    {
      float32x4_t v42 = *(float32x4_t *)(v17 + 16 * v27);
      float32x4_t v43 = vsubq_f32(v42, v103);
      float32x4_t v44 = vmulq_f32(v109, v43);
      float32x4_t v45 = vmulq_f32(v107, v43);
      float32x4_t v46 = vmulq_f32(v105, v43);
      float v47 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
      float v48 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]) <= v39&& v47 <= v40&& v48 <= v41)
      {
        uint64_t v52 = a3[1];
        unint64_t v51 = (unint64_t)a3[2];
        if ((unint64_t)v52 >= v51)
        {
          uint64_t v54 = v52 - *a3;
          if ((unint64_t)(v54 + 1) >> 60) {
            goto LABEL_79;
          }
          uint64_t v55 = v51 - (void)*a3;
          uint64_t v56 = v55 >> 3;
          if (v55 >> 3 <= (unint64_t)(v54 + 1)) {
            uint64_t v56 = v54 + 1;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57)
          {
            unint64_t v57 = (unint64_t)sub_25B3FFAEC(v57);
            float32x4_t v42 = *(float32x4_t *)(v17 + 16 * v27);
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v59 = (float32x4_t *)(v57 + 16 * v54);
          *uint64_t v59 = v42;
          uint64_t v53 = v59 + 1;
          uint64_t v61 = *a3;
          uint64_t v60 = (char *)a3[1];
          if (v60 != (char *)*a3)
          {
            do
            {
              float32x4_t v62 = *((float32x4_t *)v60 - 1);
              v60 -= 16;
              v59[-1] = v62;
              --v59;
            }
            while (v60 != (char *)v61);
            uint64_t v60 = (char *)*a3;
          }
          *a3 = v59;
          a3[1] = v53;
          a3[2] = (float32x4_t *)(v57 + 16 * v58);
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          float32x4_t *v52 = v42;
          uint64_t v53 = v52 + 1;
        }
        a3[1] = v53;
        uint64_t v64 = a4[1];
        unint64_t v63 = (unint64_t)a4[2];
        if ((unint64_t)v64 >= v63)
        {
          uint64_t v66 = (v64 - *a4) >> 2;
          if ((unint64_t)(v66 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v67 = v63 - (void)*a4;
          uint64_t v68 = v67 >> 1;
          if (v67 >> 1 <= (unint64_t)(v66 + 1)) {
            uint64_t v68 = v66 + 1;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            unint64_t v69 = (unint64_t)sub_25B3FBC64(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          uint64_t v71 = (char *)(v69 + 4 * v66);
          *(_DWORD *)uint64_t v71 = *(_DWORD *)(v100 + 4 * v27);
          uint64_t v65 = v71 + 4;
          int v73 = *a4;
          int32x4_t v72 = a4[1];
          if (v72 != *a4)
          {
            do
            {
              int v74 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v71 - 1) = v74;
              v71 -= 4;
            }
            while (v72 != v73);
            int32x4_t v72 = *a4;
          }
          *a4 = v71;
          a4[1] = v65;
          a4[2] = (char *)(v69 + 4 * v70);
          if (v72) {
            operator delete(v72);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v64 = *(_DWORD *)(v100 + 4 * v27);
          uint64_t v65 = v64 + 4;
        }
        a4[1] = v65;
        uint64_t v76 = a5[1];
        unint64_t v75 = (unint64_t)a5[2];
        if ((unint64_t)v76 >= v75)
        {
          uint64_t v78 = (v76 - *a5) >> 3;
          if ((unint64_t)(v78 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v79 = v75 - (void)*a5;
          uint64_t v80 = v79 >> 2;
          if (v79 >> 2 <= (unint64_t)(v78 + 1)) {
            uint64_t v80 = v78 + 1;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81) {
            unint64_t v81 = (unint64_t)sub_25B3FCAD4(v81);
          }
          else {
            uint64_t v82 = 0;
          }
          uint64_t v83 = (char *)(v81 + 8 * v78);
          *(void *)uint64_t v83 = *(void *)(v22 + 8 * v27);
          int32x4_t v77 = v83 + 8;
          unint64_t v85 = *a5;
          BOOL v84 = a5[1];
          if (v84 != *a5)
          {
            do
            {
              uint64_t v86 = *((void *)v84 - 1);
              v84 -= 8;
              *((void *)v83 - 1) = v86;
              v83 -= 8;
            }
            while (v84 != v85);
            BOOL v84 = *a5;
          }
          *a5 = v83;
          a5[1] = v77;
          a5[2] = (char *)(v81 + 8 * v82);
          if (v84) {
            operator delete(v84);
          }
        }
        else
        {
          *(void *)uint64_t v76 = *(void *)(v22 + 8 * v27);
          int32x4_t v77 = v76 + 8;
        }
        a5[1] = v77;
        uint64_t v88 = a6[1];
        unint64_t v87 = (unint64_t)a6[2];
        if ((unint64_t)v88 >= v87)
        {
          uint64_t v90 = (v88 - *a6) >> 4;
          if ((unint64_t)(v90 + 1) >> 60) {
LABEL_79:
          }
            sub_25B3FBC4C();
          uint64_t v91 = v87 - (void)*a6;
          uint64_t v92 = v91 >> 3;
          if (v91 >> 3 <= (unint64_t)(v90 + 1)) {
            uint64_t v92 = v90 + 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v92;
          }
          if (v93) {
            unint64_t v93 = (unint64_t)sub_25B3FFAEC(v93);
          }
          else {
            uint64_t v94 = 0;
          }
          long long v95 = (char *)(v93 + 16 * v90);
          *(_OWORD *)long long v95 = *(_OWORD *)(v25 + 16 * v27);
          uint64_t v89 = v95 + 16;
          long long v97 = *a6;
          uint64_t v96 = a6[1];
          if (v96 != *a6)
          {
            do
            {
              long long v98 = *((_OWORD *)v96 - 1);
              v96 -= 16;
              *((_OWORD *)v95 - 1) = v98;
              v95 -= 16;
            }
            while (v96 != v97);
            uint64_t v96 = *a6;
          }
          *a6 = v95;
          a6[1] = v89;
          a6[2] = (char *)(v93 + 16 * v94);
          if (v96) {
            operator delete(v96);
          }
        }
        else
        {
          *(_OWORD *)uint64_t v88 = *(_OWORD *)(v25 + 16 * v27);
          uint64_t v89 = v88 + 16;
        }
        a6[1] = v89;
        float32x4_t v26 = v101;
      }
      ++v27;
    }
    while (v27 != v14);
  }
}

void sub_25B5032BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

__int32 *sub_25B5032E8(__int32 *result, uint16x4_t *a2, uint64_t a3, double a4, double a5, uint8x8_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint16x4_t v6 = *a2;
  int8x16_t v7 = (int8x16_t)vmovl_u16(*a2);
  v7.i64[0] = vaddw_u16((uint32x4_t)vextq_s8(v7, v7, 8uLL), *a2).u64[0];
  __int16 v21 = v7.i16[2];
  __int16 v20 = v7.i16[0];
  if (v7.i16[0] + v7.i16[2])
  {
    float v8 = 1.0 / (float)(unsigned __int16)(v20 + v21);
    if (v6.i16[3])
    {
      for (uint64_t i = 0; i != 33; ++i)
        *(float *)(a3 + 4 * byte_25B5F1F60[i]) = (float)((float)(v8 * (float)v6.u16[3]) / 30.0)
                                                                  + *(float *)(a3
                                                                             + 4 * byte_25B5F1F60[i]);
      uint16x4_t v6 = *a2;
    }
    for (uint64_t j = 0; j != 3; ++j)
    {
      uint16x4_t v19 = v6;
      if (*(_WORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3))))
      {
        a6.i32[0] = *result;
        a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
        uint8x8_t v18 = a6;
        __int16 v11 = *(_WORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3)));
        if (v11 <= 0x20u)
        {
          uint64_t v12 = byte_25B5F1F60[v11];
          v22[j] = v12;
          *(_DWORD *)(a3 + 4 * v12) = 0;
          uint16x4_t v6 = *a2;
        }
      }
    }
    uint64_t v13 = 0;
    a6.i32[0] = *result;
    uint8x8_t v14 = (uint8x8_t)vmovl_u8(a6).u64[0];
    do
    {
      uint16x4_t v17 = v6;
      unsigned int v15 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v13 & 3)));
      uint8x8_t v16 = v14;
      if (v15)
      {
        if (*(_WORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v13 & 3))) <= 0x20u)
        {
          *(float *)(a3 + 4 * (int)v22[v13]) = *(float *)(a3 + 4 * (int)v22[v13]) + (float)((float)v15 * v8);
          uint16x4_t v6 = *a2;
          v14.i32[0] = *result;
          uint8x8_t v14 = (uint8x8_t)vmovl_u8(v14).u64[0];
        }
      }
      ++v13;
    }
    while (v13 != 3);
  }
  return result;
}

void sub_25B50349C(void *a1, double a2, float a3)
{
  double v18 = a2;
  id v20 = a1;
  for (unint64_t i = 0; objc_msgSend_count(v20, v3, v4, *(void *)&v18) > i; ++i)
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v20, v6, i);
    objc_msgSend_quad((void *)v7, v8, v9);
    *(void *)&long long v11 = v10;
    *((void *)&v11 + 1) = LODWORD(v18);
    *(void *)&long long v13 = v12;
    *((void *)&v13 + 1) = LODWORD(v18);
    *(void *)&long long v15 = v14;
    *((void *)&v15 + 1) = LODWORD(a3);
    *(void *)&long long v17 = v16;
    *((void *)&v17 + 1) = LODWORD(a3);
    src[0] = v11;
    src[1] = v13;
    src[2] = v15;
    src[3] = v17;
    if (v7) {
      objc_copyStruct((void *)(v7 + 272), src, 64, 1, 0);
    }
  }
}

void sub_25B503588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

__n64 sub_25B5035AC(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t a4, double a5, int32x4_t a6)
{
  uint64_t v6 = a1 + 16 * a2;
  if (a2 == a3)
  {
    a4.i64[0] = *(void *)v6;
    *(int32x2_t *)a6.i8 = vdup_lane_s32(*(int32x2_t *)v6, 0);
    goto LABEL_67;
  }
  uint64_t v7 = a1 + 16 * a3;
  uint64_t v8 = v6 + 16;
  if (v6 + 16 == v7)
  {
    a6 = *(int32x4_t *)v6;
    a4.i32[0] = HIDWORD(*(void *)v6);
    float32x4_t v14 = *(float32x4_t *)v6;
    goto LABEL_41;
  }
  int8x16_t v10 = *(int8x16_t *)v6;
  float32x4_t v9 = *(float32x4_t *)(v6 + 16);
  a4 = vcgtq_f32(*(float32x4_t *)v6, v9);
  *(int16x4_t *)a4.i8 = vmovn_s32(a4);
  unsigned __int8 v11 = a4.i8[0];
  if (a4.i8[0]) {
    unsigned int v12 = -1;
  }
  else {
    unsigned int v12 = 0;
  }
  int8x16_t v13 = (int8x16_t)vdupq_n_s32(v12);
  float32x4_t v14 = (float32x4_t)vbslq_s8(v13, (int8x16_t)v9, v10);
  uint64_t v15 = v6 + 32;
  a4.i32[0] = HIDWORD(*(void *)v6);
  if (v6 + 32 == v7)
  {
    a6 = (int32x4_t)vbslq_s8(v13, v10, (int8x16_t)v9);
    goto LABEL_41;
  }
  if (v11) {
    uint64_t v16 = (float *)(a1 + 16 * a2);
  }
  else {
    uint64_t v16 = (float *)(v6 + 16);
  }
  if (v11) {
    long long v17 = (float32x4_t *)(v6 + 16);
  }
  else {
    long long v17 = (float32x4_t *)(a1 + 16 * a2);
  }
  uint64_t v18 = 16 * a2;
  uint64_t v19 = 16 * a3;
  uint64_t v20 = a1;
  __int16 v21 = (float32x4_t *)(a1 + 16 * a2);
  while (1)
  {
    uint64_t v22 = v21;
    __int16 v21 = (float32x4_t *)v15;
    uint64_t v23 = (float32x4_t *)(v20 + v18);
    uint64_t v24 = (float32x4_t *)(v20 + v18 + 32);
    if (16 * a2 + 48 == v19) {
      break;
    }
    float32x4_t v26 = v23[3];
    uint64_t v25 = v23 + 3;
    float32x4_t v27 = v26;
    float32x4_t v28 = *v24;
    if (vmovn_s32(vcgtq_f32(*v24, v26)).u8[0])
    {
      unsigned __int8 v29 = vmovn_s32(vcgtq_f32(*v17, v27)).u8[0];
      if (v29) {
        unsigned int v30 = -1;
      }
      else {
        unsigned int v30 = 0;
      }
      float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v30), (int8x16_t)v27, *(int8x16_t *)v17);
      if (v29) {
        long long v17 = v25;
      }
      if (v28.f32[0] >= *v16) {
        goto LABEL_32;
      }
    }
    else
    {
      unsigned __int8 v31 = vmovn_s32(vcgtq_f32(v14, v28)).u8[0];
      if (v31) {
        unsigned int v32 = -1;
      }
      else {
        unsigned int v32 = 0;
      }
      float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v32), (int8x16_t)v28, (int8x16_t)v14);
      if (v31) {
        long long v17 = (float32x4_t *)(v20 + v18 + 32);
      }
      if (v27.f32[0] >= *v16)
      {
        uint64_t v24 = v22 + 3;
        goto LABEL_32;
      }
    }
    uint64_t v24 = (float32x4_t *)v16;
LABEL_32:
    uint64_t v15 = (uint64_t)&v21[2];
    v20 += 32;
    v19 -= 32;
    uint64_t v16 = (float *)v24;
    if (16 * a2 + 32 == v19) {
      goto LABEL_40;
    }
  }
  if (COERCE_FLOAT(*v24) < v17->f32[0])
  {
    long long v17 = (float32x4_t *)(v20 + v18 + 32);
    goto LABEL_39;
  }
  if (COERCE_FLOAT(*v24) < *v16) {
LABEL_39:
  }
    uint64_t v24 = (float32x4_t *)v16;
LABEL_40:
  v14.i32[0] = v17->i32[0];
  a6 = *(int32x4_t *)v24;
LABEL_41:
  *(int32x2_t *)a6.i8 = vdup_lane_s32(*(int32x2_t *)a6.i8, 0);
  a6.i32[0] = v14.i32[0];
  if (v8 != v7)
  {
    float v33 = *(float *)(v6 + 20);
    if (v33 >= *(float *)a4.i32) {
      uint64_t v34 = a1 + 16 * a2;
    }
    else {
      uint64_t v34 = v6 + 16;
    }
    if (v33 < *(float *)a4.i32) {
      uint64_t v8 = a1 + 16 * a2;
    }
    uint64_t v35 = v6 + 32;
    if (v6 + 32 == v7) {
      goto LABEL_66;
    }
    uint64_t v36 = 16 * a2;
    uint64_t v37 = 16 * a3;
    uint64_t v38 = 16 * a2 + 32;
    uint64_t v39 = 16 * a2 + 48;
    while (1)
    {
      uint64_t v40 = v35;
      uint64_t v41 = a1 + v36;
      if (v39 == v37) {
        break;
      }
      uint64_t v42 = v6 + 48;
      uint64_t v43 = v41 + 48;
      a4.i32[0] = *(_DWORD *)(v41 + 52);
      float v44 = *(float *)(v41 + 36);
      float v45 = *(float *)(v34 + 4);
      float v46 = *(float *)(v8 + 4);
      if (v44 >= v45) {
        uint64_t v47 = v34;
      }
      else {
        uint64_t v47 = a1 + v36 + 32;
      }
      if (*(float *)a4.i32 < v46) {
        uint64_t v42 = v8;
      }
      if (*(float *)a4.i32 < v45) {
        uint64_t v34 = v43;
      }
      if (v44 >= v46) {
        uint64_t v8 = a1 + v36 + 32;
      }
      if (*(float *)a4.i32 >= v44)
      {
        uint64_t v34 = v47;
        uint64_t v8 = v42;
      }
      v35 += 32;
      a1 += 32;
      v37 -= 32;
      uint64_t v6 = v40;
      if (v38 == v37) {
        goto LABEL_66;
      }
    }
    a4.i32[0] = *(_DWORD *)(v41 + 36);
    if (*(float *)a4.i32 >= *(float *)(v34 + 4)) {
LABEL_66:
    }
      uint64_t v6 = v34;
    else {
      uint64_t v6 = a1 + v36 + 32;
    }
  }
LABEL_67:
  result.n64_u32[0] = vzip1q_s32(a6, a4).u32[0];
  result.n64_u32[1] = *(_DWORD *)(v6 + 4);
  return result;
}

uint64_t sub_25B503824(uint64_t a1, unint64_t *a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    char v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    float32x4_t v9 = sub_25B406B20(v8, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    int8x16_t v10 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    unsigned __int8 v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v12 = *a2;
  v22[0] = v12;
  uint64_t v20 = 0;
  if (v12 >= *(void *)(a1 + 8))
  {
    int8x16_t v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    float32x4_t v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v14, (uint64_t)" ", 1);
    uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_25B406B20(v16, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    long long v17 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40B60C("err", "shape", (uint64_t)&v20, "=", (uint64_t)v22, "should smaller then");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v18 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return *(void *)(a1 + 144) + 4 * *(void *)(a1 + 56) * v12;
}

void sub_25B503BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B503BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B459378(a1, (_OWORD *)(a2 + 8));
  return sub_25B459DBC(v3, a2);
}

void sub_25B503C2C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F27E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B503C60(uint64_t a1, void **a2, float32x2_t *a3, void *a4)
{
  unint64_t v8 = (uint64_t)(a4[1] - *a4) >> 3;
  LODWORD(v57) = 0;
  sub_25B400C5C(&__p, v8, &v57);
  float32x4_t v9 = (void *)*a4;
  int8x16_t v10 = (float32_t *)__p;
  uint64_t v11 = a4[1] - *a4;
  unint64_t v12 = v11 >> 3;
  if (v11)
  {
    unint64_t v13 = 0;
    do
    {
      float32x2_t v14 = (float32x2_t)v9[v13];
      if (v14.f32[0] >= 0.0) {
        v10[v13] = sub_25B40DB9C(v14, *a3, a3[1], 0.00001);
      }
      ++v13;
    }
    while (v12 > v13);
  }
  if (v12 - 1 >= 2)
  {
    uint64_t v15 = (char *)(v10 + 1);
    LODWORD(v16) = -1;
    float v17 = -3.4028e38;
    uint64_t v18 = 1;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = &v10[v18];
      float v22 = *(v20 - 1);
      std::locale v21 = (char *)(v20 - 1);
      float v23 = v22;
      do
      {
        if (v23 < *(float *)&v15[v19])
        {
          float v23 = *(float *)&v15[v19];
          std::locale v21 = &v15[v19];
        }
        v19 += 4;
      }
      while (v19 != 8);
      int64_t v24 = v21 - (char *)v10;
      unint64_t v25 = (unint64_t)(v21 - (char *)v10) >> 2;
      uint64_t v26 = v24 << 30 >> 30;
      float v27 = *(float32_t *)((char *)v10 + v26);
      if (v27 <= v17) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = v25;
      }
      if (v27 > v17) {
        float v17 = *(float32_t *)((char *)v10 + v26);
      }
      ++v18;
      v15 += 4;
    }
    while (v18 != v12 - 1);
    unint64_t v28 = v16 << 32;
    uint64_t v29 = LODWORD(v17);
    goto LABEL_21;
  }
  if (v10)
  {
    unint64_t v28 = 0xFFFFFFFF00000000;
    uint64_t v29 = 4286578687;
LABEL_21:
    unint64_t v63 = v10;
    operator delete(v10);
    uint64_t v30 = v28 | v29;
    goto LABEL_22;
  }
  uint64_t v30 = -8388609;
LABEL_22:
  if (*(float *)&v30 >= (float)*(int *)(a1 + 12))
  {
    unint64_t v34 = HIDWORD(v30);
    uint64_t v35 = v30 >> 32;
    int v36 = v35 - 1;
    uint64_t v37 = (void *)*a4;
    uint64_t v38 = *(void *)(*a4 + 8 * v35);
    float v39 = vabds_f32(*(float *)&v38, COERCE_FLOAT(*(void *)(*a4 + 8 * (v35 - 1))));
    uint64_t v40 = v35 + 1;
    *(float *)&uint64_t v38 = vabds_f32(*(float *)&v38, COERCE_FLOAT(*(void *)(*a4 + 8 * v40)));
    BOOL v41 = v39 < *(float *)&v38;
    if (v39 < *(float *)&v38) {
      int v36 = v34;
    }
    uint64_t v42 = &v37[v36];
    uint64_t v44 = *v42;
    uint64_t v43 = v42 + 1;
    uint64_t v45 = v44;
    if (v41) {
      int v46 = v40;
    }
    else {
      int v46 = v34;
    }
    float32x2_t v47 = a3[1];
    v61[0] = *a3;
    v61[1] = v45;
    v60[0] = v37[v46];
    v60[1] = v47;
    __p = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    sub_25B503F88(v37, v43, &__p);
    sub_25B503F88((void *)(*a4 + 8 * v46), (void *)a4[1], &v57);
    sub_25B503C60(a1, a2, v61, &__p);
    sub_25B503C60(a1, a2, v60, &v57);
    if (v57)
    {
      uint64_t v58 = v57;
      operator delete(v57);
    }
    if (__p)
    {
      unint64_t v63 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unsigned int v32 = a2[1];
    unint64_t v31 = (unint64_t)a2[2];
    if ((unint64_t)v32 >= v31)
    {
      uint64_t v48 = ((char *)v32 - (unsigned char *)*a2) >> 4;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v50 = v31 - (void)*a2;
      if (v50 >> 3 > v49) {
        unint64_t v49 = v50 >> 3;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51) {
        unint64_t v51 = (unint64_t)sub_25B3FFAEC(v51);
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v53 = (_OWORD *)(v51 + 16 * v48);
      unint64_t v54 = v51 + 16 * v52;
      _OWORD *v53 = *(_OWORD *)a3->f32;
      float v33 = v53 + 1;
      uint64_t v56 = (char *)*a2;
      uint64_t v55 = (char *)a2[1];
      if (v55 != *a2)
      {
        do
        {
          *--uint64_t v53 = *((_OWORD *)v55 - 1);
          v55 -= 16;
        }
        while (v55 != v56);
        uint64_t v55 = (char *)*a2;
      }
      *a2 = v53;
      a2[1] = v33;
      a2[2] = (void *)v54;
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *unsigned int v32 = *(_OWORD *)a3->f32;
      float v33 = v32 + 1;
    }
    a2[1] = v33;
  }
}

void sub_25B503F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B503F88(void *a1, void *a2, void **a3)
{
  if (a1 != a2)
  {
    char v5 = a1;
    uint64_t v6 = (char *)a3[1];
    do
    {
      unint64_t v7 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v8 = (v6 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v9 = v7 - (void)*a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)sub_25B3FCAD4(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = (char *)(v11 + 8 * v8);
        *(void *)unint64_t v13 = *v5;
        uint64_t v6 = v13 + 8;
        uint64_t v15 = (char *)*a3;
        float32x2_t v14 = (char *)a3[1];
        if (v14 != *a3)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          float32x2_t v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = (void *)(v11 + 8 * v12);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)uint64_t v6 = *v5;
        v6 += 8;
      }
      a3[1] = v6;
      ++v5;
    }
    while (v5 != a2);
  }
}

double sub_25B504088(void *a1, double *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_25B504114(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double result = *a2;
  *(double *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
  return result;
}

void sub_25B504114(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v41 = (char *)sub_25B3FCAD4(v40);
      uint64_t v42 = &v41[8 * (v40 >> 2)];
      uint64_t v44 = &v41[8 * v43];
      uint64_t v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        uint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)uint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    float v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  std::locale v21 = (char *)*a1;
  float v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    unint64_t v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      uint64_t v53 = (char *)sub_25B3FCAD4(v51);
      float v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v55 = (uint64_t *)a1[1];
      uint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        uint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      uint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        float v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v41 = (char *)sub_25B3FCAD4(v85);
      uint64_t v42 = &v41[8 * (v85 >> 2)];
      uint64_t v44 = &v41[8 * v86];
      unint64_t v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        uint64_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)uint64_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)sub_25B3FCAD4(v28);
  uint64_t v31 = v30;
  unsigned int v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  unint64_t v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    uint64_t v64 = (char *)sub_25B3FCAD4(v63);
    unsigned int v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)unsigned int v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    uint64_t v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      unint64_t v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        unint64_t v75 = (char *)sub_25B3FCAD4(v74);
        uint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        int32x4_t v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          int32x4_t v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = v68;
          unint64_t v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)uint64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        uint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          unint64_t v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      uint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  BOOL v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_25B5045D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void sub_25B504604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25B404048((uint64_t)&v17, a2);
  long long v14 = v18;
  long long v15 = v19;
  long long v16 = v20;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)&v21[0].__locale_ = 0u;
  sub_25B404048((uint64_t)&v24, a3);
  *(_OWORD *)&v21[0].__locale_ = v25;
  long long v22 = v26;
  long long v23 = v27;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = v14;
  long long v32 = v15;
  long long v33 = v16;
  sub_25B404048((uint64_t)v34, (uint64_t)&v17);
  v35[1] = v22;
  v35[2] = v23;
  v35[0] = *(_OWORD *)&v21[0].__locale_;
  sub_25B404048((uint64_t)v36, (uint64_t)&v24);
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    uint64_t v6 = *((void *)&v31 + v4);
    uint64_t v7 = *((void *)v35 + v4);
    if ((v5 & 1) == 0) {
      break;
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while (v6 == v7);
  if (v6 != v7)
  {
    uint64_t v8 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
    sub_25B406B20(v9, (uint64_t)" ", 1);
    uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_25B406B20(v11, (uint64_t)" ", 1);
    sub_25B406B20(v11, (uint64_t)"TensorBinaryExp", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    BOOL v12 = std::locale::use_facet(v48, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v48);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408160("err", "Binary Exp shape should equal");
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v13 = std::locale::use_facet(v48, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(v48);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v28 = v31;
  long long v29 = v32;
  long long v30 = v33;
  uint64_t v47 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v37 = v31;
  long long v39 = v33;
  long long v38 = v32;
  v36[20] = &unk_2708F1C28;
  uint64_t v40 = *((void *)&v31 + 1);
  uint64_t v41 = 1;
  uint64_t v44 = v31 * *((void *)&v31 + 1);
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  sub_25B408738((uint64_t)v48, v31 * *((void *)&v31 + 1));
}

void sub_25B5058B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::locale a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69) {
    sub_25B404120(a69);
  }
  STACK[0x290] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x310]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x310]);
  }
  if (a43) {
    sub_25B404120(a43);
  }
  sub_25B4B982C((uint64_t)&STACK[0x490]);
  *unint64_t v69 = &unk_2708F1C28;
  uint64_t v71 = (std::__shared_weak_count *)v69[16];
  if (v71) {
    sub_25B404120(v71);
  }
  STACK[0x3F8] = a10;
  if (STACK[0x478]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x478]);
  }
  _Unwind_Resume(a1);
}

void *sub_25B505AD0(void *a1)
{
  a1[37] = &unk_2708F1C28;
  unint64_t v2 = (std::__shared_weak_count *)a1[53];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[12] = &unk_2708F1C28;
  BOOL v3 = (std::__shared_weak_count *)a1[28];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

uint64_t sub_25B505B4C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v152 = *MEMORY[0x263EF8340];
  char v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      uint64_t v10 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          uint64_t v11 = *(int **)(a2 + 240);
          do
          {
            int v12 = *v11++;
            *v10++ = *(_DWORD *)(a2 + 352) * (v12 / *(_DWORD *)(a2 + 296));
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(result + 56);
        uint64_t v78 = *(void *)(result + 64);
        uint64_t v79 = *(void *)(a2 + 240);
        do
        {
          uint64_t v80 = 0;
          v10[v77 * (void)v137 + v78 * *((void *)&v137 + 1)] = *(_DWORD *)(a2 + 352)
                                                                 * (*(_DWORD *)(v79 + 4 * v76)
                                                                  / *(_DWORD *)(a2 + 296));
          do
          {
            uint64_t v81 = *(void *)((char *)&v137 + v80 + 8) + 1;
            *(void *)((char *)&v137 + v80 + 8) = v81;
            double result = *(void *)(v3 + 16 + v80);
            if (v81 != result) {
              break;
            }
            *(void *)((char *)&v137 + v80 + 8) = 0;
            v80 -= 8;
          }
          while (v80 != -16);
          ++v76;
        }
        while (v76 != v9);
      }
    }
    else
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v39 = *(void *)(result + 104);
      uint64_t v40 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a2 + 152);
          uint64_t v43 = *(void *)(a2 + 160);
          uint64_t v44 = *(void *)(a2 + 240);
          do
          {
            uint64_t v45 = 0;
            *(_DWORD *)(v40 + 4 * v41) = *(_DWORD *)(a2 + 352)
                                       * (*(_DWORD *)(v44 + 4 * (v42 * v137 + v43 * *((void *)&v137 + 1)))
                                        / *(_DWORD *)(a2 + 296));
            do
            {
              uint64_t v46 = *(void *)((char *)&v137 + v45 + 8) + 1;
              *(void *)((char *)&v137 + v45 + 8) = v46;
              double result = *(void *)(v3 + 16 + v45);
              if (v46 != result) {
                break;
              }
              *(void *)((char *)&v137 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v41;
          }
          while (v41 != v39);
        }
      }
      else if (v39)
      {
        uint64_t v100 = 0;
        uint64_t v101 = *(void *)(result + 56);
        uint64_t v102 = *(void *)(result + 64);
        uint64_t v103 = *(void *)(a2 + 152);
        uint64_t v104 = *(void *)(a2 + 160);
        uint64_t v105 = *(void *)(a2 + 240);
        do
        {
          double result = 0;
          *(_DWORD *)(v40 + 4 * (v101 * v137 + v102 * *((void *)&v137 + 1))) = *(_DWORD *)(a2 + 352)
                                                                               * (*(_DWORD *)(v105
                                                                                            + 4
                                                                                            * (v103 * v137
                                                                                             + v104
                                                                                             * *((void *)&v137 + 1)))
                                                                                / *(_DWORD *)(a2 + 296));
          do
          {
            uint64_t v106 = *(void *)((char *)&v137 + result + 8) + 1;
            *(void *)((char *)&v137 + result + 8) = v106;
            if (v106 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v137 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v100;
        }
        while (v100 != v39);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        uint64_t v15 = *((void *)&v128 + v13);
        uint64_t v16 = *((void *)v5 + v13);
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while (v15 == v16);
      if (v15 != v16)
      {
        uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        long long v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v18, (uint64_t)" ", 1);
        long long v19 = (void *)MEMORY[0x263F8C0F8];
        long long v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        std::locale v21 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        long long v22 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v23 = *(void *)(v3 + 104);
      uint64_t v24 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v23)
        {
          uint64_t v25 = 0;
          long long v27 = (uint64_t *)*((void *)&v138 + 1);
          long long v26 = (uint64_t *)v139;
          unint64_t v28 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v26 != v27)
            {
              long long v30 = v27;
              unint64_t v31 = v28;
              do
              {
                uint64_t v32 = *v30++;
                *((void *)&v131 + v32) = 0;
                --v31;
              }
              while (v31);
            }
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
            do
            {
              char v36 = v35;
              v34 += *((void *)&v149 + v33) * *((void *)&v131 + v33);
              uint64_t v33 = 1;
              char v35 = 0;
            }
            while ((v36 & 1) != 0);
            *(_DWORD *)(v24 + 4 * v25) = *(_DWORD *)(a2 + 352) * (*(_DWORD *)(v29 + 4 * v34) / *(_DWORD *)(a2 + 296));
            for (uint64_t i = 1; i != -1; --i)
            {
              long long v38 = (std::locale::__imp *)((char *)v134[i].__locale_ + 1);
              v134[i].__locale_ = v38;
              if (v38 != *(std::locale::__imp **)((char *)&v128 + i * 8)) {
                break;
              }
              v134[i].__locale_ = 0;
            }
            ++v25;
          }
          while (v25 != v23);
        }
      }
      else if (v23)
      {
        uint64_t v82 = 0;
        BOOL v84 = (uint64_t *)*((void *)&v138 + 1);
        uint64_t v83 = (uint64_t *)v139;
        unint64_t v85 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v85 <= 1) {
          unint64_t v85 = 1;
        }
        uint64_t v86 = *(void *)(v3 + 56);
        uint64_t v87 = *(void *)(v3 + 64);
        uint64_t v88 = *(void *)(a2 + 240);
        do
        {
          locale = v134[0].__locale_;
          uint64_t v90 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v83 != v84)
          {
            uint64_t v91 = v84;
            unint64_t v92 = v85;
            do
            {
              uint64_t v93 = *v91++;
              *((void *)&v131 + v93) = 0;
              --v92;
            }
            while (v92);
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          char v96 = 1;
          do
          {
            char v97 = v96;
            v95 += *((void *)&v149 + v94) * *((void *)&v131 + v94);
            uint64_t v94 = 1;
            char v96 = 0;
          }
          while ((v97 & 1) != 0);
          *(_DWORD *)(v24 + 4 * ((void)locale * v86 + (void)v90 * v87)) = *(_DWORD *)(a2 + 352)
                                                                            * (*(_DWORD *)(v88 + 4 * v95)
                                                                             / *(_DWORD *)(a2 + 296));
          for (uint64_t j = 1; j != -1; --j)
          {
            float32x4_t v99 = (std::locale::__imp *)((char *)v134[j].__locale_ + 1);
            v134[j].__locale_ = v99;
            if (v99 != *(std::locale::__imp **)((char *)&v128 + j * 8)) {
              break;
            }
            v134[j].__locale_ = 0;
          }
          ++v82;
        }
        while (v82 != v23);
      }
    }
    else
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v128 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        unint64_t v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        uint64_t v53 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        uint64_t v55 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        uint64_t v56 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v57 = *(void *)(v3 + 104);
      uint64_t v58 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v60 = (uint64_t *)v139;
          unint64_t v62 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          int v63 = *(unsigned __int8 *)(a2 + 232);
          uint64_t v64 = *(void *)(a2 + 152);
          uint64_t v65 = *(void *)(a2 + 160);
          uint64_t v66 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v60 != v61)
            {
              uint64_t v67 = v61;
              unint64_t v68 = v62;
              do
              {
                uint64_t v69 = *v67++;
                *((void *)&v131 + v69) = 0;
                --v68;
              }
              while (v68);
            }
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            char v72 = 1;
            do
            {
              char v73 = v72;
              v71 += *((void *)&v149 + v70) * *((void *)&v131 + v70);
              uint64_t v70 = 1;
              char v72 = 0;
            }
            while ((v73 & 1) != 0);
            if (!v63) {
              uint64_t v71 = v131 * v64 + *((void *)&v131 + 1) * v65;
            }
            *(_DWORD *)(v58 + 4 * v59) = *(_DWORD *)(a2 + 352) * (*(_DWORD *)(v66 + 4 * v71) / *(_DWORD *)(a2 + 296));
            for (uint64_t k = 1; k != -1; --k)
            {
              unint64_t v75 = (std::locale::__imp *)((char *)v134[k].__locale_ + 1);
              v134[k].__locale_ = v75;
              if (v75 != *(std::locale::__imp **)((char *)&v128 + k * 8)) {
                break;
              }
              v134[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v107 = 0;
        float32x4_t v109 = (uint64_t *)*((void *)&v138 + 1);
        float32x4_t v108 = (uint64_t *)v139;
        unint64_t v110 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        uint64_t v111 = *(void *)(v3 + 56);
        uint64_t v112 = *(void *)(v3 + 64);
        int v113 = *(unsigned __int8 *)(a2 + 232);
        uint64_t v114 = *(void *)(a2 + 152);
        uint64_t v115 = *(void *)(a2 + 160);
        uint64_t v116 = *(void *)(a2 + 240);
        do
        {
          BOOL v117 = v134[0].__locale_;
          float v118 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v108 != v109)
          {
            int v119 = v109;
            unint64_t v120 = v110;
            do
            {
              uint64_t v121 = *v119++;
              *((void *)&v131 + v121) = 0;
              --v120;
            }
            while (v120);
          }
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          do
          {
            char v125 = v124;
            v123 += *((void *)&v149 + v122) * *((void *)&v131 + v122);
            uint64_t v122 = 1;
            char v124 = 0;
          }
          while ((v125 & 1) != 0);
          if (!v113) {
            uint64_t v123 = v131 * v114 + *((void *)&v131 + 1) * v115;
          }
          *(_DWORD *)(v58 + 4 * ((void)v117 * v111 + (void)v118 * v112)) = *(_DWORD *)(a2 + 352)
                                                                             * (*(_DWORD *)(v116 + 4 * v123)
                                                                              / *(_DWORD *)(a2 + 296));
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v127 = (std::locale::__imp *)((char *)v134[m].__locale_ + 1);
            v134[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v128 + m * 8)) {
              break;
            }
            v134[m].__locale_ = 0;
          }
          ++v107;
        }
        while (v107 != v57);
      }
    }
    return sub_25B3F9500((uint64_t)&v137);
  }
  return result;
}

void sub_25B50659C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_25B5065D0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v163 = *MEMORY[0x263EF8340];
  char v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 232)) {
    BOOL v9 = *(unsigned char *)(a2 + 432) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v7 == v8)
  {
    if (v10)
    {
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      uint64_t v11 = *(void *)(result + 104);
      int v12 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v11)
        {
          uint64_t v13 = *(int **)(a2 + 240);
          char v14 = *(int **)(a2 + 440);
          do
          {
            int v16 = *v13++;
            int v15 = v16;
            if (v16 < 0) {
              int v15 = -v15;
            }
            int v18 = *v14++;
            int v17 = v18;
            if (v18 < 0) {
              int v17 = -v17;
            }
            *v12++ = v17 + v15;
            --v11;
          }
          while (v11);
        }
      }
      else if (v11)
      {
        uint64_t v79 = 0;
        uint64_t v80 = *(void *)(result + 56);
        uint64_t v81 = *(void *)(result + 64);
        uint64_t v82 = *(void *)(a2 + 240);
        uint64_t v83 = *(void *)(a2 + 440);
        do
        {
          uint64_t v84 = 0;
          int v85 = *(_DWORD *)(v82 + 4 * v79);
          int v86 = *(_DWORD *)(v83 + 4 * v79);
          if (v85 < 0) {
            int v85 = -v85;
          }
          if (v86 < 0) {
            int v86 = -v86;
          }
          v12[v80 * (void)v148 + v81 * *((void *)&v148 + 1)] = v86 + v85;
          do
          {
            double result = *(void *)((char *)&v148 + v84 + 8) + 1;
            *(void *)((char *)&v148 + v84 + 8) = result;
            if (result != *(void *)(v3 + 16 + v84)) {
              break;
            }
            *(void *)((char *)&v148 + v84 + 8) = 0;
            v84 -= 8;
          }
          while (v84 != -16);
          ++v79;
        }
        while (v79 != v11);
      }
    }
    else
    {
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      uint64_t v48 = *(void *)(result + 104);
      uint64_t v49 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v48)
        {
          uint64_t v50 = 0;
          uint64_t v51 = result + 16;
          do
          {
            double result = sub_25B507050(a2, v50, v148, *((uint64_t *)&v148 + 1));
            uint64_t v52 = 0;
            *(_DWORD *)(v49 + 4 * v50) = result;
            do
            {
              uint64_t v53 = *(void *)((char *)&v148 + v52 + 8) + 1;
              *(void *)((char *)&v148 + v52 + 8) = v53;
              if (v53 != *(void *)(v51 + v52)) {
                break;
              }
              *(void *)((char *)&v148 + v52 + 8) = 0;
              v52 -= 8;
            }
            while (v52 != -16);
            ++v50;
          }
          while (v50 != v48);
        }
      }
      else if (v48)
      {
        uint64_t v87 = 0;
        uint64_t v88 = *(void *)(result + 56);
        uint64_t v89 = *(void *)(result + 64);
        uint64_t v90 = result + 16;
        do
        {
          uint64_t v91 = v88 * v148 + v89 * *((void *)&v148 + 1);
          double result = sub_25B507050(a2, v87, v148, *((uint64_t *)&v148 + 1));
          uint64_t v92 = 0;
          *(_DWORD *)(v49 + 4 * v91) = result;
          do
          {
            uint64_t v93 = *(void *)((char *)&v148 + v92 + 8) + 1;
            *(void *)((char *)&v148 + v92 + 8) = v93;
            if (v93 != *(void *)(v90 + v92)) {
              break;
            }
            *(void *)((char *)&v148 + v92 + 8) = 0;
            v92 -= 8;
          }
          while (v92 != -16);
          ++v87;
        }
        while (v87 != v48);
      }
    }
  }
  else
  {
    if (v10)
    {
      long long v161 = 0uLL;
      long long v162 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v157 = 0uLL;
      long long v158 = 0uLL;
      long long v155 = 0uLL;
      long long v156 = 0uLL;
      long long v153 = 0uLL;
      long long v154 = 0uLL;
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v139 = 0uLL;
      sub_25B40AB84((uint64_t)&v148, v5, (_OWORD *)a2, (uint64_t)&v139);
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        uint64_t v21 = *((void *)&v139 + v19);
        uint64_t v22 = *((void *)v5 + v19);
        if ((v20 & 1) == 0) {
          break;
        }
        char v20 = 0;
        uint64_t v19 = 1;
      }
      while (v21 == v22);
      if (v21 != v22)
      {
        uint64_t v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
        long long v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        long long v27 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        unint64_t v28 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      *(_OWORD *)&v145[0].__locale_ = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      uint64_t v29 = *(void *)(v3 + 104);
      uint64_t v30 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v29)
        {
          uint64_t v31 = 0;
          uint64_t v33 = (uint64_t *)*((void *)&v149 + 1);
          uint64_t v32 = (uint64_t *)v150;
          unint64_t v34 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          uint64_t v35 = *(void *)(a2 + 240);
          uint64_t v36 = *(void *)(a2 + 440);
          do
          {
            long long v142 = *(_OWORD *)&v145[0].__locale_;
            if (v32 != v33)
            {
              long long v37 = v33;
              unint64_t v38 = v34;
              do
              {
                uint64_t v39 = *v37++;
                *((void *)&v142 + v39) = 0;
                --v38;
              }
              while (v38);
            }
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            char v42 = 1;
            do
            {
              char v43 = v42;
              v41 += *((void *)&v160 + v40) * *((void *)&v142 + v40);
              uint64_t v40 = 1;
              char v42 = 0;
            }
            while ((v43 & 1) != 0);
            int v44 = *(_DWORD *)(v35 + 4 * v41);
            if (v44 < 0) {
              int v44 = -v44;
            }
            int v45 = *(_DWORD *)(v36 + 4 * v41);
            if (v45 < 0) {
              int v45 = -v45;
            }
            *(_DWORD *)(v30 + 4 * v31) = v45 + v44;
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v47 = (std::locale::__imp *)((char *)v145[i].__locale_ + 1);
              v145[i].__locale_ = v47;
              if (v47 != *(std::locale::__imp **)((char *)&v139 + i * 8)) {
                break;
              }
              v145[i].__locale_ = 0;
            }
            ++v31;
          }
          while (v31 != v29);
        }
      }
      else if (v29)
      {
        uint64_t v94 = 0;
        char v96 = (uint64_t *)*((void *)&v149 + 1);
        uint64_t v95 = (uint64_t *)v150;
        unint64_t v97 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
        if (v97 <= 1) {
          unint64_t v97 = 1;
        }
        uint64_t v98 = *(void *)(v3 + 56);
        uint64_t v99 = *(void *)(v3 + 64);
        uint64_t v100 = *(void *)(a2 + 240);
        uint64_t v101 = *(void *)(a2 + 440);
        do
        {
          locale = v145[0].__locale_;
          uint64_t v103 = v145[1].__locale_;
          long long v142 = *(_OWORD *)&v145[0].__locale_;
          if (v95 != v96)
          {
            uint64_t v104 = v96;
            unint64_t v105 = v97;
            do
            {
              uint64_t v106 = *v104++;
              *((void *)&v142 + v106) = 0;
              --v105;
            }
            while (v105);
          }
          uint64_t v107 = 0;
          uint64_t v108 = 0;
          char v109 = 1;
          do
          {
            char v110 = v109;
            v108 += *((void *)&v160 + v107) * *((void *)&v142 + v107);
            uint64_t v107 = 1;
            char v109 = 0;
          }
          while ((v110 & 1) != 0);
          uint64_t v111 = (void)locale * v98 + (void)v103 * v99;
          int v112 = *(_DWORD *)(v100 + 4 * v108);
          if (v112 < 0) {
            int v112 = -v112;
          }
          int v113 = *(_DWORD *)(v101 + 4 * v108);
          if (v113 < 0) {
            int v113 = -v113;
          }
          *(_DWORD *)(v30 + 4 * v111) = v113 + v112;
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v115 = (std::locale::__imp *)((char *)v145[j].__locale_ + 1);
            v145[j].__locale_ = v115;
            if (v115 != *(std::locale::__imp **)((char *)&v139 + j * 8)) {
              break;
            }
            v145[j].__locale_ = 0;
          }
          ++v94;
        }
        while (v94 != v29);
      }
    }
    else
    {
      long long v161 = 0uLL;
      long long v162 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v157 = 0uLL;
      long long v158 = 0uLL;
      long long v155 = 0uLL;
      long long v156 = 0uLL;
      long long v153 = 0uLL;
      long long v154 = 0uLL;
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v139 = 0uLL;
      sub_25B40AB84((uint64_t)&v148, v5, (_OWORD *)a2, (uint64_t)&v139);
      uint64_t v54 = 0;
      char v55 = 1;
      do
      {
        uint64_t v56 = *((void *)&v139 + v54);
        uint64_t v57 = *((void *)v5 + v54);
        if ((v55 & 1) == 0) {
          break;
        }
        char v55 = 0;
        uint64_t v54 = 1;
      }
      while (v56 == v57);
      if (v56 != v57)
      {
        uint64_t v58 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v59 = sub_25B406B20(v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v59, (uint64_t)" ", 1);
        uint64_t v60 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v61 = (void *)std::ostream::operator<<();
        sub_25B406B20(v61, (uint64_t)" ", 1);
        sub_25B406B20(v61, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
        unint64_t v62 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
        int v63 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      *(_OWORD *)&v145[0].__locale_ = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      uint64_t v64 = *(void *)(v3 + 104);
      uint64_t v65 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v64)
        {
          uint64_t v66 = 0;
          unint64_t v68 = (uint64_t *)*((void *)&v149 + 1);
          uint64_t v67 = (uint64_t *)v150;
          unint64_t v69 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
          if (v69 <= 1) {
            unint64_t v69 = 1;
          }
          unint64_t v137 = v69;
          do
          {
            long long v142 = *(_OWORD *)&v145[0].__locale_;
            if (v67 != v68)
            {
              uint64_t v70 = v68;
              unint64_t v71 = v137;
              do
              {
                uint64_t v72 = *v70++;
                *((void *)&v142 + v72) = 0;
                --v71;
              }
              while (v71);
            }
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            char v75 = 1;
            do
            {
              char v76 = v75;
              v74 += *((void *)&v160 + v73) * *((void *)&v142 + v73);
              uint64_t v73 = 1;
              char v75 = 0;
            }
            while ((v76 & 1) != 0);
            *(_DWORD *)(v65 + 4 * v66) = sub_25B507050(a2, v74, v142, *((uint64_t *)&v142 + 1));
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v78 = (std::locale::__imp *)((char *)v145[k].__locale_ + 1);
              v145[k].__locale_ = v78;
              if (v78 != *(std::locale::__imp **)((char *)&v139 + k * 8)) {
                break;
              }
              v145[k].__locale_ = 0;
            }
            ++v66;
          }
          while (v66 != v64);
        }
      }
      else if (v64)
      {
        uint64_t v116 = 0;
        long long v136 = (uint64_t *)v150;
        long long v138 = (uint64_t *)*((void *)&v149 + 1);
        if ((unint64_t)((uint64_t)(v150 - *((void *)&v149 + 1)) >> 3) <= 1) {
          uint64_t v117 = 1;
        }
        else {
          uint64_t v117 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
        }
        uint64_t v135 = *(void *)(v3 + 64);
        uint64_t v133 = v117;
        uint64_t v134 = *(void *)(v3 + 56);
        do
        {
          uint64_t v118 = v64;
          uint64_t v119 = v65;
          unint64_t v120 = v145[0].__locale_;
          uint64_t v121 = v145[1].__locale_;
          long long v142 = *(_OWORD *)&v145[0].__locale_;
          if (v136 != v138)
          {
            uint64_t v122 = v138;
            uint64_t v123 = v133;
            do
            {
              uint64_t v124 = *v122++;
              *((void *)&v142 + v124) = 0;
              --v123;
            }
            while (v123);
          }
          uint64_t v125 = 0;
          uint64_t v126 = 0;
          char v127 = 1;
          do
          {
            char v128 = v127;
            v126 += *((void *)&v160 + v125) * *((void *)&v142 + v125);
            uint64_t v125 = 1;
            char v127 = 0;
          }
          while ((v128 & 1) != 0);
          int v129 = sub_25B507050(a2, v126, v142, *((uint64_t *)&v142 + 1));
          uint64_t v130 = v134 * (void)v120 + v135 * (void)v121;
          uint64_t v65 = v119;
          *(_DWORD *)(v119 + 4 * v130) = v129;
          for (uint64_t m = 1; m != -1; --m)
          {
            long long v132 = (std::locale::__imp *)((char *)v145[m].__locale_ + 1);
            v145[m].__locale_ = v132;
            if (v132 != *(std::locale::__imp **)((char *)&v139 + m * 8)) {
              break;
            }
            v145[m].__locale_ = 0;
          }
          ++v116;
          uint64_t v64 = v118;
        }
        while (v116 != v118);
      }
    }
    return sub_25B3F9500((uint64_t)&v148);
  }
  return result;
}

void sub_25B50701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_25B507050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 232)) {
    uint64_t v4 = *(void *)(a1 + 152) * a3 + *(void *)(a1 + 160) * a4;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 240) + 4 * v4);
  if (!*(unsigned char *)(a1 + 432)) {
    a2 = *(void *)(a1 + 352) * a3 + *(void *)(a1 + 360) * a4;
  }
  if (v5 < 0) {
    int v5 = -v5;
  }
  int v6 = *(_DWORD *)(*(void *)(a1 + 440) + 4 * a2);
  if (v6 < 0) {
    int v6 = -v6;
  }
  return (v6 + v5);
}

void sub_25B5070A4(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_25B4641DC((uint64_t)&v5, a2);
  long long v2 = v6;
  long long v3 = v7;
  long long v4 = v8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v10 = v6;
  long long v11 = v7;
  long long v12 = v8;
  BOOL v9 = &unk_2708F21F8;
  uint64_t v13 = *((void *)&v6 + 1);
  uint64_t v14 = 1;
  uint64_t v17 = v6 * *((void *)&v6 + 1);
  uint64_t v18 = 0;
  sub_25B458EBC((uint64_t)v21, v6 * *((void *)&v6 + 1));
}

void sub_25B507E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale(&a65);
  sub_25B3F9500((uint64_t)&a71);
  if (a50) {
    sub_25B404120(a50);
  }
  if (a31) {
    sub_25B404120(a31);
  }
  _Unwind_Resume(a1);
}

BOOL sub_25B507F44(uint64_t a1, void *a2, int a3)
{
  long long v3 = a2 + 54;
  if (a3)
  {
    long long v4 = (unsigned __int16 *)a2 + 319;
  }
  else
  {
    long long v3 = a2 + 51;
    long long v4 = (unsigned __int16 *)a2 + 318;
  }
  uint64_t v5 = (float *)(a2 + 81);
  if (!a3) {
    uint64_t v5 = (float *)a2 + 161;
  }
  long long v6 = a2 + 80;
  if (a3) {
    long long v6 = (char *)a2 + 641;
  }
  int v7 = *((unsigned __int8 *)v3 + 16);
  if (a3) {
    long long v8 = (char *)a2 + 643;
  }
  else {
    long long v8 = (char *)a2 + 642;
  }
  if (!v7) {
    return 0;
  }
  if (*(float *)(a2[82] + 4 * a3) >= *(float *)(a1 + 24)) {
    return 0;
  }
  unint64_t v9 = (unint64_t)a3 >> 6;
  uint64_t v10 = 1 << a3;
  if ((*(void *)(a2[69] + 8 * v9) & (1 << a3)) != 0) {
    return 0;
  }
  BOOL result = 0;
  if ((*(void *)(a2[86] + 8 * v9) & v10) == 0)
  {
    unsigned __int16 v12 = *v4;
    if (v12 >= 0x100u)
    {
      BOOL result = 0;
      if (!(_BYTE)v12 && *v5 > 15.0 && !*v6 && !*v8) {
        return (*(void *)(a2[90] + 8 * v9) & v10) == 0;
      }
    }
  }
  return result;
}

void *sub_25B508034(uint64_t a1)
{
  BOOL result = (void *)MEMORY[0x270FA5388](a1);
  v24[115] = *(std::locale *)MEMORY[0x263EF8340];
  if (!(*(unsigned __int8 *)(v3 + 137) | *(unsigned __int8 *)(v2 + 137)))
  {
    uint64_t v4 = v2;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502278, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26A502278))
    {
      LODWORD(v7[0].__locale_) = 5;
      LODWORD(__p[0]) = 5;
      sub_25B50CC50(v18, (int *)v7, (int *)__p);
      sub_25B496124((uint64_t)&unk_26A5021E0, 1, v18);
      __cxa_atexit((void (*)(void *))sub_25B466450, &unk_26A5021E0, &dword_25B3F3000);
      __cxa_guard_release(&qword_26A502278);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502318, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_26A502318))
      {
        LODWORD(v7[0].__locale_) = 7;
        LODWORD(__p[0]) = 7;
        sub_25B50CC50(v18, (int *)v7, (int *)__p);
        sub_25B496124((uint64_t)&unk_26A502280, 1, v18);
        __cxa_atexit((void (*)(void *))sub_25B466450, &unk_26A502280, &dword_25B3F3000);
        __cxa_guard_release(&qword_26A502318);
      }
    }
    long long v9 = 0u;
    long long v8 = 0u;
    *(_OWORD *)&v7[0].__locale_ = 0u;
    sub_25B4641DC((uint64_t)&v10, v4);
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    LOBYTE(v17) = 2;
    *(_OWORD *)&v7[0].__locale_ = v11;
    long long v8 = v12;
    long long v9 = v13;
    *(_OWORD *)&v18[0].__locale_ = 0u;
    long long v19 = 0u;
    long long v23 = v13;
    long long v22 = v12;
    long long v20 = 0u;
    long long v21 = v11;
    sub_25B4641DC((uint64_t)v24, (uint64_t)&v10);
    *(_OWORD *)&v24[21].__locale_ = v15;
    *(_OWORD *)&v24[23].__locale_ = v16;
    *(_OWORD *)&v24[19].__locale_ = v14;
    v24[25].__locale_ = v17;
    *(_OWORD *)&v18[0].__locale_ = v21;
    long long v19 = v22;
    long long v20 = v23;
    sub_25B50CEEC((uint64_t)v6, v18);
  }
  result[2] = 0;
  result[1] = 0;
  *BOOL result = result + 1;
  return result;
}

void sub_25B50C388(_Unwind_Exception *a1)
{
}

_OWORD *sub_25B50CC50(_OWORD *a1, int *a2, int *a3)
{
  uint64_t v4 = 0;
  v17[2] = *MEMORY[0x263EF8340];
  a1[2] = 0u;
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = 1;
  *a1 = 0u;
  a1[1] = 0u;
  int v7 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v8 = *a3;
  v17[0] = *a2;
  v17[1] = v8;
  uint64_t v15 = 0;
  long long v9 = v17;
  do
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xBEBC200)
    {
      sub_25B406B20(v5, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
      sub_25B406B20(v5, (uint64_t)" ", 1);
      long long v11 = (void *)std::ostream::operator<<();
      sub_25B406B20(v11, (uint64_t)" ", 1);
      sub_25B406B20(v11, (uint64_t)"Shape", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      long long v12 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45806C("err", "shape[", (uint64_t)&v15, "]", " is ", (uint64_t)v9, " ,it should <= 6");
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
      long long v13 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v10 = *v9;
    }
    *((void *)a1 + v4) = v10;
    long long v9 = &v17[v6];
    uint64_t v15 = ++v4;
    uint64_t v6 = 2;
  }
  while (v4 != 2);
  return a1;
}

void sub_25B50CECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

void sub_25B50CEEC(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F1D50;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B4966CC((uint64_t)&v6, v5);
}

void sub_25B50DBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  std::locale::~locale(&a41);
  sub_25B3F9500((uint64_t)&a47);
  if (a26) {
    sub_25B404120(a26);
  }
  uint64_t v49 = *(std::__shared_weak_count **)(v47 + 128);
  if (v49) {
    sub_25B404120(v49);
  }
  _Unwind_Resume(a1);
}

vImage_Error sub_25B50DC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vImagePixelCount v6 = *(void *)(a2 + 8);
  vImagePixelCount v13 = *(void *)(a2 + 16);
  vImagePixelCount v7 = v13;
  vImagePixelCount v14 = v6;
  sub_25B4578D0(&src, &v14, (uint64_t *)&v13);
  sub_25B496124(a1, 0, &src);
  vImagePixelCount v8 = *(void *)(a3 + 8);
  vImagePixelCount v9 = *(void *)(a3 + 16);
  src.width = v7;
  src.rowBytes = v7;
  src.data = *(void **)(a2 + 144);
  src.height = v6;
  v11.width = v7;
  v11.rowBytes = v7;
  v11.data = *(void **)(a1 + 144);
  v11.height = v6;
  return vImageDilate_Planar8(&src, &v11, 0, 0, *(const unsigned __int8 **)(a3 + 144), v8, v9, 0);
}

void sub_25B50DD20(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F1D50;
  long long v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B50DD54(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)a1 = &unk_2708F17C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v4 = 1;
  *(unsigned char *)(a1 + 136) = 1;
  long long v6 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 56) = 1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = 0;
  if (v7)
  {
    vImagePixelCount v9 = operator new(0x30uLL);
    char v4 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *vImagePixelCount v9 = &unk_2708F1D70;
    v9[4] = v7;
    *((unsigned char *)v9 + 40) = 0;
    *(void *)(a1 + 128) = v9;
    void v9[3] = a3;
    *(void *)(a1 + 120) = v9 + 3;
    *(void *)(a1 + 144) = a3;
  }
  *(unsigned char *)(a1 + 137) = v4;
  return a1;
}

void sub_25B50DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 137))
  {
    long long v6 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    vImagePixelCount v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_isin.hpp", 106);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    vImagePixelCount v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    vImage_Buffer v11 = sub_25B406B20(v10, (uint64_t)"isin", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    long long v12 = std::locale::use_facet(&v86, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    vImagePixelCount v13 = std::locale::use_facet(&v86, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a3 + 137))
  {
    vImagePixelCount v14 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v15 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    std::locale v16 = sub_25B406B20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_isin.hpp", 106);
    sub_25B406B20(v16, (uint64_t)" ", 1);
    uint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = sub_25B406B20(v17, (uint64_t)" ", 1);
    long long v19 = sub_25B406B20(v18, (uint64_t)"isin", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    long long v20 = std::locale::use_facet(&v86, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    long long v21 = std::locale::use_facet(&v86, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v22 = (unint64_t)&v74;
  sub_25B4641DC((uint64_t)&v86, a2);
  uint64_t v74 = &unk_2708F17C0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  long long v78 = *(_OWORD *)(a3 + 56);
  long long v79 = *(_OWORD *)(a3 + 72);
  long long v80 = *(_OWORD *)(a3 + 88);
  long long v81 = *(_OWORD *)(a3 + 104);
  long long v75 = *(_OWORD *)(a3 + 8);
  long long v76 = *(_OWORD *)(a3 + 24);
  long long v77 = *(_OWORD *)(a3 + 40);
  uint64_t v23 = *(void *)(a3 + 120);
  uint64_t v24 = *(std::__shared_weak_count **)(a3 + 128);
  uint64_t v70 = a1;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = v83;
    uint64_t v82 = v23;
    uint64_t v83 = v24;
    if (v25) {
      sub_25B404120(v25);
    }
  }
  else
  {
    uint64_t v82 = *(void *)(a3 + 120);
    uint64_t v83 = 0;
  }
  long long v26 = *(unsigned char **)(a3 + 144);
  int v85 = v26;
  __int16 v84 = *(_WORD *)(a3 + 136);
  uint64_t v27 = v90;
  uint64_t v28 = v88;
  *(_OWORD *)__p = 0u;
  long long v72 = 0u;
  float v73 = 1.0;
  if ((void)v81)
  {
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = &v26[v81];
    while (1)
    {
      unint64_t v32 = *v26;
      if (v29)
      {
        uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          unint64_t v22 = *v26;
          if (v29 <= v32) {
            unint64_t v22 = v32 % v29;
          }
        }
        else
        {
          unint64_t v22 = (v29 - 1) & v32;
        }
        unint64_t v34 = (uint64_t ***)*((void *)__p[0] + v22);
        if (v34)
        {
          for (uint64_t i = *v34; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v36 = (unint64_t)i[1];
            if (v36 == v32)
            {
              if (*((unsigned __int8 *)i + 16) == v32) {
                goto LABEL_83;
              }
            }
            else
            {
              if (v33.u32[0] > 1uLL)
              {
                if (v36 >= v29) {
                  v36 %= v29;
                }
              }
              else
              {
                v36 &= v29 - 1;
              }
              if (v36 != v22) {
                break;
              }
            }
          }
        }
      }
      long long v37 = operator new(0x18uLL);
      *long long v37 = 0;
      v37[1] = v32;
      *((unsigned char *)v37 + 16) = *v26;
      float v38 = (float)(unint64_t)(v30 + 1);
      if (!v29 || (float)(v73 * (float)v29) < v38) {
        break;
      }
LABEL_73:
      uint64_t v54 = __p[0];
      char v55 = (void *)*((void *)__p[0] + v22);
      if (v55)
      {
        *long long v37 = *v55;
      }
      else
      {
        *long long v37 = v72;
        *(void *)&long long v72 = v37;
        v54[v22] = &v72;
        if (!*v37) {
          goto LABEL_82;
        }
        unint64_t v56 = *(void *)(*v37 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v56 >= v29) {
            v56 %= v29;
          }
        }
        else
        {
          v56 &= v29 - 1;
        }
        char v55 = (char *)__p[0] + 8 * v56;
      }
      *char v55 = v37;
LABEL_82:
      uint64_t v30 = ++*((void *)&v72 + 1);
LABEL_83:
      if (++v26 == v31) {
        goto LABEL_94;
      }
    }
    BOOL v39 = (v29 & (v29 - 1)) != 0;
    if (v29 < 3) {
      BOOL v39 = 1;
    }
    unint64_t v40 = v39 | (2 * v29);
    unint64_t v41 = vcvtps_u32_f32(v38 / v73);
    if (v40 <= v41) {
      int8x8_t prime = (int8x8_t)v41;
    }
    else {
      int8x8_t prime = (int8x8_t)v40;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v29 = (unint64_t)__p[1];
    }
    if (*(void *)&prime > v29) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v29)
    {
      unint64_t v49 = vcvtps_u32_f32((float)*((unint64_t *)&v72 + 1) / v73);
      if (v29 < 3 || (uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        unint64_t v49 = std::__next_prime(v49);
      }
      else
      {
        uint64_t v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2) {
          unint64_t v49 = v51;
        }
      }
      if (*(void *)&prime <= v49) {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime >= v29)
      {
        unint64_t v29 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          char v43 = operator new(8 * *(void *)&prime);
          int v44 = __p[0];
          __p[0] = v43;
          if (v44) {
            operator delete(v44);
          }
          uint64_t v45 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v45++) = 0;
          while (*(void *)&prime != v45);
          uint64_t v46 = (void **)v72;
          if ((void)v72)
          {
            unint64_t v47 = *(void *)(v72 + 8);
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(void *)&prime) {
                v47 %= *(void *)&prime;
              }
            }
            else
            {
              v47 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v47) = &v72;
            for (j = *v46; j; unint64_t v47 = v53)
            {
              unint64_t v53 = j[1];
              if (v48.u32[0] > 1uLL)
              {
                if (v53 >= *(void *)&prime) {
                  v53 %= *(void *)&prime;
                }
              }
              else
              {
                v53 &= *(void *)&prime - 1;
              }
              if (v53 != v47)
              {
                if (!*((void *)__p[0] + v53))
                {
                  *((void *)__p[0] + v53) = v46;
                  goto LABEL_64;
                }
                *uint64_t v46 = (void *)*j;
                *uint64_t j = **((void **)__p[0] + v53);
                **((void **)__p[0] + v53) = j;
                uint64_t j = v46;
              }
              unint64_t v53 = v47;
LABEL_64:
              uint64_t v46 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v29 = (unint64_t)prime;
          goto LABEL_68;
        }
        uint64_t v57 = __p[0];
        __p[0] = 0;
        if (v57) {
          operator delete(v57);
        }
        unint64_t v29 = 0;
        __p[1] = 0;
      }
    }
LABEL_68:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v29 <= v32) {
        unint64_t v22 = v32 % v29;
      }
      else {
        unint64_t v22 = v32;
      }
    }
    else
    {
      unint64_t v22 = (v29 - 1) & v32;
    }
    goto LABEL_73;
  }
LABEL_94:
  uint64_t v58 = sub_25B51A998(v70, v87);
  if (v28)
  {
    uint64_t v59 = 0;
    uint64_t v60 = *(void *)(v58 + 144);
    unint64_t v62 = __p[0];
    unint64_t v61 = (unint64_t)__p[1];
    uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v63.i16[0] = vaddlv_u8(v63);
    unint64_t v64 = (unint64_t)__p[1] + 255;
    unint64_t v65 = (unint64_t)__p[1] - 1;
    do
    {
      if (v61)
      {
        unint64_t v66 = *(unsigned __int8 *)(v27 + v59);
        if (v63.u32[0] > 1uLL)
        {
          unint64_t v67 = *(unsigned __int8 *)(v27 + v59);
          if (v61 <= v66) {
            unint64_t v67 = v66 % v61;
          }
        }
        else
        {
          unint64_t v67 = v64 & v66;
        }
        unint64_t v68 = (uint64_t **)v62[v67];
        if (v68)
        {
          while (1)
          {
            unint64_t v68 = (uint64_t **)*v68;
            if (!v68) {
              break;
            }
            unint64_t v69 = (unint64_t)v68[1];
            if (v69 == v66)
            {
              if (*((unsigned __int8 *)v68 + 16) == v66) {
                break;
              }
            }
            else
            {
              if (v63.u32[0] > 1uLL)
              {
                if (v69 >= v61) {
                  v69 %= v61;
                }
              }
              else
              {
                v69 &= v65;
              }
              if (v69 != v67) {
                goto LABEL_111;
              }
            }
          }
        }
      }
      else
      {
LABEL_111:
        unint64_t v68 = 0;
      }
      *(unsigned char *)(v60 + v59++) = v68 != 0;
    }
    while (v59 != v28);
  }
  sub_25B3FB178((uint64_t)__p);
  uint64_t v74 = &unk_2708F17C0;
  if (v83) {
    sub_25B404120(v83);
  }
  v86.__locale_ = (std::locale::__imp *)&unk_2708F1D50;
  if (v89) {
    sub_25B404120(v89);
  }
}

void sub_25B50E718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,std::locale a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  a17 = a10;
  if (a33) {
    sub_25B404120(a33);
  }
  a36.__locale_ = (std::locale::__imp *)&unk_2708F1D50;
  if (a52) {
    sub_25B404120(a52);
  }
  _Unwind_Resume(a1);
}

void sub_25B50E7A0(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F1D50;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B4966CC((uint64_t)v6, v5);
}

void sub_25B50F408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  std::locale::~locale(&a21);
  sub_25B3F9500((uint64_t)&a27);
  unint64_t v29 = *(std::__shared_weak_count **)(v27 + 128);
  if (v29) {
    sub_25B404120(v29);
  }
  _Unwind_Resume(a1);
}

vImage_Error sub_25B50F468(uint64_t a1, uint64_t a2)
{
  vImagePixelCount v4 = *(void *)(a2 + 8);
  vImagePixelCount v9 = *(void *)(a2 + 16);
  vImagePixelCount v5 = v9;
  vImagePixelCount v10 = v4;
  sub_25B4578D0(&src, &v10, (uint64_t *)&v9);
  sub_25B496124(a1, 0, &src);
  src.width = v5;
  src.rowBytes = v5;
  src.data = *(void **)(a2 + 144);
  src.height = v4;
  v7.width = v5;
  v7.rowBytes = v5;
  v7.data = *(void **)(a1 + 144);
  v7.height = v4;
  return vImageErode_Planar8(&src, &v7, 0, 0, (const unsigned __int8 *)qword_26A502270, qword_26A5021E8, unk_26A5021F0, 0);
}

void sub_25B50F504(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F1D50;
  long long v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B50F538(uint64_t a1, void *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  sub_25B458194((uint64_t)&v2, *a2 * a2[1]);
}

void sub_25B5103F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  if (a26) {
    sub_25B404120(a26);
  }
  _Unwind_Resume(a1);
}

void sub_25B5104AC(unint64_t a1, unint64_t k, uint64_t a3, char a4)
{
void *sub_25B511CF0(void *a1)
{
  a1[75] = &unk_2708F1D50;
  std::locale v2 = (std::__shared_weak_count *)a1[91];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[50] = &unk_2708F1D50;
  uint64_t v3 = (std::__shared_weak_count *)a1[66];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[12] = &unk_2708F1C28;
  BOOL v4 = (std::__shared_weak_count *)a1[28];
  if (v4) {
    sub_25B404120(v4);
  }
  return a1;
}

void *sub_25B511D98(void *a1)
{
  a1[44] = &unk_2708F1D50;
  std::locale v2 = (std::__shared_weak_count *)a1[60];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[6] = &unk_2708F1C28;
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void sub_25B511E14(void ***a1)
{
  uint64_t v1 = *a1;
  std::locale v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_25B511F50(v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B511E98(void *a1)
{
  *a1 = &unk_2708F17C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B511F04(void *a1)
{
  *a1 = &unk_2708F17C0;
  std::locale v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B511F50(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    std::locale v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *sub_25B511FA8(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    sub_25B3FA70C();
  }
  return operator new(80 * a1);
}

uint64_t sub_25B511FF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_25B4002F4((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  BOOL v5 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_25B4002F4(v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)BOOL v5 = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

void sub_25B512094(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B5120B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_25B511F50(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B512100(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_25B4002F4((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  BOOL v5 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_25B4002F4(v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)BOOL v5 = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

void sub_25B5121A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B5121C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t sub_25B51220C(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 137)) {
    sub_25B515880(a2, a3);
  }
  return 0;
}

void sub_25B5141A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  if (STACK[0x310]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x310]);
  }
  sub_25B518978(&STACK[0x770]);
  sub_25B518A20(&a21);
  a21 = (void **)&STACK[0x330];
  sub_25B5188B8(&a21);
  STACK[0x348] = a12;
  if (STACK[0x3C8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3C8]);
  }
  STACK[0x3E0] = (unint64_t)&unk_2708F1900;
  if (STACK[0x460]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x460]);
  }
  STACK[0x478] = (unint64_t)&unk_2708F1900;
  if (STACK[0x4F8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4F8]);
  }
  STACK[0x510] = (unint64_t)&unk_2708F1A28;
  if (STACK[0x590]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x590]);
  }
  STACK[0x5A8] = (unint64_t)&unk_2708F1A28;
  if (STACK[0x628]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x628]);
  }
  sub_25B518AC8(&STACK[0x640]);
  _Unwind_Resume(a1);
}

void sub_25B5145A4(uint64_t a1, uint64_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (!*(unsigned char *)(a2 + 137))
  {
    unint64_t v5 = *(void *)(a2 + 104);
    if (v5)
    {
      vImagePixelCount v8 = 0;
      vImagePixelCount v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      int32x2_t v12 = (int32x2_t)vsub_f32(a4, a3);
      int32x2_t v13 = (int32x2_t)vmul_f32((float32x2_t)v12, (float32x2_t)v12);
      *(float *)v13.i32 = sqrtf(vaddv_f32((float32x2_t)v13));
      float v14 = *(float *)v13.i32 * 0.5;
      int32x2_t v15 = (int32x2_t)vdiv_f32((float32x2_t)v12, (float32x2_t)vdup_lane_s32(v13, 0));
      float v16 = *(float *)&v15.i32[1];
      uint64_t v17 = *(void *)(a2 + 144);
      uint64_t v18 = *(void *)(a2 + 16);
      *(float *)v12.i32 = -*(float *)&v15.i32[1];
      float v43 = *(float *)v15.i32;
      float32x2_t v19 = (float32x2_t)vzip1_s32(v12, v15);
      int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
      *(float *)v20.i32 = sqrtf(vaddv_f32((float32x2_t)v20));
      float32x2_t v21 = vdiv_f32(v19, (float32x2_t)vdup_lane_s32(v20, 0));
      float32x2_t v22 = vmul_f32(vadd_f32(a3, a4), (float32x2_t)0x3F0000003F000000);
      float v41 = v22.f32[0];
      float v42 = v21.f32[0];
      float v23 = v22.f32[1];
      float v24 = v21.f32[1];
      do
      {
        int v25 = (unint64_t *)(v17 + 8 * v11);
        float v26 = (float)*v25 - v41;
        float v27 = (float)v25[1] - v23;
        BOOL v29 = fabsf((float)(v16 * v27) + (float)(v26 * v43)) < v14;
        float v28 = fabsf((float)(v24 * v27) + (float)(v26 * v42));
        BOOL v29 = v29 && v28 < a5;
        if (v29)
        {
          if ((unint64_t)v9 >= v10)
          {
            uint64_t v30 = (v9 - v8) >> 3;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v10 - (void)v8) >> 2 > v31) {
              unint64_t v31 = (uint64_t)(v10 - (void)v8) >> 2;
            }
            if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              unint64_t v32 = (unint64_t)sub_25B3FCAD4(v32);
            }
            else {
              uint64_t v33 = 0;
            }
            unint64_t v34 = (char *)(v32 + 8 * v30);
            *(void *)unint64_t v34 = v11;
            char v35 = v34 + 8;
            while (v9 != v8)
            {
              uint64_t v36 = *((void *)v9 - 1);
              v9 -= 8;
              *((void *)v34 - 1) = v36;
              v34 -= 8;
            }
            unint64_t v10 = v32 + 8 * v33;
            if (v8) {
              operator delete(v8);
            }
            vImagePixelCount v8 = v34;
            vImagePixelCount v9 = v35;
          }
          else
          {
            *(void *)vImagePixelCount v9 = v11;
            v9 += 8;
          }
        }
        v11 += v18;
      }
      while (v11 < v5);
      if (v9 != v8)
      {
        sub_25B515774((char **)a1, (v9 - v8) >> 3);
        long long v37 = *(float32x2_t **)a1;
        unint64_t v38 = (v9 - v8) >> 3;
        if (v38 <= 1) {
          unint64_t v38 = 1;
        }
        float v39 = v8;
        do
        {
          uint64_t v40 = *(void *)v39;
          v39 += 8;
          *v37++ = vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(v17 + 8 * v40)));
          --v38;
        }
        while (v38);
      }
      if (v8)
      {
        operator delete(v8);
      }
    }
  }
}

void sub_25B514818(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B514848(uint64_t a1, float a2, float a3, float a4)
{
  float v5 = a2;
  unint64_t v7 = vcvtpd_u64_f64((float)(a3 - a2) / a4);
  if (!v7)
  {
    vImagePixelCount v8 = (void *)MEMORY[0x263F8C0F8];
    vImagePixelCount v9 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v10 = sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/construction.hpp", 105);
    sub_25B406B20(v10, (uint64_t)" ", 1);
    unint64_t v11 = (void *)std::ostream::operator<<();
    int32x2_t v12 = sub_25B406B20(v11, (uint64_t)" ", 1);
    int32x2_t v13 = sub_25B406B20(v12, (uint64_t)"arange", 6);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    float v14 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(__b);
    std::ostream::put();
    std::ostream::flush();
    int32x2_t v15 = sub_25B406B20(v8, (uint64_t)"err", 3);
    float v16 = sub_25B406B20(v15, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"empty range", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v17 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(__b);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v18 = std::locale::use_facet(__b, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(__b);
    std::ostream::put();
    std::ostream::flush();
  }
  float32x2_t v19 = (char *)operator new(8uLL);
  *(void *)float32x2_t v19 = v7;
  v21[1] = v19 + 8;
  std::locale v21[2] = v19 + 8;
  v21[0] = v19;
  sub_25B45CA68(__b, v21);
  sub_25B459378(a1, __b);
  operator delete(v19);
  if (v7)
  {
    int32x2_t v20 = *(float **)(a1 + 144);
    do
    {
      *v20++ = v5;
      float v5 = v5 + a4;
      --v7;
    }
    while (v7);
  }
}

void sub_25B514B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
}

float *sub_25B514B38(float *result, float *a2, uint64_t a3, char a4)
{
  vImagePixelCount v9 = result;
LABEL_2:
  unint64_t v10 = a2 - 1;
  unint64_t v11 = v9;
  while (1)
  {
    vImagePixelCount v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v41 = *v11;
          if (fabsf(*v10) < fabsf(*v11))
          {
            *unint64_t v11 = *v10;
            float *v10 = v41;
          }
          break;
        case 3uLL:
          BOOL result = sub_25B515448(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          BOOL result = sub_25B5154D0(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          float v42 = v11 + 1;
          float v43 = v11 + 2;
          int v44 = v11 + 3;
          BOOL result = sub_25B5154D0(v11, v11 + 1, v11 + 2, v11 + 3);
          float v45 = v11[3];
          if (fabsf(*v10) < fabsf(v45))
          {
            *int v44 = *v10;
            float *v10 = v45;
            int v46 = *(_DWORD *)v44;
            float v47 = fabsf(*v44);
            float v48 = *v43;
            if (v47 < fabsf(*v43))
            {
              *(_DWORD *)float v43 = v46;
              *int v44 = v48;
              float v49 = *v42;
              if (v47 < fabsf(*v42))
              {
                *((_DWORD *)v11 + 1) = v46;
                void v11[2] = v49;
                float v50 = *v11;
                if (v47 < fabsf(*v11))
                {
                  *(_DWORD *)unint64_t v11 = v46;
                  v11[1] = v50;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 95) {
      break;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v62 = (v13 - 2) >> 1;
      int64_t v63 = v62;
      do
      {
        int64_t v64 = v63;
        if (v62 >= v63)
        {
          uint64_t v65 = (2 * v63) | 1;
          unint64_t v66 = &v11[v65];
          if (2 * v64 + 2 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
          {
            ++v66;
            uint64_t v65 = 2 * v64 + 2;
          }
          BOOL v67 = &v11[v64];
          float v68 = *v66;
          float v69 = *v67;
          float v70 = fabsf(*v67);
          if (fabsf(*v66) >= v70)
          {
            do
            {
              *BOOL v67 = v68;
              BOOL v67 = v66;
              if (v62 < v65) {
                break;
              }
              uint64_t v71 = 2 * v65;
              uint64_t v65 = (2 * v65) | 1;
              unint64_t v66 = &v11[v65];
              uint64_t v72 = v71 + 2;
              if (v72 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
              {
                ++v66;
                uint64_t v65 = v72;
              }
              float v68 = *v66;
            }
            while (fabsf(*v66) >= v70);
            *BOOL v67 = v69;
          }
        }
        int64_t v63 = v64 - 1;
      }
      while (v64);
      uint64_t v73 = (unint64_t)v12 >> 2;
      while (2)
      {
        uint64_t v74 = 0;
        float v75 = *v11;
        long long v76 = v11;
        do
        {
          char v77 = v76;
          v76 += v74 + 1;
          uint64_t v78 = 2 * v74;
          uint64_t v74 = (2 * v74) | 1;
          uint64_t v79 = v78 + 2;
          if (v79 < v73 && fabsf(*v76) < fabsf(v76[1]))
          {
            ++v76;
            uint64_t v74 = v79;
          }
          float *v77 = *v76;
        }
        while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
        if (v76 == --a2)
        {
LABEL_111:
          float *v76 = v75;
        }
        else
        {
          float *v76 = *a2;
          *a2 = v75;
          uint64_t v80 = (char *)v76 - (char *)v11 + 4;
          if (v80 >= 5)
          {
            unint64_t v81 = (((unint64_t)v80 >> 2) - 2) >> 1;
            int v82 = &v11[v81];
            float v83 = *v82;
            float v75 = *v76;
            float v84 = fabsf(*v76);
            if (fabsf(*v82) < v84)
            {
              do
              {
                float *v76 = v83;
                long long v76 = v82;
                if (!v81) {
                  break;
                }
                unint64_t v81 = (v81 - 1) >> 1;
                int v82 = &v11[v81];
                float v83 = *v82;
              }
              while (fabsf(*v82) < v84);
              goto LABEL_111;
            }
          }
        }
        if (v73-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v14 = v13 >> 1;
    int32x2_t v15 = &v11[v13 >> 1];
    if ((unint64_t)v12 >= 0x201)
    {
      sub_25B515448(v9, &v9[v13 >> 1], a2 - 1);
      sub_25B515448(v9 + 1, v15 - 1, a2 - 2);
      sub_25B515448(v9 + 2, &v9[v14 + 1], a2 - 3);
      BOOL result = sub_25B515448(v15 - 1, v15, &v9[v14 + 1]);
      float v16 = *v9;
      *vImagePixelCount v9 = *v15;
      float *v15 = v16;
    }
    else
    {
      BOOL result = sub_25B515448(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    float v17 = *v9;
    if (a4)
    {
      float v18 = fabsf(v17);
LABEL_13:
      float32x2_t v19 = v9;
      do
      {
        int32x2_t v20 = v19;
        float v21 = v19[1];
        ++v19;
        float v22 = v21;
      }
      while (fabsf(v21) < v18);
      float v23 = a2;
      if (v20 == v9)
      {
        float v23 = a2;
        do
        {
          if (v19 >= v23) {
            break;
          }
          float v25 = *--v23;
        }
        while (fabsf(v25) >= v18);
      }
      else
      {
        do
          float v24 = *--v23;
        while (fabsf(v24) >= v18);
      }
      if (v19 < v23)
      {
        float v26 = *v23;
        float v27 = v19;
        float v28 = v23;
        do
        {
          float *v27 = v26;
          float *v28 = v22;
          do
          {
            int32x2_t v20 = v27;
            float v29 = v27[1];
            ++v27;
            float v22 = v29;
          }
          while (fabsf(v29) < v18);
          do
          {
            float v30 = *--v28;
            float v26 = v30;
          }
          while (fabsf(v30) >= v18);
        }
        while (v27 < v28);
      }
      if (v20 != v9) {
        *vImagePixelCount v9 = *v20;
      }
      *int32x2_t v20 = v17;
      if (v19 < v23) {
        goto LABEL_32;
      }
      BOOL v31 = sub_25B515568(v9, v20);
      unint64_t v11 = v20 + 1;
      BOOL result = (float *)sub_25B515568(v20 + 1, a2);
      if (result)
      {
        a2 = v20;
        if (v31) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v31)
      {
LABEL_32:
        BOOL result = (float *)sub_25B514B38(v9, v20, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v20 + 1;
      }
    }
    else
    {
      float v18 = fabsf(v17);
      if (fabsf(*(v9 - 1)) < v18) {
        goto LABEL_13;
      }
      if (v18 >= fabsf(*v10))
      {
        uint64_t v33 = v9 + 1;
        do
        {
          unint64_t v11 = v33;
          if (v33 >= a2) {
            break;
          }
          ++v33;
        }
        while (v18 >= fabsf(*v11));
      }
      else
      {
        unint64_t v11 = v9;
        do
        {
          float v32 = v11[1];
          ++v11;
        }
        while (v18 >= fabsf(v32));
      }
      unint64_t v34 = a2;
      if (v11 < a2)
      {
        unint64_t v34 = a2;
        do
          float v35 = *--v34;
        while (v18 < fabsf(v35));
      }
      if (v11 < v34)
      {
        float v36 = *v11;
        float v37 = *v34;
        do
        {
          *unint64_t v11 = v37;
          float *v34 = v36;
          do
          {
            float v38 = v11[1];
            ++v11;
            float v36 = v38;
          }
          while (v18 >= fabsf(v38));
          do
          {
            float v39 = *--v34;
            float v37 = v39;
          }
          while (v18 < fabsf(v39));
        }
        while (v11 < v34);
      }
      uint64_t v40 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *vImagePixelCount v9 = *v40;
      }
      a4 = 0;
      float *v40 = v17;
    }
  }
  BOOL v51 = v11 + 1;
  BOOL v53 = v11 == a2 || v51 == a2;
  if (a4)
  {
    if (!v53)
    {
      uint64_t v54 = 4;
      char v55 = v11;
      do
      {
        float v57 = *v55;
        float v56 = v55[1];
        char v55 = v51;
        float v58 = fabsf(v56);
        if (v58 < fabsf(v57))
        {
          uint64_t v59 = v54;
          do
          {
            *(float *)((char *)v11 + v59) = v57;
            uint64_t v60 = v59 - 4;
            if (v59 == 4)
            {
              unint64_t v61 = v11;
              goto LABEL_83;
            }
            float v57 = *(float *)((char *)v11 + v59 - 8);
            v59 -= 4;
          }
          while (v58 < fabsf(v57));
          unint64_t v61 = (float *)((char *)v11 + v60);
LABEL_83:
          *unint64_t v61 = v56;
        }
        BOOL v51 = v55 + 1;
        v54 += 4;
      }
      while (v55 + 1 != a2);
    }
  }
  else if (!v53)
  {
    do
    {
      float v87 = *v9;
      float v86 = v9[1];
      vImagePixelCount v9 = v51;
      float v88 = fabsf(v86);
      if (v88 < fabsf(v87))
      {
        int v89 = v51;
        do
        {
          *int v89 = v87;
          float v87 = *(v89 - 2);
          --v89;
        }
        while (v88 < fabsf(v87));
        *int v89 = v86;
      }
      ++v51;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

float sub_25B515260(float32x2_t *a1, float32x2_t *a2, float32x2_t a3, float32x2_t a4, float a5)
{
  if (a1 == a2) {
    return 0.0;
  }
  unint64_t v7 = a1;
  float32x2_t v8 = vmul_f32(vadd_f32(a3, a4), (float32x2_t)0x3F0000003F000000);
  float32x2_t v9 = vsub_f32(a3, a4);
  float v10 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  int32x2_t v11 = (int32x2_t)vsub_f32(a4, a3);
  int32x2_t v12 = (int32x2_t)vmul_f32((float32x2_t)v11, (float32x2_t)v11);
  v12.i32[0] = vadd_f32((float32x2_t)v12, (float32x2_t)vdup_lane_s32(v12, 1)).u32[0];
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  int32x2_t v15 = (int32x2_t)vmul_n_f32((float32x2_t)v11, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
  *(float *)v11.i32 = -*(float *)&v15.i32[1];
  float32x2_t v29 = (float32x2_t)v15;
  float32x2_t v16 = (float32x2_t)vzip1_s32(v11, v15);
  int32x2_t v17 = (int32x2_t)vmul_f32(v16, v16);
  *(float *)v17.i32 = sqrtf(vaddv_f32((float32x2_t)v17));
  float32x2_t v18 = vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v17, 0));
  long long v30 = 0u;
  long long v31 = 0u;
  int v32 = 1065353216;
  do
  {
    float32x2_t v19 = vadd_f32(vsub_f32(*v7, v8), (float32x2_t)0x3F0000003F000000);
    if (fabsf(vaddv_f32(vmul_f32(v18, v19))) <= a5)
    {
      float v20 = vaddv_f32(vmul_f32(v29, v19)) * 0.25;
      float v21 = -v20;
      if (v20 >= 0.0) {
        float v21 = v20;
      }
      int v22 = (int)v21;
      float v23 = v21 - (float)(int)v21;
      if (v23 < 0.5) {
        int v24 = v22;
      }
      else {
        int v24 = v22 + 1;
      }
      int v25 = (v22 & 1) + v22;
      if (v23 != 0.5) {
        int v25 = v24;
      }
      if (v20 >= 0.0) {
        int v26 = v25;
      }
      else {
        int v26 = -v25;
      }
      sub_25B3FAF64((uint64_t)&v30, v26, v26);
    }
    ++v7;
  }
  while (v7 != a2);
  float v27 = (float)*((unint64_t *)&v31 + 1) / (float)(v10 * 0.25);
  sub_25B3FB178((uint64_t)&v30);
  return v27;
}

void sub_25B5153F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_25B3FB178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B515404(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

float *sub_25B515448(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = fabsf(*a2);
  float v5 = *result;
  float v6 = fabsf(*result);
  float v7 = *a3;
  float v8 = fabsf(*a3);
  if (v4 >= v6)
  {
    if (v8 < v4)
    {
      *a2 = v7;
      *a3 = v3;
      float v9 = *result;
      if (fabsf(*a2) < fabsf(*result))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v4)
    {
      *BOOL result = v3;
      *a2 = v5;
      if (fabsf(*a3) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v5;
  }
  return result;
}

float *sub_25B5154D0(float *a1, float *a2, float *a3, float *a4)
{
  BOOL result = sub_25B515448(a1, a2, a3);
  float v9 = *a3;
  if (fabsf(*a4) < fabsf(*a3))
  {
    *a3 = *a4;
    *a4 = v9;
    float v10 = *a2;
    if (fabsf(*a3) < fabsf(*a2))
    {
      *a2 = *a3;
      *a3 = v10;
      float v11 = *a1;
      if (fabsf(*a2) < fabsf(*a1))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL sub_25B515568(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = *a1;
      if (fabsf(v6) < fabsf(*a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_25B515448(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_25B5154D0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      float32x2_t v18 = a1 + 1;
      float32x2_t v19 = a1 + 2;
      float v20 = a1 + 3;
      sub_25B5154D0(a1, a1 + 1, a1 + 2, a1 + 3);
      float v21 = *(a2 - 1);
      float v22 = a1[3];
      if (fabsf(v21) < fabsf(v22))
      {
        *float v20 = v21;
        *(a2 - 1) = v22;
        int v23 = *(_DWORD *)v20;
        float v24 = fabsf(*v20);
        float v25 = *v19;
        if (v24 < fabsf(*v19))
        {
          *(_DWORD *)float32x2_t v19 = v23;
          *float v20 = v25;
          float v26 = *v18;
          if (v24 < fabsf(*v18))
          {
            *((_DWORD *)a1 + 1) = v23;
            a1[2] = v26;
            float v27 = *a1;
            if (v24 < fabsf(*a1))
            {
              *(_DWORD *)a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      float v8 = a1 + 2;
      sub_25B515448(a1, a1 + 1, a1 + 2);
      float v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    float v12 = *v9;
    float v13 = fabsf(*v9);
    float v14 = *v8;
    if (v13 < fabsf(*v8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(float *)((char *)a1 + v15) = v14;
        uint64_t v16 = v15 - 4;
        if (v15 == 4) {
          break;
        }
        float v14 = *(float *)((char *)a1 + v15 - 8);
        v15 -= 4;
        if (v13 >= fabsf(v14))
        {
          int32x2_t v17 = (float *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int32x2_t v17 = a1;
LABEL_13:
      float *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    float v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void sub_25B515774(char **a1, unint64_t a2)
{
  float v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float32x2_t v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  float v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    float32x2_t v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    sub_25B3FBC4C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)sub_25B3FCAD4(v10);
  float v12 = &v11[8 * v5];
  float v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  uint64_t v15 = &v12[8 * v6];
  int32x2_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_25B515880(double a1, double a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = vcgt_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2).u8[0];
  BOOL v3 = (v2 & 1) == 0;
  if (v2) {
    float v4 = *(float *)&a2;
  }
  else {
    float v4 = *(float *)&a1;
  }
  if (v2) {
    float v5 = *(float *)&a1;
  }
  else {
    float v5 = *(float *)&a2;
  }
  int8x8_t v6 = (int8x8_t)vzip2_s32(*(int32x2_t *)&a2, *(int32x2_t *)&a1);
  int8x8_t v7 = (int8x8_t)vzip2_s32(*(int32x2_t *)&a1, *(int32x2_t *)&a2);
  if (v3) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = -1;
  }
  int8x8_t v9 = vbsl_s8((int8x8_t)vdup_n_s32(v8), v7, v6);
  if (vabds_f32(v4, v5) > 0.00000001)
  {
    sub_25B514848((uint64_t)&v12, v4, v5, 3.0);
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)&v13[0].__locale_ = 0u;
    sub_25B45E3AC((uint64_t)&v16, (uint64_t)&v12);
    *(_OWORD *)&v13[0].__locale_ = v17;
    long long v14 = v18;
    long long v15 = v19;
    *(_OWORD *)&v20[0].__locale_ = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = v17;
    long long v24 = v18;
    long long v25 = v19;
    sub_25B45E3AC((uint64_t)&v26, (uint64_t)&v16);
    *(_OWORD *)&v20[0].__locale_ = v23;
    long long v21 = v24;
    long long v22 = v25;
    sub_25B519624((uint64_t)v27, v20);
  }
  if (*(float *)&v9.i32[1] <= *(float *)v9.i32) {
    float v10 = *(float *)&v9.i32[1];
  }
  else {
    float v10 = *(float *)v9.i32;
  }
  if (*(float *)&v9.i32[1] <= *(float *)v9.i32) {
    float v11 = *(float *)v9.i32;
  }
  else {
    float v11 = *(float *)&v9.i32[1];
  }
  sub_25B514848((uint64_t)v28, v10, v11, 3.0);
  sub_25B45E3AC((uint64_t)&v16, (uint64_t)v28);
  *(_OWORD *)&v13[0].__locale_ = v17;
  long long v14 = v18;
  long long v15 = v19;
  *(_OWORD *)&v20[0].__locale_ = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = v17;
  long long v24 = v18;
  long long v25 = v19;
  sub_25B45E3AC((uint64_t)&v26, (uint64_t)&v16);
  *(_OWORD *)&v20[0].__locale_ = v23;
  long long v21 = v24;
  long long v22 = v25;
  sub_25B519624((uint64_t)&v12, v20);
}

void sub_25B517780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    sub_25B404120(a29);
  }
  if (STACK[0x200]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x200]);
  }
  STACK[0x4C0] = a9;
  if (STACK[0x540]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x540]);
  }
  STACK[0x558] = (unint64_t)&unk_2708F1A28;
  if (STACK[0x5D8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x5D8]);
  }
  _Unwind_Resume(a1);
}

void sub_25B517B68(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1900;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B457F00((uint64_t)v5, v4);
}

void sub_25B518684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale((std::locale *)(v16 - 128));
  sub_25B3F9500((uint64_t)&a15);
  long long v18 = *(std::__shared_weak_count **)(v15 + 128);
  if (v18) {
    sub_25B404120(v18);
  }
  _Unwind_Resume(a1);
}

void sub_25B5186E4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_25B46BF04((uint64_t)&v22, a3);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(void *)a1 = &unk_2708F1DA8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = *(void *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = v7;
    if (v8) {
      sub_25B404120(v8);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  long long v12 = v22;
  unint64_t v13 = (v23 - (uint64_t)v22) >> 3;
  long long v14 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v14;
  uint64_t v15 = a1 + 56;
  char v16 = 1;
  do
  {
    char v17 = v16;
    if (v10 < v13 && v11 == v12[v10])
    {
      *(void *)(v5 + 8 * v11) = 1;
      *(void *)(v15 + 8 * v11) = 0;
      ++v10;
    }
    else
    {
      *(void *)(v5 + 8 * v11) = *(void *)(a2 + 8 + 8 * v9);
      *(void *)(v15 + 8 * v11) = *(void *)(a2 + 56 + 8 * v9++);
    }
    char v16 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  uint64_t v18 = 0;
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v19 = 1;
  while (1)
  {
    uint64_t v20 = *(void *)(a1 + v18 + 16);
    if (v20 != 1) {
      break;
    }
LABEL_15:
    v18 -= 8;
    if (v18 == -16)
    {
      char v21 = 1;
      goto LABEL_18;
    }
  }
  if (*(void *)(a1 + v18 + 64) == v19)
  {
    v19 *= v20;
    goto LABEL_15;
  }
  char v21 = 0;
LABEL_18:
  *(unsigned char *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = **(void **)(a1 + 120) + 8 * *((void *)&v14 + 1);
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_25B5188A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5188B8(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 152;
      uint64_t v7 = v4 - 152;
      unsigned int v8 = v4 - 152;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_25B518978(void *a1)
{
  a1[56] = &unk_2708F1DA8;
  long long v2 = (std::__shared_weak_count *)a1[72];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[37] = &unk_2708F1E00;
  long long v3 = (std::__shared_weak_count *)a1[53];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[12] = &unk_2708F1DA8;
  uint64_t v4 = (std::__shared_weak_count *)a1[28];
  if (v4) {
    sub_25B404120(v4);
  }
  return a1;
}

void *sub_25B518A20(void *a1)
{
  a1[50] = &unk_2708F1DA8;
  long long v2 = (std::__shared_weak_count *)a1[66];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[31] = &unk_2708F1E00;
  long long v3 = (std::__shared_weak_count *)a1[47];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[6] = &unk_2708F1DA8;
  uint64_t v4 = (std::__shared_weak_count *)a1[22];
  if (v4) {
    sub_25B404120(v4);
  }
  return a1;
}

void *sub_25B518AC8(void *a1)
{
  a1[19] = &unk_2708F1A28;
  long long v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    sub_25B404120(v2);
  }
  *a1 = &unk_2708F1A28;
  long long v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

uint64_t sub_25B518B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(v13, 0, sizeof(v13));
  int v3 = *(unsigned __int8 *)(a1 + 184);
  uint64_t v4 = *(void *)(a1 + 192);
  char v5 = 1;
  do
  {
    char v6 = v5;
    if (v3) {
      uint64_t v7 = v2 | (2 * a2);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 104) * a2 + *(void *)(a1 + 112) * v2;
    }
    char v5 = 0;
    *((void *)v13 + v2) = *(void *)(v4 + 8 * v7);
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 1;
  do
  {
    char v11 = v10;
    v9 += *(void *)(a1 + 200 + 8 * v8) * *((void *)v13 + v8);
    uint64_t v8 = 1;
    char v10 = 0;
  }
  while ((v11 & 1) != 0);
  if (!*(unsigned char *)(a1 + 384)) {
    uint64_t v9 = *(void *)(a1 + 304) * *(void *)&v13[0] + *(void *)(a1 + 312) * *((void *)&v13[0] + 1);
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 392) + v9);
}

uint64_t sub_25B518C2C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v138 = *MEMORY[0x263EF8340];
  char v5 = (_OWORD *)(result + 8);
  char v6 = (_OWORD *)(a2 + 8);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v5 + v4);
    uint64_t v9 = *((void *)v6 + v4);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v4 = 1;
  }
  while (v8 == v9);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      uint64_t v10 = *(void *)(result + 104);
      char v11 = *(void **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v10)
        {
          long long v12 = *(uint64_t **)(a2 + 144);
          do
          {
            uint64_t v13 = *v12++;
            *v11++ = v13;
            --v10;
          }
          while (v10);
        }
      }
      else if (v10)
      {
        uint64_t v73 = 0;
        uint64_t v74 = *(void *)(a2 + 144);
        do
        {
          uint64_t v75 = 0;
          BOOL result = *(void *)(v3 + 64);
          v11[*(void *)(v3 + 56) * (void)v123 + result * *((void *)&v123 + 1)] = *(void *)(v74 + 8 * v73);
          do
          {
            uint64_t v76 = *(void *)((char *)&v123 + v75 + 8) + 1;
            *(void *)((char *)&v123 + v75 + 8) = v76;
            if (v76 != *(void *)(v3 + 16 + v75)) {
              break;
            }
            *(void *)((char *)&v123 + v75 + 8) = 0;
            v75 -= 8;
          }
          while (v75 != -16);
          ++v73;
        }
        while (v73 != v10);
      }
    }
    else
    {
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      uint64_t v40 = *(void *)(result + 104);
      uint64_t v41 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(a2 + 144);
          do
          {
            uint64_t v44 = 0;
            BOOL result = *(void *)(a2 + 64);
            *(void *)(v41 + 8 * v42) = *(void *)(v43
                                                   + 8 * (*(void *)(a2 + 56) * v123 + result * *((void *)&v123 + 1)));
            do
            {
              uint64_t v45 = *(void *)((char *)&v123 + v44 + 8) + 1;
              *(void *)((char *)&v123 + v44 + 8) = v45;
              if (v45 != *(void *)(v3 + 16 + v44)) {
                break;
              }
              *(void *)((char *)&v123 + v44 + 8) = 0;
              v44 -= 8;
            }
            while (v44 != -16);
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v93 = 0;
        uint64_t v94 = *(void *)(a2 + 144);
        do
        {
          uint64_t v95 = 0;
          BOOL result = *(void *)(a2 + 56);
          *(void *)(v41 + 8 * (*(void *)(v3 + 56) * v123 + *(void *)(v3 + 64) * *((void *)&v123 + 1))) = *(void *)(v94 + 8 * (result * v123 + *(void *)(a2 + 64) * *((void *)&v123 + 1)));
          do
          {
            uint64_t v96 = *(void *)((char *)&v123 + v95 + 8) + 1;
            *(void *)((char *)&v123 + v95 + 8) = v96;
            if (v96 != *(void *)(v3 + 16 + v95)) {
              break;
            }
            *(void *)((char *)&v123 + v95 + 8) = 0;
            v95 -= 8;
          }
          while (v95 != -16);
          ++v93;
        }
        while (v93 != v40);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v136 = 0uLL;
      long long v137 = 0uLL;
      long long v134 = 0uLL;
      long long v135 = 0uLL;
      long long v132 = 0uLL;
      long long v133 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v114 = 0uLL;
      sub_25B40AB84((uint64_t)&v123, v5, v6, (uint64_t)&v114);
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        uint64_t v16 = *((void *)&v114 + v14);
        uint64_t v17 = *((void *)v5 + v14);
        if ((v15 & 1) == 0) {
          break;
        }
        char v15 = 0;
        uint64_t v14 = 1;
      }
      while (v16 == v17);
      if (v16 != v17)
      {
        uint64_t v18 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v19 = sub_25B406B20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v19, (uint64_t)" ", 1);
        uint64_t v20 = (void *)MEMORY[0x263F8C0F8];
        char v21 = (void *)std::ostream::operator<<();
        sub_25B406B20(v21, (uint64_t)" ", 1);
        sub_25B406B20(v21, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        long long v22 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v23 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      *(_OWORD *)&v120[0].__locale_ = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      uint64_t v24 = *(void *)(v3 + 104);
      uint64_t v25 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v24)
        {
          uint64_t v26 = 0;
          float v28 = (uint64_t *)*((void *)&v124 + 1);
          float v27 = (uint64_t *)v125;
          unint64_t v29 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 144);
          do
          {
            long long v117 = *(_OWORD *)&v120[0].__locale_;
            if (v27 != v28)
            {
              long long v31 = v28;
              unint64_t v32 = v29;
              do
              {
                uint64_t v33 = *v31++;
                *((void *)&v117 + v33) = 0;
                --v32;
              }
              while (v32);
            }
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            char v36 = 1;
            do
            {
              char v37 = v36;
              v35 += *((void *)&v135 + v34) * *((void *)&v117 + v34);
              uint64_t v34 = 1;
              char v36 = 0;
            }
            while ((v37 & 1) != 0);
            *(void *)(v25 + 8 * v26) = *(void *)(v30 + 8 * v35);
            for (uint64_t i = 1; i != -1; --i)
            {
              float v39 = (std::locale::__imp *)((char *)v120[i].__locale_ + 1);
              v120[i].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)&v114 + i * 8)) {
                break;
              }
              v120[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v24);
        }
      }
      else if (v24)
      {
        uint64_t v77 = 0;
        uint64_t v79 = (uint64_t *)*((void *)&v124 + 1);
        uint64_t v78 = (uint64_t *)v125;
        unint64_t v80 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
        if (v80 <= 1) {
          unint64_t v80 = 1;
        }
        uint64_t v81 = *(void *)(a2 + 144);
        do
        {
          locale = v120[0].__locale_;
          float v83 = v120[1].__locale_;
          long long v117 = *(_OWORD *)&v120[0].__locale_;
          if (v78 != v79)
          {
            float v84 = v79;
            unint64_t v85 = v80;
            do
            {
              uint64_t v86 = *v84++;
              *((void *)&v117 + v86) = 0;
              --v85;
            }
            while (v85);
          }
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          char v89 = 1;
          do
          {
            char v90 = v89;
            v88 += *((void *)&v135 + v87) * *((void *)&v117 + v87);
            uint64_t v87 = 1;
            char v89 = 0;
          }
          while ((v90 & 1) != 0);
          *(void *)(v25 + 8 * (*(void *)(v3 + 56) * (void)locale + *(void *)(v3 + 64) * (void)v83)) = *(void *)(v81 + 8 * v88);
          for (uint64_t j = 1; j != -1; --j)
          {
            BOOL v92 = (std::locale::__imp *)((char *)v120[j].__locale_ + 1);
            v120[j].__locale_ = v92;
            if (v92 != *(std::locale::__imp **)((char *)&v114 + j * 8)) {
              break;
            }
            v120[j].__locale_ = 0;
          }
          ++v77;
        }
        while (v77 != v24);
      }
    }
    else
    {
      long long v136 = 0uLL;
      long long v137 = 0uLL;
      long long v134 = 0uLL;
      long long v135 = 0uLL;
      long long v132 = 0uLL;
      long long v133 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v114 = 0uLL;
      sub_25B40AB84((uint64_t)&v123, v5, v6, (uint64_t)&v114);
      uint64_t v46 = 0;
      char v47 = 1;
      do
      {
        uint64_t v48 = *((void *)&v114 + v46);
        uint64_t v49 = *((void *)v5 + v46);
        if ((v47 & 1) == 0) {
          break;
        }
        char v47 = 0;
        uint64_t v46 = 1;
      }
      while (v48 == v49);
      if (v48 != v49)
      {
        float v50 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        BOOL v51 = sub_25B406B20(v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v51, (uint64_t)" ", 1);
        BOOL v52 = (void *)MEMORY[0x263F8C0F8];
        BOOL v53 = (void *)std::ostream::operator<<();
        sub_25B406B20(v53, (uint64_t)" ", 1);
        sub_25B406B20(v53, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        uint64_t v54 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
        char v55 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      *(_OWORD *)&v120[0].__locale_ = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      uint64_t v56 = *(void *)(v3 + 104);
      uint64_t v57 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v56)
        {
          uint64_t v58 = 0;
          uint64_t v60 = (uint64_t *)*((void *)&v124 + 1);
          uint64_t v59 = (uint64_t *)v125;
          unint64_t v61 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
          if (v61 <= 1) {
            unint64_t v61 = 1;
          }
          int v62 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v63 = *(void *)(a2 + 144);
          do
          {
            long long v117 = *(_OWORD *)&v120[0].__locale_;
            if (v59 != v60)
            {
              int64_t v64 = v60;
              unint64_t v65 = v61;
              do
              {
                uint64_t v66 = *v64++;
                *((void *)&v117 + v66) = 0;
                --v65;
              }
              while (v65);
            }
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            char v69 = 1;
            do
            {
              char v70 = v69;
              v68 += *((void *)&v135 + v67) * *((void *)&v117 + v67);
              uint64_t v67 = 1;
              char v69 = 0;
            }
            while ((v70 & 1) != 0);
            if (!v62) {
              uint64_t v68 = *(void *)(a2 + 56) * v117 + *(void *)(a2 + 64) * *((void *)&v117 + 1);
            }
            *(void *)(v57 + 8 * v58) = *(void *)(v63 + 8 * v68);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v72 = (std::locale::__imp *)((char *)v120[k].__locale_ + 1);
              v120[k].__locale_ = v72;
              if (v72 != *(std::locale::__imp **)((char *)&v114 + k * 8)) {
                break;
              }
              v120[k].__locale_ = 0;
            }
            ++v58;
          }
          while (v58 != v56);
        }
      }
      else if (v56)
      {
        uint64_t v97 = 0;
        uint64_t v99 = (uint64_t *)*((void *)&v124 + 1);
        int v98 = (uint64_t *)v125;
        unint64_t v100 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
        if (v100 <= 1) {
          unint64_t v100 = 1;
        }
        int v101 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v102 = *(void *)(a2 + 144);
        do
        {
          int v103 = v120[0].__locale_;
          uint64_t v104 = v120[1].__locale_;
          long long v117 = *(_OWORD *)&v120[0].__locale_;
          if (v98 != v99)
          {
            BOOL v105 = v99;
            unint64_t v106 = v100;
            do
            {
              uint64_t v107 = *v105++;
              *((void *)&v117 + v107) = 0;
              --v106;
            }
            while (v106);
          }
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          char v110 = 1;
          do
          {
            char v111 = v110;
            v109 += *((void *)&v135 + v108) * *((void *)&v117 + v108);
            uint64_t v108 = 1;
            char v110 = 0;
          }
          while ((v111 & 1) != 0);
          if (!v101) {
            uint64_t v109 = *(void *)(a2 + 56) * v117 + *(void *)(a2 + 64) * *((void *)&v117 + 1);
          }
          *(void *)(v57 + 8 * (*(void *)(v3 + 56) * (void)v103 + *(void *)(v3 + 64) * (void)v104)) = *(void *)(v102 + 8 * v109);
          for (uint64_t m = 1; m != -1; --m)
          {
            int v113 = (std::locale::__imp *)((char *)v120[m].__locale_ + 1);
            v120[m].__locale_ = v113;
            if (v113 != *(std::locale::__imp **)((char *)&v114 + m * 8)) {
              break;
            }
            v120[m].__locale_ = 0;
          }
          ++v97;
        }
        while (v97 != v56);
      }
    }
    return sub_25B3F9500((uint64_t)&v123);
  }
  return result;
}

void sub_25B5195F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_25B519624(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B408738((uint64_t)v5, v4);
}

void sub_25B51A044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale((std::locale *)(v16 - 128));
  sub_25B3F9500((uint64_t)&a15);
  uint64_t v18 = *(std::__shared_weak_count **)(v15 + 128);
  if (v18) {
    sub_25B404120(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B51A0A4(uint64_t a1, uint64_t a2, float a3)
{
  float v9 = a3;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v5 = a2;
  uint64_t v3 = sub_25B459378(a1, &v5);
  return sub_25B4A1878(v3, (int *)&v9);
}

void sub_25B51A0F0(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F27E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B51A124(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v133 = *MEMORY[0x263EF8340];
  uint64_t v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  long long v6 = (long long *)(a2 + 152);
  if (v4 == *(void *)(a2 + 152))
  {
    uint64_t v7 = *(void *)(result + 104);
    uint64_t v8 = *(float **)(result + 144);
    if (*(unsigned char *)(a2 + 136))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v7)
        {
          float v9 = *(float **)(a2 + 144);
          float v10 = *(double *)(a2 + 200);
          float v11 = *(double *)(a2 + 208);
          do
          {
            float v12 = *v9++;
            float v13 = v12;
            if (v12 > v11) {
              float v13 = v11;
            }
            if (v13 <= v10) {
              float v13 = v10;
            }
            *v8++ = v13;
            --v7;
          }
          while (v7);
        }
      }
      else if (v7)
      {
        uint64_t v67 = 0;
        uint64_t v68 = *(void *)(result + 56);
        char v69 = *(float **)(a2 + 144);
        float v70 = *(double *)(a2 + 200);
        float v71 = *(double *)(a2 + 208);
        do
        {
          float v72 = *v69++;
          float v73 = v72;
          if (v72 > v71) {
            float v73 = v71;
          }
          if (v73 <= v70) {
            float v73 = v70;
          }
          v8[v68 * v67] = v73;
          if (v67 + 1 == v4) {
            uint64_t v67 = 0;
          }
          else {
            ++v67;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v7)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a2 + 144);
        float v39 = *(double *)(a2 + 200);
        float v40 = *(double *)(a2 + 208);
        do
        {
          float v41 = *(float *)(v38 + 4 * *(void *)(a2 + 56) * v37);
          if (v41 > v40) {
            float v41 = v40;
          }
          if (v41 <= v39) {
            float v41 = v39;
          }
          *v8++ = v41;
          if (v37 + 1 == v4) {
            uint64_t v37 = 0;
          }
          else {
            ++v37;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (v7)
    {
      uint64_t v89 = 0;
      uint64_t v90 = *(void *)(result + 56);
      uint64_t v91 = *(void *)(a2 + 144);
      float v92 = *(double *)(a2 + 200);
      float v93 = *(double *)(a2 + 208);
      do
      {
        float v94 = *(float *)(v91 + 4 * *(void *)(a2 + 56) * v89);
        if (v94 > v93) {
          float v94 = v93;
        }
        if (v94 <= v92) {
          float v94 = v92;
        }
        v8[v90 * v89] = v94;
        if (v89 + 1 == v4) {
          uint64_t v89 = 0;
        }
        else {
          ++v89;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v122 = 0uLL;
      long long v123 = 0uLL;
      long long v120 = 0uLL;
      long long v121 = 0uLL;
      long long v118 = 0uLL;
      long long v119 = 0uLL;
      long long v116 = 0uLL;
      long long v117 = 0uLL;
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      long long v112 = 0uLL;
      long long v113 = 0uLL;
      sub_25B439F30((uint64_t)&v115, v5, v6, &v112);
      uint64_t v14 = (std::locale::__imp *)v112;
      if ((void)v112 != *(void *)v5)
      {
        uint64_t v15 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v16 = sub_25B406B20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v16, (uint64_t)" ", 1);
        uint64_t v17 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v18 = (void *)std::ostream::operator<<();
        sub_25B406B20(v18, (uint64_t)" ", 1);
        sub_25B406B20(v18, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v19 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        uint64_t v20 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v131 = 0u;
      long long v132 = 0u;
      *(_OWORD *)&v130[0].__locale_ = 0u;
      uint64_t v21 = *(void *)(v3 + 104);
      uint64_t v22 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v21)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v26 = (uint64_t *)*((void *)&v116 + 1);
          uint64_t v25 = (uint64_t *)v117;
          unint64_t v27 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
          if (v27 <= 1) {
            unint64_t v27 = 1;
          }
          uint64_t v28 = v127;
          uint64_t v29 = *(void *)(a2 + 144);
          float v30 = *(double *)(a2 + 200);
          float v31 = *(double *)(a2 + 208);
          do
          {
            v130[0].__locale_ = v23;
            locale = v23;
            if (v25 != v26)
            {
              uint64_t v33 = v26;
              unint64_t v34 = v27;
              do
              {
                uint64_t v35 = *v33++;
                v130[v35].__locale_ = 0;
                --v34;
              }
              while (v34);
              locale = v130[0].__locale_;
            }
            float v36 = *(float *)(v29 + 4 * (void)locale * v28);
            if (v36 > v31) {
              float v36 = v31;
            }
            if (v36 <= v30) {
              float v36 = v30;
            }
            *(float *)(v22 + 4 * v24) = v36;
            if ((std::locale::__imp *)((char *)v23 + 1) == v14) {
              uint64_t v23 = 0;
            }
            else {
              uint64_t v23 = (std::locale::__imp *)((char *)v23 + 1);
            }
            ++v24;
          }
          while (v24 != v21);
        }
      }
      else if (v21)
      {
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v77 = (uint64_t *)*((void *)&v116 + 1);
        uint64_t v76 = (uint64_t *)v117;
        unint64_t v78 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
        if (v78 <= 1) {
          unint64_t v78 = 1;
        }
        uint64_t v79 = v127;
        uint64_t v80 = *(void *)(v3 + 56);
        uint64_t v81 = *(void *)(a2 + 144);
        float v82 = *(double *)(a2 + 200);
        float v83 = *(double *)(a2 + 208);
        do
        {
          v130[0].__locale_ = v74;
          float v84 = v74;
          if (v76 != v77)
          {
            unint64_t v85 = v77;
            unint64_t v86 = v78;
            do
            {
              uint64_t v87 = *v85++;
              v130[v87].__locale_ = 0;
              --v86;
            }
            while (v86);
            float v84 = v130[0].__locale_;
          }
          float v88 = *(float *)(v81 + 4 * (void)v84 * v79);
          if (v88 > v83) {
            float v88 = v83;
          }
          if (v88 <= v82) {
            float v88 = v82;
          }
          *(float *)(v22 + 4 * (void)v74 * v80) = v88;
          if ((std::locale::__imp *)((char *)v74 + 1) == v14) {
            uint64_t v74 = 0;
          }
          else {
            uint64_t v74 = (std::locale::__imp *)((char *)v74 + 1);
          }
          ++v75;
        }
        while (v75 != v21);
      }
    }
    else
    {
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v122 = 0uLL;
      long long v123 = 0uLL;
      long long v120 = 0uLL;
      long long v121 = 0uLL;
      long long v118 = 0uLL;
      long long v119 = 0uLL;
      long long v116 = 0uLL;
      long long v117 = 0uLL;
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      long long v112 = 0uLL;
      long long v113 = 0uLL;
      sub_25B439F30((uint64_t)&v115, v5, v6, &v112);
      uint64_t v42 = (std::locale::__imp *)v112;
      if ((void)v112 != *(void *)v5)
      {
        uint64_t v43 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v44 = sub_25B406B20(v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v44, (uint64_t)" ", 1);
        uint64_t v45 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v46 = (void *)std::ostream::operator<<();
        sub_25B406B20(v46, (uint64_t)" ", 1);
        sub_25B406B20(v46, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
        char v47 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
        uint64_t v48 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v131 = 0u;
      long long v132 = 0u;
      *(_OWORD *)&v130[0].__locale_ = 0u;
      uint64_t v49 = *(void *)(v3 + 104);
      uint64_t v50 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v49)
        {
          BOOL v51 = 0;
          uint64_t v52 = 0;
          uint64_t v54 = (uint64_t *)*((void *)&v116 + 1);
          BOOL v53 = (uint64_t *)v117;
          unint64_t v55 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
          if (v55 <= 1) {
            unint64_t v55 = 1;
          }
          uint64_t v56 = v127;
          int v57 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v58 = *(void *)(a2 + 144);
          float v59 = *(double *)(a2 + 200);
          float v60 = *(double *)(a2 + 208);
          do
          {
            v130[0].__locale_ = v51;
            unint64_t v61 = v51;
            if (v53 != v54)
            {
              int v62 = v54;
              unint64_t v63 = v55;
              do
              {
                uint64_t v64 = *v62++;
                v130[v64].__locale_ = 0;
                --v63;
              }
              while (v63);
              unint64_t v61 = v130[0].__locale_;
            }
            uint64_t v65 = *(void *)(a2 + 56);
            if (v57) {
              uint64_t v65 = v56;
            }
            float v66 = *(float *)(v58 + 4 * v65 * (void)v61);
            if (v66 > v60) {
              float v66 = v60;
            }
            if (v66 <= v59) {
              float v66 = v59;
            }
            *(float *)(v50 + 4 * v52) = v66;
            if ((std::locale::__imp *)((char *)v51 + 1) == v42) {
              BOOL v51 = 0;
            }
            else {
              BOOL v51 = (std::locale::__imp *)((char *)v51 + 1);
            }
            ++v52;
          }
          while (v52 != v49);
        }
      }
      else if (v49)
      {
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        int v98 = (uint64_t *)*((void *)&v116 + 1);
        uint64_t v97 = (uint64_t *)v117;
        unint64_t v99 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
        if (v99 <= 1) {
          unint64_t v99 = 1;
        }
        uint64_t v100 = v127;
        uint64_t v101 = *(void *)(v3 + 56);
        int v102 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v103 = *(void *)(a2 + 144);
        float v104 = *(double *)(a2 + 200);
        float v105 = *(double *)(a2 + 208);
        do
        {
          v130[0].__locale_ = v95;
          unint64_t v106 = v95;
          if (v97 != v98)
          {
            uint64_t v107 = v98;
            unint64_t v108 = v99;
            do
            {
              uint64_t v109 = *v107++;
              v130[v109].__locale_ = 0;
              --v108;
            }
            while (v108);
            unint64_t v106 = v130[0].__locale_;
          }
          uint64_t v110 = *(void *)(a2 + 56);
          if (v102) {
            uint64_t v110 = v100;
          }
          float v111 = *(float *)(v103 + 4 * v110 * (void)v106);
          if (v111 > v105) {
            float v111 = v105;
          }
          if (v111 <= v104) {
            float v111 = v104;
          }
          *(float *)(v50 + 4 * (void)v95 * v101) = v111;
          if ((std::locale::__imp *)((char *)v95 + 1) == v42) {
            uint64_t v95 = 0;
          }
          else {
            uint64_t v95 = (std::locale::__imp *)((char *)v95 + 1);
          }
          ++v96;
        }
        while (v96 != v49);
      }
    }
    return sub_25B3F9500((uint64_t)&v115);
  }
  return result;
}

void sub_25B51A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B51A998(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = &unk_2708F1E00;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B458194((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B51AA78(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B51AA90(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v158 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 184))
    {
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      float v10 = *(BOOL **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          float v11 = *(unsigned __int8 **)(a2 + 192);
          int v12 = *(_DWORD *)(a2 + 248);
          do
          {
            int v13 = *v11++;
            *v10++ = v12 < v13;
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v79 = 0;
        uint64_t v80 = *(void *)(result + 56);
        uint64_t v81 = *(void *)(result + 64);
        uint64_t v82 = *(void *)(a2 + 192);
        int v83 = *(_DWORD *)(a2 + 248);
        do
        {
          uint64_t v84 = 0;
          v10[v80 * (void)v143 + v81 * *((void *)&v143 + 1)] = v83 < *(unsigned __int8 *)(v82 + v79);
          do
          {
            BOOL result = *(void *)((char *)&v143 + v84 + 8) + 1;
            *(void *)((char *)&v143 + v84 + 8) = result;
            if (result != *(void *)(v3 + 16 + v84)) {
              break;
            }
            *(void *)((char *)&v143 + v84 + 8) = 0;
            v84 -= 8;
          }
          while (v84 != -16);
          ++v79;
        }
        while (v79 != v9);
      }
    }
    else
    {
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      uint64_t v41 = *(void *)(result + 104);
      uint64_t v42 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v41)
        {
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(a2 + 104);
          uint64_t v45 = *(void *)(a2 + 112);
          uint64_t v46 = *(void *)(a2 + 192);
          int v47 = *(_DWORD *)(a2 + 248);
          do
          {
            uint64_t v48 = v43;
            if (!*(unsigned char *)(a2 + 184)) {
              uint64_t v48 = v44 * v143 + v45 * *((void *)&v143 + 1);
            }
            uint64_t v49 = 0;
            *(unsigned char *)(v42 + v43) = v47 < *(unsigned __int8 *)(v46 + v48);
            do
            {
              BOOL result = *(void *)((char *)&v143 + v49 + 8) + 1;
              *(void *)((char *)&v143 + v49 + 8) = result;
              if (result != *(void *)(v3 + 16 + v49)) {
                break;
              }
              *(void *)((char *)&v143 + v49 + 8) = 0;
              v49 -= 8;
            }
            while (v49 != -16);
            ++v43;
          }
          while (v43 != v41);
        }
      }
      else if (v41)
      {
        uint64_t v104 = 0;
        uint64_t v105 = *(void *)(result + 56);
        uint64_t v106 = *(void *)(result + 64);
        uint64_t v107 = *(void *)(a2 + 104);
        uint64_t v108 = *(void *)(a2 + 112);
        uint64_t v109 = *(void *)(a2 + 192);
        BOOL result = *(unsigned int *)(a2 + 248);
        do
        {
          uint64_t v110 = 0;
          uint64_t v111 = v107 * v143 + v108 * *((void *)&v143 + 1);
          if (*(unsigned char *)(a2 + 184)) {
            uint64_t v111 = v104;
          }
          *(unsigned char *)(v42 + v105 * v143 + v106 * *((void *)&v143 + 1)) = (int)result < *(unsigned __int8 *)(v109 + v111);
          do
          {
            uint64_t v112 = *(void *)((char *)&v143 + v110 + 8) + 1;
            *(void *)((char *)&v143 + v110 + 8) = v112;
            if (v112 != *(void *)(v3 + 16 + v110)) {
              break;
            }
            *(void *)((char *)&v143 + v110 + 8) = 0;
            v110 -= 8;
          }
          while (v110 != -16);
          ++v104;
        }
        while (v104 != v41);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 184))
    {
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v134 = 0uLL;
      sub_25B40AB84((uint64_t)&v143, v5, (_OWORD *)a2, (uint64_t)&v134);
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        uint64_t v16 = *((void *)&v134 + v14);
        uint64_t v17 = *((void *)v5 + v14);
        if ((v15 & 1) == 0) {
          break;
        }
        char v15 = 0;
        uint64_t v14 = 1;
      }
      while (v16 == v17);
      if (v16 != v17)
      {
        uint64_t v18 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v19 = sub_25B406B20(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v19, (uint64_t)" ", 1);
        uint64_t v20 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v21 = (void *)std::ostream::operator<<();
        sub_25B406B20(v21, (uint64_t)" ", 1);
        sub_25B406B20(v21, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        uint64_t v22 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v23 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      *(_OWORD *)&v140[0].__locale_ = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      uint64_t v24 = *(void *)(v3 + 104);
      uint64_t v25 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v24)
        {
          uint64_t v26 = 0;
          uint64_t v28 = (uint64_t *)*((void *)&v144 + 1);
          unint64_t v27 = (uint64_t *)v145;
          unint64_t v29 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 192);
          int v31 = *(_DWORD *)(a2 + 248);
          do
          {
            long long v137 = *(_OWORD *)&v140[0].__locale_;
            if (v27 != v28)
            {
              unint64_t v32 = v28;
              unint64_t v33 = v29;
              do
              {
                uint64_t v34 = *v32++;
                *((void *)&v137 + v34) = 0;
                --v33;
              }
              while (v33);
            }
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            char v37 = 1;
            do
            {
              char v38 = v37;
              v36 += *((void *)&v155 + v35) * *((void *)&v137 + v35);
              uint64_t v35 = 1;
              char v37 = 0;
            }
            while ((v38 & 1) != 0);
            *(unsigned char *)(v25 + v26) = v31 < *(unsigned __int8 *)(v30 + v36);
            for (uint64_t i = 1; i != -1; --i)
            {
              float v40 = (std::locale::__imp *)((char *)v140[i].__locale_ + 1);
              v140[i].__locale_ = v40;
              if (v40 != *(std::locale::__imp **)((char *)&v134 + i * 8)) {
                break;
              }
              v140[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v24);
        }
      }
      else if (v24)
      {
        uint64_t v85 = 0;
        uint64_t v87 = (uint64_t *)*((void *)&v144 + 1);
        unint64_t v86 = (uint64_t *)v145;
        unint64_t v88 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
        if (v88 <= 1) {
          unint64_t v88 = 1;
        }
        uint64_t v89 = *(void *)(v3 + 56);
        uint64_t v90 = *(void *)(v3 + 64);
        uint64_t v91 = *(void *)(a2 + 192);
        int v92 = *(_DWORD *)(a2 + 248);
        do
        {
          locale = v140[0].__locale_;
          float v93 = v140[1].__locale_;
          long long v137 = *(_OWORD *)&v140[0].__locale_;
          if (v86 != v87)
          {
            uint64_t v95 = v87;
            unint64_t v96 = v88;
            do
            {
              uint64_t v97 = *v95++;
              *((void *)&v137 + v97) = 0;
              --v96;
            }
            while (v96);
          }
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          char v100 = 1;
          do
          {
            char v101 = v100;
            v99 += *((void *)&v155 + v98) * *((void *)&v137 + v98);
            uint64_t v98 = 1;
            char v100 = 0;
          }
          while ((v101 & 1) != 0);
          *(unsigned char *)(v25 + (void)locale * v89 + (void)v93 * v90) = v92 < *(unsigned __int8 *)(v91 + v99);
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v103 = (std::locale::__imp *)((char *)v140[j].__locale_ + 1);
            v140[j].__locale_ = v103;
            if (v103 != *(std::locale::__imp **)((char *)&v134 + j * 8)) {
              break;
            }
            v140[j].__locale_ = 0;
          }
          ++v85;
        }
        while (v85 != v24);
      }
    }
    else
    {
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v134 = 0uLL;
      sub_25B40AB84((uint64_t)&v143, v5, (_OWORD *)a2, (uint64_t)&v134);
      uint64_t v50 = 0;
      char v51 = 1;
      do
      {
        uint64_t v52 = *((void *)&v134 + v50);
        uint64_t v53 = *((void *)v5 + v50);
        if ((v51 & 1) == 0) {
          break;
        }
        char v51 = 0;
        uint64_t v50 = 1;
      }
      while (v52 == v53);
      if (v52 != v53)
      {
        uint64_t v54 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v55 = sub_25B406B20(v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v55, (uint64_t)" ", 1);
        uint64_t v56 = (void *)MEMORY[0x263F8C0F8];
        int v57 = (void *)std::ostream::operator<<();
        sub_25B406B20(v57, (uint64_t)" ", 1);
        sub_25B406B20(v57, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24)));
        uint64_t v58 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
        float v59 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      *(_OWORD *)&v140[0].__locale_ = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      uint64_t v60 = *(void *)(v3 + 104);
      uint64_t v61 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v60)
        {
          uint64_t v62 = 0;
          uint64_t v64 = (uint64_t *)*((void *)&v144 + 1);
          unint64_t v63 = (uint64_t *)v145;
          unint64_t v65 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
          if (v65 <= 1) {
            unint64_t v65 = 1;
          }
          uint64_t v66 = *(void *)(a2 + 104);
          uint64_t v67 = *(void *)(a2 + 112);
          uint64_t v68 = *(void *)(a2 + 192);
          int v69 = *(_DWORD *)(a2 + 248);
          do
          {
            long long v137 = *(_OWORD *)&v140[0].__locale_;
            if (v63 != v64)
            {
              float v70 = v64;
              unint64_t v71 = v65;
              do
              {
                uint64_t v72 = *v70++;
                *((void *)&v137 + v72) = 0;
                --v71;
              }
              while (v71);
            }
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            char v75 = 1;
            do
            {
              char v76 = v75;
              v74 += *((void *)&v155 + v73) * *((void *)&v137 + v73);
              uint64_t v73 = 1;
              char v75 = 0;
            }
            while ((v76 & 1) != 0);
            if (!*(unsigned char *)(a2 + 184)) {
              uint64_t v74 = v137 * v66 + *((void *)&v137 + 1) * v67;
            }
            *(unsigned char *)(v61 + v62) = v69 < *(unsigned __int8 *)(v68 + v74);
            for (uint64_t k = 1; k != -1; --k)
            {
              unint64_t v78 = (std::locale::__imp *)((char *)v140[k].__locale_ + 1);
              v140[k].__locale_ = v78;
              if (v78 != *(std::locale::__imp **)((char *)&v134 + k * 8)) {
                break;
              }
              v140[k].__locale_ = 0;
            }
            ++v62;
          }
          while (v62 != v60);
        }
      }
      else if (v60)
      {
        uint64_t v113 = 0;
        long long v115 = (uint64_t *)*((void *)&v144 + 1);
        long long v114 = (uint64_t *)v145;
        unint64_t v116 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
        if (v116 <= 1) {
          unint64_t v116 = 1;
        }
        uint64_t v117 = *(void *)(v3 + 56);
        uint64_t v118 = *(void *)(v3 + 64);
        uint64_t v120 = *(void *)(a2 + 104);
        uint64_t v119 = *(void *)(a2 + 112);
        uint64_t v121 = *(void *)(a2 + 192);
        int v122 = *(_DWORD *)(a2 + 248);
        do
        {
          long long v124 = v140[0].__locale_;
          long long v123 = v140[1].__locale_;
          long long v137 = *(_OWORD *)&v140[0].__locale_;
          if (v114 != v115)
          {
            long long v125 = v115;
            unint64_t v126 = v116;
            do
            {
              uint64_t v127 = *v125++;
              *((void *)&v137 + v127) = 0;
              --v126;
            }
            while (v126);
          }
          uint64_t v128 = 0;
          uint64_t v129 = 0;
          char v130 = 1;
          do
          {
            char v131 = v130;
            v129 += *((void *)&v155 + v128) * *((void *)&v137 + v128);
            uint64_t v128 = 1;
            char v130 = 0;
          }
          while ((v131 & 1) != 0);
          if (!*(unsigned char *)(a2 + 184)) {
            uint64_t v129 = v137 * v120 + *((void *)&v137 + 1) * v119;
          }
          *(unsigned char *)(v61 + (void)v124 * v117 + (void)v123 * v118) = v122 < *(unsigned __int8 *)(v121 + v129);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v133 = (std::locale::__imp *)((char *)v140[m].__locale_ + 1);
            v140[m].__locale_ = v133;
            if (v133 != *(std::locale::__imp **)((char *)&v134 + m * 8)) {
              break;
            }
            v140[m].__locale_ = 0;
          }
          ++v113;
        }
        while (v113 != v60);
      }
    }
    return sub_25B3F9500((uint64_t)&v143);
  }
  return result;
}

void sub_25B51B4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

__n128 sub_25B51B50C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  *(void *)uint64_t v17 = a1[2];
  *(void *)&v17[7] = *(uint64_t *)((char *)a1 + 23);
  char v5 = *((unsigned char *)a1 + 31);
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  uint64_t v7 = a1 + 4;
  uint64_t v6 = a1[4];
  *(void *)uint64_t v16 = a1[5];
  *(void *)&v16[7] = *(uint64_t *)((char *)a1 + 47);
  char v8 = *((unsigned char *)a1 + 55);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v9 = a1 + 7;
  uint64_t v15 = a1[9];
  __n128 v14 = *(__n128 *)(a1 + 7);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
  long long v10 = *(_OWORD *)(a2 + 8);
  a1[3] = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = v10;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (*((char *)a1 + 55) < 0) {
    operator delete((void *)*v7);
  }
  long long v11 = *(_OWORD *)(a2 + 32);
  std::locale v7[2] = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v11;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  long long v12 = *(_OWORD *)(a2 + 56);
  v9[2] = *(void *)(a2 + 72);
  *(_OWORD *)uint64_t v9 = v12;
  *(void *)a2 = v4;
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = *(void *)v17;
  *(void *)(a2 + 23) = *(void *)&v17[7];
  *(unsigned char *)(a2 + 31) = v5;
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = *(void *)v16;
  *(void *)(a2 + 47) = *(void *)&v16[7];
  *(unsigned char *)(a2 + 55) = v8;
  __n128 result = v14;
  *(__n128 *)(a2 + 56) = v14;
  *(void *)(a2 + 72) = v15;
  return result;
}

double sub_25B51B698(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)a2;
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)(a1 + 4);
  BOOL v10 = *(_DWORD *)a2 == *(_DWORD *)a1 && v7 == v9;
  if (!v10)
  {
    BOOL v11 = v7 < v9;
    BOOL v10 = v6 == v8;
    BOOL v12 = v6 < v8;
    if (v10) {
      BOOL v12 = v11;
    }
    if (v12) {
      goto LABEL_8;
    }
LABEL_17:
    float v19 = *a3;
    int v20 = *((_DWORD *)a3 + 1);
    if (*(_DWORD *)a3 == v6 && v20 == v7)
    {
      *(float *)&double result = a3[17];
      if (*(float *)&result >= *(float *)(a2 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v22 = v20 < v7;
      BOOL v10 = LODWORD(v19) == v6;
      BOOL v23 = SLODWORD(v19) < v6;
      if (v10) {
        BOOL v23 = v22;
      }
      if (!v23) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a2, (uint64_t)a3).n128_u64[0];
    int v28 = *(_DWORD *)a2;
    int v29 = *(_DWORD *)(a2 + 4);
    int v30 = *(_DWORD *)v5;
    int v31 = *(_DWORD *)(v5 + 4);
    if (*(_DWORD *)a2 == *(_DWORD *)v5 && v29 == v31)
    {
      LODWORD(result) = *(_DWORD *)(a2 + 68);
      if (*(float *)&result >= *(float *)(v5 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v35 = v29 < v31;
      BOOL v10 = v28 == v30;
      BOOL v36 = v28 < v30;
      if (v10) {
        BOOL v36 = v35;
      }
      if (!v36) {
        return result;
      }
    }
    a1 = v5;
    uint64_t v34 = a2;
    goto LABEL_44;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  if (*(float *)&result >= *(float *)(a1 + 68)) {
    goto LABEL_17;
  }
LABEL_8:
  int v13 = *(_DWORD *)a3;
  int v14 = *((_DWORD *)a3 + 1);
  if (*(_DWORD *)a3 == v6 && v14 == v7)
  {
    if (a3[17] < *(float *)(a2 + 68)) {
      goto LABEL_39;
    }
  }
  else
  {
    BOOL v16 = v14 < v7;
    BOOL v10 = v13 == v6;
    BOOL v17 = v13 < v6;
    if (v10) {
      BOOL v17 = v16;
    }
    if (v17) {
      goto LABEL_39;
    }
  }
  *(void *)&double result = sub_25B51B50C((uint64_t *)a1, a2).n128_u64[0];
  float v24 = *a3;
  int v25 = *((_DWORD *)a3 + 1);
  int v26 = *(_DWORD *)a2;
  int v27 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a3 == *(_DWORD *)a2 && v25 == v27)
  {
    *(float *)&double result = a3[17];
    if (*(float *)&result >= *(float *)(a2 + 68)) {
      return result;
    }
    goto LABEL_38;
  }
  BOOL v32 = v25 < v27;
  BOOL v10 = LODWORD(v24) == v26;
  BOOL v33 = SLODWORD(v24) < v26;
  if (v10) {
    BOOL v33 = v32;
  }
  if (v33)
  {
LABEL_38:
    a1 = a2;
LABEL_39:
    uint64_t v34 = (uint64_t)a3;
LABEL_44:
    *(void *)&double result = sub_25B51B50C((uint64_t *)a1, v34).n128_u64[0];
  }
  return result;
}

double sub_25B51B864(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  double result = sub_25B51B698(a1, a2, (float *)a3);
  int v9 = *a4;
  int v10 = a4[1];
  float v11 = *(float *)a3;
  int v12 = *(_DWORD *)(a3 + 4);
  BOOL v13 = *a4 == *(_DWORD *)a3 && v10 == v12;
  if (v13)
  {
    LODWORD(result) = a4[17];
    if (*(float *)&result >= *(float *)(a3 + 68)) {
      return result;
    }
LABEL_10:
    *(void *)&double result = sub_25B51B50C((uint64_t *)a3, (uint64_t)a4).n128_u64[0];
    float v16 = *(float *)a3;
    int v17 = *(_DWORD *)(a3 + 4);
    int v18 = *(_DWORD *)a2;
    int v19 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)a3 == *(_DWORD *)a2 && v17 == v19)
    {
      LODWORD(result) = *(_DWORD *)(a3 + 68);
      if (*(float *)&result >= *(float *)(a2 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v21 = v17 < v19;
      BOOL v13 = LODWORD(v16) == v18;
      BOOL v22 = SLODWORD(v16) < v18;
      if (v13) {
        BOOL v22 = v21;
      }
      if (!v22) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a2, a3).n128_u64[0];
    int v23 = *(_DWORD *)a2;
    int v24 = *(_DWORD *)(a2 + 4);
    int v25 = *(_DWORD *)a1;
    int v26 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)a2 == *(_DWORD *)a1 && v24 == v26)
    {
      LODWORD(result) = *(_DWORD *)(a2 + 68);
      if (*(float *)&result >= *(float *)(a1 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v27 = v24 < v26;
      BOOL v13 = v23 == v25;
      BOOL v28 = v23 < v25;
      if (v13) {
        BOOL v28 = v27;
      }
      if (!v28) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a1, a2).n128_u64[0];
    return result;
  }
  BOOL v14 = v10 < v12;
  BOOL v13 = v9 == LODWORD(v11);
  BOOL v15 = v9 < SLODWORD(v11);
  if (v13) {
    BOOL v15 = v14;
  }
  if (v15) {
    goto LABEL_10;
  }
  return result;
}

double sub_25B51B9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  double result = sub_25B51B864(a1, a2, a3, (int *)a4);
  int v11 = *a5;
  int v12 = a5[1];
  int v13 = *(_DWORD *)a4;
  int v14 = *(_DWORD *)(a4 + 4);
  BOOL v15 = *a5 == *(_DWORD *)a4 && v12 == v14;
  if (v15)
  {
    LODWORD(result) = a5[17];
    if (*(float *)&result >= *(float *)(a4 + 68)) {
      return result;
    }
LABEL_10:
    *(void *)&double result = sub_25B51B50C((uint64_t *)a4, (uint64_t)a5).n128_u64[0];
    int v18 = *(_DWORD *)a4;
    int v19 = *(_DWORD *)(a4 + 4);
    int v20 = *(_DWORD *)a3;
    int v21 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)a4 == *(_DWORD *)a3 && v19 == v21)
    {
      LODWORD(result) = *(_DWORD *)(a4 + 68);
      if (*(float *)&result >= *(float *)(a3 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v23 = v19 < v21;
      BOOL v15 = v18 == v20;
      BOOL v24 = v18 < v20;
      if (v15) {
        BOOL v24 = v23;
      }
      if (!v24) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a3, a4).n128_u64[0];
    int v25 = *(_DWORD *)a3;
    int v26 = *(_DWORD *)(a3 + 4);
    int v27 = *(_DWORD *)a2;
    int v28 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)a3 == *(_DWORD *)a2 && v26 == v28)
    {
      LODWORD(result) = *(_DWORD *)(a3 + 68);
      if (*(float *)&result >= *(float *)(a2 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v29 = v26 < v28;
      BOOL v15 = v25 == v27;
      BOOL v30 = v25 < v27;
      if (v15) {
        BOOL v30 = v29;
      }
      if (!v30) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a2, a3).n128_u64[0];
    int v31 = *(_DWORD *)a2;
    int v32 = *(_DWORD *)(a2 + 4);
    int v33 = *(_DWORD *)a1;
    int v34 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)a2 == *(_DWORD *)a1 && v32 == v34)
    {
      LODWORD(result) = *(_DWORD *)(a2 + 68);
      if (*(float *)&result >= *(float *)(a1 + 68)) {
        return result;
      }
    }
    else
    {
      BOOL v35 = v32 < v34;
      BOOL v15 = v31 == v33;
      BOOL v36 = v31 < v33;
      if (v15) {
        BOOL v36 = v35;
      }
      if (!v36) {
        return result;
      }
    }
    *(void *)&double result = sub_25B51B50C((uint64_t *)a1, a2).n128_u64[0];
    return result;
  }
  BOOL v16 = v12 < v14;
  BOOL v15 = v11 == v13;
  BOOL v17 = v11 < v13;
  if (v15) {
    BOOL v17 = v16;
  }
  if (v17) {
    goto LABEL_10;
  }
  return result;
}

BOOL sub_25B51BB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v7 = *(_DWORD *)(a2 - 80);
      int v8 = *(_DWORD *)(a2 - 76);
      uint64_t v6 = a2 - 80;
      int v9 = *(_DWORD *)a1;
      int v10 = *(_DWORD *)(a1 + 4);
      BOOL v11 = v7 == *(_DWORD *)a1 && v8 == v10;
      if (v11)
      {
        if (*(float *)(v2 - 12) >= *(float *)(a1 + 68)) {
          return result;
        }
LABEL_48:
        sub_25B51B50C((uint64_t *)a1, v6);
        return 1;
      }
      BOOL v12 = v8 < v10;
      BOOL v11 = v7 == v9;
      BOOL v13 = v7 < v9;
      if (v11) {
        BOOL v13 = v12;
      }
      if (v13) {
        goto LABEL_48;
      }
      return result;
    case 3uLL:
      sub_25B51B698(a1, a1 + 80, (float *)(a2 - 80));
      return 1;
    case 4uLL:
      sub_25B51B864(a1, a1 + 80, a1 + 160, (int *)(a2 - 80));
      return 1;
    case 5uLL:
      sub_25B51B9A8(a1, a1 + 80, a1 + 160, a1 + 240, (int *)(a2 - 80));
      return 1;
    default:
      uint64_t v14 = a1 + 160;
      sub_25B51B698(a1, a1 + 80, (float *)(a1 + 160));
      uint64_t v15 = a1 + 240;
      if (a1 + 240 == v2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      uint64_t v42 = v2;
      break;
  }
LABEL_12:
  int v18 = *(_DWORD *)v15;
  int v19 = *(_DWORD *)(v15 + 4);
  int v20 = *(_DWORD *)v14;
  int v21 = *(_DWORD *)(v14 + 4);
  if (*(_DWORD *)v15 == *(_DWORD *)v14 && v19 == v21)
  {
    float v25 = *(float *)(v15 + 68);
    if (v25 >= *(float *)(v14 + 68)) {
      goto LABEL_42;
    }
  }
  else
  {
    BOOL v23 = v19 < v21;
    BOOL v11 = v18 == v20;
    BOOL v24 = v18 < v20;
    if (v11) {
      BOOL v24 = v23;
    }
    if (!v24) {
      goto LABEL_42;
    }
    float v25 = *(float *)(v15 + 68);
  }
  char v26 = 0;
  int v28 = *(_DWORD *)v15;
  int v27 = *(_DWORD *)(v15 + 4);
  uint64_t v44 = *(void **)(v15 + 8);
  *(void *)uint64_t v50 = *(void *)(v15 + 16);
  *(void *)&v50[7] = *(void *)(v15 + 23);
  char v43 = *(unsigned char *)(v15 + 31);
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = 0;
  *(_OWORD *)uint64_t v49 = *(_OWORD *)(v15 + 33);
  *(void *)&v49[14] = *(void *)(v15 + 47);
  char v45 = *(unsigned char *)(v15 + 55);
  char v46 = *(unsigned char *)(v15 + 32);
  *(void *)(v15 + 40) = 0;
  *(void *)(v15 + 48) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  int v48 = *(_DWORD *)(v15 + 64);
  uint64_t v47 = *(void *)(v15 + 56);
  uint64_t v29 = *(void *)(v15 + 72);
  uint64_t v30 = v16;
  int v31 = *(_DWORD *)v14;
  while (1)
  {
    uint64_t v32 = a1 + v30;
    int v33 = *(_DWORD *)(a1 + v30 + 164);
    *(_DWORD *)(v32 + 240) = v31;
    *(_DWORD *)(v32 + 244) = v33;
    int v34 = (void **)(a1 + v30 + 248);
    if (v26 < 0) {
      operator delete(*v34);
    }
    *(_OWORD *)int v34 = *(_OWORD *)(v32 + 168);
    *(void *)(a1 + v30 + 264) = *(void *)(v32 + 184);
    *(unsigned char *)(v32 + 191) = 0;
    *(unsigned char *)(v32 + 168) = 0;
    BOOL v35 = (void **)(v32 + 272);
    if (*(char *)(v32 + 295) < 0) {
      operator delete(*v35);
    }
    uint64_t v36 = a1 + v30;
    *(_OWORD *)BOOL v35 = *(_OWORD *)(a1 + v30 + 192);
    *(void *)(v32 + 288) = *(void *)(a1 + v30 + 208);
    *(unsigned char *)(v36 + 215) = 0;
    *(unsigned char *)(v36 + 192) = 0;
    *(_OWORD *)(a1 + v30 + 296) = *(_OWORD *)(a1 + v30 + 216);
    *(void *)(v36 + 312) = *(void *)(a1 + v30 + 232);
    if (v30 == -160)
    {
      uint64_t v14 = a1;
      goto LABEL_37;
    }
    int v31 = *(_DWORD *)(v36 + 80);
    int v37 = *(_DWORD *)(v36 + 84);
    if (v31 == v28 && v37 == v27)
    {
      if (v25 >= *(float *)(a1 + v30 + 148)) {
        goto LABEL_37;
      }
    }
    else
    {
      BOOL v38 = v37 > v27;
      if (v31 != v28) {
        BOOL v38 = v31 > v28;
      }
      if (!v38)
      {
        uint64_t v36 = a1 + v30;
        uint64_t v14 = a1 + v30 + 160;
LABEL_37:
        uint64_t v39 = v36 + 216;
        float v40 = (void **)(v36 + 192);
        uint64_t v41 = (void **)(v36 + 168);
        *(_DWORD *)uint64_t v14 = v28;
        *(_DWORD *)(v14 + 4) = v27;
        if (*(char *)(v14 + 31) < 0) {
          operator delete(*v41);
        }
        *uint64_t v41 = v44;
        *(void *)(v14 + 16) = *(void *)v50;
        *(void *)(v14 + 23) = *(void *)&v50[7];
        *(unsigned char *)(v14 + 31) = v43;
        if (*(char *)(v14 + 55) < 0) {
          operator delete(*v40);
        }
        *(unsigned char *)float v40 = v46;
        *(_OWORD *)(v14 + 33) = *(_OWORD *)v49;
        *(void *)(v14 + 47) = *(void *)&v49[14];
        *(unsigned char *)(v14 + 55) = v45;
        *(void *)uint64_t v39 = v47;
        *(_DWORD *)(v39 + 8) = v48;
        *(float *)(v14 + 68) = v25;
        ++v17;
        *(void *)(v14 + 72) = v29;
        uint64_t v2 = v42;
        if (v17 == 8) {
          return v15 + 80 == v42;
        }
LABEL_42:
        uint64_t v14 = v15;
        v16 += 80;
        v15 += 80;
        if (v15 == v2) {
          return 1;
        }
        goto LABEL_12;
      }
    }
    v14 -= 80;
    char v26 = *(unsigned char *)(v32 + 191);
    v30 -= 80;
  }
}

uint64_t sub_25B51BF50(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v162 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 232)) {
    BOOL v9 = *(unsigned char *)(a2 + 536) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v11 = !v9 && *(unsigned char *)(a2 + 736) != 0;
  if (v7 == v8)
  {
    if (v11)
    {
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      uint64_t v12 = *(void *)(result + 104);
      BOOL v13 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v12)
        {
          uint64_t v14 = *(int **)(a2 + 240);
          uint64_t v15 = *(unsigned __int8 **)(a2 + 544);
          uint64_t v16 = *(unsigned __int8 **)(a2 + 744);
          do
          {
            int v18 = *v14++;
            int v17 = v18;
            int v19 = *v15++;
            int v20 = (*(_DWORD *)(a2 + 344) - v19) * v17;
            int v21 = *v16++;
            *v13++ = v20 * v21;
            --v12;
          }
          while (v12);
        }
      }
      else if (v12)
      {
        uint64_t v81 = 0;
        uint64_t v82 = *(void *)(result + 56);
        uint64_t v83 = *(void *)(result + 64);
        uint64_t v84 = *(void *)(a2 + 240);
        uint64_t v85 = *(void *)(a2 + 544);
        uint64_t v86 = *(void *)(a2 + 744);
        do
        {
          BOOL result = 0;
          v13[v82 * (void)v147 + v83 * *((void *)&v147 + 1)] = (*(_DWORD *)(a2 + 344)
                                                                  - *(unsigned __int8 *)(v85 + v81))
                                                                 * *(_DWORD *)(v84 + 4 * v81)
                                                                 * *(unsigned __int8 *)(v86 + v81);
          do
          {
            uint64_t v87 = *(void *)((char *)&v147 + result + 8) + 1;
            *(void *)((char *)&v147 + result + 8) = v87;
            if (v87 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v147 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v81;
        }
        while (v81 != v12);
      }
    }
    else
    {
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      uint64_t v50 = *(void *)(result + 104);
      uint64_t v51 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v50)
        {
          uint64_t v52 = 0;
          uint64_t v53 = result + 16;
          do
          {
            BOOL result = sub_25B51C9E8(a2, v52, v147, *((uint64_t *)&v147 + 1));
            uint64_t v54 = 0;
            *(_DWORD *)(v51 + 4 * v52) = result;
            do
            {
              uint64_t v55 = *(void *)((char *)&v147 + v54 + 8) + 1;
              *(void *)((char *)&v147 + v54 + 8) = v55;
              if (v55 != *(void *)(v53 + v54)) {
                break;
              }
              *(void *)((char *)&v147 + v54 + 8) = 0;
              v54 -= 8;
            }
            while (v54 != -16);
            ++v52;
          }
          while (v52 != v50);
        }
      }
      else if (v50)
      {
        uint64_t v88 = 0;
        uint64_t v89 = *(void *)(result + 56);
        uint64_t v90 = *(void *)(result + 64);
        uint64_t v91 = result + 16;
        do
        {
          uint64_t v92 = v89 * v147 + v90 * *((void *)&v147 + 1);
          BOOL result = sub_25B51C9E8(a2, v88, v147, *((uint64_t *)&v147 + 1));
          uint64_t v93 = 0;
          *(_DWORD *)(v51 + 4 * v92) = result;
          do
          {
            uint64_t v94 = *(void *)((char *)&v147 + v93 + 8) + 1;
            *(void *)((char *)&v147 + v93 + 8) = v94;
            if (v94 != *(void *)(v91 + v93)) {
              break;
            }
            *(void *)((char *)&v147 + v93 + 8) = 0;
            v93 -= 8;
          }
          while (v93 != -16);
          ++v88;
        }
        while (v88 != v50);
      }
    }
  }
  else
  {
    if (v11)
    {
      long long v160 = 0uLL;
      long long v161 = 0uLL;
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      sub_25B40AB84((uint64_t)&v147, v5, (_OWORD *)a2, (uint64_t)&v138);
      uint64_t v22 = 0;
      char v23 = 1;
      do
      {
        uint64_t v24 = *((void *)&v138 + v22);
        uint64_t v25 = *((void *)v5 + v22);
        if ((v23 & 1) == 0) {
          break;
        }
        char v23 = 0;
        uint64_t v22 = 1;
      }
      while (v24 == v25);
      if (v24 != v25)
      {
        char v26 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int v27 = sub_25B406B20(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v27, (uint64_t)" ", 1);
        int v28 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v29 = (void *)std::ostream::operator<<();
        sub_25B406B20(v29, (uint64_t)" ", 1);
        sub_25B406B20(v29, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        uint64_t v30 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        int v31 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v145 = 0u;
      long long v146 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v144[0].__locale_ = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      uint64_t v32 = *(void *)(v3 + 104);
      uint64_t v33 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v32)
        {
          uint64_t v34 = 0;
          uint64_t v36 = (uint64_t *)*((void *)&v148 + 1);
          BOOL v35 = (uint64_t *)v149;
          unint64_t v37 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
          if (v37 <= 1) {
            unint64_t v37 = 1;
          }
          uint64_t v38 = *(void *)(a2 + 240);
          uint64_t v39 = *(void *)(a2 + 544);
          uint64_t v40 = *(void *)(a2 + 744);
          do
          {
            long long v141 = *(_OWORD *)&v144[0].__locale_;
            if (v35 != v36)
            {
              uint64_t v41 = v36;
              unint64_t v42 = v37;
              do
              {
                uint64_t v43 = *v41++;
                *((void *)&v141 + v43) = 0;
                --v42;
              }
              while (v42);
            }
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v46 = 1;
            do
            {
              char v47 = v46;
              v45 += *((void *)&v159 + v44) * *((void *)&v141 + v44);
              uint64_t v44 = 1;
              char v46 = 0;
            }
            while ((v47 & 1) != 0);
            *(_DWORD *)(v33 + 4 * v34) = (*(_DWORD *)(a2 + 344) - *(unsigned __int8 *)(v39 + v45))
                                       * *(_DWORD *)(v38 + 4 * v45)
                                       * *(unsigned __int8 *)(v40 + v45);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v49 = (std::locale::__imp *)((char *)v144[i].__locale_ + 1);
              v144[i].__locale_ = v49;
              if (v49 != *(std::locale::__imp **)((char *)&v138 + i * 8)) {
                break;
              }
              v144[i].__locale_ = 0;
            }
            ++v34;
          }
          while (v34 != v32);
        }
      }
      else if (v32)
      {
        uint64_t v95 = 0;
        uint64_t v97 = (uint64_t *)*((void *)&v148 + 1);
        unint64_t v96 = (uint64_t *)v149;
        unint64_t v98 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
        if (v98 <= 1) {
          unint64_t v98 = 1;
        }
        uint64_t v99 = *(void *)(v3 + 56);
        uint64_t v100 = *(void *)(v3 + 64);
        uint64_t v101 = *(void *)(a2 + 240);
        uint64_t v102 = *(void *)(a2 + 544);
        uint64_t v103 = *(void *)(a2 + 744);
        do
        {
          locale = v144[0].__locale_;
          uint64_t v104 = v144[1].__locale_;
          long long v141 = *(_OWORD *)&v144[0].__locale_;
          if (v96 != v97)
          {
            uint64_t v106 = v97;
            unint64_t v107 = v98;
            do
            {
              uint64_t v108 = *v106++;
              *((void *)&v141 + v108) = 0;
              --v107;
            }
            while (v107);
          }
          uint64_t v109 = 0;
          uint64_t v110 = 0;
          char v111 = 1;
          do
          {
            char v112 = v111;
            v110 += *((void *)&v159 + v109) * *((void *)&v141 + v109);
            uint64_t v109 = 1;
            char v111 = 0;
          }
          while ((v112 & 1) != 0);
          *(_DWORD *)(v33 + 4 * ((void)locale * v99 + (void)v104 * v100)) = (*(_DWORD *)(a2 + 344)
                                                                               - *(unsigned __int8 *)(v102 + v110))
                                                                              * *(_DWORD *)(v101 + 4 * v110)
                                                                              * *(unsigned __int8 *)(v103 + v110);
          for (uint64_t j = 1; j != -1; --j)
          {
            long long v114 = (std::locale::__imp *)((char *)v144[j].__locale_ + 1);
            v144[j].__locale_ = v114;
            if (v114 != *(std::locale::__imp **)((char *)&v138 + j * 8)) {
              break;
            }
            v144[j].__locale_ = 0;
          }
          ++v95;
        }
        while (v95 != v32);
      }
    }
    else
    {
      long long v160 = 0uLL;
      long long v161 = 0uLL;
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      sub_25B40AB84((uint64_t)&v147, v5, (_OWORD *)a2, (uint64_t)&v138);
      uint64_t v56 = 0;
      char v57 = 1;
      do
      {
        uint64_t v58 = *((void *)&v138 + v56);
        uint64_t v59 = *((void *)v5 + v56);
        if ((v57 & 1) == 0) {
          break;
        }
        char v57 = 0;
        uint64_t v56 = 1;
      }
      while (v58 == v59);
      if (v58 != v59)
      {
        uint64_t v60 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v61 = sub_25B406B20(v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v61, (uint64_t)" ", 1);
        uint64_t v62 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v63 = (void *)std::ostream::operator<<();
        sub_25B406B20(v63, (uint64_t)" ", 1);
        sub_25B406B20(v63, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
        uint64_t v64 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
        unint64_t v65 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v145 = 0u;
      long long v146 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v144[0].__locale_ = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      uint64_t v66 = *(void *)(v3 + 104);
      uint64_t v67 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v66)
        {
          uint64_t v68 = 0;
          float v70 = (uint64_t *)*((void *)&v148 + 1);
          int v69 = (uint64_t *)v149;
          unint64_t v71 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
          if (v71 <= 1) {
            unint64_t v71 = 1;
          }
          unint64_t v136 = v71;
          do
          {
            long long v141 = *(_OWORD *)&v144[0].__locale_;
            if (v69 != v70)
            {
              uint64_t v72 = v70;
              unint64_t v73 = v136;
              do
              {
                uint64_t v74 = *v72++;
                *((void *)&v141 + v74) = 0;
                --v73;
              }
              while (v73);
            }
            uint64_t v75 = 0;
            uint64_t v76 = 0;
            char v77 = 1;
            do
            {
              char v78 = v77;
              v76 += *((void *)&v159 + v75) * *((void *)&v141 + v75);
              uint64_t v75 = 1;
              char v77 = 0;
            }
            while ((v78 & 1) != 0);
            *(_DWORD *)(v67 + 4 * v68) = sub_25B51C9E8(a2, v76, v141, *((uint64_t *)&v141 + 1));
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v80 = (std::locale::__imp *)((char *)v144[k].__locale_ + 1);
              v144[k].__locale_ = v80;
              if (v80 != *(std::locale::__imp **)((char *)&v138 + k * 8)) {
                break;
              }
              v144[k].__locale_ = 0;
            }
            ++v68;
          }
          while (v68 != v66);
        }
      }
      else if (v66)
      {
        uint64_t v115 = 0;
        long long v135 = (uint64_t *)v149;
        long long v137 = (uint64_t *)*((void *)&v148 + 1);
        if ((unint64_t)((uint64_t)(v149 - *((void *)&v148 + 1)) >> 3) <= 1) {
          uint64_t v116 = 1;
        }
        else {
          uint64_t v116 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
        }
        uint64_t v134 = *(void *)(v3 + 64);
        uint64_t v132 = v116;
        uint64_t v133 = *(void *)(v3 + 56);
        do
        {
          uint64_t v117 = v66;
          uint64_t v118 = v67;
          uint64_t v119 = v144[0].__locale_;
          uint64_t v120 = v144[1].__locale_;
          long long v141 = *(_OWORD *)&v144[0].__locale_;
          if (v135 != v137)
          {
            uint64_t v121 = v137;
            uint64_t v122 = v132;
            do
            {
              uint64_t v123 = *v121++;
              *((void *)&v141 + v123) = 0;
              --v122;
            }
            while (v122);
          }
          uint64_t v124 = 0;
          uint64_t v125 = 0;
          char v126 = 1;
          do
          {
            char v127 = v126;
            v125 += *((void *)&v159 + v124) * *((void *)&v141 + v124);
            uint64_t v124 = 1;
            char v126 = 0;
          }
          while ((v127 & 1) != 0);
          int v128 = sub_25B51C9E8(a2, v125, v141, *((uint64_t *)&v141 + 1));
          uint64_t v129 = v133 * (void)v119 + v134 * (void)v120;
          uint64_t v67 = v118;
          *(_DWORD *)(v118 + 4 * v129) = v128;
          for (uint64_t m = 1; m != -1; --m)
          {
            char v131 = (std::locale::__imp *)((char *)v144[m].__locale_ + 1);
            v144[m].__locale_ = v131;
            if (v131 != *(std::locale::__imp **)((char *)&v138 + m * 8)) {
              break;
            }
            v144[m].__locale_ = 0;
          }
          ++v115;
          uint64_t v66 = v117;
        }
        while (v115 != v117);
      }
    }
    return sub_25B3F9500((uint64_t)&v147);
  }
  return result;
}

void sub_25B51C9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_25B51C9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 232)) {
    uint64_t v4 = *(void *)(a1 + 152) * a3 + *(void *)(a1 + 160) * a4;
  }
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a1 + 536)) {
    uint64_t v5 = *(void *)(a1 + 456) * a3 + *(void *)(a1 + 464) * a4;
  }
  int v6 = *(_DWORD *)(*(void *)(a1 + 240) + 4 * v4);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 544) + v5);
  if (!*(unsigned char *)(a1 + 736)) {
    a2 = *(void *)(a1 + 656) * a3 + *(void *)(a1 + 664) * a4;
  }
  return (*(_DWORD *)(a1 + 344) - v7) * v6 * *(unsigned __int8 *)(*(void *)(a1 + 744) + a2);
}

uint64_t sub_25B51CA5C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v102 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      uint64_t v10 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          for (uint64_t i = 0; i != v9; ++i)
            *(unsigned char *)(v10 + i) = *(unsigned __int8 *)(*(void *)(a2 + 240) + i) == *(unsigned __int8 *)(a2 + 296);
        }
      }
      else if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
        {
          uint64_t v63 = 0;
          *(unsigned char *)(v10 + *(void *)(result + 56) * v102 + *(void *)(result + 64) * *((void *)&v102 + 1)) = *(unsigned __int8 *)(*(void *)(a2 + 240) + j) == *(unsigned __int8 *)(a2 + 296);
          do
          {
            uint64_t v64 = *(void *)((char *)&v102 + v63 + 8) + 1;
            *(void *)((char *)&v102 + v63 + 8) = v64;
            if (v64 != *(void *)(result + 16 + v63)) {
              break;
            }
            *(void *)((char *)&v102 + v63 + 8) = 0;
            v63 -= 8;
          }
          while (v63 != -16);
        }
      }
    }
    else
    {
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v102 = 0uLL;
      uint64_t v34 = *(void *)(result + 104);
      uint64_t v35 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v34)
        {
          for (uint64_t k = 0; k != v34; ++k)
          {
            uint64_t v37 = k;
            if (!*(unsigned char *)(a2 + 232)) {
              uint64_t v37 = *(void *)(a2 + 152) * v102 + *(void *)(a2 + 160) * *((void *)&v102 + 1);
            }
            uint64_t v38 = 0;
            *(unsigned char *)(v35 + k) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v37) == *(unsigned __int8 *)(a2 + 296);
            do
            {
              uint64_t v39 = *(void *)((char *)&v102 + v38 + 8) + 1;
              *(void *)((char *)&v102 + v38 + 8) = v39;
              if (v39 != *(void *)(result + 16 + v38)) {
                break;
              }
              *(void *)((char *)&v102 + v38 + 8) = 0;
              v38 -= 8;
            }
            while (v38 != -16);
          }
        }
      }
      else if (v34)
      {
        for (uint64_t m = 0; m != v34; ++m)
        {
          uint64_t v78 = m;
          if (!*(unsigned char *)(a2 + 232)) {
            uint64_t v78 = *(void *)(a2 + 152) * v102 + *(void *)(a2 + 160) * *((void *)&v102 + 1);
          }
          uint64_t v79 = 0;
          BOOL result = *(void *)(v3 + 64);
          *(unsigned char *)(v35 + *(void *)(v3 + 56) * v102 + result * *((void *)&v102 + 1)) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v78) == *(unsigned __int8 *)(a2 + 296);
          do
          {
            uint64_t v80 = *(void *)((char *)&v102 + v79 + 8) + 1;
            *(void *)((char *)&v102 + v79 + 8) = v80;
            if (v80 != *(void *)(v3 + 16 + v79)) {
              break;
            }
            *(void *)((char *)&v102 + v79 + 8) = 0;
            v79 -= 8;
          }
          while (v79 != -16);
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v102 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v93 = 0uLL;
      sub_25B40AB84((uint64_t)&v102, v5, (_OWORD *)a2, (uint64_t)&v93);
      uint64_t v12 = 0;
      char v13 = 1;
      do
      {
        uint64_t v14 = *((void *)&v93 + v12);
        uint64_t v15 = *((void *)v5 + v12);
        if ((v13 & 1) == 0) {
          break;
        }
        char v13 = 0;
        uint64_t v12 = 1;
      }
      while (v14 == v15);
      if (v14 != v15)
      {
        uint64_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        int v18 = (void *)MEMORY[0x263F8C0F8];
        int v19 = (void *)std::ostream::operator<<();
        sub_25B406B20(v19, (uint64_t)" ", 1);
        sub_25B406B20(v19, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        int v20 = std::locale::use_facet(v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v99);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        int v21 = std::locale::use_facet(v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v99);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      *(_OWORD *)&v99[0].__locale_ = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      uint64_t v22 = *(void *)(v3 + 104);
      uint64_t v23 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v22)
        {
          for (uint64_t n = 0; n != v22; ++n)
          {
            uint64_t v25 = (uint64_t *)*((void *)&v103 + 1);
            long long v96 = *(_OWORD *)&v99[0].__locale_;
            if ((void)v104 != *((void *)&v103 + 1))
            {
              unint64_t v26 = (uint64_t)(v104 - *((void *)&v103 + 1)) >> 3;
              if (v26 <= 1) {
                unint64_t v26 = 1;
              }
              do
              {
                uint64_t v27 = *v25++;
                *((void *)&v96 + v27) = 0;
                --v26;
              }
              while (v26);
            }
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            char v30 = 1;
            do
            {
              char v31 = v30;
              v29 += *((void *)&v114 + v28) * *((void *)&v96 + v28);
              uint64_t v28 = 1;
              char v30 = 0;
            }
            while ((v31 & 1) != 0);
            *(unsigned char *)(v23 + n) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v29) == *(unsigned __int8 *)(a2 + 296);
            for (iuint64_t i = 1; ii != -1; --ii)
            {
              uint64_t v33 = (std::locale::__imp *)((char *)v99[ii].__locale_ + 1);
              v99[ii].__locale_ = v33;
              if (v33 != *(std::locale::__imp **)((char *)&v93 + ii * 8)) {
                break;
              }
              v99[ii].__locale_ = 0;
            }
          }
        }
      }
      else if (v22)
      {
        for (juint64_t j = 0; jj != v22; ++jj)
        {
          uint64_t v66 = (uint64_t *)*((void *)&v103 + 1);
          locale = v99[0].__locale_;
          uint64_t v68 = v99[1].__locale_;
          long long v96 = *(_OWORD *)&v99[0].__locale_;
          if ((void)v104 != *((void *)&v103 + 1))
          {
            unint64_t v69 = (uint64_t)(v104 - *((void *)&v103 + 1)) >> 3;
            if (v69 <= 1) {
              unint64_t v69 = 1;
            }
            do
            {
              uint64_t v70 = *v66++;
              *((void *)&v96 + v70) = 0;
              --v69;
            }
            while (v69);
          }
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          char v73 = 1;
          do
          {
            char v74 = v73;
            v72 += *((void *)&v114 + v71) * *((void *)&v96 + v71);
            uint64_t v71 = 1;
            char v73 = 0;
          }
          while ((v74 & 1) != 0);
          *(unsigned char *)(v23 + *(void *)(v3 + 56) * (void)locale + *(void *)(v3 + 64) * (void)v68) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v72) == *(unsigned __int8 *)(a2 + 296);
          for (kuint64_t k = 1; kk != -1; --kk)
          {
            uint64_t v76 = (std::locale::__imp *)((char *)v99[kk].__locale_ + 1);
            v99[kk].__locale_ = v76;
            if (v76 != *(std::locale::__imp **)((char *)&v93 + kk * 8)) {
              break;
            }
            v99[kk].__locale_ = 0;
          }
        }
      }
    }
    else
    {
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      long long v109 = 0uLL;
      long long v110 = 0uLL;
      long long v107 = 0uLL;
      long long v108 = 0uLL;
      long long v105 = 0uLL;
      long long v106 = 0uLL;
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v102 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v93 = 0uLL;
      sub_25B40AB84((uint64_t)&v102, v5, (_OWORD *)a2, (uint64_t)&v93);
      uint64_t v40 = 0;
      char v41 = 1;
      do
      {
        uint64_t v42 = *((void *)&v93 + v40);
        uint64_t v43 = *((void *)v5 + v40);
        if ((v41 & 1) == 0) {
          break;
        }
        char v41 = 0;
        uint64_t v40 = 1;
      }
      while (v42 == v43);
      if (v42 != v43)
      {
        uint64_t v44 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v45 = sub_25B406B20(v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v45, (uint64_t)" ", 1);
        char v46 = (void *)MEMORY[0x263F8C0F8];
        char v47 = (void *)std::ostream::operator<<();
        sub_25B406B20(v47, (uint64_t)" ", 1);
        sub_25B406B20(v47, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(*v47 - 24)));
        int v48 = std::locale::use_facet(v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
        std::locale::~locale(v99);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
        uint64_t v49 = std::locale::use_facet(v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale(v99);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      *(_OWORD *)&v99[0].__locale_ = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      uint64_t v50 = *(void *)(v3 + 104);
      uint64_t v51 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v50)
        {
          for (muint64_t m = 0; mm != v50; ++mm)
          {
            uint64_t v53 = (uint64_t *)*((void *)&v103 + 1);
            long long v96 = *(_OWORD *)&v99[0].__locale_;
            if ((void)v104 != *((void *)&v103 + 1))
            {
              unint64_t v54 = (uint64_t)(v104 - *((void *)&v103 + 1)) >> 3;
              if (v54 <= 1) {
                unint64_t v54 = 1;
              }
              do
              {
                uint64_t v55 = *v53++;
                *((void *)&v96 + v55) = 0;
                --v54;
              }
              while (v54);
            }
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            char v58 = 1;
            do
            {
              char v59 = v58;
              v57 += *((void *)&v114 + v56) * *((void *)&v96 + v56);
              uint64_t v56 = 1;
              char v58 = 0;
            }
            while ((v59 & 1) != 0);
            if (!*(unsigned char *)(a2 + 232)) {
              uint64_t v57 = *(void *)(a2 + 152) * v96 + *(void *)(a2 + 160) * *((void *)&v96 + 1);
            }
            *(unsigned char *)(v51 + mm) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v57) == *(unsigned __int8 *)(a2 + 296);
            for (nuint64_t n = 1; nn != -1; --nn)
            {
              uint64_t v61 = (std::locale::__imp *)((char *)v99[nn].__locale_ + 1);
              v99[nn].__locale_ = v61;
              if (v61 != *(std::locale::__imp **)((char *)&v93 + nn * 8)) {
                break;
              }
              v99[nn].__locale_ = 0;
            }
          }
        }
      }
      else if (v50)
      {
        for (uint64_t i1 = 0; i1 != v50; ++i1)
        {
          uint64_t v82 = (uint64_t *)*((void *)&v103 + 1);
          uint64_t v83 = v99[0].__locale_;
          uint64_t v84 = v99[1].__locale_;
          long long v96 = *(_OWORD *)&v99[0].__locale_;
          if ((void)v104 != *((void *)&v103 + 1))
          {
            unint64_t v85 = (uint64_t)(v104 - *((void *)&v103 + 1)) >> 3;
            if (v85 <= 1) {
              unint64_t v85 = 1;
            }
            do
            {
              uint64_t v86 = *v82++;
              *((void *)&v96 + v86) = 0;
              --v85;
            }
            while (v85);
          }
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          char v89 = 1;
          do
          {
            char v90 = v89;
            v88 += *((void *)&v114 + v87) * *((void *)&v96 + v87);
            uint64_t v87 = 1;
            char v89 = 0;
          }
          while ((v90 & 1) != 0);
          if (!*(unsigned char *)(a2 + 232)) {
            uint64_t v88 = *(void *)(a2 + 152) * v96 + *(void *)(a2 + 160) * *((void *)&v96 + 1);
          }
          *(unsigned char *)(v51 + *(void *)(v3 + 56) * (void)v83 + *(void *)(v3 + 64) * (void)v84) = *(unsigned __int8 *)(*(void *)(a2 + 240) + v88) == *(unsigned __int8 *)(a2 + 296);
          for (uint64_t i2 = 1; i2 != -1; --i2)
          {
            uint64_t v92 = (std::locale::__imp *)((char *)v99[i2].__locale_ + 1);
            v99[i2].__locale_ = v92;
            if (v92 != *(std::locale::__imp **)((char *)&v93 + i2 * 8)) {
              break;
            }
            v99[i2].__locale_ = 0;
          }
        }
      }
    }
    return sub_25B3F9500((uint64_t)&v102);
  }
  return result;
}

void sub_25B51D474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

float sub_25B51D4A8(float *a1, unsigned int a2, float a3)
{
  float v3 = (float)(1.0 / a3) * a1[29];
  float v9 = v3;
  uint64_t v4 = a1 + 22;
  uint64_t v5 = a1 + 23;
  uint64_t v6 = 22;
  if (a2 < 2)
  {
    uint64_t v6 = 20;
    uint64_t v4 = a1 + 20;
  }
  uint64_t v7 = 23;
  if (a2 < 2)
  {
    uint64_t v7 = 21;
    uint64_t v5 = a1 + 21;
  }
  if (a1[v7] >= v3) {
    uint64_t v5 = &v9;
  }
  if (v3 >= a1[v6]) {
    uint64_t v4 = v5;
  }
  return *v4 * a3;
}

void sub_25B51D54C(unsigned char *a1, float *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int32 a7, double a8, double a9, __n128 a10, int8x16_t a11, __n128 a12)
{
  if (a7 > 1)
  {
    float v47 = *(float *)(a6 + 196);
    *(float *)&__int32 v48 = v47 + 0.1;
    *(float *)&__int32 v127 = v47 + -0.1;
    *(float32x2_t *)a11.i8 = vmul_f32(vadd_f32(*(float32x2_t *)(a6 + 200), *(float32x2_t *)(a6 + 208)), (float32x2_t)0x3F0000003F000000);
    int8x16_t v126 = a11;
    uint64_t v49 = *(_DWORD **)(a6 + 576);
    int8x16_t v50 = a11;
    *(float *)&v50.i32[2] = v47;
    int8x16_t v51 = a11;
    v51.i32[2] = v48;
    int8x16_t v140 = v50;
    int8x16_t v141 = v51;
    sub_25B47CC38(&v135, v49, &v140, (simd_float4x4 *)(a6 + 80), a6 + 144, 0);
    uint64_t v52 = *(_DWORD **)(a6 + 576);
    int8x16_t v53 = v126;
    int8x16_t v54 = v126;
    v54.i32[2] = *(_DWORD *)(a6 + 196);
    v53.i32[2] = v127;
    int8x16_t v140 = v54;
    int8x16_t v141 = v53;
    sub_25B47CC38((float32x2_t *)&v146, v52, &v140, (simd_float4x4 *)(a6 + 80), a6 + 144, 0);
    float v55 = 0.0;
    float v56 = 0.0;
    if (BYTE8(v136))
    {
      float32x2_t v57 = vsub_f32(v135, *(float32x2_t *)&v136);
      float v56 = sqrtf(vaddv_f32(vmul_f32(v57, v57)));
    }
    if (v148)
    {
      float32x2_t v58 = vsub_f32((float32x2_t)v146, (float32x2_t)v147);
      float v55 = sqrtf(vaddv_f32(vmul_f32(v58, v58)));
    }
    if (v56 >= v55) {
      float v55 = v56;
    }
    char v59 = (float32x2_t *)(a6 + 480);
    uint64_t v60 = 504;
    if (a7 == 2) {
      uint64_t v60 = 480;
    }
    float32x2_t v61 = *(float32x2_t *)(a6 + v60);
    if (a7 != 2) {
      char v59 = (float32x2_t *)(a6 + 504);
    }
    float32x2_t v62 = v59[1];
    float32x2_t v63 = vsub_f32(v61, v62);
    float v64 = sqrtf(vaddv_f32(vmul_f32(v63, v63)));
    float v65 = (float)*(unint64_t *)(a5 + 16);
    if ((float)(v64 / v65) >= a2[26])
    {
      float v66 = fmaxf(v55 * 10.0, 1.0);
      float v67 = sub_25B51D4A8(a2, a7, v66);
      float v69 = v68;
      float v71 = v70;
      sub_25B5145A4((uint64_t)&v146, a4, v61, v62, v67);
      if (v71 >= (float)(v69 / 3.0)) {
        float v72 = v71;
      }
      else {
        float v72 = v69 / 3.0;
      }
      sub_25B514848((uint64_t)&v140, -v69, v69 + v72, v72);
      if (!v144)
      {
        __stra = a3;
        uint64_t v125 = a1;
        uint64_t v73 = v142;
        if (v142)
        {
          char v74 = 0;
          uint64_t v75 = 0;
          unint64_t v76 = 0;
          uint64_t v77 = 0;
          uint64_t v78 = v145;
          do
          {
            if ((unint64_t)v75 >= v76)
            {
              uint64_t v80 = v75 - v74;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v76 - (void)v74) >> 1 > v81) {
                unint64_t v81 = (uint64_t)(v76 - (void)v74) >> 1;
              }
              if (v76 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82) {
                unint64_t v82 = (unint64_t)sub_25B3FBC64(v82);
              }
              else {
                uint64_t v83 = 0;
              }
              uint64_t v84 = (float *)(v82 + 4 * v80);
              *uint64_t v84 = *(float *)(v78 + 4 * v77);
              uint64_t v79 = v84 + 1;
              while (v75 != v74)
              {
                int v85 = *((_DWORD *)v75-- - 1);
                *((_DWORD *)v84-- - 1) = v85;
              }
              unint64_t v76 = v82 + 4 * v83;
              if (v74) {
                operator delete(v74);
              }
              char v74 = v84;
            }
            else
            {
              *uint64_t v75 = *(float *)(v78 + 4 * v77);
              uint64_t v79 = v75 + 1;
            }
            ++v77;
            uint64_t v75 = v79;
          }
          while (v77 != v73);
        }
        else
        {
          char v74 = 0;
          uint64_t v79 = 0;
        }
        unint64_t v86 = 126 - 2 * __clz(v79 - v74);
        if (v79 == v74) {
          uint64_t v87 = 0;
        }
        else {
          uint64_t v87 = v86;
        }
        sub_25B51E760(v74, v79, v87, 1);
        if (a2[28] >= (float)((float)(v66 * v72) / 2.5)) {
          float v89 = (float)(v66 * v72) / 2.5;
        }
        else {
          float v89 = a2[28];
        }
        if (v79 == v74) {
          goto LABEL_97;
        }
        *(void *)&long long v88 = 0;
        long long v128 = v88;
        uint64_t v91 = v146;
        char v90 = v147;
        float v92 = 0.0;
        long long v93 = v74;
        while (1)
        {
          float v94 = *v93;
          long long v95 = (float *)(a6 + 192);
          if (a7 != 2) {
            long long v95 = (float *)(a6 + 196);
          }
          *(float *)&long long v136 = *v95 + v94;
          uint64_t v96 = *(void *)(a6 + 208);
          float32x2_t v135 = *(float32x2_t *)(a6 + 200);
          LODWORD(__p[0]) = v136;
          *((void *)&v136 + 1) = v96;
          sub_25B47CC38((float32x2_t *)&__dst, *(_DWORD **)(a6 + 576), (int8x16_t *)&v135, (simd_float4x4 *)(a6 + 80), a6 + 144, 1);
          if ((_BYTE)v134)
          {
            float32x2_t v97 = vsub_f32(*(float32x2_t *)&__dst, *(float32x2_t *)((char *)&__dst + 8));
            float v98 = sqrtf(vaddv_f32(vmul_f32(v97, v97)));
            if ((float)(v98 / v65) >= a2[26] && (float)(v98 / v64) >= a2[27])
            {
              float v99 = sub_25B515260(v91, v90, *(float32x2_t *)&__dst, *(float32x2_t *)((char *)&__dst + 8), v89);
              if (v99 > 1.0) {
                float v99 = 1.0;
              }
              BOOL v100 = v99 <= v92;
              if (v99 > v92) {
                float v92 = v99;
              }
              long long v101 = v128;
              if (!v100) {
                *(float *)&long long v101 = v94;
              }
              long long v128 = v101;
              if (v99 > 0.9) {
                break;
              }
            }
          }
          if (++v93 == v79) {
            goto LABEL_94;
          }
        }
        float v92 = v99;
        *(float *)&long long v128 = v94;
LABEL_94:
        if (v92 <= 0.55)
        {
LABEL_97:
          *uint64_t v125 = 0;
          v125[80] = 0;
          if (!v74) {
            goto LABEL_141;
          }
        }
        else
        {
          if (a7 == 2) {
            float v116 = *(float *)(a6 + 192);
          }
          else {
            float v116 = *(float *)(a6 + 196);
          }
          uint64_t v132 = COERCE_UNSIGNED_INT(v116 + *(float *)&v128);
          memset(__p, 0, sizeof(__p));
          long long v136 = 0u;
          v135.i32[0] = *(_DWORD *)(a6 + 632);
          v135.i32[1] = a7;
          std::string::operator=((std::string *)&v136, __stra);
          if (*(char *)(a6 + 631) < 0)
          {
            sub_25B4002F4(&__dst, *(void **)(a6 + 608), *(void *)(a6 + 616));
          }
          else
          {
            long long __dst = *(_OWORD *)(a6 + 608);
            uint64_t v134 = *(void **)(a6 + 624);
          }
          if (SHIBYTE(__p[3]) < 0) {
            operator delete(__p[1]);
          }
          *(_OWORD *)&__p[1] = __dst;
          __p[3] = v134;
          *(void *)&long long v138 = __PAIR64__(LODWORD(v92), a7);
          *((float *)&v138 + 2) = v64;
          uint64_t v117 = (_DWORD *)(a6 + 400);
          if (a7 != 2) {
            uint64_t v117 = (_DWORD *)(a6 + 404);
          }
          HIDWORD(v138) = *v117;
          uint64_t v139 = v132;
          *(float32x2_t *)uint64_t v125 = v135;
          *(_OWORD *)(v125 + 8) = v136;
          *((void **)v125 + 3) = __p[0];
          long long v136 = 0uLL;
          __p[0] = 0;
          *((void **)v125 + 6) = __p[3];
          *((_OWORD *)v125 + 2) = *(_OWORD *)&__p[1];
          memset(&__p[1], 0, 24);
          long long v118 = v138;
          *((void *)v125 + 9) = v139;
          *(_OWORD *)(v125 + 56) = v118;
          v125[80] = 1;
          if (!v74) {
            goto LABEL_141;
          }
        }
        uint64_t v119 = v74;
LABEL_140:
        operator delete(v119);
        goto LABEL_141;
      }
LABEL_48:
      *a1 = 0;
      a1[80] = 0;
      goto LABEL_141;
    }
LABEL_43:
    *a1 = 0;
    a1[80] = 0;
    return;
  }
  float v19 = fmaxf(sub_25B520BF0(a6, a7, a8, a9, a10, a11, a12) * 10.0, 1.0);
  float v20 = sub_25B51D4A8(a2, a7, v19);
  float v22 = v21;
  float v24 = v23;
  uint64_t v25 = (float32x2_t *)(a6 + 408);
  uint64_t v26 = 432;
  if (!a7) {
    uint64_t v26 = 408;
  }
  float32x2_t v27 = *(float32x2_t *)(a6 + v26);
  if (a7) {
    uint64_t v25 = (float32x2_t *)(a6 + 432);
  }
  float32x2_t v28 = v25[1];
  float32x2_t v29 = vsub_f32(v27, v28);
  float v30 = sqrtf(vaddv_f32(vmul_f32(v29, v29)));
  float v31 = (float)*(unint64_t *)(a5 + 8);
  if ((float)(v30 / v31) < a2[26]) {
    goto LABEL_43;
  }
  int v32 = a7;
  sub_25B5145A4((uint64_t)&v146, a4, v27, v28, v20);
  uint64_t v33 = v147;
  if (v147 == v146)
  {
    *a1 = 0;
    a1[80] = 0;
    if (!v33) {
      return;
    }
    goto LABEL_144;
  }
  if (v24 < (float)(v22 * 0.25)) {
    float v24 = v22 * 0.25;
  }
  sub_25B514848((uint64_t)&v140, -v22, v22 + v24, v24);
  if (v144) {
    goto LABEL_48;
  }
  char v130 = a2;
  __str = a3;
  uint64_t v124 = a1;
  uint64_t v34 = v142;
  if (v142)
  {
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = v145;
    do
    {
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v41 = v36 - v37;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v35 - (void)v37) >> 1 > v42) {
          unint64_t v42 = (uint64_t)(v35 - (void)v37) >> 1;
        }
        if (v35 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43) {
          unint64_t v43 = (unint64_t)sub_25B3FBC64(v43);
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = (float *)(v43 + 4 * v41);
        *uint64_t v45 = *(float *)(v39 + 4 * v38);
        uint64_t v40 = v45 + 1;
        while (v36 != v37)
        {
          int v46 = *((_DWORD *)v36-- - 1);
          *((_DWORD *)v45-- - 1) = v46;
        }
        unint64_t v35 = v43 + 4 * v44;
        if (v37) {
          operator delete(v37);
        }
        uint64_t v37 = v45;
      }
      else
      {
        *uint64_t v36 = *(float *)(v39 + 4 * v38);
        uint64_t v40 = v36 + 1;
      }
      ++v38;
      uint64_t v36 = v40;
    }
    while (v38 != v34);
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v37 = 0;
  }
  unint64_t v102 = 126 - 2 * __clz(v40 - v37);
  if (v40 == v37) {
    uint64_t v103 = 0;
  }
  else {
    uint64_t v103 = v102;
  }
  sub_25B51E028(v37, v40, v103, 1);
  if (v130[28] >= (float)((float)(v19 * v24) / 2.5)) {
    float v104 = (float)(v19 * v24) / 2.5;
  }
  else {
    float v104 = v130[28];
  }
  if (v40 == v37) {
    goto LABEL_120;
  }
  float v105 = 0.0;
  long long v106 = v146;
  long long v107 = v147;
  float v108 = 0.0;
  long long v109 = v37;
  while (1)
  {
    float v110 = *v109;
    sub_25B520CFC(&v135, a6, v32, *v109);
    if (BYTE8(v136))
    {
      float32x2_t v111 = vsub_f32(v135, *(float32x2_t *)&v136);
      float v112 = sqrtf(vaddv_f32(vmul_f32(v111, v111)));
      if ((float)(v112 / v31) >= v130[26] && (float)(v112 / v30) >= v130[27])
      {
        float v113 = sub_25B515260(v106, v107, v135, *(float32x2_t *)&v136, v104);
        if (v113 > 1.0) {
          float v113 = 1.0;
        }
        if (v113 > v105)
        {
          float v108 = v110;
          float v105 = v113;
        }
        if (v113 > 0.9) {
          break;
        }
      }
    }
    if (++v109 == v40) {
      goto LABEL_117;
    }
  }
  float v108 = v110;
  float v105 = v113;
LABEL_117:
  if (v105 <= 0.5)
  {
LABEL_120:
    unsigned char *v124 = 0;
    v124[80] = 0;
    if (v37)
    {
LABEL_139:
      uint64_t v119 = v37;
      goto LABEL_140;
    }
  }
  else
  {
    *(float *)&uint64_t v114 = sub_25B520D64((float32x2_t *)a6, v32, v108);
    uint64_t v115 = v114;
    memset(__p, 0, sizeof(__p));
    long long v136 = 0u;
    v135.i32[0] = *(_DWORD *)(a6 + 632);
    v135.i32[1] = v32;
    std::string::operator=((std::string *)&v136, __str);
    if (*(char *)(a6 + 631) < 0)
    {
      sub_25B4002F4(&__dst, *(void **)(a6 + 608), *(void *)(a6 + 616));
    }
    else
    {
      long long __dst = *(_OWORD *)(a6 + 608);
      uint64_t v134 = *(void **)(a6 + 624);
    }
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    *(_OWORD *)&__p[1] = __dst;
    __p[3] = v134;
    *(void *)&long long v138 = __PAIR64__(LODWORD(v105), v32);
    *((float *)&v138 + 2) = v30;
    uint64_t v120 = (_DWORD *)(a6 + 644);
    if (v32) {
      uint64_t v120 = (_DWORD *)(a6 + 648);
    }
    HIDWORD(v138) = *v120;
    uint64_t v139 = v115;
    *(float32x2_t *)uint64_t v124 = v135;
    *(_OWORD *)(v124 + 8) = v136;
    *((void **)v124 + 3) = __p[0];
    long long v136 = 0uLL;
    __p[0] = 0;
    *((void **)v124 + 6) = __p[3];
    *((_OWORD *)v124 + 2) = *(_OWORD *)&__p[1];
    memset(&__p[1], 0, 24);
    long long v121 = v138;
    *((void *)v124 + 9) = v139;
    *(_OWORD *)(v124 + 56) = v121;
    v124[80] = 1;
    if (v37) {
      goto LABEL_139;
    }
  }
LABEL_141:
  v140.i64[0] = (uint64_t)&unk_2708F27E8;
  if (v143) {
    sub_25B404120(v143);
  }
  uint64_t v33 = v146;
  if (v146) {
LABEL_144:
  }
    operator delete(v33);
}

void sub_25B51DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  sub_25B515404((uint64_t)&a23);
  if (v49) {
    operator delete(v49);
  }
  a33 = &unk_2708F27E8;
  if (a49) {
    sub_25B404120(a49);
  }
  uint64_t v52 = *(void **)(v50 - 176);
  if (v52) {
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

float *sub_25B51E028(float *result, float *a2, uint64_t a3, char a4)
{
  float v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    int v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v41 = *v11;
                if (fabsf(*v10) < fabsf(*v11))
                {
                  *int v11 = *v10;
                  float *v10 = v41;
                }
                break;
              case 3uLL:
                BOOL result = sub_25B51EE98(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = sub_25B51EF20(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                unint64_t v42 = v11 + 1;
                unint64_t v43 = v11 + 2;
                uint64_t v44 = v11 + 3;
                BOOL result = sub_25B51EF20(v11, v11 + 1, v11 + 2, v11 + 3);
                float v45 = v11[3];
                if (fabsf(*v10) < fabsf(v45))
                {
                  *uint64_t v44 = *v10;
                  float *v10 = v45;
                  int v46 = *(_DWORD *)v44;
                  float v47 = *v43;
                  float v48 = fabsf(*v44);
                  if (v48 < fabsf(*v43))
                  {
                    *(_DWORD *)unint64_t v43 = v46;
                    *uint64_t v44 = v47;
                    float v49 = *v42;
                    if (v48 < fabsf(*v42))
                    {
                      *((_DWORD *)v11 + 1) = v46;
                      void v11[2] = v49;
                      float v50 = *v11;
                      if (v48 < fabsf(*v11))
                      {
                        *(_DWORD *)int v11 = v46;
                        v11[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            int8x16_t v51 = v11 + 1;
            BOOL v53 = v11 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 4;
                float v55 = v11;
                do
                {
                  float v57 = *v55;
                  float v56 = v55[1];
                  float v55 = v51;
                  float v58 = fabsf(v56);
                  if (v58 < fabsf(v57))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(float *)((char *)v11 + v59) = v57;
                      uint64_t v60 = v59 - 4;
                      if (v59 == 4)
                      {
                        float32x2_t v61 = v11;
                        goto LABEL_83;
                      }
                      float v57 = *(float *)((char *)v11 + v59 - 8);
                      v59 -= 4;
                    }
                    while (v58 < fabsf(v57));
                    float32x2_t v61 = (float *)((char *)v11 + v60);
LABEL_83:
                    *float32x2_t v61 = v56;
                  }
                  int8x16_t v51 = v55 + 1;
                  v54 += 4;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                float v90 = *v9;
                float v89 = v9[1];
                float v9 = v51;
                float v91 = fabsf(v89);
                if (v91 < fabsf(v90))
                {
                  float v92 = v51;
                  do
                  {
                    *float v92 = v90;
                    float v90 = *(v92 - 2);
                    --v92;
                  }
                  while (v91 < fabsf(v90));
                  *float v92 = v89;
                }
                ++v51;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v62 = (v13 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  float v66 = &v11[v65];
                  if (2 * v64 + 2 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
                  {
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  float v67 = &v11[v64];
                  float v68 = *v66;
                  float v69 = *v67;
                  float v70 = fabsf(*v67);
                  if (fabsf(*v66) >= v70)
                  {
                    do
                    {
                      float v71 = v66;
                      *float v67 = v68;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v72 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      float v66 = &v11[v65];
                      uint64_t v73 = v72 + 2;
                      if (v73 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
                      {
                        ++v66;
                        uint64_t v65 = v73;
                      }
                      float v68 = *v66;
                      float v67 = v71;
                    }
                    while (fabsf(*v66) >= v70);
                    float *v71 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v74 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v75 = 0;
                float v76 = *v11;
                uint64_t v77 = v11;
                do
                {
                  uint64_t v78 = v77;
                  v77 += v75 + 1;
                  uint64_t v79 = 2 * v75;
                  uint64_t v75 = (2 * v75) | 1;
                  uint64_t v80 = v79 + 2;
                  if (v80 < v74 && fabsf(*v77) < fabsf(v77[1]))
                  {
                    ++v77;
                    uint64_t v75 = v80;
                  }
                  *uint64_t v78 = *v77;
                }
                while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if (v77 == --a2)
                {
                  float *v77 = v76;
                }
                else
                {
                  float *v77 = *a2;
                  *a2 = v76;
                  uint64_t v81 = (char *)v77 - (char *)v11 + 4;
                  if (v81 >= 5)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 2) - 2) >> 1;
                    uint64_t v83 = &v11[v82];
                    float v84 = *v83;
                    float v85 = *v77;
                    float v86 = fabsf(*v77);
                    if (fabsf(*v83) < v86)
                    {
                      do
                      {
                        uint64_t v87 = v83;
                        float *v77 = v84;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        uint64_t v83 = &v11[v82];
                        float v84 = *v83;
                        uint64_t v77 = v87;
                      }
                      while (fabsf(*v83) < v86);
                      *uint64_t v87 = v85;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            sub_25B51EE98(v9, &v9[v13 >> 1], a2 - 1);
            sub_25B51EE98(v9 + 1, v15 - 1, a2 - 2);
            sub_25B51EE98(v9 + 2, &v9[v14 + 1], a2 - 3);
            BOOL result = sub_25B51EE98(v15 - 1, v15, &v9[v14 + 1]);
            float v16 = *v9;
            *float v9 = *v15;
            float *v15 = v16;
          }
          else
          {
            BOOL result = sub_25B51EE98(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          float v17 = *v9;
          if (a4) {
            break;
          }
          float v18 = fabsf(v17);
          if (fabsf(*(v9 - 1)) < v18) {
            goto LABEL_13;
          }
          if (v18 >= fabsf(*v10))
          {
            uint64_t v33 = v9 + 1;
            do
            {
              int v11 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v18 >= fabsf(*v11));
          }
          else
          {
            int v11 = v9;
            do
            {
              float v32 = v11[1];
              ++v11;
            }
            while (v18 >= fabsf(v32));
          }
          uint64_t v34 = a2;
          if (v11 < a2)
          {
            uint64_t v34 = a2;
            do
              float v35 = *--v34;
            while (v18 < fabsf(v35));
          }
          if (v11 < v34)
          {
            float v36 = *v11;
            float v37 = *v34;
            do
            {
              *int v11 = v37;
              float *v34 = v36;
              do
              {
                float v38 = v11[1];
                ++v11;
                float v36 = v38;
              }
              while (v18 >= fabsf(v38));
              do
              {
                float v39 = *--v34;
                float v37 = v39;
              }
              while (v18 < fabsf(v39));
            }
            while (v11 < v34);
          }
          uint64_t v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *float v9 = *v40;
          }
          a4 = 0;
          float *v40 = v17;
        }
        float v18 = fabsf(v17);
LABEL_13:
        float v19 = v9;
        do
        {
          float v20 = v19;
          float v21 = v19[1];
          ++v19;
          float v22 = v21;
        }
        while (fabsf(v21) < v18);
        float v23 = a2;
        if (v20 == v9)
        {
          float v23 = a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            float v25 = *--v23;
          }
          while (fabsf(v25) >= v18);
        }
        else
        {
          do
            float v24 = *--v23;
          while (fabsf(v24) >= v18);
        }
        if (v19 < v23)
        {
          float v26 = *v23;
          float32x2_t v27 = v19;
          float32x2_t v28 = v23;
          do
          {
            float *v27 = v26;
            float *v28 = v22;
            do
            {
              float v20 = v27;
              float v29 = v27[1];
              ++v27;
              float v22 = v29;
            }
            while (fabsf(v29) < v18);
            do
            {
              float v30 = *--v28;
              float v26 = v30;
            }
            while (fabsf(v30) >= v18);
          }
          while (v27 < v28);
        }
        if (v20 != v9) {
          *float v9 = *v20;
        }
        *float v20 = v17;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        BOOL result = (float *)sub_25B51E028(v9, v20, a3, a4 & 1);
        a4 = 0;
        int v11 = v20 + 1;
      }
      BOOL v31 = sub_25B51F1C4(v9, v20);
      int v11 = v20 + 1;
      BOOL result = (float *)sub_25B51F1C4(v20 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

float *sub_25B51E760(float *result, float *a2, uint64_t a3, char a4)
{
  float v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    int v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v41 = *v11;
                if (fabsf(*v10) < fabsf(*v11))
                {
                  *int v11 = *v10;
                  float *v10 = v41;
                }
                break;
              case 3uLL:
                BOOL result = sub_25B51EE98(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = sub_25B51EF20(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                unint64_t v42 = v11 + 1;
                unint64_t v43 = v11 + 2;
                uint64_t v44 = v11 + 3;
                BOOL result = sub_25B51EF20(v11, v11 + 1, v11 + 2, v11 + 3);
                float v45 = v11[3];
                if (fabsf(*v10) < fabsf(v45))
                {
                  *uint64_t v44 = *v10;
                  float *v10 = v45;
                  int v46 = *(_DWORD *)v44;
                  float v47 = *v43;
                  float v48 = fabsf(*v44);
                  if (v48 < fabsf(*v43))
                  {
                    *(_DWORD *)unint64_t v43 = v46;
                    *uint64_t v44 = v47;
                    float v49 = *v42;
                    if (v48 < fabsf(*v42))
                    {
                      *((_DWORD *)v11 + 1) = v46;
                      void v11[2] = v49;
                      float v50 = *v11;
                      if (v48 < fabsf(*v11))
                      {
                        *(_DWORD *)int v11 = v46;
                        v11[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            int8x16_t v51 = v11 + 1;
            BOOL v53 = v11 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 4;
                float v55 = v11;
                do
                {
                  float v57 = *v55;
                  float v56 = v55[1];
                  float v55 = v51;
                  float v58 = fabsf(v56);
                  if (v58 < fabsf(v57))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(float *)((char *)v11 + v59) = v57;
                      uint64_t v60 = v59 - 4;
                      if (v59 == 4)
                      {
                        float32x2_t v61 = v11;
                        goto LABEL_83;
                      }
                      float v57 = *(float *)((char *)v11 + v59 - 8);
                      v59 -= 4;
                    }
                    while (v58 < fabsf(v57));
                    float32x2_t v61 = (float *)((char *)v11 + v60);
LABEL_83:
                    *float32x2_t v61 = v56;
                  }
                  int8x16_t v51 = v55 + 1;
                  v54 += 4;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                float v90 = *v9;
                float v89 = v9[1];
                float v9 = v51;
                float v91 = fabsf(v89);
                if (v91 < fabsf(v90))
                {
                  float v92 = v51;
                  do
                  {
                    *float v92 = v90;
                    float v90 = *(v92 - 2);
                    --v92;
                  }
                  while (v91 < fabsf(v90));
                  *float v92 = v89;
                }
                ++v51;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v62 = (v13 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  float v66 = &v11[v65];
                  if (2 * v64 + 2 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
                  {
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  float v67 = &v11[v64];
                  float v68 = *v66;
                  float v69 = *v67;
                  float v70 = fabsf(*v67);
                  if (fabsf(*v66) >= v70)
                  {
                    do
                    {
                      float v71 = v66;
                      *float v67 = v68;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v72 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      float v66 = &v11[v65];
                      uint64_t v73 = v72 + 2;
                      if (v73 < (uint64_t)v13 && fabsf(*v66) < fabsf(v66[1]))
                      {
                        ++v66;
                        uint64_t v65 = v73;
                      }
                      float v68 = *v66;
                      float v67 = v71;
                    }
                    while (fabsf(*v66) >= v70);
                    float *v71 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v74 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v75 = 0;
                float v76 = *v11;
                uint64_t v77 = v11;
                do
                {
                  uint64_t v78 = v77;
                  v77 += v75 + 1;
                  uint64_t v79 = 2 * v75;
                  uint64_t v75 = (2 * v75) | 1;
                  uint64_t v80 = v79 + 2;
                  if (v80 < v74 && fabsf(*v77) < fabsf(v77[1]))
                  {
                    ++v77;
                    uint64_t v75 = v80;
                  }
                  *uint64_t v78 = *v77;
                }
                while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if (v77 == --a2)
                {
                  float *v77 = v76;
                }
                else
                {
                  float *v77 = *a2;
                  *a2 = v76;
                  uint64_t v81 = (char *)v77 - (char *)v11 + 4;
                  if (v81 >= 5)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 2) - 2) >> 1;
                    uint64_t v83 = &v11[v82];
                    float v84 = *v83;
                    float v85 = *v77;
                    float v86 = fabsf(*v77);
                    if (fabsf(*v83) < v86)
                    {
                      do
                      {
                        uint64_t v87 = v83;
                        float *v77 = v84;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        uint64_t v83 = &v11[v82];
                        float v84 = *v83;
                        uint64_t v77 = v87;
                      }
                      while (fabsf(*v83) < v86);
                      *uint64_t v87 = v85;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            sub_25B51EE98(v9, &v9[v13 >> 1], a2 - 1);
            sub_25B51EE98(v9 + 1, v15 - 1, a2 - 2);
            sub_25B51EE98(v9 + 2, &v9[v14 + 1], a2 - 3);
            BOOL result = sub_25B51EE98(v15 - 1, v15, &v9[v14 + 1]);
            float v16 = *v9;
            *float v9 = *v15;
            float *v15 = v16;
          }
          else
          {
            BOOL result = sub_25B51EE98(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          float v17 = *v9;
          if (a4) {
            break;
          }
          float v18 = fabsf(v17);
          if (fabsf(*(v9 - 1)) < v18) {
            goto LABEL_13;
          }
          if (v18 >= fabsf(*v10))
          {
            uint64_t v33 = v9 + 1;
            do
            {
              int v11 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v18 >= fabsf(*v11));
          }
          else
          {
            int v11 = v9;
            do
            {
              float v32 = v11[1];
              ++v11;
            }
            while (v18 >= fabsf(v32));
          }
          uint64_t v34 = a2;
          if (v11 < a2)
          {
            uint64_t v34 = a2;
            do
              float v35 = *--v34;
            while (v18 < fabsf(v35));
          }
          if (v11 < v34)
          {
            float v36 = *v11;
            float v37 = *v34;
            do
            {
              *int v11 = v37;
              float *v34 = v36;
              do
              {
                float v38 = v11[1];
                ++v11;
                float v36 = v38;
              }
              while (v18 >= fabsf(v38));
              do
              {
                float v39 = *--v34;
                float v37 = v39;
              }
              while (v18 < fabsf(v39));
            }
            while (v11 < v34);
          }
          uint64_t v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *float v9 = *v40;
          }
          a4 = 0;
          float *v40 = v17;
        }
        float v18 = fabsf(v17);
LABEL_13:
        float v19 = v9;
        do
        {
          float v20 = v19;
          float v21 = v19[1];
          ++v19;
          float v22 = v21;
        }
        while (fabsf(v21) < v18);
        float v23 = a2;
        if (v20 == v9)
        {
          float v23 = a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            float v25 = *--v23;
          }
          while (fabsf(v25) >= v18);
        }
        else
        {
          do
            float v24 = *--v23;
          while (fabsf(v24) >= v18);
        }
        if (v19 < v23)
        {
          float v26 = *v23;
          float32x2_t v27 = v19;
          float32x2_t v28 = v23;
          do
          {
            float *v27 = v26;
            float *v28 = v22;
            do
            {
              float v20 = v27;
              float v29 = v27[1];
              ++v27;
              float v22 = v29;
            }
            while (fabsf(v29) < v18);
            do
            {
              float v30 = *--v28;
              float v26 = v30;
            }
            while (fabsf(v30) >= v18);
          }
          while (v27 < v28);
        }
        if (v20 != v9) {
          *float v9 = *v20;
        }
        *float v20 = v17;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        BOOL result = (float *)sub_25B51E760(v9, v20, a3, a4 & 1);
        a4 = 0;
        int v11 = v20 + 1;
      }
      BOOL v31 = sub_25B51EFB8(v9, v20);
      int v11 = v20 + 1;
      BOOL result = (float *)sub_25B51EFB8(v20 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

float *sub_25B51EE98(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *result;
  float v5 = fabsf(*a2);
  float v6 = fabsf(*result);
  float v7 = *a3;
  float v8 = fabsf(*a3);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      float v9 = *result;
      if (fabsf(*a2) < fabsf(*result))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (fabsf(*a3) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

float *sub_25B51EF20(float *a1, float *a2, float *a3, float *a4)
{
  BOOL result = sub_25B51EE98(a1, a2, a3);
  float v9 = *a3;
  if (fabsf(*a4) < fabsf(*a3))
  {
    *a3 = *a4;
    *a4 = v9;
    float v10 = *a2;
    if (fabsf(*a3) < fabsf(*a2))
    {
      *a2 = *a3;
      *a3 = v10;
      float v11 = *a1;
      if (fabsf(*a2) < fabsf(*a1))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL sub_25B51EFB8(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = *a1;
      if (fabsf(v6) < fabsf(*a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_25B51EE98(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_25B51EF20(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      float v18 = a1 + 1;
      float v19 = a1 + 2;
      float v20 = a1 + 3;
      sub_25B51EF20(a1, a1 + 1, a1 + 2, a1 + 3);
      float v21 = *(a2 - 1);
      float v22 = a1[3];
      if (fabsf(v21) < fabsf(v22))
      {
        *float v20 = v21;
        *(a2 - 1) = v22;
        int v23 = *(_DWORD *)v20;
        float v24 = *v19;
        float v25 = fabsf(*v20);
        if (v25 < fabsf(*v19))
        {
          *(_DWORD *)float v19 = v23;
          *float v20 = v24;
          float v26 = *v18;
          if (v25 < fabsf(*v18))
          {
            *((_DWORD *)a1 + 1) = v23;
            a1[2] = v26;
            float v27 = *a1;
            if (v25 < fabsf(*a1))
            {
              *(_DWORD *)a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      float v8 = a1 + 2;
      sub_25B51EE98(a1, a1 + 1, a1 + 2);
      float v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    float v12 = *v9;
    float v13 = *v8;
    float v14 = fabsf(*v9);
    if (v14 < fabsf(*v8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(float *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 4;
        if (v15 == 4) {
          break;
        }
        float v13 = *(float *)((char *)a1 + v15 - 8);
        v15 -= 4;
        if (v14 >= fabsf(v13))
        {
          float v17 = (float *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      float v17 = a1;
LABEL_13:
      float *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    float v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

BOOL sub_25B51F1C4(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = *a1;
      if (fabsf(v6) < fabsf(*a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_25B51EE98(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_25B51EF20(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      float v18 = a1 + 1;
      float v19 = a1 + 2;
      float v20 = a1 + 3;
      sub_25B51EF20(a1, a1 + 1, a1 + 2, a1 + 3);
      float v21 = *(a2 - 1);
      float v22 = a1[3];
      if (fabsf(v21) < fabsf(v22))
      {
        *float v20 = v21;
        *(a2 - 1) = v22;
        int v23 = *(_DWORD *)v20;
        float v24 = *v19;
        float v25 = fabsf(*v20);
        if (v25 < fabsf(*v19))
        {
          *(_DWORD *)float v19 = v23;
          *float v20 = v24;
          float v26 = *v18;
          if (v25 < fabsf(*v18))
          {
            *((_DWORD *)a1 + 1) = v23;
            a1[2] = v26;
            float v27 = *a1;
            if (v25 < fabsf(*a1))
            {
              *(_DWORD *)a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      float v8 = a1 + 2;
      sub_25B51EE98(a1, a1 + 1, a1 + 2);
      float v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    float v12 = *v9;
    float v13 = *v8;
    float v14 = fabsf(*v9);
    if (v14 < fabsf(*v8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(float *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 4;
        if (v15 == 4) {
          break;
        }
        float v13 = *(float *)((char *)a1 + v15 - 8);
        v15 -= 4;
        if (v14 >= fabsf(v13))
        {
          float v17 = (float *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      float v17 = a1;
LABEL_13:
      float *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    float v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void sub_25B51F3D0(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (*(void *)(a1 + 16))
  {
    float v6 = *(uint64_t **)a1;
    float v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = v6[1];
    }
    else {
      uint64_t v9 = (uint64_t)v6;
    }
    if (!v9)
    {
LABEL_25:
      float v19 = 0;
LABEL_26:
      sub_25B3FA930(v19);
      goto LABEL_27;
    }
    int v10 = sub_25B3FFA98(v9);
    uint64_t v11 = (uint64_t)v10;
    if (a2 != a3)
    {
      while (1)
      {
        float v12 = *v8;
        unsigned int v13 = *a2;
        float v14 = (uint64_t **)(a1 + 8);
        uint64_t v15 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v15 = (uint64_t **)v12;
              unsigned int v16 = *((unsigned __int8 *)v12 + 25);
              if (v13 >= v16) {
                break;
              }
              float v12 = *v15;
              float v14 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }
            if (v16 >= v13) {
              break;
            }
            float v12 = v15[1];
            if (!v12)
            {
              float v14 = v15 + 1;
              goto LABEL_14;
            }
          }
          float v17 = (void *)v11;
        }
        else
        {
LABEL_14:
          *(unsigned char *)(v9 + 25) = v13;
          sub_25B3FA740((uint64_t **)a1, (uint64_t)v15, v14, (uint64_t *)v9);
          if (!v11)
          {
            ++a2;
            goto LABEL_25;
          }
          float v17 = sub_25B3FFA98(v11);
          uint64_t v9 = v11;
        }
        ++a2;
        uint64_t v11 = (uint64_t)v17;
        if (a2 == a3) {
          goto LABEL_20;
        }
      }
    }
    float v17 = v10;
LABEL_20:
    sub_25B3FA930((void *)v9);
    if (v17)
    {
      for (uint64_t i = (void *)v17[2]; i; uint64_t i = (void *)i[2])
        float v17 = i;
      float v19 = v17;
      goto LABEL_26;
    }
  }
LABEL_27:
  if (a2 != a3)
  {
    float v20 = (uint64_t **)(a1 + 8);
    do
    {
      float v21 = *v20;
      float v22 = (uint64_t **)(a1 + 8);
      int v23 = (uint64_t **)(a1 + 8);
      if (*v20)
      {
        unsigned int v24 = *a2;
        while (1)
        {
          while (1)
          {
            int v23 = (uint64_t **)v21;
            unsigned int v25 = *((unsigned __int8 *)v21 + 25);
            if (v24 >= v25) {
              break;
            }
            float v21 = *v23;
            float v22 = v23;
            if (!*v23) {
              goto LABEL_37;
            }
          }
          if (v25 >= v24) {
            break;
          }
          float v21 = v23[1];
          if (!v21)
          {
            float v22 = v23 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        float v26 = (uint64_t *)operator new(0x20uLL);
        *((unsigned char *)v26 + 25) = *a2;
        sub_25B3FA740((uint64_t **)a1, (uint64_t)v23, v22, v26);
      }
      ++a2;
    }
    while (a2 != a3);
  }
}

void sub_25B51F618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B51F628(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(RSFloorPlan);
    float v3 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v2;
  }
}

float *sub_25B51F704(void *a1, uint64_t a2, float a3)
{
  if (!a1) {
    return 0;
  }
  v10.receiver = a1;
  v10.super_class = (Class)RSTextCoachingSignal;
  float v5 = (float *)objc_msgSendSuper2(&v10, sel_init);
  float v6 = v5;
  if (v5)
  {
    std::locale v5[2] = a3;
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 0;
    switch(a2)
    {
      case -1:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"None";
        goto LABEL_11;
      case 0:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Continue scanning";
        goto LABEL_11;
      case 1:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Slow down";
        goto LABEL_11;
      case 2:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Move further away";
        goto LABEL_11;
      case 3:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Turn up the light";
        goto LABEL_11;
      case 4:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Move closer";
        goto LABEL_11;
      case 5:
        uint64_t v7 = (void *)*((void *)v5 + 4);
        float v8 = @"Low texture";
LABEL_11:
        *((void *)v5 + 4) = v8;

        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_25B51F9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B51FA24(__n128 a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v16[0] = v4;
  HIDWORD(v5) = a1.n128_u32[1];
  LODWORD(v5) = a1.n128_u32[1];
  float v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v16[1] = v8;
  uint64_t v11 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v16[2] = v11;
  unsigned int v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v12, (uint64_t)v16, 3);

  return v13;
}

void sub_25B51FB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B51FD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B51FDE8(void *a1, _OWORD *a2)
{
  id v3 = a1;
  uint64_t v7 = objc_msgSend_count(v3, v4, v5);
  if (v7 == 3)
  {
    float v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v6, 0);
    objc_msgSend_floatValue(v8, v9, v10);
    *(void *)&long long v25 = v11;
    unsigned int v13 = objc_msgSend_objectAtIndexedSubscript_(v3, v12, 1);
    objc_msgSend_floatValue(v13, v14, v15);
    int v24 = v16;
    float v18 = objc_msgSend_objectAtIndexedSubscript_(v3, v17, 2);
    objc_msgSend_floatValue(v18, v19, v20);
    long long v21 = v25;
    DWORD1(v21) = v24;
    DWORD2(v21) = v22;
    *a2 = v21;
  }
  return v7 == 3;
}

void sub_25B51FEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5200A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5202E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5203BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5203CC(uint64_t a1)
{
  sub_25B520404(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B520404(uint64_t a1)
{
  *(void *)a1 = &unk_2708F17E0;
  if (*(void *)(a1 + 32)) {
    espresso_context_destroy();
  }
  if (*(void *)(a1 + 40)) {
    espresso_plan_destroy();
  }
  uint64_t v2 = *(void **)(a1 + 8);
  id v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v4 = v2[7];
      if (v4) {
        MEMORY[0x261163EE0](v4, 0x1080C403DA0D3ADLL);
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          float v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          float v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  sub_25B400248(*(char **)(a1 + 16));
  float v8 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = v3;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    float v8 = *(char **)(a1 + 16);
  }
  sub_25B400248(v8);
  return a1;
}

uint64_t sub_25B5204FC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 16);
  if (v1 == (void *)(a1 + 16)) {
    return 1;
  }
  while (1)
  {
    if (*((char *)v1 + 55) < 0)
    {
      sub_25B4002F4(__p, (void *)v1[4], v1[5]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v1 + 2);
      uint64_t v8 = v1[6];
    }
    if (espresso_network_bind_buffer()) {
      break;
    }
    id v3 = (void *)v1[1];
    uint64_t v4 = v1;
    if (v3)
    {
      do
      {
        uint64_t v1 = v3;
        id v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v1 = (void *)v4[2];
        BOOL v5 = *v1 == (void)v4;
        uint64_t v4 = v1;
      }
      while (!v5);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    if (v1 == v2) {
      return 1;
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_25B5205FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int8x8_t sub_25B520618(uint64_t a1, long long *a2)
{
  uint64_t v3 = a1 + 256;
  long long v4 = a2[3];
  long long v6 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 48) = a2[2];
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  float v7 = *(float *)(a1 + 24);
  float v8 = *(float *)(a1 + 56);
  *(float *)(a1 + 192) = v7;
  *(float *)(a1 + 196) = v8;
  if (v7 <= v8)
  {
    float v9 = v8;
    float v8 = v7;
  }
  else
  {
    *(float *)(a1 + 192) = v8;
    *(float *)(a1 + 196) = v7;
    float v9 = v7;
  }
  long long v64 = *(_OWORD *)(a1 + 32);
  *(void *)&long long v10 = *(void *)(a1 + 16);
  *((void *)&v10 + 1) = v64;
  *(_OWORD *)(a1 + 200) = v10;
  float32x2_t v11 = vsub_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v64);
  uint64_t v58 = v10;
  int32x2_t v12 = (int32x2_t)vmul_f32(v11, v11);
  *(float *)v12.i32 = sqrtf(vaddv_f32((float32x2_t)v12)) + 0.00000011921;
  float32x2_t v13 = vdiv_f32(vsub_f32(*(float32x2_t *)&v64, *(float32x2_t *)&v10), (float32x2_t)vdup_lane_s32(v12, 0));
  *(float32x2_t *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 224) = xmmword_25B5F10E0;
  long long v60 = *(_OWORD *)(a1 + 128);
  *(float32x2_t *)&long long v10 = vsub_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v60);
  *(float *)v12.i32 = vaddv_f32(vmul_f32(v13, *(float32x2_t *)&v10));
  int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
  *(float32x2_t *)&long long v10 = vmul_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v10);
  *(float32x2_t *)&long long v10 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v14, *(int32x2_t *)&v10), (float32x2_t)vzip2_s32(v14, *(int32x2_t *)&v10)));
  float v15 = *(float *)v12.i32 / fmaxf(vmul_lane_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v10, 1).f32[0], 1.1755e-38);
  if (v15 <= 1.0) {
    float v16 = v15;
  }
  else {
    float v16 = 1.0;
  }
  if (v15 >= -1.0) {
    float v17 = v16;
  }
  else {
    float v17 = -1.0;
  }
  float v62 = acosf(v17);
  float32x2_t v18 = vsub_f32(*(float32x2_t *)&v64, *(float32x2_t *)&v60);
  float v19 = vaddv_f32(vmul_f32(v13, v18));
  int32x2_t v20 = (int32x2_t)vmul_f32(v18, v18);
  float32x2_t v21 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v14, v20), (float32x2_t)vzip2_s32(v14, v20)));
  float v22 = v19 / fmaxf(vmul_lane_f32(v21, v21, 1).f32[0], 1.1755e-38);
  if (v22 <= 1.0) {
    float v23 = v22;
  }
  else {
    float v23 = 1.0;
  }
  if (v22 >= -1.0) {
    float v24 = v23;
  }
  else {
    float v24 = -1.0;
  }
  float v25 = acosf(v24);
  *(void *)(a1 + 240) = v58;
  float64x2_t v26 = vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v25), LODWORD(v62)));
  float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
  float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x400921FB60000000uLL);
  *(float32x2_t *)&v26.f64[0] = vcvt_f32_f64(vdivq_f64(vmulq_f64(v26, v63), v61));
  float32x2_t v27 = (float32x2_t)vdup_n_s32(0x43340000u);
  float32x2_t v28 = vsub_f32(v27, *(float32x2_t *)&v26.f64[0]);
  *(int8x8_t *)(v3 + 388) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v26.f64[0], v28), (int8x8_t)v28, *(int8x8_t *)&v26.f64[0]);
  *(float *)(a1 + 248) = v8;
  *(float *)(v3 + 8) = v9;
  *(void *)uint64_t v3 = v58;
  *(float *)(v3 + 24) = v8;
  *(void *)(v3 + 16) = v64;
  *(float *)(v3 + 40) = v9;
  *(void *)(v3 + 32) = v64;
  sub_25B47CC38((float32x2_t *)&v66, *(_DWORD **)(a1 + 576), (int8x16_t *)(a1 + 240), (simd_float4x4 *)(a1 + 80), a1 + 144, 1);
  *(_OWORD *)(a1 + 408) = v66;
  *(unsigned char *)(a1 + 424) = v67;
  sub_25B47CC38((float32x2_t *)&v66, *(_DWORD **)(a1 + 576), (int8x16_t *)(v3 + 16), (simd_float4x4 *)(a1 + 80), a1 + 144, 1);
  *(_OWORD *)(a1 + 432) = v66;
  *(unsigned char *)(a1 + 448) = v67;
  int v29 = *(_DWORD *)(a1 + 196);
  uint64_t v30 = *(void *)(a1 + 200);
  uint64_t v31 = *(void *)(a1 + 208);
  *(_DWORD *)(v3 + 56) = v29;
  *(void *)(v3 + 48) = v30;
  *(_DWORD *)(v3 + 72) = v29;
  *(void *)(v3 + 64) = v31;
  sub_25B47CC38((float32x2_t *)&v66, *(_DWORD **)(a1 + 576), (int8x16_t *)(v3 + 48), (simd_float4x4 *)(a1 + 80), a1 + 144, 1);
  *(_OWORD *)(a1 + 456) = v66;
  *(unsigned char *)(a1 + 472) = v67;
  uint64_t v32 = *(void *)(a1 + 208);
  uint64_t v33 = *(void *)(a1 + 200);
  *(void *)(v3 + 112) = v33;
  uint64_t v34 = (int8x16_t *)(v3 + 112);
  __int32 v35 = *(_DWORD *)(a1 + 192);
  __int32 v36 = *(_DWORD *)(a1 + 196);
  v34[-2].i32[2] = v35;
  v34[-2].i64[0] = v33;
  v34[-1].i32[2] = v35;
  v34[-1].i64[0] = v32;
  v34->i32[2] = v36;
  v34[1].i32[2] = v36;
  v34[1].i64[0] = v32;
  sub_25B47CC38((float32x2_t *)&v66, *(_DWORD **)(a1 + 576), v34 - 2, (simd_float4x4 *)(a1 + 80), a1 + 144, 1);
  *(_OWORD *)(a1 + 480) = v66;
  *(unsigned char *)(a1 + 496) = v67;
  sub_25B47CC38((float32x2_t *)&v66, *(_DWORD **)(a1 + 576), v34, (simd_float4x4 *)(a1 + 80), a1 + 144, 1);
  v37.i64[1] = *((void *)&v66 + 1);
  *(_OWORD *)(a1 + 504) = v66;
  *(float32x2_t *)v37.f32 = vmul_f32(vadd_f32(*(float32x2_t *)(a1 + 200), *(float32x2_t *)(a1 + 208)), (float32x2_t)0x3F0000003F000000);
  float32x4_t v65 = v37;
  v37.i32[2] = *(_DWORD *)(a1 + 192);
  float32x4_t v59 = *(float32x4_t *)(a1 + 128);
  float32x4_t v38 = vsubq_f32(v37, v59);
  float32x4_t v56 = *(float32x4_t *)(a1 + 224);
  float32x4_t v39 = vmulq_f32(v56, v38);
  float32x4_t v40 = vmulq_f32(v56, v56);
  *(unsigned char *)(a1 + 520) = v67;
  float v41 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
  float32x4_t v42 = vmulq_f32(v38, v38);
  float v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]/ fmaxf(v41* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]), 1.1755e-38);
  if (v43 <= 1.0) {
    float v44 = v43;
  }
  else {
    float v44 = 1.0;
  }
  if (v43 >= -1.0) {
    float v45 = v44;
  }
  else {
    float v45 = -1.0;
  }
  float v57 = acosf(v45);
  float32x4_t v46 = v65;
  v46.i32[2] = *(_DWORD *)(a1 + 196);
  float32x4_t v47 = vsubq_f32(v46, v59);
  float32x4_t v48 = vmulq_f32(v56, v47);
  float32x4_t v49 = vmulq_f32(v47, v47);
  float v50 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0]/ fmaxf(v41* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0]), 1.1755e-38);
  if (v50 <= 1.0) {
    float v51 = v50;
  }
  else {
    float v51 = 1.0;
  }
  if (v50 >= -1.0) {
    float v52 = v51;
  }
  else {
    float v52 = -1.0;
  }
  float32x2_t v53 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(acosf(v52)), LODWORD(v57))), v63), v61));
  float32x2_t v54 = vsub_f32(v27, v53);
  int8x8_t result = vbsl_s8((int8x8_t)vcgt_f32(v53, v54), (int8x8_t)v54, (int8x8_t)v53);
  *(int8x8_t *)(a1 + 400) = result;
  return result;
}

void sub_25B520AA0(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    uint64_t v8 = (uint64_t)(v4 - *a1) >> 5;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = v5 - *a1;
    if (v10 >> 4 > v9) {
      unint64_t v9 = v10 >> 4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_25B3FBC9C(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 32 * v8;
    unint64_t v14 = v11 + 32 * v12;
    *(_DWORD *)unint64_t v13 = *(_DWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 8);
    *(void *)(v13 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v13 + 8) = v15;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    unint64_t v7 = v13 + 32;
    unint64_t v16 = *a1;
    unint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        int v18 = *(_DWORD *)(v17 - 32);
        v17 -= 32;
        *(_DWORD *)(v13 - 32) = v18;
        v13 -= 32;
        long long v19 = *(_OWORD *)(v17 + 8);
        *(void *)(v13 + 24) = *(void *)(v17 + 24);
        *(_OWORD *)(v13 + 8) = v19;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        *(void *)(v17 + 8) = 0;
      }
      while (v17 != v16);
      unint64_t v17 = *a1;
      unint64_t v20 = a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while (v20 != v17)
      {
        if (*(char *)(v20 - 1) < 0) {
          operator delete(*(void **)(v20 - 24));
        }
        v20 -= 32;
      }
    }
    if (v17) {
      operator delete((void *)v17);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    unint64_t v7 = v4 + 32;
  }
  a1[1] = v7;
}

float sub_25B520BF0(uint64_t a1, int a2, double a3, double a4, __n128 a5, int8x16_t a6, __n128 a7)
{
  uint64_t v8 = 208;
  if (!a2) {
    uint64_t v8 = 200;
  }
  a6.i64[0] = *(void *)(a1 + v8);
  float32x2_t v9 = *(float32x2_t *)(a1 + 216);
  a5.n128_u64[0] = (unint64_t)vmla_f32(*(float32x2_t *)a6.i8, (float32x2_t)vdup_n_s32(0x3DCCCCCDu), v9);
  uint64_t v10 = *(_DWORD **)(a1 + 576);
  a7.n128_u64[0] = (unint64_t)vmla_f32(*(float32x2_t *)a6.i8, (float32x2_t)vdup_n_s32(0xBDCCCCCD), v9);
  int8x16_t v18 = a6;
  __n128 v19 = a7;
  int8x16_t v22 = a6;
  __n128 v23 = a5;
  unint64_t v11 = (simd_float4x4 *)(a1 + 80);
  uint64_t v12 = a1 + 144;
  sub_25B47CC38(v24, v10, &v22, (simd_float4x4 *)(a1 + 80), a1 + 144, 0);
  unint64_t v13 = *(_DWORD **)(a1 + 576);
  int8x16_t v22 = v18;
  __n128 v23 = v19;
  sub_25B47CC38(v20, v13, &v22, v11, v12, 0);
  float result = 0.0;
  float v15 = 0.0;
  if (v25)
  {
    float32x2_t v16 = vsub_f32(v24[0], v24[1]);
    float v15 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
  }
  if (v21)
  {
    float32x2_t v17 = vsub_f32(v20[0], v20[1]);
    float result = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
  }
  if (v15 >= result) {
    return v15;
  }
  return result;
}

void sub_25B520CFC(float32x2_t *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v4 = 208;
  if (!a3) {
    uint64_t v4 = 200;
  }
  float32x2_t v5 = vmla_n_f32(*(float32x2_t *)(a2 + v4), *(float32x2_t *)(a2 + 216), a4);
  int v6 = *(_DWORD *)(a2 + 196);
  v7.i32[2] = *(_DWORD *)(a2 + 192);
  *(float32x2_t *)v7.i8 = v5;
  int v9 = v6;
  float32x2_t v8 = v5;
  sub_25B47CC38(a1, *(_DWORD **)(a2 + 576), &v7, (simd_float4x4 *)(a2 + 80), a2 + 144, 1);
}

float sub_25B520D64(float32x2_t *a1, int a2, float a3)
{
  switch(a2)
  {
    case 2:
      float v4 = a1[24].f32[0];
      break;
    case 1:
      float32x2_t v3 = a1[26];
      goto LABEL_7;
    case 0:
      float32x2_t v3 = a1[25];
LABEL_7:
      LODWORD(result) = vmla_n_f32(v3, a1[27], a3).u32[0];
      return result;
    default:
      float v4 = a1[24].f32[1];
      break;
  }
  return v4 + a3;
}

void sub_25B520DB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    float v4 = (void (***)(void))v1[1];
    float32x2_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 94;
      int8x16_t v7 = v4 - 94;
      do
      {
        (**v7)(v7);
        v6 -= 94;
        BOOL v8 = v7 == v2;
        v7 -= 94;
      }
      while (!v8);
      float32x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B520E70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 752;
    (**(void (***)(void))(i - 752))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B520EE0(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  while (1)
  {
    if (sub_25B495728(*(void **)(a4 + 8), (void *)(v7 + 8)))
    {
      uint64_t v8 = sub_25B495794(a4, (void *)(v7 + 8));
      unint64_t v11 = (float *)(v8 + 644);
      if (*(_DWORD *)v7) {
        unint64_t v11 = (float *)(v8 + 648);
      }
      if (*v11 <= 15.0)
      {
        v9.i32[0] = 0;
        v10.i32[0] = *(_DWORD *)v7;
        int8x8_t v12 = (int8x8_t)vdup_lane_s32(vceq_s32(v10, v9), 0);
        int8x8_t v14 = *(int8x8_t *)(v8 + 200);
        int8x8_t v13 = *(int8x8_t *)(v8 + 208);
        float32x2_t v15 = (float32x2_t)vbsl_s8(v12, v13, v14);
        float32x2_t v16 = (float32x2_t)vbsl_s8(v12, v14, v13);
        float32x2_t v17 = vsub_f32(v16, *a3);
        float32x2_t v18 = vsub_f32(v15, *a3);
        float32x2_t v19 = vsub_f32(v16, v15);
        int32x2_t v20 = (int32x2_t)vmul_f32(v17, v19);
        int32x2_t v21 = (int32x2_t)vmul_f32(v19, v18);
        float32x2_t v22 = vadd_f32((float32x2_t)vzip1_s32(v20, v21), (float32x2_t)vzip2_s32(v20, v21));
        uint64_t result = 1;
        if (vmul_lane_f32(v22, v22, 1).f32[0] <= 0.0) {
          break;
        }
        int32x2_t v24 = (int32x2_t)vmul_f32(v17, v17);
        int32x2_t v25 = (int32x2_t)vmul_f32(v18, v18);
        int32x2_t v26 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v24, v25), (float32x2_t)vzip2_s32(v24, v25)));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32(v26, 1), (float32x2_t)v26).u32[0] & 1) == 0) {
          break;
        }
      }
    }
    v7 += 32;
    if (v7 == a2) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_25B521008(uint64_t *result, int a2, int a3, uint64_t a4)
{
  float32x2_t v5 = result;
  uint64_t v7 = result + 1;
  uint64_t v6 = result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t *)v6;
        int v8 = *(_DWORD *)(v6 + 28);
        if (v8 == a2) {
          break;
        }
        if (v8 <= a2)
        {
          if (v8 >= a2) {
            char v13 = 1;
          }
          else {
            char v13 = -1;
          }
          if ((v13 & 0x80) == 0) {
            return result;
          }
          goto LABEL_18;
        }
LABEL_12:
        uint64_t v6 = *v7;
        int8x8_t v12 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_21;
        }
      }
      int v9 = *((_DWORD *)v7 + 8);
      BOOL v10 = v9 == a3;
      if (v9 > a3) {
        goto LABEL_12;
      }
      if (v9 >= a3) {
        char v11 = 1;
      }
      else {
        char v11 = -1;
      }
      if (v10) {
        char v11 = 0;
      }
      if ((v11 & 0x80) == 0) {
        return result;
      }
LABEL_18:
      int8x8_t v12 = (uint64_t **)(v7 + 1);
      uint64_t v6 = v7[1];
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  int8x8_t v12 = (uint64_t **)(result + 1);
LABEL_21:
  int8x8_t v14 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v14 + 28) = a4;
  uint64_t *v14 = 0;
  v14[1] = 0;
  v14[2] = (uint64_t)v7;
  *int8x8_t v12 = v14;
  uint64_t v15 = *(void *)*v5;
  if (v15)
  {
    uint64_t *v5 = v15;
    float32x2_t v16 = *v12;
  }
  else
  {
    float32x2_t v16 = v14;
  }
  uint64_t result = sub_25B3FA798((uint64_t *)v5[1], v16);
  ++v5[2];
  return result;
}

uint64_t sub_25B5210EC(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 1;
    while (1)
    {
      int v4 = *(_DWORD *)(v3 + 28);
      if (v4 == a2)
      {
        int v5 = *(_DWORD *)(v3 + 32);
        BOOL v6 = v5 == a3;
        if (v5 <= a3)
        {
          if (v5 >= a3) {
            char v7 = 1;
          }
          else {
            char v7 = -1;
          }
          if (v6) {
            char v7 = 0;
          }
          if ((v7 & 0x80) == 0) {
            return result;
          }
LABEL_17:
          v3 += 8;
        }
      }
      else if (v4 <= a2)
      {
        if (v4 >= a2) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if ((v8 & 0x80) == 0) {
          return result;
        }
        goto LABEL_17;
      }
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_25B521148(uint64_t a1, uint64_t a2, __n128 a3)
{
  sub_25B521234(&v9, a1, a2, a3);
  float32x2_t v3 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
  if (v9 != v10)
  {
    int v4 = v9;
    do
    {
      float32x2_t v5 = *v4++;
      int8x8_t v6 = vbsl_s8((int8x8_t)vcgt_f32(v5, (float32x2_t)vrev64_s32((int32x2_t)v5)), (int8x8_t)vdup_lane_s32((int32x2_t)v5, 1), (int8x8_t)vdup_lane_s32((int32x2_t)v5, 0));
      float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v3.u32[1], v6.u32[0]), (float32x2_t)__PAIR64__(v6.u32[1], v3.u32[0])), (int8x8_t)v3, v6);
    }
    while (v4 != v10);
  }
  if (v9)
  {
    float32x2_t v8 = v3;
    operator delete(v9);
    float32x2_t v3 = v8;
  }
  return vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v3, 1), v3).f32[0] < 0.05;
}

void *sub_25B5211EC(void *result, float a2)
{
  uint64_t v2 = result[5];
  uint64_t v3 = result[6];
  while (v2 != v3)
  {
    *(float *)(*(void *)(v2 + 40) + 24) = a2;
    *(float *)(*(void *)(v2 + 40) + 72) = a2;
    v2 += 120;
  }
  uint64_t v4 = result[8];
  if (result[9] != v4)
  {
    *(float *)(*(void *)(v4 + 40) + 24) = a2;
    *(float *)(*(void *)(result[9] - 80) + 72) = a2;
  }
  return result;
}

void sub_25B521234(void *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    char v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v5 + 40);
      a4.n128_u32[0] = *(_DWORD *)(v8 + 24);
      a4.n128_u32[1] = *(_DWORD *)(v8 + 72);
      unint64_t v9 = a1[2];
      if ((unint64_t)v7 >= v9)
      {
        __n128 v19 = a4;
        char v11 = (void *)*a1;
        uint64_t v12 = ((uint64_t)v7 - *a1) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)sub_25B3FCAD4(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        float32x2_t v17 = (void *)(v15 + 8 * v12);
        a4.n128_u64[1] = v19.n128_u64[1];
        void *v17 = v19.n128_u64[0];
        BOOL v10 = v17 + 1;
        if (v7 != v11)
        {
          do
          {
            uint64_t v18 = *--v7;
            *--float32x2_t v17 = v18;
          }
          while (v7 != v11);
          char v7 = (void *)*a1;
        }
        *a1 = v17;
        a1[1] = v10;
        a1[2] = v15 + 8 * v16;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *char v7 = a4.n128_u64[0];
        BOOL v10 = v7 + 1;
      }
      a1[1] = v10;
      v5 += 120;
      char v7 = v10;
    }
    while (v5 != a3);
  }
}

void sub_25B521364(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B521384(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3)
{
  if (a2 == a3)
  {
    unsigned int v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v4 = a2;
    int8x8_t v6 = 0;
    char v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = *(_OWORD *)v4->f32;
      float32x2_t v10 = vsub_f32(*v4, *a1);
      v11.f32[0] = sqrtf(vaddv_f32(vmul_f32(v10, v10)));
      v11.i32[1] = (__int32)v4[1];
      if ((unint64_t)v7 >= v8)
      {
        float32x2_t v27 = v11;
        uint64_t v12 = v7 - v6;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v8 - (void)v6) >> 2 > v13) {
          unint64_t v13 = (uint64_t)(v8 - (void)v6) >> 2;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_25B3FCAD4(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (float32x2_t *)(v14 + 8 * v12);
        *(float32x2_t *)&long long v9 = v27;
        *uint64_t v16 = v27;
        float32x2_t v17 = v16 + 1;
        while (v7 != v6)
        {
          float32x2_t v18 = v7[-1];
          --v7;
          *(float32x2_t *)&long long v9 = v18;
          v16[-1] = v18;
          --v16;
        }
        unint64_t v8 = v14 + 8 * v15;
        if (v6) {
          operator delete(v6);
        }
        int8x8_t v6 = v16;
        char v7 = v17;
      }
      else
      {
        *v7++ = v11;
      }
      v4 += 2;
    }
    while (v4 != a3);
    if (v6 == v7)
    {
      unsigned int v23 = 0;
      uint64_t v24 = 0;
    }
    else
    {
      if ((char *)v7 - (char *)v6 < 1025)
      {
LABEL_26:
        sub_25B521ECC(v6, v7, v7 - v6, 0, 0, *(float32x2_t *)&v9);
      }
      else
      {
        __n128 v19 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        unint64_t v20 = v7 - v6;
        while (1)
        {
          int32x2_t v21 = (int8x8_t *)operator new(8 * v20, v19);
          if (v21) {
            break;
          }
          BOOL v22 = v20 > 1;
          v20 >>= 1;
          if (!v22) {
            goto LABEL_26;
          }
        }
        int32x2_t v25 = v21;
        sub_25B521ECC(v6, v7, v7 - v6, v21, v20, *(float32x2_t *)&v9);
        operator delete(v25);
      }
      if (COERCE_FLOAT(*v6) < 0.1) {
        unsigned int v23 = HIDWORD(*(unint64_t *)v6);
      }
      else {
        unsigned int v23 = 0;
      }
      if (COERCE_FLOAT(*v6) < 0.1) {
        uint64_t v24 = 0x100000000;
      }
      else {
        uint64_t v24 = 0;
      }
    }
    operator delete(v6);
  }
  return v24 & 0x100000000 | v23;
}

void sub_25B521580(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B52159C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v2 = *(void *)(a2 + 48);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = *(void *)(result + 48);
    if (v4 != v5)
    {
      float32x4_t v6 = *(float32x4_t *)(*(void *)(v3 + 40) + 16);
      float32x2_t v7 = (float32x2_t)vsubq_f32(*(float32x4_t *)(*(void *)(v2 - 80) + 64), v6).u64[0];
      float v8 = vaddv_f32(vmul_f32(v7, v7));
      if (v8 < 0.000001) {
        float v8 = 0.000001;
      }
      do
      {
        uint64_t v9 = *(void *)(v4 + 40);
        long long v10 = *(_OWORD *)(v9 + 16);
        *(_DWORD *)(v9 + 24) = DWORD2(v10);
        *(float32x2_t *)(v9 + 16) = vmla_n_f32(*(float32x2_t *)v6.f32, v7, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v10, *(float32x2_t *)v6.f32), v7))/ v8);
        uint64_t v11 = *(void *)(v4 + 40);
        long long v12 = *(_OWORD *)(v11 + 64);
        *(_DWORD *)(v11 + 72) = DWORD2(v12);
        *(float32x2_t *)(v11 + 64) = vmla_n_f32(*(float32x2_t *)v6.f32, v7, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v12, *(float32x2_t *)v6.f32), v7))/ v8);
        v4 += 120;
      }
      while (v4 != v5);
    }
  }
  unint64_t v13 = *(float32x4_t **)(*(void *)(result + 40) + 40);
  float32x4_t v14 = v13[1];
  LODWORD(v15) = v13[1].i64[1];
  LODWORD(v16) = v13[4].i64[1];
  LODWORD(v17) = vsubq_f32(v13[4], v14).u32[0];
  if (fabsf(v17) >= 0.000001)
  {
    float32x4_t v19 = *(float32x4_t *)(*(void *)(*(void *)(a2 + 40) + 40) + 16);
    float v18 = v15 + (float)((float)((float)(v16 - v15) * vsubq_f32(v19, v14).f32[0]) / v17);
  }
  else
  {
    float v18 = (float)(v15 + v16) * 0.5;
    float32x4_t v19 = *(float32x4_t *)(*(void *)(*(void *)(a2 + 40) + 40) + 16);
  }
  v13[1].i32[2] = v14.i32[2];
  v13[1].i64[0] = v19.i64[0];
  *(float *)(*(void *)(*(void *)(result + 40) + 40) + 24) = v18;
  unint64_t v20 = *(float32x4_t **)(*(void *)(result + 48) - 80);
  float32x4_t v21 = v20[1];
  LODWORD(v22) = v20[1].i64[1];
  float32x4_t v23 = v20[4];
  LODWORD(v24) = v20[4].i64[1];
  LODWORD(v25) = vsubq_f32(v23, v21).u32[0];
  if (fabsf(v25) >= 0.000001)
  {
    float32x4_t v27 = *(float32x4_t *)(*(void *)(*(void *)(a2 + 48) - 80) + 64);
    float v26 = v22 + (float)((float)((float)(v24 - v22) * vsubq_f32(v27, v21).f32[0]) / v25);
  }
  else
  {
    float v26 = (float)(v22 + v24) * 0.5;
    float32x4_t v27 = *(float32x4_t *)(*(void *)(*(void *)(a2 + 48) - 80) + 64);
  }
  v20[4].i32[2] = v23.i32[2];
  v20[4].i64[0] = v27.i64[0];
  *(float *)(*(void *)(*(void *)(result + 48) - 80) + 72) = v26;
  return result;
}

uint64_t sub_25B521750(uint64_t a1, uint64_t *a2)
{
  float32x4_t v6 = *(void (****)(void))(a1 + 40);
  uint64_t v4 = *(void (****)(void))(a1 + 48);
  uint64_t v5 = (void *)(a1 + 40);
  if (v4 != v6)
  {
    float32x2_t v7 = v4 - 15;
    float v8 = v4 - 15;
    uint64_t v9 = v4 - 15;
    do
    {
      long long v10 = *v9;
      v9 -= 15;
      (*v10)(v8);
      v7 -= 15;
      BOOL v11 = v8 == v6;
      float v8 = v9;
    }
    while (!v11);
  }
  *(void *)(a1 + 48) = v6;
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  float v15 = v5;
  while (v13 != v12)
  {
    sub_25B521880(&v15, v13);
    v13 += 120;
  }

  return sub_25B521824(a1);
}

uint64_t sub_25B521824(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v1 = *(void *)(result + 48);
  if (v1 != v2)
  {
    int v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = (*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 2;
      float v6 = (float)(*(float *)(v2 + 64) * (float)(int)v5) + (float)(v4 * (float)v3);
      v3 += v5;
      if (v3 <= 1) {
        int v7 = 1;
      }
      else {
        int v7 = v3;
      }
      float v4 = v6 / (float)v7;
      v2 += 120;
    }
    while (v2 != v1);
    *(float *)(result + 88) = v4;
  }
  return result;
}

void **sub_25B521880(void **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)*a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = sub_25B5219EC(*a1, a2);
  }
  else
  {
    sub_25B5218E4((*a1)[1], a2);
    uint64_t v5 = v4 + 120;
    *(void *)(v3 + 8) = v4 + 120;
  }
  *(void *)(v3 + 8) = v5;
  return a1;
}

void sub_25B5218DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B5218E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F2140;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_25B521C3C((char *)(a1 + 40), *(void *)(a2 + 40), *(void *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 4));
  int v5 = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_25B3FCA58((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_25B43B4AC((char *)(a1 + 96), *(void *)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4);
  return a1;
}

void sub_25B5219BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 80) = v5;
    operator delete(v5);
  }
  sub_25B521CF0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B5219EC(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222) {
    sub_25B3FBC4C();
  }
  float v6 = a1 + 2;
  if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v7 = 0x222222222222222;
  }
  else {
    unint64_t v7 = v3;
  }
  float32x4_t v21 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_25B521B88(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v19 = v7;
  *(void *)unint64_t v20 = v7 + 120 * v2;
  *(void *)&v20[16] = v7 + 120 * v8;
  sub_25B5218E4(*(uint64_t *)v20, a2);
  *(void *)&v20[8] = *(void *)v20 + 120;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  for (uint64_t i = 120; ; i -= 120)
  {
    uint64_t v12 = *(void *)v20 + i;
    if (v9 + i - 120 == v10) {
      break;
    }
    uint64_t v13 = v9 + i - 240;
    sub_25B5218E4(v12 - 240, v13);
  }
  uint64_t v14 = a1[2];
  long long v15 = *(_OWORD *)&v20[8];
  uint64_t v18 = *(void *)&v20[8];
  long long v16 = *(_OWORD *)a1;
  *a1 = v12 - 120;
  *(_OWORD *)unint64_t v20 = v16;
  *(_OWORD *)(a1 + 1) = v15;
  *(void *)&v20[16] = v14;
  unint64_t v19 = v16;
  sub_25B521BD0((uint64_t)&v19);
  return v18;
}

void sub_25B521B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B521BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B521B88(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    sub_25B3FA70C();
  }
  return operator new(120 * a1);
}

uint64_t sub_25B521BD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 120);
    *(void *)(a1 + 16) = i - 120;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_25B521C3C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_25B521DB0(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    if (a2 != a3)
    {
      uint64_t v8 = *((void *)v6 + 1);
      do
      {
        *(void *)uint64_t v7 = &unk_2708F2120;
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 + 32);
        *(_OWORD *)(v7 + 16) = v9;
        a2 += 48;
        v7 += 48;
        v8 += 48;
      }
      while (a2 != a3);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_25B521CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_25B521CF0(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      float v6 = v4 - 48;
      uint64_t v7 = v4 - 48;
      uint64_t v8 = v4 - 48;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 48;
        (*v9)(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_25B521DB0(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_25B3FBC4C();
  }
  uint64_t result = (char *)sub_25B467D14(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_25B521E00()
{
}

void sub_25B521E18(uint64_t a1)
{
  sub_25B521E50(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B521E50(uint64_t a1)
{
  *(void *)a1 = &unk_2708F2140;
  uint64_t v4 = (void **)(a1 + 96);
  sub_25B43925C(&v4);
  unint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  sub_25B521CF0(&v4);
  return a1;
}

float32x2_t sub_25B521ECC(float32x2_t *a1, float32x2_t *a2, unint64_t a3, int8x8_t *a4, uint64_t a5, float32x2_t result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      uint64_t result = a2[-1];
      int8x8_t v8 = (int8x8_t)*a1;
      if (vcgt_f32(*a1, result).u8[0])
      {
        *a1 = result;
        a2[-1] = (float32x2_t)v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      float v17 = (float32x2_t *)a4;
      unint64_t v18 = a3 >> 1;
      unint64_t v19 = &a1[a3 >> 1];
      unint64_t v20 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        float32x2_t v21 = sub_25B522108(a1, v19, v20, a4, result);
        float v22 = (int8x8_t *)&v17[v18];
        uint64_t result = sub_25B522108(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v22, v21);
        float32x4_t v23 = &v17[a3];
        float v24 = (float32x2_t *)v22;
        while (v24 != v23)
        {
          unsigned __int8 v25 = vmvn_s8((int8x8_t)vcgt_f32(*v17, *v24)).u8[0];
          if (v25) {
            unsigned int v26 = -1;
          }
          else {
            unsigned int v26 = 0;
          }
          uint64_t result = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v26), (int8x8_t)*v17, (int8x8_t)*v24);
          v17 += v25 & 1;
          v24 += (v25 & 1) == 0;
          *v7++ = result;
          if (v17 == (float32x2_t *)v22)
          {
            if (v24 != v23)
            {
              uint64_t v27 = 0;
              do
              {
                uint64_t result = v24[v27];
                v7[v27++] = result;
              }
              while (&v24[v27] != v23);
            }
            return result;
          }
        }
        if (v17 != (float32x2_t *)v22)
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t result = v17[v28];
            v7[v28++] = result;
          }
          while (&v17[v28] != (float32x2_t *)v22);
        }
      }
      else
      {
        sub_25B521ECC(a1, v19, v20, a4, a5);
        sub_25B521ECC(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v17, a5);
        sub_25B522300(v7, &v7[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v17, a5);
      }
    }
    else if (a1 != a2)
    {
      BOOL v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          float32x2_t v13 = *v12;
          uint64_t v12 = v10;
          uint64_t result = *v10;
          if (vcgt_f32(v13, *v10).u8[0])
          {
            uint64_t v14 = v11;
            while (1)
            {
              *(float32x2_t *)((char *)a1 + v14 + 8) = v13;
              if (!v14) {
                break;
              }
              float32x2_t v13 = *(float32x2_t *)((char *)a1 + v14 - 8);
              v14 -= 8;
              if ((vcgt_f32(v13, result).u8[0] & 1) == 0)
              {
                long long v15 = (int8x8_t *)((char *)&a1[1] + v14);
                goto LABEL_15;
              }
            }
            long long v15 = (int8x8_t *)a1;
LABEL_15:
            int8x8_t *v15 = (int8x8_t)result;
          }
          BOOL v10 = v12 + 1;
          v11 += 8;
        }
        while (&v12[1] != a2);
      }
    }
  }
  return result;
}

float32x2_t sub_25B522108(float32x2_t *a1, float32x2_t *a2, unint64_t a3, int8x8_t *a4, float32x2_t result)
{
  if (a3)
  {
    int v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      uint64_t result = *v7;
      int8x8_t *v5 = (int8x8_t)*v7;
      return result;
    }
    if (a3 == 2)
    {
      float32x2_t v9 = a2[-1];
      unsigned __int8 v10 = vcgt_f32(*a1, v9).u8[0];
      if (v10) {
        unsigned int v11 = -1;
      }
      else {
        unsigned int v11 = 0;
      }
      *a4 = vbsl_s8((int8x8_t)vdup_n_s32(v11), (int8x8_t)v9, (int8x8_t)*a1);
      int v5 = a4 + 1;
      if ((v10 & 1) == 0) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = &a1[a3 >> 1];
      sub_25B521ECC(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_25B521ECC(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float32x2_t v21 = &v7[a3 >> 1];
      while (v21 != a2)
      {
        unsigned __int8 v22 = vcgt_f32(*v7, *v21).u8[0];
        if (v22) {
          unsigned int v23 = -1;
        }
        else {
          unsigned int v23 = 0;
        }
        uint64_t result = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v23), (int8x8_t)*v21, (int8x8_t)*v7);
        v21 += v22 & 1;
        v7 += (v22 & 1) == 0;
        *v5++ = (int8x8_t)result;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v24 = 0;
            do
            {
              uint64_t result = v21[v24];
              v5[v24++] = (int8x8_t)result;
            }
            while (&v21[v24] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        uint64_t v25 = 0;
        do
        {
          uint64_t result = v7[v25];
          v5[v25++] = (int8x8_t)result;
        }
        while (&v7[v25] != v20);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      uint64_t result = *a1;
      *a4 = (int8x8_t)*a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        long long v15 = (float32x2_t *)a4;
        do
        {
          float32x2_t v16 = *v15++;
          uint64_t result = v16;
          if (vcgt_f32(v16, *v12).u8[0])
          {
            v14[1] = (int8x8_t)result;
            float v17 = a4;
            if (v14 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                float v17 = (int8x8_t *)((char *)a4 + v18);
                int8x8_t v19 = *(int8x8_t *)((char *)&a4[-1] + v18);
                if (COERCE_FLOAT(*v12) >= *(float *)v19.i32) {
                  break;
                }
                int8x8_t *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  float v17 = a4;
                  break;
                }
              }
            }
            uint64_t result = *v12;
            int8x8_t *v17 = (int8x8_t)*v12;
          }
          else
          {
            float32x2_t *v15 = *v12;
          }
          ++v12;
          v13 += 8;
          uint64_t v14 = (int8x8_t *)v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

float32x2_t *sub_25B522300(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v12 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      float32x2_t v13 = *a2;
      while (1)
      {
        float32x2_t v14 = *v12;
        if (vcgt_f32(*v12, v13).u32[0]) {
          break;
        }
        ++v12;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *uint64_t v12 = v13;
          *a2 = v14;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v25 = a4;
        }
        else {
          uint64_t v25 = a4 + 1;
        }
        uint64_t v24 = v25 >> 1;
        uint64_t v18 = &v12[v25 >> 1];
        float v17 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = a3 - a2;
          float v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            uint64_t v28 = &v17[v26 >> 1];
            float32x2_t v30 = *v28;
            int v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (v30.f32[0] < COERCE_FLOAT(*v18)) {
              float v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        float v17 = &a2[v15 >> 1];
        uint64_t v18 = a2;
        if (a2 != v12)
        {
          unint64_t v19 = a2 - v12;
          uint64_t v18 = v12;
          do
          {
            unint64_t v20 = v19 >> 1;
            float32x2_t v21 = &v18[v19 >> 1];
            float32x2_t v23 = *v21;
            unsigned __int8 v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (COERCE_FLOAT(*v17) < v23.f32[0]) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = v18 - v12;
      }
      if (v18 == a2)
      {
        a2 = v17;
      }
      else
      {
        uint64_t v31 = (char *)v17 - (char *)a2;
        if (v17 == a2)
        {
          a2 = v18;
        }
        else
        {
          uint64_t v32 = v18 + 1;
          if (&v18[1] == a2)
          {
            float32x2_t v37 = *v18;
            float32x4_t v38 = a2;
            size_t v39 = (char *)v17 - (char *)a2;
            uint64_t v79 = a6;
            uint64_t v81 = v24;
            float32x4_t v40 = a3;
            uint64_t v41 = v16;
            memmove(v18, v38, v39);
            uint64_t v16 = v41;
            a6 = v79;
            uint64_t v24 = v81;
            a3 = v40;
            a2 = (float32x2_t *)((char *)v18 + v31);
            *(float32x2_t *)((char *)v18 + v31) = v37;
          }
          else
          {
            uint64_t v33 = a2 + 1;
            if (&a2[1] == v17)
            {
              float32x2_t v42 = v17[-1];
              a2 = v18 + 1;
              if (&v17[-1] != v18)
              {
                uint64_t v80 = a6;
                uint64_t v82 = v24;
                float v43 = a3;
                uint64_t v44 = v16;
                memmove(&v18[1], v18, (char *)&v17[-1] - (char *)v18);
                uint64_t v16 = v44;
                a6 = v80;
                uint64_t v24 = v82;
                a3 = v43;
              }
              float32x2_t *v18 = v42;
            }
            else
            {
              uint64_t v34 = a2 - v18;
              if (v34 == v31 >> 3)
              {
                do
                {
                  float32x2_t v35 = v32[-1];
                  v32[-1] = v33[-1];
                  v33[-1] = v35;
                  if (v32 == a2) {
                    break;
                  }
                  ++v32;
                }
                while (v33++ != v17);
              }
              else
              {
                uint64_t v45 = v31 >> 3;
                uint64_t v46 = a2 - v18;
                do
                {
                  uint64_t v47 = v46;
                  uint64_t v46 = v45;
                  uint64_t v45 = v47 % v45;
                }
                while (v45);
                if (v46)
                {
                  float32x4_t v48 = &v18[v46];
                  do
                  {
                    float32x2_t v49 = v48[-1];
                    --v48;
                    float32x2_t v50 = v49;
                    float v51 = &v48[v34];
                    float v52 = v48;
                    do
                    {
                      float32x2_t v53 = v51;
                      float32x2_t *v52 = *v51;
                      float32x2_t v54 = &v51[v34];
                      BOOL v55 = __OFSUB__(v34, v17 - v51);
                      uint64_t v57 = v34 - (v17 - v51);
                      char v56 = (v57 < 0) ^ v55;
                      float v51 = &v18[v57];
                      if (v56) {
                        float v51 = v54;
                      }
                      float v52 = v53;
                    }
                    while (v51 != v48);
                    float32x2_t *v53 = v50;
                  }
                  while (v48 != v18);
                }
                a2 = &v18[v31 >> 3];
              }
            }
          }
        }
      }
      a4 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a4 + v8)
      {
        long long v60 = a2;
        float64x2_t v61 = v17;
        uint64_t v62 = v24;
        uint64_t v63 = a4;
        uint64_t v64 = v16;
        uint64_t v58 = a6;
        uint64_t result = (float32x2_t *)sub_25B522300(a2, v61, a3, v63, v8, a6, a7);
        a2 = v18;
        uint64_t v8 = v64;
        a4 = v62;
        a3 = v60;
      }
      else
      {
        uint64_t v58 = a6;
        float32x4_t v59 = a3;
        uint64_t result = (float32x2_t *)sub_25B522300(v12, v18, a2, v24, v16, a6, a7);
        a3 = v59;
        uint64_t v12 = a2;
        a2 = v17;
      }
      a6 = v58;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v12 != a2)
      {
        uint64_t v73 = 0;
        do
        {
          a6[v73] = v12[v73];
          ++v73;
        }
        while (&v12[v73] != a2);
        uint64_t v74 = &a6[v73];
        if (v74 != a6)
        {
          while (a2 != a3)
          {
            unsigned __int8 v75 = vcgt_f32(*a6, *a2).u8[0];
            if (v75) {
              unsigned int v76 = -1;
            }
            else {
              unsigned int v76 = 0;
            }
            int8x8_t v77 = vbsl_s8((int8x8_t)vdup_n_s32(v76), (int8x8_t)*a2, (int8x8_t)*a6);
            a2 += v75 & 1;
            a6 += (v75 & 1) == 0;
            *v12++ = (float32x2_t)v77;
            if (a6 == v74) {
              return result;
            }
          }
          return (float32x2_t *)memmove(v12, a6, (char *)v74 - (char *)a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v65 = 0;
      do
      {
        a6[v65] = a2[v65];
        ++v65;
      }
      while (&a2[v65] != a3);
      long long v66 = &a6[v65];
      if (v66 != a6)
      {
        char v67 = (int8x8_t *)&a3[-1];
        while (a2 != v12)
        {
          float32x2_t v68 = v66[-1];
          float32x2_t v69 = a2[-1];
          unsigned __int8 v70 = vcgt_f32(v69, v68).u8[0];
          if (v70) {
            unsigned int v71 = -1;
          }
          else {
            unsigned int v71 = 0;
          }
          int8x8_t v72 = vbsl_s8((int8x8_t)vdup_n_s32(v71), (int8x8_t)v69, (int8x8_t)v68);
          if (v70) {
            --a2;
          }
          else {
            --v66;
          }
          *v67-- = v72;
          if (v66 == a6) {
            return result;
          }
        }
        uint64_t v78 = 0;
        do
        {
          v67[v78] = (int8x8_t)v66[v78 - 1];
          --v78;
        }
        while (&v66[v78] != a6);
      }
    }
  }
  return result;
}

void sub_25B52288C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B52289C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_timestamp(a2, v5, v6);
  double v8 = v7;
  objc_msgSend_timestamp(v4, v9, v10);
  if (v8 < v11) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = v8 > v11;
  }

  return v12;
}

void sub_25B5228F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_25B522908(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[2];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t *sub_25B52299C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 176);
    if (v3) {
      free(v3);
    }
    id v4 = *(__CVBuffer **)(v2 + 208);
    if (v4) {
      CVPixelBufferRelease(v4);
    }
    *(void *)(v2 + 232) = &unk_2708F1D50;
    int v5 = *(std::__shared_weak_count **)(v2 + 360);
    if (v5) {
      sub_25B404120(v5);
    }
    uint64_t v6 = *(void *)(v2 + 224);
    *(void *)(v2 + 224) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }

    sub_25B494018(*(void **)(v2 + 160));
    sub_25B49406C(*(void **)(v2 + 136));
    uint64_t v7 = *(void *)(v2 + 120);
    *(void *)(v2 + 120) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    JUMPOUT(0x261163EE0);
  }
  return result;
}

void sub_25B522B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B522B54(float *a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    float32x2_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  v10[3] = &unk_2708F1820;
  v10[4] = 0;
  v10[5] = 0x3F80000000000000;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          float32x2_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            unint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *float32x2_t v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  unint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                float32x2_t v21 = v27;
                unint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  int v29 = *(void **)a1;
  float32x2_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    *float32x2_t v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    float32x2_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_25B522F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B522F70(void *a1, uint64_t **a2, void *a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v4 = a1;
  id v54 = a3;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id obj = v4;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v68, v74, 16);
  if (v8)
  {
    uint64_t v55 = *(void *)v69;
    do
    {
      uint64_t v9 = 0;
      uint64_t v56 = v8;
      do
      {
        if (*(void *)v69 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(unsigned char **)(*((void *)&v68 + 1) + 8 * v9);
        unint64_t v11 = objc_msgSend_identifier(v10, v6, v7);
        objc_msgSend_UUIDString(v11, v12, v13);
        id v14 = objc_claimAutoreleasedReturnValue();
        float v17 = (char *)objc_msgSend_UTF8String(v14, v15, v16);
        sub_25B403500(__p, v17);

        if (sub_25B495728(a2[1], __p))
        {
          *(void *)&src[0] = __p;
          uint64_t v18 = sub_25B494B20(a2, __p, (long long **)src);
          float v19 = COERCE_FLOAT(*((void *)v18 + 11));
          float v20 = COERCE_FLOAT(*((void *)v18 + 17));
          if (v19 >= v20)
          {
            float32x4_t v61 = *((float32x4_t *)v18 + 5);
            float32x4_t v58 = *((float32x4_t *)v18 + 7);
            float32x4_t v59 = *((float32x4_t *)v18 + 6);
            float32x4_t v57 = *((float32x4_t *)v18 + 8);
          }
          else
          {
            v21.i64[0] = *((void *)v18 + 10);
            v21.i32[2] = *((void *)v18 + 17);
            v21.i32[3] = HIDWORD(*((_OWORD *)v18 + 5));
            v22.i64[0] = *((void *)v18 + 12);
            v22.i64[1] = __PAIR64__(HIDWORD(*((_OWORD *)v18 + 6)), LODWORD(v20));
            v23.i64[0] = *((void *)v18 + 14);
            v23.i32[2] = *((void *)v18 + 11);
            v23.i32[3] = HIDWORD(*((_OWORD *)v18 + 7));
            v24.i64[0] = *((void *)v18 + 16);
            v24.i64[1] = __PAIR64__(HIDWORD(*((_OWORD *)v18 + 8)), LODWORD(v19));
            float32x4_t v61 = v21;
            float32x4_t v58 = v23;
            float32x4_t v59 = v22;
            float32x4_t v57 = v24;
          }
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          id v25 = v54;
          uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v62, v73, 16);
          if (v29)
          {
            uint64_t v30 = *(void *)v63;
            while (2)
            {
              for (uint64_t i = 0; i != v29; ++i)
              {
                if (*(void *)v63 != v30) {
                  objc_enumerationMutation(v25);
                }
                uint64_t v32 = *(void **)(*((void *)&v62 + 1) + 8 * i);
                uint64_t v33 = objc_msgSend_identifier(v32, v27, v28);
                __int32 v36 = objc_msgSend_identifier(v10, v34, v35);
                char isEqual = objc_msgSend_isEqual_(v33, v37, (uint64_t)v36);

                if (isEqual)
                {
                  objc_msgSend_quad(v32, v27, v28);
                  float32x4_t v45 = vsubq_f32(v61, v44);
                  float32x4_t v46 = vmulq_f32(v45, v45);
                  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]) > 0.001|| (float32x4_t v47 = vsubq_f32(v59, v41), v48 = vmulq_f32(v47, v47), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0]) > 0.001)|| (v49 = vsubq_f32(v58, v42), v50 = vmulq_f32(v49, v49), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0]) > 0.001)|| (v51 = vsubq_f32(v57, v43), v52 = vmulq_f32(v51, v51), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]) > 0.001))
                  {
                    if (objc_msgSend_individualUpdate(v10, v39, v40) == 2 && v10) {
                      v10[105] = 1;
                    }
                  }
                  goto LABEL_26;
                }
              }
              uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v27, (uint64_t)&v62, v73, 16);
              if (v29) {
                continue;
              }
              break;
            }
          }
LABEL_26:

          src[0] = v61;
          src[1] = v59;
          src[2] = v58;
          src[3] = v57;
          if (v10) {
            objc_copyStruct(v10 + 272, src, 64, 1, 0);
          }
        }
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        ++v9;
      }
      while (v9 != v56);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v68, v74, 16);
    }
    while (v8);
  }
}

void sub_25B523348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B5233E4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v7 = objc_msgSend_count(v3, v5, v6);
  if (v7 == objc_msgSend_count(v4, v8, v9))
  {
    unint64_t v12 = 0;
LABEL_3:
    if (v12 >= objc_msgSend_count(v3, v10, v11))
    {
      uint64_t v40 = 1;
      goto LABEL_9;
    }
    id v14 = objc_msgSend_objectAtIndexedSubscript_(v3, v13, v12);
    objc_msgSend_quad(v14, v15, v16);
    int v51 = v17;
    int v53 = v18;
    int v55 = v19;
    uint64_t v50 = v20;
    uint64_t v52 = v21;
    int v57 = v22;
    uint64_t v54 = v23;
    uint64_t v56 = v24;

    uint64_t v26 = objc_msgSend_objectAtIndexedSubscript_(v4, v25, v12);
    objc_msgSend_quad(v26, v27, v28);
    int v43 = v29;
    int v45 = v30;
    int v47 = v31;
    uint64_t v42 = v32;
    uint64_t v44 = v33;
    int v49 = v34;
    uint64_t v46 = v35;
    uint64_t v48 = v36;

    uint64_t v37 = 0;
    while (1)
    {
      float32x4_t v38 = vsubq_f32(*(float32x4_t *)((char *)&v50 + v37), *(float32x4_t *)((char *)&v42 + v37));
      float32x4_t v39 = vmulq_f32(v38, v38);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]) > 0.01)break; {
      v37 += 16;
      }
      if (v37 == 64)
      {
        ++v12;
        goto LABEL_3;
      }
    }
  }
  uint64_t v40 = 0;
LABEL_9:

  return v40;
}

void sub_25B523568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B523598(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v28 = a1;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_set(MEMORY[0x263EFF9C0], v4, v5);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v7 = v3;
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v33, v38, 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v34 != v12) {
          objc_enumerationMutation(v7);
        }
        id v14 = objc_msgSend_identifier(*(void **)(*((void *)&v33 + 1) + 8 * i), v9, v10);
        objc_msgSend_addObject_(v6, v15, (uint64_t)v14);
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v33, v38, 16);
    }
    while (v11);
  }

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v16 = v28;
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v29, v37, 16);
  if (v20)
  {
    uint64_t v21 = *(void *)v30;
    do
    {
      for (uint64_t j = 0; j != v20; ++j)
      {
        if (*(void *)v30 != v21) {
          objc_enumerationMutation(v16);
        }
        uint64_t v23 = *(unsigned char **)(*((void *)&v29 + 1) + 8 * j);
        uint64_t v24 = objc_msgSend_identifier(v23, v18, v19);
        char v26 = objc_msgSend_containsObject_(v6, v25, (uint64_t)v24);

        if (v23) {
          char v27 = v26;
        }
        else {
          char v27 = 1;
        }
        if ((v27 & 1) == 0) {
          v23[105] = 0;
        }
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v18, (uint64_t)&v29, v37, 16);
    }
    while (v20);
  }
}

void sub_25B523798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B5237FC(void *a1, void *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  id v48 = a1;
  id v3 = a2;
  id v4 = objc_opt_new();
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id v5 = v3;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v57, v62, 16);
  if (v9)
  {
    uint64_t v10 = *(void *)v58;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v58 != v10) {
          objc_enumerationMutation(v5);
        }
        uint64_t v12 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend_identifier(v12, v7, v8);
        objc_msgSend_setObject_forKeyedSubscript_(v4, v14, (uint64_t)v12, v13);
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v57, v62, 16);
    }
    while (v9);
  }

  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v15 = v48;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v53, v61, 16);
  if (v19)
  {
    uint64_t v20 = *(void *)v54;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v54 != v20) {
          objc_enumerationMutation(v15);
        }
        int v22 = *(unsigned char **)(*((void *)&v53 + 1) + 8 * v21);
        uint64_t v23 = objc_msgSend_identifier(v22, v17, v18);
        id v25 = objc_msgSend_objectForKeyedSubscript_(v4, v24, (uint64_t)v23);
        BOOL v26 = v25 == 0;

        if (v26)
        {
          if (!v22) {
            goto LABEL_23;
          }
          char v46 = 0;
LABEL_22:
          v22[105] = v46;
          goto LABEL_23;
        }
        char v27 = objc_msgSend_identifier(v22, v17, v18);
        long long v29 = objc_msgSend_objectForKeyedSubscript_(v4, v28, (uint64_t)v27);
        objc_msgSend_quad(v29, v30, v31);
        float32x4_t v51 = v33;
        float32x4_t v52 = v32;
        float32x4_t v49 = v35;
        float32x4_t v50 = v34;

        objc_msgSend_quad(v22, v36, v37);
        uint32x4_t v42 = (uint32x4_t)vceqq_f32(v41, v52);
        v42.i32[3] = v42.i32[2];
        if ((vminvq_u32(v42) & 0x80000000) != 0
          && (uint32x4_t v43 = (uint32x4_t)vceqq_f32(v38, v51), v43.i32[3] = v43.i32[2], (vminvq_u32(v43) & 0x80000000) != 0)
          && (uint32x4_t v44 = (uint32x4_t)vceqq_f32(v39, v50), v44.i32[3] = v44.i32[2], (vminvq_u32(v44) & 0x80000000) != 0)
          && (uint32x4_t v45 = (uint32x4_t)vceqq_f32(v40, v49), v45.i32[3] = v45.i32[2], (vminvq_u32(v45) & 0x80000000) != 0))
        {
          char v46 = 2;
          if (v22) {
            goto LABEL_22;
          }
        }
        else
        {
          char v46 = 1;
          if (v22) {
            goto LABEL_22;
          }
        }
LABEL_23:
        ++v21;
      }
      while (v19 != v21);
      uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v17, (uint64_t)&v53, v61, 16);
      uint64_t v19 = v47;
    }
    while (v47);
  }
}

void sub_25B523AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B523B4C(uint64_t a1)
{
  sub_25B523B84(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B523B84(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1860;
  uint64_t v2 = *(void **)(a1 + 1280);
  id v3 = (void *)(a1 + 1288);
  if (v2 != (void *)(a1 + 1288))
  {
    do
    {
      CVPixelBufferRelease((CVPixelBufferRef)v2[7]);
      id v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          id v5 = v4;
          id v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          id v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  sub_25B41068C(*(void **)(a1 + 1312));
  sub_25B400248(*(char **)(a1 + 1288));
  sub_25B501538(*(void **)(a1 + 1200));
  id v7 = *(void **)(a1 + 1168);
  if (v7)
  {
    *(void *)(a1 + 1176) = v7;
    operator delete(v7);
  }
  *(void *)(a1 + 1008) = &unk_2708F21F8;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 1136);
  if (v8) {
    sub_25B404120(v8);
  }
  sub_25B5CCC9C((void *)(a1 + 80));
  sub_25B4D7170(a1 + 8);
  return a1;
}

uint64_t *sub_25B523C88(uint64_t **a1, void *a2, long long **a3)
{
  id v5 = (uint64_t **)sub_25B4953D4((uint64_t)a1, &v12, a2);
  BOOL v6 = *v5;
  if (!*v5)
  {
    id v7 = v5;
    BOOL v6 = (uint64_t *)operator new(0x40uLL);
    uint64_t v8 = v6 + 4;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_25B4002F4(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v8 = v10;
    }
    v6[7] = 0;
    sub_25B3FA740(a1, v12, v7, v6);
  }
  return v6;
}

void sub_25B523D28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_25B523D3C(uint64_t **a1, void *a2, long long **a3)
{
  id v5 = (void **)sub_25B4953D4((uint64_t)a1, &v14, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    id v7 = (uint64_t **)v5;
    BOOL v6 = (char *)operator new(0xD0uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = v6 + 32;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_25B4002F4(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v8 = v10;
    }
    *((void *)v6 + 7) = &unk_2708F2218;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((void *)v6 + 22) = 0;
    *((void *)v6 + 23) = 0;
    *((_WORD *)v6 + 96) = 257;
    char v13 = 1;
    sub_25B3FA740(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    sub_25B523E50((uint64_t)v12);
  }
  return v6;
}

void sub_25B523E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25B523E50(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4106E0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *sub_25B523EA8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  BOOL v6 = *(void **)(a1 + 8);
  id v4 = (void *)(a1 + 8);
  id v5 = v6;
  if (!v6)
  {
    uint64_t v12 = v4;
    goto LABEL_17;
  }
  uint64_t v7 = (a4 - (uint64_t)a3) >> 3;
  do
  {
    while (1)
    {
      id v4 = v5;
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = (uint64_t)(v5[5] - (void)v8) >> 3;
      uint64_t v10 = v9 >= v7 ? (a4 - (uint64_t)a3) >> 3 : v9;
      if (v10 >= 1) {
        break;
      }
LABEL_10:
      if (v7 >= v9) {
        goto LABEL_14;
      }
LABEL_11:
      id v5 = (void *)*v4;
      uint64_t v12 = v4;
      if (!*v4) {
        goto LABEL_17;
      }
    }
    uint64_t v11 = a3;
    while (*v11 == *v8)
    {
      ++v11;
      ++v8;
      if (!--v10) {
        goto LABEL_10;
      }
    }
    if (*v11 < *v8) {
      goto LABEL_11;
    }
LABEL_14:
    id v5 = (void *)v4[1];
  }
  while (v5);
  uint64_t v12 = v4 + 1;
LABEL_17:
  *a2 = v4;
  return v12;
}

uint64_t sub_25B523F38(uint64_t a1, CVPixelBufferRef pixelBuffer, _DWORD *a3)
{
  uint64_t v5 = *(void *)a3;
  uint64_t v6 = *(void *)(*(void *)a3 + 8);
  uint64_t v14 = *(void *)(*(void *)a3 + 16);
  uint64_t v15 = v6;
  uint64_t v13 = *(void *)(v5 + 24);
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  IOSurfaceLock(IOSurface, 1u, 0);
  *(void *)a1 = &unk_2708F1EB8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  if (a3[7] == 3)
  {
    BaseAddress = IOSurfaceGetBaseAddress(IOSurface);
    sub_25B4CB164(v10, &v15, &v14, &v13);
    sub_25B4CB400((uint64_t)v11, v10, (uint64_t)BaseAddress);
    sub_25B453C28(a1, (uint64_t)v11);
    v11[0] = &unk_2708F1EB8;
    if (v12) {
      sub_25B404120(v12);
    }
  }
  return IOSurfaceUnlock(IOSurface, 1u, 0);
}

void sub_25B52406C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  id v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B524094()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v131 = v0;
  v269[19] = *(void **)MEMORY[0x263EF8340];
  kdebug_trace();
  CVPixelBufferLockBaseAddress(v2, 1uLL);
  sub_25B4D7B80();
  CVPixelBufferUnlockBaseAddress(v2, 1uLL);
  kdebug_trace();
  kdebug_trace();
  sub_25B403500(v257, "loi_input_2");
  uint64_t v132 = v4;
  __p[0] = v257;
  uint64_t v5 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v4 + 1280), v257, (_OWORD **)__p) + 7);
  sub_25B403500(__p, "loi_input_2");
  uint64_t v6 = v4 + 8;
  uint64_t v7 = sub_25B4D7D08(v4 + 8, (uint64_t)__p);
  sub_25B523F38((uint64_t)v204, v5, v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v257[2]) < 0) {
    operator delete(v257[0]);
  }
  sub_25B403500(v257, "jmap");
  __p[0] = v257;
  uint64_t v8 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v4 + 1280), v257, (_OWORD **)__p) + 7);
  sub_25B403500(__p, "jmap");
  uint64_t v9 = sub_25B4D7D08(v6, (uint64_t)__p);
  sub_25B523F38((uint64_t)&v200, v8, v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v257[2]) < 0) {
    operator delete(v257[0]);
  }
  sub_25B403500(v257, "jmap_peaks");
  __p[0] = v257;
  uint64_t v10 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v4 + 1280), v257, (_OWORD **)__p) + 7);
  sub_25B403500(__p, "jmap_peaks");
  uint64_t v11 = sub_25B4D7D08(v6, (uint64_t)__p);
  sub_25B523F38((uint64_t)&v194, v10, v11);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v257[2]) < 0) {
    operator delete(v257[0]);
  }
  sub_25B403500(v257, "lmap");
  __p[0] = v257;
  uint64_t v12 = sub_25B52B39C((uint64_t **)(v4 + 1304), v257, (_OWORD **)__p);
  if (SHIBYTE(v257[2]) < 0) {
    operator delete(v257[0]);
  }
  sub_25B403500(v257, "lmap");
  __p[0] = v257;
  uint64_t v13 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v4 + 1280), v257, (_OWORD **)__p) + 7);
  sub_25B403500(__p, "lmap");
  uint64_t v14 = sub_25B4D7D08(v6, (uint64_t)__p);
  uint64_t v15 = *(void *)(*(void *)v14 + 8);
  uint64_t v16 = *(void *)(*(void *)v14 + 16);
  uint64_t v17 = *(void *)(*(void *)v14 + 24);
  uint64_t v18 = (_DWORD *)*((void *)v12 + 25);
  IOSurface = CVPixelBufferGetIOSurface(v13);
  IOSurfaceLock(IOSurface, 1u, 0);
  uint64_t v20 = v16 * v15 * v17;
  int v21 = *((_DWORD *)v14 + 7);
  if (v21 == 3)
  {
    for (uint64_t i = (__int16 *)IOSurfaceGetBaseAddress(IOSurface); v20; --v20)
    {
      __int16 v25 = *i++;
      _H0 = v25;
      __asm { FCVT            S0, H0 }
      *v18++ = _S0;
    }
  }
  else if (v21 == 6)
  {
    for (uint64_t j = (int *)IOSurfaceGetBaseAddress(IOSurface); v20; --v20)
    {
      int v23 = *j++;
      *v18++ = v23;
    }
  }
  IOSurfaceUnlock(IOSurface, 1u, 0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v257[2]) < 0) {
    operator delete(v257[0]);
  }
  char v130 = v12;
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  float v32 = *(float *)(v132 + 1224);
  unint64_t v193 = 0;
  BOOL v191 = 0;
  int64_t v192 = 0;
  uint64_t v134 = v196;
  if (v196)
  {
    float32x4_t v33 = 0;
    float32x4_t v34 = 0;
    float32x4_t v35 = 0;
    long long v36 = 0;
    unint64_t v37 = 0;
    unint64_t v38 = v195;
    unint64_t v39 = v197;
    uint64_t v40 = v203;
    uint64_t v41 = v199;
    double v42 = (double)v197;
    unint64_t v43 = v195 - 1;
    uint64_t v44 = 2 * v197 * v196;
    uint32x4_t v45 = (short float *)(v199 + v44);
    uint64_t v133 = v197;
    unint64_t v138 = v195 - 1;
    uint64_t v139 = v199;
    do
    {
      float32x2_t v135 = v45;
      unint64_t v137 = v37;
      if (v39)
      {
        unint64_t v46 = 0;
        unint64_t v47 = v37 * v39;
        double v48 = (double)v37;
        float32x4_t v49 = v33;
        float32x4_t v50 = v34;
        unint64_t v141 = v37 * v39;
        do
        {
          _H0 = *(short float *)(v40 + 2 * (v46 + v47));
          __asm { FCVT            S1, H0 }
          if (v32 <= _S1)
          {
            _H11 = *(short float *)(v41 + 2 * (v46 + v47));
            long long v54 = v45;
            unint64_t v55 = v43;
            if (v38 >= 2)
            {
              do
              {
                if (_H11 < *v54) {
                  _H11 = *v54;
                }
                long long v54 = (short float *)((char *)v54 + v44);
                --v55;
              }
              while (v55);
            }
            if (_H0 == _H11)
            {
              float v56 = (float)v46;
              float v57 = (double)v46 / v42 + v48;
              if (v36 >= v35)
              {
                unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v50) >> 2);
                unint64_t v60 = v59 + 1;
                if (v59 + 1 > 0x1555555555555555) {
                  sub_25B3FBC4C();
                }
                if (0x5555555555555556 * ((v35 - v50) >> 2) > v60) {
                  unint64_t v60 = 0x5555555555555556 * ((v35 - v50) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v35 - v50) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v61 = 0x1555555555555555;
                }
                else {
                  unint64_t v61 = v60;
                }
                if (v61 > 0x1555555555555555) {
                  sub_25B3FA70C();
                }
                long long v62 = (char *)operator new(12 * v61);
                uint64_t v63 = &v62[12 * v59];
                __asm { FCVT            S0, H11 }
                *(float *)uint64_t v63 = v56;
                *((float *)v63 + 1) = v57;
                *((_DWORD *)v63 + 2) = _S0;
                float32x4_t v34 = v63;
                if (v49 != v50)
                {
                  do
                  {
                    uint64_t v65 = *(void *)(v49 - 12);
                    v49 -= 12;
                    int v66 = *((_DWORD *)v49 + 2);
                    *(void *)(v34 - 12) = v65;
                    v34 -= 12;
                    *((_DWORD *)v34 + 2) = v66;
                  }
                  while (v49 != v50);
                  float32x4_t v49 = v50;
                }
                float32x4_t v35 = &v62[12 * v61];
                float32x4_t v33 = v63 + 12;
                BOOL v191 = v34;
                unint64_t v193 = v35;
                if (v49)
                {
                  char v67 = v35;
                  operator delete(v49);
                  float32x4_t v35 = v67;
                }
                float32x4_t v50 = v34;
                unint64_t v43 = v138;
                uint64_t v41 = v139;
                unint64_t v47 = v141;
              }
              else
              {
                __asm { FCVT            S0, H11 }
                *(float *)long long v36 = v56;
                *((float *)v36 + 1) = v57;
                *((_DWORD *)v36 + 2) = _S0;
                float32x4_t v33 = v36 + 12;
              }
              int64_t v192 = v33;
              float32x4_t v49 = v33;
              long long v36 = v33;
            }
          }
          ++v46;
          ++v45;
        }
        while (v46 != v39);
      }
      unint64_t v37 = v137 + 1;
      uint32x4_t v45 = &v135[v133];
    }
    while (v137 + 1 != v134);
  }
  kdebug_trace();
  kdebug_trace();
  unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v192 - (unsigned char *)v191) >> 2);
  if (v68 >= *(void *)(v132 + 1216)) {
    unint64_t v69 = *(void *)(v132 + 1216);
  }
  else {
    unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((v192 - (unsigned char *)v191) >> 2);
  }
  if (v69 > 1)
  {
    sub_25B400BE4(&v227, v68);
    long long v70 = v227;
    if ((void)v227 != *((void *)&v227 + 1))
    {
      uint64_t v71 = 0;
      int8x8_t v72 = (void *)v227;
      do
        *v72++ = v71++;
      while (v72 != *((void **)&v70 + 1));
    }
    unint64_t v73 = 126 - 2 * __clz((uint64_t)(*((void *)&v70 + 1) - v70) >> 3);
    v257[0] = &v191;
    if (*((void *)&v70 + 1) == (void)v70) {
      uint64_t v74 = 0;
    }
    else {
      uint64_t v74 = v73;
    }
    sub_25B5CCDE8((uint64_t *)v70, *((uint64_t **)&v70 + 1), (uint64_t **)v257, v74, 1);
    __p[0] = (void *)(((v69 - 1) * v69) >> 1);
    *(int64x2_t *)&__p[1] = vdupq_n_s64(2uLL);
    sub_25B52B59C((uint64_t)v257, (uint64_t)__p);
    __n128 v75 = (__n128)vdupq_n_s64(2uLL);
    v75.n128_u64[0] = v69;
    sub_25B46A88C((uint64_t)__p, v75);
    sub_25B51A0A4((uint64_t)v210, v69, 0.0);
    uint64_t v76 = 0;
    uint64_t v136 = (uint64_t)v130 + 56;
    uint64_t v77 = v254;
    uint64_t v78 = v227;
    uint64_t v79 = v192;
    uint64_t v80 = v261 + 1;
    for (uint64_t k = 16 * v69 - 16; ; k -= 16)
    {
      *(void *)&long long v237 = v76;
      unint64_t v82 = *(void *)(v78 + 8 * v76);
      if (0xAAAAAAAAAAAAAAABLL * ((v79 - (unsigned char *)v191) >> 2) <= v82) {
        sub_25B56F224();
      }
      uint64_t v83 = (__int32 *)((char *)v191 + 12 * v82);
      __int32 v84 = *v83;
      __int32 v85 = v83[1];
      __int32 v86 = v83[2];
      uint64_t v87 = (__int32 *)(v77 + 8 * v76);
      *uint64_t v87 = v85;
      v87[1] = v84;
      *(_DWORD *)sub_25B503824((uint64_t)v210, (unint64_t *)&v237) = v86;
      if (v76 == v69 - 1) {
        break;
      }
      ++v76;
      uint64_t v78 = v227;
      uint64_t v79 = v192;
      long long v88 = (char *)v191;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v192 - (unsigned char *)v191) >> 2);
      float v90 = v80;
      uint64_t v91 = v76;
      do
      {
        unint64_t v92 = *(void *)(v78 + 8 * v91);
        if (v89 <= v92) {
          sub_25B56F224();
        }
        int32x2_t v93 = *(int32x2_t *)&v88[12 * v92];
        v90[-1].i32[0] = v85;
        v90[-1].i32[1] = v84;
        *float v90 = vrev64_s32(v93);
        v90 += 2;
        ++v91;
      }
      while (v69 != v91);
      uint64_t v80 = (int32x2_t *)((char *)v80 + k);
    }
    char v158 = 1;
    sub_25B45F1E4((uint64_t)&v159, (uint64_t)v257);
    sub_25B4582F4((uint64_t)&v171, (uint64_t)__p);
    sub_25B45E3AC((uint64_t)&v181, (uint64_t)v210);
    *(void *)&v210[0] = &unk_2708F27E8;
    if ((void)v212) {
      sub_25B404120((std::__shared_weak_count *)v212);
    }
    __p[0] = &unk_2708F21F8;
    if (v253) {
      sub_25B404120(v253);
    }
    v257[0] = &unk_2708F2218;
    if (v260) {
      sub_25B404120(v260);
    }
    if ((void)v227)
    {
      *((void *)&v227 + 1) = v227;
      operator delete((void *)v227);
    }
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    uint64_t v154 = 0;
    long long v155 = 0;
    long long v146 = &unk_2708F2218;
    __int16 v156 = 257;
    if (*(unsigned char *)(v132 + 1276))
    {
      LODWORD(v269[0]) = 1;
      sub_25B456DFC((uint64_t)&v227, v136, (unsigned int *)v269);
      LODWORD(v267) = 2;
      sub_25B456DFC((uint64_t)&v237, v136, (unsigned int *)&v267);
      long long v258 = 0u;
      memset(v257, 0, sizeof(v257));
      sub_25B4582F4((uint64_t)v259, (uint64_t)&v227);
      sub_25B4582F4((uint64_t)v262, (uint64_t)&v237);
      uint64_t v94 = 0;
      char v95 = 1;
      do
      {
        uint64_t v96 = *(void *)&v259[8 * v94 + 8];
        uint64_t v97 = v262[v94 + 1];
        if ((v95 & 1) == 0) {
          break;
        }
        char v95 = 0;
        uint64_t v94 = 1;
      }
      while (v96 == v97);
      if (v96 != v97)
      {
        float v98 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        float v99 = sub_25B406B20(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
        sub_25B406B20(v99, (uint64_t)" ", 1);
        BOOL v100 = (void *)MEMORY[0x263F8C0F8];
        long long v101 = (void *)std::ostream::operator<<();
        sub_25B406B20(v101, (uint64_t)" ", 1);
        sub_25B406B20(v101, (uint64_t)"TensorBinaryExp", 15);
        std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(void *)(*v101 - 24)));
        unint64_t v102 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        sub_25B408160("err", "Binary Exp shape should equal");
        std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
        uint64_t v103 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
      }
      *(_OWORD *)char v257 = *(_OWORD *)&v259[8];
      *(_OWORD *)&v257[2] = *(_OWORD *)&v259[24];
      long long v258 = *(_OWORD *)&v259[40];
      *(void *)&long long v212 = 0;
      memset((char *)&v210[4] + 8, 0, 32);
      *(long long *)((char *)v210 + 8) = *(_OWORD *)&v259[8];
      *(long long *)((char *)&v210[2] + 8) = *(_OWORD *)&v259[40];
      *(long long *)((char *)&v210[1] + 8) = *(_OWORD *)&v259[24];
      *(void *)&v210[0] = &unk_2708F21F8;
      *((void *)&v210[3] + 1) = *(void *)&v259[16];
      *(void *)&v210[4] = 1;
      *((void *)&v210[6] + 1) = *(void *)&v259[8] * *(void *)&v259[16];
      long long v211 = 0uLL;
      sub_25B458EBC((uint64_t)__p, *(void *)&v259[8] * *(void *)&v259[16]);
    }
    long long v151 = v164;
    long long v152 = v165;
    long long v153 = v166;
    long long v147 = v160;
    long long v148 = v161;
    long long v149 = v162;
    long long v150 = v163;
    uint64_t v105 = v167;
    long long v106 = v168;
    if (v168)
    {
      atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v154 = v105;
      long long v155 = v106;
    }
    else
    {
      uint64_t v154 = v167;
      long long v155 = 0;
    }
    long long v107 = v170;
    long long v157 = v170;
    __int16 v156 = v169;
    long long v143 = 0;
    char v144 = 0;
    unint64_t v145 = 0;
    uint64_t v108 = v147;
    if ((void)v147)
    {
      float v109 = (float)(512.0 / (float)v201) * 0.03;
      float v140 = (float)v204[2] / (float)v201;
      do
      {
        LODWORD(v110) = vsubq_f32(*v107, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v107, 2)).u32[0];
        float32x4_t v142 = *v107;
        float32x4_t v111 = vsubq_f32(*v107, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v107, 3));
        float v112 = v109 * sqrtf(vmlas_n_f32(COERCE_FLOAT(vmulq_f32(v111, v111).i32[1]), v110, v110));
        if (v112 >= *(float *)(v132 + 1232) && v112 <= *(float *)(v132 + 1228))
        {
          float v113 = (float32x4_t *)operator new(0x10uLL);
          *float v113 = vmulq_n_f32(v142, v140);
          v257[2] = &v113[1];
          v257[0] = v113;
          v257[1] = &v113[1];
          uint64_t v114 = v144;
          if ((unint64_t)v144 >= v145)
          {
            uint64_t v115 = sub_25B52B488(&v143, (uint64_t)v257);
          }
          else
          {
            *(void *)char v144 = 0;
            *((void *)v114 + 1) = 0;
            *((void *)v114 + 2) = 0;
            sub_25B3FCA58(v114, v113, (uint64_t)&v113[1], 4uLL);
            uint64_t v115 = (uint64_t)(v114 + 24);
          }
          char v144 = (char *)v115;
          operator delete(v113);
        }
        ++v107;
        --v108;
      }
      while (v108);
      if (v144 != v143)
      {
        v257[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v144 - v143) >> 3));
        *(int64x2_t *)&v257[1] = vdupq_n_s64(2uLL);
        sub_25B52B59C((uint64_t)v236, (uint64_t)v257);
        float v116 = v143;
        if (v144 != v143)
        {
          uint64_t v117 = 0;
          uint64_t v118 = 0;
          uint64_t v119 = v236[18];
          unint64_t v120 = (v144 - v143) / 24;
          if (v120 <= 1) {
            unint64_t v120 = 1;
          }
          do
          {
            uint64_t v121 = 0;
            uint64_t v122 = *(void *)&v116[24 * v117];
            do
            {
              v119[v118 + v121] = *(_DWORD *)(v122 + 4 * v121);
              ++v121;
            }
            while (v121 != 4);
            v118 += 4;
            ++v117;
          }
          while (v117 != v120);
        }
        kdebug_trace();
        kdebug_trace();
        uint64_t v206 = 0x100000000;
        LODWORD(v207) = 1;
        sub_25B52B938((uint64_t)&v235, (uint64_t)v236, (uint64_t)&v206);
        long long v229 = 0u;
        memset(v230, 0, sizeof(v230));
        long long v227 = 0u;
        long long v228 = 0u;
        sub_25B45F1E4((uint64_t)&v231, (uint64_t)&v235);
        sub_25B4582F4((uint64_t)&v233, v132 + 1008);
        sub_25B52EADC((uint64_t)v230, v232, v234, &v227);
        uint64_t v208 = 0x200000001;
        int v209 = 1;
        sub_25B52B938((uint64_t)&v248, (uint64_t)v236, (uint64_t)&v208);
        long long v241 = 0u;
        long long v242 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        int v243 = 1065353216;
        sub_25B4582F4((uint64_t)&v244, v132 + 1008);
        long long v237 = v245;
        long long v238 = v246;
        long long v239 = v247;
        memset(v210, 0, sizeof(v210));
        long long v211 = 0u;
        long long v212 = 0u;
        long long v213 = 0u;
        long long v214 = 0u;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long v221 = 0u;
        sub_25B45F1E4((uint64_t)&v222, (uint64_t)&v248);
        v224[4] = v241;
        v224[5] = v242;
        v224[0] = v237;
        v224[1] = v238;
        int v225 = v243;
        v224[2] = v239;
        v224[3] = v240;
        sub_25B4582F4((uint64_t)&v226, (uint64_t)&v244);
        sub_25B52EADC((uint64_t)&v210[3], v223, v224, v210);
        long long v250 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_25B52E8E4((uint64_t)v251, &v227);
        sub_25B52E9C8((uint64_t)&v255, v210);
        if (*(void *)v251 != v255 || *(_OWORD *)&v251[8] != v256)
        {
          uint64_t v123 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
          uint64_t v124 = sub_25B406B20(v123, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
          sub_25B406B20(v124, (uint64_t)" ", 1);
          uint64_t v125 = (void *)MEMORY[0x263F8C0F8];
          int8x16_t v126 = (void *)std::ostream::operator<<();
          sub_25B406B20(v126, (uint64_t)" ", 1);
          sub_25B406B20(v126, (uint64_t)"TensorBinaryExp", 15);
          std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(*v126 - 24)));
          __int32 v127 = std::locale::use_facet((const std::locale *)v269, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v127->__vftable[2].~facet_0)(v127, 10);
          std::locale::~locale((std::locale *)v269);
          std::ostream::put();
          std::ostream::flush();
          sub_25B408160("err", "Binary Exp shape should equal");
          std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(void *)(*v125 - 24)));
          long long v128 = std::locale::use_facet((const std::locale *)v269, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
          std::locale::~locale((std::locale *)v269);
          std::ostream::put();
          std::ostream::flush();
        }
        *(_OWORD *)__p = *(_OWORD *)v251;
        *(_OWORD *)&__p[2] = *(_OWORD *)&v251[16];
        long long v250 = v252;
        memset(v257, 0, sizeof(v257));
        long long v258 = 0u;
        *(_OWORD *)char v259 = *(_OWORD *)v251;
        *(_OWORD *)&v259[16] = *(_OWORD *)&v251[16];
        *(_OWORD *)&v259[32] = v252;
        sub_25B52E8E4((uint64_t)&v259[48], (long long *)v251);
        sub_25B52E9C8((uint64_t)v263, (long long *)&v255);
        long long v264 = 0u;
        long long v265 = 0u;
        *(_OWORD *)&v263[696] = 0u;
        int v266 = 1056964608;
        *(_OWORD *)char v257 = *(_OWORD *)v259;
        *(_OWORD *)&v257[2] = *(_OWORD *)&v259[16];
        long long v258 = *(_OWORD *)&v259[32];
        memset(v268, 0, 96);
        v268[15] = 0;
        BOOL v267 = &unk_2708F2218;
        v268[14] = 0;
        sub_25B43876C((uint64_t)v268, (long long *)v257);
        sub_25B458EBC((uint64_t)v269, (uint64_t)v268[12]);
      }
    }
    if (qword_26A5020C0 != -1) {
      dispatch_once(&qword_26A5020C0, &unk_2708F1238);
    }
    uint64_t v129 = (id)qword_26A5020B8;
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v257[0]) = 0;
      _os_log_debug_impl(&dword_25B3F3000, v129, OS_LOG_TYPE_DEBUG, "No valid candidate line", (uint8_t *)v257, 2u);
    }

    *(unsigned char *)uint64_t v131 = 0;
    *(void *)(v131 + 8) = &unk_2708F2218;
    *(_OWORD *)(v131 + 16) = 0u;
    *(_OWORD *)(v131 + 32) = 0u;
    *(_OWORD *)(v131 + 48) = 0u;
    *(_OWORD *)(v131 + 64) = 0u;
    *(_OWORD *)(v131 + 80) = 0u;
    *(_OWORD *)(v131 + 96) = 0u;
    *(void *)(v131 + 128) = 0;
    *(void *)(v131 + 136) = 0;
    *(_WORD *)(v131 + 144) = 257;
    *(void *)(v131 + 160) = &unk_2708F2218;
    *(_OWORD *)(v131 + 168) = 0u;
    *(_OWORD *)(v131 + 184) = 0u;
    *(_OWORD *)(v131 + 200) = 0u;
    *(_OWORD *)(v131 + 216) = 0u;
    *(_OWORD *)(v131 + 232) = 0u;
    *(_OWORD *)(v131 + 248) = 0u;
    *(void *)(v131 + 280) = 0;
    *(void *)(v131 + 288) = 0;
    *(_WORD *)(v131 + 296) = 257;
    *(void *)(v131 + 312) = &unk_2708F21F8;
    *(_OWORD *)(v131 + 320) = 0u;
    *(_OWORD *)(v131 + 336) = 0u;
    *(_OWORD *)(v131 + 352) = 0u;
    *(_OWORD *)(v131 + 368) = 0u;
    *(_OWORD *)(v131 + 384) = 0u;
    *(_OWORD *)(v131 + 400) = 0u;
    *(void *)(v131 + 432) = 0;
    *(void *)(v131 + 440) = 0;
    *(_WORD *)(v131 + 448) = 257;
    *(void *)(v131 + 464) = &unk_2708F21F8;
    *(_OWORD *)(v131 + 472) = 0u;
    *(_OWORD *)(v131 + 488) = 0u;
    *(_OWORD *)(v131 + 504) = 0u;
    *(_OWORD *)(v131 + 520) = 0u;
    *(_OWORD *)(v131 + 536) = 0u;
    *(_OWORD *)(v131 + 552) = 0u;
    *(void *)(v131 + 592) = 0;
    *(void *)(v131 + 584) = 0;
    *(_WORD *)(v131 + 600) = 257;
    *(void *)(v131 + 616) = &unk_2708F27E8;
    *(_OWORD *)(v131 + 688) = 0u;
    *(_OWORD *)(v131 + 704) = 0u;
    *(_OWORD *)(v131 + 656) = 0u;
    *(_OWORD *)(v131 + 672) = 0u;
    *(_OWORD *)(v131 + 624) = 0u;
    *(_OWORD *)(v131 + 640) = 0u;
    *(void *)(v131 + 744) = 0;
    *(void *)(v131 + 736) = 0;
    *(_WORD *)(v131 + 752) = 257;
    v257[0] = &v143;
    sub_25B413C78((void ***)v257);
    long long v146 = &unk_2708F2218;
    if (v155) {
      sub_25B404120(v155);
    }
  }
  else
  {
    char v158 = 0;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    BOOL v168 = 0;
    long long v159 = &unk_2708F2218;
    uint64_t v167 = 0;
    __int16 v169 = 257;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v177 = 0u;
    long long v179 = 0;
    int v171 = &unk_2708F21F8;
    uint64_t v178 = 0;
    __int16 v180 = 257;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    uint64_t v181 = &unk_2708F27E8;
    uint64_t v188 = 0;
    int v189 = 0;
    __int16 v190 = 257;
    kdebug_trace();
    kdebug_trace();
    if (qword_26A5020C0 != -1) {
      dispatch_once(&qword_26A5020C0, &unk_2708F1238);
    }
    float v104 = (id)qword_26A5020B8;
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v257[0]) = 0;
      _os_log_debug_impl(&dword_25B3F3000, v104, OS_LOG_TYPE_DEBUG, "No candidate line", (uint8_t *)v257, 2u);
    }

    *(unsigned char *)uint64_t v131 = 0;
    *(void *)(v131 + 8) = &unk_2708F2218;
    *(_OWORD *)(v131 + 16) = 0u;
    *(_OWORD *)(v131 + 32) = 0u;
    *(_OWORD *)(v131 + 48) = 0u;
    *(_OWORD *)(v131 + 64) = 0u;
    *(_OWORD *)(v131 + 80) = 0u;
    *(_OWORD *)(v131 + 96) = 0u;
    *(void *)(v131 + 128) = 0;
    *(void *)(v131 + 136) = 0;
    *(_WORD *)(v131 + 144) = 257;
    *(void *)(v131 + 160) = &unk_2708F2218;
    *(_OWORD *)(v131 + 168) = 0u;
    *(_OWORD *)(v131 + 184) = 0u;
    *(_OWORD *)(v131 + 200) = 0u;
    *(_OWORD *)(v131 + 216) = 0u;
    *(_OWORD *)(v131 + 232) = 0u;
    *(_OWORD *)(v131 + 248) = 0u;
    *(void *)(v131 + 280) = 0;
    *(void *)(v131 + 288) = 0;
    *(_WORD *)(v131 + 296) = 257;
    *(void *)(v131 + 312) = &unk_2708F21F8;
    *(_OWORD *)(v131 + 320) = 0u;
    *(_OWORD *)(v131 + 336) = 0u;
    *(_OWORD *)(v131 + 352) = 0u;
    *(_OWORD *)(v131 + 368) = 0u;
    *(_OWORD *)(v131 + 384) = 0u;
    *(_OWORD *)(v131 + 400) = 0u;
    *(void *)(v131 + 432) = 0;
    *(void *)(v131 + 440) = 0;
    *(_WORD *)(v131 + 448) = 257;
    *(void *)(v131 + 464) = &unk_2708F21F8;
    *(_OWORD *)(v131 + 472) = 0u;
    *(_OWORD *)(v131 + 488) = 0u;
    *(_OWORD *)(v131 + 504) = 0u;
    *(_OWORD *)(v131 + 520) = 0u;
    *(_OWORD *)(v131 + 536) = 0u;
    *(_OWORD *)(v131 + 552) = 0u;
    *(void *)(v131 + 592) = 0;
    *(void *)(v131 + 584) = 0;
    *(_WORD *)(v131 + 600) = 257;
    *(void *)(v131 + 616) = &unk_2708F27E8;
    *(_OWORD *)(v131 + 688) = 0u;
    *(_OWORD *)(v131 + 704) = 0u;
    *(_OWORD *)(v131 + 656) = 0u;
    *(_OWORD *)(v131 + 672) = 0u;
    *(_OWORD *)(v131 + 624) = 0u;
    *(_OWORD *)(v131 + 640) = 0u;
    *(void *)(v131 + 744) = 0;
    *(void *)(v131 + 736) = 0;
    *(_WORD *)(v131 + 752) = 257;
  }
  uint64_t v181 = &unk_2708F27E8;
  if (v189) {
    sub_25B404120(v189);
  }
  int v171 = &unk_2708F21F8;
  if (v179) {
    sub_25B404120(v179);
  }
  long long v159 = &unk_2708F2218;
  if (v168) {
    sub_25B404120(v168);
  }
  if (v191)
  {
    int64_t v192 = v191;
    operator delete(v191);
  }
  uint64_t v194 = &unk_2708F1EB8;
  if (v198) {
    sub_25B404120(v198);
  }
  float v200 = &unk_2708F1EB8;
  if (v202) {
    sub_25B404120(v202);
  }
  v204[0] = &unk_2708F1EB8;
  if (v205) {
    sub_25B404120(v205);
  }
}

void sub_25B52A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x1900]);
  sub_25B3F9500((uint64_t)&STACK[0xE20]);
  if (STACK[0x6C0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x6C0]);
  }
  STACK[0x1390] = (unint64_t)&unk_2708F27E8;
  if (STACK[0x1410]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1410]);
  }
  STACK[0xC80] = (unint64_t)&unk_2708F27E8;
  if (STACK[0xD00]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xD00]);
  }
  STACK[0xD88] = v69;
  if (STACK[0xE08]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xE08]);
  }
  if (a44) {
    sub_25B404120(a44);
  }
  STACK[0xBE8] = (unint64_t)&unk_2708F2218;
  if (STACK[0xC68]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xC68]);
  }
  STACK[0x900] = (unint64_t)&a47;
  sub_25B413C78((void ***)&STACK[0x900]);
  a50 = a19;
  if (a66) {
    sub_25B404120(a66);
  }
  sub_25B52B890(&a69);
  uint64_t v71 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v71;
    operator delete(v71);
  }
  STACK[0x3C8] = (unint64_t)&unk_2708F1EB8;
  if (STACK[0x448]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x448]);
  }
  STACK[0x460] = (unint64_t)&unk_2708F1EB8;
  if (STACK[0x4E0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4E0]);
  }
  STACK[0x4F8] = (unint64_t)&unk_2708F1EB8;
  if (STACK[0x578]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x578]);
  }
  _Unwind_Resume(a1);
}

_OWORD *sub_25B52B30C(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)sub_25B4953D4((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    std::locale v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = 0;
    sub_25B3FA740(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *sub_25B52B39C(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)sub_25B4953D4((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0xD0uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    std::locale v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 7) = &unk_2708F2218;
    _OWORD v6[8] = 0u;
    v6[9] = 0u;
    v6[6] = 0u;
    v6[7] = 0u;
    void v6[4] = 0u;
    v6[5] = 0u;
    *((void *)v6 + 22) = 0;
    *((void *)v6 + 23) = 0;
    *((_WORD *)v6 + 96) = 257;
    char v12 = 1;
    sub_25B3FA740(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    sub_25B523E50((uint64_t)v11);
  }
  return v6;
}

uint64_t sub_25B52B488(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_25B413D74(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  uint64_t v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_25B3FCA58(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v13 += 3;
  sub_25B43EA54(a1, v12);
  uint64_t v10 = a1[1];
  sub_25B43EAC4((uint64_t)v12);
  return v10;
}

void sub_25B52B588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B43EAC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B52B59C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = 0;
  uint64_t result = sub_25B45A630(a1, &v17);
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v5 = sub_25B406B20(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v5, (uint64_t)" ", 1);
    uint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    unint64_t v7 = (void *)std::ostream::operator<<();
    sub_25B406B20(v7, (uint64_t)" ", 1);
    sub_25B406B20(v7, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet(v22, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v22);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v9 = std::locale::use_facet(v22, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(v22);
    std::ostream::put();
    uint64_t result = std::ostream::flush();
  }
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)&v22[0].__locale_ = 0u;
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(_DWORD **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v10; --v10)
      *v11++ = 0;
  }
  else if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t result = *(void *)(a1 + 56 + v13 * 8);
        v14 += result * (uint64_t)v22[v13++].__locale_;
      }
      while (v13 != 3);
      uint64_t v15 = 0;
      v11[v14] = 0;
      do
      {
        uint64_t v16 = *(void *)((char *)v23 + v15) + 1;
        *(void *)((char *)v23 + v15) = v16;
        if (v16 != *(void *)(a1 + 24 + v15)) {
          break;
        }
        *(void *)((char *)v23 + v15) = 0;
        v15 -= 8;
      }
      while (v15 != -24);
    }
  }
  return result;
}

void sub_25B52B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
}

void *sub_25B52B890(void *a1)
{
  a1[39] = &unk_2708F27E8;
  unint64_t v2 = (std::__shared_weak_count *)a1[55];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[20] = &unk_2708F21F8;
  unint64_t v3 = (std::__shared_weak_count *)a1[36];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[1] = &unk_2708F2218;
  uint64_t v4 = (std::__shared_weak_count *)a1[17];
  if (v4) {
    sub_25B404120(v4);
  }
  return a1;
}

void sub_25B52B938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[7] = *MEMORY[0x263EF8340];
  uint64_t v5 = v9;
  for (uint64_t i = 8; i != 32; i += 8)
  {
    uint64_t v7 = *(void *)(a2 + i);
    *(v5 - 2) = 0;
    *(v5 - 1) = v7;
    void *v5 = 1;
    v5 += 3;
  }
  sub_25B436AEC(a2 + 8, (uint64_t)v8, 1u, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8));
  sub_25B459028(a1, a2, (uint64_t)v8);
}

void *sub_25B52B9E4(void *a1)
{
  a1[68] = &unk_2708F21F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[84];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[36] = &unk_2708F2218;
  unint64_t v3 = (std::__shared_weak_count *)a1[52];
  if (v3) {
    sub_25B404120(v3);
  }
  sub_25B3F9500((uint64_t)(a1 + 6));
  return a1;
}

void *sub_25B52BA68(void *a1)
{
  a1[55] = &unk_2708F21F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[71];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[36] = &unk_2708F2218;
  unint64_t v3 = (std::__shared_weak_count *)a1[52];
  if (v3) {
    sub_25B404120(v3);
  }
  sub_25B3F9500((uint64_t)(a1 + 6));
  return a1;
}

void sub_25B52BAEC(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1900;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B457F00((uint64_t)v5, v4);
}

void sub_25B52C628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale((std::locale *)(v16 - 128));
  sub_25B3F9500((uint64_t)&a15);
  uint64_t v18 = *(std::__shared_weak_count **)(v15 + 128);
  if (v18) {
    sub_25B404120(v18);
  }
  _Unwind_Resume(a1);
}

void sub_25B52C688(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1900;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[17];
  long long v2 = a2[18];
  *(_OWORD *)(a1 + 8) = a2[16];
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B457F00((uint64_t)&v5, v4);
}

void sub_25B52D124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::locale a35)
{
  std::locale::~locale((std::locale *)(v36 - 144));
  sub_25B3F9500((uint64_t)&a35);
  if (a26) {
    sub_25B404120(a26);
  }
  unint64_t v38 = *(std::__shared_weak_count **)(v35 + 128);
  if (v38) {
    sub_25B404120(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B52D1B8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v4 = (long long *)(result + 8);
  if (*(void *)(result + 8) == *(void *)(a2 + 256))
  {
    uint64_t v5 = *(void *)(result + 104);
    uint64_t v6 = *(unint64_t **)(result + 144);
    if (*(unsigned char *)(a2 + 184))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v5)
        {
          uint64_t v7 = *(uint64_t **)(a2 + 192);
          uint64_t v8 = *(int *)(a2 + 248);
          double v9 = *(double *)(a2 + 304);
          double v10 = *(double *)(a2 + 312);
          do
          {
            uint64_t v11 = *v7++;
            unint64_t v12 = v11 + v8;
            if (v11 + v8 >= (unint64_t)v10) {
              unint64_t v12 = (unint64_t)v10;
            }
            if (v12 <= (unint64_t)v9) {
              unint64_t v12 = (unint64_t)v9;
            }
            *v6++ = v12;
            --v5;
          }
          while (v5);
        }
      }
      else if (v5)
      {
        uint64_t v68 = 0;
        unint64_t v69 = *(uint64_t **)(a2 + 192);
        uint64_t v70 = *(int *)(a2 + 248);
        double v71 = *(double *)(a2 + 304);
        double v72 = *(double *)(a2 + 312);
        do
        {
          uint64_t v73 = *v69++;
          unint64_t v74 = v73 + v70;
          if (v73 + v70 >= (unint64_t)v72) {
            unint64_t v74 = (unint64_t)v72;
          }
          if (v74 <= (unint64_t)v71) {
            unint64_t v74 = (unint64_t)v71;
          }
          v6[*(void *)(result + 56) * v68] = v74;
          if (v68 + 1 == *(void *)(result + 8)) {
            uint64_t v68 = 0;
          }
          else {
            ++v68;
          }
          --v5;
        }
        while (v5);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v5)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a2 + 192);
        uint64_t v39 = *(int *)(a2 + 248);
        double v40 = *(double *)(a2 + 304);
        double v41 = *(double *)(a2 + 312);
        do
        {
          unint64_t v42 = *(void *)(v38 + 8 * *(void *)(a2 + 104) * v37) + v39;
          if (v42 >= (unint64_t)v41) {
            unint64_t v42 = (unint64_t)v41;
          }
          if (v42 <= (unint64_t)v40) {
            unint64_t v42 = (unint64_t)v40;
          }
          *v6++ = v42;
          if (v37 + 1 == *(void *)v4) {
            uint64_t v37 = 0;
          }
          else {
            ++v37;
          }
          --v5;
        }
        while (v5);
      }
    }
    else if (v5)
    {
      uint64_t v89 = 0;
      uint64_t v90 = *(void *)(a2 + 192);
      uint64_t v91 = *(int *)(a2 + 248);
      double v92 = *(double *)(a2 + 304);
      double v93 = *(double *)(a2 + 312);
      do
      {
        unint64_t v94 = *(void *)(v90 + 8 * *(void *)(a2 + 104) * v89) + v91;
        if (v94 >= (unint64_t)v93) {
          unint64_t v94 = (unint64_t)v93;
        }
        if (v94 <= (unint64_t)v92) {
          unint64_t v94 = (unint64_t)v92;
        }
        v6[*(void *)(result + 56) * v89] = v94;
        if (v89 + 1 == *(void *)(result + 8)) {
          uint64_t v89 = 0;
        }
        else {
          ++v89;
        }
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v13 = (long long *)(a2 + 256);
    if (*(unsigned char *)(a2 + 184))
    {
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      long long v121 = 0uLL;
      long long v122 = 0uLL;
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v117 = 0uLL;
      long long v118 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      sub_25B439F30((uint64_t)&v114, v4, v13, &v111);
      uint64_t v14 = (std::locale::__imp *)v111;
      if ((void)v111 != *(void *)v4)
      {
        uint64_t v15 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v16 = sub_25B406B20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v16, (uint64_t)" ", 1);
        long long v17 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v18 = (void *)std::ostream::operator<<();
        sub_25B406B20(v18, (uint64_t)" ", 1);
        sub_25B406B20(v18, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v19 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        uint64_t v20 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v130 = 0u;
      long long v131 = 0u;
      *(_OWORD *)&v129[0].__locale_ = 0u;
      uint64_t v21 = *(void *)(v3 + 104);
      uint64_t v22 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v21)
        {
          int v23 = 0;
          uint64_t v24 = 0;
          double v25 = *(double *)(a2 + 304);
          double v26 = *(double *)(a2 + 312);
          id v28 = (uint64_t *)*((void *)&v115 + 1);
          char v27 = (uint64_t *)v116;
          unint64_t v29 = (uint64_t)(v116 - *((void *)&v115 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = *(void *)(a2 + 192);
          uint64_t v31 = *(int *)(a2 + 248);
          do
          {
            v129[0].__locale_ = v23;
            locale = v23;
            if (v27 != v28)
            {
              float32x4_t v33 = v28;
              unint64_t v34 = v29;
              do
              {
                uint64_t v35 = *v33++;
                v129[v35].__locale_ = 0;
                --v34;
              }
              while (v34);
              locale = v129[0].__locale_;
            }
            unint64_t v36 = *(void *)(v30 + 8 * v126 * (void)locale) + v31;
            if (v36 >= (unint64_t)v26) {
              unint64_t v36 = (unint64_t)v26;
            }
            if (v36 <= (unint64_t)v25) {
              unint64_t v36 = (unint64_t)v25;
            }
            *(void *)(v22 + 8 * v24) = v36;
            if ((std::locale::__imp *)((char *)v23 + 1) == v14) {
              int v23 = 0;
            }
            else {
              int v23 = (std::locale::__imp *)((char *)v23 + 1);
            }
            ++v24;
          }
          while (v24 != v21);
        }
      }
      else if (v21)
      {
        __n128 v75 = 0;
        uint64_t v76 = 0;
        double v77 = *(double *)(a2 + 304);
        double v78 = *(double *)(a2 + 312);
        uint64_t v80 = (uint64_t *)*((void *)&v115 + 1);
        uint64_t v79 = (uint64_t *)v116;
        unint64_t v81 = (uint64_t)(v116 - *((void *)&v115 + 1)) >> 3;
        if (v81 <= 1) {
          unint64_t v81 = 1;
        }
        uint64_t v82 = *(void *)(a2 + 192);
        uint64_t v83 = *(int *)(a2 + 248);
        do
        {
          v129[0].__locale_ = v75;
          __int32 v84 = v75;
          if (v79 != v80)
          {
            __int32 v85 = v80;
            unint64_t v86 = v81;
            do
            {
              uint64_t v87 = *v85++;
              v129[v87].__locale_ = 0;
              --v86;
            }
            while (v86);
            __int32 v84 = v129[0].__locale_;
          }
          unint64_t v88 = *(void *)(v82 + 8 * v126 * (void)v84) + v83;
          if (v88 >= (unint64_t)v78) {
            unint64_t v88 = (unint64_t)v78;
          }
          if (v88 <= (unint64_t)v77) {
            unint64_t v88 = (unint64_t)v77;
          }
          *(void *)(v22 + 8 * *(void *)(v3 + 56) * (void)v75) = v88;
          if ((std::locale::__imp *)((char *)v75 + 1) == v14) {
            __n128 v75 = 0;
          }
          else {
            __n128 v75 = (std::locale::__imp *)((char *)v75 + 1);
          }
          ++v76;
        }
        while (v76 != v21);
      }
    }
    else
    {
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      long long v121 = 0uLL;
      long long v122 = 0uLL;
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v117 = 0uLL;
      long long v118 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v113 = 0uLL;
      long long v114 = 0uLL;
      long long v111 = 0uLL;
      long long v112 = 0uLL;
      sub_25B439F30((uint64_t)&v114, v4, v13, &v111);
      unint64_t v43 = (std::locale::__imp *)v111;
      if ((void)v111 != *(void *)v4)
      {
        uint64_t v44 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint32x4_t v45 = sub_25B406B20(v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v45, (uint64_t)" ", 1);
        unint64_t v46 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v47 = (void *)std::ostream::operator<<();
        sub_25B406B20(v47, (uint64_t)" ", 1);
        sub_25B406B20(v47, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(*v47 - 24)));
        double v48 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
        float32x4_t v49 = std::locale::use_facet(v129, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v130 = 0u;
      long long v131 = 0u;
      *(_OWORD *)&v129[0].__locale_ = 0u;
      uint64_t v50 = *(void *)(v3 + 104);
      uint64_t v51 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v50)
        {
          float32x4_t v52 = 0;
          uint64_t v53 = 0;
          double v54 = *(double *)(a2 + 304);
          double v55 = *(double *)(a2 + 312);
          float v57 = (uint64_t *)*((void *)&v115 + 1);
          float v56 = (uint64_t *)v116;
          unint64_t v58 = (uint64_t)(v116 - *((void *)&v115 + 1)) >> 3;
          if (v58 <= 1) {
            unint64_t v58 = 1;
          }
          int v59 = *(unsigned __int8 *)(a2 + 184);
          uint64_t v60 = *(void *)(a2 + 192);
          uint64_t v61 = *(int *)(a2 + 248);
          do
          {
            v129[0].__locale_ = v52;
            long long v62 = v52;
            if (v56 != v57)
            {
              uint64_t v63 = v57;
              unint64_t v64 = v58;
              do
              {
                uint64_t v65 = *v63++;
                v129[v65].__locale_ = 0;
                --v64;
              }
              while (v64);
              long long v62 = v129[0].__locale_;
            }
            int v66 = (long long *)(a2 + 104);
            if (v59) {
              int v66 = &v126;
            }
            unint64_t v67 = *(void *)(v60 + 8 * *(void *)v66 * (void)v62) + v61;
            if (v67 >= (unint64_t)v55) {
              unint64_t v67 = (unint64_t)v55;
            }
            if (v67 <= (unint64_t)v54) {
              unint64_t v67 = (unint64_t)v54;
            }
            *(void *)(v51 + 8 * v53) = v67;
            if ((std::locale::__imp *)((char *)v52 + 1) == v43) {
              float32x4_t v52 = 0;
            }
            else {
              float32x4_t v52 = (std::locale::__imp *)((char *)v52 + 1);
            }
            ++v53;
          }
          while (v53 != v50);
        }
      }
      else if (v50)
      {
        char v95 = 0;
        uint64_t v96 = 0;
        double v97 = *(double *)(a2 + 304);
        double v98 = *(double *)(a2 + 312);
        BOOL v100 = (uint64_t *)*((void *)&v115 + 1);
        float v99 = (uint64_t *)v116;
        unint64_t v101 = (uint64_t)(v116 - *((void *)&v115 + 1)) >> 3;
        if (v101 <= 1) {
          unint64_t v101 = 1;
        }
        int v102 = *(unsigned __int8 *)(a2 + 184);
        uint64_t v103 = *(void *)(a2 + 192);
        uint64_t v104 = *(int *)(a2 + 248);
        do
        {
          v129[0].__locale_ = v95;
          uint64_t v105 = v95;
          if (v99 != v100)
          {
            long long v106 = v100;
            unint64_t v107 = v101;
            do
            {
              uint64_t v108 = *v106++;
              v129[v108].__locale_ = 0;
              --v107;
            }
            while (v107);
            uint64_t v105 = v129[0].__locale_;
          }
          float v109 = (long long *)(a2 + 104);
          if (v102) {
            float v109 = &v126;
          }
          unint64_t v110 = *(void *)(v103 + 8 * *(void *)v109 * (void)v105) + v104;
          if (v110 >= (unint64_t)v98) {
            unint64_t v110 = (unint64_t)v98;
          }
          if (v110 <= (unint64_t)v97) {
            unint64_t v110 = (unint64_t)v97;
          }
          *(void *)(v51 + 8 * *(void *)(v3 + 56) * (void)v95) = v110;
          if ((std::locale::__imp *)((char *)v95 + 1) == v43) {
            char v95 = 0;
          }
          else {
            char v95 = (std::locale::__imp *)((char *)v95 + 1);
          }
          ++v96;
        }
        while (v96 != v50);
      }
    }
    return sub_25B3F9500((uint64_t)&v114);
  }
  return result;
}

void sub_25B52DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B52DA88(uint64_t a1, uint64_t a2)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)a2
    && *(void *)(a1 + 16) == *(void *)(a2 + 8)
    && *(void *)(a1 + 24) == *(void *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 520) && *(unsigned char *)(a2 + 672) && *(unsigned char *)(a2 + 1112) && *(unsigned char *)(a2 + 1368))
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      uint64_t v5 = *(void *)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v5)
        {
          uint64_t v7 = 0;
          uint64_t v8 = a1 + 24;
          do
          {
            float v9 = sub_25B52E7C4(a2 + 96, (uint64_t)&v89);
            float v10 = sub_25B52E850(a2 + 688, (uint64_t)&v89);
            uint64_t v11 = 0;
            *(float *)(v6 + 4 * v7) = (float)(v9 + v10) - *(float *)(a2 + 1432);
            do
            {
              uint64_t v12 = *(void *)((char *)&v90 + v11) + 1;
              *(void *)((char *)&v90 + v11) = v12;
              if (v12 != *(void *)(v8 + v11)) {
                break;
              }
              *(void *)((char *)&v90 + v11) = 0;
              v11 -= 8;
            }
            while (v11 != -24);
            ++v7;
          }
          while (v7 != v5);
        }
      }
      else if (v5)
      {
        uint64_t v60 = 0;
        uint64_t v61 = a1 + 56;
        uint64_t v78 = a2 + 96;
        uint64_t v62 = a1 + 24;
        do
        {
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          do
          {
            v64 += *(void *)(v61 + v63) * *(void *)((char *)&v89 + v63);
            v63 += 8;
          }
          while (v63 != 24);
          float v65 = sub_25B52E7C4(v78, (uint64_t)&v89);
          float v66 = sub_25B52E850(a2 + 688, (uint64_t)&v89);
          uint64_t v67 = 0;
          *(float *)(v6 + 4 * v64) = (float)(v65 + v66) - *(float *)(a2 + 1432);
          do
          {
            uint64_t v68 = *(void *)((char *)&v90 + v67) + 1;
            *(void *)((char *)&v90 + v67) = v68;
            if (v68 != *(void *)(v62 + v67)) {
              break;
            }
            *(void *)((char *)&v90 + v67) = 0;
            v67 -= 8;
          }
          while (v67 != -24);
          ++v60;
        }
        while (v60 != v5);
      }
    }
    else
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      uint64_t v52 = *(void *)(a1 + 104);
      uint64_t v53 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v52)
        {
          uint64_t v54 = 0;
          uint64_t v55 = a1 + 24;
          do
          {
            float v56 = sub_25B52E520(a2 + 96, (uint64_t)&v89);
            float v57 = sub_25B52E5FC(a2 + 688, (uint64_t)&v89);
            uint64_t v58 = 0;
            *(float *)(v53 + 4 * v54) = (float)(v56 + v57) - *(float *)(a2 + 1432);
            do
            {
              uint64_t v59 = *(void *)((char *)&v90 + v58) + 1;
              *(void *)((char *)&v90 + v58) = v59;
              if (v59 != *(void *)(v55 + v58)) {
                break;
              }
              *(void *)((char *)&v90 + v58) = 0;
              v58 -= 8;
            }
            while (v58 != -24);
            ++v54;
          }
          while (v54 != v52);
        }
      }
      else if (v52)
      {
        uint64_t v69 = 0;
        uint64_t v70 = a1 + 56;
        uint64_t v79 = a2 + 96;
        uint64_t v71 = a1 + 24;
        do
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          do
          {
            v73 += *(void *)(v70 + v72) * *(void *)((char *)&v89 + v72);
            v72 += 8;
          }
          while (v72 != 24);
          float v74 = sub_25B52E520(v79, (uint64_t)&v89);
          float v75 = sub_25B52E5FC(a2 + 688, (uint64_t)&v89);
          uint64_t v76 = 0;
          *(float *)(v53 + 4 * v73) = (float)(v74 + v75) - *(float *)(a2 + 1432);
          do
          {
            uint64_t v77 = *(void *)((char *)&v90 + v76) + 1;
            *(void *)((char *)&v90 + v76) = v77;
            if (v77 != *(void *)(v71 + v76)) {
              break;
            }
            *(void *)((char *)&v90 + v76) = 0;
            v76 -= 8;
          }
          while (v76 != -24);
          ++v69;
        }
        while (v69 != v52);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 520)) {
      BOOL v13 = *(unsigned char *)(a2 + 672) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13 || *(unsigned char *)(a2 + 1112) == 0 || *(unsigned char *)(a2 + 1368) == 0)
    {
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v89 = 0uLL;
      long long v82 = 0uLL;
      memset(v81, 0, sizeof(v81));
      sub_25B43A3F0((uint64_t)&v89, v4, (_OWORD *)a2, (uint64_t)v81);
      if (*(void *)&v81[0] != *(void *)v4 || *(_OWORD *)((char *)v81 + 8) != *(_OWORD *)(a1 + 16))
      {
        uint64_t v16 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        long long v17 = sub_25B406B20(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        uint64_t v18 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v19 = (void *)std::ostream::operator<<();
        sub_25B406B20(v19, (uint64_t)" ", 1);
        sub_25B406B20(v19, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        uint64_t v20 = std::locale::use_facet(v86, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v86);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v21 = std::locale::use_facet(v86, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v86);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v88 = 0u;
      *(_OWORD *)&v86[0].__locale_ = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      uint64_t v22 = *(void *)(a1 + 104);
      uint64_t v23 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v22)
        {
          for (uint64_t i = 0; i != v22; ++i)
          {
            uint64_t v80 = 0;
            sub_25B43A810((uint64_t)&v89, (uint64_t)v86, &v80, (uint64_t)&v83);
            float v25 = sub_25B52E520(a2 + 96, (uint64_t)&v83);
            *(float *)(v23 + 4 * i) = (float)(v25 + sub_25B52E5FC(a2 + 688, (uint64_t)&v83)) - *(float *)(a2 + 1432);
            for (uint64_t j = 2; j != -1; --j)
            {
              char v27 = (std::locale::__imp *)((char *)v86[j].__locale_ + 1);
              v86[j].__locale_ = v27;
              if (v27 != *(std::locale::__imp **)((char *)v81 + j * 8)) {
                break;
              }
              v86[j].__locale_ = 0;
            }
          }
        }
      }
      else if (v22)
      {
        for (uint64_t k = 0; k != v22; ++k)
        {
          uint64_t v80 = 0;
          sub_25B43A810((uint64_t)&v89, (uint64_t)v86, &v80, (uint64_t)&v83);
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          do
          {
            v42 += *(void *)(a1 + 56 + v41 * 8) * (uint64_t)v86[v41].__locale_;
            ++v41;
          }
          while (v41 != 3);
          float v43 = sub_25B52E520(a2 + 96, (uint64_t)&v83);
          *(float *)(v23 + 4 * v42) = (float)(v43 + sub_25B52E5FC(a2 + 688, (uint64_t)&v83)) - *(float *)(a2 + 1432);
          for (uint64_t m = 2; m != -1; --m)
          {
            uint32x4_t v45 = (std::locale::__imp *)((char *)v86[m].__locale_ + 1);
            v86[m].__locale_ = v45;
            if (v45 != *(std::locale::__imp **)((char *)v81 + m * 8)) {
              break;
            }
            v86[m].__locale_ = 0;
          }
        }
      }
    }
    else
    {
      long long v102 = 0uLL;
      long long v103 = 0uLL;
      long long v100 = 0uLL;
      long long v101 = 0uLL;
      long long v98 = 0uLL;
      long long v99 = 0uLL;
      long long v96 = 0uLL;
      long long v97 = 0uLL;
      long long v94 = 0uLL;
      long long v95 = 0uLL;
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v89 = 0uLL;
      long long v82 = 0uLL;
      memset(v81, 0, sizeof(v81));
      sub_25B43A3F0((uint64_t)&v89, v4, (_OWORD *)a2, (uint64_t)v81);
      if (*(void *)&v81[0] != *(void *)v4 || *(_OWORD *)((char *)v81 + 8) != *(_OWORD *)(a1 + 16))
      {
        id v28 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v29 = sub_25B406B20(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v29, (uint64_t)" ", 1);
        uint64_t v30 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v31 = (void *)std::ostream::operator<<();
        sub_25B406B20(v31, (uint64_t)" ", 1);
        sub_25B406B20(v31, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
        float v32 = std::locale::use_facet(v86, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
        std::locale::~locale(v86);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
        float32x4_t v33 = std::locale::use_facet(v86, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(v86);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v88 = 0u;
      *(_OWORD *)&v86[0].__locale_ = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      uint64_t v34 = *(void *)(a1 + 104);
      uint64_t v35 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v34)
        {
          for (uint64_t n = 0; n != v34; ++n)
          {
            uint64_t v80 = 0;
            sub_25B43A810((uint64_t)&v89, (uint64_t)v86, &v80, (uint64_t)&v83);
            float v37 = sub_25B52E7C4(a2 + 96, (uint64_t)&v83);
            *(float *)(v35 + 4 * n) = (float)(v37 + sub_25B52E850(a2 + 688, (uint64_t)&v83)) - *(float *)(a2 + 1432);
            for (iuint64_t i = 2; ii != -1; --ii)
            {
              uint64_t v39 = (std::locale::__imp *)((char *)v86[ii].__locale_ + 1);
              v86[ii].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)v81 + ii * 8)) {
                break;
              }
              v86[ii].__locale_ = 0;
            }
          }
        }
      }
      else if (v34)
      {
        for (juint64_t j = 0; jj != v34; ++jj)
        {
          uint64_t v80 = 0;
          sub_25B43A810((uint64_t)&v89, (uint64_t)v86, &v80, (uint64_t)&v83);
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          do
          {
            v48 += *(void *)(a1 + 56 + v47 * 8) * (uint64_t)v86[v47].__locale_;
            ++v47;
          }
          while (v47 != 3);
          float v49 = sub_25B52E7C4(a2 + 96, (uint64_t)&v83);
          *(float *)(v35 + 4 * v48) = (float)(v49 + sub_25B52E850(a2 + 688, (uint64_t)&v83)) - *(float *)(a2 + 1432);
          for (kuint64_t k = 2; kk != -1; --kk)
          {
            uint64_t v51 = (std::locale::__imp *)((char *)v86[kk].__locale_ + 1);
            v86[kk].__locale_ = v51;
            if (v51 != *(std::locale::__imp **)((char *)v81 + kk * 8)) {
              break;
            }
            v86[kk].__locale_ = 0;
          }
        }
      }
    }
    sub_25B3F9500((uint64_t)&v89);
  }
}

void sub_25B52E4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

float sub_25B52E520(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_25B52E6E4(a1 + 48, a2, &v8, (uint64_t)v10, &v7, v9);
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    do
    {
      v3 += *(void *)(a1 + 344 + v4) * *(void *)&v10[v4];
      v4 += 8;
    }
    while (v4 != 24);
  }
  if (*(unsigned char *)(a1 + 576)) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 496) * v9[0] + *(void *)(a1 + 504) * v9[1];
  }
  return *(float *)(*(void *)(a1 + 432) + 4 * v3) * *(float *)(*(void *)(a1 + 584) + 4 * v5);
}

float sub_25B52E5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_25B52E6E4(a1 + 48, a2, &v8, (uint64_t)v10, &v7, v9);
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    do
    {
      v3 += *(void *)(a1 + 344 + v4) * *(void *)&v10[v4];
      v4 += 8;
    }
    while (v4 != 24);
  }
  if (*(unsigned char *)(a1 + 680)) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 600) * v9[0] + *(void *)(a1 + 608) * v9[1];
  }
  return *(float *)(*(void *)(a1 + 432) + 4 * v3)
       * (float)(*(float *)(a1 + 536) - *(float *)(*(void *)(a1 + 688) + 4 * v5));
}

uint64_t sub_25B52E6E4(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v6 = 0;
  *a5 = 0;
  *a3 = 0;
  uint64_t v7 = *(uint64_t **)(result + 24);
  uint64_t v8 = *(void **)(result + 32);
  *a6 = *(void *)(a2 + 8);
  a6[1] = *(void *)(a2 + 16);
  float v9 = *(uint64_t **)result;
  float v10 = *(void **)(result + 8);
  do
  {
    *(void *)(a4 + v6) = *(void *)(a2 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  if (v8 != v7)
  {
    unint64_t v11 = v8 - v7;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      uint64_t v12 = *v7++;
      a6[v12] = 0;
      --v11;
    }
    while (v11);
  }
  if (v10 != v9)
  {
    unint64_t v13 = v10 - v9;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      uint64_t v14 = *v9++;
      *(void *)(a4 + 8 * v14) = 0;
      --v13;
    }
    while (v13);
  }
  uint64_t v15 = 0;
  uint64_t v16 = *a5;
  char v17 = 1;
  do
  {
    char v18 = v17;
    v16 += *(void *)(result + 192 + 8 * v15) * a6[v15];
    *a5 = v16;
    uint64_t v15 = 1;
    char v17 = 0;
  }
  while ((v18 & 1) != 0);
  uint64_t v19 = 0;
  uint64_t v20 = *a3;
  do
  {
    v20 += *(void *)(result + 144 + v19) * *(void *)(a4 + v19);
    *a3 = v20;
    v19 += 8;
  }
  while (v19 != 24);
  return result;
}

float sub_25B52E7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_25B52E6E4(a1 + 48, a2, &v5, (uint64_t)v7, &v4, v6);
  return *(float *)(*(void *)(a1 + 432) + 4 * v5) * *(float *)(*(void *)(a1 + 584) + 4 * v4);
}

float sub_25B52E850(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_25B52E6E4(a1 + 48, a2, &v5, (uint64_t)v7, &v4, v6);
  return *(float *)(*(void *)(a1 + 432) + 4 * v5)
       * (float)(*(float *)(a1 + 536) - *(float *)(*(void *)(a1 + 688) + 4 * v4));
}

uint64_t sub_25B52E8E4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_25B46BD74((void *)(a1 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_25B46BD74((void *)(a1 + 72), *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3);
  long long v6 = a2[6];
  long long v7 = a2[7];
  long long v8 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a2[14];
  long long v13 = a2[15];
  long long v14 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v13;
  sub_25B45F1E4(a1 + 288, (uint64_t)(a2 + 18));
  sub_25B4582F4(a1 + 440, (uint64_t)a2 + 440);
  return a1;
}

void sub_25B52E9AC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B52E9C8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_25B46BD74((void *)(a1 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_25B46BD74((void *)(a1 + 72), *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3);
  long long v6 = a2[6];
  long long v7 = a2[7];
  long long v8 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a2[14];
  long long v13 = a2[15];
  long long v14 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v13;
  sub_25B45F1E4(a1 + 288, (uint64_t)(a2 + 18));
  long long v15 = *(long long *)((char *)a2 + 440);
  long long v16 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(a1 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 472) = v16;
  *(_OWORD *)(a1 + 440) = v15;
  long long v17 = *(long long *)((char *)a2 + 488);
  long long v18 = *(long long *)((char *)a2 + 504);
  long long v19 = *(long long *)((char *)a2 + 520);
  *(_DWORD *)(a1 + 536) = *((_DWORD *)a2 + 134);
  *(_OWORD *)(a1 + 504) = v18;
  *(_OWORD *)(a1 + 520) = v19;
  *(_OWORD *)(a1 + 488) = v17;
  sub_25B4582F4(a1 + 544, (uint64_t)(a2 + 34));
  return a1;
}

void sub_25B52EAC0(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B52EADC(uint64_t a1, _OWORD *a2, _OWORD *a3, void *a4)
{
  long long v8 = *a2;
  long long v9 = a2[2];
  *(_OWORD *)(a1 + 64) = a2[1];
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v8;
  long long v10 = *a3;
  long long v11 = a3[2];
  *(_OWORD *)(a1 + 112) = a3[1];
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v12 = 1;
  long long v13 = (void *)MEMORY[0x263F8C0F8];
  long long v14 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    uint64_t v17 = *((void *)a2 + v12 + 1);
    uint64_t v18 = *((void *)a3 + v12);
    if (v17 == v18)
    {
      a4[v16] = v17;
      goto LABEL_40;
    }
    if (v17 == 1)
    {
      uint64_t v20 = *(uint64_t **)(a1 + 8);
      unint64_t v19 = *(void *)(a1 + 16);
      if ((unint64_t)v20 >= v19)
      {
        float v25 = *(uint64_t **)a1;
        uint64_t v26 = ((uint64_t)v20 - *(void *)a1) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_47;
        }
        uint64_t v28 = v19 - (void)v25;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v29) {
          unint64_t v30 = v27;
        }
        if (v30)
        {
          unint64_t v30 = (unint64_t)sub_25B3FCAD4(v30);
          float v25 = *(uint64_t **)a1;
          uint64_t v20 = *(uint64_t **)(a1 + 8);
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint32x4_t v45 = (uint64_t *)(v30 + 8 * v26);
        *uint32x4_t v45 = v16;
        uint64_t v21 = v45 + 1;
        while (v20 != v25)
        {
          uint64_t v46 = *--v20;
          *--uint32x4_t v45 = v46;
        }
        *(void *)a1 = v45;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = v30 + 8 * v31;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v20 = v16;
        uint64_t v21 = v20 + 1;
      }
      *(void *)(a1 + 8) = v21;
      uint64_t v47 = *((void *)a3 + v15);
    }
    else
    {
      if (v18 != 1)
      {
        float v32 = sub_25B406B20(v13, (uint64_t)"runtime_err in ", 15);
        float32x4_t v33 = sub_25B406B20(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/broadcast_helper.hpp", 119);
        sub_25B406B20(v33, (uint64_t)" ", 1);
        uint64_t v34 = (void *)std::ostream::operator<<();
        uint64_t v35 = sub_25B406B20(v34, (uint64_t)" ", 1);
        unint64_t v36 = sub_25B406B20(v35, (uint64_t)"init_internal", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
        float v37 = std::locale::use_facet(&v54, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale(&v54);
        std::ostream::put();
        std::ostream::flush();
        sub_25B40AF28("err", "cannot broadcast");
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v38 = std::locale::use_facet(&v54, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(&v54);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_40;
      }
      uint64_t v23 = *(char **)(a1 + 32);
      unint64_t v22 = *(void *)(a1 + 40);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v39 = *(char **)(a1 + 24);
        uint64_t v40 = (v23 - v39) >> 3;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61) {
LABEL_47:
        }
          sub_25B3FBC4C();
        uint64_t v42 = v22 - (void)v39;
        if (v42 >> 2 > v41) {
          unint64_t v41 = v42 >> 2;
        }
        BOOL v29 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v29) {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          unint64_t v43 = (unint64_t)sub_25B3FCAD4(v43);
          uint64_t v39 = *(char **)(a1 + 24);
          uint64_t v23 = *(char **)(a1 + 32);
        }
        else
        {
          uint64_t v44 = 0;
        }
        uint64_t v48 = (uint64_t *)(v43 + 8 * v40);
        *uint64_t v48 = v15;
        uint64_t v24 = v48 + 1;
        while (v23 != v39)
        {
          uint64_t v49 = *((void *)v23 - 1);
          v23 -= 8;
          *--uint64_t v48 = v49;
        }
        *(void *)(a1 + 24) = v48;
        *(void *)(a1 + 32) = v24;
        *(void *)(a1 + 40) = v43 + 8 * v44;
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(void *)uint64_t v23 = v15;
        uint64_t v24 = v23 + 8;
      }
      *(void *)(a1 + 32) = v24;
      uint64_t v47 = *((void *)a2 + v16);
    }
    a4[v16] = v47;
LABEL_40:
    uint64_t v12 = v15 - 1;
  }
  while (v15);
  unint64_t v50 = 0;
  *a4 = *(void *)a2;
  uint64_t v51 = a1 + 144;
  do
  {
    *(void *)(v51 + 8 * v50) = 1;
    if (v50 <= 1)
    {
      unint64_t v52 = v50;
      uint64_t v53 = 1;
      do
      {
        v53 *= *(void *)(a1 + 56 + 8 * v52);
        *(void *)(v51 + 8 * v50) = v53;
        ++v52;
      }
      while (v52 != 2);
    }
    ++v50;
  }
  while (v50 != 3);
  *(void *)(a1 + 192) = *(void *)(a1 + 104);
  *(void *)(a1 + 200) = 1;
}

void sub_25B52EEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B52EECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v163 = *MEMORY[0x263EF8340];
  long long v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 184)) {
    BOOL v9 = *(unsigned char *)(a2 + 336) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v7 == v8)
  {
    if (v10)
    {
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      uint64_t v11 = *(void *)(a1 + 104);
      uint64_t v12 = *(float **)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v11)
        {
          long long v13 = *(float **)(a2 + 192);
          long long v14 = *(float **)(a2 + 344);
          do
          {
            float v15 = *v13++;
            float v16 = v15;
            float v17 = *v14++;
            float v18 = v17;
            if (v16 < v17) {
              float v16 = v18;
            }
            *v12++ = v16;
            --v11;
          }
          while (v11);
        }
      }
      else if (v11)
      {
        uint64_t v79 = 0;
        uint64_t v80 = *(void *)(a1 + 56);
        uint64_t v81 = *(void *)(a1 + 64);
        uint64_t v82 = *(void *)(a2 + 192);
        uint64_t v83 = *(void *)(a2 + 344);
        do
        {
          uint64_t v84 = 0;
          float v85 = *(float *)(v82 + 4 * v79);
          if (v85 < *(float *)(v83 + 4 * v79)) {
            float v85 = *(float *)(v83 + 4 * v79);
          }
          v12[v80 * (void)v148 + v81 * *((void *)&v148 + 1)] = v85;
          do
          {
            uint64_t v86 = *(void *)((char *)&v148 + v84 + 8) + 1;
            *(void *)((char *)&v148 + v84 + 8) = v86;
            if (v86 != *(void *)(a1 + 16 + v84)) {
              break;
            }
            *(void *)((char *)&v148 + v84 + 8) = 0;
            v84 -= 8;
          }
          while (v84 != -16);
          ++v79;
        }
        while (v79 != v11);
      }
    }
    else
    {
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      uint64_t v47 = *(void *)(a1 + 104);
      uint64_t v48 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v47)
        {
          uint64_t v49 = 0;
          uint64_t v50 = a1 + 16;
          do
          {
            float v51 = sub_25B52F91C(a2, v49, v148, *((uint64_t *)&v148 + 1));
            uint64_t v52 = 0;
            *(float *)(v48 + 4 * v49) = v51;
            do
            {
              uint64_t v53 = *(void *)((char *)&v148 + v52 + 8) + 1;
              *(void *)((char *)&v148 + v52 + 8) = v53;
              if (v53 != *(void *)(v50 + v52)) {
                break;
              }
              *(void *)((char *)&v148 + v52 + 8) = 0;
              v52 -= 8;
            }
            while (v52 != -16);
            ++v49;
          }
          while (v49 != v47);
        }
      }
      else if (v47)
      {
        uint64_t v87 = 0;
        uint64_t v88 = *(void *)(a1 + 56);
        uint64_t v89 = *(void *)(a1 + 64);
        uint64_t v90 = a1 + 16;
        do
        {
          uint64_t v91 = v88 * v148 + v89 * *((void *)&v148 + 1);
          float v92 = sub_25B52F91C(a2, v87, v148, *((uint64_t *)&v148 + 1));
          uint64_t v93 = 0;
          *(float *)(v48 + 4 * v91) = v92;
          do
          {
            uint64_t v94 = *(void *)((char *)&v148 + v93 + 8) + 1;
            *(void *)((char *)&v148 + v93 + 8) = v94;
            if (v94 != *(void *)(v90 + v93)) {
              break;
            }
            *(void *)((char *)&v148 + v93 + 8) = 0;
            v93 -= 8;
          }
          while (v93 != -16);
          ++v87;
        }
        while (v87 != v47);
      }
    }
  }
  else
  {
    if (v10)
    {
      long long v161 = 0uLL;
      long long v162 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v157 = 0uLL;
      long long v158 = 0uLL;
      long long v155 = 0uLL;
      long long v156 = 0uLL;
      long long v153 = 0uLL;
      long long v154 = 0uLL;
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v139 = 0uLL;
      sub_25B40AB84((uint64_t)&v148, v5, (_OWORD *)a2, (uint64_t)&v139);
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        uint64_t v21 = *((void *)&v139 + v19);
        uint64_t v22 = *((void *)v5 + v19);
        if ((v20 & 1) == 0) {
          break;
        }
        char v20 = 0;
        uint64_t v19 = 1;
      }
      while (v21 == v22);
      if (v21 != v22)
      {
        uint64_t v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        float v25 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        unint64_t v27 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v28 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      *(_OWORD *)&v145[0].__locale_ = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      uint64_t v29 = *(void *)(a1 + 104);
      uint64_t v30 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v29)
        {
          uint64_t v31 = 0;
          float32x4_t v33 = (uint64_t *)*((void *)&v149 + 1);
          float v32 = (uint64_t *)v150;
          unint64_t v34 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          uint64_t v35 = *(void *)(a2 + 192);
          uint64_t v36 = *(void *)(a2 + 344);
          do
          {
            long long v142 = *(_OWORD *)&v145[0].__locale_;
            if (v32 != v33)
            {
              float v37 = v33;
              unint64_t v38 = v34;
              do
              {
                uint64_t v39 = *v37++;
                *((void *)&v142 + v39) = 0;
                --v38;
              }
              while (v38);
            }
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            char v42 = 1;
            do
            {
              char v43 = v42;
              v41 += *((void *)&v160 + v40) * *((void *)&v142 + v40);
              uint64_t v40 = 1;
              char v42 = 0;
            }
            while ((v43 & 1) != 0);
            float v44 = *(float *)(v35 + 4 * v41);
            if (v44 < *(float *)(v36 + 4 * v41)) {
              float v44 = *(float *)(v36 + 4 * v41);
            }
            *(float *)(v30 + 4 * v31) = v44;
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v46 = (std::locale::__imp *)((char *)v145[i].__locale_ + 1);
              v145[i].__locale_ = v46;
              if (v46 != *(std::locale::__imp **)((char *)&v139 + i * 8)) {
                break;
              }
              v145[i].__locale_ = 0;
            }
            ++v31;
          }
          while (v31 != v29);
        }
      }
      else if (v29)
      {
        uint64_t v95 = 0;
        long long v97 = (uint64_t *)*((void *)&v149 + 1);
        long long v96 = (uint64_t *)v150;
        unint64_t v98 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
        if (v98 <= 1) {
          unint64_t v98 = 1;
        }
        uint64_t v99 = *(void *)(a1 + 56);
        uint64_t v100 = *(void *)(a1 + 64);
        uint64_t v101 = *(void *)(a2 + 192);
        uint64_t v102 = *(void *)(a2 + 344);
        do
        {
          locale = v145[0].__locale_;
          long long v103 = v145[1].__locale_;
          long long v142 = *(_OWORD *)&v145[0].__locale_;
          if (v96 != v97)
          {
            uint64_t v105 = v97;
            unint64_t v106 = v98;
            do
            {
              uint64_t v107 = *v105++;
              *((void *)&v142 + v107) = 0;
              --v106;
            }
            while (v106);
          }
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          char v110 = 1;
          do
          {
            char v111 = v110;
            v109 += *((void *)&v160 + v108) * *((void *)&v142 + v108);
            uint64_t v108 = 1;
            char v110 = 0;
          }
          while ((v111 & 1) != 0);
          float v112 = *(float *)(v101 + 4 * v109);
          uint64_t v113 = (void)locale * v99 + (void)v103 * v100;
          if (v112 < *(float *)(v102 + 4 * v109)) {
            float v112 = *(float *)(v102 + 4 * v109);
          }
          *(float *)(v30 + 4 * v113) = v112;
          for (uint64_t j = 1; j != -1; --j)
          {
            long long v115 = (std::locale::__imp *)((char *)v145[j].__locale_ + 1);
            v145[j].__locale_ = v115;
            if (v115 != *(std::locale::__imp **)((char *)&v139 + j * 8)) {
              break;
            }
            v145[j].__locale_ = 0;
          }
          ++v95;
        }
        while (v95 != v29);
      }
    }
    else
    {
      long long v161 = 0uLL;
      long long v162 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v157 = 0uLL;
      long long v158 = 0uLL;
      long long v155 = 0uLL;
      long long v156 = 0uLL;
      long long v153 = 0uLL;
      long long v154 = 0uLL;
      long long v151 = 0uLL;
      long long v152 = 0uLL;
      long long v149 = 0uLL;
      long long v150 = 0uLL;
      long long v148 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v139 = 0uLL;
      sub_25B40AB84((uint64_t)&v148, v5, (_OWORD *)a2, (uint64_t)&v139);
      uint64_t v54 = 0;
      char v55 = 1;
      do
      {
        uint64_t v56 = *((void *)&v139 + v54);
        uint64_t v57 = *((void *)v5 + v54);
        if ((v55 & 1) == 0) {
          break;
        }
        char v55 = 0;
        uint64_t v54 = 1;
      }
      while (v56 == v57);
      if (v56 != v57)
      {
        uint64_t v58 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v59 = sub_25B406B20(v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v59, (uint64_t)" ", 1);
        uint64_t v60 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v61 = (void *)std::ostream::operator<<();
        sub_25B406B20(v61, (uint64_t)" ", 1);
        sub_25B406B20(v61, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
        uint64_t v62 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
        uint64_t v63 = std::locale::use_facet(v145, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
        std::locale::~locale(v145);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      *(_OWORD *)&v145[0].__locale_ = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      uint64_t v64 = *(void *)(a1 + 104);
      uint64_t v65 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v64)
        {
          uint64_t v66 = 0;
          uint64_t v68 = (uint64_t *)*((void *)&v149 + 1);
          uint64_t v67 = (uint64_t *)v150;
          unint64_t v69 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
          if (v69 <= 1) {
            unint64_t v69 = 1;
          }
          unint64_t v137 = v69;
          do
          {
            long long v142 = *(_OWORD *)&v145[0].__locale_;
            if (v67 != v68)
            {
              uint64_t v70 = v68;
              unint64_t v71 = v137;
              do
              {
                uint64_t v72 = *v70++;
                *((void *)&v142 + v72) = 0;
                --v71;
              }
              while (v71);
            }
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            char v75 = 1;
            do
            {
              char v76 = v75;
              v74 += *((void *)&v160 + v73) * *((void *)&v142 + v73);
              uint64_t v73 = 1;
              char v75 = 0;
            }
            while ((v76 & 1) != 0);
            *(float *)(v65 + 4 * v66) = sub_25B52F91C(a2, v74, v142, *((uint64_t *)&v142 + 1));
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v78 = (std::locale::__imp *)((char *)v145[k].__locale_ + 1);
              v145[k].__locale_ = v78;
              if (v78 != *(std::locale::__imp **)((char *)&v139 + k * 8)) {
                break;
              }
              v145[k].__locale_ = 0;
            }
            ++v66;
          }
          while (v66 != v64);
        }
      }
      else if (v64)
      {
        uint64_t v116 = 0;
        uint64_t v136 = (uint64_t *)v150;
        unint64_t v138 = (uint64_t *)*((void *)&v149 + 1);
        if ((unint64_t)((uint64_t)(v150 - *((void *)&v149 + 1)) >> 3) <= 1) {
          uint64_t v117 = 1;
        }
        else {
          uint64_t v117 = (uint64_t)(v150 - *((void *)&v149 + 1)) >> 3;
        }
        uint64_t v135 = *(void *)(a1 + 64);
        uint64_t v133 = v117;
        uint64_t v134 = *(void *)(a1 + 56);
        do
        {
          uint64_t v118 = v64;
          uint64_t v119 = v65;
          long long v120 = v145[0].__locale_;
          long long v121 = v145[1].__locale_;
          long long v142 = *(_OWORD *)&v145[0].__locale_;
          if (v136 != v138)
          {
            long long v122 = v138;
            uint64_t v123 = v133;
            do
            {
              uint64_t v124 = *v122++;
              *((void *)&v142 + v124) = 0;
              --v123;
            }
            while (v123);
          }
          uint64_t v125 = 0;
          uint64_t v126 = 0;
          char v127 = 1;
          do
          {
            char v128 = v127;
            v126 += *((void *)&v160 + v125) * *((void *)&v142 + v125);
            uint64_t v125 = 1;
            char v127 = 0;
          }
          while ((v128 & 1) != 0);
          float v129 = sub_25B52F91C(a2, v126, v142, *((uint64_t *)&v142 + 1));
          uint64_t v130 = v134 * (void)v120 + v135 * (void)v121;
          uint64_t v65 = v119;
          *(float *)(v119 + 4 * v130) = v129;
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v132 = (std::locale::__imp *)((char *)v145[m].__locale_ + 1);
            v145[m].__locale_ = v132;
            if (v132 != *(std::locale::__imp **)((char *)&v139 + m * 8)) {
              break;
            }
            v145[m].__locale_ = 0;
          }
          ++v116;
          uint64_t v64 = v118;
        }
        while (v116 != v118);
      }
    }
    sub_25B3F9500((uint64_t)&v148);
  }
}

void sub_25B52F8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float sub_25B52F91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 184)) {
    uint64_t v4 = *(void *)(a1 + 104) * a3 + *(void *)(a1 + 112) * a4;
  }
  float result = *(float *)(*(void *)(a1 + 192) + 4 * v4);
  if (!*(unsigned char *)(a1 + 336)) {
    a2 = *(void *)(a1 + 256) * a3 + *(void *)(a1 + 264) * a4;
  }
  uint64_t v6 = *(void *)(a1 + 344);
  if (result < *(float *)(v6 + 4 * a2)) {
    return *(float *)(v6 + 4 * a2);
  }
  return result;
}

void sub_25B52F96C(void *a1)
{
  *a1 = &unk_2708F1880;
  uint64_t v1 = (uint64_t)(a1 + 2);
  sub_25B52F9E0(a1 + 2);
  sub_25B3FB178(v1);

  JUMPOUT(0x261163EE0);
}

void *sub_25B52F9E0(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    float result = (void *)result[2];
    if (result)
    {
      do
      {
        long long v2 = (void *)*result;
        operator delete(result);
        float result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *sub_25B52FA48(void *a1)
{
  *a1 = &unk_2708F1880;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_25B52F9E0(a1 + 2);
  sub_25B3FB178(v2);
  return a1;
}

void sub_25B52FCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B52FD28(void *a1, void *a2)
{
  id v16 = a1;
  if (objc_msgSend_count(v16, v3, v4) == 2)
  {
    uint64_t v6 = objc_msgSend_objectAtIndexedSubscript_(v16, v5, 0);
    objc_msgSend_floatValue(v6, v7, v8);
    unsigned int v15 = v9;
    uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v16, v10, 1);
    objc_msgSend_floatValue(v11, v12, v13);
    *a2 = __PAIR64__(v14, v15);
  }
}

void sub_25B52FDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_25B52FED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B52FEF0(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::locale v13[2] = *MEMORY[0x263EF8340];
  int v12 = HIDWORD(a1);
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v13[0] = v4;
  HIDWORD(v5) = v12;
  LODWORD(v5) = v12;
  uint64_t v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v13[1] = v8;
  int v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v9, (uint64_t)v13, 2);

  return v10;
}

void sub_25B52FFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B53022C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B53057C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25B530690(float32x2_t *a1)
{
  if (a1)
  {
    float v17 = a1[42].f32[0];
    __float2 v2 = __sincosf_stret((float)(a1[42].f32[1] * 3.1416) / 180.0);
    float32x2_t v3 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v2.__sinval), LODWORD(v2.__cosval)), v17);
    __float2 v4 = __sincosf_stret((float)(a1[43].f32[0] * 3.1416) / 180.0);
    float32x2_t v5 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v4.__sinval), LODWORD(v4.__cosval)), v17);
    objc_msgSend_quad(a1, v6, v7);
    int8x16_t v18 = v8;
    objc_msgSend_quad(a1, v9, v10);
    float32x2_t v11 = a1[45];
    *(float32x2_t *)&long long v12 = vadd_f32(v3, v11);
    *(void *)&long long v13 = v12;
    *((void *)&v13 + 1) = vextq_s8(v18, v18, 8uLL).u64[0];
    *(float32x2_t *)&long long v14 = vadd_f32(v11, v5);
    *(void *)&long long v15 = v14;
    *((void *)&v15 + 1) = *((void *)&v13 + 1);
    *((void *)&v14 + 1) = vextq_s8(v16, v16, 8uLL).u64[0];
    *((void *)&v12 + 1) = *((void *)&v14 + 1);
    src[0] = v13;
    src[1] = v15;
    src[2] = v14;
    src[3] = v12;
    objc_copyStruct(&a1[34], src, 64, 1, 0);
  }
}

void sub_25B5308A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5308B0(_OWORD *a1, _OWORD *a2, void **a3)
{
  if (a1 != a2)
  {
    float32x2_t v5 = a1;
    uint64_t v6 = (char *)a3[1];
    do
    {
      unint64_t v7 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v8 = (v6 - (unsigned char *)*a3) >> 4;
        if ((unint64_t)(v8 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v9 = v7 - (void)*a3;
        uint64_t v10 = v9 >> 3;
        if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)sub_25B3FFAEC(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        long long v13 = (char *)(v11 + 16 * v8);
        *(_OWORD *)long long v13 = *v5;
        uint64_t v6 = v13 + 16;
        long long v15 = (char *)*a3;
        long long v14 = (char *)a3[1];
        if (v14 != *a3)
        {
          do
          {
            long long v16 = *((_OWORD *)v14 - 1);
            v14 -= 16;
            *((_OWORD *)v13 - 1) = v16;
            v13 -= 16;
          }
          while (v14 != v15);
          long long v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = (void *)(v11 + 16 * v12);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v6 = *v5;
        v6 += 16;
      }
      a3[1] = v6;
      ++v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_25B530A0C(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_25B413D74(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  long long v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_25B46BD74(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v13 += 3;
  sub_25B43EA54(a1, v12);
  uint64_t v10 = a1[1];
  sub_25B43EAC4((uint64_t)v12);
  return v10;
}

void sub_25B530B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B43EAC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B530B20(uint64_t a1, uint64_t a2, const void *a3)
{
  if (*(unsigned char *)(a2 + 137))
  {
    uint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    unint64_t v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    unint64_t v11 = sub_25B406B20(v10, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    long long v13 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  sub_25B4A6A64(&v65, a3, (uint64_t)a3 + 8, 2uLL);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  long long v15 = v65;
  unint64_t v14 = v66;
  sub_25B4A6AE0((uint64_t *)&v62, v65, v66, v66 - v65);
  uint64_t v56 = a2;
  uint64_t v57 = v15;
  if (v15 >= v14)
  {
    int v18 = -1;
  }
  else
  {
    int v16 = 0;
    float v17 = (void *)MEMORY[0x263F8C0F8];
    int v18 = -1;
    uint64_t v19 = (std::locale::id *)MEMORY[0x263F8C108];
    char v20 = v15;
    do
    {
      int v21 = *v20;
      if (*v20) {
        BOOL v22 = v21 <= -2;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        uint64_t v23 = (void *)std::ostream::operator<<();
        sub_25B406B20(v23, (uint64_t)" ", 1);
        sub_25B406B20(v23, (uint64_t)"reshape", 7);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
        uint64_t v24 = std::locale::use_facet(&v58, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v58);
        long long v15 = v57;
        std::ostream::put();
        std::ostream::flush();
        LODWORD(v58.__locale_) = 200000000;
        sub_25B406FE0("err", "shape can only be -1 or integer between 1 and ");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        float v25 = std::locale::use_facet(&v58, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v58);
        std::ostream::put();
        std::ostream::flush();
        int v21 = *v20;
      }
      if (v21 != -1 || v18 == -1)
      {
        if (v21 == -1 && v18 == -1) {
          int v18 = v16;
        }
      }
      else
      {
        sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        uint64_t v28 = (void *)std::ostream::operator<<();
        sub_25B406B20(v28, (uint64_t)" ", 1);
        sub_25B406B20(v28, (uint64_t)"reshape", 7);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        uint64_t v29 = std::locale::use_facet(&v58, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(&v58);
        long long v15 = v57;
        std::ostream::put();
        std::ostream::flush();
        sub_25B4A6C8C("err", "shape cannot be deduced");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        uint64_t v30 = std::locale::use_facet(&v58, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v58);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v20;
      ++v16;
    }
    while (v20 < v14);
  }
  int v31 = 1;
  if (v15 == v14)
  {
    uint64_t v33 = v56;
  }
  else
  {
    float v32 = v15;
    uint64_t v33 = v56;
    do
    {
      int v34 = *v32++;
      v31 *= v34;
    }
    while (v32 != v14);
  }
  if (v31 >= 0) {
    unint64_t v35 = v31;
  }
  else {
    unint64_t v35 = -v31;
  }
  unint64_t v36 = *(void *)(v33 + 104);
  if (v36 < v35 || v36 % v35)
  {
    float v37 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v38 = sub_25B406B20(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v38, (uint64_t)" ", 1);
    uint64_t v39 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v40 = (void *)std::ostream::operator<<();
    sub_25B406B20(v40, (uint64_t)" ", 1);
    sub_25B406B20(v40, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
    uint64_t v41 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4A6D98("err", "length not match, cannot reshape");
    std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
    char v42 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v58);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v18 != -1) {
    *(void *)&v62[8 * v18] = *(void *)(v33 + 104) / v35;
  }
  sub_25B40826C(__b, &v62);
  *(void *)a1 = &unk_2708F1C28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  if (*(unsigned char *)(v33 + 136))
  {
    uint64_t v43 = *(void *)(v33 + 120);
    uint64_t v44 = *(void *)(v33 + 128);
    if (!v44)
    {
      *(void *)(a1 + 120) = v43;
      *(void *)(a1 + 128) = 0;
      goto LABEL_49;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    uint32x4_t v45 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v43;
    *(void *)(a1 + 128) = v44;
    if (!v45) {
      goto LABEL_49;
    }
  }
  else
  {
    sub_25B4A5270((uint64_t)&v58, (long long *)(v33 + 8));
    sub_25B4A5D24((uint64_t)&v58, v33);
    uint64_t v47 = v59;
    uint64_t v46 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v47;
    *(void *)(a1 + 128) = v46;
    if (v48) {
      sub_25B404120(v48);
    }
    v58.__locale_ = (std::locale::__imp *)&unk_2708F18C0;
    uint32x4_t v45 = v60;
    if (!v60) {
      goto LABEL_49;
    }
  }
  sub_25B404120(v45);
LABEL_49:
  uint64_t v49 = 0;
  long long v50 = __b[1];
  *(_OWORD *)(a1 + 8) = __b[0];
  *(_OWORD *)(a1 + 24) = v50;
  *(_OWORD *)(a1 + 40) = __b[2];
  uint64_t v51 = 1;
  uint64_t v52 = *(void *)(a1 + 16);
  uint64_t v53 = *(void *)(a1 + 8) * v52;
  *(void *)(a1 + 56) = v52;
  *(void *)(a1 + 64) = 1;
  *(void *)(a1 + 104) = v53;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 137) = 0;
  while (1)
  {
    uint64_t v54 = *(void *)(a1 + v49 + 16);
    if (v54 != 1) {
      break;
    }
LABEL_53:
    v49 -= 8;
    if (v49 == -16)
    {
      char v55 = 1;
      goto LABEL_56;
    }
  }
  if (*(void *)(a1 + v49 + 64) == v51)
  {
    v51 *= v54;
    goto LABEL_53;
  }
  char v55 = 0;
LABEL_56:
  *(unsigned char *)(a1 + 136) = v55;
  *(void *)(a1 + 144) = **(void **)(a1 + 120);
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  if (v15) {
    operator delete(v15);
  }
}

void sub_25B5313F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    sub_25B404120(a27);
  }
  void *v27 = v28;
  int v31 = (std::__shared_weak_count *)v27[16];
  if (v31) {
    sub_25B404120(v31);
  }
  float v32 = *(void **)(v29 - 136);
  if (v32)
  {
    *(void *)(v29 - 128) = v32;
    operator delete(v32);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B5314C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v6 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 112) = 0;
  uint64_t v132 = (void **)(a1 + 112);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  long long v131 = (void **)(a1 + 144);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_25B43A318(a1 + 216, a2);
  uint64_t v7 = 0;
  char v8 = 1;
  uint64_t v9 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    char v11 = v8;
    int v12 = *(_DWORD *)(a3 + 4 * v7);
    if (v12 >= 0) {
      unsigned int v13 = *(_DWORD *)(a3 + 4 * v7);
    }
    else {
      unsigned int v13 = -v12;
    }
    if (v13 >= 3)
    {
      sub_25B406B20(v9, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
      sub_25B406B20(v9, (uint64_t)" ", 1);
      unint64_t v14 = (void *)std::ostream::operator<<();
      sub_25B406B20(v14, (uint64_t)" ", 1);
      sub_25B406B20(v14, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      long long v15 = std::locale::use_facet(&v134, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v134);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      int v16 = std::locale::use_facet(&v134, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v134);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v12 < 0) {
      v12 += 3;
    }
    if (v12 >= 3)
    {
      sub_25B406B20(v9, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
      sub_25B406B20(v9, (uint64_t)" ", 1);
      float v17 = (void *)std::ostream::operator<<();
      sub_25B406B20(v17, (uint64_t)" ", 1);
      sub_25B406B20(v17, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      int v18 = std::locale::use_facet(&v134, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v134);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v19 = std::locale::use_facet(&v134, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v134);
      std::ostream::put();
      std::ostream::flush();
      if (v12 < 0)
      {
        sub_25B406B20(v9, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
        sub_25B406B20(v9, (uint64_t)" ", 1);
        char v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"init", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        int v21 = std::locale::use_facet(&v134, v10);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B435E20("err");
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
        BOOL v22 = std::locale::use_facet(&v134, v10);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    char v8 = 0;
    v6[v7 + 6] = v12;
    uint64_t v7 = 1;
  }
  while ((v11 & 1) != 0);
  unint64_t v23 = *(void *)(a1 + 96);
  unint64_t v24 = *(void *)(a1 + 104);
  if (v23 == v24)
  {
    float v25 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v27 = v131;
    uint64_t v26 = v132;
    uint64_t v28 = a1 + 224;
    uint64_t v29 = sub_25B406B20(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v29, (uint64_t)" ", 1);
    uint64_t v30 = (void *)MEMORY[0x263F8C0F8];
    int v31 = (void *)std::ostream::operator<<();
    sub_25B406B20(v31, (uint64_t)" ", 1);
    sub_25B406B20(v31, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
    float v32 = std::locale::use_facet(&v134, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v134);
    std::ostream::put();
    std::ostream::flush();
    sub_25B53745C("err", "gather dim should not be same!");
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
    uint64_t v33 = std::locale::use_facet(&v134, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v134);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v23 = *(void *)(a1 + 96);
    unint64_t v24 = *(void *)(a1 + 104);
  }
  else
  {
    unint64_t v27 = v131;
    uint64_t v26 = v132;
    uint64_t v28 = a1 + 224;
  }
  if (v23 > v24)
  {
    *(void *)(a1 + 96) = v24;
    *(void *)(a1 + 104) = v23;
  }
  unint64_t v34 = *(void *)(a1 + 56);
  if (v34 >= *(void *)(a1 + 64))
  {
    unint64_t v35 = sub_25B45E484(v6, a4);
  }
  else
  {
    unint64_t v35 = sub_25B455F0C(v34, a4) + 152;
    *(void *)(a1 + 56) = v35;
  }
  *(void *)(a1 + 56) = v35;
  if (v35 >= *(void *)(a1 + 64))
  {
    uint64_t v36 = sub_25B45E484(v6, a5);
  }
  else
  {
    uint64_t v36 = sub_25B455F0C(v35, a5) + 152;
    *(void *)(a1 + 56) = v36;
  }
  *(void *)(a1 + 56) = v36;
  uint64_t v37 = *(void *)(a1 + 48);
  uint64_t v39 = *(char **)(a1 + 80);
  unint64_t v38 = *(void *)(a1 + 88);
  if ((unint64_t)v39 >= v38)
  {
    uint64_t v41 = *(unsigned char **)(a1 + 72);
    uint64_t v42 = (v39 - v41) >> 3;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61) {
      goto LABEL_136;
    }
    uint64_t v44 = v38 - (void)v41;
    if (v44 >> 2 > v43) {
      unint64_t v43 = v44 >> 2;
    }
    BOOL v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v45) {
      unint64_t v46 = v43;
    }
    if (v46)
    {
      unint64_t v46 = (unint64_t)sub_25B3FCAD4(v46);
      uint64_t v41 = *(unsigned char **)(a1 + 72);
      uint64_t v39 = *(char **)(a1 + 80);
    }
    else
    {
      uint64_t v47 = 0;
    }
    uint64_t v48 = (void *)(v46 + 8 * v42);
    unint64_t v49 = v46 + 8 * v47;
    *uint64_t v48 = *(void *)(v37 + 56);
    uint64_t v40 = (char *)(v48 + 1);
    while (v39 != v41)
    {
      uint64_t v50 = *((void *)v39 - 1);
      v39 -= 8;
      *--uint64_t v48 = v50;
    }
    *(void *)(a1 + 72) = v48;
    *(void *)(a1 + 80) = v40;
    *(void *)(a1 + 88) = v49;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *(void *)uint64_t v39 = *(void *)(v37 + 56);
    uint64_t v40 = v39 + 8;
  }
  *(void *)(a1 + 80) = v40;
  uint64_t v51 = *(void **)(a1 + 48);
  if (v51[1] != v51[20])
  {
    uint64_t v52 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v53 = sub_25B406B20(v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/expression/../common/gather_scatter_dim_helper.hpp", 132);
    sub_25B406B20(v53, (uint64_t)" ", 1);
    uint64_t v54 = (void *)std::ostream::operator<<();
    sub_25B406B20(v54, (uint64_t)" ", 1);
    sub_25B406B20(v54, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    char v55 = std::locale::use_facet(&v134, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale(&v134);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v56 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"err", 3);
    uint64_t v57 = sub_25B406B20(v56, (uint64_t)" ", 1);
    std::locale v58 = sub_25B406B20(v57, (uint64_t)"indices shape should be same", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    uint64_t v59 = std::locale::use_facet(&v134, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale(&v134);
    std::ostream::put();
    uint64_t v60 = (void *)MEMORY[0x263F8C0F8];
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
    uint64_t v61 = std::locale::use_facet(&v134, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    std::locale::~locale(&v134);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v51 = *(void **)(a1 + 48);
    uint64_t v40 = *(char **)(a1 + 80);
  }
  unint64_t v62 = *(void *)(a1 + 88);
  if ((unint64_t)v40 < v62)
  {
    *(void *)uint64_t v40 = v51[26];
    uint64_t v63 = v40 + 8;
    goto LABEL_56;
  }
  uint64_t v64 = *(char **)(a1 + 72);
  uint64_t v65 = (v40 - v64) >> 3;
  unint64_t v66 = v65 + 1;
  if ((unint64_t)(v65 + 1) >> 61) {
LABEL_136:
  }
    sub_25B3FBC4C();
  uint64_t v67 = v62 - (void)v64;
  if (v67 >> 2 > v66) {
    unint64_t v66 = v67 >> 2;
  }
  BOOL v45 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v45) {
    unint64_t v68 = v66;
  }
  if (v68)
  {
    unint64_t v68 = (unint64_t)sub_25B3FCAD4(v68);
    uint64_t v64 = *(char **)(a1 + 72);
    uint64_t v40 = *(char **)(a1 + 80);
  }
  else
  {
    uint64_t v69 = 0;
  }
  uint64_t v70 = (void *)(v68 + 8 * v65);
  unint64_t v71 = v68 + 8 * v69;
  void *v70 = v51[26];
  uint64_t v63 = v70 + 1;
  while (v40 != v64)
  {
    uint64_t v72 = *((void *)v40 - 1);
    v40 -= 8;
    *--uint64_t v70 = v72;
  }
  *(void *)(a1 + 72) = v70;
  *(void *)(a1 + 80) = v63;
  *(void *)(a1 + 88) = v71;
  if (v64) {
    operator delete(v64);
  }
LABEL_56:
  *(void *)(a1 + 80) = v63;
  unint64_t v73 = *(void *)(a1 + 96);
  *(void *)(a1 + 136) = v73;
  if (v73)
  {
    unint64_t v74 = 0;
    do
    {
      char v76 = *(char **)(a1 + 120);
      unint64_t v75 = *(void *)(a1 + 128);
      if ((unint64_t)v76 >= v75)
      {
        uint64_t v78 = (char *)*v26;
        uint64_t v79 = (v76 - (unsigned char *)*v26) >> 3;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 61) {
          goto LABEL_136;
        }
        uint64_t v81 = v75 - (void)v78;
        if (v81 >> 2 > v80) {
          unint64_t v80 = v81 >> 2;
        }
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v82 = v80;
        }
        if (v82)
        {
          unint64_t v82 = (unint64_t)sub_25B3FCAD4(v82);
          uint64_t v78 = *(char **)(a1 + 112);
          char v76 = *(char **)(a1 + 120);
        }
        else
        {
          uint64_t v83 = 0;
        }
        uint64_t v84 = (unint64_t *)(v82 + 8 * v79);
        *uint64_t v84 = v74;
        uint64_t v77 = v84 + 1;
        while (v76 != v78)
        {
          unint64_t v85 = *((void *)v76 - 1);
          v76 -= 8;
          *--uint64_t v84 = v85;
        }
        *(void *)(a1 + 112) = v84;
        *(void *)(a1 + 120) = v77;
        *(void *)(a1 + 128) = v82 + 8 * v83;
        if (v78) {
          operator delete(v78);
        }
      }
      else
      {
        *(void *)char v76 = v74;
        uint64_t v77 = v76 + 8;
      }
      *(void *)(a1 + 120) = v77;
      uint64_t v87 = *(char **)(a1 + 152);
      unint64_t v86 = *(void *)(a1 + 160);
      if ((unint64_t)v87 >= v86)
      {
        uint64_t v89 = (char *)*v27;
        uint64_t v90 = (v87 - (unsigned char *)*v27) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          goto LABEL_136;
        }
        uint64_t v92 = v86 - (void)v89;
        if (v92 >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v91;
        }
        if (v93)
        {
          unint64_t v93 = (unint64_t)sub_25B3FCAD4(v93);
          uint64_t v89 = *(char **)(a1 + 144);
          uint64_t v87 = *(char **)(a1 + 152);
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (unint64_t *)(v93 + 8 * v90);
        *uint64_t v95 = v74;
        uint64_t v88 = v95 + 1;
        while (v87 != v89)
        {
          unint64_t v96 = *((void *)v87 - 1);
          v87 -= 8;
          *--uint64_t v95 = v96;
        }
        *(void *)(a1 + 144) = v95;
        *(void *)(a1 + 152) = v88;
        *(void *)(a1 + 160) = v93 + 8 * v94;
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *(void *)uint64_t v87 = v74;
        uint64_t v88 = v87 + 8;
      }
      *(void *)(a1 + 152) = v88;
      unint64_t v73 = v74 + 1;
      *(void *)(a1 + 8 * v74) = *(void *)(v28 + 8 * v74);
      unint64_t v74 = v73;
    }
    while (v73 < *(void *)(a1 + 136));
  }
  *(void *)(a1 + 8 * v73) = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v97 = *(void *)(a1 + 136) + 1;
  if (v97 <= 2)
  {
    unint64_t v98 = v73 + 1;
    do
    {
      uint64_t v99 = 0;
      char v100 = 1;
      do
      {
        if (v6[v99 + 6] == v97) {
          goto LABEL_129;
        }
        char v101 = v100;
        char v100 = 0;
        uint64_t v99 = 1;
      }
      while ((v101 & 1) != 0);
      long long v103 = *(char **)(a1 + 152);
      unint64_t v102 = *(void *)(a1 + 160);
      if ((unint64_t)v103 >= v102)
      {
        uint64_t v105 = (char *)*v27;
        uint64_t v106 = (v103 - (unsigned char *)*v27) >> 3;
        unint64_t v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 61) {
          goto LABEL_136;
        }
        uint64_t v108 = v102 - (void)v105;
        if (v108 >> 2 > v107) {
          unint64_t v107 = v108 >> 2;
        }
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v107;
        }
        if (v109)
        {
          unint64_t v109 = (unint64_t)sub_25B3FCAD4(v109);
          uint64_t v105 = *(char **)(a1 + 144);
          long long v103 = *(char **)(a1 + 152);
        }
        else
        {
          uint64_t v110 = 0;
        }
        char v111 = (unint64_t *)(v109 + 8 * v106);
        *char v111 = v98;
        uint64_t v104 = v111 + 1;
        while (v103 != v105)
        {
          unint64_t v112 = *((void *)v103 - 1);
          v103 -= 8;
          *--char v111 = v112;
        }
        *(void *)(a1 + 144) = v111;
        *(void *)(a1 + 152) = v104;
        *(void *)(a1 + 160) = v109 + 8 * v110;
        if (v105) {
          operator delete(v105);
        }
      }
      else
      {
        *(void *)long long v103 = v98;
        uint64_t v104 = v103 + 8;
      }
      *(void *)(a1 + 152) = v104;
      long long v114 = *(unint64_t **)(a1 + 120);
      unint64_t v113 = *(void *)(a1 + 128);
      if ((unint64_t)v114 >= v113)
      {
        uint64_t v116 = (unint64_t *)*v26;
        uint64_t v117 = ((char *)v114 - (unsigned char *)*v26) >> 3;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 61) {
          goto LABEL_136;
        }
        uint64_t v119 = v113 - (void)v116;
        if (v119 >> 2 > v118) {
          unint64_t v118 = v119 >> 2;
        }
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v118;
        }
        if (v120)
        {
          unint64_t v120 = (unint64_t)sub_25B3FCAD4(v120);
          uint64_t v116 = *(unint64_t **)(a1 + 112);
          long long v114 = *(unint64_t **)(a1 + 120);
        }
        else
        {
          uint64_t v121 = 0;
        }
        long long v122 = (unint64_t *)(v120 + 8 * v117);
        *long long v122 = v97;
        long long v115 = v122 + 1;
        while (v114 != v116)
        {
          unint64_t v123 = *--v114;
          *--long long v122 = v123;
        }
        *(void *)(a1 + 112) = v122;
        *(void *)(a1 + 120) = v115;
        *(void *)(a1 + 128) = v120 + 8 * v121;
        if (v116) {
          operator delete(v116);
        }
      }
      else
      {
        unint64_t *v114 = v97;
        long long v115 = v114 + 1;
      }
      *(void *)(a1 + 120) = v115;
      *(void *)(a1 + 8 * v98++) = *(void *)(v28 + 8 * v97);
LABEL_129:
      ++v97;
    }
    while (v97 != 3);
  }
  unint64_t v124 = 0;
  uint64_t v125 = a1 + 168;
  do
  {
    *(void *)(v125 + 8 * v124) = 1;
    if (v124 <= 1)
    {
      unint64_t v126 = v124;
      uint64_t v127 = 1;
      do
      {
        v127 *= *(void *)(a1 + 232 + 8 * v126);
        *(void *)(v125 + 8 * v124) = v127;
        ++v126;
      }
      while (v126 != 2);
    }
    ++v124;
  }
  while (v124 != 3);
  return a1;
}

void sub_25B5322F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  *(void *)(v18 + 216) = &unk_2708F1EB8;
  int v21 = *(std::__shared_weak_count **)(v18 + 344);
  if (v21) {
    sub_25B404120(v21);
  }
  sub_25B532F64(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_25B53237C(uint64_t a1, void *a2, int *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    float32x2_t v5 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    char v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v10 = sub_25B406B20(v9, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    char v11 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    int v12 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = 0;
  unint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  long long v15 = (void *)(a1 + 8);
  uint64_t v16 = *a3;
  v31[0] = *a2;
  v31[1] = v16;
  uint64_t v26 = 0;
  uint64_t v17 = 1;
  uint64_t v18 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v28[0].__locale_ = 0u;
  uint64_t v19 = (std::locale::__imp **)v31;
  do
  {
    char v20 = *v19;
    if ((unint64_t)*v19 >= *v15)
    {
      sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v14, (uint64_t)" ", 1);
      int v21 = (void *)std::ostream::operator<<();
      sub_25B406B20(v21, (uint64_t)" ", 1);
      sub_25B406B20(v21, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      BOOL v22 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v26, "=", (uint64_t)v19, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      unint64_t v23 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      char v20 = *v19;
    }
    v28[v13].__locale_ = v20;
    uint64_t v19 = (std::locale::__imp **)&v31[v17];
    ++v15;
    uint64_t v26 = ++v13;
    uint64_t v17 = 2;
  }
  while (v13 != 2);
  return *(void *)(a1 + 144)
       + 4 * (*(void *)(a1 + 56) * (uint64_t)v28[0].__locale_ + *(void *)(a1 + 64) * (uint64_t)v28[1].__locale_);
}

void sub_25B53279C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

uint64_t sub_25B5327CC(uint64_t a1, unint64_t *a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    __float2 v4 = (void *)MEMORY[0x263F8C0F8];
    float32x2_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    char v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    char v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v12 = *a2;
  v22[0] = v12;
  uint64_t v20 = 0;
  if (v12 >= *(void *)(a1 + 8))
  {
    uint64_t v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v14, (uint64_t)" ", 1);
    long long v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_25B406B20(v16, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v17 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40B60C("err", "shape", (uint64_t)&v20, "=", (uint64_t)v22, "should smaller then");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v18 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return *(void *)(a1 + 144) + 8 * *(void *)(a1 + 56) * v12;
}

void sub_25B532B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B532BA0(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F18E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B43814C((uint64_t)v6, v5);
}

void sub_25B532F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  std::locale v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B532F64(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)a1;
  sub_25B45E2EC(&v6);
  return a1;
}

void sub_25B532FCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)operator new(8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  if ((int)v5 >= 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = (int)v5 + 2;
  }
  *uint64_t v6 = v9;
  uint64_t v205 = a2;
  uint64_t v210 = a2 + 8;
  uint64_t v10 = (void *)MEMORY[0x263F8C0F8];
  char v11 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v215 = v6;
  do
  {
    if ((unint64_t)v7[v8] >= 2)
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../common/reduce_helper.hpp", 118);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      unint64_t v12 = (void *)std::ostream::operator<<();
      sub_25B406B20(v12, (uint64_t)" ", 1);
      sub_25B406B20(v12, (uint64_t)"format_reduce_axes", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v13 = std::locale::use_facet(__b, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(__b);
      uint64_t v7 = v215;
      std::ostream::put();
      std::ostream::flush();
      sub_25B408160("err", "reduce axis larger than dim-1");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      unint64_t v14 = std::locale::use_facet(__b, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
    }
    ++v8;
  }
  while (!v8);
  uint64_t v204 = a1;
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  long long v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v223 = 0;
  int v224 = 0;
  unint64_t v225 = 0;
  char v19 = 1;
  do
  {
    char v20 = v19;
    if (*v7 == v18)
    {
      if ((unint64_t)v17 < v16)
      {
        *(void *)uint64_t v17 = 1;
        std::locale v21 = v17 + 8;
LABEL_14:
        BOOL v22 = v21;
        goto LABEL_42;
      }
      uint64_t v23 = (v17 - v15) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
      {
        unint64_t v225 = v16;
        int v223 = v15;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v16 - (void)v15) >> 2 > v24) {
        unint64_t v24 = (uint64_t)(v16 - (void)v15) >> 2;
      }
      if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        unint64_t v25 = (unint64_t)sub_25B3FCAD4(v25);
      }
      else {
        uint64_t v26 = 0;
      }
      long long v29 = (char *)(v25 + 8 * v23);
      *(void *)long long v29 = 1;
      BOOL v22 = v29 + 8;
      while (v17 != v15)
      {
        uint64_t v30 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v29 - 1) = v30;
        v29 -= 8;
      }
    }
    else
    {
      if ((unint64_t)v17 < v16)
      {
        *(void *)uint64_t v17 = *(void *)(v210 + 8 * v18);
        std::locale v21 = v17 + 8;
        goto LABEL_14;
      }
      uint64_t v27 = (v17 - v15) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
      {
        unint64_t v225 = v16;
        int v223 = v15;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v16 - (void)v15) >> 2 > v28) {
        unint64_t v28 = (uint64_t)(v16 - (void)v15) >> 2;
      }
      if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v28;
      }
      if (v25) {
        unint64_t v25 = (unint64_t)sub_25B3FCAD4(v25);
      }
      else {
        uint64_t v26 = 0;
      }
      long long v29 = (char *)(v25 + 8 * v27);
      *(void *)long long v29 = *(void *)(v210 + 8 * v18);
      BOOL v22 = v29 + 8;
      while (v17 != v15)
      {
        uint64_t v31 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
    }
    unint64_t v16 = v25 + 8 * v26;
    int v224 = v22;
    if (v15) {
      operator delete(v15);
    }
    long long v15 = v29;
    uint64_t v7 = v215;
LABEL_42:
    char v19 = 0;
    int v224 = v22;
    uint64_t v17 = v22;
    uint64_t v18 = 1;
  }
  while ((v20 & 1) != 0);
  unint64_t v225 = v16;
  int v223 = v15;
  sub_25B40826C(__b, &v223);
  long long v220 = 0u;
  long long v221 = 0u;
  v219[0] = __b[1];
  v219[1] = 1;
  sub_25B43765C((uint64_t)v216, __b);
  uint64_t v32 = a2 + 8;
  uint64_t v33 = *v7;
  uint64_t v207 = *v7;
  if (*v7 == 1)
  {
    uint64_t v34 = 1;
  }
  else
  {
    uint64_t v34 = *v7;
    if (!v33)
    {
      __p = 0;
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v67 = 0;
      uint64_t v66 = 1;
      uint64_t v40 = 1;
      char v65 = 1;
      goto LABEL_107;
    }
  }
  long long v212 = 0;
  __p = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 1;
  uint64_t v208 = v34;
  while (2)
  {
    uint64_t v41 = *(void *)(v32 + 8 * v39);
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v42 = (v35 - __p) >> 3;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        goto LABEL_285;
      }
      if ((uint64_t)(v36 - (void)__p) >> 2 > v43) {
        unint64_t v43 = (uint64_t)(v36 - (void)__p) >> 2;
      }
      if (v36 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44)
      {
        unint64_t v44 = (unint64_t)sub_25B3FCAD4(v44);
        uint64_t v46 = *(void *)(v210 + 8 * v39);
      }
      else
      {
        uint64_t v45 = 0;
        uint64_t v46 = *(void *)(v32 + 8 * v39);
      }
      uint64_t v47 = (char *)(v44 + 8 * v42);
      *(void *)uint64_t v47 = v46;
      uint64_t v48 = v47 + 8;
      if (v35 == __p)
      {
        unint64_t v49 = __p;
      }
      else
      {
        unint64_t v49 = __p;
        do
        {
          uint64_t v50 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v47 - 1) = v50;
          v47 -= 8;
        }
        while (v35 != __p);
      }
      unint64_t v36 = v44 + 8 * v45;
      if (v49)
      {
        unint64_t v51 = v44 + 8 * v45;
        operator delete(v49);
        unint64_t v36 = v51;
      }
      __p = v47;
      unint64_t v35 = v48;
      uint64_t v34 = v208;
      uint64_t v32 = v210;
    }
    else
    {
      *(void *)unint64_t v35 = v41;
      v35 += 8;
    }
    if (*v215 == v39)
    {
      if ((unint64_t)v37 < v38)
      {
        *(void *)uint64_t v37 = 0;
        uint64_t v52 = v37 + 8;
        goto LABEL_71;
      }
      uint64_t v54 = (v37 - v212) >> 3;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      unint64_t v56 = v36;
      if ((uint64_t)(v38 - (void)v212) >> 2 > v55) {
        unint64_t v55 = (uint64_t)(v38 - (void)v212) >> 2;
      }
      if (v38 - (unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57) {
        unint64_t v57 = (unint64_t)sub_25B3FCAD4(v57);
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v61 = (char *)(v57 + 8 * v54);
      *(void *)uint64_t v61 = 0;
      uint64_t v53 = v61 + 8;
      if (v37 != v212)
      {
        unint64_t v62 = v212;
        do
        {
          uint64_t v63 = *((void *)v37 - 1);
          v37 -= 8;
          *((void *)v61 - 1) = v63;
          v61 -= 8;
        }
        while (v37 != v212);
        goto LABEL_99;
      }
LABEL_98:
      unint64_t v62 = v212;
      goto LABEL_99;
    }
    if ((unint64_t)v37 >= v38)
    {
      uint64_t v59 = (v37 - v212) >> 3;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61) {
LABEL_285:
      }
        sub_25B3FBC4C();
      unint64_t v56 = v36;
      if ((uint64_t)(v38 - (void)v212) >> 2 > v60) {
        unint64_t v60 = (uint64_t)(v38 - (void)v212) >> 2;
      }
      if (v38 - (unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v60;
      }
      if (v57) {
        unint64_t v57 = (unint64_t)sub_25B3FCAD4(v57);
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v61 = (char *)(v57 + 8 * v59);
      *(void *)uint64_t v61 = v219[v39];
      uint64_t v53 = v61 + 8;
      if (v37 == v212) {
        goto LABEL_98;
      }
      unint64_t v62 = v212;
      do
      {
        uint64_t v64 = *((void *)v37 - 1);
        v37 -= 8;
        *((void *)v61 - 1) = v64;
        v61 -= 8;
      }
      while (v37 != v212);
LABEL_99:
      unint64_t v38 = v57 + 8 * v58;
      if (v62) {
        operator delete(v62);
      }
      long long v212 = v61;
      uint64_t v34 = v208;
      uint64_t v32 = v210;
      unint64_t v36 = v56;
    }
    else
    {
      *(void *)uint64_t v37 = v219[v39];
      uint64_t v52 = v37 + 8;
LABEL_71:
      uint64_t v53 = v52;
    }
    v40 *= v41;
    ++v39;
    uint64_t v37 = v53;
    if (v39 != v34) {
      continue;
    }
    break;
  }
  char v65 = 0;
  if ((unint64_t)(v34 + 1) > 1)
  {
    uint64_t v68 = 1;
    uint64_t v33 = v207;
    uint64_t v67 = v212;
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v33 = v207;
    uint64_t v67 = v212;
LABEL_107:
    uint64_t v69 = 8 * v66;
    uint64_t v68 = 1;
    do
    {
      v68 *= *(void *)(v32 + v69);
      v69 += 8;
    }
    while (v69 != 16);
  }
  unint64_t v70 = *(void *)(v32 + 8 * v34);
  if (v33 == 1) {
    uint64_t v71 = *(void *)(v32 + 8 * v34);
  }
  else {
    uint64_t v71 = 1;
  }
  uint64_t v211 = v71;
  long long v213 = v218;
  if (v33 == 1) {
    unint64_t v72 = v40;
  }
  else {
    unint64_t v72 = v70;
  }
  memset(&v227[1], 0, 32);
  if (v33 == 1) {
    uint64_t v73 = 1;
  }
  else {
    uint64_t v73 = v40;
  }
  uint64_t v203 = v73;
  v227[0] = 0uLL;
  memset(v226, 0, sizeof(v226));
  uint64_t v209 = v34;
  if (v65)
  {
    uint64_t v74 = v204;
    if ((unint64_t)v35 < v36)
    {
      unint64_t v75 = 0;
      int v76 = 0;
      *(void *)unint64_t v35 = 0;
      uint64_t v77 = v205;
      uint64_t v78 = a3;
      uint64_t v80 = v71;
      uint64_t v79 = v213;
      uint64_t v81 = __p;
      goto LABEL_156;
    }
    uint64_t v92 = (v35 - __p) >> 3;
    unint64_t v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v36 - (void)__p) >> 2 > v93) {
      unint64_t v93 = (uint64_t)(v36 - (void)__p) >> 2;
    }
    if (v36 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v93;
    }
    if (v94) {
      unint64_t v94 = (unint64_t)sub_25B3FCAD4(v94);
    }
    uint64_t v81 = (char *)(v94 + 8 * v92);
    *(void *)uint64_t v81 = 0;
    if (v35 == __p)
    {
      uint64_t v95 = __p;
      if (__p) {
        goto LABEL_154;
      }
    }
    else
    {
      uint64_t v95 = __p;
      do
      {
        uint64_t v96 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v81 - 1) = v96;
        v81 -= 8;
      }
      while (v35 != __p);
      if (__p) {
LABEL_154:
      }
        operator delete(v95);
    }
    unint64_t v75 = 0;
    int v76 = 0;
    uint64_t v77 = v205;
    uint64_t v78 = a3;
    uint64_t v80 = v211;
    uint64_t v79 = v213;
  }
  else
  {
    char v202 = v65;
    unint64_t v75 = 0;
    unint64_t v82 = 0;
    unint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    int v201 = v34 - 1;
    do
    {
      if (*v215 != v85)
      {
        if ((unint64_t)v84 >= v83)
        {
          uint64_t v86 = (v84 - v75) >> 3;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v83 - (void)v75) >> 2 > v87) {
            unint64_t v87 = (uint64_t)(v83 - (void)v75) >> 2;
          }
          if (v83 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          if (v88)
          {
            unint64_t v88 = (unint64_t)sub_25B3FCAD4(v88);
            uint64_t v84 = v82;
          }
          else
          {
            uint64_t v89 = 0;
          }
          uint64_t v90 = (char *)(v88 + 8 * v86);
          *(void *)uint64_t v90 = v85;
          unint64_t v82 = v90 + 8;
          while (v84 != v75)
          {
            uint64_t v91 = *((void *)v84 - 1);
            v84 -= 8;
            *((void *)v90 - 1) = v91;
            v90 -= 8;
          }
          unint64_t v83 = v88 + 8 * v89;
          if (v75) {
            operator delete(v75);
          }
          unint64_t v75 = v90;
          uint64_t v84 = v82;
          uint64_t v34 = v209;
        }
        else
        {
          *(void *)uint64_t v84 = v85;
          v84 += 8;
          unint64_t v82 = v84;
        }
      }
      ++v85;
    }
    while (v85 != v34);
    uint64_t v74 = v204;
    uint64_t v77 = v205;
    uint64_t v78 = a3;
    char v65 = v202;
    uint64_t v80 = v211;
    uint64_t v79 = v213;
    uint64_t v81 = __p;
    int v76 = v201;
  }
LABEL_156:
  unint64_t v97 = v68 * v80;
  if (v207 == 1)
  {
    if (*(unsigned char *)(v77 + 136))
    {
      if (v72)
      {
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        unint64_t v100 = 0;
        uint64_t v101 = *(void *)(v77 + 144);
        unint64_t v102 = (short float *)(v101 + 2);
        if (v97 <= 1) {
          uint64_t v103 = 1;
        }
        else {
          uint64_t v103 = v97;
        }
        uint64_t v104 = 2 * v103;
        BOOL v105 = 1;
        uint64_t v106 = v79;
        while (1)
        {
          short float v107 = *(short float *)(v101 + 2 * v99);
          if (v97 < 2) {
            break;
          }
          unint64_t v108 = v97 - 1;
          unint64_t v109 = v102;
          do
          {
            short float v110 = *v109++;
            short float v107 = v107 + v110;
            --v108;
          }
          while (v108);
          v99 += v97;
          if (!v105) {
            goto LABEL_169;
          }
LABEL_170:
          short float *v106 = v107;
          uint64_t v111 = v76;
          do
          {
            uint64_t v112 = *((void *)v227 + v111) + 1;
            *((void *)v227 + v111) = v112;
            if (v112 != *(void *)&v81[8 * v111]) {
              break;
            }
            *((void *)v227 + v111) = 0;
            BOOL v113 = v111-- <= 0;
          }
          while (!v113);
          if (v65)
          {
            BOOL v105 = 0;
            unint64_t v114 = 0;
          }
          else
          {
            unint64_t v114 = 0;
            long long v115 = (uint64_t *)v227;
            uint64_t v116 = v67;
            uint64_t v117 = v209;
            do
            {
              uint64_t v119 = *v115++;
              uint64_t v118 = v119;
              uint64_t v120 = *(void *)v116;
              v116 += 8;
              v114 += v120 * v118;
              --v117;
            }
            while (v117);
            BOOL v105 = v114 > v100;
            if (v114 > v100) {
              unint64_t v100 = v114;
            }
          }
          uint64_t v106 = &v79[v114];
          ++v98;
          unint64_t v102 = (short float *)((char *)v102 + v104);
          if (v98 == v72) {
            goto LABEL_272;
          }
        }
        ++v99;
        if (v105) {
          goto LABEL_170;
        }
LABEL_169:
        short float v107 = v107 + *v106;
        goto LABEL_170;
      }
    }
    else if (v72)
    {
      uint64_t v145 = 0;
      unint64_t v146 = 0;
      uint64_t v147 = *(void *)(v77 + 56);
      uint64_t v148 = *(void *)(v77 + 64);
      uint64_t v149 = v77 + 16;
      uint64_t v150 = *(void *)(v77 + 144);
      BOOL v151 = 1;
      long long v152 = v79;
      do
      {
        uint64_t v153 = 0;
        short float v154 = *(short float *)(v150 + 2 * (v147 * *(void *)&v226[0] + v148 * *((void *)&v226[0] + 1)));
        do
        {
          uint64_t v155 = *(void *)((char *)v226 + v153 + 8) + 1;
          *(void *)((char *)v226 + v153 + 8) = v155;
          if (v155 != *(void *)(v149 + v153)) {
            break;
          }
          *(void *)((char *)v226 + v153 + 8) = 0;
          v153 -= 8;
        }
        while (v153 != -16);
        if (v97 >= 2)
        {
          for (uint64_t i = 1; i != v97; ++i)
          {
            uint64_t v157 = 0;
            short float v154 = v154 + *(short float *)(v150 + 2 * (v147 * *(void *)&v226[0] + v148 * *((void *)&v226[0] + 1)));
            do
            {
              uint64_t v158 = *(void *)((char *)v226 + v157 + 8) + 1;
              *(void *)((char *)v226 + v157 + 8) = v158;
              if (v158 != *(void *)(v149 + v157)) {
                break;
              }
              *(void *)((char *)v226 + v157 + 8) = 0;
              v157 -= 8;
            }
            while (v157 != -16);
          }
        }
        if (!v151) {
          short float v154 = v154 + *v152;
        }
        short float *v152 = v154;
        uint64_t v159 = v76;
        do
        {
          uint64_t v160 = *((void *)v227 + v159) + 1;
          *((void *)v227 + v159) = v160;
          if (v160 != *(void *)&v81[8 * v159]) {
            break;
          }
          *((void *)v227 + v159) = 0;
          BOOL v113 = v159-- <= 0;
        }
        while (!v113);
        if (v65)
        {
          BOOL v151 = 0;
          unint64_t v161 = 0;
        }
        else
        {
          unint64_t v161 = 0;
          long long v162 = (uint64_t *)v227;
          uint64_t v163 = v67;
          uint64_t v164 = v209;
          do
          {
            uint64_t v166 = *v162++;
            uint64_t v165 = v166;
            uint64_t v167 = *(void *)v163;
            v163 += 8;
            v161 += v167 * v165;
            --v164;
          }
          while (v164);
          BOOL v151 = v161 > v146;
          if (v161 > v146) {
            unint64_t v146 = v161;
          }
        }
        long long v152 = &v79[v161];
        ++v145;
      }
      while (v145 != v72);
    }
  }
  else if (*(unsigned char *)(v77 + 136))
  {
    if (v203)
    {
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      unint64_t v123 = 0;
      BOOL v124 = 1;
      uint64_t v125 = v79;
      do
      {
        if (v124)
        {
          if (v97)
          {
            uint64_t v126 = *(void *)(v77 + 144);
            uint64_t v127 = v125;
            unint64_t v128 = v97;
            do
            {
              *v127++ = *(short float *)(v126 + 2 * v122++);
              --v128;
            }
            while (v128);
          }
        }
        else if (v97)
        {
          uint64_t v129 = *(void *)(v77 + 144);
          uint64_t v130 = v125;
          unint64_t v131 = v97;
          do
          {
            *uint64_t v130 = *(short float *)(v129 + 2 * v122) + *v130;
            ++v130;
            ++v122;
            --v131;
          }
          while (v131);
        }
        if (v72 >= 2)
        {
          for (uint64_t j = 1; j != v72; ++j)
          {
            if (v97)
            {
              uint64_t v133 = *(void *)(v77 + 144);
              std::locale v134 = v125;
              unint64_t v135 = v97;
              do
              {
                *std::locale v134 = *(short float *)(v133 + 2 * v122) + *v134;
                ++v134;
                ++v122;
                --v135;
              }
              while (v135);
            }
          }
        }
        uint64_t v136 = v76;
        do
        {
          uint64_t v137 = *((void *)v227 + v136) + 1;
          *((void *)v227 + v136) = v137;
          if (v137 != *(void *)&v81[8 * v136]) {
            break;
          }
          *((void *)v227 + v136) = 0;
          BOOL v113 = v136-- <= 0;
        }
        while (!v113);
        if (v65)
        {
          BOOL v124 = 0;
          unint64_t v138 = 0;
        }
        else
        {
          unint64_t v138 = 0;
          long long v139 = (uint64_t *)v227;
          long long v140 = v67;
          uint64_t v141 = v209;
          do
          {
            uint64_t v143 = *v139++;
            uint64_t v142 = v143;
            uint64_t v144 = *(void *)v140;
            v140 += 8;
            v138 += v144 * v142;
            --v141;
          }
          while (v141);
          BOOL v124 = v138 > v123;
          if (v138 > v123) {
            unint64_t v123 = v138;
          }
        }
        uint64_t v125 = &v79[v138];
        ++v121;
      }
      while (v121 != v203);
    }
  }
  else if (v203)
  {
    uint64_t v168 = 0;
    unint64_t v169 = 0;
    uint64_t v170 = v77 + 16;
    BOOL v171 = 1;
    long long v172 = v79;
    do
    {
      if (v171)
      {
        if (v97)
        {
          uint64_t v173 = 0;
          uint64_t v175 = *(void *)(v77 + 56);
          uint64_t v174 = *(void *)(v77 + 64);
          uint64_t v176 = *(void *)(v77 + 144);
          do
          {
            uint64_t v177 = 0;
            v172[v173] = *(short float *)(v176 + 2 * (v175 * *(void *)&v226[0] + v174 * *((void *)&v226[0] + 1)));
            do
            {
              uint64_t v178 = *(void *)((char *)v226 + v177 + 8) + 1;
              *(void *)((char *)v226 + v177 + 8) = v178;
              if (v178 != *(void *)(v170 + v177)) {
                break;
              }
              *(void *)((char *)v226 + v177 + 8) = 0;
              v177 -= 8;
            }
            while (v177 != -16);
            ++v173;
          }
          while (v173 != v97);
        }
      }
      else if (v97)
      {
        uint64_t v179 = 0;
        uint64_t v181 = *(void *)(v77 + 56);
        uint64_t v180 = *(void *)(v77 + 64);
        uint64_t v182 = *(void *)(v77 + 144);
        do
        {
          uint64_t v183 = 0;
          v172[v179] = *(short float *)(v182 + 2 * (v181 * *(void *)&v226[0] + v180 * *((void *)&v226[0] + 1)))
                     + v172[v179];
          do
          {
            uint64_t v184 = *(void *)((char *)v226 + v183 + 8) + 1;
            *(void *)((char *)v226 + v183 + 8) = v184;
            if (v184 != *(void *)(v170 + v183)) {
              break;
            }
            *(void *)((char *)v226 + v183 + 8) = 0;
            v183 -= 8;
          }
          while (v183 != -16);
          ++v179;
        }
        while (v179 != v97);
      }
      uint64_t v185 = v76;
      if (v72 >= 2)
      {
        for (uint64_t k = 1; k != v72; ++k)
        {
          if (v97)
          {
            uint64_t v187 = 0;
            uint64_t v188 = *(void *)(v77 + 56);
            uint64_t v189 = *(void *)(v77 + 64);
            uint64_t v190 = *(void *)(v77 + 144);
            do
            {
              uint64_t v191 = 0;
              v172[v187] = *(short float *)(v190 + 2 * (v188 * *(void *)&v226[0] + v189 * *((void *)&v226[0] + 1)))
                         + v172[v187];
              do
              {
                uint64_t v192 = *(void *)((char *)v226 + v191 + 8) + 1;
                *(void *)((char *)v226 + v191 + 8) = v192;
                if (v192 != *(void *)(v170 + v191)) {
                  break;
                }
                *(void *)((char *)v226 + v191 + 8) = 0;
                v191 -= 8;
              }
              while (v191 != -16);
              ++v187;
            }
            while (v187 != v97);
          }
        }
        uint64_t v185 = v76;
      }
      do
      {
        uint64_t v193 = *((void *)v227 + v185) + 1;
        *((void *)v227 + v185) = v193;
        if (v193 != *(void *)&v81[8 * v185]) {
          break;
        }
        *((void *)v227 + v185) = 0;
        BOOL v113 = v185-- <= 0;
      }
      while (!v113);
      if (v65)
      {
        BOOL v171 = 0;
        unint64_t v194 = 0;
      }
      else
      {
        unint64_t v194 = 0;
        unint64_t v195 = (uint64_t *)v227;
        uint64_t v196 = v67;
        uint64_t v197 = v209;
        do
        {
          uint64_t v199 = *v195++;
          uint64_t v198 = v199;
          uint64_t v200 = *(void *)v196;
          v196 += 8;
          v194 += v200 * v198;
          --v197;
        }
        while (v197);
        BOOL v171 = v194 > v169;
        if (v194 > v169) {
          unint64_t v169 = v194;
        }
      }
      long long v172 = &v79[v194];
      ++v168;
    }
    while (v168 != v203);
  }
LABEL_272:
  if (v75) {
    operator delete(v75);
  }
  if (v67) {
    operator delete(v67);
  }
  if (v81) {
    operator delete(v81);
  }
  if (v223) {
    operator delete(v223);
  }
  operator delete(v215);
  sub_25B435E80(v74, (uint64_t)v216, *v78);
  v216[0] = &unk_2708F18E0;
  if (v217) {
    sub_25B404120(v217);
  }
}

void sub_25B533F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46)
{
  if (v46) {
    operator delete(v46);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a37) {
    sub_25B404120(a37);
  }
  unint64_t v49 = *(void **)(v47 - 248);
  if (v49)
  {
    *(void *)(v47 - 240) = v49;
    operator delete(v49);
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_25B53406C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F18A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    char v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B534144(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v55 = *(_DWORD *)(a3 + 16);
  int v7 = *(_DWORD *)(a3 + 24);
  float32x2_t v8 = *a2;
  float32x2_t v9 = a2[1];
  sub_25B45F2BC(v63, (unint64_t *)(a3 + 8));
  sub_25B45BC00(a1, v63);
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    char v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v11, (uint64_t)" ", 1);
    unint64_t v12 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v13 = (void *)std::ostream::operator<<();
    sub_25B406B20(v13, (uint64_t)" ", 1);
    sub_25B406B20(v13, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(&v64, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v64);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    long long v15 = std::locale::use_facet(&v64, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v64);
    std::ostream::put();
    std::ostream::flush();
  }
  float32x2_t v16 = vsub_f32(v8, v9);
  float32x2_t v17 = vmul_f32(v16, v16);
  v17.f32[0] = sqrtf(vaddv_f32(v17));
  uint64_t v18 = *(void *)(a1 + 104);
  char v19 = *(unsigned char **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v18; --v18)
      *v19++ = 0;
  }
  else if (v18)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 8);
    do
    {
      v19[v21 * v20] = 0;
      if (v20 + 1 == v22) {
        uint64_t v20 = 0;
      }
      else {
        ++v20;
      }
      --v18;
    }
    while (v18);
  }
  if (v17.f32[0] > 0.0)
  {
    int32x2_t v56 = (int32x2_t)v17;
    float32x2_t v24 = *a2;
    float32x2_t v23 = a2[1];
    *(void *)&v63[0] = 0x2FFFFFFFFLL;
    sub_25B530B20((uint64_t)&v60, a4, v63);
    int v53 = (int)(float)(*(float *)v56.i32 + 10.0);
    if (v53 >= 11)
    {
      int32x2_t v25 = vdup_lane_s32(v56, 0);
      float32x2_t v26 = vdiv_f32(vsub_f32(v23, v24), (float32x2_t)v25);
      int v27 = v53 <= 16 ? 16 : (int)(float)(*(float *)v56.i32 + 10.0);
      int v28 = v27 - 10;
      BOOL v29 = v28 == 6;
      unsigned int v30 = (v28 - ((v28 != 6) | 6u)) / 6;
      unsigned int v31 = v29 ? v30 : v30 + 1;
      unsigned int v32 = v31 & 0x7FFFFFFE;
      v25.i32[0] = v31;
      int64x2_t v33 = (int64x2_t)vld1q_dup_f64(v61);
      int v34 = (v31 & 0x7FFFFFFE) + 2;
      int64x2_t v35 = 0uLL;
      do
      {
        int8x16_t v36 = (int8x16_t)v35;
        int64x2_t v35 = vaddq_s64(v33, v35);
        v34 -= 2;
      }
      while (v34);
      uint32x2_t v37 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v32), (int8x8_t)0x100000000), (uint32x2_t)vdup_lane_s32(v25, 0));
      v38.i64[0] = v37.i32[0];
      v38.i64[1] = v37.i32[1];
      uint64_t v39 = vaddvq_s64((int64x2_t)vbslq_s8(v38, v36, (int8x16_t)v35));
      uint64_t v40 = v39;
      if (v39)
      {
        sub_25B535E20((uint64_t)v59, v39);
        uint64_t v52 = a3;
        sub_25B535E20((uint64_t)v58, v40);
        uint64_t v41 = 0;
        int v42 = 10;
        double v43 = v61[0];
        while (1)
        {
          float32x2_t v44 = *a2;
          *(void *)&v63[0] = 0;
          if (v43 != 0.0)
          {
            unint64_t v45 = 0;
            float32x2_t v46 = vmla_n_f32(v44, v26, (float)v42);
            do
            {
              LODWORD(v64.__locale_) = 0;
              int v47 = *(_DWORD *)sub_25B53237C((uint64_t)&v60, v63, (int *)&v64);
              LODWORD(v64.__locale_) = 1;
              uint64_t v48 = (int *)sub_25B53237C((uint64_t)&v60, v63, (int *)&v64);
              if (((int)(float)(v46.f32[1] + (float)*v48) & ~((int)(float)(v46.f32[1] + (float)*v48) >> 31)) >= v7) {
                int v49 = v7 - 1;
              }
              else {
                int v49 = (int)(float)(v46.f32[1] + (float)*v48) & ~((int)(float)(v46.f32[1] + (float)*v48) >> 31);
              }
              v64.__locale_ = (std::locale::__imp *)(v41 + v45);
              uint64_t v50 = (void *)sub_25B5327CC((uint64_t)v59, (unint64_t *)&v64);
              int v51 = (int)(float)(v46.f32[0] + (float)v47) & ~((int)(float)(v46.f32[0] + (float)v47) >> 31);
              if (v51 >= v55) {
                int v51 = v55 - 1;
              }
              void *v50 = v51;
              v64.__locale_ = (std::locale::__imp *)(v41 + v45);
              *(void *)sub_25B5327CC((uint64_t)v58, (unint64_t *)&v64) = v49;
              *(void *)&v63[0] = ++v45;
              double v43 = v61[0];
            }
            while (v45 < *(void *)&v61[0]);
          }
          v41 += *(void *)&v43;
          v42 += 6;
          if (v42 >= v53)
          {
            v64.__locale_ = (std::locale::__imp *)0x200000001;
            sub_25B5314C0((uint64_t)v63, v52, (uint64_t)&v64, (uint64_t)v59, (uint64_t)v58);
            sub_25B532BA0((uint64_t)v57, v63);
          }
        }
      }
    }
    unint64_t v60 = &unk_2708F1C28;
    if (v62) {
      sub_25B404120(v62);
    }
  }
}

void sub_25B53517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x4E0]);
  sub_25B3F9500((uint64_t)&STACK[0x510]);
  STACK[0x3A0] = (unint64_t)&unk_2708F18A0;
  if (STACK[0x420]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x420]);
  }
  if (a34) {
    sub_25B404120(a34);
  }
  if (a53) {
    sub_25B404120(a53);
  }
  if (a72) {
    sub_25B404120(a72);
  }
  STACK[0x210] = (unint64_t)&unk_2708F1900;
  if (STACK[0x290]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x290]);
  }
  STACK[0x2A8] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x328]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x328]);
  }
  *a11 = &unk_2708F1920;
  uint64_t v73 = (std::__shared_weak_count *)a11[16];
  if (v73) {
    sub_25B404120(v73);
  }
  _Unwind_Resume(a1);
}

void sub_25B535368(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B408738((uint64_t)v5, v4);
}

void sub_25B535D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale((std::locale *)(v16 - 128));
  sub_25B3F9500((uint64_t)&a15);
  uint64_t v18 = *(std::__shared_weak_count **)(v15 + 128);
  if (v18) {
    sub_25B404120(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B535DC8(uint64_t a1)
{
  *(void *)(a1 + 216) = &unk_2708F1EB8;
  long long v2 = *(std::__shared_weak_count **)(a1 + 344);
  if (v2) {
    sub_25B404120(v2);
  }
  sub_25B532F64(a1 + 48);
  return a1;
}

uint64_t sub_25B535E20(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v13 = a2;
  uint64_t result = sub_25B45CE3C(a1, &v13);
  if (*(unsigned char *)(result + 137))
  {
    uint64_t v4 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v5 = sub_25B406B20(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v5, (uint64_t)" ", 1);
    uint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    int v7 = (void *)std::ostream::operator<<();
    sub_25B406B20(v7, (uint64_t)" ", 1);
    sub_25B406B20(v7, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    float32x2_t v8 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    float32x2_t v9 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    uint64_t result = std::ostream::flush();
  }
  uint64_t v10 = *(void *)(a1 + 104);
  char v11 = *(void **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v10; --v10)
      *v11++ = 0;
  }
  else if (v10)
  {
    uint64_t v12 = 0;
    do
    {
      v11[*(void *)(a1 + 56) * v12] = 0;
      if (v12 + 1 == *(void *)(a1 + 8)) {
        uint64_t v12 = 0;
      }
      else {
        ++v12;
      }
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_25B536040(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v2 - 40));
  void *v1 = &unk_2708F1900;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B536088(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v144 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  if (v4 == *(void *)a2)
  {
    uint64_t v6 = *(void *)(result + 104);
    int v7 = *(short float **)(result + 144);
    if (*(unsigned char *)(a2 + 232))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          float32x2_t v8 = *(__int16 **)(a2 + 240);
          float v9 = *(float *)(a2 + 296);
          do
          {
            __int16 v10 = *v8++;
            _H3 = v10;
            __asm { FCVT            S3, H3 }
            if (v9 >= _S3) {
              short float v17 = COERCE_SHORT_FLOAT(0);
            }
            else {
              LOWORD(v17) = COERCE_UNSIGNED_INT(1.0);
            }
            *v7++ = v17;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        uint64_t v74 = 0;
        uint64_t v75 = *(void *)(result + 56);
        int v76 = *(__int16 **)(a2 + 240);
        float v77 = *(float *)(a2 + 296);
        do
        {
          __int16 v78 = *v76++;
          _H3 = v78;
          __asm { FCVT            S3, H3 }
          if (v77 >= _S3) {
            short float v81 = COERCE_SHORT_FLOAT(0);
          }
          else {
            LOWORD(v81) = COERCE_UNSIGNED_INT(1.0);
          }
          v7[v75 * v74] = v81;
          if (v74 + 1 == v4) {
            uint64_t v74 = 0;
          }
          else {
            ++v74;
          }
          --v6;
        }
        while (v6);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v6)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *(void *)(a2 + 240);
        float v44 = *(float *)(a2 + 296);
        do
        {
          _H3 = *(_WORD *)(v43 + 2 * *(void *)(a2 + 152) * v42);
          __asm { FCVT            S3, H3 }
          if (v44 >= _S3) {
            short float v47 = COERCE_SHORT_FLOAT(0);
          }
          else {
            LOWORD(v47) = COERCE_UNSIGNED_INT(1.0);
          }
          *v7++ = v47;
          if (v42 + 1 == v4) {
            uint64_t v42 = 0;
          }
          else {
            ++v42;
          }
          --v6;
        }
        while (v6);
      }
    }
    else if (v6)
    {
      uint64_t v98 = 0;
      uint64_t v99 = *(void *)(result + 56);
      uint64_t v100 = *(void *)(a2 + 240);
      float v101 = *(float *)(a2 + 296);
      do
      {
        _H3 = *(_WORD *)(v100 + 2 * *(void *)(a2 + 152) * v98);
        __asm { FCVT            S3, H3 }
        if (v101 >= _S3) {
          short float v104 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v104) = COERCE_UNSIGNED_INT(1.0);
        }
        v7[v99 * v98] = v104;
        if (v98 + 1 == v4) {
          uint64_t v98 = 0;
        }
        else {
          ++v98;
        }
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v137 = 0uLL;
      long long v138 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v131 = 0uLL;
      long long v132 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      sub_25B439F30((uint64_t)&v126, v5, (long long *)a2, &v123);
      uint64_t v18 = (std::locale::__imp *)v123;
      if ((void)v123 != *(void *)v5)
      {
        char v19 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v20 = sub_25B406B20(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v20, (uint64_t)" ", 1);
        uint64_t v21 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v22 = (void *)std::ostream::operator<<();
        sub_25B406B20(v22, (uint64_t)" ", 1);
        sub_25B406B20(v22, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        float32x2_t v23 = std::locale::use_facet(v141, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v141);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        float32x2_t v24 = std::locale::use_facet(v141, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(v141);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v142 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v141[0].__locale_ = 0u;
      uint64_t v25 = *(void *)(v3 + 104);
      uint64_t v26 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v25)
        {
          int v27 = 0;
          uint64_t v28 = 0;
          unsigned int v30 = (uint64_t *)*((void *)&v127 + 1);
          BOOL v29 = (uint64_t *)v128;
          unint64_t v31 = (uint64_t)(v128 - *((void *)&v127 + 1)) >> 3;
          if (v31 <= 1) {
            unint64_t v31 = 1;
          }
          uint64_t v32 = v138;
          uint64_t v33 = *(void *)(a2 + 240);
          float v34 = *(float *)(a2 + 296);
          do
          {
            v141[0].__locale_ = v27;
            locale = v27;
            if (v29 != v30)
            {
              int8x16_t v36 = v30;
              unint64_t v37 = v31;
              do
              {
                uint64_t v38 = *v36++;
                v141[v38].__locale_ = 0;
                --v37;
              }
              while (v37);
              locale = v141[0].__locale_;
            }
            _H3 = *(_WORD *)(v33 + 2 * (void)locale * v32);
            __asm { FCVT            S3, H3 }
            if (v34 >= _S3) {
              short float v41 = COERCE_SHORT_FLOAT(0);
            }
            else {
              LOWORD(v41) = COERCE_UNSIGNED_INT(1.0);
            }
            *(short float *)(v26 + 2 * v28) = v41;
            if ((std::locale::__imp *)((char *)v27 + 1) == v18) {
              int v27 = 0;
            }
            else {
              int v27 = (std::locale::__imp *)((char *)v27 + 1);
            }
            ++v28;
          }
          while (v28 != v25);
        }
      }
      else if (v25)
      {
        unint64_t v82 = 0;
        uint64_t v83 = 0;
        uint64_t v85 = (uint64_t *)*((void *)&v127 + 1);
        uint64_t v84 = (uint64_t *)v128;
        unint64_t v86 = (uint64_t)(v128 - *((void *)&v127 + 1)) >> 3;
        if (v86 <= 1) {
          unint64_t v86 = 1;
        }
        uint64_t v87 = v138;
        uint64_t v88 = *(void *)(v3 + 56);
        uint64_t v89 = *(void *)(a2 + 240);
        float v90 = *(float *)(a2 + 296);
        do
        {
          v141[0].__locale_ = v82;
          uint64_t v91 = v82;
          if (v84 != v85)
          {
            uint64_t v92 = v85;
            unint64_t v93 = v86;
            do
            {
              uint64_t v94 = *v92++;
              v141[v94].__locale_ = 0;
              --v93;
            }
            while (v93);
            uint64_t v91 = v141[0].__locale_;
          }
          _H3 = *(_WORD *)(v89 + 2 * (void)v91 * v87);
          __asm { FCVT            S3, H3 }
          if (v90 >= _S3) {
            short float v97 = COERCE_SHORT_FLOAT(0);
          }
          else {
            LOWORD(v97) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v26 + 2 * (void)v82 * v88) = v97;
          if ((std::locale::__imp *)((char *)v82 + 1) == v18) {
            unint64_t v82 = 0;
          }
          else {
            unint64_t v82 = (std::locale::__imp *)((char *)v82 + 1);
          }
          ++v83;
        }
        while (v83 != v25);
      }
    }
    else
    {
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v137 = 0uLL;
      long long v138 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v133 = 0uLL;
      long long v134 = 0uLL;
      long long v131 = 0uLL;
      long long v132 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      sub_25B439F30((uint64_t)&v126, v5, (long long *)a2, &v123);
      uint64_t v48 = (std::locale::__imp *)v123;
      if ((void)v123 != *(void *)v5)
      {
        int v49 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v50 = sub_25B406B20(v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v50, (uint64_t)" ", 1);
        int v51 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v52 = (void *)std::ostream::operator<<();
        sub_25B406B20(v52, (uint64_t)" ", 1);
        sub_25B406B20(v52, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
        int v53 = std::locale::use_facet(v141, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
        std::locale::~locale(v141);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
        uint64_t v54 = std::locale::use_facet(v141, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
        std::locale::~locale(v141);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v142 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v141[0].__locale_ = 0u;
      uint64_t v55 = *(void *)(v3 + 104);
      uint64_t v56 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v55)
        {
          unint64_t v57 = 0;
          uint64_t v58 = 0;
          unint64_t v60 = (uint64_t *)*((void *)&v127 + 1);
          uint64_t v59 = (uint64_t *)v128;
          unint64_t v61 = (uint64_t)(v128 - *((void *)&v127 + 1)) >> 3;
          if (v61 <= 1) {
            unint64_t v61 = 1;
          }
          uint64_t v62 = v138;
          int v63 = *(unsigned __int8 *)(a2 + 232);
          uint64_t v64 = *(void *)(a2 + 240);
          float v65 = *(float *)(a2 + 296);
          do
          {
            v141[0].__locale_ = v57;
            uint64_t v66 = v57;
            if (v59 != v60)
            {
              uint64_t v67 = v60;
              unint64_t v68 = v61;
              do
              {
                uint64_t v69 = *v67++;
                v141[v69].__locale_ = 0;
                --v68;
              }
              while (v68);
              uint64_t v66 = v141[0].__locale_;
            }
            uint64_t v70 = *(void *)(a2 + 152);
            if (v63) {
              uint64_t v70 = v62;
            }
            _H3 = *(_WORD *)(v64 + 2 * v70 * (void)v66);
            __asm { FCVT            S3, H3 }
            if (v65 >= _S3) {
              short float v73 = COERCE_SHORT_FLOAT(0);
            }
            else {
              LOWORD(v73) = COERCE_UNSIGNED_INT(1.0);
            }
            *(short float *)(v56 + 2 * v58) = v73;
            if ((std::locale::__imp *)((char *)v57 + 1) == v48) {
              unint64_t v57 = 0;
            }
            else {
              unint64_t v57 = (std::locale::__imp *)((char *)v57 + 1);
            }
            ++v58;
          }
          while (v58 != v55);
        }
      }
      else if (v55)
      {
        BOOL v105 = 0;
        uint64_t v106 = 0;
        unint64_t v108 = (uint64_t *)*((void *)&v127 + 1);
        short float v107 = (uint64_t *)v128;
        unint64_t v109 = (uint64_t)(v128 - *((void *)&v127 + 1)) >> 3;
        if (v109 <= 1) {
          unint64_t v109 = 1;
        }
        uint64_t v110 = v138;
        uint64_t v111 = *(void *)(v3 + 56);
        int v112 = *(unsigned __int8 *)(a2 + 232);
        uint64_t v113 = *(void *)(a2 + 240);
        float v114 = *(float *)(a2 + 296);
        do
        {
          v141[0].__locale_ = v105;
          long long v115 = v105;
          if (v107 != v108)
          {
            uint64_t v116 = v108;
            unint64_t v117 = v109;
            do
            {
              uint64_t v118 = *v116++;
              v141[v118].__locale_ = 0;
              --v117;
            }
            while (v117);
            long long v115 = v141[0].__locale_;
          }
          uint64_t v119 = *(void *)(a2 + 152);
          if (v112) {
            uint64_t v119 = v110;
          }
          _H3 = *(_WORD *)(v113 + 2 * v119 * (void)v115);
          __asm { FCVT            S3, H3 }
          if (v114 >= _S3) {
            short float v122 = COERCE_SHORT_FLOAT(0);
          }
          else {
            LOWORD(v122) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v56 + 2 * (void)v105 * v111) = v122;
          if ((std::locale::__imp *)((char *)v105 + 1) == v48) {
            BOOL v105 = 0;
          }
          else {
            BOOL v105 = (std::locale::__imp *)((char *)v105 + 1);
          }
          ++v106;
        }
        while (v106 != v55);
      }
    }
    return sub_25B3F9500((uint64_t)&v126);
  }
  return result;
}

void sub_25B5368AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B5368E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v133 = *MEMORY[0x263EF8340];
  long long v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 352))
    {
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v118 = 0uLL;
      uint64_t v9 = *(void *)(a1 + 104);
      uint64_t v10 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v9)
        {
          uint64_t v11 = 0;
          uint64_t v12 = a1 + 16;
          do
          {
            __int16 v13 = sub_25B5373C0(a2, (uint64_t)&v118);
            uint64_t v14 = 0;
            *(_WORD *)(v10 + 2 * v11) = v13;
            do
            {
              uint64_t v15 = *(void *)((char *)&v118 + v14 + 8) + 1;
              *(void *)((char *)&v118 + v14 + 8) = v15;
              if (v15 != *(void *)(v12 + v14)) {
                break;
              }
              *(void *)((char *)&v118 + v14 + 8) = 0;
              v14 -= 8;
            }
            while (v14 != -16);
            ++v11;
          }
          while (v11 != v9);
        }
      }
      else if (v9)
      {
        uint64_t v65 = 0;
        uint64_t v66 = *(void *)(a1 + 56);
        uint64_t v67 = *(void *)(a1 + 64);
        uint64_t v68 = a1 + 16;
        do
        {
          uint64_t v69 = v66 * v118 + v67 * *((void *)&v118 + 1);
          __int16 v70 = sub_25B5373C0(a2, (uint64_t)&v118);
          uint64_t v71 = 0;
          *(_WORD *)(v10 + 2 * v69) = v70;
          do
          {
            uint64_t v72 = *(void *)((char *)&v118 + v71 + 8) + 1;
            *(void *)((char *)&v118 + v71 + 8) = v72;
            if (v72 != *(void *)(v68 + v71)) {
              break;
            }
            *(void *)((char *)&v118 + v71 + 8) = 0;
            v71 -= 8;
          }
          while (v71 != -16);
          ++v65;
        }
        while (v65 != v9);
      }
    }
    else
    {
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v118 = 0uLL;
      uint64_t v37 = *(void *)(a1 + 104);
      uint64_t v38 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v37)
        {
          uint64_t v39 = 0;
          uint64_t v40 = a1 + 16;
          do
          {
            __int16 v41 = sub_25B537270(a2, (uint64_t)&v118);
            uint64_t v42 = 0;
            *(_WORD *)(v38 + 2 * v39) = v41;
            do
            {
              uint64_t v43 = *(void *)((char *)&v118 + v42 + 8) + 1;
              *(void *)((char *)&v118 + v42 + 8) = v43;
              if (v43 != *(void *)(v40 + v42)) {
                break;
              }
              *(void *)((char *)&v118 + v42 + 8) = 0;
              v42 -= 8;
            }
            while (v42 != -16);
            ++v39;
          }
          while (v39 != v37);
        }
      }
      else if (v37)
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(a1 + 56);
        uint64_t v85 = *(void *)(a1 + 64);
        uint64_t v86 = a1 + 16;
        do
        {
          uint64_t v87 = v84 * v118 + v85 * *((void *)&v118 + 1);
          __int16 v88 = sub_25B537270(a2, (uint64_t)&v118);
          uint64_t v89 = 0;
          *(_WORD *)(v38 + 2 * v87) = v88;
          do
          {
            uint64_t v90 = *(void *)((char *)&v118 + v89 + 8) + 1;
            *(void *)((char *)&v118 + v89 + 8) = v90;
            if (v90 != *(void *)(v86 + v89)) {
              break;
            }
            *(void *)((char *)&v118 + v89 + 8) = 0;
            v89 -= 8;
          }
          while (v89 != -16);
          ++v83;
        }
        while (v83 != v37);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 352))
    {
      long long v131 = 0uLL;
      long long v132 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      long long v121 = 0uLL;
      long long v122 = 0uLL;
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v118 = 0uLL;
      long long v110 = 0uLL;
      long long v111 = 0uLL;
      long long v109 = 0uLL;
      sub_25B40AB84((uint64_t)&v118, v5, (_OWORD *)a2, (uint64_t)&v109);
      uint64_t v16 = 0;
      char v17 = 1;
      do
      {
        uint64_t v18 = *((void *)&v109 + v16);
        uint64_t v19 = *((void *)v5 + v16);
        if ((v17 & 1) == 0) {
          break;
        }
        char v17 = 0;
        uint64_t v16 = 1;
      }
      while (v18 == v19);
      if (v18 != v19)
      {
        uint64_t v20 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v21 = sub_25B406B20(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v21, (uint64_t)" ", 1);
        uint64_t v22 = (void *)MEMORY[0x263F8C0F8];
        float32x2_t v23 = (void *)std::ostream::operator<<();
        sub_25B406B20(v23, (uint64_t)" ", 1);
        sub_25B406B20(v23, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
        float32x2_t v24 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        uint64_t v25 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      *(_OWORD *)&v115[0].__locale_ = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      uint64_t v26 = *(void *)(a1 + 104);
      uint64_t v27 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v26)
        {
          uint64_t v28 = 0;
          unsigned int v30 = (uint64_t *)*((void *)&v119 + 1);
          BOOL v29 = (uint64_t *)v120;
          if ((unint64_t)((uint64_t)(v120 - *((void *)&v119 + 1)) >> 3) <= 1) {
            uint64_t v31 = 1;
          }
          else {
            uint64_t v31 = (uint64_t)(v120 - *((void *)&v119 + 1)) >> 3;
          }
          do
          {
            long long v112 = *(_OWORD *)&v115[0].__locale_;
            if (v29 != v30)
            {
              uint64_t v32 = v30;
              uint64_t v33 = v31;
              do
              {
                uint64_t v34 = *v32++;
                *((void *)&v112 + v34) = 0;
                --v33;
              }
              while (v33);
            }
            *(_WORD *)(v27 + 2 * v28) = sub_25B5373C0(a2, (uint64_t)&v112);
            for (uint64_t i = 1; i != -1; --i)
            {
              int8x16_t v36 = (std::locale::__imp *)((char *)v115[i].__locale_ + 1);
              v115[i].__locale_ = v36;
              if (v36 != *(std::locale::__imp **)((char *)&v109 + i * 8)) {
                break;
              }
              v115[i].__locale_ = 0;
            }
            ++v28;
          }
          while (v28 != v26);
        }
      }
      else if (v26)
      {
        uint64_t v73 = 0;
        uint64_t v74 = (uint64_t *)*((void *)&v119 + 1);
        short float v107 = (uint64_t *)v120;
        if ((unint64_t)((uint64_t)(v120 - *((void *)&v119 + 1)) >> 3) <= 1) {
          uint64_t v75 = 1;
        }
        else {
          uint64_t v75 = (uint64_t)(v120 - *((void *)&v119 + 1)) >> 3;
        }
        uint64_t v105 = *(void *)(a1 + 56);
        uint64_t v101 = v75;
        uint64_t v103 = *(void *)(a1 + 64);
        do
        {
          locale = v115[0].__locale_;
          int v76 = v115[1].__locale_;
          long long v112 = *(_OWORD *)&v115[0].__locale_;
          if (v107 != v74)
          {
            __int16 v78 = v74;
            uint64_t v79 = v101;
            do
            {
              uint64_t v80 = *v78++;
              *((void *)&v112 + v80) = 0;
              --v79;
            }
            while (v79);
          }
          *(_WORD *)(v27 + 2 * (v105 * (void)locale + v103 * (void)v76)) = sub_25B5373C0(a2, (uint64_t)&v112);
          for (uint64_t j = 1; j != -1; --j)
          {
            unint64_t v82 = (std::locale::__imp *)((char *)v115[j].__locale_ + 1);
            v115[j].__locale_ = v82;
            if (v82 != *(std::locale::__imp **)((char *)&v109 + j * 8)) {
              break;
            }
            v115[j].__locale_ = 0;
          }
          ++v73;
        }
        while (v73 != v26);
      }
    }
    else
    {
      long long v131 = 0uLL;
      long long v132 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v127 = 0uLL;
      long long v128 = 0uLL;
      long long v125 = 0uLL;
      long long v126 = 0uLL;
      long long v123 = 0uLL;
      long long v124 = 0uLL;
      long long v121 = 0uLL;
      long long v122 = 0uLL;
      long long v119 = 0uLL;
      long long v120 = 0uLL;
      long long v118 = 0uLL;
      long long v110 = 0uLL;
      long long v111 = 0uLL;
      long long v109 = 0uLL;
      sub_25B40AB84((uint64_t)&v118, v5, (_OWORD *)a2, (uint64_t)&v109);
      uint64_t v44 = 0;
      char v45 = 1;
      do
      {
        uint64_t v46 = *((void *)&v109 + v44);
        uint64_t v47 = *((void *)v5 + v44);
        if ((v45 & 1) == 0) {
          break;
        }
        char v45 = 0;
        uint64_t v44 = 1;
      }
      while (v46 == v47);
      if (v46 != v47)
      {
        uint64_t v48 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int v49 = sub_25B406B20(v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v49, (uint64_t)" ", 1);
        uint64_t v50 = (void *)MEMORY[0x263F8C0F8];
        int v51 = (void *)std::ostream::operator<<();
        sub_25B406B20(v51, (uint64_t)" ", 1);
        sub_25B406B20(v51, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
        uint64_t v52 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
        int v53 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
        std::locale::~locale(v115);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      *(_OWORD *)&v115[0].__locale_ = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      uint64_t v54 = *(void *)(a1 + 104);
      uint64_t v55 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v54)
        {
          uint64_t v56 = 0;
          uint64_t v58 = (uint64_t *)*((void *)&v119 + 1);
          unint64_t v57 = (uint64_t *)v120;
          if ((unint64_t)((uint64_t)(v120 - *((void *)&v119 + 1)) >> 3) <= 1) {
            uint64_t v59 = 1;
          }
          else {
            uint64_t v59 = (uint64_t)(v120 - *((void *)&v119 + 1)) >> 3;
          }
          do
          {
            long long v112 = *(_OWORD *)&v115[0].__locale_;
            if (v57 != v58)
            {
              unint64_t v60 = v58;
              uint64_t v61 = v59;
              do
              {
                uint64_t v62 = *v60++;
                *((void *)&v112 + v62) = 0;
                --v61;
              }
              while (v61);
            }
            *(_WORD *)(v55 + 2 * v56) = sub_25B537270(a2, (uint64_t)&v112);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v64 = (std::locale::__imp *)((char *)v115[k].__locale_ + 1);
              v115[k].__locale_ = v64;
              if (v64 != *(std::locale::__imp **)((char *)&v109 + k * 8)) {
                break;
              }
              v115[k].__locale_ = 0;
            }
            ++v56;
          }
          while (v56 != v54);
        }
      }
      else if (v54)
      {
        uint64_t v91 = 0;
        uint64_t v92 = (uint64_t *)*((void *)&v119 + 1);
        unint64_t v108 = (uint64_t *)v120;
        if ((unint64_t)((uint64_t)(v120 - *((void *)&v119 + 1)) >> 3) <= 1) {
          uint64_t v93 = 1;
        }
        else {
          uint64_t v93 = (uint64_t)(v120 - *((void *)&v119 + 1)) >> 3;
        }
        uint64_t v106 = *(void *)(a1 + 56);
        uint64_t v102 = v93;
        uint64_t v104 = *(void *)(a1 + 64);
        do
        {
          uint64_t v95 = v115[0].__locale_;
          uint64_t v94 = v115[1].__locale_;
          long long v112 = *(_OWORD *)&v115[0].__locale_;
          if (v108 != v92)
          {
            uint64_t v96 = v92;
            uint64_t v97 = v102;
            do
            {
              uint64_t v98 = *v96++;
              *((void *)&v112 + v98) = 0;
              --v97;
            }
            while (v97);
          }
          *(_WORD *)(v55 + 2 * (v106 * (void)v95 + v104 * (void)v94)) = sub_25B537270(a2, (uint64_t)&v112);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v100 = (std::locale::__imp *)((char *)v115[m].__locale_ + 1);
            v115[m].__locale_ = v100;
            if (v100 != *(std::locale::__imp **)((char *)&v109 + m * 8)) {
              break;
            }
            v115[m].__locale_ = 0;
          }
          ++v91;
        }
        while (v91 != v54);
      }
    }
    sub_25B3F9500((uint64_t)&v118);
  }
}

void sub_25B53723C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

__int16 sub_25B537270@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  sub_25B53733C((uint64_t *)(a1 + 48), a2, (uint64_t)v7);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    v4 += *(void *)(a1 + 168 + v3) * *(void *)((char *)v7 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  if (!*(unsigned char *)(a1 + 352))
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    do
    {
      v4 += *(void *)(a1 + 272 + v5) * *(void *)((char *)v7 + v5);
      v5 += 8;
    }
    while (v5 != 24);
  }
  return *(_WORD *)(*(void *)(a1 + 360) + 2 * v4);
}

uint64_t *sub_25B53733C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *result;
  uint64_t v5 = result[3];
  char v6 = 1;
  do
  {
    char v7 = v6;
    *(void *)(a3 + 8 * result[v3 + 6]) = *(void *)(*(void *)(v4 + 152 * v3 + 144)
                                                     + 8 * *(void *)(v5 + 8 * v3) * *(void *)(a2 + 8 * result[11]));
    uint64_t v3 = 1;
    char v6 = 0;
  }
  while ((v7 & 1) != 0);
  uint64_t v8 = (uint64_t *)result[8];
  uint64_t v9 = result[9] - (void)v8;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    uint64_t v11 = (uint64_t *)result[12];
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      uint64_t v12 = *v11++;
      uint64_t v13 = *(void *)(a2 + 8 * v12);
      uint64_t v14 = *v8++;
      *(void *)(a3 + 8 * v14) = v13;
      --v10;
    }
    while (v10);
  }
  return result;
}

__int16 sub_25B5373C0@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  sub_25B53733C((uint64_t *)(a1 + 48), a2, (uint64_t)v6);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    v4 += *(void *)(a1 + 168 + v3) * *(void *)((char *)v6 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  return *(_WORD *)(*(void *)(a1 + 360) + 2 * v4);
}

uint64_t sub_25B53745C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  char v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B537554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_25B537568(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t result = operator new(8 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    std::locale v5[2] = &result[a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_25B5375F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B53760C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      sub_25B3FBC4C();
    }
    sub_25B40040C(a1, a3);
    char v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_25B537684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_25B5376A0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_25B5376C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_25B5376DC(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  __p = 0;
  sub_25B400390(&__p, *(const void **)(v3 + 48), *(void *)(v3 + 56), (uint64_t)(*(void *)(v3 + 56) - *(void *)(v3 + 48)) >> 3);
  size_t v4 = 0;
  uint64_t v5 = v68 - (unsigned char *)__p;
  if (v68 != __p)
  {
    char v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = v5 >> 3;
    if ((unint64_t)(v5 >> 3) <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v5 >> 3;
    }
    float v12 = *((float *)&a3 + 1) - *((float *)&a2 + 1);
    float32x2_t v13 = vsub_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a3);
    float v14 = vmlas_n_f32(vmuls_lane_f32(-*(float *)&a2, *(float32x2_t *)&a3, 1), *((float *)&a2 + 1), *(float *)&a3);
    float v15 = vmul_f32(v13, v13).f32[0] + (float)(v12 * v12);
    float v63 = v13.f32[0];
    LODWORD(v64) = vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a2).u32[0];
    unint64_t v16 = 1;
    while (1)
    {
      int32x2_t v17 = *(int32x2_t *)((char *)__p + 8 * v9);
      int32x2_t v18 = *(int32x2_t *)((char *)__p + 8 * v16);
      float v19 = vmlas_n_f32(vmuls_lane_f32(v63, (float32x2_t)v17, 1), v12, *(float *)v17.i32);
      BOOL v20 = (float)((float)(v64 * (float)(*(float *)&v17.i32[1] - *((float *)&a2 + 1)))
                  - (float)(vsub_f32((float32x2_t)v17, *(float32x2_t *)&a2).f32[0] * v12)) < 0.0;
      if ((float)((float)((float)(v14 + v19) * (float)(v14 + v19)) / v15) < 0.00000001) {
        BOOL v20 = 1;
      }
      float32x2_t v66 = *(float32x2_t *)((char *)__p + 8 * v16);
      float v21 = vmlas_n_f32(vmuls_lane_f32(v63, (float32x2_t)v18, 1), v12, *(float *)v18.i32);
      if ((float)((float)((float)(v14 + v21) * (float)(v14 + v21)) / v15) < 0.00000001
        || (float)((float)(v64 * (float)(*(float *)&v18.i32[1] - *((float *)&a2 + 1)))
                 - (float)(vsub_f32((float32x2_t)v18, *(float32x2_t *)&a2).f32[0] * v12)) < 0.0)
      {
        break;
      }
      if (v20)
      {
        float32x2_t v33 = vsub_f32((float32x2_t)__PAIR64__(HIDWORD(a3), v17.u32[0]), (float32x2_t)__PAIR64__(HIDWORD(a2), v18.u32[0]));
        _D2 = (int32x2_t)__PAIR64__(v18.u32[1], LODWORD(a2));
        _D3 = vsub_f32((float32x2_t)__PAIR64__(v18.u32[1], LODWORD(a2)), (float32x2_t)__PAIR64__(v17.u32[1], LODWORD(a3)));
        float v35 = -(float)((float)((float)-v33.f32[1] * v33.f32[0]) + (float)(_D3.f32[1] * _D3.f32[0]));
        __asm { FMLA            S2, S3, V3.S[1] }
        if (*(float *)_D2.i32 >= 0.0) {
          float v35 = *(float *)_D2.i32;
        }
        float32x2_t v37 = 0;
        if (v35 >= 0.00000001)
        {
          int32x2_t v38 = (int32x2_t)vmla_f32(vmul_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&a3, v18), vneg_f32((float32x2_t)vzip1_s32(*(int32x2_t *)&a2, v17))), (float32x2_t)vzip2_s32(*(int32x2_t *)&a2, v17), (float32x2_t)vzip1_s32(*(int32x2_t *)&a3, v18));
          float32x2_t v37 = vdiv_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32(v38), vneg_f32(_D3)), (float32x2_t)v38, v33), (float32x2_t)vdup_lane_s32(_D2, 0));
        }
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v52 = v8 - v4;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v7 - (void)v4) >> 2 > v53) {
            unint64_t v53 = (uint64_t)(v7 - (void)v4) >> 2;
          }
          if (v7 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54) {
            unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
          }
          else {
            uint64_t v55 = 0;
          }
          uint64_t v56 = (float32x2_t *)(v54 + 8 * v52);
          *uint64_t v56 = v37;
          uint64_t v43 = v56 + 1;
          while (v6 != v4)
          {
            float32x2_t v57 = v6[-1];
            --v6;
            v56[-1] = v57;
            --v56;
          }
          unint64_t v7 = v54 + 8 * v55;
          if (v4) {
            operator delete(v4);
          }
          size_t v4 = v56;
          goto LABEL_59;
        }
        *v8++ = v37;
        goto LABEL_43;
      }
      uint64_t v43 = v6;
LABEL_60:
      ++v9;
      unint64_t v16 = (v16 + 1) % v10;
      char v6 = v43;
      if (v9 == v11) {
        goto LABEL_78;
      }
    }
    if (v20)
    {
      uint64_t v22 = v6;
    }
    else
    {
      float32x2_t v23 = vsub_f32((float32x2_t)__PAIR64__(HIDWORD(a3), v17.u32[0]), (float32x2_t)__PAIR64__(HIDWORD(a2), v18.u32[0]));
      _D2 = (int32x2_t)__PAIR64__(v18.u32[1], LODWORD(a2));
      _D3 = vsub_f32((float32x2_t)__PAIR64__(v18.u32[1], LODWORD(a2)), (float32x2_t)__PAIR64__(v17.u32[1], LODWORD(a3)));
      float v25 = -(float)((float)((float)-v23.f32[1] * v23.f32[0]) + (float)(_D3.f32[1] * _D3.f32[0]));
      __asm { FMLA            S2, S3, V3.S[1] }
      if (*(float *)_D2.i32 >= 0.0) {
        float v25 = *(float *)_D2.i32;
      }
      float32x2_t v31 = 0;
      if (v25 >= 0.00000001)
      {
        int32x2_t v32 = (int32x2_t)vmla_f32(vmul_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&a3, v18), vneg_f32((float32x2_t)vzip1_s32(*(int32x2_t *)&a2, v17))), (float32x2_t)vzip2_s32(*(int32x2_t *)&a2, v17), (float32x2_t)vzip1_s32(*(int32x2_t *)&a3, v18));
        float32x2_t v31 = vdiv_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32(v32), vneg_f32(_D3)), (float32x2_t)v32, v23), (float32x2_t)vdup_lane_s32(_D2, 0));
      }
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v39 = v8 - v4;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v7 - (void)v4) >> 2 > v40) {
          unint64_t v40 = (uint64_t)(v7 - (void)v4) >> 2;
        }
        if (v7 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          unint64_t v41 = (unint64_t)sub_25B3FCAD4(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v44 = (float32x2_t *)(v41 + 8 * v39);
        *uint64_t v44 = v31;
        uint64_t v22 = v44 + 1;
        while (v6 != v4)
        {
          float32x2_t v45 = v6[-1];
          --v6;
          v44[-1] = v45;
          --v44;
        }
        unint64_t v7 = v41 + 8 * v42;
        if (v4) {
          operator delete(v4);
        }
        size_t v4 = v44;
        uint64_t v8 = v22;
      }
      else
      {
        *v8++ = v31;
        uint64_t v22 = v8;
      }
    }
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v46 = v8 - v4;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v7 - (void)v4) >> 2 > v47) {
        unint64_t v47 = (uint64_t)(v7 - (void)v4) >> 2;
      }
      if (v7 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        unint64_t v48 = (unint64_t)sub_25B3FCAD4(v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = (float32x2_t *)(v48 + 8 * v46);
      float32x2_t *v50 = v66;
      uint64_t v43 = v50 + 1;
      while (v22 != v4)
      {
        float32x2_t v51 = v22[-1];
        --v22;
        v50[-1] = v51;
        --v50;
      }
      unint64_t v7 = v48 + 8 * v49;
      if (v4) {
        operator delete(v4);
      }
      size_t v4 = v50;
LABEL_59:
      uint64_t v8 = v43;
      goto LABEL_60;
    }
    *v8++ = v66;
LABEL_43:
    uint64_t v43 = v8;
    goto LABEL_60;
  }
  uint64_t v43 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
LABEL_78:
  uint64_t v58 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v59 = (void *)v58[6];
  if (v59)
  {
    v58[7] = v59;
    operator delete(v59);
    v58[6] = 0;
    v58[7] = 0;
    uint64_t v8 = v43;
    v58[8] = 0;
  }
  v58[6] = v4;
  v58[7] = v8;
  v58[8] = v7;
  unint64_t v60 = __p;
  if (__p)
  {
    operator delete(v60);
  }
}

void sub_25B537C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
  if (v21) {
    operator delete(v21);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25B537C60(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5, float a6)
{
  sub_25B40D638();
  float32x2_t v14 = vsub_f32(v12, v13);
  float32x2_t v15 = vsub_f32(a1, a2);
  float v16 = 0.000001;
  float v17 = sqrtf(vaddv_f32(vmul_f32(v14, v14))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v15, v15))), 0.000001);
  float32x2_t v18 = vsub_f32(a4, a3);
  float v19 = vaddv_f32(vmul_f32(vsub_f32(a1, a3), v18));
  float v20 = vaddv_f32(vmul_f32(v18, v18));
  if (v20 >= 0.000001) {
    float v16 = v20;
  }
  float32x2_t v21 = vsub_f32(vmla_n_f32(a3, v18, v19 / v16), a1);
  float v22 = sqrtf(vaddv_f32(vmul_f32(v21, v21)));
  float32x2_t v23 = vsub_f32(vmla_n_f32(a3, v18, vaddv_f32(vmul_f32(vsub_f32(a2, a3), v18)) / v16), a2);
  float v24 = sqrtf(vaddv_f32(vmul_f32(v23, v23)));
  BOOL v25 = v17 > a6;
  if (v22 >= v24) {
    float v26 = v22;
  }
  else {
    float v26 = v24;
  }
  return v26 < a5 && v25;
}

void sub_25B537D50(void *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a3;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_25B437584((uint64_t)&v6, a2);
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  LODWORD(v13) = 1101004800;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v18 = v8;
  long long v19 = v9;
  long long v16 = 0u;
  long long v17 = v7;
  sub_25B437584((uint64_t)v20, (uint64_t)&v6);
  long long v22 = v11;
  long long v23 = v12;
  long long v21 = v10;
  uint64_t v24 = v13;
  long long v14 = v17;
  long long v15 = v18;
  long long v16 = v19;
  uint64_t v36 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v26 = v17;
  long long v28 = v19;
  long long v27 = v18;
  BOOL v25 = &unk_2708F1D50;
  uint64_t v29 = *((void *)&v17 + 1);
  uint64_t v30 = 1;
  uint64_t v33 = v17 * *((void *)&v17 + 1);
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  sub_25B4966CC((uint64_t)v37, v17 * *((void *)&v17 + 1));
}

void sub_25B538D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x330]);
  sub_25B3F9500((uint64_t)&STACK[0x360]);
  if (STACK[0x2B8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x2B8]);
  }
  if (a69) {
    sub_25B404120(a69);
  }
  if (a31) {
    sub_25B404120(a31);
  }
  uint64_t v72 = *(void **)v70;
  if (*(void *)v70)
  {
    *(void *)(v70 + 8) = v72;
    operator delete(v72);
  }

  _Unwind_Resume(a1);
}

void sub_25B538E40(uint64_t a1, uint64_t a2)
{
  sub_25B437584((uint64_t)v3, a2);
  sub_25B437584(a1, (uint64_t)v3);
  v3[0] = &unk_2708F18E0;
  if (v4) {
    sub_25B404120(v4);
  }
}

void sub_25B538EA8(uint64_t a1, float32x2_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, double a6, int32x2_t a7)
{
  unint64_t v9 = a3;
  long long v10 = a2;
  float32x2_t v13 = *a2;
  float32x2_t v12 = a2[1];
  float32x2_t v14 = vsub_f32(*a2, v12);
  *(float *)a7.i32 = sqrtf(vaddv_f32(vmul_f32(v14, v14)));
  int32x2_t v66 = a7;
  int v15 = (int)(float)(*(float *)a7.i32 + 1.0);
  int v16 = *(_DWORD *)(a1 + 132);
  if (v16 >= 1 && v16 < v15)
  {
    if (v16 == 1)
    {
      long long v18 = (int *)operator new(4uLL);
      int *v18 = 0;
      *(void *)&long long v19 = vdupq_n_s64((unint64_t)(v18 + 1)).u64[0];
    }
    else
    {
      long long v18 = 0;
      long long v22 = 0;
      int v23 = 0;
      double v24 = (double)v15 / (double)(v16 - 1);
      long long v19 = 0uLL;
      do
      {
        int v25 = (int)((double)v23 * v24 + 0.0);
        long long v67 = v19;
        if ((unint64_t)v22 >= *((void *)&v19 + 1))
        {
          uint64_t v27 = v22 - v18;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v29 = *((void *)&v19 + 1) - (void)v18;
          if ((uint64_t)(*((void *)&v19 + 1) - (void)v18) >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)sub_25B3FBC64(v30);
            long long v22 = (int *)v67;
          }
          else
          {
            uint64_t v31 = 0;
          }
          long long v32 = (int *)(v30 + 4 * v27);
          *long long v32 = v25;
          long long v26 = v32 + 1;
          while (v22 != v18)
          {
            int v33 = *--v22;
            *--long long v32 = v33;
          }
          *((void *)&v67 + 1) = v30 + 4 * v31;
          if (v18) {
            operator delete(v18);
          }
          long long v18 = v32;
          long long v10 = a2;
        }
        else
        {
          *long long v22 = v25;
          long long v26 = v22 + 1;
        }
        *((void *)&v19 + 1) = *((void *)&v67 + 1);
        *(void *)&long long v19 = v26;
        ++v23;
        long long v22 = v26;
      }
      while (v23 != v16);
    }
    uint64_t v34 = (int *)v19;
    unint64_t v9 = a3;
    goto LABEL_32;
  }
  if (v15)
  {
    if (v15 < 0) {
      sub_25B3FBC4C();
    }
    uint64_t v20 = v15;
    long long v18 = (int *)sub_25B3FBC64(v15);
    bzero(v18, 4 * v20);
    long long v21 = &v18[v20];
    long long v10 = a2;
  }
  else
  {
    long long v18 = 0;
    long long v21 = 0;
  }
  uint64_t v34 = v21;
  if (v18 != v21)
  {
    int v35 = 0;
    uint64_t v36 = v18;
    do
      *v36++ = v35++;
    while (v36 != v21);
LABEL_32:
    if (v18 != v34)
    {
      float32x2_t v37 = (float32x2_t)vdup_lane_s32(v66, 0);
      float32x2_t v38 = vdiv_f32(vsub_f32(v12, v13), v37);
      int32x2_t v39 = (int32x2_t)vsub_f32((float32x2_t)vext_s8((int8x8_t)v12, (int8x8_t)v13, 4uLL), (float32x2_t)vext_s8((int8x8_t)v13, (int8x8_t)v12, 4uLL));
      float32x2_t v40 = vdiv_f32((float32x2_t)v39, v37);
      *(float *)v39.i32 = (float)v9;
      float32x2_t v41 = vneg_f32((float32x2_t)vdup_lane_s32(v39, 0));
      uint64_t v42 = (2 * v9) | 1;
      uint64_t v43 = v18;
      do
      {
        uint64_t v44 = 0;
        float32x2_t v45 = vmla_f32(vmla_n_f32(*v10, v38, (float)*v43), v40, v41);
        float v46 = 0.0;
        do
        {
          float32x2_t v47 = vmla_n_f32(v45, v40, (float)(int)v44);
          float v48 = -v47.f32[1];
          if (v47.f32[1] >= 0.0) {
            float v48 = v47.f32[1];
          }
          LODWORD(v49) = (int)v48;
          if ((float)(v48 - (float)(int)v48) > 0.5) {
            LODWORD(v49) = v49 + 1;
          }
          float v50 = -v47.f32[0];
          if (v47.f32[1] >= 0.0) {
            uint64_t v49 = v49;
          }
          else {
            uint64_t v49 = -(int)v49;
          }
          if (v47.f32[0] >= 0.0) {
            float v50 = v47.f32[0];
          }
          LODWORD(v51) = (int)v50;
          if ((float)(v50 - (float)(int)v50) > 0.5) {
            LODWORD(v51) = v51 + 1;
          }
          if (v47.f32[0] >= 0.0) {
            uint64_t v51 = v51;
          }
          else {
            uint64_t v51 = -(int)v51;
          }
          float v52 = 0.0;
          if ((v51 & 0x80000000) == 0)
          {
            unint64_t v53 = *(void *)(a1 + 120);
            if (v53 > v51 && (v49 & 0x80000000) == 0 && v53 > v49) {
              float v52 = *(float *)(a4 + 4 * (v49 + v53 * v51));
            }
          }
          if (v52 > v46) {
            float v46 = v52;
          }
          ++v44;
        }
        while (v42 != v44);
        uint64_t v55 = *(float **)(a5 + 8);
        unint64_t v54 = *(void *)(a5 + 16);
        if ((unint64_t)v55 >= v54)
        {
          float32x2_t v57 = *(float **)a5;
          uint64_t v58 = ((uint64_t)v55 - *(void *)a5) >> 2;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v60 = v54 - (void)v57;
          if (v60 >> 1 > v59) {
            unint64_t v59 = v60 >> 1;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            unint64_t v61 = (unint64_t)sub_25B3FBC64(v61);
            float32x2_t v57 = *(float **)a5;
            uint64_t v55 = *(float **)(a5 + 8);
          }
          else
          {
            uint64_t v62 = 0;
          }
          float v63 = (float *)(v61 + 4 * v58);
          float *v63 = v46;
          uint64_t v56 = v63 + 1;
          while (v55 != v57)
          {
            int v64 = *((_DWORD *)v55-- - 1);
            *((_DWORD *)v63-- - 1) = v64;
          }
          *(void *)a5 = v63;
          *(void *)(a5 + 8) = v56;
          *(void *)(a5 + 16) = v61 + 4 * v62;
          if (v57) {
            operator delete(v57);
          }
        }
        else
        {
          *uint64_t v55 = v46;
          uint64_t v56 = v55 + 1;
        }
        *(void *)(a5 + 8) = v56;
        ++v43;
      }
      while (v43 != v34);
    }
  }
  if (v18)
  {
    operator delete(v18);
  }
}

void sub_25B5392E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B53930C(void *a1, float a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  uint64_t result = 1;
  if (v3 != v2)
  {
    while (1)
    {
      id v5 = (float *)v3[4];
      if (*v5 < a2 && v5[1] >= a2) {
        break;
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
      if (v7 == v2) {
        return result;
      }
    }
    return v3[7];
  }
  return result;
}

void sub_25B539380(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 56))
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (float32x2_t *)(*(void *)(a1 + 8) + 16 * v8);
      uint64_t v10 = *(void *)(a1 + 144);
      float32x2_t v33 = vsub_f32(*v9, v9[1]);
      unint64_t v11 = sub_25B53930C(a2, *(float *)(a1 + 128) * sqrtf(vaddv_f32(vmul_f32(v33, v33))));
      double v12 = fabsf(v33.f32[0]);
      if (v12 >= 0.001 || (double v12 = fabsf(v33.f32[1]), v13 = 0.0, v12 >= 0.001))
      {
        long long __dst = 0;
        int v35 = 0;
        uint64_t v36 = 0;
        sub_25B538EA8(a1, v9, v11, a3, (uint64_t)&__dst, v12, (int32x2_t)v33);
        float32x2_t v14 = vsub_f32(*v9, v9[1]);
        int v15 = (float *)__dst;
        if (2 * v10 + 2 >= (unint64_t)(float)(sqrtf(vaddv_f32(vmul_f32(v14, v14))) + 1.0))
        {
          uint64_t v18 = (uint64_t)v35;
        }
        else
        {
          int v16 = (char *)__dst + 4 * v10 + 4;
          if (__dst == v16)
          {
            uint64_t v18 = (uint64_t)v35;
          }
          else
          {
            int64_t v17 = v35 - v16;
            if (v35 != v16) {
              memmove(__dst, v16, v35 - v16);
            }
            uint64_t v18 = (uint64_t)v15 + v17;
          }
          if (v18 - 4 * v10 - 4 != v18) {
            uint64_t v18 = v18 - 4 * v10 - 4;
          }
        }
        float v19 = 0.0;
        if (v15 != (float *)v18)
        {
          uint64_t v20 = v15;
          do
          {
            float v21 = *v20++;
            float v19 = v19 + v21;
          }
          while (v20 != (float *)v18);
        }
        if (v15) {
          operator delete(v15);
        }
        float v13 = v19 / (float)(unint64_t)((v18 - (uint64_t)v15) >> 2);
      }
      int v23 = *(float **)(a4 + 8);
      unint64_t v22 = *(void *)(a4 + 16);
      if ((unint64_t)v23 >= v22)
      {
        int v25 = *(float **)a4;
        uint64_t v26 = ((uint64_t)v23 - *(void *)a4) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
          int v25 = *(float **)a4;
          int v23 = *(float **)(a4 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v31 = (float *)(v29 + 4 * v26);
        *uint64_t v31 = v13;
        double v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *((_DWORD *)v23-- - 1);
          *((_DWORD *)v31-- - 1) = v32;
        }
        *(void *)a4 = v31;
        *(void *)(a4 + 8) = v24;
        *(void *)(a4 + 16) = v29 + 4 * v30;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *int v23 = v13;
        double v24 = v23 + 1;
      }
      *(void *)(a4 + 8) = v24;
      ++v8;
    }
    while (*(void *)(a1 + 56) > v8);
  }
}

void sub_25B53960C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B539624(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 96) = *(void *)(a1 + 88);
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  id v545 = (char **)(a1 + 8);
  sub_25B53BEA0(a2, a3, a4, (void **)(a1 + 8));
  if (a7)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(a5 + 8 * v13);
      int v16 = *(void **)(a1 + 72);
      unint64_t v15 = *(void *)(a1 + 80);
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = *(void *)(a1 + 64);
        uint64_t v19 = ((uint64_t)v16 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v20 = v15 - v18;
        uint64_t v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)sub_25B3FCAD4(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        double v24 = (void *)(v22 + 8 * v19);
        *double v24 = v14;
        int64_t v17 = v24 + 1;
        uint64_t v26 = *(char **)(a1 + 64);
        int v25 = *(char **)(a1 + 72);
        if (v25 != v26)
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *--double v24 = v27;
          }
          while (v25 != v26);
          int v25 = *(char **)(a1 + 64);
        }
        *(void *)(a1 + 64) = v24;
        *(void *)(a1 + 72) = v17;
        *(void *)(a1 + 80) = v22 + 8 * v23;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *int v16 = v14;
        int64_t v17 = v16 + 1;
      }
      *(void *)(a1 + 72) = v17;
      unint64_t v29 = *(char **)(a1 + 96);
      unint64_t v28 = *(void *)(a1 + 104);
      if ((unint64_t)v29 >= v28)
      {
        uint64_t v31 = *(char **)(a1 + 88);
        uint64_t v32 = (v29 - v31) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          unint64_t v35 = (unint64_t)sub_25B3FBC64(v35);
          uint64_t v31 = *(char **)(a1 + 88);
          unint64_t v29 = *(char **)(a1 + 96);
        }
        else
        {
          uint64_t v36 = 0;
        }
        float32x2_t v37 = (_DWORD *)(v35 + 4 * v32);
        *float32x2_t v37 = *(_DWORD *)(a6 + 4 * v13);
        uint64_t v30 = v37 + 1;
        while (v29 != v31)
        {
          int v38 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *--float32x2_t v37 = v38;
        }
        *(void *)(a1 + 88) = v37;
        *(void *)(a1 + 96) = v30;
        *(void *)(a1 + 104) = v35 + 4 * v36;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v29 = *(_DWORD *)(a6 + 4 * v13);
        uint64_t v30 = v29 + 4;
      }
      *(void *)(a1 + 96) = v30;
      ++v13;
    }
    while (v13 != a7);
  }
  *(void *)(a1 + 112) = a7;
  *(void *)a1 = a8;
  if (!*(void *)(a1 + 56))
  {
    a9[1] = *a9;
    return;
  }
  v567 = 0;
  float v568 = 0;
  unint64_t v569 = 0;
  v564 = 0;
  v565 = 0;
  unint64_t v566 = 0;
  sub_25B539380(a1, (void *)(a1 + 160), a8, (uint64_t)&v567);
  if (*(void *)(a1 + 56))
  {
    __p = 0;
    int32x2_t v39 = 0;
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = *(void *)a1;
    while (1)
    {
      uint64_t v43 = (float32x2_t *)(*(void *)(a1 + 8) + 16 * v41);
      float v44 = *(float *)(a1 + 272);
      float32x2_t v45 = vsub_f32(*v43, v43[1]);
      float v46 = *(float *)(a1 + 128) * sqrtf(vaddv_f32(vmul_f32(v45, v45)));
      unint64_t v47 = sub_25B53930C((void *)(a1 + 280), v46);
      v576[0] = 0;
      v576[1] = 0;
      unint64_t v577 = 0;
      sub_25B538EA8(a1, v43, v47, v42, (uint64_t)v576, v48, v49);
      int64_t v50 = (char *)v576[1] - (char *)v576[0];
      if (v576[1] != v576[0]) {
        break;
      }
      float v57 = *(float *)(a1 + 304);
      float v56 = 0.0;
      if (v576[1]) {
        goto LABEL_49;
      }
LABEL_50:
      if ((float)(v46 * (float)(1.0 - v56)) >= v57) {
        float v58 = 0.0;
      }
      else {
        float v58 = 1.0;
      }
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v60 = v39 - __p;
        unint64_t v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v40 - (void)__p) >> 1 > v61) {
          unint64_t v61 = (uint64_t)(v40 - (void)__p) >> 1;
        }
        if (v40 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62) {
          unint64_t v62 = (unint64_t)sub_25B3FBC64(v62);
        }
        else {
          uint64_t v63 = 0;
        }
        int v64 = (float *)(v62 + 4 * v60);
        float *v64 = v58;
        unint64_t v59 = v64 + 1;
        if (v39 == __p)
        {
          uint64_t v65 = __p;
        }
        else
        {
          uint64_t v65 = __p;
          do
          {
            int v66 = *((_DWORD *)v39-- - 1);
            *((_DWORD *)v64-- - 1) = v66;
          }
          while (v39 != __p);
        }
        unint64_t v40 = v62 + 4 * v63;
        if (v65) {
          operator delete(v65);
        }
        __p = v64;
      }
      else
      {
        *int32x2_t v39 = v58;
        unint64_t v59 = v39 + 1;
      }
      ++v41;
      int32x2_t v39 = v59;
      if (*(void *)(a1 + 56) <= v41) {
        goto LABEL_76;
      }
    }
    uint64_t v51 = v50 >> 2;
    if ((unint64_t)(v50 >> 2) <= 1) {
      uint64_t v52 = 1;
    }
    else {
      uint64_t v52 = v50 >> 2;
    }
    float v53 = 0.0;
    unint64_t v54 = (float *)v576[0];
    do
    {
      float v55 = *v54++;
      if (v55 >= v44) {
        float v53 = v53 + 1.0;
      }
      --v52;
    }
    while (v52);
    float v56 = v53 / (float)(unint64_t)v51;
    float v57 = *(float *)(a1 + 304);
LABEL_49:
    operator delete(v576[0]);
    goto LABEL_50;
  }
  __p = 0;
LABEL_76:
  long long v67 = *(float32x2_t **)(a1 + 8);
  uint64_t v68 = *(float32x2_t **)(a1 + 16);
  if (v67 == v68)
  {
    uint64_t v75 = 0;
  }
  else
  {
    float v69 = -1.0;
    uint64_t v70 = *(float32x2_t **)(a1 + 8);
    do
    {
      float32x2_t v71 = *v70;
      float32x2_t v72 = v70[1];
      v70 += 2;
      float32x2_t v73 = vsub_f32(v71, v72);
      float v74 = sqrtf(vaddv_f32(vmul_f32(v73, v73)));
      if (v69 < v74) {
        float v69 = v74;
      }
    }
    while (v70 != v68);
    uint64_t v75 = 0;
    int v76 = 0;
    unint64_t v77 = 0;
    if (v69 >= 0.001) {
      float v78 = v69;
    }
    else {
      float v78 = 0.001;
    }
    do
    {
      float32x2_t v79 = vsub_f32(*v67, v67[1]);
      float v80 = sqrtf(vaddv_f32(vmul_f32(v79, v79))) / v78;
      if ((unint64_t)v76 >= v77)
      {
        uint64_t v82 = v76 - v75;
        unint64_t v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v77 - (void)v75) >> 1 > v83) {
          unint64_t v83 = (uint64_t)(v77 - (void)v75) >> 1;
        }
        if (v77 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v83;
        }
        if (v84) {
          unint64_t v84 = (unint64_t)sub_25B3FBC64(v84);
        }
        else {
          uint64_t v85 = 0;
        }
        uint64_t v86 = (float *)(v84 + 4 * v82);
        float *v86 = v80;
        short float v81 = v86 + 1;
        while (v76 != v75)
        {
          int v87 = *((_DWORD *)v76-- - 1);
          *((_DWORD *)v86-- - 1) = v87;
        }
        unint64_t v77 = v84 + 4 * v85;
        if (v75) {
          operator delete(v75);
        }
        uint64_t v75 = v86;
      }
      else
      {
        float *v76 = v80;
        short float v81 = v76 + 1;
      }
      v67 += 2;
      int v76 = v81;
    }
    while (v67 != v68);
  }
  uint64_t v88 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v88)
  {
    uint64_t v89 = 0;
    unint64_t v90 = 0;
    uint64_t v91 = 0;
    unint64_t v92 = 0;
    float v93 = *(float *)(a1 + 152);
    float v94 = *(float *)(a1 + 140);
    uint64_t v95 = (float *)v567;
    uint64_t v96 = v565;
    do
    {
      float v97 = (float)((float)(*(float *)(v88 + 4 * v92) + (float)(v93 * v95[v92])) + (float)(v94 * v75[v92]))
          / (float)((float)(v93 + 1.0) + v94);
      if ((unint64_t)v91 >= v90)
      {
        uint64_t v98 = v91 - v89;
        unint64_t v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 62)
        {
          v565 = v96;
          unint64_t v566 = v90;
          v564 = v89;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v90 - (void)v89) >> 1 > v99) {
          unint64_t v99 = (uint64_t)(v90 - (void)v89) >> 1;
        }
        if (v90 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v100 = v99;
        }
        if (v100) {
          unint64_t v100 = (unint64_t)sub_25B3FBC64(v100);
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v102 = (float *)(v100 + 4 * v98);
        *uint64_t v102 = v97;
        uint64_t v96 = v102 + 1;
        while (v91 != v89)
        {
          int v103 = *((_DWORD *)v91-- - 1);
          *((_DWORD *)v102-- - 1) = v103;
        }
        unint64_t v90 = v100 + 4 * v101;
        if (v89) {
          operator delete(v89);
        }
        uint64_t v89 = v102;
      }
      else
      {
        *uint64_t v91 = v97;
        uint64_t v96 = v91 + 1;
      }
      ++v92;
      uint64_t v88 = *(void *)(a1 + 32);
      uint64_t v91 = v96;
    }
    while (v92 < (*(void *)(a1 + 40) - v88) >> 2);
    v565 = v96;
    unint64_t v566 = v90;
    v564 = v89;
  }
  if (v75) {
    operator delete(v75);
  }
  unint64_t v104 = *(void *)(a1 + 56);
  v573 = 0;
  v574 = 0;
  uint64_t v575 = 0;
  if (v104)
  {
    uint64_t v105 = 0;
    float32x2_t v546 = (float32x2_t)vdup_n_s32(0x358637BDu);
    do
    {
      for (uint64_t i = 0; i != v104; ++i)
      {
        if (i == v105)
        {
          LOBYTE(v576[0]) = 0;
          sub_25B40DC2C((uint64_t *)&v573, v576);
        }
        else
        {
          uint64_t v107 = *(void *)(a1 + 8);
          unint64_t v108 = (float32x2_t *)(v107 + 16 * i);
          long long v109 = (float32x2_t *)(v107 + 16 * v105);
          float v110 = *(float *)(a1 + 188);
          float v559 = *(float *)(a1 + 184);
          float v111 = *(float *)(a1 + 136);
          float v112 = *(float *)(a1 + 192);
          float v555 = sub_25B3FCCE0(v108, v109, 0);
          float32x2_t v113 = *v108;
          float32x2_t v114 = *v109;
          float32x2_t v115 = v109[1];
          long long v116 = (float32_t *)operator new(4uLL);
          *long long v116 = sub_25B40DB9C(v113, v114, v115, 0.00001);
          float32x2_t v117 = v108[1];
          long long v118 = (float *)sub_25B3FBC64(2uLL);
          uint64_t v120 = v119;
          long long v121 = &v118[v119];
          v118[1] = sub_25B40DB9C(v117, v114, v115, 0.00001);
          *long long v118 = *v116;
          operator delete(v116);
          float v122 = sub_25B40DB9C(*v109, *v108, v108[1], 0.00001);
          float v123 = v122;
          if (v120 < 3)
          {
            uint64_t v125 = 3;
            if ((unint64_t)((4 * v120) >> 1) > 3) {
              uint64_t v125 = (4 * v120) >> 1;
            }
            if ((unint64_t)(4 * v120) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v126 = v125;
            }
            if (v126) {
              unint64_t v126 = (unint64_t)sub_25B3FBC64(v126);
            }
            else {
              uint64_t v127 = 0;
            }
            uint64_t v128 = 0;
            long long v121 = (float *)(v126 + 4 * v127);
            *(float *)(v126 + 8) = v123;
            long long v124 = (float *)(v126 + 12);
            do
            {
              *(float *)(v126 + 8 + v128 * 4 - 4) = v118[v128 + 1];
              --v128;
            }
            while (v128 != -2);
            long long v129 = (float *)v126;
            operator delete(v118);
            long long v118 = v129;
          }
          else
          {
            v118[2] = v122;
            long long v124 = v118 + 3;
          }
          float v130 = sub_25B40DB9C(v109[1], *v108, v108[1], 0.00001);
          float v131 = v130;
          if (v124 >= v121)
          {
            uint64_t v133 = v124 - v118;
            unint64_t v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if (((char *)v121 - (char *)v118) >> 1 > v134) {
              unint64_t v134 = ((char *)v121 - (char *)v118) >> 1;
            }
            if ((unint64_t)((char *)v121 - (char *)v118) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v135 = v134;
            }
            if (v135) {
              unint64_t v135 = (unint64_t)sub_25B3FBC64(v135);
            }
            long long v136 = (float *)(v135 + 4 * v133);
            *long long v136 = v131;
            long long v132 = v136 + 1;
            while (v124 != v118)
            {
              int v137 = *((_DWORD *)v124-- - 1);
              *((_DWORD *)v136-- - 1) = v137;
            }
            operator delete(v118);
            long long v118 = v136;
          }
          else
          {
            float *v124 = v130;
            long long v132 = v124 + 1;
          }
          float v138 = v110;
          long long v139 = v118 + 1;
          BOOL v140 = v118 == v132 || v139 == v132;
          uint64_t v141 = v118;
          if (!v140)
          {
            float v142 = *v118;
            uint64_t v141 = v118;
            long long v143 = v118 + 1;
            do
            {
              float v144 = *v143++;
              float v145 = v144;
              if (v144 < v142)
              {
                float v142 = v145;
                uint64_t v141 = v139;
              }
              long long v139 = v143;
            }
            while (v143 != v132);
          }
          float32x2_t v146 = vsub_f32(*v108, v108[1]);
          int32x2_t v147 = (int32x2_t)vmul_f32(v146, v146);
          float32x2_t v148 = vsub_f32(*v109, v109[1]);
          int32x2_t v149 = (int32x2_t)vmul_f32(v148, v148);
          float32x2_t v150 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v149, v147), (float32x2_t)vzip2_s32(v149, v147)));
          float32x2_t v151 = vmul_n_f32(v150, *(float *)(a1 + 128));
          if (v151.f32[0] >= v151.f32[1]) {
            v151.f32[0] = v151.f32[1];
          }
          BOOL v152 = v151.f32[0] < v111;
          if (v555 >= v112) {
            BOOL v152 = 0;
          }
          if (v555 < v559) {
            BOOL v152 = 1;
          }
          float v153 = v138;
          float v552 = *v141;
          char v154 = *v141 < v138 && v152;
          uint64_t v155 = (float *)operator new(8uLL);
          sub_25B40D638();
          float32x2_t v157 = v156;
          float32x2_t v159 = v158;
          sub_25B40D638();
          float32x2_t v160 = vsub_f32(v157, v159);
          int32x2_t v161 = (int32x2_t)vmul_f32(v160, v160);
          float32x2_t v164 = vsub_f32(v162, v163);
          int32x2_t v165 = (int32x2_t)vmul_f32(v164, v164);
          float32x2_t v166 = vdiv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v165, v161), (float32x2_t)vzip2_s32(v165, v161))), vmaxnm_f32(v150, v546));
          *(float32x2_t *)uint64_t v155 = v166;
          if (v155[1] >= v166.f32[0]) {
            float v167 = *v155;
          }
          else {
            float v167 = v155[1];
          }
          if (v167 >= *(float *)(a1 + 196) && v552 < v153)
          {
            float v169 = 180.0 - v555;
            if ((float)(180.0 - v555) >= v555) {
              float v169 = v555;
            }
            if (v169 < v559) {
              char v154 = 1;
            }
          }
          operator delete(v155);
          operator delete(v118);
          LOBYTE(v576[0]) = v154;
          sub_25B40DC2C((uint64_t *)&v573, v576);
        }
      }
      ++v105;
    }
    while (v105 != v104);
  }
  uint64_t v170 = *(void *)(a1 + 16);
  if (v170 == *(void *)(a1 + 8))
  {
    BOOL v171 = 0;
    long long v172 = 0;
    uint64_t v203 = *(void *)(a1 + 16);
  }
  else
  {
    BOOL v171 = 0;
    long long v172 = 0;
    uint64_t v173 = 0;
    unint64_t v174 = 0;
    uint64_t v175 = v564;
    uint64_t v170 = *(void *)(a1 + 8);
    do
    {
      uint64_t v176 = (float32x2_t *)(v170 + 16 * v174);
      float32x2_t v177 = *v176;
      float32x2_t v178 = v176[1];
      uint64_t v180 = *(void *)(a1 + 64);
      uint64_t v179 = *(void *)(a1 + 72);
      uint64_t v181 = v179 - v180;
      if (v179 == v180)
      {
        LODWORD(v185) = -1;
        LODWORD(v182) = -1;
      }
      else
      {
        uint64_t v182 = 0;
        unint64_t v183 = v181 >> 3;
        if (v183 <= 1) {
          unint64_t v183 = 1;
        }
        while (1)
        {
          int32x2_t v184 = vceq_f32(v177, *(float32x2_t *)(v180 + 8 * v182));
          if (v184.i32[0] & v184.i32[1]) {
            break;
          }
          if (v183 == ++v182)
          {
            LODWORD(v182) = -1;
            break;
          }
        }
        uint64_t v185 = 0;
        while (1)
        {
          int32x2_t v186 = vceq_f32(v178, *(float32x2_t *)(v180 + 8 * v185));
          if (v186.i32[0] & v186.i32[1]) {
            break;
          }
          if (v183 == ++v185)
          {
            LODWORD(v185) = -1;
            break;
          }
        }
      }
      int v187 = v175[v174];
      int v188 = (int)__p[v174];
      float32x2_t v189 = vsub_f32(v177, v178);
      float v190 = sqrtf(vaddv_f32(vmul_f32(v189, v189)));
      uint64_t v191 = *(void *)(a1 + 88);
      float v192 = *(float *)(v191 + 4 * (int)v182);
      float v193 = *(float *)(v191 + 4 * (int)v185);
      if (v192 < 0.1) {
        int v194 = 1;
      }
      else {
        int v194 = 2;
      }
      if (v193 >= 0.1) {
        BOOL v195 = v194;
      }
      else {
        BOOL v195 = v192 >= 0.1;
      }
      if (v172 >= v173)
      {
        unint64_t v196 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3) + 1;
        if (v196 > 0xAAAAAAAAAAAAAAALL) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((v173 - v171) >> 3) > v196) {
          unint64_t v196 = 0x5555555555555556 * ((v173 - v171) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v173 - v171) >> 3) >= 0x555555555555555) {
          unint64_t v197 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v197 = v196;
        }
        if (v197)
        {
          if (v197 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FA70C();
          }
          uint64_t v198 = (char *)operator new(24 * v197);
        }
        else
        {
          uint64_t v198 = 0;
        }
        uint64_t v199 = &v198[8 * ((v172 - v171) >> 3)];
        *(_DWORD *)uint64_t v199 = v187;
        *((float *)v199 + 1) = v190;
        *((_DWORD *)v199 + 2) = v188;
        *((_DWORD *)v199 + 3) = v195;
        *((void *)v199 + 2) = v174;
        if (v172 == v171)
        {
          char v202 = &v198[8 * ((v172 - v171) >> 3)];
        }
        else
        {
          uint64_t v200 = &v198[8 * ((v172 - v171) >> 3)];
          do
          {
            long long v201 = *(_OWORD *)(v172 - 24);
            char v202 = v200 - 24;
            *((void *)v200 - 1) = *((void *)v172 - 1);
            *(_OWORD *)(v200 - 24) = v201;
            v172 -= 24;
            v200 -= 24;
          }
          while (v172 != v171);
        }
        uint64_t v173 = &v198[24 * v197];
        long long v172 = v199 + 24;
        if (v171) {
          operator delete(v171);
        }
        BOOL v171 = v202;
      }
      else
      {
        *(_DWORD *)long long v172 = v187;
        *((float *)v172 + 1) = v190;
        *((_DWORD *)v172 + 2) = v188;
        *((_DWORD *)v172 + 3) = v195;
        *((void *)v172 + 2) = v174;
        v172 += 24;
      }
      ++v174;
      uint64_t v170 = *(void *)(a1 + 8);
      uint64_t v203 = *(void *)(a1 + 16);
    }
    while (v174 < (v203 - v170) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3) < 2) {
    goto LABEL_252;
  }
  unint64_t v204 = 1;
  do
  {
    unint64_t v205 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
    if (v205 == v204) {
      break;
    }
    uint64_t v206 = 0;
    unint64_t v207 = 0;
    do
    {
      if (++v207 >= v205) {
        goto LABEL_241;
      }
      uint64_t v208 = &v171[v206];
      uint64_t v209 = (float *)&v171[v206 + 24];
      int v210 = *(_DWORD *)&v171[v206 + 8];
      if (v210 == 1 - *(_DWORD *)&v171[v206 + 32])
      {
        if (v210 == 1) {
          goto LABEL_241;
        }
LABEL_240:
        v576[0] = 0;
        v576[1] = 0;
        unint64_t v577 = 0;
        long long v211 = *(_OWORD *)v208;
        unint64_t v577 = *((void *)v208 + 2);
        *(_OWORD *)unint64_t v576 = v211;
        *(_OWORD *)uint64_t v208 = *(_OWORD *)v209;
        *((void *)v208 + 2) = *(void *)&v171[v206 + 40];
        long long v212 = &v171[v206 + 24];
        long long v213 = *(_OWORD *)v576;
        *((void *)v212 + 2) = v577;
        *(_OWORD *)long long v212 = v213;
        goto LABEL_241;
      }
      int v214 = *((_DWORD *)v208 + 3);
      int v215 = *((_DWORD *)v208 + 9);
      if (v214 == v215)
      {
        float v216 = *(float *)v208;
        float v217 = *v209;
        if (vabds_f32(*(float *)v208, *v209) < *(float *)(a1 + 200))
        {
          float v216 = *(float *)&v171[v206 + 4];
          float v217 = *(float *)&v171[v206 + 28];
        }
        if (v216 < v217) {
          goto LABEL_240;
        }
      }
      else if (v214 <= v215)
      {
        goto LABEL_240;
      }
LABEL_241:
      unint64_t v205 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
      v206 += 24;
    }
    while (v207 < v205 - v204);
    ++v204;
  }
  while (v204 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
  uint64_t v170 = *(void *)(a1 + 8);
  uint64_t v203 = *(void *)(a1 + 16);
LABEL_252:
  if (v203 == v170)
  {
    long long v229 = 0;
    if (v171) {
      goto LABEL_273;
    }
  }
  else
  {
    v560 = 0;
    long long v218 = 0;
    unint64_t v219 = 0;
    unint64_t v220 = 0;
    do
    {
      long long v221 = &v171[24 * v220 + 16];
      if ((unint64_t)v218 >= v219)
      {
        uint64_t v223 = (v218 - v560) >> 3;
        unint64_t v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v219 - (void)v560) >> 2 > v224) {
          unint64_t v224 = (uint64_t)(v219 - (void)v560) >> 2;
        }
        if (v219 - (unint64_t)v560 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v225 = v224;
        }
        if (v225) {
          unint64_t v225 = (unint64_t)sub_25B3FCAD4(v225);
        }
        else {
          uint64_t v226 = 0;
        }
        long long v227 = (char *)(v225 + 8 * v223);
        *(void *)long long v227 = *(void *)v221;
        uint64_t v222 = v227 + 8;
        while (v218 != v560)
        {
          uint64_t v228 = *((void *)v218 - 1);
          v218 -= 8;
          *((void *)v227 - 1) = v228;
          v227 -= 8;
        }
        unint64_t v219 = v225 + 8 * v226;
        if (v560) {
          operator delete(v560);
        }
        v560 = v227;
      }
      else
      {
        *(void *)long long v218 = *(void *)v221;
        uint64_t v222 = v218 + 8;
      }
      ++v220;
      long long v218 = v222;
    }
    while (v220 < (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
    long long v229 = v560;
    if (v171) {
LABEL_273:
    }
      operator delete(v171);
  }
  LOBYTE(v570) = 0;
  sub_25B443750(v576, v104, (unsigned __int8 *)&v570);
  if (!v104)
  {
    long long v245 = 0;
    goto LABEL_462;
  }
  float v556 = 0;
  uint64_t v561 = v229;
  float v230 = 0;
  unint64_t v231 = 0;
  uint64_t v232 = 0;
  while (2)
  {
    unint64_t v233 = *(void *)&v229[8 * v232];
    int v234 = v576[0];
    if ((*(void *)((char *)v576[0] + ((v233 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v233))
    {
LABEL_285:
      long long v229 = v561;
    }
    else
    {
      unint64_t v235 = 0;
      long long v236 = (char *)v573;
      do
      {
        if (v233 != v235)
        {
          uint64_t v237 = v234[v235 >> 6];
          if ((v237 & (1 << v235)) == 0
            && ((*(void *)&v236[((v233 * v104 + v235) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v233
                                                                                        * v104
                                                                                        + v235)) & 1) != 0)
          {
            v234[v235 >> 6] = v237 | (1 << v235);
          }
        }
        ++v235;
      }
      while (v104 != v235);
      if ((unint64_t)v230 < v231)
      {
        *(void *)float v230 = v233;
        v230 += 8;
        goto LABEL_285;
      }
      uint64_t v238 = (v230 - v556) >> 3;
      unint64_t v239 = v238 + 1;
      if ((unint64_t)(v238 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v231 - (void)v556) >> 2 > v239) {
        unint64_t v239 = (uint64_t)(v231 - (void)v556) >> 2;
      }
      if (v231 - (unint64_t)v556 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v240 = v239;
      }
      if (v240) {
        unint64_t v240 = (unint64_t)sub_25B3FCAD4(v240);
      }
      else {
        uint64_t v241 = 0;
      }
      long long v242 = (char *)(v240 + 8 * v238);
      *(void *)long long v242 = v233;
      int v243 = v242 + 8;
      if (v230 == v556)
      {
        long long v229 = v561;
      }
      else
      {
        long long v229 = v561;
        do
        {
          uint64_t v244 = *((void *)v230 - 1);
          v230 -= 8;
          *((void *)v242 - 1) = v244;
          v242 -= 8;
        }
        while (v230 != v556);
      }
      unint64_t v231 = v240 + 8 * v241;
      if (v556) {
        operator delete(v556);
      }
      float v556 = v242;
      float v230 = v243;
    }
    if (++v232 != v104) {
      continue;
    }
    break;
  }
  long long v245 = v556;
  if (v230 == v556)
  {
LABEL_462:
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
LABEL_463:
    unint64_t v302 = 0;
    float32x4_t v305 = 0;
    float v568 = (char *)v567;
    v565 = (float *)v564;
    goto LABEL_464;
  }
  long long v246 = 0;
  long long v247 = 0;
  unint64_t v248 = 0;
  int v249 = 0;
  long long v250 = 0;
  unint64_t v251 = 0;
  uint64_t v252 = 0;
  unint64_t v253 = (v230 - v556) >> 3;
  unint64_t v547 = v253;
  if (v253 <= 1) {
    unint64_t v253 = 1;
  }
  unint64_t v553 = v253;
  do
  {
    uint64_t v254 = *(void *)&v245[8 * v252];
    uint64_t v255 = &(*v545)[16 * v254];
    if ((unint64_t)v247 >= v248)
    {
      uint64_t v549 = v254;
      uint64_t v256 = (v247 - v246) >> 4;
      unint64_t v257 = v256 + 1;
      if ((unint64_t)(v256 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      unint64_t v258 = v251;
      unint64_t v259 = v248 - (void)v246;
      unint64_t v260 = (uint64_t)(v248 - (void)v246) >> 3;
      if (v260 > v257) {
        unint64_t v257 = v260;
      }
      if (v259 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v261 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v261 = v257;
      }
      if (v261) {
        unint64_t v261 = (unint64_t)sub_25B3FFAEC(v261);
      }
      else {
        uint64_t v262 = 0;
      }
      int v263 = (_OWORD *)(v261 + 16 * v256);
      *int v263 = *(_OWORD *)v255;
      if (v247 == v246)
      {
        long long v265 = (char *)(v261 + 16 * v256);
      }
      else
      {
        unint64_t v264 = v261 + 16 * v256;
        do
        {
          long long v265 = (char *)(v264 - 16);
          *(_OWORD *)(v264 - 16) = *((_OWORD *)v247 - 1);
          v247 -= 16;
          v264 -= 16;
        }
        while (v247 != v246);
      }
      unint64_t v248 = v261 + 16 * v262;
      long long v247 = (char *)(v263 + 1);
      if (v246)
      {
        unint64_t v266 = v261 + 16 * v262;
        operator delete(v246);
        unint64_t v248 = v266;
      }
      long long v246 = v265;
      unint64_t v251 = v258;
      uint64_t v254 = v549;
    }
    else
    {
      *(_OWORD *)long long v247 = *(_OWORD *)v255;
      v247 += 16;
    }
    uint64_t v267 = *(void *)(a1 + 32);
    if ((unint64_t)v250 >= v251)
    {
      unint64_t v550 = v248;
      uint64_t v269 = (v250 - v249) >> 2;
      unint64_t v270 = v269 + 1;
      if ((unint64_t)(v269 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v251 - (void)v249) >> 1 > v270) {
        unint64_t v270 = (uint64_t)(v251 - (void)v249) >> 1;
      }
      if (v251 - (unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v271 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v271 = v270;
      }
      if (v271) {
        unint64_t v271 = (unint64_t)sub_25B3FBC64(v271);
      }
      else {
        uint64_t v272 = 0;
      }
      uint64_t v273 = (char *)(v271 + 4 * v269);
      *(_DWORD *)uint64_t v273 = *(_DWORD *)(v267 + 4 * v254);
      int v268 = v273 + 4;
      while (v250 != v249)
      {
        int v274 = *((_DWORD *)v250 - 1);
        v250 -= 4;
        *((_DWORD *)v273 - 1) = v274;
        v273 -= 4;
      }
      unint64_t v251 = v271 + 4 * v272;
      if (v249)
      {
        unint64_t v275 = v271 + 4 * v272;
        operator delete(v249);
        unint64_t v251 = v275;
      }
      int v249 = v273;
      unint64_t v248 = v550;
    }
    else
    {
      *(_DWORD *)long long v250 = *(_DWORD *)(v267 + 4 * v254);
      int v268 = v250 + 4;
    }
    ++v252;
    long long v250 = v268;
    long long v245 = v556;
  }
  while (v252 != v553);
  uint64_t v276 = 0;
  *(void *)(a1 + 56) = v547;
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  do
  {
    char v277 = &v246[16 * v276];
    uint64_t v279 = *(_OWORD **)(a1 + 16);
    unint64_t v278 = *(void *)(a1 + 24);
    if ((unint64_t)v279 >= v278)
    {
      uint64_t v281 = ((char *)v279 - *v545) >> 4;
      unint64_t v282 = v281 + 1;
      if ((unint64_t)(v281 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v283 = v278 - (void)*v545;
      if (v283 >> 3 > v282) {
        unint64_t v282 = v283 >> 3;
      }
      if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v284 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v284 = v282;
      }
      if (v284) {
        unint64_t v284 = (unint64_t)sub_25B3FFAEC(v284);
      }
      else {
        uint64_t v285 = 0;
      }
      uint64_t v286 = (_OWORD *)(v284 + 16 * v281);
      *uint64_t v286 = *(_OWORD *)v277;
      int64_t v288 = *(char **)(a1 + 8);
      unint64_t v287 = *(char **)(a1 + 16);
      char v289 = v286;
      if (v287 != v288)
      {
        do
        {
          *--char v289 = *((_OWORD *)v287 - 1);
          v287 -= 16;
        }
        while (v287 != v288);
        unint64_t v287 = *v545;
      }
      char v280 = v286 + 1;
      *(void *)(a1 + 8) = v289;
      *(void *)(a1 + 16) = v286 + 1;
      *(void *)(a1 + 24) = v284 + 16 * v285;
      if (v287) {
        operator delete(v287);
      }
    }
    else
    {
      *uint64_t v279 = *(_OWORD *)v277;
      char v280 = v279 + 1;
    }
    *(void *)(a1 + 16) = v280;
    unint64_t v291 = *(char **)(a1 + 40);
    unint64_t v290 = *(void *)(a1 + 48);
    if ((unint64_t)v291 >= v290)
    {
      char v293 = *(char **)(a1 + 32);
      uint64_t v294 = (v291 - v293) >> 2;
      unint64_t v295 = v294 + 1;
      if ((unint64_t)(v294 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      uint64_t v296 = v290 - (void)v293;
      if (v296 >> 1 > v295) {
        unint64_t v295 = v296 >> 1;
      }
      BOOL v297 = (unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v298 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v297) {
        unint64_t v298 = v295;
      }
      if (v298)
      {
        unint64_t v298 = (unint64_t)sub_25B3FBC64(v298);
        char v293 = *(char **)(a1 + 32);
        unint64_t v291 = *(char **)(a1 + 40);
      }
      else
      {
        uint64_t v299 = 0;
      }
      int v300 = (_DWORD *)(v298 + 4 * v294);
      *int v300 = *(_DWORD *)&v249[4 * v276];
      uint64_t v292 = v300 + 1;
      while (v291 != v293)
      {
        int v301 = *((_DWORD *)v291 - 1);
        v291 -= 4;
        *--int v300 = v301;
      }
      *(void *)(a1 + 32) = v300;
      *(void *)(a1 + 40) = v292;
      *(void *)(a1 + 48) = v298 + 4 * v299;
      if (v293) {
        operator delete(v293);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v291 = *(_DWORD *)&v249[4 * v276];
      uint64_t v292 = v291 + 4;
    }
    *(void *)(a1 + 40) = v292;
    ++v276;
  }
  while (v276 != v553);
  if (v249) {
    operator delete(v249);
  }
  long long v229 = v561;
  if (v246) {
    operator delete(v246);
  }
  if (v230 == v556) {
    goto LABEL_463;
  }
  unint64_t v302 = 0;
  long long v303 = 0;
  unint64_t v304 = 0;
  float32x4_t v305 = 0;
  v306 = 0;
  unint64_t v307 = 0;
  uint64_t v308 = 0;
  uint64_t v309 = (v230 - v556) >> 3;
  if (v547 <= 1) {
    uint64_t v309 = 1;
  }
  uint64_t v548 = v309;
  do
  {
    uint64_t v310 = *(void *)&v556[8 * v308];
    int v311 = v567;
    if ((unint64_t)v303 >= v304)
    {
      uint64_t v312 = (v303 - v302) >> 2;
      unint64_t v313 = v312 + 1;
      if ((unint64_t)(v312 + 1) >> 62) {
        goto LABEL_801;
      }
      unint64_t v314 = v307;
      unint64_t v315 = v304 - (void)v302;
      unint64_t v316 = (uint64_t)(v304 - (void)v302) >> 1;
      if (v316 > v313) {
        unint64_t v313 = v316;
      }
      if (v315 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v317 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v317 = v313;
      }
      if (v317) {
        unint64_t v317 = (unint64_t)sub_25B3FBC64(v317);
      }
      else {
        uint64_t v318 = 0;
      }
      long long v319 = (char *)(v317 + 4 * v312);
      *(_DWORD *)long long v319 = v311[v310];
      uint64_t v320 = v319 + 4;
      while (v303 != v302)
      {
        int v321 = *((_DWORD *)v303 - 1);
        v303 -= 4;
        *((_DWORD *)v319 - 1) = v321;
        v319 -= 4;
      }
      unint64_t v304 = v317 + 4 * v318;
      if (v302)
      {
        uint64_t v322 = v302;
        unint64_t v323 = v304;
        operator delete(v322);
        unint64_t v304 = v323;
      }
      unint64_t v302 = v319;
      long long v303 = v320;
      unint64_t v307 = v314;
    }
    else
    {
      *(_DWORD *)long long v303 = *((_DWORD *)v567 + v310);
      v303 += 4;
    }
    if ((unint64_t)v306 >= v307)
    {
      uint64_t v325 = (v306 - v305) >> 2;
      unint64_t v326 = v325 + 1;
      if ((unint64_t)(v325 + 1) >> 62) {
LABEL_801:
      }
        sub_25B3FBC4C();
      unint64_t v327 = v304;
      if ((uint64_t)(v307 - (void)v305) >> 1 > v326) {
        unint64_t v326 = (uint64_t)(v307 - (void)v305) >> 1;
      }
      if (v307 - (unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v328 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v328 = v326;
      }
      if (v328) {
        unint64_t v328 = (unint64_t)sub_25B3FBC64(v328);
      }
      else {
        uint64_t v329 = 0;
      }
      int v330 = (char *)(v328 + 4 * v325);
      *(_DWORD *)int v330 = *((_DWORD *)v564 + v310);
      float32x2_t v324 = v330 + 4;
      while (v306 != v305)
      {
        int v331 = *((_DWORD *)v306 - 1);
        v306 -= 4;
        *((_DWORD *)v330 - 1) = v331;
        v330 -= 4;
      }
      unint64_t v307 = v328 + 4 * v329;
      if (v305)
      {
        unint64_t v332 = v328 + 4 * v329;
        operator delete(v305);
        unint64_t v307 = v332;
      }
      float32x4_t v305 = v330;
      unint64_t v304 = v327;
    }
    else
    {
      *(_DWORD *)v306 = *((_DWORD *)v564 + v310);
      float32x2_t v324 = v306 + 4;
    }
    ++v308;
    v306 = v324;
  }
  while (v308 != v548);
  uint64_t v333 = 0;
  int v334 = v567;
  float v568 = (char *)v567;
  float32x4_t v335 = (char *)v564;
  unint64_t v551 = v566;
  unint64_t v554 = v569;
  v565 = (float *)v564;
  long long v336 = (char *)v564;
  do
  {
    int v337 = v568;
    if ((unint64_t)v568 >= v554)
    {
      uint64_t v339 = (v568 - v334) >> 2;
      unint64_t v340 = v339 + 1;
      if ((unint64_t)(v339 + 1) >> 62) {
        goto LABEL_802;
      }
      if ((uint64_t)(v554 - (void)v334) >> 1 > v340) {
        unint64_t v340 = (uint64_t)(v554 - (void)v334) >> 1;
      }
      if (v554 - (unint64_t)v334 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v341 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v341 = v340;
      }
      if (v341) {
        unint64_t v341 = (unint64_t)sub_25B3FBC64(v341);
      }
      else {
        uint64_t v342 = 0;
      }
      unint64_t v343 = (_DWORD *)(v341 + 4 * v339);
      *unint64_t v343 = *(_DWORD *)&v302[4 * v333];
      uint64_t v338 = (char *)(v343 + 1);
      while (v337 != v334)
      {
        int v344 = *((_DWORD *)v337 - 1);
        v337 -= 4;
        *--unint64_t v343 = v344;
      }
      unint64_t v554 = v341 + 4 * v342;
      float v568 = v338;
      if (v334)
      {
        operator delete(v334);
        float32x4_t v335 = (char *)v565;
      }
      int v334 = v343;
    }
    else
    {
      *(_DWORD *)float v568 = *(_DWORD *)&v302[4 * v333];
      uint64_t v338 = v337 + 4;
    }
    float v568 = v338;
    if ((unint64_t)v335 >= v551)
    {
      uint64_t v346 = (v335 - v336) >> 2;
      unint64_t v347 = v346 + 1;
      if ((unint64_t)(v346 + 1) >> 62)
      {
LABEL_802:
        unint64_t v569 = v554;
        unint64_t v566 = v551;
        v567 = v334;
        v564 = v336;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v551 - (void)v336) >> 1 > v347) {
        unint64_t v347 = (uint64_t)(v551 - (void)v336) >> 1;
      }
      if (v551 - (unint64_t)v336 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v348 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v348 = v347;
      }
      if (v348) {
        unint64_t v348 = (unint64_t)sub_25B3FBC64(v348);
      }
      else {
        uint64_t v349 = 0;
      }
      int v350 = (_DWORD *)(v348 + 4 * v346);
      *int v350 = *(_DWORD *)&v305[4 * v333];
      float32x4_t v345 = (float *)(v350 + 1);
      while (v335 != v336)
      {
        int v351 = *((_DWORD *)v335 - 1);
        v335 -= 4;
        *--int v350 = v351;
      }
      unint64_t v551 = v348 + 4 * v349;
      v565 = v345;
      if (v336) {
        operator delete(v336);
      }
      long long v336 = (char *)v350;
    }
    else
    {
      *(_DWORD *)float32x4_t v335 = *(_DWORD *)&v305[4 * v333];
      float32x4_t v345 = (float *)(v335 + 4);
    }
    v565 = v345;
    ++v333;
    float32x4_t v335 = (char *)v345;
  }
  while (v333 != v548);
  long long v245 = v556;
  unint64_t v569 = v554;
  unint64_t v566 = v551;
  v567 = v334;
  v564 = v336;
  long long v229 = v561;
LABEL_464:
  if (v576[0]) {
    operator delete(v576[0]);
  }
  if (v305) {
    operator delete(v305);
  }
  if (v302) {
    operator delete(v302);
  }
  if (v245) {
    operator delete(v245);
  }
  if (v229) {
    operator delete(v229);
  }
  if (v573) {
    operator delete(v573);
  }
  uint64_t v352 = *(void *)(a1 + 56);
  if (!v352)
  {
    uint64_t v367 = 0;
    v370 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    int32x2_t v396 = *(char **)(a1 + 32);
    *(void *)(a1 + 40) = v396;
LABEL_573:
    uint64_t v413 = (uint64_t)v396;
    goto LABEL_574;
  }
  uint64_t v353 = 0;
  uint64_t v354 = *(void *)(a1 + 8);
  uint64_t v355 = *(void *)(a1 + 32);
  uint64_t v356 = (float *)v567;
  uint64_t v357 = v564;
  uint64_t v358 = (void *)(a1 + 216);
  float v359 = *(void **)(a1 + 208);
  do
  {
    if (v359 != v358)
    {
      float32x2_t v360 = vsub_f32(*(float32x2_t *)(v354 + 16 * v353), *(float32x2_t *)(v354 + 16 * v353 + 8));
      float v361 = *(float *)(a1 + 128) * sqrtf(vaddv_f32(vmul_f32(v360, v360)));
      uint64_t v362 = v359;
      do
      {
        uint64_t v363 = (float *)v362[4];
        if (*v363 < v361 && v363[1] >= v361)
        {
          for (uint64_t j = v362[7]; j != v362[8]; j += 24)
          {
            if (**(float **)j <= *(float *)(v355 + 4 * v353) && *(float *)(*(void *)j + 4) <= v356[v353]) {
              goto LABEL_495;
            }
          }
        }
        unint64_t v364 = (void *)v362[1];
        if (v364)
        {
          do
          {
            uint64_t v365 = v364;
            unint64_t v364 = (void *)*v364;
          }
          while (v364);
        }
        else
        {
          do
          {
            uint64_t v365 = (void *)v362[2];
            BOOL v140 = *v365 == (void)v362;
            uint64_t v362 = v365;
          }
          while (!v140);
        }
        uint64_t v362 = v365;
      }
      while (v365 != v358);
    }
    v357[v353] = 0;
LABEL_495:
    ++v353;
  }
  while (v353 != v352);
  uint64_t v367 = 0;
  uint64_t v368 = 0;
  unint64_t v369 = 0;
  v370 = 0;
  uint64_t v371 = 0;
  unint64_t v372 = 0;
  uint64_t v373 = 0;
  float v562 = 0;
  do
  {
    if (*((float *)v564 + v373) > 0.000001)
    {
      float32x2_t v374 = &(*v545)[16 * v373];
      if ((unint64_t)v368 >= v369)
      {
        uint64_t v375 = (v368 - v367) >> 4;
        unint64_t v376 = v375 + 1;
        if ((unint64_t)(v375 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        unint64_t v377 = v372;
        unint64_t v378 = v369 - (void)v367;
        unint64_t v379 = (uint64_t)(v369 - (void)v367) >> 3;
        if (v379 > v376) {
          unint64_t v376 = v379;
        }
        if (v378 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v380 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v380 = v376;
        }
        if (v380) {
          unint64_t v380 = (unint64_t)sub_25B3FFAEC(v380);
        }
        else {
          uint64_t v381 = 0;
        }
        float32x2_t v382 = (_OWORD *)(v380 + 16 * v375);
        _OWORD *v382 = *(_OWORD *)v374;
        if (v368 == v367)
        {
          float32x2_t v384 = (char *)(v380 + 16 * v375);
        }
        else
        {
          unint64_t v383 = v380 + 16 * v375;
          do
          {
            float32x2_t v384 = (char *)(v383 - 16);
            *(_OWORD *)(v383 - 16) = *((_OWORD *)v368 - 1);
            v368 -= 16;
            v383 -= 16;
          }
          while (v368 != v367);
        }
        unint64_t v369 = v380 + 16 * v381;
        uint64_t v368 = (char *)(v382 + 1);
        if (v367)
        {
          int32x2_t v385 = v367;
          unint64_t v386 = v369;
          operator delete(v385);
          unint64_t v369 = v386;
        }
        uint64_t v367 = v384;
        unint64_t v372 = v377;
      }
      else
      {
        *(_OWORD *)uint64_t v368 = *(_OWORD *)v374;
        v368 += 16;
      }
      if ((unint64_t)v371 >= v372)
      {
        uint64_t v388 = (v371 - v370) >> 2;
        unint64_t v389 = v388 + 1;
        if ((unint64_t)(v388 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        unint64_t v390 = v369;
        if ((uint64_t)(v372 - (void)v370) >> 1 > v389) {
          unint64_t v389 = (uint64_t)(v372 - (void)v370) >> 1;
        }
        if (v372 - (unint64_t)v370 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v391 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v391 = v389;
        }
        if (v391) {
          unint64_t v391 = (unint64_t)sub_25B3FBC64(v391);
        }
        else {
          uint64_t v392 = 0;
        }
        float32x2_t v393 = (char *)(v391 + 4 * v388);
        *(_DWORD *)float32x2_t v393 = *((_DWORD *)v564 + v373);
        int32x2_t v387 = v393 + 4;
        while (v371 != v370)
        {
          int v394 = *((_DWORD *)v371 - 1);
          v371 -= 4;
          *((_DWORD *)v393 - 1) = v394;
          v393 -= 4;
        }
        unint64_t v372 = v391 + 4 * v392;
        if (v370)
        {
          unint64_t v395 = v391 + 4 * v392;
          operator delete(v370);
          unint64_t v372 = v395;
        }
        v370 = v393;
        unint64_t v369 = v390;
      }
      else
      {
        *(_DWORD *)uint64_t v371 = *((_DWORD *)v564 + v373);
        int32x2_t v387 = v371 + 4;
      }
      ++v562;
      uint64_t v371 = v387;
    }
    ++v373;
  }
  while (v373 != v352);
  *(void *)(a1 + 56) = v562;
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  int32x2_t v396 = *(char **)(a1 + 32);
  *(void *)(a1 + 40) = v396;
  if (!v562) {
    goto LABEL_573;
  }
  for (uint64_t k = 0; k != v562; ++k)
  {
    float32x2_t v398 = &v367[16 * (void)k];
    float v400 = *(_OWORD **)(a1 + 16);
    unint64_t v399 = *(void *)(a1 + 24);
    if ((unint64_t)v400 >= v399)
    {
      uint64_t v402 = ((char *)v400 - *v545) >> 4;
      unint64_t v403 = v402 + 1;
      if ((unint64_t)(v402 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v404 = v399 - (void)*v545;
      if (v404 >> 3 > v403) {
        unint64_t v403 = v404 >> 3;
      }
      if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v405 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v405 = v403;
      }
      if (v405) {
        unint64_t v405 = (unint64_t)sub_25B3FFAEC(v405);
      }
      else {
        uint64_t v406 = 0;
      }
      int32x2_t v407 = (_OWORD *)(v405 + 16 * v402);
      *int32x2_t v407 = *(_OWORD *)v398;
      float32x2_t v409 = *(char **)(a1 + 8);
      int32x2_t v408 = *(char **)(a1 + 16);
      float32x2_t v410 = v407;
      if (v408 != v409)
      {
        do
        {
          *--float32x2_t v410 = *((_OWORD *)v408 - 1);
          v408 -= 16;
        }
        while (v408 != v409);
        int32x2_t v408 = *v545;
      }
      float v401 = v407 + 1;
      *(void *)(a1 + 8) = v410;
      *(void *)(a1 + 16) = v407 + 1;
      *(void *)(a1 + 24) = v405 + 16 * v406;
      if (v408) {
        operator delete(v408);
      }
    }
    else
    {
      _OWORD *v400 = *(_OWORD *)v398;
      float v401 = v400 + 1;
    }
    *(void *)(a1 + 16) = v401;
    int32x2_t v412 = *(char **)(a1 + 40);
    unint64_t v411 = *(void *)(a1 + 48);
    if ((unint64_t)v412 >= v411)
    {
      int32x2_t v414 = *(char **)(a1 + 32);
      uint64_t v415 = (v412 - v414) >> 2;
      unint64_t v416 = v415 + 1;
      if ((unint64_t)(v415 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      uint64_t v417 = v411 - (void)v414;
      if (v417 >> 1 > v416) {
        unint64_t v416 = v417 >> 1;
      }
      if ((unint64_t)v417 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v418 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v418 = v416;
      }
      if (v418)
      {
        unint64_t v418 = (unint64_t)sub_25B3FBC64(v418);
        int32x2_t v414 = *(char **)(a1 + 32);
        int32x2_t v412 = *(char **)(a1 + 40);
      }
      else
      {
        uint64_t v419 = 0;
      }
      float v420 = (_DWORD *)(v418 + 4 * v415);
      *float v420 = *(_DWORD *)&v370[4 * (void)k];
      uint64_t v413 = (uint64_t)(v420 + 1);
      while (v412 != v414)
      {
        int v421 = *((_DWORD *)v412 - 1);
        v412 -= 4;
        *--float v420 = v421;
      }
      *(void *)(a1 + 32) = v420;
      *(void *)(a1 + 40) = v413;
      *(void *)(a1 + 48) = v418 + 4 * v419;
      if (v414) {
        operator delete(v414);
      }
    }
    else
    {
      *(_DWORD *)int32x2_t v412 = *(_DWORD *)&v370[4 * (void)k];
      uint64_t v413 = (uint64_t)(v412 + 4);
    }
    *(void *)(a1 + 40) = v413;
  }
  int32x2_t v396 = *(char **)(a1 + 32);
LABEL_574:
  sub_25B3FE7A8((char *)&v564, v396, v413, (v413 - (uint64_t)v396) >> 2);
  if (v370) {
    operator delete(v370);
  }
  if (v367) {
    operator delete(v367);
  }
  uint64_t v557 = *(void *)(a1 + 56);
  uint64_t v570 = 0;
  v571 = 0;
  unint64_t v572 = 0;
  uint64_t v422 = *(void *)(a1 + 8);
  uint64_t v423 = *(void *)(a1 + 16);
  if (v423 != v422)
  {
    unint64_t v424 = 0;
    while (1)
    {
      v576[0] = 0;
      v576[1] = 0;
      unint64_t v577 = 0;
      if (v423 != v422) {
        break;
      }
      float32x2_t v430 = 0;
LABEL_647:
      int v457 = v571;
      if ((unint64_t)v571 >= v572)
      {
        uint64_t v458 = sub_25B52B488(&v570, (uint64_t)v576);
      }
      else
      {
        void *v571 = 0;
        v457[1] = 0;
        v457[2] = 0;
        sub_25B3FCA58(v457, v576[0], (uint64_t)v430, (int64_t)((uint64_t)v430 - (unint64_t)v576[0]) >> 2);
        uint64_t v458 = (uint64_t)(v457 + 3);
      }
      v571 = (void *)v458;
      if (v576[0]) {
        operator delete(v576[0]);
      }
      ++v424;
      uint64_t v422 = *(void *)(a1 + 8);
      uint64_t v423 = *(void *)(a1 + 16);
      if (v424 >= (v423 - v422) >> 4) {
        goto LABEL_653;
      }
    }
    float v425 = 0;
    long long v426 = 0;
    unint64_t v427 = 0;
    unint64_t v428 = 0;
    float32x2_t v429 = (float32x2_t *)(v422 + 16 * v424);
    while (2)
    {
      if (v428 == v424)
      {
        if ((unint64_t)v425 >= v427)
        {
          uint64_t v440 = (v425 - v426) >> 2;
          unint64_t v441 = v440 + 1;
          if ((unint64_t)(v440 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v427 - (void)v426) >> 1 > v441) {
            unint64_t v441 = (uint64_t)(v427 - (void)v426) >> 1;
          }
          if (v427 - (unint64_t)v426 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v442 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v442 = v441;
          }
          if (v442) {
            unint64_t v442 = (unint64_t)sub_25B3FBC64(v442);
          }
          else {
            uint64_t v443 = 0;
          }
          int v452 = (_DWORD *)(v442 + 4 * v440);
          *int v452 = 0;
          float32x2_t v430 = v452 + 1;
          while (v425 != v426)
          {
            int v453 = *((_DWORD *)v425 - 1);
            v425 -= 4;
            *--int v452 = v453;
          }
          unint64_t v427 = v442 + 4 * v443;
          v576[0] = v452;
          v576[1] = v430;
          unint64_t v577 = v427;
          if (v426) {
            operator delete(v426);
          }
          long long v426 = (char *)v452;
        }
        else
        {
          *(_DWORD *)float v425 = 0;
          float32x2_t v430 = v425 + 4;
        }
        v576[1] = v430;
        goto LABEL_644;
      }
      float32x2_t v431 = (float32x2_t *)(v422 + 16 * v428);
      sub_25B3FD008((float **)&v573, v429, v431);
      float v432 = (float *)((char *)v573 + 4);
      BOOL v433 = v573 == v574 || v432 == (float *)v574;
      __int32 v434 = (float *)v573;
      if (!v433)
      {
        float v435 = *(float *)v573;
        __int32 v434 = (float *)v573;
        int v436 = (float *)((char *)v573 + 4);
        do
        {
          float v437 = *v436++;
          float v438 = v437;
          if (v437 < v435)
          {
            float v435 = v438;
            __int32 v434 = v432;
          }
          float v432 = v436;
        }
        while (v436 != (float *)v574);
      }
      if (*v434 <= 1.0)
      {
        float v444 = sub_25B3FCCE0(v429, v431, 0);
        float v445 = v444;
        if ((unint64_t)v425 >= v427)
        {
          uint64_t v450 = (v425 - v426) >> 2;
          unint64_t v451 = v450 + 1;
          if ((unint64_t)(v450 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v427 - (void)v426) >> 1 > v451) {
            unint64_t v451 = (uint64_t)(v427 - (void)v426) >> 1;
          }
          if (v427 - (unint64_t)v426 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v448 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v448 = v451;
          }
          if (v448) {
            unint64_t v448 = (unint64_t)sub_25B3FBC64(v448);
          }
          else {
            uint64_t v449 = 0;
          }
          float32x2_t v454 = (float *)(v448 + 4 * v450);
          *float32x2_t v454 = v445;
          float32x2_t v430 = v454 + 1;
          while (v425 != v426)
          {
            int v456 = *((_DWORD *)v425 - 1);
            v425 -= 4;
            *((_DWORD *)v454-- - 1) = v456;
          }
          goto LABEL_639;
        }
        *(float *)float v425 = v444;
        uint64_t v439 = v425 + 4;
LABEL_606:
        float32x2_t v430 = v439;
      }
      else
      {
        if ((unint64_t)v425 < v427)
        {
          *(_DWORD *)float v425 = 1232348160;
          uint64_t v439 = v425 + 4;
          goto LABEL_606;
        }
        uint64_t v446 = (v425 - v426) >> 2;
        unint64_t v447 = v446 + 1;
        if ((unint64_t)(v446 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v427 - (void)v426) >> 1 > v447) {
          unint64_t v447 = (uint64_t)(v427 - (void)v426) >> 1;
        }
        if (v427 - (unint64_t)v426 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v448 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v448 = v447;
        }
        if (v448) {
          unint64_t v448 = (unint64_t)sub_25B3FBC64(v448);
        }
        else {
          uint64_t v449 = 0;
        }
        float32x2_t v454 = (float *)(v448 + 4 * v446);
        *float32x2_t v454 = 1000000.0;
        float32x2_t v430 = v454 + 1;
        while (v425 != v426)
        {
          int v455 = *((_DWORD *)v425 - 1);
          v425 -= 4;
          *((_DWORD *)v454-- - 1) = v455;
        }
LABEL_639:
        unint64_t v427 = v448 + 4 * v449;
        v576[0] = v454;
        v576[1] = v430;
        unint64_t v577 = v427;
        if (v426) {
          operator delete(v426);
        }
        long long v426 = (char *)v454;
      }
      v576[1] = v430;
      if (v573) {
        operator delete(v573);
      }
LABEL_644:
      ++v428;
      uint64_t v422 = *(void *)(a1 + 8);
      float v425 = (char *)v430;
      if (v428 >= (*(void *)(a1 + 16) - v422) >> 4) {
        goto LABEL_647;
      }
      continue;
    }
  }
LABEL_653:
  if (v565 != v564)
  {
    unint64_t v459 = 0;
    do
    {
      float32x2_t v460 = (float **)(v570 + 24 * v459);
      uint64_t v461 = *v460;
      int v462 = v460[1];
      if (*v460 == v462)
      {
        BOOL v463 = 0;
        int v466 = 0;
      }
      else
      {
        BOOL v463 = 0;
        float32x4_t v464 = 0;
        unint64_t v465 = 0;
        int v466 = 0;
        do
        {
          float v467 = *v461;
          if (*v461 > *(float *)(a1 + 264) && v467 <= *(float *)(a1 + 268))
          {
            if ((unint64_t)v466 >= v465)
            {
              uint64_t v468 = v466 - v463;
              unint64_t v469 = v468 + 1;
              if ((unint64_t)(v468 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v465 - (void)v463) >> 1 > v469) {
                unint64_t v469 = (uint64_t)(v465 - (void)v463) >> 1;
              }
              if (v465 - (unint64_t)v463 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v470 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v470 = v469;
              }
              if (v470)
              {
                unint64_t v470 = (unint64_t)sub_25B3FBC64(v470);
                float v467 = *v461;
                int v466 = v464;
              }
              else
              {
                uint64_t v471 = 0;
              }
              uint64_t v472 = (float *)(v470 + 4 * v468);
              *uint64_t v472 = v467;
              float32x4_t v464 = v472 + 1;
              while (v466 != v463)
              {
                int v473 = *((_DWORD *)v466-- - 1);
                *((_DWORD *)v472-- - 1) = v473;
              }
              unint64_t v465 = v470 + 4 * v471;
              if (v463) {
                operator delete(v463);
              }
              BOOL v463 = v472;
              int v466 = v464;
            }
            else
            {
              *v466++ = v467;
              float32x4_t v464 = v466;
            }
          }
          ++v461;
        }
        while (v461 != v462);
      }
      if ((unint64_t)((char *)v466 - (char *)v463) > 4) {
        *((_DWORD *)v564 + v459) = 0;
      }
      if (v463) {
        operator delete(v463);
      }
      ++v459;
    }
    while (v459 < ((char *)v565 - (unsigned char *)v564) >> 2);
  }
  uint64_t v474 = v557;
  if (v557)
  {
    uint64_t v475 = 0;
    uint64_t v476 = 0;
    unint64_t v477 = 0;
    float32x4_t v478 = 0;
    float v479 = 0;
    unint64_t v480 = 0;
    uint64_t v481 = 0;
    v563 = 0;
    do
    {
      if (*((float *)v564 + v481) > 0.000001)
      {
        uint64_t v482 = &(*v545)[16 * v481];
        if ((unint64_t)v476 >= v477)
        {
          uint64_t v483 = (v476 - v475) >> 4;
          unint64_t v484 = v483 + 1;
          if ((unint64_t)(v483 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v477 - (void)v475) >> 3 > v484) {
            unint64_t v484 = (uint64_t)(v477 - (void)v475) >> 3;
          }
          if (v477 - (unint64_t)v475 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v485 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v485 = v484;
          }
          if (v485) {
            unint64_t v485 = (unint64_t)sub_25B3FFAEC(v485);
          }
          else {
            uint64_t v486 = 0;
          }
          uint64_t v487 = (_OWORD *)(v485 + 16 * v483);
          *uint64_t v487 = *(_OWORD *)v482;
          if (v476 == v475)
          {
            double v489 = (char *)(v485 + 16 * v483);
          }
          else
          {
            unint64_t v488 = v485 + 16 * v483;
            do
            {
              double v489 = (char *)(v488 - 16);
              *(_OWORD *)(v488 - 16) = *((_OWORD *)v476 - 1);
              v476 -= 16;
              v488 -= 16;
            }
            while (v476 != v475);
          }
          unint64_t v477 = v485 + 16 * v486;
          uint64_t v476 = (char *)(v487 + 1);
          if (v475) {
            operator delete(v475);
          }
          uint64_t v475 = v489;
          uint64_t v474 = v557;
        }
        else
        {
          *(_OWORD *)uint64_t v476 = *(_OWORD *)v482;
          v476 += 16;
        }
        double v490 = v564;
        if ((unint64_t)v479 >= v480)
        {
          uint64_t v492 = (v479 - v478) >> 2;
          unint64_t v493 = v492 + 1;
          if ((unint64_t)(v492 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v480 - (void)v478) >> 1 > v493) {
            unint64_t v493 = (uint64_t)(v480 - (void)v478) >> 1;
          }
          if (v480 - (unint64_t)v478 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v494 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v494 = v493;
          }
          if (v494) {
            unint64_t v494 = (unint64_t)sub_25B3FBC64(v494);
          }
          else {
            uint64_t v495 = 0;
          }
          long long v496 = (char *)(v494 + 4 * v492);
          *(_DWORD *)long long v496 = v490[v481];
          uint64_t v491 = v496 + 4;
          while (v479 != v478)
          {
            int v497 = *((_DWORD *)v479 - 1);
            v479 -= 4;
            *((_DWORD *)v496 - 1) = v497;
            v496 -= 4;
          }
          unint64_t v480 = v494 + 4 * v495;
          if (v478) {
            operator delete(v478);
          }
          float32x4_t v478 = v496;
          uint64_t v474 = v557;
        }
        else
        {
          *(_DWORD *)float v479 = *((_DWORD *)v564 + v481);
          uint64_t v491 = v479 + 4;
        }
        ++v563;
        float v479 = v491;
      }
      ++v481;
    }
    while (v481 != v474);
    *(void *)(a1 + 56) = v563;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
    if (v563)
    {
      for (uint64_t m = 0; m != v563; ++m)
      {
        long long v499 = &v475[16 * (void)m];
        float32x4_t v501 = *(_OWORD **)(a1 + 16);
        unint64_t v500 = *(void *)(a1 + 24);
        if ((unint64_t)v501 >= v500)
        {
          uint64_t v503 = ((char *)v501 - *v545) >> 4;
          unint64_t v504 = v503 + 1;
          if ((unint64_t)(v503 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v505 = v500 - (void)*v545;
          if (v505 >> 3 > v504) {
            unint64_t v504 = v505 >> 3;
          }
          if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v506 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v506 = v504;
          }
          if (v506) {
            unint64_t v506 = (unint64_t)sub_25B3FFAEC(v506);
          }
          else {
            uint64_t v507 = 0;
          }
          float v508 = (_OWORD *)(v506 + 16 * v503);
          _OWORD *v508 = *(_OWORD *)v499;
          char v510 = *(char **)(a1 + 8);
          uint64_t v509 = *(char **)(a1 + 16);
          uint64_t v511 = v508;
          if (v509 != v510)
          {
            do
            {
              *--uint64_t v511 = *((_OWORD *)v509 - 1);
              v509 -= 16;
            }
            while (v509 != v510);
            uint64_t v509 = *v545;
          }
          unint64_t v502 = v508 + 1;
          *(void *)(a1 + 8) = v511;
          *(void *)(a1 + 16) = v508 + 1;
          *(void *)(a1 + 24) = v506 + 16 * v507;
          if (v509) {
            operator delete(v509);
          }
        }
        else
        {
          *float32x4_t v501 = *(_OWORD *)v499;
          unint64_t v502 = v501 + 1;
        }
        *(void *)(a1 + 16) = v502;
        char v513 = *(char **)(a1 + 40);
        unint64_t v512 = *(void *)(a1 + 48);
        if ((unint64_t)v513 >= v512)
        {
          uint64_t v515 = *(char **)(a1 + 32);
          uint64_t v516 = (v513 - v515) >> 2;
          unint64_t v517 = v516 + 1;
          if ((unint64_t)(v516 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v518 = v512 - (void)v515;
          if (v518 >> 1 > v517) {
            unint64_t v517 = v518 >> 1;
          }
          if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v519 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v519 = v517;
          }
          if (v519)
          {
            unint64_t v519 = (unint64_t)sub_25B3FBC64(v519);
            uint64_t v515 = *(char **)(a1 + 32);
            char v513 = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t v520 = 0;
          }
          BOOL v521 = (_DWORD *)(v519 + 4 * v516);
          *BOOL v521 = *(_DWORD *)&v478[4 * (void)m];
          uint64_t v514 = v521 + 1;
          while (v513 != v515)
          {
            int v522 = *((_DWORD *)v513 - 1);
            v513 -= 4;
            *--BOOL v521 = v522;
          }
          *(void *)(a1 + 32) = v521;
          *(void *)(a1 + 40) = v514;
          *(void *)(a1 + 48) = v519 + 4 * v520;
          if (v515) {
            operator delete(v515);
          }
        }
        else
        {
          *(_DWORD *)char v513 = *(_DWORD *)&v478[4 * (void)m];
          uint64_t v514 = v513 + 4;
        }
        *(void *)(a1 + 40) = v514;
      }
    }
    if (v478) {
      operator delete(v478);
    }
    uint64_t v524 = a9;
    uint64_t v523 = __p;
    if (v475) {
      operator delete(v475);
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
    uint64_t v524 = a9;
    uint64_t v523 = __p;
  }
  v576[0] = &v570;
  sub_25B413C78((void ***)v576);
  if (v564) {
    operator delete(v564);
  }
  if (v523) {
    operator delete(v523);
  }
  if (v567) {
    operator delete(v567);
  }
  uint64_t v525 = *(void *)(a1 + 56);
  long long v526 = (char *)*v524;
  v524[1] = *v524;
  if (v525)
  {
    unint64_t v527 = 0;
    do
    {
      long long v528 = (_OWORD *)(*(void *)(a1 + 8) + 16 * v527);
      uint64_t v529 = *(void *)(a1 + 32);
      unint64_t v530 = v524[2];
      if ((unint64_t)v526 >= v530)
      {
        unint64_t v532 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v526[-*v524] >> 3);
        unint64_t v533 = v532 + 1;
        if (v532 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_25B3FBC4C();
        }
        unint64_t v534 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v530 - *v524) >> 3);
        if (2 * v534 > v533) {
          unint64_t v533 = 2 * v534;
        }
        if (v534 >= 0x555555555555555) {
          unint64_t v535 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v535 = v533;
        }
        v536 = (char *)sub_25B413D74(v535);
        uint64_t v538 = &v536[24 * v532];
        int v539 = *(_DWORD *)(v529 + 4 * v527);
        *(_OWORD *)uint64_t v538 = *v528;
        *((_DWORD *)v538 + 4) = v539;
        char v541 = (char *)*v524;
        uint64_t v540 = (char *)v524[1];
        v542 = v538;
        if (v540 != (char *)*v524)
        {
          do
          {
            long long v543 = *(_OWORD *)(v540 - 24);
            *((_DWORD *)v542 - 2) = *((_DWORD *)v540 - 2);
            *(_OWORD *)(v542 - 24) = v543;
            v542 -= 24;
            v540 -= 24;
          }
          while (v540 != v541);
          uint64_t v540 = (char *)*v524;
        }
        long long v526 = v538 + 24;
        void *v524 = v542;
        v524[1] = v538 + 24;
        v524[2] = &v536[24 * v537];
        if (v540) {
          operator delete(v540);
        }
      }
      else
      {
        int v531 = *(_DWORD *)(v529 + 4 * v527);
        *(_OWORD *)long long v526 = *v528;
        *((_DWORD *)v526 + 4) = v531;
        v526 += 24;
      }
      v524[1] = v526;
      ++v527;
    }
    while (*(void *)(a1 + 56) > v527);
  }
}

void sub_25B53BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B53BEA0(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; uint64_t i = (char *)i + 1)
    {
      unint64_t v9 = (uint64_t *)(a1 + 16 * i);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      uint64_t v13 = a4[1];
      unint64_t v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = ((char *)v13 - (unsigned char *)*a4) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v17 = v12 - (void)*a4;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_25B3FFAEC(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (void *)(v18 + 16 * v15);
        *uint64_t v20 = v11;
        v20[1] = v10;
        unint64_t v22 = (char *)*a4;
        uint64_t v21 = (char *)a4[1];
        uint64_t v23 = v20;
        if (v21 != *a4)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
            v23 -= 2;
            v21 -= 16;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)*a4;
        }
        uint64_t v14 = v20 + 2;
        *a4 = v23;
        a4[1] = v20 + 2;
        a4[2] = (void *)(v18 + 16 * v19);
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *uint64_t v13 = v11;
        v13[1] = v10;
        uint64_t v14 = v13 + 2;
      }
      a4[1] = v14;
      int v25 = (char *)a4[4];
      unint64_t v24 = (unint64_t)a4[5];
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v27 = (char *)a4[3];
        uint64_t v28 = (v25 - v27) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v31 = (unint64_t)sub_25B3FBC64(v31);
          uint64_t v27 = (char *)a4[3];
          int v25 = (char *)a4[4];
        }
        else
        {
          uint64_t v32 = 0;
        }
        unint64_t v33 = (_DWORD *)(v31 + 4 * v28);
        *unint64_t v33 = *(_DWORD *)(a2 + 4 * i);
        uint64_t v26 = v33 + 1;
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--unint64_t v33 = v34;
        }
        a4[3] = v33;
        a4[4] = v26;
        a4[5] = (void *)(v31 + 4 * v32);
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)int v25 = *(_DWORD *)(a2 + 4 * i);
        uint64_t v26 = v25 + 4;
      }
      a4[4] = v26;
    }
  }
  a4[6] = a3;
}

void sub_25B53C080(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a1[2] = a1[1];
  a1[5] = a1[4];
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (_OWORD *)(v4 + 16 * v8);
      uint64_t v11 = (_OWORD *)a1[2];
      unint64_t v10 = a1[3];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = ((uint64_t)v11 - v13) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v16 = v10 - v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_25B3FFAEC(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (_OWORD *)(v17 + 16 * v14);
        *uint64_t v19 = *v9;
        uint64_t v21 = (char *)a1[1];
        uint64_t v20 = (char *)a1[2];
        unint64_t v22 = v19;
        if (v20 != v21)
        {
          do
          {
            *--unint64_t v22 = *((_OWORD *)v20 - 1);
            v20 -= 16;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)a1[1];
        }
        unint64_t v12 = v19 + 1;
        a1[1] = (uint64_t)v22;
        a1[2] = (uint64_t)(v19 + 1);
        a1[3] = v17 + 16 * v18;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v11 = *v9;
        unint64_t v12 = v11 + 1;
      }
      a1[2] = (uint64_t)v12;
      unint64_t v24 = (char *)a1[5];
      unint64_t v23 = a1[6];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = (char *)a1[4];
        uint64_t v27 = (v24 - v26) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v29 = v23 - (void)v26;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          unint64_t v30 = (unint64_t)sub_25B3FBC64(v30);
          uint64_t v26 = (char *)a1[4];
          unint64_t v24 = (char *)a1[5];
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = (_DWORD *)(v30 + 4 * v27);
        *uint64_t v32 = 0;
        int v25 = v32 + 1;
        while (v24 != v26)
        {
          int v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *--uint64_t v32 = v33;
        }
        a1[4] = (uint64_t)v32;
        a1[5] = (uint64_t)v25;
        a1[6] = v30 + 4 * v31;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v24 = 0;
        int v25 = v24 + 4;
      }
      a1[5] = (uint64_t)v25;
      ++v8;
      uint64_t v4 = *a2;
      uint64_t v34 = a2[1] - *a2;
    }
    while (v8 < v34 >> 4);
    a1[7] = v34 >> 4;
    *a1 = a3;
    sub_25B539380((uint64_t)a1, a1 + 20, a3, a4);
  }
}

void sub_25B53C3EC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_25B53C430((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_25B53C430(uint64_t a1)
{
  sub_25B3FB178(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_25B53C638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B53C7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25B53CA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B53CAA0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_25B4E3A80((void **)a1, (uint64_t)(a3[1] - *a3) >> 3);
  long long v7 = (void *)*a3;
  uint64_t v6 = (void *)a3[1];
  memset(v9, 0, sizeof(v9));
  sub_25B40EE6C(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  uint64_t v11 = (void **)a1;
  unint64_t v8 = (_OWORD *)v9[0];
  if (v7 == v6)
  {
    if (!v9[0]) {
      return;
    }
  }
  else
  {
    do
    {
      long long v10 = v8[*v7];
      sub_25B4E3B24(&v11, &v10);
      ++v7;
    }
    while (v7 != v6);
  }
  operator delete(v8);
}

void sub_25B53CB54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B53CC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B53DEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  a55 = &a51;
  sub_25B41032C((void ***)&a55);

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_25B53E064(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  unint64_t v17 = v16 + 16;
  uint64_t v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)unint64_t v17 = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          uint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            unint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *uint64_t v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  unint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                unint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  float32x2_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *float32x2_t v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    float32x2_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B540858((uint64_t)v41);
  return i;
}

void sub_25B53E4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B540858((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B53E4D0(unint64_t a1, unint64_t a2, void **a3, uint64_t a4, char a5)
{
  uint64_t v174 = *MEMORY[0x263EF8340];
  while (2)
  {
    float v142 = (unsigned __int8 *)(a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v65 = (uint64_t *)(**a3 + 128);
                *(void *)&long long v170 = a2 - 24;
                unsigned int v157 = *((void *)sub_25B53F6AC(v65, v142, (long long **)&v170) + 5);
                int v66 = (uint64_t *)(**a3 + 128);
                *(void *)&long long v170 = a1;
                if (v157 > *((void *)sub_25B53F6AC(v66, (unsigned __int8 *)a1, (long long **)&v170) + 5))
                {
                  long long v67 = *(_OWORD *)a1;
                  uint64_t v171 = *(void *)(a1 + 16);
                  long long v170 = v67;
                  long long v68 = *(_OWORD *)v142;
                  *(void *)(a1 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)a1 = v68;
                  long long v69 = v170;
                  *(void *)(a2 - 8) = v171;
                  *(_OWORD *)float v142 = v69;
                }
                break;
              case 3uLL:
                sub_25B53FEA8(a1, a1 + 24, (uint64_t)v142, a3);
                break;
              case 4uLL:
                sub_25B54012C(a1, a1 + 24, a1 + 48, (uint64_t)v142, a3);
                break;
              case 5uLL:
                sub_25B5402E4(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t)v142, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            if (a5)
            {
              if (a1 != a2)
              {
                uint64_t v70 = (unsigned __int8 *)(a1 + 24);
                if (a1 + 24 != a2)
                {
                  uint64_t v71 = 0;
                  float32x2_t v72 = (unsigned __int8 *)a1;
                  do
                  {
                    float32x2_t v73 = v70;
                    float v74 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v70;
                    unsigned int v158 = *((void *)sub_25B53F6AC(v74, v70, (long long **)&v170) + 5);
                    uint64_t v75 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v72;
                    if (v158 > *((void *)sub_25B53F6AC(v75, v72, (long long **)&v170) + 5))
                    {
                      long long v76 = *(_OWORD *)v73;
                      uint64_t v171 = *((void *)v73 + 2);
                      long long v170 = v76;
                      *((void *)v73 + 1) = 0;
                      *((void *)v73 + 2) = 0;
                      *(void *)float32x2_t v73 = 0;
                      uint64_t v77 = v71;
                      do
                      {
                        uint64_t v78 = a1 + v77;
                        float32x2_t v79 = (void **)(a1 + v77 + 24);
                        if (*(char *)(a1 + v77 + 47) < 0) {
                          operator delete(*v79);
                        }
                        *(_OWORD *)float32x2_t v79 = *(_OWORD *)v78;
                        *(void *)(a1 + v77 + 40) = *(void *)(v78 + 16);
                        *(unsigned char *)(v78 + 23) = 0;
                        *(unsigned char *)uint64_t v78 = 0;
                        if (!v77)
                        {
                          uint64_t v82 = a1;
                          goto LABEL_80;
                        }
                        float v80 = (uint64_t *)(**a3 + 128);
                        *(void *)&long long v172 = &v170;
                        unsigned int v159 = *((void *)sub_25B53F6AC(v80, (unsigned __int8 *)&v170, (long long **)&v172) + 5);
                        short float v81 = (uint64_t *)(**a3 + 128);
                        *(void *)&long long v172 = a1 + v77 - 24;
                        v77 -= 24;
                      }
                      while (v159 > *((void *)sub_25B53F6AC(v81, (unsigned __int8 *)v172, (long long **)&v172)+ 5));
                      uint64_t v82 = a1 + v77 + 24;
                      if (*(char *)(v82 + 23) < 0) {
                        operator delete(*(void **)v82);
                      }
LABEL_80:
                      long long v83 = v170;
                      *(void *)(v82 + 16) = v171;
                      *(_OWORD *)uint64_t v82 = v83;
                    }
                    uint64_t v70 = v73 + 24;
                    v71 += 24;
                    float32x2_t v72 = v73;
                  }
                  while (v73 + 24 != (unsigned __int8 *)a2);
                }
              }
            }
            else if (a1 != a2)
            {
              unint64_t v126 = (unsigned __int8 *)(a1 + 24);
              if (a1 + 24 != a2)
              {
                unint64_t v127 = a1 - 24;
                do
                {
                  uint64_t v128 = v126;
                  long long v129 = (uint64_t *)(**a3 + 128);
                  *(void *)&long long v170 = v126;
                  unsigned int v167 = *((void *)sub_25B53F6AC(v129, v126, (long long **)&v170) + 5);
                  float v130 = (uint64_t *)(**a3 + 128);
                  *(void *)&long long v170 = a1;
                  if (v167 > *((void *)sub_25B53F6AC(v130, (unsigned __int8 *)a1, (long long **)&v170)
                                            + 5))
                  {
                    long long v131 = *(_OWORD *)v128;
                    uint64_t v171 = *((void *)v128 + 2);
                    long long v170 = v131;
                    *((void *)v128 + 1) = 0;
                    *((void *)v128 + 2) = 0;
                    *(void *)uint64_t v128 = 0;
                    unint64_t v132 = v127;
                    do
                    {
                      unint64_t v133 = v132;
                      unint64_t v134 = v132 + 48;
                      if (*(char *)(v132 + 71) < 0) {
                        operator delete(*(void **)v134);
                      }
                      *(_OWORD *)unint64_t v134 = *(_OWORD *)(v133 + 24);
                      *(void *)(v134 + 16) = *(void *)(v133 + 40);
                      *(unsigned char *)(v133 + 47) = 0;
                      *(unsigned char *)(v133 + 24) = 0;
                      unint64_t v135 = (uint64_t *)(**a3 + 128);
                      *(void *)&long long v172 = &v170;
                      unsigned int v168 = *((void *)sub_25B53F6AC(v135, (unsigned __int8 *)&v170, (long long **)&v172) + 5);
                      long long v136 = (uint64_t *)(**a3 + 128);
                      *(void *)&long long v172 = v133;
                      int v137 = sub_25B53F6AC(v136, (unsigned __int8 *)v133, (long long **)&v172);
                      unint64_t v132 = v133 - 24;
                    }
                    while (v168 > *((void *)v137 + 5));
                    unint64_t v138 = v133 + 24;
                    if (*(char *)(v138 + 23) < 0) {
                      operator delete(*(void **)v138);
                    }
                    long long v139 = v170;
                    *(void *)(v138 + 16) = v171;
                    *(_OWORD *)unint64_t v138 = v139;
                  }
                  unint64_t v126 = v128 + 24;
                  v127 += 24;
                  a1 = (unint64_t)v128;
                }
                while (v128 + 24 != (unsigned __int8 *)a2);
              }
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v84 = (v13 - 2) >> 1;
              int64_t v143 = v84;
              do
              {
                int64_t v85 = v84;
                if (v143 >= v84)
                {
                  uint64_t v86 = (2 * v84) | 1;
                  unint64_t v87 = a1 + 24 * v86;
                  if (2 * v84 + 2 < (uint64_t)v13)
                  {
                    uint64_t v88 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = a1 + 24 * v86;
                    unsigned int v160 = *((void *)sub_25B53F6AC(v88, (unsigned __int8 *)v170, (long long **)&v170) + 5);
                    uint64_t v89 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v87 + 24;
                    if (v160 > *((void *)sub_25B53F6AC(v89, (unsigned __int8 *)(v87 + 24), (long long **)&v170)+ 5))
                    {
                      v87 += 24;
                      uint64_t v86 = 2 * v85 + 2;
                    }
                  }
                  unint64_t v90 = (uint64_t *)(**a3 + 128);
                  *(void *)&long long v170 = v87;
                  unint64_t v91 = a1 + 24 * v85;
                  unsigned int v161 = *((void *)sub_25B53F6AC(v90, (unsigned __int8 *)v87, (long long **)&v170) + 5);
                  unint64_t v92 = (uint64_t *)(**a3 + 128);
                  *(void *)&long long v170 = v91;
                  if (v161 <= *((void *)sub_25B53F6AC(v92, (unsigned __int8 *)v91, (long long **)&v170)
                                             + 5))
                  {
                    long long v93 = *(_OWORD *)v91;
                    uint64_t v171 = *(void *)(v91 + 16);
                    long long v170 = v93;
                    *(void *)(v91 + 8) = 0;
                    *(void *)(v91 + 16) = 0;
                    *(void *)unint64_t v91 = 0;
                    while (1)
                    {
                      unint64_t v94 = v87;
                      if (*(char *)(v91 + 23) < 0) {
                        operator delete(*(void **)v91);
                      }
                      long long v95 = *(_OWORD *)v87;
                      *(void *)(v91 + 16) = *(void *)(v87 + 16);
                      *(_OWORD *)unint64_t v91 = v95;
                      *(unsigned char *)(v87 + 23) = 0;
                      *(unsigned char *)unint64_t v87 = 0;
                      if (v143 < v86) {
                        break;
                      }
                      uint64_t v96 = (2 * v86) | 1;
                      unint64_t v87 = a1 + 24 * v96;
                      uint64_t v86 = 2 * v86 + 2;
                      if (v86 < (uint64_t)v13)
                      {
                        float v97 = (uint64_t *)(**a3 + 128);
                        *(void *)&long long v172 = a1 + 24 * v96;
                        unsigned int v162 = *((void *)sub_25B53F6AC(v97, (unsigned __int8 *)v172, (long long **)&v172) + 5);
                        uint64_t v98 = (uint64_t *)(**a3 + 128);
                        *(void *)&long long v172 = v87 + 24;
                        if (v162 <= *((void *)sub_25B53F6AC(v98, (unsigned __int8 *)(v87 + 24), (long long **)&v172)+ 5))uint64_t v86 = v96; {
                        else
                        }
                          v87 += 24;
                      }
                      else
                      {
                        uint64_t v86 = v96;
                      }
                      unint64_t v99 = (uint64_t *)(**a3 + 128);
                      *(void *)&long long v172 = v87;
                      unsigned int v163 = *((void *)sub_25B53F6AC(v99, (unsigned __int8 *)v87, (long long **)&v172) + 5);
                      unint64_t v100 = (uint64_t *)(**a3 + 128);
                      *(void *)&long long v172 = &v170;
                      unint64_t v91 = v94;
                      if (v163 > *((void *)sub_25B53F6AC(v100, (unsigned __int8 *)&v170, (long long **)&v172)+ 5))
                      {
                        if (*(char *)(v94 + 23) < 0) {
                          operator delete(*(void **)v94);
                        }
                        break;
                      }
                    }
                    long long v101 = v170;
                    *(void *)(v94 + 16) = v171;
                    *(_OWORD *)unint64_t v94 = v101;
                  }
                }
                int64_t v84 = v85 - 1;
              }
              while (v85);
              int64_t v102 = v12 / 0x18uLL;
              do
              {
                uint64_t v103 = 0;
                unint64_t v140 = a2;
                uint64_t v141 = *(void *)a1;
                *(void *)&long long v172 = *(void *)(a1 + 8);
                *(void *)((char *)&v172 + 7) = *(void *)(a1 + 15);
                char v144 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v104 = a1;
                do
                {
                  uint64_t v105 = v104 + 24 * v103 + 24;
                  uint64_t v106 = 2 * v103;
                  uint64_t v103 = (2 * v103) | 1;
                  uint64_t v107 = v106 + 2;
                  if (v106 + 2 < v102)
                  {
                    unint64_t v108 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v105;
                    unsigned int v164 = *((void *)sub_25B53F6AC(v108, (unsigned __int8 *)v105, (long long **)&v170) + 5);
                    long long v109 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v105 + 24;
                    if (v164 > *((void *)sub_25B53F6AC(v109, (unsigned __int8 *)(v105 + 24), (long long **)&v170)+ 5))
                    {
                      v105 += 24;
                      uint64_t v103 = v107;
                    }
                  }
                  if (*(char *)(v104 + 23) < 0) {
                    operator delete(*(void **)v104);
                  }
                  long long v110 = *(_OWORD *)v105;
                  *(void *)(v104 + 16) = *(void *)(v105 + 16);
                  *(_OWORD *)unint64_t v104 = v110;
                  *(unsigned char *)(v105 + 23) = 0;
                  *(unsigned char *)uint64_t v105 = 0;
                  unint64_t v104 = v105;
                }
                while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                a2 -= 24;
                if (v105 == v140 - 24)
                {
                  *(void *)uint64_t v105 = v141;
                  uint64_t v124 = *(void *)((char *)&v172 + 7);
                  *(void *)(v105 + 8) = v172;
                  *(void *)(v105 + 15) = v124;
                  *(unsigned char *)(v105 + 23) = v144;
                }
                else
                {
                  long long v111 = *(_OWORD *)(v140 - 24);
                  *(void *)(v105 + 16) = *(void *)(v140 - 8);
                  *(_OWORD *)uint64_t v105 = v111;
                  *(void *)(v140 - 24) = v141;
                  uint64_t v112 = v172;
                  *(void *)(v140 - 9) = *(void *)((char *)&v172 + 7);
                  *(void *)(v140 - 16) = v112;
                  *(unsigned char *)(v140 - 1) = v144;
                  uint64_t v113 = v105 - a1 + 24;
                  if (v113 >= 25)
                  {
                    unint64_t v114 = (v113 / 0x18uLL - 2) >> 1;
                    unint64_t v115 = a1 + 24 * v114;
                    long long v116 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v115;
                    unsigned int v165 = *((void *)sub_25B53F6AC(v116, (unsigned __int8 *)v115, (long long **)&v170) + 5);
                    float32x2_t v117 = (uint64_t *)(**a3 + 128);
                    *(void *)&long long v170 = v105;
                    if (v165 > *((void *)sub_25B53F6AC(v117, (unsigned __int8 *)v105, (long long **)&v170)+ 5))
                    {
                      long long v118 = *(_OWORD *)v105;
                      uint64_t v171 = *(void *)(v105 + 16);
                      long long v170 = v118;
                      *(void *)(v105 + 8) = 0;
                      *(void *)(v105 + 16) = 0;
                      *(void *)uint64_t v105 = 0;
                      while (1)
                      {
                        uint64_t v119 = v115;
                        if (*(char *)(v105 + 23) < 0) {
                          operator delete(*(void **)v105);
                        }
                        long long v120 = *(_OWORD *)v115;
                        *(void *)(v105 + 16) = *(void *)(v115 + 16);
                        *(_OWORD *)uint64_t v105 = v120;
                        *(unsigned char *)(v115 + 23) = 0;
                        *(unsigned char *)unint64_t v115 = 0;
                        if (!v114) {
                          break;
                        }
                        unint64_t v114 = (v114 - 1) >> 1;
                        unint64_t v115 = a1 + 24 * v114;
                        long long v121 = (uint64_t *)(**a3 + 128);
                        float v169 = (long long *)v115;
                        unsigned int v166 = *((void *)sub_25B53F6AC(v121, (unsigned __int8 *)v115, &v169) + 5);
                        float v122 = (uint64_t *)(**a3 + 128);
                        float v169 = &v170;
                        uint64_t v105 = v119;
                        if (v166 <= *((void *)sub_25B53F6AC(v122, (unsigned __int8 *)&v170, &v169) + 5))
                        {
                          if (*(char *)(v119 + 23) < 0) {
                            operator delete(*(void **)v119);
                          }
                          break;
                        }
                      }
                      long long v123 = v170;
                      *(void *)(v119 + 16) = v171;
                      *(_OWORD *)uint64_t v119 = v123;
                    }
                  }
                }
              }
              while (v102-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = a1 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_25B53FEA8(a1, a1 + 24 * (v13 >> 1), (uint64_t)v142, a3);
            sub_25B53FEA8(a1 + 24, a1 + 24 * v14 - 24, a2 - 48, a3);
            sub_25B53FEA8(a1 + 48, a1 + 24 * v14 + 24, a2 - 72, a3);
            sub_25B53FEA8(a1 + 24 * v14 - 24, v15, a1 + 24 * v14 + 24, a3);
            long long v16 = *(_OWORD *)a1;
            uint64_t v171 = *(void *)(a1 + 16);
            long long v170 = v16;
            long long v17 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = *(void *)(v15 + 16);
            *(_OWORD *)a1 = v17;
            long long v18 = v170;
            *(void *)(v15 + 16) = v171;
            *(_OWORD *)uint64_t v15 = v18;
          }
          else
          {
            sub_25B53FEA8(a1 + 24 * (v13 >> 1), a1, (uint64_t)v142, a3);
          }
          --a4;
          if (a5) {
            break;
          }
          long long v19 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = a1 - 24;
          unsigned int v146 = *((void *)sub_25B53F6AC(v19, (unsigned __int8 *)(a1 - 24), (long long **)&v170) + 5);
          float v20 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = a1;
          if (v146 > *((void *)sub_25B53F6AC(v20, (unsigned __int8 *)a1, (long long **)&v170) + 5)) {
            break;
          }
          long long v42 = *(_OWORD *)a1;
          uint64_t v173 = *(void *)(a1 + 16);
          long long v172 = v42;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v43 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = &v172;
          uint64_t v44 = *((void *)sub_25B53F6AC(v43, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
          float32x2_t v45 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = a2 - 24;
          if (v44 > *((void *)sub_25B53F6AC(v45, v142, (long long **)&v170) + 5))
          {
            unint64_t v11 = a1;
            do
            {
              float v46 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
              v11 += 24;
              unsigned int v152 = *((void *)sub_25B53F6AC(v46, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
              unint64_t v47 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v11;
            }
            while (v152 <= *((void *)sub_25B53F6AC(v47, (unsigned __int8 *)v11, (long long **)&v170) + 5));
          }
          else
          {
            unint64_t v48 = a1 + 24;
            do
            {
              unint64_t v11 = v48;
              if (v48 >= a2) {
                break;
              }
              int32x2_t v49 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
              unsigned int v153 = *((void *)sub_25B53F6AC(v49, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
              int64_t v50 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v11;
              uint64_t v51 = sub_25B53F6AC(v50, (unsigned __int8 *)v11, (long long **)&v170);
              unint64_t v48 = v11 + 24;
            }
            while (v153 <= *((void *)v51 + 5));
          }
          unint64_t v52 = a2;
          if (v11 < a2)
          {
            unint64_t v52 = a2;
            do
            {
              float v53 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
              v52 -= 24;
              unsigned int v154 = *((void *)sub_25B53F6AC(v53, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
              unint64_t v54 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v52;
            }
            while (v154 > *((void *)sub_25B53F6AC(v54, (unsigned __int8 *)v52, (long long **)&v170) + 5));
          }
          while (v11 < v52)
          {
            long long v55 = *(_OWORD *)v11;
            uint64_t v171 = *(void *)(v11 + 16);
            long long v170 = v55;
            long long v56 = *(_OWORD *)v52;
            *(void *)(v11 + 16) = *(void *)(v52 + 16);
            *(_OWORD *)unint64_t v11 = v56;
            long long v57 = v170;
            *(void *)(v52 + 16) = v171;
            *(_OWORD *)unint64_t v52 = v57;
            do
            {
              float v58 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
              v11 += 24;
              unsigned int v155 = *((void *)sub_25B53F6AC(v58, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
              unint64_t v59 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v11;
            }
            while (v155 <= *((void *)sub_25B53F6AC(v59, (unsigned __int8 *)v11, (long long **)&v170) + 5));
            do
            {
              uint64_t v60 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
              v52 -= 24;
              unsigned int v156 = *((void *)sub_25B53F6AC(v60, (unsigned __int8 *)&v172, (long long **)&v170) + 5);
              unint64_t v61 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v52;
            }
            while (v156 > *((void *)sub_25B53F6AC(v61, (unsigned __int8 *)v52, (long long **)&v170) + 5));
          }
          unint64_t v62 = (long long *)(v11 - 24);
          BOOL v5 = v11 - 24 >= a1;
          BOOL v6 = v11 - 24 == a1;
          if (v11 - 24 == a1)
          {
            if (*(char *)(v11 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v63 = *v62;
            *(void *)(a1 + 16) = *(void *)(v11 - 8);
            *(_OWORD *)a1 = v63;
            *(unsigned char *)(v11 - 1) = 0;
            *(unsigned char *)(v11 - 24) = 0;
          }
          a5 = 0;
          long long v64 = v172;
          *(void *)(v11 - 8) = v173;
          *unint64_t v62 = v64;
        }
        long long v21 = *(_OWORD *)a1;
        uint64_t v173 = *(void *)(a1 + 16);
        long long v172 = v21;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        BOOL v22 = (unsigned __int8 *)a1;
        do
        {
          v22 += 24;
          unint64_t v23 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = v22;
          unsigned int v147 = *((void *)sub_25B53F6AC(v23, v22, (long long **)&v170) + 5);
          unint64_t v24 = (uint64_t *)(**a3 + 128);
          *(void *)&long long v170 = &v172;
        }
        while (v147 > *((void *)sub_25B53F6AC(v24, (unsigned __int8 *)&v172, (long long **)&v170) + 5));
        int v25 = (unsigned __int8 *)a2;
        if (v22 - 24 == (unsigned __int8 *)a1)
        {
          int v25 = (unsigned __int8 *)a2;
          do
          {
            if (v22 >= v25) {
              break;
            }
            v25 -= 24;
            uint64_t v28 = (uint64_t *)(**a3 + 128);
            *(void *)&long long v170 = v25;
            unsigned int v149 = *((void *)sub_25B53F6AC(v28, v25, (long long **)&v170) + 5);
            uint64_t v29 = (uint64_t *)(**a3 + 128);
            *(void *)&long long v170 = &v172;
          }
          while (v149 <= *((void *)sub_25B53F6AC(v29, (unsigned __int8 *)&v172, (long long **)&v170) + 5));
        }
        else
        {
          do
          {
            v25 -= 24;
            uint64_t v26 = (uint64_t *)(**a3 + 128);
            *(void *)&long long v170 = v25;
            unsigned int v148 = *((void *)sub_25B53F6AC(v26, v25, (long long **)&v170) + 5);
            uint64_t v27 = (uint64_t *)(**a3 + 128);
            *(void *)&long long v170 = &v172;
          }
          while (v148 <= *((void *)sub_25B53F6AC(v27, (unsigned __int8 *)&v172, (long long **)&v170) + 5));
        }
        unint64_t v11 = (unint64_t)v22;
        if (v22 < v25)
        {
          unint64_t v30 = v25;
          do
          {
            long long v170 = *(_OWORD *)v11;
            long long v31 = v170;
            uint64_t v171 = *(void *)(v11 + 16);
            uint64_t v32 = v171;
            uint64_t v33 = *((void *)v30 + 2);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
            *(void *)(v11 + 16) = v33;
            *((void *)v30 + 2) = v32;
            *(_OWORD *)unint64_t v30 = v31;
            do
            {
              v11 += 24;
              uint64_t v34 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v11;
              unsigned int v150 = *((void *)sub_25B53F6AC(v34, (unsigned __int8 *)v11, (long long **)&v170) + 5);
              unint64_t v35 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
            }
            while (v150 > *((void *)sub_25B53F6AC(v35, (unsigned __int8 *)&v172, (long long **)&v170) + 5));
            do
            {
              v30 -= 24;
              unint64_t v36 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = v30;
              unsigned int v151 = *((void *)sub_25B53F6AC(v36, v30, (long long **)&v170) + 5);
              float32x2_t v37 = (uint64_t *)(**a3 + 128);
              *(void *)&long long v170 = &v172;
            }
            while (v151 <= *((void *)sub_25B53F6AC(v37, (unsigned __int8 *)&v172, (long long **)&v170)
                                          + 5));
          }
          while (v11 < (unint64_t)v30);
        }
        unint64_t v38 = (long long *)(v11 - 24);
        if (v11 - 24 == a1)
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v39 = *v38;
          *(void *)(a1 + 16) = *(void *)(v11 - 8);
          *(_OWORD *)a1 = v39;
          *(unsigned char *)(v11 - 1) = 0;
          *(unsigned char *)(v11 - 24) = 0;
        }
        long long v40 = v172;
        *(void *)(v11 - 8) = v173;
        long long *v38 = v40;
        if (v22 >= v25) {
          break;
        }
LABEL_36:
        sub_25B53E4D0(a1, v11 - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v41 = sub_25B540518(a1, v11 - 24, a3);
      if (sub_25B540518(v11, a2, a3)) {
        break;
      }
      if (!v41) {
        goto LABEL_36;
      }
    }
    a2 = v11 - 24;
    if (!v41) {
      continue;
    }
    break;
  }
}

void sub_25B53F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B53F6AC(uint64_t *a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_25B403F44((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = v13 + 16;
  long long v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v15 = v17;
  }
  long long v18 = a1 + 2;
  *((void *)v13 + 5) = 0;
  float v19 = (float)(unint64_t)(a1[3] + 1);
  float v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          int v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void *)*v18;
          if (*v18)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v18;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  void *v28 = *v34;
                  void *v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_58:
                uint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        long long v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *a1;
  float32x2_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *(void *)unint64_t v13 = *v37;
LABEL_75:
    *float32x2_t v37 = v13;
    goto LABEL_76;
  }
  *(void *)unint64_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v36 + 8 * v3) = v18;
  if (*(void *)v13)
  {
    unint64_t v38 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    float32x2_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_25B53FAC4(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

void sub_25B53FAE8(void *a1, unsigned __int8 *a2)
{
  unint64_t v3 = sub_25B4035B0(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = *((void *)v3 + 1);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v7 = *(unsigned __int8 **)(*a1 + 8 * v5);
    do
    {
      unint64_t v8 = v7;
      unint64_t v7 = *(unsigned __int8 **)v7;
    }
    while (v7 != v3);
    if (v8 == (unsigned __int8 *)(a1 + 2)) {
      goto LABEL_20;
    }
    unint64_t v9 = *((void *)v8 + 1);
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*(void *)v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*(void *)v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *(void *)v3;
    if (*(void *)v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *(void *)v3;
      }
    }
    *(void *)unint64_t v8 = v11;
    *(void *)unint64_t v3 = 0;
    --a1[3];
    sub_25B403FE8(1, (void **)v3);
  }
}

double sub_25B53FC58(uint64_t a1, char *__src, long long *a3, long long *a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  uint8x8_t v6 = a3;
  unint64_t v7 = __src;
  unint64_t v9 = (void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 8);
  if (a5 <= (uint64_t)(v10 - v11) >> 4)
  {
    uint64_t v18 = (uint64_t)(v11 - (void)__src) >> 4;
    if (v18 >= a5)
    {
      float v19 = &a3[a5];
      BOOL v21 = *(char **)(a1 + 8);
    }
    else
    {
      float v19 = &a3[v18];
      if (v19 == a4)
      {
        BOOL v21 = *(char **)(a1 + 8);
      }
      else
      {
        float v20 = &a3[v18];
        BOOL v21 = *(char **)(a1 + 8);
        do
        {
          long long v22 = *v20++;
          double result = *(double *)&v22;
          *(_OWORD *)BOOL v21 = v22;
          v21 += 16;
        }
        while (v20 != a4);
      }
      *(void *)(a1 + 8) = v21;
      if ((uint64_t)(v11 - (void)__src) < 1) {
        return result;
      }
    }
    uint64_t v28 = &__src[16 * a5];
    unint64_t v29 = &v21[-16 * a5];
    uint8x8_t v30 = v21;
    if ((unint64_t)v29 < v11)
    {
      uint8x8_t v30 = v21;
      do
      {
        long long v31 = *(_OWORD *)v29;
        v29 += 16;
        double result = *(double *)&v31;
        *(_OWORD *)uint8x8_t v30 = v31;
        v30 += 16;
      }
      while ((unint64_t)v29 < v11);
    }
    *(void *)(a1 + 8) = v30;
    if (v21 != v28) {
      memmove(&v21[-16 * ((v21 - v28) >> 4)], __src, v21 - v28);
    }
    for (; v6 != v19; v7 += 16)
    {
      long long v32 = *v6++;
      double result = *(double *)&v32;
      *(_OWORD *)unint64_t v7 = v32;
    }
  }
  else
  {
    unint64_t v12 = *(unsigned char **)a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - *(void *)a1) >> 4);
    if (v13 >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v14 = (__src - v12) >> 4;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 3 > v13) {
      unint64_t v13 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __p[4] = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_25B3FFAEC(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v24 = (_OWORD *)(v16 + 16 * v14);
    __p[0] = (void *)v16;
    __p[1] = v24;
    __p[3] = (void *)(v16 + 16 * v17);
    uint64_t v25 = 16 * a5;
    uint64_t v26 = &v24[a5];
    do
    {
      long long v27 = *v6++;
      *v24++ = v27;
      v25 -= 16;
    }
    while (v25);
    __p[2] = v26;
    sub_25B49D54C((void **)a1, (uint64_t)__p, v7);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  return result;
}

uint64_t sub_25B53FE10(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v8 = objc_msgSend_count(v4, v6, v7);
  if (v8 <= objc_msgSend_count(v5, v9, v10))
  {
    uint64_t v14 = objc_msgSend_count(v4, v11, v12);
    uint64_t v13 = v14 < objc_msgSend_count(v5, v15, v16);
  }
  else
  {
    uint64_t v13 = -1;
  }

  return v13;
}

void sub_25B53FE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_25B53FEA8(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (uint64_t *)(**a4 + 128);
  v37[0] = (long long *)a2;
  unsigned int v32 = *((void *)sub_25B53F6AC(v8, (unsigned __int8 *)a2, v37) + 5);
  unint64_t v9 = (uint64_t *)(**a4 + 128);
  v37[0] = (long long *)a1;
  uint64_t v10 = *((void *)sub_25B53F6AC(v9, (unsigned __int8 *)a1, v37) + 5);
  unint64_t v11 = (uint64_t *)(**a4 + 128);
  if (v32 <= v10)
  {
    v37[0] = (long long *)a3;
    unsigned int v34 = *((void *)sub_25B53F6AC(v11, (unsigned __int8 *)a3, v37) + 5);
    uint64_t v17 = (uint64_t *)(**a4 + 128);
    v37[0] = (long long *)a2;
    double result = sub_25B53F6AC(v17, (unsigned __int8 *)a2, v37);
    if (v34 > *((void *)result + 5))
    {
      uint64_t v18 = *(void *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      uint64_t v20 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v20;
      *(_OWORD *)a3 = v19;
      *(void *)(a3 + 16) = v18;
      BOOL v21 = (uint64_t *)(**a4 + 128);
      v37[0] = (long long *)a2;
      unsigned int v35 = *((void *)sub_25B53F6AC(v21, (unsigned __int8 *)a2, v37) + 5);
      long long v22 = (uint64_t *)(**a4 + 128);
      v37[0] = (long long *)a1;
      double result = sub_25B53F6AC(v22, (unsigned __int8 *)a1, v37);
      if (v35 > *((void *)result + 5))
      {
        uint64_t v23 = *(void *)(a1 + 16);
        long long v24 = *(_OWORD *)a1;
        uint64_t v25 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v25;
        *(_OWORD *)a2 = v24;
        *(void *)(a2 + 16) = v23;
      }
    }
  }
  else
  {
    v37[0] = (long long *)a3;
    unsigned int v33 = *((void *)sub_25B53F6AC(v11, (unsigned __int8 *)a3, v37) + 5);
    uint64_t v12 = (uint64_t *)(**a4 + 128);
    v37[0] = (long long *)a2;
    double result = sub_25B53F6AC(v12, (unsigned __int8 *)a2, v37);
    if (v33 <= *((void *)result + 5))
    {
      uint64_t v26 = *(void *)(a1 + 16);
      long long v27 = *(_OWORD *)a1;
      uint64_t v28 = *(void *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v28;
      *(_OWORD *)a2 = v27;
      *(void *)(a2 + 16) = v26;
      unint64_t v29 = (uint64_t *)(**a4 + 128);
      v37[0] = (long long *)a3;
      unsigned int v36 = *((void *)sub_25B53F6AC(v29, (unsigned __int8 *)a3, v37) + 5);
      uint8x8_t v30 = (uint64_t *)(**a4 + 128);
      v37[0] = (long long *)a2;
      double result = sub_25B53F6AC(v30, (unsigned __int8 *)a2, v37);
      if (v36 <= *((void *)result + 5)) {
        return result;
      }
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v31 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v31;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = v16;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v14;
  }
  return result;
}

__n128 sub_25B54012C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  sub_25B53FEA8(a1, a2, a3, a5);
  uint64_t v10 = (uint64_t *)(**a5 + 128);
  v28[0] = (long long *)a4;
  unsigned __int32 v25 = *((void *)sub_25B53F6AC(v10, (unsigned __int8 *)a4, v28) + 5);
  unint64_t v11 = (uint64_t *)(**a5 + 128);
  v28[0] = (long long *)a3;
  result.n128_u64[0] = *((void *)sub_25B53F6AC(v11, (unsigned __int8 *)a3, v28) + 5);
  if (v25 > result.n128_u32[0])
  {
    uint64_t v13 = *(void *)(a3 + 16);
    long long v14 = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v15;
    *(_OWORD *)a4 = v14;
    *(void *)(a4 + 16) = v13;
    uint64_t v16 = (uint64_t *)(**a5 + 128);
    v28[0] = (long long *)a3;
    unsigned __int32 v26 = *((void *)sub_25B53F6AC(v16, (unsigned __int8 *)a3, v28) + 5);
    uint64_t v17 = (uint64_t *)(**a5 + 128);
    v28[0] = (long long *)a2;
    result.n128_u64[0] = *((void *)sub_25B53F6AC(v17, (unsigned __int8 *)a2, v28) + 5);
    if (v26 > result.n128_u32[0])
    {
      uint64_t v18 = *(void *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      uint64_t v20 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v20;
      *(_OWORD *)a3 = v19;
      *(void *)(a3 + 16) = v18;
      BOOL v21 = (uint64_t *)(**a5 + 128);
      v28[0] = (long long *)a2;
      unsigned __int32 v27 = *((void *)sub_25B53F6AC(v21, (unsigned __int8 *)a2, v28) + 5);
      long long v22 = (uint64_t *)(**a5 + 128);
      v28[0] = (long long *)a1;
      result.n128_u64[0] = *((void *)sub_25B53F6AC(v22, (unsigned __int8 *)a1, v28) + 5);
      if (v27 > result.n128_u32[0])
      {
        uint64_t v23 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v24 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v24;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v23;
      }
    }
  }
  return result;
}

__n128 sub_25B5402E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  sub_25B54012C(a1, a2, a3, a4, a6);
  uint64_t v12 = (uint64_t *)(**a6 + 128);
  v36[0] = (long long *)a5;
  unsigned __int32 v32 = *((void *)sub_25B53F6AC(v12, (unsigned __int8 *)a5, v36) + 5);
  uint64_t v13 = (uint64_t *)(**a6 + 128);
  v36[0] = (long long *)a4;
  result.n128_u64[0] = *((void *)sub_25B53F6AC(v13, (unsigned __int8 *)a4, v36) + 5);
  if (v32 > result.n128_u32[0])
  {
    uint64_t v15 = *(void *)(a4 + 16);
    long long v16 = *(_OWORD *)a4;
    uint64_t v17 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v17;
    *(_OWORD *)a5 = v16;
    *(void *)(a5 + 16) = v15;
    uint64_t v18 = (uint64_t *)(**a6 + 128);
    v36[0] = (long long *)a4;
    unsigned __int32 v33 = *((void *)sub_25B53F6AC(v18, (unsigned __int8 *)a4, v36) + 5);
    long long v19 = (uint64_t *)(**a6 + 128);
    v36[0] = (long long *)a3;
    result.n128_u64[0] = *((void *)sub_25B53F6AC(v19, (unsigned __int8 *)a3, v36) + 5);
    if (v33 > result.n128_u32[0])
    {
      uint64_t v20 = *(void *)(a3 + 16);
      long long v21 = *(_OWORD *)a3;
      uint64_t v22 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v22;
      *(_OWORD *)a4 = v21;
      *(void *)(a4 + 16) = v20;
      uint64_t v23 = (uint64_t *)(**a6 + 128);
      v36[0] = (long long *)a3;
      unsigned __int32 v34 = *((void *)sub_25B53F6AC(v23, (unsigned __int8 *)a3, v36) + 5);
      uint64_t v24 = (uint64_t *)(**a6 + 128);
      v36[0] = (long long *)a2;
      result.n128_u64[0] = *((void *)sub_25B53F6AC(v24, (unsigned __int8 *)a2, v36) + 5);
      if (v34 > result.n128_u32[0])
      {
        uint64_t v25 = *(void *)(a2 + 16);
        long long v26 = *(_OWORD *)a2;
        uint64_t v27 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v27;
        *(_OWORD *)a3 = v26;
        *(void *)(a3 + 16) = v25;
        uint64_t v28 = (uint64_t *)(**a6 + 128);
        v36[0] = (long long *)a2;
        unsigned __int32 v35 = *((void *)sub_25B53F6AC(v28, (unsigned __int8 *)a2, v36) + 5);
        unint64_t v29 = (uint64_t *)(**a6 + 128);
        v36[0] = (long long *)a1;
        result.n128_u64[0] = *((void *)sub_25B53F6AC(v29, (unsigned __int8 *)a1, v36) + 5);
        if (v35 > result.n128_u32[0])
        {
          uint64_t v30 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v31 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v31;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v30;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B540518(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      unint64_t v9 = (uint64_t *)(**a3 + 128);
      *(void *)&long long v29 = a2 - 24;
      unsigned int v26 = *((void *)sub_25B53F6AC(v9, (unsigned __int8 *)(a2 - 24), (long long **)&v29) + 5);
      uint64_t v10 = (uint64_t *)(**a3 + 128);
      *(void *)&long long v29 = a1;
      if (v26 > *((void *)sub_25B53F6AC(v10, (unsigned __int8 *)a1, (long long **)&v29) + 5))
      {
        uint64_t v11 = *(void *)(a1 + 16);
        long long v12 = *(_OWORD *)a1;
        uint64_t v13 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v13;
        *(_OWORD *)uint64_t v8 = v12;
        *(void *)(v8 + 16) = v11;
      }
      return 1;
    case 3uLL:
      sub_25B53FEA8(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_25B54012C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_25B5402E4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      long long v14 = (unsigned __int8 *)(a1 + 48);
      sub_25B53FEA8(a1, a1 + 24, a1 + 48, a3);
      uint64_t v15 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    uint64_t v18 = (uint64_t *)(**a3 + 128);
    *(void *)&long long v29 = v15;
    unsigned int v27 = *((void *)sub_25B53F6AC(v18, (unsigned __int8 *)v15, (long long **)&v29) + 5);
    long long v19 = (uint64_t *)(**a3 + 128);
    *(void *)&long long v29 = v14;
    if (v27 > *((void *)sub_25B53F6AC(v19, v14, (long long **)&v29) + 5))
    {
      long long v29 = *(_OWORD *)v15;
      uint64_t v30 = *(void *)(v15 + 16);
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = 0;
      uint64_t v20 = v16;
      do
      {
        uint64_t v21 = a1 + v20;
        uint64_t v22 = (void **)(a1 + v20 + 72);
        if (*(char *)(a1 + v20 + 95) < 0) {
          operator delete(*v22);
        }
        *(_OWORD *)uint64_t v22 = *(_OWORD *)(v21 + 48);
        *(void *)(a1 + v20 + 88) = *(void *)(v21 + 64);
        *(unsigned char *)(v21 + 71) = 0;
        *(unsigned char *)(v21 + 48) = 0;
        if (v20 == -48)
        {
          uint64_t v25 = a1;
          goto LABEL_15;
        }
        uint64_t v23 = (uint64_t *)(**a3 + 128);
        uint64_t v31 = (unsigned __int8 *)&v29;
        unsigned int v28 = *((void *)sub_25B53F6AC(v23, (unsigned __int8 *)&v29, (long long **)&v31) + 5);
        uint64_t v24 = (uint64_t *)(**a3 + 128);
        uint64_t v31 = (unsigned __int8 *)(a1 + v20 + 24);
        v20 -= 24;
      }
      while (v28 > *((void *)sub_25B53F6AC(v24, v31, (long long **)&v31) + 5));
      uint64_t v25 = a1 + v20 + 72;
      if (*(char *)(v25 + 23) < 0) {
        operator delete(*(void **)v25);
      }
LABEL_15:
      *(_OWORD *)uint64_t v25 = v29;
      *(void *)(v25 + 16) = v30;
      if (++v17 == 8) {
        return v15 + 24 == a2;
      }
    }
    long long v14 = (unsigned __int8 *)v15;
    v16 += 24;
    v15 += 24;
    if (v15 == a2) {
      return 1;
    }
  }
}

void sub_25B540824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B540858(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B53C430((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_25B5409A0(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  id v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v19 = &v3[4 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    long long v19 = &v4[4 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    sub_25B3FBC4C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)sub_25B3FBC64(v10);
  long long v12 = &v11[4 * v5];
  long long v14 = &v11[4 * v13];
  bzero(v12, 4 * v6);
  uint64_t v15 = &v12[4 * v6];
  int v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      int v18 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v12 - 1) = v18;
      v12 -= 4;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_25B540BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B540F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_25B541704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (v16) {
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_25B541B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B540858((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_25B541B8C(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        *(void *)(v6 + 40) = v2[5];
        uint64_t v8 = *(void ***)v6;
        sub_25B541E20((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8) {
          BOOL v9 = v2 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    sub_25B4010B8(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    unint64_t v10 = (char *)operator new(0x30uLL);
    uint64_t v11 = (uint64_t)v10;
    long long v12 = v10 + 16;
    *(void *)unint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      sub_25B4002F4(v10 + 16, (void *)v2[2], v2[3]);
    }
    else
    {
      long long v13 = *((_OWORD *)v2 + 1);
      *((void *)v10 + 4) = v2[4];
      *long long v12 = v13;
    }
    *(void *)(v11 + 40) = v2[5];
    *(void *)(v11 + 8) = sub_25B403AF4((uint64_t)v12);
    sub_25B541E20((uint64_t)a1, v11);
  }
}

void sub_25B541CA0(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

void sub_25B541CEC(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v4; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      unint64_t v7 = a2[2];
      std::locale v6[2] = v7;
      uint64_t v8 = (void *)*v6;
      v6[1] = v7;
      BOOL v9 = sub_25B4CC680((uint64_t)a1, v7, v6 + 2);
      sub_25B46F674(a1, v6, v9);
      a2 = (void *)*a2;
      uint64_t v6 = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    do
    {
      long long v13 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      unint64_t v10 = operator new(0x18uLL);
      void *v10 = 0;
      unint64_t v11 = a2[2];
      void v10[2] = v11;
      v10[1] = v11;
      long long v12 = sub_25B4CC680((uint64_t)a1, v11, v10 + 2);
      sub_25B46F674(a1, v10, v12);
      a2 = (void *)*a2;
    }
  }
}

void sub_25B541DDC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_25B541DFC(_Unwind_Exception *a1)
{
}

void sub_25B541E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = sub_25B403AF4(a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        sub_25B3FA70C();
      }
      long long v12 = operator new(8 * *(void *)&prime);
      long long v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      BOOL v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        long long v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              uint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              uint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                uint64_t v25 = (void *)v22;
                while (1)
                {
                  unsigned int v26 = v24;
                  if (!sub_25B403F44((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16)) {
                    break;
                  }
                  uint64_t v24 = (void *)*v26;
                  uint64_t v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                uint64_t v24 = v26;
                unsigned int v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                unsigned int v26 = (void *)v22;
              }
              uint64_t *v15 = (uint64_t)v24;
              *unsigned int v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              uint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      unsigned int v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  uint64_t v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    unsigned __int32 v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        unsigned __int32 v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && sub_25B403F44(v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        unsigned __int32 v32 = *(unsigned __int8 **)v34;
        uint64_t v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v31;
  *(void *)uint64_t v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

id RSPointCloudToDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v4 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v2, v3);
  unint64_t v5 = NSNumber;
  uint64_t v8 = objc_msgSend_count(v1, v6, v7);
  unint64_t v10 = objc_msgSend_numberWithUnsignedInteger_(v5, v9, v8);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v11, (uint64_t)v10, @"count");

  uint64_t v14 = (const void *)objc_msgSend_points(v1, v12, v13);
  uint64_t v17 = objc_msgSend_points(v1, v15, v16);
  uint64_t v20 = objc_msgSend_count(v1, v18, v19);
  long long v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  sub_25B487E48(&v111, v14, v17 + 16 * v20, (v17 + 16 * v20 - (uint64_t)v14) >> 4);
  uint64_t v21 = v111;
  uint64_t v22 = v112;
  uint64_t v23 = (char *)v112 - (char *)v111;
  sub_25B443228(&v109, (((char *)v112 - (char *)v111) >> 3) + (((char *)v112 - (char *)v111) >> 4));
  if (v22 != v21)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v23 >> 4;
    if ((unint64_t)(v23 >> 4) <= 1) {
      uint64_t v26 = 1;
    }
    unsigned int v27 = v21;
    do
    {
      uint8x8_t v28 = (char *)v109 + v25;
      uint64_t v29 = *(void *)v27;
      *((_DWORD *)v28 + 2) = v27[2];
      *(void *)uint8x8_t v28 = v29;
      v27 += 4;
      v25 += 12;
      --v26;
    }
    while (v26);
  }
  if (v110 == v109)
  {
    id v30 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v24, (uint64_t)v109, v110 - (unsigned char *)v109);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
  }
  unsigned __int32 v32 = v30;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v31, (uint64_t)v30, @"points");

  uint64_t v35 = objc_msgSend_semanticLabels(v1, v33, v34);
  uint64_t v39 = objc_msgSend_count(v1, v36, v37);
  if (v35 && v39)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v38, v35, 4 * v39);
    id v40 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v40 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  unint64_t v42 = v40;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v41, (uint64_t)v40, @"semanticLabels");

  uint64_t v45 = objc_msgSend_semanticVotes(v1, v43, v44);
  uint64_t v49 = objc_msgSend_count(v1, v46, v47);
  if (v45 && v49)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v48, v45, 8 * v49);
    id v50 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v50 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  unint64_t v52 = v50;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v51, (uint64_t)v50, @"semanticVotes");

  long long v55 = (const void *)objc_msgSend_colors(v1, v53, v54);
  uint64_t v58 = objc_msgSend_colors(v1, v56, v57);
  uint64_t v61 = objc_msgSend_count(v1, v59, v60);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  sub_25B40EE6C(&v106, v55, v58 + 16 * v61, (v58 + 16 * v61 - (uint64_t)v55) >> 4);
  unint64_t v62 = v106;
  long long v63 = v107;
  uint64_t v64 = (char *)v107 - (char *)v106;
  sub_25B443228(&v104, (((char *)v107 - (char *)v106) >> 3) + (((char *)v107 - (char *)v106) >> 4));
  if (v63 != v62)
  {
    uint64_t v66 = 0;
    uint64_t v67 = v64 >> 4;
    if ((unint64_t)(v64 >> 4) <= 1) {
      uint64_t v67 = 1;
    }
    long long v68 = v62;
    do
    {
      long long v69 = (char *)v104 + v66;
      uint64_t v70 = *(void *)v68;
      *((_DWORD *)v69 + 2) = v68[2];
      *(void *)long long v69 = v70;
      v68 += 4;
      v66 += 12;
      --v67;
    }
    while (v67);
  }
  if (v105 == v104)
  {
    id v71 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v65, (uint64_t)v104, v105 - (unsigned char *)v104);
    id v71 = (id)objc_claimAutoreleasedReturnValue();
  }
  float32x2_t v73 = v71;
  objc_msgSend_setObject_forKeyedSubscript_(v4, v72, (uint64_t)v71, @"colors");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v74 = v1;
    if (objc_msgSend_cameraPositions(v74, v75, v76))
    {
      float32x2_t v79 = (const void *)objc_msgSend_cameraPositions(v74, v77, v78);
      uint64_t v82 = objc_msgSend_cameraPositions(v74, v80, v81);
      uint64_t v85 = objc_msgSend_count(v74, v83, v84);
      long long v101 = 0;
      int64_t v102 = 0;
      uint64_t v103 = 0;
      sub_25B487E48(&v101, v79, v82 + 16 * v85, (v82 + 16 * v85 - (uint64_t)v79) >> 4);
      uint64_t v86 = v101;
      unint64_t v87 = v102;
      uint64_t v88 = (char *)v102 - (char *)v101;
      sub_25B443228(&__p, (((char *)v102 - (char *)v101) >> 3) + (((char *)v102 - (char *)v101) >> 4));
      if (v87 != v86)
      {
        uint64_t v90 = 0;
        uint64_t v91 = v88 >> 4;
        if ((unint64_t)(v88 >> 4) <= 1) {
          uint64_t v91 = 1;
        }
        unint64_t v92 = v86;
        do
        {
          long long v93 = (char *)__p + v90;
          uint64_t v94 = *(void *)v92;
          *((_DWORD *)v93 + 2) = v92[2];
          *(void *)long long v93 = v94;
          v92 += 4;
          v90 += 12;
          --v91;
        }
        while (v91);
      }
      if (v100 == __p)
      {
        id v95 = objc_alloc_init(MEMORY[0x263EFF8F8]);
      }
      else
      {
        objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v89, (uint64_t)__p, v100 - (unsigned char *)__p);
        id v95 = (id)objc_claimAutoreleasedReturnValue();
      }
      float v97 = v95;
      objc_msgSend_setObject_forKeyedSubscript_(v4, v96, (uint64_t)v95, @"cameraPositions");

      if (__p)
      {
        unint64_t v100 = __p;
        operator delete(__p);
      }
      if (v86) {
        operator delete(v86);
      }
    }
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v109)
  {
    long long v110 = v109;
    operator delete(v109);
  }
  if (v21) {
    operator delete(v21);
  }

  return v4;
}

void sub_25B5427AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v29 = v27;

  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }

  if (a15) {
    operator delete(a15);
  }
  if (v25) {
    operator delete(v25);
  }
  if (a21) {
    operator delete(a21);
  }
  if (v24) {
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

id RSPointCloudFromDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [RSPointCloud alloc];
  uint64_t v4 = objc_msgSend_initWithDictionary_(v2, v3, (uint64_t)v1);

  return v4;
}

void sub_25B5428EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B54296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)RSCVPixelRotate;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *sub_25B542A8C(void *a1, double a2, double a3, uint64_t a4, int a5)
{
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)RSCVPixelRotate;
    uint64_t v8 = objc_msgSendSuper2(&v14, sel_init);
    unint64_t v9 = v8;
    if (v8)
    {
      *((double *)v8 + 3) = a2;
      *((double *)v8 + 4) = a3;
      *((_DWORD *)v8 + 10) = a5;
      uint64_t v15 = 0;
      int v10 = VTImageRotationSessionCreate();
      uint64_t v11 = v15;
      if (v10) {
        uint64_t v11 = 0;
      }
      v9[2] = v11;
      if (MEMORY[0x263F66F48])
      {
        if (!SIPixelBufferPoolCreate())
        {
          unint64_t v9 = v9;
          long long v12 = v9;
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v12 = 0;
LABEL_8:

  return v12;
}

void sub_25B542B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef sub_25B542B94(CVPixelBufferRef pixelBufferOut, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (pixelBufferOut)
  {
    if (a2)
    {
      uint64_t v3 = (uint64_t)pixelBufferOut;
      uint64_t v4 = (CVPixelBufferRef *)((char *)pixelBufferOut + 48);
      if (*((void *)pixelBufferOut + 6)
        || !CVPixelBufferPoolCreatePixelBuffer(0, *((CVPixelBufferPoolRef *)pixelBufferOut + 1), v4))
      {
        if (!MEMORY[0x261163B40](*(void *)(v3 + 16), a2)) {
          return *v4;
        }
      }
      else
      {
        if (qword_26A5020B0 != -1) {
          dispatch_once(&qword_26A5020B0, &unk_2708F1218);
        }
        unint64_t v5 = (id)qword_26A5020A8;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          float v6 = (objc_class *)objc_opt_class();
          uint64_t v7 = NSStringFromClass(v6);
          uint64_t v8 = NSStringFromSelector(sel_rotateImage_);
          int v9 = 138412546;
          int v10 = v7;
          __int16 v11 = 2112;
          long long v12 = v8;
          _os_log_error_impl(&dword_25B3F3000, v5, OS_LOG_TYPE_ERROR, "-[%@ %@]: Failure to create pixel buffer for rotation", (uint8_t *)&v9, 0x16u);
        }
      }
    }
    return 0;
  }
  return pixelBufferOut;
}

void sub_25B542CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B542D20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B542D8C()
{
}

void sub_25B542DA4()
{
}

void sub_25B542DBC()
{
}

void sub_25B542DD4()
{
}

_OWORD *sub_25B542DEC(_OWORD *a1, int *a2, int *a3, int *a4)
{
  uint64_t v5 = 0;
  v18[3] = *MEMORY[0x263EF8340];
  a1[2] = 0u;
  uint64_t v6 = 1;
  uint64_t v7 = (void *)MEMORY[0x263F8C0F8];
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v8 = *a3;
  v18[0] = *a2;
  v18[1] = v8;
  int v9 = (std::locale::id *)MEMORY[0x263F8C108];
  std::locale v18[2] = *a4;
  uint64_t v16 = 0;
  do
  {
    int v10 = &v18[v5];
    unint64_t v11 = v18[v5];
    if (v11 >= 0xBEBC200)
    {
      sub_25B406B20(v7, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
      sub_25B406B20(v7, (uint64_t)" ", 1);
      long long v12 = (void *)std::ostream::operator<<();
      sub_25B406B20(v12, (uint64_t)" ", 1);
      sub_25B406B20(v12, (uint64_t)"Shape", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v13 = std::locale::use_facet(&v17, v9);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45806C("err", "shape[", (uint64_t)&v16, "]", " is ", (uint64_t)v10, " ,it should <= 6");
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      objc_super v14 = std::locale::use_facet(&v17, v9);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v11 = *v10;
    }
    uint64_t v16 = v6;
    *(void *)((char *)a1 + v5 * 8) = v11;
    ++v5;
    ++v6;
  }
  while (v5 != 3);
  return a1;
}

void sub_25B543068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B543088(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v16, 0, sizeof(v16));
  if (a3 != 1 || a4)
  {
    if (!a3 && a4 == 1)
    {
      LODWORD(v19) = 1065353216;
      __vImage_Buffer src = xmmword_25B5F2140;
      long long v18 = unk_25B5F2150;
      sub_25B3FE7A8((char *)v16, (char *)&__src, (uint64_t)&v19 + 4, 9uLL);
    }
  }
  else
  {
    LODWORD(v19) = 1065353216;
    __vImage_Buffer src = xmmword_25B5F211C;
    long long v18 = *(_OWORD *)algn_25B5F212C;
    sub_25B3FE7A8((char *)v16, (char *)&__src, (uint64_t)&v19 + 4, 9uLL);
  }
  sub_25B4583CC((uint64_t)v15, (_OWORD *)(a2 + 8));
  vDSP_f3x3(*(const float **)(a2 + 144), *(void *)(a2 + 8), *(void *)(a2 + 16), v16[0], (float *)v15[18]);
  sub_25B4582F4((uint64_t)&v11, (uint64_t)v15);
  __vImage_Buffer src = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = v12;
  long long v21 = v13;
  long long v22 = v14;
  sub_25B4582F4((uint64_t)v23, (uint64_t)&v11);
  long long v6 = v20;
  long long v7 = v21;
  __vImage_Buffer src = v20;
  long long v18 = v21;
  long long v8 = v22;
  long long v19 = v22;
  *(void *)a1 = &unk_2708F1C28;
  *(_OWORD *)(a1 + 8) = v6;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 104) = v10 * v9;
  *(void *)(a1 + 112) = 0;
  sub_25B408738((uint64_t)v24, v10 * v9);
}

void sub_25B543EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,uint64_t a53,void *__p)
{
  std::locale::~locale((std::locale *)&STACK[0x2E0]);
  sub_25B3F9500((uint64_t)&STACK[0x310]);
  long long v56 = *(std::__shared_weak_count **)(v54 + 128);
  if (v56) {
    sub_25B404120(v56);
  }
  STACK[0x210] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x290]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x290]);
  }
  if (a31) {
    sub_25B404120(a31);
  }
  if (a51) {
    sub_25B404120(a51);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

RSTextCoachingSignal *sub_25B543FE4(void *a1)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id obj = a1;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v1, (uint64_t)&v76, v80, 16);
  if (!v4)
  {

    long long v8 = 0;
    uint64_t v5 = 0;
LABEL_131:
    uint64_t v64 = objc_alloc_init(RSTextCoachingSignal);
    goto LABEL_132;
  }
  uint64_t v5 = 0;
  long long v6 = 0;
  unint64_t v7 = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v75 = *(void *)v77;
  do
  {
    uint64_t v11 = 0;
    uint64_t v73 = v4;
    do
    {
      if (*(void *)v77 != v75) {
        objc_enumerationMutation(obj);
      }
      long long v12 = *(void **)(*((void *)&v76 + 1) + 8 * v11);
      if (objc_msgSend_type(v12, v2, v3) == -1)
      {
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v22 = v9 - v8;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v10 - (void)v8) >> 1 > v23) {
            unint64_t v23 = (uint64_t)(v10 - (void)v8) >> 1;
          }
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)sub_25B3FBC64(v24);
          }
          else {
            uint64_t v2 = 0;
          }
          int v33 = (float *)(v24 + 4 * v22);
          *int v33 = 0.0;
          long long v18 = v33 + 1;
          while (v9 != v8)
          {
            int v34 = *((_DWORD *)v9-- - 1);
            *((_DWORD *)v33-- - 1) = v34;
          }
          unint64_t v10 = v24 + 4 * (void)v2;
          if (v8) {
            operator delete(v8);
          }
          long long v8 = v33;
        }
        else
        {
          *uint64_t v9 = 0.0;
          long long v18 = v9 + 1;
        }
        if ((unint64_t)v6 < v7)
        {
          *v6++ = 0.0;
          uint64_t v9 = v18;
          goto LABEL_81;
        }
        uint64_t v35 = v6 - v5;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v7 - (void)v5) >> 1 > v36) {
          unint64_t v36 = (uint64_t)(v7 - (void)v5) >> 1;
        }
        if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37) {
          unint64_t v37 = (unint64_t)sub_25B3FBC64(v37);
        }
        else {
          uint64_t v2 = 0;
        }
        unint64_t v38 = (float *)(v37 + 4 * v35);
        float *v38 = 0.0;
        uint64_t v39 = v38 + 1;
        while (v6 != v5)
        {
          int v40 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v38-- - 1) = v40;
        }
        unint64_t v7 = v37 + 4 * (void)v2;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v38;
        long long v6 = v39;
        uint64_t v9 = v18;
        goto LABEL_80;
      }
      if (objc_msgSend_type(v12, v2, v3) == 3
        || objc_msgSend_type(v12, v13, v14) == 1
        || objc_msgSend_type(v12, v13, v14) == 2
        || objc_msgSend_type(v12, v13, v14) == 4
        || objc_msgSend_type(v12, v13, v14) == 5)
      {
        objc_msgSend_score(v12, v13, v14);
        int v16 = v15;
        if ((unint64_t)v6 >= v7)
        {
          uint64_t v19 = v6 - v5;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v7 - (void)v5) >> 1 > v20) {
            unint64_t v20 = (uint64_t)(v7 - (void)v5) >> 1;
          }
          if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unint64_t v21 = (unint64_t)sub_25B3FBC64(v21);
          }
          else {
            uint64_t v2 = 0;
          }
          uint64_t v25 = (float *)(v21 + 4 * v19);
          *(_DWORD *)uint64_t v25 = v16;
          std::locale v17 = v25 + 1;
          while (v6 != v5)
          {
            int v26 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v25-- - 1) = v26;
          }
          unint64_t v7 = v21 + 4 * (void)v2;
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v25;
        }
        else
        {
          *(_DWORD *)long long v6 = v15;
          std::locale v17 = v6 + 1;
        }
        if ((unint64_t)v9 < v10)
        {
          *v9++ = 0.0;
          long long v6 = v17;
          goto LABEL_81;
        }
        uint64_t v27 = v9 - v8;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v10 - (void)v8) >> 1 > v28) {
          unint64_t v28 = (uint64_t)(v10 - (void)v8) >> 1;
        }
        if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
        }
        else {
          uint64_t v2 = 0;
        }
        id v30 = (float *)(v29 + 4 * v27);
        *id v30 = 0.0;
        uint64_t v31 = v30 + 1;
        while (v9 != v8)
        {
          int v32 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v30-- - 1) = v32;
        }
        unint64_t v10 = v29 + 4 * (void)v2;
        if (v8) {
          operator delete(v8);
        }
        long long v6 = v17;
        long long v8 = v30;
        uint64_t v9 = v31;
        goto LABEL_80;
      }
      if (!objc_msgSend_type(v12, v13, v14))
      {
        if ((unint64_t)v6 >= v7)
        {
          uint64_t v41 = v6 - v5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v7 - (void)v5) >> 1 > v42) {
            unint64_t v42 = (uint64_t)(v7 - (void)v5) >> 1;
          }
          if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            unint64_t v43 = (unint64_t)sub_25B3FBC64(v43);
          }
          else {
            uint64_t v2 = 0;
          }
          uint64_t v44 = (float *)(v43 + 4 * v41);
          *uint64_t v44 = 0.0;
          float32x2_t v72 = v44 + 1;
          while (v6 != v5)
          {
            int v45 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v44-- - 1) = v45;
          }
          unint64_t v7 = v43 + 4 * (void)v2;
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v44;
          long long v6 = v72;
        }
        else
        {
          *v6++ = 0.0;
        }
        objc_msgSend_score(v12, v2, v3, v72);
        int v47 = v46;
        if ((unint64_t)v9 >= v10)
        {
          uint64_t v48 = v9 - v8;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v10 - (void)v8) >> 1 > v49) {
            unint64_t v49 = (uint64_t)(v10 - (void)v8) >> 1;
          }
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v49;
          }
          if (v50) {
            unint64_t v50 = (unint64_t)sub_25B3FBC64(v50);
          }
          else {
            uint64_t v2 = 0;
          }
          uint64_t v51 = (float *)(v50 + 4 * v48);
          *(_DWORD *)uint64_t v51 = v47;
          unint64_t v52 = v51 + 1;
          while (v9 != v8)
          {
            int v53 = *((_DWORD *)v9-- - 1);
            *((_DWORD *)v51-- - 1) = v53;
          }
          unint64_t v10 = v50 + 4 * (void)v2;
          if (v8) {
            operator delete(v8);
          }
          long long v8 = v51;
          uint64_t v9 = v52;
LABEL_80:
          uint64_t v4 = v73;
          goto LABEL_81;
        }
        *(_DWORD *)v9++ = v46;
      }
LABEL_81:
      ++v11;
    }
    while (v11 != v4);
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v76, v80, 16);
    uint64_t v4 = v54;
  }
  while (v54);

  if (v5 == v6 || v8 == v9) {
    goto LABEL_131;
  }
  double v56 = 0.0;
  uint64_t v57 = v5;
  do
  {
    float v58 = *v57++;
    *(float *)&double v56 = *(float *)&v56 + v58;
  }
  while (v57 != v6);
  if (*(float *)&v56 <= 0.0)
  {
    uint64_t v67 = v8 + 1;
    if (v8 + 1 == v9)
    {
      long long v68 = v8;
    }
    else
    {
      *(float *)&double v56 = *v8;
      long long v68 = v8;
      long long v69 = v8 + 1;
      do
      {
        float v70 = *v69++;
        float v71 = v70;
        if (v70 < *(float *)&v56)
        {
          *(float *)&double v56 = v71;
          long long v68 = v67;
        }
        uint64_t v67 = v69;
      }
      while (v69 != v9);
    }
    objc_msgSend_objectAtIndexedSubscript_(obj, v55, v68 - v8, v56);
    uint64_t v64 = (RSTextCoachingSignal *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    unint64_t v59 = v5 + 1;
    if (v5 + 1 == v6)
    {
      uint64_t v60 = v5;
    }
    else
    {
      *(float *)&double v56 = *v5;
      uint64_t v60 = v5;
      uint64_t v61 = v5 + 1;
      do
      {
        float v62 = *v61++;
        float v63 = v62;
        if (*(float *)&v56 < v62)
        {
          *(float *)&double v56 = v63;
          uint64_t v60 = v59;
        }
        unint64_t v59 = v61;
      }
      while (v61 != v6);
    }
    objc_msgSend_objectAtIndexedSubscript_(obj, v55, v60 - v5, v56);
    uint64_t v64 = (RSTextCoachingSignal *)objc_claimAutoreleasedReturnValue();
  }
LABEL_132:
  uint64_t v65 = v64;
  if (v8) {
    operator delete(v8);
  }
  if (v5) {
    operator delete(v5);
  }

  return v65;
}

void sub_25B544658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v12) {
    operator delete(v12);
  }
  if (v11) {
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void *sub_25B5446E8(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    free(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    free(v4);
    a1[5] = 0;
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    free(v5);
    a1[6] = 0;
    a1[7] = 0;
    long long v6 = (void *)a1[5];
    if (v6)
    {
      free(v6);
      a1[5] = 0;
    }
  }
  else
  {
    a1[6] = 0;
  }
  a1[4] = 0;
  unint64_t v7 = (void *)a1[3];
  if (v7)
  {
    free(v7);
    a1[3] = 0;
  }
  a1[2] = 0;
  long long v8 = (void *)a1[1];
  if (v8)
  {
    free(v8);
    a1[1] = 0;
  }
  *a1 = 0;
  return a1;
}

uint64_t sub_25B544790(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 25;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 51;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_25B544858(int *a1, uint64_t a2)
{
  if (!*((void *)a1 + 1) || !*(void *)(a2 + 8))
  {
    int v3 = 0;
    int v4 = 0;
    goto LABEL_7;
  }
  int v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = v4 * *a1;
  if (!v5)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  size_t v6 = 8 * v5;
  unint64_t v7 = (double *)malloc_type_malloc(v6, 0x100004000313F17uLL);
  uint64_t v8 = v7;
  if (v7)
  {
    bzero(v7, v6);
    cblas_dgemm_NEWLAPACK();
  }
LABEL_8:
  uint64_t v9 = (v4 * v3);
  if (!v9)
  {
    uint64_t v11 = 0;
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  unint64_t v10 = (double *)malloc_type_malloc(8 * (int)v9, 0x100004000313F17uLL);
  uint64_t v11 = v10;
  if (v10) {
    bzero(v10, 8 * (int)v9);
  }
  if (v8)
  {
LABEL_14:
    long long v12 = (const double *)*((void *)a1 + 3);
    if (v12 && v11) {
      vDSP_vaddD(v8, 1, v12, 1, v11, 1, (int)v9);
    }
    free(v8);
  }
LABEL_18:
  if ((int)v9 >= 1)
  {
    long long v13 = v11;
    do
    {
      double v14 = *v13;
      if (*v13 < 0.0) {
        double v14 = 0.0;
      }
      *v13++ = v14;
      --v9;
    }
    while (v9);
  }
  if (*((void *)a1 + 5)) {
    BOOL v15 = v11 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    int v16 = 0;
    int v4 = 0;
LABEL_32:
    uint64_t v19 = 0;
    goto LABEL_33;
  }
  int v16 = a1[8];
  if (!(v16 * v4)) {
    goto LABEL_32;
  }
  size_t v17 = 8 * v16 * v4;
  long long v18 = (double *)malloc_type_malloc(v17, 0x100004000313F17uLL);
  uint64_t v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    cblas_dgemm_NEWLAPACK();
  }
LABEL_33:
  int v20 = v4 * v16;
  if (!(v4 * v16))
  {
    uint64_t v22 = 0;
    if (!v19) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  unint64_t v21 = (double *)malloc_type_malloc(8 * v20, 0x100004000313F17uLL);
  uint64_t v22 = v21;
  if (v21) {
    bzero(v21, 8 * v20);
  }
  if (v19)
  {
LABEL_39:
    unint64_t v23 = (const double *)*((void *)a1 + 7);
    if (v23 && v22) {
      vDSP_vaddD(v19, 1, v23, 1, v22, 1, v20);
    }
  }
LABEL_42:
  double __C = 0.0;
  vDSP_sveD(v22, 1, &__C, v20);
  double v24 = __C;
  if (v22) {
    free(v22);
  }
  if (v19) {
    free(v19);
  }
  if (v11) {
    free(v11);
  }
  long double v25 = exp(-v24);
  long double v26 = -log(v25 + 1.0);

  return exp(v26);
}

void sub_25B544B54(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

float *sub_25B544BEC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v6 = a2;
  if (objc_msgSend_vioTrackingState(v6, v7, v8))
  {
    uint64_t v11 = objc_msgSend_date(MEMORY[0x263EFF910], v9, v10);
    long long v12 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = v11;
  }
  if (*(void *)(a1 + 192))
  {
    long long v13 = objc_msgSend_date(MEMORY[0x263EFF910], v9, v10);
    objc_msgSend_timeIntervalSinceDate_(v13, v14, *(void *)(a1 + 192));
    double v16 = v15;

    if (v16 < 1.0) {
      goto LABEL_6;
    }
  }
  size_t v17 = objc_msgSend_rawFeaturePoints(v6, v9, v10);
  unint64_t v20 = objc_msgSend_count(v17, v18, v19);

  if (v20 <= 0x31)
  {
LABEL_6:
    unint64_t v21 = [RSTextCoachingSignal alloc];
    if (v21) {
      goto LABEL_29;
    }
    goto LABEL_52;
  }
  id v22 = v6;
  float32x4_t v87 = *(float32x4_t *)(a1 + 176);
  float32x4_t v88 = *(float32x4_t *)(a1 + 160);
  long double v25 = (__CVBuffer *)objc_msgSend_depthBuffer(v22, v23, v24);
  uint64_t v27 = v25;
  __asm { FMOV            V0.2S, #-1.0 }
  float32x2_t v90 = _D0;
  if (v25)
  {
    int64_t Width = CVPixelBufferGetWidth(v25);
    int64_t Height = CVPixelBufferGetHeight(v27);
    if (Height * Width)
    {
      v94.columns[0] = *(simd_float4 *)a3;
      v94.columns[1] = *(simd_float4 *)(a3 + 16);
      __int32 v85 = v94.columns[1].i32[1];
      simd_float4 v86 = *(simd_float4 *)a3;
      v94.columns[0].i32[3] = 0;
      v94.columns[1].i32[3] = 0;
      v94.columns[2] = *(simd_float4 *)(a3 + 32);
      v94.columns[2].i32[3] = 0;
      v94.columns[3] = *(simd_float4 *)(MEMORY[0x263EF89A8] + 48);
      simd_float4x4 v95 = __invert_f4(v94);
      uint64_t v36 = *(void *)(a1 + 128);
      uint64_t v35 = *(void *)(a1 + 120);
      uint64_t v37 = ((v36 - v35) << 6) - 1;
      unint64_t v38 = (const float *)a1;
      float32x4_t v39 = vld1q_dup_f32(v38++);
      float32x2_t v40 = vld1_dup_f32(v38);
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      unint64_t v41 = *(void *)(a1 + 152) + *(void *)(a1 + 144);
      if (v37 == v41)
      {
        simd_float4 v80 = v95.columns[0];
        simd_float4 v81 = v95.columns[1];
        simd_float4 v82 = v95.columns[3];
        simd_float4 v83 = v95.columns[2];
        float32x4_t v84 = v39;
        sub_25B468E64((void *)(a1 + 112));
        uint64_t v35 = *(void *)(a1 + 120);
        unint64_t v41 = *(void *)(a1 + 152) + *(void *)(a1 + 144);
        v95.columns[2] = v83;
        float32x4_t v39 = v84;
        v95.columns[1] = v81;
        v95.columns[3] = v82;
        v95.columns[0] = v80;
      }
      float32x4_t v42 = vaddq_f32((float32x4_t)v95.columns[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v95.columns[0], (float)((float)Width * 0.5) * *(float *)&a4), (float32x4_t)v95.columns[1], (float)((float)Height * 0.5) * *(float *)&a4), (float32x4_t)v95.columns[2], *(float *)&a4));
      _Q3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL), vnegq_f32(v87)), v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL));
      float32x4_t v44 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q3, _Q3), (int8x16_t)_Q3, 0xCuLL));
      *(float *)_Q3.i32 = *(float *)&a4 * *(float *)&a4;
      *(float32x2_t *)v42.f32 = vmla_f32(vmul_laneq_f32(vdiv_f32(vmul_f32(*(float32x2_t *)v42.f32, vneg_f32((float32x2_t)__PAIR64__(v85, v86.u32[0]))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.i8, 0)), v44, 2), *(float32x2_t *)v44.f32, vdiv_f32((float32x2_t)__PAIR64__(v85, v86.u32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a4, 0)));
      float32x4_t v45 = vdivq_f32(v88, v39);
      v45.i32[3] = 0;
      float32x4_t v46 = vmaxnmq_f32(v45, (float32x4_t)xmmword_25B5F1630);
      v46.i32[3] = 0;
      float32x4_t v47 = vminnmq_f32(v46, (float32x4_t)xmmword_25B5F1640);
      int8x16_t v48 = (int8x16_t)vmulq_f32(v47, v47);
      v44.f32[0] = vaddv_f32(*(float32x2_t *)v48.i8);
      __asm { FMOV            V3.2S, #1.0 }
      *(float32x2_t *)v42.f32 = vminnm_f32(vmaxnm_f32(vdiv_f32(*(float32x2_t *)v42.f32, v40), v90), *(float32x2_t *)_Q3.i8);
      *(float32x2_t *)v42.f32 = vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
      int32x2_t v26 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(int32x2_t *)v42.f32);
      v42.i32[0] = v44.i32[0];
      *(float32x2_t *)(*(void *)(v35 + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v41 & 0x1FF)) = vsqrt_f32(vadd_f32((float32x2_t)v26, *(float32x2_t *)v42.f32));
      ++*(void *)(a1 + 152);
    }
  }
  unint64_t v49 = *(void *)(a1 + 152);
  if (v49 < 2)
  {
LABEL_18:
    if (!v49) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  --v49;
  unint64_t v50 = *(void *)(a1 + 144) + 1;
  *(void *)(a1 + 144) = v50;
  *(void *)(a1 + 152) = v49;
  if (v50 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 120));
    *(void *)(a1 + 120) += 8;
    unint64_t v49 = *(void *)(a1 + 152);
    *(void *)(a1 + 144) -= 512;
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v51 = *(void *)(a1 + 120);
  float32x2_t v52 = 0;
  if (*(void *)(a1 + 128) != v51)
  {
    unint64_t v53 = *(void *)(a1 + 144);
    uint64_t v54 = (int32x2_t **)(v51 + 8 * (v53 >> 9));
    long long v55 = *v54;
    double v56 = &(*v54)[v53 & 0x1FF];
    uint64_t v57 = *(void *)(v51 + (((v53 + v49) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v53 + v49) & 0x1FF);
    while (v56 != (int32x2_t *)v57)
    {
      int32x2_t v58 = *v56++;
      int32x2_t v26 = v58;
      if ((char *)v56 - (char *)v55 == 4096)
      {
        unint64_t v59 = v54[1];
        ++v54;
        long long v55 = v59;
        double v56 = v59;
      }
      float32x2_t v52 = vadd_f32(v52, (float32x2_t)v26);
    }
  }
  *(float *)v26.i32 = (float)v49;
  float32x2_t v90 = vdiv_f32(v52, (float32x2_t)vdup_lane_s32(v26, 0));
LABEL_26:

  if (v90.f32[0] >= 0.0 || v90.f32[1] >= 0.0)
  {
    v92[0] = 0x100000002;
    float v62 = (float64x2_t *)malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
    float v63 = v62;
    v92[1] = v62;
    if (v62)
    {
      v62->f64[0] = 0.0;
      v62->f64[1] = 0.0;
    }
    *float v62 = vcvtq_f64_f32(v90);
    float v64 = sub_25B544858((int *)(a1 + 200), (uint64_t)v92);
    float v91 = v64;
    sub_25B545174((void *)(a1 + 64), &v91);
    unint64_t v65 = *(void *)(a1 + 104);
    if (v65 >= 4)
    {
      ++*(void *)(a1 + 96);
      *(void *)(a1 + 104) = v65 - 1;
      sub_25B5451FC(a1 + 64);
    }
    uint64_t v66 = *(void *)(a1 + 72);
    if (*(void *)(a1 + 80) == v66)
    {
      unint64_t v67 = *(void *)(a1 + 104);
    }
    else
    {
      unint64_t v68 = *(void *)(a1 + 96);
      unint64_t v67 = *(void *)(a1 + 104);
      long long v69 = (float **)(v66 + 8 * (v68 >> 10));
      float v70 = *v69;
      float v71 = &(*v69)[v68 & 0x3FF];
      uint64_t v72 = *(void *)(v66 + (((v67 + v68) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v67 + v68) & 0x3FF);
      if (v71 != (float *)v72)
      {
        float v73 = 0.0;
        do
        {
          float v74 = *v71++;
          float v75 = v74;
          if ((char *)v71 - (char *)v70 == 4096)
          {
            long long v76 = v69[1];
            ++v69;
            float v70 = v76;
            float v71 = v76;
          }
          float v73 = v73 + v75;
        }
        while (v71 != (float *)v72);
        goto LABEL_46;
      }
    }
    float v73 = 0.0;
LABEL_46:
    float v77 = v73 / (float)v67;
    if (v77 <= *(float *)(a1 + 8))
    {
      long long v78 = [RSTextCoachingSignal alloc];
      uint64_t v79 = 0;
      float v77 = 1.0 - v77;
    }
    else
    {
      long long v78 = [RSTextCoachingSignal alloc];
      uint64_t v79 = 1;
    }
    if (v78) {
      uint64_t v60 = sub_25B51F704(v78, v79, v77);
    }
    else {
      uint64_t v60 = 0;
    }
    free(v63);
    goto LABEL_30;
  }
  unint64_t v21 = [RSTextCoachingSignal alloc];
  if (v21)
  {
LABEL_29:
    uint64_t v60 = sub_25B51F704(v21, 0, 1.0);
    goto LABEL_30;
  }
LABEL_52:
  uint64_t v60 = 0;
LABEL_30:

  return v60;
}

void sub_25B545134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_25B545174(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_25B54524C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_25B5451FC(uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x800uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
}

void sub_25B54524C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v41 = (char *)sub_25B3FCAD4(v40);
      float32x4_t v42 = &v41[8 * (v40 >> 2)];
      float32x4_t v44 = &v41[8 * v43];
      float32x4_t v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        int8x16_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)int8x16_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    size_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  unint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  unint64_t v21 = (char *)*a1;
  id v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    long double v25 = operator new(0x1000uLL);
    int32x2_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)unint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      unint64_t v53 = (char *)sub_25B3FCAD4(v51);
      id v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      long long v55 = (uint64_t *)a1[1];
      double v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        double v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        unint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)unint64_t v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      uint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        id v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v41 = (char *)sub_25B3FCAD4(v85);
      float32x4_t v42 = &v41[8 * (v85 >> 2)];
      float32x4_t v44 = &v41[8 * v86];
      float32x4_t v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        float32x2_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)float32x2_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      unint64_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  unint64_t v29 = (char *)sub_25B3FCAD4(v28);
  uint64_t v31 = v30;
  int v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  int v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    float v64 = (char *)sub_25B3FCAD4(v63);
    int v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)int v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    unint64_t v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      long long v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        float v75 = (char *)sub_25B3FCAD4(v74);
        unint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        float v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          float v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          simd_float4 v80 = v68;
          simd_float4 v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)simd_float4 v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        unint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          long long v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      unint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  float32x4_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_25B54570C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

double sub_25B54573C(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 56) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 32);
      unint64_t v2 = (void **)(*(void *)(a1 + 24) + 8);
      *(void *)(a1 + 24) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 25;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 51;
  }
  *(void *)(a1 + 48) = v6;
LABEL_8:
  uint64_t v7 = *(void ***)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)(a1 + 152) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 128);
      uint64_t v7 = (void **)(*(void *)(a1 + 120) + 8);
      *(void *)(a1 + 120) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 512;
  }
  *(void *)(a1 + 144) = v11;
LABEL_15:
  BOOL v12 = *(void ***)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 104) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 80);
      BOOL v12 = (void **)(*(void *)(a1 + 72) + 8);
      *(void *)(a1 + 72) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 512;
    goto LABEL_21;
  }
  if (v14 >> 3 == 2)
  {
    uint64_t v16 = 1024;
LABEL_21:
    *(void *)(a1 + 96) = v16;
  }
  size_t v17 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;

  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return result;
}

float *sub_25B545878(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = (__CVBuffer *)objc_msgSend_colorBuffer(v3, v4, v5);
  int64_t Width = CVPixelBufferGetWidth(v6);
  uint64_t v10 = (__CVBuffer *)objc_msgSend_colorBuffer(v3, v8, v9);
  int64_t Height = CVPixelBufferGetHeight(v10);
  unint64_t v14 = (__CVBuffer *)objc_msgSend_colorBuffer(v3, v12, v13);
  sub_25B46E7E4((uint64_t)&pixelBuffer, v14);
  if (Height < 1)
  {
    unsigned int v16 = 0;
    float32x2_t v18 = 0;
    v20.i32[0] = 0;
  }
  else
  {
    unsigned int v16 = 0;
    int v17 = 0;
    float32x2_t v18 = 0;
    int8x16_t v19 = 0uLL;
    v20.i32[0] = 0;
    v15.i32[1] = 255;
    float64x2_t v21 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    do
    {
      float v22 = (float)v17;
      if (Width >= 1)
      {
        int v23 = 0;
        uint64_t v24 = (int)v22;
        do
        {
          float v25 = (float)v23;
          uint16x8_t v20 = 0uLL;
          int v26 = (int)(float)v23;
          if ((v26 & 0x80000000) == 0 && (int)v87 > v26 && (v24 & 0x80000000) == 0 && SHIDWORD(v87) > (int)v24)
          {
            v20.i32[0] = *(_DWORD *)(v88 + v89 * v24 + 4 * v26);
            uint16x8_t v20 = vmovl_u8(*(uint8x8_t *)v20.i8);
          }
          v27.i32[0] = v20.u16[2];
          __int32 v28 = v20.u16[1];
          *(float *)v20.i32 = (double)v20.u8[0] / 255.0 + *(float *)v19.i32;
          v27.i32[1] = v28;
          int8x8_t v29 = vand_s8(v27, (int8x8_t)0xFF000000FFLL);
          v30.i64[0] = v29.u32[0];
          v30.i64[1] = v29.u32[1];
          v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
          float32x2_t v18 = vcvt_f32_f64(vaddq_f64(vdivq_f64(vcvtq_f64_u64(v30), v21), vcvtq_f64_f32(*(float32x2_t *)v19.i8)));
          int8x16_t v19 = (int8x16_t)v20;
          v19.i32[1] = v18.i32[1];
          v19.i32[2] = v18.i32[0];
          ++v16;
          int v23 = (int)(float)(v25 + 7.5);
        }
        while (Width > v23);
      }
      int v17 = (int)(float)(v22 + 7.5);
    }
    while (Height > v17);
  }
  *(float *)v15.i32 = (float)v16;
  float32x2_t v31 = vdiv_f32((float32x2_t)__PAIR64__(v18.u32[1], v20.u32[0]), (float32x2_t)vdup_lane_s32(v15, 0));
  if (v31.f32[0] <= 0.04045)
  {
    float v82 = v31.f32[0] / 12.92;
  }
  else
  {
    __int32 v77 = v31.i32[1];
    float v78 = (float)v16;
    __int32 v79 = v18.i32[0];
    float v32 = powf((float)(v31.f32[0] + 0.055) / 1.055, 2.4);
    v31.i32[1] = v77;
    *(float *)v15.i32 = v78;
    v18.i32[0] = v79;
    float v82 = v32;
  }
  float v33 = v18.f32[0] / *(float *)v15.i32;
  if (v31.f32[1] <= 0.04045) {
    float v34 = v31.f32[1] / 12.92;
  }
  else {
    float v34 = powf((float)(v31.f32[1] + 0.055) / 1.055, 2.4);
  }
  if (v33 <= 0.04045)
  {
    float v35 = v33 / 12.92;
  }
  else
  {
    float v80 = v34;
    float v35 = powf((float)(v33 + 0.055) / 1.055, 2.4);
    float v34 = v80;
  }
  float32x4_t v36 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_25B5F1650, v82), (float32x4_t)xmmword_25B5F1660, v34), (float32x4_t)xmmword_25B5F1670, v35);
  float32x4_t v37 = vmulq_f32(v36, (float32x4_t)xmmword_25B5F1680);
  float32x4_t v83 = v37;
  if (v37.f32[0] <= 0.008856)
  {
    float v39 = (float)(v37.f32[0] * 7.787) + 0.13793;
  }
  else
  {
    long double v38 = pow(v37.f32[0], 0.333333333);
    float32x4_t v37 = v83;
    float v39 = v38;
  }
  if (v37.f32[1] <= 0.008856)
  {
    float v41 = (float)(v37.f32[1] * 7.787) + 0.13793;
  }
  else
  {
    long double v40 = pow(v37.f32[1], 0.333333333);
    float32x4_t v37 = v83;
    float v41 = v40;
  }
  if (v37.f32[2] <= 0.008856) {
    float v42 = (float)(v37.f32[2] * 7.787) + 0.13793;
  }
  else {
    float v42 = pow(v37.f32[2], 0.333333333);
  }
  v36.f32[0] = (float)(v41 * 116.0) + -16.0;
  v37.i32[0] = 1076048691;
  v43.i32[0] = vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v37.f32).u32[0];
  v36.f32[1] = (float)(v39 - v41) * 500.0;
  v43.i32[1] = vadd_f32(*(float32x2_t *)&v36, (float32x2_t)0x4300000043000000).i32[1];
  *(int32x2_t *)v44.i8 = vcvt_s32_f32(vrnda_f32(v43));
  v44.i64[1] = llroundf((float)((float)(v41 - v42) * 200.0) + 128.0);
  int32x4_t v45 = vmaxq_s32(v44, (int32x4_t)0);
  v45.i32[3] = 0;
  unsigned __int8 v46 = vminq_s32(v45, (int32x4_t)xmmword_25B5F1690).u8[0];
  uint64_t v47 = *(void *)(a1 + 96);
  if (v47)
  {
    uint64_t v48 = *(void *)(a1 + 64);
    unint64_t v49 = *(void *)(a1 + 88);
    unint64_t v50 = (float **)(v48 + 8 * (v49 >> 10));
    unint64_t v51 = *v50;
    uint64_t v52 = &(*v50)[v49 & 0x3FF];
    uint64_t v53 = *(void *)(v48 + (((v49 + v47) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v49 + v47) & 0x3FF);
    if (v52 != (float *)v53)
    {
      uint64_t v54 = &(*v50)[v49 & 0x3FF];
      while (1)
      {
        if ((char *)++v54 - (char *)v51 == 4096)
        {
          long long v55 = v50[1];
          ++v50;
          unint64_t v51 = v55;
          uint64_t v54 = v55;
        }
        if (v54 == (float *)v53) {
          break;
        }
        if (*v52 < *v54) {
          uint64_t v52 = v54;
        }
      }
    }
    float v56 = *v52;
  }
  else
  {
    float v56 = 0.5;
  }
  float v81 = v56;
  float v84 = (float)((float)v46 / 255.0) / 1.5;
  *(float *)(a1 + 104) = v84;
  *(float *)(a1 + 108) = v56;
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);

  CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)0x100000002;
  uint64_t v57 = (float64x2_t *)malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
  uint64_t v58 = v57;
  float32x4_t v87 = v57;
  if (v57)
  {
    v57->f64[0] = 0.0;
    v57->f64[1] = 0.0;
  }
  float64x2_t *v57 = vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v81), LODWORD(v84)));
  float v59 = sub_25B544858((int *)(a1 + 112), (uint64_t)&pixelBuffer);
  float v85 = v59;
  sub_25B545174((void *)(a1 + 8), &v85);
  unint64_t v60 = *(void *)(a1 + 48);
  if (v60 >= 2)
  {
    ++*(void *)(a1 + 40);
    *(void *)(a1 + 48) = v60 - 1;
    sub_25B5451FC(a1 + 8);
  }
  uint64_t v61 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24) == v61)
  {
    unint64_t v62 = *(void *)(a1 + 48);
    goto LABEL_55;
  }
  unint64_t v63 = *(void *)(a1 + 40);
  unint64_t v62 = *(void *)(a1 + 48);
  float v64 = (float **)(v61 + 8 * (v63 >> 10));
  uint64_t v65 = *v64;
  uint64_t v66 = &(*v64)[v63 & 0x3FF];
  uint64_t v67 = *(void *)(v61 + (((v62 + v63) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v62 + v63) & 0x3FF);
  if (v66 == (float *)v67)
  {
LABEL_55:
    float v68 = 0.0;
    goto LABEL_56;
  }
  float v68 = 0.0;
  do
  {
    float v69 = *v66++;
    float v70 = v69;
    if ((char *)v66 - (char *)v65 == 4096)
    {
      uint64_t v71 = v64[1];
      ++v64;
      uint64_t v65 = v71;
      uint64_t v66 = v71;
    }
    float v68 = v68 + v70;
  }
  while (v66 != (float *)v67);
LABEL_56:
  float v72 = v68 / (float)v62;
  if (v72 > *(float *)(a1 + 4) || v84 < 0.12)
  {
    uint64_t v73 = [RSTextCoachingSignal alloc];
    uint64_t v74 = 3;
  }
  else
  {
    uint64_t v73 = [RSTextCoachingSignal alloc];
    uint64_t v74 = 0;
    float v72 = 1.0 - v72;
  }
  if (v73) {
    float v75 = sub_25B51F704(v73, v74, v72);
  }
  else {
    float v75 = 0;
  }
  free(v58);

  return v75;
}

void sub_25B545E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_25B545EB8(void *a1)
{
  unint64_t v2 = (void **)a1[8];
  uint64_t v3 = a1[9];
  a1[12] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[9];
      unint64_t v2 = (void **)(a1[8] + 8);
      a1[8] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 1024;
  }
  a1[11] = v6;
LABEL_8:
  uint64_t v7 = (void **)a1[2];
  uint64_t v8 = a1[3];
  a1[6] = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a1[3];
      uint64_t v7 = (void **)(a1[2] + 8);
      a1[2] = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 512;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 1024;
LABEL_14:
    a1[5] = v11;
  }
  double result = 0.0000305175853;
  a1[13] = 0x3F0000003F000000;
  return result;
}

float sub_25B545F90(uint64_t a1)
{
  v13[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = (float *)qword_26A502320;
  id v1 = (float *)qword_26A502328;
  uint64_t v3 = qword_26A502328 - qword_26A502320;
  if (qword_26A502328 == qword_26A502320) {
    return 0.0;
  }
  sub_25B546220((uint64_t)v13, a1);
  unint64_t v5 = (unint64_t)(v3 >> 2) >> 1;
  uint64_t v6 = &v2[v5];
  if (v6 != v1) {
    sub_25B5462B8(v2, v6, v1, (uint64_t)v13);
  }
  sub_25B5460E8(v13);
  uint64_t v7 = (float *)qword_26A502320;
  uint64_t v8 = (float *)(qword_26A502320 + 4 * v5);
  float v9 = *v8;
  if ((v3 & 4) == 0)
  {
    uint64_t v10 = (float *)qword_26A502328;
    sub_25B546220((uint64_t)v12, a1);
    if (v8 - 1 != v10) {
      sub_25B5462B8(v7, v8 - 1, v10, (uint64_t)v12);
    }
    sub_25B5460E8(v12);
  }
  return v9;
}

void sub_25B5460C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B5460E8(va);
  _Unwind_Resume(a1);
}

void *sub_25B5460E8(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_25B54616C(uint64_t a1, float *a2, float *a3)
{
  return vabds_f32(*a2, *(float *)(a1 + 8)) < vabds_f32(*a3, *(float *)(a1 + 8));
}

uint64_t sub_25B546194(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_2708F19C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *sub_25B5461BC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_2708F19C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_25B546208()
{
}

uint64_t sub_25B546220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

float sub_25B5462B8(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    unint64_t v5 = a3;
    do
    {
      unint64_t v8 = v5 - a1;
      if (v8 < 2) {
        break;
      }
      if (v8 == 3)
      {
        sub_25B546690(a1, a1 + 1, v5 - 1, a4);
        return result;
      }
      if (v8 == 2)
      {
        if (sub_25B546638(*(void *)(a4 + 24), *(v5 - 1), *a1))
        {
          float result = *a1;
          *a1 = *(v5 - 1);
          *(v5 - 1) = result;
        }
        return result;
      }
      if ((char *)v5 - (char *)a1 <= 31)
      {
        while (a1 != v5 - 1)
        {
          uint64x2_t v30 = a1++;
          if (v30 != v5 && a1 != v5)
          {
            float32x2_t v31 = a1;
            float v32 = v30;
            float v33 = a1;
            do
            {
              float v34 = *v33++;
              if (sub_25B546638(*(void *)(a4 + 24), v34, *v32)) {
                float v32 = v31;
              }
              float32x2_t v31 = v33;
            }
            while (v33 != v5);
            if (v32 != v30)
            {
              float result = *v30;
              *uint64x2_t v30 = *v32;
              *float v32 = result;
            }
          }
        }
        return result;
      }
      float v9 = &a1[v8 >> 1];
      uint64_t v10 = v5 - 1;
      int v11 = sub_25B546690(a1, v9, v5 - 1, a4);
      if (sub_25B546638(*(void *)(a4 + 24), *a1, *v9))
      {
LABEL_12:
        unsigned int v16 = a1 + 1;
        if (a1 + 1 >= v10)
        {
          float32x2_t v18 = a1 + 1;
        }
        else
        {
          int v17 = a1 + 1;
          while (1)
          {
            do
            {
              float32x2_t v18 = v17;
              float v19 = *v17++;
            }
            while ((sub_25B546638(*(void *)(a4 + 24), v19, *v9) & 1) != 0);
            do
              float v20 = *--v10;
            while (!sub_25B546638(*(void *)(a4 + 24), v20, *v9));
            if (v18 >= v10) {
              break;
            }
            float v21 = *v18;
            float *v18 = *v10;
            float *v10 = v21;
            ++v11;
            if (v9 == v18) {
              float v9 = v10;
            }
          }
        }
        if (v18 != v9 && sub_25B546638(*(void *)(a4 + 24), *v9, *v18))
        {
          float result = *v18;
          float *v18 = *v9;
          *float v9 = result;
          ++v11;
        }
        if (v18 == a2) {
          return result;
        }
        if (!v11)
        {
          if (v18 <= a2)
          {
            float v25 = v18 + 1;
            while (v25 != v5)
            {
              int v26 = sub_25B546638(*(void *)(a4 + 24), *v25, *(v25 - 1));
              ++v25;
              if (v26) {
                goto LABEL_26;
              }
            }
          }
          else
          {
            while (v16 != v18)
            {
              char v23 = sub_25B546638(*(void *)(a4 + 24), *v16, *(v16 - 1));
              ++v16;
              if (v23) {
                goto LABEL_26;
              }
            }
          }
          return result;
        }
LABEL_26:
        if (v18 <= a2)
        {
          float v22 = v18 + 1;
        }
        else
        {
          unint64_t v5 = v18;
          float v22 = a1;
        }
      }
      else
      {
        uint64_t v13 = v5 - 2;
        while (v13 != a1)
        {
          unint64_t v14 = v13;
          float v15 = *v13--;
          if (sub_25B546638(*(void *)(a4 + 24), v15, *v9))
          {
            float result = *a1;
            *a1 = *v14;
            float *v14 = result;
            ++v11;
            uint64_t v10 = v14;
            goto LABEL_12;
          }
        }
        uint64_t v24 = a1 + 1;
        if ((sub_25B546638(*(void *)(a4 + 24), *a1, *v10) & 1) == 0)
        {
          while (v24 != v10)
          {
            if (sub_25B546638(*(void *)(a4 + 24), *a1, *v24))
            {
              float result = *v24;
              *v24++ = *v10;
              float *v10 = result;
              goto LABEL_42;
            }
            ++v24;
          }
          return result;
        }
LABEL_42:
        if (v24 == v10) {
          return result;
        }
        while (1)
        {
          do
          {
            float v22 = v24;
            float v27 = *v24++;
          }
          while (!sub_25B546638(*(void *)(a4 + 24), *a1, v27));
          do
            float v28 = *--v10;
          while ((sub_25B546638(*(void *)(a4 + 24), *a1, v28) & 1) != 0);
          if (v22 >= v10) {
            break;
          }
          float v29 = *v22;
          *float v22 = *v10;
          float *v10 = v29;
        }
        if (v22 > a2) {
          return result;
        }
      }
      a1 = v22;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_25B546638(uint64_t a1, float a2, float a3)
{
  float v5 = a2;
  float v4 = a3;
  if (!a1) {
    sub_25B3FAF18();
  }
  return (*(uint64_t (**)(uint64_t, float *, float *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t sub_25B546690(float *a1, float *a2, float *a3, uint64_t a4)
{
  char v8 = sub_25B546638(*(void *)(a4 + 24), *a2, *a1);
  uint64_t result = sub_25B546638(*(void *)(a4 + 24), *a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    float v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!sub_25B546638(*(void *)(a4 + 24), *a2, *a1)) {
      return 1;
    }
    float v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  float v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!sub_25B546638(*(void *)(a4 + 24), *a3, v10)) {
      return 1;
    }
    float v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

BOOL sub_25B546780(uint64_t a1, float *a2, float *a3)
{
  return *a2 < *a3;
}

void sub_25B54679C(uint64_t a1, void *a2)
{
  *a2 = &unk_2708F20D8;
}

void *sub_25B5467BC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_2708F20D8;
  return result;
}

void sub_25B5467F4()
{
}

uint64_t sub_25B54680C(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

float *sub_25B546840(uint64_t a1, void *a2)
{
  v72[4] = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (objc_msgSend_depthBuffer(v3, v4, v5))
  {
    char v8 = (__CVBuffer *)objc_msgSend_depthBuffer(v3, v6, v7);
    size_t Width = CVPixelBufferGetWidth(v8);
    size_t Height = CVPixelBufferGetHeight(v8);
    unsigned int v11 = Height;
    if (Height * Width)
    {
      CVPixelBufferLockBaseAddress(v8, 1uLL);
      BaseAddress = (const float *)CVPixelBufferGetBaseAddress(v8);
      float v67 = 0.0;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v8);
      vDSP_Length v14 = (Width + 1) >> 1;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502338, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26A502338))
      {
        __cxa_atexit((void (*)(void *))sub_25B54680C, &qword_26A502320, &dword_25B3F3000);
        __cxa_guard_release(&qword_26A502338);
      }
      float __B = 0.0;
      sub_25B43E5EC((char **)&qword_26A502320, ((v11 + 1) >> 1) * v14);
      float v15 = (float *)qword_26A502320;
      if (qword_26A502328 == qword_26A502320)
      {
        float v33 = 0.0;
      }
      else
      {
        if (v11)
        {
          for (unsigned int i = 0; i < v11; i += 2)
          {
            vDSP_vsadd(BaseAddress, 2, &__B, v15, 1, v14);
            v15 += (Width + 1) >> 1;
            BaseAddress += (BytesPerRow >> 1) & 0x3FFFFFFF;
          }
        }
        v72[0] = &unk_2708F20D8;
        v72[3] = v72;
        float v17 = sub_25B545F90((uint64_t)v72);
        float v19 = v18;
        sub_25B5460E8(v72);
        float v69 = &unk_2708F19C0;
        float v20 = (float)(v17 + v19) * 0.5;
        float v70 = v20;
        uint64_t v71 = &v69;
        float v21 = sub_25B545F90((uint64_t)&v69);
        float v23 = v22;
        sub_25B5460E8(&v69);
        uint64_t v24 = (float *)qword_26A502320;
        float v25 = 0.0;
        float v26 = 0.0;
        if (qword_26A502320 != qword_26A502328)
        {
          float v27 = vabds_f32(v21, v20);
          float v28 = vabds_f32(v23, v20);
          float v29 = (float)((float)(v27 + v28) * 0.5) + (float)((float)(v27 + v28) * 0.5);
          float v26 = 0.0;
          float v25 = 0.0;
          do
          {
            float v30 = *v24++;
            float v31 = v30;
            if (vabds_f32(v30, v20) > v29) {
              float v31 = -0.0;
            }
            else {
              float v25 = v25 + 1.0;
            }
            float v26 = v26 + v31;
          }
          while (v24 != (float *)qword_26A502328);
        }
        float v32 = v26 / v25;
        if (v25 == 0.0) {
          float v33 = 0.0;
        }
        else {
          float v33 = v32;
        }
      }
      float v67 = v33;
      CVPixelBufferUnlockBaseAddress(v8, 1uLL);
      *(float *)(a1 + 104) = v33;
      sub_25B545174((void *)(a1 + 56), &v67);
    }
  }
  unint64_t v34 = *(void *)(a1 + 96);
  if (v34 >= 2)
  {
    ++*(void *)(a1 + 88);
    *(void *)(a1 + 96) = v34 - 1;
    sub_25B5451FC(a1 + 56);
    unint64_t v34 = *(void *)(a1 + 96);
  }
  if (!v34)
  {

LABEL_41:
    uint64_t v61 = [RSTextCoachingSignal alloc];
    if (v61) {
      unint64_t v62 = sub_25B51F704(v61, 0, 1.0);
    }
    else {
      unint64_t v62 = 0;
    }
    goto LABEL_53;
  }
  uint64_t v35 = *(void *)(a1 + 64);
  float v36 = 0.0;
  if (*(void *)(a1 + 72) != v35)
  {
    unint64_t v37 = *(void *)(a1 + 88);
    long double v38 = (float **)(v35 + 8 * (v37 >> 10));
    float v39 = *v38;
    long double v40 = &(*v38)[v37 & 0x3FF];
    uint64_t v41 = *(void *)(v35 + (((v37 + v34) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v37 + v34) & 0x3FF);
    while (v40 != (float *)v41)
    {
      float v42 = *v40++;
      float v43 = v42;
      if ((char *)v40 - (char *)v39 == 4096)
      {
        int32x4_t v44 = v38[1];
        ++v38;
        float v39 = v44;
        long double v40 = v44;
      }
      float v36 = v36 + v43;
    }
  }

  float v45 = v36 / (float)v34;
  if (v45 < 0.0) {
    goto LABEL_41;
  }
  v72[0] = 0x100000001;
  unsigned __int8 v46 = (double *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  uint64_t v47 = v46;
  v72[1] = v46;
  if (v46) {
    *unsigned __int8 v46 = 0.0;
  }
  *unsigned __int8 v46 = v45;
  float v48 = sub_25B544858((int *)(a1 + 112), (uint64_t)v72);
  *(float *)&float v69 = v48;
  sub_25B545174((void *)(a1 + 8), (float *)&v69);
  unint64_t v49 = *(void *)(a1 + 48);
  if (v49 >= 4)
  {
    ++*(void *)(a1 + 40);
    *(void *)(a1 + 48) = v49 - 1;
    sub_25B5451FC(a1 + 8);
  }
  uint64_t v50 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24) == v50)
  {
    unint64_t v51 = *(void *)(a1 + 48);
  }
  else
  {
    unint64_t v52 = *(void *)(a1 + 40);
    unint64_t v51 = *(void *)(a1 + 48);
    uint64_t v53 = (float **)(v50 + 8 * (v52 >> 10));
    uint64_t v54 = *v53;
    long long v55 = &(*v53)[v52 & 0x3FF];
    uint64_t v56 = *(void *)(v50 + (((v51 + v52) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v51 + v52) & 0x3FF);
    if (v55 != (float *)v56)
    {
      float v57 = 0.0;
      do
      {
        float v58 = *v55++;
        float v59 = v58;
        if ((char *)v55 - (char *)v54 == 4096)
        {
          unint64_t v60 = v53[1];
          ++v53;
          uint64_t v54 = v60;
          long long v55 = v60;
        }
        float v57 = v57 + v59;
      }
      while (v55 != (float *)v56);
      goto LABEL_45;
    }
  }
  float v57 = 0.0;
LABEL_45:
  if (v45 <= 3.5)
  {
    float v64 = v57 / (float)v51;
    if (v64 <= *(float *)a1)
    {
      unint64_t v63 = [RSTextCoachingSignal alloc];
      uint64_t v65 = 0;
      float v64 = 1.0 - v64;
    }
    else
    {
      unint64_t v63 = [RSTextCoachingSignal alloc];
      uint64_t v65 = 2;
    }
  }
  else
  {
    unint64_t v63 = [RSTextCoachingSignal alloc];
    float v64 = fminf((float)((float)((float)(v45 + -3.5) * 0.4) / 2.5) + 0.6, 1.0);
    uint64_t v65 = 4;
  }
  if (v63) {
    unint64_t v62 = sub_25B51F704(v63, v65, v64);
  }
  else {
    unint64_t v62 = 0;
  }
  free(v47);
LABEL_53:

  return v62;
}

void sub_25B546DAC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B5460E8(va);

  _Unwind_Resume(a1);
}

float *sub_25B546E20(uint64_t a1, void *a2, char a3, float a4, float a5)
{
  id v9 = a2;
  float v12 = v9;
  if (a3) {
    goto LABEL_18;
  }
  float v13 = objc_msgSend_rawFeaturePoints(v9, v10, v11);
  unint64_t v16 = objc_msgSend_count(v13, v14, v15);

  if (v16 < 0x32) {
    goto LABEL_18;
  }
  float v35 = 1.0 / (float)(expf(-(float)(*(float *)(a1 + 156) + (float)(*(float *)(a1 + 152) * a4))) + 1.0);
  float v34 = 1.0 / (float)(expf(-(float)(*(float *)(a1 + 164) + (float)(*(float *)(a1 + 160) * a5))) + 1.0);
  if (v35 >= v34) {
    float v17 = &v35;
  }
  else {
    float v17 = &v34;
  }
  sub_25B545174((void *)(a1 + 88), v17);
  unint64_t v18 = *(void *)(a1 + 128);
  if (v18 >= 6)
  {
    ++*(void *)(a1 + 120);
    *(void *)(a1 + 128) = v18 - 1;
    sub_25B5451FC(a1 + 88);
  }
  uint64_t v19 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 104) == v19)
  {
    unint64_t v20 = *(void *)(a1 + 128);
    goto LABEL_16;
  }
  unint64_t v21 = *(void *)(a1 + 120);
  unint64_t v20 = *(void *)(a1 + 128);
  float v22 = (float **)(v19 + 8 * (v21 >> 10));
  float v23 = *v22;
  uint64_t v24 = &(*v22)[v21 & 0x3FF];
  uint64_t v25 = *(void *)(v19 + (((v20 + v21) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v20 + v21) & 0x3FF);
  if (v24 == (float *)v25)
  {
LABEL_16:
    float v26 = 0.0;
    goto LABEL_17;
  }
  float v26 = 0.0;
  do
  {
    float v27 = *v24++;
    float v28 = v27;
    if ((char *)v24 - (char *)v23 == 4096)
    {
      float v29 = v22[1];
      ++v22;
      float v23 = v29;
      uint64_t v24 = v29;
    }
    float v26 = v26 + v28;
  }
  while (v24 != (float *)v25);
LABEL_17:
  float v30 = v26 / (float)v20;
  if (v30 <= 0.5 || (float v33 = [RSTextCoachingSignal alloc]) == 0)
  {
LABEL_18:
    float v31 = 0;
    goto LABEL_19;
  }
  float v31 = sub_25B51F704(v33, 1, v30);
LABEL_19:

  return v31;
}

void sub_25B546FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B547000()
{
}

uint64_t sub_25B547018(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        uint64_t result = sub_25B47C818(a3, v5, (uint64_t)a3);
        unint64_t v6 = result;
      }
      else
      {
        uint64_t result = sub_25B47C6E4(v6, v5, (uint64_t)a3);
        v6 += 176;
        a3[1] = v6;
      }
      a3[1] = v6;
      v5 += 176;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_25B547098(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_25B5470A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  int v11 = *(void *)a3;
  *(_DWORD *)sub_25B547170(a1, &v13, (int *)&v12 + 1, (int *)&v12) = v11;
  int v7 = *(_DWORD *)(a3 + 4);
  uint64_t v12 = 1;
  *(_DWORD *)sub_25B547170(a1, &v13, (int *)&v12 + 1, (int *)&v12) = v7;
  uint64_t v8 = *a4;
  uint64_t v12 = 0x100000000;
  *(_DWORD *)sub_25B547170(a1, &v13, (int *)&v12 + 1, (int *)&v12) = v8;
  int v9 = *((_DWORD *)a4 + 1);
  uint64_t v12 = 0x100000001;
  uint64_t result = (_DWORD *)sub_25B547170(a1, &v13, (int *)&v12 + 1, (int *)&v12);
  *uint64_t result = v9;
  return result;
}

uint64_t sub_25B547170(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  v37[3] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v7 = a1;
    uint64_t v8 = (void *)MEMORY[0x263F8C0F8];
    int v9 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    float v10 = sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v10, (uint64_t)" ", 1);
    int v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_25B406B20(v11, (uint64_t)" ", 1);
    uint64_t v13 = sub_25B406B20(v12, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    vDSP_Length v14 = std::locale::use_facet(v34, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(v34);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v15 = std::locale::use_facet(v34, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(v34);
    std::ostream::put();
    std::ostream::flush();
    a1 = v7;
  }
  uint64_t v16 = 0;
  float v17 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v18 = *a2;
  uint64_t v19 = *a3;
  uint64_t v31 = a1;
  uint64_t v32 = 0;
  uint64_t v20 = a1 + 8;
  v37[0] = v18;
  v37[1] = v19;
  std::locale v37[2] = *a4;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v21 = 1;
  *(_OWORD *)&v34[0].__locale_ = 0u;
  float v22 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    float v23 = (std::locale::__imp **)&v37[v16];
    uint64_t v24 = (std::locale::__imp *)v37[v16];
    if ((unint64_t)v24 >= *(void *)(v20 + v16 * 8))
    {
      sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v17, (uint64_t)" ", 1);
      uint64_t v25 = (void *)std::ostream::operator<<();
      sub_25B406B20(v25, (uint64_t)" ", 1);
      sub_25B406B20(v25, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      float v26 = std::locale::use_facet(&v33, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v33);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v32, "=", (uint64_t)v23, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      float v27 = std::locale::use_facet(&v33, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v33);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v24 = *v23;
    }
    uint64_t v32 = v21;
    v34[v16++].__locale_ = v24;
    ++v21;
  }
  while (v16 != 3);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    v29 += *(void *)(v31 + 56 + v28 * 8) * (uint64_t)v34[v28].__locale_;
    ++v28;
  }
  while (v28 != 3);
  return *(void *)(v31 + 144) + 4 * v29;
}

void sub_25B5475AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

double sub_25B5475DC(float32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  v73[0] = 0;
  uint64_t v5 = *a2;
  if (a2[1] == *a2)
  {
LABEL_12:
    float32x2_t v3 = *a1;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
    while (1)
    {
      sub_25B45F1E4((uint64_t)v71, v5 + v8);
      LODWORD(v61[0]) = 0;
      uint64_t v70 = 0;
      __int32 v58 = *(_DWORD *)sub_25B547A14((uint64_t)v71, (int *)v61, (int *)&v70 + 1, (int *)&v70);
      uint64_t v69 = 0;
      int v68 = 1;
      float v10 = (__int32 *)sub_25B547A14((uint64_t)v71, (int *)&v69 + 1, (int *)&v69, &v68);
      v11.i32[0] = v58;
      v11.i32[1] = *v10;
      float32x2_t v59 = v11;
      int v66 = 1;
      int v67 = 0;
      int v65 = 0;
      __int32 v56 = *(_DWORD *)sub_25B547A14((uint64_t)v71, &v67, &v66, &v65);
      int v63 = 1;
      int v64 = 0;
      int v62 = 1;
      uint64_t v12 = (__int32 *)sub_25B547A14((uint64_t)v71, &v64, &v63, &v62);
      v13.i32[0] = v56;
      v13.i32[1] = *v12;
      float32x2_t v57 = v13;
      LODWORD(v61[0]) = 1;
      uint64_t v70 = 0;
      __int32 v54 = *(_DWORD *)sub_25B547A14((uint64_t)v71, (int *)v61, (int *)&v70 + 1, (int *)&v70);
      uint64_t v69 = 0x100000000;
      int v68 = 1;
      vDSP_Length v14 = (__int32 *)sub_25B547A14((uint64_t)v71, (int *)&v69 + 1, (int *)&v69, &v68);
      v15.i32[0] = v54;
      v15.i32[1] = *v14;
      float32x2_t v55 = v15;
      int v66 = 1;
      int v67 = 1;
      int v65 = 0;
      __int32 v52 = *(_DWORD *)sub_25B547A14((uint64_t)v71, &v67, &v66, &v65);
      int v63 = 1;
      int v64 = 1;
      int v62 = 1;
      uint64_t v16 = (__int32 *)sub_25B547A14((uint64_t)v71, &v64, &v63, &v62);
      v17.i32[0] = v52;
      v17.i32[1] = *v16;
      float32x2_t v53 = v17;
      uint64_t v70 = 0x200000000;
      HIDWORD(v69) = 0;
      int v50 = *(_DWORD *)sub_25B547A14((uint64_t)v71, (int *)&v70 + 1, (int *)&v70, (int *)&v69 + 1);
      int v68 = 0;
      LODWORD(v69) = 2;
      int v67 = 1;
      uint64_t v18 = (_DWORD *)sub_25B547A14((uint64_t)v71, (int *)&v69, &v68, &v67);
      LODWORD(v19) = v50;
      HIDWORD(v19) = *v18;
      uint64_t v51 = v19;
      int v65 = 1;
      int v66 = 2;
      int v64 = 0;
      int v49 = *(_DWORD *)sub_25B547A14((uint64_t)v71, &v66, &v65, &v64);
      int v62 = 1;
      int v63 = 2;
      int v60 = 1;
      uint64_t v20 = (_DWORD *)sub_25B547A14((uint64_t)v71, &v63, &v62, &v60);
      LODWORD(v21) = v49;
      HIDWORD(v21) = *v20;
      v61[0] = v51;
      v61[1] = v21;
      if (*(_DWORD *)sub_25B4A0008(a3, v73)) {
        goto LABEL_4;
      }
      float32x2_t v23 = *a1;
      float32x2_t v24 = a1[1];
      int32x2_t v25 = (int32x2_t)vsub_f32(*a1, v59);
      int32x2_t v26 = (int32x2_t)vsub_f32(v24, v57);
      int32x2_t v27 = (int32x2_t)vsub_f32(*a1, v57);
      int32x2_t v28 = (int32x2_t)vsub_f32(v24, v59);
      float32x2_t v29 = (float32x2_t)vzip2_s32(v27, v25);
      float32x2_t v30 = (float32x2_t)vzip1_s32(v27, v25);
      float32x2_t v31 = vmla_f32(vmul_f32(v29, v29), v30, v30);
      float32x2_t v32 = (float32x2_t)vzip1_s32(v28, v26);
      float32x2_t v33 = vmla_f32(v31, v32, v32);
      float32x2_t v34 = (float32x2_t)vzip2_s32(v28, v26);
      int32x2_t v35 = vmovn_s64(vcgtq_f64(v48, vcvtq_f64_f32(vsqrt_f32(vmla_f32(v33, v34, v34)))));
      if ((v35.i32[1] | v35.i32[0])) {
        goto LABEL_7;
      }
      int32x2_t v36 = (int32x2_t)vsub_f32(v23, v55);
      int32x2_t v37 = (int32x2_t)vsub_f32(v24, v53);
      int32x2_t v38 = (int32x2_t)vsub_f32(v23, v53);
      int32x2_t v39 = (int32x2_t)vsub_f32(v24, v55);
      float32x2_t v40 = (float32x2_t)vzip2_s32(v38, v36);
      float32x2_t v41 = (float32x2_t)vzip1_s32(v38, v36);
      float32x2_t v42 = vmla_f32(vmul_f32(v40, v40), v41, v41);
      float32x2_t v43 = (float32x2_t)vzip1_s32(v39, v37);
      float32x2_t v44 = vmla_f32(v42, v43, v43);
      float32x2_t v45 = (float32x2_t)vzip2_s32(v39, v37);
      int32x2_t v46 = vmovn_s64(vcgtq_f64(v48, vcvtq_f64_f32(vsqrt_f32(vmla_f32(v44, v45, v45)))));
      if ((v46.i32[1] | v46.i32[0]))
      {
LABEL_7:
        *(_DWORD *)sub_25B4A0008(a3, v73) = 1;
        float32x2_t v3 = COERCE_FLOAT32X2_T(sub_25B5475DC(v61, a2, a3));
        int v22 = 0;
      }
      else
      {
LABEL_4:
        int v22 = 1;
      }
      v71[0] = &unk_2708F2218;
      if (v72) {
        sub_25B404120(v72);
      }
      if (!v22) {
        break;
      }
      v73[0] = ++v9;
      uint64_t v5 = *a2;
      v8 += 152;
      if (v9 >= 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3)) {
        goto LABEL_12;
      }
    }
  }
  return *(double *)&v3;
}

void sub_25B5479AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  float32x2_t v34 = *(std::__shared_weak_count **)(v32 + 128);
  if (v34) {
    sub_25B404120(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B547A14(uint64_t a1, int *a2, int *a3, int *a4)
{
  v37[3] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v7 = a1;
    uint64_t v8 = (void *)MEMORY[0x263F8C0F8];
    unint64_t v9 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    float v10 = sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v10, (uint64_t)" ", 1);
    float32x2_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_25B406B20(v11, (uint64_t)" ", 1);
    float32x2_t v13 = sub_25B406B20(v12, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    vDSP_Length v14 = std::locale::use_facet(v34, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(v34);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    float32x2_t v15 = std::locale::use_facet(v34, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(v34);
    std::ostream::put();
    std::ostream::flush();
    a1 = v7;
  }
  uint64_t v16 = 0;
  float32x2_t v17 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v18 = *a2;
  uint64_t v19 = *a3;
  uint64_t v31 = a1;
  uint64_t v32 = 0;
  uint64_t v20 = a1 + 8;
  v37[0] = v18;
  v37[1] = v19;
  std::locale v37[2] = *a4;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v21 = 1;
  *(_OWORD *)&v34[0].__locale_ = 0u;
  int v22 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    float32x2_t v23 = (std::locale::__imp **)&v37[v16];
    float32x2_t v24 = (std::locale::__imp *)v37[v16];
    if ((unint64_t)v24 >= *(void *)(v20 + v16 * 8))
    {
      sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v17, (uint64_t)" ", 1);
      int32x2_t v25 = (void *)std::ostream::operator<<();
      sub_25B406B20(v25, (uint64_t)" ", 1);
      sub_25B406B20(v25, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      int32x2_t v26 = std::locale::use_facet(&v33, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v33);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v32, "=", (uint64_t)v23, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      int32x2_t v27 = std::locale::use_facet(&v33, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v33);
      std::ostream::put();
      std::ostream::flush();
      float32x2_t v24 = *v23;
    }
    uint64_t v32 = v21;
    v34[v16++].__locale_ = v24;
    ++v21;
  }
  while (v16 != 3);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    v29 += *(void *)(v31 + 56 + v28 * 8) * (uint64_t)v34[v28].__locale_;
    ++v28;
  }
  while (v28 != 3);
  return *(void *)(v31 + 144) + 4 * v29;
}

void sub_25B547E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

void sub_25B547E80(uint64_t *a1, void *a2, float32x2_t **a3, uint64_t *a4)
{
  uint64_t v4 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 4) == (uint64_t)(a2[1] - *a2) >> 4 && v4 != *a1)
  {
    uint64_t v8 = a2;
    unint64_t v10 = 0;
    float64x2_t v37 = (float64x2_t)vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
    do
    {
      __int32 v52 = &unk_2708F1A28;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      __int16 v62 = 257;
      uint64_t v11 = a4[1] - *a4;
      if (v11)
      {
        unint64_t v38 = 0x86BCA1AF286BCA1BLL * (v11 >> 3);
        sub_25B45F2BC(v39, &v38);
        v64[0] = 0;
        sub_25B4396A8((uint64_t)&v40, v39);
        sub_25B404228((uint64_t)&v40, v64);
        long long v57 = v45;
        long long v58 = v46;
        long long v59 = v47;
        long long v53 = v41;
        long long v54 = v42;
        long long v55 = v43;
        long long v56 = v44;
        uint64_t v13 = v48;
        uint64_t v12 = v49;
        if (v49) {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        vDSP_Length v14 = v61;
        uint64_t v60 = v13;
        uint64_t v61 = v12;
        if (v14) {
          sub_25B404120(v14);
        }
        uint64_t v63 = v51;
        __int16 v62 = v50;
        float32x2_t v40 = &unk_2708F1A28;
        if (v49) {
          sub_25B404120(v49);
        }
      }
      double v17 = sub_25B5475DC((float32x2_t *)(*v8 + 16 * v10), a4, (uint64_t)&v52);
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
      if (*a3 != v20)
      {
        while (1)
        {
          float32x2_t v21 = v19[2];
          float32x2_t v22 = v19[3];
          int32x2_t v23 = (int32x2_t)vsub_f32(v21, *(float32x2_t *)&v17);
          int32x2_t v24 = (int32x2_t)vsub_f32(v22, v18);
          int32x2_t v25 = (int32x2_t)vsub_f32(v21, v18);
          int32x2_t v26 = (int32x2_t)vsub_f32(v22, *(float32x2_t *)&v17);
          float32x2_t v27 = (float32x2_t)vzip2_s32(v25, v23);
          float32x2_t v28 = (float32x2_t)vzip1_s32(v25, v23);
          float32x2_t v29 = vmla_f32(vmul_f32(v27, v27), v28, v28);
          float32x2_t v30 = (float32x2_t)vzip1_s32(v26, v24);
          float32x2_t v31 = vmla_f32(v29, v30, v30);
          float32x2_t v32 = (float32x2_t)vzip2_s32(v26, v24);
          int32x2_t v33 = vmovn_s64(vcgtq_f64(v37, vcvtq_f64_f32(vsqrt_f32(vmla_f32(v31, v32, v32)))));
          if ((v33.i32[1] | v33.i32[0])) {
            break;
          }
          v19 += 22;
          if (v19 == v20) {
            goto LABEL_18;
          }
        }
        float32x2_t v34 = v8;
        uint64_t v35 = *a1;
        long long v36 = objc_msgSend_identifier(*(void **)&v19[1], v15, v16);
        sub_25B491958(v35 + 176 * v10, v36);

        uint64_t v8 = v34;
      }
LABEL_18:
      __int32 v52 = &unk_2708F1A28;
      if (v61) {
        sub_25B404120(v61);
      }
      ++v10;
    }
    while (v10 < 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4));
  }
}

void sub_25B548140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  if (a56) {
    sub_25B404120(a56);
  }
  _Unwind_Resume(a1);
}

void sub_25B5481AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    for (uint64_t i = a1; i != a2; i += 176)
    {
      if (*(char *)(i + 175) < 0)
      {
        if (*(void *)(i + 160))
        {
LABEL_7:
          if (sub_25B491880(*(void *)(a3 + 8), *(void *)(a3 + 16), (unsigned __int8 **)(i + 152)))
          {
            uint64_t v8 = (float32x2_t *)sub_25B490C80(a3, (unsigned __int8 **)(i + 152));
            *(float32x2_t *)&long long v9 = sub_25B40DF5C(*(float32x2_t *)(i + 16), *(double *)(i + 24), v8[2], v8[3]);
            long long v10 = v9;
            DWORD2(v10) = *(_DWORD *)(i + 64);
            long long v12 = v11;
            DWORD2(v12) = *(_DWORD *)(i + 68);
            *(void *)(i + 16) = v9;
            *(void *)(i + 24) = v11;
            DWORD2(v9) = DWORD2(v12);
            DWORD2(v11) = DWORD2(v10);
            *(_OWORD *)(i + 32) = v10;
            *(_OWORD *)(i + 48) = v12;
            uint64_t v13 = *(void *)(i + 8);
            v14[0] = v9;
            v14[1] = v12;
            v14[2] = v11;
            v14[3] = v10;
            if (v13) {
              objc_copyStruct((void *)(v13 + 272), v14, 64, 1, 0);
            }
          }
        }
      }
      else if (*(unsigned char *)(i + 175))
      {
        goto LABEL_7;
      }
    }
  }
}

void sub_25B548290(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 152;
      uint64_t v7 = v4 - 152;
      uint64_t v8 = v4 - 152;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_25B5483C0(void *a1, unint64_t a2, const void *a3)
{
  if (!a1) {
    return 0;
  }
  v8.receiver = a1;
  v8.super_class = (Class)RS2DPolygon;
  uint64_t v5 = (char **)objc_msgSendSuper2(&v8, sel_init);
  unint64_t v6 = v5;
  if (v5)
  {
    sub_25B515774(v5 + 1, a2);
    memcpy(v6[1], a3, 8 * a2);
  }
  return v6;
}

void sub_25B548458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B548550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B548A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B548ABC(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v7 = objc_msgSend_count(v3, v4, v5);
  if (v7 == 2)
  {
    objc_super v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v6, 0);
    objc_msgSend_floatValue(v8, v9, v10);
    unsigned int v18 = v11;
    uint64_t v13 = objc_msgSend_objectAtIndexedSubscript_(v3, v12, 1);
    objc_msgSend_floatValue(v13, v14, v15);
    *a2 = __PAIR64__(v16, v18);
  }
  return v7 == 2;
}

void sub_25B548B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B548B8C(void *a1, void *a2)
{
  id v14 = a1;
  if (objc_msgSend_count(v14, v3, v4) == 4)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v14, v5, v6);
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        break;
      }
      uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v14, v9, v6);
      BOOL v11 = sub_25B548ABC(v10, a2);

      BOOL v12 = v6++ == 3;
      BOOL v13 = !v12 && v11;
      ++a2;
    }
    while (v13);
  }
}

void sub_25B548C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B548F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_25B548F64(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::locale v13[2] = *MEMORY[0x263EF8340];
  int v12 = HIDWORD(a1);
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v13[0] = v4;
  HIDWORD(v5) = v12;
  LODWORD(v5) = v12;
  objc_super v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v13[1] = v8;
  uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v9, (uint64_t)v13, 2);

  return v10;
}

void sub_25B54902C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B549050(double *a1, const char *a2, uint64_t a3)
{
  v17[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_25B548F64(*a1, (uint64_t)a1, a2, a3);
  v17[0] = v4;
  uint64_t v7 = sub_25B548F64(a1[1], (uint64_t)v4, v5, v6);
  v17[1] = v7;
  uint64_t v10 = sub_25B548F64(a1[2], (uint64_t)v7, v8, v9);
  v17[2] = v10;
  BOOL v13 = sub_25B548F64(a1[3], (uint64_t)v10, v11, v12);
  void v17[3] = v13;
  uint64_t v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v14, (uint64_t)v17, 4);

  return v15;
}

void sub_25B549144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B54934C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B549550(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B549BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  if (v17) {
    operator delete(v17);
  }

  _Unwind_Resume(a1);
}

void sub_25B54A010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B54A1DC(_Unwind_Exception *a1)
{
  sub_25B520404(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B54A1F0(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v182 = *MEMORY[0x263EF8340];
  *a1 = 256;
  *((_DWORD *)a1 + 2) = 1031127695;
  *((_OWORD *)a1 + 1) = xmmword_25B5F16A0;
  *((unsigned char *)a1 + 32) = 0;
  sub_25B403500(__p, "input_name");
  v1[5] = 0;
  v1[6] = 0;
  v1[7] = 0;
  *(void *)&long long v146 = v1 + 5;
  BYTE8(v146) = 0;
  uint64_t v2 = (char *)operator new(0x18uLL);
  v1[7] = (uint64_t)(v2 + 24);
  v1[5] = (uint64_t)v2;
  v1[6] = (uint64_t)v2;
  v1[6] = (uint64_t)sub_25B4FF578((uint64_t)(v1 + 7), (long long *)__p, &v164, v2);
  if (SHIBYTE(v163) < 0) {
    operator delete(__p[0]);
  }
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = 0;
  id v3 = operator new(0x1CuLL);
  v1[9] = (uint64_t)v3 + 28;
  v1[10] = (uint64_t)v3 + 28;
  _OWORD *v3 = xmmword_25B5F23C8;
  *(_OWORD *)((char *)v3 + 12) = *(long long *)((char *)&xmmword_25B5F23C8 + 12);
  v1[8] = (uint64_t)v3;
  float v122 = v1;
  sub_25B403500(__p, "var_609");
  sub_25B403500(&v164, "var_610");
  sub_25B403500(&v166, "var_611");
  sub_25B403500(&v169, "var_612");
  sub_25B403500(&v172, "var_613");
  sub_25B403500(v175, "var_614");
  sub_25B403500(v176, "var_615");
  unint64_t v4 = (unint64_t)(v1 + 11);
  v1[11] = 0;
  v1[12] = 0;
  v1[13] = 0;
  *(void *)&long long v146 = v1 + 11;
  BYTE8(v146) = 0;
  double v5 = (char *)operator new(0xA8uLL);
  v1[13] = (uint64_t)(v5 + 168);
  v1[11] = (uint64_t)v5;
  v1[12] = (uint64_t)v5;
  uint64_t v6 = 0;
  v1[12] = (uint64_t)sub_25B4FF578((uint64_t)(v1 + 13), (long long *)__p, &v179, v5);
  do
  {
    if (*(&v178 + v6 * 8) < 0) {
      operator delete((void *)v176[v6]);
    }
    v6 -= 3;
  }
  while (v6 != -21);
  sub_25B403500(v1 + 14, "roomtype_v4.espresso.net");
  v1[17] = 0;
  uint64_t v7 = v1[2];
  uint64_t v8 = *v1;
  v1[18] = 0;
  v1[19] = 0;
  uint64_t v9 = operator new(0x20uLL);
  v1[20] = 0;
  v1[18] = (uint64_t)(v9 + 4);
  v1[19] = (uint64_t)(v9 + 4);
  *uint64_t v9 = 1;
  v9[1] = v7;
  v9[2] = v8;
  void v9[3] = v8;
  v1[17] = (uint64_t)v9;
  v1[21] = 0;
  v1[22] = 0;
  uint64_t v10 = operator new(0x10uLL);
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v1[21] = (uint64_t)(v10 + 2);
  v1[22] = (uint64_t)(v10 + 2);
  void *v10 = v8;
  v10[1] = v8;
  *(_OWORD *)(v1 + 25) = 0u;
  id v14 = v1 + 25;
  v1[20] = (uint64_t)v10;
  *(_OWORD *)(v1 + 23) = 0u;
  uint64_t v15 = (void **)(v1 + 23);
  LODWORD(__p[0]) = 0;
  __p[1] = (void *)75;
  DWORD2(v164) = 2;
  uint64_t v165 = 300;
  LODWORD(v166) = 3;
  LODWORD(v168) = 4;
  int v170 = 5;
  uint64_t v171 = 1111;
  LODWORD(v172) = 6;
  *(void *)&long long v164 = 625;
  uint64_t v167 = 625;
  uint64_t v169 = 625;
  uint64_t v173 = 625;
  *((_DWORD *)v1 + 54) = 1065353216;
  LODWORD(v163) = 1;
  do
  {
    unsigned int v16 = &__p[2 * v13];
    unint64_t v17 = *(unsigned int *)v16;
    if (v11)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v4 = *(unsigned int *)v16;
        if (v11 <= v17) {
          unint64_t v4 = v17 % v11;
        }
      }
      else
      {
        unint64_t v4 = (v11 - 1) & v17;
      }
      uint64_t v19 = (uint64_t **)*((void *)*v15 + v4);
      if (v19)
      {
        for (uint64_t i = *v19; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v21 = i[1];
          if (v21 == v17)
          {
            if (*((_DWORD *)i + 4) == v17) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v21 >= v11) {
                v21 %= v11;
              }
            }
            else
            {
              v21 &= v11 - 1;
            }
            if (v21 != v4) {
              break;
            }
          }
        }
      }
    }
    float32x2_t v22 = operator new(0x20uLL);
    *float32x2_t v22 = 0;
    v22[1] = v17;
    *((_OWORD *)v22 + 1) = *(_OWORD *)v16;
    float v23 = (float)(unint64_t)(v12 + 1);
    float v24 = *((float *)v1 + 54);
    if (!v11 || (float)(v24 * (float)v11) < v23)
    {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3) {
        BOOL v25 = 1;
      }
      unint64_t v26 = v25 | (2 * v11);
      unint64_t v27 = vcvtps_u32_f32(v23 / v24);
      if (v26 <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      else {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v11 = v1[24];
      }
      if (*(void *)&prime > v11) {
        goto LABEL_36;
      }
      if (*(void *)&prime < v11)
      {
        unint64_t v35 = vcvtps_u32_f32((float)(unint64_t)v1[26] / *((float *)v1 + 54));
        if (v11 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
        {
          unint64_t v35 = std::__next_prime(v35);
        }
        else
        {
          uint64_t v37 = 1 << -(char)__clz(v35 - 1);
          if (v35 >= 2) {
            unint64_t v35 = v37;
          }
        }
        if (*(void *)&prime <= v35) {
          int8x8_t prime = (int8x8_t)v35;
        }
        if (*(void *)&prime >= v11)
        {
          unint64_t v11 = v1[24];
        }
        else
        {
          if (prime)
          {
LABEL_36:
            if (*(void *)&prime >> 61) {
              sub_25B3FA70C();
            }
            float32x2_t v29 = operator new(8 * *(void *)&prime);
            float32x2_t v30 = *v15;
            void *v15 = v29;
            if (v30) {
              operator delete(v30);
            }
            uint64_t v31 = 0;
            v1[24] = (uint64_t)prime;
            do
              *((void *)*v15 + v31++) = 0;
            while (*(void *)&prime != v31);
            float32x2_t v32 = (void *)*v14;
            if (*v14)
            {
              unint64_t v33 = v32[1];
              uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.u32[0] > 1uLL)
              {
                if (v33 >= *(void *)&prime) {
                  v33 %= *(void *)&prime;
                }
              }
              else
              {
                v33 &= *(void *)&prime - 1;
              }
              *((void *)*v15 + v33) = v14;
              unint64_t v38 = (void *)*v32;
              if (*v32)
              {
                do
                {
                  unint64_t v39 = v38[1];
                  if (v34.u32[0] > 1uLL)
                  {
                    if (v39 >= *(void *)&prime) {
                      v39 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v39 &= *(void *)&prime - 1;
                  }
                  if (v39 != v33)
                  {
                    if (!*((void *)*v15 + v39))
                    {
                      *((void *)*v15 + v39) = v32;
                      goto LABEL_61;
                    }
                    *float32x2_t v32 = *v38;
                    void *v38 = **((void **)*v15 + v39);
                    **((void **)*v15 + v39) = v38;
                    unint64_t v38 = v32;
                  }
                  unint64_t v39 = v33;
LABEL_61:
                  float32x2_t v32 = v38;
                  unint64_t v38 = (void *)*v38;
                  unint64_t v33 = v39;
                }
                while (v38);
              }
            }
            unint64_t v11 = (unint64_t)prime;
            goto LABEL_65;
          }
          long long v43 = *v15;
          void *v15 = 0;
          if (v43) {
            operator delete(v43);
          }
          unint64_t v11 = 0;
          v1[24] = 0;
        }
      }
LABEL_65:
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v11 <= v17) {
          unint64_t v4 = v17 % v11;
        }
        else {
          unint64_t v4 = v17;
        }
      }
      else
      {
        unint64_t v4 = (v11 - 1) & v17;
      }
    }
    float32x2_t v40 = *v15;
    long long v41 = (void *)*((void *)*v15 + v4);
    if (v41)
    {
      *float32x2_t v22 = *v41;
LABEL_78:
      *long long v41 = v22;
      goto LABEL_79;
    }
    *float32x2_t v22 = *v14;
    void *v14 = v22;
    v40[v4] = v14;
    if (*v22)
    {
      unint64_t v42 = *(void *)(*v22 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      long long v41 = (char *)*v15 + 8 * v42;
      goto LABEL_78;
    }
LABEL_79:
    uint64_t v12 = v1[26] + 1;
    v1[26] = v12;
LABEL_80:
    ++v13;
  }
  while (v13 != 7);
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  long long v44 = v1 + 30;
  long long v121 = (void **)(v1 + 28);
  *((_DWORD *)v1 + 64) = 1065353216;
  long long v45 = operator new(0x18uLL);
  long long v46 = v45;
  int8x8_t v47 = (int8x8_t)2;
  *long long v45 = 0;
  v45[1] = 2;
  v45[2] = 0x3F00000000000002;
  unint64_t v48 = vcvtps_u32_f32(1.0 / *((float *)v1 + 64));
  if (v48 <= 1) {
    size_t v49 = 1;
  }
  else {
    size_t v49 = v48;
  }
  if (v48 < 2) {
    goto LABEL_98;
  }
  if ((v49 & (v49 - 1)) == 0) {
    goto LABEL_97;
  }
  size_t v50 = std::__next_prime(v49);
  size_t v49 = v50;
  int8x8_t v47 = (int8x8_t)v1[29];
  if (v50 > *(void *)&v47) {
    goto LABEL_97;
  }
  if (v50 < *(void *)&v47)
  {
    unint64_t v59 = vcvtps_u32_f32((float)(unint64_t)v1[31] / *((float *)v1 + 64));
    if (*(void *)&v47 < 3uLL || (uint8x8_t v60 = (uint8x8_t)vcnt_s8(v47), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      unint64_t v59 = std::__next_prime(v59);
    }
    else
    {
      uint64_t v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2) {
        unint64_t v59 = v61;
      }
    }
    if (v49 <= v59) {
      size_t v49 = v59;
    }
    if (v49 >= *(void *)&v47)
    {
      int8x8_t v47 = (int8x8_t)v1[29];
    }
    else
    {
      if (!v49)
      {
        __int16 v62 = *v121;
        *long long v121 = 0;
        if (v62) {
          operator delete(v62);
        }
        int8x8_t v47 = 0;
        v1[29] = 0;
        BOOL v63 = 1;
LABEL_135:
        unint64_t v65 = (v47.i8[0] - 1) & 2;
        goto LABEL_138;
      }
LABEL_97:
      int8x8_t v47 = (int8x8_t)v49;
      if (v49 >> 61) {
        sub_25B3FA70C();
      }
LABEL_98:
      uint64_t v51 = operator new(8 * *(void *)&v47);
      __int32 v52 = *v121;
      *long long v121 = v51;
      if (v52) {
        operator delete(v52);
      }
      uint64_t v53 = 0;
      v1[29] = (uint64_t)v47;
      do
        *((void *)*v121 + v53++) = 0;
      while (*(void *)&v47 != v53);
      long long v54 = (void *)*v44;
      if (*v44)
      {
        unint64_t v55 = v54[1];
        uint8x8_t v56 = (uint8x8_t)vcnt_s8(v47);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          if (v55 >= *(void *)&v47) {
            v55 %= *(void *)&v47;
          }
        }
        else
        {
          v55 &= *(void *)&v47 - 1;
        }
        *((void *)*v121 + v55) = v44;
        long long v57 = (void *)*v54;
        if (*v54)
        {
          while (2)
          {
            unint64_t v58 = v57[1];
            if (v56.u32[0] > 1uLL)
            {
              if (v58 >= *(void *)&v47) {
                v58 %= *(void *)&v47;
              }
            }
            else
            {
              v58 &= *(void *)&v47 - 1;
            }
            if (v58 == v55)
            {
LABEL_115:
              unint64_t v58 = v55;
            }
            else
            {
              if (*((void *)*v121 + v58))
              {
                *long long v54 = *v57;
                void *v57 = **((void **)*v121 + v58);
                **((void **)*v121 + v58) = v57;
                long long v57 = v54;
                goto LABEL_115;
              }
              *((void *)*v121 + v58) = v54;
            }
            long long v54 = v57;
            long long v57 = (void *)*v57;
            unint64_t v55 = v58;
            if (!v57) {
              break;
            }
            continue;
          }
        }
      }
    }
  }
  uint8x8_t v64 = (uint8x8_t)vcnt_s8(v47);
  v64.i16[0] = vaddlv_u8(v64);
  BOOL v63 = v64.u32[0] < 2uLL;
  if (v64.u32[0] < 2uLL) {
    goto LABEL_135;
  }
  unint64_t v65 = 2;
  if (*(void *)&v47 <= 2uLL) {
    unint64_t v65 = 2uLL % *(void *)&v47;
  }
LABEL_138:
  int v66 = *v121;
  int v67 = (void *)*((void *)*v121 + v65);
  if (v67)
  {
    *long long v46 = *v67;
    goto LABEL_146;
  }
  *long long v46 = *v44;
  *long long v44 = v46;
  v66[v65] = v44;
  if (*v46)
  {
    unint64_t v68 = *(void *)(*v46 + 8);
    if (v63)
    {
      v68 &= *(void *)&v47 - 1;
    }
    else if (v68 >= *(void *)&v47)
    {
      v68 %= *(void *)&v47;
    }
    int v67 = (char *)*v121 + 8 * v68;
LABEL_146:
    *int v67 = v46;
  }
  ++v1[31];
  sub_25B403500(v160, "Bed");
  long long v136 = 0;
  int v137 = 0;
  v138[0] = 0;
  *(void *)&long long v146 = &v136;
  BYTE8(v146) = 0;
  long long v136 = (char *)operator new(0x18uLL);
  int v137 = v136;
  v138[0] = v136 + 24;
  uint64_t v69 = sub_25B4FF578((uint64_t)v138, (long long *)v160, (long long *)__p, v136);
  LODWORD(__p[0]) = 1;
  uint64_t v70 = v138[0];
  __p[1] = v136;
  unsigned int v163 = v69;
  long long v136 = 0;
  v138[0] = 0;
  v138[1] = 0x3F59999A00000000;
  int v137 = 0;
  *(void *)&long long v164 = v70;
  *((void *)&v164 + 1) = 0x3F59999A00000000;
  sub_25B403500(&v157, "Sofa");
  sub_25B403500(v158, "Table");
  sub_25B403500(v159, "Chair");
  unint64_t v133 = 0;
  unint64_t v134 = 0;
  v135[0] = 0;
  *(void *)&long long v146 = &v133;
  BYTE8(v146) = 0;
  unint64_t v133 = (char *)operator new(0x48uLL);
  unint64_t v134 = v133;
  v135[0] = v133 + 72;
  uint64_t v71 = sub_25B4FF578((uint64_t)v135, &v157, (long long *)v160, v133);
  LODWORD(v165) = 5;
  uint64_t v72 = v135[0];
  unsigned int v166 = v133;
  uint64_t v167 = (uint64_t)v71;
  unint64_t v133 = 0;
  v135[0] = 0;
  v135[1] = 0x3F66666600000000;
  unint64_t v134 = 0;
  uint64_t v168 = v72;
  uint64_t v169 = 0x3F66666600000000;
  sub_25B403500(&v155, "Table");
  sub_25B403500(v156, "Chair");
  float v130 = 0;
  long long v131 = 0;
  v132[0] = 0;
  *(void *)&long long v146 = &v130;
  BYTE8(v146) = 0;
  float v130 = (char *)operator new(0x30uLL);
  long long v131 = v130;
  v132[0] = v130 + 48;
  uint64_t v73 = sub_25B4FF578((uint64_t)v132, &v155, &v157, v130);
  int v170 = 2;
  uint64_t v74 = v132[0];
  uint64_t v171 = (uint64_t)v130;
  long long v172 = v73;
  float v130 = 0;
  v132[0] = 0;
  v132[1] = 0x3F66666600000001;
  long long v131 = 0;
  uint64_t v173 = v74;
  uint64_t v174 = 0x3F66666600000001;
  sub_25B403500(&v152, "Bathtub");
  sub_25B403500(v153, "Toilet");
  sub_25B403500(v154, "Sink");
  unint64_t v127 = 0;
  uint64_t v128 = 0;
  v129[0] = 0;
  *(void *)&long long v146 = &v127;
  BYTE8(v146) = 0;
  unint64_t v127 = (char *)operator new(0x48uLL);
  uint64_t v128 = v127;
  v129[0] = v127 + 72;
  float v75 = sub_25B4FF578((uint64_t)v129, &v152, &v155, v127);
  LODWORD(v175[0]) = 0;
  uint64_t v76 = v129[0];
  v175[1] = v127;
  v175[2] = v75;
  unint64_t v127 = 0;
  v129[0] = 0;
  v129[1] = 0x3F4CCCCD00000000;
  uint64_t v128 = 0;
  v176[0] = v76;
  v176[1] = 0x3F4CCCCD00000000;
  sub_25B403500(&v146, "Dishwasher");
  sub_25B403500(v147, "Oven");
  sub_25B403500(v148, "Refrigerator");
  sub_25B403500(v149, "Sink");
  sub_25B403500(v150, "Stove");
  sub_25B403500(v151, "Storage");
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  v126[0] = 0;
  unint64_t v140 = (void **)&v124;
  LOBYTE(v141) = 0;
  uint64_t v124 = (char *)operator new(0x90uLL);
  uint64_t v125 = v124;
  v126[0] = v124 + 144;
  __int32 v77 = sub_25B4FF578((uint64_t)v126, &v146, &v152, v124);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  int v177 = 4;
  float v80 = (void **)(v1 + 33);
  uint64_t v81 = v126[0];
  *(void *)&long long v179 = v124;
  *((void *)&v179 + 1) = v77;
  uint64_t v124 = 0;
  v126[0] = 0;
  v126[1] = 0x3F4CCCCD00000000;
  uint64_t v125 = 0;
  uint64_t v180 = v81;
  uint64_t v181 = 0x3F4CCCCD00000000;
  long long v123 = v1 + 35;
  *((_DWORD *)v1 + 74) = 1065353216;
  *(_OWORD *)(v1 + 33) = 0u;
  *(_OWORD *)(v1 + 35) = 0u;
  while (2)
  {
    unint64_t v82 = LODWORD(__p[5 * v79]);
    unint64_t v83 = v1[34];
    if (v83)
    {
      uint8x8_t v84 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        int8x8_t v47 = (int8x8_t)LODWORD(__p[5 * v79]);
        if (v83 <= v82) {
          int8x8_t v47 = (int8x8_t)(v82 % v83);
        }
      }
      else
      {
        int8x8_t v47 = (int8x8_t)((v83 - 1) & v82);
      }
      float v85 = (uint64_t **)*((void *)*v80 + *(void *)&v47);
      if (v85)
      {
        for (uint64_t j = *v85; j; uint64_t j = (uint64_t *)*j)
        {
          unint64_t v87 = j[1];
          if (v87 == v82)
          {
            if (*((_DWORD *)j + 4) == v82) {
              goto LABEL_227;
            }
          }
          else
          {
            if (v84.u32[0] > 1uLL)
            {
              if (v87 >= v83) {
                v87 %= v83;
              }
            }
            else
            {
              v87 &= v83 - 1;
            }
            if (v87 != *(void *)&v47) {
              break;
            }
          }
        }
      }
    }
    uint64_t v88 = (char *)operator new(0x38uLL);
    *(void *)uint64_t v88 = 0;
    *((void *)v88 + 1) = v82;
    *((_DWORD *)v88 + 4) = v82;
    *((void *)v88 + 3) = 0;
    uint64_t v89 = &__p[5 * v79];
    *((void *)v88 + 4) = 0;
    *((void *)v88 + 5) = 0;
    uint64_t v91 = (char *)v89[1];
    float32x2_t v90 = (char *)v89[2];
    v138[2] = v88 + 24;
    char v139 = 0;
    if (v90 != v91)
    {
      sub_25B413D24((void *)v88 + 3, 0xAAAAAAAAAAAAAAABLL * ((v90 - v91) >> 3));
      uint64_t v144 = *((void *)v88 + 4);
      uint64_t v145 = v144;
      unint64_t v140 = (void **)(v88 + 40);
      uint64_t v141 = &v144;
      float v142 = &v145;
      char v143 = 0;
      uint64_t v92 = v144;
      do
      {
        if (v91[23] < 0)
        {
          sub_25B4002F4((unsigned char *)v92, *(void **)v91, *((void *)v91 + 1));
          uint64_t v92 = v145;
        }
        else
        {
          long long v93 = *(_OWORD *)v91;
          *(void *)(v92 + 16) = *((void *)v91 + 2);
          *(_OWORD *)uint64_t v92 = v93;
        }
        v91 += 24;
        v92 += 24;
        uint64_t v145 = v92;
      }
      while (v91 != v90);
      char v143 = 1;
      sub_25B5029F4((uint64_t)&v140);
      *((void *)v88 + 4) = v92;
      uint64_t v1 = v122;
      uint64_t v78 = v122[36];
    }
    *((void *)v88 + 6) = *((void *)&v164 + 5 * v79 + 1);
    float v94 = (float)(unint64_t)(v78 + 1);
    float v95 = *((float *)v1 + 74);
    if (!v83 || (float)(v95 * (float)v83) < v94)
    {
      BOOL v96 = (v83 & (v83 - 1)) != 0;
      if (v83 < 3) {
        BOOL v96 = 1;
      }
      unint64_t v97 = v96 | (2 * v83);
      unint64_t v98 = vcvtps_u32_f32(v94 / v95);
      if (v97 <= v98) {
        int8x8_t v99 = (int8x8_t)v98;
      }
      else {
        int8x8_t v99 = (int8x8_t)v97;
      }
      if (*(void *)&v99 == 1)
      {
        int8x8_t v99 = (int8x8_t)2;
      }
      else if ((*(void *)&v99 & (*(void *)&v99 - 1)) != 0)
      {
        int8x8_t v99 = (int8x8_t)std::__next_prime(*(void *)&v99);
      }
      unint64_t v83 = v1[34];
      if (*(void *)&v99 <= v83)
      {
        if (*(void *)&v99 < v83)
        {
          unint64_t v106 = vcvtps_u32_f32((float)(unint64_t)v1[36] / *((float *)v1 + 74));
          if (v83 < 3 || (uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v107.i16[0] = vaddlv_u8(v107), v107.u32[0] > 1uLL))
          {
            unint64_t v106 = std::__next_prime(v106);
          }
          else
          {
            uint64_t v108 = 1 << -(char)__clz(v106 - 1);
            if (v106 >= 2) {
              unint64_t v106 = v108;
            }
          }
          if (*(void *)&v99 <= v106) {
            int8x8_t v99 = (int8x8_t)v106;
          }
          if (*(void *)&v99 >= v83)
          {
            unint64_t v83 = v1[34];
          }
          else
          {
            if (v99) {
              goto LABEL_183;
            }
            unint64_t v114 = *v80;
            *float v80 = 0;
            if (v114) {
              operator delete(v114);
            }
            unint64_t v83 = 0;
            v1[34] = 0;
          }
        }
      }
      else
      {
LABEL_183:
        if (*(void *)&v99 >> 61) {
          sub_25B3FA70C();
        }
        unint64_t v100 = operator new(8 * *(void *)&v99);
        long long v101 = *v80;
        *float v80 = v100;
        if (v101) {
          operator delete(v101);
        }
        uint64_t v102 = 0;
        v1[34] = (uint64_t)v99;
        do
          *((void *)*v80 + v102++) = 0;
        while (*(void *)&v99 != v102);
        uint64_t v103 = (void *)*v123;
        if (*v123)
        {
          unint64_t v104 = v103[1];
          uint8x8_t v105 = (uint8x8_t)vcnt_s8(v99);
          v105.i16[0] = vaddlv_u8(v105);
          if (v105.u32[0] > 1uLL)
          {
            if (v104 >= *(void *)&v99) {
              v104 %= *(void *)&v99;
            }
          }
          else
          {
            v104 &= *(void *)&v99 - 1;
          }
          *((void *)*v80 + v104) = v123;
          long long v109 = (void *)*v103;
          if (*v103)
          {
            do
            {
              unint64_t v110 = v109[1];
              if (v105.u32[0] > 1uLL)
              {
                if (v110 >= *(void *)&v99) {
                  v110 %= *(void *)&v99;
                }
              }
              else
              {
                v110 &= *(void *)&v99 - 1;
              }
              if (v110 != v104)
              {
                if (!*((void *)*v80 + v110))
                {
                  *((void *)*v80 + v110) = v103;
                  goto LABEL_208;
                }
                void *v103 = *v109;
                *long long v109 = **((void **)*v80 + v110);
                **((void **)*v80 + v110) = v109;
                long long v109 = v103;
              }
              unint64_t v110 = v104;
LABEL_208:
              uint64_t v103 = v109;
              long long v109 = (void *)*v109;
              unint64_t v104 = v110;
            }
            while (v109);
          }
        }
        unint64_t v83 = (unint64_t)v99;
      }
      if ((v83 & (v83 - 1)) != 0)
      {
        if (v83 <= v82) {
          int8x8_t v47 = (int8x8_t)(v82 % v83);
        }
        else {
          int8x8_t v47 = (int8x8_t)v82;
        }
      }
      else
      {
        int8x8_t v47 = (int8x8_t)((v83 - 1) & v82);
      }
    }
    long long v111 = *v80;
    uint64_t v112 = (void *)*((void *)*v80 + *(void *)&v47);
    if (v112)
    {
      *(void *)uint64_t v88 = *v112;
      goto LABEL_225;
    }
    *(void *)uint64_t v88 = *v123;
    *long long v123 = v88;
    v111[*(void *)&v47] = v123;
    if (*(void *)v88)
    {
      unint64_t v113 = *(void *)(*(void *)v88 + 8);
      if ((v83 & (v83 - 1)) != 0)
      {
        if (v113 >= v83) {
          v113 %= v83;
        }
      }
      else
      {
        v113 &= v83 - 1;
      }
      uint64_t v112 = (char *)*v80 + 8 * v113;
LABEL_225:
      void *v112 = v88;
    }
    uint64_t v78 = v1[36] + 1;
    v1[36] = v78;
LABEL_227:
    if (++v79 != 5) {
      continue;
    }
    break;
  }
  for (uint64_t k = 21; k != -4; k -= 5)
  {
    unint64_t v140 = &__p[k];
    sub_25B41032C(&v140);
  }
  unint64_t v140 = (void **)&v124;
  sub_25B41032C(&v140);
  for (uint64_t m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v151[m + 2]) < 0) {
      operator delete((void *)v151[m]);
    }
  }
  *(void *)&long long v146 = &v127;
  sub_25B41032C((void ***)&v146);
  for (uint64_t n = 0; n != -9; n -= 3)
  {
    if (SHIBYTE(v154[n + 2]) < 0) {
      operator delete((void *)v154[n]);
    }
  }
  *(void *)&long long v146 = &v130;
  sub_25B41032C((void ***)&v146);
  for (iuint64_t i = 0; ii != -6; ii -= 3)
  {
    if (SHIBYTE(v156[ii + 2]) < 0) {
      operator delete((void *)v156[ii]);
    }
  }
  *(void *)&long long v146 = &v133;
  sub_25B41032C((void ***)&v146);
  for (juint64_t j = 0; jj != -9; jj -= 3)
  {
    if (SHIBYTE(v159[jj + 2]) < 0) {
      operator delete(v159[jj]);
    }
  }
  *(void *)&long long v146 = &v136;
  sub_25B41032C((void ***)&v146);
  if (v161 < 0) {
    operator delete(v160[0]);
  }
  return v1;
}

void sub_25B54B540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v18);
  sub_25B3FB178(a16);
  sub_25B3FB178(v17);
  uint64_t v20 = *a11;
  if (*a11)
  {
    *(void *)(a17 + 168) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a12;
  if (*a12)
  {
    *(void *)(a17 + 144) = v21;
    operator delete(v21);
  }
  if (*(char *)(a17 + 135) < 0) {
    operator delete(*a9);
  }
  STACK[0x298] = a13;
  sub_25B41032C((void ***)&STACK[0x298]);
  float32x2_t v22 = *a14;
  if (*a14)
  {
    *(void *)(a17 + 72) = v22;
    operator delete(v22);
  }
  STACK[0x298] = a15;
  sub_25B41032C((void ***)&STACK[0x298]);
  _Unwind_Resume(a1);
}

uint64_t sub_25B54BAA4(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = *(char **)v2;
      uint64_t v6 = (void **)(v2 + 24);
      sub_25B41032C(&v6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B54BB14(char a1, void **__p)
{
  if (a1)
  {
    id v3 = __p + 3;
    sub_25B41032C(&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_25B54BBDC(uint64_t a1)
{
  sub_25B54BAA4(a1 + 264);
  sub_25B3FB178(a1 + 224);
  sub_25B3FB178(a1 + 184);
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(void *)(a1 + 144) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  uint64_t v6 = (void **)(a1 + 88);
  sub_25B41032C(&v6);
  unint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)(a1 + 40);
  sub_25B41032C(&v6);
  return a1;
}

void sub_25B54BFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void *sub_25B54C058(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_25B4002F4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_25B400390(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return __dst;
}

void sub_25B54C0C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B54C0E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_25B4792BC(v4);
      }
      while ((void *)v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B54C164(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B54C1A8()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_25B54C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (1)
  {
    if (*((char *)v10 - 1) < 0) {
      operator delete((void *)*(v10 - 3));
    }
    v10 -= 4;
    if (v10 == &a9)
    {
      MEMORY[0x261163EE0](v9, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

void sub_25B54C81C(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_25B54C87C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_25B4792BC(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id sub_25B54C8CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v464 = *MEMORY[0x263EF8340];
  id v405 = a2;
  id v404 = a3;
  id v403 = a4;
  uint64_t v411 = a1;
  if (!a1)
  {
    id v406 = 0;
    goto LABEL_517;
  }
  int v437 = 8775;
  uint64_t v438 = 0;
  kdebug_trace();
  sub_25B54EE18(a1, v7, v8);
  if (!objc_msgSend_count(v405, v9, v10))
  {
    objc_msgSend_array(MEMORY[0x263EFF8C0], v11, v12);
    id v406 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_516;
  }
  kdebug_trace();
  id v13 = v405;
  id v409 = v404;
  uint64_t v14 = *(void *)(v411 + 24);
  if (!v14)
  {
    uint64_t v15 = sub_25B4FDB1C([RSSemanticImage alloc], *(void *)(v411 + 440), *(void *)(v411 + 440), *(void *)(v411 + 456), 1, 1278226536);
    unsigned int v16 = *(void **)(v411 + 24);
    *(void *)(v411 + 24) = v15;

    uint64_t v14 = *(void *)(v411 + 24);
  }
  sub_25B4FDD60(v14);
  sub_25B400578(*(void *)(v411 + 432), v13, v409);
  unint64_t v19 = objc_msgSend_count(v13, v17, v18);
  v462[0] = 0;
  sub_25B45784C(v458, v19, v462);
  uint64_t v20 = v458[0];
  unint64_t v21 = v458[1];
  if (v458[0] != v458[1])
  {
    uint64_t v22 = 0;
    do
      *v20++ = v22++;
    while (v20 != v21);
  }
  uint64_t v23 = *(void *)(v411 + 24);
  if (v23 && *(void *)(v23 + 64) == 1) {
    float v24 = *(__CVBuffer **)(v23 + 8);
  }
  else {
    float v24 = 0;
  }
  CVPixelBufferLockBaseAddress(v24, 0);
  BOOL v25 = sub_25B400D94(*(id **)(v411 + 432));
  unint64_t v26 = *(void **)(v411 + 24);
  id v27 = v13;
  id v28 = v25;
  id v407 = v26;
  id v415 = v28;
  if (v28)
  {
    float64x2_t v412 = *((float64x2_t *)v28 + 8);
    float64x2_t v413 = *((float64x2_t *)v28 + 6);
    float64x2_t v421 = *((float64x2_t *)v28 + 7);
    float64x2_t v425 = *((float64x2_t *)v28 + 5);
    signed int v29 = *((_DWORD *)v28 + 7);
    int v417 = *((_DWORD *)v28 + 8);
    float v30 = *((float *)v28 + 4);
    float v31 = *((float *)v28 + 6);
  }
  else
  {
    int v417 = 0;
    signed int v29 = 0;
    float v30 = 0.0;
    float64x2_t v421 = 0u;
    float64x2_t v425 = 0u;
    float64x2_t v412 = 0u;
    float64x2_t v413 = 0u;
    float v31 = 0.0;
  }
  long long __p = 0uLL;
  long long v453 = 0uLL;
  LODWORD(v454) = 1065353216;
  size_t v32 = (unint64_t)(float)(unint64_t)((double)(unint64_t)(((char *)v458[1] - (char *)v458[0]) >> 3)
                                                  * 0.25);
  sub_25B3FA4B0((uint64_t)&__p, v32);
  long long v448 = 0u;
  long long v449 = 0u;
  LODWORD(v450) = 1065353216;
  if (v417 >= 1) {
    sub_25B3FA4B0((uint64_t)&v448, v32);
  }
  unint64_t v35 = v458[0];
  uint8x8_t v36 = v458[1];
  uint64_t v37 = v415;
  if (v458[0] != v458[1])
  {
    float v38 = v30 + v31;
    do
    {
      uint64_t v39 = objc_msgSend_points(v27, v33, v34);
      float64x2_t v40 = vmulq_f64(v425, vaddq_f64(v421, vcvtq_f64_f32(*(float32x2_t *)(v39 + 16 * *v35))));
      signed int v41 = llround(v40.f64[0]);
      if ((v41 & 0x80000000) == 0 && v29 > v41)
      {
        signed int v42 = llround(v40.f64[1]);
        if ((v42 & 0x80000000) == 0 && v29 > v42)
        {
          uint64_t v43 = v39 + 16 * *v35;
          float v45 = *(float *)(v43 + 8);
          long long v44 = (float *)(v43 + 8);
          float v46 = v45;
          int v47 = v42 + v29 * v41;
          LODWORD(v462[0]) = v47;
          unint64_t v48 = sub_25B3FA294((uint64_t)&__p, v47, v462);
          size_t v50 = v48;
          int v51 = *(_DWORD *)v35;
          uint64_t v53 = (char *)v48[4];
          unint64_t v52 = v48[5];
          if ((unint64_t)v53 >= v52)
          {
            unint64_t v55 = (char *)v48[3];
            uint64_t v56 = (v53 - v55) >> 2;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            uint64_t v58 = v52 - (void)v55;
            if (v58 >> 1 > v57) {
              unint64_t v57 = v58 >> 1;
            }
            _CF = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF) {
              unint64_t v60 = v57;
            }
            if (v60)
            {
              unint64_t v60 = (unint64_t)sub_25B3FBC64(v60);
              unint64_t v55 = (char *)v50[3];
              uint64_t v53 = (char *)v50[4];
            }
            else
            {
              unint64_t v33 = 0;
            }
            uint64_t v61 = (_DWORD *)(v60 + 4 * v56);
            *uint64_t v61 = v51;
            long long v54 = v61 + 1;
            while (v53 != v55)
            {
              int v62 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *--uint64_t v61 = v62;
            }
            v50[3] = v61;
            v50[4] = v54;
            v50[5] = v60 + 4 * (void)v33;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v53 = v51;
            long long v54 = v53 + 4;
          }
          v49.f64[0] = v46;
          signed int v63 = llround(vmulq_f64(v413, vaddq_f64(v412, v49)).f64[0]);
          v50[4] = v54;
          uint64_t v37 = v415;
          if (v417 > v63 && (v63 & 0x80000000) == 0 && v30 <= *v44 && *v44 <= v38)
          {
            LODWORD(src.receiver) = v47 + v29 * v29 * v63;
            unint64_t v65 = sub_25B4ED794((uint64_t)&v448, (int)src.receiver, &src);
            ++*((_DWORD *)v65 + 5);
          }
        }
      }
      ++v35;
    }
    while (v35 != v36);
  }
  int v66 = v407;
  uint64_t v422 = sub_25B4FD95C(v66, 1uLL);
  uint64_t n = v66;
  unint64_t v68 = sub_25B4FD95C(n, 0);
  if (n) {
    uint64_t v71 = n[5] * n[3];
  }
  else {
    uint64_t v71 = 0;
  }
  uint64_t v72 = (uint64_t **)v453;
  if ((void)v453)
  {
    long long v426 = v68;
    int32x2_t v414 = n;
    int v73 = 1;
    do
    {
      int v463 = 0;
      memset(v462, 0, sizeof(v462));
      uint64_t v74 = (int *)v72[3];
      float v75 = (int *)v72[4];
      uint64_t v76 = v74;
      if (v74 != v75)
      {
        do
        {
          uint64_t v77 = objc_msgSend_semanticLabels(v27, v69, v70);
          uint64_t v78 = *v74;
          uint64_t v81 = objc_msgSend_semanticVotes(v27, v79, v80);
          uint64_t v83 = *v74;
          objc_super src = (objc_super)0;
          long long v440 = 0u;
          long long v441 = 0u;
          long long v442 = 0u;
          long long v443 = 0u;
          long long v444 = 0u;
          long long v445 = 0u;
          long long v446 = 0u;
          int v447 = 0;
          uint16x4_t v84 = *(uint16x4_t *)(v81 + 8 * v83);
          int8x16_t v85 = (int8x16_t)vmovl_u16(v84);
          uint32x4_t v86 = vaddw_u16((uint32x4_t)vextq_s8(v85, v85, 8uLL), v84);
          __int16 v434 = v86.i16[2];
          __int16 v433 = v86.i16[0];
          if (v86.i16[0] + v86.i16[2])
          {
            float v87 = 1.0 / (float)(unsigned __int16)(v433 + v434);
            if (v84.i16[3])
            {
              for (uint64_t i = 0; i != 132; i += 4)
                *(float *)((char *)&src.receiver + i) = (float)(v87 * (float)v84.u16[3]) / 30.0;
            }
            for (int j = 0; j != 3; ++j)
            {
              uint16x4_t v432 = v84;
              if (*(_WORD *)((unint64_t)&v432 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3))))
              {
                v82.i32[0] = *(_DWORD *)(v77 + 4 * v78);
                uint8x8_t v82 = (uint8x8_t)vmovl_u8(v82).u64[0];
                uint8x8_t v431 = v82;
                __int16 v90 = *(_WORD *)((unint64_t)&v431 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3)));
                if (v90 <= 0x20u) {
                  *((_DWORD *)&src.receiver + v90) = 0;
                }
              }
            }
            for (int k = 0; k != 3; ++k)
            {
              uint16x4_t v430 = v84;
              unsigned int v92 = *(unsigned __int16 *)((unint64_t)&v430 & 0xFFFFFFFFFFFFFFF9 | (2 * (k & 3)));
              if (*(_WORD *)((unint64_t)&v430 & 0xFFFFFFFFFFFFFFF9 | (2 * (k & 3))))
              {
                v82.i32[0] = *(_DWORD *)(v77 + 4 * v78);
                uint8x8_t v82 = (uint8x8_t)vmovl_u8(v82).u64[0];
                uint8x8_t v429 = v82;
                __int16 v93 = *(_WORD *)((unint64_t)&v429 & 0xFFFFFFFFFFFFFFF9 | (2 * (k & 3)));
                if (v93 <= 0x20u) {
                  *((float *)&src.receiver + v93) = *((float *)&src.receiver + v93)
                }
                                                                   + (float)((float)v92 * v87);
              }
            }
          }
          for (uint64_t m = 0; m != 132; m += 4)
            *(float *)((char *)v462 + m) = *(float *)((char *)v462 + m) + *(float *)((char *)&src.receiver + m);
          ++v74;
        }
        while (v74 != v75);
        uint64_t v74 = (int *)v72[3];
        uint64_t v76 = (int *)v72[4];
      }
      uint64_t v95 = 0;
      unint64_t v96 = (unint64_t)((char *)v76 - (char *)v74) >> 2;
      _S0 = (float)(int)v96;
      __asm { FCVT            H1, S0 }
      uint64_t v101 = *((int *)v72 + 4);
      *((_WORD *)v426 + v101) = _H1;
      uint64_t v102 = v422;
      do
      {
        _S1 = *(float *)((char *)v462 + v95) / _S0;
        __asm { FCVT            H1, S1 }
        *((_WORD *)v102 + v101) = LOWORD(_S1);
        v95 += 4;
        uint64_t v102 = (void *)((char *)v102 + v71);
      }
      while (v95 != 132);
      if (v73 <= (int)v96) {
        int v73 = v96;
      }
      uint64_t v72 = (uint64_t **)*v72;
    }
    while (v72);
    unint64_t v104 = (uint64_t **)v453;
    uint64_t v37 = v415;
    for (n = v414; v104; unint64_t v104 = (uint64_t **)*v104)
    {
      uint64_t v106 = *((int *)v104 + 4);
      _H1 = *((_WORD *)v426 + v106);
      __asm { FCVT            S1, H1 }
      float v105 = 1.0 / (double)v73;
      _S1 = v105 * _S1;
      __asm { FCVT            H1, S1 }
      *((_WORD *)v426 + v106) = LOWORD(_S1);
    }
  }
  if (v417 >= 1)
  {
    unint64_t v110 = sub_25B4FD95C(n, 0x22uLL);
    long long v111 = (uint64_t **)v449;
    if ((void)v449)
    {
      int v112 = 1;
      unint64_t v113 = (uint64_t *)v449;
      do
      {
        int v114 = *((_DWORD *)v113 + 5);
        _S0 = (float)v114;
        __asm { FCVT            H0, S0 }
        *((_WORD *)v110 + *((int *)v113 + 4)) = LOWORD(_S0);
        if (v112 <= v114) {
          int v112 = v114;
        }
        unint64_t v113 = (uint64_t *)*v113;
      }
      while (v113);
      float v116 = 1.0 / (double)v112;
      do
      {
        uint64_t v117 = *((int *)v111 + 4);
        _H1 = *((_WORD *)v110 + v117);
        __asm { FCVT            S1, H1 }
        _S1 = v116 * _S1;
        __asm { FCVT            H1, S1 }
        *((_WORD *)v110 + v117) = LOWORD(_S1);
        long long v111 = (uint64_t **)*v111;
      }
      while (v111);
    }
  }
  sub_25B3FB178((uint64_t)&v448);
  sub_25B3FAE18((void *)v453);
  long long v121 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v121) {
    operator delete(v121);
  }

  uint64_t v122 = *(void *)(v411 + 24);
  if (v122 && *(void *)(v122 + 64) == 1) {
    long long v123 = *(__CVBuffer **)(v122 + 8);
  }
  else {
    long long v123 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v123, 0);
  if (v458[0])
  {
    v458[1] = v458[0];
    operator delete(v458[0]);
  }

  kdebug_trace();
  kdebug_trace();
  uint64_t v124 = *(void *)(v411 + 24);
  if (v124 && *(void *)(v124 + 64) == 1) {
    uint64_t v125 = *(__CVBuffer **)(v124 + 8);
  }
  else {
    uint64_t v125 = 0;
  }
  sub_25B460F20((unint64_t *)&v435, v411 + 32, v125);
  kdebug_trace();
  kdebug_trace();
  int32x2_t v408 = v403;
  objc_msgSend_array(MEMORY[0x263EFF980], v126, v127);
  id v406 = (id)objc_claimAutoreleasedReturnValue();
  sub_25B400D94(*(id **)(v411 + 432));
  uint64_t v128 = (int8x16_t *)objc_claimAutoreleasedReturnValue();
  if (v128)
  {
    int8x16_t v427 = v128[7];
    unint64_t v129 = vextq_s8(v427, v427, 8uLL).u64[0];
  }
  else
  {
    v427.i64[0] = 0;
    unint64_t v129 = 0;
  }
  unint64_t v423 = v129;

  sub_25B400D94(*(id **)(v411 + 432));
  float v130 = (int8x16_t *)objc_claimAutoreleasedReturnValue();
  if (v130)
  {
    int8x16_t v410 = v130[5];
    unint64_t v131 = vextq_s8(v410, v410, 8uLL).u64[0];
  }
  else
  {
    v410.i64[0] = 0;
    unint64_t v131 = 0;
  }
  unint64_t v418 = v131;

  unint64_t v134 = objc_msgSend_objects(v408, v132, v133);
  BOOL v137 = objc_msgSend_count(v134, v135, v136) == 0;

  *(void *)&v140.f64[0] = v427.i64[0];
  *(void *)&v140.f64[1] = v423;
  float64x2_t v428 = v140;
  *(void *)&v140.f64[0] = v410.i64[0];
  *(void *)&v140.f64[1] = v418;
  float64x2_t v424 = v140;
  if (v137) {
    goto LABEL_321;
  }
  __objc_super src = 0uLL;
  unint64_t v457 = 0;
  long long __p = 0u;
  long long v453 = 0u;
  long long v454 = 0u;
  long long v455 = 0u;
  unint64_t v141 = objc_msgSend_objects(v408, v138, v139);
  uint64_t v143 = objc_msgSend_countByEnumeratingWithState_objects_count_((void *)v141, v142, (uint64_t)&__p, v462, 16);
  if (!v143) {
    goto LABEL_156;
  }
  uint64_t v416 = *(void *)v453;
  do
  {
    uint64_t v146 = 0;
    uint64_t v419 = v143;
    do
    {
      if (*(void *)v453 != v416) {
        objc_enumerationMutation((id)v141);
      }
      unsigned int v147 = *(void **)(*((void *)&__p + 1) + 8 * v146);
      unsigned int v148 = objc_msgSend_boxesDict(v147, v144, v145);
      unsigned int v149 = (void *)v141;
      unsigned int v151 = objc_msgSend_objectForKeyedSubscript_(v148, v150, @"wallaligned");
      BOOL v152 = v151 == 0;

      long long v155 = @"wallaligned";
      if (!v152)
      {
LABEL_107:
        unsigned int v156 = v155;
        long long v445 = 0u;
        long long v446 = 0u;
        long long v443 = 0u;
        long long v444 = 0u;
        long long v442 = 0u;
        long long v440 = 0u;
        long long v441 = 0u;
        objc_super src = (objc_super)0;
        unsigned int v159 = objc_msgSend_boxesDict(v147, v157, v158);
        char v161 = objc_msgSend_objectForKeyedSubscript_(v159, v160, (uint64_t)v156);
        sub_25B445344((uint64_t)&src, v161);

        sub_25B403500(&v448, "");
        *((void *)&v449 + 1) = 0;
        uint64_t v450 = 0;
        unint64_t v451 = 0;
        objc_msgSend_type(v147, v162, v163);
        id v164 = objc_claimAutoreleasedReturnValue();
        uint64_t v167 = (char *)objc_msgSend_UTF8String(v164, v165, v166);
        sub_25B403500(v458, v167);
        if (SBYTE7(v449) < 0) {
          operator delete((void *)v448);
        }
        long long v448 = *(_OWORD *)v458;
        *(void **)&long long v449 = v458[2];
        HIBYTE(v458[2]) = 0;
        LOBYTE(v458[0]) = 0;

        uint64_t v168 = 0;
        uint64_t v169 = v450;
        do
        {
          float32x2_t v170 = vmaxnm_f32(vcvt_f32_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v424, vaddq_f64(v428, vcvtq_f64_f32((float32x2_t)*(&src.receiver + 2 * v168)))))))), 0);
          if ((unint64_t)v169 >= v451)
          {
            uint64_t v171 = ((uint64_t)v169 - *((void *)&v449 + 1)) >> 3;
            if ((unint64_t)(v171 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v172 = (uint64_t)(v451 - *((void *)&v449 + 1)) >> 2;
            if (v172 <= v171 + 1) {
              unint64_t v172 = v171 + 1;
            }
            if (v451 - *((void *)&v449 + 1) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v173 = v172;
            }
            if (v173) {
              unint64_t v173 = (unint64_t)sub_25B3FCAD4(v173);
            }
            else {
              uint64_t v174 = 0;
            }
            uint64_t v175 = (float32x2_t *)(v173 + 8 * v171);
            *uint64_t v175 = v170;
            uint64_t v169 = v175 + 1;
            int v177 = (float32x2_t *)*((void *)&v449 + 1);
            uint64_t v176 = v450;
            if (v450 != *((float32x2_t **)&v449 + 1))
            {
              do
              {
                float32x2_t v178 = v176[-1];
                --v176;
                v175[-1] = v178;
                --v175;
              }
              while (v176 != v177);
              uint64_t v176 = (float32x2_t *)*((void *)&v449 + 1);
            }
            *((void *)&v449 + 1) = v175;
            uint64_t v450 = v169;
            unint64_t v451 = v173 + 8 * v174;
            if (v176) {
              operator delete(v176);
            }
          }
          else
          {
            *v169++ = v170;
          }
          uint64_t v450 = v169;
          ++v168;
        }
        while (v168 != 4);
        uint64_t v179 = __src.i64[1];
        if (__src.i64[1] >= v457)
        {
          unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((__src.i64[1] - __src.i64[0]) >> 4);
          unint64_t v192 = v191 + 1;
          if (v191 + 1 > 0x555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v457 - __src.i64[0]) >> 4) > v192) {
            unint64_t v192 = 0x5555555555555556 * ((uint64_t)(v457 - __src.i64[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v457 - __src.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v193 = 0x555555555555555;
          }
          else {
            unint64_t v193 = v192;
          }
          float32x2_t v460 = &v457;
          if (v193)
          {
            if (v193 > 0x555555555555555) {
              sub_25B3FA70C();
            }
            int v194 = (char *)operator new(48 * v193);
          }
          else
          {
            int v194 = 0;
          }
          v458[0] = v194;
          v458[1] = &v194[48 * v191];
          v458[2] = v458[1];
          unint64_t v459 = &v194[48 * v193];
          sub_25B54C058((void *)v458[1], &v448);
          BOOL v195 = (char *)v458[1];
          uint64_t v180 = (char *)v458[2] + 48;
          v458[2] = (char *)v458[2] + 48;
          uint64_t v196 = __src.i64[1];
          uint64_t v197 = __src.i64[0];
          if (__src.i64[1] == __src.i64[0])
          {
            int64x2_t v199 = vdupq_n_s64(__src.u64[1]);
          }
          else
          {
            do
            {
              long long v198 = *(_OWORD *)(v196 - 48);
              *((void *)v195 - 4) = *(void *)(v196 - 32);
              *((_OWORD *)v195 - 3) = v198;
              *(void *)(v196 - 40) = 0;
              *(void *)(v196 - 32) = 0;
              *(void *)(v196 - 48) = 0;
              *((void *)v195 - 3) = 0;
              *((void *)v195 - 2) = 0;
              *((void *)v195 - 1) = 0;
              *(_OWORD *)(v195 - 24) = *(_OWORD *)(v196 - 24);
              *((void *)v195 - 1) = *(void *)(v196 - 8);
              v195 -= 48;
              *(void *)(v196 - 24) = 0;
              *(void *)(v196 - 16) = 0;
              *(void *)(v196 - 8) = 0;
              v196 -= 48;
            }
            while (v196 != v197);
            int64x2_t v199 = __src;
            uint64_t v180 = (char *)v458[2];
          }
          __src.i64[0] = (uint64_t)v195;
          __src.i64[1] = (uint64_t)v180;
          *(int64x2_t *)&v458[1] = v199;
          uint64_t v200 = (char *)v457;
          unint64_t v457 = (unint64_t)v459;
          unint64_t v459 = v200;
          v458[0] = (void *)v199.i64[0];
          sub_25B54C87C((uint64_t)v458);
        }
        else
        {
          sub_25B54C058((void *)__src.i64[1], &v448);
          uint64_t v180 = (char *)(v179 + 48);
        }
        __src.i64[1] = (uint64_t)v180;
        if (*((void *)&v449 + 1))
        {
          uint64_t v450 = (float32x2_t *)*((void *)&v449 + 1);
          operator delete(*((void **)&v449 + 1));
        }
        if (SBYTE7(v449) < 0) {
          operator delete((void *)v448);
        }
        goto LABEL_153;
      }
      objc_msgSend_boxesDict(v147, v153, v154);
      unsigned int v156 = (__CFString *)objc_claimAutoreleasedReturnValue();
      int32x2_t v184 = objc_msgSend_objectForKeyedSubscript_(v156, v181, @"raw_offline");
      if (!v184) {
        goto LABEL_153;
      }
      uint64_t v185 = objc_msgSend_type(v147, v182, v183);
      if ((objc_msgSend_isEqualToString_(v185, v186, @"Bed") & 1) == 0)
      {

LABEL_153:
        goto LABEL_154;
      }
      objc_msgSend_confidence(v147, v187, v188);
      BOOL v190 = v189 > 0.5;

      long long v155 = @"raw_offline";
      if (v190) {
        goto LABEL_107;
      }
LABEL_154:
      ++v146;
      unint64_t v141 = (unint64_t)v149;
    }
    while (v146 != v419);
    uint64_t v143 = objc_msgSend_countByEnumeratingWithState_objects_count_(v149, v144, (uint64_t)&__p, v462, 16);
  }
  while (v143);
LABEL_156:

  *(void *)&long long v449 = 0;
  long long v201 = 0uLL;
  long long v448 = 0u;
  uint64_t v202 = *((void *)&v435 + 1);
  uint64_t v203 = v435;
  if ((void)v435 != *((void *)&v435 + 1))
  {
    while (1)
    {
      int8x8_t v204 = *(int8x8_t *)(v411 + 400);
      if (!*(void *)&v204) {
        goto LABEL_174;
      }
      unint64_t v205 = *(unsigned int *)(v203 + 32);
      uint8x8_t v206 = (uint8x8_t)vcnt_s8(v204);
      v206.i16[0] = vaddlv_u8(v206);
      if (v206.u32[0] > 1uLL)
      {
        unint64_t v207 = *(unsigned int *)(v203 + 32);
        if (*(void *)&v204 <= v205) {
          unint64_t v207 = v205 % *(void *)&v204;
        }
      }
      else
      {
        unint64_t v207 = (v204.i32[0] - 1) & v205;
      }
      uint64_t v208 = *(void *)(v411 + 392);
      uint64_t v209 = *(uint64_t ***)(v208 + 8 * v207);
      if (!v209 || (int v210 = *v209) == 0)
      {
LABEL_174:
        uint64_t v213 = *((void *)&v448 + 1);
        if (*((void *)&v448 + 1) < (unint64_t)v449) {
          goto LABEL_175;
        }
        goto LABEL_176;
      }
      uint64_t v211 = *(void *)&v204 - 1;
      while (1)
      {
        unint64_t v212 = v210[1];
        if (v212 == v205) {
          break;
        }
        if (v206.u32[0] > 1uLL)
        {
          if (v212 >= *(void *)&v204) {
            v212 %= *(void *)&v204;
          }
        }
        else
        {
          v212 &= v211;
        }
        if (v212 != v207) {
          goto LABEL_174;
        }
LABEL_173:
        int v210 = (uint64_t *)*v210;
        if (!v210) {
          goto LABEL_174;
        }
      }
      if (*((_DWORD *)v210 + 4) != v205) {
        goto LABEL_173;
      }
      if (v206.u32[0] > 1uLL)
      {
        unint64_t v215 = *(unsigned int *)(v203 + 32);
        if (*(void *)&v204 <= v205) {
          unint64_t v215 = v205 % *(void *)&v204;
        }
      }
      else
      {
        unint64_t v215 = (v204.i32[0] - 1) & v205;
      }
      float v216 = *(uint64_t ***)(v208 + 8 * v215);
      if (!v216 || (float v217 = *v216) == 0) {
LABEL_524:
      }
        sub_25B3FC090("unordered_map::at: key not found");
      while (2)
      {
        unint64_t v218 = v217[1];
        if (v218 != v205)
        {
          if (v206.u32[0] > 1uLL)
          {
            if (v218 >= *(void *)&v204) {
              v218 %= *(void *)&v204;
            }
          }
          else
          {
            v218 &= v211;
          }
          if (v218 != v215) {
            goto LABEL_524;
          }
LABEL_194:
          float v217 = (uint64_t *)*v217;
          if (!v217) {
            goto LABEL_524;
          }
          continue;
        }
        break;
      }
      if (*((_DWORD *)v217 + 4) != v205) {
        goto LABEL_194;
      }
      if (*(float *)(v203 + 28) <= *((float *)v217 + 13))
      {
        objc_super src = (objc_super)0;
        long long v440 = 0u;
        LODWORD(v441) = 1065353216;
        unint64_t v219 = (char *)v217[3];
        unint64_t v220 = (char *)v217[4];
        while (v219 != v220)
        {
          v458[0] = v219;
          *((void *)sub_25B46932C((uint64_t)&src, (unsigned __int8 *)v219, (long long **)v458) + 5) = 0;
          v219 += 24;
        }
        uint64_t v222 = (unsigned __int8 **)__src.i64[1];
        for (iuint64_t i = (unsigned __int8 **)__src.i64[0]; ii != v222; ii += 6)
        {
          unint64_t v141 = v217[3];
          unint64_t v223 = v217[4];
          if (v141 != v223)
          {
            char v224 = *((unsigned char *)ii + 23);
            if (v224 >= 0) {
              unint64_t v225 = (unsigned __int8 *)*((unsigned __int8 *)ii + 23);
            }
            else {
              unint64_t v225 = ii[1];
            }
            if (v224 >= 0) {
              uint64_t v226 = (unsigned __int8 *)ii;
            }
            else {
              uint64_t v226 = *ii;
            }
            do
            {
              uint64_t v227 = *(unsigned __int8 *)(v141 + 23);
              if ((v227 & 0x80u) == 0) {
                uint64_t v228 = (unsigned __int8 *)*(unsigned __int8 *)(v141 + 23);
              }
              else {
                uint64_t v228 = *(unsigned __int8 **)(v141 + 8);
              }
              if (v228 == v225)
              {
                if ((v227 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v141, v226, *(void *)(v141 + 8))) {
                    goto LABEL_224;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v141 + 23)) {
                    goto LABEL_224;
                  }
                  uint64_t v229 = 0;
                  while (*(unsigned __int8 *)(v141 + v229) == v226[v229])
                  {
                    if (v227 == ++v229) {
                      goto LABEL_224;
                    }
                  }
                }
              }
              v141 += 24;
            }
            while (v141 != v223);
            unint64_t v141 = v223;
          }
LABEL_224:
          if (v141 != v223)
          {
            float v230 = *(float32x2_t **)v203;
            unint64_t v231 = *(float32x2_t **)(v203 + 8);
            float32x2_t v232 = (float32x2_t)0x80000000800000;
            float32x2_t v233 = (float32x2_t)0x80000000800000;
            if (*(float32x2_t **)v203 != v231)
            {
              do
              {
                float32x2_t v234 = *v230++;
                float32x2_t v233 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v234, v233), (int8x8_t)v234, (int8x8_t)v233);
              }
              while (v230 != v231);
              float32x2_t v233 = vadd_f32(v233, (float32x2_t)0x3F0000003F000000);
            }
            unint64_t v235 = (float32x2_t *)ii[3];
            long long v236 = (float32x2_t *)ii[4];
            if (v235 != v236)
            {
              float32x2_t v237 = (float32x2_t)0x80000000800000;
              do
              {
                float32x2_t v238 = *v235++;
                float32x2_t v237 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v238, v237), (int8x8_t)v238, (int8x8_t)v237);
              }
              while (v235 != v236);
              float32x2_t v232 = vadd_f32(v237, (float32x2_t)0x3F0000003F000000);
            }
            float32x2_t v239 = vrndp_f32(v233);
            if (v239.f32[0] < v239.f32[1]) {
              v239.f32[0] = v239.f32[1];
            }
            float32x2_t v240 = vrndp_f32(v232);
            if (v240.f32[0] < v240.f32[1]) {
              v240.f32[0] = v240.f32[1];
            }
            if ((unint64_t)v239.f32[0] <= (unint64_t)v240.f32[0]) {
              unint64_t v241 = (unint64_t)v240.f32[0];
            }
            else {
              unint64_t v241 = (unint64_t)v239.f32[0];
            }
            sub_25B57B58C((unint64_t *)v458, (float32x2_t **)v203, (float32x2_t **)ii + 3, v241);
            if (v458[0] >= (void *)0x1A)
            {
              uint64_t v461 = ii;
              long long v242 = sub_25B46932C((uint64_t)&src, (unsigned __int8 *)ii, (long long **)&v461);
              ++*((void *)v242 + 5);
            }
          }
        }
        int v243 = (void *)v440;
        if ((void)v440)
        {
          uint64_t v244 = 0;
          do
          {
            if (v243[5]) {
              ++v244;
            }
            int v243 = (void *)*v243;
          }
          while (v243);
        }
        else
        {
          uint64_t v244 = 0;
        }
        if (*(_DWORD *)(v203 + 32) == 2)
        {
          sub_25B403500(v458, "Chair");
          unint64_t v245 = sub_25B403AF4((uint64_t)v458);
          unint64_t v246 = v245;
          unint64_t super_class = (unint64_t)src.super_class;
          if (src.super_class)
          {
            uint8x8_t v248 = (uint8x8_t)vcnt_s8((int8x8_t)src.super_class);
            v248.i16[0] = vaddlv_u8(v248);
            unint64_t v249 = v248.u32[0];
            if (v248.u32[0] > 1uLL)
            {
              unint64_t v141 = v245;
              if ((Class)v245 >= src.super_class) {
                unint64_t v141 = v245 % (unint64_t)src.super_class;
              }
            }
            else
            {
              unint64_t v141 = ((unint64_t)src.super_class - 1) & v245;
            }
            unint64_t v253 = (void **)*((void *)src.receiver + v141);
            if (v253)
            {
              for (jint j = *v253; jj; jint j = *(void **)jj)
              {
                unint64_t v255 = *((void *)jj + 1);
                if (v255 == v246)
                {
                  if (sub_25B403F44((unsigned __int8 *)jj + 16, (unsigned __int8 *)v458)) {
                    goto LABEL_299;
                  }
                }
                else
                {
                  if (v249 > 1)
                  {
                    if (v255 >= super_class) {
                      v255 %= super_class;
                    }
                  }
                  else
                  {
                    v255 &= super_class - 1;
                  }
                  if (v255 != v141) {
                    break;
                  }
                }
              }
            }
          }
          jint j = operator new(0x30uLL);
          *(void *)jint j = 0;
          *((void *)jj + 1) = v246;
          *((_OWORD *)jj + 1) = *(_OWORD *)v458;
          uint64_t v256 = v458[2];
          memset(v458, 0, sizeof(v458));
          *((void *)jj + 4) = v256;
          *((void *)jj + 5) = 0;
          float v257 = (float)(unint64_t)(*((void *)&v440 + 1) + 1);
          if (!super_class || (float)(*(float *)&v441 * (float)super_class) < v257)
          {
            BOOL v258 = (super_class & (super_class - 1)) != 0;
            if (super_class < 3) {
              BOOL v258 = 1;
            }
            unint64_t v259 = v258 | (2 * super_class);
            unint64_t v260 = vcvtps_u32_f32(v257 / *(float *)&v441);
            if (v259 <= v260) {
              size_t v261 = v260;
            }
            else {
              size_t v261 = v259;
            }
            sub_25B3FA4B0((uint64_t)&src, v261);
            unint64_t super_class = (unint64_t)src.super_class;
            if (((uint64_t)src.super_class & ((uint64_t)src.super_class - 1)) != 0)
            {
              if ((Class)v246 >= src.super_class) {
                unint64_t v141 = v246 % (unint64_t)src.super_class;
              }
              else {
                unint64_t v141 = v246;
              }
            }
            else
            {
              unint64_t v141 = ((unint64_t)src.super_class - 1) & v246;
            }
          }
          receiver = src.receiver;
          int v263 = (void *)*((void *)src.receiver + v141);
          if (v263)
          {
            *(void *)jint j = *v263;
            goto LABEL_297;
          }
          *(void *)jint j = v440;
          *(void *)&long long v440 = jj;
          receiver[v141] = &v440;
          if (*(void *)jj)
          {
            unint64_t v264 = *(void *)(*(void *)jj + 8);
            if ((super_class & (super_class - 1)) != 0)
            {
              if (v264 >= super_class) {
                v264 %= super_class;
              }
            }
            else
            {
              v264 &= super_class - 1;
            }
            int v263 = (char *)src.receiver + 8 * v264;
LABEL_297:
            *int v263 = jj;
          }
          ++*((void *)&v440 + 1);
LABEL_299:
          unint64_t v265 = *((void *)jj + 5);
          if (SHIBYTE(v458[2]) < 0) {
            operator delete(v458[0]);
          }
          float v266 = *(float *)(v203 + 28);
          BOOL v267 = v266 > 0.8;
          if (v244 != *((void *)&v440 + 1)) {
            BOOL v267 = 0;
          }
          if (v265 > 3) {
            BOOL v267 = 1;
          }
          BOOL v268 = v266 <= 0.8 && v244 == *((void *)&v440 + 1) && v265 > 3;
          if (v267 || v268)
          {
LABEL_314:
            uint64_t v270 = *((void *)&v448 + 1);
            if (*((void *)&v448 + 1) >= (unint64_t)v449)
            {
              uint64_t v271 = sub_25B460770((uint64_t *)&v448, v203);
            }
            else
            {
              sub_25B460700((uint64_t)&v448, v203);
              uint64_t v271 = v270 + 40;
            }
            *((void *)&v448 + 1) = v271;
          }
        }
        else
        {
          int v250 = *((_DWORD *)v217 + 12);
          if (v250) {
            _ZF = 1;
          }
          else {
            _ZF = v244 == 0;
          }
          if (!_ZF) {
            goto LABEL_314;
          }
          if (v250 == 1 && v244 == *((void *)&v440 + 1)) {
            goto LABEL_314;
          }
        }
        sub_25B414644((uint64_t)&src);
        goto LABEL_178;
      }
      uint64_t v213 = *((void *)&v448 + 1);
      if (*((void *)&v448 + 1) < (unint64_t)v449)
      {
LABEL_175:
        sub_25B460700((uint64_t)&v448, v203);
        uint64_t v214 = v213 + 40;
        goto LABEL_177;
      }
LABEL_176:
      uint64_t v214 = sub_25B460770((uint64_t *)&v448, v203);
LABEL_177:
      *((void *)&v448 + 1) = v214;
LABEL_178:
      v203 += 40;
      if (v203 == v202)
      {
        long long v272 = v435;
        long long v201 = v448;
        uint64_t v273 = (void *)v449;
        goto LABEL_320;
      }
    }
  }
  uint64_t v273 = 0;
  long long v272 = (__int128)vdupq_n_s64(v435);
LABEL_320:
  long long v435 = v201;
  long long v448 = v272;
  int v274 = v436;
  int v436 = v273;
  *(void *)&long long v449 = v274;
  src.receiver = &v448;
  sub_25B4608A0((void ***)&src);
  src.receiver = &__src;
  sub_25B54C0E0((void ***)&src);
LABEL_321:
  unint64_t v275 = objc_msgSend_floors(v408, v138, v139);
  BOOL v278 = objc_msgSend_count(v275, v276, v277) == 0;

  if (!v278)
  {
    uint64_t v281 = objc_msgSend_floors(v408, v279, v280);
    uint64_t v283 = objc_msgSend_objectAtIndexedSubscript_(v281, v282, 0);

    if ((unint64_t)objc_msgSend_polygonSize(v283, v284, v285) < 4)
    {
      int64_t v288 = 0;
      unint64_t v302 = 0;
      unint64_t v303 = 0;
      for (kint k = 0; kk != 4; ++kk)
      {
        objc_msgSend_quad(v283, v286, v287);
        LODWORD(src.super_class) = v305;
        DWORD2(v440) = v306;
        src.receiver = v307;
        *(void *)&long long v440 = v308;
        DWORD2(v441) = v309;
        DWORD2(v442) = v310;
        *(void *)&long long v441 = v311;
        *(void *)&long long v442 = v312;
        if ((unint64_t)v302 >= v303)
        {
          uint64_t v313 = v302 - v288;
          unint64_t v314 = v313 + 1;
          if ((unint64_t)(v313 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v303 - (void)v288) >> 3 > v314) {
            unint64_t v314 = (uint64_t)(v303 - (void)v288) >> 3;
          }
          if (v303 - (unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v315 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v315 = v314;
          }
          if (v315) {
            unint64_t v315 = (unint64_t)sub_25B3FFAEC(v315);
          }
          else {
            uint64_t v286 = 0;
          }
          unint64_t v316 = (objc_super *)(v315 + 16 * v313);
          *unint64_t v316 = *(&src + kk);
          char v289 = v316 + 1;
          while (v302 != v288)
          {
            objc_super v317 = v302[-1];
            --v302;
            v316[-1] = v317;
            --v316;
          }
          unint64_t v303 = v315 + 16 * (void)v286;
          if (v288) {
            operator delete(v288);
          }
          int64_t v288 = v316;
        }
        else
        {
          *unint64_t v302 = *(&src + kk);
          char v289 = v302 + 1;
        }
        unint64_t v302 = v289;
      }
    }
    else
    {
      int64_t v288 = 0;
      char v289 = 0;
      unint64_t v290 = 0;
      for (muint64_t m = 0; mm < objc_msgSend_polygonSize(v283, v286, v287); ++mm)
      {
        uint64_t v294 = objc_msgSend_polygon(v283, v292, v293);
        uint64_t v295 = v294;
        if ((unint64_t)v289 >= v290)
        {
          uint64_t v297 = v289 - v288;
          unint64_t v298 = v297 + 1;
          if ((unint64_t)(v297 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v290 - (void)v288) >> 3 > v298) {
            unint64_t v298 = (uint64_t)(v290 - (void)v288) >> 3;
          }
          if (v290 - (unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v299 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v299 = v298;
          }
          if (v299) {
            unint64_t v299 = (unint64_t)sub_25B3FFAEC(v299);
          }
          else {
            uint64_t v286 = 0;
          }
          int v300 = (objc_super *)(v299 + 16 * v297);
          *int v300 = *(objc_super *)(v295 + 16 * mm);
          uint64_t v296 = v300 + 1;
          while (v289 != v288)
          {
            objc_super v301 = v289[-1];
            --v289;
            v300[-1] = v301;
            --v300;
          }
          unint64_t v290 = v299 + 16 * (void)v286;
          if (v288) {
            operator delete(v288);
          }
          int64_t v288 = v300;
        }
        else
        {
          objc_super *v289 = *(objc_super *)(v294 + 16 * mm);
          uint64_t v296 = v289 + 1;
        }
        char v289 = v296;
      }
    }
    __objc_super src = 0uLL;
    unint64_t v457 = 0;
    if (v288 == v289)
    {
      uint64_t v321 = 0;
    }
    else
    {
      uint64_t v318 = 0;
      long long v319 = (float32x2_t *)v288;
      do
      {
        float32x2_t v320 = vmaxnm_f32(vcvt_f32_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v424, vaddq_f64(v428, vcvtq_f64_f32(*v319))))))), 0);
        if ((unint64_t)v318 >= v457)
        {
          uint64_t v322 = (void *)__src.i64[0];
          uint64_t v323 = ((uint64_t)v318 - __src.i64[0]) >> 3;
          unint64_t v324 = v323 + 1;
          if ((unint64_t)(v323 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v325 = v457 - __src.i64[0];
          if ((uint64_t)(v457 - __src.i64[0]) >> 2 > v324) {
            unint64_t v324 = v325 >> 2;
          }
          if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v326 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v326 = v324;
          }
          if (v326) {
            unint64_t v326 = (unint64_t)sub_25B3FCAD4(v326);
          }
          else {
            uint64_t v327 = 0;
          }
          unint64_t v328 = (float32x2_t *)(v326 + 8 * v323);
          float32x2_t *v328 = v320;
          uint64_t v321 = (uint64_t)&v328[1];
          if (v318 != v322)
          {
            do
            {
              float32x2_t v329 = (float32x2_t)*--v318;
              v328[-1] = v329;
              --v328;
            }
            while (v318 != v322);
            uint64_t v318 = (void *)__src.i64[0];
          }
          __src.i64[0] = (uint64_t)v328;
          __src.i64[1] = v321;
          unint64_t v457 = v326 + 8 * v327;
          if (v318) {
            operator delete(v318);
          }
        }
        else
        {
          void *v318 = v320;
          uint64_t v321 = (uint64_t)(v318 + 1);
        }
        __src.i64[1] = v321;
        v319 += 2;
        uint64_t v318 = (void *)v321;
      }
      while (v319 != (float32x2_t *)v289);
    }
    memset(v458, 0, sizeof(v458));
    if ((void)v435 != *((void *)&v435 + 1)) {
      sub_25B57FAAC(&src, (float32x2_t **)v435, (float32x2_t **)&__src);
    }
    long long v448 = 0u;
    long long v449 = 0u;
    LODWORD(v450) = 6;
    HIDWORD(v449) = 1065353216;
    sub_25B469194((char *)&v448, (char *)__src.i64[0], v321, (v321 - __src.i64[0]) >> 3);
    int v330 = (void *)__src.i64[0];
    if (__src.i64[1] != __src.i64[0])
    {
      int v331 = (char *)*((void *)&v448 + 1);
      if (*((void *)&v448 + 1) >= (unint64_t)v449)
      {
        uint64_t v333 = (char *)v448;
        uint64_t v334 = (uint64_t)(*((void *)&v448 + 1) - v448) >> 3;
        unint64_t v335 = v334 + 1;
        if ((unint64_t)(v334 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v336 = v449 - v448;
        if ((uint64_t)(v449 - v448) >> 2 > v335) {
          unint64_t v335 = v336 >> 2;
        }
        if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v337 = v335;
        }
        if (v337) {
          unint64_t v337 = (unint64_t)sub_25B3FCAD4(v337);
        }
        else {
          uint64_t v338 = 0;
        }
        uint64_t v339 = (void *)(v337 + 8 * v334);
        *uint64_t v339 = *v330;
        unint64_t v332 = v339 + 1;
        if (v331 != v333)
        {
          do
          {
            uint64_t v340 = *((void *)v331 - 1);
            v331 -= 8;
            *--uint64_t v339 = v340;
          }
          while (v331 != v333);
          int v331 = (char *)v448;
        }
        *(void *)&long long v448 = v339;
        *(void *)&long long v449 = v337 + 8 * v338;
        if (v331) {
          operator delete(v331);
        }
      }
      else
      {
        **((void **)&v448 + 1) = *(void *)__src.i64[0];
        unint64_t v332 = v331 + 8;
      }
      *((void *)&v448 + 1) = v332;
    }
    *((float *)&v449 + 2) = (float)(unint64_t)sub_25B57B474((float32x2_t **)&__src);
    unint64_t v341 = v458[1];
    if (v458[1] >= v458[2])
    {
      unint64_t v343 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v458[1] - (char *)v458[0]) >> 3);
      unint64_t v344 = v343 + 1;
      if (v343 + 1 > 0x666666666666666) {
        sub_25B3FBC4C();
      }
      if (0x999999999999999ALL * (((char *)v458[2] - (char *)v458[0]) >> 3) > v344) {
        unint64_t v344 = 0x999999999999999ALL * (((char *)v458[2] - (char *)v458[0]) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * (((char *)v458[2] - (char *)v458[0]) >> 3) >= 0x333333333333333) {
        unint64_t v345 = 0x666666666666666;
      }
      else {
        unint64_t v345 = v344;
      }
      *(void *)&long long v441 = &v458[2];
      if (v345) {
        unint64_t v345 = (unint64_t)sub_25B460930(v345);
      }
      else {
        uint64_t v346 = 0;
      }
      unint64_t v347 = v345 + 40 * v343;
      src.receiver = (id)v345;
      src.unint64_t super_class = (Class)v347;
      *((void *)&v440 + 1) = v345 + 40 * v346;
      *(_OWORD *)unint64_t v347 = v448;
      *(void *)(v347 + 16) = v449;
      long long v448 = 0uLL;
      *(void *)&long long v449 = 0;
      *(void *)(v347 + 24) = *((void *)&v449 + 1);
      *(_DWORD *)(v347 + 32) = v450;
      *(void *)&long long v440 = v347 + 40;
      sub_25B460978((uint64_t *)v458, &src);
      uint64_t v342 = v458[1];
      sub_25B4609F8((uint64_t)&src);
    }
    else
    {
      *(_OWORD *)v458[1] = v448;
      v341[2] = v449;
      *(void *)&long long v449 = 0;
      long long v448 = 0uLL;
      v341[3] = *((void *)&v449 + 1);
      *((_DWORD *)v341 + 8) = v450;
      uint64_t v342 = v341 + 5;
    }
    unint64_t v348 = v458[0];
    *(_OWORD *)uint64_t v458 = v435;
    *(void *)&long long v435 = v348;
    *((void *)&v435 + 1) = v342;
    uint64_t v349 = v436;
    int v436 = v458[2];
    v458[2] = v349;
    src.receiver = v458;
    sub_25B4608A0((void ***)&src);
    if (__src.i64[0]) {
      operator delete((void *)__src.i64[0]);
    }

    if (v288) {
      operator delete(v288);
    }
  }
  uint64_t v420 = *((void *)&v435 + 1);
  uint64_t v350 = v435;
  if ((void)v435 == *((void *)&v435 + 1)) {
    goto LABEL_515;
  }
  do
  {
    int v351 = *(float32x2_t **)v350;
    uint64_t v352 = *(float32x2_t **)(v350 + 8);
    if (*(float32x2_t **)v350 == v352)
    {
      uint64_t v354 = 0;
      unint64_t v355 = 0;
      uint64_t v353 = 0;
    }
    else
    {
      uint64_t v353 = 0;
      uint64_t v354 = 0;
      unint64_t v355 = 0;
      do
      {
        float32x2_t v356 = vcvt_f32_f64(vsubq_f64(vdivq_f64(vcvtq_f64_f32(*v351), v424), v428));
        if ((unint64_t)v354 >= v355)
        {
          uint64_t v357 = v354 - v353;
          unint64_t v358 = v357 + 1;
          if ((unint64_t)(v357 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v355 - (void)v353) >> 2 > v358) {
            unint64_t v358 = (uint64_t)(v355 - (void)v353) >> 2;
          }
          if (v355 - (unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v359 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v359 = v358;
          }
          if (v359) {
            unint64_t v359 = (unint64_t)sub_25B3FCAD4(v359);
          }
          else {
            uint64_t v360 = 0;
          }
          float v361 = (float32x2_t *)(v359 + 8 * v357);
          *float v361 = v356;
          uint64_t v362 = v361 + 1;
          while (v354 != v353)
          {
            float32x2_t v363 = v354[-1];
            --v354;
            v361[-1] = v363;
            --v361;
          }
          unint64_t v355 = v359 + 8 * v360;
          if (v353) {
            operator delete(v353);
          }
          uint64_t v353 = v361;
          uint64_t v354 = v362;
        }
        else
        {
          *v354++ = v356;
        }
        ++v351;
      }
      while (v351 != v352);
      int v351 = *(float32x2_t **)v350;
    }
    *(void *)uint64_t v350 = v353;
    *(void *)(v350 + 8) = v354;
    *(void *)(v350 + 16) = v355;
    float v364 = *(float *)(v350 + 24) / *(double *)v410.i64;
    *(float *)(v350 + 24) = v364;
    if (v351) {
      operator delete(v351);
    }
    v350 += 40;
  }
  while (v350 != v420);
  uint64_t v366 = *((void *)&v435 + 1);
  uint64_t v365 = v435;
  if ((void)v435 == *((void *)&v435 + 1)) {
    goto LABEL_515;
  }
  while (2)
  {
    uint64_t v367 = [RSRoomTypePolygon alloc];
    if (v367)
    {
      unint64_t v372 = sub_25B5483C0(v367, (uint64_t)(*(void *)(v365 + 8) - *(void *)v365) >> 3, *(const void **)v365);
      uint64_t v373 = v372;
      if (v372) {
        *((_DWORD *)v372 + 8) = 1;
      }
    }
    else
    {
      uint64_t v373 = 0;
    }
    sub_25B4CF17C((float32x2_t **)&v448, (float32x2_t *)(v411 + 8), (float32x2_t **)v365, (uint64_t)(*(void *)(v365 + 8) - *(void *)v365) >> 3, v368, v369, v370, v371);
    float32x2_t v374 = (void *)v448;
    if (*((void *)&v448 + 1) - (void)v448 != 32) {
      goto LABEL_488;
    }
    uint64_t v375 = *(void **)v448;
    unint64_t v376 = *(objc_class **)(v448 + 8);
    uint64_t v377 = *(void *)(v448 + 16);
    uint64_t v378 = *(void *)(v448 + 24);
    sub_25B57BC60(*(float32x2_t **)v365, *(float32x2_t **)(v365 + 8));
    uint64_t v381 = v380;
    float32x2_t v382 = NSString;
    unint64_t v383 = *(unsigned int *)(v365 + 32);
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_26A502348, memory_order_acquire) != -1)
    {
      v458[0] = &v461;
      __src.i64[0] = (uint64_t)v458;
      std::__call_once(&qword_26A502348, &__src, (void (__cdecl *)(void *))sub_25B54C1A8);
    }
    if (!qword_26A502340) {
      goto LABEL_470;
    }
    int8x8_t v384 = *(int8x8_t *)(qword_26A502340 + 8);
    if (!*(void *)&v384) {
      goto LABEL_470;
    }
    uint8x8_t v385 = (uint8x8_t)vcnt_s8(v384);
    v385.i16[0] = vaddlv_u8(v385);
    if (v385.u32[0] > 1uLL)
    {
      unint64_t v386 = v383;
      if (*(void *)&v384 <= v383) {
        unint64_t v386 = v383 % *(void *)&v384;
      }
    }
    else
    {
      unint64_t v386 = (v384.i32[0] - 1) & v383;
    }
    int32x2_t v387 = *(uint64_t ***)(*(void *)qword_26A502340 + 8 * v386);
    if (!v387 || (uint64_t v388 = *v387) == 0)
    {
LABEL_470:
      sub_25B403500(&src, "Others");
      goto LABEL_471;
    }
    uint64_t v389 = *(void *)&v384 - 1;
    while (2)
    {
      unint64_t v390 = v388[1];
      if (v390 != v383)
      {
        if (v385.u32[0] > 1uLL)
        {
          if (v390 >= *(void *)&v384) {
            v390 %= *(void *)&v384;
          }
        }
        else
        {
          v390 &= v389;
        }
        if (v390 != v386) {
          goto LABEL_470;
        }
        goto LABEL_469;
      }
      if (*((_DWORD *)v388 + 4) != v383)
      {
LABEL_469:
        uint64_t v388 = (uint64_t *)*v388;
        if (!v388) {
          goto LABEL_470;
        }
        continue;
      }
      break;
    }
    if (v385.u32[0] > 1uLL)
    {
      unint64_t v399 = v383;
      if (*(void *)&v384 <= v383) {
        unint64_t v399 = v383 % *(void *)&v384;
      }
    }
    else
    {
      unint64_t v399 = (v384.i32[0] - 1) & v383;
    }
    float v400 = *(uint64_t **)(*(void *)qword_26A502340 + 8 * v399);
    if (!v400) {
LABEL_525:
    }
      sub_25B3FC090("unordered_map::at: key not found");
    do
    {
      while (1)
      {
        float v400 = (uint64_t *)*v400;
        if (!v400) {
          goto LABEL_525;
        }
        unint64_t v401 = v400[1];
        if (v401 == v383) {
          break;
        }
        if (v385.u32[0] > 1uLL)
        {
          if (v401 >= *(void *)&v384) {
            v401 %= *(void *)&v384;
          }
        }
        else
        {
          v401 &= v389;
        }
        if (v401 != v399) {
          goto LABEL_525;
        }
      }
    }
    while (*((_DWORD *)v400 + 4) != v383);
    if (*((char *)v400 + 47) < 0)
    {
      sub_25B4002F4(&src, (void *)v400[3], v400[4]);
    }
    else
    {
      objc_super src = *(objc_super *)(v400 + 3);
      *(void *)&long long v440 = v400[5];
    }
LABEL_471:
    if ((SBYTE7(v440) & 0x80u) == 0) {
      objc_msgSend_stringWithUTF8String_(v382, v379, (uint64_t)&src);
    }
    else {
    unint64_t v391 = objc_msgSend_stringWithUTF8String_(v382, v379, (uint64_t)src.receiver);
    }
    if (SBYTE7(v440) < 0) {
      operator delete(src.receiver);
    }
    uint64_t v392 = [RSRoomType alloc];
    float v393 = *(float *)(v365 + 28);
    id v394 = v391;
    unint64_t v395 = v373;
    if (v392)
    {
      src.receiver = v392;
      src.unint64_t super_class = (Class)RSRoomType;
      int32x2_t v396 = (RSRoomType *)objc_msgSendSuper2(&src, sel_init);
      uint64_t v392 = v396;
      if (v396)
      {
        v396->_confidenceScore = v393;
        v396->_insideRoouint64_t m = 1;
        objc_storeStrong((id *)&v396->_label, v391);
        objc_storeStrong((id *)&v392->_polygon, v373);
        *(void *)v392->_polygonCenter = v381;
      }
    }

    src.receiver = v375;
    src.unint64_t super_class = v376;
    *(void *)&long long v440 = v377;
    *((void *)&v440 + 1) = v378;
    if (v392) {
      objc_copyStruct(&v392[1], &src, 32, 1, 0);
    }
    if (v408)
    {
      LODWORD(v398) = v408[4];
      if (v392) {
        goto LABEL_483;
      }
    }
    else
    {
      double v398 = 0.0;
      if (v392) {
LABEL_483:
      }
        v392->_floorsize_t Height = *(float *)&v398;
    }
    if (v408)
    {
      LODWORD(v398) = v408[3];
      if (v392) {
        goto LABEL_486;
      }
    }
    else
    {
      double v398 = 0.0;
      if (v392) {
LABEL_486:
      }
        v392->_ceilingsize_t Height = *(float *)&v398;
    }
    objc_msgSend_addObject_(v406, v397, (uint64_t)v392, v398);

    float32x2_t v374 = (void *)v448;
LABEL_488:
    if (v374) {
      operator delete(v374);
    }

    v365 += 40;
    if (v365 != v366) {
      continue;
    }
    break;
  }
LABEL_515:

  kdebug_trace();
  v462[0] = (void **)&v435;
  sub_25B4608A0(v462);
LABEL_516:
  sub_25B400F2C((uint64_t)&v437);
LABEL_517:

  return v406;
}

void sub_25B54EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_objecta,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  sub_25B403FE8(1, v61);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  sub_25B414644((uint64_t)&a43);
  a43 = &a61;
  sub_25B4608A0((void ***)&a43);
  a43 = &STACK[0x210];
  sub_25B54C0E0((void ***)&a43);

  a61 = &a37;
  sub_25B4608A0((void ***)&a61);
  sub_25B400F2C((uint64_t)&a41);

  _Unwind_Resume(a1);
}

void sub_25B54EE18(uint64_t a1, double a2, float64x2_t a3)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    sub_25B400DC4(*(void *)(a1 + 432), a2, a3);
    uint64_t v4 = *(void *)(a1 + 24);
    sub_25B4FDD60(v4);
  }
}

void sub_25B54EE68(unint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  uint64_t v9 = (void *)MEMORY[0x261164650]();
  uint64_t v163 = a3;
  if (a3[1])
  {
    unint64_t v10 = a4[1];
    if (v10 && *(void *)(a5 + 8) != 0)
    {
      if (v10 >> 59) {
        sub_25B3FBC4C();
      }
      uint64_t v12 = (int32x4_t *)sub_25B3FBC9C(v10);
      uint64_t v14 = v13;
      uint64_t v158 = a4;
      unint64_t v15 = a4[1];
      *(_OWORD *)&v164[0].__locale_ = 0u;
      *(_OWORD *)uint64_t v165 = 0u;
      LODWORD(v166) = 1065353216;
      sub_25B3FA4B0((uint64_t)v164, (unint64_t)(float)v15);
      uint64_t v16 = v163[1];
      if (v16)
      {
        uint64_t v17 = 0;
        float32x4_t v155 = (float32x4_t)vdupq_n_s32(0x3CF5C28Fu);
        uint64_t v18 = v12;
        unint64_t v19 = &v12[2 * v14];
        uint64_t v20 = v163;
        while (1)
        {
          float32x4_t v21 = vdivq_f32(*(float32x4_t *)(*v20 + 16 * v17), v155);
          v21.i32[3] = 0;
          int32x4_t v160 = vcvtq_s32_f32(vrndaq_f32(v21));
          unint64_t v22 = (v160.i32[1]
               + 2654435769
               + ((v160.i32[0] + 2654435769) << 6)
               + ((unint64_t)(v160.i32[0] + 2654435769) >> 2)) ^ (v160.i32[0] + 2654435769);
          unint64_t v23 = (v160.i32[2] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
          unint64_t locale = (unint64_t)v164[1].__locale_;
          if (v164[1].__locale_)
          {
            uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v164[1].__locale_);
            v25.i16[0] = vaddlv_u8(v25);
            unint64_t v26 = v25.u32[0];
            if (v25.u32[0] > 1uLL)
            {
              a1 = (v160.i32[2] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
              if ((std::locale::__imp *)v23 >= v164[1].__locale_) {
                a1 = v23 % (unint64_t)v164[1].__locale_;
              }
            }
            else
            {
              a1 = v23 & ((unint64_t)v164[1].__locale_ - 1);
            }
            id v27 = (int32x4_t **)*((void *)v164[0].__locale_ + a1);
            if (v27)
            {
              for (uint64_t i = *v27; i; uint64_t i = (int32x4_t *)i->i64[0])
              {
                unint64_t v29 = i->u64[1];
                if (v29 == v23)
                {
                  uint32x4_t v30 = (uint32x4_t)vceqq_s32(i[1], v160);
                  v30.i32[3] = v30.i32[2];
                  if ((vminvq_u32(v30) & 0x80000000) != 0) {
                    goto LABEL_64;
                  }
                }
                else
                {
                  if (v26 > 1)
                  {
                    if ((std::locale::__imp *)v29 >= v164[1].__locale_) {
                      v29 %= (unint64_t)v164[1].__locale_;
                    }
                  }
                  else
                  {
                    v29 &= (unint64_t)v164[1].__locale_ - 1;
                  }
                  if (v29 != a1) {
                    break;
                  }
                }
              }
            }
          }
          float v31 = (int32x4_t *)operator new(0x20uLL);
          v31->i64[0] = 0;
          v31->i64[1] = v23;
          v31[1] = v160;
          float v32 = (float)((unint64_t)v165[1] + 1);
          if (!locale || (float)(*(float *)&v166 * (float)locale) < v32)
          {
            BOOL v33 = (locale & (locale - 1)) != 0;
            if (locale < 3) {
              BOOL v33 = 1;
            }
            unint64_t v34 = v33 | (2 * locale);
            unint64_t v35 = vcvtps_u32_f32(v32 / *(float *)&v166);
            if (v34 <= v35) {
              size_t v36 = v35;
            }
            else {
              size_t v36 = v34;
            }
            sub_25B3FA4B0((uint64_t)v164, v36);
            unint64_t locale = (unint64_t)v164[1].__locale_;
            if (((uint64_t)v164[1].__locale_ & ((uint64_t)v164[1].__locale_ - 1)) != 0)
            {
              if ((std::locale::__imp *)v23 >= v164[1].__locale_) {
                a1 = v23 % (unint64_t)v164[1].__locale_;
              }
              else {
                a1 = v23;
              }
            }
            else
            {
              a1 = ((unint64_t)v164[1].__locale_ - 1) & v23;
            }
          }
          uint64_t v37 = v164[0].__locale_;
          float v38 = (int32x4_t **)*((void *)v164[0].__locale_ + a1);
          if (v38) {
            break;
          }
          v31->i64[0] = (uint64_t)v165[0];
          v165[0] = v31;
          *((void *)v37 + a1) = v165;
          if (v31->i64[0])
          {
            unint64_t v39 = *(void *)(v31->i64[0] + 8);
            if ((locale & (locale - 1)) != 0)
            {
              if (v39 >= locale) {
                v39 %= locale;
              }
            }
            else
            {
              v39 &= locale - 1;
            }
            float v38 = (int32x4_t **)((char *)v164[0].__locale_ + 8 * v39);
            goto LABEL_47;
          }
LABEL_48:
          ++v165[1];
          if (v18 >= v19)
          {
            uint64_t v40 = ((char *)v18 - (char *)v12) >> 5;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 59) {
              sub_25B3FBC4C();
            }
            if (v19 - v12 > v41) {
              unint64_t v41 = v19 - v12;
            }
            if ((unint64_t)((char *)v19 - (char *)v12) >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            uint64_t v43 = (char *)sub_25B3FBC9C(v42);
            float v45 = (int32x4_t *)&v43[32 * v40];
            v45->i64[0] = v17;
            v45[1] = v160;
            if (v18 == v12)
            {
              a1 = (unint64_t)&v43[32 * v40];
            }
            else
            {
              float v46 = (int32x4_t *)&v43[32 * v40];
              do
              {
                a1 = (unint64_t)&v46[-2];
                int32x4_t v47 = v18[-1];
                v46[-2] = v18[-2];
                v46[-1] = v47;
                v18 -= 2;
                v46 -= 2;
              }
              while (v18 != v12);
            }
            unint64_t v19 = (int32x4_t *)&v43[32 * v44];
            uint64_t v18 = v45 + 2;
            if (v12) {
              operator delete(v12);
            }
            uint64_t v12 = (int32x4_t *)a1;
          }
          else
          {
            v18->i64[0] = v17;
            v18[1] = v160;
            v18 += 2;
          }
LABEL_64:
          uint64_t v20 = v163;
          if (++v17 == v16) {
            goto LABEL_67;
          }
        }
        v31->i64[0] = (uint64_t)*v38;
LABEL_47:
        void *v38 = v31;
        goto LABEL_48;
      }
      uint64_t v18 = v12;
LABEL_67:
      v169[1].__locale_ = 0;
      v169[0].__locale_ = 0;
      v170[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      *(void *)&long long v168 = 0;
      sub_25B4E3A80((void **)&v169[0].__locale_, ((char *)v18 - (char *)v12) >> 5);
      sub_25B4AF4AC(__p, ((char *)v18 - (char *)v12) >> 5);
      if (v12 != v18)
      {
        unint64_t v48 = v12;
        do
        {
          uint64_t v49 = v48->i64[0];
          uint64_t v50 = *v163;
          int v51 = v169[1].__locale_;
          if (v169[1].__locale_ >= v170[0])
          {
            uint64_t v53 = v169[0].__locale_;
            int64_t v54 = (v169[1].__locale_ - v169[0].__locale_) >> 4;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            int64_t v56 = (std::locale::__imp *)v170[0] - v169[0].__locale_;
            if (((std::locale::__imp *)v170[0] - v169[0].__locale_) >> 3 > v55) {
              unint64_t v55 = v56 >> 3;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57) {
              unint64_t v57 = (unint64_t)sub_25B3FFAEC(v57);
            }
            else {
              uint64_t v58 = 0;
            }
            unint64_t v59 = (std::locale::__imp *)(v57 + 16 * v54);
            *(_OWORD *)unint64_t v59 = *(_OWORD *)(v50 + 16 * v49);
            unint64_t v52 = (std::locale::__imp *)((char *)v59 + 16);
            if (v51 != v53)
            {
              do
              {
                long long v60 = *((_OWORD *)v51 - 1);
                int v51 = (std::locale::__imp *)((char *)v51 - 16);
                *((_OWORD *)v59 - 1) = v60;
                unint64_t v59 = (std::locale::__imp *)((char *)v59 - 16);
              }
              while (v51 != v53);
              int v51 = v169[0].__locale_;
            }
            v169[0].__locale_ = v59;
            v170[0] = (void *)(v57 + 16 * v58);
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_OWORD *)v169[1].__locale_ = *(_OWORD *)(v50 + 16 * v49);
            unint64_t v52 = (std::locale::__imp *)((char *)v51 + 16);
          }
          v169[1].__locale_ = v52;
          uint64_t v61 = v48->i64[0];
          uint64_t v62 = *v158;
          signed int v63 = (char *)__p[1];
          if (__p[1] >= (void *)v168)
          {
            unint64_t v65 = (char *)__p[0];
            int64_t v66 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v168 - (unint64_t)__p[0]) >> 2 > v67) {
              unint64_t v67 = (uint64_t)(v168 - (unint64_t)__p[0]) >> 2;
            }
            if ((unint64_t)v168 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v67;
            }
            if (v68) {
              unint64_t v68 = (unint64_t)sub_25B3FCAD4(v68);
            }
            else {
              uint64_t v69 = 0;
            }
            uint64_t v70 = (void *)(v68 + 8 * v66);
            void *v70 = *(void *)(v62 + 8 * v61);
            uint8x8_t v64 = v70 + 1;
            if (v63 != v65)
            {
              do
              {
                uint64_t v71 = *((void *)v63 - 1);
                v63 -= 8;
                *--uint64_t v70 = v71;
              }
              while (v63 != v65);
              signed int v63 = (char *)__p[0];
            }
            __p[0] = v70;
            *(void *)&long long v168 = v68 + 8 * v69;
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *(void *)__p[1] = *(void *)(v62 + 8 * v61);
            uint8x8_t v64 = v63 + 8;
          }
          __p[1] = v64;
          v48 += 2;
        }
        while (v48 != v18);
      }
      sub_25B3FB178((uint64_t)v164);
      if (v12) {
        operator delete(v12);
      }
      unint64_t v72 = v163[1];
      if (!v72) {
LABEL_224:
      }
        operator new[]();
      uint64_t v73 = 0;
      uint64_t v74 = (char *)*v163;
      uint64_t v75 = 16 * v72;
      float32x4_t v76 = 0uLL;
      do
      {
        float32x4_t v77 = *(float32x4_t *)&v74[v73];
        float32x4_t v76 = vaddq_f32(v76, v77);
        v73 += 16;
      }
      while (v75 != v73);
      *(float32x4_t *)unsigned int v156 = v76;
      uint64_t v78 = 0;
      float32x4_t v79 = 0uLL;
      do
      {
        float32x4_t v79 = vaddq_f32(v79, *(float32x4_t *)&v74[v78]);
        v78 += 16;
      }
      while (v75 != v78);
      uint64_t v80 = 0;
      v77.f32[0] = (float)v72;
      float32x4_t v161 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 0);
      float32x4_t v81 = vdivq_f32(v79, v161);
      float32x4_t v82 = 0uLL;
      do
      {
        float32x4_t v83 = vsubq_f32(*(float32x4_t *)&v74[v80], v81);
        float32x4_t v82 = vmlaq_f32(v82, v83, v83);
        v80 += 16;
      }
      while (v75 != v80);
      *(float32x4_t *)uint64_t v154 = v82;
      if (v72 >> 60) {
        sub_25B3FBC4C();
      }
      uint16x4_t v84 = (float *)sub_25B3FFAEC(v72);
      float32x4_t v157 = vdivq_f32(*(float32x4_t *)v156, v161);
      memmove(v84, v74, 16 * v72);
      float32x4_t v85 = vdivq_f32(*(float32x4_t *)v154, v161);
      v85.i32[3] = 0;
      uint32x4_t v86 = (float32x4_t *)&v84[4 * v72];
      __asm { FMOV            V1.4S, #3.0 }
      float32x4_t v91 = vmulq_f32(vsqrtq_f32(v85), _Q1);
      uint64_t v92 = v75 - 16;
      __int16 v93 = (float32x4_t *)v84;
      while (1)
      {
        int16x4_t v94 = vmovn_s32(vcgeq_f32(vabdq_f32(*v93, v157), v91));
        if (v94.i8[0] & 1) != 0 || (v94.i8[2] & 1) != 0 || (v94.i8[4]) {
          break;
        }
        ++v93;
        v92 -= 16;
        if (v93 == v86) {
          goto LABEL_131;
        }
      }
      if (v93 != v86)
      {
        if (&v93[1] == v86)
        {
          unint64_t v96 = v93;
        }
        else
        {
          uint64_t v95 = 1;
          unint64_t v96 = v93;
          do
          {
            float32x4_t v97 = v93[v95];
            int16x4_t v98 = vmovn_s32(vcgeq_f32(vabdq_f32(v97, v157), v91));
            if ((v98.i8[0] & 1) == 0 && (v98.i8[2] & 1) == 0 && (v98.i8[4] & 1) == 0) {
              *v96++ = v97;
            }
            ++v95;
            v92 -= 16;
          }
          while (v92);
        }
        if (v96 != v86) {
          unint64_t v72 = ((char *)v96 - (char *)v84) >> 4;
        }
      }
LABEL_131:
      int8x8_t v99 = &v84[4 * v72];
      if (!v72)
      {
        unint64_t v100 = v84;
        goto LABEL_135;
      }
      if (v72 == 1)
      {
        unint64_t v100 = v84 + 4;
LABEL_135:
        uint64_t v101 = v84;
        uint64_t v102 = (uint64_t)v84;
LABEL_162:
        float v119 = *(float *)(v102 + 8);
        float v120 = v101[2];
        v169[1].__locale_ = 0;
        v169[0].__locale_ = 0;
        v170[0] = 0;
        unsigned int v159 = v84;
        sub_25B559090((void **)&v169[0].__locale_, ((char *)v100 - (char *)v84) >> 4);
        unint64_t v162 = v72;
        if (v72)
        {
          long long v121 = (std::locale::__imp *)v170[0];
          uint64_t v122 = v84;
          long long v123 = v169[1].__locale_;
          uint64_t v124 = v169[0].__locale_;
          do
          {
            int v125 = *((_DWORD *)v122 + 2);
            if (v123 >= v121)
            {
              uint64_t v127 = (v123 - v124) >> 2;
              unint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 62)
              {
                v169[0].__locale_ = v124;
                sub_25B3FBC4C();
              }
              if ((v121 - v124) >> 1 > v128) {
                unint64_t v128 = (v121 - v124) >> 1;
              }
              if ((unint64_t)(v121 - v124) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v128;
              }
              if (v129) {
                unint64_t v129 = (unint64_t)sub_25B3FBC64(v129);
              }
              else {
                uint64_t v130 = 0;
              }
              unint64_t v131 = (_DWORD *)(v129 + 4 * v127);
              *unint64_t v131 = v125;
              unint64_t v126 = (std::locale::__imp *)(v131 + 1);
              while (v123 != v124)
              {
                int v132 = *((_DWORD *)v123 - 1);
                long long v123 = (std::locale::__imp *)((char *)v123 - 4);
                *--unint64_t v131 = v132;
              }
              long long v121 = (std::locale::__imp *)(v129 + 4 * v130);
              v169[1].__locale_ = v126;
              if (v124) {
                operator delete(v124);
              }
              uint64_t v124 = (std::locale::__imp *)v131;
            }
            else
            {
              *(_DWORD *)long long v123 = v125;
              unint64_t v126 = (std::locale::__imp *)((char *)v123 + 4);
            }
            v169[1].__locale_ = v126;
            v122 += 4;
            long long v123 = v126;
          }
          while (v122 != v99);
          v170[0] = v121;
          v169[0].__locale_ = v124;
          uint16x4_t v84 = v159;
        }
        __p[0] = (void *)__PAIR64__(LODWORD(v119), LODWORD(v120));
        sub_25B559138((uint64_t)v164, (float **)v169, (unint64_t)(float)((float)(v119 - v120) / 0.1), (float *)__p);
        uint64_t v133 = v164[0].__locale_;
        unint64_t v134 = v164[1].__locale_;
        if (v164[0].__locale_ != v164[1].__locale_)
        {
          __p[1] = 0;
          __p[0] = 0;
          *(void *)&long long v168 = 0;
          sub_25B559090(__p, (v164[1].__locale_ - v164[0].__locale_) >> 2);
          unint64_t v135 = v168;
          uint64_t v136 = (float *)__p[1];
          BOOL v137 = (float *)__p[0];
          do
          {
            float v138 = (float)*(int *)v133;
            if ((unint64_t)v136 >= v135)
            {
              uint64_t v139 = v136 - v137;
              unint64_t v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 62)
              {
                *(void *)&long long v168 = v135;
                __p[0] = v137;
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v135 - (void)v137) >> 1 > v140) {
                unint64_t v140 = (uint64_t)(v135 - (void)v137) >> 1;
              }
              if (v135 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v140;
              }
              if (v141) {
                unint64_t v141 = (unint64_t)sub_25B3FBC64(v141);
              }
              else {
                uint64_t v142 = 0;
              }
              uint64_t v143 = (float *)(v141 + 4 * v139);
              *uint64_t v143 = v138;
              uint64_t v144 = v143 + 1;
              while (v136 != v137)
              {
                int v145 = *((_DWORD *)v136-- - 1);
                *((_DWORD *)v143-- - 1) = v145;
              }
              unint64_t v135 = v141 + 4 * v142;
              __p[1] = v144;
              if (v137) {
                operator delete(v137);
              }
              BOOL v137 = v143;
              uint64_t v136 = (float *)v144;
            }
            else
            {
              *v136++ = v138;
            }
            __p[1] = v136;
            uint64_t v133 = (std::locale::__imp *)((char *)v133 + 4);
          }
          while (v133 != v134);
          *(void *)&long long v168 = v135;
          __p[0] = v137;
          if (v137 != v136)
          {
            float v146 = 0.0;
            unsigned int v147 = v137;
            do
            {
              float v148 = *v147++;
              float v146 = v146 + v148;
            }
            while (v147 != v136);
            unsigned int v149 = v137;
            do
            {
              *unsigned int v149 = *v149 / v146;
              ++v149;
            }
            while (v149 != v136);
          }
          if (v162)
          {
            uint16x4_t v84 = v159;
            uint64_t v150 = 16 * (((char *)v99 - (char *)v159) >> 4);
            float32x4_t v151 = 0uLL;
            BOOL v152 = (float32x4_t *)v159;
            do
            {
              float32x4_t v153 = *v152++;
              float32x4_t v151 = vaddq_f32(v151, v153);
              v150 -= 16;
            }
            while (v150);
          }
          else
          {
            uint16x4_t v84 = v159;
          }
          if (v137)
          {
            __p[1] = v137;
            operator delete(v137);
          }
        }
        if (v165[1]) {
          operator delete(v165[1]);
        }
        if (v164[0].__locale_) {
          operator delete(v164[0].__locale_);
        }
        if (v169[0].__locale_) {
          operator delete(v169[0].__locale_);
        }
        if (v84) {
          operator delete(v84);
        }
        goto LABEL_224;
      }
      uint64_t v103 = (uint64_t)(v84 + 4);
      float v104 = v84[6];
      float v105 = v84[2];
      if (v104 >= v105) {
        uint64_t v101 = v84;
      }
      else {
        uint64_t v101 = v84 + 4;
      }
      if (v104 < v105) {
        uint64_t v103 = (uint64_t)v84;
      }
      if (v72 != 2)
      {
        unint64_t v106 = 0;
        uint8x8_t v107 = v84 + 8;
        uint64_t v108 = v84;
        while (1)
        {
          long long v109 = v107;
          unint64_t v110 = &v84[v106 / 4];
          uint64_t v102 = (uint64_t)&v84[v106 / 4 + 8];
          if (16 * v72 - 48 == v106) {
            break;
          }
          uint64_t v111 = (uint64_t)(v108 + 12);
          int v112 = v110 + 12;
          float v113 = v110[14];
          float v114 = v110[10];
          float v115 = v101[2];
          float v116 = *(float *)(v103 + 8);
          if (v114 >= v115) {
            uint64_t v117 = (uint64_t)v101;
          }
          else {
            uint64_t v117 = (uint64_t)&v84[v106 / 4 + 8];
          }
          if (v113 < v116) {
            uint64_t v111 = v103;
          }
          if (v113 < v115) {
            uint64_t v101 = v112;
          }
          if (v114 >= v116) {
            uint64_t v103 = (uint64_t)&v84[v106 / 4 + 8];
          }
          if (v113 >= v114)
          {
            uint64_t v101 = (float *)v117;
            uint64_t v103 = v111;
          }
          uint8x8_t v107 = v109 + 8;
          v106 += 32;
          uint64_t v108 = v109;
          if (16 * v72 - 32 == v106) {
            goto LABEL_160;
          }
        }
        float v118 = v110[10];
        if (v118 < v101[2])
        {
          unint64_t v100 = &v84[4 * v72];
          uint64_t v101 = (float *)v102;
LABEL_161:
          uint64_t v102 = v103;
          goto LABEL_162;
        }
        if (v118 >= *(float *)(v103 + 8))
        {
          unint64_t v100 = &v84[4 * v72];
          goto LABEL_162;
        }
      }
LABEL_160:
      unint64_t v100 = &v84[4 * v72];
      goto LABEL_161;
    }
  }
  *(void *)(a1 + 8) = *(void *)a1;
}

void sub_25B558414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0xA00]);
  sub_25B3F9500((uint64_t)&STACK[0x910]);
  STACK[0x230] = v69;
  if (STACK[0x2B0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x2B0]);
  }
  if (STACK[0x820]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x820]);
  }
  STACK[0xA60] = (unint64_t)&unk_2708F1A48;
  if (STACK[0xAE0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xAE0]);
  }
  STACK[0x700] = v70;
  if (STACK[0x780]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x780]);
  }
  STACK[0x3E0] = (unint64_t)&unk_2708F2218;
  if (STACK[0x460]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x460]);
  }
  STACK[0x630] = (unint64_t)&unk_2708F2218;
  if (STACK[0x6B0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x6B0]);
  }
  STACK[0x840] = a20;
  if (STACK[0x8C0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x8C0]);
  }
  if (__p) {
    operator delete(__p);
  }

  sub_25B3F9500((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_25B559090(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_25B3FBC64(a2);
    double v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    double v7 = &v4[4 * v6];
    float64x2_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v9 != *a1)
    {
      unint64_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_25B559138(uint64_t a1, float **a2, unint64_t a3, float *a4)
{
  if (!a3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  uint32x4_t v30 = 0;
  float v31 = 0;
  unint64_t v32 = 0;
  sub_25B559090(&v30, a3);
  float v9 = *a4;
  float v8 = a4[1];
  if (*a4 <= v8)
  {
    float v12 = (float)(v8 - v9) / (float)a3;
    int v11 = v31;
    unint64_t v13 = v32;
    unint64_t v10 = (float *)v30;
    do
    {
      if ((unint64_t)v11 >= v13)
      {
        uint64_t v14 = v11 - v10;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
        {
          uint32x4_t v30 = v10;
          float v31 = v11;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v13 - (void)v10) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v13 - (void)v10) >> 1;
        }
        if (v13 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_25B3FBC64(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (float *)(v16 + 4 * v14);
        float *v18 = v9;
        unint64_t v19 = v18 + 1;
        while (v11 != v10)
        {
          int v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v18-- - 1) = v20;
        }
        unint64_t v13 = v16 + 4 * v17;
        if (v10) {
          operator delete(v10);
        }
        unint64_t v10 = v18;
        int v11 = v19;
      }
      else
      {
        *v11++ = v9;
      }
      float v9 = v12 + v9;
    }
    while (v9 <= a4[1]);
    float v31 = v11;
    unint64_t v32 = v13;
    uint32x4_t v30 = v10;
  }
  else
  {
    unint64_t v10 = (float *)v30;
    int v11 = v31;
  }
  uint64_t v21 = (char *)v11 - (char *)v10;
  if ((unint64_t)((char *)v11 - (char *)v10) > 7)
  {
    unint64_t v22 = v21 >> 2;
    int v33 = 0;
    sub_25B40FF0C(&__p, (v21 >> 2) - 1, &v33);
    unint64_t v23 = *a2;
    float v24 = a2[1];
    uint8x8_t v25 = __p;
    uint64_t v26 = (uint64_t)v35;
    unint64_t v27 = v35 - (unsigned char *)__p;
    if (*a2 == v24)
    {
LABEL_39:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      sub_25B3FC724((void *)a1, v25, v26, (uint64_t)v27 >> 2);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      sub_25B3FCA58((void *)(a1 + 24), v10, (uint64_t)v11, v22);
      if (__p)
      {
        unint64_t v35 = __p;
        operator delete(__p);
      }
      goto LABEL_41;
    }
    while (1)
    {
      float v28 = *v23;
      if ((int)(v27 >> 2) < 2)
      {
        LODWORD(v29) = 0;
LABEL_35:
        if (v28 < v10[v29]) {
          goto LABEL_38;
        }
        uint64_t v29 = v29;
        if (v28 > v10[(v29 + 1)]) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v29 = 0;
        while (v28 < v10[v29] || v28 >= v10[v29 + 1])
        {
          if ((v27 >> 2) - 1 == ++v29)
          {
            LODWORD(v29) = (v27 >> 2) - 1;
            goto LABEL_35;
          }
        }
      }
      ++*((_DWORD *)v25 + v29);
LABEL_38:
      if (++v23 == v24) {
        goto LABEL_39;
      }
    }
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_25B3FCA58((void *)(a1 + 24), v10, (uint64_t)v11, v21 >> 2);
LABEL_41:
  if (v30) {
    operator delete(v30);
  }
}

void sub_25B5593C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B559438(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1A48;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    int v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B559510(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1AC0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    int v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void *sub_25B5595E8(void *a1)
{
  a1[61] = &unk_2708F1AC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[77];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[36] = &unk_2708F2218;
  int64_t v3 = (std::__shared_weak_count *)a1[52];
  if (v3) {
    sub_25B404120(v3);
  }
  sub_25B3F9500((uint64_t)(a1 + 6));
  return a1;
}

uint64_t sub_25B55966C(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4, uint64_t a5)
{
  uint64_t v10 = *(float32x2_t **)(a3 + 24);
  int v11 = (float32x2_t **)(a3 + 32);
  if (v10 == (float32x2_t *)(a3 + 32))
  {
LABEL_10:
    unint64_t v16 = *(float32x2_t **)(a3 + 48);
    uint64_t v17 = (float32x2_t *)(a3 + 56);
    if (v16 == v17)
    {
LABEL_19:
      if (!a5) {
        return 0;
      }
      uint64_t v21 = 32 * a5;
      while (1)
      {
        if (sub_25B40DB9C(*a2, *a4, a4[1], 0.00001) <= 0.15)
        {
          float v22 = sub_25B3FCCE0(a1, a4, 0);
          if ((float)(180.0 - v22) < v22) {
            float v22 = 180.0 - v22;
          }
          if (v22 > 75.0) {
            break;
          }
        }
        a4 += 4;
        v21 -= 32;
        if (!v21) {
          return 0;
        }
      }
    }
    else
    {
      float32x2_t v18 = *a2;
      while (sub_25B40DB9C(v18, v16[5], v16[6], 0.00001) > 0.15)
      {
        unint64_t v19 = (float32x2_t *)v16[1];
        if (v19)
        {
          do
          {
            int v20 = (float32x2_t **)v19;
            unint64_t v19 = (float32x2_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            int v20 = (float32x2_t **)v16[2];
            BOOL v15 = *v20 == v16;
            unint64_t v16 = (float32x2_t *)v20;
          }
          while (!v15);
        }
        unint64_t v16 = (float32x2_t *)v20;
        if (v20 == (float32x2_t **)v17) {
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    float32x2_t v12 = *a2;
    while (sub_25B40DB9C(v12, v10[5], v10[6], 0.00001) > 0.15)
    {
      unint64_t v13 = (float32x2_t *)v10[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (float32x2_t **)v13;
          unint64_t v13 = (float32x2_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (float32x2_t **)v10[2];
          BOOL v15 = *v14 == v10;
          uint64_t v10 = (float32x2_t *)v14;
        }
        while (!v15);
      }
      uint64_t v10 = (float32x2_t *)v14;
      if (v14 == v11) {
        goto LABEL_10;
      }
    }
  }
  return 1;
}

uint64_t sub_25B559820(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    operator delete(v2);
  }
  int64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_25B559860(uint64_t a1, float32x2_t a2)
{
  long long v4 = *(float32x2_t **)(a1 + 24);
  long long v5 = (float32x2_t **)(a1 + 32);
  if (v4 == (float32x2_t *)(a1 + 32))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      if (sub_25B40DB9C(a2, v4[5], v4[6], 0.00001) <= 0.1)
      {
        uint64_t result = 1;
        if (v6) {
          return result;
        }
        uint64_t v6 = 1;
      }
      long long v8 = (float32x2_t *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (float32x2_t **)v8;
          long long v8 = (float32x2_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (float32x2_t **)v4[2];
          BOOL v10 = *v9 == v4;
          long long v4 = (float32x2_t *)v9;
        }
        while (!v10);
      }
      long long v4 = (float32x2_t *)v9;
    }
    while (v9 != v5);
  }
  int v11 = *(float32x2_t **)(a1 + 48);
  float32x2_t v12 = (float32x2_t *)(a1 + 56);
  if (v11 != v12)
  {
    do
    {
      if (sub_25B40DB9C(a2, v11[5], v11[6], 0.00001) <= 0.1)
      {
        uint64_t result = 1;
        if (v6) {
          return result;
        }
        uint64_t v6 = 1;
      }
      unint64_t v13 = (float32x2_t *)v11[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (float32x2_t **)v13;
          unint64_t v13 = (float32x2_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (float32x2_t **)v11[2];
          BOOL v10 = *v14 == v11;
          int v11 = (float32x2_t *)v14;
        }
        while (!v10);
      }
      int v11 = (float32x2_t *)v14;
    }
    while (v14 != (float32x2_t **)v12);
  }
  return 0;
}

uint64_t sub_25B5599A8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_25B3FA4B0(a1, *(void *)(a2 + 8));
  long long v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = v5[2];
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v8 >= v7) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        BOOL v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v13 = operator new(0x38uLL);
      *unint64_t v13 = 0;
      v13[1] = v8;
      long long v14 = *((_OWORD *)v5 + 1);
      long long v15 = *((_OWORD *)v5 + 2);
      v13[6] = v5[6];
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v15;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        sub_25B3FA4B0(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v8 >= v7) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        *unint64_t v13 = *v23;
      }
      else
      {
        *unint64_t v13 = *v6;
        *uint64_t v6 = v13;
        *(void *)(v22 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      long long v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_25B559BE4(_Unwind_Exception *a1)
{
  sub_25B3FB178(v1);
  _Unwind_Resume(a1);
}

void sub_25B559C0C(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      unint64_t v7 = *v6;
      if (v7)
      {
        uint64_t v8 = *(void *)&v2 - 1;
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == a2)
          {
            if (v7[2] == a2)
            {
              if (v3.u32[0] > 1uLL)
              {
                if (*(void *)&v2 <= a2) {
                  a2 %= *(void *)&v2;
                }
              }
              else
              {
                a2 &= v8;
              }
              BOOL v10 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                int v11 = v10;
                BOOL v10 = (uint64_t *)*v10;
              }
              while (v10 != v7);
              if (v11 == a1 + 2) {
                goto LABEL_36;
              }
              unint64_t v12 = v11[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v12 >= *(void *)&v2) {
                  v12 %= *(void *)&v2;
                }
              }
              else
              {
                v12 &= v8;
              }
              if (v12 != a2)
              {
LABEL_36:
                if (!*v7) {
                  goto LABEL_37;
                }
                unint64_t v13 = *(void *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v13 >= *(void *)&v2) {
                    v13 %= *(void *)&v2;
                  }
                }
                else
                {
                  v13 &= v8;
                }
                if (v13 != a2) {
LABEL_37:
                }
                  *(void *)(v5 + 8 * a2) = 0;
              }
              uint64_t v14 = *v7;
              if (*v7)
              {
                unint64_t v15 = *(void *)(v14 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v15 >= *(void *)&v2) {
                    v15 %= *(void *)&v2;
                  }
                }
                else
                {
                  v15 &= v8;
                }
                if (v15 != a2)
                {
                  *(void *)(*a1 + 8 * v15) = v11;
                  uint64_t v14 = *v7;
                }
              }
              *int v11 = v14;
              *unint64_t v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v3.u32[0] > 1uLL)
            {
              if (v9 >= *(void *)&v2) {
                v9 %= *(void *)&v2;
              }
            }
            else
            {
              v9 &= v8;
            }
            if (v9 != v4) {
              return;
            }
          }
          unint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

uint64_t sub_25B559DB4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v152 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      BOOL v10 = *(float **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          int v11 = *(float **)(a2 + 240);
          do
          {
            float v12 = *v11++;
            *v10++ = (float)(v12 / *(float *)(a2 + 296)) * *(float *)(a2 + 352);
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(result + 56);
        uint64_t v78 = *(void *)(result + 64);
        uint64_t v79 = *(void *)(a2 + 240);
        do
        {
          uint64_t v80 = 0;
          v10[v77 * (void)v137 + v78 * *((void *)&v137 + 1)] = (float)(*(float *)(v79 + 4 * v76)
                                                                         / *(float *)(a2 + 296))
                                                                 * *(float *)(a2 + 352);
          do
          {
            uint64_t v81 = *(void *)((char *)&v137 + v80 + 8) + 1;
            *(void *)((char *)&v137 + v80 + 8) = v81;
            uint64_t result = *(void *)(v3 + 16 + v80);
            if (v81 != result) {
              break;
            }
            *(void *)((char *)&v137 + v80 + 8) = 0;
            v80 -= 8;
          }
          while (v80 != -16);
          ++v76;
        }
        while (v76 != v9);
      }
    }
    else
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v39 = *(void *)(result + 104);
      uint64_t v40 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a2 + 152);
          uint64_t v43 = *(void *)(a2 + 160);
          uint64_t v44 = *(void *)(a2 + 240);
          do
          {
            uint64_t v45 = 0;
            *(float *)(v40 + 4 * v41) = (float)(*(float *)(v44 + 4 * (v42 * v137 + v43 * *((void *)&v137 + 1)))
                                              / *(float *)(a2 + 296))
                                      * *(float *)(a2 + 352);
            do
            {
              uint64_t v46 = *(void *)((char *)&v137 + v45 + 8) + 1;
              *(void *)((char *)&v137 + v45 + 8) = v46;
              uint64_t result = *(void *)(v3 + 16 + v45);
              if (v46 != result) {
                break;
              }
              *(void *)((char *)&v137 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v41;
          }
          while (v41 != v39);
        }
      }
      else if (v39)
      {
        uint64_t v100 = 0;
        uint64_t v101 = *(void *)(result + 56);
        uint64_t v102 = *(void *)(result + 64);
        uint64_t v103 = *(void *)(a2 + 152);
        uint64_t v104 = *(void *)(a2 + 160);
        uint64_t v105 = *(void *)(a2 + 240);
        do
        {
          uint64_t result = 0;
          *(float *)(v40 + 4 * (v101 * v137 + v102 * *((void *)&v137 + 1))) = (float)(*(float *)(v105
                                                                                                 + 4
                                                                                                 * (v103 * v137
                                                                                                  + v104 * *((void *)&v137 + 1)))
                                                                                      / *(float *)(a2 + 296))
                                                                              * *(float *)(a2 + 352);
          do
          {
            uint64_t v106 = *(void *)((char *)&v137 + result + 8) + 1;
            *(void *)((char *)&v137 + result + 8) = v106;
            if (v106 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v137 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v100;
        }
        while (v100 != v39);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 232))
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        uint64_t v15 = *((void *)&v128 + v13);
        uint64_t v16 = *((void *)v5 + v13);
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while (v15 == v16);
      if (v15 != v16)
      {
        float v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        BOOL v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v18, (uint64_t)" ", 1);
        unint64_t v19 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        size_t v21 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        uint64_t v22 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v23 = *(void *)(v3 + 104);
      uint64_t v24 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v23)
        {
          uint64_t v25 = 0;
          unint64_t v27 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v26 = (uint64_t *)v139;
          unint64_t v28 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v26 != v27)
            {
              uint32x4_t v30 = v27;
              unint64_t v31 = v28;
              do
              {
                uint64_t v32 = *v30++;
                *((void *)&v131 + v32) = 0;
                --v31;
              }
              while (v31);
            }
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
            do
            {
              char v36 = v35;
              v34 += *((void *)&v149 + v33) * *((void *)&v131 + v33);
              uint64_t v33 = 1;
              char v35 = 0;
            }
            while ((v36 & 1) != 0);
            *(float *)(v24 + 4 * v25) = (float)(*(float *)(v29 + 4 * v34) / *(float *)(a2 + 296)) * *(float *)(a2 + 352);
            for (uint64_t i = 1; i != -1; --i)
            {
              float v38 = (std::locale::__imp *)((char *)v134[i].__locale_ + 1);
              v134[i].__locale_ = v38;
              if (v38 != *(std::locale::__imp **)((char *)&v128 + i * 8)) {
                break;
              }
              v134[i].__locale_ = 0;
            }
            ++v25;
          }
          while (v25 != v23);
        }
      }
      else if (v23)
      {
        uint64_t v82 = 0;
        uint16x4_t v84 = (uint64_t *)*((void *)&v138 + 1);
        float32x4_t v83 = (uint64_t *)v139;
        unint64_t v85 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v85 <= 1) {
          unint64_t v85 = 1;
        }
        uint64_t v86 = *(void *)(v3 + 56);
        uint64_t v87 = *(void *)(v3 + 64);
        uint64_t v88 = *(void *)(a2 + 240);
        do
        {
          unint64_t locale = v134[0].__locale_;
          __int16 v90 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v83 != v84)
          {
            float32x4_t v91 = v84;
            unint64_t v92 = v85;
            do
            {
              uint64_t v93 = *v91++;
              *((void *)&v131 + v93) = 0;
              --v92;
            }
            while (v92);
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          char v96 = 1;
          do
          {
            char v97 = v96;
            v95 += *((void *)&v149 + v94) * *((void *)&v131 + v94);
            uint64_t v94 = 1;
            char v96 = 0;
          }
          while ((v97 & 1) != 0);
          *(float *)(v24 + 4 * ((void)locale * v86 + (void)v90 * v87)) = (float)(*(float *)(v88 + 4 * v95)
                                                                                   / *(float *)(a2 + 296))
                                                                           * *(float *)(a2 + 352);
          for (uint64_t j = 1; j != -1; --j)
          {
            int8x8_t v99 = (std::locale::__imp *)((char *)v134[j].__locale_ + 1);
            v134[j].__locale_ = v99;
            if (v99 != *(std::locale::__imp **)((char *)&v128 + j * 8)) {
              break;
            }
            v134[j].__locale_ = 0;
          }
          ++v82;
        }
        while (v82 != v23);
      }
    }
    else
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v128 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        int v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        uint64_t v53 = (void *)MEMORY[0x263F8C0F8];
        int64_t v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        unint64_t v55 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        int64_t v56 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v57 = *(void *)(v3 + 104);
      uint64_t v58 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v138 + 1);
          long long v60 = (uint64_t *)v139;
          unint64_t v62 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          int v63 = *(unsigned __int8 *)(a2 + 232);
          uint64_t v64 = *(void *)(a2 + 152);
          uint64_t v65 = *(void *)(a2 + 160);
          uint64_t v66 = *(void *)(a2 + 240);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v60 != v61)
            {
              unint64_t v67 = v61;
              unint64_t v68 = v62;
              do
              {
                uint64_t v69 = *v67++;
                *((void *)&v131 + v69) = 0;
                --v68;
              }
              while (v68);
            }
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            char v72 = 1;
            do
            {
              char v73 = v72;
              v71 += *((void *)&v149 + v70) * *((void *)&v131 + v70);
              uint64_t v70 = 1;
              char v72 = 0;
            }
            while ((v73 & 1) != 0);
            if (!v63) {
              uint64_t v71 = v131 * v64 + *((void *)&v131 + 1) * v65;
            }
            *(float *)(v58 + 4 * v59) = (float)(*(float *)(v66 + 4 * v71) / *(float *)(a2 + 296)) * *(float *)(a2 + 352);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v75 = (std::locale::__imp *)((char *)v134[k].__locale_ + 1);
              v134[k].__locale_ = v75;
              if (v75 != *(std::locale::__imp **)((char *)&v128 + k * 8)) {
                break;
              }
              v134[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v107 = 0;
        long long v109 = (uint64_t *)*((void *)&v138 + 1);
        uint64_t v108 = (uint64_t *)v139;
        unint64_t v110 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        uint64_t v111 = *(void *)(v3 + 56);
        uint64_t v112 = *(void *)(v3 + 64);
        int v113 = *(unsigned __int8 *)(a2 + 232);
        uint64_t v114 = *(void *)(a2 + 152);
        uint64_t v115 = *(void *)(a2 + 160);
        uint64_t v116 = *(void *)(a2 + 240);
        do
        {
          uint64_t v117 = v134[0].__locale_;
          float v118 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v108 != v109)
          {
            float v119 = v109;
            unint64_t v120 = v110;
            do
            {
              uint64_t v121 = *v119++;
              *((void *)&v131 + v121) = 0;
              --v120;
            }
            while (v120);
          }
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          do
          {
            char v125 = v124;
            v123 += *((void *)&v149 + v122) * *((void *)&v131 + v122);
            uint64_t v122 = 1;
            char v124 = 0;
          }
          while ((v125 & 1) != 0);
          if (!v113) {
            uint64_t v123 = v131 * v114 + *((void *)&v131 + 1) * v115;
          }
          *(float *)(v58 + 4 * ((void)v117 * v111 + (void)v118 * v112)) = (float)(*(float *)(v116 + 4 * v123)
                                                                                    / *(float *)(a2 + 296))
                                                                            * *(float *)(a2 + 352);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v127 = (std::locale::__imp *)((char *)v134[m].__locale_ + 1);
            v134[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v128 + m * 8)) {
              break;
            }
            v134[m].__locale_ = 0;
          }
          ++v107;
        }
        while (v107 != v57);
      }
    }
    return sub_25B3F9500((uint64_t)&v137);
  }
  return result;
}

void sub_25B55A804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_25B55A838(void *a1)
{
  *a1 = &unk_2708F1AC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B55A8A4(void *a1)
{
  *a1 = &unk_2708F1AC0;
  int8x8_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B55A8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)a2
    && *(void *)(a1 + 16) == *(void *)(a2 + 8)
    && *(void *)(a1 + 24) == *(void *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 424) && *(unsigned char *)(a2 + 624))
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      uint64_t v5 = *(void *)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v5)
        {
          uint64_t v7 = 0;
          uint64_t v8 = a1 + 24;
          do
          {
            float v9 = sub_25B55B41C(a2, (uint64_t)&v79);
            uint64_t v10 = 0;
            *(float *)(v6 + 4 * v7) = v9;
            do
            {
              uint64_t v11 = *(void *)((char *)&v80 + v10) + 1;
              *(void *)((char *)&v80 + v10) = v11;
              if (v11 != *(void *)(v8 + v10)) {
                break;
              }
              *(void *)((char *)&v80 + v10) = 0;
              v10 -= 8;
            }
            while (v10 != -24);
            ++v7;
          }
          while (v7 != v5);
        }
      }
      else if (v5)
      {
        uint64_t v54 = 0;
        uint64_t v55 = a1 + 56;
        uint64_t v56 = a1 + 24;
        do
        {
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          do
          {
            v58 += *(void *)(v55 + v57) * *(void *)((char *)&v79 + v57);
            v57 += 8;
          }
          while (v57 != 24);
          float v59 = sub_25B55B41C(a2, (uint64_t)&v79);
          uint64_t v60 = 0;
          *(float *)(v6 + 4 * v58) = v59;
          do
          {
            uint64_t v61 = *(void *)((char *)&v80 + v60) + 1;
            *(void *)((char *)&v80 + v60) = v61;
            if (v61 != *(void *)(v56 + v60)) {
              break;
            }
            *(void *)((char *)&v80 + v60) = 0;
            v60 -= 8;
          }
          while (v60 != -24);
          ++v54;
        }
        while (v54 != v5);
      }
    }
    else
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      uint64_t v47 = *(void *)(a1 + 104);
      uint64_t v48 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v47)
        {
          uint64_t v49 = 0;
          uint64_t v50 = a1 + 24;
          do
          {
            float v51 = sub_25B55B238(a2, (uint64_t)&v79);
            uint64_t v52 = 0;
            *(float *)(v48 + 4 * v49) = v51;
            do
            {
              uint64_t v53 = *(void *)((char *)&v80 + v52) + 1;
              *(void *)((char *)&v80 + v52) = v53;
              if (v53 != *(void *)(v50 + v52)) {
                break;
              }
              *(void *)((char *)&v80 + v52) = 0;
              v52 -= 8;
            }
            while (v52 != -24);
            ++v49;
          }
          while (v49 != v47);
        }
      }
      else if (v47)
      {
        uint64_t v62 = 0;
        uint64_t v63 = a1 + 56;
        uint64_t v64 = a1 + 24;
        do
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          do
          {
            v66 += *(void *)(v63 + v65) * *(void *)((char *)&v79 + v65);
            v65 += 8;
          }
          while (v65 != 24);
          float v67 = sub_25B55B238(a2, (uint64_t)&v79);
          uint64_t v68 = 0;
          *(float *)(v48 + 4 * v66) = v67;
          do
          {
            uint64_t v69 = *(void *)((char *)&v80 + v68) + 1;
            *(void *)((char *)&v80 + v68) = v69;
            if (v69 != *(void *)(v64 + v68)) {
              break;
            }
            *(void *)((char *)&v80 + v68) = 0;
            v68 -= 8;
          }
          while (v68 != -24);
          ++v62;
        }
        while (v62 != v47);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 424)) {
      BOOL v12 = *(unsigned char *)(a2 + 624) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      long long v86 = 0uLL;
      long long v87 = 0uLL;
      long long v84 = 0uLL;
      long long v85 = 0uLL;
      long long v82 = 0uLL;
      long long v83 = 0uLL;
      long long v80 = 0uLL;
      long long v81 = 0uLL;
      long long v79 = 0uLL;
      long long v72 = 0uLL;
      memset(v71, 0, sizeof(v71));
      sub_25B43A3F0((uint64_t)&v79, v4, (_OWORD *)a2, (uint64_t)v71);
      if (*(void *)&v71[0] != *(void *)v4 || *(_OWORD *)((char *)v71 + 8) != *(_OWORD *)(a1 + 16))
      {
        uint64_t v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        char v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v14, (uint64_t)" ", 1);
        uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v16 = (void *)std::ostream::operator<<();
        sub_25B406B20(v16, (uint64_t)" ", 1);
        sub_25B406B20(v16, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        float v17 = std::locale::use_facet(v76, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v76);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        BOOL v18 = std::locale::use_facet(v76, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(v76);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v78 = 0u;
      *(_OWORD *)&v76[0].__locale_ = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      uint64_t v19 = *(void *)(a1 + 104);
      uint64_t v20 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v19)
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            uint64_t v70 = 0;
            sub_25B43A810((uint64_t)&v79, (uint64_t)v76, &v70, (uint64_t)&v73);
            *(float *)(v20 + 4 * i) = sub_25B55B238(a2, (uint64_t)&v73);
            for (uint64_t j = 2; j != -1; --j)
            {
              uint64_t v23 = (std::locale::__imp *)((char *)v76[j].__locale_ + 1);
              v76[j].__locale_ = v23;
              if (v23 != *(std::locale::__imp **)((char *)v71 + j * 8)) {
                break;
              }
              v76[j].__locale_ = 0;
            }
          }
        }
      }
      else if (v19)
      {
        uint64_t v35 = 0;
        uint64_t v36 = a1 + 56;
        do
        {
          uint64_t v70 = 0;
          sub_25B43A810((uint64_t)&v79, (uint64_t)v76, &v70, (uint64_t)&v73);
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          do
          {
            v38 += *(void *)(v36 + v37 * 8) * (uint64_t)v76[v37].__locale_;
            ++v37;
          }
          while (v37 != 3);
          *(float *)(v20 + 4 * v38) = sub_25B55B238(a2, (uint64_t)&v73);
          for (uint64_t k = 2; k != -1; --k)
          {
            uint64_t v40 = (std::locale::__imp *)((char *)v76[k].__locale_ + 1);
            v76[k].__locale_ = v40;
            if (v40 != *(std::locale::__imp **)((char *)v71 + k * 8)) {
              break;
            }
            v76[k].__locale_ = 0;
          }
          ++v35;
        }
        while (v35 != v19);
      }
    }
    else
    {
      long long v92 = 0uLL;
      long long v93 = 0uLL;
      long long v90 = 0uLL;
      long long v91 = 0uLL;
      long long v88 = 0uLL;
      long long v89 = 0uLL;
      long long v86 = 0uLL;
      long long v87 = 0uLL;
      long long v84 = 0uLL;
      long long v85 = 0uLL;
      long long v82 = 0uLL;
      long long v83 = 0uLL;
      long long v80 = 0uLL;
      long long v81 = 0uLL;
      long long v79 = 0uLL;
      long long v72 = 0uLL;
      memset(v71, 0, sizeof(v71));
      sub_25B43A3F0((uint64_t)&v79, v4, (_OWORD *)a2, (uint64_t)v71);
      if (*(void *)&v71[0] != *(void *)v4 || *(_OWORD *)((char *)v71 + 8) != *(_OWORD *)(a1 + 16))
      {
        uint64_t v24 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v25 = sub_25B406B20(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v25, (uint64_t)" ", 1);
        uint64_t v26 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v27 = (void *)std::ostream::operator<<();
        sub_25B406B20(v27, (uint64_t)" ", 1);
        sub_25B406B20(v27, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
        unint64_t v28 = std::locale::use_facet(v76, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v76);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        uint64_t v29 = std::locale::use_facet(v76, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(v76);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v78 = 0u;
      *(_OWORD *)&v76[0].__locale_ = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      uint64_t v30 = *(void *)(a1 + 104);
      uint64_t v31 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v30)
        {
          for (uint64_t m = 0; m != v30; ++m)
          {
            uint64_t v70 = 0;
            sub_25B43A810((uint64_t)&v79, (uint64_t)v76, &v70, (uint64_t)&v73);
            *(float *)(v31 + 4 * m) = sub_25B55B41C(a2, (uint64_t)&v73);
            for (uint64_t n = 2; n != -1; --n)
            {
              uint64_t v34 = (std::locale::__imp *)((char *)v76[n].__locale_ + 1);
              v76[n].__locale_ = v34;
              if (v34 != *(std::locale::__imp **)((char *)v71 + n * 8)) {
                break;
              }
              v76[n].__locale_ = 0;
            }
          }
        }
      }
      else if (v30)
      {
        uint64_t v41 = 0;
        uint64_t v42 = a1 + 56;
        do
        {
          uint64_t v70 = 0;
          sub_25B43A810((uint64_t)&v79, (uint64_t)v76, &v70, (uint64_t)&v73);
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          do
          {
            v44 += *(void *)(v42 + v43 * 8) * (uint64_t)v76[v43].__locale_;
            ++v43;
          }
          while (v43 != 3);
          *(float *)(v31 + 4 * v44) = sub_25B55B41C(a2, (uint64_t)&v73);
          for (iuint64_t i = 2; ii != -1; --ii)
          {
            uint64_t v46 = (std::locale::__imp *)((char *)v76[ii].__locale_ + 1);
            v76[ii].__locale_ = v46;
            if (v46 != *(std::locale::__imp **)((char *)v71 + ii * 8)) {
              break;
            }
            v76[ii].__locale_ = 0;
          }
          ++v41;
        }
        while (v41 != v30);
      }
    }
    sub_25B3F9500((uint64_t)&v79);
  }
}

void sub_25B55B204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

float sub_25B55B238(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_25B55B33C(a1 + 48, a2, &v10, (uint64_t)v12, &v9, (uint64_t)v11);
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v3 = v10;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    do
    {
      v3 += *(void *)(a1 + 344 + v4) * *(void *)&v12[v4];
      v4 += 8;
    }
    while (v4 != 24);
  }
  if (*(unsigned char *)(a1 + 624))
  {
    uint64_t v5 = v9;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    do
    {
      v5 += *(void *)(a1 + 544 + v6) * *(void *)&v11[v6];
      v6 += 8;
    }
    while (v6 != 24);
  }
  float v7 = 0.0;
  if (*(unsigned char *)(*(void *)(a1 + 632) + v5)) {
    float v7 = 1.0;
  }
  return *(float *)(*(void *)(a1 + 432) + 4 * v3) * v7;
}

uint64_t sub_25B55B33C(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = 0;
  *a5 = 0;
  *a3 = 0;
  float v7 = *(uint64_t **)(result + 24);
  uint64_t v8 = *(void *)(result + 32);
  uint64_t v9 = *(char **)result;
  uint64_t v10 = *(char **)(result + 8);
  do
  {
    *(void *)(a6 + v6) = *(void *)(a2 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  uint64_t v11 = 0;
  uint64_t v12 = v10 - v9;
  do
  {
    *(void *)(a4 + v11) = *(void *)(a2 + v11);
    v11 += 8;
  }
  while (v11 != 24);
  uint64_t v13 = v8 - (void)v7;
  if (v13)
  {
    unint64_t v14 = v13 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      uint64_t v15 = *v7++;
      *(void *)(a6 + 8 * v15) = 0;
      --v14;
    }
    while (v14);
  }
  if (v10 != v9)
  {
    uint64_t v16 = v12 >> 3;
    if ((unint64_t)(v12 >> 3) <= 1) {
      uint64_t v16 = 1;
    }
    do
    {
      uint64_t v17 = *(void *)v9;
      v9 += 8;
      *(void *)(a4 + 8 * v17) = 0;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = 0;
  uint64_t v19 = *a5;
  do
  {
    v19 += *(void *)(result + 192 + v18) * *(void *)(a6 + v18);
    *a5 = v19;
    v18 += 8;
  }
  while (v18 != 24);
  uint64_t v20 = 0;
  uint64_t v21 = *a3;
  do
  {
    v21 += *(void *)(result + 144 + v20) * *(void *)(a4 + v20);
    *a3 = v21;
    v20 += 8;
  }
  while (v20 != 24);
  return result;
}

float sub_25B55B41C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_25B55B33C(a1 + 48, a2, &v6, (uint64_t)v8, &v5, (uint64_t)v7);
  float v3 = 0.0;
  if (*(unsigned char *)(*(void *)(a1 + 632) + v5)) {
    float v3 = 1.0;
  }
  return *(float *)(*(void *)(a1 + 432) + 4 * v6) * v3;
}

void sub_25B55B4B8(void *a1)
{
  *a1 = &unk_2708F1A48;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B55B524(void *a1)
{
  *a1 = &unk_2708F1A48;
  int8x8_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B55B570(uint64_t a1, uint64_t a2)
{
  float v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_2708F1A88;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B55B604(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_25B55B61C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v152 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 184))
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v9 = *(void *)(result + 104);
      uint64_t v10 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v9)
        {
          uint64_t v11 = *(int **)(a2 + 192);
          do
          {
            int v12 = *v11++;
            *v10++ = *(_DWORD *)(a2 + 248) * v12;
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(result + 56);
        uint64_t v78 = *(void *)(result + 64);
        uint64_t v79 = *(void *)(a2 + 192);
        do
        {
          uint64_t v80 = 0;
          v10[v77 * (void)v137 + v78 * *((void *)&v137 + 1)] = *(_DWORD *)(a2 + 248) * *(_DWORD *)(v79 + 4 * v76);
          do
          {
            uint64_t v81 = *(void *)((char *)&v137 + v80 + 8) + 1;
            *(void *)((char *)&v137 + v80 + 8) = v81;
            uint64_t result = *(void *)(v3 + 16 + v80);
            if (v81 != result) {
              break;
            }
            *(void *)((char *)&v137 + v80 + 8) = 0;
            v80 -= 8;
          }
          while (v80 != -16);
          ++v76;
        }
        while (v76 != v9);
      }
    }
    else
    {
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      uint64_t v39 = *(void *)(result + 104);
      uint64_t v40 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(a2 + 104);
          uint64_t v43 = *(void *)(a2 + 112);
          uint64_t v44 = *(void *)(a2 + 192);
          do
          {
            uint64_t v45 = 0;
            *(_DWORD *)(v40 + 4 * v41) = *(_DWORD *)(a2 + 248)
                                       * *(_DWORD *)(v44 + 4 * (v42 * v137 + v43 * *((void *)&v137 + 1)));
            do
            {
              uint64_t v46 = *(void *)((char *)&v137 + v45 + 8) + 1;
              *(void *)((char *)&v137 + v45 + 8) = v46;
              uint64_t result = *(void *)(v3 + 16 + v45);
              if (v46 != result) {
                break;
              }
              *(void *)((char *)&v137 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v41;
          }
          while (v41 != v39);
        }
      }
      else if (v39)
      {
        uint64_t v100 = 0;
        uint64_t v101 = *(void *)(result + 56);
        uint64_t v102 = *(void *)(result + 64);
        uint64_t v103 = *(void *)(a2 + 104);
        uint64_t v104 = *(void *)(a2 + 112);
        uint64_t v105 = *(void *)(a2 + 192);
        do
        {
          uint64_t result = 0;
          *(_DWORD *)(v40 + 4 * (v101 * v137 + v102 * *((void *)&v137 + 1))) = *(_DWORD *)(a2 + 248)
                                                                               * *(_DWORD *)(v105
                                                                                           + 4
                                                                                           * (v103 * v137
                                                                                            + v104
                                                                                            * *((void *)&v137 + 1)));
          do
          {
            uint64_t v106 = *(void *)((char *)&v137 + result + 8) + 1;
            *(void *)((char *)&v137 + result + 8) = v106;
            if (v106 != *(void *)(v3 + 16 + result)) {
              break;
            }
            *(void *)((char *)&v137 + result + 8) = 0;
            result -= 8;
          }
          while (result != -16);
          ++v100;
        }
        while (v100 != v39);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 184))
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v13 = 0;
      char v14 = 1;
      do
      {
        uint64_t v15 = *((void *)&v128 + v13);
        uint64_t v16 = *((void *)v5 + v13);
        if ((v14 & 1) == 0) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
      }
      while (v15 == v16);
      if (v15 != v16)
      {
        uint64_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v18, (uint64_t)" ", 1);
        uint64_t v19 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v20 = (void *)std::ostream::operator<<();
        sub_25B406B20(v20, (uint64_t)" ", 1);
        sub_25B406B20(v20, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        uint64_t v21 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        uint64_t v22 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v23 = *(void *)(v3 + 104);
      uint64_t v24 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v23)
        {
          uint64_t v25 = 0;
          unint64_t v27 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v26 = (uint64_t *)v139;
          unint64_t v28 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          uint64_t v29 = *(void *)(a2 + 192);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v26 != v27)
            {
              uint64_t v30 = v27;
              unint64_t v31 = v28;
              do
              {
                uint64_t v32 = *v30++;
                *((void *)&v131 + v32) = 0;
                --v31;
              }
              while (v31);
            }
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
            do
            {
              char v36 = v35;
              v34 += *((void *)&v149 + v33) * *((void *)&v131 + v33);
              uint64_t v33 = 1;
              char v35 = 0;
            }
            while ((v36 & 1) != 0);
            *(_DWORD *)(v24 + 4 * v25) = *(_DWORD *)(a2 + 248) * *(_DWORD *)(v29 + 4 * v34);
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v38 = (std::locale::__imp *)((char *)v134[i].__locale_ + 1);
              v134[i].__locale_ = v38;
              if (v38 != *(std::locale::__imp **)((char *)&v128 + i * 8)) {
                break;
              }
              v134[i].__locale_ = 0;
            }
            ++v25;
          }
          while (v25 != v23);
        }
      }
      else if (v23)
      {
        uint64_t v82 = 0;
        long long v84 = (uint64_t *)*((void *)&v138 + 1);
        long long v83 = (uint64_t *)v139;
        unint64_t v85 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v85 <= 1) {
          unint64_t v85 = 1;
        }
        uint64_t v86 = *(void *)(v3 + 56);
        uint64_t v87 = *(void *)(v3 + 64);
        uint64_t v88 = *(void *)(a2 + 192);
        do
        {
          unint64_t locale = v134[0].__locale_;
          long long v89 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v83 != v84)
          {
            long long v91 = v84;
            unint64_t v92 = v85;
            do
            {
              uint64_t v93 = *v91++;
              *((void *)&v131 + v93) = 0;
              --v92;
            }
            while (v92);
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          char v96 = 1;
          do
          {
            char v97 = v96;
            v95 += *((void *)&v149 + v94) * *((void *)&v131 + v94);
            uint64_t v94 = 1;
            char v96 = 0;
          }
          while ((v97 & 1) != 0);
          *(_DWORD *)(v24 + 4 * ((void)locale * v86 + (void)v89 * v87)) = *(_DWORD *)(a2 + 248)
                                                                            * *(_DWORD *)(v88 + 4 * v95);
          for (uint64_t j = 1; j != -1; --j)
          {
            int8x8_t v99 = (std::locale::__imp *)((char *)v134[j].__locale_ + 1);
            v134[j].__locale_ = v99;
            if (v99 != *(std::locale::__imp **)((char *)&v128 + j * 8)) {
              break;
            }
            v134[j].__locale_ = 0;
          }
          ++v82;
        }
        while (v82 != v23);
      }
    }
    else
    {
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v142 = 0uLL;
      long long v143 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      long long v138 = 0uLL;
      long long v139 = 0uLL;
      long long v137 = 0uLL;
      long long v129 = 0uLL;
      long long v130 = 0uLL;
      long long v128 = 0uLL;
      sub_25B40AB84((uint64_t)&v137, v5, (_OWORD *)a2, (uint64_t)&v128);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v128 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        float v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Modules/StructurePostProcess/lcnn_spp/../../../Utilities/wTensor/core/tensor/tensor.hpp", 146);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        uint64_t v53 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        uint64_t v55 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        uint64_t v56 = std::locale::use_facet(v134, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v134);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      *(_OWORD *)&v134[0].__locale_ = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      uint64_t v57 = *(void *)(v3 + 104);
      uint64_t v58 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v138 + 1);
          uint64_t v60 = (uint64_t *)v139;
          unint64_t v62 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          int v63 = *(unsigned __int8 *)(a2 + 184);
          uint64_t v64 = *(void *)(a2 + 104);
          uint64_t v65 = *(void *)(a2 + 112);
          uint64_t v66 = *(void *)(a2 + 192);
          do
          {
            long long v131 = *(_OWORD *)&v134[0].__locale_;
            if (v60 != v61)
            {
              float v67 = v61;
              unint64_t v68 = v62;
              do
              {
                uint64_t v69 = *v67++;
                *((void *)&v131 + v69) = 0;
                --v68;
              }
              while (v68);
            }
            uint64_t v70 = 0;
            uint64_t v71 = 0;
            char v72 = 1;
            do
            {
              char v73 = v72;
              v71 += *((void *)&v149 + v70) * *((void *)&v131 + v70);
              uint64_t v70 = 1;
              char v72 = 0;
            }
            while ((v73 & 1) != 0);
            if (!v63) {
              uint64_t v71 = v131 * v64 + *((void *)&v131 + 1) * v65;
            }
            *(_DWORD *)(v58 + 4 * v59) = *(_DWORD *)(a2 + 248) * *(_DWORD *)(v66 + 4 * v71);
            for (uint64_t k = 1; k != -1; --k)
            {
              long long v75 = (std::locale::__imp *)((char *)v134[k].__locale_ + 1);
              v134[k].__locale_ = v75;
              if (v75 != *(std::locale::__imp **)((char *)&v128 + k * 8)) {
                break;
              }
              v134[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v107 = 0;
        long long v109 = (uint64_t *)*((void *)&v138 + 1);
        uint64_t v108 = (uint64_t *)v139;
        unint64_t v110 = (uint64_t)(v139 - *((void *)&v138 + 1)) >> 3;
        if (v110 <= 1) {
          unint64_t v110 = 1;
        }
        uint64_t v111 = *(void *)(v3 + 56);
        uint64_t v112 = *(void *)(v3 + 64);
        int v113 = *(unsigned __int8 *)(a2 + 184);
        uint64_t v114 = *(void *)(a2 + 104);
        uint64_t v115 = *(void *)(a2 + 112);
        uint64_t v116 = *(void *)(a2 + 192);
        do
        {
          float v118 = v134[0].__locale_;
          uint64_t v117 = v134[1].__locale_;
          long long v131 = *(_OWORD *)&v134[0].__locale_;
          if (v108 != v109)
          {
            float v119 = v109;
            unint64_t v120 = v110;
            do
            {
              uint64_t v121 = *v119++;
              *((void *)&v131 + v121) = 0;
              --v120;
            }
            while (v120);
          }
          uint64_t v122 = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          do
          {
            char v125 = v124;
            v123 += *((void *)&v149 + v122) * *((void *)&v131 + v122);
            uint64_t v122 = 1;
            char v124 = 0;
          }
          while ((v125 & 1) != 0);
          if (!v113) {
            uint64_t v123 = v131 * v114 + *((void *)&v131 + 1) * v115;
          }
          *(_DWORD *)(v58 + 4 * ((void)v118 * v111 + (void)v117 * v112)) = *(_DWORD *)(a2 + 248)
                                                                             * *(_DWORD *)(v116 + 4 * v123);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v127 = (std::locale::__imp *)((char *)v134[m].__locale_ + 1);
            v134[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v128 + m * 8)) {
              break;
            }
            v134[m].__locale_ = 0;
          }
          ++v107;
        }
        while (v107 != v57);
      }
    }
    return sub_25B3F9500((uint64_t)&v137);
  }
  return result;
}

void sub_25B55C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_25B55C064(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      uint64_t result = MEMORY[0x261163EC0](result, 0x1000C8052888210);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B55C0AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1A88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B55C100(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_25B55C120(void *a1)
{
  *a1 = &unk_2708F1A68;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B55C18C(void *a1)
{
  *a1 = &unk_2708F1A68;
  int8x8_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

id sub_25B55C1D8(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 8))
  {
    id v4 = objc_alloc(MEMORY[0x263EFF980]);
    uint64_t v8 = objc_msgSend_initWithCapacity_(v4, v5, *(void *)(a1 + 8));
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9)
    {
      uint64_t v10 = *(void **)a1;
      uint64_t v11 = *(void *)a1 + 16 * v9;
      do
      {
        int v12 = objc_alloc_init(RS3DSurface);
        uint64_t v14 = (uint64_t)v12;
        *(void *)&long long v15 = *v10;
        *(void *)&long long v16 = v10[1];
        long long v17 = v15;
        HIDWORD(v17) = HIDWORD(v21);
        long long v18 = v16;
        HIDWORD(v18) = v24;
        HIDWORD(v16) = v25;
        HIDWORD(v15) = v26;
        int v22 = v24;
        long long v23 = v17;
        src[0] = v17;
        src[1] = v18;
        src[2] = v16;
        src[3] = v15;
        if (v12)
        {
          objc_copyStruct(&v12[1], src, 64, 1, 0);
          *(_DWORD *)(v14 + 108) = 1065353216;
          *(unsigned char *)(v14 + 104) = a2;
        }
        objc_msgSend_addObject_(v8, v13, v14, v21);

        v10 += 2;
        long long v21 = v23;
        int v24 = v22;
      }
      while (v10 != (void *)v11);
    }
    uint64_t v19 = objc_msgSend_copy(v8, v6, v7, v21);
  }
  else
  {
    uint64_t v19 = (void *)MEMORY[0x263EFFA68];
  }

  return v19;
}

void sub_25B55C31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B55C480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B55C6F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B55C788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B55C798(uint64_t a1, int *a2, int *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
    char v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v10 = sub_25B406B20(v9, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v11 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    int v12 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = 0;
  uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  long long v15 = (void *)(a1 + 8);
  uint64_t v16 = *a3;
  v31[0] = *a2;
  v31[1] = v16;
  uint64_t v26 = 0;
  uint64_t v17 = 1;
  long long v18 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v28[0].__locale_ = 0u;
  uint64_t v19 = (std::locale::__imp **)v31;
  do
  {
    uint64_t v20 = *v19;
    if ((unint64_t)*v19 >= *v15)
    {
      sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v14, (uint64_t)" ", 1);
      long long v21 = (void *)std::ostream::operator<<();
      sub_25B406B20(v21, (uint64_t)" ", 1);
      sub_25B406B20(v21, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      int v22 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v26, "=", (uint64_t)v19, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      long long v23 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v20 = *v19;
    }
    v28[v13].__locale_ = v20;
    uint64_t v19 = (std::locale::__imp **)&v31[v17];
    ++v15;
    uint64_t v26 = ++v13;
    uint64_t v17 = 2;
  }
  while (v13 != 2);
  return *(void *)(a1 + 144)
       + *(void *)(a1 + 56) * (uint64_t)v28[0].__locale_
       + *(void *)(a1 + 64) * (uint64_t)v28[1].__locale_;
}

void sub_25B55CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

void sub_25B55CBE8(void *a1, void **a2, int a3, float a4, float a5)
{
  long long v131 = &unk_2708F1C28;
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t v139 = 0;
  long long v140 = 0;
  __int16 v141 = 257;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v143 = &unk_2708F1D50;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  __int16 v153 = 257;
  unsigned int v156 = 0;
  float32x4_t v155 = 0;
  uint64_t v157 = 0;
  long long __p = 0;
  unsigned int v159 = 0;
  unint64_t v161 = 0;
  int v127 = a3;
  float v128 = a4;
  float v129 = a5;
  unint64_t v7 = a1[1];
  uint64_t v8 = a1 + 1;
  int v9 = (int)(float)((2 * (a1[2] + v7)) | 1);
  int32x2_t v175 = (int32x2_t)(v9 | 0xB400000000);
  long long v130 = xmmword_25B5F16D0;
  if (v9 >= 1) {
    --v9;
  }
  int v158 = v9 >> 1;
  sub_25B50CC50(v162, (int *)&v175 + 1, (int *)&v175);
  sub_25B4466F4((uint64_t)&v163, v162);
  uint64_t v104 = a2;
  long long v136 = v168;
  long long v137 = v169;
  long long v138 = v170;
  long long v132 = v164;
  long long v133 = v165;
  long long v134 = v166;
  long long v135 = v167;
  uint64_t v10 = v171;
  uint64_t v11 = v172;
  if (v172) {
    atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v139 = v10;
  long long v140 = v11;
  uint64_t v142 = v174;
  __int16 v141 = v173;
  uint64_t v163 = &unk_2708F1C28;
  if (v172) {
    sub_25B404120(v172);
  }
  sub_25B43E5EC((char **)&v155, 0x168uLL);
  uint64_t v12 = 0;
  uint64_t v13 = (char *)v155;
  int32x4_t v14 = (int32x4_t)xmmword_25B5F16E0;
  do
  {
    int32x4_t v119 = v14;
    v15.i64[0] = v14.i32[2];
    v15.i64[1] = v14.i32[3];
    float64x2_t v16 = vcvtq_f64_s64(v15);
    v15.i64[0] = v119.i32[0];
    v15.i64[1] = v119.i32[1];
    float64x2_t v115 = vmulq_n_f64(vcvtq_f64_s64(v15), *((double *)&v130 + 1));
    float64x2_t v110 = vmulq_n_f64(v16, *((double *)&v130 + 1));
    __double2 v17 = __sincos_stret(v110.f64[1]);
    __double2 v19 = __sincos_stret(v110.f64[0]);
    v18.f64[0] = v19.__cosval;
    v18.f64[1] = v17.__cosval;
    float64x2_t v107 = v18;
    __double2 v20 = __sincos_stret(v115.f64[1]);
    __double2 v23 = __sincos_stret(v115.f64[0]);
    v22.f64[0] = v23.__cosval;
    v21.f64[0] = v23.__sinval;
    v22.f64[1] = v20.__cosval;
    v176.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22), v107);
    v24.f64[0] = v19.__sinval;
    v24.f64[1] = v17.__sinval;
    v21.f64[1] = v20.__sinval;
    v176.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21), v24);
    int v25 = (float *)&v13[v12];
    vst2q_f32(v25, v176);
    v176.val[0].i64[0] = 0x400000004;
    v176.val[0].i64[1] = 0x400000004;
    int32x4_t v14 = vaddq_s32(v119, (int32x4_t)v176.val[0]);
    v12 += 32;
  }
  while (v12 != 1440);
  sub_25B496124((uint64_t)&v163, 0, v8);
  long long v148 = v168;
  long long v149 = v169;
  long long v150 = v170;
  long long v144 = v164;
  long long v145 = v165;
  long long v146 = v166;
  long long v147 = v167;
  uint64_t v26 = v171;
  std::locale v27 = v172;
  if (v172) {
    atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v151 = v26;
  uint64_t v152 = v27;
  uint64_t v154 = v174;
  __int16 v153 = v173;
  uint64_t v163 = &unk_2708F1D50;
  if (v172) {
    sub_25B404120(v172);
  }
  sub_25B443B1C(&v159, 0x1000uLL);
  unint64_t v29 = a1[13];
  if (v29)
  {
    unint64_t v30 = 0;
    uint64_t v31 = a1[18];
    do
    {
      if (*(unsigned char *)(v31 + v30))
      {
        v28.i32[0] = v30 % v7;
        v28.i32[1] = v30 / v7;
        uint64_t v32 = (char *)__p;
        if ((unint64_t)__p >= v161)
        {
          int32x4_t v120 = v28;
          int64_t v34 = ((unsigned char *)__p - (unsigned char *)v159) >> 3;
          if ((unint64_t)(v34 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v35 = (uint64_t)(v161 - (void)v159) >> 2;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v161 - (unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)sub_25B3FCAD4(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          uint64_t v38 = (void *)(v36 + 8 * v34);
          v28.i64[1] = v120.i64[1];
          void *v38 = v120.i64[0];
          uint64_t v33 = v38 + 1;
          uint64_t v39 = (char *)__p;
          uint64_t v40 = (char *)v159;
          if (__p != v159)
          {
            do
            {
              uint64_t v41 = *((void *)v39 - 1);
              v39 -= 8;
              *--uint64_t v38 = v41;
            }
            while (v39 != v40);
            uint64_t v39 = (char *)v159;
          }
          unsigned int v159 = v38;
          long long __p = v33;
          unint64_t v161 = v36 + 8 * v37;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long __p = v28.i64[0];
          uint64_t v33 = v32 + 8;
        }
        long long __p = v33;
        *(unsigned char *)(v154 + v30) = 1;
        unint64_t v29 = a1[13];
      }
      ++v30;
    }
    while (v29 > v30);
  }
  long long v164 = 0uLL;
  uint64_t v163 = 0;
  sub_25B443B1C(&v163, 0x1000uLL);
  if ((int)((unint64_t)((unsigned char *)__p - (unsigned char *)v159) >> 3) >= 1)
  {
    uint64_t v43 = ((unint64_t)((unsigned char *)__p - (unsigned char *)v159) >> 3);
    unint64_t v44 = -1;
    do
    {
      unint64_t v44 = HIDWORD(v44) + 4164903690 * v44;
      int v45 = v127;
      *(void *)&long long v42 = *((void *)v159 + v44 % v43);
      uint64_t v46 = v43 - 1;
      *((void *)v159 + v44 % v43) = *((void *)v159 + (v43 - 1));
      LODWORD(v162[0]) = DWORD1(v42);
      int v116 = v42;
      int32x4_t v121 = (int32x4_t)v42;
      v175.i32[1] = v42;
      if (*(unsigned char *)sub_25B55C798((uint64_t)&v143, (int *)v162, (int *)&v175 + 1))
      {
        uint64_t v105 = v43 - 1;
        unint64_t v106 = v44;
        uint64_t v108 = v43;
        int v47 = v45 - 1;
        v48.i64[1] = v121.i64[1];
        unint64_t v49 = v132;
        LODWORD(v162[0]) = 0;
        if ((void)v132)
        {
          uint64_t v50 = 0;
          unint64_t v51 = 0;
          int v52 = 0;
          do
          {
            v175.i32[1] = v158
                        + llroundf((float)(*(float *)((char *)v155 + v50 + 4) * (float)v121.i32[1])+ (float)((float)v116 * *(float *)((char *)v155 + v50)));
            uint64_t v53 = (_DWORD *)sub_25B446BB0((uint64_t)&v131, (int *)v162, (int *)&v175 + 1);
            int v54 = (*v53)++;
            if (v54 >= v47)
            {
              int v47 = v54 + 1;
              int v52 = v51;
            }
            LODWORD(v162[0]) = ++v51;
            v50 += 8;
          }
          while (v49 > v51);
        }
        else
        {
          int v52 = 0;
        }
        unint64_t v44 = v106;
        uint64_t v46 = v43 - 1;
        if (v47 >= v127)
        {
          uint64_t v55 = 0;
          float v56 = *((float *)v155 + 2 * v52);
          float v57 = *((float *)v155 + 2 * v52 + 1);
          float v58 = fabsf(v57);
          v59.i32[1] = v121.i32[1];
          v60.i32[0] = v121.i32[0];
          float v61 = fabsf(v56);
          unsigned int v62 = llroundf((float)(v57 * -65536.0) / v61);
          if (v56 > 0.0) {
            int v63 = 1;
          }
          else {
            int v63 = -1;
          }
          double v64 = COERCE_DOUBLE(__PAIR64__(v63, v62));
          if (v57 < 0.0) {
            int v65 = 1;
          }
          else {
            int v65 = -1;
          }
          unsigned int v66 = llroundf((float)(v56 * 65536.0) / v58);
          if (v58 > v61)
          {
            v60.i32[1] = (v121.i32[1] << 16) | 0x8000;
            int32x2_t v67 = v60;
          }
          else
          {
            v59.i32[0] = (v116 << 16) | 0x8000;
            int32x2_t v67 = v59;
          }
          if (v58 > v61) {
            double v68 = COERCE_DOUBLE(__PAIR64__(v66, v65));
          }
          else {
            double v68 = v64;
          }
          BOOL v69 = v58 > v61;
          long long v70 = v144;
          int32x2_t v71 = vneg_s32(*(int32x2_t *)&v68);
          int32x2_t v126 = v67;
          *(_DWORD *)((unint64_t)&v126 | (4 * v69)) = *(__int16 *)(((unint64_t)&v126 | (4 * v69)) + 2);
          *(int32x2_t *)v48.i8 = v126;
          int32x4_t v111 = v48;
          __int32 v109 = v126.i32[0];
          BOOL v72 = v126.i32[0] >= 0 && *((void *)&v70 + 1) > (unint64_t)v126.u32[0];
          int v73 = v72;
          int v112 = v73;
          char v74 = 1;
          int32x2_t v75 = *(int32x2_t *)&v68;
          do
          {
            char v117 = v74;
            if (v112)
            {
              int v76 = 0;
              __int32 v77 = v109;
              int32x4_t v48 = v111;
              int32x2_t v78 = v67;
              do
              {
                if ((unint64_t)v70 <= v48.i32[1]) {
                  break;
                }
                int32x4_t v122 = v48;
                int32x2_t v175 = (int32x2_t)__PAIR64__(v48.u32[1], v77);
                if (*(unsigned char *)sub_25B55C798((uint64_t)&v143, (int *)&v175 + 1, (int *)&v175))
                {
                  int v76 = 0;
                  v48.i64[1] = v122.i64[1];
                  *((void *)v162 + v55) = v122.i64[0];
                }
                else if (v129 < (float)++v76)
                {
                  break;
                }
                int32x2_t v78 = vadd_s32(v78, v75);
                int32x2_t v125 = v78;
                *(_DWORD *)((unint64_t)&v125 | (4 * v69)) = *(__int16 *)(((unint64_t)&v125 | (4 * v69)) + 2);
                *(int32x2_t *)v48.i8 = v125;
                __int32 v77 = v125.i32[0];
                if (v125.i32[0] < 0) {
                  break;
                }
              }
              while (*((void *)&v70 + 1) > (unint64_t)v125.u32[0]);
            }
            char v74 = 0;
            int32x2_t v75 = v71;
            uint64_t v55 = 1;
          }
          while ((v117 & 1) != 0);
          uint64_t v113 = *(void *)&v162[0];
          int32x2_t v79 = vsub_s32(*(int32x2_t *)&v162[0], *(int32x2_t *)((char *)v162 + 8));
          int v80 = v79.i32[0];
          if (v79.i32[0] < 0) {
            int v80 = -v79.i32[0];
          }
          if (v128 <= (float)v80)
          {
            BOOL v82 = 1;
          }
          else
          {
            int v81 = v79.i32[1];
            if (v79.i32[1] < 0) {
              int v81 = -v79.i32[1];
            }
            BOOL v82 = v128 <= (float)v81;
          }
          uint64_t v83 = 0;
          char v84 = 1;
          do
          {
            char v118 = v84;
            int32x2_t v85 = v67;
            do
            {
              int32x2_t v124 = v85;
              *(_DWORD *)((unint64_t)&v124 | (4 * v69)) = *(__int16 *)(((unint64_t)&v124 | (4 * v69)) + 2);
              *(int32x2_t *)v48.i8 = v124;
              int v86 = v124.i32[0];
              int32x4_t v123 = v48;
              int32x2_t v175 = v124;
              if (*(unsigned char *)sub_25B55C798((uint64_t)&v143, (int *)&v175 + 1, (int *)&v175))
              {
                if (v82)
                {
                  unint64_t v87 = v132;
                  v175.i32[1] = 0;
                  if ((void)v132)
                  {
                    uint64_t v88 = 0;
                    unint64_t v89 = 0;
                    do
                    {
                      v175.i32[0] = v158
                                  + llroundf((float)(*(float *)((char *)v155 + v88 + 4) * (float)v123.i32[1])+ (float)((float)v86 * *(float *)((char *)v155 + v88)));
                      long long v90 = (_DWORD *)sub_25B446BB0((uint64_t)&v131, (int *)&v175 + 1, (int *)&v175);
                      --*v90;
                      v175.i32[1] = ++v89;
                      v88 += 8;
                    }
                    while (v87 > v89);
                  }
                }
                int32x2_t v175 = (int32x2_t)__PAIR64__(v123.u32[1], v86);
                *(unsigned char *)sub_25B55C798((uint64_t)&v143, (int *)&v175 + 1, (int *)&v175) = 0;
              }
              *((void *)&v42 + 1) = v123.i64[1];
              uint32x2_t v91 = (uint32x2_t)vceq_s32(*(int32x2_t *)v123.i8, *(int32x2_t *)((char *)v162 + 8 * v83));
              int32x2_t v85 = vadd_s32(v85, *(int32x2_t *)&v68);
            }
            while ((vpmin_u32(v91, v91).u32[0] & 0x80000000) == 0);
            char v84 = 0;
            double v68 = *(double *)&v71;
            uint64_t v83 = 1;
          }
          while ((v118 & 1) != 0);
          if (v82)
          {
            *(void *)&long long v42 = v113;
            *((void *)&v42 + 1) = *((void *)&v162[0] + 1);
            uint64_t v93 = v104[1];
            unint64_t v92 = (unint64_t)v104[2];
            if ((unint64_t)v93 >= v92)
            {
              long long v114 = v42;
              uint64_t v95 = ((char *)v93 - (unsigned char *)*v104) >> 4;
              if ((unint64_t)(v95 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              uint64_t v96 = v92 - (void)*v104;
              uint64_t v97 = v96 >> 3;
              if (v96 >> 3 <= (unint64_t)(v95 + 1)) {
                uint64_t v97 = v95 + 1;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v97;
              }
              if (v98) {
                unint64_t v98 = (unint64_t)sub_25B3FFAEC(v98);
              }
              else {
                uint64_t v99 = 0;
              }
              uint64_t v100 = (_OWORD *)(v98 + 16 * v95);
              *uint64_t v100 = v114;
              uint64_t v94 = v100 + 1;
              uint64_t v102 = (char *)*v104;
              uint64_t v101 = (char *)v104[1];
              if (v101 != *v104)
              {
                do
                {
                  long long v103 = *((_OWORD *)v101 - 1);
                  v101 -= 16;
                  *--uint64_t v100 = v103;
                }
                while (v101 != v102);
                uint64_t v101 = (char *)*v104;
              }
              void *v104 = v100;
              v104[1] = v94;
              v104[2] = (void *)(v98 + 16 * v99);
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *uint64_t v93 = v42;
              uint64_t v94 = v93 + 1;
            }
            v104[1] = v94;
          }
          uint64_t v43 = v108;
          unint64_t v44 = v106;
          uint64_t v46 = v105;
        }
      }
      BOOL v72 = v43 <= 1;
      uint64_t v43 = v46;
    }
    while (!v72);
  }
  if (v163) {
    operator delete(v163);
  }
  if (v159)
  {
    long long __p = v159;
    operator delete(v159);
  }
  if (v155)
  {
    unsigned int v156 = v155;
    operator delete(v155);
  }
  long long v143 = &unk_2708F1D50;
  if (v152) {
    sub_25B404120(v152);
  }
  long long v131 = &unk_2708F1C28;
  if (v140) {
    sub_25B404120(v140);
  }
}

void sub_25B55D624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (STACK[0x278]) {
    operator delete((void *)STACK[0x278]);
  }
  sub_25B55D6C4(&a33);
  _Unwind_Resume(a1);
}

void *sub_25B55D6C4(void *a1)
{
  int8x8_t v2 = (void *)a1[46];
  if (v2)
  {
    a1[47] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[42];
  if (v3)
  {
    a1[43] = v3;
    operator delete(v3);
  }
  a1[23] = &unk_2708F1D50;
  id v4 = (std::__shared_weak_count *)a1[39];
  if (v4) {
    sub_25B404120(v4);
  }
  a1[4] = &unk_2708F1C28;
  uint64_t v5 = (std::__shared_weak_count *)a1[20];
  if (v5) {
    sub_25B404120(v5);
  }
  return a1;
}

void sub_25B55D908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_25B55D9D4(__n128 a1, double a2, uint64_t a3, const char *a4, uint64_t a5)
{
  void v17[3] = *MEMORY[0x263EF8340];
  double v16 = a1.n128_f64[1];
  uint64_t v5 = objc_msgSend_numberWithDouble_(NSNumber, a4, a5);
  v17[0] = v5;
  uint64_t v8 = objc_msgSend_numberWithDouble_(NSNumber, v6, v7, v16);
  v17[1] = v8;
  uint64_t v11 = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, a2);
  v17[2] = v11;
  uint64_t v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v12, (uint64_t)v17, 3);

  return v13;
}

void sub_25B55DABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B55DAEC(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = a1[2].u64[0];
  uint64_t v8 = a1[2].i64[1];
  if (v8 != v9)
  {
    uint64_t v10 = v8 - 32;
    uint64_t v11 = (void (***)(void))(v8 - 32);
    uint64_t v12 = (void (***)(void))(v8 - 32);
    do
    {
      uint64_t v13 = *v12;
      v12 -= 4;
      (*v13)(v11);
      v10 -= 32;
      BOOL v14 = v11 == (void (***)(void))v9;
      uint64_t v11 = v12;
    }
    while (!v14);
  }
  unint64_t v15 = a1[3].u64[0];
  a1[2].i64[1] = v9;
  if (v9 >= v15)
  {
    uint64_t v18 = a1[2].i64[0];
    uint64_t v19 = (uint64_t)(v9 - v18) >> 5;
    if ((unint64_t)(v19 + 1) >> 59) {
      goto LABEL_42;
    }
    uint64_t v20 = v15 - v18;
    uint64_t v21 = v20 >> 4;
    if (v20 >> 4 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    int v54 = a1 + 3;
    if (v22) {
      unint64_t v22 = (unint64_t)sub_25B3FBC9C(v22);
    }
    else {
      uint64_t v23 = 0;
    }
    unint64_t v24 = v22 + 32 * v19;
    *(void *)unint64_t v24 = &off_2708F1B18;
    long long v25 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(v24 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(v24 + 8) = v25;
    uint64_t v26 = a1[2].i64[0];
    unint64_t v27 = a1[2].u64[1];
    if (v27 == v26)
    {
      int64x2_t v31 = vdupq_n_s64(v27);
      unint64_t v29 = v22 + 32 * v19;
    }
    else
    {
      unint64_t v28 = v24 - 32;
      unint64_t v29 = v22 + 32 * v19;
      do
      {
        *(void *)(v29 - 32) = &off_2708F1B18;
        v29 -= 32;
        long long v30 = *(_OWORD *)(v27 - 24);
        *(_DWORD *)(v29 + 24) = *(_DWORD *)(v27 - 8);
        *(_OWORD *)(v29 + 8) = v30;
        v28 -= 32;
        v27 -= 32;
      }
      while (v27 != v26);
      int64x2_t v31 = a1[2];
    }
    unint64_t v17 = v24 + 32;
    a1[2].i64[0] = v29;
    a1[2].i64[1] = v24 + 32;
    int64x2_t v52 = v31;
    uint64_t v32 = a1[3].i64[0];
    a1[3].i64[0] = v22 + 32 * v23;
    uint64_t v53 = v32;
    uint64_t v51 = v31.i64[0];
    sub_25B43C884((uint64_t)&v51);
  }
  else
  {
    *(void *)unint64_t v9 = &off_2708F1B18;
    long long v16 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(v9 + 8) = v16;
    unint64_t v17 = v9 + 32;
  }
  a1[2].i64[1] = v17;
  unint64_t v33 = a1[3].u64[0];
  if (v17 < v33)
  {
    *(void *)unint64_t v17 = &off_2708F1B18;
    long long v34 = *(_OWORD *)(a3 + 8);
    *(_DWORD *)(v17 + 24) = *(_DWORD *)(a3 + 24);
    *(_OWORD *)(v17 + 8) = v34;
    unint64_t v35 = v17 + 32;
    goto LABEL_39;
  }
  uint64_t v36 = a1[2].i64[0];
  uint64_t v37 = (uint64_t)(v17 - v36) >> 5;
  if ((unint64_t)(v37 + 1) >> 59) {
LABEL_42:
  }
    sub_25B3FBC4C();
  uint64_t v38 = v33 - v36;
  uint64_t v39 = v38 >> 4;
  if (v38 >> 4 <= (unint64_t)(v37 + 1)) {
    uint64_t v39 = v37 + 1;
  }
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v40 = v39;
  }
  int v54 = a1 + 3;
  if (v40) {
    unint64_t v40 = (unint64_t)sub_25B3FBC9C(v40);
  }
  else {
    uint64_t v41 = 0;
  }
  unint64_t v42 = v40 + 32 * v37;
  *(void *)unint64_t v42 = &off_2708F1B18;
  long long v43 = *(_OWORD *)(a3 + 8);
  *(_DWORD *)(v42 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)(v42 + 8) = v43;
  uint64_t v44 = a1[2].i64[0];
  unint64_t v45 = a1[2].u64[1];
  if (v45 == v44)
  {
    int64x2_t v49 = vdupq_n_s64(v45);
    unint64_t v47 = v40 + 32 * v37;
  }
  else
  {
    unint64_t v46 = v42 - 32;
    unint64_t v47 = v40 + 32 * v37;
    do
    {
      *(void *)(v47 - 32) = &off_2708F1B18;
      v47 -= 32;
      long long v48 = *(_OWORD *)(v45 - 24);
      *(_DWORD *)(v47 + 24) = *(_DWORD *)(v45 - 8);
      *(_OWORD *)(v47 + 8) = v48;
      v46 -= 32;
      v45 -= 32;
    }
    while (v45 != v44);
    int64x2_t v49 = a1[2];
  }
  unint64_t v35 = v42 + 32;
  a1[2].i64[0] = v47;
  a1[2].i64[1] = v42 + 32;
  int64x2_t v52 = v49;
  uint64_t v50 = a1[3].i64[0];
  a1[3].i64[0] = v40 + 32 * v41;
  uint64_t v53 = v50;
  uint64_t v51 = v49.i64[0];
  sub_25B43C884((uint64_t)&v51);
LABEL_39:
  a1[2].i64[1] = v35;
  if (!*(unsigned char *)(a4 + 137)) {
    sub_25B55DE40((uint64_t)a1, a4);
  }
}

void sub_25B55DE40(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(int32x2_t **)(a1 + 32);
  float32x2_t v3 = vcvt_f32_s32(v2[1]);
  float32x2_t v4 = vcvt_f32_s32(v2[5]);
  float32x2_t v5 = vsub_f32(v3, v4);
  int32x2_t v6 = (int32x2_t)vmul_f32(v5, v5);
  *(float *)v6.i32 = sqrtf(vaddv_f32((float32x2_t)v6));
  if (*(float *)v6.i32 > 0.0)
  {
    *(_DWORD *)(a1 + 56) = 0;
    int v8 = (int)(float)(*(float *)v6.i32 + 0.5);
    unint64_t v9 = *(float **)(a1 + 64);
    *(void *)(a1 + 72) = v9;
    if ((v8 & 0x80000000) == 0)
    {
      int v11 = 0;
      float32x2_t v12 = vdiv_f32(vsub_f32(v4, v3), (float32x2_t)vdup_lane_s32(v6, 0));
      do
      {
        float32x2_t v13 = vmla_n_f32(v3, v12, (float)v11);
        signed int v14 = vcvtms_s32_f32(v13.f32[1]);
        uint64_t v15 = *(int *)(a2 + 16);
        uint64_t v16 = (int)vcvtms_s32_f32(v13.f32[0]);
        uint64_t v17 = v16 + 1;
        uint64_t v18 = *(void *)(a2 + 144) + 4 * (int)v15 * v16 + 4 * v14;
        float v19 = 0.0;
        do
        {
          uint64_t v20 = 0;
          float v21 = 1.0 - vabds_f32(v13.f32[0], (float)(int)v16);
          do
          {
            if ((v16 & 0x8000000000000000) == 0
              && v16 < *(int *)(a2 + 8)
              && ((v14 + v20) & 0x8000000000000000) == 0
              && v14 + v20 < v15)
            {
              float v19 = v19
                  + (float)((float)(v21 * (float)(1.0 - vabds_f32(v13.f32[1], (float)(v14 + v20))))
                          * *(float *)(v18 + 4 * v20));
            }
            ++v20;
          }
          while (v20 != 2);
          v18 += 4 * v15;
          BOOL v22 = v16++ == v17;
        }
        while (!v22);
        unint64_t v23 = *(void *)(a1 + 80);
        if ((unint64_t)v9 >= v23)
        {
          unint64_t v24 = *(float **)(a1 + 64);
          uint64_t v25 = v9 - v24;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v27 = v23 - (void)v24;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            unint64_t v28 = (unint64_t)sub_25B3FBC64(v28);
            unint64_t v24 = *(float **)(a1 + 64);
            unint64_t v9 = *(float **)(a1 + 72);
          }
          else
          {
            uint64_t v29 = 0;
          }
          long long v30 = (float *)(v28 + 4 * v25);
          *long long v30 = v19;
          int64x2_t v31 = v30 + 1;
          while (v9 != v24)
          {
            int v32 = *((_DWORD *)v9-- - 1);
            *((_DWORD *)v30-- - 1) = v32;
          }
          *(void *)(a1 + 64) = v30;
          *(void *)(a1 + 72) = v31;
          *(void *)(a1 + 80) = v28 + 4 * v29;
          if (v24) {
            operator delete(v24);
          }
          unint64_t v9 = v31;
        }
        else
        {
          *v9++ = v19;
        }
        *(void *)(a1 + 72) = v9;
        BOOL v22 = v11++ == v8;
      }
      while (!v22);
      unint64_t v33 = *(float **)(a1 + 64);
      if (v9 != v33)
      {
        uint64_t v34 = v9 - v33;
        float v35 = 0.0;
        do
        {
          float v36 = *v33++;
          float v35 = v35 + v36;
        }
        while (v33 != v9);
        *(float *)(a1 + 56) = v35 / (float)(unint64_t)v34;
      }
    }
  }
}

void sub_25B55E080(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x555555555555555) {
      sub_25B3FBC4C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_25B467D14(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 48 * v8;
    *(void *)unint64_t v13 = &unk_2708F2120;
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v13 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(v13 + 16) = v14;
    unint64_t v15 = *a1;
    unint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64(v16);
      unint64_t v18 = v11 + 48 * v8;
    }
    else
    {
      uint64_t v17 = v11 + 48 * v8 - 48;
      unint64_t v18 = v11 + 48 * v8;
      do
      {
        *(void *)(v18 - 48) = &unk_2708F2120;
        v18 -= 48;
        long long v19 = *(_OWORD *)(v16 - 32);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v16 - 16);
        *(_OWORD *)(v18 + 16) = v19;
        v17 -= 48;
        v16 -= 48;
      }
      while (v16 != v15);
      int64x2_t v20 = *(int64x2_t *)a1;
    }
    unint64_t v7 = v13 + 48;
    *a1 = v18;
    a1[1] = v13 + 48;
    a1[2] = v11 + 48 * v12;
    float v21 = (void *)v20.i64[0];
    if (v20.i64[1] != v20.i64[0])
    {
      uint64_t v22 = v20.i64[1] - 48;
      uint64_t v23 = v20.i64[1] - 48;
      unint64_t v24 = (void (***)(uint64_t))(v20.i64[1] - 48);
      do
      {
        uint64_t v25 = *v24;
        v24 -= 6;
        (*v25)(v23);
        v22 -= 48;
        BOOL v26 = v23 == (void)v21;
        uint64_t v23 = (uint64_t)v24;
      }
      while (!v26);
    }
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(void *)unint64_t v4 = &unk_2708F2120;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(v4 + 16) = v6;
    unint64_t v7 = v4 + 48;
  }
  a1[1] = v7;
}

uint64_t sub_25B55E274(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1B88;
  float32x2_t v3 = (void **)(a1 + 64);
  sub_25B55E2EC(&v3);
  float32x2_t v3 = (void **)(a1 + 40);
  sub_25B55E2EC(&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_25B55E2EC(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 120;
      unint64_t v7 = v4 - 120;
      unint64_t v8 = v4 - 120;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 120;
        (*v9)(v7);
        v6 -= 120;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B55E3AC(uint64_t a1)
{
  sub_25B55E274(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B55E3E8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B43BB78((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_25B55E440(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        sub_25B43AEC0(&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B55E4D4(uint64_t a1, uint64_t *a2)
{
  long long v6 = *(void (****)(void))(a1 + 8);
  unint64_t v4 = *(void (****)(void))(a1 + 16);
  unint64_t v5 = (void *)(a1 + 8);
  if (v4 != v6)
  {
    unint64_t v7 = v4 - 14;
    unint64_t v8 = v4 - 14;
    unint64_t v9 = v4 - 14;
    do
    {
      BOOL v10 = *v9;
      v9 -= 14;
      (*v10)(v8);
      v7 -= 14;
      BOOL v11 = v8 == v6;
      unint64_t v8 = v9;
    }
    while (!v11);
  }
  *(void *)(a1 + 16) = v6;
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  unint64_t v15 = v5;
  while (v13 != v12)
  {
    sub_25B43B560(&v15, v13);
    v13 += 112;
  }

  return sub_25B55E8CC(a1);
}

uint64_t sub_25B55E5A8(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      BOOL v11 = (void *)*a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 112;
        uint64_t v13 = (void (***)(void))(v10 - 112);
        long long v14 = (void (***)(void))(v10 - 112);
        do
        {
          unint64_t v15 = *v14;
          v14 -= 14;
          (*v15)(v13);
          v12 -= 112;
          BOOL v16 = v13 == (void (***)(void))v9;
          uint64_t v13 = v14;
        }
        while (!v16);
        BOOL v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      sub_25B3FBC4C();
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    if (v17 >= 0x124924924924924) {
      unint64_t v19 = 0x249249249249249;
    }
    else {
      unint64_t v19 = v18;
    }
    sub_25B55E878(a1, v19);
    uint64_t result = sub_25B55E7C4(a2, a3, a1[1]);
    goto LABEL_18;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 4) < a4)
  {
    uint64_t v21 = a2 + 16 * ((a1[1] - v9) >> 4);
    sub_25B43AE00(a2, v21, v9);
    uint64_t result = sub_25B55E7C4(v21, a3, a1[1]);
LABEL_18:
    a1[1] = result;
    return result;
  }
  uint64_t result = sub_25B43AE00(a2, a3, v9);
  uint64_t v22 = result;
  uint64_t v23 = a1[1];
  if (v23 != result)
  {
    uint64_t v24 = v23 - 112;
    uint64_t v25 = (uint64_t (***)(void))(v23 - 112);
    BOOL v26 = (uint64_t (***)(void))(v23 - 112);
    do
    {
      uint64_t v27 = *v26;
      v26 -= 14;
      uint64_t result = (*v27)(v25);
      v24 -= 112;
      BOOL v16 = v25 == (uint64_t (***)(void))v22;
      uint64_t v25 = v26;
    }
    while (!v16);
  }
  a1[1] = v22;
  return result;
}

void sub_25B55E7B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25B55E7BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B55E7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_25B43B1C8(a3 + v6, a1 + v6);
      v6 += 112;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

char *sub_25B55E878(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_25B3FBC4C();
  }
  uint64_t result = (char *)sub_25B43B5C4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_25B55E8CC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    int v3 = 0;
    float v4 = 0.0;
    do
    {
      float32x2_t v5 = vsub_f32(vcvt_f32_s32(*(int32x2_t *)(*(void *)(v2 + 32) + 8)), vcvt_f32_s32(*(int32x2_t *)(*(void *)(v2 + 32) + 40)));
      int v6 = (int)(float)(sqrtf(vaddv_f32(vmul_f32(v5, v5))) + 0.5) + 1;
      float v7 = (float)(*(float *)(v2 + 56) * (float)v6) + (float)(v4 * (float)v3);
      v3 += v6;
      float v4 = v7 / (float)v3;
      v2 += 112;
    }
    while (v2 != v1);
    *(float *)(result + 32) = v4;
  }
  return result;
}

void *sub_25B55E948(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      sub_25B3FBC4C();
    }
    int v6 = result;
    uint64_t result = sub_25B460930(a4);
    float v7 = result;
    *int v6 = result;
    v6[1] = result;
    std::locale v6[2] = &result[5 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v7[v9 / 8];
        void *v10 = &unk_2708F1C48;
        v7[v9 / 8 + 1] = 0;
        void v10[2] = 0;
        long long v10[3] = 0;
        uint64_t result = sub_25B55EB10(&v7[v9 / 8 + 1], *(void *)(a2 + v9 + 8), *(void *)(a2 + v9 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + v9 + 16) - *(void *)(a2 + v9 + 8)) >> 4));
        *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + v9 + 32);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      float v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_25B55EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_25B55EAB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    float v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    int v6 = v4;
    sub_25B43BBC8(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_25B55EB10(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_25B55E878(result, a4);
    uint64_t result = (void *)sub_25B55E7C4(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25B55EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_25B4331AC(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B55EB94(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      *(void *)(v8 - 40) = &unk_2708F1C48;
      *(void *)(v6 + v7 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t result = sub_25B55EB10((void *)(v6 + v7 - 32), *(void *)(v4 + v7 - 32), *(void *)(v4 + v7 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + v7 - 24) - *(void *)(v4 + v7 - 32)) >> 4));
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(v4 + v7 - 8);
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v9 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B55ECE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B55ED4C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    sub_25B43AEC0(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B55EDAC(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24))
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v26 = a1[2];
      do
      {
        int v8 = *(_DWORD *)(v4 + 24);
        if (v8 > *(_DWORD *)(a2 + 24) && v8 < *(_DWORD *)(a3 + 24))
        {
          sub_25B55EDAC(a1, a2, v4);
          sub_25B55EDAC(a1, v4, a3);
          uint64_t v10 = a1[10];
          int v11 = *(_DWORD *)(v4 + 24);
          uint64_t v12 = *(void *)(v10 + 24 * *(int *)(a2 + 24));
          uint64_t v13 = v12 + 40 * v11;
          uint64_t v15 = *(void *)(v13 + 8);
          long long v14 = (uint64_t *)(v13 + 8);
          if (v14[1] != v15)
          {
            int v16 = *(_DWORD *)(a3 + 24);
            uint64_t v17 = *(void *)(v10 + 24 * v11) + 40 * v16;
            uint64_t v19 = *(void *)(v17 + 8);
            uint64_t v18 = (uint64_t *)(v17 + 8);
            if (v18[1] != v19)
            {
              memset(v32, 0, sizeof(v32));
              uint64_t v20 = *v14;
              uint64_t v21 = v14[1];
              uint64_t i = v32;
              while (v20 != v21)
              {
                sub_25B43B560(&i, v20);
                v20 += 112;
              }
              uint64_t v22 = *v18;
              uint64_t v23 = v18[1];
              for (uint64_t i = v32; v22 != v23; v22 += 112)
                sub_25B43B560(&i, v22);
              uint64_t i = (uint64_t *)&unk_2708F1C48;
              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v28 = 0;
              float v31 = 0.0;
              sub_25B55E4D4((uint64_t)&i, v32);
              if (*(void *)(v12 + 40 * v16 + 16) == *(void *)(v12 + 40 * v16 + 8)
                || *(float *)(v12 + 40 * v16 + 32) < v31)
              {
                int v24 = *(_DWORD *)(a3 + 24);
                uint64_t v25 = *(void *)(a1[10] + 24 * *(int *)(a2 + 24));
                if ((uint64_t **)(v25 + 40 * v24) != &i) {
                  sub_25B55E5A8((uint64_t *)(v25 + 40 * v24 + 8), v28, v29, 0x6DB6DB6DB6DB6DB7 * ((v29 - v28) >> 4));
                }
                *(float *)(v25 + 40 * v24 + 32) = v31;
              }
              uint64_t i = (uint64_t *)&unk_2708F1C48;
              unint64_t v33 = (void **)&v28;
              sub_25B4331AC(&v33);
              uint64_t i = v32;
              sub_25B4331AC((void ***)&i);
              uint64_t v5 = v26;
            }
          }
        }
        v4 += 32;
      }
      while (v4 != v5);
    }
  }
}

void sub_25B55F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = a11;
  sub_25B4331AC(&a20);
  a20 = (void **)&a17;
  sub_25B4331AC(&a20);
  _Unwind_Resume(a1);
}

void sub_25B55F058(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  id v8 = a2;
  id v137 = a3;
  sub_25B4FDD60(*(void *)(a1 + 8));
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 && *(void *)(v9 + 64) == 1) {
    uint64_t v10 = *(__CVBuffer **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  CVPixelBufferLockBaseAddress(v10, 0);
  int v11 = sub_25B4FD9B4(*(__CVBuffer **)(a1 + 8));
  id v12 = v8;
  uint64_t v15 = v12;
  uint64_t v16 = *(void *)(a4 + 224);
  uint64_t v17 = *(void *)(a4 + 232);
  unint64_t v18 = v17 - v16;
  uint64_t v19 = (v17 - v16) >> 6;
  uint64_t v20 = (float32x4_t *)(v16 + ((v19 - 2) << 6));
  v21.i32[0] = *(_DWORD *)(v16 + 24);
  if (*(float *)v21.i32 < *(float *)(v16 + 40)) {
    v21.i32[0] = *(_DWORD *)(v16 + 40);
  }
  if ((int)(v18 >> 6) >= 5)
  {
    uint64_t v22 = (v18 >> 6) - 3 - 1;
    uint64_t v23 = (float *)(v16 + 104);
    do
    {
      if (*(float *)v21.i32 < *(v23 - 4)) {
        v21.i32[0] = *(__int32 *)(v23 - 4);
      }
      float v24 = *v23;
      v23 += 16;
      float v25 = v24;
      if (*(float *)v21.i32 < v24) {
        *(float *)v21.i32 = v25;
      }
      --v22;
    }
    while (v22);
  }
  if (v17 == v16)
  {
    float v155 = 0.05;
    *(_OWORD *)(a4 + 16) = xmmword_25B5F1700;
    *(_OWORD *)(a4 + 32) = xmmword_25B5F16F0;
    uint64_t v154 = (long long *)(a4 + 32);
    *(_DWORD *)(a4 + 48) = 12;
    *(_DWORD *)(a4 + 80) = 0;
    long long v150 = (float *)(a4 + 80);
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
    uint64_t v157 = (_OWORD *)(a4 + 16);
    *(void *)(a4 + 108) = 0x803CF5C28FLL;
    long long v148 = (int *)(a4 + 112);
    long long v149 = (float *)(a4 + 108);
  }
  else
  {
    float32x4_t v27 = v20[1];
    float32x4_t v26 = vsubq_f32(v27, v20[2]);
    *(float32x2_t *)v21.i8 = vcvt_f32_s32(vmax_s32((int32x2_t)__PAIR64__(vcvtps_s32_f32((float)((float)((float)(*(float *)v21.i32 - COERCE_FLOAT(v20[1].i64[1]))+ 0.3)* 0.0078125)* 100.0), vcvtps_s32_f32((float)((float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v26, v26)))+ 0.3)* 0.0039062)* 100.0)), (int32x2_t)0x300000003));
    *(float32x2_t *)v27.f32 = vdiv_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_n_s32(0x42C80000u));
    v21.i32[0] = 1028443341;
    int8x16_t v28 = vextq_s8(vextq_s8(v21, v21, 4uLL), (int8x16_t)v27, 0xCuLL);
    *(int8x16_t *)(a4 + 16) = v28;
    *(_OWORD *)(a4 + 32) = xmmword_25B5F16F0;
    uint64_t v154 = (long long *)(a4 + 32);
    *(_DWORD *)(a4 + 48) = 12;
    *(_DWORD *)(a4 + 80) = 0;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
    float v29 = *(float *)(v16 + ((v19 - 2) << 6) + 24);
    *(_DWORD *)(a4 + 108) = v27.i32[1];
    long long v149 = (float *)(a4 + 108);
    long long v150 = (float *)(a4 + 80);
    *(float *)(a4 + 80) = v29;
    uint64_t v157 = (_OWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 112) = 128;
    long long v148 = (int *)(a4 + 112);
    float v155 = *(float *)v28.i32;
    if (v18 >= 0x100)
    {
      long long v30 = *(_OWORD *)(v16 + 16);
      long long v31 = *(_OWORD *)(v16 + (v19 << 6) - 224);
      float32x2_t v32 = vsub_f32(*(float32x2_t *)&v31, *(float32x2_t *)&v30);
      int32x2_t v33 = (int32x2_t)vmul_f32(v32, v32);
      *(float *)v33.i32 = sqrtf(vaddv_f32((float32x2_t)v33));
      int32x2_t v34 = (int32x2_t)vdiv_f32(v32, (float32x2_t)vdup_lane_s32(v33, 0));
      LODWORD(v35) = vdup_lane_s32(v34, 1).u32[0];
      *((float *)&v35 + 1) = -*(float *)v34.i32;
      *(float32x2_t *)&long long v30 = vmul_f32(vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)&v31), (float32x2_t)0x3F0000003F000000);
      *((float *)&v30 + 2) = v29 + (float)((float)(v27.f32[1] * 12.0) * 0.5);
      *(_OWORD *)(a4 + 64) = v30;
      *(int32x2_t *)(a4 + 88) = v34;
      *(void *)(a4 + 96) = v35;
    }
  }
  float32x4_t v151 = v20[1];
  float32x4_t v145 = v20[2];
  int v158 = v12;
  uint64_t v153 = objc_msgSend_points(v12, v13, v14, v8);
  uint64_t v143 = objc_msgSend_semanticLabels(v15, v36, v37);
  uint64_t v144 = objc_msgSend_semanticVotes(v15, v38, v39);
  long long v40 = *v154;
  int v41 = *v154;
  if (v41 >= 0) {
    int v42 = *v154;
  }
  else {
    int v42 = v41 + 1;
  }
  int v147 = HIDWORD(*(void *)v154);
  if ((SDWORD1(v40) & 0x80000000) == 0) {
    int v43 = HIDWORD(*(void *)v154);
  }
  else {
    int v43 = DWORD1(v40) + 1;
  }
  LODWORD(v171) = *((void *)v154 + 1);
  int v142 = DWORD2(v40);
  LODWORD(v159) = DWORD1(v40);
  sub_25B50CC50(v183, (int *)&v171, (int *)&v159);
  sub_25B4466F4((uint64_t)__p, v183);
  sub_25B453C28(a4 + 256, (uint64_t)__p);
  __p[0] = &unk_2708F1C28;
  if (*((void *)&v210 + 1)) {
    sub_25B404120(*((std::__shared_weak_count **)&v210 + 1));
  }
  sub_25B50CC50(v183, (int *)&v171, (int *)&v159);
  sub_25B4466F4((uint64_t)__p, v183);
  sub_25B453C28(a4 + 408, (uint64_t)__p);
  __p[0] = &unk_2708F1C28;
  if (*((void *)&v210 + 1)) {
    sub_25B404120(*((std::__shared_weak_count **)&v210 + 1));
  }
  sub_25B50CC50(v183, (int *)&v171, (int *)&v159);
  sub_25B4466F4((uint64_t)__p, v183);
  sub_25B453C28(a4 + 560, (uint64_t)__p);
  __p[0] = &unk_2708F1C28;
  if (*((void *)&v210 + 1)) {
    sub_25B404120(*((std::__shared_weak_count **)&v210 + 1));
  }
  sub_25B542DEC(v183, (int *)&unk_25B5F2114, (int *)&v171, (int *)&v159);
  int v44 = v142 * v147;
  unint64_t v45 = (short float *)((char *)v11 + 8 * v142 * v147);
  sub_25B4CB400((uint64_t)__p, (long long *)v183, (uint64_t)v45);
  sub_25B453C28(a4 + 720, (uint64_t)__p);
  __p[0] = &unk_2708F1EB8;
  if (*((void *)&v210 + 1)) {
    sub_25B404120(*((std::__shared_weak_count **)&v210 + 1));
  }
  v235[0] = 3;
  sub_25B542DEC(v183, v235, (int *)&v171, (int *)&v159);
  unint64_t v46 = (short float *)((char *)v11 + 2 * v44);
  sub_25B4CB400((uint64_t)__p, (long long *)v183, (uint64_t)v46);
  int v139 = v43;
  uint64_t v136 = a1;
  float32x4_t v47 = vsubq_f32(v151, v145);
  float v48 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v47, v47)));
  uint64_t v146 = v44;
  sub_25B453C28(a4 + 872, (uint64_t)__p);
  __p[0] = &unk_2708F1EB8;
  if (*((void *)&v210 + 1)) {
    sub_25B404120(*((std::__shared_weak_count **)&v210 + 1));
  }
  uint64_t v51 = 0;
  int64x2_t v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  float v55 = (float)(21.0 * v155) * 0.5;
  int v156 = v42 >> 1;
  int v152 = v139 >> 1;
  uint64_t v140 = *(void *)(a4 + 552);
  uint64_t v141 = *(void *)(a4 + 400);
  uint64_t v138 = *(void *)(a4 + 704);
  __p[1] = 0;
  __p[0] = 0;
  LOWORD(v56) = COERCE_UNSIGNED_INT(-1.0);
  *(void *)&long long v203 = 0;
  LOWORD(v57) = COERCE_UNSIGNED_INT(1.0);
  uint64_t v58 = v153;
  while (v54 < objc_msgSend_count(v158, v49, v50))
  {
    long long v59 = *(_OWORD *)(v58 + 16 * v54);
    float32x2_t v60 = vsub_f32(*(float32x2_t *)&v59, *(float32x2_t *)(a4 + 64));
    float v61 = vaddv_f32(vmul_f32(v60, *(float32x2_t *)(a4 + 96)));
    float32x2_t v62 = vmul_f32(v60, *(float32x2_t *)(a4 + 88));
    float v63 = vaddv_f32(v62);
    float v64 = fabsf(v63);
    if (fabsf(v61) >= v55 || v64 >= (float)(v48 * 0.5))
    {
      unsigned int v66 = v51;
      goto LABEL_112;
    }
    int v67 = *(void *)(v58 + 16 * v54 + 8);
    if ((unint64_t)v51 >= v53)
    {
      uint64_t v68 = ((char *)v51 - v52) >> 2;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 62)
      {
        *(void *)&long long v203 = v53;
        __p[0] = v52;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v53 - (void)v52) >> 1 > v69) {
        unint64_t v69 = (uint64_t)(v53 - (void)v52) >> 1;
      }
      if (v53 - (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70) {
        unint64_t v70 = (unint64_t)sub_25B3FBC64(v70);
      }
      else {
        int64x2_t v49 = 0;
      }
      int32x2_t v71 = (_DWORD *)(v70 + 4 * v68);
      _DWORD *v71 = v67;
      unsigned int v66 = v71 + 1;
      while (v51 != (_DWORD *)v52)
      {
        int v72 = *--v51;
        *--int32x2_t v71 = v72;
      }
      unint64_t v53 = v70 + 4 * (void)v49;
      __p[1] = v66;
      if (v52) {
        operator delete(v52);
      }
      int64x2_t v52 = v71;
      uint64_t v58 = v153;
    }
    else
    {
      _DWORD *v51 = DWORD2(v59);
      unsigned int v66 = v51 + 1;
    }
    __p[1] = v66;
    long long v73 = *v157;
    float v74 = v61 / COERCE_FLOAT(*v157);
    float v75 = -v74;
    if (v74 >= 0.0) {
      float v75 = v61 / COERCE_FLOAT(*v157);
    }
    int v76 = (int)v75;
    float v77 = v75 - (float)(int)v75;
    if (v77 < 0.5) {
      int v78 = v76;
    }
    else {
      int v78 = v76 + 1;
    }
    int v79 = (v76 & 1) + v76;
    if (v77 != 0.5) {
      int v79 = v78;
    }
    if (v74 < 0.0) {
      int v79 = -v79;
    }
    float v80 = -(float)(v63 / *((float *)&v73 + 1));
    if ((float)(v63 / *((float *)&v73 + 1)) >= 0.0) {
      float v80 = v63 / *((float *)&v73 + 1);
    }
    int v81 = (int)v80;
    int v82 = v79 + v156;
    float v83 = v80 - (float)(int)v80;
    if (v83 < 0.5) {
      int v84 = v81;
    }
    else {
      int v84 = v81 + 1;
    }
    int v85 = (v81 & 1) + v81;
    if (v83 != 0.5) {
      int v85 = v84;
    }
    if ((float)(v63 / *((float *)&v73 + 1)) < 0.0) {
      int v85 = -v85;
    }
    if ((v82 & 0x80000000) == 0 && v82 < (int)*v154)
    {
      int v86 = v85 + v152;
      if ((v86 & 0x80000000) == 0 && v86 <= (int)HIDWORD(*(void *)v154))
      {
        int v87 = *v148;
        float v88 = (float)(*(float *)(v58 + 16 * v54 + 8) - *v150) / *v149;
        float v89 = -v88;
        if (v88 >= 0.0) {
          float v89 = (float)(*(float *)(v58 + 16 * v54 + 8) - *v150) / *v149;
        }
        int v90 = (int)v89;
        float v91 = v89 - (float)(int)v89;
        if (v91 < 0.5) {
          int v92 = v90;
        }
        else {
          int v92 = v90 + 1;
        }
        int v93 = (v90 & 1) + v90;
        if (v91 != 0.5) {
          int v93 = v92;
        }
        if (v88 < 0.0) {
          int v93 = -v93;
        }
        int v94 = v87 + ~v93;
        if (v94 >= 0 && v94 < v87)
        {
          uint64_t v95 = *(void *)(v144 + 8 * v54);
          int v96 = (unsigned __int16)v95;
          if ((_WORD)v95)
          {
            v62.i32[0] = *(_DWORD *)(v143 + 4 * v54);
            uint16x8_t v97 = vmovl_u8((uint8x8_t)v62);
            unsigned __int8 v98 = v97.i8[0];
            __int8 v99 = v97.i8[2];
            if (v97.u16[1] >= v97.u8[0]) {
              __int8 v99 = v97.i8[0];
            }
            if (WORD1(v95) == (unsigned __int16)v95) {
              unsigned __int8 v98 = v99;
            }
            __int8 v100 = v97.i8[4];
            if (v97.u16[2] >= v98) {
              __int8 v100 = v98;
            }
            if (WORD2(v95) == (unsigned __int16)v95) {
              char v101 = v100;
            }
            else {
              char v101 = v98;
            }
            if (v101 == 2) {
              int v102 = 1;
            }
            else {
              int v102 = 2 * (v101 == 3);
            }
            BOOL v103 = (v101 & 0xFE) == 6;
            BOOL v104 = v101 == 11;
            int v96 = v101 == 12;
          }
          else
          {
            int v102 = 0;
            BOOL v103 = 0;
            BOOL v104 = 0;
          }
          int v105 = v86 + v147 * v94;
          short float v106 = *((short float *)v11 + v105) + v57;
          *((short float *)v11 + v105) = v106;
          if (v56 < v106) {
            short float v56 = v106;
          }
          v46[v105 + v102 * (int)v146] = v46[v105 + v102 * (int)v146] + v57;
          v45[v105 + v82 * (int)v146] = v45[v105 + v82 * (int)v146] + v57;
          if (v103)
          {
            ++*(_DWORD *)(v141 + 4 * v105);
            if (!v104) {
              goto LABEL_110;
            }
          }
          else if (!v104)
          {
LABEL_110:
            if (!v96) {
              goto LABEL_112;
            }
LABEL_111:
            ++*(_DWORD *)(v138 + 4 * v105);
            goto LABEL_112;
          }
          ++*(_DWORD *)(v140 + 4 * v105);
          if (v96) {
            goto LABEL_111;
          }
        }
      }
    }
LABEL_112:
    ++v54;
    uint64_t v51 = v66;
  }
  *(void *)&long long v203 = v53;
  __p[0] = v52;
  if (v51 == (_DWORD *)v52)
  {
    float v108 = 1.2;
  }
  else
  {
    sub_25B400CE0((uint64_t *)__p);
    *(float *)(a4 + 104) = v107;
    float v108 = v107 - *(float *)(a4 + 80);
  }
  *(float *)(a4 + 712) = v108;
  __asm { FCMP            H8, #0 }
  if (_NF ^ _VF | _ZF) {
    goto LABEL_127;
  }
  if ((int)v146 >= 1)
  {
    LODWORD(v114) = 21 * v146;
    uint64_t v115 = v146;
    do
    {
      *(short float *)int v11 = *(short float *)v11 / _H8;
      int v11 = (__CVBuffer *)((char *)v11 + 2);
      --v115;
    }
    while (v115);
    if ((int)v114 <= 1) {
      uint64_t v114 = 1;
    }
    else {
      uint64_t v114 = v114;
    }
    do
    {
      *unint64_t v45 = *v45 / _H8;
      ++v45;
      --v114;
    }
    while (v114);
LABEL_127:
    if ((int)v146 >= 1)
    {
      int v116 = &v46[v146];
      uint64_t v117 = 2 * (int)v146;
      uint64_t v118 = v146;
      do
      {
        _H0 = *v46;
        __asm { FCVT            S1, H0 }
        _H2 = *v116;
        __asm { FCVT            S2, H2 }
        float v123 = _S1 + _S2;
        *(short float *)&_S2 = v46[v117];
        __asm { FCVT            S2, H2 }
        _S1 = v123 + _S2;
        __asm
        {
          FCVT            H1, S1
          FCMP            H1, #0
        }
        if (!(_NF ^ _VF | _ZF))
        {
          *unint64_t v46 = _H0 / _H1;
          *int v116 = *v116 / _H1;
          v46[v117] = v46[v117] / _H1;
        }
        ++v46;
        ++v116;
        --v118;
      }
      while (v118);
    }
  }
  if (v52)
  {
    __p[1] = v52;
    operator delete(v52);
  }

  kdebug_trace();
  kdebug_trace();
  sub_25B4D7B80();
  uint64_t v127 = *(void *)(v136 + 8);
  if (v127 && *(void *)(v127 + 64) == 1) {
    float v128 = *(__CVBuffer **)(v127 + 8);
  }
  else {
    float v128 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v128, 1uLL);
  sub_25B403500(__p, "406");
  v183[0] = __p;
  float v129 = sub_25B52B39C((uint64_t **)(v136 + 368), __p, (_OWORD **)v183);
  sub_25B45F1E4((uint64_t)v235, (uint64_t)v129 + 56);
  if (SBYTE7(v203) < 0) {
    operator delete(__p[0]);
  }
  sub_25B403500(__p, "406");
  v183[0] = __p;
  long long v130 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v136 + 344), __p, (_OWORD **)v183) + 7);
  sub_25B403500(v183, "406");
  long long v131 = sub_25B4D7D08(v136 + 272, (uint64_t)v183);
  sub_25B56051C(v130, v131, v237);
  if (SBYTE7(v184) < 0) {
    operator delete(v183[0]);
  }
  if (SBYTE7(v203) < 0) {
    operator delete(__p[0]);
  }
  sub_25B403500(__p, "417");
  v183[0] = __p;
  long long v132 = sub_25B52B39C((uint64_t **)(v136 + 368), __p, (_OWORD **)v183);
  sub_25B45F1E4((uint64_t)v232, (uint64_t)v132 + 56);
  if (SBYTE7(v203) < 0) {
    operator delete(__p[0]);
  }
  sub_25B403500(__p, "417");
  v183[0] = __p;
  long long v133 = (__CVBuffer *)*((void *)sub_25B52B30C((uint64_t **)(v136 + 344), __p, (_OWORD **)v183) + 7);
  sub_25B403500(v183, "417");
  long long v134 = sub_25B4D7D08(v136 + 272, (uint64_t)v183);
  sub_25B56051C(v133, v134, v234);
  if (SBYTE7(v184) < 0) {
    operator delete(v183[0]);
  }
  if (SBYTE7(v203) < 0) {
    operator delete(__p[0]);
  }
  sub_25B4591A8((uint64_t)v230, (uint64_t)v235, 0);
  sub_25B4591A8((uint64_t)v228, (uint64_t)v232, 0);
  int v165 = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  sub_25B4582F4((uint64_t)&v166, (uint64_t)v230);
  long long v159 = v167;
  long long v160 = v168;
  long long v161 = v169;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v177 = v162;
  long long v178 = v163;
  long long v179 = v164;
  int v180 = v165;
  long long v173 = 0u;
  long long v174 = v167;
  long long v175 = v168;
  long long v176 = v169;
  sub_25B4582F4((uint64_t)v181, (uint64_t)&v166);
  long long v171 = v174;
  long long v172 = v175;
  long long v190 = v174;
  long long v193 = v174;
  long long v173 = v176;
  *(_OWORD *)uint64_t v183 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v192 = v176;
  long long v191 = v175;
  long long v194 = v175;
  long long v195 = v176;
  int v189 = 1065353216;
  int v199 = v180;
  long long v198 = v179;
  long long v197 = v178;
  long long v196 = v177;
  sub_25B4582F4((uint64_t)v200, (uint64_t)v181);
  int v208 = 1065353216;
  int v215 = v189;
  long long v184 = v191;
  long long v185 = v192;
  *(_OWORD *)uint64_t v183 = v190;
  *(_OWORD *)long long __p = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  long long v209 = v190;
  long long v210 = v191;
  long long v211 = v192;
  long long v214 = v188;
  long long v213 = v187;
  long long v212 = v186;
  long long v217 = v191;
  long long v216 = v190;
  long long v221 = v195;
  long long v220 = v194;
  long long v218 = v192;
  long long v219 = v193;
  int v225 = v199;
  long long v224 = v198;
  long long v223 = v197;
  long long v222 = v196;
  sub_25B4582F4((uint64_t)v226, (uint64_t)v200);
  *(_OWORD *)long long __p = v209;
  long long v203 = v210;
  long long v204 = v211;
  sub_25B5605E0((uint64_t)v230, (uint64_t)__p);
  v226[0] = &unk_2708F21F8;
  if (v227) {
    sub_25B404120(v227);
  }
  v200[0] = &unk_2708F21F8;
  if (v201) {
    sub_25B404120(v201);
  }
  v181[0] = &unk_2708F21F8;
  if (v182) {
    sub_25B404120(v182);
  }
  long long v166 = &unk_2708F21F8;
  if (v170) {
    sub_25B404120(v170);
  }
  int v165 = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  sub_25B4582F4((uint64_t)&v166, (uint64_t)v228);
  long long v159 = v167;
  long long v160 = v168;
  long long v161 = v169;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v177 = v162;
  long long v178 = v163;
  long long v179 = v164;
  int v180 = v165;
  long long v173 = 0u;
  long long v174 = v167;
  long long v175 = v168;
  long long v176 = v169;
  sub_25B4582F4((uint64_t)v181, (uint64_t)&v166);
  long long v171 = v174;
  long long v172 = v175;
  long long v190 = v174;
  long long v193 = v174;
  long long v173 = v176;
  *(_OWORD *)uint64_t v183 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v192 = v176;
  long long v191 = v175;
  long long v194 = v175;
  long long v195 = v176;
  int v189 = 1065353216;
  int v199 = v180;
  long long v198 = v179;
  long long v197 = v178;
  long long v196 = v177;
  sub_25B4582F4((uint64_t)v200, (uint64_t)v181);
  int v208 = 1065353216;
  int v215 = v189;
  long long v184 = v191;
  long long v185 = v192;
  *(_OWORD *)uint64_t v183 = v190;
  *(_OWORD *)long long __p = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  long long v209 = v190;
  long long v210 = v191;
  long long v211 = v192;
  long long v214 = v188;
  long long v213 = v187;
  long long v212 = v186;
  long long v217 = v191;
  long long v216 = v190;
  long long v221 = v195;
  long long v220 = v194;
  long long v218 = v192;
  long long v219 = v193;
  int v225 = v199;
  long long v224 = v198;
  long long v223 = v197;
  long long v222 = v196;
  sub_25B4582F4((uint64_t)v226, (uint64_t)v200);
  *(_OWORD *)long long __p = v209;
  long long v203 = v210;
  long long v204 = v211;
  sub_25B5605E0((uint64_t)v228, (uint64_t)__p);
  v226[0] = &unk_2708F21F8;
  if (v227) {
    sub_25B404120(v227);
  }
  v200[0] = &unk_2708F21F8;
  if (v201) {
    sub_25B404120(v201);
  }
  v181[0] = &unk_2708F21F8;
  if (v182) {
    sub_25B404120(v182);
  }
  long long v166 = &unk_2708F21F8;
  if (v170) {
    sub_25B404120(v170);
  }
  kdebug_trace();
  *a5 = 1;
  sub_25B4582F4((uint64_t)(a5 + 8), (uint64_t)v230);
  sub_25B4582F4((uint64_t)(a5 + 160), (uint64_t)v228);
  v228[0] = &unk_2708F21F8;
  if (v229) {
    sub_25B404120(v229);
  }
  v230[0] = &unk_2708F21F8;
  if (v231) {
    sub_25B404120(v231);
  }
  v232[0] = &unk_2708F2218;
  if (v233) {
    sub_25B404120(v233);
  }
  *(void *)unint64_t v235 = &unk_2708F2218;
  if (v236) {
    sub_25B404120(v236);
  }
}

void sub_25B560280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (v32)
  {
    STACK[0x498] = (unint64_t)v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_25B56051C(__CVBuffer *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 16) * *(void *)(*(void *)a2 + 8) * *(void *)(*(void *)a2 + 24);
  IOSurface = CVPixelBufferGetIOSurface(a1);
  IOSurfaceLock(IOSurface, 1u, 0);
  int v7 = a2[7];
  if (v7 == 3)
  {
    for (uint64_t i = (__int16 *)IOSurfaceGetBaseAddress(IOSurface); v5; --v5)
    {
      __int16 v11 = *i++;
      _H0 = v11;
      __asm { FCVT            S0, H0 }
      *a3++ = _S0;
    }
  }
  else if (v7 == 6)
  {
    for (uint64_t j = (int *)IOSurfaceGetBaseAddress(IOSurface); v5; --v5)
    {
      int v9 = *j++;
      *a3++ = v9;
    }
  }

  return IOSurfaceUnlock(IOSurface, 1u, 0);
}

uint64_t sub_25B5605E0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 497))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    int v7 = (void *)std::ostream::operator<<();
    id v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    int v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)v20, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v20);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40961C("err", "empty tensor in");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    __int16 v11 = std::locale::use_facet((const std::locale *)v20, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v20);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 137))
  {
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 40) = v12;
    *(_OWORD *)(a1 + 24) = v13;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = 1;
    *(void *)(a1 + 104) = v15 * v14;
    *(void *)(a1 + 112) = 0;
    sub_25B458EBC((uint64_t)v20, v15 * v14);
  }
  if (*(void *)(a2 + 480) != *(void *)(a1 + 120)
    || (BOOL v16 = sub_25B40B05C(a2 + 368, a1 + 8),
        BOOL v17 = sub_25B40B05C(a2 + 368, a1 + 8),
        BOOL v18 = sub_25B40B05C(a2 + 368, a1 + 8))
    && v18
    && v17
    && v16)
  {
    sub_25B560920(a1, a2);
  }
  else
  {
    sub_25B4583CC((uint64_t)v20, (_OWORD *)a2);
    sub_25B560920((uint64_t)v20, a2);
    sub_25B4584C4(a1, (uint64_t)v20);
    *(void *)&v20[0] = &unk_2708F21F8;
    if (v21) {
      sub_25B404120(v21);
    }
  }
  return a1;
}

void sub_25B5608D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B560920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v182 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 496))
    {
      long long v168 = 0uLL;
      long long v169 = 0uLL;
      long long v167 = 0uLL;
      uint64_t v9 = *(void *)(a1 + 104);
      uint64_t v10 = *(float **)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v9)
        {
          __int16 v11 = *(float **)(a2 + 504);
          do
          {
            float v12 = *(float *)(a2 + 96);
            float v13 = *(float *)(a2 + 200);
            float v14 = *v11++;
            *v10++ = v12 / (float)(v13 + expf(*(float *)(a2 + 352) - v14));
            --v9;
          }
          while (v9);
        }
      }
      else if (v9)
      {
        uint64_t v82 = 0;
        uint64_t v83 = *(void *)(a1 + 56);
        uint64_t v84 = *(void *)(a1 + 64);
        uint64_t v85 = *(void *)(a2 + 504);
        uint64_t v86 = a1 + 16;
        do
        {
          uint64_t v87 = v83 * v167 + v84 * *((void *)&v167 + 1);
          float v88 = *(float *)(a2 + 96);
          float v89 = *(float *)(a2 + 200);
          float v90 = expf(*(float *)(a2 + 352) - *(float *)(v85 + 4 * v82));
          uint64_t v91 = 0;
          v10[v87] = v88 / (float)(v89 + v90);
          do
          {
            uint64_t v92 = *(void *)((char *)&v167 + v91 + 8) + 1;
            *(void *)((char *)&v167 + v91 + 8) = v92;
            if (v92 != *(void *)(v86 + v91)) {
              break;
            }
            *(void *)((char *)&v167 + v91 + 8) = 0;
            v91 -= 8;
          }
          while (v91 != -16);
          ++v82;
        }
        while (v82 != v9);
      }
    }
    else
    {
      long long v168 = 0uLL;
      long long v169 = 0uLL;
      long long v167 = 0uLL;
      uint64_t v42 = *(void *)(a1 + 104);
      uint64_t v43 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v42)
        {
          uint64_t v44 = 0;
          uint64_t v45 = *(void *)(a2 + 416);
          uint64_t v46 = *(void *)(a2 + 424);
          uint64_t v47 = *(void *)(a2 + 504);
          uint64_t v48 = a1 + 16;
          do
          {
            float v49 = *(float *)(a2 + 96);
            float v50 = *(float *)(a2 + 200);
            float v51 = expf(*(float *)(a2 + 352) - *(float *)(v47 + 4 * (v45 * v167 + v46 * *((void *)&v167 + 1))));
            uint64_t v52 = 0;
            *(float *)(v43 + 4 * v44) = v49 / (float)(v50 + v51);
            do
            {
              uint64_t v53 = *(void *)((char *)&v167 + v52 + 8) + 1;
              *(void *)((char *)&v167 + v52 + 8) = v53;
              if (v53 != *(void *)(v48 + v52)) {
                break;
              }
              *(void *)((char *)&v167 + v52 + 8) = 0;
              v52 -= 8;
            }
            while (v52 != -16);
            ++v44;
          }
          while (v44 != v42);
        }
      }
      else if (v42)
      {
        uint64_t v110 = 0;
        uint64_t v154 = *(void *)(a1 + 64);
        uint64_t v157 = *(void *)(a1 + 56);
        uint64_t v111 = *(void *)(a2 + 416);
        uint64_t v112 = *(void *)(a2 + 424);
        uint64_t v113 = a1 + 16;
        uint64_t v114 = *(void *)(a2 + 504);
        do
        {
          uint64_t v115 = v157 * v167 + v154 * *((void *)&v167 + 1);
          float v116 = *(float *)(a2 + 96);
          float v117 = *(float *)(a2 + 200);
          float v118 = expf(*(float *)(a2 + 352) - *(float *)(v114 + 4 * (v111 * v167 + v112 * *((void *)&v167 + 1))));
          uint64_t v119 = 0;
          *(float *)(v43 + 4 * v115) = v116 / (float)(v117 + v118);
          do
          {
            uint64_t v120 = *(void *)((char *)&v167 + v119 + 8) + 1;
            *(void *)((char *)&v167 + v119 + 8) = v120;
            if (v120 != *(void *)(v113 + v119)) {
              break;
            }
            *(void *)((char *)&v167 + v119 + 8) = 0;
            v119 -= 8;
          }
          while (v119 != -16);
          ++v110;
        }
        while (v110 != v42);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 496))
    {
      long long v180 = 0uLL;
      long long v181 = 0uLL;
      long long v178 = 0uLL;
      long long v179 = 0uLL;
      long long v176 = 0uLL;
      long long v177 = 0uLL;
      long long v174 = 0uLL;
      long long v175 = 0uLL;
      long long v172 = 0uLL;
      long long v173 = 0uLL;
      long long v170 = 0uLL;
      long long v171 = 0uLL;
      long long v168 = 0uLL;
      long long v169 = 0uLL;
      long long v167 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v158 = 0uLL;
      sub_25B40AB84((uint64_t)&v167, v5, (_OWORD *)a2, (uint64_t)&v158);
      uint64_t v15 = 0;
      char v16 = 1;
      do
      {
        uint64_t v17 = *((void *)&v158 + v15);
        uint64_t v18 = *((void *)v5 + v15);
        if ((v16 & 1) == 0) {
          break;
        }
        char v16 = 0;
        uint64_t v15 = 1;
      }
      while (v17 == v18);
      if (v17 != v18)
      {
        uint64_t v19 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v20 = sub_25B406B20(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v20, (uint64_t)" ", 1);
        int8x16_t v21 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v22 = (void *)std::ostream::operator<<();
        sub_25B406B20(v22, (uint64_t)" ", 1);
        sub_25B406B20(v22, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        uint64_t v23 = std::locale::use_facet(v164, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(v164);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        float v24 = std::locale::use_facet(v164, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(v164);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      *(_OWORD *)&v164[0].__locale_ = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      uint64_t v25 = *(void *)(a1 + 104);
      uint64_t v155 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v25)
        {
          uint64_t v26 = 0;
          int8x16_t v28 = (uint64_t *)*((void *)&v168 + 1);
          float32x4_t v27 = (uint64_t *)v169;
          unint64_t v29 = (uint64_t)(v169 - *((void *)&v168 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          unint64_t v151 = v29;
          uint64_t v30 = *(void *)(a2 + 504);
          do
          {
            long long v161 = *(_OWORD *)&v164[0].__locale_;
            if (v27 != v28)
            {
              long long v31 = v28;
              unint64_t v32 = v151;
              do
              {
                uint64_t v33 = *v31++;
                *((void *)&v161 + v33) = 0;
                --v32;
              }
              while (v32);
            }
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            char v36 = 1;
            do
            {
              char v37 = v36;
              v35 += *((void *)&v179 + v34) * *((void *)&v161 + v34);
              uint64_t v34 = 1;
              char v36 = 0;
            }
            while ((v37 & 1) != 0);
            float v38 = *(float *)(a2 + 96);
            float v39 = *(float *)(a2 + 200);
            *(float *)(v155 + 4 * v26) = v38 / (float)(v39 + expf(*(float *)(a2 + 352) - *(float *)(v30 + 4 * v35)));
            for (uint64_t i = 1; i != -1; --i)
            {
              int v41 = (std::locale::__imp *)((char *)v164[i].__locale_ + 1);
              v164[i].__locale_ = v41;
              if (v41 != *(std::locale::__imp **)((char *)&v158 + i * 8)) {
                break;
              }
              v164[i].__locale_ = 0;
            }
            ++v26;
          }
          while (v26 != v25);
        }
      }
      else if (v25)
      {
        uint64_t v93 = 0;
        int v94 = (uint64_t *)*((void *)&v168 + 1);
        uint64_t v153 = (uint64_t *)v169;
        if ((unint64_t)((uint64_t)(v169 - *((void *)&v168 + 1)) >> 3) <= 1) {
          uint64_t v95 = 1;
        }
        else {
          uint64_t v95 = (uint64_t)(v169 - *((void *)&v168 + 1)) >> 3;
        }
        uint64_t v149 = *(void *)(a1 + 56);
        uint64_t v143 = v95;
        uint64_t v146 = *(void *)(a1 + 64);
        uint64_t v96 = *(void *)(a2 + 504);
        do
        {
          unint64_t locale = v164[0].__locale_;
          unsigned __int8 v98 = v164[1].__locale_;
          long long v161 = *(_OWORD *)&v164[0].__locale_;
          if (v153 != v94)
          {
            __int8 v99 = v94;
            uint64_t v100 = v143;
            do
            {
              uint64_t v101 = *v99++;
              *((void *)&v161 + v101) = 0;
              --v100;
            }
            while (v100);
          }
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          char v104 = 1;
          do
          {
            char v105 = v104;
            v103 += *((void *)&v179 + v102) * *((void *)&v161 + v102);
            uint64_t v102 = 1;
            char v104 = 0;
          }
          while ((v105 & 1) != 0);
          float v106 = *(float *)(a2 + 96);
          float v107 = *(float *)(a2 + 200);
          *(float *)(v155 + 4 * ((void)locale * v149 + (void)v98 * v146)) = v106
                                                                              / (float)(v107
                                                                                      + expf(*(float *)(a2 + 352)- *(float *)(v96 + 4 * v103)));
          for (uint64_t j = 1; j != -1; --j)
          {
            __int32 v109 = (std::locale::__imp *)((char *)v164[j].__locale_ + 1);
            v164[j].__locale_ = v109;
            if (v109 != *(std::locale::__imp **)((char *)&v158 + j * 8)) {
              break;
            }
            v164[j].__locale_ = 0;
          }
          ++v93;
        }
        while (v93 != v25);
      }
    }
    else
    {
      long long v180 = 0uLL;
      long long v181 = 0uLL;
      long long v178 = 0uLL;
      long long v179 = 0uLL;
      long long v176 = 0uLL;
      long long v177 = 0uLL;
      long long v174 = 0uLL;
      long long v175 = 0uLL;
      long long v172 = 0uLL;
      long long v173 = 0uLL;
      long long v170 = 0uLL;
      long long v171 = 0uLL;
      long long v168 = 0uLL;
      long long v169 = 0uLL;
      long long v167 = 0uLL;
      long long v159 = 0uLL;
      long long v160 = 0uLL;
      long long v158 = 0uLL;
      sub_25B40AB84((uint64_t)&v167, v5, (_OWORD *)a2, (uint64_t)&v158);
      uint64_t v54 = 0;
      char v55 = 1;
      do
      {
        uint64_t v56 = *((void *)&v158 + v54);
        uint64_t v57 = *((void *)v5 + v54);
        if ((v55 & 1) == 0) {
          break;
        }
        char v55 = 0;
        uint64_t v54 = 1;
      }
      while (v56 == v57);
      if (v56 != v57)
      {
        uint64_t v58 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        long long v59 = sub_25B406B20(v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v59, (uint64_t)" ", 1);
        float32x2_t v60 = (void *)MEMORY[0x263F8C0F8];
        float v61 = (void *)std::ostream::operator<<();
        sub_25B406B20(v61, (uint64_t)" ", 1);
        sub_25B406B20(v61, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
        float32x2_t v62 = std::locale::use_facet(v164, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
        std::locale::~locale(v164);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
        float v63 = std::locale::use_facet(v164, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
        std::locale::~locale(v164);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      *(_OWORD *)&v164[0].__locale_ = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      uint64_t v64 = *(void *)(a1 + 104);
      uint64_t v152 = *(void *)(a1 + 144);
      uint64_t v156 = v64;
      if (*(unsigned char *)(a1 + 136))
      {
        if (v64)
        {
          uint64_t v65 = 0;
          int v67 = (uint64_t *)*((void *)&v168 + 1);
          unsigned int v66 = (uint64_t *)v169;
          if ((unint64_t)((uint64_t)(v169 - *((void *)&v168 + 1)) >> 3) <= 1) {
            uint64_t v68 = 1;
          }
          else {
            uint64_t v68 = (uint64_t)(v169 - *((void *)&v168 + 1)) >> 3;
          }
          int v69 = *(unsigned __int8 *)(a2 + 496);
          uint64_t v145 = *(void *)(a2 + 416);
          uint64_t v148 = v68;
          uint64_t v142 = *(void *)(a2 + 424);
          uint64_t v70 = *(void *)(a2 + 504);
          do
          {
            long long v161 = *(_OWORD *)&v164[0].__locale_;
            if (v66 != v67)
            {
              int32x2_t v71 = v67;
              uint64_t v72 = v148;
              do
              {
                uint64_t v73 = *v71++;
                *((void *)&v161 + v73) = 0;
                --v72;
              }
              while (v72);
            }
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            char v76 = 1;
            do
            {
              char v77 = v76;
              v75 += *((void *)&v179 + v74) * *((void *)&v161 + v74);
              uint64_t v74 = 1;
              char v76 = 0;
            }
            while ((v77 & 1) != 0);
            if (!v69) {
              uint64_t v75 = v161 * v145 + *((void *)&v161 + 1) * v142;
            }
            float v78 = *(float *)(a2 + 96);
            float v79 = *(float *)(a2 + 200);
            *(float *)(v152 + 4 * v65) = v78 / (float)(v79 + expf(*(float *)(a2 + 352) - *(float *)(v70 + 4 * v75)));
            for (uint64_t k = 1; k != -1; --k)
            {
              int v81 = (std::locale::__imp *)((char *)v164[k].__locale_ + 1);
              v164[k].__locale_ = v81;
              if (v81 != *(std::locale::__imp **)((char *)&v158 + k * 8)) {
                break;
              }
              v164[k].__locale_ = 0;
            }
            ++v65;
          }
          while (v65 != v156);
        }
      }
      else if (v64)
      {
        uint64_t v121 = 0;
        float v123 = (uint64_t *)*((void *)&v168 + 1);
        int32x4_t v122 = (uint64_t *)v169;
        if ((unint64_t)((uint64_t)(v169 - *((void *)&v168 + 1)) >> 3) <= 1) {
          uint64_t v124 = 1;
        }
        else {
          uint64_t v124 = (uint64_t)(v169 - *((void *)&v168 + 1)) >> 3;
        }
        uint64_t v147 = *(void *)(a1 + 64);
        uint64_t v150 = *(void *)(a1 + 56);
        int v144 = *(unsigned __int8 *)(a2 + 496);
        uint64_t v140 = *(void *)(a2 + 416);
        uint64_t v141 = v124;
        uint64_t v139 = *(void *)(a2 + 424);
        uint64_t v125 = *(void *)(a2 + 504);
        do
        {
          int32x2_t v126 = v164[0].__locale_;
          uint64_t v127 = v164[1].__locale_;
          long long v161 = *(_OWORD *)&v164[0].__locale_;
          if (v122 != v123)
          {
            float v128 = v123;
            uint64_t v129 = v141;
            do
            {
              uint64_t v130 = *v128++;
              *((void *)&v161 + v130) = 0;
              --v129;
            }
            while (v129);
          }
          uint64_t v131 = 0;
          uint64_t v132 = 0;
          char v133 = 1;
          do
          {
            char v134 = v133;
            v132 += *((void *)&v179 + v131) * *((void *)&v161 + v131);
            uint64_t v131 = 1;
            char v133 = 0;
          }
          while ((v134 & 1) != 0);
          if (!v144) {
            uint64_t v132 = v161 * v140 + *((void *)&v161 + 1) * v139;
          }
          float v135 = *(float *)(a2 + 96);
          float v136 = *(float *)(a2 + 200);
          *(float *)(v152 + 4 * ((void)v126 * v150 + (void)v127 * v147)) = v135
                                                                             / (float)(v136
                                                                                     + expf(*(float *)(a2 + 352)- *(float *)(v125 + 4 * v132)));
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v138 = (std::locale::__imp *)((char *)v164[m].__locale_ + 1);
            v164[m].__locale_ = v138;
            if (v138 != *(std::locale::__imp **)((char *)&v158 + m * 8)) {
              break;
            }
            v164[m].__locale_ = 0;
          }
          ++v121;
        }
        while (v121 != v156);
      }
    }
    sub_25B3F9500((uint64_t)&v167);
  }
}

void sub_25B56146C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_25B5614A0(uint64_t a1, const void **a2)
{
  v29[1] = *MEMORY[0x263EF8340];
  uint64_t v20 = a1 + 272;
  sub_25B4D744C(a1 + 272, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 && *(void *)(v3 + 64) == 1) {
    uint64_t v4 = *(__CVBuffer **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  sub_25B4D7BC0(*(void *)(a1 + 280), *(void *)(a1 + 144), v4);
  uint64_t v5 = *(long long **)(a1 + 168);
  uint64_t v19 = *(long long **)(a1 + 176);
  if (v5 != v19)
  {
    uint64_t v18 = *MEMORY[0x263F04130];
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      uint64_t v7 = sub_25B4D7D08(v20, (uint64_t)v5);
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *(void *)(*(void *)v7 + 8);
      uint64_t v11 = *(void *)(*(void *)v7 + 16);
      uint64_t v26 = v11;
      uint64_t v27 = v10;
      size_t v12 = *(void *)(v9 + 24);
      CVPixelBufferRef pixelBufferOut = 0;
      size_t v25 = v12;
      if (*((_DWORD *)v7 + 7) == 3) {
        OSType v13 = 1278226536;
      }
      else {
        OSType v13 = 1278226534;
      }
      uint64_t v28 = v18;
      v29[0] = MEMORY[0x263EFFA78];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v8, (uint64_t)v29, &v28, 1, v18);
      CFDictionaryRef v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CVPixelBufferCreate(v6, v12, v11 * v10, v13, v14, &pixelBufferOut);
      CVPixelBufferRef v15 = pixelBufferOut;
      v22[0] = v5;
      sub_25B523C88((uint64_t **)(a1 + 344), v5, v22)[7] = (uint64_t)v15;
      sub_25B4D7C64(*(void *)(a1 + 280), (uint64_t)v5, pixelBufferOut);
      sub_25B4CB164(v21, &v27, &v26, &v25);
      sub_25B45A630((uint64_t)v22, v21);
      *(void *)&v21[0] = v5;
      char v16 = sub_25B523D3C((uint64_t **)(a1 + 368), v5, (long long **)v21);
      sub_25B453C28((uint64_t)(v16 + 56), (uint64_t)v22);
      v22[0] = (long long *)&unk_2708F2218;
      if (v23) {
        sub_25B404120(v23);
      }

      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v19);
  }
  sub_25B4D7B34();
  return 1;
}

void sub_25B5616C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    sub_25B404120(a34);
  }

  _Unwind_Resume(a1);
}

void sub_25B561714(uint64_t a1)
{
  sub_25B4104F0(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B561750(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  CFAllocatorRef v6 = (long long *)__str;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      sub_25B410380((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    sub_25B413D24((void *)a1, v13);
    CFDictionaryRef v14 = sub_25B4FF578(v9, v6, a3, *(char **)(a1 + 8));
LABEL_16:
    *(void *)(a1 + 8) = v14;
    return;
  }
  CVPixelBufferRef v15 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v10) >> 3) < a4)
  {
    char v16 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)v15 - (char *)v10) >> 3));
    if (v15 != v10)
    {
      uint64_t v17 = 8 * (((char *)v15 - (char *)v10) >> 3);
      do
      {
        std::string::operator=(v10, (const std::string *)v6);
        CFAllocatorRef v6 = (long long *)((char *)v6 + 24);
        ++v10;
        v17 -= 24;
      }
      while (v17);
      uint64_t v10 = *(std::string **)(a1 + 8);
    }
    CFDictionaryRef v14 = sub_25B4FF578(v9, v16, a3, (char *)v10);
    goto LABEL_16;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v10, (const std::string *)v6);
      CFAllocatorRef v6 = (long long *)((char *)v6 + 24);
      ++v10;
    }
    while (v6 != a3);
    CVPixelBufferRef v15 = *(std::string **)(a1 + 8);
  }
  while (v15 != v10)
  {
    if (SHIBYTE(v15[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    }
    --v15;
  }
  *(void *)(a1 + 8) = v10;
}

void sub_25B5618EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_25B5618F8(void *result, float32x2_t *a2)
{
  float32x2_t v2 = *a2;
  float32x2_t v3 = a2[1];
  uint64_t v4 = result[5];
  uint64_t v5 = result[6];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = *(void *)(v4 + 40);
      long long v7 = *(_OWORD *)(v6 + 16);
      float32x2_t v8 = vsub_f32(a2[1], *a2);
      float v9 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v7, *a2), v8));
      float v10 = vaddv_f32(vmul_f32(v8, v8));
      if (v10 < 0.000001) {
        float v10 = 0.000001;
      }
      float32x2_t v11 = vmla_n_f32(*a2, v8, v9 / v10);
      *(_DWORD *)(v6 + 24) = DWORD2(v7);
      *(float32x2_t *)(v6 + 16) = v11;
      uint64_t v12 = *(void *)(v4 + 40);
      long long v13 = *(_OWORD *)(v12 + 64);
      float32x2_t v14 = vsub_f32(a2[1], *a2);
      float v15 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v13, *a2), v14));
      float v16 = vaddv_f32(vmul_f32(v14, v14));
      if (v16 < 0.000001) {
        float v16 = 0.000001;
      }
      float32x2_t v17 = vmla_n_f32(*a2, v14, v15 / v16);
      *(_DWORD *)(v12 + 72) = DWORD2(v13);
      *(float32x2_t *)(v12 + 64) = v17;
      v4 += 120;
    }
    while (v4 != v5);
    uint64_t v4 = result[5];
  }
  *(float32x2_t *)(*(void *)(v4 + 40) + 16) = v2;
  *(float32x2_t *)(*(void *)(result[6] - 80) + 64) = v3;
  *(float32x2_t *)(*(void *)(result[8] + 40) + 16) = v3;
  *(float32x2_t *)(*(void *)(result[8] + 40) + 64) = v3;
  *(float32x2_t *)(*(void *)(result[8] + 160) + 16) = v3;
  *(float32x2_t *)(*(void *)(result[8] + 160) + 64) = v2;
  *(float32x2_t *)(*(void *)(result[8] + 280) + 16) = v2;
  *(float32x2_t *)(*(void *)(result[8] + 280) + 64) = v2;
  return result;
}

uint64_t sub_25B561A08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1B88;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_25B4002F4((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_25B563B2C(a1 + 40, *(void *)(a2 + 40), *(void *)(a2 + 48), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_25B563B2C(a1 + 64, *(void *)(a2 + 64), *(void *)(a2 + 72), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

void sub_25B561AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B55E2EC((void ***)va);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B561B20(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_25B3FA70C();
    }
    long long v7 = (char *)operator new(96 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v18 = v7;
  *(void *)uint64_t v19 = &v7[96 * v2];
  *(void *)&v19[16] = &v7[96 * v6];
  sub_25B561A08(*(uint64_t *)v19, a2);
  *(void *)&v19[8] = *(void *)v19 + 96;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  for (uint64_t i = 96; ; i -= 96)
  {
    uint64_t v11 = *(void *)v19 + i;
    if (v8 + i - 96 == v9) {
      break;
    }
    uint64_t v12 = v8 + i - 192;
    sub_25B561A08(v11 - 192, v12);
  }
  uint64_t v13 = a1[2];
  long long v14 = *(_OWORD *)&v19[8];
  uint64_t v17 = *(void *)&v19[8];
  long long v15 = *(_OWORD *)a1;
  *a1 = v11 - 96;
  *(_OWORD *)uint64_t v19 = v15;
  *(_OWORD *)(a1 + 1) = v14;
  *(void *)&v19[16] = v13;
  uint64_t v18 = (char *)v15;
  sub_25B566330((uint64_t)&v18);
  return v17;
}

void sub_25B561C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B566330((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B561CD0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  id v202 = a3;
  id v7 = a4;
  kdebug_trace();
  v234[0] = &unk_2708F1BA8;
  unint64_t v246 = &unk_2708F1BC8;
  long long v247 = &unk_2708F1BE8;
  int v250 = &unk_2708F1C08;
  int64x2_t v253 = 0uLL;
  v254[0] = 0;
  long long v260 = 0u;
  long long v259 = 0u;
  long long v258 = 0u;
  long long v257 = 0u;
  long long v256 = 0u;
  long long v255 = 0u;
  uint64_t v262 = 0;
  v254[2] = &unk_2708F1C28;
  uint64_t v261 = 0;
  __int16 v263 = 257;
  long long v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  long long v265 = 0u;
  long long v266 = 0u;
  uint64_t v272 = 0;
  unint64_t v264 = &unk_2708F1C28;
  uint64_t v271 = 0;
  __int16 v273 = 257;
  int v274 = &unk_2708F1C28;
  long long v280 = 0u;
  long long v279 = 0u;
  long long v278 = 0u;
  long long v277 = 0u;
  long long v276 = 0u;
  long long v275 = 0u;
  uint64_t v282 = 0;
  uint64_t v281 = 0;
  __int16 v283 = 257;
  unint64_t v284 = &unk_2708F1EB8;
  long long v290 = 0u;
  long long v289 = 0u;
  long long v288 = 0u;
  long long v287 = 0u;
  long long v286 = 0u;
  long long v285 = 0u;
  uint64_t v292 = 0;
  uint64_t v291 = 0;
  __int16 v293 = 257;
  uint64_t v294 = &unk_2708F1EB8;
  long long v299 = 0u;
  long long v300 = 0u;
  long long v297 = 0u;
  long long v298 = 0u;
  long long v295 = 0u;
  long long v296 = 0u;
  uint64_t v302 = 0;
  uint64_t v301 = 0;
  __int16 v303 = 257;
  id v8 = v7;
  id v210 = v8;
  objc_msgSend_quad(v8, v9, v10, v7);
  long long v203 = v11;
  objc_msgSend_quad(v8, v12, v13);
  long long v248 = v203;
  long long v249 = v14;
  long long v216 = 0;
  int v251 = 0;
  v252[0] = 0;
  *(void *)((char *)v252 + 6) = 0;
  objc_msgSend_quad(v8, v15, v16);
  long long v204 = v17;
  objc_msgSend_quad(v8, v18, v19);
  unint64_t v307 = &unk_2708F1960;
  int v308 = 0;
  int v215 = &unk_2708F1980;
  long long v219 = &unk_2708F1960;
  long long v217 = v204;
  long long v218 = v20;
  int v220 = 0;
  *(void *)&v225[24] = v254;
  int8x16_t v21 = (void **)sub_25B4AF474(1uLL);
  long long v224 = v21;
  *(void *)int v225 = v21;
  *(void *)&v225[16] = &v21[8 * v22];
  *int8x16_t v21 = &unk_2708F19A0;
  long long v23 = v218;
  *((_OWORD *)v21 + 1) = v217;
  *((_OWORD *)v21 + 2) = v23;
  *int8x16_t v21 = &unk_2708F1980;
  v21[6] = &unk_2708F1960;
  *((_DWORD *)v21 + 14) = v220;
  float v24 = (char *)(v21 + 8);
  *(void *)&v225[8] = v21 + 8;
  uint64_t v25 = v253.i64[1];
  uint64_t v26 = v253.i64[0];
  uint64_t v27 = *(void *)v225;
  if (v253.i64[1] == v253.i64[0])
  {
    int64x2_t v31 = vdupq_n_s64(v253.u64[1]);
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = v27 + v28;
      *(void *)(v29 - 64) = &unk_2708F19A0;
      long long v30 = *(_OWORD *)(v25 + v28 - 32);
      *(_OWORD *)(v29 - 48) = *(_OWORD *)(v25 + v28 - 48);
      *(_OWORD *)(v29 - 32) = v30;
      *(void *)(v29 - 64) = &unk_2708F1980;
      *(void *)(v29 - 16) = &unk_2708F1960;
      *(_DWORD *)(v29 - 8) = *(_DWORD *)(v25 + v28 - 8);
      v28 -= 64;
    }
    while (v25 + v28 != v26);
    v27 += v28;
    int64x2_t v31 = v253;
    float v24 = *(char **)&v225[8];
  }
  v253.i64[0] = v27;
  v253.i64[1] = (uint64_t)v24;
  *(int64x2_t *)int v225 = v31;
  uint64_t v32 = v254[0];
  v254[0] = *(void *)&v225[16];
  *(void *)&v225[16] = v32;
  long long v224 = (void **)v31.i64[0];
  sub_25B542D20((uint64_t)&v224);
  v253.i64[1] = (uint64_t)v24;
  objc_msgSend_quad(v8, v33, v34);
  long long v205 = v35;
  objc_msgSend_quad(v8, v36, v37);
  unint64_t v307 = &unk_2708F1960;
  int v308 = 2;
  int v215 = &unk_2708F1980;
  long long v219 = &unk_2708F1960;
  long long v217 = v205;
  long long v218 = v40;
  int v220 = 2;
  uint64_t v41 = v253.i64[1];
  if (v253.i64[1] >= v254[0])
  {
    uint64_t v44 = (v253.i64[1] - v253.i64[0]) >> 6;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 58) {
      sub_25B3FBC4C();
    }
    uint64_t v46 = v254[0] - v253.i64[0];
    if ((v254[0] - v253.i64[0]) >> 5 > v45) {
      unint64_t v45 = v46 >> 5;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    *(void *)&v225[24] = v254;
    uint64_t v48 = (void **)sub_25B4AF474(v47);
    float v49 = &v48[8 * v44];
    long long v224 = v48;
    *(void *)int v225 = v49;
    *(void *)&v225[16] = &v48[8 * v50];
    *float v49 = &unk_2708F19A0;
    long long v51 = v218;
    *((_OWORD *)v49 + 1) = v217;
    *((_OWORD *)v49 + 2) = v51;
    *float v49 = &unk_2708F1980;
    v49[6] = &unk_2708F1960;
    *((_DWORD *)v49 + 14) = v220;
    uint64_t v43 = v49 + 8;
    *(void *)&v225[8] = v49 + 8;
    uint64_t v52 = v253.i64[1];
    uint64_t v53 = v253.i64[0];
    uint64_t v54 = *(void *)v225;
    if (v253.i64[1] == v253.i64[0])
    {
      int64x2_t v58 = vdupq_n_s64(v253.u64[1]);
    }
    else
    {
      uint64_t v55 = 0;
      do
      {
        uint64_t v56 = v54 + v55;
        *(void *)(v56 - 64) = &unk_2708F19A0;
        long long v57 = *(_OWORD *)(v52 + v55 - 32);
        *(_OWORD *)(v56 - 48) = *(_OWORD *)(v52 + v55 - 48);
        *(_OWORD *)(v56 - 32) = v57;
        *(void *)(v56 - 64) = &unk_2708F1980;
        *(void *)(v56 - 16) = &unk_2708F1960;
        *(_DWORD *)(v56 - 8) = *(_DWORD *)(v52 + v55 - 8);
        v55 -= 64;
      }
      while (v52 + v55 != v53);
      v54 += v55;
      int64x2_t v58 = v253;
      uint64_t v43 = *(void ***)&v225[8];
    }
    v253.i64[0] = v54;
    v253.i64[1] = (uint64_t)v43;
    *(int64x2_t *)int v225 = v58;
    uint64_t v59 = v254[0];
    v254[0] = *(void *)&v225[16];
    *(void *)&v225[16] = v59;
    long long v224 = (void **)v58.i64[0];
    sub_25B542D20((uint64_t)&v224);
  }
  else
  {
    *(void *)v253.i64[1] = &unk_2708F19A0;
    long long v42 = v218;
    *(_OWORD *)(v41 + 16) = v217;
    *(_OWORD *)(v41 + 32) = v42;
    *(void *)uint64_t v41 = &unk_2708F1980;
    *(void *)(v41 + 48) = &unk_2708F1960;
    *(_DWORD *)(v41 + 56) = v220;
    uint64_t v43 = (void **)(v41 + 64);
  }
  v253.i64[1] = (uint64_t)v43;
  objc_msgSend_quad(v8, v38, v39);
  long long v206 = v60;
  objc_msgSend_quad(v8, v61, v62);
  unint64_t v307 = &unk_2708F1960;
  int v308 = 2;
  int v215 = &unk_2708F1980;
  long long v219 = &unk_2708F1960;
  long long v217 = v206;
  long long v218 = v65;
  int v220 = 2;
  uint64_t v66 = v253.i64[1];
  if (v253.i64[1] >= v254[0])
  {
    uint64_t v69 = (v253.i64[1] - v253.i64[0]) >> 6;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 58) {
      sub_25B3FBC4C();
    }
    uint64_t v71 = v254[0] - v253.i64[0];
    if ((v254[0] - v253.i64[0]) >> 5 > v70) {
      unint64_t v70 = v71 >> 5;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v72 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    *(void *)&v225[24] = v254;
    uint64_t v73 = (void **)sub_25B4AF474(v72);
    uint64_t v74 = &v73[8 * v69];
    long long v224 = v73;
    *(void *)int v225 = v74;
    *(void *)&v225[16] = &v73[8 * v75];
    char *v74 = &unk_2708F19A0;
    long long v76 = v218;
    *((_OWORD *)v74 + 1) = v217;
    *((_OWORD *)v74 + 2) = v76;
    char *v74 = &unk_2708F1980;
    v74[6] = &unk_2708F1960;
    *((_DWORD *)v74 + 14) = v220;
    uint64_t v68 = v74 + 8;
    *(void *)&v225[8] = v74 + 8;
    uint64_t v77 = v253.i64[1];
    uint64_t v78 = v253.i64[0];
    uint64_t v79 = *(void *)v225;
    if (v253.i64[1] == v253.i64[0])
    {
      int64x2_t v83 = vdupq_n_s64(v253.u64[1]);
    }
    else
    {
      uint64_t v80 = 0;
      do
      {
        uint64_t v81 = v79 + v80;
        *(void *)(v81 - 64) = &unk_2708F19A0;
        long long v82 = *(_OWORD *)(v77 + v80 - 32);
        *(_OWORD *)(v81 - 48) = *(_OWORD *)(v77 + v80 - 48);
        *(_OWORD *)(v81 - 32) = v82;
        *(void *)(v81 - 64) = &unk_2708F1980;
        *(void *)(v81 - 16) = &unk_2708F1960;
        *(_DWORD *)(v81 - 8) = *(_DWORD *)(v77 + v80 - 8);
        v80 -= 64;
      }
      while (v77 + v80 != v78);
      v79 += v80;
      int64x2_t v83 = v253;
      uint64_t v68 = *(void ***)&v225[8];
    }
    v253.i64[0] = v79;
    v253.i64[1] = (uint64_t)v68;
    *(int64x2_t *)int v225 = v83;
    uint64_t v84 = v254[0];
    v254[0] = *(void *)&v225[16];
    *(void *)&v225[16] = v84;
    long long v224 = (void **)v83.i64[0];
    sub_25B542D20((uint64_t)&v224);
  }
  else
  {
    *(void *)v253.i64[1] = &unk_2708F19A0;
    long long v67 = v218;
    *(_OWORD *)(v66 + 16) = v217;
    *(_OWORD *)(v66 + 32) = v67;
    *(void *)uint64_t v66 = &unk_2708F1980;
    *(void *)(v66 + 48) = &unk_2708F1960;
    *(_DWORD *)(v66 + 56) = v220;
    uint64_t v68 = (void **)(v66 + 64);
  }
  v253.i64[1] = (uint64_t)v68;
  objc_msgSend_quad(v8, v63, v64);
  long long v207 = v85;
  objc_msgSend_quad(v8, v86, v87);
  unint64_t v307 = &unk_2708F1960;
  int v308 = 2;
  int v215 = &unk_2708F1980;
  long long v219 = &unk_2708F1960;
  long long v217 = v207;
  long long v218 = v88;
  int v220 = 2;
  uint64_t v89 = v253.i64[1];
  if (v253.i64[1] >= v254[0])
  {
    uint64_t v92 = (v253.i64[1] - v253.i64[0]) >> 6;
    unint64_t v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 58) {
      sub_25B3FBC4C();
    }
    uint64_t v94 = v254[0] - v253.i64[0];
    if ((v254[0] - v253.i64[0]) >> 5 > v93) {
      unint64_t v93 = v94 >> 5;
    }
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v95 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v93;
    }
    *(void *)&v225[24] = v254;
    uint64_t v96 = (void **)sub_25B4AF474(v95);
    uint16x8_t v97 = &v96[8 * v92];
    long long v224 = v96;
    *(void *)int v225 = v97;
    *(void *)&v225[16] = &v96[8 * v98];
    void *v97 = &unk_2708F19A0;
    long long v99 = v218;
    *((_OWORD *)v97 + 1) = v217;
    *((_OWORD *)v97 + 2) = v99;
    void *v97 = &unk_2708F1980;
    v97[6] = &unk_2708F1960;
    *((_DWORD *)v97 + 14) = v220;
    uint64_t v91 = v97 + 8;
    *(void *)&v225[8] = v97 + 8;
    uint64_t v100 = v253.i64[1];
    uint64_t v101 = v253.i64[0];
    uint64_t v102 = *(void *)v225;
    if (v253.i64[1] == v253.i64[0])
    {
      int64x2_t v106 = vdupq_n_s64(v253.u64[1]);
    }
    else
    {
      uint64_t v103 = 0;
      do
      {
        uint64_t v104 = v102 + v103;
        *(void *)(v104 - 64) = &unk_2708F19A0;
        long long v105 = *(_OWORD *)(v100 + v103 - 32);
        *(_OWORD *)(v104 - 48) = *(_OWORD *)(v100 + v103 - 48);
        *(_OWORD *)(v104 - 32) = v105;
        *(void *)(v104 - 64) = &unk_2708F1980;
        *(void *)(v104 - 16) = &unk_2708F1960;
        *(_DWORD *)(v104 - 8) = *(_DWORD *)(v100 + v103 - 8);
        v103 -= 64;
      }
      while (v100 + v103 != v101);
      v102 += v103;
      int64x2_t v106 = v253;
      uint64_t v91 = *(void ***)&v225[8];
    }
    v253.i64[0] = v102;
    v253.i64[1] = (uint64_t)v91;
    *(int64x2_t *)int v225 = v106;
    uint64_t v107 = v254[0];
    v254[0] = *(void *)&v225[16];
    *(void *)&v225[16] = v107;
    long long v224 = (void **)v106.i64[0];
    sub_25B542D20((uint64_t)&v224);
  }
  else
  {
    *(void *)v253.i64[1] = &unk_2708F19A0;
    long long v90 = v218;
    *(_OWORD *)(v89 + 16) = v217;
    *(_OWORD *)(v89 + 32) = v90;
    *(void *)uint64_t v89 = &unk_2708F1980;
    *(void *)(v89 + 48) = &unk_2708F1960;
    *(_DWORD *)(v89 + 56) = v220;
    uint64_t v91 = (void **)(v89 + 64);
  }
  v253.i64[1] = (uint64_t)v91;

  (*(void (**)(void **__return_ptr, uint64_t, id, id, void *))(*(void *)a2 + 24))(&v215, a2, v202, v8, v234);
  if (!(_BYTE)v215)
  {
    *(void *)a1 = &unk_2708F1B88;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(void *)(a1 + 88) = 0xFFFFFFFF00000000;
    *(unsigned char *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_117;
  }
  kdebug_trace();
  sub_25B429198((uint64_t)&v212, a2 + 16, &v216, (uint64_t)&v222, (uint64_t)v234);
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_2708F1B88;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  uint64_t v109 = v213;
  uint64_t v108 = v214;
  if (v213 != v214)
  {
    int v208 = v237 / 2;
    do
    {
      uint64_t v110 = *(void *)(v109 + 32);
      if ((unint64_t)(*(void *)(v109 + 40) - v110) >= 0x40)
      {
        HIDWORD(v111) = v236;
        HIDWORD(v112) = v239;
        int v113 = *(void *)(v110 + 40);
        float v114 = (float)(v208 - v237 / 2) * v235.f32[0];
        *(float32x2_t *)&long long v112 = vadd_f32(v240, vmla_n_f32(vmul_n_f32(v242, vmuls_lane_f32((float)(int)(HIDWORD(*(void *)(v110 + 8)) - v238 / 2), v235, 1)), v243, v114));
        *(float32x2_t *)&long long v111 = vadd_f32(v240, vmla_n_f32(vmul_n_f32(v242, vmuls_lane_f32((float)(int)(HIDWORD(*(void *)(v110 + 40)) - v238 / 2), v235, 1)), v243, v114));
        *((float *)&v112 + 2) = v241 + (float)((float)(int)(v245 + ~*(void *)(v110 + 8)) * v244);
        unint64_t v307 = &unk_2708F2120;
        long long v309 = v112;
        int v310 = *(_DWORD *)(v110 + 16);
        v304[0] = &unk_2708F2120;
        *((float *)&v111 + 2) = v241 + (float)((float)(v245 + ~v113) * v244);
        long long v305 = v111;
        int v306 = *(_DWORD *)(v110 + 48);
        long long v224 = (void **)&unk_2708F2140;
        v225[0] = 0;
        v225[4] = 0;
        v225[8] = 0;
        v225[12] = 0;
        v225[16] = 0;
        v225[20] = 0;
        v225[24] = 0;
        v225[28] = 0;
        uint64_t v227 = 0;
        uint64_t v228 = 0;
        uint64_t v226 = 0;
        int v229 = 0;
        long long v230 = 0u;
        long long v231 = 0u;
        long long v232 = 0u;
        sub_25B55E080((unint64_t *)&v226, (uint64_t)&v307);
        sub_25B55E080((unint64_t *)&v226, (uint64_t)v304);
        int v229 = *(_DWORD *)(v109 + 56);
        uint64_t v115 = (void (***)(void))*((void *)&v231 + 1);
        *((void *)&v230 + 1) = v230;
        if ((void)v232 != *((void *)&v231 + 1))
        {
          uint64_t v116 = v232 - 16;
          float v117 = (void (***)(void))(v232 - 16);
          float v118 = (void (***)(void))(v232 - 16);
          do
          {
            uint64_t v119 = *v118;
            v118 -= 2;
            (*v119)(v117);
            v116 -= 16;
            BOOL v120 = v117 == v115;
            float v117 = v118;
          }
          while (!v120);
        }
        *(void *)&long long v232 = v115;
        int32x4_t v122 = *(_DWORD **)(v109 + 64);
        uint64_t v121 = *(_DWORD **)(v109 + 72);
        float32x2_t v233 = &v230;
        while (v122 != v121)
          sub_25B4432A0((uint64_t *)&v233, v122++);
        uint64_t v124 = *(void *)(v109 + 88);
        uint64_t v123 = *(void *)(v109 + 96);
        float32x2_t v233 = (long long *)((char *)&v231 + 8);
        while (v124 != v123)
        {
          sub_25B43931C((unint64_t **)&v233, v124);
          v124 += 16;
        }
        if (*(unsigned char *)(v109 + 12))
        {
          *(float *)int v225 = v241 + (float)((float)(v245 + ~*(_DWORD *)(v109 + 8)) * v244);
          v225[4] = 1;
        }
        id v8 = v210;
        if (*(unsigned char *)(v109 + 20))
        {
          *(float *)&v225[8] = v241 + (float)((float)(v245 + ~*(_DWORD *)(v109 + 16)) * v244);
          v225[12] = 1;
        }
        if (*(unsigned char *)(v109 + 28))
        {
          *(float *)&v225[16] = v241 + (float)((float)(v245 + ~*(_DWORD *)(v109 + 24)) * v244);
          v225[20] = 1;
        }
        unint64_t v125 = *(void *)(a1 + 48);
        if (v125 >= *(void *)(a1 + 56))
        {
          uint64_t v128 = sub_25B5219EC((void *)(a1 + 40), (uint64_t)&v224);
        }
        else
        {
          *(void *)unint64_t v125 = &unk_2708F2140;
          long long v126 = *(_OWORD *)v225;
          *(_OWORD *)(v125 + 21) = *(_OWORD *)&v225[13];
          *(_OWORD *)(v125 + 8) = v126;
          *(void *)(v125 + 40) = 0;
          *(void *)(v125 + 48) = 0;
          *(void *)(v125 + 56) = 0;
          sub_25B521C3C((char *)(v125 + 40), v226, v227, 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 4));
          int v127 = v229;
          *(void *)(v125 + 72) = 0;
          *(_DWORD *)(v125 + 64) = v127;
          *(void *)(v125 + 80) = 0;
          *(void *)(v125 + 88) = 0;
          sub_25B3FCA58((void *)(v125 + 72), (const void *)v230, *((uint64_t *)&v230 + 1), (uint64_t)(*((void *)&v230 + 1) - v230) >> 2);
          *(void *)(v125 + 96) = 0;
          *(void *)(v125 + 104) = 0;
          *(void *)(v125 + 112) = 0;
          sub_25B43B4AC((char *)(v125 + 96), *((uint64_t *)&v231 + 1), v232, (uint64_t)(v232 - *((void *)&v231 + 1)) >> 4);
          uint64_t v128 = v125 + 120;
          *(void *)(a1 + 48) = v125 + 120;
        }
        *(void *)(a1 + 48) = v128;
        sub_25B521824(a1);
        sub_25B521E50((uint64_t)&v224);
      }
      v109 += 112;
    }
    while (v109 != v108);
    uint64_t v130 = *(void *)(a1 + 40);
    uint64_t v129 = *(void *)(a1 + 48);
    if (v129 != v130)
    {
      uint64_t v131 = *(void *)(v130 + 40);
      uint64_t v132 = *(void *)(v129 - 80);
      char v134 = *(void (****)(void))(a1 + 64);
      char v133 = *(void (****)(void))(a1 + 72);
      if (v133 != v134)
      {
        float v135 = v133 - 15;
        float v136 = v133 - 15;
        id v137 = v133 - 15;
        do
        {
          uint64_t v138 = *v137;
          v137 -= 15;
          (*v138)(v136);
          v135 -= 15;
          BOOL v120 = v136 == v134;
          float v136 = v137;
        }
        while (!v120);
      }
      *(void *)(a1 + 72) = v134;
      unint64_t v307 = &unk_2708F2120;
      long long v309 = *(_OWORD *)(v132 + 64);
      long long v139 = v309;
      int v310 = *(_DWORD *)(v132 + 80);
      v304[0] = &unk_2708F2120;
      *((float *)&v139 + 2) = v241;
      long long v305 = v139;
      int v306 = 1065353216;
      long long v224 = (void **)&unk_2708F2140;
      v225[0] = 0;
      v225[4] = 0;
      v225[8] = 0;
      v225[12] = 0;
      v225[16] = 0;
      v225[20] = 0;
      v225[24] = 0;
      v225[28] = 0;
      uint64_t v227 = 0;
      uint64_t v228 = 0;
      uint64_t v226 = 0;
      int v229 = 0;
      long long v230 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      sub_25B55E080((unint64_t *)&v226, (uint64_t)&v307);
      sub_25B55E080((unint64_t *)&v226, (uint64_t)v304);
      unint64_t v140 = *(void *)(a1 + 72);
      if (v140 >= *(void *)(a1 + 80))
      {
        uint64_t v143 = sub_25B5219EC((void *)(a1 + 64), (uint64_t)&v224);
      }
      else
      {
        *(void *)unint64_t v140 = &unk_2708F2140;
        long long v141 = *(_OWORD *)v225;
        *(_OWORD *)(v140 + 21) = *(_OWORD *)&v225[13];
        *(_OWORD *)(v140 + 8) = v141;
        *(void *)(v140 + 40) = 0;
        *(void *)(v140 + 48) = 0;
        *(void *)(v140 + 56) = 0;
        sub_25B521C3C((char *)(v140 + 40), v226, v227, 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 4));
        int v142 = v229;
        *(void *)(v140 + 72) = 0;
        *(_DWORD *)(v140 + 64) = v142;
        *(void *)(v140 + 80) = 0;
        *(void *)(v140 + 88) = 0;
        sub_25B3FCA58((void *)(v140 + 72), (const void *)v230, *((uint64_t *)&v230 + 1), (uint64_t)(*((void *)&v230 + 1) - v230) >> 2);
        *(void *)(v140 + 96) = 0;
        *(void *)(v140 + 104) = 0;
        *(void *)(v140 + 112) = 0;
        sub_25B43B4AC((char *)(v140 + 96), *((uint64_t *)&v231 + 1), v232, (uint64_t)(v232 - *((void *)&v231 + 1)) >> 4);
        uint64_t v143 = v140 + 120;
        *(void *)(a1 + 72) = v140 + 120;
      }
      *(void *)(a1 + 72) = v143;
      sub_25B521E50((uint64_t)&v224);
      unint64_t v307 = &unk_2708F2120;
      long long v144 = *(_OWORD *)(v132 + 64);
      *((float *)&v144 + 2) = v241;
      long long v309 = v144;
      int v310 = 1065353216;
      v304[0] = &unk_2708F2120;
      int v306 = 0;
      long long v145 = *(_OWORD *)(v131 + 16);
      *((float *)&v145 + 2) = v241;
      long long v305 = v145;
      int v306 = 1065353216;
      long long v224 = (void **)&unk_2708F2140;
      v225[0] = 0;
      v225[4] = 0;
      v225[8] = 0;
      v225[12] = 0;
      v225[16] = 0;
      v225[20] = 0;
      v225[24] = 0;
      v225[28] = 0;
      uint64_t v227 = 0;
      uint64_t v228 = 0;
      uint64_t v226 = 0;
      int v229 = 0;
      long long v230 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      sub_25B55E080((unint64_t *)&v226, (uint64_t)&v307);
      sub_25B55E080((unint64_t *)&v226, (uint64_t)v304);
      unint64_t v146 = *(void *)(a1 + 72);
      if (v146 >= *(void *)(a1 + 80))
      {
        uint64_t v149 = sub_25B5219EC((void *)(a1 + 64), (uint64_t)&v224);
      }
      else
      {
        *(void *)unint64_t v146 = &unk_2708F2140;
        long long v147 = *(_OWORD *)v225;
        *(_OWORD *)(v146 + 21) = *(_OWORD *)&v225[13];
        *(_OWORD *)(v146 + 8) = v147;
        *(void *)(v146 + 40) = 0;
        *(void *)(v146 + 48) = 0;
        *(void *)(v146 + 56) = 0;
        sub_25B521C3C((char *)(v146 + 40), v226, v227, 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 4));
        int v148 = v229;
        *(void *)(v146 + 72) = 0;
        *(_DWORD *)(v146 + 64) = v148;
        *(void *)(v146 + 80) = 0;
        *(void *)(v146 + 88) = 0;
        sub_25B3FCA58((void *)(v146 + 72), (const void *)v230, *((uint64_t *)&v230 + 1), (uint64_t)(*((void *)&v230 + 1) - v230) >> 2);
        *(void *)(v146 + 96) = 0;
        *(void *)(v146 + 104) = 0;
        *(void *)(v146 + 112) = 0;
        sub_25B43B4AC((char *)(v146 + 96), *((uint64_t *)&v231 + 1), v232, (uint64_t)(v232 - *((void *)&v231 + 1)) >> 4);
        uint64_t v149 = v146 + 120;
        *(void *)(a1 + 72) = v146 + 120;
      }
      *(void *)(a1 + 72) = v149;
      sub_25B521E50((uint64_t)&v224);
      unint64_t v307 = &unk_2708F2120;
      long long v150 = *(_OWORD *)(v131 + 16);
      long long v151 = v150;
      *((float *)&v151 + 2) = v241;
      long long v309 = v151;
      int v310 = 1065353216;
      v304[0] = &unk_2708F2120;
      long long v305 = v150;
      int v306 = *(_DWORD *)(v131 + 32);
      long long v224 = (void **)&unk_2708F2140;
      v225[0] = 0;
      v225[4] = 0;
      v225[8] = 0;
      v225[12] = 0;
      v225[16] = 0;
      v225[20] = 0;
      v225[24] = 0;
      v225[28] = 0;
      uint64_t v227 = 0;
      uint64_t v228 = 0;
      uint64_t v226 = 0;
      int v229 = 0;
      long long v230 = 0u;
      long long v231 = 0u;
      long long v232 = 0u;
      sub_25B55E080((unint64_t *)&v226, (uint64_t)&v307);
      sub_25B55E080((unint64_t *)&v226, (uint64_t)v304);
      unint64_t v152 = *(void *)(a1 + 72);
      if (v152 >= *(void *)(a1 + 80))
      {
        uint64_t v155 = sub_25B5219EC((void *)(a1 + 64), (uint64_t)&v224);
      }
      else
      {
        *(void *)unint64_t v152 = &unk_2708F2140;
        long long v153 = *(_OWORD *)v225;
        *(_OWORD *)(v152 + 21) = *(_OWORD *)&v225[13];
        *(_OWORD *)(v152 + 8) = v153;
        *(void *)(v152 + 40) = 0;
        *(void *)(v152 + 48) = 0;
        *(void *)(v152 + 56) = 0;
        sub_25B521C3C((char *)(v152 + 40), v226, v227, 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 4));
        int v154 = v229;
        *(void *)(v152 + 72) = 0;
        *(_DWORD *)(v152 + 64) = v154;
        *(void *)(v152 + 80) = 0;
        *(void *)(v152 + 88) = 0;
        sub_25B3FCA58((void *)(v152 + 72), (const void *)v230, *((uint64_t *)&v230 + 1), (uint64_t)(*((void *)&v230 + 1) - v230) >> 2);
        *(void *)(v152 + 96) = 0;
        *(void *)(v152 + 104) = 0;
        *(void *)(v152 + 112) = 0;
        sub_25B43B4AC((char *)(v152 + 96), *((uint64_t *)&v231 + 1), v232, (uint64_t)(v232 - *((void *)&v231 + 1)) >> 4);
        uint64_t v155 = v152 + 120;
        *(void *)(a1 + 72) = v152 + 120;
      }
      *(void *)(a1 + 72) = v155;
      sub_25B521E50((uint64_t)&v224);
    }
  }
  uint64_t v156 = (float32x2_t *)v253.i64[0];
  if (v253.i64[1] - v253.i64[0] >= 0x100uLL)
  {
    uint64_t v157 = (float32x2_t *)(v253.i64[1] - 224);
    long long v158 = *(_OWORD *)(v253.i64[1] - 224);
    long long v159 = *(_OWORD *)(v253.i64[0] + 16);
    uint64_t v160 = *(void *)(a1 + 40);
    uint64_t v161 = *(void *)(a1 + 48);
    if (v160 != v161)
    {
      float32x2_t v162 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
      float v163 = vaddv_f32(vmul_f32(v162, v162));
      if (v163 < 0.000001) {
        float v163 = 0.000001;
      }
      do
      {
        uint64_t v164 = *(void *)(v160 + 40);
        uint64_t v165 = *(void *)(v160 + 48);
        while (v164 != v165)
        {
          long long v166 = *(_OWORD *)(v164 + 16);
          *(_DWORD *)(v164 + 24) = DWORD2(v166);
          *(float32x2_t *)(v164 + 16) = vmla_n_f32(*(float32x2_t *)&v159, v162, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v166, *(float32x2_t *)&v159), v162))/ v163);
          v164 += 48;
        }
        v160 += 120;
      }
      while (v160 != v161);
    }
    uint64_t v167 = *(void *)(a1 + 64);
    uint64_t v168 = *(void *)(a1 + 72);
    if (v167 != v168)
    {
      float32x2_t v169 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
      float v170 = vaddv_f32(vmul_f32(v169, v169));
      if (v170 < 0.000001) {
        float v170 = 0.000001;
      }
      do
      {
        uint64_t v171 = *(void *)(v167 + 40);
        uint64_t v172 = *(void *)(v167 + 48);
        while (v171 != v172)
        {
          long long v173 = *(_OWORD *)(v171 + 16);
          *(_DWORD *)(v171 + 24) = DWORD2(v173);
          *(float32x2_t *)(v171 + 16) = vmla_n_f32(*(float32x2_t *)&v159, v169, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v173, *(float32x2_t *)&v159), v169))/ v170);
          v171 += 48;
        }
        v167 += 120;
      }
      while (v167 != v168);
    }
    uint64_t v209 = v158;
    uint64_t v211 = v159;
    unint64_t v174 = sub_25B57A9F8((uint64_t)v234, *v157);
    uint64_t v175 = *(void *)(a1 + 40);
    uint64_t v176 = *(void *)(a1 + 48);
    if (v176 != v175)
    {
      int v177 = HIDWORD(v174);
      unint64_t v178 = sub_25B57A9F8((uint64_t)v234, v156[2]) >> 32;
      uint64_t v179 = *(void *)(v175 + 40);
      if ((int)(sub_25B57A9F8((uint64_t)v234, *(float32x2_t *)(v179 + 64)) >> 32) < (int)v178) {
        goto LABEL_111;
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) >= 2)
      {
        float32x4_t v180 = *(float32x4_t *)(v179 + 16);
        float v181 = COERCE_FLOAT(*(void *)(v179 + 24));
        float v182 = COERCE_FLOAT(*(void *)(v179 + 72));
        float v183 = vsubq_f32(*(float32x4_t *)(v179 + 64), v180).f32[0];
        double v184 = fabsf(v183);
        float v185 = v181 + (float)((float)((float)(*(float *)&v211 - v180.f32[0]) * (float)(v182 - v181)) / v183);
        float v186 = (float)(v181 + v182) * 0.5;
        *(_DWORD *)(v179 + 24) = v180.i32[2];
        if (v184 < 0.000001) {
          float v187 = v186;
        }
        else {
          float v187 = v185;
        }
        *(void *)(v179 + 16) = v211;
        *(float *)(*(void *)(*(void *)(a1 + 40) + 40) + 24) = v187;
        uint64_t v188 = *(void *)(a1 + 64);
        uint64_t v189 = -286331153 * ((unint64_t)(*(void *)(a1 + 72) - v188) >> 3);
        *(void *)(*(void *)(v188 + 120 * (int)((unint64_t)((v189 << 32) - 0x200000000) >> 32) + 40) + 64) = v211;
        uint64_t v190 = (((v189 << 32) - 0x100000000) >> 25) - (((v189 << 32) - 0x100000000) >> 29);
        *(void *)(*(void *)(*(void *)(a1 + 64) + v190 + 40) + 16) = v211;
        *(void *)(*(void *)(*(void *)(a1 + 64) + v190 + 40) + 64) = v211;
        *(float *)(*(void *)(*(void *)(a1 + 64) + v190 + 40) + 72) = v187;
        uint64_t v175 = *(void *)(a1 + 40);
        uint64_t v176 = *(void *)(a1 + 48);
LABEL_111:
        int v191 = -286331153 * ((unint64_t)(v176 - v175) >> 3) - 1;
        long long v192 = *(float32x4_t **)(v175 + 120 * v191 + 40);
        if ((int)(sub_25B57A9F8((uint64_t)v234, *(float32x2_t *)v192[1].f32) >> 32) <= v177)
        {
          unint64_t v193 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
          if (v193 >= 3)
          {
            float32x4_t v194 = v192[1];
            float v195 = COERCE_FLOAT(v192[1].i64[1]);
            float32x4_t v196 = v192[4];
            float v197 = COERCE_FLOAT(v192[4].i64[1]);
            float v198 = vsubq_f32(v196, v194).f32[0];
            float v199 = v195 + (float)((float)((float)(*(float *)&v209 - v194.f32[0]) * (float)(v197 - v195)) / v198);
            float v200 = (float)(v195 + v197) * 0.5;
            v192[4].i32[2] = v196.i32[2];
            if (fabsf(v198) < 0.000001) {
              float v199 = v200;
            }
            v192[4].i64[0] = v209;
            *(float *)(*(void *)(*(void *)(a1 + 40) + 120 * v191 + 40) + 72) = v199;
            *(void *)(*(void *)(*(void *)(a1 + 64) + 120 * (int)(((v193 << 32) - 0x200000000) >> 32) + 40)
                      + 16) = v209;
            uint64_t v201 = ((uint64_t)((v193 << 32) - 0x300000000) >> 25) - ((uint64_t)((v193 << 32) - 0x300000000) >> 29);
            *(void *)(*(void *)(*(void *)(a1 + 64) + v201 + 40) + 16) = v209;
            *(float *)(*(void *)(*(void *)(a1 + 64) + v201 + 40) + 24) = v199;
            *(void *)(*(void *)(*(void *)(a1 + 64) + v201 + 40) + 64) = v209;
          }
        }
      }
    }
  }
  kdebug_trace();
  long long v212 = &unk_2708F1C48;
  long long v224 = (void **)&v213;
  sub_25B4331AC(&v224);
LABEL_117:
  long long v222 = &unk_2708F21F8;
  if (v223) {
    sub_25B404120(v223);
  }
  long long v216 = &unk_2708F21F8;
  if (v221) {
    sub_25B404120(v221);
  }
  sub_25B565F7C((uint64_t)v234);
}

void sub_25B563974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void **a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v70 = *v68;
  if (*v68)
  {
    *(void *)(v65 + 80) = v70;
    operator delete(v70);
  }
  STACK[0x238] = v67;
  sub_25B521CF0((void ***)&STACK[0x238]);
  *(void *)(v66 + 72) = v65;
  sub_25B521E50((uint64_t)&a65);
  sub_25B55E274(v66);
  a65 = a10;
  sub_25B4331AC(&a65);
  sub_25B5660D0(&a25);
  sub_25B565F7C((uint64_t)&STACK[0x240]);

  _Unwind_Resume(a1);
}

uint64_t sub_25B563B2C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x222222222222223) {
      sub_25B3FBC4C();
    }
    unint64_t v6 = (void *)result;
    uint64_t result = (uint64_t)sub_25B521B88(a4);
    uint64_t v7 = result;
    *unint64_t v6 = result;
    v6[1] = result;
    std::locale v6[2] = result + 120 * v8;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_25B5218E4(v7 + v9, a2 + v9);
        v9 += 120;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_25B563BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_25B563C40(unint64_t a1)
{
  if (a1 >> 57) {
    sub_25B3FA70C();
  }
  return operator new(a1 << 7);
}

void sub_25B563C78(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  if (a2 == a3) {
    return;
  }
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  do
  {
    uint64_t v12 = v10[5];
    if (v10[6] - v12 == 240)
    {
      uint64_t v13 = *(void *)(v12 + 40);
      float v14 = *(float *)(v13 + 72);
      if (vabds_f32(*(float *)(v13 + 24), v14) < 0.05)
      {
        uint64_t v15 = *(void *)(v12 + 160);
        float v16 = *(float *)(v15 + 24);
        if (vabds_f32(v16, *(float *)(v15 + 72)) < 0.05)
        {
          if (v14 < v16 && *(float *)(v12 + 64) < 0.5)
          {
            *(float *)(v13 + 24) = v16;
            *(float *)(*(void *)(v12 + 40) + 72) = v16;
            while ((sub_25B58AA88((uint64_t)v10) & 1) != 0)
              ;
          }
          else if (v16 < v14 && *(float *)(v12 + 184) < 0.5)
          {
            *(float *)(v15 + 24) = v14;
            *(float *)(*(void *)(v12 + 160) + 72) = v14;
            while ((sub_25B58AA88((uint64_t)v10) & 1) != 0)
              ;
          }
        }
      }
    }
    uint64_t v19 = v10[5];
    if (0xEEEEEEEEEEEEEEEFLL * ((v10[6] - v19) >> 3) < 2) {
      goto LABEL_202;
    }
    uint64_t v20 = 224;
    unint64_t v21 = 1;
    do
    {
      uint64_t v22 = v19 + v20;
      uint64_t v23 = *(void *)(v19 + v20 - 184);
      float v24 = (uint64_t *)(v19 + v20 - 224);
      uint64_t v25 = (void ***)(v19 + v20 - 104);
      float v26 = *(float *)(v23 + 24);
      float v27 = *(float *)(v23 + 72);
      uint64_t v28 = *(void *)(v19 + v20 - 64);
      float v29 = *(float *)(v28 + 24);
      float v30 = *(float *)(v28 + 72);
      int v208 = &unk_2708F2140;
      v209[0] = 0;
      v209[4] = 0;
      v209[8] = 0;
      v209[12] = 0;
      v209[16] = 0;
      v209[20] = 0;
      v209[24] = 0;
      v209[28] = 0;
      memset(v210, 0, sizeof(v210));
      int v211 = 0;
      v31.i32[1] = 0;
      v31.i64[1] = 0;
      memset(v212, 0, 48);
      uint64_t i = (void **)&unk_2708F2140;
      v202[0] = 0;
      v202[4] = 0;
      v202[8] = 0;
      v202[12] = 0;
      v202[16] = 0;
      v202[20] = 0;
      v202[24] = 0;
      v202[28] = 0;
      memset(v203, 0, sizeof(v203));
      float v204 = 0.0;
      double v32 = vabds_f32(v26, v27);
      long long v205 = 0u;
      long long v206 = 0u;
      long long v207 = 0u;
      if (v32 >= 0.001
        || (*(double *)v31.i64 = vabds_f32(v29, v30), *(double *)v31.i64 <= 0.1)
        || (a9.i32[0] = *(_DWORD *)(v11 + 20), vabds_f32(v27, v29) >= *(float *)a9.i32))
      {
        if (v32 <= 0.1 || vabds_f32(v29, v30) >= 0.001 || vabds_f32(v27, v29) >= *(float *)(v11 + 20)) {
          goto LABEL_46;
        }
        uint64_t v35 = v19 + v20;
        long long v36 = *(_OWORD *)(v19 + v20 - 216);
        *(_OWORD *)&v209[13] = *(_OWORD *)(v19 + v20 - 203);
        *(_OWORD *)uint64_t v209 = v36;
        if (v24 == (uint64_t *)&v208)
        {
          int v211 = *(_DWORD *)(v35 - 160);
        }
        else
        {
          sub_25B58AD34(v210, *(void *)(v22 - 184), *(void *)(v35 - 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v35 - 176) - *(void *)(v22 - 184)) >> 4));
          int v211 = *(_DWORD *)(v19 + v20 - 160);
          sub_25B3FE7A8(v212, *(char **)(v19 + v20 - 152), *(void *)(v19 + v20 - 144), (uint64_t)(*(void *)(v19 + v20 - 144) - *(void *)(v19 + v20 - 152)) >> 2);
          sub_25B43AB10(&v212[24], *(void *)(v19 + v20 - 128), *(void *)(v19 + v20 - 120), (uint64_t)(*(void *)(v19 + v20 - 120) - *(void *)(v19 + v20 - 128)) >> 4);
        }
        long long v39 = *(_OWORD *)(v19 + v20 - 96);
        *(_OWORD *)&v202[13] = *(_OWORD *)(v19 + v20 - 83);
        *(_OWORD *)id v202 = v39;
        unint64_t v37 = v21;
        if (v25 != &i)
        {
          sub_25B58AD34(v203, *(void *)(v22 - 64), *(void *)(v19 + v20 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + v20 - 56) - *(void *)(v22 - 64)) >> 4));
          float v204 = *(float *)(v19 + v20 - 40);
          sub_25B3FE7A8((char *)&v205, *(char **)(v19 + v20 - 32), *(void *)(v19 + v20 - 24), (uint64_t)(*(void *)(v19 + v20 - 24) - *(void *)(v19 + v20 - 32)) >> 2);
          unint64_t v37 = v21;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v33 = v19 + v20;
        long long v34 = *(_OWORD *)(v19 + v20 - 96);
        *(_OWORD *)&v209[13] = *(_OWORD *)(v19 + v20 - 83);
        *(_OWORD *)uint64_t v209 = v34;
        if (v25 == (void ***)&v208)
        {
          int v211 = *(_DWORD *)(v33 - 40);
        }
        else
        {
          sub_25B58AD34(v210, *(void *)(v22 - 64), *(void *)(v33 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v33 - 56) - *(void *)(v22 - 64)) >> 4));
          int v211 = *(_DWORD *)(v19 + v20 - 40);
          sub_25B3FE7A8(v212, *(char **)(v19 + v20 - 32), *(void *)(v19 + v20 - 24), (uint64_t)(*(void *)(v19 + v20 - 24) - *(void *)(v19 + v20 - 32)) >> 2);
          sub_25B43AB10(&v212[24], *(void *)(v19 + v20 - 8), *(void *)(v19 + v20), (uint64_t)(*(void *)(v19 + v20) - *(void *)(v19 + v20 - 8)) >> 4);
        }
        unint64_t v37 = v21 - 1;
        long long v38 = *(_OWORD *)(v19 + v20 - 216);
        *(_OWORD *)&v202[13] = *(_OWORD *)(v19 + v20 - 203);
        *(_OWORD *)id v202 = v38;
        if (v24 != (uint64_t *)&i)
        {
          sub_25B58AD34(v203, *(void *)(v22 - 184), *(void *)(v19 + v20 - 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + v20 - 176) - *(void *)(v22 - 184)) >> 4));
          float v204 = *(float *)(v19 + v20 - 160);
          sub_25B3FE7A8((char *)&v205, *(char **)(v19 + v20 - 152), *(void *)(v19 + v20 - 144), (uint64_t)(*(void *)(v19 + v20 - 144) - *(void *)(v19 + v20 - 152)) >> 2);
LABEL_38:
          sub_25B43AB10((char *)&v206 + 8, *(void *)(v19 + 120 * v37 + 96), *(void *)(v19 + 120 * v37 + 104), (uint64_t)(*(void *)(v19 + 120 * v37 + 104) - *(void *)(v19 + 120 * v37 + 96)) >> 4);
          goto LABEL_40;
        }
      }
      float v204 = *(float *)(v19 + 120 * v37 + 64);
LABEL_40:
      int32x4_t v40 = *(int32x4_t *)(*(void *)v210 + 16);
      v31.i32[0] = *(_DWORD *)(*(void *)v203 + 24);
      float32x4_t v41 = v31;
      v41.i32[1] = *(void *)(*(void *)v210 + 72);
      *(float32x2_t *)v41.f32 = vsub_f32(*(float32x2_t *)v41.f32, (float32x2_t)vdup_laneq_s32(v40, 2));
      v41.f32[0] = v41.f32[0] / (float)(v41.f32[1] + 0.00000011921);
      float32x2_t v42 = vmla_n_f32(*(float32x2_t *)(*(void *)v210 + 16), vsub_f32(*(float32x2_t *)(*(void *)v210 + 64), *(float32x2_t *)v40.i8), v41.f32[0]);
      float32x2_t v43 = vsub_f32(v42, *(float32x2_t *)(*(void *)v210 + 64));
      uint64_t v11 = a1;
      if (vaddv_f32(vmul_f32(vsub_f32(v42, *(float32x2_t *)v40.i8), v43)) <= 0.0
        || (float32x2_t v43 = vsub_f32(v42, *(float32x2_t *)(*(void *)v203 + 64)),
            vaddv_f32(vmul_f32(vsub_f32(v42, *(float32x2_t *)(*(void *)v203 + 16)), v43)) <= 0.0))
      {
        int v196 = *(_DWORD *)(*(void *)v203 + 24);
        long long v197 = *(_OWORD *)(*(void *)(v22 - 184) + 64);
        float32x2_t v198 = v42;
        sub_25B58AFE0((uint64_t)v200, a1, *((uint64_t *)&v206 + 1), v207, *(double *)&v197, *(double *)&v43, v41, *(double *)&v42, *(double *)v31.i64, a9);
        float32x2_t v44 = vsub_f32(*(float32x2_t *)&v197, v198);
        if (sqrtf(vaddv_f32(vmul_f32(v44, v44))) <= 0.5 || !v200[8] && v204 <= 0.5)
        {
          *(float32x2_t *)(*(void *)(v22 - 184) + 64) = v198;
          *(_DWORD *)(*(void *)(v22 - 184) + 72) = v196;
          *(float32x2_t *)(*(void *)(v22 - 64) + 16) = v198;
          *(_DWORD *)(*(void *)(v22 - 64) + 24) = v196;
        }
      }
LABEL_46:
      sub_25B521E50((uint64_t)&i);
      sub_25B521E50((uint64_t)&v208);
      ++v21;
      uint64_t v19 = v10[5];
      uint64_t v50 = v10[6];
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
      v20 += 120;
    }
    while (v51 > v21);
    if (v51 < 2 || v50 == v19) {
      goto LABEL_78;
    }
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    char v54 = 0;
    while (2)
    {
      uint64_t v55 = v19 + v52;
      uint64_t v56 = *(float32x4_t **)(v19 + v52 + 40);
      v46.i32[0] = v56[4].i32[2];
      v45.f32[0] = vabds_f32(v56[1].f32[2], v46.f32[0]);
      if (v45.f32[0] < 0.05)
      {
        float32x4_t v46 = v56[4];
        float32x4_t v45 = vsubq_f32(v56[1], v46);
        v45.i64[0] = vmulq_f32(v45, v45).u64[0];
        v45.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v45.f32));
        v46.i32[0] = *(_DWORD *)(v55 + 64);
        if (v45.f32[0] <= 0.5 || v46.f32[0] <= 0.5)
        {
          sub_25B58AFE0((uint64_t)&v208, v11, *(void *)(v19 + v52 + 96), *(void *)(v19 + v52 + 104), *(double *)v45.i64, *(double *)v46.i64, v47, *(double *)v48.i64, v49, a9);
          if (!v209[0] || (v45.i32[0] = *(_DWORD *)(v55 + 64), v45.f32[0] <= 0.5))
          {
            if (v53)
            {
              if (v53 == v51 - 1)
              {
                int64x2_t v58 = *(float32x4_t **)(v19 + v52 - 80);
                float32x4_t v45 = v58[1];
                float32x4_t v48 = v58[4];
                float32x4_t v59 = vsubq_f32(v45, v48);
                *(float *)&double v49 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v59, v59)));
                long long v60 = *(float32x4_t **)(v55 + 40);
                float32x4_t v47 = v60[1];
                float32x4_t v46 = v60[4];
                float32x4_t v61 = vsubq_f32(v47, v46);
                a9 = (int8x16_t)vmulq_f32(v61, v61);
                *(float *)a9.i32 = sqrtf(vaddv_f32(*(float32x2_t *)a9.i8));
                if (*(float *)&v49 > *(float *)a9.i32)
                {
                  double v49 = COERCE_DOUBLE(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v45, v48))));
                  if ((BYTE4(v49) & 1) == 0)
                  {
                    float32x4_t v47 = (float32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v48, v47));
                    *(int16x4_t *)v47.f32 = vmovn_s32((int32x4_t)v47);
                    if ((v47.i8[4] & 1) == 0)
                    {
                      v47.i32[0] = v48.i32[2];
                      LODWORD(v49) = v45.i32[2];
                      v48.i64[0] = vsubq_f32(v48, v45).u64[0];
                      *(double *)a9.i64 = fabsf(v48.f32[0]);
                      if (*(double *)a9.i64 >= 0.000001)
                      {
                        v45.i64[0] = vsubq_f32(v46, v45).u64[0];
                        v45.f32[0] = (float)((float)(v48.f32[2] - v45.f32[2]) * v45.f32[0]) / v48.f32[0];
                        v46.f32[0] = v45.f32[2] + v45.f32[0];
                      }
                      else
                      {
                        v45.f32[0] = v45.f32[2] + v48.f32[2];
                        v46.f32[0] = (float)(v45.f32[2] + v48.f32[2]) * 0.5;
                      }
                      goto LABEL_72;
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v62 = *(float32x4_t **)(v19 + 160);
              float32x4_t v45 = v62[1];
              float32x4_t v48 = v62[4];
              float32x4_t v63 = vsubq_f32(v45, v48);
              *(float *)&double v49 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v63, v63)));
              long long v60 = *(float32x4_t **)(v55 + 40);
              float32x4_t v47 = v60[1];
              float32x4_t v46 = v60[4];
              float32x4_t v64 = vsubq_f32(v47, v46);
              a9 = (int8x16_t)vmulq_f32(v64, v64);
              *(float *)a9.i32 = sqrtf(vaddv_f32(*(float32x2_t *)a9.i8));
              if (*(float *)&v49 > *(float *)a9.i32)
              {
                *(int16x4_t *)v46.f32 = vmovn_s32(vcgeq_f32(v45, v46));
                if (v46.i8[4])
                {
                  *(int16x4_t *)v46.f32 = vmovn_s32(vcgtq_f32(v48, v45));
                  if (v46.i8[4])
                  {
                    v46.i32[0] = v45.i32[2];
                    LODWORD(v49) = v48.i32[2];
                    v48.i64[0] = vsubq_f32(v48, v45).u64[0];
                    *(double *)a9.i64 = fabsf(v48.f32[0]);
                    if (*(double *)a9.i64 >= 0.000001)
                    {
                      v45.i64[0] = vsubq_f32(v47, v45).u64[0];
                      v45.f32[0] = (float)((float)(v48.f32[2] - v45.f32[2]) * v45.f32[0]) / v48.f32[0];
                      v47.f32[0] = v45.f32[2] + v45.f32[0];
                    }
                    else
                    {
                      v45.f32[0] = v45.f32[2] + v48.f32[2];
                      v47.f32[0] = (float)(v45.f32[2] + v48.f32[2]) * 0.5;
                    }
LABEL_72:
                    v60[1].i32[2] = v47.i32[0];
                    *(_DWORD *)(*(void *)(v55 + 40) + 72) = v46.i32[0];
                    char v54 = 1;
                  }
                }
              }
            }
          }
          uint64_t v19 = v10[5];
          uint64_t v50 = v10[6];
        }
      }
      ++v53;
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
      v52 += 120;
      if (v51 > v53) {
        continue;
      }
      break;
    }
    if (v54)
    {
      while ((sub_25B58AA88((uint64_t)v10) & 1) != 0)
        ;
      uint64_t v19 = v10[5];
      uint64_t v50 = v10[6];
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
    }
LABEL_78:
    if (v51 >= 2 && v50 != v19)
    {
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      do
      {
        sub_25B58AFE0((uint64_t)&v208, v11, *(void *)(v19 + v66 + 96), *(void *)(v19 + v66 + 104), *(double *)v45.i64, *(double *)v46.i64, v47, *(double *)v48.i64, v49, a9);
        uint64_t v68 = *(void *)(v19 + v66 + 40);
        v45.i32[0] = *(_DWORD *)(v68 + 24);
        v47.i32[0] = *(_DWORD *)(v68 + 72);
        v46.f32[0] = vabds_f32(v45.f32[0], v47.f32[0]);
        if (v46.f32[0] >= 0.05 || v209[0] != 0) {
          goto LABEL_112;
        }
        if (v67)
        {
          if (v67 != v51 - 1) {
            goto LABEL_112;
          }
          uint64_t v70 = *(void *)(v19 + v66 - 80);
          v47.i32[0] = *(_DWORD *)(v70 + 24);
          v46.i32[0] = *(_DWORD *)(v70 + 72);
          v48.f32[0] = vabds_f32(v47.f32[0], v46.f32[0]);
          LODWORD(v49) = *(_DWORD *)(v19 + v66 - 56);
          BOOL v71 = v48.f32[0] < 0.05 || *(float *)&v49 <= 0.5;
          BOOL v72 = !v71 && v47.f32[0] < v46.f32[0];
          if (!v72 || v46.f32[0] >= v45.f32[0]) {
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v74 = *(void *)(v19 + 160);
          v46.i32[0] = *(_DWORD *)(v74 + 24);
          v45.i32[0] = *(_DWORD *)(v74 + 72);
          v48.f32[0] = vabds_f32(v46.f32[0], v45.f32[0]);
          LODWORD(v49) = *(_DWORD *)(v19 + 184);
          if (v48.f32[0] < 0.05 || *(float *)&v49 <= 0.5 || v47.f32[0] <= v46.f32[0] || v46.f32[0] <= v45.f32[0]) {
            goto LABEL_112;
          }
        }
        *(_DWORD *)(v68 + 24) = v46.i32[0];
        *(_DWORD *)(*(void *)(v19 + v66 + 40) + 72) = v46.i32[0];
LABEL_112:
        ++v67;
        uint64_t v19 = v10[5];
        uint64_t v50 = v10[6];
        unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
        v66 += 120;
      }
      while (v51 > v67);
    }
    BOOL v78 = v51 < 2 || v50 == v19;
    uint64_t v9 = a3;
    if (!v78)
    {
      uint64_t v79 = 0;
      unint64_t v80 = 0;
      do
      {
        uint64_t v81 = v19 + v79;
        uint64_t v82 = *(void *)(v19 + v79 + 40);
        float v83 = *(float *)(v82 + 24);
        float v84 = *(float *)(v82 + 72);
        if (vabds_f32(v83, v84) < 0.05)
        {
          if ((uint64_t)v80 < (int)v51 - 1)
          {
            uint64_t v85 = v19 + v79;
            uint64_t v86 = *(void *)(v19 + v79 + 160);
            float v87 = *(float *)(v86 + 24);
            float v88 = *(float *)(v86 + 72);
            if (vabds_f32(v87, v88) >= 0.05)
            {
              BOOL v89 = *(float *)(v85 + 184) <= 0.3 || v84 <= v87;
              if (!v89 && v87 > v88)
              {
                int32x4_t v91 = *(int32x4_t *)(v86 + 16);
                v92.i32[0] = *(_DWORD *)(v82 + 24);
                v92.i32[1] = *(void *)(v86 + 72);
                float32x2_t v93 = vsub_f32(v92, (float32x2_t)vdup_laneq_s32(v91, 2));
                float32x2_t v94 = vmla_n_f32(*(float32x2_t *)v91.i8, vsub_f32(*(float32x2_t *)(v86 + 64), *(float32x2_t *)v91.i8), v93.f32[0] / (float)(v93.f32[1] + 0.00000011921));
                long long v95 = *(_OWORD *)(v82 + 64);
                if (vaddv_f32(vmul_f32(vsub_f32(v94, *(float32x2_t *)(v82 + 16)), vsub_f32(v94, *(float32x2_t *)&v95))) <= 0.0)
                {
                  *(_DWORD *)(v82 + 72) = DWORD2(v95);
                  *(float32x2_t *)(v82 + 64) = v94;
                  *(float *)(*(void *)(v81 + 40) + 72) = v83;
                  *(float32x2_t *)(*(void *)(v85 + 160) + 16) = v94;
                  *(float *)(*(void *)(v85 + 160) + 24) = v83;
                  uint64_t v19 = v10[5];
                }
              }
            }
          }
          if (v80)
          {
            uint64_t v96 = v19 + 120 * (v80 - 1);
            uint64_t v99 = *(void *)(v96 + 40);
            uint16x8_t v97 = (float *)(v96 + 40);
            uint64_t v98 = v99;
            float v100 = *(float *)(v99 + 24);
            float v101 = *(float *)(v99 + 72);
            if (vabds_f32(v100, v101) >= 0.05 && v97[6] > 0.3 && v100 < v101)
            {
              uint64_t v103 = *(void *)(v81 + 40);
              float v104 = *(float *)(v103 + 24);
              if (v101 < v104)
              {
                int32x4_t v105 = *(int32x4_t *)(v98 + 16);
                v106.i32[0] = *(_DWORD *)(v103 + 24);
                v106.i32[1] = *(void *)(v98 + 72);
                float32x2_t v107 = vsub_f32(v106, (float32x2_t)vdup_laneq_s32(v105, 2));
                float32x2_t v108 = vmla_n_f32(*(float32x2_t *)v105.i8, vsub_f32(*(float32x2_t *)(v98 + 64), *(float32x2_t *)v105.i8), v107.f32[0] / (float)(v107.f32[1] + 0.00000011921));
                long long v109 = *(_OWORD *)(v103 + 16);
                if (vaddv_f32(vmul_f32(vsub_f32(v108, *(float32x2_t *)&v109), vsub_f32(v108, *(float32x2_t *)(v103 + 64)))) <= 0.0)
                {
                  *(_DWORD *)(v103 + 24) = DWORD2(v109);
                  *(float32x2_t *)(v103 + 16) = v108;
                  *(float *)(*(void *)(v81 + 40) + 24) = v104;
                  *(float32x2_t *)(*(void *)v97 + 64) = v108;
                  *(float *)(*(void *)v97 + 72) = v104;
                  uint64_t v19 = v10[5];
                }
              }
            }
          }
        }
        ++v80;
        uint64_t v50 = v10[6];
        unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
        v79 += 120;
      }
      while (v51 > v80);
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
    }
    if (v51 < 3 || v50 == v19) {
      goto LABEL_202;
    }
    unint64_t v111 = 0;
    uint64_t v112 = -120;
    uint64_t v113 = 120;
    uint64_t v114 = 280;
    while (2)
    {
      uint64_t v115 = v19 + v114;
      uint64_t v116 = *(float32x4_t **)(v19 + v114 - 240);
      float v117 = v116[1].f32[2];
      v118.i32[0] = v116[4].i32[2];
      if (vabds_f32(v117, *(float *)v118.i32) >= 0.05)
      {
        if ((uint64_t)v111 >= (int)v51 - 2) {
          goto LABEL_165;
        }
        uint64_t v119 = *(float32x4_t **)(v19 + v114 - 120);
        if (vabds_f32(v119[1].f32[2], v119[4].f32[2]) >= 0.05) {
          goto LABEL_165;
        }
        BOOL v120 = *(float32x2_t **)(v19 + v114);
        float v121 = v120[3].f32[0];
        BOOL v122 = vabds_f32(v121, v120[9].f32[0]) < 0.05 && v117 < *(float *)v118.i32;
        if (!v122 || *(float *)v118.i32 >= v121) {
          goto LABEL_165;
        }
        float32x4_t v124 = vsubq_f32(v119[1], v119[4]);
        float v125 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v124, v124)));
        if (v125 <= 0.5
          && (float32x4_t v126 = v116[1],
              float32x4_t v127 = v116[4],
              float32x4_t v128 = vsubq_f32(v126, v127),
              v125 <= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v128, v128)))))
        {
LABEL_162:
          int32x4_t v129 = vuzp1q_s32((int32x4_t)v127, (int32x4_t)v126);
          int32x4_t v118 = vuzp2q_s32(v129, v129);
          float32x2_t v130 = (float32x2_t)vdup_laneq_s32(v118, 2);
          v130.i32[0] = v120[3].i32[0];
          float32x2_t v131 = vsub_f32(v130, (float32x2_t)vdup_laneq_s32(v118, 3));
          float32x2_t v132 = vmla_n_f32(*(float32x2_t *)v126.f32, vsub_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v126.f32), v131.f32[0] / (float)(v131.f32[1] + 0.00000011921));
          float32x2_t v133 = vsub_f32(v132, v120[2]);
          float32x2_t v134 = vsub_f32(v132, v120[8]);
          if (vaddv_f32(vmul_f32(v133, v134)) <= 0.0
            || (int32x2_t v135 = (int32x2_t)vmul_f32(v133, v133),
                int32x2_t v136 = (int32x2_t)vmul_f32(v134, v134),
                int32x2_t v137 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v135, v136), (float32x2_t)vzip2_s32(v135, v136))),
                (vcgt_f32((float32x2_t)vdup_lane_s32(v137, 1), (float32x2_t)v137).u8[0] & 1) != 0))
          {
            v116[4].i32[2] = v127.i32[2];
            *(float32x2_t *)v116[4].f32 = v132;
            *(float *)(*(void *)(v115 - 240) + 72) = v121;
            *(float32x2_t *)(*(void *)(v19 + v114) + 16) = v132;
            *(float *)(*(void *)(v19 + v114) + 24) = v121;
            int v208 = 0;
            *(void *)uint64_t v209 = 0;
            *(void *)&v209[8] = 0;
            uint64_t v192 = v10[5];
            uint64_t i = &v208;
            if (v192 != v192 + 120 * v111 + 120)
            {
              do
              {
                sub_25B521880(&i, v192);
                v192 += 120;
                v113 -= 120;
              }
              while (v113);
              uint64_t v192 = v10[5];
            }
            uint64_t v193 = v192 + 120 * v111 + 240;
            uint64_t v194 = v10[6];
            for (uint64_t i = &v208; v193 != v194; v193 += 120)
              sub_25B521880(&i, v193);
            goto LABEL_217;
          }
          float v117 = *(float *)&v118.i32[1];
LABEL_165:
          if (v111 >= 2)
          {
            uint64_t v138 = *(float32x4_t **)(v19 + 120 * (v111 - 1) + 40);
            if (vabds_f32(v138[1].f32[2], v138[4].f32[2]) < 0.05)
            {
              uint64_t v139 = v19 + 120 * (v111 - 2);
              int v142 = *(float32x2_t **)(v139 + 40);
              unint64_t v140 = (float32x2_t **)(v139 + 40);
              long long v141 = v142;
              float v143 = v142[3].f32[0];
              float v144 = v142[9].f32[0];
              BOOL v145 = vabds_f32(v143, v144) < 0.05 && *(float *)v118.i32 < v117;
              if (v145 && v117 < v143)
              {
                float32x4_t v147 = vsubq_f32(v138[1], v138[4]);
                float v148 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v147, v147)));
                if (v148 <= 0.5
                  && (float32x4_t v149 = v116[1],
                      float32x4_t v150 = v116[4],
                      float32x4_t v151 = vsubq_f32(v149, v150),
                      v148 <= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v151, v151)))))
                {
                  LODWORD(v152) = v116[1].i64[1];
                }
                else
                {
                  if (*(float *)(v19 + 120 * (v111 - 1) + 64) > 0.3) {
                    goto LABEL_174;
                  }
                  float32x4_t v149 = v116[1];
                  LODWORD(v152) = v116[1].i64[1];
                  float32x4_t v150 = v116[4];
                }
                float32x2_t v153 = vmla_n_f32(*(float32x2_t *)v149.f32, vsub_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v149.f32), (float)(v144 - v152) / (float)((float)(v150.f32[2] - v152) + 0.00000011921));
                float32x2_t v154 = vsub_f32(v153, v141[2]);
                float32x2_t v155 = vsub_f32(v153, v141[8]);
                if (vaddv_f32(vmul_f32(v154, v155)) <= 0.0
                  || (int32x2_t v156 = (int32x2_t)vmul_f32(v155, v155),
                      int32x2_t v157 = (int32x2_t)vmul_f32(v154, v154),
                      int32x2_t v158 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v156, v157), (float32x2_t)vzip2_s32(v156, v157))), (vcgt_f32((float32x2_t)vdup_lane_s32(v158, 1), (float32x2_t)v158).u8[0] & 1) != 0))
                {
                  v116[1].i32[2] = v149.i32[2];
                  *(float32x2_t *)v116[1].f32 = v153;
                  *(float *)(*(void *)(v115 - 240) + 24) = v144;
                  (*v140)[8] = v153;
                  (*v140)[9].f32[0] = v144;
                  int v208 = 0;
                  *(void *)uint64_t v209 = 0;
                  *(void *)&v209[8] = 0;
                  uint64_t v159 = v10[5];
                  uint64_t i = &v208;
                  if (v159 != v159 + 120 * v111 - 120)
                  {
                    do
                    {
                      sub_25B521880(&i, v159);
                      v159 += 120;
                      v112 -= 120;
                    }
                    while (v112);
                    uint64_t v159 = v10[5];
                  }
                  uint64_t v160 = v159 + 120 * v111;
                  uint64_t v161 = v10[6];
                  for (uint64_t i = &v208; v160 != v161; v160 += 120)
                    sub_25B521880(&i, v160);
                  goto LABEL_217;
                }
              }
            }
          }
        }
        else if (*(float *)(v19 + v114 - 96) <= 0.3)
        {
          float32x4_t v126 = v116[1];
          float32x4_t v127 = v116[4];
          goto LABEL_162;
        }
      }
LABEL_174:
      ++v111;
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
      v114 += 120;
      v112 += 120;
      v113 += 120;
      if (v51 > v111) {
        continue;
      }
      break;
    }
    if (v50 == v19) {
      goto LABEL_202;
    }
    unint64_t v162 = 0;
    uint64_t v163 = 120;
    uint64_t v164 = 280;
    while (1)
    {
      uint64_t v165 = (float32x4_t **)(v19 + v164);
      long long v166 = *(float32x4_t **)(v19 + v164 - 240);
      float v167 = v166[1].f32[2];
      float v168 = v166[4].f32[2];
      if (vabds_f32(v167, v168) >= 0.05
        && (uint64_t)v162 < (int)v51 - 2
        && vabds_f32((*(v165 - 15))[1].f32[2], (*(v165 - 15))[4].f32[2]) < 0.05)
      {
        float v170 = *v165;
        float v171 = (*v165)[4].f32[2];
        float v172 = (*v165)[1].f32[2];
        if (vabds_f32(v172, v171) >= 0.05
          && vabds_f32(v168, v172) > 0.1
          && (float)((float)(v168 - v167) * (float)(v171 - v172)) <= 0.0)
        {
          float32x4_t v173 = v166[1];
          float32x4_t v174 = v166[4];
          v175.i32[0] = 0;
          v175.i32[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
          float32x4_t v176 = vsubq_f32(v174, v173);
          float v177 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v176, v176)));
          v178.f32[0] = v177;
          v178.i32[1] = v166[4].i64[1];
          float32x4_t v179 = vsubq_f32(v170[1], v173);
          v180.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v179, v179)));
          v180.i32[1] = v170[1].i64[1];
          float32x4_t v181 = vsubq_f32(v170[4], v173);
          v181.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v181, v181)));
          v181.i32[1] = v170[4].i64[1];
          int32x2_t v182 = (int32x2_t)vsub_f32(v178, v175);
          float32x2_t v183 = vsub_f32(*(float32x2_t *)v181.f32, v180);
          v178.f32[0] = -*(float *)&v182.i32[1];
          float32x2_t v184 = (float32x2_t)vzip1_s32((int32x2_t)v178, v182);
          int32x2_t v185 = (int32x2_t)vmul_f32(v183, v184);
          if (vaddv_f32((float32x2_t)v185) != 0.0) {
            break;
          }
        }
      }
      ++v162;
      unint64_t v51 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - v19) >> 3);
      v164 += 120;
      v163 += 120;
      if (v51 <= v162) {
        goto LABEL_202;
      }
    }
    int32x2_t v186 = (int32x2_t)vmul_f32(vsub_f32(v175, v180), v184);
    float32x2_t v187 = vmla_n_f32(v180, v183, vdiv_f32(vadd_f32((float32x2_t)v186, (float32x2_t)vdup_lane_s32(v186, 1)), vadd_f32((float32x2_t)v185, (float32x2_t)vdup_lane_s32(v185, 1))).f32[0]);
    float32x2_t v188 = vmla_n_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v176.f32, sqrtf(vmul_f32(v187, v187).f32[0]) / (float)(v177 + 0.00000011921));
    v166[4].i32[2] = v174.i32[2];
    *(float32x2_t *)v166[4].f32 = v188;
    (*(v165 - 30))[4].i32[2] = v187.i32[1];
    *(float32x2_t *)(*v165)[1].f32 = v188;
    (*v165)[1].i32[2] = v187.i32[1];
    int v208 = 0;
    *(void *)uint64_t v209 = 0;
    *(void *)&v209[8] = 0;
    uint64_t v189 = v10[5];
    uint64_t i = &v208;
    if (v189 != v189 + 120 * v162 + 120)
    {
      do
      {
        sub_25B521880(&i, v189);
        v189 += 120;
        v163 -= 120;
      }
      while (v163);
      uint64_t v189 = v10[5];
    }
    uint64_t v190 = v189 + 120 * v162 + 240;
    uint64_t v191 = v10[6];
    uint64_t i = &v208;
    while (v190 != v191)
    {
      sub_25B521880(&i, v190);
      v190 += 120;
    }
LABEL_217:
    sub_25B521750((uint64_t)v10, (uint64_t *)&v208);
    uint64_t i = &v208;
    sub_25B55E2EC(&i);
LABEL_202:
    while ((sub_25B58AA88((uint64_t)v10) & 1) != 0)
      ;
    sub_25B565F00(v10);
    v10 += 12;
  }
  while (v10 != v9);
}

void sub_25B564DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  a26 = (void **)(v26 - 256);
  sub_25B55E2EC(&a26);
  _Unwind_Resume(a1);
}

float sub_25B564E44(uint64_t a1, uint64_t a2, void *a3, __n128 a4)
{
  if (!*(unsigned char *)(a2 + 96)) {
    return a4.n128_f32[0];
  }
  long long v109 = (uint64_t *)(a2 + 40);
  if (!sub_25B521148(*(void *)(a2 + 40), *(void *)(a2 + 48), a4)) {
    goto LABEL_16;
  }
  sub_25B521234(&v115, a3[5], a3[6], v7);
  float32x2_t v9 = (float32x2_t)v115;
  uint64_t v8 = v116;
  if (v116 == v115)
  {
    v10.i32[0] = 0;
    float v14 = 0.0;
    if (!v115) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int8x8_t v10 = (int8x8_t)0x7F7FFFFFFF7FFFFFLL;
  uint64_t v11 = v115;
  do
  {
    int32x2_t v12 = *v11++;
    int8x8_t v13 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32(v12), (float32x2_t)v12), (int8x8_t)vdup_lane_s32(v12, 1), (int8x8_t)vdup_lane_s32(v12, 0));
    int8x8_t v10 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v10.u32[1], v13.u32[0]), (float32x2_t)__PAIR64__(v13.u32[1], v10.u32[0])), v13, v10);
  }
  while (v11 != v116);
  float v14 = *(float *)&v10.i32[1];
  if (v115)
  {
LABEL_7:
    float v111 = v14;
    __int32 v113 = v10.i32[0];
    operator delete(v115);
    float v14 = v111;
    v10.i32[0] = v113;
  }
LABEL_8:
  if (v8 != (int32x2_t *)v9)
  {
    float v15 = *(float *)(a1 + 8);
    if ((float)(*(float *)v10.i32 - v14) < v15)
    {
      uint64_t v16 = a3[5];
      uint64_t v17 = a3[6];
      if (v16 == v17)
      {
LABEL_14:
        if (0xEEEEEEEEEEEEEEEFLL * ((v17 - v16) >> 3) < 3) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v18 = a3[5];
        while (vabds_f32(*(float *)(*(void *)(v18 + 40) + 24), *(float *)(*(void *)(v18 + 40) + 72)) <= v15)
        {
          v18 += 120;
          if (v18 == v17) {
            goto LABEL_14;
          }
        }
      }
      sub_25B5211EC(a3, *(float *)v10.i32);
    }
  }
LABEL_16:
  uint64_t v110 = a1;
  uint64_t v19 = a3[5];
  uint64_t v20 = a3[6];
  __n128 v21 = (__n128)vsubq_f32(*(float32x4_t *)(*(void *)(v20 - 80) + 64), *(float32x4_t *)(*(void *)(v19 + 40) + 16));
  float32x4_t v22 = vmulq_f32((float32x4_t)v21, (float32x4_t)v21);
  v22.f32[0] = sqrtf(vmlas_n_f32(v22.f32[1], v21.n128_f32[0], v21.n128_f32[0]));
  if (v22.f32[0] < 0.000001) {
    v22.f32[0] = 0.000001;
  }
  if (v19 == v20)
  {
    float32x4_t v31 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    float v24 = 0;
    uint64_t v25 = 0;
    float32x2_t v26 = vdiv_f32((float32x2_t)v21.n128_u64[0], (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 0));
    do
    {
      uint64_t v27 = *(void *)(v19 + 40);
      float32x4_t v28 = *(float32x4_t *)(v27 + 16);
      __n128 v21 = *(__n128 *)(v27 + 64);
      float32x4_t v29 = vsubq_f32((float32x4_t)v21, v28);
      float v30 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v29, v29)));
      if (v30 >= 0.03)
      {
        int v32 = 0;
        long long v114 = *(_OWORD *)(v27 + 16);
        LODWORD(v33) = *(void *)(v27 + 24);
        double v34 = fabsf(v30);
        float v35 = v21.n128_f32[2] - v28.f32[2];
        float v36 = (float)(v28.f32[2] + v21.n128_f32[2]) * 0.5;
        while (1)
        {
          v21.n128_f32[0] = (float)v32 * 0.03;
          if (v21.n128_f32[0] > v30) {
            break;
          }
          float v37 = v36;
          if (v34 >= 0.000001) {
            float v37 = (float)((float)(v35 * v21.n128_f32[0]) / v30) + v33;
          }
          v38.n128_u64[0] = (unint64_t)vmla_n_f32(*(float32x2_t *)&v114, v26, v21.n128_f32[0]);
          v38.n128_u64[1] = __PAIR64__(HIDWORD(v114), LODWORD(v37));
          if ((unint64_t)v24 >= v23)
          {
            __n128 v112 = v38;
            uint64_t v39 = ((char *)v24 - (char *)v25) >> 4;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v23 - (void)v25) >> 3 > v40) {
              unint64_t v40 = (uint64_t)(v23 - (void)v25) >> 3;
            }
            if (v23 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v40;
            }
            if (v41) {
              unint64_t v41 = (unint64_t)sub_25B3FFAEC(v41);
            }
            else {
              uint64_t v42 = 0;
            }
            float32x2_t v43 = (float32x2_t *)(v41 + 16 * v39);
            __n128 v21 = v112;
            *(__n128 *)v43->f32 = v112;
            float32x4_t v31 = v43 + 2;
            if (v24 != v25)
            {
              do
              {
                __n128 v44 = *(__n128 *)v24[-2].f32;
                v24 -= 2;
                __n128 v21 = v44;
                *(__n128 *)v43[-2].f32 = v44;
                v43 -= 2;
              }
              while (v24 != v25);
              float v24 = v25;
            }
            uint64_t v25 = v43;
            unint64_t v23 = v41 + 16 * v42;
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(__n128 *)v24->f32 = v38;
            float32x4_t v31 = v24 + 2;
          }
          ++v32;
          float v24 = v31;
          if (v32 == 10000) {
            goto LABEL_43;
          }
        }
      }
      float32x4_t v31 = v24;
LABEL_43:
      v19 += 120;
      float v24 = v31;
    }
    while (v19 != v20);
  }
  uint64_t v45 = *(void *)(a2 + 40);
  if (*(void *)(a2 + 48) != v45)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    while (1)
    {
      uint64_t v48 = v45 + v46;
      double v49 = *(float32x2_t **)(v45 + v46 + 40);
      float v50 = v49[3].f32[0];
      v21.n128_f32[0] = vabds_f32(v50, v49[9].f32[0]);
      if (v21.n128_f32[0] >= 0.05)
      {
        v21.n128_f64[0] = *(float *)(v48 + 64);
        if (v21.n128_f64[0] >= 0.3)
        {
          uint64_t v115 = (int32x2_t *)v49[2];
          uint64_t v51 = sub_25B521384((float32x2_t *)&v115, v25, v31);
          uint64_t v52 = *(float32x2_t **)(v48 + 40);
          float v53 = v52[9].f32[0];
          uint64_t v115 = (int32x2_t *)v52[8];
          uint64_t v54 = sub_25B521384((float32x2_t *)&v115, v25, v31);
          if ((v51 & 0xFF00000000) != 0 && (v54 & 0xFF00000000) != 0)
          {
            v21.n128_u32[0] = v51;
            if (vabds_f32(v50, *(float *)&v51) >= 0.3 || vabds_f32(v53, *(float *)&v54) >= 0.3)
            {
              v21.n128_f32[0] = vabds_f32(*(float *)&v51, *(float *)&v54);
              if (v21.n128_f32[0] <= 0.1) {
                break;
              }
            }
          }
        }
      }
      ++v47;
      uint64_t v45 = *(void *)(a2 + 40);
      v46 += 120;
      if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a2 + 48) - v45) >> 3) <= v47) {
        goto LABEL_57;
      }
    }
    uint64_t v75 = *(unsigned __int8 *)(a2 + 31);
    if ((v75 & 0x80u) != 0) {
      uint64_t v75 = *(void *)(a2 + 16);
    }
    if (v75
      && sub_25B495728(*(void **)(v110 + 24), (void *)(a2 + 8))
      && *((int *)sub_25B4A2E18((uint64_t **)(v110 + 16), (void *)(a2 + 8), a2 + 8) + 14) >= 2)
    {
      *((_DWORD *)sub_25B4A2E18((uint64_t **)(v110 + 16), (void *)(a2 + 8), a2 + 8) + 14) = 0;
      goto LABEL_57;
    }
    uint64_t v76 = *(void *)(a2 + 40);
    uint64_t v77 = *(void *)(a2 + 48);
    BOOL v78 = *(float32x2_t **)(v76 + 40);
    float32x4_t v79 = *(float32x4_t *)v78[2].f32;
    __n128 v21 = *(__n128 *)(*(void *)(a3[5] + 40) + 16);
    float32x4_t v80 = vsubq_f32(v79, (float32x4_t)v21);
    float v81 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v80, v80)));
    uint64_t v82 = *(float32x2_t **)(v77 - 80);
    float32x4_t v83 = *(float32x4_t *)v82[8].f32;
    float32x4_t v84 = *(float32x4_t *)(*(void *)(a3[6] - 80) + 64);
    float32x4_t v85 = vsubq_f32(v83, v84);
    float v86 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v85, v85)));
    if (v81 >= 0.1 || v86 >= 0.1)
    {
      if (v47 || v81 >= 0.1 || vabds_f32(v82[3].f32[0], v83.f32[2]) >= 0.05)
      {
        if (-286331153 * ((unint64_t)(v77 - v76) >> 3) - 1 != v47) {
          goto LABEL_83;
        }
        if (v86 >= 0.1) {
          goto LABEL_83;
        }
        if (vabds_f32(v79.f32[2], v78[9].f32[0]) >= 0.05) {
          goto LABEL_83;
        }
        float32x2_t v100 = vsub_f32((float32x2_t)v21.n128_u64[0], v78[2]);
        float32x2_t v101 = vsub_f32((float32x2_t)v21.n128_u64[0], v78[8]);
        if (vaddv_f32(vmul_f32(v100, v101)) > 0.0)
        {
          int32x2_t v102 = (int32x2_t)vmul_f32(v100, v100);
          int32x2_t v103 = (int32x2_t)vmul_f32(v101, v101);
          int32x2_t v104 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v102, v103), (float32x2_t)vzip2_s32(v102, v103)));
          v21.n128_u64[0] = (unint64_t)vcgt_f32((float32x2_t)vdup_lane_s32(v104, 1), (float32x2_t)v104);
          if ((v21.n128_u8[0] & 1) == 0) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        float32x2_t v90 = vsub_f32(*(float32x2_t *)v84.f32, v82[2]);
        float32x2_t v91 = vsub_f32(*(float32x2_t *)v84.f32, v82[8]);
        if (vaddv_f32(vmul_f32(v90, v91)) > 0.0)
        {
          int32x2_t v92 = (int32x2_t)vmul_f32(v91, v91);
          int32x2_t v93 = (int32x2_t)vmul_f32(v90, v90);
          int32x2_t v94 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v92, v93), (float32x2_t)vzip2_s32(v92, v93)));
          v21.n128_u64[0] = (unint64_t)vcgt_f32((float32x2_t)vdup_lane_s32(v94, 1), (float32x2_t)v94);
          if ((v21.n128_u8[0] & 1) == 0) {
            goto LABEL_83;
          }
        }
      }
    }
    sub_25B52159C(a2, (uint64_t)a3);
    sub_25B521750((uint64_t)a3, v109);
LABEL_83:
    uint64_t v87 = *(unsigned __int8 *)(a2 + 31);
    if ((v87 & 0x80u) != 0) {
      uint64_t v87 = *(void *)(a2 + 16);
    }
    if (v87)
    {
      float v88 = (uint64_t **)(v110 + 16);
      if (!sub_25B495728(*(void **)(v110 + 24), (void *)(a2 + 8))) {
        *((_DWORD *)sub_25B4A2E18(v88, (void *)(a2 + 8), a2 + 8) + 14) = 0;
      }
      BOOL v89 = sub_25B4A2E18(v88, (void *)(a2 + 8), a2 + 8);
      ++*((_DWORD *)v89 + 14);
    }
  }
LABEL_57:
  if (v25) {
    operator delete(v25);
  }
  uint64_t v55 = *(void *)(a2 + 40);
  uint64_t v56 = *(void *)(a2 + 48);
  if (0xEEEEEEEEEEEEEEEFLL * ((v56 - v55) >> 3) > 1) {
    goto LABEL_120;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3[6] - a3[5]) >> 3) < 2) {
    goto LABEL_120;
  }
  if (sub_25B521148(v55, v56, v21)) {
    goto LABEL_120;
  }
  uint64_t v58 = *(void *)(a2 + 40);
  uint64_t v57 = *(void *)(a2 + 48);
  if (v57 == v58) {
    goto LABEL_120;
  }
  float32x4_t v59 = *(float32x4_t *)(*(void *)(v58 + 40) + 16);
  float32x4_t v60 = *(float32x4_t *)(*(void *)(v57 - 80) + 64);
  uint64_t v61 = a3[5];
  uint64_t v62 = a3[6];
  float32x4_t v63 = *(float32x4_t **)(v61 + 40);
  float32x4_t v64 = v63[1];
  float32x4_t v65 = vsubq_f32(v59, v64);
  BOOL v66 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v59.f32), vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v60.f32))) > 0.0;
  if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v65, v65))) < 0.1) {
    BOOL v66 = 0;
  }
  float32x4_t v67 = *(float32x4_t *)(*(void *)(v62 - 80) + 64);
  float32x4_t v68 = vsubq_f32(v60, v67);
  BOOL v69 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v59.f32), vsub_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v60.f32))) > 0.0;
  if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v68, v68))) < 0.1) {
    BOOL v69 = 0;
  }
  if (v62 - v61 != 240 || v66 || v69) {
    goto LABEL_120;
  }
  uint64_t v70 = *(float32x4_t **)(v61 + 160);
  v64.f32[0] = vabds_f32(v70[1].f32[2], v70[4].f32[2]);
  if (vabds_f32(v64.f32[2], v63[4].f32[2]) >= 0.05)
  {
    if (v64.f32[0] < 0.05)
    {
      float32x4_t v95 = vsubq_f32(v70[1], v70[4]);
      float v72 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v95, v95)));
      float32x4_t v73 = v63[1];
      float32x4_t v74 = v63[4];
LABEL_97:
      float32x4_t v96 = vsubq_f32(v73, v74);
      float v97 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v96, v96)));
      if (v72 < 0.5 && v72 < v97)
      {
        uint64_t v99 = *(unsigned __int8 *)(a2 + 31);
        if ((v99 & 0x80u) != 0) {
          uint64_t v99 = *(void *)(a2 + 16);
        }
        if (v99
          && sub_25B495728(*(void **)(v110 + 24), (void *)(a2 + 8))
          && *((int *)sub_25B4A2E18((uint64_t **)(v110 + 16), (void *)(a2 + 8), a2 + 8) + 14) >= 2)
        {
          *((_DWORD *)sub_25B4A2E18((uint64_t **)(v110 + 16), (void *)(a2 + 8), a2 + 8) + 14) = 0;
        }
        else
        {
          sub_25B52159C(a2, (uint64_t)a3);
          sub_25B521750((uint64_t)a3, v109);
          uint64_t v105 = *(unsigned __int8 *)(a2 + 31);
          if ((v105 & 0x80u) != 0) {
            uint64_t v105 = *(void *)(a2 + 16);
          }
          if (v105)
          {
            float32x2_t v106 = (uint64_t **)(v110 + 16);
            if (!sub_25B495728(*(void **)(v110 + 24), (void *)(a2 + 8))) {
              *((_DWORD *)sub_25B4A2E18(v106, (void *)(a2 + 8), a2 + 8) + 14) = 0;
            }
            float32x2_t v107 = sub_25B4A2E18(v106, (void *)(a2 + 8), a2 + 8);
            ++*((_DWORD *)v107 + 14);
          }
        }
      }
    }
  }
  else if (v64.f32[0] >= 0.05)
  {
    float32x4_t v71 = vsubq_f32(v63[1], v63[4]);
    float v72 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v71, v71)));
    float32x4_t v73 = v70[1];
    float32x4_t v74 = v70[4];
    goto LABEL_97;
  }
LABEL_120:

  a4.n128_f32[0] = sub_25B565F00(a3);
  return a4.n128_f32[0];
}