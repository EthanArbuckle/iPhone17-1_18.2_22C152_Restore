uint64_t sub_25B45E1E0(const char *a1, const char *a2)
{
  size_t v4;
  void *v5;
  void *v6;
  size_t v7;
  const std::locale::facet *v8;
  std::locale v10;

  v4 = strlen(a1);
  v5 = (void *)MEMORY[0x263F8C0F8];
  v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B45E2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B45E2EC(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 152;
      v7 = v4 - 152;
      v8 = v4 - 152;
      do
      {
        v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B45E3AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F27E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B45E484(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1AF286BCA1AF286) {
    sub_25B3FBC4C();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v3;
  }
  v18 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_25B3FA70C();
    }
    long long v7 = (char *)operator new(152 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[152 * v2];
  uint64_t v9 = sub_25B455F0C(v8, a2);
  uint64_t v11 = *a1;
  for (i = a1[1]; i != v11; uint64_t v9 = sub_25B455F0C(v9 - 152, i))
    i -= 152;
  long long v12 = *(_OWORD *)a1;
  *a1 = v9;
  a1[1] = v8 + 152;
  long long v16 = v12;
  uint64_t v13 = a1[2];
  a1[2] = (uint64_t)&v7[152 * v6];
  uint64_t v17 = v13;
  uint64_t v15 = v12;
  sub_25B45E5CC((uint64_t)&v15);
  return v8 + 152;
}

uint64_t sub_25B45E5CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 152);
    *(void *)(a1 + 16) = i - 152;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B45E638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v160 = *MEMORY[0x263EF8340];
  long long v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (v7 == v8)
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v143 = 0uLL;
      long long v144 = 0uLL;
      *(_OWORD *)&v142[0].__locale_ = 0uLL;
      uint64_t v9 = *(void *)(a1 + 104);
      uint64_t v10 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v9)
        {
          uint64_t v11 = 0;
          uint64_t v12 = a2 + 48;
          uint64_t v13 = a2 + 160;
          uint64_t v14 = *(void *)(a2 + 352);
          uint64_t v15 = a1 + 16;
          do
          {
            long long v146 = 0u;
            long long v147 = 0u;
            long long v145 = 0u;
            sub_25B45A550(v12, (uint64_t)v142, (uint64_t)&v145);
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            char v18 = 1;
            do
            {
              char v19 = v18;
              v17 += *(void *)(v13 + 8 * v16) * *((void *)&v145 + v16);
              uint64_t v16 = 1;
              char v18 = 0;
            }
            while ((v19 & 1) != 0);
            uint64_t v20 = 0;
            *(_DWORD *)(v10 + 4 * v11) = *(_DWORD *)(v14 + 4 * v17);
            do
            {
              v21 = (std::locale::__imp *)((char *)v142[v20 + 1].__locale_ + 1);
              v142[v20 + 1].__locale_ = v21;
              if (v21 != *(std::locale::__imp **)(v15 + v20 * 8)) {
                break;
              }
              v142[v20-- + 1].__locale_ = 0;
            }
            while (v20 != -2);
            ++v11;
          }
          while (v11 != v9);
        }
      }
      else if (v9)
      {
        uint64_t v75 = 0;
        uint64_t v76 = a2 + 160;
        uint64_t v130 = *(void *)(a1 + 56);
        uint64_t v133 = a2 + 48;
        uint64_t v126 = *(void *)(a1 + 64);
        uint64_t v77 = *(void *)(a2 + 352);
        uint64_t v78 = a1 + 16;
        do
        {
          locale = v142[0].__locale_;
          uint64_t v80 = v126 * (uint64_t)v142[1].__locale_;
          long long v146 = 0u;
          long long v147 = 0u;
          long long v145 = 0u;
          sub_25B45A550(v133, (uint64_t)v142, (uint64_t)&v145);
          uint64_t v81 = 0;
          uint64_t v82 = 0;
          char v83 = 1;
          do
          {
            char v84 = v83;
            v82 += *(void *)(v76 + 8 * v81) * *((void *)&v145 + v81);
            uint64_t v81 = 1;
            char v83 = 0;
          }
          while ((v84 & 1) != 0);
          uint64_t v85 = 0;
          *(_DWORD *)(v10 + 4 * (v80 + v130 * (void)locale)) = *(_DWORD *)(v77 + 4 * v82);
          do
          {
            v86 = (std::locale::__imp *)((char *)v142[v85 + 1].__locale_ + 1);
            v142[v85 + 1].__locale_ = v86;
            if (v86 != *(std::locale::__imp **)(v78 + v85 * 8)) {
              break;
            }
            v142[v85-- + 1].__locale_ = 0;
          }
          while (v85 != -2);
          ++v75;
        }
        while (v75 != v9);
      }
    }
    else
    {
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v145 = 0uLL;
      uint64_t v48 = *(void *)(a1 + 104);
      uint64_t v49 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v48)
        {
          for (uint64_t i = 0; i != v48; ++i)
          {
            float v51 = sub_25B45F128(a2, (uint64_t)&v145);
            uint64_t v52 = 0;
            *(float *)(v49 + 4 * i) = v51;
            do
            {
              uint64_t v53 = *(void *)((char *)&v145 + v52 + 8) + 1;
              *(void *)((char *)&v145 + v52 + 8) = v53;
              if (v53 != *(void *)(a1 + 16 + v52)) {
                break;
              }
              *(void *)((char *)&v145 + v52 + 8) = 0;
              v52 -= 8;
            }
            while (v52 != -16);
          }
        }
      }
      else if (v48)
      {
        uint64_t v102 = 0;
        uint64_t v103 = *(void *)(a1 + 56);
        uint64_t v104 = *(void *)(a1 + 64);
        uint64_t v105 = a1 + 16;
        do
        {
          uint64_t v106 = v103 * v145 + v104 * *((void *)&v145 + 1);
          float v107 = sub_25B45F128(a2, (uint64_t)&v145);
          uint64_t v108 = 0;
          *(float *)(v49 + 4 * v106) = v107;
          do
          {
            uint64_t v109 = *(void *)((char *)&v145 + v108 + 8) + 1;
            *(void *)((char *)&v145 + v108 + 8) = v109;
            if (v109 != *(void *)(v105 + v108)) {
              break;
            }
            *(void *)((char *)&v145 + v108 + 8) = 0;
            v108 -= 8;
          }
          while (v108 != -16);
          ++v102;
        }
        while (v102 != v48);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 344))
    {
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v145 = 0uLL;
      long long v140 = 0uLL;
      long long v141 = 0uLL;
      *(_OWORD *)&v139[0].__locale_ = 0uLL;
      sub_25B40AB84((uint64_t)&v145, v5, (_OWORD *)a2, (uint64_t)v139);
      uint64_t v22 = 0;
      char v23 = 1;
      do
      {
        v24 = v139[v22].__locale_;
        v25 = (std::locale::__imp *)*((void *)v5 + v22);
        if ((v23 & 1) == 0) {
          break;
        }
        char v23 = 0;
        uint64_t v22 = 1;
      }
      while (v24 == v25);
      if (v24 != v25)
      {
        v26 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        v27 = sub_25B406B20(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v27, (uint64_t)" ", 1);
        v28 = (void *)MEMORY[0x263F8C0F8];
        v29 = (void *)std::ostream::operator<<();
        sub_25B406B20(v29, (uint64_t)" ", 1);
        sub_25B406B20(v29, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        v30 = std::locale::use_facet(v142, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(v142);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        v31 = std::locale::use_facet(v142, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        std::locale::~locale(v142);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v137 = 0u;
      long long v138 = 0u;
      long long v136 = 0u;
      memset(v135, 0, sizeof(v135));
      uint64_t v32 = *(void *)(a1 + 104);
      uint64_t v129 = *(void *)(a1 + 144);
      uint64_t v132 = v32;
      if (*(unsigned char *)(a1 + 136))
      {
        if (v32)
        {
          uint64_t v33 = 0;
          uint64_t v125 = a2 + 48;
          uint64_t v34 = a2 + 160;
          v36 = (uint64_t *)*((void *)&v146 + 1);
          v35 = (uint64_t *)v147;
          if ((unint64_t)((uint64_t)(v147 - *((void *)&v146 + 1)) >> 3) <= 1) {
            uint64_t v37 = 1;
          }
          else {
            uint64_t v37 = (uint64_t)(v147 - *((void *)&v146 + 1)) >> 3;
          }
          uint64_t v38 = *(void *)(a2 + 352);
          do
          {
            v135[0] = v136;
            v39 = v36;
            uint64_t v40 = v37;
            if (v35 != v36)
            {
              do
              {
                uint64_t v41 = *v39++;
                *((void *)v135 + v41) = 0;
                --v40;
              }
              while (v40);
            }
            long long v143 = 0u;
            long long v144 = 0u;
            *(_OWORD *)&v142[0].__locale_ = 0u;
            sub_25B45A550(v125, (uint64_t)v135, (uint64_t)v142);
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v44 = 1;
            do
            {
              char v45 = v44;
              v43 += *(void *)(v34 + 8 * v42) * (uint64_t)v142[v42].__locale_;
              uint64_t v42 = 1;
              char v44 = 0;
            }
            while ((v45 & 1) != 0);
            *(_DWORD *)(v129 + 4 * v33) = *(_DWORD *)(v38 + 4 * v43);
            for (uint64_t j = 1; j != -1; --j)
            {
              v47 = (std::locale::__imp *)(*(void *)((char *)&v136 + j * 8) + 1);
              *(void *)((char *)&v136 + j * 8) = v47;
              if (v47 != v139[j].__locale_) {
                break;
              }
              *(void *)((char *)&v136 + j * 8) = 0;
            }
            ++v33;
          }
          while (v33 != v132);
        }
      }
      else if (v32)
      {
        uint64_t v87 = 0;
        uint64_t v88 = a2 + 160;
        v89 = (uint64_t *)*((void *)&v146 + 1);
        v123 = (uint64_t *)v147;
        uint64_t v127 = a2 + 48;
        if ((unint64_t)((uint64_t)(v147 - *((void *)&v146 + 1)) >> 3) <= 1) {
          uint64_t v90 = 1;
        }
        else {
          uint64_t v90 = (uint64_t)(v147 - *((void *)&v146 + 1)) >> 3;
        }
        uint64_t v121 = *(void *)(a1 + 56);
        uint64_t v122 = v90;
        uint64_t v120 = *(void *)(a1 + 64);
        uint64_t v91 = *(void *)(a2 + 352);
        do
        {
          long long v92 = v136;
          v135[0] = v136;
          v93 = v89;
          uint64_t v94 = v122;
          if (v123 != v89)
          {
            do
            {
              uint64_t v95 = *v93++;
              *((void *)v135 + v95) = 0;
              --v94;
            }
            while (v94);
          }
          long long v143 = 0u;
          long long v144 = 0u;
          *(_OWORD *)&v142[0].__locale_ = 0u;
          sub_25B45A550(v127, (uint64_t)v135, (uint64_t)v142);
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          char v98 = 1;
          do
          {
            char v99 = v98;
            v97 += *(void *)(v88 + 8 * v96) * (uint64_t)v142[v96].__locale_;
            uint64_t v96 = 1;
            char v98 = 0;
          }
          while ((v99 & 1) != 0);
          *(_DWORD *)(v129 + 4 * (v120 * *((void *)&v92 + 1) + v121 * v92)) = *(_DWORD *)(v91
                                                                                          + 4 * *((void *)&v92 + 1));
          for (uint64_t k = 1; k != -1; --k)
          {
            v101 = (std::locale::__imp *)(*(void *)((char *)&v136 + k * 8) + 1);
            *(void *)((char *)&v136 + k * 8) = v101;
            if (v101 != v139[k].__locale_) {
              break;
            }
            *(void *)((char *)&v136 + k * 8) = 0;
          }
          ++v87;
        }
        while (v87 != v132);
      }
    }
    else
    {
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      *(_OWORD *)&v142[0].__locale_ = 0uLL;
      long long v143 = 0uLL;
      sub_25B40AB84((uint64_t)&v145, v5, (_OWORD *)a2, (uint64_t)v142);
      uint64_t v54 = 0;
      char v55 = 1;
      do
      {
        v56 = v142[v54].__locale_;
        v57 = (std::locale::__imp *)*((void *)v5 + v54);
        if ((v55 & 1) == 0) {
          break;
        }
        char v55 = 0;
        uint64_t v54 = 1;
      }
      while (v56 == v57);
      if (v56 != v57)
      {
        v58 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        v59 = sub_25B406B20(v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v59, (uint64_t)" ", 1);
        v60 = (void *)MEMORY[0x263F8C0F8];
        v61 = (void *)std::ostream::operator<<();
        sub_25B406B20(v61, (uint64_t)" ", 1);
        sub_25B406B20(v61, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
        v62 = std::locale::use_facet(v139, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
        std::locale::~locale(v139);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
        v63 = std::locale::use_facet(v139, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
        std::locale::~locale(v139);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v140 = 0u;
      long long v141 = 0u;
      long long v138 = 0u;
      *(_OWORD *)&v139[0].__locale_ = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      uint64_t v64 = *(void *)(a1 + 104);
      uint64_t v65 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v64)
        {
          uint64_t v66 = 0;
          v68 = (uint64_t *)*((void *)&v146 + 1);
          v67 = (uint64_t *)v147;
          if ((unint64_t)((uint64_t)(v147 - *((void *)&v146 + 1)) >> 3) <= 1) {
            uint64_t v69 = 1;
          }
          else {
            uint64_t v69 = (uint64_t)(v147 - *((void *)&v146 + 1)) >> 3;
          }
          do
          {
            long long v136 = *(_OWORD *)&v139[0].__locale_;
            if (v67 != v68)
            {
              v70 = v68;
              uint64_t v71 = v69;
              do
              {
                uint64_t v72 = *v70++;
                *((void *)&v136 + v72) = 0;
                --v71;
              }
              while (v71);
            }
            *(float *)(v65 + 4 * v66) = sub_25B45F128(a2, (uint64_t)&v136);
            for (uint64_t m = 1; m != -1; --m)
            {
              v74 = (std::locale::__imp *)((char *)v139[m].__locale_ + 1);
              v139[m].__locale_ = v74;
              if (v74 != v142[m].__locale_) {
                break;
              }
              v139[m].__locale_ = 0;
            }
            ++v66;
          }
          while (v66 != v64);
        }
      }
      else if (v64)
      {
        uint64_t v110 = 0;
        v111 = (uint64_t *)*((void *)&v146 + 1);
        v134 = (uint64_t *)v147;
        if ((unint64_t)((uint64_t)(v147 - *((void *)&v146 + 1)) >> 3) <= 1) {
          uint64_t v112 = 1;
        }
        else {
          uint64_t v112 = (uint64_t)(v147 - *((void *)&v146 + 1)) >> 3;
        }
        uint64_t v131 = *(void *)(a1 + 56);
        uint64_t v124 = v112;
        uint64_t v128 = *(void *)(a1 + 64);
        do
        {
          v113 = v139[0].__locale_;
          v114 = v139[1].__locale_;
          long long v136 = *(_OWORD *)&v139[0].__locale_;
          if (v134 != v111)
          {
            v115 = v111;
            uint64_t v116 = v124;
            do
            {
              uint64_t v117 = *v115++;
              *((void *)&v136 + v117) = 0;
              --v116;
            }
            while (v116);
          }
          *(float *)(v65 + 4 * (v131 * (void)v113 + v128 * (void)v114)) = sub_25B45F128(a2, (uint64_t)&v136);
          for (uint64_t n = 1; n != -1; --n)
          {
            v119 = (std::locale::__imp *)((char *)v139[n].__locale_ + 1);
            v139[n].__locale_ = v119;
            if (v119 != v142[n].__locale_) {
              break;
            }
            v139[n].__locale_ = 0;
          }
          ++v110;
        }
        while (v110 != v64);
      }
    }
    sub_25B3F9500((uint64_t)&v145);
  }
}

void sub_25B45F0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

float sub_25B45F128(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  sub_25B45A550(a1 + 48, a2, (uint64_t)v8);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    v4 += *(void *)(a1 + 160 + 8 * v3) * *((void *)v8 + v3);
    uint64_t v3 = 1;
    char v5 = 0;
  }
  while ((v6 & 1) != 0);
  if (!*(unsigned char *)(a1 + 344)) {
    uint64_t v4 = *(void *)(a1 + 264) * *(void *)&v8[0] + *(void *)(a1 + 272) * *((void *)&v8[0] + 1);
  }
  return *(float *)(*(void *)(a1 + 352) + 4 * v4);
}

uint64_t sub_25B45F1E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F2218;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

_OWORD *sub_25B45F2BC(_OWORD *a1, unint64_t *a2)
{
  v15[1] = *MEMORY[0x263EF8340];
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  unint64_t v3 = *a2;
  v15[0] = v3;
  uint64_t v13 = 0;
  if (v3 >= 0xBEBC200)
  {
    long long v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    long long v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"Shape", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    sub_25B45806C("err", "shape[", (uint64_t)&v13, "]", " is ", (uint64_t)v15, " ,it should <= 6");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
  }
  *(void *)a1 = v3;
  return a1;
}

void sub_25B45F4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B45F504()
{
  sub_25B524094();
  if (v2)
  {
    kdebug_trace();
    sub_25B44E118();
  }
  if (qword_26A5020C0 != -1) {
    dispatch_once(&qword_26A5020C0, &unk_2708F1238);
  }
  v0 = qword_26A5020B8;
  if (os_log_type_enabled((os_log_t)qword_26A5020B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_error_impl(&dword_25B3F3000, v0, OS_LOG_TYPE_ERROR, "Empty backbone infer result", v1, 2u);
  }
  uint64_t v11 = &unk_2708F27E8;
  if (v12) {
    sub_25B404120(v12);
  }
  uint64_t v9 = &unk_2708F21F8;
  if (v10) {
    sub_25B404120(v10);
  }
  long long v7 = &unk_2708F21F8;
  if (v8) {
    sub_25B404120(v8);
  }
  long long v5 = &unk_2708F2218;
  if (v6) {
    sub_25B404120(v6);
  }
  unint64_t v3 = &unk_2708F2218;
  if (v4) {
    sub_25B404120(v4);
  }
}

void sub_25B45F70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_25B45F720((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_25B45F720(void *a1)
{
  a1[77] = &unk_2708F27E8;
  char v2 = (std::__shared_weak_count *)a1[93];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[58] = &unk_2708F21F8;
  unint64_t v3 = (std::__shared_weak_count *)a1[74];
  if (v3) {
    sub_25B404120(v3);
  }
  a1[39] = &unk_2708F21F8;
  long long v4 = (std::__shared_weak_count *)a1[55];
  if (v4) {
    sub_25B404120(v4);
  }
  a1[20] = &unk_2708F2218;
  long long v5 = (std::__shared_weak_count *)a1[36];
  if (v5) {
    sub_25B404120(v5);
  }
  a1[1] = &unk_2708F2218;
  long long v6 = (std::__shared_weak_count *)a1[17];
  if (v6) {
    sub_25B404120(v6);
  }
  return a1;
}

id sub_25B45F820(uint64_t a1, const char *a2, uint64_t a3)
{
  long long v4 = objc_msgSend_commandBuffer(*(void **)(a1 + 16), a2, a3);
  objc_msgSend_encodeToCommandBuffer_sourceTexture_destinationTexture_(*(void **)(a1 + 56), v5, (uint64_t)v4, *(void *)(a1 + 32), *(void *)(a1 + 40));
  objc_msgSend_commit(v4, v6, v7);
  objc_msgSend_waitUntilCompleted(v4, v8, v9);
  id v10 = *(id *)(a1 + 40);

  return v10;
}

void sub_25B45F884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B45F894(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a1 + 72) && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a1 + 76))
  {
    id v11 = *(id *)(a1 + 24);
    id v10 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v11;
  }
  else
  {
    uint64_t v12 = objc_msgSend_commandBuffer(*(void **)(a1 + 16), a2, a3);
    objc_msgSend_encodeToCommandBuffer_sourceTexture_destinationTexture_(*(void **)(a1 + 48), v5, (uint64_t)v12, *(void *)(a1 + 24), *(void *)(a1 + 32));
    objc_msgSend_commit(v12, v6, v7);
    objc_msgSend_waitUntilCompleted(v12, v8, v9);
    id v10 = v12;
  }
}

void sub_25B45F928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_25B45F948(uint64_t a1, int *a2, uint64_t a3)
{
  v21[5] = *MEMORY[0x263EF8340];
  v20[0] = *MEMORY[0x263F0EF50];
  long long v6 = objc_msgSend_numberWithInt_(NSNumber, (const char *)a2, *a2);
  v21[0] = v6;
  v20[1] = *MEMORY[0x263F0EDF8];
  long long v8 = objc_msgSend_numberWithInt_(NSNumber, v7, a2[1]);
  uint64_t v9 = *MEMORY[0x263F0ED48];
  v21[1] = v8;
  v21[2] = &unk_2708FE340;
  uint64_t v10 = *MEMORY[0x263F0EE48];
  v20[2] = v9;
  v20[3] = v10;
  v20[4] = *MEMORY[0x263F0EE38];
  v21[3] = &unk_2708FE358;
  v21[4] = &unk_2708FE370;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v11, (uint64_t)v21, v20, 5);
  CFDictionaryRef v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  IOSurfaceRef v13 = IOSurfaceCreate(v12);
  uint64_t v15 = objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(MEMORY[0x263F12A50], v14, a3, *a2, a2[1], 0);
  objc_msgSend_setUsage_(v15, v16, 3);
  char v18 = objc_msgSend_newTextureWithDescriptor_iosurface_plane_(*(void **)(a1 + 8), v17, (uint64_t)v15, v13, 0);
  CFRelease(v13);

  return v18;
}

void sub_25B45FAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B45FB38(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = (long long *)(a2 - 10);
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(a2 - 4) <= *(float *)(a1 + 24)) {
                  return;
                }
                uint64_t v54 = (long long *)a1;
                char v55 = (long long *)(a2 - 10);
                break;
              case 3:
                sub_25B460B04(a1, a1 + 40, (uint64_t)v9);
                return;
              case 4:
                sub_25B460BC4(a1, a1 + 40, a1 + 80, (uint64_t)v9);
                return;
              case 5:
                sub_25B460BC4(a1, a1 + 40, a1 + 80, a1 + 120);
                if (*(a2 - 4) <= *(float *)(a1 + 144)) {
                  return;
                }
                sub_25B460A5C((long long *)(a1 + 120), v9);
                if (*(float *)(a1 + 144) <= *(float *)(a1 + 104)) {
                  return;
                }
                sub_25B460A5C((long long *)(a1 + 80), (long long *)(a1 + 120));
                if (*(float *)(a1 + 104) <= *(float *)(a1 + 64)) {
                  return;
                }
                sub_25B460A5C((long long *)(a1 + 40), (long long *)(a1 + 80));
                if (*(float *)(a1 + 64) <= *(float *)(a1 + 24)) {
                  return;
                }
                uint64_t v54 = (long long *)a1;
                char v55 = (long long *)(a1 + 40);
                break;
              default:
                JUMPOUT(0);
            }
            sub_25B460A5C(v54, v55);
            return;
          }
          if (v11 <= 959)
          {
            v56 = (float *)(a1 + 40);
            BOOL v58 = (float *)a1 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                unint64_t v60 = a1;
                do
                {
                  v61 = v56;
                  float v62 = *(float *)(v60 + 64);
                  if (v62 > *(float *)(v60 + 24))
                  {
                    v63 = 0;
                    long long v125 = *(_OWORD *)v56;
                    uint64_t v64 = *(void *)(v60 + 56);
                    *(void *)v56 = 0;
                    *((void *)v56 + 1) = 0;
                    *((void *)v56 + 2) = 0;
                    uint64_t v65 = v59;
                    uint64_t v66 = *(void *)(v60 + 68);
                    while (1)
                    {
                      uint64_t v67 = a1 + v65;
                      if (v63)
                      {
                        *(void *)(v67 + 48) = v63;
                        operator delete(v63);
                        *(void *)(v67 + 56) = 0;
                      }
                      *(_OWORD *)(v67 + 40) = *(_OWORD *)v67;
                      uint64_t v68 = *(void *)(v67 + 16);
                      uint64_t v69 = *(void *)(v67 + 24);
                      *(void *)(v67 + 8) = 0;
                      *(void *)(v67 + 16) = 0;
                      *(void *)uint64_t v67 = 0;
                      *(void *)(v67 + 56) = v68;
                      *(void *)(v67 + 64) = v69;
                      *(_DWORD *)(v67 + 72) = *(_DWORD *)(v67 + 32);
                      if (!v65)
                      {
                        uint64_t v71 = (float *)(a1 + 24);
                        unint64_t v70 = a1;
                        goto LABEL_100;
                      }
                      unint64_t v70 = a1 + v65;
                      if (v62 <= *(float *)(a1 + v65 - 16)) {
                        break;
                      }
                      v63 = *(void **)v67;
                      v65 -= 40;
                    }
                    uint64_t v71 = (float *)(v70 + 24);
LABEL_100:
                    uint64_t v72 = *(void **)v70;
                    if (*(void *)v70)
                    {
                      *(void *)(v70 + 8) = v72;
                      operator delete(v72);
                    }
                    *(_OWORD *)unint64_t v70 = v125;
                    *(void *)(v70 + 16) = v64;
                    *uint64_t v71 = v62;
                    *(void *)(v70 + 28) = v66;
                  }
                  v56 = v61 + 10;
                  v59 += 40;
                  unint64_t v60 = (unint64_t)v61;
                }
                while (v61 + 10 != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                unint64_t v111 = (unint64_t)v56;
                float v112 = *(float *)(a1 + 64);
                if (v112 > *(float *)(a1 + 24))
                {
                  long long v129 = *(_OWORD *)v56;
                  uint64_t v113 = *(void *)(a1 + 56);
                  *(void *)v56 = 0;
                  *((void *)v56 + 1) = 0;
                  *((void *)v56 + 2) = 0;
                  uint64_t v114 = *(void *)(a1 + 68);
                  while (1)
                  {
                    *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
                    uint64_t v115 = *(void *)(a1 + 16);
                    uint64_t v116 = *(void *)(a1 + 24);
                    *(void *)(a1 + 8) = 0;
                    *(void *)(a1 + 16) = 0;
                    *(void *)a1 = 0;
                    *(void *)(a1 + 56) = v115;
                    *(void *)(a1 + 64) = v116;
                    float v117 = *(float *)(a1 - 16);
                    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 32);
                    if (v112 <= v117) {
                      break;
                    }
                    v119 = *(void **)a1;
                    a1 -= 40;
                    v118 = v119;
                    if (v119)
                    {
                      *(void *)(a1 + 48) = v118;
                      operator delete(v118);
                      *(void *)(a1 + 56) = 0;
                    }
                  }
                  uint64_t v120 = *(void **)a1;
                  if (*(void *)a1)
                  {
                    *(void *)(a1 + 8) = v120;
                    operator delete(v120);
                  }
                  *(_OWORD *)a1 = v129;
                  *(void *)(a1 + 16) = v113;
                  *(float *)(a1 + 24) = v112;
                  *(void *)(a1 + 28) = v114;
                }
                v56 = (float *)(v111 + 40);
                a1 = v111;
              }
              while ((float *)(v111 + 40) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)a1 != a2)
            {
              int64_t v73 = (unint64_t)(v12 - 2) >> 1;
              int64_t v74 = v73;
              do
              {
                int64_t v75 = v74;
                if (v73 >= v74)
                {
                  uint64_t v76 = (2 * v74) | 1;
                  unint64_t v77 = a1 + 40 * v76;
                  if (2 * v75 + 2 < v12 && *(float *)(a1 + 40 * v76 + 24) > *(float *)(v77 + 64))
                  {
                    v77 += 40;
                    uint64_t v76 = 2 * v75 + 2;
                  }
                  float v78 = *(float *)(a1 + 40 * v75 + 24);
                  if (*(float *)(v77 + 24) <= v78)
                  {
                    v79 = 0;
                    unint64_t v80 = a1 + 40 * v75;
                    long long v126 = *(_OWORD *)v80;
                    uint64_t v121 = *(void *)(v80 + 16);
                    *(void *)(v80 + 8) = 0;
                    *(void *)(v80 + 16) = 0;
                    *(void *)unint64_t v80 = 0;
                    uint64_t v81 = *(void *)(v80 + 28);
                    while (1)
                    {
                      unint64_t v82 = v77;
                      if (v79)
                      {
                        *(void *)(v80 + 8) = v79;
                        operator delete(v79);
                        *(void *)unint64_t v80 = 0;
                        *(void *)(v80 + 8) = 0;
                        *(void *)(v80 + 16) = 0;
                      }
                      *(_OWORD *)unint64_t v80 = *(_OWORD *)v82;
                      *(void *)(v80 + 16) = *(void *)(v82 + 16);
                      *(void *)unint64_t v82 = 0;
                      *(void *)(v82 + 8) = 0;
                      *(void *)(v82 + 16) = 0;
                      uint64_t v83 = *(void *)(v82 + 24);
                      *(_DWORD *)(v80 + 32) = *(_DWORD *)(v82 + 32);
                      *(void *)(v80 + 24) = v83;
                      if (v73 < v76) {
                        break;
                      }
                      uint64_t v84 = (2 * v76) | 1;
                      unint64_t v77 = a1 + 40 * v84;
                      if (2 * v76 + 2 < v12 && *(float *)(a1 + 40 * v84 + 24) > *(float *)(v77 + 64))
                      {
                        v77 += 40;
                        uint64_t v84 = 2 * v76 + 2;
                      }
                      if (*(float *)(v77 + 24) > v78) {
                        break;
                      }
                      v79 = *(void **)v82;
                      unint64_t v80 = v82;
                      uint64_t v76 = v84;
                    }
                    uint64_t v85 = *(void **)v82;
                    if (*(void *)v82)
                    {
                      *(void *)(v82 + 8) = v85;
                      operator delete(v85);
                    }
                    *(_OWORD *)unint64_t v82 = v126;
                    *(void *)(v82 + 16) = v121;
                    *(float *)(v82 + 24) = v78;
                    *(void *)(v82 + 28) = v81;
                  }
                }
                int64_t v74 = v75 - 1;
              }
              while (v75);
              int64_t v86 = v11 / 0x28uLL;
              do
              {
                uint64_t v87 = 0;
                uint64_t v88 = a2;
                uint64_t v89 = *(void *)(a1 + 16);
                uint64_t v122 = *(void *)(a1 + 8);
                uint64_t v127 = *(void *)a1;
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v131 = *(void *)(a1 + 24);
                int v133 = *(_DWORD *)(a1 + 32);
                unint64_t v90 = a1;
                do
                {
                  uint64_t v91 = v87 + 1;
                  unint64_t v92 = v90 + 40 * (v87 + 1);
                  uint64_t v93 = 2 * v87;
                  uint64_t v87 = (2 * v87) | 1;
                  int64_t v94 = v93 + 2;
                  if (v94 < v86 && *(float *)(v90 + 40 * v91 + 24) > *(float *)(v92 + 64))
                  {
                    v92 += 40;
                    uint64_t v87 = v94;
                  }
                  uint64_t v95 = *(void **)v90;
                  if (*(void *)v90)
                  {
                    *(void *)(v90 + 8) = v95;
                    operator delete(v95);
                    *(void *)unint64_t v90 = 0;
                    *(void *)(v90 + 8) = 0;
                    *(void *)(v90 + 16) = 0;
                  }
                  *(_OWORD *)unint64_t v90 = *(_OWORD *)v92;
                  *(void *)(v90 + 16) = *(void *)(v92 + 16);
                  *(void *)unint64_t v92 = 0;
                  *(void *)(v92 + 8) = 0;
                  uint64_t v97 = (float *)(v92 + 24);
                  uint64_t v96 = *(void *)(v92 + 24);
                  *(void *)(v92 + 16) = 0;
                  *(_DWORD *)(v90 + 32) = *(_DWORD *)(v92 + 32);
                  *(void *)(v90 + 24) = v96;
                  unint64_t v90 = v92;
                }
                while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
                char v98 = *(void **)v92;
                a2 -= 10;
                if ((float *)v92 == v88 - 10)
                {
                  if (v98)
                  {
                    *(void *)(v92 + 8) = v98;
                    operator delete(v98);
                  }
                  *(void *)unint64_t v92 = v127;
                  *(void *)(v92 + 8) = v122;
                  *(void *)(v92 + 16) = v89;
                  *(_DWORD *)(v92 + 32) = v133;
                  *(void *)uint64_t v97 = v131;
                }
                else
                {
                  if (v98)
                  {
                    *(void *)(v92 + 8) = v98;
                    operator delete(v98);
                    *(void *)unint64_t v92 = 0;
                    *(void *)(v92 + 8) = 0;
                    *(void *)(v92 + 16) = 0;
                  }
                  *(_OWORD *)unint64_t v92 = *(_OWORD *)(v88 - 10);
                  *(void *)(v92 + 16) = *((void *)v88 - 3);
                  *(void *)a2 = 0;
                  *((void *)a2 + 1) = 0;
                  *((void *)a2 + 2) = 0;
                  uint64_t v99 = *((void *)v88 - 2);
                  *(float *)(v92 + 32) = *(v88 - 2);
                  *(void *)uint64_t v97 = v99;
                  v100 = (void *)*((void *)v88 - 5);
                  if (v100)
                  {
                    *((void *)v88 - 4) = v100;
                    operator delete(v100);
                  }
                  *((void *)v88 - 5) = v127;
                  *((void *)v88 - 4) = v122;
                  *((void *)v88 - 3) = v89;
                  *((_DWORD *)v88 - 2) = v133;
                  *((void *)v88 - 2) = v131;
                  uint64_t v101 = v92 + 40 - a1;
                  if (v101 >= 41)
                  {
                    unint64_t v102 = (v101 / 0x28uLL - 2) >> 1;
                    float v103 = *v97;
                    if (*(float *)(a1 + 40 * v102 + 24) > *v97)
                    {
                      long long v128 = *(_OWORD *)v92;
                      uint64_t v104 = *(void *)(v92 + 16);
                      *(void *)(v92 + 8) = 0;
                      *(void *)(v92 + 16) = 0;
                      *(void *)unint64_t v92 = 0;
                      uint64_t v105 = *(void *)(v92 + 28);
                      while (1)
                      {
                        unint64_t v106 = a1 + 40 * v102;
                        *(_OWORD *)unint64_t v92 = *(_OWORD *)v106;
                        *(void *)(v92 + 16) = *(void *)(v106 + 16);
                        *(void *)unint64_t v106 = 0;
                        *(void *)(v106 + 8) = 0;
                        *(void *)(v106 + 16) = 0;
                        uint64_t v107 = *(void *)(v106 + 24);
                        *(_DWORD *)(v92 + 32) = *(_DWORD *)(v106 + 32);
                        *(void *)(v92 + 24) = v107;
                        if (!v102) {
                          break;
                        }
                        unint64_t v102 = (v102 - 1) >> 1;
                        if (*(float *)(a1 + 40 * v102 + 24) <= v103) {
                          break;
                        }
                        uint64_t v108 = *(void **)v106;
                        unint64_t v92 = v106;
                        if (*(void *)v106)
                        {
                          *(void *)(v106 + 8) = v108;
                          operator delete(v108);
                          *(void *)unint64_t v106 = 0;
                          *(void *)(v106 + 8) = 0;
                          *(void *)(v106 + 16) = 0;
                        }
                      }
                      uint64_t v109 = *(void **)v106;
                      if (*(void *)v106)
                      {
                        *(void *)(v106 + 8) = v109;
                        operator delete(v109);
                      }
                      *(_OWORD *)unint64_t v106 = v128;
                      *(void *)(v106 + 16) = v104;
                      *(float *)(v106 + 24) = v103;
                      *(void *)(v106 + 28) = v105;
                    }
                  }
                }
              }
              while (v86-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = a1 + 40 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x1401)
          {
            sub_25B460B04(v14, a1, (uint64_t)v9);
          }
          else
          {
            sub_25B460B04(a1, v14, (uint64_t)v9);
            uint64_t v15 = 5 * v13;
            unint64_t v16 = a1 + 8 * v15;
            sub_25B460B04(a1 + 40, v16 - 40, (uint64_t)(a2 - 20));
            sub_25B460B04(a1 + 80, a1 + 40 + 8 * v15, (uint64_t)(a2 - 30));
            sub_25B460B04(v16 - 40, v14, a1 + 40 + 8 * v15);
            long long v17 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(a1 + 16);
            uint64_t v19 = *(void *)(a1 + 24);
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            int v132 = *(_DWORD *)(a1 + 32);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            int v20 = *(_DWORD *)(v16 + 32);
            uint64_t v21 = *(void *)(v16 + 24);
            *(void *)(a1 + 16) = *(void *)(v14 + 16);
            *(void *)(a1 + 24) = v21;
            *(_DWORD *)(a1 + 32) = v20;
            *(_OWORD *)uint64_t v14 = v17;
            *(void *)(v14 + 16) = v18;
            *(void *)(v16 + 24) = v19;
            *(_DWORD *)(v16 + 32) = v132;
          }
          --a3;
          if (a4) {
            break;
          }
          float v22 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 16) > v22) {
            goto LABEL_12;
          }
          long long v124 = *(_OWORD *)a1;
          uint64_t v40 = *(void *)(a1 + 16);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (v22 <= *(a2 - 4))
          {
            unint64_t v43 = a1 + 40;
            do
            {
              unint64_t v10 = v43;
              if (v43 >= (unint64_t)a2) {
                break;
              }
              v43 += 40;
            }
            while (v22 <= *(float *)(v10 + 24));
          }
          else
          {
            unint64_t v41 = a1;
            do
            {
              unint64_t v10 = v41 + 40;
              float v42 = *(float *)(v41 + 64);
              v41 += 40;
            }
            while (v22 <= v42);
          }
          char v44 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            char v45 = a2;
            do
            {
              char v44 = (long long *)(v45 - 10);
              float v46 = *(v45 - 4);
              v45 -= 10;
            }
            while (v22 > v46);
          }
          uint64_t v47 = *(void *)(a1 + 28);
          while (v10 < (unint64_t)v44)
          {
            sub_25B460A5C((long long *)v10, v44);
            do
            {
              float v48 = *(float *)(v10 + 64);
              v10 += 40;
            }
            while (v22 <= v48);
            do
            {
              float v49 = *((float *)v44 - 4);
              char v44 = (long long *)((char *)v44 - 40);
            }
            while (v22 > v49);
          }
          v50 = (void **)(v10 - 40);
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            float v51 = *(void **)a1;
            if (*(void *)a1)
            {
              *(void *)(a1 + 8) = v51;
              operator delete(v51);
              *(void *)a1 = 0;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
            }
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 40);
            *(void *)(a1 + 16) = *(void *)(v10 - 24);
            *v50 = 0;
            *(void *)(v10 - 32) = 0;
            *(void *)(v10 - 24) = 0;
            uint64_t v52 = *(void *)(v10 - 16);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 8);
            *(void *)(a1 + 24) = v52;
          }
          uint64_t v53 = *v50;
          if (*v50)
          {
            *(void *)(v10 - 32) = v53;
            operator delete(v53);
          }
          a4 = 0;
          *(_OWORD *)(v10 - 40) = v124;
          *(void *)(v10 - 24) = v40;
          *(float *)(v10 - 16) = v22;
          *(void *)(v10 - 12) = v47;
        }
        float v22 = *(float *)(a1 + 24);
LABEL_12:
        long long v123 = *(_OWORD *)a1;
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        unint64_t v24 = a1;
        uint64_t v25 = *(void *)(a1 + 28);
        do
        {
          unint64_t v26 = v24;
          v24 += 40;
        }
        while (*(float *)(v26 + 64) > v22);
        v27 = a2;
        if (v26 == a1)
        {
          v30 = a2;
          while (v24 < (unint64_t)v30)
          {
            v28 = (long long *)(v30 - 10);
            float v31 = *(v30 - 4);
            v30 -= 10;
            if (v31 > v22) {
              goto LABEL_22;
            }
          }
          v28 = (long long *)v30;
        }
        else
        {
          do
          {
            v28 = (long long *)(v27 - 10);
            float v29 = *(v27 - 4);
            v27 -= 10;
          }
          while (v29 <= v22);
        }
LABEL_22:
        if (v24 >= (unint64_t)v28)
        {
          unint64_t v10 = v24;
        }
        else
        {
          uint64_t v32 = v28;
          unint64_t v10 = v24;
          do
          {
            sub_25B460A5C((long long *)v10, v32);
            do
            {
              float v33 = *(float *)(v10 + 64);
              v10 += 40;
            }
            while (v33 > v22);
            do
            {
              float v34 = *((float *)v32 - 4);
              uint64_t v32 = (long long *)((char *)v32 - 40);
            }
            while (v34 <= v22);
          }
          while (v10 < (unint64_t)v32);
        }
        v35 = (void **)(v10 - 40);
        if (v10 - 40 != a1)
        {
          v36 = *(void **)a1;
          if (*(void *)a1)
          {
            *(void *)(a1 + 8) = v36;
            operator delete(v36);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 40);
          *(void *)(a1 + 16) = *(void *)(v10 - 24);
          uint64_t *v35 = 0;
          *(void *)(v10 - 32) = 0;
          *(void *)(v10 - 24) = 0;
          uint64_t v37 = *(void *)(v10 - 16);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 8);
          *(void *)(a1 + 24) = v37;
        }
        uint64_t v38 = *v35;
        if (*v35)
        {
          *(void *)(v10 - 32) = v38;
          operator delete(v38);
        }
        *(_OWORD *)(v10 - 40) = v123;
        *(void *)(v10 - 24) = v23;
        *(float *)(v10 - 16) = v22;
        *(void *)(v10 - 12) = v25;
        if (v24 >= (unint64_t)v28) {
          break;
        }
LABEL_39:
        sub_25B45FB38(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v39 = sub_25B460C6C(a1, v10 - 40);
      if (sub_25B460C6C(v10, (uint64_t)a2)) {
        break;
      }
      if (!v39) {
        goto LABEL_39;
      }
    }
    a2 = (float *)(v10 - 40);
    if (!v39) {
      continue;
    }
    break;
  }
}

void *sub_25B460700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  result = sub_25B400390((void *)v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v6 = *(void *)(a2 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(v4 + 24) = v6;
  *(void *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_25B460768(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B460770(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    sub_25B3FBC4C();
  }
  uint64_t v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v7 = 0x666666666666666;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v18 = v6;
  if (v7)
  {
    uint64_t v9 = (char *)sub_25B460930(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  unint64_t v10 = &v9[40 * v2];
  v15[0] = v9;
  v15[1] = v10;
  unint64_t v16 = v10;
  long long v17 = &v9[40 * v8];
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  sub_25B400390(v10, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v11 = &v9[40 * v2];
  uint64_t v12 = *(void *)(a2 + 24);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *((void *)v11 + 3) = v12;
  v16 += 40;
  sub_25B460978(a1, v15);
  uint64_t v13 = a1[1];
  sub_25B4609F8((uint64_t)v15);
  return v13;
}

void sub_25B46088C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4609F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B4608A0(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 5);
        v6 -= 40;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 4) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_25B460930(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    sub_25B3FA70C();
  }
  return operator new(40 * a1);
}

uint64_t *sub_25B460978(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 40) = 0;
    *(void *)(v4 - 32) = 0;
    v4 -= 40;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    uint64_t v6 = *(void *)(v2 + 24);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    *(void *)(v4 + 24) = v6;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  void *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B4609F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 40);
    *(void *)(a1 + 16) = v2 - 40;
    if (v4)
    {
      *(void *)(v2 - 32) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B460A5C(long long *a1, long long *a2)
{
  long long v3 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  uint64_t v10 = v4;
  int v11 = *((_DWORD *)a1 + 8);
  *a1 = *a2;
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  uint64_t v6 = (uint64_t)a2 + 24;
  int v7 = *((_DWORD *)a2 + 8);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((_DWORD *)a1 + 8) = v7;
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *((void *)a2 + 1) = v8;
    long long v9 = v3;
    operator delete(v8);
    long long v3 = v9;
  }
  *a2 = v3;
  *((void *)a2 + 2) = v5;
  *(void *)uint64_t v6 = v10;
  *(_DWORD *)(v6 + 8) = v11;
}

void sub_25B460B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  float v6 = *(float *)(a2 + 24);
  float v7 = *(float *)(a3 + 24);
  if (v6 <= *(float *)(a1 + 24))
  {
    if (v7 <= v6) {
      return;
    }
    sub_25B460A5C((long long *)a2, (long long *)a3);
    if (*(float *)(a2 + 24) <= *(float *)(v5 + 24)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (long long *)a2;
  }
  else
  {
    if (v7 <= v6)
    {
      sub_25B460A5C((long long *)a1, (long long *)a2);
      if (*(float *)(a3 + 24) <= *(float *)(a2 + 24)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (long long *)a3;
  }

  sub_25B460A5C((long long *)a1, v8);
}

void sub_25B460BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25B460B04(a1, a2, a3);
  if (*(float *)(a4 + 24) > *(float *)(a3 + 24))
  {
    sub_25B460A5C((long long *)a3, (long long *)a4);
    if (*(float *)(a3 + 24) > *(float *)(a2 + 24))
    {
      sub_25B460A5C((long long *)a2, (long long *)a3);
      if (*(float *)(a2 + 24) > *(float *)(a1 + 24))
      {
        sub_25B460A5C((long long *)a1, (long long *)a2);
      }
    }
  }
}

BOOL sub_25B460C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 16) > *(float *)(a1 + 24))
      {
        float v6 = (long long *)(a2 - 40);
        float v7 = (long long *)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      sub_25B460B04(a1, a1 + 40, a2 - 40);
      return 1;
    case 4uLL:
      sub_25B460BC4(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_25B460BC4(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(float *)(a2 - 16) > *(float *)(a1 + 144))
      {
        sub_25B460A5C((long long *)(a1 + 120), (long long *)(a2 - 40));
        if (*(float *)(a1 + 144) > *(float *)(a1 + 104))
        {
          sub_25B460A5C((long long *)(a1 + 80), (long long *)(a1 + 120));
          if (*(float *)(a1 + 104) > *(float *)(a1 + 64))
          {
            sub_25B460A5C((long long *)(a1 + 40), (long long *)(a1 + 80));
            if (*(float *)(a1 + 64) > *(float *)(a1 + 24))
            {
              float v7 = (long long *)a1;
              float v6 = (long long *)(a1 + 40);
LABEL_4:
              sub_25B460A5C(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 80;
      sub_25B460B04(a1, a1 + 40, a1 + 80);
      uint64_t v9 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    float v12 = *(float *)(v9 + 24);
    if (v12 > *(float *)(v8 + 24))
    {
      uint64_t v13 = 0;
      long long v24 = *(_OWORD *)v9;
      uint64_t v14 = *(void *)(v9 + 16);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0;
      uint64_t v15 = v10;
      uint64_t v16 = *(void *)(v9 + 28);
      while (1)
      {
        uint64_t v17 = a1 + v15;
        if (v13)
        {
          *(void *)(v17 + 128) = v13;
          operator delete(v13);
          *(void *)(v17 + 136) = 0;
        }
        *(_OWORD *)(v17 + 120) = *(_OWORD *)(v17 + 80);
        *(void *)(v17 + 80) = 0;
        *(void *)(v17 + 88) = 0;
        uint64_t v18 = *(void *)(v17 + 96);
        uint64_t v19 = *(void *)(v17 + 104);
        *(void *)(v17 + 96) = 0;
        *(void *)(v17 + 136) = v18;
        *(void *)(v17 + 144) = v19;
        *(_DWORD *)(v17 + 152) = *(_DWORD *)(v17 + 112);
        if (v15 == -80)
        {
          uint64_t v21 = (float *)(a1 + 24);
          uint64_t v22 = a1;
          goto LABEL_17;
        }
        uint64_t v20 = a1 + v15;
        if (v12 <= *(float *)(a1 + v15 + 64)) {
          break;
        }
        uint64_t v13 = *(void **)(v17 + 80);
        v15 -= 40;
      }
      uint64_t v21 = (float *)(v20 + 104);
      uint64_t v22 = v20 + 80;
LABEL_17:
      uint64_t v23 = *(void **)v22;
      if (*(void *)v22)
      {
        *(void *)(v22 + 8) = v23;
        operator delete(v23);
      }
      *(_OWORD *)uint64_t v22 = v24;
      *(void *)(v22 + 16) = v14;
      float *v21 = v12;
      *(void *)(v22 + 28) = v16;
      if (++v11 == 8) {
        return v9 + 40 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 40;
    v9 += 40;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_25B460F20(unint64_t *a1, uint64_t a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v5 = a1;
  uint64_t v399 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  uint64_t v6 = *(void *)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 144);
  while (v6 != v7)
  {
    if (espresso_network_bind_cvpixelbuffer())
    {
      if (qword_26A502130 != -1) {
        dispatch_once(&qword_26A502130, &unk_2708F1318);
      }
      uint64_t v9 = qword_26A502128;
      if (os_log_type_enabled((os_log_t)qword_26A502128, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__s1 = 0;
        _os_log_error_impl(&dword_25B3F3000, v9, OS_LOG_TYPE_ERROR, "Network tensor bind failure", __s1, 2u);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      return;
    }
    v6 += 24;
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v341 = v5;
  sub_25B403500(__s1, "");
  if (*(unsigned char *)(a2 + 88)) {
    goto LABEL_6;
  }
  uint64_t v10 = __s1[23];
  if (__s1[23] >= 0) {
    uint64_t v11 = __s1[23];
  }
  else {
    uint64_t v11 = *(void *)&__s1[8];
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 87);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 72);
  }
  if (v11 == v12)
  {
    if (v13 >= 0) {
      uint64_t v14 = (unsigned __int8 *)(a2 + 64);
    }
    else {
      uint64_t v14 = *(unsigned __int8 **)(a2 + 64);
    }
    if ((__s1[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)__s1, v14, *(size_t *)&__s1[8])) {
        goto LABEL_28;
      }
    }
    else if (__s1[23])
    {
      uint64_t v15 = __s1;
      while (*v15 == *v14)
      {
        ++v15;
        ++v14;
        if (!--v10) {
          goto LABEL_6;
        }
      }
      goto LABEL_28;
    }
LABEL_6:
    BOOL v8 = espresso_plan_execute_sync() == 0;
    goto LABEL_34;
  }
LABEL_28:
  if (!espresso_plan_build_clean()
    && !espresso_network_select_configuration()
    && !espresso_plan_build()
    && sub_25B5204FC(a2))
  {
    std::string::operator=((std::string *)(a2 + 64), (const std::string *)__s1);
    goto LABEL_6;
  }
  BOOL v8 = 0;
LABEL_34:
  if ((__s1[23] & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_36;
    }
LABEL_512:
    if (qword_26A502130 != -1) {
      dispatch_once(&qword_26A502130, &unk_2708F1318);
    }
    v295 = qword_26A502128;
    if (os_log_type_enabled((os_log_t)qword_26A502128, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__s1 = 0;
      _os_log_error_impl(&dword_25B3F3000, v295, OS_LOG_TYPE_ERROR, "Network infer failure", __s1, 2u);
    }
    return;
  }
  operator delete(*(void **)__s1);
  if (!v8) {
    goto LABEL_512;
  }
LABEL_36:
  long long v361 = 0u;
  long long v362 = 0u;
  int v363 = 1065353216;
  uint64_t v16 = *(void *)(a2 + 184);
  if (*(void *)(a2 + 192) == v16) {
    goto LABEL_495;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  uint64_t v344 = a2;
  uint64_t v20 = (uint64_t **)(a2 + 8);
  do
  {
    uint64_t v21 = (long long *)(v16 + v17);
    uint64_t v22 = (uint64_t **)sub_25B4953D4((uint64_t)v20, __s1, (void *)(v16 + v17));
    uint64_t v23 = *v22;
    if (!*v22)
    {
      long long v24 = v22;
      uint64_t v23 = (uint64_t *)operator new(0x40uLL);
      uint64_t v25 = v23 + 4;
      if (*(char *)(v16 + v17 + 23) < 0)
      {
        sub_25B4002F4(v25, *(void **)(v16 + v17), *(void *)(v16 + v17 + 8));
      }
      else
      {
        long long v26 = *v21;
        v23[6] = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v25 = v26;
      }
      v23[7] = 0;
      sub_25B3FA740(v20, *(uint64_t *)__s1, v24, v23);
    }
    v27 = *(std::__shared_weak_count_vtbl **)v23[7];
    if (v27)
    {
      sub_25B4578D0(&v369, *(void **)(a2 + 256), (uint64_t *)(*(void *)(a2 + 256) + 8));
      v391 = 0;
      v392 = 0;
      char v28 = 1;
      LOBYTE(v393) = 1;
      long long v387 = 0u;
      long long v388 = 0u;
      *(_OWORD *)&__s1[8] = v369;
      *(_OWORD *)&__s1[24] = v370;
      *(_OWORD *)&__s1[40] = v371;
      *(void *)__s1 = &unk_2708F21F8;
      *(void *)&long long v386 = *((void *)&v369 + 1);
      uint64_t v29 = v369 * *((void *)&v369 + 1);
      *((void *)&v386 + 1) = 1;
      uint64_t v389 = v369 * *((void *)&v369 + 1);
      uint64_t v390 = 0;
      if ((void)v369 * *((void *)&v369 + 1))
      {
        v30 = (std::__shared_weak_count *)operator new(0x30uLL);
        char v28 = 0;
        v30->__shared_owners_ = 0;
        v30->__shared_weak_owners_ = 0;
        v30[1].__vftable = v27;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F2808;
        v30[1].__shared_owners_ = v29;
        LOBYTE(v30[1].__shared_weak_owners_) = 0;
        v391 = v30 + 1;
        v392 = v30;
        v394 = v27;
      }
      HIBYTE(v393) = v28;
      float v31 = sub_25B463DA8((uint64_t *)&v361, *(_DWORD *)(*(void *)(a2 + 160) + v18), (_DWORD *)(*(void *)(a2 + 160) + v18));
    }
    else
    {
      *(void *)__s1 = &unk_2708F21F8;
      memset(&__s1[8], 0, 48);
      long long v386 = 0u;
      long long v387 = 0u;
      long long v388 = 0u;
      v391 = 0;
      v392 = 0;
      __int16 v393 = 257;
      float v31 = sub_25B463DA8((uint64_t *)&v361, *(_DWORD *)(*(void *)(a2 + 160) + v18), (_DWORD *)(*(void *)(a2 + 160) + v18));
    }
    sub_25B453C28((uint64_t)(v31 + 3), (uint64_t)__s1);
    *(void *)__s1 = &unk_2708F21F8;
    if (v392) {
      sub_25B404120(v392);
    }
    ++v19;
    uint64_t v16 = *(void *)(a2 + 184);
    v18 += 4;
    v17 += 24;
  }
  while (v19 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 192) - v16) >> 3));
  float v33 = (uint64_t *)v362;
  if (!(void)v362) {
    goto LABEL_495;
  }
  __asm { FMOV            V0.2S, #1.0 }
  long long v342 = _Q0;
  do
  {
    if (*((unsigned char *)v33 + 161)) {
      goto LABEL_494;
    }
    int8x8_t v37 = *(int8x8_t *)(a2 + 328);
    float v38 = 0.5;
    if (!*(void *)&v37) {
      goto LABEL_87;
    }
    unint64_t v39 = *((unsigned int *)v33 + 4);
    uint8x8_t v40 = (uint8x8_t)vcnt_s8(v37);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v41 = *((unsigned int *)v33 + 4);
      if (*(void *)&v37 <= v39) {
        unint64_t v41 = v39 % *(void *)&v37;
      }
    }
    else
    {
      unint64_t v41 = (v37.i32[0] - 1) & v39;
    }
    uint64_t v42 = *(void *)(a2 + 320);
    unint64_t v43 = *(uint64_t ***)(v42 + 8 * v41);
    if (!v43) {
      goto LABEL_87;
    }
    char v44 = *v43;
    if (!*v43) {
      goto LABEL_87;
    }
    uint64_t v45 = *(void *)&v37 - 1;
    while (1)
    {
      unint64_t v46 = v44[1];
      if (v46 == v39) {
        break;
      }
      if (v40.u32[0] > 1uLL)
      {
        if (v46 >= *(void *)&v37) {
          v46 %= *(void *)&v37;
        }
      }
      else
      {
        v46 &= v45;
      }
      if (v46 != v41) {
        goto LABEL_87;
      }
LABEL_70:
      char v44 = (uint64_t *)*v44;
      if (!v44) {
        goto LABEL_87;
      }
    }
    if (*((_DWORD *)v44 + 4) != v39) {
      goto LABEL_70;
    }
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v47 = *((unsigned int *)v33 + 4);
      if (*(void *)&v37 <= v39) {
        unint64_t v47 = v39 % *(void *)&v37;
      }
    }
    else
    {
      unint64_t v47 = (v37.i32[0] - 1) & v39;
    }
    float v48 = *(uint64_t **)(v42 + 8 * v47);
    if (!v48) {
LABEL_611:
    }
      sub_25B3FC090("unordered_map::at: key not found");
    do
    {
      while (1)
      {
        float v48 = (uint64_t *)*v48;
        if (!v48) {
          goto LABEL_611;
        }
        unint64_t v49 = v48[1];
        if (v49 == v39) {
          break;
        }
        if (v40.u32[0] > 1uLL)
        {
          if (v49 >= *(void *)&v37) {
            v49 %= *(void *)&v37;
          }
        }
        else
        {
          v49 &= v45;
        }
        if (v49 != v47) {
          goto LABEL_611;
        }
      }
    }
    while (*((_DWORD *)v48 + 4) != v39);
    float v38 = *((float *)v48 + 5);
LABEL_87:
    *(float *)&v352 = v38;
    WORD2(v352) = 0;
    unint64_t v354 = 0;
    long long v353 = 0uLL;
    uint64_t v356 = v33[4];
    v343 = v33;
    uint64_t v357 = v33[5];
    v359 = 0;
    unint64_t v360 = 0;
    uint64_t v358 = 0;
    sub_25B46649C((uint64_t)__s1, (uint64_t)(v33 + 3));
    v355 = v394;
    uint64_t v52 = v356;
    if (v356 != 1)
    {
      unint64_t v53 = 0;
      uint64_t v54 = v357;
      uint64_t v55 = v357;
      do
      {
        if (v55 != 1)
        {
          unint64_t v56 = 0;
          *(float *)&long long v50 = (float)v53;
          *(float *)&long long v51 = (float)v53 + 1.0;
          long long v346 = v51;
          long long v347 = v50;
          long long v51 = v342;
          *(float *)&long long v51 = (float)v53;
          long long v345 = v51;
          do
          {
            v57 = (float *)((char *)v355 + 4 * v55 * v53 + 4 * v56);
            BOOL v58 = &v57[v55];
            float v60 = *v57;
            float v59 = v57[1];
            float v62 = *v58;
            float v61 = v58[1];
            int v63 = *v57 > *(float *)&v352;
            if (v59 > *(float *)&v352) {
              v63 |= 2u;
            }
            if (v62 > *(float *)&v352) {
              v63 |= 4u;
            }
            if (v61 > *(float *)&v352) {
              v63 |= 8u;
            }
            if (v63) {
              _ZF = v63 == 15;
            }
            else {
              _ZF = 1;
            }
            if (!_ZF)
            {
              float v65 = 0.0;
              float v66 = 0.0;
              if (v60 != v59) {
                float v66 = (float)(*(float *)&v352 - v60) / (float)(v59 - v60);
              }
              if (v62 != v61) {
                float v65 = (float)(*(float *)&v352 - v62) / (float)(v61 - v62);
              }
              v67.i32[0] = 0;
              float v68 = 0.0;
              if (v60 != v62) {
                float v68 = (float)(*(float *)&v352 - v60) / (float)(v62 - v60);
              }
              if (v59 != v61) {
                v67.f32[0] = (float)(*(float *)&v352 - v59) / (float)(v61 - v59);
              }
              long long v69 = v347;
              *((float *)&v69 + 1) = v66 + (float)v56;
              *(float *)&long long v51 = v65 + (float)v56;
              long long v70 = v346;
              DWORD1(v70) = v51;
              long long v350 = v70;
              *(float *)&long long v51 = v68 + *(float *)&v347;
              *((float *)&v51 + 1) = (float)v56;
              long long v348 = v69;
              long long v349 = v51;
              v67.f32[1] = (float)v56;
              long long v50 = v345;
              float32x2_t v71 = vadd_f32(v67, *(float32x2_t *)&v345);
              switch(v63)
              {
                case 1:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v73 = (float32x2_t)v69;
                    goto LABEL_142;
                  }
                  uint64_t v103 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v105 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v104) {
                    unint64_t v104 = v105 >> 3;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v104;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v103);
                  long long v51 = v348;
                  long long v50 = v349;
                  float32x2_t *v139 = (float32x2_t)v348;
                  v139[1] = (float32x2_t)v349;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v149 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v149);
                  goto LABEL_410;
                case 2:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    **((void **)&v353 + 1) = v71;
                    goto LABEL_136;
                  }
                  uint64_t v106 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v107 = v106 + 1;
                  if ((unint64_t)(v106 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v108 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v107) {
                    unint64_t v107 = v108 >> 3;
                  }
                  if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v107;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v106);
                  long long v50 = v348;
                  float32x2_t *v139 = v71;
                  v139[1] = (float32x2_t)v348;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v150 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v150);
                  goto LABEL_410;
                case 3:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    **((void **)&v353 + 1) = v71;
                    goto LABEL_143;
                  }
                  uint64_t v94 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v95 = v94 + 1;
                  if ((unint64_t)(v94 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v96 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v95) {
                    unint64_t v95 = v96 >> 3;
                  }
                  if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v95;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v94);
                  long long v50 = v349;
                  float32x2_t *v139 = v71;
                  v139[1] = (float32x2_t)v349;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v146 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v146);
                  goto LABEL_410;
                case 4:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v74 = (float32x2_t)v51;
LABEL_124:
                    *uint64_t v72 = v74;
                    goto LABEL_139;
                  }
                  uint64_t v97 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v98 = v97 + 1;
                  if ((unint64_t)(v97 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v99 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v98) {
                    unint64_t v98 = v99 >> 3;
                  }
                  if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v98;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v97);
                  long long v51 = v349;
                  long long v50 = v350;
                  float32x2_t *v139 = (float32x2_t)v349;
                  v139[1] = (float32x2_t)v350;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v147 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) != (void)v353)
                  {
                    do
                    {
                      long long v50 = *((_OWORD *)v140 - 1);
                      *(_OWORD *)v142[-2].f32 = v50;
                      v142 -= 2;
                      v140 -= 16;
                    }
                    while (v140 != v147);
                    goto LABEL_410;
                  }
                  goto LABEL_411;
                case 5:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v74 = (float32x2_t)v69;
                    goto LABEL_124;
                  }
                  uint64_t v85 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v87 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v86) {
                    unint64_t v86 = v87 >> 3;
                  }
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v86;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v85);
                  long long v51 = v348;
                  long long v50 = v350;
                  float32x2_t *v139 = (float32x2_t)v348;
                  v139[1] = (float32x2_t)v350;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v143 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v143);
                  goto LABEL_410;
                case 6:
                  uint64_t v76 = (float32x2_t *)*((void *)&v353 + 1);
                  if (BYTE4(v352))
                  {
                    if (*((void *)&v353 + 1) >= v354)
                    {
                      uint64_t v119 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                      unint64_t v120 = v119 + 1;
                      if ((unint64_t)(v119 + 1) >> 60) {
                        goto LABEL_610;
                      }
                      uint64_t v121 = v354 - v353;
                      if ((uint64_t)(v354 - v353) >> 3 > v120) {
                        unint64_t v120 = v121 >> 3;
                      }
                      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v122 = v120;
                      }
                      if (v122) {
                        unint64_t v122 = (unint64_t)sub_25B3FFAEC(v122);
                      }
                      else {
                        uint64_t v123 = 0;
                      }
                      long long v154 = (float32x2_t *)(v122 + 16 * v119);
                      long long v51 = v349;
                      *long long v154 = (float32x2_t)v349;
                      v154[1] = (float32x2_t)v348;
                      long long v155 = (char *)*((void *)&v353 + 1);
                      long long v156 = (char *)v353;
                      long long v157 = v154;
                      if (*((void *)&v353 + 1) != (void)v353)
                      {
                        do
                        {
                          *(_OWORD *)v157[-2].f32 = *((_OWORD *)v155 - 1);
                          v157 -= 2;
                          v155 -= 16;
                        }
                        while (v155 != v156);
                        long long v155 = (char *)v353;
                      }
                      unint64_t v77 = v154 + 2;
                      *(void *)&long long v353 = v157;
                      *((void *)&v353 + 1) = v154 + 2;
                      unint64_t v354 = v122 + 16 * v123;
                      if (v155) {
                        operator delete(v155);
                      }
                    }
                    else
                    {
                      **((void **)&v353 + 1) = v51;
                      v76[1] = (float32x2_t)v69;
                      unint64_t v77 = v76 + 2;
                    }
                    *((void *)&v353 + 1) = v77;
                    if ((unint64_t)v77 < v354)
                    {
                      *unint64_t v77 = v71;
LABEL_377:
                      long long v50 = v350;
                      goto LABEL_378;
                    }
                    uint64_t v158 = (uint64_t)((uint64_t)v77 - v353) >> 4;
                    if ((unint64_t)(v158 + 1) >> 60) {
                      goto LABEL_610;
                    }
                    unint64_t v159 = (uint64_t)(v354 - v353) >> 3;
                    if (v159 <= v158 + 1) {
                      unint64_t v159 = v158 + 1;
                    }
                    if (v354 - (unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v83 = v159;
                    }
                    if (v83) {
                      unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    v139 = (float32x2_t *)(v83 + 16 * v158);
                    long long v50 = v350;
                    float32x2_t *v139 = v71;
                    v139[1] = (float32x2_t)v350;
                    long long v140 = (char *)*((void *)&v353 + 1);
                    v166 = (char *)v353;
                    v142 = v139;
                    if (*((void *)&v353 + 1) != (void)v353)
                    {
                      do
                      {
                        long long v50 = *((_OWORD *)v140 - 1);
                        *(_OWORD *)v142[-2].f32 = v50;
                        v142 -= 2;
                        v140 -= 16;
                      }
                      while (v140 != v166);
LABEL_410:
                      long long v140 = (char *)v353;
                    }
                  }
                  else
                  {
                    if (*((void *)&v353 + 1) >= v354)
                    {
                      uint64_t v129 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                      unint64_t v130 = v129 + 1;
                      if ((unint64_t)(v129 + 1) >> 60) {
                        goto LABEL_610;
                      }
                      uint64_t v131 = v354 - v353;
                      if ((uint64_t)(v354 - v353) >> 3 > v130) {
                        unint64_t v130 = v131 >> 3;
                      }
                      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v132 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v132 = v130;
                      }
                      if (v132) {
                        unint64_t v132 = (unint64_t)sub_25B3FFAEC(v132);
                      }
                      else {
                        uint64_t v133 = 0;
                      }
                      v168 = (float32x2_t *)(v132 + 16 * v129);
                      float32x2_t *v168 = v71;
                      v168[1] = (float32x2_t)v348;
                      v169 = (char *)*((void *)&v353 + 1);
                      v170 = (char *)v353;
                      v171 = v168;
                      if (*((void *)&v353 + 1) != (void)v353)
                      {
                        do
                        {
                          *(_OWORD *)v171[-2].f32 = *((_OWORD *)v169 - 1);
                          v171 -= 2;
                          v169 -= 16;
                        }
                        while (v169 != v170);
                        v169 = (char *)v353;
                      }
                      unint64_t v77 = v168 + 2;
                      *(void *)&long long v353 = v171;
                      *((void *)&v353 + 1) = v168 + 2;
                      unint64_t v354 = v132 + 16 * v133;
                      if (v169) {
                        operator delete(v169);
                      }
                    }
                    else
                    {
                      **((void **)&v353 + 1) = v71;
                      v76[1] = (float32x2_t)v69;
                      unint64_t v77 = v76 + 2;
                    }
                    *((void *)&v353 + 1) = v77;
                    if ((unint64_t)v77 < v354)
                    {
                      *unint64_t v77 = (float32x2_t)v349;
                      goto LABEL_377;
                    }
                    uint64_t v172 = (uint64_t)((uint64_t)v77 - v353) >> 4;
                    if ((unint64_t)(v172 + 1) >> 60) {
                      goto LABEL_610;
                    }
                    unint64_t v173 = (uint64_t)(v354 - v353) >> 3;
                    if (v173 <= v172 + 1) {
                      unint64_t v173 = v172 + 1;
                    }
                    if (v354 - (unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v83 = v173;
                    }
                    if (v83) {
                      unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    v139 = (float32x2_t *)(v83 + 16 * v172);
                    long long v51 = v349;
                    long long v50 = v350;
                    float32x2_t *v139 = (float32x2_t)v349;
                    v139[1] = (float32x2_t)v350;
                    long long v140 = (char *)*((void *)&v353 + 1);
                    v180 = (char *)v353;
                    v142 = v139;
                    if (*((void *)&v353 + 1) != (void)v353)
                    {
                      do
                      {
                        long long v50 = *((_OWORD *)v140 - 1);
                        *(_OWORD *)v142[-2].f32 = v50;
                        v142 -= 2;
                        v140 -= 16;
                      }
                      while (v140 != v180);
                      goto LABEL_410;
                    }
                  }
LABEL_411:
                  float v78 = v139 + 2;
                  *(void *)&long long v353 = v142;
                  *((void *)&v353 + 1) = v139 + 2;
                  unint64_t v354 = v83 + 16 * v84;
                  if (v140) {
                    operator delete(v140);
                  }
LABEL_413:
                  *((void *)&v353 + 1) = v78;
                  uint64_t v54 = v357;
                  break;
                case 7:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    **((void **)&v353 + 1) = v71;
LABEL_139:
                    long long v50 = v70;
                    goto LABEL_144;
                  }
                  uint64_t v112 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v113 = v112 + 1;
                  if ((unint64_t)(v112 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v114 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v113) {
                    unint64_t v113 = v114 >> 3;
                  }
                  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v113;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v112);
                  long long v50 = v350;
                  float32x2_t *v139 = v71;
                  v139[1] = (float32x2_t)v350;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v152 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) != (void)v353)
                  {
                    do
                    {
                      long long v50 = *((_OWORD *)v140 - 1);
                      *(_OWORD *)v142[-2].f32 = v50;
                      v142 -= 2;
                      v140 -= 16;
                    }
                    while (v140 != v152);
                    goto LABEL_410;
                  }
                  goto LABEL_411;
                case 8:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    long long v50 = v70;
LABEL_127:
                    *uint64_t v72 = (float32x2_t)v50;
                    v72[1] = v71;
                    goto LABEL_145;
                  }
                  uint64_t v100 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v101 = v100 + 1;
                  if ((unint64_t)(v100 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v102 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v101) {
                    unint64_t v101 = v102 >> 3;
                  }
                  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v101;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v100);
                  long long v50 = v350;
                  float32x2_t *v139 = (float32x2_t)v350;
                  v139[1] = v71;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v148 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) != (void)v353)
                  {
                    do
                    {
                      long long v50 = *((_OWORD *)v140 - 1);
                      *(_OWORD *)v142[-2].f32 = v50;
                      v142 -= 2;
                      v140 -= 16;
                    }
                    while (v140 != v148);
                    goto LABEL_410;
                  }
                  goto LABEL_411;
                case 9:
                  v79 = (float32x2_t *)*((void *)&v353 + 1);
                  if (BYTE4(v352))
                  {
                    if (*((void *)&v353 + 1) >= v354)
                    {
                      uint64_t v124 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                      unint64_t v125 = v124 + 1;
                      if ((unint64_t)(v124 + 1) >> 60) {
                        goto LABEL_610;
                      }
                      uint64_t v126 = v354 - v353;
                      if ((uint64_t)(v354 - v353) >> 3 > v125) {
                        unint64_t v125 = v126 >> 3;
                      }
                      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v127 = v125;
                      }
                      if (v127) {
                        unint64_t v127 = (unint64_t)sub_25B3FFAEC(v127);
                      }
                      else {
                        uint64_t v128 = 0;
                      }
                      uint64_t v160 = (float32x2_t *)(v127 + 16 * v124);
                      *uint64_t v160 = (float32x2_t)v348;
                      v160[1] = v71;
                      v161 = (char *)*((void *)&v353 + 1);
                      v162 = (char *)v353;
                      v163 = v160;
                      if (*((void *)&v353 + 1) != (void)v353)
                      {
                        do
                        {
                          *(_OWORD *)v163[-2].f32 = *((_OWORD *)v161 - 1);
                          v163 -= 2;
                          v161 -= 16;
                        }
                        while (v161 != v162);
                        v161 = (char *)v353;
                      }
                      unint64_t v77 = v160 + 2;
                      *(void *)&long long v353 = v163;
                      *((void *)&v353 + 1) = v160 + 2;
                      unint64_t v354 = v127 + 16 * v128;
                      if (v161) {
                        operator delete(v161);
                      }
                    }
                    else
                    {
                      **((void **)&v353 + 1) = v69;
                      v79[1] = v71;
                      unint64_t v77 = v79 + 2;
                    }
                    *((void *)&v353 + 1) = v77;
                    if ((unint64_t)v77 < v354)
                    {
                      *unint64_t v77 = (float32x2_t)v350;
                      long long v50 = v349;
LABEL_378:
                      v77[1] = (float32x2_t)v50;
                      float v78 = v77 + 2;
                      goto LABEL_413;
                    }
                    uint64_t v164 = (uint64_t)((uint64_t)v77 - v353) >> 4;
                    if ((unint64_t)(v164 + 1) >> 60) {
                      goto LABEL_610;
                    }
                    unint64_t v165 = (uint64_t)(v354 - v353) >> 3;
                    if (v165 <= v164 + 1) {
                      unint64_t v165 = v164 + 1;
                    }
                    if (v354 - (unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v83 = v165;
                    }
                    if (v83) {
                      unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    v139 = (float32x2_t *)(v83 + 16 * v164);
                    long long v51 = v350;
                    long long v50 = v349;
                    float32x2_t *v139 = (float32x2_t)v350;
                    v139[1] = (float32x2_t)v349;
                    long long v140 = (char *)*((void *)&v353 + 1);
                    v167 = (char *)v353;
                    v142 = v139;
                    if (*((void *)&v353 + 1) != (void)v353)
                    {
                      do
                      {
                        long long v50 = *((_OWORD *)v140 - 1);
                        *(_OWORD *)v142[-2].f32 = v50;
                        v142 -= 2;
                        v140 -= 16;
                      }
                      while (v140 != v167);
                      goto LABEL_410;
                    }
                  }
                  else
                  {
                    if (*((void *)&v353 + 1) >= v354)
                    {
                      uint64_t v134 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                      unint64_t v135 = v134 + 1;
                      if ((unint64_t)(v134 + 1) >> 60) {
                        goto LABEL_610;
                      }
                      uint64_t v136 = v354 - v353;
                      if ((uint64_t)(v354 - v353) >> 3 > v135) {
                        unint64_t v135 = v136 >> 3;
                      }
                      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v137 = v135;
                      }
                      if (v137) {
                        unint64_t v137 = (unint64_t)sub_25B3FFAEC(v137);
                      }
                      else {
                        uint64_t v138 = 0;
                      }
                      v174 = (float32x2_t *)(v137 + 16 * v134);
                      long long v51 = v348;
                      float32x2_t *v174 = (float32x2_t)v348;
                      v174[1] = (float32x2_t)v349;
                      v175 = (char *)*((void *)&v353 + 1);
                      v176 = (char *)v353;
                      v177 = v174;
                      if (*((void *)&v353 + 1) != (void)v353)
                      {
                        do
                        {
                          *(_OWORD *)v177[-2].f32 = *((_OWORD *)v175 - 1);
                          v177 -= 2;
                          v175 -= 16;
                        }
                        while (v175 != v176);
                        v175 = (char *)v353;
                      }
                      v118 = v174 + 2;
                      *(void *)&long long v353 = v177;
                      *((void *)&v353 + 1) = v174 + 2;
                      unint64_t v354 = v137 + 16 * v138;
                      if (v175) {
                        operator delete(v175);
                      }
                    }
                    else
                    {
                      long long v51 = v69;
                      **((void **)&v353 + 1) = v69;
                      v79[1] = (float32x2_t)v349;
                      v118 = v79 + 2;
                    }
                    *((void *)&v353 + 1) = v118;
                    if ((unint64_t)v118 < v354)
                    {
                      long long v50 = v350;
                      float32x2_t *v118 = (float32x2_t)v350;
                      v118[1] = v71;
                      float v78 = v118 + 2;
                      goto LABEL_413;
                    }
                    uint64_t v178 = (uint64_t)((uint64_t)v118 - v353) >> 4;
                    if ((unint64_t)(v178 + 1) >> 60) {
LABEL_610:
                    }
                      sub_25B3FBC4C();
                    unint64_t v179 = (uint64_t)(v354 - v353) >> 3;
                    if (v179 <= v178 + 1) {
                      unint64_t v179 = v178 + 1;
                    }
                    if (v354 - (unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v83 = v179;
                    }
                    if (v83) {
                      unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    v139 = (float32x2_t *)(v83 + 16 * v178);
                    long long v50 = v350;
                    float32x2_t *v139 = (float32x2_t)v350;
                    v139[1] = v71;
                    long long v140 = (char *)*((void *)&v353 + 1);
                    v181 = (char *)v353;
                    v142 = v139;
                    if (*((void *)&v353 + 1) != (void)v353)
                    {
                      do
                      {
                        long long v50 = *((_OWORD *)v140 - 1);
                        *(_OWORD *)v142[-2].f32 = v50;
                        v142 -= 2;
                        v140 -= 16;
                      }
                      while (v140 != v181);
                      goto LABEL_410;
                    }
                  }
                  goto LABEL_411;
                case 10:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v75 = (float32x2_t)v70;
                    goto LABEL_135;
                  }
                  uint64_t v91 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v92 = v91 + 1;
                  if ((unint64_t)(v91 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v93 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v92) {
                    unint64_t v92 = v93 >> 3;
                  }
                  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v92;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v91);
                  long long v51 = v350;
                  long long v50 = v348;
                  float32x2_t *v139 = (float32x2_t)v350;
                  v139[1] = (float32x2_t)v348;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v145 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v145);
                  goto LABEL_410;
                case 11:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v73 = (float32x2_t)v70;
LABEL_142:
                    *uint64_t v72 = v73;
LABEL_143:
                    long long v50 = v51;
LABEL_144:
                    v72[1] = (float32x2_t)v50;
LABEL_145:
                    float v78 = v72 + 2;
                    goto LABEL_413;
                  }
                  uint64_t v115 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v117 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v116) {
                    unint64_t v116 = v117 >> 3;
                  }
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v116;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v115);
                  long long v51 = v350;
                  long long v50 = v349;
                  float32x2_t *v139 = (float32x2_t)v350;
                  v139[1] = (float32x2_t)v349;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v153 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) != (void)v353)
                  {
                    do
                    {
                      long long v50 = *((_OWORD *)v140 - 1);
                      *(_OWORD *)v142[-2].f32 = v50;
                      v142 -= 2;
                      v140 -= 16;
                    }
                    while (v140 != v153);
                    goto LABEL_410;
                  }
                  goto LABEL_411;
                case 12:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    long long v50 = v51;
                    goto LABEL_127;
                  }
                  uint64_t v80 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v82 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v81) {
                    unint64_t v81 = v82 >> 3;
                  }
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v81;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v80);
                  long long v50 = v349;
                  float32x2_t *v139 = (float32x2_t)v349;
                  v139[1] = v71;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v141 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v141);
                  goto LABEL_410;
                case 13:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    long long v50 = v69;
                    goto LABEL_127;
                  }
                  uint64_t v88 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v89 = v88 + 1;
                  if ((unint64_t)(v88 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v90 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v89) {
                    unint64_t v89 = v90 >> 3;
                  }
                  if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v89;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v88);
                  long long v50 = v348;
                  float32x2_t *v139 = (float32x2_t)v348;
                  v139[1] = v71;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v144 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) == (void)v353) {
                    goto LABEL_411;
                  }
                  do
                  {
                    long long v50 = *((_OWORD *)v140 - 1);
                    *(_OWORD *)v142[-2].f32 = v50;
                    v142 -= 2;
                    v140 -= 16;
                  }
                  while (v140 != v144);
                  goto LABEL_410;
                case 14:
                  uint64_t v72 = (float32x2_t *)*((void *)&v353 + 1);
                  if (*((void *)&v353 + 1) < v354)
                  {
                    float32x2_t v75 = (float32x2_t)v51;
LABEL_135:
                    *uint64_t v72 = v75;
LABEL_136:
                    long long v50 = v69;
                    goto LABEL_144;
                  }
                  uint64_t v109 = (uint64_t)(*((void *)&v353 + 1) - v353) >> 4;
                  unint64_t v110 = v109 + 1;
                  if ((unint64_t)(v109 + 1) >> 60) {
                    goto LABEL_610;
                  }
                  uint64_t v111 = v354 - v353;
                  if ((uint64_t)(v354 - v353) >> 3 > v110) {
                    unint64_t v110 = v111 >> 3;
                  }
                  if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v110;
                  }
                  if (v83) {
                    unint64_t v83 = (unint64_t)sub_25B3FFAEC(v83);
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  v139 = (float32x2_t *)(v83 + 16 * v109);
                  long long v51 = v349;
                  long long v50 = v348;
                  float32x2_t *v139 = (float32x2_t)v349;
                  v139[1] = (float32x2_t)v348;
                  long long v140 = (char *)*((void *)&v353 + 1);
                  long long v151 = (char *)v353;
                  v142 = v139;
                  if (*((void *)&v353 + 1) != (void)v353)
                  {
                    do
                    {
                      long long v50 = *((_OWORD *)v140 - 1);
                      *(_OWORD *)v142[-2].f32 = v50;
                      v142 -= 2;
                      v140 -= 16;
                    }
                    while (v140 != v151);
                    goto LABEL_410;
                  }
                  goto LABEL_411;
                default:
                  break;
              }
            }
            ++v56;
            uint64_t v55 = v54;
          }
          while (v56 < v54 - 1);
          uint64_t v52 = v356;
          uint64_t v55 = v54;
        }
        ++v53;
      }
      while (v53 < v52 - 1);
    }
    v384[0] = 0;
    v384[1] = 0;
    v383 = (uint64_t *)v384;
    v381 = 0;
    uint64_t v380 = 0;
    unint64_t v382 = 0;
    v379 = 0;
    long long v376 = 0u;
    long long v377 = 0u;
    int v378 = 1065353216;
    memset(v374, 0, sizeof(v374));
    int v375 = 1065353216;
    v182 = (float32x2_t *)*((void *)&v353 + 1);
    if ((void)v353 == *((void *)&v353 + 1)) {
      goto LABEL_485;
    }
    v351 = 0;
    v183 = (float32x2_t *)(v353 + 8);
    while (2)
    {
      v184 = (double *)&v183[-1];
      float32x2_t v185 = v183[-1];
      float32x2_t v186 = *v183;
      uint32x2_t v187 = (uint32x2_t)vceq_f32(v185, *v183);
      if ((vpmin_u32(v187, v187).u32[0] & 0x80000000) == 0)
      {
        v188 = sub_25B4666BC(&v376, *(double *)v183);
        v189 = sub_25B4666BC(v374, *(double *)&v185);
        v190 = v189;
        if (v188)
        {
          float32x2_t v191 = v188[3];
          unint64_t v192 = (unint64_t)v188[4];
          sub_25B4667AC(&v376, v188);
          if (v190)
          {
            float32x2_t v193 = v190[3];
            unint64_t v194 = (unint64_t)v190[4];
            sub_25B4667AC(v374, v190);
            if (*(void *)&v191 == *(void *)&v193)
            {
              sub_25B4668D8((void *)(v380 + 48 * *(void *)&v191), (double *)v183);
              goto LABEL_453;
            }
            if (v192 > v194)
            {
              v199 = (int64x2_t *)(v380 + 48 * *(void *)&v193);
              unint64_t v200 = v199[2].i64[0] + v199[2].i64[1];
              uint64_t v201 = v199->i64[1];
              v202 = (char *)(v201 + 8 * (v200 >> 9));
              if (v199[1].i64[0] == v201) {
                uint64_t v203 = 0;
              }
              else {
                uint64_t v203 = *(void *)v202 + 8 * (v200 & 0x1FF);
              }
              v219 = (void *)(v380 + 48 * *(void *)&v191);
              unint64_t v220 = v219[4];
              uint64_t v221 = v219[1];
              v222 = (uint64_t *)(v221 + 8 * (v220 >> 9));
              if (v219[2] == v221)
              {
                v223 = 0;
                v226 = 0;
                v225 = (uint64_t *)(v221 + 8 * ((*(void *)(v380 + 48 * *(void *)&v191 + 40) + v220) >> 9));
              }
              else
              {
                v223 = (char *)(*v222 + 8 * (v219[4] & 0x1FFLL));
                unint64_t v224 = *(void *)(v380 + 48 * *(void *)&v191 + 40) + v220;
                v225 = (uint64_t *)(v221 + 8 * (v224 >> 9));
                v226 = (char *)(*v225 + 8 * (v224 & 0x1FF));
              }
              sub_25B466964(v199, v202, v203, v222, v223, v225, v226);
              v235 = (void *)(v380 + 48 * *(void *)&v191);
              unint64_t v236 = v235[5] + v235[4] - 1;
              sub_25B4676A4(v374, *(double *)(*(void *)(v235[1] + ((v236 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v236 & 0x1FF)));
              sub_25B4676F0(&v383, v192);
              v237 = (float32x2_t *)(*(void *)(*(void *)(v380 + 48 * *(void *)&v193 + 8)
                                               + ((*(void *)(v380 + 48 * *(void *)&v193 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (*(void *)(v380 + 48 * *(void *)&v193 + 32) & 0x1FFLL));
              v238 = sub_25B4677C8((float *)&v376, v237, *(double *)v237);
              v238[3] = v193;
              v238[4] = (float32x2_t)v194;
              v239 = (void *)(v380 + 48 * *(void *)&v193);
              unint64_t v240 = v239[5] + v239[4] - 1;
              v241 = (float32x2_t *)(*(void *)(v239[1] + ((v240 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v240 & 0x1FF));
              v242 = sub_25B4677C8((float *)v374, v241, *(double *)v241);
              v242[3] = v193;
              v242[4] = (float32x2_t)v194;
              goto LABEL_453;
            }
            v206 = (int64x2_t *)(v380 + 48 * *(void *)&v191);
            uint64_t v207 = v206->i64[1];
            v208 = (char *)(v207 + 8 * ((unint64_t)v206[2].i64[0] >> 9));
            if (v206[1].i64[0] == v207) {
              uint64_t v209 = 0;
            }
            else {
              uint64_t v209 = *(void *)v208 + 8 * (v206[2].i64[0] & 0x1FF);
            }
            v227 = (void *)(v380 + 48 * *(void *)&v193);
            unint64_t v228 = v227[4];
            uint64_t v229 = v227[1];
            v230 = (uint64_t *)(v229 + 8 * (v228 >> 9));
            if (v227[2] == v229)
            {
              v231 = 0;
              v234 = 0;
              v233 = (uint64_t *)(v229 + 8 * ((*(void *)(v380 + 48 * *(void *)&v193 + 40) + v228) >> 9));
            }
            else
            {
              v231 = (char *)(*v230 + 8 * (v227[4] & 0x1FFLL));
              unint64_t v232 = *(void *)(v380 + 48 * *(void *)&v193 + 40) + v228;
              v233 = (uint64_t *)(v229 + 8 * (v232 >> 9));
              v234 = (char *)(*v233 + 8 * (v232 & 0x1FF));
            }
            sub_25B466964(v206, v208, v209, v230, v231, v233, v234);
            sub_25B4676A4(&v376, *(double *)(*(void *)(*(void *)(v380 + 48 * *(void *)&v193 + 8)+ ((*(void *)(v380 + 48 * *(void *)&v193 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v380 + 48 * *(void *)&v193 + 32) & 0x1FFLL)));
            sub_25B4676F0(&v383, v194);
            v243 = (float32x2_t *)(*(void *)(*(void *)(v380 + 48 * *(void *)&v191 + 8)
                                             + ((*(void *)(v380 + 48 * *(void *)&v191 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * (*(void *)(v380 + 48 * *(void *)&v191 + 32) & 0x1FFLL));
            v244 = sub_25B4677C8((float *)&v376, v243, *(double *)v243);
            v244[3] = v191;
            v244[4] = (float32x2_t)v192;
            v245 = (void *)(v380 + 48 * *(void *)&v191);
            unint64_t v246 = v245[5] + v245[4] - 1;
            v247 = (float32x2_t *)(*(void *)(v245[1] + ((v246 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v246 & 0x1FF));
            v198 = sub_25B4677C8((float *)v374, v247, *(double *)v247);
          }
          else
          {
            sub_25B467FC8((int64x2_t *)(v380 + 48 * *(void *)&v191), &v183[-1]);
            v198 = sub_25B4677C8((float *)&v376, v183 - 1, *v184);
          }
          v198[3] = v191;
          v198[4] = (float32x2_t)v192;
          goto LABEL_453;
        }
        if (v189)
        {
          float32x2_t v195 = v189[3];
          float32x2_t v196 = v189[4];
          sub_25B4667AC(v374, v189);
          sub_25B4668D8((void *)(v380 + 48 * *(void *)&v195), (double *)v183);
          v197 = sub_25B4677C8((float *)v374, v183, *(double *)v183);
          v197[3] = v195;
          v197[4] = v196;
        }
        else
        {
          v395 = (void *)v185;
          uint64_t v396 = (uint64_t)v186;
          sub_25B467BF4((uint64_t)&v369, (uint64_t *)&v395, 2);
          v204 = v381;
          if ((unint64_t)v381 >= v382)
          {
            unint64_t v210 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v381 - v380) >> 4);
            unint64_t v211 = v210 + 1;
            if (v210 + 1 > 0x555555555555555) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(v382 - v380) >> 4) > v211) {
              unint64_t v211 = 0x5555555555555556 * ((uint64_t)(v382 - v380) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v382 - v380) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v212 = 0x555555555555555;
            }
            else {
              unint64_t v212 = v211;
            }
            v368 = &v382;
            v213 = (char *)sub_25B467D14(v212);
            v214 = &v213[48 * v210];
            v364 = v213;
            v365 = v214;
            v367 = &v213[48 * v215];
            *(_OWORD *)v214 = v369;
            *((_OWORD *)v214 + 1) = v370;
            long long v369 = 0u;
            long long v370 = 0u;
            *((_OWORD *)v214 + 2) = v371;
            long long v371 = 0uLL;
            v366 = v214 + 48;
            sub_25B467D5C(&v380, &v364);
            v205 = v381;
            sub_25B467E04((uint64_t)&v364);
          }
          else
          {
            _OWORD *v381 = v369;
            v204[1] = v370;
            long long v369 = 0u;
            long long v370 = 0u;
            v204[2] = v371;
            long long v371 = 0uLL;
            v205 = v204 + 3;
          }
          v381 = v205;
          sub_25B467E54(&v369);
          v216 = (uint64_t *)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v381 - v380) >> 4) - 1);
          sub_25B467EFC(&v383, (unint64_t)v351, &v379)[5] = v216;
          v217 = sub_25B4677C8((float *)&v376, v183 - 1, *v184);
          v217[3] = (float32x2_t)v216;
          v217[4] = (float32x2_t)v351;
          v218 = sub_25B4677C8((float *)v374, v183, *(double *)v183);
          v218[3] = (float32x2_t)v216;
          v218[4] = (float32x2_t)v351;
          v351 = (uint64_t *)((char *)v351 + 1);
          v379 = v351;
        }
      }
LABEL_453:
      v248 = v183 + 1;
      v183 += 2;
      if (v248 != v182) {
        continue;
      }
      break;
    }
    v249 = v383;
    a2 = v344;
    uint64_t v5 = v341;
    if (v383 != (uint64_t *)v384)
    {
      do
      {
        if (BYTE5(v352))
        {
          v250 = (void *)(v380 + 48 * v249[5]);
          unint64_t v251 = v250[4];
          unint64_t v252 = v251 + v250[5];
          uint64_t v253 = v250[1];
          uint64_t v254 = v250[2];
          v255 = (char *)(v253 + 8 * (v252 >> 9));
          if (v254 == v253)
          {
            uint64_t v258 = 0;
            v364 = v255;
            v365 = 0;
            v366 = v255;
            v367 = 0;
            v257 = (void *)(v253 + 8 * (v251 >> 9));
          }
          else
          {
            uint64_t v256 = *(void *)v255 + 8 * (v252 & 0x1FF);
            v364 = v255;
            v365 = (_OWORD *)v256;
            v366 = v255;
            v367 = (char *)v256;
            v257 = (void *)(v253 + 8 * (v251 >> 9));
            uint64_t v258 = *v257 + 8 * (v251 & 0x1FF);
          }
          v395 = v257;
          uint64_t v396 = v258;
          v397 = v257;
          uint64_t v398 = v258;
          sub_25B46835C(__p, (uint64_t)&v364, (uint64_t)&v395);
          v268 = v359;
          if ((unint64_t)v359 >= v360)
          {
            unint64_t v269 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v359 - v358) >> 3);
            unint64_t v270 = v269 + 1;
            if (v269 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(v360 - v358) >> 3) > v270) {
              unint64_t v270 = 0x5555555555555556 * ((uint64_t)(v360 - v358) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v360 - v358) >> 3) >= 0x555555555555555) {
              unint64_t v271 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v271 = v270;
            }
LABEL_477:
            *(void *)&long long v371 = &v360;
            v273 = (char *)sub_25B413D74(v271);
            v274 = &v273[24 * v269];
            *(void *)&long long v369 = v273;
            *((void *)&v369 + 1) = v274;
            *((void *)&v370 + 1) = &v273[24 * v275];
            *(void *)v274 = 0;
            *((void *)v274 + 1) = 0;
            *((void *)v274 + 2) = 0;
            *(_OWORD *)v274 = *(_OWORD *)__p;
            *((void *)v274 + 2) = v373;
            __p[1] = 0;
            __p[0] = 0;
            uint64_t v373 = 0;
            *(void *)&long long v370 = v274 + 24;
            sub_25B43EA54(&v358, &v369);
            v276 = v359;
            sub_25B43EAC4((uint64_t)&v369);
            v359 = v276;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_479;
          }
        }
        else
        {
          uint64_t v259 = v249[5];
          v260 = (void *)(v380 + 48 * v259);
          unint64_t v261 = v260[4];
          uint64_t v262 = v260[1];
          v263 = (void *)(v262 + 8 * (v261 >> 9));
          if (v260[2] == v262)
          {
            v264 = 0;
            v267 = 0;
            v266 = (char *)(v262 + 8 * ((*(void *)(v380 + 48 * v259 + 40) + v261) >> 9));
          }
          else
          {
            v264 = (uint64_t *)(*v263 + 8 * (v260[4] & 0x1FFLL));
            unint64_t v265 = *(void *)(v380 + 48 * v259 + 40) + v261;
            v266 = (char *)(v262 + 8 * (v265 >> 9));
            v267 = (uint64_t *)(*(void *)v266 + 8 * (v265 & 0x1FF));
          }
          sub_25B468444(__p, v263, v264, v266, v267);
          v268 = v359;
          if ((unint64_t)v359 >= v360)
          {
            unint64_t v269 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v359 - v358) >> 3);
            unint64_t v272 = v269 + 1;
            if (v269 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(v360 - v358) >> 3) > v272) {
              unint64_t v272 = 0x5555555555555556 * ((uint64_t)(v360 - v358) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v360 - v358) >> 3) >= 0x555555555555555) {
              unint64_t v271 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v271 = v272;
            }
            goto LABEL_477;
          }
        }
        void *v268 = 0;
        v268[1] = 0;
        v268[2] = 0;
        *(_OWORD *)v268 = *(_OWORD *)__p;
        v268[2] = v373;
        __p[1] = 0;
        __p[0] = 0;
        uint64_t v373 = 0;
        v359 = v268 + 3;
LABEL_479:
        v277 = (uint64_t *)v249[1];
        if (v277)
        {
          do
          {
            v278 = v277;
            v277 = (uint64_t *)*v277;
          }
          while (v277);
        }
        else
        {
          do
          {
            v278 = (uint64_t *)v249[2];
            _ZF = *v278 == (void)v249;
            v249 = v278;
          }
          while (!_ZF);
        }
        v249 = v278;
      }
      while (v278 != (uint64_t *)v384);
    }
LABEL_485:
    sub_25B3FB178((uint64_t)v374);
    sub_25B3FB178((uint64_t)&v376);
    *(void *)&long long v369 = &v380;
    sub_25B4682D8((void ***)&v369);
    sub_25B3FA930(v384[0]);
    *(void *)__s1 = &unk_2708F21F8;
    if (v392) {
      sub_25B404120(v392);
    }
    for (uint64_t i = v358; (void *)i != v359; i += 24)
    {
      v280 = *(float32x2_t **)i;
      uint64_t v281 = *(void *)(i + 8);
      if ((unint64_t)(v281 - *(void *)i) >= 0x18)
      {
        long long v377 = 0uLL;
        int v378 = 6;
        sub_25B57ACD8(__s1, v280, v281);
        v282 = *(unint64_t **)(a2 + 256);
        long long v376 = *(_OWORD *)__s1;
        *(void *)&long long v377 = *(void *)&__s1[16];
        sub_25B57B25C((uint64_t)&v369, (float32x2_t **)&v376, *v282);
        memset(__s1, 0, 48);
        sub_25B4641DC((uint64_t)&__s1[48], (uint64_t)&v369);
        *(_OWORD *)__s1 = v386;
        *(_OWORD *)&__s1[16] = v387;
        *(_OWORD *)&__s1[32] = v388;
        sub_25B4642B4((uint64_t)&v364, __s1);
      }
    }
    *(void *)__s1 = &v358;
    sub_25B413BE8((void ***)__s1);
    if ((void)v353)
    {
      *((void *)&v353 + 1) = v353;
      operator delete((void *)v353);
    }
    float v33 = v343;
LABEL_494:
    float v33 = (uint64_t *)*v33;
  }
  while (v33);
LABEL_495:
  unint64_t v283 = *v5;
  v284 = (float *)v5[1];
  if ((float *)*v5 == v284) {
    goto LABEL_588;
  }
  sub_25B45FB38(v283, v284, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v284 - v283) >> 3)), 1);
  unint64_t v285 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5[1] - *v5) >> 3);
  __s1[0] = 1;
  sub_25B443750(&v352, v285, __s1);
  unint64_t v286 = *v5;
  unint64_t v287 = v5[1];
  if (v287 == *v5)
  {
    unint64_t v286 = v5[1];
  }
  else
  {
    unint64_t v288 = 0;
    do
    {
      if ((*(void *)((char *)v352 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v288))
      {
        unint64_t v289 = v288 + 1;
        unint64_t v290 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - v286) >> 3);
        if (v288 + 1 < v290)
        {
          v291 = (float32x2_t **)(v286 + 40 * v288);
          unint64_t v292 = v288 + 1;
          uint64_t v293 = 40 * v288 + 40;
          do
          {
            sub_25B57B58C((unint64_t *)__s1, (float32x2_t **)(v286 + v293), v291, *(void *)(a2 + 96));
            if (*(void *)&__s1[8] <= 1uLL) {
              unint64_t v294 = 1;
            }
            else {
              unint64_t v294 = *(void *)&__s1[8];
            }
            if ((float)((float)*(unint64_t *)__s1 / (float)v294) > 0.3) {
              *(void *)((char *)v352 + ((v292 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v292);
            }
            ++v292;
            unint64_t v286 = *v5;
            unint64_t v287 = v5[1];
            unint64_t v290 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - *v5) >> 3);
            v293 += 40;
          }
          while (v292 < v290);
        }
      }
      else
      {
        unint64_t v289 = v288 + 1;
        unint64_t v290 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - v286) >> 3);
      }
      unint64_t v288 = v289;
    }
    while (v289 < v290);
  }
  long long v376 = 0uLL;
  *(void *)&long long v377 = 0;
  unint64_t v296 = v353;
  if ((void)v353)
  {
    uint64_t v297 = 0;
    unint64_t v298 = 0;
    unint64_t v299 = 0;
    do
    {
      if ((*(void *)((char *)v352 + ((v299 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v299))
      {
        uint64_t v300 = *v5 + v297;
        if (v298 >= (unint64_t)v377)
        {
          unint64_t v298 = sub_25B460770((uint64_t *)&v376, v300);
        }
        else
        {
          sub_25B460700((uint64_t)&v376, v300);
          v298 += 40;
        }
        *((void *)&v376 + 1) = v298;
        unint64_t v296 = v353;
      }
      ++v299;
      v297 += 40;
    }
    while (v299 < v296);
    unint64_t v286 = *v5;
    unint64_t v287 = v5[1];
    unint64_t v301 = v376;
    unint64_t v302 = v377;
  }
  else
  {
    unint64_t v302 = 0;
    unint64_t v298 = 0;
    unint64_t v301 = 0;
  }
  unint64_t *v5 = v301;
  v5[1] = v298;
  *(void *)&long long v376 = v286;
  *((void *)&v376 + 1) = v287;
  unint64_t v303 = v5[2];
  v5[2] = v302;
  *(void *)&long long v377 = v303;
  unint64_t v304 = v298 - v301;
  uint64_t v305 = (uint64_t)(v298 - v301) >> 3;
  unint64_t v306 = 0xCCCCCCCCCCCCCCCDLL * v305;
  unint64_t v307 = 0xCCCCCCCCCCCCCCCDLL * v305 - v296;
  if (0xCCCCCCCCCCCCCCCDLL * v305 <= v296)
  {
    *(void *)&long long v353 = 0xCCCCCCCCCCCCCCCDLL * v305;
    if (!v306) {
      goto LABEL_540;
    }
    goto LABEL_539;
  }
  if (*((void *)&v353 + 1) << 6 < v307 || v296 > (*((void *)&v353 + 1) << 6) - v307)
  {
    memset(__s1, 0, 24);
    if ((v304 & 0x8000000000000000) != 0) {
      sub_25B3FBC4C();
    }
    if (*((void *)&v353 + 1) << 6 > 0x3FFFFFFFFFFFFFFEuLL)
    {
      unint64_t v309 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else if (*((void *)&v353 + 1) << 7 <= ((v306 + 63) & 0xFFFFFFFFFFFFFFC0))
    {
      unint64_t v309 = (v306 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v309 = *((void *)&v353 + 1) << 7;
    }
    sub_25B40DCD0((uint64_t)__s1, v309);
    v337 = v352;
    uint64_t v338 = v353;
    *(void *)&__s1[8] = v353 + v307;
    v339 = *(char **)__s1;
    if ((uint64_t)v353 < 1)
    {
      LODWORD(v336) = 0;
      v335 = *(unint64_t **)__s1;
    }
    else
    {
      uint64_t v340 = (uint64_t)v353 >> 6;
      if ((unint64_t)(v353 + 63) >= 0x7F) {
        memmove(*(void **)__s1, v352, 8 * v340);
      }
      uint64_t v336 = v338 - (v340 << 6);
      v335 = (unint64_t *)&v339[8 * v340];
      if (v336 < 1) {
        LODWORD(v336) = 0;
      }
      else {
        unint64_t *v335 = *v335 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v336) | v337[v340] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v336);
      }
      v337 = v352;
    }
    v352 = v339;
    *(void *)__s1 = v337;
    long long v353 = *(_OWORD *)&__s1[8];
    if (v337) {
      operator delete(v337);
    }
  }
  else
  {
    v335 = (unint64_t *)((char *)v352 + 8 * (v296 >> 6));
    LODWORD(v336) = v296 & 0x3F;
    *(void *)&long long v353 = 0xCCCCCCCCCCCCCCCDLL * v305;
  }
  if (v306 != v296)
  {
    *(void *)__s1 = v335;
    *(_DWORD *)&__s1[8] = v336;
    sub_25B4438D8((uint64_t)__s1, v307);
  }
  unint64_t v306 = v353;
  if ((void)v353)
  {
LABEL_539:
    *(void *)__s1 = v352;
    *(_DWORD *)&__s1[8] = 0;
    sub_25B443824(__s1, v306);
  }
LABEL_540:
  unint64_t v311 = *v5;
  unint64_t v310 = v5[1];
  if (v310 == *v5) {
    goto LABEL_572;
  }
  unint64_t v312 = 0;
  unint64_t v313 = v5[1];
  while (2)
  {
    unint64_t v314 = v311 + 40 * v312;
    if (*(_DWORD *)(v314 + 32) != 6) {
      goto LABEL_571;
    }
    if (v313 == v311)
    {
      unint64_t v313 = v311;
      goto LABEL_571;
    }
    uint64_t v315 = 0;
    while (2)
    {
      if (v315 == v312) {
        goto LABEL_568;
      }
      unint64_t v316 = *(unsigned int *)(v311 + 40 * v315 + 32);
      if (v316 == 6) {
        goto LABEL_568;
      }
      if (!*((void *)&v361 + 1)) {
        goto LABEL_609;
      }
      uint8x8_t v317 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v361 + 8));
      v317.i16[0] = vaddlv_u8(v317);
      if (v317.u32[0] > 1uLL)
      {
        unint64_t v318 = *(unsigned int *)(v311 + 40 * v315 + 32);
        if (*((void *)&v361 + 1) <= v316) {
          unint64_t v318 = v316 % *((void *)&v361 + 1);
        }
      }
      else
      {
        unint64_t v318 = (DWORD2(v361) - 1) & v316;
      }
      v319 = *(uint64_t ***)(v361 + 8 * v318);
      if (!v319 || (v320 = *v319) == 0) {
LABEL_609:
      }
        sub_25B3FC090("unordered_map::at: key not found");
      while (2)
      {
        unint64_t v321 = v320[1];
        if (v321 != v316)
        {
          if (v317.u32[0] > 1uLL)
          {
            if (v321 >= *((void *)&v361 + 1)) {
              v321 %= *((void *)&v361 + 1);
            }
          }
          else
          {
            v321 &= *((void *)&v361 + 1) - 1;
          }
          if (v321 != v318) {
            goto LABEL_609;
          }
          goto LABEL_562;
        }
        if (*((_DWORD *)v320 + 4) != v316)
        {
LABEL_562:
          v320 = (uint64_t *)*v320;
          if (!v320) {
            goto LABEL_609;
          }
          continue;
        }
        break;
      }
      if (*((unsigned char *)v320 + 161))
      {
        unint64_t v313 = v310;
      }
      else
      {
        unint64_t v313 = v310;
        if (*(void *)v314 != *(void *)(v314 + 8))
        {
          sub_25B57B25C((uint64_t)&v364, (float32x2_t **)v314, v320[4]);
          memset(__s1, 0, 48);
          sub_25B4641DC((uint64_t)&__s1[48], (uint64_t)&v364);
          *(_OWORD *)__s1 = v386;
          *(_OWORD *)&__s1[16] = v387;
          *(_OWORD *)&__s1[32] = v388;
          sub_25B4642B4((uint64_t)&v369, __s1);
        }
      }
LABEL_568:
      if (++v315 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v313 - v311) >> 3)) {
        continue;
      }
      break;
    }
LABEL_571:
    ++v312;
    uint64_t v5 = v341;
    if (v312 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v313 - v311) >> 3)) {
      continue;
    }
    break;
  }
LABEL_572:
  uint64_t v322 = *((void *)&v376 + 1);
  unint64_t v323 = v376;
  if (*((void *)&v376 + 1) != (void)v376)
  {
    uint64_t v324 = *((void *)&v376 + 1);
    do
    {
      v326 = *(void **)(v324 - 40);
      v324 -= 40;
      v325 = v326;
      if (v326)
      {
        *(void *)(v322 - 32) = v325;
        operator delete(v325);
      }
      uint64_t v322 = v324;
    }
    while (v324 != v323);
  }
  *((void *)&v376 + 1) = v323;
  unint64_t v327 = v353;
  if ((void)v353)
  {
    uint64_t v328 = 0;
    unint64_t v329 = 0;
    do
    {
      if ((*(void *)((char *)v352 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v329))
      {
        uint64_t v330 = *v5 + v328;
        if (v323 >= (unint64_t)v377)
        {
          unint64_t v323 = sub_25B460770((uint64_t *)&v376, v330);
        }
        else
        {
          sub_25B460700((uint64_t)&v376, v330);
          v323 += 40;
        }
        *((void *)&v376 + 1) = v323;
        unint64_t v327 = v353;
      }
      ++v329;
      v328 += 40;
    }
    while (v329 < v327);
  }
  long long v331 = *(_OWORD *)v5;
  unint64_t v332 = v377;
  unint64_t *v5 = v376;
  v5[1] = v323;
  long long v376 = v331;
  unint64_t v333 = v5[2];
  v5[2] = v332;
  *(void *)&long long v377 = v333;
  *(void *)__s1 = &v376;
  sub_25B4608A0((void ***)__s1);
  if (v352) {
    operator delete(v352);
  }
  unint64_t v283 = v5[1];
LABEL_588:
  for (unint64_t j = *v5; j != v283; j += 40)
  {
    if (*(_DWORD *)(j + 32) == 3) {
      *(_DWORD *)(j + 32) = 6;
    }
  }
  sub_25B4658C8((uint64_t)&v361);
}

void sub_25B463A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (STACK[0x360]) {
    operator delete((void *)STACK[0x360]);
  }
  STACK[0x2D0] = (unint64_t)&STACK[0x300];
  sub_25B4608A0((void ***)&STACK[0x2D0]);
  if (a41) {
    operator delete(a41);
  }
  sub_25B4658C8((uint64_t)&a51);
  STACK[0x300] = a15;
  sub_25B4608A0((void ***)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void *sub_25B463DA8(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  uint64_t v10 = operator new(0xB0uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = &unk_2708F21F8;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  v10[18] = 0;
  v10[19] = 0;
  *((_WORD *)v10 + 80) = 257;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      float v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_25B3FA70C();
  }
  unint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    char v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          void *v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          char v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        char v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  float v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v10 = *v31;
LABEL_72:
    void *v31 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    float v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_25B4641C4(_Unwind_Exception *a1)
{
  sub_25B469118(1, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4641DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1D50;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_25B4642B4(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F1DA8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B457F00((uint64_t)v6, v5);
}

void sub_25B464F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  std::locale::~locale(&a21);
  sub_25B3F9500((uint64_t)&a27);
  unint64_t v29 = *(std::__shared_weak_count **)(v27 + 128);
  if (v29) {
    sub_25B404120(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B464F8C(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  unint64_t v3 = *(void *)(a1 + 16) * *(void *)(a1 + 8);
  memset(v18, 0, sizeof(v18));
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 144);
    uint64_t result = *v4;
    if (v3 >= 2)
    {
      unint64_t v6 = v3 - 1;
      uint64_t v7 = v4 + 1;
      do
      {
        uint64_t v8 = *v7++;
        result += v8;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(uint64_t **)(a1 + 144);
    uint64_t result = *v12;
    do
    {
      uint64_t v13 = *(void *)((char *)v18 + v9 + 8) + 1;
      *(void *)((char *)v18 + v9 + 8) = v13;
      if (v13 != *(void *)(v2 + v9)) {
        break;
      }
      *(void *)((char *)v18 + v9 + 8) = 0;
      v9 -= 8;
    }
    while (v9 != -16);
    if (v3 >= 2)
    {
      uint64_t v14 = a1 + 16;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v16 = 0;
        result += v12[v10 * *(void *)&v18[0] + v11 * *((void *)&v18[0] + 1)];
        do
        {
          uint64_t v17 = *(void *)((char *)v18 + v16 + 8) + 1;
          *(void *)((char *)v18 + v16 + 8) = v17;
          if (v17 != *(void *)(v14 + v16)) {
            break;
          }
          *(void *)((char *)v18 + v16 + 8) = 0;
          v16 -= 8;
        }
        while (v16 != -16);
      }
    }
  }
  return result;
}

_OWORD *sub_25B4650CC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_25B4582F4((uint64_t)(a1 + 3), a2);
  sub_25B45769C((uint64_t)a1 + 200, a3);
  uint64_t v5 = 0;
  unint64_t v6 = (_OWORD *)((char *)a1 + 56);
  char v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v6 + v5);
    uint64_t v9 = *((void *)a1 + v5 + 26);
    if ((v7 & 1) == 0) {
      break;
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while (v8 == v9);
  if (v8 != v9)
  {
    uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
    sub_25B406B20(v11, (uint64_t)" ", 1);
    uint64_t v12 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v13 = (void *)std::ostream::operator<<();
    sub_25B406B20(v13, (uint64_t)" ", 1);
    sub_25B406B20(v13, (uint64_t)"TensorBinaryExp", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408160("err", "Binary Exp shape should equal");
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    BOOL v15 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v16 = *(_OWORD *)((char *)a1 + 72);
  *a1 = *v6;
  a1[1] = v16;
  a1[2] = *(_OWORD *)((char *)a1 + 88);
  return a1;
}

void sub_25B465300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  v10[25] = &unk_2708F1DA8;
  uint64_t v12 = (std::__shared_weak_count *)v10[41];
  if (v12) {
    sub_25B404120(v12);
  }
  v10[6] = &unk_2708F21F8;
  uint64_t v13 = (std::__shared_weak_count *)v10[22];
  if (v13) {
    sub_25B404120(v13);
  }
  _Unwind_Resume(a1);
}

void sub_25B465370(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B458EBC((uint64_t)v6, v5);
}

void sub_25B4656EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B46574C(void *a1)
{
  a1[25] = &unk_2708F1DA8;
  long long v2 = (std::__shared_weak_count *)a1[41];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[6] = &unk_2708F21F8;
  long long v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

uint64_t *sub_25B4657C8(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_25B46587C(uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 56);
  sub_25B413BE8(&v4);
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_25B4658C8(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      v2[3] = &unk_2708F21F8;
      unint64_t v4 = (std::__shared_weak_count *)v2[19];
      if (v4) {
        sub_25B404120(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_25B46594C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v158 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 184)) {
    BOOL v9 = *(unsigned char *)(a2 + 336) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v7 == v8)
  {
    if (v10)
    {
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      uint64_t v11 = *(void *)(a1 + 104);
      uint64_t v12 = *(float **)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v11)
        {
          uint64_t v13 = *(float **)(a2 + 192);
          uint64_t v14 = *(unint64_t **)(a2 + 344);
          do
          {
            float v15 = *v13++;
            float v16 = v15;
            unint64_t v17 = *v14++;
            *v12++ = v16 * (float)v17;
            --v11;
          }
          while (v11);
        }
      }
      else if (v11)
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(a1 + 56);
        uint64_t v79 = *(void *)(a1 + 64);
        uint64_t v80 = *(void *)(a2 + 192);
        uint64_t v81 = *(void *)(a2 + 344);
        do
        {
          uint64_t v82 = 0;
          v12[v78 * (void)v143 + v79 * *((void *)&v143 + 1)] = *(float *)(v80 + 4 * v77)
                                                                 * (float)*(unint64_t *)(v81 + 8 * v77);
          do
          {
            uint64_t v83 = *(void *)((char *)&v143 + v82 + 8) + 1;
            *(void *)((char *)&v143 + v82 + 8) = v83;
            if (v83 != *(void *)(a1 + 16 + v82)) {
              break;
            }
            *(void *)((char *)&v143 + v82 + 8) = 0;
            v82 -= 8;
          }
          while (v82 != -16);
          ++v77;
        }
        while (v77 != v11);
      }
    }
    else
    {
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      uint64_t v45 = *(void *)(a1 + 104);
      uint64_t v46 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v45)
        {
          uint64_t v47 = 0;
          uint64_t v48 = a1 + 16;
          do
          {
            float v49 = sub_25B46639C(a2, v47, v143, *((uint64_t *)&v143 + 1));
            uint64_t v50 = 0;
            *(float *)(v46 + 4 * v47) = v49;
            do
            {
              uint64_t v51 = *(void *)((char *)&v143 + v50 + 8) + 1;
              *(void *)((char *)&v143 + v50 + 8) = v51;
              if (v51 != *(void *)(v48 + v50)) {
                break;
              }
              *(void *)((char *)&v143 + v50 + 8) = 0;
              v50 -= 8;
            }
            while (v50 != -16);
            ++v47;
          }
          while (v47 != v45);
        }
      }
      else if (v45)
      {
        uint64_t v84 = 0;
        uint64_t v85 = *(void *)(a1 + 56);
        uint64_t v86 = *(void *)(a1 + 64);
        uint64_t v87 = a1 + 16;
        do
        {
          uint64_t v88 = v85 * v143 + v86 * *((void *)&v143 + 1);
          float v89 = sub_25B46639C(a2, v84, v143, *((uint64_t *)&v143 + 1));
          uint64_t v90 = 0;
          *(float *)(v46 + 4 * v88) = v89;
          do
          {
            uint64_t v91 = *(void *)((char *)&v143 + v90 + 8) + 1;
            *(void *)((char *)&v143 + v90 + 8) = v91;
            if (v91 != *(void *)(v87 + v90)) {
              break;
            }
            *(void *)((char *)&v143 + v90 + 8) = 0;
            v90 -= 8;
          }
          while (v90 != -16);
          ++v84;
        }
        while (v84 != v45);
      }
    }
  }
  else
  {
    if (v10)
    {
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v134 = 0uLL;
      sub_25B40AB84((uint64_t)&v143, v5, (_OWORD *)a2, (uint64_t)&v134);
      uint64_t v18 = 0;
      char v19 = 1;
      do
      {
        uint64_t v20 = *((void *)&v134 + v18);
        uint64_t v21 = *((void *)v5 + v18);
        if ((v19 & 1) == 0) {
          break;
        }
        char v19 = 0;
        uint64_t v18 = 1;
      }
      while (v20 == v21);
      if (v20 != v21)
      {
        uint64_t v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v23, (uint64_t)" ", 1);
        uint8x8_t v24 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v25 = (void *)std::ostream::operator<<();
        sub_25B406B20(v25, (uint64_t)" ", 1);
        sub_25B406B20(v25, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint8x8_t v26 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v27 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      *(_OWORD *)&v140[0].__locale_ = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      uint64_t v28 = *(void *)(a1 + 104);
      uint64_t v29 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v28)
        {
          uint64_t v30 = 0;
          unint64_t v32 = (uint64_t *)*((void *)&v144 + 1);
          float v31 = (uint64_t *)v145;
          unint64_t v33 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
          if (v33 <= 1) {
            unint64_t v33 = 1;
          }
          uint64_t v34 = *(void *)(a2 + 192);
          uint64_t v35 = *(void *)(a2 + 344);
          do
          {
            long long v137 = *(_OWORD *)&v140[0].__locale_;
            if (v31 != v32)
            {
              v36 = v32;
              unint64_t v37 = v33;
              do
              {
                uint64_t v38 = *v36++;
                *((void *)&v137 + v38) = 0;
                --v37;
              }
              while (v37);
            }
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            char v41 = 1;
            do
            {
              char v42 = v41;
              v40 += *((void *)&v155 + v39) * *((void *)&v137 + v39);
              uint64_t v39 = 1;
              char v41 = 0;
            }
            while ((v42 & 1) != 0);
            *(float *)(v29 + 4 * v30) = *(float *)(v34 + 4 * v40) * (float)*(unint64_t *)(v35 + 8 * v40);
            for (uint64_t i = 1; i != -1; --i)
            {
              char v44 = (std::locale::__imp *)((char *)v140[i].__locale_ + 1);
              v140[i].__locale_ = v44;
              if (v44 != *(std::locale::__imp **)((char *)&v134 + i * 8)) {
                break;
              }
              v140[i].__locale_ = 0;
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      else if (v28)
      {
        uint64_t v92 = 0;
        uint64_t v94 = (uint64_t *)*((void *)&v144 + 1);
        uint64_t v93 = (uint64_t *)v145;
        unint64_t v95 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
        if (v95 <= 1) {
          unint64_t v95 = 1;
        }
        uint64_t v96 = *(void *)(a1 + 56);
        uint64_t v97 = *(void *)(a1 + 64);
        uint64_t v98 = *(void *)(a2 + 192);
        uint64_t v99 = *(void *)(a2 + 344);
        do
        {
          locale = v140[0].__locale_;
          unint64_t v101 = v140[1].__locale_;
          long long v137 = *(_OWORD *)&v140[0].__locale_;
          if (v93 != v94)
          {
            uint64_t v102 = v94;
            unint64_t v103 = v95;
            do
            {
              uint64_t v104 = *v102++;
              *((void *)&v137 + v104) = 0;
              --v103;
            }
            while (v103);
          }
          uint64_t v105 = 0;
          uint64_t v106 = 0;
          char v107 = 1;
          do
          {
            char v108 = v107;
            v106 += *((void *)&v155 + v105) * *((void *)&v137 + v105);
            uint64_t v105 = 1;
            char v107 = 0;
          }
          while ((v108 & 1) != 0);
          *(float *)(v29 + 4 * ((void)locale * v96 + (void)v101 * v97)) = *(float *)(v98 + 4 * v106)
                                                                            * (float)*(unint64_t *)(v99 + 8 * v106);
          for (uint64_t j = 1; j != -1; --j)
          {
            unint64_t v110 = (std::locale::__imp *)((char *)v140[j].__locale_ + 1);
            v140[j].__locale_ = v110;
            if (v110 != *(std::locale::__imp **)((char *)&v134 + j * 8)) {
              break;
            }
            v140[j].__locale_ = 0;
          }
          ++v92;
        }
        while (v92 != v28);
      }
    }
    else
    {
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v146 = 0uLL;
      long long v147 = 0uLL;
      long long v144 = 0uLL;
      long long v145 = 0uLL;
      long long v143 = 0uLL;
      long long v135 = 0uLL;
      long long v136 = 0uLL;
      long long v134 = 0uLL;
      sub_25B40AB84((uint64_t)&v143, v5, (_OWORD *)a2, (uint64_t)&v134);
      uint64_t v52 = 0;
      char v53 = 1;
      do
      {
        uint64_t v54 = *((void *)&v134 + v52);
        uint64_t v55 = *((void *)v5 + v52);
        if ((v53 & 1) == 0) {
          break;
        }
        char v53 = 0;
        uint64_t v52 = 1;
      }
      while (v54 == v55);
      if (v54 != v55)
      {
        unint64_t v56 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        v57 = sub_25B406B20(v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v57, (uint64_t)" ", 1);
        BOOL v58 = (void *)MEMORY[0x263F8C0F8];
        float v59 = (void *)std::ostream::operator<<();
        sub_25B406B20(v59, (uint64_t)" ", 1);
        sub_25B406B20(v59, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
        float v60 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
        float v61 = std::locale::use_facet(v140, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
        std::locale::~locale(v140);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      *(_OWORD *)&v140[0].__locale_ = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      uint64_t v62 = *(void *)(a1 + 104);
      uint64_t v63 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v62)
        {
          uint64_t v64 = 0;
          float v66 = (uint64_t *)*((void *)&v144 + 1);
          float v65 = (uint64_t *)v145;
          unint64_t v67 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
          if (v67 <= 1) {
            unint64_t v67 = 1;
          }
          unint64_t v132 = v67;
          do
          {
            long long v137 = *(_OWORD *)&v140[0].__locale_;
            if (v65 != v66)
            {
              float v68 = v66;
              unint64_t v69 = v132;
              do
              {
                uint64_t v70 = *v68++;
                *((void *)&v137 + v70) = 0;
                --v69;
              }
              while (v69);
            }
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            char v73 = 1;
            do
            {
              char v74 = v73;
              v72 += *((void *)&v155 + v71) * *((void *)&v137 + v71);
              uint64_t v71 = 1;
              char v73 = 0;
            }
            while ((v74 & 1) != 0);
            *(float *)(v63 + 4 * v64) = sub_25B46639C(a2, v72, v137, *((uint64_t *)&v137 + 1));
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v76 = (std::locale::__imp *)((char *)v140[k].__locale_ + 1);
              v140[k].__locale_ = v76;
              if (v76 != *(std::locale::__imp **)((char *)&v134 + k * 8)) {
                break;
              }
              v140[k].__locale_ = 0;
            }
            ++v64;
          }
          while (v64 != v62);
        }
      }
      else if (v62)
      {
        uint64_t v111 = 0;
        uint64_t v131 = (uint64_t *)v145;
        uint64_t v133 = (uint64_t *)*((void *)&v144 + 1);
        if ((unint64_t)((uint64_t)(v145 - *((void *)&v144 + 1)) >> 3) <= 1) {
          uint64_t v112 = 1;
        }
        else {
          uint64_t v112 = (uint64_t)(v145 - *((void *)&v144 + 1)) >> 3;
        }
        uint64_t v130 = *(void *)(a1 + 64);
        uint64_t v128 = v112;
        uint64_t v129 = *(void *)(a1 + 56);
        do
        {
          uint64_t v113 = v62;
          uint64_t v114 = v63;
          uint64_t v115 = v140[0].__locale_;
          unint64_t v116 = v140[1].__locale_;
          long long v137 = *(_OWORD *)&v140[0].__locale_;
          if (v131 != v133)
          {
            uint64_t v117 = v133;
            uint64_t v118 = v128;
            do
            {
              uint64_t v119 = *v117++;
              *((void *)&v137 + v119) = 0;
              --v118;
            }
            while (v118);
          }
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          char v122 = 1;
          do
          {
            char v123 = v122;
            v121 += *((void *)&v155 + v120) * *((void *)&v137 + v120);
            uint64_t v120 = 1;
            char v122 = 0;
          }
          while ((v123 & 1) != 0);
          float v124 = sub_25B46639C(a2, v121, v137, *((uint64_t *)&v137 + 1));
          uint64_t v125 = v129 * (void)v115 + v130 * (void)v116;
          uint64_t v63 = v114;
          *(float *)(v114 + 4 * v125) = v124;
          for (uint64_t m = 1; m != -1; --m)
          {
            unint64_t v127 = (std::locale::__imp *)((char *)v140[m].__locale_ + 1);
            v140[m].__locale_ = v127;
            if (v127 != *(std::locale::__imp **)((char *)&v134 + m * 8)) {
              break;
            }
            v140[m].__locale_ = 0;
          }
          ++v111;
          uint64_t v62 = v113;
        }
        while (v111 != v113);
      }
    }
    sub_25B3F9500((uint64_t)&v143);
  }
}

void sub_25B466368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float sub_25B46639C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 184)) {
    uint64_t v4 = *(void *)(a1 + 104) * a3 + *(void *)(a1 + 112) * a4;
  }
  if (!*(unsigned char *)(a1 + 336)) {
    a2 = *(void *)(a1 + 256) * a3 + *(void *)(a1 + 264) * a4;
  }
  return *(float *)(*(void *)(a1 + 192) + 4 * v4) * (float)*(unint64_t *)(*(void *)(a1 + 344) + 8 * a2);
}

void sub_25B4663E4(void *a1)
{
  *a1 = &unk_2708F1D50;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B466450(void *a1)
{
  *a1 = &unk_2708F1D50;
  unint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

uint64_t sub_25B46649C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    char v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    BOOL v9 = sub_25B406B20(v8, (uint64_t)"ascontiguous", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    int v10 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a2 + 136))
  {
    return sub_25B4582F4(a1, a2);
  }
  else
  {
    return sub_25B4570D0(a1, a2);
  }
}

void sub_25B4666A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

float32x2_t *sub_25B4666BC(void *a1, double a2)
{
  uint64_t v2 = 2654435769;
  if (*(float *)&a2 == 0.0) {
    unint64_t v3 = 2654435769;
  }
  else {
    unint64_t v3 = LODWORD(a2) + 2654435769;
  }
  if (*((float *)&a2 + 1) != 0.0) {
    uint64_t v2 = HIDWORD(a2) + 2654435769;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = (v2 + (v3 << 6) + (v3 >> 2)) ^ v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = v5 & (*(void *)&v4 - 1);
  }
  BOOL v9 = *(float32x2_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (uint64_t result = *v9; result; uint64_t result = (float32x2_t *)*result)
  {
    float32x2_t v11 = result[1];
    if (*(void *)&v11 == v5)
    {
      uint32x2_t v12 = (uint32x2_t)vceq_f32(result[2], *(float32x2_t *)&a2);
      if ((vpmin_u32(v12, v12).u32[0] & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      if (v7 > 1)
      {
        if (*(void *)&v11 >= *(void *)&v4) {
          *(void *)&v11 %= *(void *)&v4;
        }
      }
      else
      {
        *(void *)&v11 &= *(void *)&v4 - 1;
      }
      if (*(void *)&v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B4667AC(void *a1, void *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  unint64_t v3 = __p[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v3);
  do
  {
    uint8x8_t v6 = v5;
    unint64_t v5 = (void *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v2) {
      v7 %= *(void *)&v2;
    }
  }
  else
  {
    v7 &= *(void *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 != v3) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v3) = 0;
  }
  uint64_t v9 = *__p;
  if (*__p)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(void *)(*a1 + 8 * v10) = v6;
      uint64_t v9 = *__p;
    }
  }
  void *v6 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

double sub_25B4668D8(void *a1, double *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_25B468E64(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double result = *a2;
  *(double *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
  return result;
}

void sub_25B466964(int64x2_t *a1, char *a2, uint64_t a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  uint64_t i = a7;
  unint64_t v8 = a6;
  uint64_t v9 = a5;
  unint64_t v10 = a4;
  if (a7 == a5) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = ((uint64_t)&a7[-*a6] >> 3) + (((char *)a6 - (char *)a4) << 6) - ((uint64_t)&a5[-*a4] >> 3);
  }
  unint64_t v13 = a1[2].u64[0];
  unint64_t v14 = v13 >> 9;
  uint64_t v15 = a1->i64[1];
  uint64_t v16 = a1[1].i64[0];
  unint64_t v17 = (char *)(v15 + 8 * (v13 >> 9));
  uint64_t v18 = v16 - v15;
  if (v16 == v15) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v17 + 8 * (a1[2].i64[0] & 0x1FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v17) << 6) - ((v19 - *(void *)v17) >> 3);
  }
  uint64_t v21 = a1[2].i64[1];
  if (v20 >= v21 - v20)
  {
    uint64_t v35 = (v18 << 6) - 1;
    if (v16 == v15) {
      uint64_t v35 = 0;
    }
    unint64_t v36 = v13 + v21;
    unint64_t v37 = v35 - v36;
    if (v12 > v37)
    {
      sub_25B468788(a1, v12 - v37);
      uint64_t v21 = a1[2].i64[1];
      uint64_t v15 = a1->i64[1];
      uint64_t v16 = a1[1].i64[0];
      unint64_t v36 = a1[2].i64[0] + v21;
    }
    uint64_t v38 = (void *)(v15 + 8 * (v36 >> 9));
    if (v16 == v15) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = (char *)(*v38 + 8 * (v36 & 0x1FF));
    }
    unint64_t v40 = v21 - v20;
    if (v21 - v20 >= v12)
    {
      char v42 = v39;
      unint64_t v43 = v38;
      char v44 = i;
      if (!v12) {
        return;
      }
      goto LABEL_79;
    }
    if (v40 >= v12 >> 1)
    {
      uint64_t v41 = v21 - v20 - v12 + ((uint64_t)&i[-*v8] >> 3);
      if (v41 >= 1)
      {
        v8 += (unint64_t)v41 >> 9;
        goto LABEL_50;
      }
      unint64_t v51 = 511 - v41;
      __int16 v52 = ~(_WORD)v51;
      v8 -= v51 >> 9;
    }
    else
    {
      if (!v40)
      {
        unint64_t v8 = v10;
        char v44 = v9;
        goto LABEL_69;
      }
      uint64_t v41 = v40 + ((uint64_t)&v9[-*v10] >> 3);
      if (v41 >= 1)
      {
        unint64_t v8 = &v10[(unint64_t)v41 >> 9];
LABEL_50:
        char v44 = (char *)(*v8 + 8 * (v41 & 0x1FF));
        goto LABEL_69;
      }
      unint64_t v53 = 511 - v41;
      __int16 v52 = ~(_WORD)v53;
      unint64_t v8 = &v10[-(v53 >> 9)];
    }
    char v44 = (char *)(*v8 + 8 * (v52 & 0x1FF));
LABEL_69:
    if (v44 == i)
    {
      char v42 = v39;
      unint64_t v43 = v38;
    }
    else
    {
      uint64_t v54 = v8;
      uint64_t v55 = v44;
      unint64_t v43 = v38;
      char v42 = v39;
      do
      {
        *v42++ = *(void *)v55;
        if ((void *)((char *)v42 - *v43) == (void *)4096)
        {
          unint64_t v56 = (void *)v43[1];
          ++v43;
          char v42 = v56;
        }
        v55 += 8;
        if (&v55[-*v54] == (char *)4096)
        {
          v57 = (char *)v54[1];
          ++v54;
          uint64_t v55 = v57;
        }
        ++a1[2].i64[1];
      }
      while (v55 != i);
    }
    unint64_t v12 = v40;
    if (!v40) {
      return;
    }
LABEL_79:
    uint64_t v58 = ((uint64_t)&v39[-*v38] >> 3) - v12;
    if (v58 < 1)
    {
      unint64_t v61 = 511 - v58;
      float v59 = &v38[-(v61 >> 9)];
      float v60 = (char *)(*v59 + 8 * (~(_WORD)v61 & 0x1FF));
    }
    else
    {
      float v59 = &v38[(unint64_t)v58 >> 9];
      float v60 = (char *)(*v59 + 8 * (v58 & 0x1FF));
    }
    if (v60 != v39)
    {
      uint64_t v62 = v59;
      uint64_t v63 = v60;
      do
      {
        *v42++ = *(void *)v63;
        if ((void *)((char *)v42 - *v43) == (void *)4096)
        {
          uint64_t v64 = (void *)v43[1];
          ++v43;
          char v42 = v64;
        }
        v63 += 8;
        if (&v63[-*v62] == (char *)4096)
        {
          float v65 = (char *)v62[1];
          ++v62;
          uint64_t v63 = v65;
        }
        ++a1[2].i64[1];
      }
      while (v63 != v39);
    }
    if (v12 < v40)
    {
      uint64_t v66 = ((uint64_t)&v39[-*v38] >> 3) - v40;
      if (v66 < 1)
      {
        unint64_t v69 = 511 - v66;
        unint64_t v67 = &v38[-(v69 >> 9)];
        uint64_t v68 = *v67 + 8 * (~(_WORD)v69 & 0x1FF);
      }
      else
      {
        unint64_t v67 = &v38[(unint64_t)v66 >> 9];
        uint64_t v68 = *v67 + 8 * (v66 & 0x1FF);
      }
      unint64_t v192 = v9;
      if (v67 == v59)
      {
        uint64_t v81 = (char *)v68;
      }
      else
      {
        uint64_t v71 = (char *)*v59;
        uint64_t v70 = v59 - 1;
        sub_25B468CF4(v199, v71, v60, v38, v39);
        uint64_t v72 = *(void **)&v199[8];
        char v73 = *(char **)&v199[16];
        if (v70 != v67)
        {
          char v74 = **(char ***)&v199[8];
          do
          {
            float32x2_t v75 = (unsigned char *)*v70;
            uint64_t v76 = (char *)(*v70 + 4096);
            while (1)
            {
              uint64_t v77 = v73 - v74;
              if ((v76 - v75) >> 3 >= v77 >> 3) {
                uint64_t v78 = v77 >> 3;
              }
              else {
                uint64_t v78 = (v76 - v75) >> 3;
              }
              v76 -= 8 * v78;
              v73 -= 8 * v78;
              if (v78) {
                memmove(v73, v76, 8 * v78);
              }
              if (v76 == v75) {
                break;
              }
              uint64_t v79 = (char *)*--v72;
              char v74 = v79;
              char v73 = v79 + 4096;
            }
            char v74 = (char *)*v72;
            if ((char *)(*v72 + 4096) == v73)
            {
              uint64_t v80 = (char *)v72[1];
              ++v72;
              char v74 = v80;
              char v73 = v80;
            }
            --v70;
          }
          while (v70 != v67);
        }
        float v60 = (char *)(*v67 + 4096);
        uint64_t v81 = (char *)v68;
        uint64_t v38 = v72;
        uint64_t v39 = v73;
      }
      sub_25B468CF4(v199, v81, v60, v38, v39);
      uint64_t v39 = *(char **)&v199[16];
      uint64_t v38 = *(void **)&v199[8];
      uint64_t v9 = v192;
    }
    if (v10 == v8)
    {
      uint64_t v94 = v9;
      uint64_t v93 = v44;
    }
    else
    {
      uint64_t v83 = (char *)*v8;
      uint64_t v82 = v8 - 1;
      sub_25B468CF4(v199, v83, v44, v38, v39);
      uint64_t v84 = *(void **)&v199[8];
      uint64_t v85 = *(char **)&v199[16];
      if (v82 != v10)
      {
        uint64_t v86 = **(char ***)&v199[8];
        do
        {
          uint64_t v87 = (unsigned char *)*v82;
          uint64_t v88 = (char *)(*v82 + 4096);
          while (1)
          {
            uint64_t v89 = v85 - v86;
            if ((v88 - v87) >> 3 >= v89 >> 3) {
              uint64_t v90 = v89 >> 3;
            }
            else {
              uint64_t v90 = (v88 - v87) >> 3;
            }
            v88 -= 8 * v90;
            v85 -= 8 * v90;
            if (v90) {
              memmove(v85, v88, 8 * v90);
            }
            if (v88 == v87) {
              break;
            }
            uint64_t v91 = (char *)*--v84;
            uint64_t v86 = v91;
            uint64_t v85 = v91 + 4096;
          }
          uint64_t v86 = (char *)*v84;
          if ((char *)(*v84 + 4096) == v85)
          {
            uint64_t v92 = (char *)v84[1];
            ++v84;
            uint64_t v86 = v92;
            uint64_t v85 = v92;
          }
          --v82;
        }
        while (v82 != v10);
      }
      uint64_t v93 = (char *)(*v10 + 4096);
      uint64_t v94 = v9;
      uint64_t v38 = v84;
      uint64_t v39 = v85;
    }
    sub_25B468CF4(v199, v94, v93, v38, v39);
    return;
  }
  unint64_t v196 = v20;
  if (v12 > v13)
  {
    uint64_t v22 = (v18 << 6) - 1;
    uint64_t v23 = v16 - v15;
    if (v16 == v15) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v22;
    }
    if (v16 == v15) {
      unint64_t v25 = v12 - v13 + 1;
    }
    else {
      unint64_t v25 = v12 - v13;
    }
    if ((v25 & 0x1FF) != 0) {
      unint64_t v26 = (v25 >> 9) + 1;
    }
    else {
      unint64_t v26 = v25 >> 9;
    }
    unint64_t v27 = v24 - (v21 + v13);
    if (v26 >= v27 >> 9) {
      unint64_t v28 = v27 >> 9;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v26 <= v27 >> 9)
    {
      for (a1[2].i64[0] = v13 + (v28 << 9); v28; --v28)
      {
        uint64_t v45 = a1[1].i64[0];
        *(void *)v199 = *(void *)(v45 - 8);
        a1[1].i64[0] = v45 - 8;
        sub_25B46850C((uint64_t)a1, v199);
      }
    }
    else
    {
      unint64_t v29 = v26 - v28;
      uint64_t v30 = a1[1].i64[1] - a1->i64[0];
      if (v26 - v28 <= (v30 >> 3) - (v23 >> 3))
      {
        if (v29)
        {
          unint64_t v46 = v20;
          if (v15 == a1->i64[0])
          {
LABEL_58:
            unint64_t v49 = v29;
            do
            {
              *(void *)v199 = operator new(0x1000uLL);
              sub_25B468624(a1, v199);
              --v49;
            }
            while (v49);
            v28 += v29;
            unint64_t v13 = a1[2].u64[0];
          }
          else
          {
            while (1)
            {
              *(void *)v199 = operator new(0x1000uLL);
              sub_25B46850C((uint64_t)a1, v199);
              uint64_t v47 = a1->i64[1];
              uint64_t v48 = a1[1].i64[0] - v47 == 8 ? 511 : 512;
              unint64_t v13 = v48 + a1[2].i64[0];
              a1[2].i64[0] = v13;
              if (!--v29) {
                break;
              }
              if (v47 == a1->i64[0]) {
                goto LABEL_58;
              }
            }
          }
          unint64_t v20 = v46;
        }
        a1[2].i64[0] = v13 + (v28 << 9);
        for (uint64_t i = a7; v28; --v28)
        {
          uint64_t v50 = a1[1].i64[0];
          *(void *)v199 = *(void *)(v50 - 8);
          a1[1].i64[0] = v50 - 8;
          sub_25B46850C((uint64_t)a1, v199);
        }
      }
      else
      {
        BOOL v31 = v16 == v15;
        unint64_t v32 = v26 << 9;
        if (v30 >> 2 <= v29 + (v23 >> 3)) {
          unint64_t v33 = v29 + (v23 >> 3);
        }
        else {
          unint64_t v33 = v30 >> 2;
        }
        uint64_t v201 = &a1[1].i8[8];
        if (v33) {
          unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        unint64_t v95 = v32 - v31;
        *(void *)v199 = v33;
        *(void *)&v199[8] = v33;
        *(void *)&v199[16] = v33;
        unint64_t v200 = (char *)(v33 + 8 * v34);
        do
        {
          v198 = operator new(0x1000uLL);
          sub_25B468624(v199, &v198);
          --v29;
        }
        while (v29);
        unint64_t v189 = v95;
        uint64_t v96 = a1[1].i64[0];
        uint64_t v97 = *(char **)&v199[16];
        if (v28)
        {
          unint64_t v190 = v12;
          do
          {
            if (v97 == v200)
            {
              uint64_t v98 = *(char **)&v199[8];
              uint64_t v99 = *(void **)v199;
              if (*(void *)&v199[8] <= *(void *)v199)
              {
                if (v97 == *(char **)v199) {
                  unint64_t v105 = 1;
                }
                else {
                  unint64_t v105 = (uint64_t)&v97[-*(void *)v199] >> 2;
                }
                uint64_t v106 = (char *)sub_25B3FCAD4(v105);
                uint64_t v109 = v97 - v98;
                BOOL v108 = v97 == v98;
                uint64_t v97 = &v106[8 * (v105 >> 2)];
                if (!v108)
                {
                  uint64_t v97 = &v106[8 * (v105 >> 2) + (v109 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v110 = 8 * (v109 >> 3);
                  uint64_t v111 = &v106[8 * (v105 >> 2)];
                  do
                  {
                    uint64_t v112 = *(void *)v98;
                    v98 += 8;
                    *(void *)uint64_t v111 = v112;
                    v111 += 8;
                    v110 -= 8;
                  }
                  while (v110);
                }
                *(void *)v199 = v106;
                *(void *)&v199[8] = &v106[8 * (v105 >> 2)];
                *(void *)&v199[16] = v97;
                unint64_t v200 = &v106[8 * v107];
                if (v99) {
                  operator delete(v99);
                }
              }
              else
              {
                uint64_t v100 = (uint64_t)(*(void *)&v199[8] - *(void *)v199) >> 3;
                if (v100 >= -1) {
                  uint64_t v101 = v100 + 1;
                }
                else {
                  uint64_t v101 = v100 + 2;
                }
                uint64_t v102 = *(void *)&v199[8] - 8 * (v101 >> 1);
                unint64_t v103 = &v97[-*(void *)&v199[8]];
                if (v97 != *(char **)&v199[8])
                {
                  memmove((void *)(*(void *)&v199[8] - 8 * (v101 >> 1)), *(const void **)&v199[8], (size_t)&v97[-*(void *)&v199[8]]);
                  uint64_t v97 = v98;
                }
                uint64_t v104 = &v97[-8 * (v101 >> 1)];
                uint64_t v97 = &v103[v102];
                *(void *)&v199[8] = v104;
                *(void *)&v199[16] = &v103[v102];
                unint64_t v12 = v190;
              }
            }
            *(void *)uint64_t v97 = *(void *)(v96 - 8);
            uint64_t v97 = (char *)(*(void *)&v199[16] + 8);
            *(void *)&v199[16] += 8;
            uint64_t v96 = a1[1].i64[0] - 8;
            a1[1].i64[0] = v96;
            --v28;
          }
          while (v28);
        }
        uint64_t v113 = (uint64_t *)a1->i64[1];
        if (v113 == (uint64_t *)v96)
        {
          uint64_t v113 = (uint64_t *)v96;
        }
        else
        {
          do
          {
            if (v97 == v200)
            {
              uint64_t v114 = *(char **)&v199[8];
              uint64_t v115 = *(void **)v199;
              if (*(void *)&v199[8] <= *(void *)v199)
              {
                if (v97 == *(char **)v199) {
                  unint64_t v121 = 1;
                }
                else {
                  unint64_t v121 = (uint64_t)&v97[-*(void *)v199] >> 2;
                }
                char v122 = (char *)sub_25B3FCAD4(v121);
                uint64_t v124 = v97 - v114;
                BOOL v108 = v97 == v114;
                uint64_t v97 = &v122[8 * (v121 >> 2)];
                if (!v108)
                {
                  uint64_t v97 = &v122[8 * (v121 >> 2) + (v124 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v125 = 8 * (v124 >> 3);
                  uint64_t v126 = &v122[8 * (v121 >> 2)];
                  do
                  {
                    uint64_t v127 = *(void *)v114;
                    v114 += 8;
                    *(void *)uint64_t v126 = v127;
                    v126 += 8;
                    v125 -= 8;
                  }
                  while (v125);
                }
                *(void *)v199 = v122;
                *(void *)&v199[8] = &v122[8 * (v121 >> 2)];
                *(void *)&v199[16] = v97;
                unint64_t v200 = &v122[8 * v123];
                if (v115) {
                  operator delete(v115);
                }
              }
              else
              {
                uint64_t v116 = (uint64_t)(*(void *)&v199[8] - *(void *)v199) >> 3;
                if (v116 >= -1) {
                  uint64_t v117 = v116 + 1;
                }
                else {
                  uint64_t v117 = v116 + 2;
                }
                uint64_t v118 = *(void *)&v199[8] - 8 * (v117 >> 1);
                uint64_t v119 = &v97[-*(void *)&v199[8]];
                if (v97 != *(char **)&v199[8])
                {
                  memmove((void *)(*(void *)&v199[8] - 8 * (v117 >> 1)), *(const void **)&v199[8], (size_t)&v97[-*(void *)&v199[8]]);
                  uint64_t v97 = v114;
                }
                uint64_t v120 = &v97[-8 * (v117 >> 1)];
                uint64_t v97 = &v119[v118];
                *(void *)&v199[8] = v120;
                *(void *)&v199[16] = &v119[v118];
              }
            }
            uint64_t v128 = *v113++;
            *(void *)uint64_t v97 = v128;
            uint64_t v97 = (char *)(*(void *)&v199[16] + 8);
            *(void *)&v199[16] += 8;
          }
          while (v113 != (uint64_t *)a1[1].i64[0]);
          uint64_t v96 = a1->i64[1];
        }
        uint64_t v129 = (void *)a1->i64[0];
        *a1 = *(int64x2_t *)v199;
        *(void *)v199 = v129;
        *(void *)&v199[8] = v96;
        *(void *)&v199[16] = v113;
        uint64_t v130 = (uint64_t)v200;
        a1[1].i64[0] = (uint64_t)v97;
        a1[1].i64[1] = v130;
        a1[2].i64[0] += v189;
        if (v129) {
          operator delete(v129);
        }
        uint64_t i = a7;
        unint64_t v20 = v196;
      }
    }
    unint64_t v13 = a1[2].u64[0];
    uint64_t v15 = a1->i64[1];
    uint64_t v16 = a1[1].i64[0];
    unint64_t v14 = v13 >> 9;
    uint64_t v9 = a5;
  }
  uint64_t v131 = (char **)(v15 + 8 * v14);
  if (v16 == v15) {
    unint64_t v132 = 0;
  }
  else {
    unint64_t v132 = &(*v131)[8 * (v13 & 0x1FF)];
  }
  if (v12 <= v20)
  {
    long long v134 = v132;
    long long v135 = (char **)(v15 + 8 * v14);
    uint64_t v136 = (uint64_t)v9;
    if (!v12) {
      return;
    }
    goto LABEL_200;
  }
  if (v20 >= v12 >> 1)
  {
    uint64_t v133 = v12 - v20 + ((uint64_t)&v9[-*v10] >> 3);
    if (v133 >= 1)
    {
      v10 += (unint64_t)v133 >> 9;
      goto LABEL_185;
    }
    unint64_t v137 = 511 - v133;
    __int16 v138 = ~(_WORD)v137;
    v10 -= v137 >> 9;
  }
  else
  {
    if (!v20)
    {
      unint64_t v10 = v8;
      uint64_t v136 = (uint64_t)i;
      goto LABEL_190;
    }
    uint64_t v133 = ((uint64_t)&i[-*v8] >> 3) - v20;
    if (v133 >= 1)
    {
      unint64_t v10 = &v8[(unint64_t)v133 >> 9];
LABEL_185:
      uint64_t v136 = *v10 + 8 * (v133 & 0x1FF);
      goto LABEL_190;
    }
    unint64_t v139 = 511 - v133;
    __int16 v138 = ~(_WORD)v139;
    unint64_t v10 = &v8[-(v139 >> 9)];
  }
  uint64_t v136 = *v10 + 8 * (v138 & 0x1FF);
LABEL_190:
  if ((char *)v136 == v9)
  {
    long long v134 = v132;
    long long v135 = v131;
  }
  else
  {
    long long v140 = v10;
    uint64_t v141 = v136;
    long long v135 = v131;
    long long v134 = v132;
    do
    {
      if (v134 == *v135)
      {
        uint64_t v142 = (uint64_t)*--v135;
        long long v134 = (char *)(v142 + 4096);
      }
      if (v141 == *v140)
      {
        uint64_t v143 = *--v140;
        uint64_t v141 = v143 + 4096;
      }
      uint64_t v144 = *(void *)(v141 - 8);
      v141 -= 8;
      *((void *)v134 - 1) = v144;
      v134 -= 8;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_25B5F1300);
    }
    while ((char *)v141 != v9);
  }
  unint64_t v12 = v196;
  if (v196)
  {
LABEL_200:
    float32x2_t v193 = (unsigned char *)v136;
    float32x2_t v195 = i;
    long long v145 = sub_25B468CA0(v131, (uint64_t)v132, v12);
    long long v147 = v145;
    long long v148 = v146;
    if (v132 != v146)
    {
      long long v149 = (char **)v145;
      long long v150 = v146;
      do
      {
        if (v134 == *v135)
        {
          uint64_t v151 = (uint64_t)*--v135;
          long long v134 = (char *)(v151 + 4096);
        }
        if (v150 == *v149)
        {
          uint64_t v152 = (uint64_t)*--v149;
          long long v150 = (char *)(v152 + 4096);
        }
        uint64_t v153 = *((void *)v150 - 1);
        v150 -= 8;
        *((void *)v134 - 1) = v153;
        v134 -= 8;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_25B5F1300);
      }
      while (v150 != v132);
    }
    if (v12 < v196)
    {
      long long v154 = sub_25B468CA0(v131, (uint64_t)v132, v196);
      long long v156 = v155;
      if (v147 == v154)
      {
        v171 = v148;
        uint64_t v172 = v131;
        unint64_t v173 = v132;
      }
      else
      {
        long long v157 = v154;
        v197 = v155;
        uint64_t v159 = *v147;
        uint64_t v158 = v147 + 1;
        sub_25B468DB0(v199, v148, (unsigned char *)(v159 + 4096), v131, v132);
        for (long long j = *(_OWORD *)&v199[8]; v158 != v157; ++v158)
        {
          uint64_t v161 = 0;
          uint64_t v162 = *v158;
          v163 = (char *)*((void *)&j + 1);
          uint64_t v164 = (void *)j;
          unint64_t v165 = *(char **)j;
          while (1)
          {
            uint64_t v166 = v165 - v163 + 4096;
            if ((4096 - 8 * v161) >> 3 >= v166 >> 3) {
              uint64_t v167 = v166 >> 3;
            }
            else {
              uint64_t v167 = (4096 - 8 * v161) >> 3;
            }
            if (v167) {
              memmove(v163, (const void *)(v162 + 8 * v161), 8 * v167);
            }
            v161 += v167;
            if (v161 == 512) {
              break;
            }
            v168 = (char *)v164[1];
            ++v164;
            unint64_t v165 = v168;
            v163 = v168;
          }
          v169 = &v163[8 * v167];
          if ((char *)(*v164 + 4096) == v169)
          {
            v170 = (char *)v164[1];
            ++v164;
            v169 = v170;
          }
          *(void *)&long long j = v164;
          *((void *)&j + 1) = v169;
        }
        v171 = (char *)*v157;
        unint64_t v173 = (char *)*((void *)&j + 1);
        uint64_t v172 = (char **)j;
        long long v156 = v197;
      }
      sub_25B468DB0(v199, v171, v156, v172, v173);
      unint64_t v132 = *(char **)&v199[16];
      uint64_t v131 = *(char ***)&v199[8];
    }
    v174 = v193;
    v175 = v195;
    if (v10 == v8)
    {
      uint32x2_t v187 = v131;
      v188 = v132;
    }
    else
    {
      uint64_t v177 = *v10;
      v176 = v10 + 1;
      sub_25B468DB0(v199, v193, (unsigned char *)(v177 + 4096), v131, v132);
      uint64_t v178 = *(char ***)&v199[8];
      unint64_t v179 = *(char **)&v199[16];
      if (v176 != v8)
      {
        v180 = **(char ***)&v199[8];
        do
        {
          uint64_t v181 = 0;
          uint64_t v182 = *v176;
          while (1)
          {
            uint64_t v183 = v180 - v179 + 4096;
            if ((4096 - 8 * v181) >> 3 >= v183 >> 3) {
              uint64_t v184 = v183 >> 3;
            }
            else {
              uint64_t v184 = (4096 - 8 * v181) >> 3;
            }
            if (v184) {
              memmove(v179, (const void *)(v182 + 8 * v181), 8 * v184);
            }
            v181 += v184;
            if (v181 == 512) {
              break;
            }
            float32x2_t v185 = v178[1];
            ++v178;
            v180 = v185;
            unint64_t v179 = v185;
          }
          v179 += 8 * v184;
          v180 = *v178;
          if (*v178 + 4096 == v179)
          {
            float32x2_t v186 = v178[1];
            ++v178;
            v180 = v186;
            unint64_t v179 = v186;
          }
          ++v176;
        }
        while (v176 != v8);
      }
      v174 = (unsigned char *)*v8;
      v175 = v195;
      uint32x2_t v187 = v178;
      v188 = v179;
    }
    sub_25B468DB0(v199, v174, v175, v187, v188);
  }
}

void sub_25B467654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4676A4(void *a1, double a2)
{
  unint64_t v3 = sub_25B4666BC(a1, a2);
  if (v3)
  {
    sub_25B4667AC(a1, v3);
  }
}

void sub_25B4676F0(uint64_t **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  unint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      unint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          float32x2_t v11 = v10;
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        unint64_t v12 = v5;
        do
        {
          float32x2_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          unint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_25B3F9E58(v3, v5);
      operator delete(v5);
    }
  }
}

float32x2_t *sub_25B4677C8(float *a1, float32x2_t *a2, double a3)
{
  uint64_t v6 = 2654435769;
  unint64_t v7 = LODWORD(a3) + 2654435769;
  if (*(float *)&a3 == 0.0) {
    unint64_t v7 = 2654435769;
  }
  if (*((float *)&a3 + 1) != 0.0) {
    uint64_t v6 = HIDWORD(a3) + 2654435769;
  }
  unint64_t v8 = (v6 + (v7 << 6) + (v7 >> 2)) ^ v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v12 = *(float32x2_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (float32x2_t *)*i)
      {
        unint64_t v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          uint32x2_t v15 = (uint32x2_t)vceq_f32(i[2], *(float32x2_t *)&a3);
          if ((vpmin_u32(v15, v15).u32[0] & 0x80000000) != 0) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (float32x2_t *)operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = (float32x2_t)v8;
  i[2] = *a2;
  i[3] = 0;
  i[4] = 0;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          uint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unint64_t v25 = (void *)*((void *)a1 + 2);
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = a1 + 4;
            BOOL v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  BOOL v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                unint64_t v25 = v31;
                BOOL v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        unint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v33 = *(void **)a1;
  uint64_t v34 = *(float32x2_t ***)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *uint64_t i = (float32x2_t)*v34;
LABEL_76:
    *uint64_t v34 = i;
    goto LABEL_77;
  }
  *uint64_t i = *(float32x2_t *)(a1 + 4);
  *((void *)a1 + 2) = i;
  v33[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v35 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    uint64_t v34 = (float32x2_t **)(*(void *)a1 + 8 * v35);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return i;
}

void sub_25B467BE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B467BF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (8 * a3) >> 3;
  *(_OWORD *)a1 = 0u;
  if (!(8 * a3))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
LABEL_5:
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  sub_25B468788((void *)a1, (8 * a3) >> 3);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 32) + v7;
  uint64_t v6 = (void *)(v8 + 8 * (v9 >> 9));
  if (*(void *)(a1 + 16) == v8) {
    goto LABEL_5;
  }
  uint64_t v10 = *v6 + 8 * (v9 & 0x1FF);
LABEL_6:
  unint64_t v11 = sub_25B468CA0(v6, v10, v5);
  while (v10 != v12)
  {
    BOOL v13 = (void *)(v6 == v11 ? v12 : *v6 + 4096);
    if ((void *)v10 == v13)
    {
      BOOL v13 = (void *)v10;
    }
    else
    {
      unint64_t v14 = (void *)v10;
      do
      {
        uint64_t v15 = *a2++;
        *v14++ = v15;
      }
      while (v14 != v13);
      uint64_t v7 = *(void *)(a1 + 40);
    }
    v7 += ((uint64_t)v13 - v10) >> 3;
    *(void *)(a1 + 40) = v7;
    if (v6 == v11) {
      break;
    }
    uint64_t v16 = v6[1];
    ++v6;
    uint64_t v10 = v16;
  }
  return a1;
}

void sub_25B467D00(_Unwind_Exception *a1)
{
  sub_25B468738(v1);
  _Unwind_Resume(a1);
}

void *sub_25B467D14(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    sub_25B3FA70C();
  }
  return operator new(48 * a1);
}

uint64_t *sub_25B467D5C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v7 - 48) = 0uLL;
      *(_OWORD *)(v7 - 32) = 0uLL;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  float32x2_t *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B467E04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_25B467E54((void *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B467E54(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_25B468738((uint64_t)a1);
}

uint64_t **sub_25B467EFC(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

int64x2_t sub_25B467FC8(int64x2_t *a1, void *a2)
{
  unint64_t v4 = a1[2].u64[0];
  if (!v4)
  {
    uint64_t v5 = a1->i64[1];
    uint64_t v6 = a1[1].i64[0];
    uint64_t v7 = ((v6 - v5) << 6) - 1;
    if (v6 == v5) {
      uint64_t v7 = 0;
    }
    if ((unint64_t)(v7 - a1[2].i64[1]) < 0x200)
    {
      uint64_t v8 = a1[1].i64[1];
      uint64_t v9 = a1->i64[0];
      uint64_t v10 = v8 - a1->i64[0];
      if (v6 - v5 >= (unint64_t)v10)
      {
        if (v8 == v9) {
          unint64_t v11 = 1;
        }
        else {
          unint64_t v11 = v10 >> 2;
        }
        uint64_t v47 = &a1[1].i8[8];
        unint64_t v43 = (char *)sub_25B3FCAD4(v11);
        char v44 = v43;
        uint64_t v45 = v43;
        unint64_t v46 = &v43[8 * v12];
        char v42 = operator new(0x1000uLL);
        sub_25B468624(&v43, &v42);
        unint64_t v14 = (uint64_t *)a1->i64[1];
        BOOL v13 = (uint64_t *)a1[1].i64[0];
        uint64_t v15 = v45;
        while (v14 != v13)
        {
          if (v15 == v46)
          {
            float v17 = v43;
            uint64_t v16 = v44;
            if (v44 <= v43)
            {
              if (v15 == v43) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v15 - v43) >> 2;
              }
              uint64_t v24 = (char *)sub_25B3FCAD4(v23);
              uint64_t v27 = v15 - v16;
              BOOL v26 = v15 == v16;
              uint64_t v15 = &v24[8 * (v23 >> 2)];
              if (!v26)
              {
                uint64_t v15 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint8x8_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v16;
                  v16 += 8;
                  *(void *)uint8x8_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v43 = v24;
              char v44 = &v24[8 * (v23 >> 2)];
              uint64_t v45 = v15;
              unint64_t v46 = &v24[8 * v25];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              uint64_t v18 = (v44 - v43) >> 3;
              if (v18 >= -1) {
                uint64_t v19 = v18 + 1;
              }
              else {
                uint64_t v19 = v18 + 2;
              }
              unint64_t v20 = &v44[-8 * (v19 >> 1)];
              int64_t v21 = v15 - v44;
              if (v15 != v44)
              {
                memmove(&v44[-8 * (v19 >> 1)], v44, v15 - v44);
                uint64_t v15 = v16;
              }
              uint64_t v22 = &v15[-8 * (v19 >> 1)];
              uint64_t v15 = &v20[v21];
              char v44 = v22;
              uint64_t v45 = &v20[v21];
            }
          }
          uint64_t v31 = *v14++;
          *(void *)uint64_t v15 = v31;
          uint64_t v15 = v45 + 8;
          v45 += 8;
          BOOL v13 = (uint64_t *)a1[1].i64[0];
        }
        unint64_t v32 = (void *)a1->i64[0];
        unint64_t v33 = v44;
        a1->i64[0] = (uint64_t)v43;
        a1->i64[1] = (uint64_t)v33;
        uint64_t v34 = (uint64_t)v46;
        a1[1].i64[0] = (uint64_t)v15;
        a1[1].i64[1] = v34;
        if (v15 - v33 == 8) {
          uint64_t v35 = 256;
        }
        else {
          uint64_t v35 = a1[2].i64[0] + 512;
        }
        a1[2].i64[0] = v35;
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        if (v5 == v9)
        {
          unint64_t v43 = (char *)operator new(0x1000uLL);
          sub_25B468624(a1, &v43);
          uint64_t v36 = a1[1].i64[0];
          unint64_t v43 = *(char **)(v36 - 8);
          a1[1].i64[0] = v36 - 8;
        }
        else
        {
          unint64_t v43 = (char *)operator new(0x1000uLL);
        }
        sub_25B46850C((uint64_t)a1, &v43);
        if (a1[1].i64[0] - a1->i64[1] == 8) {
          uint64_t v37 = 256;
        }
        else {
          uint64_t v37 = a1[2].i64[0] + 512;
        }
        a1[2].i64[0] = v37;
      }
    }
    else
    {
      a1[2].i64[0] = 512;
      unint64_t v43 = *(char **)(v6 - 8);
      a1[1].i64[0] = v6 - 8;
      sub_25B46850C((uint64_t)a1, &v43);
    }
    unint64_t v4 = a1[2].u64[0];
  }
  uint64_t v38 = a1->i64[1];
  uint64_t v39 = (void *)(v38 + 8 * (v4 >> 9));
  uint64_t v40 = *v39 + 8 * (v4 & 0x1FF);
  if (a1[1].i64[0] == v38) {
    uint64_t v40 = 0;
  }
  if (v40 == *v39) {
    uint64_t v40 = *(v39 - 1) + 4096;
  }
  *(void *)(v40 - 8) = *a2;
  int64x2_t result = vaddq_s64(a1[2], (int64x2_t)xmmword_25B5F1300);
  a1[2] = result;
  return result;
}

void sub_25B4682AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_25B4682D8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_25B467E54((void *)(v4 - 48));
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_25B46835C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a3 + 24);
  if (v4 != v5)
  {
    uint64_t v6 = *(char **)(a3 + 16);
    uint64_t v7 = *(char **)(a2 + 16);
    uint64_t v8 = ((v4 - *(void *)v7) >> 3) + ((v7 - v6) << 6);
    uint64_t v9 = v5 - *(void *)v6;
    if (v8 != v9 >> 3)
    {
      sub_25B40040C(a1, v8 - (v9 >> 3));
      uint64_t v10 = (void *)a1[1];
      uint64_t v11 = *(void *)v7;
      do
      {
        uint64_t v12 = v4;
        if (v4 == v11) {
          uint64_t v12 = *((void *)v7 - 1) + 4096;
        }
        *uint64_t v10 = *(void *)(v12 - 8);
        uint64_t v11 = *(void *)v7;
        if (v4 == *(void *)v7)
        {
          uint64_t v13 = *((void *)v7 - 1);
          v7 -= 8;
          uint64_t v11 = v13;
          uint64_t v4 = v13 + 4096;
        }
        v4 -= 8;
        ++v10;
      }
      while (v4 != v5);
      a1[1] = v10;
    }
  }
  return a1;
}

void sub_25B468428(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B468444(void *a1, void *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    uint64_t v9 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - (char *)a2) << 6);
    uint64_t v10 = (uint64_t)a3 - *a2;
    if (v9 != v10 >> 3)
    {
      sub_25B40040C(a1, v9 - (v10 >> 3));
      uint64_t v11 = (void *)a1[1];
      do
      {
        uint64_t v12 = *v7++;
        void *v11 = v12;
        if ((uint64_t *)((char *)v7 - *v8) == (uint64_t *)4096)
        {
          uint64_t v13 = (uint64_t *)v8[1];
          ++v8;
          uint64_t v7 = v13;
        }
        ++v11;
      }
      while (v7 != a5);
      a1[1] = v11;
    }
  }
  return a1;
}

void sub_25B4684F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B46850C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_25B3FCAD4(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      int64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_25B468624(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_25B3FCAD4(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        unint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)unint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

uint64_t sub_25B468738(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B468788(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint8x8_t v29 = (char *)sub_25B3FCAD4(v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          unint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v9 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          sub_25B468624(a1, &v85);
          if (!--v9) {
            goto LABEL_73;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          sub_25B46850C((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8) {
            uint64_t v60 = 511;
          }
          else {
            uint64_t v60 = 512;
          }
          uint64_t v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 += v9;
      }
      else
      {
LABEL_73:
        uint64_t v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 9);
      if (v8)
      {
        uint64_t v62 = (char *)a1[2];
        do
        {
          uint64_t v63 = (void *)a1[1];
          uint64_t v66 = *v63;
          uint64_t v64 = (char *)(v63 + 1);
          uint64_t v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            uint64_t v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1) {
                unint64_t v74 = 1;
              }
              else {
                unint64_t v74 = (uint64_t)&v62[-*a1] >> 2;
              }
              float32x2_t v75 = (char *)sub_25B3FCAD4(v74);
              uint64_t v77 = &v75[8 * (v74 >> 2)];
              uint64_t v78 = (uint64_t *)a1[1];
              uint64_t v62 = v77;
              uint64_t v79 = a1[2] - (void)v78;
              if (v79)
              {
                uint64_t v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v80 = 8 * (v79 >> 3);
                uint64_t v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  uint64_t v82 = *v78++;
                  *(void *)uint64_t v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              uint64_t v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                uint64_t v62 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v68 = v67 >> 3;
              BOOL v22 = v67 >> 3 < -1;
              uint64_t v69 = (v67 >> 3) + 2;
              if (v22) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = v68 + 1;
              }
              uint64_t v71 = &v64[-8 * (v70 >> 1)];
              int64_t v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                uint64_t v62 = (char *)a1[1];
              }
              char v73 = &v62[-8 * (v70 >> 1)];
              uint64_t v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(void *)uint64_t v62 = v65;
          uint64_t v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        uint64_t v13 = (char *)(v9 + v11);
      }
      else {
        uint64_t v13 = (char *)v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v87 = a1 + 3;
      if (v13) {
        uint64_t v13 = (char *)sub_25B3FCAD4((unint64_t)v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = &v13[8 * v14];
      *(void *)&long long v86 = *((void *)&v85 + 1);
      *((void *)&v86 + 1) = &v13[8 * v15];
      do
      {
        uint64_t v84 = operator new(0x1000uLL);
        sub_25B468624(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            uint64_t v41 = (char *)*((void *)&v85 + 1);
            char v42 = (void *)v85;
            if (*((void *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (uint64_t)&v40[-v85] >> 2;
              }
              unint64_t v49 = (char *)sub_25B3FCAD4(v48);
              uint64_t v52 = v40 - v41;
              BOOL v51 = v40 == v41;
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *(void *)v41;
                  v41 += 8;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(void *)&long long v85 = v49;
              *((void *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(void *)&long long v86 = v40;
              *((void *)&v86 + 1) = &v49[8 * v50];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1) {
                uint64_t v44 = v43 + 1;
              }
              else {
                uint64_t v44 = v43 + 2;
              }
              uint64_t v45 = *((void *)&v85 + 1) - 8 * (v44 >> 1);
              unint64_t v46 = &v40[-*((void *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((void *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((void *)&v85 + 1)]);
                uint64_t v40 = v41;
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v46[v45];
              *((void *)&v85 + 1) = v47;
              *(void *)&long long v86 = &v46[v45];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v86 + 8);
          *(void *)&long long v86 = v86 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (long long j = (void *)a1[2]; j != (void *)a1[1]; sub_25B46850C((uint64_t)&v85, j))
        --j;
      v57 = (char *)*a1;
      long long v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57) {
        operator delete(v57);
      }
    }
  }
}

void sub_25B468C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25B468CA0(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1) {
      result -= (unint64_t)(511 - v3) >> 9;
    }
    else {
      result += (unint64_t)v3 >> 9;
    }
  }
  return result;
}

void *sub_25B468CF4(void *result, char *a2, char *a3, void *a4, char *a5)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (a2 == a3)
  {
    unint64_t v9 = a2;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 3;
      }
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13) {
        int64x2_t result = memmove(a5, v11, 8 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void *sub_25B468DB0(void *result, unsigned char *__src, unsigned char *a3, void *a4, char *__dst)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      if ((a3 - v9) >> 3 >= v11 >> 3) {
        uint64_t v12 = v11 >> 3;
      }
      else {
        uint64_t v12 = (a3 - v9) >> 3;
      }
      if (v12) {
        int64x2_t result = memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)v6[1];
      ++v6;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)(*v6 + 4096) == __dst)
    {
      uint64_t v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  void *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void sub_25B468E64(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)unint64_t v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint8x8_t v29 = (char *)sub_25B3FCAD4(v28);
      uint64_t v30 = &v29[8 * (v28 >> 2)];
      unint64_t v32 = &v29[8 * v31];
      uint64_t v33 = (uint64_t *)a1[1];
      unint64_t v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        unint64_t v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        uint64_t v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)uint64_t v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    unint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0x1000uLL);
      sub_25B468624(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0x1000uLL);
    sub_25B46850C((uint64_t)a1, &v49);
    uint64_t v39 = (void *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    unint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint8x8_t v29 = (char *)sub_25B3FCAD4(v41);
      uint64_t v30 = &v29[8 * (v41 >> 2)];
      unint64_t v32 = &v29[8 * v42];
      uint64_t v43 = (uint64_t *)a1[1];
      unint64_t v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        unint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      uint64_t v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        unint64_t v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  BOOL v51 = a1 + 3;
  *(void *)&long long v49 = sub_25B3FCAD4(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  unint64_t v48 = operator new(0x1000uLL);
  sub_25B468624(&v49, &v48);
  for (uint64_t i = (void *)a1[2]; i != (void *)a1[1]; sub_25B46850C((uint64_t)&v49, i))
    --i;
  int64_t v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void sub_25B4690EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_25B469118(char a1, void *__p)
{
  if (a1)
  {
    __p[3] = &unk_2708F21F8;
    BOOL v3 = (std::__shared_weak_count *)__p[19];
    if (v3) {
      sub_25B404120(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

char *sub_25B469194(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_25B40040C(v7, v11);
    uint64_t v13 = (char *)v7[1];
    BOOL v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    int64x2_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    int64x2_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *BOOL v12 = &v9[v17];
  return result;
}

void sub_25B46929C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 4);
        v6 -= 32;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 3) = v7;
          operator delete(v7);
        }
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_25B46932C(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    BOOL v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_25B403F44((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v15 = v13 + 16;
  uint64_t v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v15, *(void **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)unint64_t v15 = v17;
  }
  *((void *)v13 + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_25B3FA4B0(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t v13 = *v25;
LABEL_41:
    void *v25 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_25B46956C(_Unwind_Exception *a1)
{
  sub_25B403FE8(0, v1);
  _Unwind_Resume(a1);
}

void sub_25B469590(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float v19 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    float v19 = &v4[16 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 60) {
    sub_25B3FBC4C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)sub_25B3FFAEC(v10);
  BOOL v12 = &v11[16 * v5];
  unint64_t v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  unint64_t v15 = &v12[16 * v6];
  long long v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      long long v18 = *((_OWORD *)v16 - 1);
      v16 -= 16;
      *((_OWORD *)v12 - 1) = v18;
      v12 -= 16;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void sub_25B46969C(void *a1)
{
  sub_25B4696D4(a1);

  JUMPOUT(0x261163EE0);
}

void *sub_25B4696D4(void *a1)
{
  *a1 = &unk_2708F1468;
  unint64_t v3 = (char *)a1[2];
  uint64_t v2 = a1[3];
  if ((char *)v2 != v3)
  {
    do
    {
      v2 -= 144;
      sub_25B469774(v2);
    }
    while ((char *)v2 != v3);
    uint64_t v2 = a1[2];
  }
  a1[3] = v3;
  if (v2)
  {
    if (v3 != (char *)v2)
    {
      do
      {
        v3 -= 144;
        sub_25B469774((uint64_t)v3);
      }
      while (v3 != (char *)v2);
      unint64_t v3 = (char *)a1[2];
    }
    a1[3] = v2;
    operator delete(v3);
  }
  return a1;
}

void sub_25B469774(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  unint64_t v3 = *(void **)a1;
}

void sub_25B4697C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a3;
  unint64_t v5 = (uint64_t *)operator new(8uLL);
  unint64_t v6 = v5;
  uint64_t v7 = 0;
  if ((int)v4 >= 0) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = (int)v4 + 2;
  }
  uint64_t *v5 = v8;
  uint64_t v9 = (void *)MEMORY[0x263F8C0F8];
  unint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
  v214 = v5;
  do
  {
    if ((unint64_t)v6[v7] >= 2)
    {
      sub_25B406B20(v9, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../common/reduce_helper.hpp", 118);
      sub_25B406B20(v9, (uint64_t)" ", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      sub_25B406B20(v11, (uint64_t)" ", 1);
      sub_25B406B20(v11, (uint64_t)"format_reduce_axes", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      BOOL v12 = std::locale::use_facet(__b, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(__b);
      unint64_t v6 = v214;
      std::ostream::put();
      std::ostream::flush();
      sub_25B408160("err", "reduce axis larger than dim-1");
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v13 = std::locale::use_facet(__b, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(__b);
      std::ostream::put();
      std::ostream::flush();
    }
    ++v7;
  }
  while (!v7);
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v222 = 0;
  v223 = 0;
  unint64_t v224 = 0;
  char v18 = 1;
  do
  {
    char v19 = v18;
    if (*v214 == v17)
    {
      if ((unint64_t)v16 < v15)
      {
        uint64_t v20 = 1;
LABEL_14:
        *(void *)uint64_t v16 = v20;
        unint64_t v21 = v16 + 8;
        goto LABEL_42;
      }
      uint64_t v22 = (v16 - v14) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
      {
        unint64_t v224 = v15;
        v222 = v14;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v15 - (void)v14) >> 2 > v23) {
        unint64_t v23 = (uint64_t)(v15 - (void)v14) >> 2;
      }
      if (v15 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v28 = (char *)(v24 + 8 * v22);
      *(void *)unint64_t v28 = 1;
      unint64_t v21 = v28 + 8;
      while (v16 != v14)
      {
        uint64_t v29 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v28 - 1) = v29;
        v28 -= 8;
      }
    }
    else
    {
      if ((unint64_t)v16 < v15)
      {
        uint64_t v20 = *(void *)(a2 + 8 * v17);
        goto LABEL_14;
      }
      uint64_t v26 = (v16 - v14) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
      {
        unint64_t v224 = v15;
        v222 = v14;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v15 - (void)v14) >> 2 > v27) {
        unint64_t v27 = (uint64_t)(v15 - (void)v14) >> 2;
      }
      if (v15 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v27;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v28 = (char *)(v24 + 8 * v26);
      *(void *)unint64_t v28 = *(void *)(a2 + 8 * v17);
      unint64_t v21 = v28 + 8;
      while (v16 != v14)
      {
        uint64_t v30 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v28 - 1) = v30;
        v28 -= 8;
      }
    }
    unint64_t v15 = v24 + 8 * v25;
    v223 = v21;
    if (v14) {
      operator delete(v14);
    }
    unint64_t v14 = v28;
LABEL_42:
    char v18 = 0;
    v223 = v21;
    uint64_t v16 = v21;
    uint64_t v17 = 1;
  }
  while ((v19 & 1) != 0);
  unint64_t v224 = v15;
  v222 = v14;
  sub_25B40826C(__b, &v222);
  long long v219 = 0u;
  long long v220 = 0u;
  v218[0] = __b[1];
  v218[1] = 1;
  sub_25B4583CC((uint64_t)v215, __b);
  uint64_t v31 = *v214;
  uint64_t v206 = *v214;
  if (*v214 == 1)
  {
    uint64_t v32 = 1;
  }
  else
  {
    uint64_t v32 = *v214;
    if (!v31)
    {
      uint64_t v209 = 0;
      __p = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      uint64_t v64 = 0;
      uint64_t v63 = 1;
      uint64_t v38 = 1;
      char v62 = 1;
      goto LABEL_107;
    }
  }
  uint64_t v209 = v32;
  __p = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  unint64_t v211 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 1;
  while (2)
  {
    uint64_t v39 = *(void *)(a2 + 8 * v37);
    if ((unint64_t)v33 >= v34)
    {
      uint64_t v40 = (v33 - __p) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        goto LABEL_285;
      }
      if ((uint64_t)(v34 - (void)__p) >> 2 > v41) {
        unint64_t v41 = (uint64_t)(v34 - (void)__p) >> 2;
      }
      if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        unint64_t v42 = (unint64_t)sub_25B3FCAD4(v42);
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v44 = (char *)(v42 + 8 * v40);
      *(void *)uint64_t v44 = *(void *)(a2 + 8 * v37);
      uint64_t v45 = v44 + 8;
      if (v33 == __p)
      {
        unint64_t v46 = __p;
      }
      else
      {
        unint64_t v46 = __p;
        do
        {
          uint64_t v47 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v44 - 1) = v47;
          v44 -= 8;
        }
        while (v33 != __p);
      }
      unint64_t v34 = v42 + 8 * v43;
      if (v46)
      {
        unint64_t v48 = v42 + 8 * v43;
        operator delete(v46);
        unint64_t v34 = v48;
      }
      __p = v44;
      uint64_t v33 = v45;
    }
    else
    {
      *(void *)uint64_t v33 = v39;
      v33 += 8;
    }
    if (*v214 == v37)
    {
      if ((unint64_t)v35 < v36)
      {
        *(void *)uint64_t v35 = 0;
        long long v49 = v35 + 8;
        goto LABEL_71;
      }
      uint64_t v207 = v39;
      uint64_t v51 = (v35 - v211) >> 3;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      unint64_t v53 = v34;
      if ((uint64_t)(v36 - (void)v211) >> 2 > v52) {
        unint64_t v52 = (uint64_t)(v36 - (void)v211) >> 2;
      }
      if (v36 - (unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54) {
        unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
      }
      else {
        uint64_t v55 = 0;
      }
      long long v58 = (char *)(v54 + 8 * v51);
      *(void *)long long v58 = 0;
      long long v50 = v58 + 8;
      if (v35 != v211)
      {
        float v59 = v211;
        do
        {
          uint64_t v60 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v58 - 1) = v60;
          v58 -= 8;
        }
        while (v35 != v211);
        goto LABEL_99;
      }
LABEL_98:
      float v59 = v211;
      goto LABEL_99;
    }
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v207 = v39;
      uint64_t v56 = (v35 - v211) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
LABEL_285:
      }
        sub_25B3FBC4C();
      unint64_t v53 = v34;
      if ((uint64_t)(v36 - (void)v211) >> 2 > v57) {
        unint64_t v57 = (uint64_t)(v36 - (void)v211) >> 2;
      }
      if (v36 - (unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v57;
      }
      if (v54) {
        unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
      }
      else {
        uint64_t v55 = 0;
      }
      long long v58 = (char *)(v54 + 8 * v56);
      *(void *)long long v58 = v218[v37];
      long long v50 = v58 + 8;
      if (v35 == v211) {
        goto LABEL_98;
      }
      float v59 = v211;
      do
      {
        uint64_t v61 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v58 - 1) = v61;
        v58 -= 8;
      }
      while (v35 != v211);
LABEL_99:
      unint64_t v36 = v54 + 8 * v55;
      if (v59) {
        operator delete(v59);
      }
      unint64_t v211 = v58;
      unint64_t v34 = v53;
      uint64_t v39 = v207;
    }
    else
    {
      *(void *)uint64_t v35 = v218[v37];
      long long v49 = v35 + 8;
LABEL_71:
      long long v50 = v49;
    }
    v38 *= v39;
    ++v37;
    uint64_t v35 = v50;
    if (v37 != v209) {
      continue;
    }
    break;
  }
  char v62 = 0;
  if ((unint64_t)(v209 + 1) > 1)
  {
    uint64_t v65 = 1;
    uint64_t v31 = v206;
    uint64_t v64 = v211;
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v31 = v206;
    uint64_t v64 = v211;
LABEL_107:
    uint64_t v66 = 8 * v63;
    uint64_t v65 = 1;
    do
    {
      v65 *= *(void *)(a2 + v66);
      v66 += 8;
    }
    while (v66 != 16);
  }
  if (v31 == 1) {
    uint64_t v67 = *(void *)(a2 + 8 * v209);
  }
  else {
    uint64_t v67 = 1;
  }
  uint64_t v68 = v217;
  if (v31 == 1) {
    unint64_t v69 = v38;
  }
  else {
    unint64_t v69 = *(void *)(a2 + 8 * v209);
  }
  memset(&v226[1], 0, 32);
  if (v31 == 1) {
    uint64_t v70 = 1;
  }
  else {
    uint64_t v70 = v38;
  }
  v226[0] = 0uLL;
  memset(v225, 0, sizeof(v225));
  if (v62)
  {
    if ((unint64_t)v33 < v34)
    {
      uint64_t v71 = 0;
      int v72 = 0;
      *(void *)uint64_t v33 = 0;
      uint64_t v73 = a1;
      uint64_t v74 = v209;
      goto LABEL_156;
    }
    v213 = v64;
    uint64_t v203 = v70;
    uint64_t v74 = v209;
    uint64_t v85 = (v33 - __p) >> 3;
    unint64_t v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v87 = v217;
    if ((uint64_t)(v34 - (void)__p) >> 2 > v86) {
      unint64_t v86 = (uint64_t)(v34 - (void)__p) >> 2;
    }
    if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v88 = v86;
    }
    if (v88) {
      unint64_t v88 = (unint64_t)sub_25B3FCAD4(v88);
    }
    uint64_t v89 = (char *)(v88 + 8 * v85);
    *(void *)uint64_t v89 = 0;
    if (v33 == __p)
    {
      uint64_t v90 = __p;
      if (__p) {
        goto LABEL_154;
      }
    }
    else
    {
      uint64_t v90 = __p;
      do
      {
        uint64_t v91 = *((void *)v33 - 1);
        v33 -= 8;
        *((void *)v89 - 1) = v91;
        v89 -= 8;
      }
      while (v33 != __p);
      if (__p) {
LABEL_154:
      }
        operator delete(v90);
    }
    uint64_t v71 = 0;
    int v72 = 0;
    __p = v89;
    uint64_t v73 = a1;
    uint64_t v31 = v206;
    uint64_t v68 = v87;
    uint64_t v70 = v203;
    uint64_t v64 = v213;
  }
  else
  {
    unint64_t v212 = v64;
    uint64_t v202 = v70;
    unint64_t v200 = v217;
    char v201 = v62;
    v208 = 0;
    float32x2_t v75 = 0;
    unint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v74 = v209;
    do
    {
      if (*v214 != v78)
      {
        if ((unint64_t)v77 >= v76)
        {
          uint64_t v79 = (v77 - v208) >> 3;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v76 - (void)v208) >> 2 > v80) {
            unint64_t v80 = (uint64_t)(v76 - (void)v208) >> 2;
          }
          if (v76 - (unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81)
          {
            unint64_t v81 = (unint64_t)sub_25B3FCAD4(v81);
            uint64_t v77 = v75;
          }
          else
          {
            uint64_t v82 = 0;
          }
          uint64_t v83 = (char *)(v81 + 8 * v79);
          *(void *)uint64_t v83 = v78;
          float32x2_t v75 = v83 + 8;
          while (v77 != v208)
          {
            uint64_t v84 = *((void *)v77 - 1);
            v77 -= 8;
            *((void *)v83 - 1) = v84;
            v83 -= 8;
          }
          unint64_t v76 = v81 + 8 * v82;
          if (v208) {
            operator delete(v208);
          }
          v208 = v83;
          uint64_t v77 = v75;
          uint64_t v74 = v209;
        }
        else
        {
          *(void *)uint64_t v77 = v78;
          v77 += 8;
          float32x2_t v75 = v77;
        }
      }
      ++v78;
    }
    while (v78 != v74);
    uint64_t v73 = a1;
    uint64_t v31 = v206;
    char v62 = v201;
    uint64_t v68 = v200;
    uint64_t v71 = v208;
    uint64_t v70 = v202;
    uint64_t v64 = v212;
    int v72 = v209 - 1;
  }
LABEL_156:
  unint64_t v92 = v65 * v67;
  if (v31 == 1)
  {
    uint64_t v93 = __p;
    if (*(unsigned char *)(a2 + 184))
    {
      if (v69)
      {
        uint64_t v94 = 0;
        uint64_t v95 = 0;
        unint64_t v96 = 0;
        uint64_t v97 = *(void *)(a2 + 192);
        uint64_t v98 = (float *)(v97 + 4);
        if (v92 <= 1) {
          uint64_t v99 = 1;
        }
        else {
          uint64_t v99 = v65 * v67;
        }
        uint64_t v100 = 4 * v99;
        BOOL v101 = 1;
        uint64_t v102 = v68;
        while (1)
        {
          float v103 = *(float *)(v97 + 4 * v95) * *(float *)(v97 + 4 * v95);
          if (v92 < 2) {
            break;
          }
          unint64_t v104 = v92 - 1;
          unint64_t v105 = v98;
          do
          {
            float v106 = *v105++;
            float v103 = v103 + (float)(v106 * v106);
            --v104;
          }
          while (v104);
          v95 += v92;
          if (!v101) {
            goto LABEL_169;
          }
LABEL_170:
          *uint64_t v102 = v103;
          uint64_t v107 = v72;
          do
          {
            uint64_t v108 = *((void *)v226 + v107) + 1;
            *((void *)v226 + v107) = v108;
            if (v108 != *(void *)&__p[8 * v107]) {
              break;
            }
            *((void *)v226 + v107) = 0;
            BOOL v109 = v107-- <= 0;
          }
          while (!v109);
          if (v62)
          {
            BOOL v101 = 0;
            unint64_t v110 = 0;
          }
          else
          {
            unint64_t v110 = 0;
            uint64_t v111 = (uint64_t *)v226;
            uint64_t v112 = v64;
            uint64_t v113 = v74;
            do
            {
              uint64_t v115 = *v111++;
              uint64_t v114 = v115;
              uint64_t v116 = *(void *)v112;
              v112 += 8;
              v110 += v116 * v114;
              --v113;
            }
            while (v113);
            BOOL v101 = v110 > v96;
            if (v110 > v96) {
              unint64_t v96 = v110;
            }
          }
          uint64_t v102 = &v68[v110];
          ++v94;
          uint64_t v98 = (float *)((char *)v98 + v100);
          if (v94 == v69) {
            goto LABEL_272;
          }
        }
        ++v95;
        if (v101) {
          goto LABEL_170;
        }
LABEL_169:
        float v103 = v103 + *v102;
        goto LABEL_170;
      }
    }
    else if (v69)
    {
      uint64_t v141 = 0;
      unint64_t v142 = 0;
      uint64_t v143 = *(void *)(a2 + 104);
      uint64_t v144 = *(void *)(a2 + 112);
      BOOL v145 = 1;
      uint64_t v146 = *(void *)(a2 + 192);
      long long v147 = v68;
      do
      {
        float v148 = *(float *)(v146 + 4 * (v143 * *(void *)&v225[0] + v144 * *((void *)&v225[0] + 1)));
        float v149 = v148 * v148;
        for (uint64_t i = 8; i != -8; i -= 8)
        {
          uint64_t v151 = *(void *)((char *)v225 + i) + 1;
          *(void *)((char *)v225 + i) = v151;
          if (v151 != *(void *)(a2 + i)) {
            break;
          }
          *(void *)((char *)v225 + i) = 0;
        }
        if (v92 >= 2)
        {
          for (uint64_t j = 1; j != v92; ++j)
          {
            float v153 = *(float *)(v146 + 4 * (v143 * *(void *)&v225[0] + v144 * *((void *)&v225[0] + 1)));
            float v149 = v149 + (float)(v153 * v153);
            for (uint64_t k = 8; k != -8; k -= 8)
            {
              uint64_t v155 = *(void *)((char *)v225 + k) + 1;
              *(void *)((char *)v225 + k) = v155;
              if (v155 != *(void *)(a2 + k)) {
                break;
              }
              *(void *)((char *)v225 + k) = 0;
            }
          }
        }
        if (!v145) {
          float v149 = v149 + *v147;
        }
        *long long v147 = v149;
        uint64_t v156 = v72;
        do
        {
          uint64_t v157 = *((void *)v226 + v156) + 1;
          *((void *)v226 + v156) = v157;
          if (v157 != *(void *)&__p[8 * v156]) {
            break;
          }
          *((void *)v226 + v156) = 0;
          BOOL v109 = v156-- <= 0;
        }
        while (!v109);
        if (v62)
        {
          BOOL v145 = 0;
          unint64_t v158 = 0;
        }
        else
        {
          unint64_t v158 = 0;
          uint64_t v159 = (uint64_t *)v226;
          uint64_t v160 = v64;
          uint64_t v161 = v74;
          do
          {
            uint64_t v163 = *v159++;
            uint64_t v162 = v163;
            uint64_t v164 = *(void *)v160;
            v160 += 8;
            v158 += v164 * v162;
            --v161;
          }
          while (v161);
          BOOL v145 = v158 > v142;
          if (v158 > v142) {
            unint64_t v142 = v158;
          }
        }
        long long v147 = &v68[v158];
        ++v141;
      }
      while (v141 != v69);
    }
  }
  else
  {
    uint64_t v93 = __p;
    if (*(unsigned char *)(a2 + 184))
    {
      if (v70)
      {
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        unint64_t v119 = 0;
        BOOL v120 = 1;
        unint64_t v121 = v68;
        do
        {
          if (v120)
          {
            if (v92)
            {
              uint64_t v122 = *(void *)(a2 + 192);
              uint64_t v123 = v121;
              uint64_t v124 = v65 * v67;
              do
              {
                *v123++ = *(float *)(v122 + 4 * v118) * *(float *)(v122 + 4 * v118);
                ++v118;
                --v124;
              }
              while (v124);
            }
          }
          else if (v92)
          {
            uint64_t v125 = *(void *)(a2 + 192);
            uint64_t v126 = v121;
            uint64_t v127 = v65 * v67;
            do
            {
              *uint64_t v126 = *v126 + (float)(*(float *)(v125 + 4 * v118) * *(float *)(v125 + 4 * v118));
              ++v126;
              ++v118;
              --v127;
            }
            while (v127);
          }
          if (v69 >= 2)
          {
            for (uint64_t m = 1; m != v69; ++m)
            {
              if (v92)
              {
                uint64_t v129 = *(void *)(a2 + 192);
                uint64_t v130 = v121;
                uint64_t v131 = v65 * v67;
                do
                {
                  *uint64_t v130 = *v130 + (float)(*(float *)(v129 + 4 * v118) * *(float *)(v129 + 4 * v118));
                  ++v130;
                  ++v118;
                  --v131;
                }
                while (v131);
              }
            }
          }
          uint64_t v132 = v72;
          do
          {
            uint64_t v133 = *((void *)v226 + v132) + 1;
            *((void *)v226 + v132) = v133;
            if (v133 != *(void *)&__p[8 * v132]) {
              break;
            }
            *((void *)v226 + v132) = 0;
            BOOL v109 = v132-- <= 0;
          }
          while (!v109);
          if (v62)
          {
            BOOL v120 = 0;
            unint64_t v134 = 0;
          }
          else
          {
            unint64_t v134 = 0;
            long long v135 = (uint64_t *)v226;
            uint64_t v136 = v64;
            uint64_t v137 = v74;
            do
            {
              uint64_t v139 = *v135++;
              uint64_t v138 = v139;
              uint64_t v140 = *(void *)v136;
              v136 += 8;
              v134 += v140 * v138;
              --v137;
            }
            while (v137);
            BOOL v120 = v134 > v119;
            if (v134 > v119) {
              unint64_t v119 = v134;
            }
          }
          unint64_t v121 = &v68[v134];
          ++v117;
        }
        while (v117 != v70);
      }
    }
    else if (v70)
    {
      uint64_t v165 = 0;
      unint64_t v166 = 0;
      BOOL v167 = 1;
      v168 = v68;
      do
      {
        if (v167)
        {
          if (v92)
          {
            uint64_t v169 = 0;
            uint64_t v170 = *(void *)(a2 + 104);
            uint64_t v171 = *(void *)(a2 + 112);
            uint64_t v172 = *(void *)(a2 + 192);
            do
            {
              float v173 = *(float *)(v172 + 4 * (v170 * *(void *)&v225[0] + v171 * *((void *)&v225[0] + 1)));
              v168[v169] = v173 * v173;
              for (uint64_t n = 8; n != -8; n -= 8)
              {
                uint64_t v175 = *(void *)((char *)v225 + n) + 1;
                *(void *)((char *)v225 + n) = v175;
                if (v175 != *(void *)(a2 + n)) {
                  break;
                }
                *(void *)((char *)v225 + n) = 0;
              }
              ++v169;
            }
            while (v169 != v92);
          }
        }
        else if (v92)
        {
          uint64_t v176 = 0;
          uint64_t v177 = *(void *)(a2 + 104);
          uint64_t v178 = *(void *)(a2 + 112);
          uint64_t v179 = *(void *)(a2 + 192);
          do
          {
            float v180 = *(float *)(v179 + 4 * (v177 * *(void *)&v225[0] + v178 * *((void *)&v225[0] + 1)));
            v168[v176] = v168[v176] + (float)(v180 * v180);
            for (iuint64_t i = 8; ii != -8; ii -= 8)
            {
              uint64_t v182 = *(void *)((char *)v225 + ii) + 1;
              *(void *)((char *)v225 + ii) = v182;
              if (v182 != *(void *)(a2 + ii)) {
                break;
              }
              *(void *)((char *)v225 + ii) = 0;
            }
            ++v176;
          }
          while (v176 != v92);
        }
        uint64_t v183 = v72;
        if (v69 >= 2)
        {
          for (juint64_t j = 1; jj != v69; ++jj)
          {
            if (v92)
            {
              uint64_t v185 = 0;
              uint64_t v187 = *(void *)(a2 + 104);
              uint64_t v186 = *(void *)(a2 + 112);
              uint64_t v188 = *(void *)(a2 + 192);
              do
              {
                float v189 = *(float *)(v188 + 4 * (v187 * *(void *)&v225[0] + v186 * *((void *)&v225[0] + 1)));
                v168[v185] = v168[v185] + (float)(v189 * v189);
                for (kuint64_t k = 8; kk != -8; kk -= 8)
                {
                  uint64_t v191 = *(void *)((char *)v225 + kk) + 1;
                  *(void *)((char *)v225 + kk) = v191;
                  if (v191 != *(void *)(a2 + kk)) {
                    break;
                  }
                  *(void *)((char *)v225 + kk) = 0;
                }
                ++v185;
              }
              while (v185 != v92);
            }
          }
          uint64_t v183 = v72;
        }
        do
        {
          uint64_t v192 = *((void *)v226 + v183) + 1;
          *((void *)v226 + v183) = v192;
          if (v192 != *(void *)&__p[8 * v183]) {
            break;
          }
          *((void *)v226 + v183) = 0;
          BOOL v109 = v183-- <= 0;
        }
        while (!v109);
        if (v62)
        {
          BOOL v167 = 0;
          unint64_t v193 = 0;
        }
        else
        {
          unint64_t v193 = 0;
          unint64_t v194 = (uint64_t *)v226;
          float32x2_t v195 = v64;
          uint64_t v196 = v74;
          do
          {
            uint64_t v198 = *v194++;
            uint64_t v197 = v198;
            uint64_t v199 = *(void *)v195;
            v195 += 8;
            v193 += v199 * v197;
            --v196;
          }
          while (v196);
          BOOL v167 = v193 > v166;
          if (v193 > v166) {
            unint64_t v166 = v193;
          }
        }
        v168 = &v68[v193];
        ++v165;
      }
      while (v165 != v70);
    }
  }
LABEL_272:
  if (v71) {
    operator delete(v71);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v93) {
    operator delete(v93);
  }
  if (v222) {
    operator delete(v222);
  }
  operator delete(v214);
  sub_25B43CCC0(v73, (uint64_t)v215, *a3);
  v215[0] = &unk_2708F21F8;
  if (v216) {
    sub_25B404120(v216);
  }
}

void sub_25B46A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::locale a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a37) {
    sub_25B404120(a37);
  }
  unint64_t v48 = *(void **)(v46 - 248);
  if (v48)
  {
    *(void *)(v46 - 240) = v48;
    operator delete(v48);
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_25B46A88C(uint64_t a1, __n128 a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(&v17[1], 0, 32);
  v17[0] = a2;
  uint64_t result = sub_25B4583CC(a1, v17);
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v5 = sub_25B406B20(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v5, (uint64_t)" ", 1);
    unint64_t v6 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_25B406B20(v7, (uint64_t)" ", 1);
    sub_25B406B20(v7, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet(v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v18);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v9 = std::locale::use_facet(v18, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(v18);
    std::ostream::put();
    uint64_t result = std::ostream::flush();
  }
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)&v18[0].__locale_ = 0u;
  uint64_t v10 = *(void *)(a1 + 104);
  unint64_t v11 = *(_DWORD **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v10; --v10)
      *v11++ = 0;
  }
  else if (v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    do
    {
      uint64_t v15 = 0;
      v11[v13 * (uint64_t)v18[0].__locale_ + v14 * (uint64_t)v18[1].__locale_] = 0;
      do
      {
        uint64_t v16 = (std::locale::__imp *)((char *)v18[v15 + 1].__locale_ + 1);
        v18[v15 + 1].__locale_ = v16;
        if (v16 != *(std::locale::__imp **)(a1 + 16 + v15 * 8)) {
          break;
        }
        v18[v15-- + 1].__locale_ = 0;
      }
      while (v15 != -2);
      ++v12;
    }
    while (v12 != v10);
  }
  return result;
}

void sub_25B46AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
}

void sub_25B46AB64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_25B46BF04((uint64_t)&v22, a3);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  uint64_t v6 = *(void *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = v7;
    if (v8) {
      sub_25B404120(v8);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v6;
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v22;
  unint64_t v13 = (v23 - (uint64_t)v22) >> 3;
  long long v14 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v14;
  uint64_t v15 = a1 + 56;
  char v16 = 1;
  do
  {
    char v17 = v16;
    if (v10 < v13 && v11 == v12[v10])
    {
      *(void *)(v5 + 8 * v11) = 1;
      *(void *)(v15 + 8 * v11) = 0;
      ++v10;
    }
    else
    {
      *(void *)(v5 + 8 * v11) = *(void *)(a2 + 8 + 8 * v9);
      *(void *)(v15 + 8 * v11) = *(void *)(a2 + 56 + 8 * v9++);
    }
    char v16 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  uint64_t v18 = 0;
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v19 = 1;
  while (1)
  {
    uint64_t v20 = *(void *)(a1 + v18 + 16);
    if (v20 != 1) {
      break;
    }
LABEL_15:
    v18 -= 8;
    if (v18 == -16)
    {
      char v21 = 1;
      goto LABEL_18;
    }
  }
  if (*(void *)(a1 + v18 + 64) == v19)
  {
    v19 *= v20;
    goto LABEL_15;
  }
  char v21 = 0;
LABEL_18:
  *(unsigned char *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = **(void **)(a1 + 120) + 4 * *((void *)&v14 + 1);
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_25B46AD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B46AD38(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_25B46BD74((void *)(a1 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_25B46BD74((void *)(a1 + 72), *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3);
  long long v6 = a2[6];
  long long v7 = a2[7];
  long long v8 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a2[14];
  long long v13 = a2[15];
  long long v14 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v13;
  sub_25B46BDF0(a1 + 288, a2 + 18);
  sub_25B45E3AC(a1 + 984, (uint64_t)a2 + 984);
  return a1;
}

void sub_25B46AE00(_Unwind_Exception *a1)
{
  sub_25B3F9500(v1);
  _Unwind_Resume(a1);
}

void *sub_25B46AE2C(void *a1)
{
  a1[123] = &unk_2708F27E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[139];
  if (v2) {
    sub_25B404120(v2);
  }
  sub_25B46AE8C(a1 + 36);
  sub_25B3F9500((uint64_t)(a1 + 6));
  return a1;
}

void *sub_25B46AE8C(void *a1)
{
  a1[68] = &unk_2708F21F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[84];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[36] = &unk_2708F21F8;
  unint64_t v3 = (std::__shared_weak_count *)a1[52];
  if (v3) {
    sub_25B404120(v3);
  }
  sub_25B3F9500((uint64_t)(a1 + 6));
  return a1;
}

void sub_25B46AF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v138 = *MEMORY[0x263EF8340];
  long long v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 856)) {
    BOOL v9 = *(unsigned char *)(a2 + 1112) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v11 = !v9 && *(unsigned char *)(a2 + 1264) != 0;
  if (v7 == v8)
  {
    if (v11)
    {
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      uint64_t v12 = *(void *)(a1 + 104);
      uint64_t v13 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v12)
        {
          uint64_t v14 = 0;
          uint64_t v15 = a1 + 16;
          do
          {
            float v16 = sub_25B46BC1C(a2 + 144, &v123);
            uint64_t v17 = 0;
            *(float *)(v13 + 4 * v14) = sqrtf(fabsf(v16 + *(float *)(a2 + 1328)));
            do
            {
              uint64_t v18 = *(void *)((char *)&v123 + v17 + 8) + 1;
              *(void *)((char *)&v123 + v17 + 8) = v18;
              if (v18 != *(void *)(v15 + v17)) {
                break;
              }
              *(void *)((char *)&v123 + v17 + 8) = 0;
              v17 -= 8;
            }
            while (v17 != -16);
            ++v14;
          }
          while (v14 != v12);
        }
      }
      else if (v12)
      {
        uint64_t v68 = 0;
        uint64_t v69 = *(void *)(a1 + 56);
        uint64_t v70 = *(void *)(a1 + 64);
        uint64_t v71 = a1 + 16;
        do
        {
          uint64_t v72 = v69 * v123 + v70 * *((void *)&v123 + 1);
          float v73 = sub_25B46BC1C(a2 + 144, &v123);
          uint64_t v74 = 0;
          *(float *)(v13 + 4 * v72) = sqrtf(fabsf(v73 + *(float *)(a2 + 1328)));
          do
          {
            uint64_t v75 = *(void *)((char *)&v123 + v74 + 8) + 1;
            *(void *)((char *)&v123 + v74 + 8) = v75;
            if (v75 != *(void *)(v71 + v74)) {
              break;
            }
            *(void *)((char *)&v123 + v74 + 8) = 0;
            v74 -= 8;
          }
          while (v74 != -16);
          ++v68;
        }
        while (v68 != v12);
      }
    }
    else
    {
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      uint64_t v40 = *(void *)(a1 + 104);
      uint64_t v41 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v40)
        {
          uint64_t v42 = 0;
          uint64_t v43 = a1 + 16;
          do
          {
            float v44 = sub_25B46B960(a2 + 144, &v123);
            uint64_t v45 = 0;
            *(float *)(v41 + 4 * v42) = sqrtf(fabsf(v44 + *(float *)(a2 + 1328)));
            do
            {
              uint64_t v46 = *(void *)((char *)&v123 + v45 + 8) + 1;
              *(void *)((char *)&v123 + v45 + 8) = v46;
              if (v46 != *(void *)(v43 + v45)) {
                break;
              }
              *(void *)((char *)&v123 + v45 + 8) = 0;
              v45 -= 8;
            }
            while (v45 != -16);
            ++v42;
          }
          while (v42 != v40);
        }
      }
      else if (v40)
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(a1 + 56);
        uint64_t v78 = *(void *)(a1 + 64);
        uint64_t v79 = a1 + 16;
        do
        {
          uint64_t v80 = v77 * v123 + v78 * *((void *)&v123 + 1);
          float v81 = sub_25B46B960(a2 + 144, &v123);
          uint64_t v82 = 0;
          *(float *)(v41 + 4 * v80) = sqrtf(fabsf(v81 + *(float *)(a2 + 1328)));
          do
          {
            uint64_t v83 = *(void *)((char *)&v123 + v82 + 8) + 1;
            *(void *)((char *)&v123 + v82 + 8) = v83;
            if (v83 != *(void *)(v79 + v82)) {
              break;
            }
            *(void *)((char *)&v123 + v82 + 8) = 0;
            v82 -= 8;
          }
          while (v82 != -16);
          ++v76;
        }
        while (v76 != v40);
      }
    }
  }
  else
  {
    if (v11)
    {
      long long v136 = 0uLL;
      long long v137 = 0uLL;
      long long v134 = 0uLL;
      long long v135 = 0uLL;
      long long v132 = 0uLL;
      long long v133 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v114 = 0uLL;
      sub_25B40AB84((uint64_t)&v123, v5, (_OWORD *)a2, (uint64_t)&v114);
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        uint64_t v21 = *((void *)&v114 + v19);
        uint64_t v22 = *((void *)v5 + v19);
        if ((v20 & 1) == 0) {
          break;
        }
        char v20 = 0;
        uint64_t v19 = 1;
      }
      while (v21 == v22);
      if (v21 != v22)
      {
        uint64_t v23 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v24 = sub_25B406B20(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v24, (uint64_t)" ", 1);
        uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v26 = (void *)std::ostream::operator<<();
        sub_25B406B20(v26, (uint64_t)" ", 1);
        sub_25B406B20(v26, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        unint64_t v27 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        unint64_t v28 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      *(_OWORD *)&v120[0].__locale_ = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      uint64_t v29 = *(void *)(a1 + 104);
      uint64_t v30 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v29)
        {
          uint64_t v31 = 0;
          uint64_t v33 = (uint64_t *)*((void *)&v124 + 1);
          uint64_t v32 = (uint64_t *)v125;
          unint64_t v34 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          unint64_t v112 = v34;
          do
          {
            long long v117 = *(_OWORD *)&v120[0].__locale_;
            if (v32 != v33)
            {
              uint64_t v35 = v33;
              unint64_t v36 = v112;
              do
              {
                uint64_t v37 = *v35++;
                *((void *)&v117 + v37) = 0;
                --v36;
              }
              while (v36);
            }
            *(float *)(v30 + 4 * v31) = sqrtf(fabsf(sub_25B46BC1C(a2 + 144, &v117) + *(float *)(a2 + 1328)));
            for (uint64_t i = 1; i != -1; --i)
            {
              uint64_t v39 = (std::locale::__imp *)((char *)v120[i].__locale_ + 1);
              v120[i].__locale_ = v39;
              if (v39 != *(std::locale::__imp **)((char *)&v114 + i * 8)) {
                break;
              }
              v120[i].__locale_ = 0;
            }
            ++v31;
          }
          while (v31 != v29);
        }
      }
      else if (v29)
      {
        uint64_t v84 = 0;
        uint64_t v85 = (uint64_t *)*((void *)&v124 + 1);
        unint64_t v110 = (uint64_t *)v125;
        if ((unint64_t)((uint64_t)(v125 - *((void *)&v124 + 1)) >> 3) <= 1) {
          uint64_t v86 = 1;
        }
        else {
          uint64_t v86 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
        }
        uint64_t v108 = *(void *)(a1 + 56);
        uint64_t v104 = v86;
        uint64_t v106 = *(void *)(a1 + 64);
        do
        {
          locale = v120[0].__locale_;
          uint64_t v87 = v120[1].__locale_;
          long long v117 = *(_OWORD *)&v120[0].__locale_;
          if (v110 != v85)
          {
            uint64_t v89 = v85;
            uint64_t v90 = v104;
            do
            {
              uint64_t v91 = *v89++;
              *((void *)&v117 + v91) = 0;
              --v90;
            }
            while (v90);
          }
          *(float *)(v30 + 4 * (v108 * (void)locale + v106 * (void)v87)) = sqrtf(fabsf(sub_25B46BC1C(a2 + 144, &v117)+ *(float *)(a2 + 1328)));
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v93 = (std::locale::__imp *)((char *)v120[j].__locale_ + 1);
            v120[j].__locale_ = v93;
            if (v93 != *(std::locale::__imp **)((char *)&v114 + j * 8)) {
              break;
            }
            v120[j].__locale_ = 0;
          }
          ++v84;
        }
        while (v84 != v29);
      }
    }
    else
    {
      long long v136 = 0uLL;
      long long v137 = 0uLL;
      long long v134 = 0uLL;
      long long v135 = 0uLL;
      long long v132 = 0uLL;
      long long v133 = 0uLL;
      long long v130 = 0uLL;
      long long v131 = 0uLL;
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v123 = 0uLL;
      long long v115 = 0uLL;
      long long v116 = 0uLL;
      long long v114 = 0uLL;
      sub_25B40AB84((uint64_t)&v123, v5, (_OWORD *)a2, (uint64_t)&v114);
      uint64_t v47 = 0;
      char v48 = 1;
      do
      {
        uint64_t v49 = *((void *)&v114 + v47);
        uint64_t v50 = *((void *)v5 + v47);
        if ((v48 & 1) == 0) {
          break;
        }
        char v48 = 0;
        uint64_t v47 = 1;
      }
      while (v49 == v50);
      if (v49 != v50)
      {
        uint64_t v51 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v52 = sub_25B406B20(v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v52, (uint64_t)" ", 1);
        unint64_t v53 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v54 = (void *)std::ostream::operator<<();
        sub_25B406B20(v54, (uint64_t)" ", 1);
        sub_25B406B20(v54, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
        uint64_t v55 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        uint64_t v56 = std::locale::use_facet(v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(v120);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      *(_OWORD *)&v120[0].__locale_ = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      uint64_t v57 = *(void *)(a1 + 104);
      uint64_t v58 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v57)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (uint64_t *)*((void *)&v124 + 1);
          uint64_t v60 = (uint64_t *)v125;
          unint64_t v62 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
          if (v62 <= 1) {
            unint64_t v62 = 1;
          }
          unint64_t v113 = v62;
          do
          {
            long long v117 = *(_OWORD *)&v120[0].__locale_;
            if (v60 != v61)
            {
              uint64_t v63 = v61;
              unint64_t v64 = v113;
              do
              {
                uint64_t v65 = *v63++;
                *((void *)&v117 + v65) = 0;
                --v64;
              }
              while (v64);
            }
            *(float *)(v58 + 4 * v59) = sqrtf(fabsf(sub_25B46B960(a2 + 144, &v117) + *(float *)(a2 + 1328)));
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v67 = (std::locale::__imp *)((char *)v120[k].__locale_ + 1);
              v120[k].__locale_ = v67;
              if (v67 != *(std::locale::__imp **)((char *)&v114 + k * 8)) {
                break;
              }
              v120[k].__locale_ = 0;
            }
            ++v59;
          }
          while (v59 != v57);
        }
      }
      else if (v57)
      {
        uint64_t v94 = 0;
        uint64_t v95 = (uint64_t *)*((void *)&v124 + 1);
        uint64_t v111 = (uint64_t *)v125;
        if ((unint64_t)((uint64_t)(v125 - *((void *)&v124 + 1)) >> 3) <= 1) {
          uint64_t v96 = 1;
        }
        else {
          uint64_t v96 = (uint64_t)(v125 - *((void *)&v124 + 1)) >> 3;
        }
        uint64_t v109 = *(void *)(a1 + 56);
        uint64_t v105 = v96;
        uint64_t v107 = *(void *)(a1 + 64);
        do
        {
          uint64_t v98 = v120[0].__locale_;
          uint64_t v97 = v120[1].__locale_;
          long long v117 = *(_OWORD *)&v120[0].__locale_;
          if (v111 != v95)
          {
            uint64_t v99 = v95;
            uint64_t v100 = v105;
            do
            {
              uint64_t v101 = *v99++;
              *((void *)&v117 + v101) = 0;
              --v100;
            }
            while (v100);
          }
          *(float *)(v58 + 4 * (v109 * (void)v98 + v107 * (void)v97)) = sqrtf(fabsf(sub_25B46B960(a2 + 144, &v117)+ *(float *)(a2 + 1328)));
          for (uint64_t m = 1; m != -1; --m)
          {
            float v103 = (std::locale::__imp *)((char *)v120[m].__locale_ + 1);
            v120[m].__locale_ = v103;
            if (v103 != *(std::locale::__imp **)((char *)&v114 + m * 8)) {
              break;
            }
            v120[m].__locale_ = 0;
          }
          ++v94;
        }
        while (v94 != v57);
      }
    }
    sub_25B3F9500((uint64_t)&v123);
  }
}

void sub_25B46B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float sub_25B46B960(uint64_t a1, void *a2)
{
  v14[6] = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_25B46BA80(a1 + 48, a2, &v8, v12, &v7, v11);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_25B46BB3C(a1 + 336, v12, &v10, v14, &v9, v13);
  if (*(unsigned char *)(a1 + 712)) {
    uint64_t v3 = v10;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 632) * v14[0] + *(void *)(a1 + 640) * v14[1];
  }
  if (*(unsigned char *)(a1 + 968)) {
    uint64_t v4 = v9;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 888) * v13[0] + *(void *)(a1 + 896) * v13[1];
  }
  if (*(unsigned char *)(a1 + 1120)) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 1040) * v11[0];
  }
  return (float)(*(float *)(*(void *)(a1 + 720) + 4 * v3)
               - (float)(*(float *)(*(void *)(a1 + 976) + 4 * v4) * (float)*(int *)(a1 + 824)))
       + *(float *)(*(void *)(a1 + 1128) + 4 * v5);
}

uint64_t sub_25B46BA80(uint64_t result, void *a2, uint64_t *a3, void *a4, void *a5, void *a6)
{
  *a5 = 0;
  *a3 = 0;
  char v6 = *(uint64_t **)(result + 24);
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v8 = *(uint64_t **)result;
  uint64_t v9 = *(void **)(result + 8);
  *a6 = a2[1];
  *a4 = *a2;
  a4[1] = a2[1];
  uint64_t v10 = v7 - (void)v6;
  if (v10)
  {
    unint64_t v11 = v10 >> 3;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      uint64_t v12 = *v6++;
      a6[v12] = 0;
      --v11;
    }
    while (v11);
  }
  if (v9 != v8)
  {
    unint64_t v13 = v9 - v8;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      uint64_t v14 = *v8++;
      a4[v14] = 0;
      --v13;
    }
    while (v13);
  }
  uint64_t v15 = 0;
  *a5 += *(void *)(result + 192) * *a6;
  uint64_t v16 = *a3;
  char v17 = 1;
  do
  {
    char v18 = v17;
    v16 += *(void *)(result + 144 + 8 * v15) * a4[v15];
    *a3 = v16;
    uint64_t v15 = 1;
    char v17 = 0;
  }
  while ((v18 & 1) != 0);
  return result;
}

uint64_t sub_25B46BB3C(uint64_t result, void *a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  *a5 = 0;
  *a3 = 0;
  char v6 = *(uint64_t **)(result + 24);
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v8 = *(uint64_t **)result;
  uint64_t v9 = *(void **)(result + 8);
  *a6 = *a2;
  a6[1] = a2[1];
  *a4 = *a2;
  a4[1] = a2[1];
  uint64_t v10 = v7 - (void)v6;
  if (v10)
  {
    unint64_t v11 = v10 >> 3;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      uint64_t v12 = *v6++;
      a6[v12] = 0;
      --v11;
    }
    while (v11);
  }
  if (v9 != v8)
  {
    unint64_t v13 = v9 - v8;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    do
    {
      uint64_t v14 = *v8++;
      a4[v14] = 0;
      --v13;
    }
    while (v13);
  }
  uint64_t v15 = 0;
  uint64_t v16 = *a5;
  char v17 = 1;
  do
  {
    char v18 = v17;
    v16 += *(void *)(result + 192 + 8 * v15) * a6[v15];
    *a5 = v16;
    uint64_t v15 = 1;
    char v17 = 0;
  }
  while ((v18 & 1) != 0);
  uint64_t v19 = 0;
  uint64_t v20 = *a3;
  char v21 = 1;
  do
  {
    char v22 = v21;
    v20 += *(void *)(result + 144 + 8 * v19) * a4[v19];
    *a3 = v20;
    uint64_t v19 = 1;
    char v21 = 0;
  }
  while ((v22 & 1) != 0);
  return result;
}

float sub_25B46BC1C(uint64_t a1, void *a2)
{
  void v11[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_25B46BA80(a1 + 48, a2, &v5, v9, &v4, v8);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_25B46BB3C(a1 + 336, v9, &v7, v11, &v6, v10);
  return (float)(*(float *)(*(void *)(a1 + 720) + 4 * v7)
               - (float)(*(float *)(*(void *)(a1 + 976) + 4 * v6) * (float)*(int *)(a1 + 824)))
       + *(float *)(*(void *)(a1 + 1128) + 4 * v4);
}

uint64_t sub_25B46BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 408) == v4)
  {
    if (sub_25B40B05C(a1 + 296, a2 + 8)) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
  }
  else
  {
    int v5 = 0;
  }
  if (*(void *)(a1 + 664) == v4)
  {
    if (sub_25B40B05C(a1 + 552, a2 + 8)) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
  }
  else
  {
    int v6 = 0;
  }
  if (v5 <= v6) {
    return v6;
  }
  else {
    return v5;
  }
}

void *sub_25B46BD74(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_25B40040C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B46BDD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B46BDF0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_25B46BD74((void *)(a1 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_25B46BD74((void *)(a1 + 72), *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3);
  long long v6 = a2[6];
  long long v7 = a2[7];
  long long v8 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  long long v9 = a2[10];
  long long v10 = a2[11];
  long long v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a2[14];
  long long v13 = a2[15];
  long long v14 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v13;
  sub_25B4582F4(a1 + 288, (uint64_t)(a2 + 18));
  long long v15 = *(long long *)((char *)a2 + 440);
  long long v16 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(a1 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 472) = v16;
  *(_OWORD *)(a1 + 440) = v15;
  long long v17 = *(long long *)((char *)a2 + 488);
  long long v18 = *(long long *)((char *)a2 + 504);
  long long v19 = *(long long *)((char *)a2 + 520);
  *(_DWORD *)(a1 + 536) = *((_DWORD *)a2 + 134);
  *(_OWORD *)(a1 + 504) = v18;
  *(_OWORD *)(a1 + 520) = v19;
  *(_OWORD *)(a1 + 488) = v17;
  sub_25B4582F4(a1 + 544, (uint64_t)(a2 + 34));
  return a1;
}

void sub_25B46BEE8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B46BF04(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 >= 0) {
    unsigned int v4 = *a2;
  }
  else {
    unsigned int v4 = -v3;
  }
  if (v4 >= 2)
  {
    long long v6 = (void *)MEMORY[0x263F8C0F8];
    long long v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/expand_dims_helper.hpp", 121);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    long long v9 = (void *)std::ostream::operator<<();
    long long v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    long long v11 = sub_25B406B20(v10, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    long long v12 = std::locale::use_facet(&v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    long long v13 = std::locale::use_facet(&v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    int v3 = *a2;
  }
  if (v3 >= 0) {
    uint64_t v14 = v3;
  }
  else {
    uint64_t v14 = v3 + 2;
  }
  long long v16 = *(uint64_t **)(a1 + 8);
  unint64_t v15 = *(void *)(a1 + 16);
  if ((unint64_t)v16 >= v15)
  {
    long long v18 = *(unint64_t **)a1;
    uint64_t v19 = ((uint64_t)v16 - *(void *)a1) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v21 = v15 - (void)v18;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    BOOL v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v20;
    }
    if (v23)
    {
      unint64_t v23 = (unint64_t)sub_25B3FCAD4(v23);
      long long v18 = *(unint64_t **)a1;
      long long v16 = *(uint64_t **)(a1 + 8);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = (uint64_t *)(v23 + 8 * v19);
    unint64_t v26 = v23 + 8 * v24;
    uint64_t *v25 = v14;
    long long v17 = (unint64_t *)(v25 + 1);
    while (v16 != (uint64_t *)v18)
    {
      uint64_t v27 = *--v16;
      *--uint64_t v25 = v27;
    }
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v26;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *long long v16 = v14;
    long long v17 = (unint64_t *)(v16 + 1);
  }
  *(void *)(a1 + 8) = v17;
  sub_25B46C354((uint64_t)&v39, *(unint64_t **)a1, v17);
  uint64_t v28 = v40;
  uint64_t v29 = *(void *)(a1 + 8) - *(void *)a1;
  sub_25B3FB178((uint64_t)&v39);
  if (v28 != v29 >> 3)
  {
    uint64_t v30 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v31 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v32 = sub_25B406B20(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/expand_dims_helper.hpp", 121);
    sub_25B406B20(v32, (uint64_t)" ", 1);
    uint64_t v33 = (void *)std::ostream::operator<<();
    unint64_t v34 = sub_25B406B20(v33, (uint64_t)" ", 1);
    uint64_t v35 = sub_25B406B20(v34, (uint64_t)"init", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
    unint64_t v36 = std::locale::use_facet(&v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407184("err", "repeated axis");
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
    uint64_t v37 = std::locale::use_facet(&v39, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
  }
  return std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_25B46C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B46C354(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    long long v5 = a2;
    do
    {
      sub_25B3FFB24(a1, *v5, *v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_25B46C3BC(_Unwind_Exception *a1)
{
  sub_25B3FB178(v1);
  _Unwind_Resume(a1);
}

void sub_25B46C3D0(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = v1;
  v18[161] = *(void **)MEMORY[0x263EF8340];
  uint64_t v4 = v2;
  sub_25B4582F4((uint64_t)&v9, v2);
  long long v6 = v10;
  long long v7 = v11;
  long long v8 = v12;
  LODWORD(v18[0]) = 1;
  sub_25B4697C4((uint64_t)v17, (uint64_t)&v6, (int *)v18);
  long long v9 = &unk_2708F21F8;
  if (v13) {
    sub_25B404120(v13);
  }
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  sub_25B4582F4((uint64_t)&v9, v5);
  long long v6 = v10;
  long long v7 = v11;
  long long v8 = v12;
  LODWORD(v18[0]) = 1;
  sub_25B4697C4((uint64_t)v16, (uint64_t)&v6, (int *)v18);
  long long v9 = &unk_2708F21F8;
  if (v13) {
    sub_25B404120(v13);
  }
  __n128 v3 = *(__n128 *)(v4 + 8);
  v3.n128_u64[1] = *(void *)(v5 + 8);
  sub_25B46A88C((uint64_t)v15, v3);
  v18[0] = (void *)1;
  sub_25B45C5CC((uint64_t)&v6, v5, (uint64_t)v18);
  sub_25B45C6A4((uint64_t)v14, &v6);
}

void sub_25B46D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x1630]);
  STACK[0x918] = (unint64_t)&unk_2708F27E8;
  if (STACK[0x998]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x998]);
  }
  sub_25B46AE8C(v66);
  sub_25B3F9500(v67 + 48);
  sub_25B46AE8C(&STACK[0x280]);
  if (a66) {
    sub_25B404120(a66);
  }
  if (STACK[0x268]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x268]);
  }
  STACK[0x13D0] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x1450]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1450]);
  }
  STACK[0x1468] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x14E8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x14E8]);
  }
  STACK[0x1500] = (unint64_t)&unk_2708F27E8;
  if (STACK[0x1580]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1580]);
  }
  STACK[0x1598] = (unint64_t)&unk_2708F27E8;
  if (STACK[0x1618]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x1618]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B46D764(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    unint64_t v93 = a2;
    uint64_t v95 = a2 - 12;
    uint64_t v91 = (uint64_t *)(a2 - 36);
    unint64_t v92 = (uint64_t *)(a2 - 24);
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 2);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = (*a3)((uint64_t *)v95, (uint64_t *)v12);
                if (result)
                {
                  uint64_t v39 = *(void *)v12;
                  int v100 = *(_DWORD *)(v12 + 8);
                  uint64_t v99 = v39;
                  uint64_t v40 = *(void *)v95;
                  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v95 + 8);
                  *(void *)unint64_t v12 = v40;
                  uint64_t v41 = v99;
                  *(_DWORD *)(v95 + 8) = v100;
                  *(void *)uint64_t v95 = v41;
                }
                break;
              case 3uLL:
                uint64_t result = sub_25B405AC0((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)v95, a3);
                break;
              case 4uLL:
                uint64_t result = sub_25B405BFC(v12, v12 + 12, v12 + 24, v95, a3);
                break;
              case 5uLL:
                uint64_t result = sub_25B405CE8(v12, v12 + 12, v12 + 24, v12 + 36, v95, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 287)
          {
            uint64_t v42 = (uint64_t *)(v12 + 12);
            BOOL v44 = v12 == a2 || v42 == (uint64_t *)a2;
            if (a5)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v12;
                do
                {
                  uint64_t v47 = (uint64_t *)v46;
                  unint64_t v46 = (unint64_t)v42;
                  uint64_t result = (*a3)(v42, v47);
                  if (result)
                  {
                    uint64_t v48 = *(void *)v46;
                    int v100 = *(_DWORD *)(v46 + 8);
                    uint64_t v99 = v48;
                    uint64_t v49 = v45;
                    while (1)
                    {
                      uint64_t v50 = v12 + v49;
                      *(void *)(v50 + 12) = *(void *)(v12 + v49);
                      *(_DWORD *)(v50 + 20) = *(_DWORD *)(v12 + v49 + 8);
                      if (!v49) {
                        break;
                      }
                      v49 -= 12;
                      uint64_t result = (*a3)(&v99, (uint64_t *)(v49 + v12));
                      if ((result & 1) == 0)
                      {
                        uint64_t v51 = v12 + v49 + 12;
                        goto LABEL_79;
                      }
                    }
                    uint64_t v51 = v12;
LABEL_79:
                    uint64_t v52 = v99;
                    *(_DWORD *)(v51 + 8) = v100;
                    *(void *)uint64_t v51 = v52;
                    a2 = v93;
                  }
                  uint64_t v42 = (uint64_t *)(v46 + 12);
                  v45 += 12;
                }
                while (v46 + 12 != a2);
              }
            }
            else if (!v44)
            {
              do
              {
                uint64_t v85 = (uint64_t *)v11;
                unint64_t v11 = (unint64_t)v42;
                uint64_t result = (*a3)(v42, v85);
                if (result)
                {
                  uint64_t v86 = *(void *)v11;
                  int v100 = *(_DWORD *)(v11 + 8);
                  uint64_t v99 = v86;
                  unint64_t v87 = v11;
                  do
                  {
                    unint64_t v88 = v87;
                    uint64_t v89 = *(void *)(v87 - 12);
                    v87 -= 12;
                    *(void *)unint64_t v88 = v89;
                    *(_DWORD *)(v88 + 8) = *(_DWORD *)(v88 - 4);
                    uint64_t result = (*a3)(&v99, (uint64_t *)(v88 - 24));
                  }
                  while ((result & 1) != 0);
                  uint64_t v90 = v99;
                  *(_DWORD *)(v87 + 8) = v100;
                  *(void *)unint64_t v87 = v90;
                }
                uint64_t v42 = (uint64_t *)(v11 + 12);
              }
              while (v11 + 12 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v53 = (v14 - 2) >> 1;
              int64_t v96 = v53;
              do
              {
                int64_t v54 = v53;
                if (v96 >= v53)
                {
                  uint64_t v55 = (2 * v53) | 1;
                  unint64_t v56 = v11 + 12 * v55;
                  if (2 * v53 + 2 < (uint64_t)v14
                    && (*a3)((uint64_t *)(v11 + 12 * v55), (uint64_t *)(v56 + 12)))
                  {
                    v56 += 12;
                    uint64_t v55 = 2 * v54 + 2;
                  }
                  unint64_t v57 = v11 + 12 * v54;
                  uint64_t result = (*a3)((uint64_t *)v56, (uint64_t *)v57);
                  if ((result & 1) == 0)
                  {
                    uint64_t v58 = *(void *)v57;
                    int v100 = *(_DWORD *)(v57 + 8);
                    uint64_t v99 = v58;
                    do
                    {
                      unint64_t v59 = v56;
                      uint64_t v60 = *(void *)v56;
                      *(_DWORD *)(v57 + 8) = *(_DWORD *)(v56 + 8);
                      *(void *)unint64_t v57 = v60;
                      if (v96 < v55) {
                        break;
                      }
                      uint64_t v61 = (2 * v55) | 1;
                      unint64_t v56 = v11 + 12 * v61;
                      uint64_t v62 = 2 * v55 + 2;
                      if (v62 < (uint64_t)v14 && (*a3)((uint64_t *)(v11 + 12 * v61), (uint64_t *)(v56 + 12)))
                      {
                        v56 += 12;
                        uint64_t v61 = v62;
                      }
                      uint64_t result = (*a3)((uint64_t *)v56, &v99);
                      unint64_t v57 = v59;
                      uint64_t v55 = v61;
                    }
                    while (!result);
                    uint64_t v63 = v99;
                    *(_DWORD *)(v59 + 8) = v100;
                    *(void *)unint64_t v59 = v63;
                  }
                }
                int64_t v53 = v54 - 1;
              }
              while (v54);
              int64_t v64 = v13 / 0xCuLL;
              unint64_t v65 = v93;
              do
              {
                unint64_t v94 = v65;
                uint64_t v66 = 0;
                uint64_t v67 = *(void *)v11;
                int v98 = *(_DWORD *)(v11 + 8);
                uint64_t v97 = v67;
                unint64_t v68 = v11;
                do
                {
                  uint64_t v69 = v68 + 12 * v66 + 12;
                  uint64_t v70 = (2 * v66) | 1;
                  uint64_t v71 = 2 * v66 + 2;
                  if (v71 < v64)
                  {
                    uint64_t result = (*a3)((uint64_t *)(v68 + 12 * v66 + 12), (uint64_t *)(v68 + 12 * v66 + 24));
                    if (result)
                    {
                      v69 += 12;
                      uint64_t v70 = v71;
                    }
                  }
                  uint64_t v72 = *(void *)v69;
                  *(_DWORD *)(v68 + 8) = *(_DWORD *)(v69 + 8);
                  *(void *)unint64_t v68 = v72;
                  unint64_t v68 = v69;
                  uint64_t v66 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                float v73 = (uint64_t *)(v94 - 12);
                if (v69 == v94 - 12)
                {
                  unint64_t v65 = v94 - 12;
                  uint64_t v83 = v97;
                  *(_DWORD *)(v69 + 8) = v98;
                  *(void *)uint64_t v69 = v83;
                }
                else
                {
                  uint64_t v74 = *v73;
                  *(_DWORD *)(v69 + 8) = *(_DWORD *)(v94 - 4);
                  *(void *)uint64_t v69 = v74;
                  uint64_t v75 = v97;
                  *(_DWORD *)(v94 - 4) = v98;
                  unint64_t v65 = v94 - 12;
                  *float v73 = v75;
                  uint64_t v76 = v69 - v11 + 12;
                  if (v76 >= 13)
                  {
                    unint64_t v77 = (unint64_t)(-2 - 0x5555555555555555 * (v76 >> 2)) >> 1;
                    unint64_t v78 = v11 + 12 * v77;
                    uint64_t result = (*a3)((uint64_t *)v78, (uint64_t *)v69);
                    if (result)
                    {
                      uint64_t v79 = *(void *)v69;
                      int v100 = *(_DWORD *)(v69 + 8);
                      uint64_t v99 = v79;
                      do
                      {
                        uint64_t v80 = v78;
                        uint64_t v81 = *(void *)v78;
                        *(_DWORD *)(v69 + 8) = *(_DWORD *)(v78 + 8);
                        *(void *)uint64_t v69 = v81;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        unint64_t v78 = v11 + 12 * v77;
                        uint64_t result = (*a3)((uint64_t *)v78, &v99);
                        uint64_t v69 = v80;
                      }
                      while ((result & 1) != 0);
                      uint64_t v82 = v99;
                      *(_DWORD *)(v80 + 8) = v100;
                      *(void *)uint64_t v80 = v82;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return result;
          }
          unint64_t v15 = v12 + 12 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x601)
          {
            sub_25B405AC0((uint64_t *)v12, (uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)v95, a3);
            sub_25B405AC0((uint64_t *)(v12 + 12), (uint64_t *)(v12 + 12 * (v14 >> 1) - 12), v92, a3);
            sub_25B405AC0((uint64_t *)(v12 + 24), (uint64_t *)(v12 + 12 + 12 * (v14 >> 1)), v91, a3);
            sub_25B405AC0((uint64_t *)(v12 + 12 * (v14 >> 1) - 12), (uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)(v12 + 12 + 12 * (v14 >> 1)), a3);
            uint64_t v16 = *(void *)v12;
            int v100 = *(_DWORD *)(v12 + 8);
            uint64_t v99 = v16;
            LODWORD(v16) = *(_DWORD *)(v15 + 8);
            *(void *)unint64_t v12 = *(void *)v15;
            *(_DWORD *)(v12 + 8) = v16;
            uint64_t v17 = v99;
            *(_DWORD *)(v15 + 8) = v100;
            *(void *)unint64_t v15 = v17;
          }
          else
          {
            sub_25B405AC0((uint64_t *)(v12 + 12 * (v14 >> 1)), (uint64_t *)v12, (uint64_t *)v95, a3);
          }
          --a4;
          a2 = v93;
          if (a5 & 1) != 0 || ((*a3)((uint64_t *)(v12 - 12), (uint64_t *)v12)) {
            break;
          }
          uint64_t v30 = *(void *)v12;
          int v98 = *(_DWORD *)(v12 + 8);
          uint64_t v97 = v30;
          uint64_t result = (*a3)(&v97, (uint64_t *)v95);
          if (result)
          {
            do
            {
              v12 += 12;
              uint64_t result = (*a3)(&v97, (uint64_t *)v12);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v31 = (uint64_t *)(v12 + 12);
            do
            {
              unint64_t v12 = (unint64_t)v31;
              if ((unint64_t)v31 >= v93) {
                break;
              }
              uint64_t result = (*a3)(&v97, v31);
              uint64_t v31 = (uint64_t *)(v12 + 12);
            }
            while (!result);
          }
          unint64_t v32 = v93;
          if (v12 < v93)
          {
            unint64_t v32 = v93;
            do
            {
              v32 -= 12;
              uint64_t result = (*a3)(&v97, (uint64_t *)v32);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v32)
          {
            uint64_t v33 = *(void *)v12;
            int v100 = *(_DWORD *)(v12 + 8);
            uint64_t v99 = v33;
            uint64_t v34 = *(void *)v32;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v32 + 8);
            *(void *)unint64_t v12 = v34;
            uint64_t v35 = v99;
            *(_DWORD *)(v32 + 8) = v100;
            *(void *)unint64_t v32 = v35;
            do
              v12 += 12;
            while (!(*a3)(&v97, (uint64_t *)v12));
            do
            {
              v32 -= 12;
              uint64_t result = (*a3)(&v97, (uint64_t *)v32);
            }
            while ((result & 1) != 0);
          }
          unint64_t v36 = (uint64_t *)(v12 - 12);
          BOOL v5 = v12 - 12 >= v11;
          BOOL v6 = v12 - 12 == v11;
          if (v12 - 12 != v11)
          {
            uint64_t v37 = *v36;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 4);
            *(void *)unint64_t v11 = v37;
          }
          a5 = 0;
          uint64_t v38 = v97;
          *(_DWORD *)(v12 - 4) = v98;
          uint64_t *v36 = v38;
        }
        uint64_t v18 = *(void *)v12;
        int v98 = *(_DWORD *)(v12 + 8);
        uint64_t v97 = v18;
        uint64_t v19 = (uint64_t *)v12;
        do
        {
          uint64_t v20 = (uint64_t)v19;
          uint64_t v19 = (uint64_t *)((char *)v19 + 12);
        }
        while (((*a3)(v19, &v97) & 1) != 0);
        uint64_t v21 = (uint64_t *)v93;
        if (v20 == v12)
        {
          uint64_t v21 = (uint64_t *)v93;
          do
          {
            if (v19 >= v21) {
              break;
            }
            uint64_t v21 = (uint64_t *)((char *)v21 - 12);
          }
          while (((*a3)(v21, &v97) & 1) == 0);
        }
        else
        {
          do
            uint64_t v21 = (uint64_t *)((char *)v21 - 12);
          while (!(*a3)(v21, &v97));
        }
        if (v19 < v21)
        {
          unint64_t v22 = (unint64_t)v19;
          unint64_t v23 = v21;
          do
          {
            uint64_t v99 = *(void *)v22;
            uint64_t v24 = v99;
            int v100 = *(_DWORD *)(v22 + 8);
            int v25 = v100;
            int v26 = *((_DWORD *)v23 + 2);
            *(void *)unint64_t v22 = *v23;
            *(_DWORD *)(v22 + 8) = v26;
            *((_DWORD *)v23 + 2) = v25;
            *unint64_t v23 = v24;
            do
            {
              uint64_t v20 = v22;
              v22 += 12;
            }
            while (((*a3)((uint64_t *)v22, &v97) & 1) != 0);
            do
              unint64_t v23 = (uint64_t *)((char *)v23 - 12);
            while (!(*a3)(v23, &v97));
          }
          while (v22 < (unint64_t)v23);
        }
        if (v20 != v11)
        {
          uint64_t v27 = *(void *)v20;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v20 + 8);
          *(void *)unint64_t v11 = v27;
        }
        uint64_t v28 = v97;
        *(_DWORD *)(v20 + 8) = v98;
        *(void *)uint64_t v20 = v28;
        if (v19 >= v21) {
          break;
        }
LABEL_31:
        uint64_t result = sub_25B46D764(v11, v20, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v20 + 12;
      }
      BOOL v29 = sub_25B46E0E8(v11, v20, a3);
      unint64_t v12 = v20 + 12;
      uint64_t result = sub_25B46E0E8(v20 + 12, v93, a3);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v20;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL sub_25B46E0E8(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        uint64_t *v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      sub_25B405AC0((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      sub_25B405BFC(a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      sub_25B405CE8(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12, a3);
      return 1;
    default:
      unint64_t v12 = (uint64_t *)(a1 + 24);
      sub_25B405AC0((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      uint64_t v13 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v13, v12))
    {
      uint64_t v19 = *(void *)v13;
      int v20 = *(_DWORD *)(v13 + 8);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 36) = *(void *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24) {
          break;
        }
        v16 -= 12;
        if (((*a3)(&v19, (uint64_t *)(v17 + 12)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 36;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v19;
      *(_DWORD *)(v18 + 8) = v20;
      if (++v15 == 8) {
        return v13 + 12 == a2;
      }
    }
    unint64_t v12 = (uint64_t *)v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL sub_25B46E2F8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void sub_25B46E30C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v18 = objc_msgSend_count(v3, v4, v5);
  int v17 = 3;
  sub_25B46E42C(v19, &v18, &v17);
  sub_25B4583CC(a1, v19);
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = (_DWORD *)(*(void *)(a1 + 144) + 8);
  while (v9 < objc_msgSend_count(v3, v6, v7))
  {
    *(v10 - 2) = *(_DWORD *)(objc_msgSend_points(v3, v11, v12) + v8);
    *(v10 - 1) = *(_DWORD *)(objc_msgSend_points(v3, v13, v14) + v8 + 4);
    *uint64_t v10 = *(_DWORD *)(objc_msgSend_points(v3, v15, v16) + v8 + 8);
    v10 += 3;
    ++v9;
    v8 += 16;
  }
}

void sub_25B46E3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *sub_25B46E42C(_OWORD *a1, void *a2, int *a3)
{
  uint64_t v4 = 0;
  v17[2] = *MEMORY[0x263EF8340];
  a1[2] = 0u;
  uint64_t v5 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v6 = 1;
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v8 = *a3;
  v17[0] = *a2;
  v17[1] = v8;
  uint64_t v15 = 0;
  unint64_t v9 = v17;
  do
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xBEBC200)
    {
      sub_25B406B20(v5, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
      sub_25B406B20(v5, (uint64_t)" ", 1);
      int v11 = (void *)std::ostream::operator<<();
      sub_25B406B20(v11, (uint64_t)" ", 1);
      sub_25B406B20(v11, (uint64_t)"Shape", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      uint64_t v12 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45806C("err", "shape[", (uint64_t)&v15, "]", " is ", (uint64_t)v9, " ,it should <= 6");
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
      uint64_t v13 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v10 = *v9;
    }
    *((void *)a1 + v4) = v10;
    unint64_t v9 = &v17[v6];
    uint64_t v15 = ++v4;
    uint64_t v6 = 2;
  }
  while (v4 != 2);
  return a1;
}

void sub_25B46E6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

__n128 sub_25B46E6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double *)(a1 + 8) - *(double *)(a2 + 8);
  *(float *)&double v4 = v4;
  float32x4_t v28 = *(float32x4_t *)(a1 + 64);
  *(float *)&double v4 = fabsf(*(float *)&v4) + 0.00000011921;
  float32x4_t v29 = vdivq_f32(vabdq_f32(v28, *(float32x4_t *)(a2 + 64)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v4, 0));
  uint64_t v5 = (float32x4_t *)(a1 + 80);
  objc_msgSend_intrinsics(*(void **)(a1 + 16), (const char *)a2, a3);
  int v31 = v6;
  int v33 = v7;
  double v30 = v8;
  double v32 = v9;
  int v35 = v10;
  double v34 = v11;
  *(double *)v15.i64 = sub_25B4781B8(v5, (uint64_t)&v30, 100, 100, v8, v9, v11, v12, v13, v14);
  objc_msgSend_intrinsics(*(void **)(a2 + 16), v16, v17, *(void *)(a2 + 64), *(void *)(a2 + 72), vaddq_f32(v28, v15));
  int v31 = v18;
  int v33 = v19;
  double v30 = v20;
  double v32 = v21;
  int v35 = v22;
  double v34 = v23;
  sub_25B4781B8((float32x4_t *)(a2 + 80), (uint64_t)&v30, 100, 100, v20, v21, v23, v24, v25, v26);
  return (__n128)v29;
}

uint64_t sub_25B46E7E4(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  *(void *)a1 = pixelBuffer;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  *(_DWORD *)(a1 + 8) = CVPixelBufferGetWidth(*(CVPixelBufferRef *)a1);
  *(_DWORD *)(a1 + 12) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)a1);
  *(void *)(a1 + 16) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)a1);
  *(void *)(a1 + 24) = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)a1);
  return a1;
}

CVPixelBufferRef *sub_25B46E848(CVPixelBufferRef *a1)
{
  return a1;
}

uint64_t sub_25B46E87C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v4 = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v6 = *(unsigned char **)(a2 + 24);
  uint64_t v5 = *(unsigned char **)(a2 + 32);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_25B46E9EC((void *)(a1 + 24), v5 - v6);
    double v8 = *(char **)(a1 + 32);
    memmove(v8, v6, v7);
    *(void *)(a1 + 32) = &v8[v7];
  }
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  return a1;
}

void sub_25B46E92C(_Unwind_Exception *a1)
{
  id v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_25B46E958(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_25B46E99C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_25B469774(i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_25B46E9EC(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_25B3FBC4C();
  }
  BOOL result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

BOOL sub_25B46EA2C(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = (int *)operator new(0x20uLL);
  *(_OWORD *)id v4 = xmmword_25B5F1310;
  *((_OWORD *)v4 + 1) = xmmword_25B5F1320;
  uint64_t v5 = v4;
  do
  {
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    v5 += 2;
    sub_25B46EBA8(&v13, *(float32x4_t *)(a1 + 16 * v6), *(float32x4_t *)(a1 + 16 * v7), a2, a3);
    if (v14) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v5 == v4 + 8;
    }
  }
  while (!v8);
  BOOL v9 = v14 != 0;
  operator delete(v4);
  return v9;
}

uint64_t sub_25B46EAF0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(void *)(a1 + 128) = *((id *)a2 + 16);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  id v10 = *((id *)a2 + 18);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_25B3FCA58((void *)(a1 + 152), *((const void **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  *(void *)(a1 + 176) = *((id *)a2 + 22);
  *(_WORD *)(a1 + 184) = *((_WORD *)a2 + 92);
  return a1;
}

void sub_25B46EB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int8x16_t *sub_25B46EBA8(int8x16_t *result, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = a2;
  v5.i32[2] = 1.0;
  float32x4_t v6 = a3;
  v6.i32[2] = 1.0;
  float32x4_t v7 = a4;
  v7.i32[2] = 1.0;
  float32x4_t v8 = a5;
  v8.i32[2] = 1.0;
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(v5)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
  int32x4_t v11 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v7)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL);
  int8x16_t v13 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v10)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  if (fabsf(*(float *)&v13.i32[1]) < 1.0e-10) {
    goto LABEL_33;
  }
  v14.i32[0] = vextq_s8(v13, v13, 8uLL).u32[0];
  v14.i32[1] = v13.i32[0];
  *(float32x2_t *)v13.i8 = vdiv_f32(v14, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1));
  float v15 = (vmovn_s32(vcgtq_f32(a2, a3)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
  if (*(float *)v13.i32 < v15) {
    goto LABEL_33;
  }
  float v16 = (vmovn_s32(vcgtq_f32(a4, a5)).u8[0] & 1) != 0 ? a5.f32[0] : a4.f32[0];
  if (*(float *)v13.i32 < v16) {
    goto LABEL_33;
  }
  float v17 = (vmovn_s32(vcgtq_f32(a3, a2)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
  if (*(float *)v13.i32 > v17) {
    goto LABEL_33;
  }
  float v18 = (vmovn_s32(vcgtq_f32(a5, a4)).u8[0] & 1) != 0 ? a5.f32[0] : a4.f32[0];
  if (*(float *)v13.i32 > v18) {
    goto LABEL_33;
  }
  a3.i32[0] = a3.i32[1];
  float v19 = a3.f32[1] >= a2.f32[1] ? a2.f32[1] : a3.f32[1];
  if (*(float *)&v13.i32[1] < v19) {
    goto LABEL_33;
  }
  float v20 = a5.f32[1] >= a4.f32[1] ? a4.f32[1] : a5.f32[1];
  if (*(float *)&v13.i32[1] < v20) {
    goto LABEL_33;
  }
  if (a2.f32[1] >= a3.f32[1]) {
    a3.f32[0] = a2.f32[1];
  }
  if (*(float *)&v13.i32[1] <= a3.f32[0]
    && (a4.f32[1] >= a5.f32[1] ? (float v21 = a4.f32[1]) : (float v21 = a5.f32[1]), *(float *)&v13.i32[1] <= v21))
  {
    v13.i32[2] = 1.0;
    char *result = v13;
    char v22 = 1;
  }
  else
  {
LABEL_33:
    char v22 = 0;
    result->i8[0] = 0;
  }
  result[1].i8[0] = v22;
  return result;
}

void sub_25B46ED40(_OWORD *a1, uint64_t a2, uint64_t a3, float32x4_t a4)
{
  float32x4_t v8 = *(float32x4_t *)a2;
  float32x4_t v9 = *(float32x4_t *)(a2 + 16);
  float32x4_t v10 = vsubq_f32(*(float32x4_t *)a2, a4);
  float32x4_t v11 = vsubq_f32(v9, *(float32x4_t *)a2);
  v10.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v10, v11).i32[1]) + (float)(v10.f32[0] * v11.f32[0]))
             / (v11.f32[0] * v11.f32[0] + v11.f32[1] * v11.f32[1]);
  float32x4_t v12 = *(float32x4_t *)(a2 + 32);
  float32x4_t v13 = *(float32x4_t *)(a2 + 48);
  float32x4_t v14 = vsubq_f32(*(float32x4_t *)a2, v13);
  *(float32x2_t *)v8.f32 = vmla_n_f32(*(float32x2_t *)a2, *(float32x2_t *)v11.f32, v10.f32[0]);
  float32x4_t v40 = v8;
  float32x4_t v15 = vsubq_f32(v9, a4);
  float32x4_t v16 = vsubq_f32(v12, v9);
  v15.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v15, v16).i32[1]) + (float)(v15.f32[0] * v16.f32[0]))
             / (v16.f32[0] * v16.f32[0] + v16.f32[1] * v16.f32[1]);
  *(float32x2_t *)v9.f32 = vmla_n_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v16.f32, v15.f32[0]);
  float32x4_t v41 = v9;
  float32x4_t v17 = vsubq_f32(v12, a4);
  float32x4_t v18 = vsubq_f32(v13, v12);
  v17.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v17, v18).i32[1]) + (float)(v17.f32[0] * v18.f32[0]))
             / (v18.f32[0] * v18.f32[0] + v18.f32[1] * v18.f32[1]);
  *(float32x2_t *)v12.f32 = vmla_n_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v18.f32, v17.f32[0]);
  unint64_t v37 = a4.i64[0];
  float32x4_t v19 = vsubq_f32(v13, a4);
  v19.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v19, v14).i32[1]) + (float)(v19.f32[0] * v14.f32[0]))
             / (v14.f32[0] * v14.f32[0] + v14.f32[1] * v14.f32[1]);
  *(float32x2_t *)v13.f32 = vmla_n_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.f32, v19.f32[0]);
  float32x4_t v38 = v13;
  float32x4_t v39 = v12;
  __n128 v20 = sub_25B443BC4(v45, (float32x4_t *)a2);
  float v21 = (void *)v45[0];
  v20.n128_u64[0] = *(void *)v45[0];
  v20.n128_u32[2] = *(_DWORD *)(v45[0] + 8);
  float32x4_t v42 = *(float32x4_t *)a3;
  float32x4_t v43 = (float32x4_t)v20;
  int32x4_t v44 = *(int32x4_t *)(a3 + 16);
  BOOL v22 = sub_25B46F07C((float32x4_t)v20, v40, *(float32x4_t *)a3, v44);
  BOOL v23 = sub_25B46F07C(v43, v41, v42, v44);
  BOOL v24 = sub_25B46F07C(v43, v39, v42, v44);
  BOOL v25 = sub_25B46F07C(v43, v38, v42, v44);
  long long v26 = *(_OWORD *)(a2 + 80);
  a1[4] = *(_OWORD *)(a2 + 64);
  a1[5] = v26;
  long long v27 = *(_OWORD *)(a2 + 112);
  a1[6] = *(_OWORD *)(a2 + 96);
  a1[7] = v27;
  long long v28 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v28;
  long long v29 = *(_OWORD *)(a2 + 48);
  a1[2] = *(_OWORD *)(a2 + 32);
  a1[3] = v29;
  if (!v22 && !v23)
  {
    unint64_t v31 = v40.i64[0];
    unint64_t v30 = v41.i64[0];
    *(void *)a1 = v40.i64[0];
    *((void *)a1 + 4) = v41.i64[0];
    uint64_t v32 = 7;
    uint64_t v33 = 6;
    uint64_t v34 = 4;
    unint64_t v35 = v37;
LABEL_4:
    uint64_t v36 = v35;
    *((void *)a1 + 6) = v35;
LABEL_11:
    *(void *)&a1[v34] = v31;
    *(void *)&a1[v33] = v30;
    *(void *)&a1[v32] = v36;
    goto LABEL_12;
  }
  if (!v23 && !v24)
  {
    *(void *)a1 = v37;
    unint64_t v30 = v41.i64[0];
    *((void *)a1 + 2) = v41.i64[0];
    uint64_t v32 = 7;
    uint64_t v33 = 5;
    uint64_t v34 = 4;
    unint64_t v31 = v37;
    uint64_t v36 = v39.i64[0];
    *((void *)a1 + 6) = v39.i64[0];
    goto LABEL_11;
  }
  if (!v24 && !v25)
  {
    unint64_t v31 = v38.i64[0];
    *(void *)a1 = v38.i64[0];
    uint64_t v32 = 6;
    *((void *)a1 + 2) = v37;
    uint64_t v33 = 5;
    uint64_t v34 = 4;
    unint64_t v30 = v37;
    uint64_t v36 = v39.i64[0];
    *((void *)a1 + 4) = v39.i64[0];
    goto LABEL_11;
  }
  if (!v22 && !v25)
  {
    unint64_t v31 = v40.i64[0];
    *((void *)a1 + 2) = v40.i64[0];
    uint64_t v32 = 7;
    *((void *)a1 + 4) = v37;
    uint64_t v33 = 6;
    uint64_t v34 = 5;
    unint64_t v30 = v37;
    unint64_t v35 = v38.i64[0];
    goto LABEL_4;
  }
LABEL_12:
  v45[1] = (uint64_t)v21;
  operator delete(v21);
}

void *sub_25B46EFF8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_25B46F07C(float32x4_t a1, float32x4_t a2, float32x4_t a3, int32x4_t a4)
{
  float32x4_t v4 = a1;
  v4.i32[2] = 1.0;
  float32x4_t v5 = a2;
  v5.i32[2] = 1.0;
  a3.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  int32x4_t v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(v4)), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  int32x4_t v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a4, a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(a3)), (float32x4_t)a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL);
  int8x16_t v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v7)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  if (fabsf(*(float *)&v10.i32[1]) < 1.0e-10) {
    return 0;
  }
  v11.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  v11.i32[1] = v10.i32[0];
  float32x2_t v12 = vdiv_f32(v11, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1));
  if (vmovn_s32(vcgtq_f32(a1, a2)).u8[0]) {
    float v13 = a2.f32[0];
  }
  else {
    float v13 = a1.f32[0];
  }
  if (v12.f32[0] >= v13)
  {
    float v14 = (vmovn_s32(vcgtq_f32(a2, a1)).u8[0] & 1) != 0 ? a2.f32[0] : a1.f32[0];
    if (v12.f32[0] <= v14) {
      return 1;
    }
  }
  a1.i32[0] = a1.i32[1];
  if (a2.f32[1] >= a1.f32[1]) {
    float v15 = a1.f32[1];
  }
  else {
    float v15 = a2.f32[1];
  }
  if (v12.f32[1] < v15) {
    return 0;
  }
  if (a1.f32[1] < a2.f32[1]) {
    a1.f32[0] = a2.f32[1];
  }
  return v12.f32[1] <= a1.f32[0];
}

void sub_25B46F1A0()
{
  id v0 = objc_alloc(NSDictionary);
  uint64_t v2 = objc_msgSend_initWithObjectsAndKeys_(v0, v1, (uint64_t)&unk_2708FE398, @"Cabinet", &unk_2708FE3C8, @"Refrigerator", &unk_2708FE3C8, @"Shelf", &unk_2708FE3C8, @"Stove", &unk_2708FE3D8, @"Bed", &unk_2708FE398, @"Sink", &unk_2708FE3C8, @"Washer", &unk_2708FE3E8, @"Toilet", &unk_2708FE3F8,
         @"Bathtub",
         &unk_2708FE3C8,
         @"Oven",
         &unk_2708FE3C8,
         @"Dishwasher",
         &unk_2708FE408,
         @"Fireplace",
         &unk_2708FE418,
         @"Chair",
         &unk_2708FE398,
         @"Table",
         &unk_2708FE398,
         @"Screen",
         &unk_2708FE398,
         @"Sofa",
         &unk_2708FE398,
         @"Stairs",
         &unk_2708FE398,
         @"Window",
         &unk_2708FE398,
         @"Door",
         &unk_2708FE398,
         @"BuildInCabinet",
         &unk_2708FE398,
         @"Storage",
         0);
  uint64_t v3 = (void *)qword_26A502158;
  qword_26A502158 = v2;
}

uint64_t *sub_25B46F324(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        sub_25B3FA70C();
      }
      float v13 = operator new(8 * *(void *)&prime);
      float v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      float32x4_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            float32x4_t v16 = (uint64_t **)i;
          }
          else
          {
            BOOL v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                BOOL v25 = v24;
                BOOL v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *float32x4_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              float32x4_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  long long v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    BOOL result = v28;
    long long v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *sub_25B46F674(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_25B46F75C()
{
  id v0 = objc_alloc(NSDictionary);
  uint64_t v2 = objc_msgSend_initWithObjectsAndKeys_(v0, v1, (uint64_t)&unk_2708FE3A8, @"Cabinet", &unk_2708FE3A8, @"Refrigerator", &unk_2708FE3A8, @"Shelf", &unk_2708FE3A8, @"Stove", &unk_2708FE3A8, @"Bed", &unk_2708FE3A8, @"Sink", &unk_2708FE3A8, @"Washer", &unk_2708FE3A8, @"Toilet", &unk_2708FE3B8,
         @"Bathtub",
         &unk_2708FE3A8,
         @"Oven",
         &unk_2708FE3A8,
         @"Dishwasher",
         &unk_2708FE3A8,
         @"Fireplace",
         &unk_2708FE398,
         @"Chair",
         &unk_2708FE3A8,
         @"Table",
         &unk_2708FE3A8,
         @"Screen",
         &unk_2708FE3A8,
         @"Sofa",
         &unk_2708FE398,
         @"Stairs",
         &unk_2708FE398,
         @"Window",
         &unk_2708FE398,
         @"Door",
         &unk_2708FE398,
         @"BuildInCabinet",
         &unk_2708FE3A8,
         @"Storage",
         0);
  int8x8_t v3 = (void *)qword_26A502148;
  qword_26A502148 = v2;
}

void sub_25B46F8C0()
{
  id v0 = objc_alloc(NSDictionary);
  uint64_t v2 = objc_msgSend_initWithObjectsAndKeys_(v0, v1, (uint64_t)&unk_2708FE388, @"Cabinet", &unk_2708FE388, @"Refrigerator", &unk_2708FE388, @"Shelf", &unk_2708FE388, @"Stove", &unk_2708FE388, @"Bed", &unk_2708FE388, @"Sink", &unk_2708FE388, @"Washer", &unk_2708FE388, @"Toilet", &unk_2708FE388,
         @"Bathtub",
         &unk_2708FE388,
         @"Oven",
         &unk_2708FE388,
         @"Dishwasher",
         &unk_2708FE388,
         @"Fireplace",
         &unk_2708FE398,
         @"Chair",
         &unk_2708FE388,
         @"Table",
         &unk_2708FE388,
         @"Screen",
         &unk_2708FE388,
         @"Sofa",
         &unk_2708FE398,
         @"Stairs",
         &unk_2708FE398,
         @"Window",
         &unk_2708FE398,
         @"Door",
         &unk_2708FE398,
         @"BuildInCabinet",
         &unk_2708FE388,
         @"Storage",
         0);
  int8x8_t v3 = (void *)qword_26A502138;
  qword_26A502138 = v2;
}

uint64_t sub_25B46FA1C(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, void *a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, float))(a1 + 8))(a2, a4, *a5, *a6, *a7, *a8, *a3);
}

uint64_t sub_25B46FA4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2708F14E8;
  a2[1] = v2;
  return result;
}

void *sub_25B46FA70(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2708F14E8;
  result[1] = v3;
  return result;
}

void sub_25B46FAB8()
{
}

uint64_t sub_25B46FAD0(float32x4_t *a1, void **a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (objc_msgSend_isEqualToString_(*a2, (const char *)a2, @"Fireplace")) {
    BOOL v9 = a5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0xFFFFFFFFLL;
  }
  float32x4_t v10 = a1[11];
  float32x2_t v11 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v10, v10)));
  float32x2_t v12 = vrsqrte_f32(v11);
  float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  *(float32x2_t *)v10.f32 = vmul_n_f32(*(float32x2_t *)v10.f32, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  float32x4_t v14 = vsubq_f32(*(float32x4_t *)(a6 + 16), *(float32x4_t *)a6);
  float32x2_t v15 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v14, v14)));
  float32x2_t v16 = vrsqrte_f32(v15);
  float32x2_t v17 = vmul_f32(v16, vrsqrts_f32(v15, vmul_f32(v16, v16)));
  float32x2_t v18 = vmul_n_f32(*(float32x2_t *)v14.f32, vmul_f32(v17, vrsqrts_f32(v15, vmul_f32(v17, v17))).f32[0]);
  if (vaddv_f32(vmul_f32(*(float32x2_t *)v10.f32, v18)) < 0.99)
  {
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    unint64_t v19 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_25B3F3000, v19, OS_LOG_TYPE_INFO, "Fireplace and its nearest wall should be aligned, skipping the optimization.", buf, 2u);
    }

    return 0xFFFFFFFFLL;
  }
  __n128 v22 = sub_25B443BC4((uint64_t *)__p, (float32x4_t *)a6);
  uint64_t v21 = (float32x2_t *)__p[0];
  v22.n128_u32[0] = *((_DWORD *)__p[0] + 3);
  float32x4_t v23 = *(float32x4_t *)(a6 + 48);
  float32x4_t v24 = vsubq_f32(*(float32x4_t *)a6, v23);
  float32x2_t v25 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v24, v24)));
  float32x2_t v26 = vrsqrte_f32(v25);
  float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
  float32x2_t v28 = vmul_n_f32(*(float32x2_t *)v24.f32, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
  float32x4_t v29 = a1[4];
  float32x4_t v30 = a1[5];
  *(float32x2_t *)v24.f32 = vmul_f32(vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v23.f32), v28);
  *(float32x2_t *)v23.f32 = vmul_f32(v28, vsub_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v23.f32));
  *(float32x2_t *)v23.f32 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v23.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v23.f32)), (float32x2_t)vdup_lane_s32((int32x2_t)v22.n128_u64[0], 0));
  v31.i32[1] = v23.i32[1];
  v31.i32[0] = 0;
  int8x8_t v32 = vbsl_s8((int8x8_t)vcgt_f32(v31, (float32x2_t)__PAIR64__(1.0, v23.u32[0])), (int8x8_t)0x3F80000000000000, *(int8x8_t *)v23.f32);
  if (*(float *)v32.i32 < *(float *)&v32.i32[1] && (*(float *)v32.i32 > 0.0 || *(float *)&v32.i32[1] < 1.0))
  {
    *(float32x2_t *)__p[0] = vadd_f32(vmul_n_f32(vmul_n_f32(v28, v22.n128_f32[0]), (float)((float)(*(float *)v32.i32 + *(float *)&v32.i32[1]) * 0.5) + -0.5), *(float32x2_t *)__p[0]);
    v21[1].f32[1] = v22.n128_f32[0] * (float)(*(float *)&v32.i32[1] - *(float *)v32.i32);
    float32x4_t v29 = a1[4];
    float32x4_t v30 = a1[5];
  }
  v30.i32[2] = 1.0;
  v29.i32[2] = 1.0;
  float32x4_t v34 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), vnegq_f32(v30)), v29, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
  float32x4_t v35 = vmulq_f32(v34, v34);
  v35.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v35).u64[0];
  v35.f32[0] = sqrtf(v35.f32[0]);
  float32x4_t v36 = *(float32x4_t *)(a6 + 16);
  v36.i32[2] = 1.0;
  float32x4_t v53 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0));
  float32x4_t v37 = vmulq_f32(v36, v53);
  float v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
  if (v38 < 0.01)
  {
    float v39 = vabds_f32(0.01, v38);
    if (v39 <= 0.2)
    {
      v21[2].f32[0] = v39 + v21[2].f32[0];
      float32x2_t *v21 = vadd_f32(vmul_f32(vmul_n_f32(v18, 0.01 - v38), (float32x2_t)0x3F0000003F000000), *v21);
    }
    else
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      float32x4_t v40 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_25B3F3000, v40, OS_LOG_TYPE_DEBUG, "Shifting value is too large, skipping.", buf, 2u);
      }
    }
  }
  float32x4_t v41 = *(float32x4_t *)a6;
  v41.i32[2] = 1.0;
  float32x4_t v42 = vmulq_f32(v53, v41);
  float v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
  float v44 = -0.16;
  if (v43 > 0.0) {
    float v44 = 0.0;
  }
  if (v43 > v44)
  {
    float v45 = vabds_f32(v44, v43);
    if (v45 <= 0.2)
    {
      uint64_t v47 = (float32x2_t *)__p[0];
      *((float *)__p[0] + 4) = v45 + *((float *)__p[0] + 4);
      float32x2_t *v47 = vadd_f32(vmul_f32(vmul_n_f32(v18, v44 - v43), (float32x2_t)0x3F0000003F000000), *v47);
    }
    else
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      unint64_t v46 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_25B3F3000, v46, OS_LOG_TYPE_DEBUG, "Shifting value is too large, skipping.", buf, 2u);
      }
    }
  }
  sub_25B44444C((uint64_t)buf, (uint64_t)__p[0]);
  char v48 = buf[0];
  long long v66 = v58;
  long long v67 = v59;
  v68[0] = v60[0];
  *(_OWORD *)((char *)v68 + 15) = *(_OWORD *)((char *)v60 + 15);
  long long v62 = *(_OWORD *)&buf[1];
  long long v63 = v55;
  long long v64 = v56;
  long long v65 = v57;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t result = 0;
  long long v49 = v67;
  *(_OWORD *)(a6 + 65) = v66;
  long long v50 = *(_OWORD *)((char *)v68 + 15);
  *(_OWORD *)(a6 + 81) = v49;
  *(_OWORD *)(a6 + 97) = v68[0];
  *(_OWORD *)(a6 + 112) = v50;
  long long v51 = v63;
  *(_OWORD *)(a6 + 1) = v62;
  *(_OWORD *)(a6 + 17) = v51;
  long long v52 = v65;
  *(_OWORD *)(a6 + 33) = v64;
  *(unsigned char *)a6 = v48;
  *(_OWORD *)(a6 + 49) = v52;
  return result;
}

void sub_25B46FFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B470018(float32x4_t *a1, const char *a2, int a3, int a4, float a5, uint64_t a6, float32x4_t *a7)
{
  v61[2] = *MEMORY[0x263EF8340];
  float32x2_t v13 = (void *)MEMORY[0x263EFFA08];
  v61[0] = @"Table";
  v61[1] = @"Bed";
  float32x4_t v14 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], a2, (uint64_t)v61, 2);
  float32x2_t v16 = objc_msgSend_setWithArray_(v13, v15, (uint64_t)v14);

  float32x4_t v47 = a7[1];
  float32x4_t v44 = *a7;
  float32x4_t v45 = a7[2];
  int isEqualToString = objc_msgSend_isEqualToString_(*(void **)a2, v17, @"Fireplace");
  float32x4_t v19 = vsubq_f32(v44, v47);
  float v20 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v19, v19)));
  float32x4_t v21 = vsubq_f32(v47, v45);
  float v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
  if (v20 >= v22) {
    float v23 = v20;
  }
  else {
    float v23 = v22;
  }
  if (isEqualToString) {
    float v24 = 0.5;
  }
  else {
    float v24 = 0.1;
  }
  float32x4_t v46 = a1[4];
  float32x4_t v48 = a1[5];
  sub_25B470370((float32x4_t *)&v58, (uint64_t)a7, 1u, 2u, v46, v48, v23, v24);
  sub_25B470370((float32x4_t *)&v55, (uint64_t)a7, 2u, 3u, v46, v48, v23, v24);
  sub_25B470370(&v52, (uint64_t)a7, 3u, 0, v46, v48, v23, v24);
  sub_25B470370(&v49, (uint64_t)a7, 0, 1u, v46, v48, v23, v24);
  float v26 = a1[6].f32[0] * -0.5;
  if (a4)
  {
    if (a3)
    {
      v27.i64[0] = v46.i64[0];
      v28.i64[0] = v48.i64[0];
      if (v59 && v53)
      {
        unsigned int v29 = 2;
        unsigned int v30 = 1;
        float32x2_t v31 = &v52;
        int8x8_t v32 = (float32x4_t *)&v58;
LABEL_34:
        float32x4_t v39 = *v31;
        __n128 v38 = *(__n128 *)v32;
        float v42 = a5;
        int v37 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      v27.i64[0] = v46.i64[0];
      v28.i64[0] = v48.i64[0];
      if (v56 && v50)
      {
        unsigned int v29 = 3;
        unsigned int v30 = 2;
        float32x2_t v31 = &v49;
        int8x8_t v32 = (float32x4_t *)&v55;
        goto LABEL_34;
      }
    }
    sub_25B4704D8();
  }
  BOOL v33 = (v60 | v54) == 0;
  BOOL v34 = (v57 | v51) == 0;
  if (v59)
  {
    if (v53 && (v60 | v54) != 0 && (!v56 || (v57 | v51) == 0))
    {
      int v37 = 0;
      __n128 v38 = v58;
      float32x4_t v39 = v52;
      unsigned int v29 = 2;
      unsigned int v30 = 1;
      v27.i64[0] = v46.i64[0];
      v28.i64[0] = v48.i64[0];
LABEL_30:
      float v42 = a5;
LABEL_35:
      uint64_t v40 = sub_25B470524(v30, v29, v37, (uint64_t)a7, v38, v39, *(float32x2_t *)v27.f32, *(float32x2_t *)v28.f32, v42, v26);
      goto LABEL_36;
    }
  }
  if (!v56)
  {
    uint64_t v40 = 0;
    goto LABEL_36;
  }
  uint64_t v40 = 0;
  if (!v50) {
    BOOL v34 = 1;
  }
  if (!v59) {
    BOOL v33 = 1;
  }
  if (!v34 && v33)
  {
    int v41 = objc_msgSend_containsObject_(v16, v25, *(void *)a2);
    __n128 v38 = v55;
    float32x4_t v39 = v49;
    int v37 = v41 ^ 1;
    unsigned int v29 = 3;
    unsigned int v30 = 2;
    float32x4_t v27 = a1[4];
    float32x4_t v28 = a1[5];
    goto LABEL_30;
  }
LABEL_36:

  return v40;
}

void sub_25B470344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B470370(float32x4_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, float32x4_t a5, float32x4_t a6, float a7, float a8)
{
  float32x4_t v10 = a5;
  v10.i32[2] = 1.0;
  float32x4_t v11 = a6;
  v11.i32[2] = 1.0;
  float32x4_t v12 = *(float32x4_t *)(a2 + 16 * a3);
  v12.i32[2] = 1.0;
  float32x4_t v13 = *(float32x4_t *)(a2 + 16 * a4);
  v13.i32[2] = 1.0;
  int32x4_t v14 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v10)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL);
  int32x4_t v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(v12)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
  float32x4_t v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  int8x16_t v18 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), vnegq_f32(v15)), v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
  if (fabsf(*(float *)&v18.i32[1]) >= 1.0e-10)
  {
    v20.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
    v20.i32[1] = v18.i32[0];
    *(float32x2_t *)v18.i8 = vdiv_f32(v20, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1));
    float32x4_t v21 = (float32x4_t)v18;
    v21.i32[2] = 1.0;
    float32x4_t v22 = vsubq_f32(v21, *(float32x4_t *)(a2 + 16 * a3));
    float32x4_t v23 = vsubq_f32(v21, *(float32x4_t *)(a2 + 16 * a4));
    float v24 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v23, v23)));
    if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v22, v22))) < a7 || v24 < a7)
    {
      float32x4_t v26 = v21;
      BOOL v19 = sub_25B470C6C(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.f32, *(float32x2_t *)v18.i8) <= a8;
      *a1 = v26;
    }
    else
    {
      BOOL v19 = 0;
      *a1 = v21;
    }
    a1[1].i8[0] = 1;
  }
  else
  {
    BOOL v19 = 0;
    a1->i64[0] = 0;
    a1->i64[1] = 0;
    a1[1].i8[0] = 0;
  }
  a1[2].i8[0] = v19;
}

void sub_25B4704D8()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_2708F2718, MEMORY[0x263F8C088]);
}

uint64_t sub_25B470524(unsigned int a1, unsigned int a2, int a3, uint64_t a4, __n128 a5, float32x4_t a6, float32x2_t a7, float32x2_t a8, float a9, float a10)
{
  long long v18 = *(_OWORD *)(a4 + 16 * a1);
  float32x2_t v19 = vsub_f32((float32x2_t)a5.n128_u64[0], *(float32x2_t *)&v18);
  int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
  float32x4_t v21 = (float32x2_t *)(a4 + 16 * a2);
  float32x2_t v22 = vsub_f32((float32x2_t)a5.n128_u64[0], *v21);
  int32x2_t v23 = (int32x2_t)vmul_f32(v22, v22);
  float32x2_t v24 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v20, v23), (float32x2_t)vzip2_s32(v20, v23)));
  float v99 = v24.f32[0];
  *(float32x2_t *)&long long v18 = vsub_f32(*(float32x2_t *)&v18, *v21);
  float v25 = v24.f32[1];
  double v26 = vabds_f32(vaddv_f32(v24), sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v18, *(float32x2_t *)&v18))));
  int v27 = ((_BYTE)a2 + 1) & 3;
  float32x4_t v28 = (float32x4_t *)(a4 + 16 * (((_BYTE)a2 + 1) & 3));
  float32x4_t v29 = vsubq_f32(*(float32x4_t *)v21->f32, *v28);
  float v30 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v29, v29)));
  __n128 v96 = a5;
  float v31 = sub_25B470C6C(a7, a8, (float32x2_t)a5.n128_u64[0]);
  float v32 = sub_25B470C6C(a7, a8, *(float32x2_t *)a6.f32);
  if (v31 >= v32) {
    float v33 = v31;
  }
  else {
    float v33 = v32;
  }
  if (v25 >= v99) {
    float v34 = v99;
  }
  else {
    float v34 = v25;
  }
  if (a3)
  {
    BOOL v35 = v25 < a9;
    if (v26 <= 0.0001) {
      BOOL v35 = 1;
    }
    if (v33 < (float)(v30 * 0.5) && v35)
    {
      uint64_t v37 = (a2 + 2) & 3;
      if (fabsf(a10) > 0.000001)
      {
        float32x4_t v38 = *(float32x4_t *)(a4 + 16 * v37);
        float32x2_t v39 = vsub_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v38.f32);
        int32x2_t v40 = (int32x2_t)vmul_f32(v39, v39);
        *(float *)v40.i32 = sqrtf(vmlas_n_f32(*(float *)&v40.i32[1], v39.f32[0], v39.f32[0]));
        if (*(float *)v40.i32 <= 0.0 || (float)(*(float *)v40.i32 + a10) <= 0.0)
        {
          if (qword_26A5020B0 != -1) {
            dispatch_once(&qword_26A5020B0, &unk_2708F1218);
          }
          unsigned __int8 v54 = (id)qword_26A5020A8;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_25B3F3000, v54, OS_LOG_TYPE_ERROR, "[WallAlign] The wall thickness is more than the object thickness. Keep the original object box.", buf, 2u);
          }
        }
        else
        {
          *(float32x2_t *)v38.f32 = vmla_n_f32(*(float32x2_t *)v38.f32, vdiv_f32(v39, (float32x2_t)vdup_lane_s32(v40, 0)), *(float *)v40.i32 + a10);
          v38.i32[2] = 0;
          a6 = v38;
        }
        float32x4_t v55 = *(float32x4_t *)(a4 + 16 * (((_BYTE)a2 - 1) & 3));
        float32x2_t v56 = vsub_f32((float32x2_t)v96.n128_u64[0], *(float32x2_t *)v55.f32);
        int32x2_t v57 = (int32x2_t)vmul_f32(v56, v56);
        *(float *)v57.i32 = sqrtf(vmlas_n_f32(*(float *)&v57.i32[1], v56.f32[0], v56.f32[0]));
        if (*(float *)v57.i32 > 0.0 && (float)(*(float *)v57.i32 + a10) > 0.0)
        {
          *(float32x2_t *)v55.f32 = vmla_n_f32(*(float32x2_t *)v55.f32, vdiv_f32(v56, (float32x2_t)vdup_lane_s32(v57, 0)), *(float *)v57.i32 + a10);
          v55.i32[2] = 0;
          float32x4_t v58 = v55;
LABEL_68:
          float32x2_t *v21 = *(float32x2_t *)v58.f32;
          long long v65 = (float32x2_t *)(a4 + 16 * (a2 + 4));
          *long long v65 = *(float32x2_t *)v58.f32;
          __int32 v66 = v28->i32[2];
          v28->i64[0] = a6.i64[0];
          uint64_t v67 = a4 + 16 * (v27 | 4u);
          int v68 = *(_DWORD *)(v67 + 8);
          *(void *)uint64_t v67 = a6.i64[0];
          uint64_t v69 = (float32x4_t *)(a4 + 16 * (((_BYTE)a2 - 1) & 3));
          float32x4_t v70 = vsubq_f32(*v69, *(float32x4_t *)v21->f32);
          uint64_t v71 = (float32x2_t *)(a4 + 16 * v37);
          float32x2_t v72 = vsub_f32(*v71, *(float32x2_t *)a6.f32);
          if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v70, v70))) >= sqrtf(vaddv_f32(vmul_f32(v72, v72))))
          {
            float32x4_t v76 = vsubq_f32(v58, a6);
            float32x4_t v77 = vsubq_f32(*v69, v58);
            v76.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v76, v77).i32[1]) + (float)(v76.f32[0] * v77.f32[0]))
                       / (v77.f32[0] * v77.f32[0] + v77.f32[1] * v77.f32[1]);
            v21[1].i32[0] = (__int32)v21[1];
            float32x2_t v78 = vmla_n_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v77.f32, v76.f32[0]);
            float32x2_t *v21 = v78;
            *long long v65 = v78;
          }
          else
          {
            float32x4_t v73 = vsubq_f32(a6, v58);
            float32x4_t v74 = vsubq_f32(*(float32x4_t *)v71->f32, a6);
            v73.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v73, v74).i32[1]) + (float)(v73.f32[0] * v74.f32[0]))
                       / (v74.f32[0] * v74.f32[0] + v74.f32[1] * v74.f32[1]);
            v28->i32[2] = v66;
            float32x2_t v75 = vmla_n_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v74.f32, v73.f32[0]);
            *(float32x2_t *)v28->f32 = v75;
            *(_DWORD *)(v67 + 8) = v68;
            *(float32x2_t *)uint64_t v67 = v75;
          }
          return 0xFFFFFFFFLL;
        }
        if (qword_26A5020B0 != -1) {
          dispatch_once(&qword_26A5020B0, &unk_2708F1218);
        }
        long long v64 = (id)qword_26A5020A8;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)float v103 = 0;
          _os_log_error_impl(&dword_25B3F3000, v64, OS_LOG_TYPE_ERROR, "[WallAlign] The wall thickness is more than the object thickness. Keep the original object box.", v103, 2u);
        }
      }
      float32x4_t v58 = (float32x4_t)v96;
      goto LABEL_68;
    }
    goto LABEL_33;
  }
  char v41 = a2 - 1;
  if (v25 >= v99) {
    unsigned int v42 = a1;
  }
  else {
    unsigned int v42 = a2;
  }
  if (v25 >= v99) {
    unsigned int v43 = ((_BYTE)a1 - 1) & 3;
  }
  else {
    unsigned int v43 = v27;
  }
  if (v25 >= v99) {
    char v41 = a1 + 1;
  }
  if (v26 > 0.0001 && v34 >= a9 || v33 >= (float)(v30 * 0.5))
  {
LABEL_33:
    BOOL v46 = v26 > 0.0001 || v34 <= a9;
    double v47 = v34;
    if (v46 || v47 <= 0.3) {
      return 0;
    }
    else {
      return 2;
    }
  }
  uint64_t v50 = v41 & 3;
  if (fabsf(a10) <= 0.000001) {
    goto LABEL_77;
  }
  float32x4_t v51 = *(float32x4_t *)(a4 + 16 * (((_BYTE)v42 + 2) & 3));
  float32x2_t v52 = vsub_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v51.f32);
  int32x2_t v53 = (int32x2_t)vmul_f32(v52, v52);
  *(float *)v53.i32 = sqrtf(vmlas_n_f32(*(float *)&v53.i32[1], v52.f32[0], v52.f32[0]));
  if (*(float *)v53.i32 <= 0.0 || (float)(*(float *)v53.i32 + a10) <= 0.0)
  {
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    char v59 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v102 = 0;
      _os_log_error_impl(&dword_25B3F3000, v59, OS_LOG_TYPE_ERROR, "[WallAlign] The wall thickness is more than the object thickness. Keep the original object box.", v102, 2u);
    }
  }
  else
  {
    *(float32x2_t *)v51.f32 = vmla_n_f32(*(float32x2_t *)v51.f32, vdiv_f32(v52, (float32x2_t)vdup_lane_s32(v53, 0)), *(float *)v53.i32 + a10);
    v51.i32[2] = 0;
    a6 = v51;
  }
  float32x4_t v60 = *(float32x4_t *)(a4 + 16 * v50);
  float32x2_t v61 = vsub_f32((float32x2_t)v96.n128_u64[0], *(float32x2_t *)v60.f32);
  int32x2_t v62 = (int32x2_t)vmul_f32(v61, v61);
  *(float *)v62.i32 = sqrtf(vmlas_n_f32(*(float *)&v62.i32[1], v61.f32[0], v61.f32[0]));
  if (*(float *)v62.i32 <= 0.0 || (float)(*(float *)v62.i32 + a10) <= 0.0)
  {
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    uint64_t v79 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v101 = 0;
      _os_log_error_impl(&dword_25B3F3000, v79, OS_LOG_TYPE_ERROR, "[WallAlign] The wall thickness is more than the object thickness. Keep the original object box.", v101, 2u);
    }

LABEL_77:
    float32x4_t v63 = (float32x4_t)v96;
    goto LABEL_78;
  }
  *(float32x2_t *)v60.f32 = vmla_n_f32(*(float32x2_t *)v60.f32, vdiv_f32(v61, (float32x2_t)vdup_lane_s32(v62, 0)), *(float *)v62.i32 + a10);
  v60.i32[2] = 0;
  float32x4_t v63 = v60;
LABEL_78:
  uint64_t v80 = (float32x4_t *)(a4 + 16 * v42);
  v80->i64[0] = v63.i64[0];
  uint64_t v81 = (float32x2_t *)(a4 + 16 * (v42 + 4));
  *uint64_t v81 = *(float32x2_t *)v63.f32;
  uint64_t v82 = a4 + 16 * v43;
  int v83 = *(_DWORD *)(v82 + 8);
  *(void *)uint64_t v82 = a6.i64[0];
  uint64_t v84 = a4 + 16 * (v43 | 4);
  int v85 = *(_DWORD *)(v84 + 8);
  *(void *)uint64_t v84 = a6.i64[0];
  uint64_t v86 = (float32x4_t *)(a4 + 16 * v50);
  float32x4_t v87 = vsubq_f32(*v86, *v80);
  unint64_t v88 = (float32x2_t *)(a4 + 16 * (((_BYTE)v42 + 2) & 3));
  float32x2_t v89 = vsub_f32(*v88, *(float32x2_t *)a6.f32);
  if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v87, v87))) >= sqrtf(vaddv_f32(vmul_f32(v89, v89))))
  {
    float32x4_t v93 = vsubq_f32(v63, a6);
    float32x4_t v94 = vsubq_f32(*v86, v63);
    v93.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v93, v94).i32[1]) + (float)(v93.f32[0] * v94.f32[0]))
               / (v94.f32[0] * v94.f32[0] + v94.f32[1] * v94.f32[1]);
    v80->i32[2] = v80->i64[1];
    float32x2_t v95 = vmla_n_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v94.f32, v93.f32[0]);
    *(float32x2_t *)v80->f32 = v95;
    *uint64_t v81 = v95;
  }
  else
  {
    float32x4_t v90 = vsubq_f32(a6, v63);
    float32x4_t v91 = vsubq_f32(*(float32x4_t *)v88->f32, a6);
    v90.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v90, v91).i32[1]) + (float)(v90.f32[0] * v91.f32[0]))
               / (v91.f32[0] * v91.f32[0] + v91.f32[1] * v91.f32[1]);
    *(_DWORD *)(v82 + 8) = v83;
    float32x2_t v92 = vmla_n_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v91.f32, v90.f32[0]);
    *(float32x2_t *)uint64_t v82 = v92;
    *(_DWORD *)(v84 + 8) = v85;
    *(float32x2_t *)uint64_t v84 = v92;
  }
  return 4294967294;
}

float sub_25B470C6C(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3 = vsub_f32(a1, a3);
  float v4 = 0.0;
  if (sqrtf(vaddv_f32(vmul_f32(v3, v3))) < 0.000001) {
    return v4;
  }
  float32x2_t v5 = vsub_f32(a2, a3);
  if (sqrtf(vaddv_f32(vmul_f32(v5, v5))) < 0.000001) {
    return v4;
  }
  float32x2_t v7 = vsub_f32(a1, a2);
  float32x2_t v8 = vsub_f32(a3, a1);
  if (sqrtf(vaddv_f32(vmul_f32(v7, v7))) >= 0.000001 && (float32x2_t v9 = vsub_f32(a2, a1), vaddv_f32(vmul_f32(v9, v8)) >= 0.0))
  {
    float32x2_t v11 = vsub_f32(a3, a2);
    if (vaddv_f32(vmul_f32(v7, v11)) >= 0.0) {
      return fabsf(vmlas_n_f32((float)-v7.f32[1] * v3.f32[0], v3.f32[1], v7.f32[0]))
    }
           / sqrtf(vaddv_f32(vmul_f32(v9, v9)));
    float32x2_t v10 = vmul_f32(v11, v11);
  }
  else
  {
    float32x2_t v10 = vmul_f32(v8, v8);
  }
  return sqrtf(vaddv_f32(v10));
}

unint64_t sub_25B470D44(uint64_t *a1, float32x4_t *a2, void *a3, float a4)
{
  float32x2_t v7 = (int *)operator new(0x20uLL);
  *(_OWORD *)float32x2_t v7 = xmmword_25B5F1330;
  *((_OWORD *)v7 + 1) = xmmword_25B5F1340;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1] - *a1;
  __p = v7;
  if (v9)
  {
    unint64_t v10 = 0;
    float32x2_t v11 = v7 + 8;
    float32x4_t v41 = vsubq_f32(a2[1], *a2);
    float v12 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v41, v41)));
    unint64_t v42 = 0x4EC4EC4EC4EC4EC5 * (v9 >> 4);
    unsigned int v13 = -1;
    float v14 = -1.0;
    float v15 = 3.4028e38;
    int v16 = 2;
    uint64_t v43 = v8;
    do
    {
      if (*(float *)(v8 + 208 * v10 + 160) >= a4
        && (float)(vaddv_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)(v8 + 208 * v10 + 176)))
                 / (float)(v12
                         * sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(*(float32x4_t *)(v8 + 208 * v10 + 176), *(float32x4_t *)(v8 + 208 * v10 + 176)))))) >= 0.86603)
      {
        float32x4_t v17 = (float32x2_t *)(v8 + 208 * v10);
        long long v18 = v17 + 8;
        float32x2_t v19 = v17 + 10;
        int32x2_t v20 = sub_25B3FAE64(a3, v10);
        float32x4_t v21 = __p;
        do
        {
          uint64_t v22 = *v21;
          float32x4_t v23 = a2[v22];
          float32x4_t v24 = a2[v21[1]];
          float v25 = 0.0;
          if (!v20)
          {
            float32x4_t v44 = a2[v22];
            float32x4_t v45 = a2[v21[1]];
            float v25 = sub_25B470C6C(*v18, *v19, vmul_f32(vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32), (float32x2_t)0x3F0000003F000000));
            float32x4_t v23 = v44;
            float32x4_t v24 = v45;
          }
          float32x4_t v26 = vsubq_f32(v23, v24);
          float32x4_t v27 = vmulq_f32(v26, v26);
          float v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0])* 0.2;
          if (v25 < v28) {
            int v29 = 1;
          }
          else {
            int v29 = 2;
          }
          if (v29 <= v16)
          {
            if (v25 >= v28)
            {
              if (v25 < v15)
              {
                int v16 = 2;
                unsigned int v13 = v10;
                float v15 = v25;
              }
            }
            else
            {
              float32x4_t v30 = *(float32x4_t *)v18->f32;
              float32x4_t v31 = vsubq_f32(*(float32x4_t *)v18->f32, v23);
              float32x4_t v32 = vsubq_f32(*(float32x4_t *)v19->f32, *(float32x4_t *)v18->f32);
              float32x4_t v33 = vmulq_f32(v31, v32);
              double v34 = v32.f32[0] * v32.f32[0] + v32.f32[1] * v32.f32[1];
              v31.f32[0] = (float)-(float)(v33.f32[1] + (float)(v31.f32[0] * v32.f32[0])) / v34;
              *(float32x2_t *)v33.f32 = vmla_n_f32(*v18, *(float32x2_t *)v32.f32, v31.f32[0]);
              v33.i32[2] = 0;
              float32x4_t v35 = vsubq_f32(*(float32x4_t *)v18->f32, v24);
              v35.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v35, v32).i32[1]) + (float)(v35.f32[0] * v32.f32[0]))
                         / v34;
              *(float32x2_t *)v30.f32 = vmla_n_f32(*v18, *(float32x2_t *)v32.f32, v35.f32[0]);
              v30.i32[2] = 0;
              float32x4_t v36 = vsubq_f32(v33, v30);
              float v37 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v36, v36)));
              if (v37 > v14)
              {
                int v16 = 1;
                unsigned int v13 = v10;
                float v14 = v37;
              }
            }
          }
          else
          {
            int v16 = 1;
          }
          v21 += 2;
        }
        while (v21 != v11);
      }
      ++v10;
      uint64_t v8 = v43;
    }
    while (v42 > v10);
  }
  else
  {
    float v14 = -1.0;
    unsigned int v13 = -1;
  }
  operator delete(__p);
  return v13 | ((unint64_t)LODWORD(v14) << 32);
}

unint64_t sub_25B471014(uint64_t *a1, uint64_t a2, void *a3, float a4)
{
  unint64_t v6 = (int *)operator new(0x20uLL);
  *(_OWORD *)unint64_t v6 = xmmword_25B5F1330;
  *((_OWORD *)v6 + 1) = xmmword_25B5F1340;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1] - *a1;
  __p = v6;
  if (v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = v6 + 8;
    unint64_t v48 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 4);
    unsigned int v11 = -1;
    float v12 = -1.0;
    float v13 = 3.4028e38;
    int v14 = 2;
    float v15 = 3.4028e38;
    uint64_t v49 = v7;
    while (*(float *)(v7 + 208 * v9 + 160) < a4)
    {
      float v16 = v12;
LABEL_24:
      ++v9;
      float v12 = v16;
      uint64_t v7 = v49;
      if (v48 <= v9) {
        goto LABEL_27;
      }
    }
    float32x4_t v17 = (float32x2_t *)(v7 + 208 * v9);
    long long v18 = v17 + 8;
    float32x2_t v19 = v17 + 10;
    int32x2_t v20 = sub_25B3FAE64(a3, v9);
    float32x4_t v21 = __p;
    while (1)
    {
      uint64_t v22 = *v21;
      float32x4_t v23 = *(float32x4_t *)(a2 + 16 * v22);
      float32x4_t v24 = *(float32x4_t *)(a2 + 16 * v21[1]);
      float v25 = 0.0;
      if (!v20)
      {
        float32x4_t v51 = *(float32x4_t *)(a2 + 16 * v22);
        float32x4_t v52 = *(float32x4_t *)(a2 + 16 * v21[1]);
        float v25 = sub_25B470C6C(*v18, *v19, vmul_f32(vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.f32), (float32x2_t)0x3F0000003F000000));
        float32x4_t v23 = v51;
        float32x4_t v24 = v52;
      }
      float32x4_t v26 = vsubq_f32(v23, v24);
      float32x4_t v27 = vmulq_f32(v26, v26);
      float v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
      int v29 = v25 < (float)(v28 * 0.2) ? 1 : 2;
      if (v25 < (float)(v28 * 0.05)) {
        int v29 = 0;
      }
      if (v29 > v14) {
        break;
      }
      if (v29 == 2)
      {
        if (v25 >= v15) {
          break;
        }
        int v14 = 2;
        unsigned int v11 = v9;
        float v16 = v12;
        float v15 = v25;
      }
      else if (v29 == 1)
      {
        float32x4_t v37 = *(float32x4_t *)v18->f32;
        float32x4_t v38 = vsubq_f32(*(float32x4_t *)v18->f32, v23);
        float32x4_t v39 = vsubq_f32(*(float32x4_t *)v19->f32, *(float32x4_t *)v18->f32);
        float32x4_t v40 = vmulq_f32(v38, v39);
        double v41 = v39.f32[0] * v39.f32[0] + v39.f32[1] * v39.f32[1];
        v38.f32[0] = (float)-(float)(v40.f32[1] + (float)(v38.f32[0] * v39.f32[0])) / v41;
        *(float32x2_t *)v40.f32 = vmla_n_f32(*v18, *(float32x2_t *)v39.f32, v38.f32[0]);
        v40.i32[2] = 0;
        float32x4_t v42 = vsubq_f32(*(float32x4_t *)v18->f32, v24);
        v42.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v42, v39).i32[1]) + (float)(v42.f32[0] * v39.f32[0])) / v41;
        *(float32x2_t *)v37.f32 = vmla_n_f32(*v18, *(float32x2_t *)v39.f32, v42.f32[0]);
        v37.i32[2] = 0;
        float32x4_t v43 = vsubq_f32(v40, v37);
        float v16 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v43, v43)));
        float v44 = (float)(v25 + 0.05) / (float)(v16 + 0.01);
        if (v44 >= v13) {
          break;
        }
        int v14 = 1;
        unsigned int v11 = v9;
        float v13 = v44;
      }
      else
      {
        float32x4_t v30 = *(float32x4_t *)v18->f32;
        float32x4_t v31 = vsubq_f32(*(float32x4_t *)v18->f32, v23);
        float32x4_t v32 = vsubq_f32(*(float32x4_t *)v19->f32, *(float32x4_t *)v18->f32);
        float32x4_t v33 = vmulq_f32(v31, v32);
        double v34 = v32.f32[0] * v32.f32[0] + v32.f32[1] * v32.f32[1];
        v31.f32[0] = (float)-(float)(v33.f32[1] + (float)(v31.f32[0] * v32.f32[0])) / v34;
        *(float32x2_t *)v33.f32 = vmla_n_f32(*v18, *(float32x2_t *)v32.f32, v31.f32[0]);
        v33.i32[2] = 0;
        float32x4_t v35 = vsubq_f32(*(float32x4_t *)v18->f32, v24);
        v35.f32[0] = (float)-(float)(COERCE_FLOAT(vmulq_f32(v35, v32).i32[1]) + (float)(v35.f32[0] * v32.f32[0])) / v34;
        *(float32x2_t *)v30.f32 = vmla_n_f32(*v18, *(float32x2_t *)v32.f32, v35.f32[0]);
        v30.i32[2] = 0;
        float32x4_t v36 = vsubq_f32(v33, v30);
        float v16 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v36, v36)));
        if (v16 <= v12) {
          break;
        }
        int v14 = 0;
        unsigned int v11 = v9;
      }
LABEL_23:
      v21 += 2;
      float v12 = v16;
      if (v21 == v10) {
        goto LABEL_24;
      }
    }
    float v16 = v12;
    goto LABEL_23;
  }
  float v16 = -1.0;
  unsigned int v11 = -1;
LABEL_27:
  operator delete(__p);
  return v11 | ((unint64_t)LODWORD(v16) << 32);
}

void *sub_25B471374(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_25B41D410(result, a4);
    uint64_t result = (void *)sub_25B41D29C(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25B4713D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_25B41D070(&a9);
  _Unwind_Resume(a1);
}

void sub_25B472F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  operator delete(v64);
  if (__p) {
    operator delete(__p);
  }
  sub_25B4732A0((uint64_t)&STACK[0x220]);
  if (v63) {
    operator delete(v63);
  }

  a59 = (uint64_t)&a43;
  sub_25B413C78((void ***)&a59);
  a59 = (uint64_t)&a46;
  sub_25B413BE8((void ***)&a59);

  _Unwind_Resume(a1);
}

uint64_t sub_25B4732A0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  float32x2_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      float32x2_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_25B473368(void *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 16 * (v4 - v5) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x80)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      float32x4_t v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        uint64_t v86 = a1 + 3;
        *(void *)&long long v84 = sub_25B3FCAD4(v25);
        *((void *)&v84 + 1) = v84 + 8 * v22;
        *(void *)&long long v85 = *((void *)&v84 + 1);
        *((void *)&v85 + 1) = v84 + 8 * v26;
        int v83 = operator new(0x1000uLL);
        sub_25B468624(&v84, &v83);
        uint64_t v27 = a1[2];
        int v29 = (char *)*((void *)&v84 + 1);
        float v28 = (char *)v84;
        float32x4_t v31 = (char *)*((void *)&v85 + 1);
        float32x4_t v30 = (char *)v85;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              float32x4_t v38 = (char *)sub_25B3FCAD4(v37);
              float32x4_t v40 = v38;
              int v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              float32x4_t v30 = v29;
              if (!v35)
              {
                float32x4_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                float32x4_t v43 = v29;
                float v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)float32x4_t v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              float32x4_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              float v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              double v34 = &v30[8 * (v33 >> 1)];
              int v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              float32x4_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v84 = v28;
        *((void *)&v84 + 1) = v29;
        *(void *)&long long v85 = v30;
        *((void *)&v85 + 1) = v31;
        long long v48 = v84;
        long long v49 = v85;
        *(void *)&long long v84 = *a1;
        double v47 = (void *)v84;
        *((void *)&v84 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v84 = operator new(0x1000uLL);
        sub_25B468624(a1, &v84);
LABEL_60:
        unint64_t v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v84 = operator new(0x1000uLL);
      sub_25B46850C((uint64_t)a1, &v84);
      float32x2_t v61 = (void *)a1[1];
      unint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      int32x2_t v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          float32x4_t v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            int32x2_t v62 = (char *)a1[1];
          }
          unint64_t v4 = &v70[v71];
          float32x2_t v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v76 = 1;
        }
        else {
          unint64_t v76 = (uint64_t)&v4[-*a1] >> 2;
        }
        float32x4_t v51 = (char *)sub_25B3FCAD4(v76);
        float32x4_t v52 = &v51[8 * (v76 >> 2)];
        unsigned __int8 v54 = &v51[8 * v77];
        float32x2_t v78 = (uint64_t *)a1[1];
        unint64_t v4 = v52;
        uint64_t v79 = a1[2] - (void)v78;
        if (v79)
        {
          unint64_t v4 = &v52[v79 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v80 = 8 * (v79 >> 3);
          uint64_t v81 = &v51[8 * (v76 >> 2)];
          do
          {
            uint64_t v82 = *v78++;
            *(void *)uint64_t v81 = v82;
            v81 += 8;
            v80 -= 8;
          }
          while (v80);
        }
LABEL_46:
        float32x4_t v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          unint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 128;
      uint64_t v11 = *(void *)v5;
      uint64_t v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          float32x2_t v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            float32x4_t v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            float32x4_t v21 = (char *)a1[1];
          }
          unint64_t v4 = &v19[v20];
          float32x2_t v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        float32x4_t v51 = (char *)sub_25B3FCAD4(v50);
        float32x4_t v52 = &v51[8 * (v50 >> 2)];
        unsigned __int8 v54 = &v51[8 * v53];
        float32x4_t v55 = (uint64_t *)a1[1];
        unint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          unint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          float32x4_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)float32x4_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)unint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  float32x4_t v73 = (_OWORD *)(*(void *)&v5[(v8 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v8 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v75 = *(_OWORD *)(a2 + 16);
  *float32x4_t v73 = *(_OWORD *)a2;
  v73[1] = v75;
  ++a1[5];
  return result;
}

void sub_25B473760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_25B473798(void *a1, int a2)
{
  float32x2_t v3 = sub_25B3FAE64(a1, a2);
  if (v3)
  {
    sub_25B474498((uint64_t)&__p, a1, v3);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_25B4737E4(float32x4_t *a1, void *a2, unsigned int a3, void *a4, void *a5, double a6, double a7)
{
  id v9 = a5;
  uint64_t v177 = a4;
  uint64_t v10 = (uint64_t **)a4[2];
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    while (1)
    {
      BOOL v14 = objc_msgSend_objectAtIndexedSubscript_(v9, v8, *((int *)v10 + 4));
      objc_msgSend_quad(v14, v15, v16);
      float v191 = v17;
      objc_msgSend_quad(v14, v18, v19);
      float v190 = v20;
      objc_msgSend_quad(v14, v21, v22);
      float v182 = v23;
      objc_msgSend_quad(v14, v24, v25);
      if (sqrtf((float)((float)(v190 - *((float *)&a6 + 1)) * (float)(v190 - *((float *)&a6 + 1)))+ (float)((float)(v191 - *(float *)&a6) * (float)(v191 - *(float *)&a6))) < 0.01)break; {
      if (sqrtf((float)((float)(v26 - *((float *)&a6 + 1)) * (float)(v26 - *((float *)&a6 + 1)))+ (float)((float)(v182 - *(float *)&a6) * (float)(v182 - *(float *)&a6))) < 0.01)
      }
      {
        uint64_t v29 = *((unsigned int *)v10 + 4);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v35 = ((char *)v12 - v13) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v11 - (void)v13) >> 2 > v36) {
            unint64_t v36 = (uint64_t)(v11 - (void)v13) >> 2;
          }
          if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v36;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v37 = (uint64_t *)(v33 + 8 * v35);
          *unint64_t v37 = (v29 << 32) | 1;
          float32x4_t v30 = v37 + 1;
          if (v12 != (uint64_t *)v13)
          {
            do
            {
              uint64_t v39 = *--v12;
              *--unint64_t v37 = v39;
            }
            while (v12 != (uint64_t *)v13);
LABEL_34:
            uint64_t v12 = (uint64_t *)v13;
          }
LABEL_35:
          uint64_t v13 = (char *)v37;
          unint64_t v11 = v33 + 8 * v34;
          if (v12) {
            operator delete(v12);
          }
          goto LABEL_37;
        }
        uint64_t v28 = (v29 << 32) | 1;
        goto LABEL_9;
      }
LABEL_10:
      float32x4_t v30 = v12;
LABEL_37:

      uint64_t v10 = (uint64_t **)*v10;
      uint64_t v12 = v30;
      if (!v10) {
        goto LABEL_40;
      }
    }
    uint64_t v27 = *((unsigned int *)v10 + 4);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v31 = ((char *)v12 - v13) >> 3;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v11 - (void)v13) >> 2 > v32) {
        unint64_t v32 = (uint64_t)(v11 - (void)v13) >> 2;
      }
      if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v37 = (uint64_t *)(v33 + 8 * v31);
      *unint64_t v37 = v27 << 32;
      float32x4_t v30 = v37 + 1;
      if (v12 != (uint64_t *)v13)
      {
        do
        {
          uint64_t v38 = *--v12;
          *--unint64_t v37 = v38;
        }
        while (v12 != (uint64_t *)v13);
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v28 = v27 << 32;
LABEL_9:
    *v12++ = v28;
    goto LABEL_10;
  }
  float32x4_t v30 = 0;
  uint64_t v13 = 0;
LABEL_40:

  unint64_t v41 = (char *)v30 - v13;
  if ((unint64_t)((char *)v30 - v13) >= 0x19)
  {
    printf("WARNING: it looks something wrong! One wall seems to connect with more than 3 other walls");
    goto LABEL_42;
  }
  if (v41 < 9)
  {
    if (v41 != 8)
    {
LABEL_42:
      uint64_t v42 = 0;
      if (!v13) {
        goto LABEL_95;
      }
      goto LABEL_94;
    }
    int v88 = *((_DWORD *)v13 + 1);
    uint64_t v89 = *(int *)v13;
    if ((int)v89 >= -1) {
      int v90 = (v89 + 1) & 1;
    }
    else {
      int v90 = -((v89 + 1) & 1);
    }
    float32x4_t v91 = objc_msgSend_objectAtIndexedSubscript_(v9, v40, v88);
    objc_msgSend_quad(v91, v92, v93);
    int v204 = v94;
    unsigned __int32 v206 = v95;
    uint64_t v203 = v96;
    unint64_t v205 = v97;
    int v208 = v98;
    int v210 = v99;
    uint64_t v207 = v100;
    uint64_t v209 = v101;
    long long v186 = *((_OWORD *)&v203 + v89);
    objc_msgSend_quad(v91, v102, v103);
    int v196 = v104;
    int v198 = v105;
    uint64_t v195 = v106;
    uint64_t v197 = v107;
    int v200 = v108;
    int v202 = v109;
    uint64_t v199 = v110;
    uint64_t v201 = v111;
    float v112 = *((float *)&v195 + 4 * v89 + 1);
    objc_msgSend_quad(v91, v113, v114);
    int v204 = v115;
    unsigned __int32 v206 = v116;
    uint64_t v203 = v117;
    unint64_t v205 = v118;
    __n128 v193 = *((__n128 *)&v203 + v90);
    objc_msgSend_quad(v91, v119, v120);
    int v196 = DWORD2(v121);
    uint64_t v122 = v90;
    int v198 = v123;
    uint64_t v195 = v121;
    uint64_t v197 = v124;
    LODWORD(v121) = *((_DWORD *)&v195 + 4 * v90 + 1);
    v125.n128_f32[0] = v193.n128_f32[0] - *(float *)&v186;
    long long v172 = v121;
    float v126 = vmlas_n_f32(vmuls_lane_f32(*(float *)&v121 - v112, *(float32x2_t *)&a7, 1), v193.n128_f32[0] - *(float *)&v186, *(float *)&a7);
    float v180 = *(float *)&v121 - v112;
    __n128 v183 = v125;
    float v127 = sqrtf(vmlas_n_f32(vmuls_lane_f32(*((float *)&a7 + 1), *(float32x2_t *)&a7, 1), *(float *)&a7, *(float *)&a7))
         * sqrtf((float)(v180 * v180) + (float)(v125.n128_f32[0] * v125.n128_f32[0]));
    BOOL v128 = v126 < (float)(v127 + 0.001) && (float)(v127 + -0.001) < v126;
    sub_25B473798(v177, v88);
    if (a3)
    {
      if (v128)
      {
        uint64_t v131 = *a2;
LABEL_74:
        *(_DWORD *)(v131 + 16) = v88;
        goto LABEL_81;
      }
      float v148 = operator new(0x18uLL);
      v148[4] = v88;
      uint64_t v149 = *a2;
      *(void *)float v148 = *a2;
      *((void *)v148 + 1) = a2;
      *(void *)(v149 + 8) = v148;
      *a2 = v148;
      uint64_t v150 = a2[2] + 1;
    }
    else
    {
      if (v128)
      {
        uint64_t v131 = a2[1];
        goto LABEL_74;
      }
      uint64_t v151 = operator new(0x18uLL);
      v151[4] = v88;
      uint64_t v152 = (void *)a2[1];
      *(void *)uint64_t v151 = a2;
      *((void *)v151 + 1) = v152;
      *uint64_t v152 = v151;
      uint64_t v150 = a2[2] + 1;
      a2[1] = v151;
    }
    a2[2] = v150;
LABEL_81:
    objc_msgSend_quad(v91, v129, v130, v172);
    int v204 = v155;
    unsigned __int32 v206 = v156;
    uint64_t v203 = v157;
    unint64_t v205 = v158;
    long long v189 = *((_OWORD *)&v203 + v122);
    if (a3)
    {
      if (v128)
      {
        uint64_t v159 = a1->i64[0];
LABEL_86:
        *(_OWORD *)(v159 + 16) = v189;
LABEL_90:
        objc_msgSend_quad(v91, v153, v154);
        int v204 = v165;
        unsigned __int32 v206 = v166;
        uint64_t v203 = v167;
        unint64_t v205 = v168;
        if (sub_25B474378(a1, a3, *((double *)&v203 + 2 * v122)))
        {
          uint64_t v42 = 1;
        }
        else
        {
          __n128 v169 = v193;
          v169.n128_u32[1] = v173;
          __n128 v170 = v183;
          v170.n128_f32[1] = v180;
          uint64_t v42 = sub_25B4737E4(a1, a2, a3, v177, v9, v169, v170);
        }

LABEL_94:
        operator delete(v13);
        goto LABEL_95;
      }
      uint64_t v160 = operator new(0x20uLL);
      v160[1] = v189;
      uint64_t v161 = a1->i64[0];
      *(void *)uint64_t v160 = a1->i64[0];
      *((void *)v160 + 1) = a1;
      *(void *)(v161 + 8) = v160;
      a1->i64[0] = (uint64_t)v160;
      uint64_t v162 = a1[1].i64[0] + 1;
    }
    else
    {
      if (v128)
      {
        uint64_t v159 = a1->i64[1];
        goto LABEL_86;
      }
      uint64_t v163 = operator new(0x20uLL);
      v163[1] = v189;
      uint64_t v164 = (void *)a1->i64[1];
      *(void *)uint64_t v163 = a1;
      *((void *)v163 + 1) = v164;
      *uint64_t v164 = v163;
      uint64_t v162 = a1[1].i64[0] + 1;
      a1->i64[1] = (uint64_t)v163;
    }
    a1[1].i64[0] = v162;
    goto LABEL_90;
  }
  if (v13 == (char *)v30) {
    goto LABEL_42;
  }
  float v43 = sqrtf(vmlas_n_f32(vmuls_lane_f32(*((float *)&a7 + 1), *(float32x2_t *)&a7, 1), *(float *)&a7, *(float *)&a7));
  float v44 = (int *)v13;
  while (1)
  {
    int v45 = v44[1];
    uint64_t v46 = *v44;
    int v47 = (int)v46 >= -1 ? (v46 + 1) & 1 : -((v46 + 1) & 1);
    long long v48 = objc_msgSend_objectAtIndexedSubscript_(v9, v40, v45);
    objc_msgSend_quad(v48, v49, v50);
    int v204 = v51;
    unsigned __int32 v206 = v52;
    uint64_t v203 = v53;
    unint64_t v205 = v54;
    int v208 = v55;
    int v210 = v56;
    uint64_t v207 = v57;
    uint64_t v209 = v58;
    long long v185 = *((_OWORD *)&v203 + v46);
    objc_msgSend_quad(v48, v59, v60);
    int v196 = v61;
    int v198 = v62;
    int v200 = v63;
    int v202 = v64;
    uint64_t v195 = v65;
    uint64_t v197 = v66;
    uint64_t v199 = v67;
    uint64_t v201 = v68;
    float v69 = *((float *)&v195 + 4 * v46 + 1);
    objc_msgSend_quad(v48, v70, v71);
    int v204 = v72;
    unsigned __int32 v206 = v73;
    uint64_t v203 = v74;
    unint64_t v205 = v75;
    __n128 v192 = *((__n128 *)&v203 + v47);
    objc_msgSend_quad(v48, v76, v77);
    int v196 = v78;
    int v198 = v79;
    uint64_t v195 = v80;
    uint64_t v197 = v81;
    v82.n128_f32[0] = v192.n128_f32[0] - *(float *)&v185;
    float v83 = COERCE_FLOAT(HIDWORD(*(&v195 + 2 * v47))) - v69;
    float v84 = (float)(*((float *)&a7 + 1) * v83) + (float)(*(float *)&a7 * (float)(v192.n128_f32[0] - *(float *)&v185));
    *(float *)&uint64_t v81 = v43 * sqrtf((float)(v83 * v83) + (float)(v82.n128_f32[0] * v82.n128_f32[0]));
    float v85 = *(float *)&v81 + -0.001;
    float v86 = *(float *)&v81 + 0.001;
    if (v85 < v84 && v84 < v86) {
      break;
    }

    v44 += 2;
    if (v44 == (int *)v30) {
      goto LABEL_42;
    }
  }
  long long v181 = *((_OWORD *)&v195 + v47);
  float v184 = COERCE_FLOAT(HIDWORD(*(&v195 + 2 * v47))) - v69;
  __n128 v187 = v82;
  sub_25B473798(v177, v45);
  long long v134 = a2 + 1;
  if (a3) {
    long long v134 = a2;
  }
  *(_DWORD *)(*v134 + 16) = v45;
  objc_msgSend_quad(v48, v132, v133);
  __n128 v136 = v192;
  v136.n128_u32[1] = DWORD1(v181);
  __n128 v137 = v187;
  v137.n128_f32[1] = v184;
  int v204 = v138;
  unsigned __int32 v206 = v135.n128_u32[2];
  uint64_t v203 = v139;
  unint64_t v205 = v135.n128_u64[0];
  __n128 v140 = *((__n128 *)&v203 + v47);
  uint64_t v141 = (float32x4_t *)&a1->u32[2];
  if (a3) {
    uint64_t v141 = a1;
  }
  *(__n128 *)(v141->i64[0] + 16) = v140;
  __n128 v188 = v137;
  __n128 v194 = v136;
  v140.n128_u64[0] = v136.n128_u64[0];
  v135.n128_u64[0] = v137.n128_u64[0];
  sub_25B4737E4(a1, a2, a3, v177, v9, v140, v135);
  objc_msgSend_quad(v48, v142, v143);
  int v204 = v144;
  unsigned __int32 v206 = v145;
  uint64_t v203 = v146;
  unint64_t v205 = v147;
  if (sub_25B474378(a1, a3, *((double *)&v203 + 2 * v47))) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = sub_25B4737E4(a1, a2, a3, v177, v9, v194, v188);
  }

  if (v13) {
    goto LABEL_94;
  }
LABEL_95:

  return v42;
}

void sub_25B474068(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }

  _Unwind_Resume(a1);
}

void *sub_25B474108(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)unint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_25B474190(_Unwind_Exception *a1)
{
  sub_25B474240(v1);
  _Unwind_Resume(a1);
}

void *sub_25B4741A4(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(void *)unint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_25B47422C(_Unwind_Exception *a1)
{
  sub_25B474240(v1);
  _Unwind_Resume(a1);
}

void *sub_25B474240(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_25B4742A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_25B474240(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B474328(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_25B474240((void *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B474378(float32x4_t *a1, char a2, double a3)
{
  if (a1[1].i64[0] >= 3uLL)
  {
    uint64_t v4 = a1->i64[1];
    if (a2)
    {
      while ((float32x4_t *)v4 != a1)
      {
        uint64_t v5 = *(float32x4_t **)(v4 + 8);
        if ((float32x4_t *)v5->i64[1] == a1) {
          break;
        }
        float32x4_t v6 = *(float32x4_t *)(v4 + 16);
        float32x2_t v7 = (float32x2_t)vsubq_f32(v5[1], v6).u64[0];
        v6.f32[0] = *(float *)&a3 - v6.f32[0];
        float v8 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a3 + 1) - COERCE_FLOAT(HIDWORD(*(void *)(v4 + 16))), v7, 1), v6.f32[0], v7.f32[0]);
        float32x2_t v9 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
        v7.f32[0] = *((float *)&a3 + 1) - COERCE_FLOAT(HIDWORD(*(void *)(v4 + 16)));
        v9.i32[0] = v6.i32[0];
        *(float32x2_t *)v6.f32 = vsqrt_f32(vmla_f32(vmul_f32(v7, v7), v9, v9));
        float v10 = vmuls_lane_f32(v6.f32[0], *(float32x2_t *)v6.f32, 1);
        float v11 = v10 + -0.001;
        float v12 = v10 + 0.001;
        BOOL v14 = v6.f32[0] < v6.f32[1] && v11 < v8 && v8 < v12;
        uint64_t v4 = *(void *)(v4 + 8);
        if (v14) {
          return 1;
        }
      }
    }
    else
    {
      while (a1 != (float32x4_t *)v4)
      {
        a1 = (float32x4_t *)a1->i64[0];
        if (a1->i64[0] == v4) {
          break;
        }
        float32x4_t v15 = a1[1];
        float32x2_t v16 = (float32x2_t)vsubq_f32(*(float32x4_t *)(a1->i64[0] + 16), v15).u64[0];
        v15.f32[0] = *(float *)&a3 - v15.f32[0];
        float v17 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a3 + 1) - COERCE_FLOAT(HIDWORD(a1[1].i64[0])), v16, 1), v15.f32[0], v16.f32[0]);
        float32x2_t v18 = (float32x2_t)vdup_lane_s32((int32x2_t)v16, 0);
        v16.f32[0] = *((float *)&a3 + 1) - COERCE_FLOAT(HIDWORD(a1[1].i64[0]));
        v18.i32[0] = v15.i32[0];
        *(float32x2_t *)v15.f32 = vsqrt_f32(vmla_f32(vmul_f32(v16, v16), v18, v18));
        float v19 = vmuls_lane_f32(v15.f32[0], *(float32x2_t *)v15.f32, 1);
        float v20 = v19 + -0.001;
        float v21 = v19 + 0.001;
        if (v15.f32[0] < v15.f32[1] && v20 < v17 && v17 < v21) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_25B474498(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  float32x4_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    float32x2_t v7 = v6;
    float32x4_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)__n128 result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void sub_25B474670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B47479C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float *sub_25B4747AC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  id v104 = a2;
  id v107 = a3;
  int v108 = a4;
  id v105 = a5;
  uint64_t v13 = a6;
  id v106 = a7;
  if (a1)
  {
    int v124 = 8210;
    uint64_t v125 = 0;
    uint64_t v110 = (float *)v13;
    kdebug_trace();
    uint64_t v111 = objc_opt_new();
    BOOL v14 = objc_opt_new();
    int v109 = objc_opt_new();
    float v17 = objc_msgSend_array(MEMORY[0x263EFF980], v15, v16);
    float v20 = objc_msgSend_array(MEMORY[0x263EFF980], v18, v19);
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    float v23 = objc_msgSend_walls(v13, v21, v22);
    uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v120, v128, 16);
    if (v25)
    {
      uint64_t v26 = *(void *)v121;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v121 != v26) {
            objc_enumerationMutation(v23);
          }
          uint64_t v28 = *(void *)(*((void *)&v120 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            objc_msgSend_addObject_(v20, v29, v28);
          }
          else {
            objc_msgSend_addObject_(v17, v29, v28);
          }
        }
        uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v30, (uint64_t)&v120, v128, 16);
      }
      while (v25);
    }

    sub_25B4E664C((uint64_t)v110, v17);
    uint64_t v31 = v108;
    if (v108) {
      uint64_t v31 = (void *)v108[14];
    }
    id v32 = v31;
    BOOL v35 = objc_msgSend_count(v32, v33, v34) == 0;

    if (v35)
    {
      sub_25B481B20(a1 + 440, v36, v37);
      sub_25B481B20(a1 + 504, v74, v75);
    }
    else
    {
      uint64_t v38 = objc_msgSend_walls(v110, v36, v37);
      uint64_t v103 = objc_msgSend_copy(v38, v39, v40);

      if (v110)
      {
        int v44 = *((_DWORD *)v110 + 3);
        float v43 = v110[4];
      }
      else
      {
        float v43 = 0.0;
        int v44 = 0;
      }
      int v45 = objc_msgSend_copy(v106, v41, v42);
      LODWORD(v46) = v44;
      sub_25B50349C(v45, v46, v43);
      kdebug_trace();
      if (v108)
      {
        uint64_t v47 = v108[4];
        uint64_t v48 = (v108[5] - v47) >> 4;
      }
      else
      {
        uint64_t v47 = 0;
        uint64_t v48 = 0;
      }
      sub_25B47F224(a1 + 8, v103, v107, v47, v48);
      if (v108)
      {
        uint64_t v49 = v108[4];
        uint64_t v50 = (v108[5] - v49) >> 4;
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v50 = 0;
      }
      sub_25B47F224(a1 + 224, v45, v107, v49, v50);
      kdebug_trace();
      kdebug_trace();
      id v51 = objc_alloc_init(NSDictionary);
      unsigned __int32 v52 = sub_25B43EB28(*(void *)(a1 + 568), v104, *(void **)(a1 + 48), *(void **)(a1 + 264), v105, 1);

      kdebug_trace();
      kdebug_trace();
      uint64_t v53 = objc_opt_new();
      int v55 = objc_msgSend_objectForKeyedSubscript_(v52, v54, @"windows");
      objc_msgSend_addObjectsFromArray_(v53, v56, (uint64_t)v55);

      uint64_t v58 = objc_msgSend_objectForKeyedSubscript_(v52, v57, @"doors");
      objc_msgSend_addObjectsFromArray_(v53, v59, (uint64_t)v58);

      uint64_t v60 = *(void **)(a1 + 48);
      int v63 = objc_msgSend_walls(v110, v61, v62);
      sub_25B480200((id *)(a1 + 440), v53, v60, v63);

      int v64 = objc_opt_new();
      uint64_t v66 = objc_msgSend_objectForKeyedSubscript_(v52, v65, @"opendoors");
      objc_msgSend_addObjectsFromArray_(v64, v67, (uint64_t)v66);

      uint64_t v68 = *(void **)(a1 + 264);
      uint64_t v71 = objc_msgSend_openings(v110, v69, v70);
      sub_25B480200((id *)(a1 + 504), v64, v68, v71);

      kdebug_trace();
    }
    for (unint64_t j = 0; objc_msgSend_count(*(void **)(a1 + 472), v72, v73) > j; ++j)
    {
      int v78 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 472), v77, j);
      BOOL v81 = objc_msgSend_type(v78, v79, v80) == 1;

      float v84 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 472), v82, j);
      if (v81) {
        objc_msgSend_addObject_(v111, v83, (uint64_t)v84);
      }
      else {
        objc_msgSend_addObject_(v14, v83, (uint64_t)v84);
      }
    }
    objc_msgSend_addObjectsFromArray_(v109, v77, *(void *)(a1 + 536));
    sub_25B4E665C((uint64_t)v110, v111);
    sub_25B477C30((uint64_t)v110, v14);
    sub_25B477C10((uint64_t)v110, v109);
    float32x4_t v87 = objc_msgSend_array(MEMORY[0x263EFF980], v85, v86);
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    int v90 = objc_msgSend_walls(v110, v88, v89);
    uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v91, (uint64_t)&v116, v127, 16);
    if (v93)
    {
      uint64_t v94 = *(void *)v117;
      do
      {
        for (uint64_t k = 0; k != v93; ++k)
        {
          if (*(void *)v117 != v94) {
            objc_enumerationMutation(v90);
          }
          objc_msgSend_addObject_(v87, v92, *(void *)(*((void *)&v116 + 1) + 8 * k));
        }
        uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v90, v92, (uint64_t)&v116, v127, 16);
      }
      while (v93);
    }

    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    id v96 = v20;
    uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v97, (uint64_t)&v112, v126, 16);
    if (v99)
    {
      uint64_t v100 = *(void *)v113;
      do
      {
        for (uint64_t m = 0; m != v99; ++m)
        {
          if (*(void *)v113 != v100) {
            objc_enumerationMutation(v96);
          }
          objc_msgSend_addObject_(v87, v98, *(void *)(*((void *)&v112 + 1) + 8 * m));
        }
        uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v98, (uint64_t)&v112, v126, 16);
      }
      while (v99);
    }

    sub_25B4E664C((uint64_t)v110, v87);
    sub_25B400F2C((uint64_t)&v124);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v110 = 0;
  }

  return v110;
}

void sub_25B474EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_25B400F2C((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_25B4753F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B47544C(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_msgSend_count(v3, v4, v5) == 8)
  {
    for (uint64_t i = 0; i != 8; ++i)
    {
      unint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(v3, v6, i);
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        break;
      }
      objc_msgSend_objectAtIndexedSubscript_(v3, v10, i);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v11, v12, v13) != 3)
      {

        goto LABEL_8;
      }
      float32x4_t v15 = objc_msgSend_objectAtIndexedSubscript_(v11, v14, 0);
      objc_msgSend_floatValue(v15, v16, v17);
      *(void *)&long long v32 = v18;
      float v20 = objc_msgSend_objectAtIndexedSubscript_(v11, v19, 1);
      objc_msgSend_floatValue(v20, v21, v22);
      int v31 = v23;
      uint64_t v25 = objc_msgSend_objectAtIndexedSubscript_(v11, v24, 2);
      objc_msgSend_floatValue(v25, v26, v27);
      long long v28 = v32;
      DWORD1(v28) = v31;
      DWORD2(v28) = v29;
      *(_OWORD *)(a2 + 16 * i) = v28;
    }
  }
  else
  {
LABEL_8:
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_25B4755A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B475860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_25B476104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B4761C0(void *a1)
{
  id v2 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A502170))
  {
    objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v1, @"Cabinet", @"Refrigerator", @"Shelf", @"Stove", @"Bed", @"Sink", @"Washer", @"Toilet", @"Bathtub", @"Oven", @"Dishwasher", @"Table", @"Sofa", @"Chair", @"Fireplace", @"Stool", @"Screen",
      @"Door",
      @"Window",
      @"Cuboid",
      @"Stairs",
      @"BuildInCabinet",
      @"Storage",
    qword_26A502168 = 0);
    __cxa_guard_release(&qword_26A502170);
  }
  uint64_t v3 = objc_msgSend_containsObject_((void *)qword_26A502168, v1, (uint64_t)v2);

  return v3;
}

void sub_25B476334(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26A502170);

  _Unwind_Resume(a1);
}

uint64_t sub_25B476358(void *a1)
{
  id v2 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A502180))
  {
    qword_26A502178 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v1, @"unknown", @"online", @"offline", 0);
    __cxa_guard_release(&qword_26A502180);
  }
  uint64_t v3 = objc_msgSend_containsObject_((void *)qword_26A502178, v1, (uint64_t)v2);

  return v3;
}

void sub_25B476404(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26A502180);

  _Unwind_Resume(a1);
}

void sub_25B476428(void *a1, _OWORD *a2)
{
  id v29 = a1;
  if (objc_msgSend_count(v29, v3, v4) == 4)
  {
    float32x4_t v6 = objc_msgSend_objectAtIndexedSubscript_(v29, v5, 0);
    objc_msgSend_floatValue(v6, v7, v8);
    unsigned int v28 = v9;
    id v11 = objc_msgSend_objectAtIndexedSubscript_(v29, v10, 1);
    objc_msgSend_floatValue(v11, v12, v13);
    unsigned int v27 = v14;
    uint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(v29, v15, 2);
    objc_msgSend_floatValue(v16, v17, v18);
    unsigned int v26 = v19;
    float v21 = objc_msgSend_objectAtIndexedSubscript_(v29, v20, 3);
    objc_msgSend_floatValue(v21, v22, v23);
    *(void *)&long long v24 = __PAIR64__(v27, v28);
    *((void *)&v24 + 1) = __PAIR64__(v25, v26);
    *a2 = v24;
  }
}

void sub_25B47651C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_25B4765F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B476900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B476B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B476C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B476EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4776B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4779EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477A04(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  if (a1 && sub_25B477AA8(v8))
  {
    float32x4_t v6 = objc_msgSend_numberWithInt_(NSNumber, v5, a2);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v7, (uint64_t)v6, v8);
  }
}

void sub_25B477A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B477AA8(void *a1)
{
  id v2 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A502190))
  {
    qword_26A502188 = objc_msgSend_setWithObjects_(MEMORY[0x263EFFA08], v1, @"ChairGroup", @"LShapeGroup", @"UShapeGroup", @"FloorPlan", 0);
    __cxa_guard_release(&qword_26A502190);
  }
  uint64_t v3 = objc_msgSend_containsObject_((void *)qword_26A502188, v1, (uint64_t)v2);

  return v3;
}

void sub_25B477B5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26A502190);

  _Unwind_Resume(a1);
}

void sub_25B477B80(uint64_t a1, __n128 *a2, void *a3)
{
  id v9 = a3;
  if (a1)
  {
    float32x2_t v7 = sub_25B4454B4(a2, v5, v6);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 16), v8, (uint64_t)v7, v9);
  }
}

void sub_25B477BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B477C10(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_25B477C20(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_25B477C30(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

__n128 sub_25B477C40(void *a1)
{
  id v1 = a1;
  objc_msgSend_quad(v1, v2, v3);
  long long v8 = v4;
  objc_msgSend_quad(v1, v5, v6);

  return (__n128)v8;
}

void sub_25B477C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477C9C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  *(void *)&long long v4 = *(void *)a1;
  DWORD2(v4) = *(_DWORD *)(a1 + 8);
  long long v28 = v4;
  id v29 = v3;
  objc_msgSend_quad(v3, v5, v6);
  int v27 = v7;
  uint64_t v26 = *(void *)(a1 + 8);
  objc_msgSend_quad(v29, v8, v9);
  int8x16_t v25 = v10;
  uint64_t v24 = *(void *)(a1 + 8);
  objc_msgSend_quad(v29, v11, v12);
  int8x16_t v23 = v13;
  *(void *)&long long v14 = *(void *)a1;
  DWORD2(v14) = *(_DWORD *)(a1 + 8);
  long long v22 = v14;
  objc_msgSend_quad(v29, v15, v16);
  long long v17 = v28;
  DWORD2(v17) = v27;
  *(void *)&long long v18 = v26;
  *((void *)&v18 + 1) = vextq_s8(v25, v25, 8uLL).u64[0];
  *(void *)&long long v19 = v24;
  *((void *)&v19 + 1) = vextq_s8(v23, v23, 8uLL).u64[0];
  long long v20 = v22;
  DWORD2(v20) = v21;
  src[0] = v17;
  src[1] = v18;
  src[2] = v19;
  src[3] = v20;
  if (v29) {
    objc_copyStruct(v29 + 272, src, 64, 1, 0);
  }
}

void sub_25B477D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B477DB0(unint64_t *a1, uint64_t a2, float a3, float a4, __n128 a5, __n128 a6)
{
  a5.n128_u64[0] = *a1;
  a6.n128_u64[0] = a1[1];
  __n128 v6 = a5;
  v6.n128_f32[2] = a4;
  __n128 v7 = a6;
  v7.n128_f32[2] = a4;
  a6.n128_f32[2] = a3;
  a5.n128_f32[2] = a3;
  v8[0] = v6;
  v8[1] = v7;
  v8[2] = a6;
  _OWORD v8[3] = a5;
  if (a2) {
    objc_copyStruct((void *)(a2 + 272), v8, 64, 1, 0);
  }
}

void sub_25B477E0C(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v6 = *a2;
  float32x2_t v7 = a2[1];
  float32x2_t v8 = *a3;
  float32x2_t v9 = a3[1];
  sub_25B40D638();
  float32x2_t v12 = vsub_f32(v10, v11);
  float32x2_t v13 = vmul_f32(v12, v12);
  int32x2_t v14 = (int32x2_t)vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
  float32x2_t v15 = vsub_f32(v6, v7);
  float32x2_t v16 = vmul_f32(v15, v15);
  int32x2_t v17 = (int32x2_t)vadd_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1));
  sub_25B40D638();
  float32x2_t v20 = vsub_f32(v18, v19);
  float32x2_t v21 = vmul_f32(v20, v20);
  int32x2_t v22 = (int32x2_t)vadd_f32(v21, (float32x2_t)vdup_lane_s32((int32x2_t)v21, 1));
  float32x2_t v23 = vsub_f32(v8, v9);
  float32x2_t v24 = vmul_f32(v23, v23);
  int32x2_t v25 = (int32x2_t)vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1));
  float32x2_t v26 = vmul_f32(vadd_f32(v6, v7), (float32x2_t)0x3F0000003F000000);
  float32x2_t v27 = vsub_f32(v9, v8);
  float v28 = vaddv_f32(vmul_f32(vsub_f32(v26, v8), v27));
  float v29 = vaddv_f32(vmul_f32(v27, v27));
  if (v29 < 0.000001) {
    float v29 = 0.000001;
  }
  float v30 = v28 / v29;
  float32x2_t v31 = vadd_f32(v8, v9);
  float32x2_t v32 = vsub_f32(vmla_n_f32(v8, v27, v30), v26);
  float v33 = sqrtf(vaddv_f32(vmul_f32(v32, v32)));
  float32x2_t v34 = vmul_f32(v31, (float32x2_t)0x3F0000003F000000);
  float32x2_t v35 = vsub_f32(v7, v6);
  float v36 = vaddv_f32(vmul_f32(vsub_f32(v34, v6), v35));
  float v37 = vaddv_f32(vmul_f32(v35, v35));
  if (v37 < 0.000001) {
    float v37 = 0.000001;
  }
  float32x2_t v38 = vsub_f32(vmla_n_f32(v6, v35, v36 / v37), v34);
  float v39 = sqrtf(vaddv_f32(vmul_f32(v38, v38)));
  if (v39 >= v33) {
    float v40 = v33;
  }
  else {
    float v40 = v39;
  }
  float v41 = sub_25B3FCCE0(a2, a3, 0);
  int32x2_t v42 = (int32x2_t)vdiv_f32(vsqrt_f32((float32x2_t)vzip1_s32(v14, v22)), vmaxnm_f32(vsqrt_f32((float32x2_t)vzip1_s32(v17, v25)), (float32x2_t)vdup_n_s32(0x358637BDu)));
  *(int32x2_t *)a1 = v42;
  float v43 = *(float *)&v42.i32[1];
  if (*(float *)v42.i32 >= *(float *)&v42.i32[1]) {
    float v43 = *(float *)v42.i32;
  }
  *(float *)(a1 + 8) = v43;
  *(float *)(a1 + 12) = v33;
  *(float *)(a1 + 16) = v39;
  *(float *)(a1 + 20) = v40;
  *(float *)(a1 + 24) = v41;
  *(_DWORD *)(a1 + 28) = -1;
  *(_WORD *)(a1 + 32) = 0;
  *(int32x2_t *)(a1 + 36) = vrev64_s32(v42);
  *(float *)(a1 + 44) = v43;
  *(float *)(a1 + 48) = v39;
  *(float *)(a1 + 52) = v33;
  *(float *)(a1 + 56) = v40;
  *(float *)(a1 + 60) = v41;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 68) = 0;
}

void sub_25B477FD8(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v6 = *a2;
  float32x2_t v7 = a2[1];
  float32x2_t v8 = *a3;
  float32x2_t v9 = a3[1];
  sub_25B40D638();
  float32x2_t v12 = vsub_f32(v10, v11);
  int32x2_t v13 = (int32x2_t)vmul_f32(v12, v12);
  int32x2_t v14 = (int32x2_t)vadd_f32((float32x2_t)v13, (float32x2_t)vdup_lane_s32(v13, 1));
  float32x2_t v15 = vsub_f32(v6, v7);
  int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
  int32x2_t v17 = (int32x2_t)vadd_f32((float32x2_t)v16, (float32x2_t)vdup_lane_s32(v16, 1));
  sub_25B40D638();
  float32x2_t v20 = vsub_f32(v18, v19);
  int32x2_t v21 = (int32x2_t)vmul_f32(v20, v20);
  int32x2_t v22 = (int32x2_t)vadd_f32((float32x2_t)v21, (float32x2_t)vdup_lane_s32(v21, 1));
  float32x2_t v23 = vsub_f32(v8, v9);
  int32x2_t v24 = (int32x2_t)vmul_f32(v23, v23);
  int32x2_t v25 = (int32x2_t)vadd_f32((float32x2_t)v24, (float32x2_t)vdup_lane_s32(v24, 1));
  float32x2_t v26 = vmul_f32(vadd_f32(v6, v7), (float32x2_t)0x3F0000003F000000);
  float32x2_t v27 = vsub_f32(v9, v8);
  float v28 = vaddv_f32(vmul_f32(vsub_f32(v26, v8), v27));
  float v29 = vaddv_f32(vmul_f32(v27, v27));
  if (v29 < 0.000001) {
    float v29 = 0.000001;
  }
  float v30 = v28 / v29;
  float32x2_t v31 = vadd_f32(v8, v9);
  float32x2_t v32 = vsub_f32(vmla_n_f32(v8, v27, v30), v26);
  float v33 = sqrtf(vaddv_f32(vmul_f32(v32, v32)));
  float32x2_t v34 = vmul_f32(v31, (float32x2_t)0x3F0000003F000000);
  float32x2_t v35 = vsub_f32(v7, v6);
  float v36 = vaddv_f32(vmul_f32(vsub_f32(v34, v6), v35));
  float v37 = vaddv_f32(vmul_f32(v35, v35));
  if (v37 < 0.000001) {
    float v37 = 0.000001;
  }
  float32x2_t v38 = vsub_f32(vmla_n_f32(v6, v35, v36 / v37), v34);
  float v39 = sqrtf(vaddv_f32(vmul_f32(v38, v38)));
  if (v39 >= v33) {
    float v40 = v33;
  }
  else {
    float v40 = v39;
  }
  float v41 = sub_25B3FCCE0(a2, a3, 0);
  if ((float)(180.0 - v41) < v41) {
    float v41 = 180.0 - v41;
  }
  int32x2_t v42 = (int32x2_t)vdiv_f32(vsqrt_f32((float32x2_t)vzip1_s32(v14, v22)), vmaxnm_f32(vsqrt_f32((float32x2_t)vzip1_s32(v17, v25)), (float32x2_t)vdup_n_s32(0x358637BDu)));
  *(int32x2_t *)a1 = v42;
  float v43 = *(float *)&v42.i32[1];
  if (*(float *)v42.i32 >= *(float *)&v42.i32[1]) {
    float v43 = *(float *)v42.i32;
  }
  *(float *)(a1 + 8) = v43;
  *(float *)(a1 + 12) = v33;
  *(float *)(a1 + 16) = v39;
  *(float *)(a1 + 20) = v40;
  *(float *)(a1 + 24) = v41;
  *(_DWORD *)(a1 + 28) = -1;
  *(_WORD *)(a1 + 32) = 0;
  *(int32x2_t *)(a1 + 36) = vrev64_s32(v42);
  *(float *)(a1 + 44) = v43;
  *(float *)(a1 + 48) = v39;
  *(float *)(a1 + 52) = v33;
  *(float *)(a1 + 56) = v40;
  *(float *)(a1 + 60) = v41;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 68) = 0;
}

double sub_25B4781B8(float32x4_t *a1, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, __n128 a10)
{
  v42.columns[0] = *(simd_float4 *)a2;
  v42.columns[1] = *(simd_float4 *)(a2 + 16);
  v42.columns[0].i32[3] = 0;
  v42.columns[1].i32[3] = 0;
  v42.columns[2] = *(simd_float4 *)(a2 + 32);
  v42.columns[2].i32[3] = 0;
  a10.n128_f32[0] = (float)(a3 - 1);
  a10.n128_u32[2] = 0;
  a10.n128_u32[3] = 1.0;
  __n128 v11 = a10;
  v11.n128_u32[1] = 0;
  __n128 v32 = v11;
  a10.n128_f32[1] = (float)(a4 - 1);
  __n128 v33 = a10;
  a10.n128_u32[0] = 0;
  a10.n128_u32[2] = 0;
  __n128 v31 = a10;
  v42.columns[3] = (simd_float4)xmmword_25B5F12B0;
  simd_float4x4 v43 = __invert_f4(v42);
  uint64_t v12 = 0;
  long long v34 = xmmword_25B5F12B0;
  float32x4_t v35 = (float32x4_t)v32;
  __n128 v36 = v33;
  __n128 v37 = v31;
  do
  {
    *(float32x4_t *)((char *)&v38 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v43.columns[0], COERCE_FLOAT(*(long long *)((char *)&v34 + v12))), (float32x4_t)v43.columns[1], *(float32x2_t *)((char *)&v34 + v12), 1), (float32x4_t)v43.columns[2], *(float32x4_t *)((char *)&v34 + v12), 2), (float32x4_t)v43.columns[3], *(float32x4_t *)((char *)&v34 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  uint64_t v13 = 0;
  float32x4_t v14 = v38;
  float32x4_t v15 = v39;
  float32x4_t v16 = v40;
  __n128 v17 = v41;
  v14.i32[3] = 1.0;
  v15.i32[3] = 1.0;
  v16.i32[3] = 1.0;
  v17.n128_u32[3] = 1.0;
  float32x4_t v18 = *a1;
  float32x4_t v19 = a1[1];
  float32x4_t v20 = a1[2];
  float32x4_t v21 = a1[3];
  long long v34 = (__int128)v14;
  float32x4_t v35 = v15;
  __n128 v36 = (__n128)v16;
  __n128 v37 = v17;
  do
  {
    *(float32x4_t *)((char *)&v38 + v13) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(long long *)((char *)&v34 + v13))), v19, *(float32x2_t *)((char *)&v34 + v13), 1), v20, *(float32x4_t *)((char *)&v34 + v13), 2), v21, *(float32x4_t *)((char *)&v34 + v13), 3);
    v13 += 16;
  }
  while (v13 != 64);
  int32x4_t v22 = (int32x4_t)vsubq_f32(v40, v38);
  int8x16_t v23 = (int8x16_t)vsubq_f32(v39, v38);
  v24.i32[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  v24.i32[1] = v22.i32[0];
  float32x4_t v25 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
  v25.i32[1] = v23.i32[0];
  float32x2_t v26 = (float32x2_t)vdup_laneq_s32(v22, 2);
  v26.i32[0] = v22.i32[1];
  *(float32x2_t *)v25.f32 = vmla_f32(vmul_f32(v26, vneg_f32(*(float32x2_t *)v25.f32)), v24, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL));
  v25.i32[2] = vmlas_n_f32((float)-*(float *)&v23.i32[1] * *(float *)v22.i32, *(float *)&v22.i32[1], *(float *)v23.i32);
  int32x4_t v27 = (int32x4_t)vmulq_f32(v25, v25);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  float32x2_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  float32x2_t v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
  *(void *)&double result = vmulq_n_f32(v25, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]).u64[0];
  return result;
}

void sub_25B478374(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, __n128 **a6, __n128 a7, double a8, double a9, double a10, double a11, __n128 a12)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      a7.n128_f64[0] = sub_25B4781B8((float32x4_t *)(a1 + (i << 6)), a3, a4, a5, a7.n128_f64[0], a8, a9, a10, a11, a12);
      float32x4_t v20 = a6[1];
      unint64_t v19 = (unint64_t)a6[2];
      if ((unint64_t)v20 >= v19)
      {
        uint64_t v22 = v20 - *a6;
        if ((unint64_t)(v22 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v23 = v19 - (void)*a6;
        uint64_t v24 = v23 >> 3;
        if (v23 >> 3 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25)
        {
          __n128 v31 = a7;
          unint64_t v25 = (unint64_t)sub_25B3FFAEC(v25);
          a7 = v31;
        }
        else
        {
          uint64_t v26 = 0;
        }
        int32x4_t v27 = (__n128 *)(v25 + 16 * v22);
        __n128 *v27 = a7;
        float32x4_t v21 = v27 + 1;
        float32x2_t v29 = *a6;
        float32x2_t v28 = a6[1];
        if (v28 != *a6)
        {
          do
          {
            __n128 v30 = v28[-1];
            --v28;
            a7.n128_u64[0] = v30.n128_u64[0];
            v27[-1] = v30;
            --v27;
          }
          while (v28 != v29);
          float32x2_t v28 = *a6;
        }
        *a6 = v27;
        a6[1] = v21;
        a6[2] = (__n128 *)(v25 + 16 * v26);
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *float32x4_t v20 = a7;
        float32x4_t v21 = v20 + 1;
      }
      a6[1] = v21;
    }
  }
}

dispatch_queue_t sub_25B4784A8(char *a1, void *a2)
{
  id v3 = a2;
  sub_25B403500(&v12, a1);
  long long v4 = std::string::append(&v12, ".workloop", 9uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14 >= 0) {
    float32x2_t v6 = __p;
  }
  else {
    float32x2_t v6 = (void **)__p[0];
  }
  inactive = dispatch_workloop_create_inactive((const char *)v6);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  dispatch_workloop_set_qos_class_floor();
  float32x2_t v8 = (OS_os_workgroup *)v3;
  if (v8) {
    dispatch_workloop_set_os_workgroup(inactive, v8);
  }

  dispatch_activate(inactive);
  float32x2_t v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v10 = dispatch_queue_create_with_target_V2(a1, v9, inactive);

  return v10;
}

void sub_25B4785D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_25B478600()
{
  int v0 = os_workgroup_attr_set_flags();
  if (v0) {
    printf("ERROR [createWorkGroup]: Failed to set workgroup flags with error (%d)\n", v0);
  }
  uint64_t v1 = (void *)os_workgroup_create();

  return v1;
}

void sub_25B4786B0(uint64_t a1, long long *a2, void *a3, void *a4)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  if (objc_msgSend_count(v8, v9, v10) && objc_msgSend_count(v7, v11, v12))
  {
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    id v79 = v8;
    obunint64_t j = v8;
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v86, v91, 16);
    uint64_t v77 = a1;
    int v78 = a2;
    if (v14)
    {
      uint64_t v82 = v14;
      unint64_t v83 = 0;
      __p = 0;
      float32x4_t v15 = 0;
      uint64_t v81 = *(void *)v87;
      while (1)
      {
        for (uint64_t i = 0; i != v82; ++i)
        {
          if (*(void *)v87 != v81) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(id *)(*((void *)&v86 + 1) + 8 * i);
          unint64_t v19 = 0;
          float32x4_t v20 = 0;
          int v21 = -1;
          while (objc_msgSend_count(v7, v16, v17) > v19)
          {
            uint64_t v24 = objc_msgSend_parentIdentifier(v18, v22, v23);
            uint64_t v26 = objc_msgSend_objectAtIndexedSubscript_(v7, v25, v19);
            float32x2_t v29 = objc_msgSend_identifier(v26, v27, v28);
            char isEqual = objc_msgSend_isEqual_(v24, v30, (uint64_t)v29);

            if (isEqual)
            {
              uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v7, v16, v19);

              float32x4_t v20 = (void *)v32;
              int v21 = v19;
            }
            ++v19;
          }
          if (v20)
          {
            objc_msgSend_endOrientation(v20, v22, v23);
            float v34 = v33;
            objc_msgSend_startOrientation(v20, v35, v36);
            float v38 = v37;
            objc_msgSend_startOrientation(v18, v39, v40);
            float v42 = v41;
            objc_msgSend_startOrientation(v20, v43, v44);
            float v47 = v34 - v38;
            float v49 = (float)(v42 - v48) / (float)(v34 - v38);
            if (v49 <= 1.0) {
              float v50 = v49;
            }
            else {
              float v50 = 1.0;
            }
            if (v49 >= 0.0) {
              float v51 = v50;
            }
            else {
              float v51 = 0.0;
            }
            objc_msgSend_endOrientation(v18, v45, v46);
            float v53 = v52;
            objc_msgSend_startOrientation(v20, v54, v55);
            float v57 = (float)(v53 - v56) / v47;
            if (v57 <= 1.0) {
              float v58 = v57;
            }
            else {
              float v58 = 1.0;
            }
            if (v57 >= 0.0) {
              float v59 = v58;
            }
            else {
              float v59 = 0.0;
            }
            if ((unint64_t)v15 < v83)
            {
              *float32x4_t v15 = v21;
              *((float *)v15 + 1) = v51;
              *((float *)v15 + 2) = v59;
              v15 += 3;
              goto LABEL_64;
            }
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - __p) >> 2) + 1;
            if (v60 > 0x1555555555555555) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(v83 - (void)__p) >> 2) > v60) {
              unint64_t v60 = 0x5555555555555556 * ((uint64_t)(v83 - (void)__p) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v61 = 0x1555555555555555;
            }
            else {
              unint64_t v61 = v60;
            }
            if (v61) {
              unint64_t v61 = (unint64_t)sub_25B478C4C(v61);
            }
            else {
              uint64_t v62 = 0;
            }
            unint64_t v66 = v61 + 4 * (((char *)v15 - __p) >> 2);
            *(_DWORD *)unint64_t v66 = v21;
            *(float *)(v66 + 4) = v51;
            *(float *)(v66 + 8) = v59;
            uint64_t v67 = (char *)v66;
            if (v15 == (int *)__p)
            {
              uint64_t v68 = __p;
            }
            else
            {
              uint64_t v68 = __p;
              do
              {
                uint64_t v69 = *(void *)(v15 - 3);
                v15 -= 3;
                int v70 = v15[2];
                *(void *)(v67 - 12) = v69;
                v67 -= 12;
                *((_DWORD *)v67 + 2) = v70;
              }
              while (v15 != (int *)__p);
            }
            unint64_t v83 = v61 + 12 * v62;
            float32x4_t v15 = (int *)(v66 + 12);
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            if ((unint64_t)v15 < v83)
            {
              float32x4_t v20 = 0;
              v15[1] = 0;
              void v15[2] = 0;
              *float32x4_t v15 = -1;
              v15 += 3;
              goto LABEL_64;
            }
            unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - __p) >> 2) + 1;
            if (v63 > 0x1555555555555555) {
              sub_25B3FBC4C();
            }
            if (0x5555555555555556 * ((uint64_t)(v83 - (void)__p) >> 2) > v63) {
              unint64_t v63 = 0x5555555555555556 * ((uint64_t)(v83 - (void)__p) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v64 = 0x1555555555555555;
            }
            else {
              unint64_t v64 = v63;
            }
            if (v64) {
              unint64_t v64 = (unint64_t)sub_25B478C4C(v64);
            }
            else {
              uint64_t v65 = 0;
            }
            uint64_t v71 = (_DWORD *)(v64 + 4 * (((char *)v15 - __p) >> 2));
            v71[1] = 0;
            v71[2] = 0;
            *uint64_t v71 = -1;
            uint64_t v67 = (char *)v71;
            if (v15 == (int *)__p)
            {
              int v72 = __p;
            }
            else
            {
              int v72 = __p;
              do
              {
                uint64_t v73 = *(void *)(v15 - 3);
                v15 -= 3;
                int v74 = v15[2];
                *(void *)(v67 - 12) = v73;
                v67 -= 12;
                *((_DWORD *)v67 + 2) = v74;
              }
              while (v15 != (int *)__p);
            }
            unint64_t v83 = v64 + 12 * v65;
            float32x4_t v15 = v71 + 3;
            if (v72) {
              operator delete(v72);
            }
            float32x4_t v20 = 0;
          }
          __p = v67;
LABEL_64:
        }
        uint64_t v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v75, (uint64_t)&v86, v91, 16);
        if (!v82) {
          goto LABEL_68;
        }
      }
    }
    __p = 0;
    float32x4_t v15 = 0;
LABEL_68:

    int v90 = v78;
    unint64_t v76 = sub_25B478C94(v77 + 720, (unsigned __int8 *)v78, &v90);
    sub_25B4790F4((void *)v76 + 5, __p, (char *)v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - __p) >> 2));
    id v8 = v79;
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_25B478B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  _Unwind_Resume(a1);
}

void *sub_25B478C4C(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_25B3FA70C();
  }
  return operator new(12 * a1);
}

unsigned __int8 *sub_25B478C94(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float32x4_t v15 = (void *)(a1 + 16);
  float32x4_t v16 = operator new(0x40uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *float32x4_t v16 = 0;
  v16[1] = v8;
  uint64_t v17 = v16 + 2;
  id v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v16[4] = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = 0;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          int32x4_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          float32x2_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            float32x4_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  float32x4_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                float32x2_t v29 = v35;
                float32x4_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  float v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *float v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    float v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B479264((uint64_t)v41);
  return i;
}

void sub_25B4790DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B479264((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B4790F4(void *result, char *__src, char *a3, unint64_t a4)
{
  float32x2_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      sub_25B3FBC4C();
    double result = sub_25B478C4C(v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 12 * v13;
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memmove(result, v6, v14);
    }
    float32x4_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  float32x4_t v15 = (void **)(result + 1);
  float32x4_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    id v18 = (void *)*result;
LABEL_21:
    double result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    id v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *float32x4_t v15 = &v9[v14];
  return result;
}

void sub_25B479264(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4792BC((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_25B4792BC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_25B479314(int8x8_t *a1, unsigned __int8 *a2, void *a3, void *a4)
{
  id v51 = a3;
  id v7 = a4;
  if (!sub_25B414548(&a1[90], a2) || !objc_msgSend_count(v51, v8, v9) || !objc_msgSend_count(v7, v10, v11)) {
    goto LABEL_35;
  }
  unint64_t v12 = sub_25B403AF4((uint64_t)a2);
  int8x8_t v13 = a1[91];
  if (!*(void *)&v13) {
    goto LABEL_20;
  }
  unint64_t v14 = v12;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v16 = v15.u32[0];
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v17 = v12;
    if (v12 >= *(void *)&v13) {
      unint64_t v17 = v12 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v13 - 1) & v12;
  }
  id v18 = *(unsigned __int8 ***)(*(void *)&a1[90] + 8 * v17);
  if (!v18 || (long long v19 = *v18) == 0) {
LABEL_20:
  }
    sub_25B3FC090("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 == v14) {
      break;
    }
    if (v16 > 1)
    {
      if (v20 >= *(void *)&v13) {
        v20 %= *(void *)&v13;
      }
    }
    else
    {
      v20 &= *(void *)&v13 - 1;
    }
    if (v20 != v17) {
      goto LABEL_20;
    }
LABEL_19:
    long long v19 = *(unsigned __int8 **)v19;
    if (!v19) {
      goto LABEL_20;
    }
  }
  if (!sub_25B403F44(v19 + 16, a2)) {
    goto LABEL_19;
  }
  uint64_t v23 = *((void *)v19 + 5);
  if (*((void *)v19 + 6) != v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    do
    {
      unint64_t v26 = *(unsigned int *)(v23 + v24);
      if ((v26 & 0x80000000) == 0 && objc_msgSend_count(v51, v21, v22) > v26)
      {
        objc_msgSend_objectAtIndexedSubscript_(v7, v21, v25);
        int32x4_t v27 = (float32x2_t *)objc_claimAutoreleasedReturnValue();
        float32x2_t v29 = objc_msgSend_objectAtIndexedSubscript_(v51, v28, *(int *)(v23 + v24));
        objc_msgSend_circleCenter(v29, v30, v31);
        if (v27) {
          v27[45] = v34;
        }
        objc_msgSend_radius(v29, v32, v33);
        if (v27) {
          v27[42].i32[0] = v37;
        }
        objc_msgSend_endOrientation(v29, v35, v36);
        float v39 = v38;
        objc_msgSend_startOrientation(v29, v40, v41);
        float v43 = v42;
        objc_msgSend_startOrientation(v29, v44, v45);
        float v49 = v39 - v43;
        if (v27) {
          v27[42].f32[1] = v48 + (float)(v49 * *(float *)(v23 + v24 + 4));
        }
        objc_msgSend_startOrientation(v29, v46, v47);
        if (v27) {
          v27[43].f32[0] = v50 + (float)(v49 * *(float *)(v23 + v24 + 8));
        }
        sub_25B530690(v27);
      }
      ++v25;
      uint64_t v23 = *((void *)v19 + 5);
      v24 += 12;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v19 + 6) - v23) >> 2));
  }
LABEL_35:
}

void sub_25B4795A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t sub_25B4795E0(float32x2_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] == *a2)
  {
    float v8 = -1.0;
    unsigned int v7 = -1;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unsigned int v7 = -1;
    float v8 = -1.0;
    do
    {
      uint64_t v9 = (float32x2_t *)(v2 + v5);
      float v10 = sub_25B3FCCE0(a1, (float32x2_t *)(v2 + v5), 0);
      if ((float)(180.0 - v10) < v10) {
        float v10 = 180.0 - v10;
      }
      if (v10 <= 20.0)
      {
        float32x2_t v11 = *v9;
        float32x2_t v12 = *a1;
        float32x2_t v13 = a1[1];
        float32x2_t v14 = vsub_f32(v9[1], *v9);
        float v15 = vaddv_f32(vmul_f32(vsub_f32(*a1, *v9), v14));
        float v16 = vaddv_f32(vmul_f32(v14, v14));
        if (v16 < 0.000001) {
          float v16 = 0.000001;
        }
        float32x2_t v17 = vsub_f32(vmla_n_f32(v11, v14, v15 / v16), v12);
        int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
        float32x2_t v19 = vsub_f32(vmla_n_f32(v11, v14, vaddv_f32(vmul_f32(v14, vsub_f32(v13, v11))) / v16), v13);
        int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
        if ((float)(vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v18, v20), (float32x2_t)vzip2_s32(v18, v20))))
                   * 0.5) < 0.4)
        {
          sub_25B40D638();
          float32x2_t v23 = vsub_f32(v21, v22);
          float32x2_t v24 = vsub_f32(v12, v13);
          float v25 = sqrtf(vaddv_f32(vmul_f32(v23, v23))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v24, v24))), 0.000001);
          if (v25 > v8)
          {
            unsigned int v7 = v6;
            float v8 = v25;
          }
        }
      }
      ++v6;
      uint64_t v2 = *a2;
      v5 += 16;
    }
    while (v6 < (a2[1] - *a2) >> 4);
  }
  return v7 | ((unint64_t)LODWORD(v8) << 32);
}

uint64_t sub_25B479790(uint64_t a1)
{
  sub_25B4797CC(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_25B4797CC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_25B4792BC((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_25B479810(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v435 = *MEMORY[0x263EF8340];
  id v6 = a2;
  id v359 = a3;
  uint64_t v370 = a1;
  v372 = (void *)(a1 + 720);
  sub_25B47B480(a1 + 720);
  long long v401 = 0uLL;
  unint64_t v402 = 0;
  int v363 = v6;
  uint64_t v9 = objc_msgSend_walls(v6, v7, v8);
  sub_25B47B4D8(v9, (void **)&v401);

  memset(v400, 0, sizeof(v400));
  float32x2_t v12 = objc_msgSend_openings(v6, v10, v11);
  sub_25B47B4D8(v12, v400);

  memset(v399, 0, sizeof(v399));
  float v15 = objc_msgSend_windows(v6, v13, v14);
  sub_25B47B4D8(v15, v399);

  memset(v398, 0, sizeof(v398));
  int32x2_t v18 = objc_msgSend_doors(v6, v16, v17);
  sub_25B47B4D8(v18, v398);

  memset(v397, 0, sizeof(v397));
  float32x2_t v21 = objc_msgSend_opendoors(v6, v19, v20);
  sub_25B47B4D8(v21, v397);

  sub_25B403500(__p, "opening");
  sub_25B47B6F0(a1, (uint64_t)__p, (uint64_t *)&v401, (uint64_t)v400);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "window");
  sub_25B47B6F0(a1, (uint64_t)__p, (uint64_t *)&v401, (uint64_t)v399);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "door");
  sub_25B47B6F0(a1, (uint64_t)__p, (uint64_t *)&v401, (uint64_t)v398);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "opendoor");
  sub_25B47B6F0(a1, (uint64_t)__p, (uint64_t *)&v401, (uint64_t)v397);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(&v406, "polygon");
  objc_msgSend_walls(v6, v22, v23);
  id v375 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_count(v375, v24, v25))
  {
    for (unint64_t i = 0; ; unint64_t i = v373 + 1)
    {
      if (i >= objc_msgSend_count(v375, v26, v27)) {
        goto LABEL_62;
      }
      unint64_t v30 = objc_msgSend_objectAtIndexedSubscript_(v375, v29, i);
      objc_msgSend_quad(v30, v31, v32);
      float32x4_t v378 = v33;
      unint64_t v373 = i;
      objc_msgSend_quad(v30, v34, v35);
      float v38 = 0;
      float v39 = 0;
      unint64_t v40 = 0;
      unint64_t v41 = 0;
      float32x4_t v43 = vsubq_f32(v378, v42);
      float v44 = fmaxf(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v43, v43))), 0.00000001);
      while (objc_msgSend_polygonSize(v30, v36, v37) > v41)
      {
        float32x4_t v379 = *(float32x4_t *)(objc_msgSend_polygon(v30, v45, v46) + 16 * v41);
        objc_msgSend_quad(v30, v47, v48);
        float32x4_t v50 = vsubq_f32(v379, v49);
        float v51 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v50, v50))) / v44;
        if (v51 <= 1.0) {
          float v52 = v51;
        }
        else {
          float v52 = 1.0;
        }
        if ((unint64_t)v39 >= v40)
        {
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2) + 1;
          if (v53 > 0x1555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v40 - (void)v38) >> 2) > v53) {
            unint64_t v53 = 0x5555555555555556 * ((uint64_t)(v40 - (void)v38) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v38) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v54 = 0x1555555555555555;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54) {
            unint64_t v54 = (unint64_t)sub_25B478C4C(v54);
          }
          else {
            uint64_t v36 = 0;
          }
          unint64_t v55 = v54 + 4 * ((v39 - v38) >> 2);
          *(_DWORD *)unint64_t v55 = -1;
          *(float *)(v55 + 4) = v52;
          *(float *)(v55 + 8) = v52;
          float v56 = (char *)v55;
          while (v39 != v38)
          {
            uint64_t v57 = *(void *)(v39 - 12);
            v39 -= 12;
            int v58 = *((_DWORD *)v39 + 2);
            *(void *)(v56 - 12) = v57;
            v56 -= 12;
            *((_DWORD *)v56 + 2) = v58;
          }
          unint64_t v40 = v54 + 12 * (void)v36;
          float v39 = (char *)(v55 + 12);
          if (v38) {
            operator delete(v38);
          }
          float v38 = v56;
        }
        else
        {
          *(_DWORD *)float v39 = -1;
          *((float *)v39 + 1) = v52;
          *((float *)v39 + 2) = v52;
          v39 += 12;
        }
        ++v41;
      }
      if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v406.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v406.__r_.__value_.__l.__size_;
      }
      sub_25B47B994((uint64_t)&v425, size + 1);
      if ((v425.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v62 = &v425;
      }
      else {
        uint64_t v62 = (std::string *)v425.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v63 = &v406;
        }
        else {
          unint64_t v63 = (std::string *)v406.__r_.__value_.__r.__words[0];
        }
        memmove(v62, v63, size);
      }
      *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + size) = 58;
      unint64_t v64 = objc_msgSend_identifier(v30, v60, v61);
      objc_msgSend_UUIDString(v64, v65, v66);
      id v67 = objc_claimAutoreleasedReturnValue();
      int v70 = (char *)objc_msgSend_UTF8String(v67, v68, v69);
      sub_25B403500(&v407, v70);
      if ((SBYTE7(v408) & 0x80u) == 0) {
        uint64_t v71 = (const std::string::value_type *)&v407;
      }
      else {
        uint64_t v71 = (const std::string::value_type *)v407;
      }
      if ((SBYTE7(v408) & 0x80u) == 0) {
        std::string::size_type v72 = BYTE7(v408);
      }
      else {
        std::string::size_type v72 = *((void *)&v407 + 1);
      }
      uint64_t v73 = std::string::append(&v425, v71, v72);
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v73->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v408) < 0) {
        operator delete((void *)v407);
      }

      if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v425.__r_.__value_.__l.__data_);
      }
      v425.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      uint64_t v75 = sub_25B478C94((uint64_t)v372, __p, (long long **)&v425);
      sub_25B4790F4((void *)v75 + 5, v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2));
      if ((__p[23] & 0x80000000) == 0) {
        break;
      }
      operator delete(*(void **)__p);
      if (v38) {
        goto LABEL_58;
      }
LABEL_59:
    }
    if (!v38) {
      goto LABEL_59;
    }
LABEL_58:
    operator delete(v38);
    goto LABEL_59;
  }
LABEL_62:

  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  v394 = 0;
  v395 = 0;
  uint64_t v396 = 0;
  int v78 = objc_msgSend_curvedWalls(v363, v76, v77);
  sub_25B47B4D8(v78, &v394);

  id v79 = (char *)v394;
  if (v395 - (unsigned char *)v394 >= 1)
  {
    uint64_t v80 = (v395 - (unsigned char *)v394) >> 4;
    uint64_t v81 = (char *)*((void *)&v401 + 1);
    if (v80 <= (uint64_t)(v402 - *((void *)&v401 + 1)) >> 4)
    {
      if (v80 <= 0)
      {
        long long v87 = (char *)v394 + 16 * v80;
        uint64_t v88 = *((void *)&v401 + 1);
        uint64_t v89 = *((void *)&v401 + 1) + 16 * v80;
        int v90 = (char *)(*((void *)&v401 + 1) - 16 * v80);
        float32x4_t v91 = (_OWORD *)*((void *)&v401 + 1);
        if ((unint64_t)v90 < *((void *)&v401 + 1))
        {
          float32x4_t v91 = (_OWORD *)*((void *)&v401 + 1);
          do
          {
            long long v92 = *(_OWORD *)v90;
            v90 += 16;
            *v91++ = v92;
          }
          while (v90 < v81);
        }
        *((void *)&v401 + 1) = v91;
        if (v88 != v89) {
          memmove((void *)(v88 - 16 * ((v88 - v89) >> 4)), v81, v88 - v89);
        }
        if (v87 != v79) {
          memmove(v81, v79, v87 - v79);
        }
      }
      else
      {
        int64_t v86 = v395 - (unsigned char *)v394;
        if (v395 != v394) {
          memmove(*((void **)&v401 + 1), v394, v395 - (unsigned char *)v394);
        }
        *((void *)&v401 + 1) = &v81[v86];
      }
    }
    else
    {
      uint64_t v82 = (uint64_t)(*((void *)&v401 + 1) - v401) >> 4;
      if ((unint64_t)(v82 + v80) >> 60) {
        sub_25B3FBC4C();
      }
      unint64_t v83 = (uint64_t)(v402 - v401) >> 3;
      if (v83 <= v82 + v80) {
        unint64_t v83 = v82 + v80;
      }
      if (v402 - (unint64_t)v401 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v84 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v83;
      }
      if (v84) {
        unint64_t v84 = (unint64_t)sub_25B3FFAEC(v84);
      }
      else {
        uint64_t v85 = 0;
      }
      uint64_t v93 = (_OWORD *)(v84 + 16 * v82);
      uint64_t v94 = (char *)&v93[v80];
      uint64_t v95 = 16 * v80;
      id v96 = v93;
      do
      {
        long long v97 = *(_OWORD *)v79;
        v79 += 16;
        *v96++ = v97;
        v95 -= 16;
      }
      while (v95);
      int v98 = (char *)v401;
      if ((char *)v401 == v81)
      {
        unint64_t v100 = v84 + 16 * v82;
      }
      else
      {
        uint64_t v99 = v81;
        do
        {
          unint64_t v100 = (unint64_t)(v93 - 1);
          *(v93 - 1) = *((_OWORD *)v99 - 1);
          v99 -= 16;
          --v93;
        }
        while (v99 != v98);
      }
      unint64_t v101 = v84 + 16 * v85;
      uint64_t v102 = *((void *)&v401 + 1) - (void)v81;
      if (*((char **)&v401 + 1) != v81) {
        memmove(v94, v81, *((void *)&v401 + 1) - (void)v81);
      }
      uint64_t v103 = (void *)v401;
      *(void *)&long long v401 = v100;
      *((void *)&v401 + 1) = &v94[v102];
      unint64_t v402 = v101;
      if (v103) {
        operator delete(v103);
      }
    }
  }
  v392[0] = 0;
  v392[1] = 0;
  unint64_t v393 = 0;
  id v104 = (char *)v359;
  *(_OWORD *)((char *)v425.__r_.__value_.__r.__words + 4) = 0uLL;
  long long v426 = 0u;
  long long v427 = 0u;
  long long v428 = 0u;
  long long v429 = 0u;
  long long v430 = 0u;
  int v431 = 0;
  uint64_t v433 = 0;
  uint64_t v432 = 0;
  if (v104)
  {
    long long v105 = *((_OWORD *)v104 + 7);
    long long v428 = *((_OWORD *)v104 + 6);
    long long v106 = *((_OWORD *)v104 + 5);
    long long v426 = *((_OWORD *)v104 + 4);
    long long v427 = v106;
    long long v107 = *((_OWORD *)v104 + 8);
    long long v429 = v105;
    long long v430 = v107;
    uint64_t v432 = *((void *)v104 + 6);
    int v431 = *((_DWORD *)v104 + 7);
    std::string::value_type v108 = v104[8];
    *(_OWORD *)((char *)v425.__r_.__value_.__r.__words + 4) = *(_OWORD *)(v104 + 12);
    LODWORD(v433) = *((_DWORD *)v104 + 8);
    HIDWORD(v433) = *((_DWORD *)v104 + 10);
    int v109 = *((_DWORD *)v104 + 9);
  }
  else
  {
    std::string::value_type v108 = 0;
    *(_OWORD *)((char *)v425.__r_.__value_.__r.__words + 4) = 0uLL;
    long long v426 = 0uLL;
    long long v427 = 0uLL;
    long long v428 = 0uLL;
    long long v429 = 0uLL;
    long long v430 = 0uLL;
    int v431 = 0;
    int v109 = 0;
    uint64_t v432 = 0;
    uint64_t v433 = 0;
  }
  v425.__r_.__value_.__s.__data_[0] = v108;
  int v434 = v109;
  uint64_t v357 = v104;

  sub_25B5967B0((_OWORD *)v370, (long long **)&v401, &v425, a4, (long long **)v392);
  id v110 = objc_alloc(MEMORY[0x263EFF980]);
  long long v113 = objc_msgSend_walls(v363, v111, v112);
  v374 = objc_msgSend_initWithArray_copyItems_(v110, v114, (uint64_t)v113, 1);

  long long v390 = 0u;
  long long v391 = 0u;
  long long v388 = 0u;
  long long v389 = 0u;
  long long v117 = objc_msgSend_curvedWalls(v363, v115, v116);
  uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v118, (uint64_t)&v388, v424, 16);
  if (v121)
  {
    uint64_t v122 = *(void *)v389;
    do
    {
      for (uint64_t j = 0; j != v121; ++j)
      {
        if (*(void *)v389 != v122) {
          objc_enumerationMutation(v117);
        }
        int v124 = objc_msgSend_copy(*(void **)(*((void *)&v388 + 1) + 8 * j), v119, v120, v357);
        objc_msgSend_addObject_(v374, v125, (uint64_t)v124);
      }
      uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v119, (uint64_t)&v388, v424, 16);
    }
    while (v121);
  }

  float v127 = v392[0];
  float v126 = v392[1];
  if (objc_msgSend_count(v374, v128, v129) == (v126 - v127) >> 4)
  {
    uint64_t v130 = objc_alloc_init(RSFloorPlan);
    sub_25B4E664C((uint64_t)v130, v374);
    uint64_t v133 = objc_msgSend_walls(v130, v131, v132);
    sub_25B47BA18((uint64_t *)v392, v133);

    memset(&__p[8], 0, 64);
    long long v412 = 0u;
    long long v413 = 0u;
    long long v414 = 0u;
    long long v415 = 0u;
    long long v416 = 0u;
    long long v417 = 0u;
    *(void *)__p = &unk_2708F1E98;
    uint64_t v418 = 0;
    v419 = &unk_2708F1F38;
    uint64_t v420 = 0;
    uint64_t v422 = 0;
    uint64_t v421 = 0;
    sub_25B3F6148((uint64_t)v423);
    memset(&v423[176], 0, 24);
    sub_25B47BC48((uint64_t *)__p, v130);
    sub_25B4ED9BC((float *)(v370 + 760), (uint64_t)__p);
    uint64_t v380 = objc_alloc_init(RSFloorPlan);
    int v138 = objc_msgSend_array(MEMORY[0x263EFF980], v134, v135);
    uint64_t v139 = *(void *)&__p[8];
    uint64_t v140 = *(void *)&__p[16];
    while (v139 != v140)
    {
      unint64_t v142 = sub_25B47C4E4(v139, v136, v137);
      if (v142) {
        objc_msgSend_addObject_(v138, v141, (uint64_t)v142);
      }

      v139 += 176;
    }
    sub_25B4E664C((uint64_t)v380, v138);
    unint64_t v147 = objc_msgSend_array(MEMORY[0x263EFF980], v143, v144);
    uint64_t v148 = *(void *)&__p[32];
    uint64_t v149 = *(void *)&__p[40];
    while (v148 != v149)
    {
      uint64_t v151 = sub_25B47C4E4(v148, v145, v146);
      if (v151) {
        objc_msgSend_addObject_(v147, v150, (uint64_t)v151);
      }

      v148 += 176;
    }
    sub_25B4E666C((uint64_t)v380, v147);
    unsigned __int32 v156 = objc_msgSend_array(MEMORY[0x263EFF980], v152, v153);
    uint64_t v157 = *(void *)&__p[56];
    uint64_t v158 = *(void *)&__p[64];
    while (v157 != v158)
    {
      uint64_t v160 = sub_25B47C4E4(v157, v154, v155);
      if (v160) {
        objc_msgSend_addObject_(v156, v159, (uint64_t)v160);
      }

      v157 += 176;
    }
    sub_25B4E665C((uint64_t)v380, v156);
    int v165 = objc_msgSend_array(MEMORY[0x263EFF980], v161, v162);
    uint64_t v166 = *((void *)&v412 + 1);
    uint64_t v167 = v413;
    while (v166 != v167)
    {
      __n128 v169 = sub_25B47C4E4(v166, v163, v164);
      if (v169) {
        objc_msgSend_addObject_(v165, v168, (uint64_t)v169);
      }

      v166 += 176;
    }
    sub_25B477C30((uint64_t)v380, v165);
    v174 = objc_msgSend_array(MEMORY[0x263EFF980], v170, v171);
    uint64_t v175 = *((void *)&v414 + 1);
    for (uint64_t k = v414; k != v175; k += 176)
    {
      uint64_t v178 = sub_25B47C4E4(k, v172, v173);
      if (v178) {
        objc_msgSend_addObject_(v174, v177, (uint64_t)v178);
      }
    }
    sub_25B477C10((uint64_t)v380, v174);
    long long v181 = objc_msgSend_array(MEMORY[0x263EFF980], v179, v180);
    __n128 v183 = (id *)*((void *)&v417 + 1);
    for (uint64_t m = (id *)v417; m != v183; ++m)
    {
      id v184 = *m;
      objc_msgSend_addObject_(v181, v185, (uint64_t)v184);
    }
    sub_25B4E667C((uint64_t)v380, v181);

    long long v407 = 0uLL;
    *(void *)&long long v408 = 0;
    __n128 v188 = objc_msgSend_walls(v380, v186, v187);
    sub_25B47B4D8(v188, (void **)&v407);

    long long v189 = v392[0];
    long long v190 = v407;
    *(void **)&long long v407 = v392[0];
    *(_OWORD *)v392 = v190;
    unint64_t v393 = v408;
    if ((void)v407) {
      operator delete(v189);
    }
    sub_25B3F5E50((uint64_t)__p);
  }
  id v364 = v363;
  __n128 v193 = objc_msgSend_curvedWalls(v364, v191, v192);
  BOOL v196 = objc_msgSend_count(v193, v194, v195) == 0;

  if (!v196)
  {
    long long v407 = 0u;
    long long v408 = 0u;
    LODWORD(v409) = 1065353216;
    sub_25B403500(__p, "curved_window");
    uint64_t v199 = objc_msgSend_curvedWalls(v364, v197, v198);
    int v202 = objc_msgSend_curvedWindows(v364, v200, v201);
    sub_25B4786B0(v370, (long long *)__p, v199, v202);

    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_25B403500(__p, "curved_door");
    unint64_t v205 = objc_msgSend_curvedWalls(v364, v203, v204);
    int v208 = objc_msgSend_curvedDoors(v364, v206, v207);
    sub_25B4786B0(v370, (long long *)__p, v205, v208);

    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v209 = (float32x2_t *)v394;
    if (v395 != v394)
    {
      uint64_t v210 = 0;
      if ((unint64_t)((v395 - (unsigned char *)v394) >> 4) <= 1) {
        uint64_t v211 = 1;
      }
      else {
        uint64_t v211 = (v395 - (unsigned char *)v394) >> 4;
      }
      do
      {
        unint64_t v212 = sub_25B4795E0(v209, (uint64_t *)v392);
        if ((v212 & 0x80000000) == 0)
        {
          uint64_t v215 = v212;
          if (v212 < (unint64_t)(((char *)v392[1] - (char *)v392[0]) >> 4)
            && *((float *)&v212 + 1) > 0.000001)
          {
            v216 = objc_msgSend_curvedWalls(v364, v213, v214, *((float *)&v212 + 1));
            v218 = objc_msgSend_objectAtIndexedSubscript_(v216, v217, v210);
            long long v219 = (char *)v392[0];
            long long v220 = v218;
            float32x2_t v221 = *v209;
            float32x2_t v222 = v209[1];
            objc_msgSend_circleCenter(v220, v223, v224);
            unint64_t v228 = (float32x2_t *)&v219[16 * v215];
            float32x2_t v229 = *v209;
            float32x2_t v230 = v209[1];
            float32x2_t v232 = *v228;
            float32x2_t v231 = v228[1];
            float32x2_t v233 = vsub_f32(*v228, *v209);
            int32x2_t v234 = (int32x2_t)vmul_f32(v233, v233);
            float32x2_t v235 = vsub_f32(*v228, v230);
            int32x2_t v236 = (int32x2_t)vmul_f32(v235, v235);
            int32x2_t v237 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v234, v236), (float32x2_t)vzip2_s32(v234, v236)));
            if (vcgt_f32((float32x2_t)v237, (float32x2_t)vdup_lane_s32(v237, 1)).u8[0])
            {
              *unint64_t v228 = v231;
              v228[1] = v232;
              float32x2_t v229 = *v209;
              float32x2_t v230 = v209[1];
              float32x2_t v238 = v232;
            }
            else
            {
              float32x2_t v238 = v228[1];
              float32x2_t v231 = *v228;
            }
            if (v220)
            {
              float32x2_t v239 = vsub_f32(vmul_f32(vadd_f32(v221, v222), (float32x2_t)0x3F0000003F000000), v227);
              int32x2_t v240 = (int32x2_t)vsub_f32(v231, v238);
              v241.i32[0] = vdup_lane_s32(v240, 1).u32[0];
              v241.f32[1] = -*(float *)v240.i32;
              int32x2_t v242 = (int32x2_t)vmul_f32(v241, v241);
              v242.i32[0] = vadd_f32((float32x2_t)v242, (float32x2_t)vdup_lane_s32(v242, 1)).u32[0];
              float32x2_t v243 = vrsqrte_f32((float32x2_t)v242.u32[0]);
              float32x2_t v244 = vmul_f32(v243, vrsqrts_f32((float32x2_t)v242.u32[0], vmul_f32(v243, v243)));
              float32x2_t v245 = vsub_f32(v229, v230);
              float32x2_t v246 = vmla_n_f32(vmul_f32(vadd_f32(v238, v231), (float32x2_t)0x3F0000003F000000), vmul_n_f32(vmul_n_f32(v241, vmul_f32(v244, vrsqrts_f32((float32x2_t)v242.u32[0], vmul_f32(v244, v244))).f32[0]), sqrtf(vaddv_f32(vmul_f32(v239, v239)))), sqrtf(vaddv_f32(vmul_f32((float32x2_t)v240, (float32x2_t)v240)))/ fmaxf(sqrtf(vaddv_f32(vmul_f32(v245, v245))), 0.000001));
              float32x2_t v381 = vsub_f32(v238, v246);
              float v247 = sqrtf(vaddv_f32(vmul_f32(v381, v381)));
              float32x2_t v248 = vsub_f32(v231, v246);
              float v249 = sqrtf(vaddv_f32(vmul_f32(v248, v248)));
              v220[45] = v246;
              float v250 = atan2f(v248.f32[1], v248.f32[0]) * 57.296;
              v220[42].f32[1] = v250;
              float v251 = atan2f(v381.f32[1], v381.f32[0]) * 57.296;
              if (v251 < v250) {
                float v251 = v251 + 360.0;
              }
              v220[43].f32[0] = v251;
              v220[42].f32[0] = (float)(v249 + v247) * 0.5;
            }
            objc_msgSend_quad(v220, v225, v226, v357);
            *(float32x2_t *)&long long v252 = *v228;
            DWORD2(v252) = v228[1].i32[0];
            long long v382 = v252;
            objc_msgSend_quad(v220, v253, v254);
            int v377 = v255;
            float32x2_t v368 = v228[1];
            objc_msgSend_quad(v220, v256, v257);
            *(_OWORD *)obja = v258;
            float32x2_t v362 = v228[1];
            objc_msgSend_quad(v220, v259, v260);
            int8x16_t v361 = v261;
            *(float32x2_t *)&long long v262 = *v228;
            DWORD2(v262) = v228[1].i32[0];
            long long v360 = v262;
            objc_msgSend_quad(v220, v263, v264);
            long long v265 = v382;
            DWORD2(v265) = v377;
            *(float32x2_t *)&long long v266 = v368;
            *((void *)&v266 + 1) = vextq_s8(*(int8x16_t *)obja, *(int8x16_t *)obja, 8uLL).u64[0];
            *(float32x2_t *)&long long v267 = v362;
            *((void *)&v267 + 1) = vextq_s8(v361, v361, 8uLL).u64[0];
            long long v268 = v360;
            DWORD2(v268) = v269;
            *(_OWORD *)__p = v265;
            *(_OWORD *)&__p[16] = v266;
            *(_OWORD *)&__p[32] = v267;
            *(_OWORD *)&__p[48] = v268;
            if (v220) {
              objc_copyStruct(&v220[34], __p, 64, 1, 0);
            }

            unint64_t v270 = (char *)v392[0] + 16 * v215;
            unint64_t v271 = (char *)((char *)v392[1] - (char *)(v270 + 16));
            if (v392[1] != v270 + 16) {
              memmove(v270, v270 + 16, (char *)v392[1] - (char *)(v270 + 16));
            }
            v392[1] = &v271[(void)v270];
          }
        }
        ++v210;
        v209 += 2;
      }
      while (v211 != v210);
    }
    sub_25B403500(__p, "curved_window");
    v274 = objc_msgSend_curvedWalls(v364, v272, v273);
    v277 = objc_msgSend_curvedWindows(v364, v275, v276);
    sub_25B479314((int8x8_t *)v370, __p, v274, v277);

    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_25B403500(__p, "curved_door");
    v280 = objc_msgSend_curvedWalls(v364, v278, v279);
    unint64_t v283 = objc_msgSend_curvedDoors(v364, v281, v282);
    sub_25B479314((int8x8_t *)v370, __p, v280, v283);

    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_25B4797CC(0);
  }

  long long v284 = v401;
  long long v401 = *(_OWORD *)v392;
  *(_OWORD *)v392 = v284;
  unint64_t v285 = v402;
  unint64_t v402 = v393;
  unint64_t v393 = v285;
  sub_25B403500(__p, "opening");
  sub_25B47C3DC(v370, __p, &v401, v400);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "window");
  sub_25B47C3DC(v370, __p, &v401, v399);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "door");
  sub_25B47C3DC(v370, __p, &v401, v398);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_25B403500(__p, "opendoor");
  sub_25B47C3DC(v370, __p, &v401, v397);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v288 = objc_msgSend_walls(v364, v286, v287, v357);
  sub_25B47BA18((uint64_t *)&v401, v288);

  v291 = objc_msgSend_openings(v364, v289, v290);
  sub_25B47BA18((uint64_t *)v400, v291);

  unint64_t v294 = objc_msgSend_windows(v364, v292, v293);
  sub_25B47BA18((uint64_t *)v399, v294);

  uint64_t v297 = objc_msgSend_doors(v364, v295, v296);
  sub_25B47BA18((uint64_t *)v398, v297);

  uint64_t v300 = objc_msgSend_opendoors(v364, v298, v299);
  sub_25B47BA18((uint64_t *)v397, v300);

  sub_25B403500(v386, "polygon");
  objc_msgSend_walls(v364, v301, v302);
  id v303 = (id)objc_claimAutoreleasedReturnValue();
  long long v407 = 0u;
  long long v408 = 0u;
  long long v409 = 0u;
  long long v410 = 0u;
  obuint64_t j = v303;
  uint64_t v305 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v304, (uint64_t)&v407, __p, 16);
  if (v305)
  {
    uint64_t v369 = *(void *)v408;
    do
    {
      uint64_t v306 = 0;
      uint64_t v371 = v305;
      do
      {
        if (*(void *)v408 != v369) {
          objc_enumerationMutation(obj);
        }
        unint64_t v307 = *(void **)(*((void *)&v407 + 1) + 8 * v306);
        if ((v387 & 0x80u) == 0) {
          size_t v308 = v387;
        }
        else {
          size_t v308 = (size_t)v386[1];
        }
        sub_25B47B994((uint64_t)&v405, v308 + 1);
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v311 = &v405;
        }
        else {
          unint64_t v311 = (std::string *)v405.__r_.__value_.__r.__words[0];
        }
        if (v308)
        {
          if ((v387 & 0x80u) == 0) {
            unint64_t v312 = v386;
          }
          else {
            unint64_t v312 = (void **)v386[0];
          }
          memmove(v311, v312, v308);
        }
        *(_WORD *)((char *)&v311->__r_.__value_.__l.__data_ + v308) = 58;
        unint64_t v313 = objc_msgSend_identifier(v307, v309, v310);
        objc_msgSend_UUIDString(v313, v314, v315);
        id v316 = objc_claimAutoreleasedReturnValue();
        v319 = (char *)objc_msgSend_UTF8String(v316, v317, v318);
        sub_25B403500(v403, v319);
        if ((v404 & 0x80u) == 0) {
          v320 = v403;
        }
        else {
          v320 = (void **)v403[0];
        }
        if ((v404 & 0x80u) == 0) {
          std::string::size_type v321 = v404;
        }
        else {
          std::string::size_type v321 = (std::string::size_type)v403[1];
        }
        uint64_t v322 = std::string::append(&v405, (const std::string::value_type *)v320, v321);
        std::string v406 = *v322;
        v322->__r_.__value_.__l.__size_ = 0;
        v322->__r_.__value_.__r.__words[2] = 0;
        v322->__r_.__value_.__r.__words[0] = 0;
        if ((char)v404 < 0) {
          operator delete(v403[0]);
        }

        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v405.__r_.__value_.__l.__data_);
        }
        unint64_t v323 = sub_25B414548(v372, (unsigned __int8 *)&v406);
        if (v323)
        {
          v326 = v323;
          objc_msgSend_quad(v307, v324, v325);
          float32x2_t v383 = v327;
          objc_msgSend_quad(v307, v328, v329);
          uint64_t v333 = *((void *)v326 + 5);
          if (*((void *)v326 + 6) == v333)
          {
            v334 = 0;
          }
          else
          {
            v334 = 0;
            v335 = 0;
            unint64_t v336 = 0;
            unint64_t v337 = 0;
            float32x2_t v338 = vsub_f32(v383, v332);
            do
            {
              objc_msgSend_quad(v307, v330, v331);
              float32x2_t v384 = v339;
              float v376 = *(float *)(v333 + 12 * v337 + 4);
              uint64_t v342 = objc_msgSend_polygon(v307, v340, v341);
              *(float32x2_t *)&long long v343 = vmla_n_f32(v384, v338, v376);
              *((void *)&v343 + 1) = vextq_s8(*(int8x16_t *)(v342 + 16 * v337), *(int8x16_t *)(v342 + 16 * v337), 8uLL).u64[0];
              if ((unint64_t)v335 >= v336)
              {
                long long v385 = v343;
                uint64_t v345 = (v335 - v334) >> 4;
                unint64_t v346 = v345 + 1;
                if ((unint64_t)(v345 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v336 - (void)v334) >> 3 > v346) {
                  unint64_t v346 = (uint64_t)(v336 - (void)v334) >> 3;
                }
                if (v336 - (unint64_t)v334 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v347 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v347 = v346;
                }
                if (v347) {
                  unint64_t v347 = (unint64_t)sub_25B3FFAEC(v347);
                }
                else {
                  uint64_t v330 = 0;
                }
                long long v348 = (char *)(v347 + 16 * v345);
                *(_OWORD *)long long v348 = v385;
                uint64_t v344 = v348 + 16;
                while (v335 != v334)
                {
                  long long v349 = *((_OWORD *)v335 - 1);
                  v335 -= 16;
                  *((_OWORD *)v348 - 1) = v349;
                  v348 -= 16;
                }
                unint64_t v336 = v347 + 16 * (void)v330;
                if (v334) {
                  operator delete(v334);
                }
                v334 = v348;
              }
              else
              {
                *(_OWORD *)v335 = v343;
                uint64_t v344 = v335 + 16;
              }
              ++v337;
              uint64_t v333 = *((void *)v326 + 5);
              v335 = v344;
            }
            while (v337 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v326 + 6) - v333) >> 2));
          }
          long long v350 = (char *)objc_msgSend_polygonEdgeStates(v307, v330, v331);
          long long v353 = (char *)objc_msgSend_polygonEdgeConfidence(v307, v351, v352);
          unint64_t v356 = objc_msgSend_polygonSize(v307, v354, v355);
          sub_25B4FD368((uint64_t)v307, v334, v350, v353, v356);
          if (v334) {
            operator delete(v334);
          }
        }
        if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        ++v306;
      }
      while (v306 != v371);
      uint64_t v305 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v324, (uint64_t)&v407, __p, 16);
    }
    while (v305);
  }

  if ((char)v387 < 0) {
    operator delete(v386[0]);
  }
  sub_25B47B480((uint64_t)v372);

  if (v392[0])
  {
    v392[1] = v392[0];
    operator delete(v392[0]);
  }
  if (v394) {
    operator delete(v394);
  }
  if (v397[0]) {
    operator delete(v397[0]);
  }
  if (v398[0]) {
    operator delete(v398[0]);
  }
  if (v399[0]) {
    operator delete(v399[0]);
  }
  if (v400[0]) {
    operator delete(v400[0]);
  }
  if ((void)v401)
  {
    *((void *)&v401 + 1) = v401;
    operator delete((void *)v401);
  }
}

void sub_25B47AF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (STACK[0x210]) {
    operator delete((void *)STACK[0x210]);
  }
  sub_25B3F5E50((uint64_t)&STACK[0x250]);

  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a52) {
    operator delete(a52);
  }
  if (a55) {
    operator delete(a55);
  }
  if (a58) {
    operator delete(a58);
  }
  if (a61) {
    operator delete(a61);
  }

  _Unwind_Resume(a1);
}

void sub_25B47B480(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_25B4797CC(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_25B47B4D8(void *a1, void **a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v3 = a1;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v28, v32, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(v3);
        }
        float v10 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        objc_msgSend_quad(v10, v5, v6, v26);
        uint64_t v27 = v11;
        objc_msgSend_quad(v10, v12, v13);
        long long v26 = v14;
        float v16 = a2[1];
        unint64_t v15 = (unint64_t)a2[2];
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - (unsigned char *)*a2) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v20 = v15 - (void)*a2;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            unint64_t v21 = (unint64_t)sub_25B3FFAEC(v21);
          }
          else {
            uint64_t v5 = 0;
          }
          float32x2_t v22 = (void *)(v21 + 16 * v18);
          *float32x2_t v22 = v27;
          v22[1] = v26;
          float32x2_t v24 = (char *)*a2;
          uint64_t v23 = (char *)a2[1];
          uint64_t v25 = v22;
          if (v23 != *a2)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
              v25 -= 2;
              v23 -= 16;
            }
            while (v23 != v24);
            uint64_t v23 = (char *)*a2;
          }
          uint64_t v17 = v22 + 2;
          *a2 = v25;
          a2[1] = v22 + 2;
          a2[2] = (void *)(v21 + 16 * (void)v5);
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *float v16 = v27;
          v16[1] = v14;
          uint64_t v17 = v16 + 2;
        }
        a2[1] = v17;
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v28, v32, 16);
    }
    while (v7);
  }
}

void sub_25B47B6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B47B6F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    if (*a3 != a3[1] && *(void *)a4 != *(void *)(a4 + 8))
    {
      uint64_t v8 = a1 + 720;
      float v44 = (long long *)a2;
      uint64_t v9 = sub_25B478C94(a1 + 720, (unsigned __int8 *)a2, &v44);
      *((void *)v9 + 6) = *((void *)v9 + 5);
      if (a3[1] != *a3)
      {
        uint64_t v12 = a4;
        float v10 = *(float32x2_t **)a4;
        uint64_t v11 = *(float32x2_t **)(v12 + 8);
        if (v11 != v10)
        {
          while (1)
          {
            float v44 = (long long *)a2;
            uint64_t v13 = sub_25B478C94(v8, (unsigned __int8 *)a2, &v44);
            unint64_t v14 = sub_25B4795E0(v10, a3);
            __int32 v15 = 0;
            unint64_t v16 = 0;
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_22;
            }
            uint64_t v17 = 0xFFFFFFFFLL;
            if (*((float *)&v14 + 1) > 0.000001) {
              break;
            }
LABEL_23:
            unint64_t v28 = v16 | v17;
            unint64_t v30 = *((void *)v13 + 6);
            unint64_t v29 = *((void *)v13 + 7);
            if (v30 >= v29)
            {
              uint64_t v32 = *((void *)v13 + 5);
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v32) >> 2);
              unint64_t v34 = v33 + 1;
              if (v33 + 1 > 0x1555555555555555) {
                sub_25B3FBC4C();
              }
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v32) >> 2);
              if (2 * v35 > v34) {
                unint64_t v34 = 2 * v35;
              }
              if (v35 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v36 = 0x1555555555555555;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36) {
                unint64_t v36 = (unint64_t)sub_25B478C4C(v36);
              }
              else {
                uint64_t v37 = 0;
              }
              unint64_t v38 = v36 + 12 * v33;
              *(void *)unint64_t v38 = v28;
              *(_DWORD *)(v38 + 8) = v15;
              unint64_t v40 = (_DWORD *)*((void *)v13 + 5);
              float v39 = (_DWORD *)*((void *)v13 + 6);
              unint64_t v41 = v38;
              if (v39 != v40)
              {
                do
                {
                  uint64_t v42 = *(void *)(v39 - 3);
                  v39 -= 3;
                  int v43 = v39[2];
                  *(void *)(v41 - 12) = v42;
                  v41 -= 12;
                  *(_DWORD *)(v41 + 8) = v43;
                }
                while (v39 != v40);
                float v39 = (_DWORD *)*((void *)v13 + 5);
              }
              unint64_t v31 = v38 + 12;
              *((void *)v13 + 5) = v41;
              *((void *)v13 + 6) = v38 + 12;
              *((void *)v13 + 7) = v36 + 12 * v37;
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(void *)unint64_t v30 = v28;
              *(_DWORD *)(v30 + 8) = v15;
              unint64_t v31 = v30 + 12;
            }
            *((void *)v13 + 6) = v31;
            v10 += 2;
            if (v10 == v11) {
              return;
            }
          }
          uint64_t v17 = v14;
          if (v14 < (unint64_t)((a3[1] - *a3) >> 4))
          {
            uint64_t v18 = (float32x2_t *)(*a3 + 16 * v14);
            float32x2_t v19 = vsub_f32(*v18, v18[1]);
            int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
            *(float *)v20.i32 = sqrtf(vaddv_f32((float32x2_t)v20));
            float32x2_t v21 = vsub_f32(*v10, *v18);
            int32x2_t v22 = (int32x2_t)vmul_f32(v21, v21);
            float32x2_t v23 = vsub_f32(v10[1], *v18);
            int32x2_t v24 = (int32x2_t)vmul_f32(v23, v23);
            float32x2_t v25 = vdiv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v24, v22), (float32x2_t)vzip2_s32(v24, v22))), (float32x2_t)vdup_lane_s32(v20, 0));
            float v26 = v25.f32[1];
            if (v25.f32[1] > 1.0) {
              float v26 = 1.0;
            }
            int32x2_t v27 = vcltz_f32(v25);
            if (v25.f32[0] > 1.0) {
              v25.f32[0] = 1.0;
            }
            if (v27.i8[4]) {
              unint64_t v16 = 0;
            }
            else {
              unint64_t v16 = (unint64_t)LODWORD(v26) << 32;
            }
            if (v27.i8[0]) {
              __int32 v15 = 0;
            }
            else {
              __int32 v15 = v25.i32[0];
            }
            goto LABEL_23;
          }
          unint64_t v16 = 0;
          __int32 v15 = 0;
LABEL_22:
          uint64_t v17 = 0xFFFFFFFFLL;
          goto LABEL_23;
        }
      }
    }
  }
}

uint64_t sub_25B47B994(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_25B40044C();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_25B47BA18(uint64_t *a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (objc_msgSend_count(v3, v6, v7) == (v4 - v5) >> 4)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v8 = v3;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v45, v50, 16);
    if (v12)
    {
      int v13 = 0;
      uint64_t v14 = *(void *)v46;
      do
      {
        uint64_t v15 = 0;
        int v16 = v13;
        uint64_t v17 = 16 * v13;
        long long v34 = v38;
        long long v36 = v39;
        long long v30 = v43;
        long long v32 = v41;
        do
        {
          if (*(void *)v46 != v14) {
            objc_enumerationMutation(v8);
          }
          uint64_t v18 = *(void *)(*((void *)&v45 + 1) + 8 * v15);
          float32x2_t v19 = (uint64_t *)(*a1 + v17);
          uint64_t v44 = *v19;
          uint64_t v42 = v19[1];
          objc_msgSend_quad((void *)v18, v10, v11, v30, v32, v34, v36);
          int8x16_t v40 = v20;
          objc_msgSend_quad((void *)v18, v21, v22);
          *(void *)&long long v23 = v42;
          unsigned __int32 v24 = vextq_s8(v40, v40, 8uLL).u32[0];
          *(void *)&long long v25 = v44;
          *(void *)&long long v26 = v44;
          *((void *)&v26 + 1) = __PAIR64__(v37, v24);
          *(void *)&long long v27 = v42;
          *((void *)&v27 + 1) = __PAIR64__(v35, v24);
          unsigned __int32 v29 = vextq_s8(v28, v28, 8uLL).u32[0];
          *((void *)&v23 + 1) = __PAIR64__(v33, v29);
          *((void *)&v25 + 1) = __PAIR64__(v31, v29);
          long long v38 = v27;
          long long v39 = v26;
          src[0] = v26;
          src[1] = v27;
          long long v41 = v23;
          long long v43 = v25;
          src[2] = v23;
          src[3] = v25;
          if (v18) {
            objc_copyStruct((void *)(v18 + 272), src, 64, 1, 0);
          }
          ++v15;
          v17 += 16;
          long long v34 = v38;
          long long v36 = v39;
          long long v30 = v43;
          long long v32 = v41;
        }
        while (v12 != v15);
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v45, v50, 16, v43, v41, v38, v39);
        int v13 = v16 + v15;
      }
      while (v12);
    }
  }
}

void sub_25B47BC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B47BC48(uint64_t *a1, void *a2)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v90 = a2;
  uint64_t v5 = objc_msgSend_walls(v90, v3, v4);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v115, v124, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v116;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v116 != v8) {
          objc_enumerationMutation(v5);
        }
        float v10 = *(void **)(*((void *)&v115 + 1) + 8 * i);
        sub_25B3F6148((uint64_t)&v111);
        sub_25B47C58C((uint64_t)&v111, v10);
        unint64_t v12 = a1[2];
        if (v12 >= a1[3])
        {
          uint64_t v13 = sub_25B47C818(a1 + 1, (uint64_t)&v111, v11);
        }
        else
        {
          sub_25B47C6E4(a1[2], (uint64_t)&v111, v11);
          uint64_t v13 = v12 + 176;
          a1[2] = v12 + 176;
        }
        a1[2] = v13;
        sub_25B3F5FE8((uint64_t)&v111);
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v14, (uint64_t)&v115, v124, 16);
    }
    while (v7);
  }

  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  uint64_t v17 = objc_msgSend_openings(v90, v15, v16);
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v107, v123, 16);
  if (v19)
  {
    uint64_t v20 = *(void *)v108;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v108 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void **)(*((void *)&v107 + 1) + 8 * j);
        sub_25B3F6148((uint64_t)&v111);
        sub_25B47C58C((uint64_t)&v111, v22);
        unint64_t v24 = a1[5];
        if (v24 >= a1[6])
        {
          uint64_t v25 = sub_25B47C818(a1 + 4, (uint64_t)&v111, v23);
        }
        else
        {
          sub_25B47C6E4(a1[5], (uint64_t)&v111, v23);
          uint64_t v25 = v24 + 176;
          a1[5] = v24 + 176;
        }
        a1[5] = v25;
        sub_25B3F5FE8((uint64_t)&v111);
      }
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v26, (uint64_t)&v107, v123, 16);
    }
    while (v19);
  }

  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  unsigned __int32 v29 = objc_msgSend_windows(v90, v27, v28);
  uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v103, v122, 16);
  if (v31)
  {
    uint64_t v32 = *(void *)v104;
    do
    {
      for (uint64_t k = 0; k != v31; ++k)
      {
        if (*(void *)v104 != v32) {
          objc_enumerationMutation(v29);
        }
        long long v34 = *(void **)(*((void *)&v103 + 1) + 8 * k);
        sub_25B3F6148((uint64_t)&v111);
        sub_25B47C58C((uint64_t)&v111, v34);
        unint64_t v36 = a1[8];
        if (v36 >= a1[9])
        {
          uint64_t v37 = sub_25B47C818(a1 + 7, (uint64_t)&v111, v35);
        }
        else
        {
          sub_25B47C6E4(a1[8], (uint64_t)&v111, v35);
          uint64_t v37 = v36 + 176;
          a1[8] = v36 + 176;
        }
        a1[8] = v37;
        sub_25B3F5FE8((uint64_t)&v111);
      }
      uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v38, (uint64_t)&v103, v122, 16);
    }
    while (v31);
  }

  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v41 = objc_msgSend_doors(v90, v39, v40);
  uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v99, v121, 16);
  if (v43)
  {
    uint64_t v44 = *(void *)v100;
    do
    {
      for (uint64_t m = 0; m != v43; ++m)
      {
        if (*(void *)v100 != v44) {
          objc_enumerationMutation(v41);
        }
        long long v46 = *(void **)(*((void *)&v99 + 1) + 8 * m);
        sub_25B3F6148((uint64_t)&v111);
        sub_25B47C58C((uint64_t)&v111, v46);
        unint64_t v48 = a1[11];
        if (v48 >= a1[12])
        {
          uint64_t v49 = sub_25B47C818(a1 + 10, (uint64_t)&v111, v47);
        }
        else
        {
          sub_25B47C6E4(a1[11], (uint64_t)&v111, v47);
          uint64_t v49 = v48 + 176;
          a1[11] = v48 + 176;
        }
        a1[11] = v49;
        sub_25B3F5FE8((uint64_t)&v111);
      }
      uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v50, (uint64_t)&v99, v121, 16);
    }
    while (v43);
  }

  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  unint64_t v53 = objc_msgSend_opendoors(v90, v51, v52);
  uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v54, (uint64_t)&v95, v120, 16);
  if (v55)
  {
    uint64_t v56 = *(void *)v96;
    do
    {
      for (uint64_t n = 0; n != v55; ++n)
      {
        if (*(void *)v96 != v56) {
          objc_enumerationMutation(v53);
        }
        int v58 = *(void **)(*((void *)&v95 + 1) + 8 * n);
        sub_25B3F6148((uint64_t)&v111);
        sub_25B47C58C((uint64_t)&v111, v58);
        unint64_t v60 = a1[14];
        if (v60 >= a1[15])
        {
          uint64_t v61 = sub_25B47C818(a1 + 13, (uint64_t)&v111, v59);
        }
        else
        {
          sub_25B47C6E4(a1[14], (uint64_t)&v111, v59);
          uint64_t v61 = v60 + 176;
          a1[14] = v60 + 176;
        }
        a1[14] = v61;
        sub_25B3F5FE8((uint64_t)&v111);
      }
      uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v62, (uint64_t)&v95, v120, 16);
    }
    while (v55);
  }

  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v65 = objc_msgSend_curvedWalls(v90, v63, v64);
  uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v66, (uint64_t)&v91, v119, 16);
  if (v69)
  {
    uint64_t v70 = *(void *)v92;
    do
    {
      for (iuint64_t i = 0; ii != v69; ++ii)
      {
        if (*(void *)v92 != v70) {
          objc_enumerationMutation(v65);
        }
        uint64_t v72 = objc_msgSend_copy(*(void **)(*((void *)&v91 + 1) + 8 * ii), v67, v68);
        uint64_t v73 = v72;
        uint64_t v75 = (uint64_t *)a1[20];
        unint64_t v74 = a1[21];
        if ((unint64_t)v75 >= v74)
        {
          uint64_t v77 = a1[19];
          uint64_t v78 = ((uint64_t)v75 - v77) >> 3;
          if ((unint64_t)(v78 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v79 = v74 - v77;
          uint64_t v80 = v79 >> 2;
          if (v79 >> 2 <= (unint64_t)(v78 + 1)) {
            uint64_t v80 = v78 + 1;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          long long v114 = a1 + 21;
          if (v81) {
            unint64_t v81 = (unint64_t)sub_25B3FCAD4(v81);
          }
          else {
            uint64_t v82 = 0;
          }
          unint64_t v83 = (uint64_t *)(v81 + 8 * v78);
          unint64_t v84 = v81 + 8 * v82;
          unint64_t v113 = v84;
          *unint64_t v83 = v73;
          unint64_t v76 = v83 + 1;
          v112.i64[1] = (uint64_t)(v83 + 1);
          int64_t v86 = (void *)a1[19];
          uint64_t v85 = (void *)a1[20];
          if (v85 == v86)
          {
            int64x2_t v88 = vdupq_n_s64((unint64_t)v85);
          }
          else
          {
            do
            {
              uint64_t v87 = *--v85;
              *uint64_t v85 = 0;
              *--unint64_t v83 = v87;
            }
            while (v85 != v86);
            int64x2_t v88 = *(int64x2_t *)(a1 + 19);
            unint64_t v76 = (void *)v112.i64[1];
            unint64_t v84 = v113;
          }
          a1[19] = (uint64_t)v83;
          a1[20] = (uint64_t)v76;
          int64x2_t v112 = v88;
          uint64_t v89 = a1[21];
          a1[21] = v84;
          unint64_t v113 = v89;
          uint64_t v111 = v88.i64[0];
          sub_25B47C960((uint64_t)&v111);
        }
        else
        {
          *uint64_t v75 = v72;
          unint64_t v76 = v75 + 1;
        }
        a1[20] = (uint64_t)v76;
      }
      uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v67, (uint64_t)&v91, v119, 16);
    }
    while (v69);
  }
}

void sub_25B47C298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_25B47C3DC(uint64_t a1, unsigned __int8 *a2, void *a3, void *a4)
{
  uint64_t v7 = a1 + 720;
  double result = sub_25B414548((void *)(a1 + 720), a2);
  if (result)
  {
    if (*a3 != a3[1] && *a4 != a4[1])
    {
      uint64_t v18 = a2;
      double result = sub_25B478C94(v7, a2, (long long **)&v18);
      uint64_t v9 = *((void *)result + 5);
      uint64_t v10 = *((void *)result + 6);
      if (v10 != v9)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          unint64_t v14 = *(unsigned int *)(v9 + v11);
          if ((v14 & 0x80000000) == 0 && v14 < (uint64_t)(a3[1] - *a3) >> 4)
          {
            uint64_t v15 = (float32x2_t *)(*a3 + 16 * v14);
            float32x2_t v16 = vsub_f32(v15[1], *v15);
            uint64_t v17 = v9 + v11;
            *(float32x2_t *)(*a4 + v12) = vmla_n_f32(*v15, v16, *(float *)(v17 + 4));
            *(float32x2_t *)(*a4 + v12 + 8) = vmla_n_f32(*v15, v16, *(float *)(v17 + 8));
            uint64_t v9 = *((void *)result + 5);
            uint64_t v10 = *((void *)result + 6);
          }
          ++v13;
          v12 += 16;
          v11 += 12;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2));
      }
    }
  }
  return result;
}

id sub_25B47C4E4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = objc_msgSend_copy(v4, a2, a3);
    uint64_t v6 = (void *)v5;
    *(void *)&long long v7 = *(void *)(a1 + 16);
    *(void *)&long long v8 = *(void *)(a1 + 24);
    long long v9 = v7;
    DWORD2(v9) = *(_DWORD *)(a1 + 68);
    long long v10 = v8;
    DWORD2(v10) = DWORD2(v9);
    DWORD2(v8) = *(_DWORD *)(a1 + 64);
    DWORD2(v7) = DWORD2(v8);
    v12[0] = v9;
    v12[1] = v10;
    v12[2] = v8;
    v12[3] = v7;
    if (v5) {
      objc_copyStruct((void *)(v5 + 272), v12, 64, 1, 0);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_25B47C57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B47C58C(uint64_t a1, void *a2)
{
  id v29 = a2;
  objc_storeStrong((id *)(a1 + 8), a2);
  *(float *)&double v6 = sub_25B47CB1C(a1, v4, v5);
  long long v9 = objc_msgSend_identifier(*(void **)(a1 + 8), v7, v8, v6);
  objc_msgSend_UUIDString(v9, v10, v11);
  id v12 = objc_claimAutoreleasedReturnValue();
  uint64_t v15 = (char *)objc_msgSend_UTF8String(v12, v13, v14);
  sub_25B40B504((std::string *)(a1 + 128), v15);

  uint64_t v18 = objc_msgSend_parentIdentifier(*(void **)(a1 + 8), v16, v17);

  if (v18)
  {
    float32x2_t v21 = objc_msgSend_parentIdentifier(*(void **)(a1 + 8), v19, v20);
    objc_msgSend_UUIDString(v21, v22, v23);
    id v24 = objc_claimAutoreleasedReturnValue();
    long long v27 = (char *)objc_msgSend_UTF8String(v24, v25, v26);
    sub_25B40B504((std::string *)(a1 + 152), v27);
  }
  else
  {
    if (*(char *)(a1 + 175) < 0)
    {
      *(void *)(a1 + 160) = 0;
      uint64_t v28 = *(unsigned char **)(a1 + 152);
    }
    else
    {
      uint64_t v28 = (unsigned char *)(a1 + 152);
      *(unsigned char *)(a1 + 175) = 0;
    }
    unsigned char *v28 = 0;
  }
}

void sub_25B47C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B47C6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_2708F1F58;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v5 = (std::string *)(a1 + 128);
  double v6 = (std::string *)(a1 + 152);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v7 = objc_msgSend_copy(*(void **)(a2 + 8), (const char *)a2, a3);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  std::string::operator=(v5, (const std::string *)(a2 + 128));
  std::string::operator=(v6, (const std::string *)(a2 + 152));
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

void sub_25B47C7E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_25B47C818(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_25B3FBC4C();
  }
  uint64_t v7 = a1 + 2;
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v8 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v18 = v7;
  if (v8) {
    unint64_t v8 = (unint64_t)sub_25B47C9B4(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v16 = v8;
  *(void *)uint64_t v17 = v8 + 176 * v3;
  *(void *)&void v17[16] = v8 + 176 * v9;
  sub_25B47C6E4(*(uint64_t *)v17, a2, a3);
  *(void *)&v17[8] = *(void *)v17 + 176;
  uint64_t v10 = sub_25B47CA6C(a1[1], a1[1], *a1, *a1, *(uint64_t *)v17, *(uint64_t *)v17);
  uint64_t v11 = a1[2];
  long long v12 = *(_OWORD *)&v17[8];
  uint64_t v15 = *(void *)v17 + 176;
  long long v13 = *(_OWORD *)a1;
  *a1 = v10;
  *(_OWORD *)uint64_t v17 = v13;
  *(_OWORD *)(a1 + 1) = v12;
  *(void *)&void v17[16] = v11;
  unint64_t v16 = v13;
  sub_25B47CA00((uint64_t)&v16);
  return v15;
}

void sub_25B47C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B47CA00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B47C960(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_25B47C9B4(unint64_t a1)
{
  if (a1 >= 0x1745D1745D1745ELL) {
    sub_25B3FA70C();
  }
  return operator new(176 * a1);
}

uint64_t sub_25B47CA00(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 176);
    *(void *)(a1 + 16) = i - 176;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B47CA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 176; ; i -= 176)
  {
    uint64_t v10 = a6 + i;
    if (a2 + i - 176 == a4) {
      break;
    }
    uint64_t v11 = a2 + i - 352;
    sub_25B47C6E4(v10 - 352, v11, a3);
  }
  return v10 - 176;
}

float sub_25B47CB1C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_quad(*(void **)(a1 + 8), a2, a3);
  int64x2_t v32 = v4;
  objc_msgSend_quad(*(void **)(a1 + 8), v5, v6);
  *(int64x2_t *)(a1 + 16) = vzip1q_s64(v32, v7);
  objc_msgSend_quad(*(void **)(a1 + 8), v8, v9);
  *(_DWORD *)(a1 + 64) = v10;
  objc_msgSend_quad(*(void **)(a1 + 8), v11, v12);
  *(_DWORD *)(a1 + 68) = v15;
  for (uint64_t i = 24; i != 72; i += 16)
  {
    objc_msgSend_quad(*(void **)(a1 + 8), v13, v14);
    int v35 = v19;
    int v37 = v20;
    uint64_t v34 = v21;
    uint64_t v36 = v22;
    int v39 = v23;
    uint64_t v38 = v24;
    float v25 = *(float *)&v33[i];
    if (v25 >= *(float *)(a1 + 64)) {
      float v25 = *(float *)(a1 + 64);
    }
    *(float *)(a1 + 64) = v25;
    objc_msgSend_quad(*(void **)(a1 + 8), v17, v18);
    int v35 = v28;
    int v37 = DWORD2(v26);
    uint64_t v34 = v29;
    uint64_t v36 = v26;
    int v39 = DWORD2(v27);
    uint64_t v38 = v27;
    float v30 = *(float *)&v33[i];
    if (*(float *)(a1 + 68) >= v30) {
      float v30 = *(float *)(a1 + 68);
    }
    *(float *)(a1 + 68) = v30;
  }
  *(void *)&long long v26 = *(void *)(a1 + 16);
  *(void *)&long long v27 = *(void *)(a1 + 24);
  DWORD2(v26) = *(_DWORD *)(a1 + 64);
  *((float *)&v27 + 2) = v30;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v27;
  float result = v30 - *((float *)&v26 + 2);
  *(float *)(a1 + 72) = result;
  return result;
}

void sub_25B47CC38(float32x2_t *a1, _DWORD *a2, int8x16_t *a3, simd_float4x4 *a4, uint64_t a5, int a6)
{
  *(double *)v12.i64 = sub_25B47CF78(a3, a4, a5);
  float v15 = v12.f32[2];
  LODWORD(v16.f64[0]) = v13.i32[2];
  if (v12.f32[2] >= v13.f32[2]) {
    float v17 = v12.f32[2];
  }
  else {
    float v17 = v13.f32[2];
  }
  v14.f64[0] = 0.001;
  if (v17 < 0.001) {
    goto LABEL_5;
  }
  if (v13.f32[2] < v12.f32[2]) {
    float v15 = v13.f32[2];
  }
  if (v15 >= 0.001)
  {
LABEL_15:
    float32x4_t v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
    float32x2_t v24 = (float32x2_t)vdivq_f32(v12, v28).u64[0];
    float32x4_t v26 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
    float32x2_t v25 = (float32x2_t)vdivq_f32(v13, v26).u64[0];
    v26.i32[0] = a2[4];
    double v27 = fabsf(v26.f32[0]);
    v28.i32[1] = 1051772663;
    if (v27 > 0.000001)
    {
      float32x2_t v49 = v24;
      float32x2_t v52 = v25;
      __float2 v29 = __sincosf_stret((float)(v26.f32[0] / 180.0) * 3.1416);
      v28.f32[0] = -v29.__sinval;
      v28.i32[1] = LODWORD(v29.__cosval);
      *(float32x2_t *)v26.f32 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v29.__sinval), LODWORD(v29.__cosval)), v49.f32[0]), *(float32x2_t *)v28.f32, v49, 1);
      double v27 = COERCE_DOUBLE(vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v29.__sinval), LODWORD(v29.__cosval)), v52.f32[0]), *(float32x2_t *)v28.f32, v52, 1));
      v30.i32[0] = 0;
      v30.f32[1] = (float)(int)a2[3];
      float32x2_t v24 = vadd_f32(*(float32x2_t *)v26.f32, v30);
      float32x2_t v25 = vadd_f32(v30, *(float32x2_t *)&v27);
    }
    if (!a6) {
      goto LABEL_43;
    }
    int v31 = a2[2] - 1;
    int v32 = a2[3] - 1;
    BOOL v33 = v24.f32[0] >= 0.0;
    if (v24.f32[0] > (float)v31) {
      BOOL v33 = 0;
    }
    LODWORD(v27) = v24.i32[1];
    BOOL v34 = v24.f32[1] >= 0.0;
    v28.f32[0] = (float)v32;
    if (v24.f32[1] > (float)v32) {
      BOOL v34 = 0;
    }
    int v35 = v33 && v34;
    BOOL v36 = v25.f32[0] >= 0.0;
    if (v25.f32[0] > (float)v31) {
      BOOL v36 = 0;
    }
    v26.i32[0] = v25.i32[1];
    BOOL v37 = v25.f32[1] >= 0.0;
    if (v25.f32[1] > v28.f32[0]) {
      BOOL v37 = 0;
    }
    int v38 = v36 && v37;
    if (v35 == 1 && v38 != 0) {
      goto LABEL_43;
    }
    if ((v35 | v38) == 1)
    {
      float32x2_t v57 = v24;
      float32x2_t v58 = v25;
      int8x8_t v50 = (int8x8_t)v24;
      int8x8_t v53 = (int8x8_t)v25;
      sub_25B40F040(v56, (unint64_t *)&v57, v31, v32, v26, v27, v28);
      long long v41 = *(void **)&v56[0];
      if (*((void *)&v56[0] + 1) - *(void *)&v56[0] == 8)
      {
        if (v38) {
          unsigned int v42 = -1;
        }
        else {
          unsigned int v42 = 0;
        }
        float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v42), v53, v50);
        float32x2_t v43 = **(float32x2_t **)&v56[0];
        goto LABEL_39;
      }
    }
    else
    {
      float32x2_t v57 = v24;
      float32x2_t v58 = v25;
      sub_25B40F040(v56, (unint64_t *)&v57, v31, v32, v26, v27, v28);
      long long v41 = *(void **)&v56[0];
      if (*((void *)&v56[0] + 1) - *(void *)&v56[0] == 16)
      {
        float32x2_t v24 = **(float32x2_t **)&v56[0];
        float32x2_t v43 = *(float32x2_t *)(*(void *)&v56[0] + 8);
LABEL_39:
        float32x2_t v54 = v43;
        int v44 = 1;
LABEL_41:
        float32x2_t v51 = v24;
        operator delete(v41);
        float32x2_t v24 = v51;
        LODWORD(v18) = v44;
LABEL_42:
        float32x2_t v25 = v54;
        if (!v18) {
          goto LABEL_6;
        }
LABEL_43:
        uint64_t v18 = (const float *)(a2 + 5);
        float32x2_t v45 = vld1_dup_f32(v18);
        *a1 = vdiv_f32(v24, v45);
        a1[1] = vdiv_f32(v25, v45);
        LOBYTE(v18) = 1;
        goto LABEL_44;
      }
    }
    int v44 = 0;
    LODWORD(v18) = 0;
    float32x2_t v24 = 0;
    float32x2_t v54 = v40;
    if (!v41) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  int8x16_t v19 = a3[1];
  v16.f64[0] = *(float *)v16.f64;
  int8x16_t v20 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v14, v16).i64[0], 0);
  float32x4_t v47 = (float32x4_t)vbslq_s8(v20, *a3, v19);
  float32x4_t v48 = (float32x4_t)vbslq_s8(v20, v19, *a3);
  float32x4_t v46 = vsubq_f32(v47, v48);
  float32x4_t v21 = vmulq_f32(v46, v46);
  float32x4_t v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
  *(double *)v12.i64 = (sqrtf(v12.f32[0]) + -0.001) / 0.0299999993;
  if (((int)*(double *)v12.i64 & 0x80000000) == 0)
  {
    int v22 = 0;
    int v23 = (int)*(double *)v12.i64 + 1;
    do
    {
      __int32 v55 = v12.i32[3];
      v56[0] = vmlaq_n_f32(v48, v46, (float)v22 / (float)v23);
      v56[1] = v47;
      *(double *)v12.i64 = sub_25B47CF78(v56, a4, a5);
      v12.i32[3] = v55;
      if (v12.f32[2] > 0.001) {
        goto LABEL_15;
      }
    }
    while (v23 != ++v22);
  }
LABEL_5:
  LOBYTE(v18) = 0;
LABEL_6:
  a1->i8[0] = 0;
LABEL_44:
  a1[2].i8[0] = (char)v18;
}

double sub_25B47CF78(_OWORD *a1, simd_float4x4 *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x10uLL);
  _OWORD *v6 = *a1;
  int64x2_t v7 = sub_25B3FFAEC(2uLL);
  v7[1] = a1[1];
  _OWORD *v7 = *v6;
  operator delete(v6);
  simd_float4x4 v31 = __invert_f4(*a2);
  float32x4_t v30 = (float32x4_t)v31.columns[0];
  float32x4_t v27 = (float32x4_t)v31.columns[2];
  float32x4_t v28 = (float32x4_t)v31.columns[1];
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  v31.columns[0] = *(simd_float4 *)a3;
  v31.columns[1] = *(simd_float4 *)(a3 + 16);
  v31.columns[0].i32[3] = 0;
  float32x4_t v25 = (float32x4_t)v31.columns[0];
  float32x4_t v26 = (float32x4_t)v31.columns[3];
  v31.columns[1].i32[3] = 0;
  v31.columns[0] = *(simd_float4 *)(a3 + 32);
  v31.columns[0].i32[3] = 0;
  float32x4_t v23 = (float32x4_t)v31.columns[0];
  float32x4_t v24 = (float32x4_t)v31.columns[1];
  do
  {
    float32x4_t v12 = vaddq_f32(v26, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(v7[v11])), v28, *(float32x2_t *)&v7[v11], 1), v27, (float32x4_t)v7[v11], 2));
    float32x4_t v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v12.f32[0]), v24, *(float32x2_t *)v12.f32, 1), v23, v12, 2), (float32x4_t)xmmword_25B5F12B0, v12, 3);
    if ((unint64_t)v9 >= v10)
    {
      float32x4_t v22 = v13;
      uint64_t v15 = ((char *)v9 - (char *)v8) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v10 - (void)v8) >> 3 > v16) {
        unint64_t v16 = (uint64_t)(v10 - (void)v8) >> 3;
      }
      if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)sub_25B3FFAEC(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      int8x16_t v19 = (float32x4_t *)(v17 + 16 * v15);
      *int8x16_t v19 = v22;
      float64x2_t v14 = v19 + 1;
      while (v9 != (float32x4_t *)v8)
      {
        float32x4_t v20 = v9[-1];
        --v9;
        v19[-1] = v20;
        --v19;
      }
      unint64_t v10 = v17 + 16 * v18;
      if (v8) {
        operator delete(v8);
      }
      unint64_t v8 = (int32x4_t *)v19;
    }
    else
    {
      *uint64_t v9 = v13;
      float64x2_t v14 = v9 + 1;
    }
    ++v11;
    uint64_t v9 = v14;
  }
  while (v11 != 2);
  int32x4_t v29 = *v8;
  operator delete(v8);
  operator delete(v7);
  *(void *)&double result = vzip1q_s32((int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), v29).u64[0];
  return result;
}

void sub_25B47D17C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B47D1AC(uint64_t a1)
{
  sub_25B47D1E4(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B47D1E4(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1530;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }
  int64x2_t v7 = (void **)(a1 + 136);
  sub_25B3F5F28(&v7);
  int64x2_t v7 = (void **)(a1 + 112);
  sub_25B3F5F28(&v7);

  int64x2_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(void *)(a1 + 24) = v5;
    operator delete(v5);
  }

  return a1;
}

void sub_25B47D2B0(id *a1)
{
  sub_25B47D2E8(a1);

  JUMPOUT(0x261163EE0);
}

id *sub_25B47D2E8(id *a1)
{
  return a1;
}

uint64_t sub_25B47D348(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1530;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v3 = objc_opt_new();
  int64x2_t v4 = *v2;
  void *v2 = (void *)v3;

  uint64_t v5 = objc_opt_new();
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v5;

  return a1;
}

void sub_25B47D400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(void **)(v2 + 184);
  if (v5)
  {
    *(void *)(v2 + 192) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 + 160);
  if (v6)
  {
    *(void *)(v2 + 168) = v6;
    operator delete(v6);
  }
  sub_25B3F5F28((void ***)va);
  sub_25B3F5F28((void ***)va);

  int64x2_t v7 = *(void **)(v2 + 48);
  if (v7)
  {
    *(void *)(v2 + 56) = v7;
    operator delete(v7);
  }

  unint64_t v8 = *(void **)(v2 + 16);
  if (v8)
  {
    *(void *)(v2 + 24) = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

void *sub_25B47D484(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_25B3FA70C();
  }
  return operator new(20 * a1);
}

void sub_25B47D4CC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v7 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = v7;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v20, v24, 16);
  if (v10)
  {
    uint64_t v11 = *(void *)v21;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        float32x4_t v13 = *(void **)(*((void *)&v20 + 1) + 8 * v12);
        sub_25B3F6148((uint64_t)v18);
        sub_25B47C58C((uint64_t)v18, v13);
        v19[60] = sub_25B47D97C(a3, a4, (uint64_t)v19);
        unint64_t v15 = a1[1];
        if (v15 >= a1[2])
        {
          uint64_t v16 = sub_25B47C818(a1, (uint64_t)v18, v14);
        }
        else
        {
          sub_25B47C6E4(a1[1], (uint64_t)v18, v14);
          uint64_t v16 = v15 + 176;
          a1[1] = v15 + 176;
        }
        a1[1] = v16;
        sub_25B3F5FE8((uint64_t)v18);
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v17, (uint64_t)&v20, v24, 16);
    }
    while (v10);
  }
}

void sub_25B47D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_25B3F5F28(&a9);
  _Unwind_Resume(a1);
}

void sub_25B47D698(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int64x2_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 176;
      uint64_t v6 = v3 - 176;
      id v7 = v3 - 176;
      do
      {
        id v8 = *(void (***)(char *))v7;
        v7 -= 176;
        (*v8)(v6);
        v5 -= 176;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      int64x2_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_25B47D738(void **a1, unint64_t a2)
{
  int64x2_t v4 = (char *)*a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    float32x4_t v26 = &v4[36 * a2];
    goto LABEL_22;
  }
  id v8 = a1[2];
  if (0x8E38E38E38E38E39 * ((v8 - v5) >> 2) >= v7)
  {
    float32x4_t v26 = &v5[36 * v7];
    uint64_t v27 = 36 * a2 - 4 * ((v5 - (unsigned char *)*a1) >> 2);
    float32x4_t v28 = v5 + 33;
    int32x2_t v29 = vdup_n_s32(0x49742400u);
    do
    {
      *(_OWORD *)(v28 - 33) = xmmword_25B5F1380;
      *(int32x2_t *)(v28 - 17) = v29;
      *(void *)(v28 - 9) = -3175874560;
      *(_WORD *)(v28 - 1) = 0;
      v28 += 36;
      v27 -= 36;
    }
    while (v27);
LABEL_22:
    a1[1] = v26;
    return;
  }
  if (a2 > 0x71C71C71C71C71CLL) {
    sub_25B3FBC4C();
  }
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v4) >> 2);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x38E38E38E38E38ELL) {
    unint64_t v11 = 0x71C71C71C71C71CLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)sub_25B47D930(v11);
  uint64_t v14 = 36 * v6;
  uint64_t v15 = 36 * a2;
  uint64_t v16 = &v12[36 * v6];
  int32x2_t v17 = vdup_n_s32(0x49742400u);
  uint64_t v18 = v12;
  int8x16_t v19 = &v12[36 * a2];
  do
  {
    long long v20 = &v18[v14];
    *(_OWORD *)long long v20 = xmmword_25B5F1380;
    *((int32x2_t *)v20 + 2) = v17;
    *((void *)v20 + 3) = -3175874560;
    *((_WORD *)v20 + 16) = 0;
    v15 -= 36;
    v18 += 36;
  }
  while (v14 != v15);
  long long v21 = &v12[36 * v13];
  long long v23 = (char *)*a1;
  long long v22 = (char *)a1[1];
  if (v22 != *a1)
  {
    do
    {
      long long v24 = *(_OWORD *)(v22 - 36);
      long long v25 = *(_OWORD *)(v22 - 20);
      *((_WORD *)v16 - 2) = *((_WORD *)v22 - 2);
      *(_OWORD *)(v16 - 20) = v25;
      *(_OWORD *)(v16 - 36) = v24;
      v16 -= 36;
      v22 -= 36;
    }
    while (v22 != v23);
    long long v22 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v19;
  a1[2] = v21;
  if (v22)
  {
    operator delete(v22);
  }
}

void *sub_25B47D930(unint64_t a1)
{
  if (a1 >= 0x71C71C71C71C71DLL) {
    sub_25B3FA70C();
  }
  return operator new(36 * a1);
}

uint64_t sub_25B47D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && a1 && a2) {
    operator new[]();
  }
  return 0;
}

void sub_25B47DDC8(char **a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[8 * a2];
    }
  }
  else
  {
    unint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 3)
    {
      long long v23 = &v5[8 * (a2 - v7)];
      uint64_t v24 = 8 * a2 - 8 * v7;
      do
      {
        *(void *)uint64_t v5 = *a3;
        v5 += 8;
        v24 -= 8;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 61) {
        sub_25B3FBC4C();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 2;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)sub_25B3FCAD4(v12);
      uint64_t v15 = &v13[8 * v7];
      uint64_t v16 = &v13[8 * a2];
      uint64_t v17 = 8 * a2 - 8 * v7;
      uint64_t v18 = v15;
      do
      {
        *(void *)uint64_t v18 = *a3;
        v18 += 8;
        v17 -= 8;
      }
      while (v17);
      int8x16_t v19 = &v13[8 * v14];
      long long v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 8)
      {
        uint64_t v22 = *((void *)i - 1);
        *((void *)v15 - 1) = v22;
        v15 -= 8;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

unint64_t sub_25B47DEF4(unint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (int *)result;
LABEL_2:
  unint64_t v11 = a2 - 1;
  uint64_t k = v10;
  while (1)
  {
    unint64_t v10 = k;
    uint64_t v13 = (char *)a2 - (char *)k;
    unint64_t v14 = a2 - k;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v45 = *v11;
          int v46 = *k;
          uint64_t v47 = *(void *)(*(void *)a3 + 16);
          if (*(unsigned __int8 *)(v47 + 20 * *v11) == *(unsigned __int8 *)(v47 + 20 * *k))
          {
            if (*(float *)(v47 + 20 * v45 + 4) <= *(float *)(v47 + 20 * v46 + 4)) {
              return result;
            }
          }
          else if (!*(unsigned char *)(v47 + 20 * *v11))
          {
            return result;
          }
          *uint64_t k = v45;
          int *v11 = v46;
          break;
        case 3uLL:
          uint64_t v48 = *(void *)(*(void *)a3 + 16);
          return (unint64_t)sub_25B47EB14(k, k + 1, a2 - 1, v48);
        case 4uLL:
          return (unint64_t)sub_25B47EC9C(k, k + 1, k + 2, a2 - 1, a3);
        case 5uLL:
          return (unint64_t)sub_25B47EDF8(k, k + 1, k + 2, k + 3, a2 - 1, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (k == a2) {
        return result;
      }
      int64_t v59 = (v14 - 2) >> 1;
      uint64_t v60 = *(void *)a3;
      int64_t v61 = v59;
      while (1)
      {
        int64_t v62 = v61;
        if (v59 < v61) {
          goto LABEL_157;
        }
        uint64_t v63 = (2 * v61) | 1;
        uint64_t v64 = &k[v63];
        if (2 * v62 + 2 >= (uint64_t)v14)
        {
          uint64_t v66 = *(void *)(v60 + 16);
          goto LABEL_139;
        }
        int v65 = v64[1];
        uint64_t v66 = *(void *)(v60 + 16);
        if (*(unsigned __int8 *)(v66 + 20 * *v64) != *(unsigned __int8 *)(v66 + 20 * v65)) {
          break;
        }
        if (*(float *)(v66 + 20 * *v64 + 4) > *(float *)(v66 + 20 * v65 + 4)) {
          goto LABEL_138;
        }
LABEL_139:
        int v67 = *v64;
        int v68 = k[v62];
        double result = *(unsigned __int8 *)(v66 + 20 * v68);
        if (*(unsigned __int8 *)(v66 + 20 * *v64) == result)
        {
          if (*(float *)(v66 + 20 * v67 + 4) <= *(float *)(v66 + 20 * v68 + 4)) {
            goto LABEL_143;
          }
        }
        else if (!*(unsigned char *)(v66 + 20 * *v64))
        {
LABEL_143:
          k[v62] = v67;
          if (v59 < v63)
          {
LABEL_144:
            uint64_t v69 = v64;
LABEL_156:
            *uint64_t v69 = v68;
            goto LABEL_157;
          }
          while (2)
          {
            uint64_t v70 = 2 * v63;
            uint64_t v63 = (2 * v63) | 1;
            uint64_t v69 = &k[v63];
            uint64_t v71 = v70 + 2;
            if (v71 < (uint64_t)v14)
            {
              int v72 = v69[1];
              if (*(unsigned __int8 *)(v66 + 20 * *v69) == *(unsigned __int8 *)(v66 + 20 * v72))
              {
                if (*(float *)(v66 + 20 * *v69 + 4) <= *(float *)(v66 + 20 * v72 + 4)) {
                  goto LABEL_151;
                }
              }
              else if (!*(unsigned char *)(v66 + 20 * *v69))
              {
                goto LABEL_151;
              }
              ++v69;
              uint64_t v63 = v71;
            }
LABEL_151:
            int v73 = *v69;
            if (*(unsigned __int8 *)(v66 + 20 * *v69) == result)
            {
              if (*(float *)(v66 + 20 * v73 + 4) > *(float *)(v66 + 20 * v68 + 4)) {
                goto LABEL_144;
              }
            }
            else if (*(unsigned char *)(v66 + 20 * *v69))
            {
              goto LABEL_144;
            }
            *uint64_t v64 = v73;
            uint64_t v64 = v69;
            if (v59 < v63) {
              goto LABEL_156;
            }
            continue;
          }
        }
LABEL_157:
        int64_t v61 = v62 - 1;
        if (!v62)
        {
          uint64_t v74 = (unint64_t)v13 >> 2;
          while (1)
          {
            uint64_t v75 = 0;
            int v76 = *k;
            uint64_t v77 = *(void *)a3;
            uint64_t v78 = k;
            do
            {
              uint64_t v79 = v78;
              v78 += v75 + 1;
              uint64_t v80 = 2 * v75;
              uint64_t v75 = (2 * v75) | 1;
              uint64_t v81 = v80 + 2;
              if (v81 >= v74) {
                goto LABEL_166;
              }
              double result = v78[1];
              uint64_t v82 = *(void *)(v77 + 16);
              if (*(unsigned __int8 *)(v82 + 20 * *v78) != *(unsigned __int8 *)(v82 + 20 * (int)result))
              {
                if (!*(unsigned char *)(v82 + 20 * *v78)) {
                  goto LABEL_166;
                }
LABEL_165:
                ++v78;
                uint64_t v75 = v81;
                goto LABEL_166;
              }
              double result = v82 + 20 * (int)result;
              if (*(float *)(v82 + 20 * *v78 + 4) > *(float *)(result + 4)) {
                goto LABEL_165;
              }
LABEL_166:
              int *v79 = *v78;
            }
            while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
            if (v78 == --a2)
            {
              *uint64_t v78 = v76;
              goto LABEL_183;
            }
            *uint64_t v78 = *a2;
            *a2 = v76;
            uint64_t v83 = (char *)v78 - (char *)k + 4;
            if (v83 < 5) {
              goto LABEL_183;
            }
            unint64_t v84 = ((unint64_t)v83 >> 2) - 2;
            unint64_t v85 = v84 >> 1;
            int64_t v86 = &k[v84 >> 1];
            double result = *v86;
            uint64_t v87 = *(void *)(v77 + 16);
            int v88 = *v78;
            int v89 = *v78;
            int v90 = *(unsigned __int8 *)(v87 + 20 * *v78);
            if (*(unsigned __int8 *)(v87 + 20 * (int)result) == v90)
            {
              if (*(float *)(v87 + 20 * (int)result + 4) <= *(float *)(v87 + 20 * v89 + 4)) {
                goto LABEL_183;
              }
            }
            else if (!*(unsigned char *)(v87 + 20 * (int)result))
            {
              goto LABEL_183;
            }
            *uint64_t v78 = result;
            if (v84 >= 2)
            {
              long long v92 = (float *)(v87 + 20 * v89 + 4);
              do
              {
                unint64_t v93 = v85 - 1;
                unint64_t v85 = (v85 - 1) >> 1;
                long long v91 = &k[v85];
                double result = *v91;
                if (*(unsigned __int8 *)(v87 + 20 * (int)result) == v90)
                {
                  if (*(float *)(v87 + 20 * (int)result + 4) <= *v92) {
                    goto LABEL_175;
                  }
                }
                else if (!*(unsigned char *)(v87 + 20 * (int)result))
                {
                  goto LABEL_175;
                }
                int *v86 = result;
                int64_t v86 = &k[v85];
              }
              while (v93 > 1);
            }
            else
            {
LABEL_175:
              long long v91 = v86;
            }
            *long long v91 = v88;
LABEL_183:
            if (v74-- <= 2) {
              return result;
            }
          }
        }
      }
      if (!*(unsigned char *)(v66 + 20 * *v64)) {
        goto LABEL_139;
      }
LABEL_138:
      ++v64;
      uint64_t v63 = 2 * v62 + 2;
      goto LABEL_139;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &k[v14 >> 1];
    uint64_t v17 = *(void *)(*(void *)a3 + 16);
    if ((unint64_t)v13 >= 0x201)
    {
      sub_25B47EB14(v10, &v10[v14 >> 1], a2 - 1, v17);
      sub_25B47EB14(v10 + 1, v16 - 1, a2 - 2, *(void *)(*(void *)a3 + 16));
      sub_25B47EB14(v10 + 2, &v10[v15 + 1], a2 - 3, *(void *)(*(void *)a3 + 16));
      double result = (unint64_t)sub_25B47EB14(v16 - 1, v16, &v10[v15 + 1], *(void *)(*(void *)a3 + 16));
      int v18 = *v10;
      *unint64_t v10 = *v16;
      *uint64_t v16 = v18;
    }
    else
    {
      double result = (unint64_t)sub_25B47EB14(&v10[v14 >> 1], v10, a2 - 1, v17);
    }
    --a4;
    int v19 = *v10;
    int v20 = *v10;
    uint64_t v21 = *(void *)a3;
    if (a5)
    {
      uint64_t v22 = *(void *)(v21 + 16);
      int v23 = *(unsigned __int8 *)(v22 + 20 * v20);
LABEL_16:
      long long v25 = (float *)(v22 + 20 * v20 + 4);
      for (uint64_t i = v10 + 1; *(unsigned __int8 *)(v22 + 20 * *i) == v23; ++i)
      {
        if (*(float *)(v22 + 20 * *i + 4) <= *v25) {
          goto LABEL_22;
        }
LABEL_21:
        ;
      }
      if (*(unsigned char *)(v22 + 20 * *i)) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v27 = i - 1;
      uint64_t j = a2 - 1;
      if (i - 1 != v10)
      {
        while (1)
        {
          if (*(unsigned __int8 *)(v22 + 20 * *j) == v23)
          {
            if (*(float *)(v22 + 20 * *j + 4) > *v25) {
              goto LABEL_37;
            }
          }
          else if (*(unsigned char *)(v22 + 20 * *j))
          {
            goto LABEL_37;
          }
          --j;
        }
      }
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 1; ; --j)
        {
          if (*(unsigned __int8 *)(v22 + 20 * *j) == v23)
          {
            if (i >= j || *(float *)(v22 + 20 * *j + 4) > *v25) {
              break;
            }
          }
          else if (i >= j || *(unsigned char *)(v22 + 20 * *j))
          {
            break;
          }
        }
      }
LABEL_37:
      if (i >= j) {
        goto LABEL_51;
      }
      int v29 = *j;
      int v30 = *i;
      simd_float4x4 v31 = i;
      int v32 = j;
      while (2)
      {
        *v31++ = v29;
        *int v32 = v30;
        while (2)
        {
          int v30 = *v31;
          if (*(unsigned __int8 *)(v22 + 20 * *v31) == v23)
          {
            if (*(float *)(v22 + 20 * v30 + 4) <= *v25) {
              break;
            }
            goto LABEL_44;
          }
          if (*(unsigned char *)(v22 + 20 * *v31))
          {
LABEL_44:
            ++v31;
            continue;
          }
          break;
        }
        uint64_t v27 = v31 - 1;
        do
        {
          while (1)
          {
            int v33 = *--v32;
            int v29 = v33;
            int v34 = *(unsigned __int8 *)(v22 + 20 * v33);
            if (v34 != v23) {
              break;
            }
            if (*(float *)(v22 + 20 * v29 + 4) > *v25) {
              goto LABEL_50;
            }
          }
        }
        while (!v34);
LABEL_50:
        if (v31 < v32) {
          continue;
        }
        break;
      }
LABEL_51:
      if (v27 != v10) {
        *unint64_t v10 = *v27;
      }
      int *v27 = v19;
      if (i < j)
      {
LABEL_56:
        double result = sub_25B47DEF4(v10, v27, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t k = v27 + 1;
      }
      else
      {
        BOOL v35 = sub_25B47EFAC(v10, v27, a3);
        uint64_t k = v27 + 1;
        double result = sub_25B47EFAC(v27 + 1, a2, a3);
        if (result)
        {
          a2 = v27;
          if (v35) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v35) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      int v24 = *(v10 - 1);
      uint64_t v22 = *(void *)(v21 + 16);
      int v23 = *(unsigned __int8 *)(v22 + 20 * v20);
      if (*(unsigned __int8 *)(v22 + 20 * v24) == v23)
      {
        int v23 = *(unsigned __int8 *)(v22 + 20 * v24);
        if (*(float *)(v22 + 20 * v24 + 4) > *(float *)(v22 + 20 * v20 + 4))
        {
          int v23 = *(unsigned __int8 *)(v22 + 20 * v24);
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v22 + 20 * v24))
      {
        goto LABEL_16;
      }
      int v36 = *v11;
      int v37 = *(unsigned __int8 *)(v22 + 20 * *v11);
      if (v23 == v37)
      {
        if (*(float *)(v22 + 20 * v20 + 4) > *(float *)(v22 + 20 * v36 + 4)) {
          goto LABEL_88;
        }
      }
      else if (v23)
      {
LABEL_88:
        for (uint64_t k = v10 + 1; ; ++k)
        {
          if (v23 == *(unsigned __int8 *)(v22 + 20 * *k))
          {
            if (*(float *)(v22 + 20 * v20 + 4) > *(float *)(v22 + 20 * *k + 4)) {
              goto LABEL_65;
            }
          }
          else if (v23)
          {
            goto LABEL_65;
          }
        }
      }
      for (uint64_t k = v10 + 1; k < a2; ++k)
      {
        if (v23 == *(unsigned __int8 *)(v22 + 20 * *k))
        {
          if (*(float *)(v22 + 20 * v20 + 4) > *(float *)(v22 + 20 * *k + 4)) {
            break;
          }
        }
        else if (v23)
        {
          break;
        }
      }
LABEL_65:
      uint64_t m = a2;
      if (k < a2)
      {
        for (uint64_t m = a2 - 1; ; --m)
        {
          if (v23 == v37)
          {
            if (*(float *)(v22 + 20 * v20 + 4) <= *(float *)(v22 + 20 * v36 + 4)) {
              break;
            }
          }
          else if (!v23)
          {
            break;
          }
          int v39 = *(m - 1);
          int v36 = v39;
          int v37 = *(unsigned __int8 *)(v22 + 20 * v39);
        }
      }
      if (k >= m) {
        goto LABEL_84;
      }
      float32x2_t v40 = (float *)(v22 + 20 * v20 + 4);
      int v41 = *k;
      int v42 = *m;
      do
      {
        *k++ = v42;
        *uint64_t m = v41;
        while (1)
        {
          int v41 = *k;
          if (v23 == *(unsigned __int8 *)(v22 + 20 * *k)) {
            break;
          }
          if (v23) {
            goto LABEL_81;
          }
LABEL_79:
          ++k;
        }
        if (*v40 <= *(float *)(v22 + 20 * v41 + 4)) {
          goto LABEL_79;
        }
        do
        {
LABEL_81:
          while (1)
          {
            int v43 = *--m;
            int v42 = v43;
            if (v23 == *(unsigned __int8 *)(v22 + 20 * v43)) {
              break;
            }
            if (!v23) {
              goto LABEL_83;
            }
          }
        }
        while (*v40 > *(float *)(v22 + 20 * v42 + 4));
LABEL_83:
        ;
      }
      while (k < m);
LABEL_84:
      int v44 = k - 1;
      BOOL v5 = k - 1 >= v10;
      BOOL v6 = k - 1 == v10;
      if (k - 1 != v10) {
        *unint64_t v10 = *v44;
      }
      a5 = 0;
      *int v44 = v19;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (k == a2) {
      return result;
    }
    long long v95 = k + 1;
    if (k + 1 == a2) {
      return result;
    }
    uint64_t v96 = *(void *)(*(void *)a3 + 16);
    while (1)
    {
      long long v97 = v10;
      unint64_t v10 = v95;
      int v98 = v97[1];
      int v99 = *(unsigned __int8 *)(v96 + 20 * v98);
      if (v99 == *(unsigned __int8 *)(v96 + 20 * *v97))
      {
        if (*(float *)(v96 + 20 * v98 + 4) <= *(float *)(v96 + 20 * *v97 + 4)) {
          goto LABEL_201;
        }
      }
      else if (!*(unsigned char *)(v96 + 20 * v98))
      {
        goto LABEL_201;
      }
      int v100 = *v97;
      do
      {
        while (1)
        {
          long long v101 = v97;
          int v102 = v100;
          int v103 = *--v97;
          int v100 = v103;
          v97[2] = v102;
          if (v99 != *(unsigned __int8 *)(v96 + 20 * v103)) {
            break;
          }
          if (*(float *)(v96 + 20 * v98 + 4) <= *(float *)(v96 + 20 * v100 + 4)) {
            goto LABEL_200;
          }
        }
      }
      while (v99);
LABEL_200:
      int *v101 = v98;
LABEL_201:
      long long v95 = v10 + 1;
      if (v10 + 1 == a2) {
        return result;
      }
    }
  }
  if (k == a2) {
    return result;
  }
  float32x2_t v49 = k + 1;
  if (k + 1 == a2) {
    return result;
  }
  uint64_t v50 = 0;
  uint64_t v51 = *(void *)(*(void *)a3 + 16);
  float32x2_t v52 = k;
  while (2)
  {
    int8x8_t v53 = v52;
    float32x2_t v52 = v49;
    int v55 = *v53;
    int v54 = v53[1];
    int v56 = *(unsigned __int8 *)(v51 + 20 * v54);
    if (v56 == *(unsigned __int8 *)(v51 + 20 * *v53))
    {
      double result = v51 + 20 * v54;
      if (*(float *)(result + 4) <= *(float *)(v51 + 20 * v55 + 4)) {
        goto LABEL_127;
      }
    }
    else if (!*(unsigned char *)(v51 + 20 * v54))
    {
      goto LABEL_127;
    }
    v53[1] = v55;
    float32x2_t v57 = k;
    if (v53 == k) {
      goto LABEL_126;
    }
    uint64_t v58 = v50;
    while (2)
    {
      double result = *(unsigned int *)((char *)k + v58 - 4);
      if (v56 == *(unsigned __int8 *)(v51 + 20 * (int)result))
      {
        if (*(float *)(v51 + 20 * v54 + 4) <= *(float *)(v51 + 20 * (int)result + 4))
        {
          float32x2_t v57 = v53;
          goto LABEL_126;
        }
LABEL_123:
        --v53;
        *(int *)((char *)k + v58) = result;
        v58 -= 4;
        if (!v58)
        {
          float32x2_t v57 = k;
          goto LABEL_126;
        }
        continue;
      }
      break;
    }
    if (v56) {
      goto LABEL_123;
    }
    float32x2_t v57 = (int *)((char *)k + v58);
LABEL_126:
    int *v57 = v54;
LABEL_127:
    float32x2_t v49 = v52 + 1;
    v50 += 4;
    if (v52 + 1 != a2) {
      continue;
    }
    return result;
  }
}

int *sub_25B47EB14(int *result, int *a2, int *a3, uint64_t a4)
{
  int v4 = *a2;
  int v5 = *result;
  int v6 = *(unsigned __int8 *)(a4 + 20 * *a2);
  int v7 = *a2;
  int v8 = *result;
  int v9 = *(unsigned __int8 *)(a4 + 20 * *result);
  if (v6 != v9)
  {
    if (!*(unsigned char *)(a4 + 20 * *a2)) {
      goto LABEL_3;
    }
LABEL_7:
    int v11 = *a3;
    if (*(unsigned __int8 *)(a4 + 20 * *a3) == v6)
    {
      if (*(float *)(a4 + 20 * v11 + 4) <= *(float *)(a4 + 20 * v7 + 4))
      {
LABEL_9:
        unsigned __int8 *result = v4;
        *a2 = v5;
        int v12 = *a3;
        if (*(unsigned __int8 *)(a4 + 20 * *a3) == v9)
        {
          if (*(float *)(a4 + 20 * v12 + 4) <= *(float *)(a4 + 20 * v8 + 4)) {
            return result;
          }
        }
        else if (!*(unsigned char *)(a4 + 20 * *a3))
        {
          return result;
        }
        *a2 = v12;
LABEL_20:
        *a3 = v5;
        return result;
      }
    }
    else if (!*(unsigned char *)(a4 + 20 * *a3))
    {
      goto LABEL_9;
    }
    unsigned __int8 *result = v11;
    goto LABEL_20;
  }
  if (*(float *)(a4 + 20 * v7 + 4) > *(float *)(a4 + 20 * v8 + 4)) {
    goto LABEL_7;
  }
LABEL_3:
  int v10 = *a3;
  if (*(unsigned __int8 *)(a4 + 20 * *a3) == v6)
  {
    if (*(float *)(a4 + 20 * v10 + 4) <= *(float *)(a4 + 20 * v7 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(a4 + 20 * *a3))
  {
    return result;
  }
  *a2 = v10;
  *a3 = v4;
  int v13 = *a2;
  int v14 = *result;
  if (*(unsigned __int8 *)(a4 + 20 * *a2) == *(unsigned __int8 *)(a4 + 20 * *result))
  {
    if (*(float *)(a4 + 20 * v13 + 4) > *(float *)(a4 + 20 * v14 + 4)) {
      goto LABEL_22;
    }
  }
  else if (*(unsigned char *)(a4 + 20 * *a2))
  {
LABEL_22:
    unsigned __int8 *result = v13;
    *a2 = v14;
  }
  return result;
}

int *sub_25B47EC9C(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  double result = sub_25B47EB14(a1, a2, a3, *(void *)(*(void *)a5 + 16));
  int v11 = *a4;
  int v12 = *a3;
  uint64_t v13 = *(void *)(*(void *)a5 + 16);
  if (*(unsigned __int8 *)(v13 + 20 * *a4) == *(unsigned __int8 *)(v13 + 20 * *a3))
  {
    if (*(float *)(v13 + 20 * v11 + 4) <= *(float *)(v13 + 20 * v12 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v13 + 20 * *a4))
  {
    return result;
  }
  *a3 = v11;
  *a4 = v12;
  int v14 = *a3;
  int v15 = *a2;
  if (*(unsigned __int8 *)(v13 + 20 * *a3) == *(unsigned __int8 *)(v13 + 20 * *a2))
  {
    if (*(float *)(v13 + 20 * v14 + 4) <= *(float *)(v13 + 20 * v15 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v13 + 20 * *a3))
  {
    return result;
  }
  *a2 = v14;
  *a3 = v15;
  int v16 = *a2;
  int v17 = *a1;
  if (*(unsigned __int8 *)(v13 + 20 * *a2) != *(unsigned __int8 *)(v13 + 20 * *a1))
  {
    if (!*(unsigned char *)(v13 + 20 * *a2)) {
      return result;
    }
    goto LABEL_13;
  }
  if (*(float *)(v13 + 20 * v16 + 4) > *(float *)(v13 + 20 * v17 + 4))
  {
LABEL_13:
    *a1 = v16;
    *a2 = v17;
  }
  return result;
}

int *sub_25B47EDF8(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  double result = sub_25B47EC9C(a1, a2, a3, a4, a6);
  int v13 = *a5;
  int v14 = *a4;
  uint64_t v15 = *(void *)(*(void *)a6 + 16);
  if (*(unsigned __int8 *)(v15 + 20 * *a5) == *(unsigned __int8 *)(v15 + 20 * *a4))
  {
    if (*(float *)(v15 + 20 * v13 + 4) <= *(float *)(v15 + 20 * v14 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v15 + 20 * *a5))
  {
    return result;
  }
  *a4 = v13;
  *a5 = v14;
  int v16 = *a4;
  int v17 = *a3;
  if (*(unsigned __int8 *)(v15 + 20 * *a4) == *(unsigned __int8 *)(v15 + 20 * *a3))
  {
    if (*(float *)(v15 + 20 * v16 + 4) <= *(float *)(v15 + 20 * v17 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v15 + 20 * *a4))
  {
    return result;
  }
  *a3 = v16;
  *a4 = v17;
  int v18 = *a3;
  int v19 = *a2;
  if (*(unsigned __int8 *)(v15 + 20 * *a3) == *(unsigned __int8 *)(v15 + 20 * *a2))
  {
    if (*(float *)(v15 + 20 * v18 + 4) <= *(float *)(v15 + 20 * v19 + 4)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v15 + 20 * *a3))
  {
    return result;
  }
  *a2 = v18;
  *a3 = v19;
  int v20 = *a2;
  int v21 = *a1;
  if (*(unsigned __int8 *)(v15 + 20 * *a2) != *(unsigned __int8 *)(v15 + 20 * *a1))
  {
    if (!*(unsigned char *)(v15 + 20 * *a2)) {
      return result;
    }
    goto LABEL_17;
  }
  if (*(float *)(v15 + 20 * v20 + 4) > *(float *)(v15 + 20 * v21 + 4))
  {
LABEL_17:
    *a1 = v20;
    *a2 = v21;
  }
  return result;
}

BOOL sub_25B47EFAC(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 1);
      int v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 16);
      if (*(unsigned __int8 *)(v10 + 20 * v8) == *(unsigned __int8 *)(v10 + 20 * *a1))
      {
        if (*(float *)(v10 + 20 * v8 + 4) <= *(float *)(v10 + 20 * v9 + 4)) {
          return result;
        }
      }
      else if (!*(unsigned char *)(v10 + 20 * v8))
      {
        return result;
      }
      *a1 = v8;
      *(a2 - 1) = v9;
      return result;
    case 3:
      sub_25B47EB14(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 16));
      return 1;
    case 4:
      sub_25B47EC9C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_25B47EDF8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v11 = a1 + 2;
      sub_25B47EB14(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 16));
      int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      uint64_t v15 = *(void *)(*(void *)a3 + 16);
      break;
  }
  do
  {
    int v16 = *v12;
    int v17 = *v11;
    int v18 = *v12;
    int v19 = *(unsigned __int8 *)(v15 + 20 * *v12);
    if (v19 == *(unsigned __int8 *)(v15 + 20 * *v11))
    {
      if (*(float *)(v15 + 20 * v18 + 4) <= *(float *)(v15 + 20 * v17 + 4)) {
        goto LABEL_21;
      }
    }
    else if (!*(unsigned char *)(v15 + 20 * *v12))
    {
      goto LABEL_21;
    }
    *int v12 = v17;
    int v20 = a1;
    if (v11 == a1) {
      goto LABEL_20;
    }
    int v21 = (float *)(v15 + 20 * v18 + 4);
    uint64_t v22 = v13;
    while (1)
    {
      int v23 = *(int *)((char *)a1 + v22 + 4);
      if (v19 == *(unsigned __int8 *)(v15 + 20 * v23))
      {
        if (*v21 <= *(float *)(v15 + 20 * v23 + 4))
        {
          int v20 = (int *)((char *)a1 + v22 + 8);
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (!v19) {
        break;
      }
LABEL_17:
      --v11;
      *(int *)((char *)a1 + v22 + 8) = v23;
      v22 -= 4;
      if (v22 == -8)
      {
        int v20 = a1;
        goto LABEL_20;
      }
    }
    int v20 = v11;
LABEL_20:
    *int v20 = v16;
    if (++v14 == 8) {
      return v12 + 1 == a2;
    }
LABEL_21:
    int v11 = v12;
    v13 += 4;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

void sub_25B47F224(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v187 = a2;
  id v186 = a3;
  float v191 = (void **)(a1 + 72);
  objc_storeStrong((id *)(a1 + 72), a2);
  uint64_t v10 = (id *)(a1 + 80);
  objc_storeStrong((id *)(a1 + 80), a3);
  *(void *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = a5;
  uint64_t v200 = a1;
  if (*(unsigned char *)(a1 + 208))
  {
    id v13 = *v10;
    __p[0] = 0;
    *(void *)&long long v202 = 0;
    int v16 = (__int32 *)objc_msgSend_semanticLabels(v13, v14, v15);
    int v19 = (uint8x8_t *)objc_msgSend_semanticVotes(v13, v17, v18);
    uint64_t v22 = objc_msgSend_count(v13, v20, v21);
    __p[1] = 0;
    v207[0] = 0;
    sub_25B47DDC8((char **)__p, 0x21uLL, v207);
    long long v25 = __p[0];
    do
    {
      uint8x8_t v26 = *v19;
      if (v19->u16[0])
      {
        v26.i32[0] = *v16;
        v26.i16[0] = vmovl_u8(v26).u16[0];
        if (v26.u16[0] <= 0x20u) {
          ++v25[v26.u8[0]];
        }
      }
      ++v16;
      ++v19;
      --v22;
    }
    while (v22);
    uint64_t v27 = v25[6];
    uint64_t v28 = v25[31];
    uint64_t v29 = objc_msgSend_count(v13, v23, v24);
    uint64_t v30 = v25[7];
    uint64_t v31 = v25[8];
    uint64_t v34 = objc_msgSend_count(v13, v32, v33);
    operator delete(v25);
    BOOL v35 = (float)((float)(unint64_t)(v28 + v27) / (float)v29) > 0.1;
    if ((float)((float)(unint64_t)(v31 + v30) / (float)v34) > 0.1) {
      BOOL v35 = 1;
    }
    BOOL v185 = v35;
  }
  else
  {
    BOOL v185 = 0;
  }
  objc_msgSend_cameraPose(*v10, v11, v12);
  float32x4_t v188 = v36;
  float32x4_t v194 = v38;
  float32x4_t v196 = v37;
  float32x4_t v192 = v39;
  uint64_t v40 = v200;
  int v41 = v191;
  locatiouint64_t n = (id *)(v200 + 8);
  sub_25B47D4CC((uint64_t *)__p, *(void **)(v200 + 8), *(void *)(v200 + 96), *(void *)(v200 + 104));
  sub_25B47D698((void **)(v200 + 112));
  *(_OWORD *)(v200 + 112) = *(_OWORD *)__p;
  *(void *)(v200 + 128) = v202;
  __p[1] = 0;
  *(void *)&long long v202 = 0;
  __p[0] = 0;
  v207[0] = __p;
  sub_25B3F5F28(v207);
  sub_25B47D4CC((uint64_t *)__p, *(void **)(v40 + 72), *(void *)(v40 + 96), *(void *)(v40 + 104));
  sub_25B47D698((void **)(v200 + 136));
  *(_OWORD *)(v200 + 136) = *(_OWORD *)__p;
  *(void *)(v200 + 152) = v202;
  __p[1] = 0;
  *(void *)&long long v202 = 0;
  __p[0] = 0;
  v207[0] = __p;
  sub_25B3F5F28(v207);
  int v42 = (void *)(v200 + 160);
  *(void *)(v200 + 168) = *(void *)(v200 + 160);
  sub_25B47D738((void **)(v40 + 160), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v40 + 120) - *(void *)(v40 + 112)) >> 4));
  *(void *)(v200 + 192) = *(void *)(v200 + 184);
  uint64_t v198 = (uint64_t *)(v200 + 184);
  sub_25B47D738((void **)(v40 + 184), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v40 + 144) - *(void *)(v40 + 136)) >> 4));
  uint64_t v44 = *(void *)(v200 + 112);
  uint64_t v43 = *(void *)(v200 + 120);
  if (v43 != v44)
  {
    unint64_t v45 = 0;
    uint64_t v46 = *(void *)(v200 + 136);
    uint64_t v47 = *(void *)(v200 + 144);
    do
    {
      if (v47 == v46)
      {
        uint64_t v47 = v46;
      }
      else
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        uint64_t v50 = 16;
        do
        {
          sub_25B477E0C((uint64_t)__p, (float32x2_t *)(*(void *)(v200 + 112) + 176 * v45 + 16), (float32x2_t *)(v46 + v50));
          if ((float)((float)(*((float *)&__p[1] + 1) + *((float *)&v204 + 3)) * 0.5) < 0.2
            && *((float *)&v202 + 2) < 10.0)
          {
            uint64_t v52 = *v42 + 36 * v45;
            if (*(float *)__p > *(float *)v52)
            {
              *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
              *(_OWORD *)(v52 + 16) = v202;
              *(_WORD *)(v52 + 32) = v203;
              *(_DWORD *)(*v42 + 36 * v45 + 28) = v49;
            }
            uint64_t v53 = *v198 + v48;
            if (*(float *)&v204 > *(float *)v53)
            {
              *(_OWORD *)uint64_t v53 = v204;
              *(_OWORD *)(v53 + 16) = v205;
              *(_WORD *)(v53 + 32) = v206;
              *(_DWORD *)(*v198 + v48 + 28) = v45;
            }
          }
          ++v49;
          uint64_t v46 = *(void *)(v200 + 136);
          uint64_t v47 = *(void *)(v200 + 144);
          v48 += 36;
          v50 += 176;
        }
        while (v49 < 0x2E8BA2E8BA2E8BA3 * ((v47 - v46) >> 4));
        uint64_t v44 = *(void *)(v200 + 112);
        uint64_t v43 = *(void *)(v200 + 120);
        int v41 = v191;
      }
      ++v45;
    }
    while (v45 < 0x2E8BA2E8BA2E8BA3 * ((v43 - v44) >> 4));
  }
  int v55 = objc_opt_new();
  if (*(void *)(v200 + 144) == *(void *)(v200 + 136))
  {
    unint64_t v56 = 0;
    long long v197 = 0u;
  }
  else
  {
    unint64_t v56 = 0;
    unint64_t v57 = 0;
    float32x4_t v58 = vmlaq_f32(vmulq_f32(v188, (float32x4_t)0), (float32x4_t)0, v196);
    __asm { FMOV            V1.4S, #-1.0 }
    long long v197 = 0u;
    float32x4_t v63 = vsubq_f32(vaddq_f32(v192, vmlaq_f32(v58, _Q1, v194)), vaddq_f32(v192, vmlaq_f32(v58, (float32x4_t)0, v194)));
    int32x4_t v64 = (int32x4_t)vmulq_f32(v63, v63);
    v64.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v64, 2), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1))).u32[0];
    float32x2_t v65 = vrsqrte_f32((float32x2_t)v64.u32[0]);
    float32x2_t v66 = vmul_f32(v65, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v65, v65)));
    float32x4_t v189 = vmulq_n_f32(v63, vmul_f32(v66, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v66, v66))).f32[0]);
    do
    {
      int v67 = objc_msgSend_objectAtIndexedSubscript_(*v41, v54, v57);
      objc_msgSend_dimensions(v67, v68, v69);
      float v195 = v70;

      objc_msgSend_objectAtIndexedSubscript_(*v41, v71, v57);
      id v72 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_quad(v72, v73, v74);
      float32x4_t v193 = v75;
      objc_msgSend_quad(v72, v76, v77);
      float32x4_t v79 = vsubq_f32(v193, v78);
      float32x2_t v80 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v79, v79)));
      float32x2_t v81 = vrsqrte_f32(v80);
      float32x2_t v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
      *(float32x2_t *)v79.f32 = vmul_n_f32(*(float32x2_t *)v79.f32, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]);
      v79.i32[2] = 0;
      float32x4_t v83 = vmlaq_f32(vmulq_f32(v79, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
      float32x4_t v84 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL);
      int32x4_t v85 = (int32x4_t)vmulq_f32(v83, v83);
      v85.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v85, 2), *(float32x2_t *)v85.i8)).u32[0];
      float32x2_t v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
      float32x2_t v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
      float32x4_t v88 = vmulq_n_f32(v84, vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).f32[0]);
      float32x4_t v89 = vmulq_f32(v88, v189);
      float32x4_t v90 = vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1));
      float32x4_t v91 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), v90);
      v90.i64[0] = 0;
      float32x4_t v92 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v90, v91), 0), (int8x16_t)vnegq_f32(v88), (int8x16_t)v88), v189);
      float v93 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]);

      uint64_t v94 = *v198;
      char v95 = *(unsigned char *)(*(void *)(v200 + 136) + 176 * v57 + 76);
      long long v97 = objc_msgSend_objectAtIndexedSubscript_(*v41, v96, v57);
      objc_msgSend_addObject_(v55, v98, (uint64_t)v97);

      int v99 = *(_DWORD *)(v94 + 36 * v57 + 28);
      if (v99 == -1)
      {
        int v104 = (int)(float)(v195 / 0.75) & ~((int)(float)(v195 / 0.75) >> 31);
        float v103 = v195;
      }
      else
      {
        float v100 = v195 - (float)((float)(v195 * *(float *)(v94 + 36 * v57)) / *(float *)(v94 + 36 * v57 + 4));
        uint64_t v101 = *(void *)(v200 + 16) + 20 * v99;
        float v102 = *(float *)(v101 + 4);
        if (v102 < 0.0) {
          float v102 = 0.0;
        }
        float v103 = v100 + v102;
        int v104 = ((int)(float)(v100 / 0.75) & ~((int)(float)(v100 / 0.75) >> 31)) + *(_DWORD *)(v101 + 16);
      }
      float v105 = (float)(v93 * 180.0) / 3.14159265;
      long long v106 = (char *)*((void *)&v197 + 1);
      if (*((void *)&v197 + 1) >= v56)
      {
        unint64_t v108 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v197 + 1) - v197) >> 2) + 1;
        if (v108 > 0xCCCCCCCCCCCCCCCLL) {
          sub_25B3FBC4C();
        }
        if (0x999999999999999ALL * ((uint64_t)(v56 - v197) >> 2) > v108) {
          unint64_t v108 = 0x999999999999999ALL * ((uint64_t)(v56 - v197) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56 - v197) >> 2) >= 0x666666666666666) {
          unint64_t v109 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109) {
          unint64_t v109 = (unint64_t)sub_25B47D484(v109);
        }
        else {
          int v54 = 0;
        }
        unint64_t v110 = v109 + 4 * ((uint64_t)(*((void *)&v197 + 1) - v197) >> 2);
        *(unsigned char *)unint64_t v110 = v95;
        *(float *)(v110 + 4) = v103;
        *(float *)(v110 + 8) = v105;
        *(float *)(v110 + 12) = v195;
        *(_DWORD *)(v110 + 16) = v104;
        unint64_t v111 = v110;
        if (*((void *)&v197 + 1) == (void)v197)
        {
          int v41 = v191;
        }
        else
        {
          int v41 = v191;
          do
          {
            long long v112 = *(_OWORD *)(v106 - 20);
            *(_DWORD *)(v111 - 4) = *((_DWORD *)v106 - 1);
            *(_OWORD *)(v111 - 20) = v112;
            v111 -= 20;
            v106 -= 20;
          }
          while (v106 != (char *)v197);
          long long v106 = (char *)v197;
        }
        unint64_t v56 = v109 + 20 * (void)v54;
        uint64_t v107 = v110 + 20;
        *(void *)&long long v197 = v111;
        if (v106) {
          operator delete(v106);
        }
      }
      else
      {
        **((unsigned char **)&v197 + 1) = v95;
        *(float *)(*((void *)&v197 + 1) + 4) = v103;
        *(float *)(*((void *)&v197 + 1) + 8) = v105;
        *(float *)(*((void *)&v197 + 1) + 12) = v195;
        uint64_t v107 = *((void *)&v197 + 1) + 20;
        *(_DWORD *)(*((void *)&v197 + 1) + 16) = v104;
      }
      *(void *)&long long v113 = v197;
      *((void *)&v113 + 1) = v107;
      long long v197 = v113;
      ++v57;
    }
    while (v57 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v200 + 144) - *(void *)(v200 + 136)) >> 4));
  }
  objc_storeStrong(location, v55);
  long long v115 = (long long **)(v200 + 16);
  long long v114 = *(void **)(v200 + 16);
  if (v114)
  {
    *(void *)(v200 + 24) = v114;
    operator delete(v114);
    const char *v115 = 0;
    *(void *)(v200 + 24) = 0;
    *(void *)(v200 + 32) = 0;
  }
  *(_OWORD *)(v200 + 16) = v197;
  *(void *)(v200 + 32) = v56;

  sub_25B444638(__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v200 + 24) - *(void *)(v200 + 16)) >> 2));
  long long v116 = (int *)__p[0];
  long long v117 = (int *)__p[1];
  if (__p[0] != __p[1])
  {
    int v118 = 0;
    long long v119 = (int *)__p[0];
    do
      *v119++ = v118++;
    while (v119 != v117);
  }
  unint64_t v120 = 126 - 2 * __clz(v117 - v116);
  v207[0] = (void **)v200;
  if (v117 == v116) {
    uint64_t v121 = 0;
  }
  else {
    uint64_t v121 = v120;
  }
  sub_25B47DEF4((unint64_t)v116, v117, (uint64_t)v207, v121, 1);
  long long v123 = objc_opt_new();
  int v124 = (int *)__p[0];
  if (__p[1] == __p[0])
  {
    unint64_t v125 = 0;
    long long v199 = 0u;
  }
  else
  {
    unint64_t v125 = 0;
    unint64_t v126 = 0;
    long long v199 = 0u;
    do
    {
      float v127 = objc_msgSend_objectAtIndexedSubscript_(*location, v122, v124[v126]);
      objc_msgSend_addObject_(v123, v128, (uint64_t)v127);

      uint64_t v129 = (uint64_t)*v115 + 20 * *((int *)__p[0] + v126);
      uint64_t v130 = (char *)*((void *)&v199 + 1);
      if (*((void *)&v199 + 1) >= v125)
      {
        unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v199 + 1) - v199) >> 2) + 1;
        if (v133 > 0xCCCCCCCCCCCCCCCLL) {
          sub_25B3FBC4C();
        }
        if (0x999999999999999ALL * ((uint64_t)(v125 - v199) >> 2) > v133) {
          unint64_t v133 = 0x999999999999999ALL * ((uint64_t)(v125 - v199) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v125 - v199) >> 2) >= 0x666666666666666) {
          unint64_t v134 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v134 = v133;
        }
        if (v134) {
          unint64_t v134 = (unint64_t)sub_25B47D484(v134);
        }
        else {
          uint64_t v122 = 0;
        }
        long long v135 = *(_OWORD *)v129;
        unint64_t v136 = v134 + 4 * ((uint64_t)(*((void *)&v199 + 1) - v199) >> 2);
        *(_DWORD *)(v136 + 16) = *(_DWORD *)(v129 + 16);
        *(_OWORD *)unint64_t v136 = v135;
        unint64_t v137 = v136;
        if (*((void *)&v199 + 1) != (void)v199)
        {
          do
          {
            long long v138 = *(_OWORD *)(v130 - 20);
            *(_DWORD *)(v137 - 4) = *((_DWORD *)v130 - 1);
            *(_OWORD *)(v137 - 20) = v138;
            v137 -= 20;
            v130 -= 20;
          }
          while (v130 != (char *)v199);
          uint64_t v130 = (char *)v199;
        }
        unint64_t v125 = v134 + 20 * (void)v122;
        uint64_t v132 = v136 + 20;
        *(void *)&long long v199 = v137;
        if (v130) {
          operator delete(v130);
        }
      }
      else
      {
        long long v131 = *(_OWORD *)v129;
        *(_DWORD *)(*((void *)&v199 + 1) + 16) = *(_DWORD *)(v129 + 16);
        **((_OWORD **)&v199 + 1) = v131;
        uint64_t v132 = *((void *)&v199 + 1) + 20;
      }
      *(void *)&long long v139 = v199;
      *((void *)&v139 + 1) = v132;
      long long v199 = v139;
      ++v126;
      int v124 = (int *)__p[0];
    }
    while (v126 < ((char *)__p[1] - (char *)__p[0]) >> 2);
  }
  objc_storeStrong(location, v123);
  uint64_t v140 = *v115;
  if (*v115)
  {
    *(void *)(v200 + 24) = v140;
    operator delete(v140);
    const char *v115 = 0;
    *(void *)(v200 + 24) = 0;
    *(void *)(v200 + 32) = 0;
  }
  *(_OWORD *)(v200 + 16) = v199;
  *(void *)(v200 + 32) = v125;

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v141 = objc_opt_new();
  unint64_t v142 = *(void **)(v200 + 40);
  *(void *)(v200 + 40) = v141;

  *(void *)(v200 + 56) = *(void *)(v200 + 48);
  if (objc_msgSend_count(*(void **)(v200 + 8), v143, v144))
  {
    unint64_t v147 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v200 + 8), v145, 0);
    uint64_t v148 = *v115;
    int v149 = *((float *)*v115 + 1) >= 0.75 || v185;
    if (v149 == 1)
    {
      objc_msgSend_addObject_(*(void **)(v200 + 40), v146, (uint64_t)v147);
      unint64_t v151 = *(void *)(v200 + 56);
      unint64_t v150 = *(void *)(v200 + 64);
      if (v151 < v150)
      {
        long long v152 = *v148;
        *(_DWORD *)(v151 + 16) = *((_DWORD *)v148 + 4);
        *(_OWORD *)unint64_t v151 = v152;
        unint64_t v153 = v151 + 20;
LABEL_122:
        *(void *)(v200 + 56) = v153;
        int v177 = *((_DWORD *)v148 + 4);
        if (v177) {
          *((_DWORD *)v148 + 4) = v177 - 1;
        }
        else {
          *((_DWORD *)v148 + 1) = 0;
        }
        goto LABEL_133;
      }
      uint64_t v158 = *(void *)(v200 + 48);
      unint64_t v159 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v151 - v158) >> 2);
      unint64_t v160 = v159 + 1;
      if (v159 + 1 <= 0xCCCCCCCCCCCCCCCLL)
      {
        unint64_t v161 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v150 - v158) >> 2);
        if (2 * v161 > v160) {
          unint64_t v160 = 2 * v161;
        }
        if (v161 >= 0x666666666666666) {
          unint64_t v162 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v162 = v160;
        }
        if (v162) {
          unint64_t v162 = (unint64_t)sub_25B47D484(v162);
        }
        else {
          uint64_t v163 = 0;
        }
        unint64_t v170 = v162 + 20 * v159;
        unint64_t v171 = v162 + 20 * v163;
        long long v172 = *v148;
        *(_DWORD *)(v170 + 16) = *((_DWORD *)v148 + 4);
        *(_OWORD *)unint64_t v170 = v172;
        unint64_t v153 = v170 + 20;
        v174 = *(char **)(v200 + 48);
        uint64_t v173 = *(char **)(v200 + 56);
        if (v173 == v174)
        {
          uint64_t v176 = (void *)v200;
        }
        else
        {
          do
          {
            long long v175 = *(_OWORD *)(v173 - 20);
            *(_DWORD *)(v170 - 4) = *((_DWORD *)v173 - 1);
            *(_OWORD *)(v170 - 20) = v175;
            v170 -= 20;
            v173 -= 20;
          }
          while (v173 != v174);
          uint64_t v176 = (void *)v200;
          uint64_t v173 = *(char **)(v200 + 48);
        }
        v176[6] = v170;
        v176[7] = v153;
        v176[8] = v171;
        if (v173) {
          operator delete(v173);
        }
        goto LABEL_122;
      }
LABEL_139:
      sub_25B3FBC4C();
    }
    if (*(unsigned char *)v148)
    {
      objc_msgSend_addObject_(*(void **)(v200 + 40), v146, (uint64_t)v147);
      unint64_t v155 = *(void *)(v200 + 56);
      unint64_t v154 = *(void *)(v200 + 64);
      if (v155 >= v154)
      {
        uint64_t v164 = *(void *)(v200 + 48);
        unint64_t v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v155 - v164) >> 2);
        unint64_t v166 = v165 + 1;
        if (v165 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_139;
        }
        unint64_t v167 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v154 - v164) >> 2);
        if (2 * v167 > v166) {
          unint64_t v166 = 2 * v167;
        }
        if (v167 >= 0x666666666666666) {
          unint64_t v168 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v168 = v166;
        }
        if (v168) {
          unint64_t v168 = (unint64_t)sub_25B47D484(v168);
        }
        else {
          uint64_t v169 = 0;
        }
        unint64_t v178 = v168 + 20 * v165;
        unint64_t v179 = v168 + 20 * v169;
        long long v180 = *v148;
        *(_DWORD *)(v178 + 16) = *((_DWORD *)v148 + 4);
        *(_OWORD *)unint64_t v178 = v180;
        unint64_t v157 = v178 + 20;
        float v182 = *(char **)(v200 + 48);
        long long v181 = *(char **)(v200 + 56);
        if (v181 == v182)
        {
          id v184 = (void *)v200;
        }
        else
        {
          do
          {
            long long v183 = *(_OWORD *)(v181 - 20);
            *(_DWORD *)(v178 - 4) = *((_DWORD *)v181 - 1);
            *(_OWORD *)(v178 - 20) = v183;
            v178 -= 20;
            v181 -= 20;
          }
          while (v181 != v182);
          id v184 = (void *)v200;
          long long v181 = *(char **)(v200 + 48);
        }
        v184[6] = v178;
        v184[7] = v157;
        v184[8] = v179;
        if (v181) {
          operator delete(v181);
        }
      }
      else
      {
        long long v156 = *v148;
        *(_DWORD *)(v155 + 16) = *((_DWORD *)v148 + 4);
        *(_OWORD *)unint64_t v155 = v156;
        unint64_t v157 = v155 + 20;
      }
      *(void *)(v200 + 56) = v157;
    }
LABEL_133:
  }
}

void sub_25B47FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,long long a27,long long a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B4800D0(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1550;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v2;

  uint64_t v4 = objc_opt_new();
  int v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v4;

  uint64_t v6 = objc_opt_new();
  int v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v6;

  return a1;
}

void sub_25B480164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4801A8(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v2;

  uint64_t v4 = objc_opt_new();
  int v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
}

void sub_25B480200(id *a1, void *a2, void *a3, void *a4)
{
  id v299 = a2;
  id v298 = a3;
  id v297 = a4;
  float32x2_t v327 = a1 + 1;
  objc_storeStrong(a1 + 1, a2);
  objc_storeStrong(a1 + 2, a3);
  uint64_t v300 = a1 + 3;
  objc_storeStrong(a1 + 3, a4);
  locatiouint64_t n = a1 + 4;
  int v8 = a1 + 5;
  objc_storeStrong(a1 + 5, a1[4]);
  uint64_t v9 = objc_opt_new();
  id v10 = a1[4];
  a1[4] = (id)v9;

  if (objc_msgSend_count(a1[5], v11, v12))
  {
    objc_msgSend_removeAllObjects(a1[6], v13, v14);
    objc_msgSend_removeAllObjects(a1[7], v15, v16);
    sub_25B481694((uint64_t *)v345, *v8);
    sub_25B481694(&v343, a1[2]);
    sub_25B481830(&v341, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v345[0] + 1) - *(void *)&v345[0]) >> 4));
    uint64_t v305 = a1;
    sub_25B481830(&__p, 0x2E8BA2E8BA2E8BA3 * ((v344 - v343) >> 4));
    uint64_t v18 = *((void *)&v345[0] + 1);
    uint64_t v19 = *(void *)&v345[0];
    if (*((void *)&v345[0] + 1) != *(void *)&v345[0])
    {
      unint64_t v20 = 0;
      uint64_t v21 = v343;
      uint64_t v22 = v344;
      do
      {
        if (v22 == v21)
        {
          uint64_t v22 = v21;
        }
        else
        {
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          uint64_t v25 = 16;
          do
          {
            sub_25B477E0C((uint64_t)&src, (float32x2_t *)(*(void *)&v345[0] + 176 * v20 + 16), (float32x2_t *)(v21 + v25));
            if ((float)((float)(src.f32[3] + *(float *)&v335[16]) * 0.5) < 0.2 && v334.f32[2] < 10.0)
            {
              uint64_t v27 = v341;
              uint64_t v28 = (float32x4_t *)((char *)v341 + 36 * v20);
              if (src.f32[0] > v28->f32[0])
              {
                v28[1] = v334;
                v28[2].i16[0] = *(_WORD *)v335;
                float32x4_t *v28 = src;
                v27[9 * v20 + 7] = v24;
              }
              uint64_t v29 = (char *)__p + v23;
              if (*(float *)&v335[4] > *(float *)((char *)__p + v23))
              {
                *((_OWORD *)v29 + 1) = *(_OWORD *)&v335[20];
                *((_WORD *)v29 + 16) = v336;
                *(_OWORD *)uint64_t v29 = *(_OWORD *)&v335[4];
                *((_DWORD *)v29 + 7) = v20;
              }
            }
            ++v24;
            uint64_t v21 = v343;
            uint64_t v22 = v344;
            v23 += 36;
            v25 += 176;
          }
          while (v24 < 0x2E8BA2E8BA2E8BA3 * ((v344 - v343) >> 4));
          uint64_t v18 = *((void *)&v345[0] + 1);
          uint64_t v19 = *(void *)&v345[0];
        }
        ++v20;
      }
      while (v20 < 0x2E8BA2E8BA2E8BA3 * ((v18 - v19) >> 4));
    }
    uint64_t v30 = v342;
    if (v342 == v341)
    {
      uint64_t v33 = a1;
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = 28;
      uint64_t v33 = a1;
      do
      {
        objc_msgSend_objectAtIndexedSubscript_(*v8, v17, v31);
        uint64_t v34 = (unsigned char *)objc_claimAutoreleasedReturnValue();
        if (v34) {
          v34[105] = 2;
        }

        if (*(_DWORD *)((char *)v341 + v32) == -1) {
          id v36 = a1[7];
        }
        else {
          id v36 = a1[6];
        }
        float32x4_t v37 = objc_msgSend_objectAtIndexedSubscript_(*v8, v35, v31);
        objc_msgSend_addObject_(v36, v38, (uint64_t)v37);

        ++v31;
        uint64_t v30 = (char *)v341;
        v32 += 36;
      }
      while (v31 < 0x8E38E38E38E38E39 * ((v342 - (unsigned char *)v341) >> 2));
    }
    if (__p)
    {
      uint64_t v340 = __p;
      operator delete(__p);
      uint64_t v30 = (char *)v341;
    }
    if (v30)
    {
      uint64_t v342 = v30;
      operator delete(v30);
    }
    src.i64[0] = (uint64_t)&v343;
    sub_25B3F5F28((void ***)&src);
    src.i64[0] = (uint64_t)v345;
    sub_25B3F5F28((void ***)&src);
    if (objc_msgSend_count(*v327, v39, v40))
    {
      if (objc_msgSend_count(v33[6], v41, v42))
      {
        objc_msgSend_removeAllObjects(*location, v43, v44);
        sub_25B481694((uint64_t *)v345, v33[6]);
        sub_25B481694(&v343, *v327);
        sub_25B481904(&v341, v33[6]);
        sub_25B481904(&__p, *v327);
        sub_25B481830(&v337, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v345[0] + 1) - *(void *)&v345[0]) >> 4));
        sub_25B481830(&v331, 0x2E8BA2E8BA2E8BA3 * ((v344 - v343) >> 4));
        uint64_t v47 = *((void *)&v345[0] + 1);
        uint64_t v48 = *(void *)&v345[0];
        if (*((void *)&v345[0] + 1) != *(void *)&v345[0])
        {
          unint64_t v49 = 0;
          uint64_t v50 = v343;
          uint64_t v51 = v344;
          uint64_t v52 = (char *)v341;
          uint64_t v53 = (char *)__p;
          do
          {
            if (v51 == v50)
            {
              uint64_t v51 = v50;
            }
            else
            {
              uint64_t v54 = 0;
              unint64_t v55 = 0;
              uint64_t v56 = 16;
              do
              {
                sub_25B477E0C((uint64_t)&src, (float32x2_t *)(*(void *)&v345[0] + 176 * v49 + 16), (float32x2_t *)(v50 + v56));
                int32x2_t v57 = *(int32x2_t *)&v52[8 * v49];
                int32x2_t v58 = *(int32x2_t *)&v53[8 * v55];
                int32x2_t v59 = (int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vzip1_s32(v58, v57), (float32x2_t)vzip2_s32(v58, v57)));
                float32x2_t v60 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(v59, 1), (int8x8_t)vrev64_s32(v57), (int8x8_t)v57);
                float32x2_t v61 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(v59, 0), (int8x8_t)vrev64_s32(v58), (int8x8_t)v58);
                if (vcgt_f32(v60, v61).u8[0]) {
                  float v62 = v61.f32[0];
                }
                else {
                  float v62 = v60.f32[0];
                }
                if (v60.f32[1] >= v61.f32[1]) {
                  float v63 = v60.f32[1];
                }
                else {
                  float v63 = v61.f32[1];
                }
                float v64 = 0.0;
                if (v62 > v63)
                {
                  if (v61.f32[1] >= v60.f32[1]) {
                    float v65 = v60.f32[1];
                  }
                  else {
                    float v65 = v61.f32[1];
                  }
                  if (vcgt_f32(v61, v60).u32[0]) {
                    v60.f32[0] = v61.f32[0];
                  }
                  float v66 = v60.f32[0] - v65;
                  if (v66 < 0.000001) {
                    float v66 = 0.000001;
                  }
                  float v64 = (float)(v62 - v63) / v66;
                }
                BOOL v67 = (float)((float)(src.f32[3] + *(float *)&v335[16]) * 0.5) < 0.2 && v334.f32[2] < 10.0;
                if (v67 && v64 >= 0.3)
                {
                  int v68 = v337;
                  uint64_t v69 = (float32x4_t *)((char *)v337 + 36 * v49);
                  if (src.f32[0] > v69->f32[0])
                  {
                    v69[1] = v334;
                    v69[2].i16[0] = *(_WORD *)v335;
                    *uint64_t v69 = src;
                    v68[9 * v49 + 7] = v55;
                  }
                  float v70 = &v331[v54];
                  if (*(float *)&v335[4] > *(float *)&v331[v54])
                  {
                    *((_OWORD *)v70 + 1) = *(_OWORD *)&v335[20];
                    *((_WORD *)v70 + 16) = v336;
                    *(_OWORD *)float v70 = *(_OWORD *)&v335[4];
                    *((_DWORD *)v70 + 7) = v49;
                  }
                }
                ++v55;
                uint64_t v50 = v343;
                uint64_t v51 = v344;
                v54 += 36;
                v56 += 176;
              }
              while (v55 < 0x2E8BA2E8BA2E8BA3 * ((v344 - v343) >> 4));
              uint64_t v47 = *((void *)&v345[0] + 1);
              uint64_t v48 = *(void *)&v345[0];
            }
            ++v49;
          }
          while (v49 < 0x2E8BA2E8BA2E8BA3 * ((v47 - v48) >> 4));
        }
        uint64_t v71 = v332;
        if (v332 != v331)
        {
          uint64_t v72 = 0;
          unint64_t v73 = 0;
          uint64_t v74 = 8;
          uint64_t v71 = v331;
          uint64_t v33 = v305;
          float32x4_t v75 = v327;
          while (1)
          {
            uint64_t v76 = *(int *)&v71[v72 + 28];
            if (v76 == -1)
            {
              float32x4_t v91 = *location;
              uint64_t v89 = objc_msgSend_objectAtIndexedSubscript_(*v75, v45, v73);
              objc_msgSend_addObject_(v91, v92, v89);
            }
            else
            {
              float v77 = *(float *)&v71[v72 + 4];
              float32x4_t v78 = *(void **)(v343 + v74);
              if (v77 >= 0.8)
              {
                objc_msgSend_confidence(v78, v45, v46);
                float v94 = v93;
                objc_msgSend_confidence(*(void **)(*(void *)&v345[0] + 176 * (int)v76 + 8), v95, v96);
                id v99 = v305[6];
                if (v94 >= (float)(v98 + -0.15))
                {
                  BOOL v185 = objc_msgSend_objectAtIndexedSubscript_(v99, v97, v76);
                  float32x4_t v188 = objc_msgSend_identifier(v185, v186, v187);
                  long long v190 = objc_msgSend_objectAtIndexedSubscript_(*v75, v189, v73);
                  sub_25B4FD4F4((uint64_t)v190, v188);

                  objc_msgSend_objectAtIndexedSubscript_(*v75, v191, v73);
                  float32x4_t v192 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                  if (v192) {
                    v192[105] = 1;
                  }

                  float32x4_t v193 = *location;
                  uint64_t v89 = objc_msgSend_objectAtIndexedSubscript_(*v75, v194, v73);
                  objc_msgSend_addObject_(v193, v195, v89);
                  goto LABEL_116;
                }
                objc_msgSend_objectAtIndexedSubscript_(v99, v97, v76);
                float32x2_t v86 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                if (v86) {
                  v86[105] = 2;
                }
              }
              else
              {
                objc_msgSend_confidence(v78, v45, v46);
                float v80 = v79;
                objc_msgSend_confidence(*(void **)(*(void *)&v345[0] + 176 * (int)v76 + 8), v81, v82);
                id v85 = v305[6];
                if (v80 >= (float)(v84 + -0.15))
                {
                  float v100 = objc_msgSend_objectAtIndexedSubscript_(v85, v83, v76);
                  float v102 = objc_msgSend_objectAtIndexedSubscript_(*v75, v101, v73);
                  float v103 = v331;
                  int v104 = v100;
                  float v105 = v102;
                  uint64_t v89 = objc_msgSend_copy(v105, v106, v107);
                  objc_msgSend_quad(v105, v108, v109);
                  float32x4_t v318 = v110;
                  objc_msgSend_quad(v105, v111, v112);
                  float32x4_t v315 = v113;
                  objc_msgSend_quad(v105, v114, v115);
                  float v322 = v116;
                  objc_msgSend_quad(v105, v117, v118);
                  if (v121 >= v322) {
                    float v122 = v322;
                  }
                  else {
                    float v122 = v121;
                  }
                  objc_msgSend_quad(v105, v119, v120);
                  float v323 = v123;
                  objc_msgSend_quad(v105, v124, v125);
                  if (v323 >= v128) {
                    float v129 = v323;
                  }
                  else {
                    float v129 = v128;
                  }
                  objc_msgSend_quad(v104, v126, v127);
                  float v324 = v130;
                  objc_msgSend_quad(v104, v131, v132);
                  if (v135 >= v324) {
                    float v136 = v324;
                  }
                  else {
                    float v136 = v135;
                  }
                  objc_msgSend_quad(v104, v133, v134);
                  float v325 = v137;
                  objc_msgSend_quad(v104, v138, v139);
                  if (v325 >= v142) {
                    float v143 = v325;
                  }
                  else {
                    float v143 = v142;
                  }
                  objc_msgSend_dimensions(v105, v140, v141);
                  float v321 = v144;
                  objc_msgSend_dimensions(v104, v145, v146);
                  float v312 = v149;
                  float v150 = *(float *)&v103[v72 + 4];
                  if (v129 < v143) {
                    float v129 = v143;
                  }
                  if (v136 < v122) {
                    float v122 = v136;
                  }
                  objc_msgSend_quad(v105, v147, v148);
                  float32x4_t v309 = v151;
                  objc_msgSend_quad(v105, v152, v153);
                  float32x4_t v307 = v154;
                  objc_msgSend_dimensions(v105, v155, v156);
                  float32x4_t v159 = vsubq_f32(v318, v315);
                  int32x4_t v160 = (int32x4_t)vmulq_f32(v159, v159);
                  v160.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v160, 2), vadd_f32(*(float32x2_t *)v160.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.i8, 1))).u32[0];
                  float32x2_t v161 = vrsqrte_f32((float32x2_t)v160.u32[0]);
                  float32x2_t v162 = vmul_f32(v161, vrsqrts_f32((float32x2_t)v160.u32[0], vmul_f32(v161, v161)));
                  float32x4_t v163 = vmulq_n_f32(v159, vmul_f32(v162, vrsqrts_f32((float32x2_t)v160.u32[0], vmul_f32(v162, v162))).f32[0]);
                  float v164 = vmlas_n_f32(v321, 1.0 - v150, v312);
                  v165.i64[0] = 0x3F0000003F000000;
                  v165.i64[1] = 0x3F0000003F000000;
                  v167.f32[0] = 0.5 * v166;
                  float32x4_t v168 = vmlaq_n_f32(vmlsq_lane_f32(vmulq_f32(vaddq_f32(v309, v307), v165), v163, v167, 0), v163, v164 * 0.5);
                  float32x4_t v169 = vmulq_f32(vmulq_n_f32(v163, v164), v165);
                  float32x4_t v170 = vmulq_f32(vmulq_n_f32((float32x4_t)xmmword_25B5F10E0, v129 - v122), v165);
                  float32x4_t v171 = vaddq_f32(v170, vsubq_f32(v168, v169));
                  float32x4_t v172 = vsubq_f32(vaddq_f32(v169, v168), v170);
                  float32x4_t v173 = v172;
                  v173.i32[2] = v171.i32[2];
                  float32x4_t src = v171;
                  float32x4_t v334 = v173;
                  v171.i32[2] = v172.i32[2];
                  *(float32x4_t *)v335 = v172;
                  *(float32x4_t *)&v335[16] = v171;
                  if (v89) {
                    objc_copyStruct((void *)(v89 + 272), &src, 64, 1, 0);
                  }
                  objc_msgSend_confidence(v105, v157, v158);
                  float v175 = v174;
                  objc_msgSend_confidence(v104, v176, v177);
                  if (v89) {
                    *(float *)(v89 + 108) = (float)(v175 + v180) * 0.5;
                  }
                  long long v181 = objc_msgSend_identifier(v104, v178, v179);
                  sub_25B4FD4F4(v89, v181);

                  if (v89) {
                    *(unsigned char *)(v89 + 105) = 1;
                  }
                  float v182 = 0.0;
                  float v183 = 0.0;
                  float32x4_t v75 = v327;
                  if (v104) {
                    float v183 = v104[32];
                  }
                  if (v105) {
                    float v182 = v105[32];
                  }
                  if (v89)
                  {
                    if (v183 >= v182) {
                      float v182 = v183;
                    }
                    *(float *)(v89 + 128) = v182;
                  }

                  objc_msgSend_addObject_(*location, v184, v89);
                  goto LABEL_116;
                }
                objc_msgSend_objectAtIndexedSubscript_(v85, v83, v76);
                float32x2_t v86 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                if (v86) {
                  v86[105] = 2;
                }
              }

              id v87 = v305[4];
              uint64_t v89 = objc_msgSend_objectAtIndexedSubscript_(v305[6], v88, v76);
              objc_msgSend_addObject_(v87, v90, v89);
            }
LABEL_116:

            ++v73;
            uint64_t v71 = v331;
            v72 += 36;
            v74 += 176;
            if (v73 >= 0x8E38E38E38E38E39 * ((v332 - v331) >> 2))
            {
              if (v331) {
                goto LABEL_118;
              }
              goto LABEL_119;
            }
          }
        }
        uint64_t v33 = a1;
        if (v332)
        {
LABEL_118:
          float32x2_t v332 = v71;
          operator delete(v71);
        }
LABEL_119:
        if (v337)
        {
          float32x2_t v338 = v337;
          operator delete(v337);
        }
        if (__p) {
          operator delete(__p);
        }
        if (v341) {
          operator delete(v341);
        }
        src.i64[0] = (uint64_t)&v343;
        sub_25B3F5F28((void ***)&src);
        src.i64[0] = (uint64_t)v345;
        sub_25B3F5F28((void ***)&src);
      }
      else
      {
        objc_storeStrong(location, *v327);
      }
    }
    if (objc_msgSend_count(v33[7], v41, v42)) {
      objc_msgSend_addObjectsFromArray_(v33[4], v196, (uint64_t)v33[7]);
    }
  }
  else
  {
    objc_storeStrong(location, *v327);
  }
  obuint64_t j = (id)objc_opt_new();
  if (objc_msgSend_count(*location, v197, v198))
  {
    sub_25B481694(&v343, *location);
    sub_25B481694((uint64_t *)&v341, *v300);
    sub_25B481830(&__p, 0x2E8BA2E8BA2E8BA3 * ((v344 - v343) >> 4));
    sub_25B481830(&v337, 0x2E8BA2E8BA2E8BA3 * ((v342 - (unsigned char *)v341) >> 4));
    uint64_t v201 = v343;
    uint64_t v200 = v344;
    if (v344 != v343)
    {
      unint64_t v202 = 0;
      __int16 v203 = (char *)v341;
      long long v204 = v342;
      do
      {
        if (v204 == v203)
        {
          long long v204 = v203;
        }
        else
        {
          uint64_t v205 = 0;
          unint64_t v206 = 0;
          uint64_t v207 = 16;
          do
          {
            sub_25B477E0C((uint64_t)&src, (float32x2_t *)(v343 + 176 * v202 + 16), (float32x2_t *)&v203[v207]);
            if ((float)((float)(src.f32[3] + *(float *)&v335[16]) * 0.5) < 0.2 && v334.f32[2] < 10.0)
            {
              uint64_t v209 = __p;
              uint64_t v210 = (float32x4_t *)((char *)__p + 36 * v202);
              if (src.f32[0] > v210->f32[0])
              {
                v210[1] = v334;
                v210[2].i16[0] = *(_WORD *)v335;
                *uint64_t v210 = src;
                v209[9 * v202 + 7] = v206;
              }
              uint64_t v211 = (char *)v337 + v205;
              if (*(float *)&v335[4] > *(float *)((char *)v337 + v205))
              {
                *((_OWORD *)v211 + 1) = *(_OWORD *)&v335[20];
                *((_WORD *)v211 + 16) = v336;
                *(_OWORD *)uint64_t v211 = *(_OWORD *)&v335[4];
                *((_DWORD *)v211 + 7) = v202;
              }
            }
            ++v206;
            __int16 v203 = (char *)v341;
            long long v204 = v342;
            v205 += 36;
            v207 += 176;
          }
          while (v206 < 0x2E8BA2E8BA2E8BA3 * ((v342 - (unsigned char *)v341) >> 4));
          uint64_t v201 = v343;
          uint64_t v200 = v344;
        }
        ++v202;
      }
      while (v202 < 0x2E8BA2E8BA2E8BA3 * ((v200 - v201) >> 4));
    }
    v213 = (int *)__p;
    unint64_t v212 = v340;
    if (v340 != __p)
    {
      unint64_t v214 = 0;
      do
      {
        uint64_t v215 = v213[9 * v214 + 7];
        if (v215 != -1)
        {
          v216 = objc_msgSend_objectAtIndexedSubscript_(*location, v199, v214);
          v218 = objc_msgSend_objectAtIndexedSubscript_(*v300, v217, v215);
          id v219 = v216;
          id v220 = v218;
          v223 = (unsigned char *)objc_msgSend_copy(v219, v221, v222);
          objc_msgSend_quad(v220, v224, v225);
          float32x4_t v328 = v226;
          objc_msgSend_quad(v220, v227, v228);
          float32x4_t v319 = v229;
          objc_msgSend_quad(v220, v230, v231);
          float32x4_t v316 = v232;
          objc_msgSend_quad(v220, v233, v234);
          float32x4_t v313 = v235;
          objc_msgSend_quad(v219, v236, v237);
          float32x4_t v310 = v238;
          objc_msgSend_quad(v219, v239, v240);
          float32x4_t v308 = v241;
          objc_msgSend_dimensions(v219, v242, v243);
          float v306 = v244;
          objc_msgSend_dimensions(v219, v245, v246);
          float32x4_t v303 = v247;
          objc_msgSend_dimensions(v219, v248, v249);
          float v304 = v250;
          objc_msgSend_dimensions(v219, v251, v252);
          float32x4_t v302 = v253;
          int v256 = objc_msgSend_type(v219, v254, v255);
          float32x4_t v259 = vsubq_f32(v328, v319);
          int32x4_t v260 = (int32x4_t)vmulq_f32(v259, v259);
          v260.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v260, 2), vadd_f32(*(float32x2_t *)v260.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v260.i8, 1))).u32[0];
          float32x2_t v261 = vrsqrte_f32((float32x2_t)v260.u32[0]);
          float32x2_t v262 = vmul_f32(v261, vrsqrts_f32((float32x2_t)v260.u32[0], vmul_f32(v261, v261)));
          float32x4_t v263 = vmulq_n_f32(v259, vmul_f32(v262, vrsqrts_f32((float32x2_t)v260.u32[0], vmul_f32(v262, v262))).f32[0]);
          float32x4_t v264 = vmlaq_f32(vmulq_f32(v263, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v263, (int32x4_t)v263), (int8x16_t)v263, 0xCuLL));
          float32x4_t v265 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v264, (int32x4_t)v264), (int8x16_t)v264, 0xCuLL);
          int32x4_t v266 = (int32x4_t)vmulq_f32(v264, v264);
          v266.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v266.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v266, 2), *(float32x2_t *)v266.i8)).u32[0];
          float32x2_t v267 = vrsqrte_f32((float32x2_t)v266.u32[0]);
          float32x2_t v268 = vmul_f32(v267, vrsqrts_f32((float32x2_t)v266.u32[0], vmul_f32(v267, v267)));
          float32x4_t v269 = vmulq_n_f32(v265, vmul_f32(v268, vrsqrts_f32((float32x2_t)v266.u32[0], vmul_f32(v268, v268))).f32[0]);
          v270.i64[0] = 0x3F0000003F000000;
          v270.i64[1] = 0x3F0000003F000000;
          float32x4_t v271 = vmulq_f32(vaddq_f32(v316, v313), v270);
          float32x4_t v272 = vmulq_f32(vaddq_f32(v310, v308), v270);
          float32x4_t v273 = vmulq_f32(v269, vsubq_f32(v272, v271));
          float32x4_t v320 = v263;
          float32x4_t v314 = v271;
          float32x4_t v317 = vmlsq_lane_f32(v272, v269, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v273, 2), vaddq_f32(v273, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v273.f32, 1))), 0);
          float32x4_t v329 = vaddq_f32(vaddq_f32(v317, vmulq_f32(vmulq_n_f32(v263, v304), v270)), vmulq_f32(vmulq_laneq_f32((float32x4_t)xmmword_25B5F13A0, v302, 2), v270));
          if (v256 == 2 || objc_msgSend_type(v219, v257, v258) == 4)
          {
            objc_msgSend_quad(v220, v257, v258);
            float32x4_t v311 = v274;
            objc_msgSend_quad(v220, v275, v276);
            v278.i64[0] = v329.i64[0];
            v278.i64[1] = __PAIR64__(v329.u32[3], vmlaq_n_f32(v314, (float32x4_t)xmmword_25B5F13B0, fabsf(COERCE_FLOAT(*(_DWORD *)((unsigned char *)vsubq_f32(v311, v277).f32 + 8)))).u32[2]);
            float32x4_t v329 = v278;
          }
          v279.i64[0] = 0x3F0000003F000000;
          v279.i64[1] = 0x3F0000003F000000;
          float32x4_t v280 = vaddq_f32(vsubq_f32(v317, vmulq_f32(vmulq_n_f32(v320, v306), v279)), vmulq_f32(vmulq_laneq_f32((float32x4_t)xmmword_25B5F10E0, v303, 2), v279));
          float32x4_t v281 = v329;
          v281.i32[2] = v280.i32[2];
          v345[0] = v280;
          v345[1] = v281;
          float32x4_t v282 = v280;
          v282.i32[2] = v329.i32[2];
          v345[2] = v329;
          v345[3] = v282;
          float32x4_t src = v280;
          float32x4_t v334 = v281;
          *(float32x4_t *)v335 = v329;
          *(float32x4_t *)&v335[16] = v282;
          if (v223) {
            objc_copyStruct(v223 + 272, &src, 64, 1, 0);
          }
          if (objc_msgSend_individualUpdate(v219, v257, v258) == 2)
          {
            uint64_t v285 = 0;
            while (1)
            {
              float32x4_t v330 = (float32x4_t)v345[v285];
              objc_msgSend_quad(v219, v283, v284);
              src.i32[2] = v286;
              v334.i32[2] = v287;
              *(_DWORD *)&v335[8] = v288;
              src.i64[0] = v289;
              v334.i64[0] = v290;
              *(_DWORD *)&v335[24] = v291;
              *(void *)v335 = v292;
              *(void *)&v335[16] = v293;
              float32x4_t v294 = vsubq_f32(v330, *(float32x4_t *)((char *)&src + v285 * 16));
              float32x4_t v295 = vmulq_f32(v294, v294);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v295, 2), vaddq_f32(v295, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v295.f32, 1))).f32[0]) > 0.001)break; {
              if (++v285 == 4)
              }
                goto LABEL_162;
            }
            if (v223) {
              v223[105] = 1;
            }
          }
LABEL_162:

          objc_msgSend_addObject_(obj, v296, (uint64_t)v223);
          v213 = (int *)__p;
          unint64_t v212 = v340;
        }
        ++v214;
      }
      while (v214 < 0x8E38E38E38E38E39 * ((v212 - (unsigned char *)v213) >> 2));
    }
    objc_storeStrong(location, obj);
    if (v337)
    {
      float32x2_t v338 = v337;
      operator delete(v337);
    }
    if (__p)
    {
      uint64_t v340 = __p;
      operator delete(__p);
    }
    src.i64[0] = (uint64_t)&v341;
    sub_25B3F5F28((void ***)&src);
    src.i64[0] = (uint64_t)&v343;
    sub_25B3F5F28((void ***)&src);
  }
}

void sub_25B4813F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a62) {
    operator delete(a62);
  }
  if (a65) {
    operator delete(a65);
  }
  a65 = (void *)(v65 - 248);
  sub_25B3F5F28((void ***)&a65);
  *(void *)(v65 - 248) = v65 - 224;
  sub_25B3F5F28((void ***)(v65 - 248));

  _Unwind_Resume(a1);
}

void sub_25B481694(uint64_t *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v19, 16);
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * v8);
        sub_25B3F6148((uint64_t)v14);
        sub_25B47C58C((uint64_t)v14, v9);
        unint64_t v11 = a1[1];
        if (v11 >= a1[2])
        {
          uint64_t v12 = sub_25B47C818(a1, (uint64_t)v14, v10);
        }
        else
        {
          sub_25B47C6E4(a1[1], (uint64_t)v14, v10);
          uint64_t v12 = v11 + 176;
          a1[1] = v11 + 176;
        }
        a1[1] = v12;
        sub_25B3F5FE8((uint64_t)v14);
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v13, (uint64_t)&v15, v19, 16);
    }
    while (v6);
  }
}

void sub_25B4817E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_25B3F5F28(&a9);
  _Unwind_Resume(a1);
}

void *sub_25B481830(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x71C71C71C71C71DLL) {
      sub_25B3FBC4C();
    }
    id v4 = (char *)sub_25B47D930(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[36 * v5];
    uint64_t v6 = 36 * a2;
    uint64_t v7 = v4 + 33;
    int32x2_t v8 = vdup_n_s32(0x49742400u);
    do
    {
      *(_OWORD *)(v7 - 33) = xmmword_25B5F1380;
      *(int32x2_t *)(v7 - 17) = v8;
      *(void *)(v7 - 9) = -3175874560;
      *(_WORD *)(v7 - 1) = 0;
      v7 += 36;
      v6 -= 36;
    }
    while (v6);
    a1[1] = &v4[36 * a2];
  }
  return a1;
}

void sub_25B4818E8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B481904(void *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v4 = v3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v28, v32, 16);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v4);
        }
        uint64_t v12 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        objc_msgSend_quad(v12, v6, v7, *(_OWORD *)&v27, (void)v28);
        int32x4_t v27 = v13;
        objc_msgSend_quad(v12, v14, v15);
        int32x4_t v17 = vzip2q_s32(v27, v16);
        unint64_t v18 = a1[2];
        if ((unint64_t)v9 >= v18)
        {
          int32x4_t v27 = v17;
          uint64_t v19 = (void *)*a1;
          uint64_t v20 = ((uint64_t)v9 - *a1) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v22 = v18 - (void)v19;
          if (v22 >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23) {
            unint64_t v23 = (unint64_t)sub_25B3FCAD4(v23);
          }
          else {
            uint64_t v6 = 0;
          }
          unint64_t v24 = (void *)(v23 + 8 * v20);
          void *v24 = v27.i64[0];
          uint64_t v25 = v24 + 1;
          if (v9 != v19)
          {
            do
            {
              uint64_t v26 = *--v9;
              *--unint64_t v24 = v26;
            }
            while (v9 != v19);
            uint64_t v9 = (void *)*a1;
          }
          *a1 = v24;
          a1[1] = v25;
          a1[2] = v23 + 8 * (void)v6;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v25;
        }
        else
        {
          *v9++ = v17.i64[0];
        }
        a1[1] = v9;
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v28, v32, 16);
    }
    while (v8);
  }
}

void sub_25B481AE0(_Unwind_Exception *a1)
{
  id v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

unint64_t sub_25B481B20(uint64_t a1, const char *a2, uint64_t a3)
{
  unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), a2, a3);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v5, i);
      uint64_t v7 = (unsigned char *)objc_claimAutoreleasedReturnValue();
      if (v7) {
        v7[105] = 2;
      }

      unint64_t result = objc_msgSend_count(*(void **)(a1 + 32), v8, v9);
    }
  }
  return result;
}

void sub_25B481B8C(void *a1, float32x2_t **a2, void *a3, uint64_t a4)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  id v7 = a3;
  sub_25B44B224((uint64_t)v57);
  sub_25B44B288((uint64_t)&v54);
  if (v7) {
    unsigned int v8 = *((_DWORD *)v7 + 3);
  }
  else {
    unsigned int v8 = 0;
  }
  *((void *)&v54 + 1) = v8 | 0xFFFFFFFF00000000;
  *(void *)&long long v54 = *(void *)(a4 + 8);
  uint64_t v55 = 3;
  uint64_t v9 = operator new(8uLL);
  *uint64_t v9 = 0x3F80000000000000;
  int32x2_t v59 = 0;
  unint64_t v60 = 0;
  int32x2_t v58 = 0;
  sub_25B3FCA58(&v58, v9, (uint64_t)(v9 + 1), 2uLL);
  uint64_t v61 = 1;
  uint64_t v10 = operator new(8uLL);
  *uint64_t v10 = 0x42C800003F800000;
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v62 = 0;
  sub_25B3FCA58(&v62, v10, (uint64_t)(v10 + 1), 2uLL);
  v63[2] = 2;
  sub_25B44BF28(v56, (uint64_t)&v58, (uint64_t)&v64);
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t v12 = (void *)v63[i - 1];
    if (v12)
    {
      v63[i] = v12;
      operator delete(v12);
    }
  }
  operator delete(v10);
  operator delete(v9);
  sub_25B44DC28((uint64_t)v57, &v54);
  int32x2_t v58 = 0;
  int32x2_t v59 = 0;
  unint64_t v60 = 0;
  if (v7)
  {
    float32x2_t v13 = vcvt_f32_f64(*((float64x2_t *)v7 + 7));
    float64x2_t v14 = *((float64x2_t *)v7 + 5);
    unint64_t v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  }
  else
  {
    unint64_t v15 = 0;
    v14.f64[0] = 0.0;
    float32x2_t v13 = 0;
  }
  int32x4_t v16 = *a2;
  int32x4_t v17 = a2[1];
  if (*a2 != v17)
  {
    unint64_t v18 = 0;
    *(void *)&v14.f64[1] = v15;
    float32x2_t v19 = vcvt_f32_f64(v14);
    do
    {
      float32x2_t v20 = vmul_f32(vadd_f32(*v16, v13), v19);
      float32x2_t v21 = vmul_f32(vadd_f32(v16[1], v13), v19);
      float v22 = -v20.f32[0];
      if (v20.f32[0] >= 0.0) {
        float v22 = v20.f32[0];
      }
      int v23 = (int)v22;
      float v24 = v22 - (float)(int)v22;
      if (v24 < 0.5) {
        int v25 = v23;
      }
      else {
        int v25 = v23 + 1;
      }
      int v26 = (v23 & 1) + v23;
      if (v24 != 0.5) {
        int v26 = v25;
      }
      if (v20.f32[0] < 0.0) {
        int v26 = -v26;
      }
      *(float *)&uint64_t v27 = (float)v26;
      float v28 = -v20.f32[1];
      if (v20.f32[1] >= 0.0) {
        float v28 = v20.f32[1];
      }
      int v29 = (int)v28;
      float v30 = v28 - (float)(int)v28;
      if (v30 < 0.5) {
        int v31 = v29;
      }
      else {
        int v31 = v29 + 1;
      }
      int v32 = (v29 & 1) + v29;
      if (v30 != 0.5) {
        int v32 = v31;
      }
      if (v20.f32[1] < 0.0) {
        int v32 = -v32;
      }
      *((float *)&v27 + 1) = (float)v32;
      float v33 = -v21.f32[0];
      if (v21.f32[0] >= 0.0) {
        float v33 = v21.f32[0];
      }
      int v34 = (int)v33;
      float v35 = v33 - (float)(int)v33;
      if (v35 < 0.5) {
        int v36 = v34;
      }
      else {
        int v36 = v34 + 1;
      }
      int v37 = (v34 & 1) + v34;
      if (v35 != 0.5) {
        int v37 = v36;
      }
      if (v21.f32[0] < 0.0) {
        int v37 = -v37;
      }
      *(float *)&uint64_t v38 = (float)v37;
      v21.f32[0] = -v21.f32[1];
      if (v21.f32[1] >= 0.0) {
        v21.f32[0] = v21.f32[1];
      }
      int v39 = (int)v21.f32[0];
      float v40 = v21.f32[0] - (float)(int)v21.f32[0];
      if (v40 < 0.5) {
        int v41 = v39;
      }
      else {
        int v41 = v39 + 1;
      }
      int v42 = (v39 & 1) + v39;
      if (v40 != 0.5) {
        int v42 = v41;
      }
      if (v21.f32[1] < 0.0) {
        int v42 = -v42;
      }
      *((float *)&v38 + 1) = (float)v42;
      if ((unint64_t)v18 >= v60)
      {
        uint64_t v52 = v38;
        uint64_t v53 = v27;
        uint64_t v44 = v58;
        uint64_t v45 = (v18 - v58) >> 4;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v47 = v60 - (void)v58;
        if ((uint64_t)(v60 - (void)v58) >> 3 > v46) {
          unint64_t v46 = v47 >> 3;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48) {
          unint64_t v48 = (unint64_t)sub_25B3FFAEC(v48);
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v50 = (void *)(v48 + 16 * v45);
        *uint64_t v50 = v53;
        v50[1] = v52;
        uint64_t v51 = (char *)v50;
        if (v18 != v44)
        {
          do
          {
            *((_OWORD *)v51 - 1) = *((_OWORD *)v18 - 1);
            v51 -= 16;
            v18 -= 16;
          }
          while (v18 != v44);
          unint64_t v18 = v58;
        }
        uint64_t v43 = v50 + 2;
        int32x2_t v58 = v51;
        int32x2_t v59 = v50 + 2;
        unint64_t v60 = v48 + 16 * v49;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)unint64_t v18 = v27;
        *((void *)v18 + 1) = v38;
        uint64_t v43 = v18 + 16;
      }
      int32x2_t v59 = v43;
      v16 += 2;
      unint64_t v18 = (char *)v43;
    }
    while (v16 != v17);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_25B53C080(v57, (uint64_t *)&v58, *(void *)(a4 + 144), (uint64_t)a1);
  if (v58) {
    operator delete(v58);
  }
  sub_25B44B10C((void *)v56[16]);
  sub_25B44B168((void *)v56[11]);
  sub_25B44B168((void *)v56[7]);
  sub_25B44B10C((void *)v56[1]);
  sub_25B44B088((uint64_t)v57);
}

void sub_25B481FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  int v42 = *(void **)v39;
  if (*(void *)v39)
  {
    *(void *)(v39 + 8) = v42;
    operator delete(v42);
  }
  uint64_t v43 = *(void **)(v40 - 192);
  if (v43) {
    operator delete(v43);
  }
  sub_25B4820B0(&a14);
  sub_25B44B088((uint64_t)&a38);

  _Unwind_Resume(a1);
}

void **sub_25B4820B0(void **a1)
{
  return a1;
}

void sub_25B4820F4()
{
}

void sub_25B48210C(uint64_t a1)
{
  sub_25B482144(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B482144(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1698;
  id v4 = (void **)(a1 + 912);
  sub_25B3F5F28(&v4);
  id v4 = (void **)(a1 + 792);
  sub_25B3F6050(&v4);
  id v4 = (void **)(a1 + 768);
  sub_25B4821D4(&v4);
  sub_25B3F5E50(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_25B4821D4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    id v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      id v7 = v4 - 40;
      do
      {
        (**v7)(v7);
        v6 -= 40;
        BOOL v8 = v7 == v2;
        v7 -= 40;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B482298(uint64_t a1, uint64_t *a2, int32x2_t *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v647 = *MEMORY[0x263EF8340];
  v612 = a4;
  id v591 = a5;
  id v592 = a7;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  v627 = 0;
  v628 = 0;
  unint64_t v629 = 0;
  while (1)
  {
    float64x2_t v14 = v612;
    if (v612) {
      float64x2_t v14 = (void *)v612[14];
    }
    id v15 = v14;
    unint64_t v18 = objc_msgSend_count(v15, v16, v17);

    if (v13 >= v18) {
      break;
    }
    if ((unint64_t)v12 >= v629)
    {
      long long v618 = *(_OWORD *)(v612[10] + (v13 << 6) + 48);
      float32x2_t v20 = (char *)v627;
      uint64_t v21 = (v12 - (unsigned char *)v627) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v23 = v629 - (void)v627;
      if ((uint64_t)(v629 - (void)v627) >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)sub_25B3FFAEC(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = (char *)(v24 + 16 * v21);
      *(_OWORD *)int v26 = v618;
      float32x2_t v19 = v26 + 16;
      if (v12 != v20)
      {
        do
        {
          long long v27 = *((_OWORD *)v12 - 1);
          v12 -= 16;
          *((_OWORD *)v26 - 1) = v27;
          v26 -= 16;
        }
        while (v12 != v20);
        uint64_t v12 = (char *)v627;
      }
      v627 = v26;
      unint64_t v629 = v24 + 16 * v25;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)(v612[10] + (v13 << 6) + 48);
      float32x2_t v19 = v12 + 16;
    }
    v628 = v19;
    ++v13;
    uint64_t v12 = v19;
  }
  float v28 = v612;
  if (v612)
  {
    int v29 = (const void *)v612[4];
    unint64_t v30 = (uint64_t)(v612[5] - (void)v29) >> 4;
  }
  else
  {
    int v29 = 0;
    unint64_t v30 = 0;
  }
  memset(v626, 0, sizeof(v626));
  sub_25B40EE6C(v626, v29, (uint64_t)v29 + 16 * v30, v30);
  sub_25B4853FC(a1, a2, a3, v591, (uint64_t *)&v627, a6, v592);
  uint64_t v31 = a2[1];
  int v32 = (uint64_t *)(a1 + 56);
  v593 = a2 + 1;
  uint64_t v33 = a2[2];
  if (v33 != v31)
  {
    int v34 = 0;
    float v35 = 0;
    unint64_t v599 = 0;
    uint64_t v36 = 0;
    uint64_t v606 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4);
    uint64_t v37 = -1171354717 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4);
    v601 = a2;
    while (*(_DWORD *)(v31 + 176 * v36 + 112) != 1)
    {
LABEL_164:
      if (0x2E8BA2E8BA2E8BA3 * ((v33 - v31) >> 4) <= (unint64_t)++v36)
      {
        if (v35 != v34)
        {
          sub_25B488028(v32);
          sub_25B488028(v593);
        }
        if (v34) {
          operator delete(v34);
        }
        goto LABEL_169;
      }
    }
    long long v643 = *(_OWORD *)(v31 + 176 * v36 + 16);
    if ((int)v606 < 1)
    {
      uint64_t v82 = v35;
      goto LABEL_163;
    }
    v608 = v34;
    uint64_t v38 = 0;
    long long v39 = v643;
    float32x2_t v40 = vsub_f32(*(float32x2_t *)&v643, *(float32x2_t *)((char *)&v643 + 8));
    int v41 = -1;
    float v602 = sqrtf(vaddv_f32(vmul_f32(v40, v40)));
    float v42 = fmaxf(v602, 0.000001);
    uint64_t v43 = 16;
    int v44 = -1;
    uint64_t v45 = 0xFFFFFFFFLL;
    int v46 = -1;
    do
    {
      *(_OWORD *)float32x4_t src = *(_OWORD *)(*v32 + v43);
      *(float *)&long long v47 = sub_25B3FCCE0((float32x2_t *)&v643, (float32x2_t *)src, 0);
      if (*(float *)&v47 > 20.0 && *(float *)&v47 < 160.0)
      {
        if (v46 == -1)
        {
          if (sub_25B40DB9C(*(float32x2_t *)&v39, *(float32x2_t *)src, *(float32x2_t *)&src[8], 0.00001) >= 0.1) {
            int v46 = -1;
          }
          else {
            int v46 = v38;
          }
        }
        if (v41 == -1)
        {
          if (sub_25B40DB9C(*(float32x2_t *)((char *)&v39 + 8), *(float32x2_t *)src, *(float32x2_t *)&src[8], 0.00001) >= 0.1) {
            int v41 = -1;
          }
          else {
            int v41 = v38;
          }
        }
      }
      else
      {
        long long v49 = *(_OWORD *)src;
        sub_25B40D638();
        *(float32x2_t *)&long long v47 = vsub_f32(*(float32x2_t *)&v47, v50);
        *(float *)&long long v47 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)&v47))) / v42;
        float32x2_t v51 = vsub_f32(*(float32x2_t *)((char *)&v49 + 8), *(float32x2_t *)&v49);
        float v52 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v39, *(float32x2_t *)&v49), v51));
        float v53 = vaddv_f32(vmul_f32(v51, v51));
        if (v53 < 0.000001) {
          float v53 = 0.000001;
        }
        float32x2_t v54 = vsub_f32(vmla_n_f32(*(float32x2_t *)&v49, v51, v52 / v53), *(float32x2_t *)&v39);
        float v55 = sqrtf(vaddv_f32(vmul_f32(v54, v54)));
        float32x2_t v56 = vsub_f32(vmla_n_f32(*(float32x2_t *)&v49, v51, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v39 + 8), *(float32x2_t *)&v49), v51)) / v53), *(float32x2_t *)((char *)&v39 + 8));
        float v57 = sqrtf(vaddv_f32(vmul_f32(v56, v56)));
        if (v55 < v57) {
          float v55 = v57;
        }
        if (v45 == 0xFFFFFFFFLL && *(float *)&v47 > 0.9 && v55 < 0.3)
        {
          uint64_t v45 = v38;
        }
        else
        {
          BOOL v60 = v55 > 0.3 && v55 < 0.9 && *(float *)&v47 > 0.8 && v44 == -1;
          if (v60) {
            int v44 = v38;
          }
        }
      }
      ++v38;
      v43 += 176;
    }
    while (v37 != v38);
    HIDWORD(v645) = v45;
    LODWORD(v645) = v46;
    *(void *)((char *)&v645 + 4) = __PAIR64__(v44, v41);
    int v34 = v608;
    if (v44 == -1)
    {
      uint64_t v82 = v35;
      float v28 = v612;
      a2 = v601;
      goto LABEL_163;
    }
    if (v46 != -1 && v41 != -1)
    {
      uint64_t v61 = *v32 + 176 * v46;
      float32x2_t v62 = *(float32x2_t *)(v61 + 16);
      float32x2_t v63 = *(float32x2_t *)(v61 + 24);
      uint64_t v64 = *v32 + 176 * v41;
      float32x2_t v65 = *(float32x2_t *)(v64 + 16);
      float32x2_t v66 = *(float32x2_t *)(v64 + 24);
      sub_25B40D638();
      float32x2_t v69 = vsub_f32(v67, v68);
      int32x2_t v70 = (int32x2_t)vmul_f32(v69, v69);
      int32x2_t v596 = (int32x2_t)vadd_f32((float32x2_t)v70, (float32x2_t)vdup_lane_s32(v70, 1));
      float32x2_t v71 = vsub_f32(v62, v63);
      int32x2_t v72 = (int32x2_t)vmul_f32(v71, v71);
      int32x2_t v73 = (int32x2_t)vadd_f32((float32x2_t)v72, (float32x2_t)vdup_lane_s32(v72, 1));
      sub_25B40D638();
      float32x2_t v77 = vsub_f32(v75, v76);
      int32x2_t v78 = (int32x2_t)vmul_f32(v77, v77);
      float32x2_t v79 = vsub_f32(v65, v66);
      int32x2_t v80 = (int32x2_t)vmul_f32(v79, v79);
      float32x2_t v81 = vdiv_f32(vsqrt_f32((float32x2_t)vzip1_s32(v596, (int32x2_t)vadd_f32((float32x2_t)v78, (float32x2_t)vdup_lane_s32(v78, 1)))), vmaxnm_f32(vsqrt_f32((float32x2_t)vzip1_s32(v73, (int32x2_t)vadd_f32((float32x2_t)v80, (float32x2_t)vdup_lane_s32(v80, 1)))), (float32x2_t)vdup_n_s32(0x358637BDu)));
      if (v81.f32[0] < v81.f32[1]) {
        v81.f32[0] = v81.f32[1];
      }
      a2 = v601;
      if (v81.f32[0] < 0.8 && v602 < 0.9)
      {
        uint64_t v82 = v35;
        float v28 = v612;
LABEL_163:
        uint64_t v31 = a2[1];
        uint64_t v33 = a2[2];
        float v35 = v82;
        goto LABEL_164;
      }
      float v28 = v612;
      if ((unint64_t)v35 >= v599)
      {
        uint64_t v100 = (v35 - v608) >> 2;
        unint64_t v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v599 - (void)v608) >> 1 > v101) {
          unint64_t v101 = (uint64_t)(v599 - (void)v608) >> 1;
        }
        if (v599 - (unint64_t)v608 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v101;
        }
        if (v102) {
          unint64_t v102 = (unint64_t)sub_25B3FBC64(v102);
        }
        else {
          uint64_t v103 = 0;
        }
        uint64_t v125 = (char *)(v102 + 4 * v100);
        *(_DWORD *)uint64_t v125 = v36;
        uint64_t v82 = v125 + 4;
        while (v35 != v608)
        {
          int v126 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v125 - 1) = v126;
          v125 -= 4;
        }
        unint64_t v599 = v102 + 4 * v103;
        if (v608) {
          operator delete(v608);
        }
        int v34 = v125;
      }
      else
      {
        *(_DWORD *)float v35 = v36;
        uint64_t v82 = v35 + 4;
      }
      int v127 = DWORD2(v645);
      sub_25B47C6E4((uint64_t)src, *v32 + 176 * SDWORD2(v645), v74);
      *(void *)&long long v130 = *(void *)&src[24];
      *(void *)&long long v129 = *(void *)&src[16];
      *(float32x2_t *)&long long v133 = vsub_f32(*(float32x2_t *)&src[16], *(float32x2_t *)&src[24]);
      *(float32x2_t *)&long long v133 = vmul_f32(*(float32x2_t *)&v133, *(float32x2_t *)&v133);
      long long v131 = v643;
      *(float32x2_t *)&long long v132 = vsub_f32(*(float32x2_t *)&v643, *(float32x2_t *)((char *)&v643 + 8));
      *(float32x2_t *)&long long v132 = vmul_f32(*(float32x2_t *)&v132, *(float32x2_t *)&v132);
      *(float32x2_t *)&long long v133 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)&v133, *(int32x2_t *)&v132), (float32x2_t)vzip2_s32(*(int32x2_t *)&v133, *(int32x2_t *)&v132)));
      if (vcgt_f32(*(float32x2_t *)&v133, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v133, 1)).u8[0])
      {
        float32x2_t v134 = vsub_f32(*(float32x2_t *)&src[24], *(float32x2_t *)&src[16]);
        float v135 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v643, *(float32x2_t *)&src[16]), v134));
        float v136 = vaddv_f32(vmul_f32(v134, v134));
        if (v136 < 0.000001) {
          float v136 = 0.000001;
        }
        *(float32x2_t *)&long long v133 = vmla_n_f32(*(float32x2_t *)&src[16], v134, v135 / v136);
        *(float32x2_t *)&long long v132 = vmla_n_f32(*(float32x2_t *)&src[16], v134, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v643 + 8), *(float32x2_t *)&src[16]), v134))/ v136);
        float32x2_t v137 = vsub_f32(*(float32x2_t *)&v133, *(float32x2_t *)&src[16]);
        int32x2_t v138 = (int32x2_t)vmul_f32(v137, v137);
        float32x2_t v139 = vsub_f32(*(float32x2_t *)&v132, *(float32x2_t *)&src[16]);
        int32x2_t v140 = (int32x2_t)vmul_f32(v139, v139);
        float32x2_t v141 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v138, v140), (float32x2_t)vzip2_s32(v138, v140)));
        if (v141.f32[0] >= v141.f32[1])
        {
          if (v141.f32[1] < 0.2)
          {
            uint64_t v145 = *v32 + 176 * v127;
            long long v129 = v133;
            DWORD2(v129) = *(_DWORD *)(v145 + 64);
            long long v146 = v130;
            DWORD2(v146) = *(_DWORD *)(v145 + 68);
            *(void *)(v145 + 16) = v133;
            *(void *)(v145 + 24) = v130;
            DWORD2(v133) = DWORD2(v146);
            DWORD2(v130) = DWORD2(v129);
            *(_OWORD *)(v145 + 32) = v129;
            *(_OWORD *)(v145 + 48) = v146;
            uint64_t v144 = *(void *)(v145 + 8);
            long long v630 = v133;
            long long v631 = v146;
            long long v632 = v130;
            long long v633 = v129;
            if (!v144) {
              goto LABEL_147;
            }
            goto LABEL_146;
          }
          float32x2_t v157 = vsub_f32(*(float32x2_t *)&v133, *(float32x2_t *)&src[24]);
          if (sqrtf(vaddv_f32(vmul_f32(v157, v157))) < 0.2)
          {
            uint64_t v158 = *v32 + 176 * v127;
            long long v130 = v132;
            DWORD2(v130) = *(_DWORD *)(v158 + 64);
            long long v159 = v129;
            DWORD2(v159) = *(_DWORD *)(v158 + 68);
            *(void *)(v158 + 16) = v132;
            *(void *)(v158 + 24) = v129;
            DWORD2(v132) = DWORD2(v159);
            DWORD2(v129) = DWORD2(v130);
            *(_OWORD *)(v158 + 32) = v130;
            *(_OWORD *)(v158 + 48) = v159;
            uint64_t v144 = *(void *)(v158 + 8);
            long long v630 = v132;
            long long v631 = v159;
            long long v632 = v129;
            long long v633 = v130;
            if (!v144) {
              goto LABEL_147;
            }
            goto LABEL_146;
          }
        }
        else
        {
          if (v141.f32[0] < 0.2)
          {
            uint64_t v142 = *v32 + 176 * v127;
            long long v129 = v132;
            DWORD2(v129) = *(_DWORD *)(v142 + 64);
            long long v143 = v130;
            DWORD2(v143) = *(_DWORD *)(v142 + 68);
            *(void *)(v142 + 16) = v132;
            *(void *)(v142 + 24) = v130;
            DWORD2(v132) = DWORD2(v143);
            DWORD2(v130) = DWORD2(v129);
            *(_OWORD *)(v142 + 32) = v129;
            *(_OWORD *)(v142 + 48) = v143;
            uint64_t v144 = *(void *)(v142 + 8);
            long long v630 = v132;
            long long v631 = v143;
            long long v632 = v130;
            long long v633 = v129;
            if (!v144) {
              goto LABEL_147;
            }
LABEL_146:
            objc_copyStruct((void *)(v144 + 272), &v630, 64, 1, 0);
LABEL_147:
            uint64_t v160 = 0;
            int32x2_t v161 = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)&v131 + 8), *(float32x2_t *)&v131);
            *(float *)&long long v130 = -*(float *)&v161.i32[1];
            float32x2_t v162 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v130, v161);
            char v163 = 1;
            do
            {
              int v164 = *((_DWORD *)&v645 + v160);
              uint64_t v165 = *v32 + 176 * v164;
              *(void *)&long long v129 = *(void *)(v165 + 16);
              float32x2_t v167 = *(float32x2_t *)(v165 + 24);
              float v166 = (void *)(v165 + 16);
              char v168 = v163;
              float32x2_t v169 = vsub_f32(v167, *(float32x2_t *)&v129);
              int32x2_t v170 = (int32x2_t)vmul_f32(v169, v162);
              if (vaddv_f32((float32x2_t)v170) != 0.0)
              {
                float32x2_t v171 = vsub_f32(*(float32x2_t *)&v129, *(float32x2_t *)&src[16]);
                float32x2_t v172 = vsub_f32(*(float32x2_t *)&v129, *(float32x2_t *)&src[24]);
                BOOL v173 = sqrtf(vaddv_f32(vmul_f32(v171, v171))) < 0.2;
                if (sqrtf(vaddv_f32(vmul_f32(v172, v172))) < 0.2) {
                  BOOL v173 = 1;
                }
                if (v173
                  || (float32x2_t v174 = vsub_f32(v167, *(float32x2_t *)&src[16]), sqrtf(vaddv_f32(vmul_f32(v174, v174))) < 0.2)
                  || (float32x2_t v175 = vsub_f32(v167, *(float32x2_t *)&src[24]), sqrtf(vaddv_f32(vmul_f32(v175, v175))) < 0.2))
                {
                  int32x2_t v176 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v131, *(float32x2_t *)&v129), *(float32x2_t *)((char *)&v131 + 8));
                  LODWORD(v177) = vdiv_f32(vadd_f32((float32x2_t)v176, (float32x2_t)vdup_lane_s32(v176, 1)), vadd_f32((float32x2_t)v170, (float32x2_t)vdup_lane_s32(v170, 1))).u32[0];
                  unsigned int v178 = v173 ? -1 : 0;
                  *(float32x2_t *)&long long v128 = vmla_n_f32(*(float32x2_t *)&v129, v169, v177);
                  *(int8x8_t *)&long long v129 = vbsl_s8((int8x8_t)vdup_n_s32(v178), (int8x8_t)v167, *(int8x8_t *)&v129);
                  uint64_t v179 = *v32 + 176 * v164;
                  long long v180 = v128;
                  DWORD2(v180) = *(_DWORD *)(v179 + 64);
                  long long v181 = v129;
                  DWORD2(v181) = *(_DWORD *)(v179 + 68);
                  void *v166 = v128;
                  v166[1] = v129;
                  DWORD2(v128) = DWORD2(v181);
                  DWORD2(v129) = DWORD2(v180);
                  *(_OWORD *)(v179 + 32) = v180;
                  *(_OWORD *)(v179 + 48) = v181;
                  uint64_t v182 = *(void *)(v179 + 8);
                  long long v630 = v128;
                  long long v631 = v181;
                  long long v632 = v129;
                  long long v633 = v180;
                  if (v182) {
                    objc_copyStruct((void *)(v182 + 272), &v630, 64, 1, 0);
                  }
                }
              }
              char v163 = 0;
              uint64_t v160 = 1;
            }
            while ((v168 & 1) != 0);
            float32x2_t v183 = vsub_f32(*(float32x2_t *)&src[16], *(float32x2_t *)&src[24]);
            if (sqrtf(vaddv_f32(vmul_f32(v183, v183))) < 0.2) {
              LODWORD(v642) = 2;
            }
            goto LABEL_162;
          }
          float32x2_t v154 = vsub_f32(*(float32x2_t *)&v132, *(float32x2_t *)&src[24]);
          if (sqrtf(vaddv_f32(vmul_f32(v154, v154))) < 0.2)
          {
            uint64_t v155 = *v32 + 176 * v127;
            long long v130 = v133;
            DWORD2(v130) = *(_DWORD *)(v155 + 64);
            long long v156 = v129;
            DWORD2(v156) = *(_DWORD *)(v155 + 68);
            *(void *)(v155 + 16) = v133;
            *(void *)(v155 + 24) = v129;
            DWORD2(v133) = DWORD2(v156);
            DWORD2(v129) = DWORD2(v130);
            *(_OWORD *)(v155 + 32) = v130;
            *(_OWORD *)(v155 + 48) = v156;
            uint64_t v144 = *(void *)(v155 + 8);
            long long v630 = v133;
            long long v631 = v156;
            long long v632 = v129;
            long long v633 = v130;
            if (!v144) {
              goto LABEL_147;
            }
            goto LABEL_146;
          }
        }
      }
LABEL_162:
      sub_25B3F5FE8((uint64_t)src);
      goto LABEL_163;
    }
    uint64_t v83 = *v593 + 176 * v36;
    float32x2_t v85 = *(float32x2_t *)(v83 + 16);
    float v84 = (float32x2_t *)(v83 + 16);
    float32x2_t v86 = v85;
    uint64_t v87 = *v32;
    uint64_t v88 = *v32 + 176 * v44;
    float32x2_t v90 = *(float32x2_t *)(v88 + 16);
    float32x2_t v91 = *(float32x2_t *)(v88 + 24);
    uint64_t v89 = (float32x2_t *)(v88 + 16);
    float32x2_t v92 = vsub_f32(v91, v90);
    float v93 = vaddv_f32(vmul_f32(vsub_f32(v85, v90), v92));
    float v94 = vaddv_f32(vmul_f32(v92, v92));
    if (v94 < 0.000001) {
      float v94 = 0.000001;
    }
    float32x2_t v95 = vsub_f32(vmla_n_f32(v90, v92, v93 / v94), v86);
    float v96 = sqrtf(vaddv_f32(vmul_f32(v95, v95)));
    if (v46 < 0)
    {
      a2 = v601;
      if (v41 < 0)
      {
        float v98 = v96 + 0.4;
      }
      else
      {
        float32x2_t v99 = vsub_f32(*(float32x2_t *)(v87 + 176 * v41 + 16), *(float32x2_t *)(v87 + 176 * v41 + 24));
        float v98 = sqrtf(vaddv_f32(vmul_f32(v99, v99)));
      }
    }
    else
    {
      float32x2_t v97 = vsub_f32(*(float32x2_t *)(v87 + 176 * v46 + 16), *(float32x2_t *)(v87 + 176 * v46 + 24));
      float v98 = sqrtf(vaddv_f32(vmul_f32(v97, v97)));
      a2 = v601;
    }
    if (v98 < (float)(v96 + 0.2))
    {
      uint64_t v82 = v35;
      float v28 = v612;
LABEL_125:
      int v34 = v608;
      goto LABEL_163;
    }
    *(_DWORD *)(*v593 + 176 * v36 + 88) = 2;
    if ((v45 & 0x80000000) == 0) {
      *(_DWORD *)(v87 + 176 * v45 + 88) = 2;
    }
    if (v46 <= v41) {
      unsigned int v104 = v41;
    }
    else {
      unsigned int v104 = v46;
    }
    float v28 = v612;
    if ((v104 & 0x80000000) == 0)
    {
      float v105 = (float32x2_t *)(v87 + 176 * v104);
      float32x2_t v107 = v105[2];
      long long v106 = v105 + 2;
      *(float32x2_t *)&long long v47 = v107;
      float32x2_t v108 = *v84;
      float32x2_t v109 = v84[1];
      long long v603 = v47;
      float v110 = sub_25B40DB9C(v107, *v84, v109, 0.00001);
      *(float32x2_t *)&long long v111 = v106[1];
      long long v597 = v111;
      *(float *)&long long v112 = sub_25B40DB9C(*(float32x2_t *)&v111, v108, v109, 0.00001);
      if (*(float *)&v112 >= v110) {
        *(float *)&long long v112 = v110;
      }
      if (*(float *)&v112 < 0.1)
      {
        long long v114 = v603;
        long long v115 = v597;
        int32x2_t v116 = (int32x2_t)vsub_f32(*(float32x2_t *)&v597, *(float32x2_t *)&v603);
        *(float32x2_t *)&long long v112 = *v89;
        float32x2_t v117 = vsub_f32(v89[1], *v89);
        *(float *)v113.i32 = -*(float *)&v116.i32[1];
        float32x2_t v118 = (float32x2_t)vzip1_s32(v113, v116);
        int32x2_t v119 = (int32x2_t)vmul_f32(v117, v118);
        if (vaddv_f32((float32x2_t)v119) == 0.0) {
          sub_25B4704D8();
        }
        int32x2_t v120 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v603, *(float32x2_t *)&v112), v118);
        *(float32x2_t *)&long long v112 = vmla_n_f32(*(float32x2_t *)&v112, v117, vdiv_f32(vadd_f32((float32x2_t)v120, (float32x2_t)vdup_lane_s32(v120, 1)), vadd_f32((float32x2_t)v119, (float32x2_t)vdup_lane_s32(v119, 1))).f32[0]);
        *long long v106 = (float32x2_t)v112;
        uint64_t v121 = v87 + 176 * v104;
        long long v122 = v112;
        if (v110 >= 0.1)
        {
          DWORD2(v122) = *(_DWORD *)(v121 + 64);
          long long v147 = v603;
          DWORD2(v147) = *(_DWORD *)(v121 + 68);
          v106[1] = (float32x2_t)v603;
          DWORD2(v112) = DWORD2(v147);
          DWORD2(v114) = DWORD2(v122);
          *(_OWORD *)(v121 + 32) = v122;
          *(_OWORD *)(v121 + 48) = v147;
          uint64_t v124 = *(void *)(v121 + 8);
          *(_OWORD *)float32x4_t src = v112;
          *(_OWORD *)&src[16] = v147;
          long long v638 = v114;
          *(_OWORD *)v639 = v122;
          if (v124) {
LABEL_122:
          }
            objc_copyStruct((void *)(v124 + 272), src, 64, 1, 0);
        }
        else
        {
          DWORD2(v122) = *(_DWORD *)(v121 + 64);
          long long v123 = v597;
          DWORD2(v123) = *(_DWORD *)(v121 + 68);
          DWORD2(v112) = DWORD2(v123);
          DWORD2(v115) = DWORD2(v122);
          *(_OWORD *)(v121 + 32) = v122;
          *(_OWORD *)(v121 + 48) = v123;
          uint64_t v124 = *(void *)(v121 + 8);
          *(_OWORD *)float32x4_t src = v112;
          *(_OWORD *)&src[16] = v123;
          long long v638 = v115;
          *(_OWORD *)v639 = v122;
          if (v124) {
            goto LABEL_122;
          }
        }
      }
    }
    if ((unint64_t)v35 >= v599)
    {
      uint64_t v148 = (v35 - v608) >> 2;
      unint64_t v149 = v148 + 1;
      if ((unint64_t)(v148 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v599 - (void)v608) >> 1 > v149) {
        unint64_t v149 = (uint64_t)(v599 - (void)v608) >> 1;
      }
      if (v599 - (unint64_t)v608 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v150 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v150 = v149;
      }
      if (v150) {
        unint64_t v150 = (unint64_t)sub_25B3FBC64(v150);
      }
      else {
        uint64_t v151 = 0;
      }
      long long v152 = (char *)(v150 + 4 * v148);
      *(_DWORD *)long long v152 = v36;
      uint64_t v82 = v152 + 4;
      while (v35 != v608)
      {
        int v153 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v152 - 1) = v153;
        v152 -= 4;
      }
      unint64_t v599 = v150 + 4 * v151;
      if (v608) {
        operator delete(v608);
      }
      int v34 = v152;
      goto LABEL_163;
    }
    *(_DWORD *)float v35 = v36;
    uint64_t v82 = v35 + 4;
    goto LABEL_125;
  }
LABEL_169:
  v589 = v592;
  v590 = v28;
  long long v619 = *(_OWORD *)v589[7];
  id v184 = (const void *)v589[1];
  uint64_t v185 = v589[2];
  memset(v636, 0, sizeof(v636));
  sub_25B487E48(v636, v184, v185, (v185 - (uint64_t)v184) >> 4);
  unint64_t v186 = 0;
  if (v28) {
    goto LABEL_190;
  }
LABEL_189:
  for (uint64_t i = 0; ; uint64_t i = (void *)v28[14])
  {
    id v202 = i;
    BOOL v205 = v186 < objc_msgSend_count(v202, v203, v204);

    if (!v205) {
      break;
    }
    float32x4_t v188 = *(_OWORD **)(a1 + 16);
    unint64_t v187 = *(void *)(a1 + 24);
    if ((unint64_t)v188 >= v187)
    {
      *(_OWORD *)__p = *(_OWORD *)(v28[10] + (v186 << 6) + 48);
      uint64_t v190 = *(void *)(a1 + 8);
      uint64_t v191 = ((uint64_t)v188 - v190) >> 4;
      if ((unint64_t)(v191 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v192 = v187 - v190;
      uint64_t v193 = v192 >> 3;
      if (v192 >> 3 <= (unint64_t)(v191 + 1)) {
        uint64_t v193 = v191 + 1;
      }
      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v194 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v194 = v193;
      }
      if (v194) {
        unint64_t v194 = (unint64_t)sub_25B3FFAEC(v194);
      }
      else {
        uint64_t v195 = 0;
      }
      float32x4_t v196 = (_OWORD *)(v194 + 16 * v191);
      *float32x4_t v196 = *(_OWORD *)__p;
      float32x4_t v189 = v196 + 1;
      uint64_t v198 = *(char **)(a1 + 8);
      long long v197 = *(char **)(a1 + 16);
      if (v197 == v198)
      {
        uint64_t v200 = (void *)a1;
      }
      else
      {
        do
        {
          long long v199 = *((_OWORD *)v197 - 1);
          v197 -= 16;
          *--float32x4_t v196 = v199;
        }
        while (v197 != v198);
        uint64_t v200 = (void *)a1;
        long long v197 = *(char **)(a1 + 8);
      }
      v200[1] = v196;
      v200[2] = v189;
      v200[3] = v194 + 16 * v195;
      if (v197) {
        operator delete(v197);
      }
    }
    else
    {
      _OWORD *v188 = *(_OWORD *)(v28[10] + (v186 << 6) + 48);
      float32x4_t v189 = v188 + 1;
    }
    *(void *)(a1 + 16) = v189;
    ++v186;
    if (!v28) {
      goto LABEL_189;
    }
LABEL_190:
    ;
  }
  long long v630 = 0uLL;
  *(void *)&long long v631 = 0;
  long long v643 = 0uLL;
  unint64_t v644 = 0;
  v635[0] = 0;
  v635[1] = 0;
  v634 = v635;
  uint64_t v207 = &off_25B5F1000;
  int v208 = *(float32x2_t **)(a1 + 64);
  uint64_t v209 = 0;
  if (v208 == *(float32x2_t **)(a1 + 56))
  {
    v213 = *(float32x2_t **)(a1 + 64);
  }
  else
  {
    uint64_t v210 = 0;
    unint64_t v211 = 0;
    unint64_t v212 = 0;
    v213 = *(float32x2_t **)(a1 + 64);
    int v208 = *(float32x2_t **)(a1 + 56);
    do
    {
      if (v208[22 * v212 + 9].i8[4])
      {
        unint64_t v607 = v211;
        v609 = v209;
        uint64_t v214 = 0;
        __pa = operator new(0x10uLL);
        _OWORD *__pa = xmmword_25B5F13C0;
        char v215 = 1;
        do
        {
          char v216 = v215;
          if (v213 != v208)
          {
            uint64_t v217 = 0;
            unint64_t v218 = 0;
            while (v212 == v218
                 || sub_25B40DB9C(v208[22 * v212 + 2 + v214], v208[v217 + 2], v208[v217 + 3], 0.00001) >= 0.1)
            {
              ++v218;
              v217 += 22;
              if (v218 >= 0x2E8BA2E8BA2E8BA3 * (((char *)v213 - (char *)v208) >> 4)) {
                goto LABEL_203;
              }
            }
            *((_DWORD *)__pa + 2 * v214) = 0;
          }
LABEL_203:
          char v215 = 0;
          uint64_t v214 = 1;
        }
        while ((v216 & 1) != 0);
        uint64_t v219 = (uint64_t)(__pa + 1);
        id v220 = (void *)*((void *)&v630 + 1);
        unint64_t v211 = v607;
        if (*((void *)&v630 + 1) >= (unint64_t)v631)
        {
          unint64_t v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v630 + 1) - v630) >> 3);
          unint64_t v226 = v225 + 1;
          uint64_t v209 = v609;
          if (v225 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v631 - v630) >> 3) > v226) {
            unint64_t v226 = 0x5555555555555556 * ((uint64_t)(v631 - v630) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v631 - v630) >> 3) >= 0x555555555555555) {
            unint64_t v227 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v227 = v226;
          }
          *(void *)&long long v638 = &v631;
          if (v227)
          {
            if (v227 > 0xAAAAAAAAAAAAAAALL) {
              sub_25B3FA70C();
            }
            uint64_t v228 = (char *)operator new(24 * v227);
            int v32 = (uint64_t *)(a1 + 56);
          }
          else
          {
            uint64_t v228 = 0;
            int v32 = (uint64_t *)(a1 + 56);
          }
          float32x2_t v230 = &v228[24 * v225];
          *(void *)float32x4_t src = v228;
          *(void *)&src[8] = v230;
          *(void *)&src[16] = v230;
          *(void *)&src[24] = &v228[24 * v227];
          *((void *)v230 + 1) = 0;
          *((void *)v230 + 2) = 0;
          *(void *)float32x2_t v230 = 0;
          sub_25B537568(v230, __pa, v219, 2uLL);
          uint64_t v231 = *(void *)&src[8];
          uint64_t v221 = *(void *)&src[16] + 24;
          *(void *)&src[16] += 24;
          float32x4_t v232 = (void *)*((void *)&v630 + 1);
          float32x2_t v233 = (void *)v630;
          uint64_t v207 = &off_25B5F1000;
          if (*((void *)&v630 + 1) == (void)v630)
          {
            int64x2_t v235 = vdupq_n_s64(*((unint64_t *)&v630 + 1));
          }
          else
          {
            do
            {
              *(void *)(v231 - 24) = 0;
              *(void *)(v231 - 16) = 0;
              v231 -= 24;
              *(void *)(v231 + 16) = 0;
              long long v234 = *(_OWORD *)(v232 - 3);
              v232 -= 3;
              *(_OWORD *)uint64_t v231 = v234;
              *(void *)(v231 + 16) = v232[2];
              *float32x4_t v232 = 0;
              v232[1] = 0;
              v232[2] = 0;
            }
            while (v232 != v233);
            int64x2_t v235 = (int64x2_t)v630;
            uint64_t v221 = *(void *)&src[16];
          }
          *(void *)&long long v630 = v231;
          *((void *)&v630 + 1) = v221;
          *(int64x2_t *)&src[8] = v235;
          uint64_t v236 = v631;
          *(void *)&long long v631 = *(void *)&src[24];
          *(void *)&src[24] = v236;
          *(void *)float32x4_t src = v235.i64[0];
          sub_25B43EAC4((uint64_t)src);
        }
        else
        {
          **((void **)&v630 + 1) = 0;
          v220[1] = 0;
          v220[2] = 0;
          uint64_t v209 = v609;
          sub_25B537568(v220, __pa, v219, 2uLL);
          uint64_t v207 = &off_25B5F1000;
          uint64_t v221 = (uint64_t)(v220 + 3);
          int v32 = (uint64_t *)(a1 + 56);
        }
        *((void *)&v630 + 1) = v221;
        if ((unint64_t)v210 >= v607)
        {
          uint64_t v238 = (v210 - v209) >> 2;
          unint64_t v239 = v238 + 1;
          if ((unint64_t)(v238 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v607 - (void)v209) >> 1 > v239) {
            unint64_t v239 = (uint64_t)(v607 - (void)v209) >> 1;
          }
          if (v607 - (unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v240 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v240 = v239;
          }
          if (v240) {
            unint64_t v240 = (unint64_t)sub_25B3FBC64(v240);
          }
          else {
            uint64_t v241 = 0;
          }
          int32x2_t v242 = (char *)(v240 + 4 * v238);
          *(_DWORD *)int32x2_t v242 = v212;
          uint64_t v237 = v242 + 4;
          while (v210 != v209)
          {
            int v243 = *((_DWORD *)v210 - 1);
            v210 -= 4;
            *((_DWORD *)v242 - 1) = v243;
            v242 -= 4;
          }
          unint64_t v211 = v240 + 4 * v241;
          if (v209) {
            operator delete(v209);
          }
          uint64_t v209 = v242;
        }
        else
        {
          *(_DWORD *)uint64_t v210 = v212;
          uint64_t v237 = v210 + 4;
        }
        operator delete(__pa);
        uint64_t v210 = v237;
      }
      else
      {
        sub_25B47C6E4((uint64_t)src, (uint64_t)&v208[22 * v212], v206);
        uint64_t v223 = *((void *)&v643 + 1);
        if (*((void *)&v643 + 1) >= v644)
        {
          uint64_t v224 = sub_25B47C818((uint64_t *)&v643, (uint64_t)src, v222);
        }
        else
        {
          sub_25B47C6E4(*((uint64_t *)&v643 + 1), (uint64_t)src, v222);
          uint64_t v224 = v223 + 176;
        }
        *((void *)&v643 + 1) = v224;
        sub_25B3F5FE8((uint64_t)src);
      }
      ++v212;
      int v208 = *(float32x2_t **)(a1 + 56);
      v213 = *(float32x2_t **)(a1 + 64);
      unint64_t v244 = 0x2E8BA2E8BA2E8BA3 * (((char *)v213 - (char *)v208) >> 4);
    }
    while (v212 < v244);
    if (v210 != v209)
    {
      uint64_t v245 = 0;
      unint64_t v246 = (v210 - v209) >> 2;
      if (v246 <= 1) {
        unint64_t v246 = 1;
      }
      float v247 = *((float *)v207 + 919);
      do
      {
        uint64_t v248 = 0;
        uint64_t v249 = *(unsigned int *)&v209[4 * v245];
        float v250 = (void *)(v630 + 24 * v245);
        uint64_t v251 = 1;
        do
        {
          uint64_t v206 = v251;
          if (v213 != v208)
          {
            uint64_t v252 = 0;
            float32x2_t v253 = v208[22 * (int)v249 + 2 + v248];
            int32x2_t v254 = (int32x2_t)vsub_f32(v253, *(float32x2_t *)&v619);
            *(float *)v229.i32 = -*(float *)&v254.i32[1];
            float32x2_t v255 = (float32x2_t)vzip1_s32(v229, v254);
            while (1)
            {
              if (v252 != (int)v249)
              {
                int v256 = &v208[22 * v252];
                float32x2_t v257 = v256[2];
                int32x2_t v229 = (int32x2_t)v256[3];
                int32x2_t v258 = (int32x2_t)vsub_f32((float32x2_t)v229, v257);
                int32x2_t v259 = (int32x2_t)vmul_f32((float32x2_t)v258, v255);
                if (vaddv_f32((float32x2_t)v259) != 0.0)
                {
                  int32x2_t v260 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v619, v257), v255);
                  float32x2_t v261 = vmla_n_f32(v257, (float32x2_t)v258, vdiv_f32(vadd_f32((float32x2_t)v260, (float32x2_t)vdup_lane_s32(v260, 1)), vadd_f32((float32x2_t)v259, (float32x2_t)vdup_lane_s32(v259, 1))).f32[0]);
                  int32x2_t v229 = (int32x2_t)vmul_f32(vsub_f32(v261, v257), vsub_f32(v261, (float32x2_t)v229));
                  if (vaddv_f32((float32x2_t)v229) <= v247)
                  {
                    int32x2_t v229 = (int32x2_t)vmul_f32(vsub_f32(v261, *(float32x2_t *)&v619), vsub_f32(v261, v253));
                    if (vaddv_f32((float32x2_t)v229) <= v247) {
                      break;
                    }
                  }
                }
              }
LABEL_255:
              if (++v252 >= v244) {
                goto LABEL_268;
              }
            }
            uint64_t v262 = *(void *)(a1 + 8);
            uint64_t v263 = *(void *)(a1 + 16);
            uint64_t v264 = v263 - v262;
            if (v263 != v262)
            {
              unint64_t v265 = 0;
              unint64_t v266 = v264 >> 4;
              do
              {
                unint64_t v267 = 0;
                int32x2_t v229 = *(int32x2_t *)(v262 + 16 * v265);
                int32x2_t v268 = (int32x2_t)vsub_f32(v253, (float32x2_t)v229);
                *(float *)v258.i32 = -*(float *)&v268.i32[1];
                float32x2_t v269 = (float32x2_t)vzip1_s32(v258, v268);
                float32x4_t v270 = v208 + 3;
                while (1)
                {
                  if (v249 != v267)
                  {
                    float32x2_t v271 = v270[-1];
                    float32x2_t v272 = vsub_f32(*v270, v271);
                    int32x2_t v273 = (int32x2_t)vmul_f32(v272, v269);
                    if (vaddv_f32((float32x2_t)v273) != 0.0)
                    {
                      int32x2_t v274 = (int32x2_t)vmul_f32(vsub_f32((float32x2_t)v229, v271), v269);
                      float32x2_t v275 = vmla_n_f32(v271, v272, vdiv_f32(vadd_f32((float32x2_t)v274, (float32x2_t)vdup_lane_s32(v274, 1)), vadd_f32((float32x2_t)v273, (float32x2_t)vdup_lane_s32(v273, 1))).f32[0]);
                      if (vaddv_f32(vmul_f32(vsub_f32(v275, v271), vsub_f32(v275, *v270))) <= 0.00001)
                      {
                        int32x2_t v258 = (int32x2_t)vmul_f32(vsub_f32(v275, (float32x2_t)v229), vsub_f32(v275, v253));
                        if (vaddv_f32((float32x2_t)v258) <= 0.00001) {
                          break;
                        }
                      }
                    }
                  }
                  ++v267;
                  v270 += 22;
                  if (v244 <= v267) {
                    goto LABEL_255;
                  }
                }
                ++v265;
              }
              while (v266 > v265);
            }
            *(_DWORD *)(*v250 + 8 * v248 + 4) = 3;
          }
LABEL_268:
          uint64_t v251 = 0;
          uint64_t v248 = 1;
        }
        while ((v206 & 1) != 0);
        ++v245;
      }
      while (v245 != v246);
    }
  }
  uint64_t v276 = v630;
  if (*((void *)&v630 + 1) == (void)v630) {
    goto LABEL_364;
  }
  unint64_t v277 = 0;
  float32x2_t v278 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
  do
  {
    float32x4_t v279 = *(_DWORD **)(v276 + 24 * v277);
    if ((*v279 != 1 || v279[1] != 3) && (v279[2] != 1 || v279[3] != 3)) {
      goto LABEL_358;
    }
    unsigned int v280 = *(_DWORD *)&v209[4 * v277];
    long long v645 = 0uLL;
    uint64_t v646 = 0;
    sub_25B537568(&v645, v279, *(void *)(v276 + 24 * v277 + 8), (uint64_t)(*(void *)(v276 + 24 * v277 + 8) - (void)v279) >> 3);
    float32x4_t v282 = *(float32x2_t **)(a1 + 56);
    if (*(float32x2_t **)(a1 + 64) == v282)
    {
      unint64_t v283 = 0;
    }
    else
    {
      unint64_t v283 = 0;
      uint64_t v284 = 0;
      unint64_t __pb = 0;
      unint64_t v285 = 0;
      __int32 v286 = &v282[22 * (int)v280 + 2];
      uint64_t v287 = v280;
      do
      {
        if (v285 != v287)
        {
          int v288 = &v282[22 * v285 + 2];
          float v289 = sub_25B3FCCE0(v286, v288, 0);
          if (v289 >= 30.0 && v289 <= 150.0)
          {
            float32x2_t v293 = *v286;
            float32x2_t v292 = v286[1];
            int32x2_t v294 = (int32x2_t)vsub_f32(v292, *v286);
            float32x2_t v296 = *v288;
            float32x2_t v295 = v288[1];
            float32x2_t v297 = vsub_f32(v295, *v288);
            *(float *)v290.i32 = -*(float *)&v294.i32[1];
            float32x2_t v298 = (float32x2_t)vzip1_s32(v290, v294);
            int32x2_t v299 = (int32x2_t)vmul_f32(v297, v298);
            if (vaddv_f32((float32x2_t)v299) != 0.0)
            {
              int32x2_t v300 = (int32x2_t)vmul_f32(vsub_f32(v293, v296), v298);
              float32x2_t v301 = vmla_n_f32(v296, v297, vdiv_f32(vadd_f32((float32x2_t)v300, (float32x2_t)vdup_lane_s32(v300, 1)), vadd_f32((float32x2_t)v299, (float32x2_t)vdup_lane_s32(v299, 1))).f32[0]);
              if (vaddv_f32(vmul_f32(vsub_f32(v301, v296), vsub_f32(v301, v295))) <= 0.2
                && vaddv_f32(vmul_f32(vsub_f32(v301, v293), vsub_f32(v301, v292))) <= 0.00001)
              {
                if ((unint64_t)v283 >= __pb)
                {
                  uint64_t v302 = v283 - v284;
                  unint64_t v303 = v302 + 1;
                  if ((unint64_t)(v302 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(__pb - (void)v284) >> 2 > v303) {
                    unint64_t v303 = (uint64_t)(__pb - (void)v284) >> 2;
                  }
                  if (__pb - (unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v304 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v304 = v303;
                  }
                  if (v304) {
                    unint64_t v304 = (unint64_t)sub_25B3FCAD4(v304);
                  }
                  else {
                    uint64_t v305 = 0;
                  }
                  float v306 = (float32x2_t *)(v304 + 8 * v302);
                  *float v306 = v301;
                  float32x4_t v307 = v306 + 1;
                  while (v283 != v284)
                  {
                    float32x2_t v308 = v283[-1];
                    --v283;
                    v306[-1] = v308;
                    --v306;
                  }
                  unint64_t __pb = v304 + 8 * v305;
                  if (v284) {
                    operator delete(v284);
                  }
                  unint64_t v283 = v307;
                  uint64_t v284 = v306;
                  int v32 = (uint64_t *)(a1 + 56);
                }
                else
                {
                  *v283++ = v301;
                }
              }
            }
          }
        }
        ++v285;
        float32x4_t v282 = *(float32x2_t **)(a1 + 56);
        uint64_t v309 = *(void *)(a1 + 64);
      }
      while (0x2E8BA2E8BA2E8BA3 * ((v309 - (uint64_t)v282) >> 4) > v285);
      uint64_t v310 = (char *)v283 - (char *)v284;
      if (v283 != v284)
      {
        uint64_t v311 = 0;
        *(_OWORD *)float32x4_t src = *(_OWORD *)v286->f32;
        uint64_t v312 = v310 >> 3;
        if ((unint64_t)(v310 >> 3) <= 2) {
          uint64_t v312 = 2;
        }
        uint64_t v313 = v312 - 1;
        float32x4_t v314 = (_DWORD *)v645;
        char v315 = 1;
        uint64_t v316 = v309;
        do
        {
          char v317 = v315;
          if (v314[2 * v311] == 1 && v314[2 * v311 + 1] == 3)
          {
            float32x2_t v318 = v286[v311];
            float32x2_t v319 = *v284;
            int32x2_t v320 = (int32x2_t)vsub_f32(v318, *v284);
            int32x2_t v321 = (int32x2_t)vmul_f32((float32x2_t)v320, (float32x2_t)v320);
            *(float *)v321.i32 = sqrtf(vaddv_f32((float32x2_t)v321));
            float v322 = v284 + 1;
            uint64_t v323 = v313;
            if ((unint64_t)v310 >= 9)
            {
              do
              {
                float32x2_t v324 = *v322++;
                float32x2_t v325 = vsub_f32(v318, v324);
                float32x2_t v326 = vmul_f32(v325, v325);
                v326.f32[0] = sqrtf(vaddv_f32(v326));
                float32x2_t v319 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)v321, v326), 0), (int8x8_t)v324, (int8x8_t)v319);
                if (*(float *)v321.i32 > v326.f32[0]) {
                  *(float *)v321.i32 = v326.f32[0];
                }
                --v323;
              }
              while (v323);
              int32x2_t v320 = (int32x2_t)vsub_f32(v318, v319);
              int32x2_t v321 = (int32x2_t)vmul_f32((float32x2_t)v320, (float32x2_t)v320);
              *(float *)v321.i32 = sqrtf(vaddv_f32((float32x2_t)v321));
            }
            if (*(float *)v321.i32 <= 0.2) {
              float32x2_t v327 = vmul_f32(vadd_f32(v318, v319), (float32x2_t)0x3F0000003F000000);
            }
            else {
              float32x2_t v327 = vmla_f32(v319, v278, vdiv_f32((float32x2_t)v320, (float32x2_t)vdup_lane_s32(v321, 0)));
            }
            uint64_t v328 = (uint64_t)v282;
            if ((float32x2_t *)v316 != v282)
            {
              unint64_t v329 = 0;
              int32x2_t v330 = (int32x2_t)vsub_f32(v327, *(float32x2_t *)&v619);
              *(float *)v320.i32 = -*(float *)&v330.i32[1];
              float32x2_t v331 = (float32x2_t)vzip1_s32(v320, v330);
              float32x2_t v332 = v282 + 3;
              uint64_t v206 = v316;
              do
              {
                if (v287 == v329)
                {
                  unint64_t v333 = 0x2E8BA2E8BA2E8BA3 * ((v206 - (uint64_t)v282) >> 4);
                  uint64_t v328 = v316;
                }
                else
                {
                  float32x2_t v334 = v332[-1];
                  float32x2_t v335 = vsub_f32(*v332, v334);
                  int32x2_t v336 = (int32x2_t)vmul_f32(v335, v331);
                  unint64_t v333 = 0x2E8BA2E8BA2E8BA3 * ((v309 - (uint64_t)v282) >> 4);
                  uint64_t v328 = v309;
                  uint64_t v206 = v309;
                  if (vaddv_f32((float32x2_t)v336) != 0.0)
                  {
                    int32x2_t v337 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v619, v334), v331);
                    float32x2_t v338 = vmla_n_f32(v334, v335, vdiv_f32(vadd_f32((float32x2_t)v337, (float32x2_t)vdup_lane_s32(v337, 1)), vadd_f32((float32x2_t)v336, (float32x2_t)vdup_lane_s32(v336, 1))).f32[0]);
                    unint64_t v333 = 0x2E8BA2E8BA2E8BA3 * ((v309 - (uint64_t)v282) >> 4);
                    uint64_t v328 = v309;
                    uint64_t v206 = v309;
                    if (vaddv_f32(vmul_f32(vsub_f32(v338, v334), vsub_f32(v338, *v332))) <= -0.001)
                    {
                      unint64_t v333 = 0x2E8BA2E8BA2E8BA3 * ((v309 - (uint64_t)v282) >> 4);
                      uint64_t v328 = v309;
                      uint64_t v206 = v309;
                      if (vaddv_f32(vmul_f32(vsub_f32(v338, *(float32x2_t *)&v619), vsub_f32(v338, v327))) <= -0.001)
                      {
                        *(float32x2_t *)&src[8 * v311] = v319;
                        goto LABEL_331;
                      }
                    }
                  }
                }
                ++v329;
                v332 += 22;
                uint64_t v316 = v328;
              }
              while (v333 > v329);
            }
          }
          else
          {
LABEL_331:
            uint64_t v328 = v316;
          }
          char v315 = 0;
          uint64_t v316 = v328;
          uint64_t v311 = 1;
        }
        while ((v317 & 1) != 0);
        float32x2_t v339 = vsub_f32(*(float32x2_t *)src, *(float32x2_t *)&src[8]);
        v339.f32[0] = sqrtf(vaddv_f32(vmul_f32(v339, v339)));
        BOOL v340 = v339.f32[0] <= 0.2;
        if (v339.f32[0] <= 0.2)
        {
          uint64_t v341 = 0;
          uint64_t v342 = 0;
          if (v284) {
            goto LABEL_344;
          }
        }
        else
        {
          long long v350 = (long long *)sub_25B3FFAEC(1uLL);
          uint64_t v341 = v350;
          *long long v350 = *(_OWORD *)src;
          uint64_t v342 = v350 + 1;
          if (v284) {
            goto LABEL_344;
          }
        }
        goto LABEL_345;
      }
    }
    float32x4_t v314 = (_DWORD *)v645;
    if (*(_DWORD *)v645 == 1 && *(_DWORD *)(v645 + 4) == 3 && *(_DWORD *)(v645 + 8) == 1)
    {
      uint64_t v341 = 0;
      uint64_t v342 = 0;
      BOOL v340 = *(_DWORD *)(v645 + 12) == 3;
    }
    else
    {
      uint64_t v341 = 0;
      uint64_t v342 = 0;
      BOOL v340 = 0;
    }
    uint64_t v284 = v283;
    if (v283)
    {
LABEL_344:
      operator delete(v284);
      float32x4_t v314 = (_DWORD *)v645;
    }
LABEL_345:
    if (v314)
    {
      *((void *)&v645 + 1) = v314;
      operator delete(v314);
    }
    if (!v340)
    {
      if (v342 == v341)
      {
        if (!v341)
        {
LABEL_358:
          sub_25B47C6E4((uint64_t)src, *v32 + 176 * *(int *)&v209[4 * v277], v206);
          uint64_t v352 = *((void *)&v643 + 1);
          if (*((void *)&v643 + 1) >= v644)
          {
            uint64_t v353 = sub_25B47C818((uint64_t *)&v643, (uint64_t)src, v351);
          }
          else
          {
            sub_25B47C6E4(*((uint64_t *)&v643 + 1), (uint64_t)src, v351);
            uint64_t v353 = v352 + 176;
          }
          *((void *)&v643 + 1) = v353;
          sub_25B3F5FE8((uint64_t)src);
          goto LABEL_362;
        }
      }
      else
      {
        uint64_t v344 = *v32 + 176 * *(int *)&v209[4 * v277];
        long long v345 = *v341;
        *(_OWORD *)(v344 + 16) = *v341;
        *(void *)&long long v345 = *(void *)(v344 + 16);
        *(void *)&long long v281 = *(void *)(v344 + 24);
        long long v346 = v345;
        DWORD2(v346) = *(_DWORD *)(v344 + 64);
        long long v347 = v281;
        DWORD2(v347) = *(_DWORD *)(v344 + 68);
        DWORD2(v345) = DWORD2(v347);
        DWORD2(v281) = DWORD2(v346);
        *(_OWORD *)(v344 + 32) = v346;
        *(_OWORD *)(v344 + 48) = v347;
        uint64_t v348 = *(void *)(v344 + 8);
        *(_OWORD *)float32x4_t src = v345;
        *(_OWORD *)&src[16] = v347;
        long long v638 = v281;
        *(_OWORD *)v639 = v346;
        if (v348) {
          objc_copyStruct((void *)(v348 + 272), src, 64, 1, 0);
        }
        long long v349 = (void *)(*v32 + 176 * *(int *)&v209[4 * v277] + 128);
        *((_DWORD *)sub_25B4A2E18((uint64_t **)&v634, v349, (uint64_t)v349) + 14) = 1;
      }
      operator delete(v341);
      goto LABEL_358;
    }
    uint64_t v343 = (void *)(*v32 + 176 * *(int *)&v209[4 * v277] + 128);
    *((_DWORD *)sub_25B4A2E18((uint64_t **)&v634, v343, (uint64_t)v343) + 14) = 0;
    if (v341) {
      operator delete(v341);
    }
LABEL_362:
    ++v277;
    uint64_t v276 = v630;
  }
  while (v277 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v630 + 1) - v630) >> 3));
  int v208 = *(float32x2_t **)(a1 + 56);
  v213 = *(float32x2_t **)(a1 + 64);
LABEL_364:
  if (v213 != v208)
  {
    unint64_t v354 = v213 - 22;
    uint64_t v355 = v213 - 22;
    unint64_t v356 = v213 - 22;
    do
    {
      uint64_t v357 = (void (**)(float32x2_t *))*v356;
      v356 -= 22;
      (*v357)(v355);
      v354 -= 22;
      BOOL v60 = v355 == v208;
      uint64_t v355 = v356;
    }
    while (!v60);
  }
  *(void *)(a1 + 64) = v208;
  uint64_t v359 = *((void *)&v643 + 1);
  for (uint64_t j = v643; j != v359; j += 176)
  {
    sub_25B47C6E4((uint64_t)src, j, v206);
    unint64_t v361 = *(void *)(a1 + 64);
    if (v361 >= *(void *)(a1 + 72))
    {
      uint64_t v362 = sub_25B47C818(v32, (uint64_t)src, v360);
      uint64_t v363 = a1;
    }
    else
    {
      sub_25B47C6E4(*(void *)(a1 + 64), (uint64_t)src, v360);
      uint64_t v362 = v361 + 176;
      uint64_t v363 = a1;
      *(void *)(a1 + 64) = v361 + 176;
    }
    *(void *)(v363 + 64) = v362;
    sub_25B3F5FE8((uint64_t)src);
  }
  *(void *)float32x4_t src = &v643;
  sub_25B3F5F28((void ***)src);
  *(void *)float32x4_t src = &v630;
  sub_25B413BE8((void ***)src);
  if (v209) {
    operator delete(v209);
  }
  unint64_t v364 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4);
  LODWORD(v630) = 1;
  sub_25B40FF0C(src, v364, &v630);
  v366 = *(_DWORD **)src;
  uint64_t v620 = *(void *)(a1 + 80);
  uint64_t v367 = *(void *)(a1 + 88) - v620;
  if (!v367) {
    goto LABEL_434;
  }
  __pc = (void **)(a1 + 80);
  uint64_t v368 = 0;
  char v369 = 0;
  unint64_t v370 = v367 / 176;
  uint64_t v371 = v634;
  if (v370 <= 1) {
    uint64_t v372 = 1;
  }
  else {
    uint64_t v372 = v370;
  }
  while (2)
  {
    while (v371 == v635)
    {
LABEL_404:
      if (++v368 == v372)
      {
        if (v369) {
          goto LABEL_409;
        }
        goto LABEL_434;
      }
    }
    uint64_t v373 = v620 + 176 * v368;
    v374 = (const void **)(v373 + 152);
    uint64_t v375 = *(unsigned __int8 *)(v373 + 175);
    size_t v376 = *(void *)(v373 + 160);
    if ((v375 & 0x80u) == 0) {
      int v377 = (char *)*(unsigned __int8 *)(v373 + 175);
    }
    else {
      int v377 = *(char **)(v373 + 160);
    }
    float32x4_t v378 = v371;
    while (2)
    {
      float32x4_t v379 = (char *)*((unsigned __int8 *)v378 + 55);
      int v380 = (char)v379;
      if ((char)v379 < 0) {
        float32x4_t v379 = v378[5];
      }
      if (v377 != v379) {
        goto LABEL_398;
      }
      if (v380 >= 0) {
        float32x2_t v381 = (char *)(v378 + 4);
      }
      else {
        float32x2_t v381 = v378[4];
      }
      if ((v375 & 0x80) == 0)
      {
        if (!v375) {
          break;
        }
        long long v382 = v374;
        uint64_t v383 = v375;
        while (*(unsigned __int8 *)v382 == *v381)
        {
          long long v382 = (const void **)((char *)v382 + 1);
          ++v381;
          if (!--v383) {
            goto LABEL_406;
          }
        }
        goto LABEL_398;
      }
      if (memcmp(*v374, v381, v376))
      {
LABEL_398:
        float32x2_t v384 = v378[1];
        if (v384)
        {
          do
          {
            long long v385 = (char **)v384;
            float32x2_t v384 = *(char **)v384;
          }
          while (v384);
        }
        else
        {
          do
          {
            long long v385 = (char **)v378[2];
            BOOL v60 = *v385 == (char *)v378;
            float32x4_t v378 = v385;
          }
          while (!v60);
        }
        float32x4_t v378 = v385;
        if (v385 == v635) {
          goto LABEL_404;
        }
        continue;
      }
      break;
    }
LABEL_406:
    v366[v368++] = 0;
    char v369 = 1;
    if (v368 != v372) {
      continue;
    }
    break;
  }
LABEL_409:
  long long v630 = 0uLL;
  *(void *)&long long v631 = 0;
  uint64_t v386 = *(void *)&src[8];
  uint64_t v387 = *(void *)src;
  if (*(void *)&src[8] == *(void *)src)
  {
    unint64_t v389 = 0;
  }
  else
  {
    uint64_t v388 = 0;
    unint64_t v389 = 0;
    unint64_t v390 = 0;
    do
    {
      if (*(_DWORD *)(v387 + 4 * v390))
      {
        uint64_t v391 = (uint64_t)*__pc + v388;
        if (v389 >= (unint64_t)v631)
        {
          unint64_t v389 = sub_25B47C818((uint64_t *)&v630, v391, v365);
        }
        else
        {
          sub_25B47C6E4(v389, v391, v365);
          v389 += 176;
        }
        *((void *)&v630 + 1) = v389;
        uint64_t v386 = *(void *)&src[8];
        uint64_t v387 = *(void *)src;
      }
      ++v390;
      v388 += 176;
    }
    while (v390 < (v386 - v387) >> 2);
  }
  if (__pc != (void **)&v630)
  {
    uint64_t v392 = v630;
    unint64_t v393 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v389 - v630) >> 4);
    uint64_t v394 = *(void *)(a1 + 80);
    if (0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 96) - v394) >> 4) >= v393)
    {
      if (0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 88) - v394) >> 4) < v393)
      {
        uint64_t v400 = v630 + 16 * ((*(void *)(a1 + 88) - v394) >> 4);
        sub_25B487EC4(v630, v400, v394);
        uint64_t v399 = sub_25B487F74(v400, v389, *(void *)(a1 + 88));
        goto LABEL_431;
      }
      uint64_t v401 = sub_25B487EC4(v630, v389, v394);
      uint64_t v584 = *(void *)(a1 + 88);
      if (v584 != v401)
      {
        uint64_t v585 = v584 - 176;
        v586 = (void (***)(void))(v584 - 176);
        v587 = (void (***)(void))(v584 - 176);
        do
        {
          v588 = *v587;
          v587 -= 22;
          (*v588)(v586);
          v585 -= 176;
          BOOL v60 = v586 == (void (***)(void))v401;
          v586 = v587;
        }
        while (!v60);
      }
    }
    else
    {
      sub_25B47D698(__pc);
      if (v393 > 0x1745D1745D1745DLL) {
        goto LABEL_719;
      }
      unint64_t v395 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 80)) >> 4);
      if (v395 <= v393) {
        unint64_t v395 = v393;
      }
      unint64_t v396 = (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 80)) >> 4)) >= 0xBA2E8BA2E8BA2ELL
           ? 0x1745D1745D1745DLL
           : v395;
      if (v396 > 0x1745D1745D1745DLL) {
LABEL_719:
      }
        sub_25B3FBC4C();
      v397 = (char *)sub_25B47C9B4(v396);
      *(void *)(a1 + 80) = v397;
      *(void *)(a1 + 88) = v397;
      *(void *)(a1 + 96) = &v397[176 * v398];
      uint64_t v399 = sub_25B487F74(v392, v389, (uint64_t)v397);
LABEL_431:
      uint64_t v401 = v399;
    }
    *(void *)(a1 + 88) = v401;
  }
  *(void *)&long long v643 = &v630;
  sub_25B3F5F28((void ***)&v643);
  v366 = *(_DWORD **)src;
LABEL_434:
  if (v366)
  {
    *(void *)&src[8] = v366;
    operator delete(v366);
  }
  sub_25B400248(v635[0]);
  if (v636[0]) {
    operator delete(v636[0]);
  }

  uint64_t v402 = *(void *)(a1 + 800);
  uint64_t v403 = *(void *)(a1 + 792);
  while (v402 != v403)
  {
    unsigned __int8 v404 = *(void **)(v402 - 8);
    v402 -= 8;
  }
  *(void *)(a1 + 800) = v403;
  if (*(unsigned char *)(a1 + 32)) {
    goto LABEL_689;
  }
  std::string v405 = *(float32x4_t **)(a1 + 768);
  v594 = *(float32x4_t **)(a1 + 776);
  if (v405 == v594) {
    goto LABEL_689;
  }
  while (2)
  {
    if (*(_DWORD *)(a1 + 876))
    {
      float v406 = *(float *)(a1 + 880);
      float v407 = v405[14].f32[0];
    }
    else
    {
      float v407 = v405[14].f32[0];
      float v406 = (float)(*(float *)(a1 + 884) * 360.0) / (float)(v407 * 6.2832);
    }
    float v408 = v405[14].f32[1];
    __float2 v409 = __sincosf_stret((float)(v408 / 180.0) * 3.1416);
    *(float *)&unint64_t v410 = v407 * v409.__cosval;
    *((float *)&v410 + 1) = v407 * v409.__sinval;
    float32x4_t v411 = v405[13];
    v411.i32[2] = 0;
    float32x4_t v621 = v411;
    float32x4_t v600 = vaddq_f32(v411, (float32x4_t)v410);
    float v412 = v405[14].f32[2];
    __float2 v413 = __sincosf_stret((float)(v412 / 180.0) * 3.1416);
    *(float *)&unint64_t v414 = v407 * v413.__cosval;
    *((float *)&v414 + 1) = v407 * v413.__sinval;
    float32x4_t v598 = vaddq_f32(v621, (float32x4_t)v414);
    v611 = v405;
    if (!v405[15].i8[0]
      || (float32x4_t v415 = vsubq_f32(v600, v405[16]),
          float v416 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v415, v415))),
          __int32 v417 = v405[19].i32[2],
          float v418 = *(float *)(a1 + 888),
          v417 == 1)
      && v416 < v418)
    {
      long long v630 = 0uLL;
      *(void *)&long long v631 = 0;
      float v419 = v406 * 0.5;
      int v420 = (int)(float)(v406 * 10.0);
      int v595 = 1;
      goto LABEL_450;
    }
    float32x4_t v437 = vsubq_f32(v598, v405[17]);
    float v438 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v437, v437)));
    BOOL v440 = v438 >= v418 || v417 != -1;
    int v441 = v440 && v416 < v438;
    if (v441) {
      int v442 = 1;
    }
    else {
      int v442 = -1;
    }
    int v595 = v442;
    long long v630 = 0uLL;
    *(void *)&long long v631 = 0;
    float v419 = v406 * 0.5;
    int v420 = (int)(float)(v406 * 10.0);
    if (v441 == 1)
    {
LABEL_450:
      int v421 = (int)(float)(v408 * 10.0);
      int v422 = (int)(float)((float)(v412 - v419) * 10.0);
      if (v421 >= v422)
      {
        v424 = 0;
        v436 = 0;
        unint64_t v423 = 0;
      }
      else
      {
        unint64_t v423 = 0;
        v424 = 0;
        std::string v425 = 0;
        do
        {
          float v426 = (float)v421 / 10.0;
          if ((unint64_t)v424 >= v423)
          {
            uint64_t v427 = v424 - v425;
            unint64_t v428 = v427 + 1;
            if ((unint64_t)(v427 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v423 - (void)v425) >> 1 > v428) {
              unint64_t v428 = (uint64_t)(v423 - (void)v425) >> 1;
            }
            if (v423 - (unint64_t)v425 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v429 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v429 = v428;
            }
            if (v429) {
              unint64_t v429 = (unint64_t)sub_25B3FBC64(v429);
            }
            else {
              uint64_t v430 = 0;
            }
            int v431 = (float *)(v429 + 4 * v427);
            *int v431 = v426;
            uint64_t v432 = v431 + 1;
            while (v424 != v425)
            {
              int v433 = *((_DWORD *)v424-- - 1);
              *((_DWORD *)v431-- - 1) = v433;
            }
            unint64_t v423 = v429 + 4 * v430;
            if (v425) {
              operator delete(v425);
            }
            std::string v425 = v431;
            v424 = v432;
          }
          else
          {
            *v424++ = v426;
          }
          v421 += v420;
        }
        while (v421 < v422);
        if ((unint64_t)v424 < v423)
        {
          __int32 v434 = v611[14].i32[2];
          goto LABEL_472;
        }
        v436 = v425;
      }
      uint64_t v454 = v424 - v436;
      unint64_t v455 = v454 + 1;
      if ((unint64_t)(v454 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v423 - (void)v436) >> 1 > v455) {
        unint64_t v455 = (uint64_t)(v423 - (void)v436) >> 1;
      }
      if (v423 - (unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v456 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v456 = v455;
      }
      if (v456) {
        unint64_t v456 = (unint64_t)sub_25B3FBC64(v456);
      }
      std::string v425 = (float *)(v456 + 4 * v454);
      *std::string v425 = v611[14].f32[2];
      uint64_t v435 = v425 + 1;
      while (v424 != v436)
      {
        int v457 = *((_DWORD *)v424-- - 1);
        *((_DWORD *)v425-- - 1) = v457;
      }
      goto LABEL_531;
    }
    int v443 = (int)(float)(v412 * 10.0);
    int v444 = (int)(float)((float)(v419 + v408) * 10.0);
    if (v443 <= v444)
    {
      v424 = 0;
      v436 = 0;
      unint64_t v445 = 0;
LABEL_520:
      uint64_t v458 = v424 - v436;
      unint64_t v459 = v458 + 1;
      if ((unint64_t)(v458 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v445 - (void)v436) >> 1 > v459) {
        unint64_t v459 = (uint64_t)(v445 - (void)v436) >> 1;
      }
      if (v445 - (unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v460 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v460 = v459;
      }
      if (v460) {
        unint64_t v460 = (unint64_t)sub_25B3FBC64(v460);
      }
      std::string v425 = (float *)(v460 + 4 * v458);
      *std::string v425 = v611[14].f32[1];
      uint64_t v435 = v425 + 1;
      while (v424 != v436)
      {
        int v461 = *((_DWORD *)v424-- - 1);
        *((_DWORD *)v425-- - 1) = v461;
      }
LABEL_531:
      if (v436) {
        operator delete(v436);
      }
      goto LABEL_533;
    }
    unint64_t v445 = 0;
    v424 = 0;
    std::string v425 = 0;
    do
    {
      float v446 = (float)v443 / 10.0;
      if ((unint64_t)v424 >= v445)
      {
        uint64_t v447 = v424 - v425;
        unint64_t v448 = v447 + 1;
        if ((unint64_t)(v447 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v445 - (void)v425) >> 1 > v448) {
          unint64_t v448 = (uint64_t)(v445 - (void)v425) >> 1;
        }
        if (v445 - (unint64_t)v425 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v449 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v449 = v448;
        }
        if (v449) {
          unint64_t v449 = (unint64_t)sub_25B3FBC64(v449);
        }
        else {
          uint64_t v450 = 0;
        }
        v451 = (float *)(v449 + 4 * v447);
        float *v451 = v446;
        v452 = v451 + 1;
        while (v424 != v425)
        {
          int v453 = *((_DWORD *)v424-- - 1);
          *((_DWORD *)v451-- - 1) = v453;
        }
        unint64_t v445 = v449 + 4 * v450;
        if (v425) {
          operator delete(v425);
        }
        std::string v425 = v451;
        v424 = v452;
      }
      else
      {
        *v424++ = v446;
      }
      v443 -= v420;
    }
    while (v443 > v444);
    if ((unint64_t)v424 >= v445)
    {
      v436 = v425;
      goto LABEL_520;
    }
    __int32 v434 = v611[14].i32[1];
LABEL_472:
    *(_DWORD *)v424 = v434;
    uint64_t v435 = v424 + 1;
LABEL_533:
    uint64_t v462 = (char *)v435 - (char *)v425;
    if (v435 == v425)
    {
      v474 = 0;
      v465 = 0;
    }
    else
    {
      unint64_t v463 = 0;
      v464 = 0;
      v465 = 0;
      uint64_t v466 = 0;
      unint64_t v467 = v462 >> 2;
      if (v467 <= 1) {
        uint64_t v468 = 1;
      }
      else {
        uint64_t v468 = v467;
      }
      do
      {
        float v469 = v611[14].f32[0];
        __float2 v470 = __sincosf_stret((float)(v425[v466] / 180.0) * 3.1416);
        *(float *)&unint64_t v471 = v469 * v470.__cosval;
        *((float *)&v471 + 1) = v469 * v470.__sinval;
        float32x4_t v472 = v611[13];
        v472.i32[2] = 0;
        float32x4_t v473 = vaddq_f32(v472, (float32x4_t)v471);
        if ((unint64_t)v464 >= v463)
        {
          float32x4_t v622 = v473;
          uint64_t v475 = v464 - v465;
          unint64_t v476 = v475 + 1;
          if ((unint64_t)(v475 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v463 - (void)v465) >> 3 > v476) {
            unint64_t v476 = (uint64_t)(v463 - (void)v465) >> 3;
          }
          if (v463 - (unint64_t)v465 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v477 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v477 = v476;
          }
          if (v477) {
            unint64_t v477 = (unint64_t)sub_25B3FFAEC(v477);
          }
          else {
            uint64_t v478 = 0;
          }
          v479 = (float32x4_t *)(v477 + 16 * v475);
          float32x4_t *v479 = v622;
          v474 = v479 + 1;
          if (v464 != v465)
          {
            do
            {
              float32x4_t v480 = v464[-1];
              --v464;
              v479[-1] = v480;
              --v479;
            }
            while (v464 != v465);
            v464 = v465;
          }
          v465 = v479;
          unint64_t v463 = v477 + 16 * v478;
          if (v464) {
            operator delete(v464);
          }
        }
        else
        {
          float32x4_t *v464 = v473;
          v474 = v464 + 1;
        }
        ++v466;
        v464 = v474;
      }
      while (v466 != v468);
    }
    uint64_t v481 = (char *)v474 - (char *)v465;
    if ((unint64_t)((char *)v474 - (char *)v465) >= 0x20)
    {
      v483 = 0;
      v484 = 0;
      v610 = 0;
      unint64_t v485 = v481 >> 4;
      if (v485 <= 2) {
        uint64_t v486 = 2;
      }
      else {
        uint64_t v486 = v485;
      }
      for (uint64_t k = 1; k != v486; ++k)
      {
        v488 = (long long *)&v465[k];
        long long v490 = *(v488 - 1);
        long long v489 = *v488;
        if (v484 >= v483)
        {
          uint64_t v491 = (v484 - v610) >> 5;
          unint64_t v492 = v491 + 1;
          if ((unint64_t)(v491 + 1) >> 59) {
            sub_25B3FBC4C();
          }
          if ((v483 - v610) >> 4 > v492) {
            unint64_t v492 = (v483 - v610) >> 4;
          }
          if ((unint64_t)(v483 - v610) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v493 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v493 = v492;
          }
          if (v493)
          {
            long long v604 = v490;
            long long v623 = v489;
            if (v493 >> 59) {
              sub_25B3FA70C();
            }
            v494 = (char *)operator new(32 * v493);
            long long v489 = v623;
            long long v490 = v604;
          }
          else
          {
            v494 = 0;
          }
          v495 = &v494[32 * v491];
          *(_OWORD *)v495 = v490;
          *((_OWORD *)v495 + 1) = v489;
          if (v484 == v610)
          {
            v610 = &v494[32 * v491];
          }
          else
          {
            v496 = &v494[32 * v491];
            do
            {
              long long v497 = *((_OWORD *)v484 - 1);
              *((_OWORD *)v496 - 2) = *((_OWORD *)v484 - 2);
              *((_OWORD *)v496 - 1) = v497;
              v496 -= 32;
              v484 -= 32;
            }
            while (v484 != v610);
            v484 = v610;
            v610 = v496;
          }
          v483 = &v494[32 * v493];
          v482 = v495 + 32;
          if (v484) {
            operator delete(v484);
          }
        }
        else
        {
          *(_OWORD *)v484 = v490;
          *((_OWORD *)v484 + 1) = v489;
          v482 = v484 + 32;
        }
        v484 = v482;
      }
    }
    else
    {
      v482 = 0;
      v610 = 0;
    }
    if (v465) {
      operator delete(v465);
    }
    if (v425) {
      operator delete(v425);
    }
    for (uint64_t m = v610; m != v482; m += 32)
    {
      v499 = objc_alloc_init(RS3DCurvedSurface);
      uint64_t v500 = (uint64_t)v499;
      if (v499) {
        v499->super.type = 0;
      }
      id v501 = objc_alloc_init(MEMORY[0x263F08C38]);
      sub_25B4FD4F4(v500, v501);

      v504 = objc_msgSend_identifier((void *)v611->i64[1], v502, v503);
      sub_25B4FD504(v500, v504);

      objc_msgSend_confidence((void *)v611->i64[1], v505, v506);
      if (v500) {
        *(_DWORD *)(v500 + 108) = v507;
      }
      uint64_t v508 = v611->i64[1];
      if (v508) {
        LODWORD(v508) = *(_DWORD *)(v508 + 116);
      }
      if (v500)
      {
        *(_DWORD *)(v500 + 116) = v508;
        *(_DWORD *)(v500 + 120) = -1;
        *(_DWORD *)(v500 + 336) = v611[14].i32[0];
        *(void *)(v500 + 360) = v611[13].i64[0];
        *(_DWORD *)(v500 + 340) = v611[14].i32[1];
        *(_DWORD *)(v500 + 344) = v611[14].i32[2];
      }
      float v510 = v611[4].f32[0];
      float v509 = v611[4].f32[1];
      if (v509 >= v510) {
        __int32 v511 = v611[4].i32[1];
      }
      else {
        __int32 v511 = v611[4].i32[0];
      }
      long long v512 = *(_OWORD *)m;
      long long v513 = *((_OWORD *)m + 1);
      long long v514 = *(_OWORD *)m;
      DWORD2(v514) = v511;
      if (v510 < v509) {
        float v509 = v611[4].f32[0];
      }
      long long v515 = *((_OWORD *)m + 1);
      DWORD2(v515) = v511;
      *((float *)&v513 + 2) = v509;
      *((float *)&v512 + 2) = v509;
      *(_OWORD *)float32x4_t src = v514;
      *(_OWORD *)&src[16] = v515;
      long long v638 = v513;
      *(_OWORD *)v639 = v512;
      if (v500) {
        objc_copyStruct((void *)(v500 + 272), src, 64, 1, 0);
      }
      v516 = (void *)*((void *)&v630 + 1);
      if (*((void *)&v630 + 1) >= (unint64_t)v631)
      {
        uint64_t v518 = (uint64_t)(*((void *)&v630 + 1) - v630) >> 3;
        if ((unint64_t)(v518 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        unint64_t v519 = (uint64_t)(v631 - v630) >> 2;
        if (v519 <= v518 + 1) {
          unint64_t v519 = v518 + 1;
        }
        if ((void)v631 - (void)v630 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v520 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v520 = v519;
        }
        *(void *)&long long v638 = &v631;
        if (v520) {
          unint64_t v520 = (unint64_t)sub_25B3FCAD4(v520);
        }
        else {
          uint64_t v521 = 0;
        }
        v522 = (void *)(v520 + 8 * v518);
        unint64_t v523 = v520 + 8 * v521;
        *(void *)&src[24] = v523;
        void *v522 = (id)v500;
        v517 = v522 + 1;
        *(void *)&src[16] = v522 + 1;
        v524 = (void *)*((void *)&v630 + 1);
        v525 = (void *)v630;
        if (*((void *)&v630 + 1) == (void)v630)
        {
          int64x2_t v527 = vdupq_n_s64(*((unint64_t *)&v630 + 1));
        }
        else
        {
          do
          {
            uint64_t v526 = *--v524;
            void *v524 = 0;
            *--v522 = v526;
          }
          while (v524 != v525);
          int64x2_t v527 = (int64x2_t)v630;
          unint64_t v523 = *(void *)&src[24];
          v517 = *(void **)&src[16];
        }
        *(void *)&long long v630 = v522;
        *((void *)&v630 + 1) = v517;
        *(int64x2_t *)&src[8] = v527;
        uint64_t v528 = v631;
        *(void *)&long long v631 = v523;
        *(void *)&src[24] = v528;
        *(void *)float32x4_t src = v527.i64[0];
        sub_25B47C960((uint64_t)src);
      }
      else
      {
        void *v516 = (id)v500;
        v517 = v516 + 1;
      }
      *((void *)&v630 + 1) = v517;
    }
    v529 = (id *)v611[18].i64[0];
    v605 = (id *)v611[18].i64[1];
    if (v605 == v529)
    {
      v529 = (id *)v611[18].i64[1];
      goto LABEL_681;
    }
    if (*((void *)&v630 + 1) == (void)v630)
    {
      v576 = (id *)v611[18].i64[1];
      goto LABEL_678;
    }
    while (2)
    {
      id v532 = *v529;
      v533 = (id *)*((void *)&v630 + 1);
      v534 = (id *)v630;
      if ((void)v630 == *((void *)&v630 + 1))
      {
        v537 = 0;
        v566 = 0;
        goto LABEL_672;
      }
      unint64_t v535 = 0;
      v536 = 0;
      v537 = 0;
      while (2)
      {
        id v538 = *v534;
        objc_msgSend_quad(v538, v539, v540);
        uint64_t v624 = v541;
        objc_msgSend_quad(v538, v542, v543);
        *(void *)&long long v544 = v624;
        *((void *)&v544 + 1) = v545;
        long long v643 = v544;
        objc_msgSend_quad(v532, v546, v547);
        uint64_t v625 = v548;
        objc_msgSend_quad(v532, v549, v550);
        *(void *)&long long v551 = v625;
        *((void *)&v551 + 1) = v552;
        long long v645 = v551;
        sub_25B4D4E4C((uint64_t)src, (float32x2_t *)&v643, (float32x2_t *)&v645, (float *)(a1 + 464));
        if (*((float *)&v638 + 1) <= *(float *)(a1 + 896)
          && ((float v553 = *(float *)(a1 + 900), *((float *)&v638 + 2) <= v553)
           || *((float *)&v638 + 2) >= (float)(180.0 - v553)))
        {
          if ((unint64_t)v536 >= v535)
          {
            uint64_t v561 = v536 - v537;
            unint64_t v562 = v561 + 1;
            if ((unint64_t)(v561 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v535 - (void)v537) >> 1 > v562) {
              unint64_t v562 = (uint64_t)(v535 - (void)v537) >> 1;
            }
            if (v535 - (unint64_t)v537 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v556 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v556 = v562;
            }
            if (v556) {
              unint64_t v556 = (unint64_t)sub_25B3FBC64(v556);
            }
            else {
              uint64_t v557 = 0;
            }
            v558 = (float *)(v556 + 4 * v561);
            float *v558 = *(float *)&src[24];
            v559 = v558 + 1;
            while (v536 != v537)
            {
              int v563 = *((_DWORD *)v536-- - 1);
              *((_DWORD *)v558-- - 1) = v563;
            }
            goto LABEL_642;
          }
          *v536++ = *(float *)&src[24];
        }
        else
        {
          if ((unint64_t)v536 < v535)
          {
            *v536++ = 0.0;
            goto LABEL_645;
          }
          uint64_t v554 = v536 - v537;
          unint64_t v555 = v554 + 1;
          if ((unint64_t)(v554 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v535 - (void)v537) >> 1 > v555) {
            unint64_t v555 = (uint64_t)(v535 - (void)v537) >> 1;
          }
          if (v535 - (unint64_t)v537 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v556 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v556 = v555;
          }
          if (v556) {
            unint64_t v556 = (unint64_t)sub_25B3FBC64(v556);
          }
          else {
            uint64_t v557 = 0;
          }
          v558 = (float *)(v556 + 4 * v554);
          float *v558 = 0.0;
          v559 = v558 + 1;
          while (v536 != v537)
          {
            int v560 = *((_DWORD *)v536-- - 1);
            *((_DWORD *)v558-- - 1) = v560;
          }
LABEL_642:
          unint64_t v535 = v556 + 4 * v557;
          if (v537) {
            operator delete(v537);
          }
          v537 = v558;
          v536 = v559;
        }
LABEL_645:
        if (v641)
        {
          v642 = v641;
          operator delete(v641);
        }
        if (v639[1])
        {
          v640 = v639[1];
          operator delete(v639[1]);
        }

        if (++v534 != v533) {
          continue;
        }
        break;
      }
      if (v537 == v536 || (v564 = v537 + 1, v537 + 1 == v536))
      {
        v566 = v537;
      }
      else
      {
        float v565 = *v537;
        v566 = v537;
        v567 = v537 + 1;
        do
        {
          float v568 = *v567++;
          float v569 = v568;
          if (v565 < v568)
          {
            float v565 = v569;
            v566 = v564;
          }
          v564 = v567;
        }
        while (v567 != v536);
      }
LABEL_672:
      uint64_t v570 = (char *)v566 - (char *)v537;
      if (*v566 >= *(float *)(a1 + 892))
      {
        v571 = objc_msgSend_identifier(v532, v530, v531);
        uint64_t v572 = v570 >> 2;
        sub_25B4FD4F4(*(void *)(v630 + 8 * v572), v571);

        v575 = objc_msgSend_parentIdentifier(v532, v573, v574);
        sub_25B4FD504(*(void *)(v630 + 8 * v572), v575);
      }
      operator delete(v537);

      if (++v529 != v605) {
        continue;
      }
      break;
    }
    v529 = (id *)v611[18].i64[0];
    v576 = (id *)v611[18].i64[1];
LABEL_678:
    if (v576 != v529)
    {
      v577 = v576;
      do
      {
        v578 = *--v577;
      }
      while (v577 != v529);
    }
LABEL_681:
    v611[18].i64[1] = (uint64_t)v529;
    v580 = (id *)*((void *)&v630 + 1);
    for (uint64_t n = (id *)v630; n != v580; ++n)
      sub_25B487D24((float32x4_t *)v611[18].i64, n);
    v611[16] = v600;
    v611[17] = v598;
    v611[15].i8[0] = 1;
    v611[19].i32[2] = v595;
    if (v610) {
      operator delete(v610);
    }
    *(void *)float32x4_t src = &v630;
    sub_25B3F6050((void ***)src);
    v581 = (id *)v611[18].i64[0];
    v582 = (id *)v611[18].i64[1];
    while (v581 != v582)
    {
      id v583 = *v581;
      *(void *)float32x4_t src = v583;
      sub_25B487D24((void *)(a1 + 792), (id *)src);

      ++v581;
    }
    std::string v405 = v611 + 20;
    if (&v611[20] != v594) {
      continue;
    }
    break;
  }
LABEL_689:
  if (v626[0]) {
    operator delete(v626[0]);
  }
  if (v627) {
    operator delete(v627);
  }
}

void sub_25B485064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  sub_25B3F5FE8((uint64_t)&a55);
  if (v56) {
    operator delete(v56);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }

  _Unwind_Resume(a1);
}

void sub_25B4853FC(uint64_t a1, uint64_t *a2, int32x2_t *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7)
{
  uint64_t v485 = *MEMORY[0x263EF8340];
  id v436 = a4;
  unint64_t v13 = a7;
  if (*(unsigned char *)(a6 + 137)) {
    goto LABEL_624;
  }
  std::string v425 = a3;
  uint64_t v427 = a5;
  uint64_t v432 = a6;
  uint64_t v451 = a1;
  unint64_t v429 = v13;
  if (v13)
  {
    uint64_t v16 = v13[1];
    uint64_t v17 = (v13[2] - v16) >> 4;
    uint64_t v462 = v16;
    uint64_t v463 = v17;
    uint64_t v18 = v13[4];
    uint64_t v19 = v13[5] - v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v462 = 0;
    uint64_t v463 = 0;
  }
  v461[0] = v18;
  v461[1] = v19 >> 4;
  BOOL v440 = a2;
  float32x2_t v20 = a2 + 4;
  uint64_t v21 = a2[4];
  unint64_t v423 = v20;
  uint64_t v22 = v20[1];
  if (v21 != v22)
  {
    do
    {
      double v23 = sub_25B3F6148((uint64_t)__src);
      float v24 = *(float *)(v21 + 64);
      float v25 = *(float *)(v21 + 68);
      objc_msgSend_confidence(*(void **)(v21 + 8), v26, v27, v23);
      float v29 = v28;
      unint64_t v30 = objc_opt_new();
      sub_25B493870((uint64_t)__src, (long long *)(v21 + 16), v30, 0, v24, v25, v29);

      unint64_t v32 = v440[2];
      if (v32 >= v440[3])
      {
        uint64_t v33 = sub_25B47C818(v440 + 1, (uint64_t)__src, v31);
        int v34 = v440;
      }
      else
      {
        sub_25B47C6E4(v440[2], (uint64_t)__src, v31);
        uint64_t v33 = v32 + 176;
        int v34 = v440;
        v440[2] = v32 + 176;
      }
      v34[2] = v33;
      sub_25B3F5FE8((uint64_t)__src);
      v21 += 176;
    }
    while (v21 != v22);
    uint64_t v35 = v440[4];
    for (uint64_t i = v440[5]; v35 != i; v35 += 176)
    {
      uint64_t v38 = (float32x2_t *)v440[1];
      uint64_t v37 = (float32x2_t *)v440[2];
      if (v38 != v37)
      {
        long long v39 = (_OWORD *)(v35 + 16);
        do
        {
          float32x2_t v40 = vsub_f32(v38[2], v38[3]);
          if (sqrtf(vaddv_f32(vmul_f32(v40, v40))) < 0.5)
          {
            sub_25B40E03C((float **)__p, (float32x2_t *)(v35 + 16), v38 + 2);
            unint64_t v41 = 0;
            float v42 = __p[0];
            float v43 = *(float *)__p[0];
            for (uint64_t j = 1; j != 4; ++j)
            {
              if (*((float *)__p[0] + j) < v43)
              {
                unint64_t v41 = j;
                float v43 = *((float *)__p[0] + j);
              }
            }
            if (v43 <= *(float *)(v451 + 492))
            {
              sub_25B477E0C((uint64_t)__src, (float32x2_t *)(v35 + 16), v38 + 2);
              if (*(float *)&__src[24] < *(float *)(v451 + 484)
                && *(float *)&__src[8] >= *(float *)(v451 + 476)
                && *(float *)&__src[20] < *(float *)(v451 + 472))
              {
                float32x2_t v45 = *(float32x2_t *)(v35 + 16);
                float32x2_t v46 = *(float32x2_t *)(v35 + 24);
                float32x2_t v47 = vsub_f32(v46, v45);
                float v48 = vaddv_f32(vmul_f32(vsub_f32(v38[((v41 & 1) == 0) + 2], v45), v47));
                float v49 = vaddv_f32(vmul_f32(v47, v47));
                if (v49 < 0.000001) {
                  float v49 = 0.000001;
                }
                float32x2_t v50 = vmla_n_f32(v45, v47, v48 / v49);
                if (vaddv_f32(vmul_f32(vsub_f32(v50, v45), vsub_f32(v50, v46))) <= 0.00001)
                {
                  float32x2_t v51 = vsub_f32(v50, *(float32x2_t *)((char *)v39 + 8 * (1 - (v41 >> 1))));
                  if (sqrtf(vaddv_f32(vmul_f32(v51, v51))) >= 0.5)
                  {
                    *(_OWORD *)__b = *v39;
                    *((void *)&v52 + 1) = *(void *)&__b[8];
                    *(float32x2_t *)&__b[8 * (v41 >> 1)] = v50;
                    *((void *)&v53 + 1) = *(void *)&__b[8];
                    _OWORD *v39 = *(_OWORD *)__b;
                    *(void *)&long long v53 = *(void *)(v35 + 16);
                    *(void *)&long long v52 = *(void *)(v35 + 24);
                    long long v54 = v53;
                    DWORD2(v54) = *(_DWORD *)(v35 + 64);
                    long long v55 = v52;
                    DWORD2(v55) = *(_DWORD *)(v35 + 68);
                    DWORD2(v53) = DWORD2(v55);
                    DWORD2(v52) = DWORD2(v54);
                    *(_OWORD *)(v35 + 32) = v54;
                    *(_OWORD *)(v35 + 48) = v55;
                    uint64_t v56 = *(void *)(v35 + 8);
                    src[0] = v53;
                    src[1] = v55;
                    src[2] = v52;
                    src[3] = v54;
                    if (v56) {
                      objc_copyStruct((void *)(v56 + 272), src, 64, 1, 0);
                    }
                  }
                }
              }
            }
            operator delete(v42);
          }
          v38 += 22;
        }
        while (v38 != v37);
      }
    }
  }
  *(unsigned char *)(v451 + 904) = 0;
  if (*(void *)(v451 + 768) != *(void *)(v451 + 776) || (v115 = v440[1], uint64_t v116 = v440[2], v115 == v116))
  {
LABEL_31:
    *(unsigned char *)(v451 + 904) = 1;
  }
  else
  {
    uint64_t v117 = v115 + 16;
    while (1)
    {
      objc_msgSend_confidence(*(void **)(v117 - 8), v14, v15);
      if (v118 >= *(float *)(v451 + 572) && (sub_25B47D97C(v16, v17, v117) & 1) != 0) {
        break;
      }
      uint64_t v119 = v117 + 160;
      v117 += 176;
      if (v119 == v116) {
        goto LABEL_31;
      }
    }
  }
  float v57 = &__src[16];
  for (uint64_t k = 8; k != 32; k += 8)
  {
    uint64_t v59 = *(void *)(v432 + k);
    *(v57 - 2) = 0;
    *(v57 - 1) = v59;
    void *v57 = 1;
    v57 += 3;
  }
  sub_25B436AEC(v432 + 8, (uint64_t)__src, 0, 1u, *(_DWORD *)(v432 + 8), 1);
  sub_25B459028((uint64_t)__p, v432, (uint64_t)__src);
  BOOL v60 = (void **)operator new(8uLL);
  const char *v60 = 0;
  float v446 = v60;
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  float32x2_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v471 = 0;
  __float2 v470 = 0;
  float32x4_t v472 = 0;
  do
  {
    if (*v60 == v64)
    {
      if ((unint64_t)v63 < v62)
      {
        *(void *)float32x2_t v63 = 1;
        float32x2_t v65 = v63 + 8;
LABEL_40:
        float32x2_t v66 = v65;
        goto LABEL_68;
      }
      uint64_t v67 = (v63 - v61) >> 3;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61)
      {
        float32x4_t v472 = (_OWORD *)v62;
        __float2 v470 = v61;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v62 - (void)v61) >> 2 > v68) {
        unint64_t v68 = (uint64_t)(v62 - (void)v61) >> 2;
      }
      if (v62 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v68;
      }
      if (v69) {
        unint64_t v69 = (unint64_t)sub_25B3FCAD4(v69);
      }
      else {
        uint64_t v70 = 0;
      }
      int32x2_t v73 = (void *)(v69 + 8 * v67);
      *int32x2_t v73 = 1;
      float32x2_t v66 = v73 + 1;
      while (v63 != v61)
      {
        uint64_t v74 = *((void *)v63 - 1);
        v63 -= 8;
        *--int32x2_t v73 = v74;
      }
    }
    else
    {
      if ((unint64_t)v63 < v62)
      {
        *(void *)float32x2_t v63 = __p[(void)v64 + 1];
        float32x2_t v65 = v63 + 8;
        goto LABEL_40;
      }
      uint64_t v71 = (v63 - v61) >> 3;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61)
      {
        float32x4_t v472 = (_OWORD *)v62;
        __float2 v470 = v61;
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v62 - (void)v61) >> 2 > v72) {
        unint64_t v72 = (uint64_t)(v62 - (void)v61) >> 2;
      }
      if (v62 - (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v72;
      }
      if (v69) {
        unint64_t v69 = (unint64_t)sub_25B3FCAD4(v69);
      }
      else {
        uint64_t v70 = 0;
      }
      int32x2_t v73 = (void *)(v69 + 8 * v71);
      *int32x2_t v73 = __p[(void)v64 + 1];
      float32x2_t v66 = v73 + 1;
      while (v63 != v61)
      {
        uint64_t v75 = *((void *)v63 - 1);
        v63 -= 8;
        *--int32x2_t v73 = v75;
      }
    }
    unint64_t v62 = v69 + 8 * v70;
    unint64_t v471 = v66;
    if (v61) {
      operator delete(v61);
    }
    uint64_t v61 = (char *)v73;
LABEL_68:
    unint64_t v471 = v66;
    uint64_t v64 = (char *)v64 + 1;
    float32x2_t v63 = (char *)v66;
  }
  while (v64 != (void *)3);
  float32x4_t v472 = (_OWORD *)v62;
  __float2 v470 = v61;
  sub_25B4382B4(__b, (char **)&v470);
  unint64_t v76 = 0;
  long long v465 = 0u;
  long long v466 = 0u;
  long long v464 = 0u;
  do
  {
    *((void *)&v464 + v76) = 1;
    if (v76 <= 1)
    {
      unint64_t v77 = v76;
      uint64_t v78 = 1;
      do
        v78 *= *(void *)&__b[8 * v77++ + 8];
      while (v77 != 2);
      *((void *)&v464 + v76) = v78;
    }
    ++v76;
  }
  while (v76 != 3);
  sub_25B45A630((uint64_t)__src, (long long *)__b);
  float32x2_t v79 = *v60;
  float32x4_t v437 = *v60;
  if (*v60 == (void *)2)
  {
    uint64_t v80 = 2;
  }
  else
  {
    uint64_t v80 = (uint64_t)*v60;
    if (!v79)
    {
      unint64_t v81 = 0;
      uint64_t v82 = 0;
      float32x2_t v85 = 0;
      float32x2_t v86 = 0;
      long long v112 = 0;
      uint64_t v113 = 1;
      uint64_t v88 = 1;
      char v111 = 1;
      goto LABEL_140;
    }
  }
  int v441 = (char *)v80;
  unint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  float32x2_t v85 = 0;
  float32x2_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 1;
  while (2)
  {
    uint64_t v89 = __p[(void)v87 + 1];
    if ((unint64_t)v85 >= v81)
    {
      uint64_t v90 = (v85 - v86) >> 3;
      unint64_t v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 61) {
        goto LABEL_625;
      }
      if ((uint64_t)(v81 - (void)v86) >> 2 > v91) {
        unint64_t v91 = (uint64_t)(v81 - (void)v86) >> 2;
      }
      if (v81 - (unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v91;
      }
      if (v92)
      {
        unint64_t v92 = (unint64_t)sub_25B3FCAD4(v92);
        float v94 = v82;
      }
      else
      {
        float v94 = v82;
        uint64_t v93 = 0;
      }
      float32x2_t v95 = (char *)(v92 + 8 * v90);
      *(void *)float32x2_t v95 = __p[(void)v87 + 1];
      float v96 = v95 + 8;
      while (v85 != v86)
      {
        uint64_t v97 = *((void *)v85 - 1);
        v85 -= 8;
        *((void *)v95 - 1) = v97;
        v95 -= 8;
      }
      unint64_t v81 = v92 + 8 * v93;
      if (v86)
      {
        unint64_t v98 = v92 + 8 * v93;
        operator delete(v86);
        unint64_t v81 = v98;
      }
      float32x2_t v86 = v95;
      float32x2_t v85 = v96;
      uint64_t v82 = v94;
    }
    else
    {
      *(void *)float32x2_t v85 = v89;
      v85 += 8;
    }
    if (*v446 == v87)
    {
      if ((unint64_t)v83 < v84)
      {
        *uint64_t v83 = 0;
        float32x2_t v99 = v83 + 1;
        goto LABEL_101;
      }
      uint64_t v101 = v83 - v82;
      unint64_t v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      unint64_t v103 = v81;
      if ((uint64_t)(v84 - (void)v82) >> 2 > v102) {
        unint64_t v102 = (uint64_t)(v84 - (void)v82) >> 2;
      }
      if (v84 - (unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v102;
      }
      if (v104)
      {
        unint64_t v104 = (unint64_t)sub_25B3FCAD4(v104);
        long long v106 = v82;
      }
      else
      {
        long long v106 = v82;
        uint64_t v105 = 0;
      }
      uint64_t v82 = (void *)(v104 + 8 * v101);
      *uint64_t v82 = 0;
      uint64_t v100 = v82 + 1;
      while (v83 != v106)
      {
        uint64_t v109 = *--v83;
        *--uint64_t v82 = v109;
      }
LABEL_126:
      unint64_t v84 = v104 + 8 * v105;
      if (v106) {
        operator delete(v106);
      }
      unint64_t v81 = v103;
    }
    else
    {
      if ((unint64_t)v83 >= v84)
      {
        uint64_t v107 = v83 - v82;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 61) {
LABEL_625:
        }
          sub_25B3FBC4C();
        unint64_t v103 = v81;
        if ((uint64_t)(v84 - (void)v82) >> 2 > v108) {
          unint64_t v108 = (uint64_t)(v84 - (void)v82) >> 2;
        }
        if (v84 - (unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v104 = v108;
        }
        if (v104)
        {
          unint64_t v104 = (unint64_t)sub_25B3FCAD4(v104);
          long long v106 = v82;
        }
        else
        {
          long long v106 = v82;
          uint64_t v105 = 0;
        }
        uint64_t v82 = (void *)(v104 + 8 * v107);
        *uint64_t v82 = *((void *)&v464 + (void)v87);
        uint64_t v100 = v82 + 1;
        while (v83 != v106)
        {
          uint64_t v110 = *--v83;
          *--uint64_t v82 = v110;
        }
        goto LABEL_126;
      }
      *uint64_t v83 = *((void *)&v464 + (void)v87);
      float32x2_t v99 = v83 + 1;
LABEL_101:
      uint64_t v100 = v99;
    }
    v88 *= (void)v89;
    uint64_t v87 = (char *)v87 + 1;
    uint64_t v83 = v100;
    if (v87 != v441) {
      continue;
    }
    break;
  }
  char v111 = 0;
  long long v112 = v441;
  uint64_t v113 = (uint64_t)(v441 + 1);
  if ((unint64_t)(v441 + 1) > 2)
  {
    uint64_t v114 = 1;
    float32x2_t v79 = v437;
  }
  else
  {
    float32x2_t v79 = v437;
LABEL_140:
    uint64_t v120 = 8 * v113 + 8;
    uint64_t v114 = 1;
    do
    {
      v114 *= *(void *)((char *)__p + v120);
      v120 += 8;
    }
    while (v120 != 32);
  }
  uint64_t v121 = v82;
  if (v79 == (void *)2) {
    uint64_t v122 = (uint64_t)__p[(void)v112 + 1];
  }
  else {
    uint64_t v122 = 1;
  }
  uint64_t v448 = v122;
  int v442 = v480;
  if (v79 == (void *)2) {
    long long v123 = (char *)v88;
  }
  else {
    long long v123 = (char *)__p[(void)v112 + 1];
  }
  memset(&v483[1], 0, 32);
  if (v79 == (void *)2) {
    uint64_t v124 = 1;
  }
  else {
    uint64_t v124 = v88;
  }
  uint64_t v430 = v124;
  v483[0] = 0uLL;
  memset(v482, 0, sizeof(v482));
  *(_OWORD *)__dst = 0uLL;
  if (v111)
  {
    uint64_t v125 = v440;
    if ((unint64_t)v85 >= v81)
    {
      char v138 = v111;
      uint64_t v139 = (v85 - v86) >> 3;
      unint64_t v140 = v139 + 1;
      if ((unint64_t)(v139 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v81 - (void)v86) >> 2 > v140) {
        unint64_t v140 = (uint64_t)(v81 - (void)v86) >> 2;
      }
      if (v81 - (unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v141 = v140;
      }
      if (v141) {
        unint64_t v141 = (unint64_t)sub_25B3FCAD4(v141);
      }
      uint64_t v142 = (char *)(v141 + 8 * v139);
      *(void *)uint64_t v142 = 0;
      while (v85 != v86)
      {
        uint64_t v143 = *((void *)v85 - 1);
        v85 -= 8;
        *((void *)v142 - 1) = v143;
        v142 -= 8;
      }
      if (v86) {
        operator delete(v86);
      }
      int v126 = 0;
      int v433 = 0;
      float32x2_t v86 = v142;
      char v111 = v138;
    }
    else
    {
      int v126 = 0;
      int v433 = 0;
      *(void *)float32x2_t v85 = 0;
    }
  }
  else
  {
    char v421 = v111;
    int v126 = 0;
    int v127 = 0;
    unint64_t v128 = 0;
    long long v129 = 0;
    long long v130 = 0;
    int v433 = v112 - 1;
    do
    {
      if (*v446 != v130)
      {
        if ((unint64_t)v129 >= v128)
        {
          long long v131 = v112;
          uint64_t v132 = (v129 - v126) >> 3;
          unint64_t v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v128 - (void)v126) >> 2 > v133) {
            unint64_t v133 = (uint64_t)(v128 - (void)v126) >> 2;
          }
          if (v128 - (unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v134 = v133;
          }
          if (v134)
          {
            unint64_t v134 = (unint64_t)sub_25B3FCAD4(v134);
            long long v129 = v127;
          }
          else
          {
            uint64_t v135 = 0;
          }
          float v136 = (char *)(v134 + 8 * v132);
          *(void *)float v136 = v130;
          int v127 = v136 + 8;
          while (v129 != v126)
          {
            uint64_t v137 = *((void *)v129 - 1);
            v129 -= 8;
            *((void *)v136 - 1) = v137;
            v136 -= 8;
          }
          unint64_t v128 = v134 + 8 * v135;
          if (v126) {
            operator delete(v126);
          }
          int v126 = v136;
          long long v129 = v127;
          long long v112 = v131;
        }
        else
        {
          *(void *)long long v129 = v130;
          v129 += 8;
          int v127 = v129;
        }
      }
      ++v130;
    }
    while (v130 != v112);
    uint64_t v125 = v440;
    char v111 = v421;
  }
  unint64_t v144 = v114 * v448;
  if (v437 == (void *)2)
  {
    if (v457)
    {
      if (v123)
      {
        uint64_t v145 = 0;
        uint64_t v146 = 0;
        unint64_t v147 = 0;
        uint64_t v148 = v458;
        unint64_t v149 = (float *)(v458 + 4);
        if (v144 <= 1) {
          uint64_t v150 = 1;
        }
        else {
          uint64_t v150 = v114 * v448;
        }
        uint64_t v151 = 4 * v150;
        BOOL v152 = 1;
        int v153 = v442;
        while (1)
        {
          float v154 = *(float *)(v148 + 4 * v146);
          if (v144 >= 2) {
            break;
          }
          ++v146;
          if (!v152) {
            goto LABEL_204;
          }
LABEL_206:
          *int v153 = v154;
          uint64_t v159 = v433;
          do
          {
            uint64_t v160 = *((void *)v483 + v159) + 1;
            *((void *)v483 + v159) = v160;
            if (v160 != *(void *)&v86[8 * v159]) {
              break;
            }
            *((void *)v483 + v159) = 0;
            BOOL v256 = v159-- <= 0;
          }
          while (!v256);
          if (v111)
          {
            BOOL v152 = 0;
            unint64_t v161 = 0;
          }
          else
          {
            unint64_t v161 = 0;
            float32x2_t v162 = (uint64_t *)v483;
            char v163 = v121;
            int v164 = v112;
            do
            {
              uint64_t v166 = *v162++;
              uint64_t v165 = v166;
              uint64_t v167 = *v163++;
              v161 += v167 * v165;
              --v164;
            }
            while (v164);
            BOOL v152 = v161 > v147;
            if (v161 > v147) {
              unint64_t v147 = v161;
            }
          }
          int v153 = &v442[v161];
          ++v145;
          unint64_t v149 = (float *)((char *)v149 + v151);
          if (v145 == v123) {
            goto LABEL_326;
          }
        }
        unint64_t v155 = v144 - 1;
        long long v156 = v149;
        do
        {
          float v157 = *v156++;
          float v158 = v157;
          if (v154 < v157) {
            float v154 = v158;
          }
          --v155;
        }
        while (v155);
        v146 += v144;
        if (v152) {
          goto LABEL_206;
        }
LABEL_204:
        if (*v153 >= v154) {
          float v154 = *v153;
        }
        goto LABEL_206;
      }
    }
    else if (v123)
    {
      uint64_t v193 = 0;
      unint64_t v194 = 0;
      uint64_t v195 = v458;
      BOOL v196 = 1;
      long long v197 = v442;
      do
      {
        uint64_t v198 = 0;
        uint64_t v199 = 0;
        do
        {
          v199 += *(void *)((char *)v454 + v198 * 8 + 8) * (void)__dst[v198];
          ++v198;
        }
        while (v198 != 3);
        uint64_t v200 = 0;
        float v201 = *(float *)(v195 + 4 * v199);
        do
        {
          uint64_t v202 = *(void *)((char *)v482 + v200) + 1;
          *(void *)((char *)v482 + v200) = v202;
          if (v202 != *(void *)((char *)v453 + v200 + 8)) {
            break;
          }
          *(void *)((char *)v482 + v200) = 0;
          v200 -= 8;
        }
        while (v200 != -24);
        if (v144 >= 2)
        {
          for (uint64_t m = 1; m != v144; ++m)
          {
            uint64_t v204 = 0;
            uint64_t v205 = 0;
            do
            {
              v205 += *(void *)((char *)v454 + v204 * 8 + 8) * (void)__dst[v204];
              ++v204;
            }
            while (v204 != 3);
            uint64_t v206 = 0;
            if (v201 < *(float *)(v195 + 4 * v205)) {
              float v201 = *(float *)(v195 + 4 * v205);
            }
            do
            {
              uint64_t v207 = *(void *)((char *)v482 + v206) + 1;
              *(void *)((char *)v482 + v206) = v207;
              if (v207 != *(void *)((char *)v453 + v206 + 8)) {
                break;
              }
              *(void *)((char *)v482 + v206) = 0;
              v206 -= 8;
            }
            while (v206 != -24);
          }
        }
        if (!v196 && *v197 >= v201) {
          float v201 = *v197;
        }
        float *v197 = v201;
        uint64_t v208 = v433;
        do
        {
          uint64_t v209 = *((void *)v483 + v208) + 1;
          *((void *)v483 + v208) = v209;
          if (v209 != *(void *)&v86[8 * v208]) {
            break;
          }
          *((void *)v483 + v208) = 0;
          BOOL v256 = v208-- <= 0;
        }
        while (!v256);
        if (v111)
        {
          BOOL v196 = 0;
          unint64_t v210 = 0;
        }
        else
        {
          unint64_t v210 = 0;
          unint64_t v211 = (uint64_t *)v483;
          unint64_t v212 = v121;
          v213 = v112;
          do
          {
            uint64_t v215 = *v211++;
            uint64_t v214 = v215;
            uint64_t v216 = *v212++;
            v210 += v216 * v214;
            --v213;
          }
          while (v213);
          BOOL v196 = v210 > v194;
          if (v210 > v194) {
            unint64_t v194 = v210;
          }
        }
        long long v197 = &v442[v210];
        ++v193;
      }
      while (v193 != v123);
    }
  }
  else if (v457)
  {
    if (v430)
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      unint64_t v170 = 0;
      BOOL v171 = 1;
      uint64_t v172 = v458;
      BOOL v173 = v442;
      do
      {
        if (v171)
        {
          if (v144)
          {
            float32x2_t v174 = v173;
            uint64_t v175 = v114 * v448;
            do
            {
              *v174++ = *(float *)(v172 + 4 * v169++);
              --v175;
            }
            while (v175);
          }
        }
        else
        {
          int32x2_t v176 = v173;
          uint64_t v177 = v114 * v448;
          if (v144)
          {
            do
            {
              float v178 = *(float *)(v172 + 4 * v169);
              if (*v176 >= v178) {
                float v178 = *v176;
              }
              *v176++ = v178;
              ++v169;
              --v177;
            }
            while (v177);
          }
        }
        if ((unint64_t)v123 >= 2)
        {
          uint64_t v179 = v458;
          for (uint64_t n = 1; (char *)n != v123; ++n)
          {
            long long v181 = v173;
            uint64_t v182 = v114 * v448;
            if (v144)
            {
              do
              {
                float v183 = *(float *)(v179 + 4 * v169);
                if (*v181 >= v183) {
                  float v183 = *v181;
                }
                *v181++ = v183;
                ++v169;
                --v182;
              }
              while (v182);
            }
          }
        }
        uint64_t v184 = v433;
        do
        {
          uint64_t v185 = *((void *)v483 + v184) + 1;
          *((void *)v483 + v184) = v185;
          if (v185 != *(void *)&v86[8 * v184]) {
            break;
          }
          *((void *)v483 + v184) = 0;
          BOOL v256 = v184-- <= 0;
        }
        while (!v256);
        if (v111)
        {
          BOOL v171 = 0;
          unint64_t v186 = 0;
        }
        else
        {
          unint64_t v186 = 0;
          unint64_t v187 = (uint64_t *)v483;
          float32x4_t v188 = v121;
          float32x4_t v189 = v112;
          do
          {
            uint64_t v191 = *v187++;
            uint64_t v190 = v191;
            uint64_t v192 = *v188++;
            v186 += v192 * v190;
            --v189;
          }
          while (v189);
          BOOL v171 = v186 > v170;
          if (v186 > v170) {
            unint64_t v170 = v186;
          }
        }
        BOOL v173 = &v442[v186];
        ++v168;
      }
      while (v168 != v430);
    }
  }
  else if (v430)
  {
    uint64_t v217 = 0;
    unint64_t v218 = 0;
    uint64_t v219 = v458;
    BOOL v220 = 1;
    uint64_t v221 = v442;
    do
    {
      if (v220)
      {
        if (v144)
        {
          for (iuint64_t i = 0; ii != v144; ++ii)
          {
            uint64_t v223 = 0;
            uint64_t v224 = 0;
            do
            {
              v224 += *(void *)((char *)v454 + v223 * 8 + 8) * (void)__dst[v223];
              ++v223;
            }
            while (v223 != 3);
            uint64_t v225 = 0;
            v221[ii] = *(float *)(v219 + 4 * v224);
            do
            {
              uint64_t v226 = *(void *)((char *)v482 + v225) + 1;
              *(void *)((char *)v482 + v225) = v226;
              if (v226 != *(void *)((char *)v453 + v225 + 8)) {
                break;
              }
              *(void *)((char *)v482 + v225) = 0;
              v225 -= 8;
            }
            while (v225 != -24);
          }
        }
      }
      else if (v144)
      {
        for (juint64_t j = 0; jj != v144; ++jj)
        {
          uint64_t v228 = 0;
          uint64_t v229 = 0;
          do
          {
            v229 += *(void *)((char *)v454 + v228 * 8 + 8) * (void)__dst[v228];
            ++v228;
          }
          while (v228 != 3);
          uint64_t v230 = 0;
          float v231 = *(float *)(v219 + 4 * v229);
          if (v221[jj] >= v231) {
            float v231 = v221[jj];
          }
          v221[jj] = v231;
          do
          {
            uint64_t v232 = *(void *)((char *)v482 + v230) + 1;
            *(void *)((char *)v482 + v230) = v232;
            if (v232 != *(void *)((char *)v453 + v230 + 8)) {
              break;
            }
            *(void *)((char *)v482 + v230) = 0;
            v230 -= 8;
          }
          while (v230 != -24);
        }
      }
      uint64_t v233 = v433;
      if ((unint64_t)v123 > 1)
      {
        uint64_t v234 = v458;
        for (kuint64_t k = 1; (char *)kk != v123; ++kk)
        {
          if (v144)
          {
            for (muint64_t m = 0; mm != v144; ++mm)
            {
              uint64_t v237 = 0;
              uint64_t v238 = 0;
              do
              {
                v238 += *(void *)((char *)v454 + v237 * 8 + 8) * (void)__dst[v237];
                ++v237;
              }
              while (v237 != 3);
              uint64_t v239 = 0;
              float v240 = *(float *)(v234 + 4 * v238);
              if (v221[mm] >= v240) {
                float v240 = v221[mm];
              }
              v221[mm] = v240;
              do
              {
                uint64_t v241 = *(void *)((char *)v482 + v239) + 1;
                *(void *)((char *)v482 + v239) = v241;
                if (v241 != *(void *)((char *)v453 + v239 + 8)) {
                  break;
                }
                *(void *)((char *)v482 + v239) = 0;
                v239 -= 8;
              }
              while (v239 != -24);
            }
          }
        }
        uint64_t v233 = v433;
      }
      do
      {
        uint64_t v242 = *((void *)v483 + v233) + 1;
        *((void *)v483 + v233) = v242;
        if (v242 != *(void *)&v86[8 * v233]) {
          break;
        }
        *((void *)v483 + v233) = 0;
        BOOL v256 = v233-- <= 0;
      }
      while (!v256);
      if (v111)
      {
        BOOL v220 = 0;
        unint64_t v243 = 0;
      }
      else
      {
        unint64_t v243 = 0;
        unint64_t v244 = (uint64_t *)v483;
        uint64_t v245 = v121;
        unint64_t v246 = v112;
        do
        {
          uint64_t v248 = *v244++;
          uint64_t v247 = v248;
          uint64_t v249 = *v245++;
          v243 += v249 * v247;
          --v246;
        }
        while (v246);
        BOOL v220 = v243 > v218;
        if (v243 > v218) {
          unint64_t v218 = v243;
        }
      }
      uint64_t v221 = &v442[v243];
      ++v217;
    }
    while (v217 != v430);
  }
LABEL_326:
  if (v126) {
    operator delete(v126);
  }
  if (v121) {
    operator delete(v121);
  }
  if (v86) {
    operator delete(v86);
  }
  if (v470) {
    operator delete(v470);
  }
  operator delete(v446);
  sub_25B4591A8((uint64_t)src, (uint64_t)__src, 0);
  uint64_t v250 = v451;
  *(void *)__float32x4_t src = &unk_2708F2218;
  if (v479) {
    sub_25B404120(v479);
  }
  __p[0] = &unk_2708F2218;
  if (v456) {
    sub_25B404120(v456);
  }
  kdebug_trace();
  int v431 = v125 + 1;
  sub_25B4880E8((float *)v451, v125 + 1, v436, (uint64_t)src);
  unint64_t v449 = (float *)(v451 + 464);
  sub_25B4D6460(v125 + 1, v451 + 464);
  sub_25B5935B4(v125 + 22);
  v125[24] = v125[23];
  uint64_t v251 = (float32x2_t *)v125[1];
  uint64_t v252 = (float32x2_t *)v125[2];
  if (v251 == v252) {
    goto LABEL_427;
  }
  uint64_t v434 = v125[2];
  while (2)
  {
    float32x2_t v253 = (float32x2_t)v251[18].u8[7];
    if (v253.i8[0] < 0) {
      float32x2_t v253 = v251[17];
    }
    if (!*(void *)&v253) {
      goto LABEL_426;
    }
    float32x2_t v254 = vsub_f32(v251[2], v251[3]);
    float v255 = sqrtf(vaddv_f32(vmul_f32(v254, v254)));
    BOOL v256 = v255 >= *(float *)(v250 + 584) && v255 <= *(float *)(v250 + 588);
    if (!v256) {
      goto LABEL_426;
    }
    memset(__src, 0, 24);
    uint64_t v258 = v125[1];
    uint64_t v257 = v125[2];
    if (v258 == v257)
    {
      int32x2_t v300 = 0;
      int32x2_t v259 = 0;
      goto LABEL_417;
    }
    unint64_t v438 = 0;
    int32x2_t v259 = 0;
    int v443 = 0;
    while (2)
    {
      uint64_t v260 = *(unsigned __int8 *)(v258 + 151);
      if ((v260 & 0x80u) == 0) {
        uint64_t v261 = *(unsigned __int8 *)(v258 + 151);
      }
      else {
        uint64_t v261 = *(void *)(v258 + 136);
      }
      if (v261)
      {
        float32x2_t v262 = (float32x2_t)v251[18].u8[7];
        int v263 = v262.i8[0];
        if (v262.i8[0] < 0) {
          float32x2_t v262 = v251[17];
        }
        if (v261 != *(void *)&v262) {
          goto LABEL_367;
        }
        if (v263 >= 0) {
          uint64_t v264 = v251 + 16;
        }
        else {
          uint64_t v264 = (float32x2_t *)v251[16];
        }
        if ((v260 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v258 + 128), v264, *(void *)(v258 + 136))) {
            goto LABEL_367;
          }
        }
        else if (*(unsigned char *)(v258 + 151))
        {
          uint64_t v265 = 0;
          while (*(unsigned __int8 *)(v258 + v265 + 128) == v264->u8[v265])
          {
            if (v260 == ++v265) {
              goto LABEL_414;
            }
          }
LABEL_367:
          float32x2_t v266 = vsub_f32(*(float32x2_t *)(v258 + 16), *(float32x2_t *)(v258 + 24));
          if (sqrtf(vaddv_f32(vmul_f32(v266, v266))) > v255)
          {
            sub_25B40E03C((float **)__p, v251 + 2, (float32x2_t *)(v258 + 16));
            unint64_t v267 = (float *)__p[0];
            int32x2_t v268 = (float *)__p[1];
            float32x2_t v269 = (float *)((char *)__p[0] + 4);
            BOOL v270 = __p[0] == __p[1] || v269 == __p[1];
            char v271 = v270;
            float32x2_t v272 = (float *)__p[0];
            if (!v270)
            {
              float v273 = *(float *)__p[0];
              int32x2_t v274 = (float *)((char *)__p[0] + 4);
              float32x2_t v272 = (float *)__p[0];
              float32x2_t v275 = (float *)((char *)__p[0] + 4);
              do
              {
                float v276 = *v275++;
                float v277 = v276;
                if (v276 < v273)
                {
                  float v273 = v277;
                  float32x2_t v272 = v274;
                }
                int32x2_t v274 = v275;
              }
              while (v275 != __p[1]);
            }
            if (*v272 <= *(float *)(v451 + 492))
            {
              float v279 = sub_25B3FCCE0(v251 + 2, (float32x2_t *)(v258 + 16), 0);
              float v280 = *(float *)(v451 + 484);
              float v281 = 90.0 - v280;
              float v282 = v280 + 135.0;
              if (v279 >= v281 && v279 <= v282)
              {
                uint64_t v284 = v267;
                if ((v271 & 1) == 0)
                {
                  float v285 = *v267;
                  uint64_t v284 = v267;
                  __int32 v286 = v269;
                  do
                  {
                    float v287 = *v286++;
                    float v288 = v287;
                    if (v287 < v285)
                    {
                      float v285 = v288;
                      uint64_t v284 = v269;
                    }
                    float32x2_t v269 = v286;
                  }
                  while (v286 != v268);
                }
                int v289 = (int)((unint64_t)((char *)v284 - (char *)v267) >> 2) / 2;
                if ((unint64_t)v259 >= v438)
                {
                  uint64_t v290 = v259 - v443;
                  unint64_t v291 = v290 + 1;
                  if ((unint64_t)(v290 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v438 - (void)v443) >> 1 > v291) {
                    unint64_t v291 = (uint64_t)(v438 - (void)v443) >> 1;
                  }
                  if (v438 - (unint64_t)v443 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v292 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v292 = v291;
                  }
                  if (v292) {
                    unint64_t v292 = (unint64_t)sub_25B3FBC64(v292);
                  }
                  else {
                    uint64_t v293 = 0;
                  }
                  int32x2_t v294 = (int *)(v292 + 4 * v290);
                  *int32x2_t v294 = v289;
                  float32x2_t v295 = v294 + 1;
                  if (v259 == v443)
                  {
                    float32x2_t v296 = v443;
                  }
                  else
                  {
                    float32x2_t v296 = v443;
                    do
                    {
                      int v297 = *--v259;
                      *--int32x2_t v294 = v297;
                    }
                    while (v259 != v443);
                  }
                  unint64_t v438 = v292 + 4 * v293;
                  if (v296) {
                    operator delete(v296);
                  }
                  int v443 = v294;
                  int32x2_t v259 = v295;
                }
                else
                {
                  *v259++ = v289;
                }
                uint64_t v298 = *(void *)&__src[8];
                if (*(void *)&__src[8] >= *(void *)&__src[16])
                {
                  uint64_t v299 = sub_25B47C818((uint64_t *)__src, v258, v278);
                }
                else
                {
                  sub_25B47C6E4(*(uint64_t *)&__src[8], v258, v278);
                  uint64_t v299 = v298 + 176;
                }
                *(void *)&___OWORD src[8] = v299;
                unint64_t v267 = (float *)__p[0];
              }
            }
            if (v267) {
              operator delete(v267);
            }
          }
        }
      }
LABEL_414:
      v258 += 176;
      if (v258 != v257) {
        continue;
      }
      break;
    }
    int32x2_t v300 = v443;
LABEL_417:
    uint64_t v125 = v440;
    if ((char *)v259 - (char *)v300 == 8)
    {
      uint64_t v250 = v451;
      if (v300[1] + *v300 == 1)
      {
        uint64_t v252 = (float32x2_t *)v434;
        if (sub_25B3FCCE0((float32x2_t *)(*(void *)__src + 16), (float32x2_t *)(*(void *)__src + 192), 0) >= (float)(180.0 - *(float *)(v451 + 480))) {
          operator new();
        }
      }
      else
      {
        uint64_t v252 = (float32x2_t *)v434;
      }
      __p[0] = __src;
      sub_25B3F5F28((void ***)__p);
      operator delete(v300);
    }
    else
    {
      __p[0] = __src;
      sub_25B3F5F28((void ***)__p);
      uint64_t v250 = v451;
      uint64_t v252 = (float32x2_t *)v434;
      if (v300) {
        operator delete(v300);
      }
    }
LABEL_426:
    v251 += 22;
    if (v251 != v252) {
      continue;
    }
    break;
  }
LABEL_427:
  sub_25B488940(v250, v125, &v462, v461, v436, v427, v432, (uint64_t)src, v425);
  kdebug_trace();
  kdebug_trace();
  id v428 = v436;
  long long v301 = *(_OWORD *)(v451 + 544);
  v454[1] = *(_OWORD *)(v451 + 528);
  v454[2] = v301;
  v454[3] = *(_OWORD *)(v451 + 560);
  uint64_t v455 = *(void *)(v451 + 576);
  long long v302 = *(_OWORD *)(v451 + 480);
  *(_OWORD *)__p = *(_OWORD *)v449;
  v453[0] = v302;
  long long v303 = *(_OWORD *)(v451 + 512);
  v453[1] = *(_OWORD *)(v451 + 496);
  v454[0] = v303;
  HIDWORD(__p[1]) = *(_DWORD *)(v250 + 524);
  v439 = (uint64_t *)(v250 + 80);
  sub_25B4D6DCC((uint64_t)v483, *(void *)(v250 + 80), *(void *)(v250 + 88), v423, (float *)__p);
  unint64_t v304 = (float32x2_t *)v125[4];
  uint64_t v305 = (float32x2_t *)v125[5];
  if (v304 != v305)
  {
    uint64_t v306 = v451 + 48;
    do
    {
      sub_25B4D6A60((uint64_t)__src, v304, (float32x2_t **)(v451 + 56), v449);
      if (__src[0])
      {
        if ((__src[31] & 0x80000000) != 0)
        {
          sub_25B4002F4(__b, *(void **)&__src[8], *(unint64_t *)&__src[16]);
        }
        else
        {
          *(_OWORD *)__b = *(_OWORD *)&__src[8];
          *(void *)&__b[16] = *(void *)&__src[24];
        }
        if ((sub_25B491880(*(void *)(v451 + 56), *(void *)(v451 + 64), (unsigned __int8 **)__b) & 1) != 0
          && *(unsigned char *)(sub_25B490C80(v306, (unsigned __int8 **)__b) + 76))
        {
          if ((__b[23] & 0x80000000) != 0) {
            operator delete(*(void **)__b);
          }
          sub_25B490110((uint64_t)__b, (unsigned __int8 *)&v304[16], v483);
          if (!v468)
          {
            sub_25B491958((uint64_t)v304, (void *)v474);
            v304[11].i32[0] = 4;
            uint64_t v308 = *(void *)(sub_25B490C80(v306, (unsigned __int8 **)&__src[8]) + 8);
            if (v308) {
              LODWORD(v308) = *(_DWORD *)(v308 + 116);
            }
            float32x2_t v309 = v304[1];
            if (v309) {
              *(_DWORD *)(*(void *)&v309 + 120) = v308;
            }
            unint64_t v310 = *(void *)(v451 + 88);
            if (v310 >= *(void *)(v451 + 96))
            {
              uint64_t v311 = sub_25B47C818(v439, (uint64_t)v304, v307);
              uint64_t v312 = v451;
            }
            else
            {
              sub_25B47C6E4(*(void *)(v451 + 88), (uint64_t)v304, v307);
              uint64_t v311 = v310 + 176;
              uint64_t v312 = v451;
              *(void *)(v451 + 88) = v310 + 176;
            }
            *(void *)(v312 + 88) = v311;
          }
          sub_25B49052C((uint64_t)__b);
        }
        else
        {
          v304[11].i32[0] = 5;
          if ((__b[23] & 0x80000000) != 0) {
            operator delete(*(void **)__b);
          }
        }
      }
      else
      {
        v304[11].i32[0] = 5;
      }

      if ((__src[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__src[8]);
      }
      v304 += 22;
    }
    while (v304 != v305);
  }
  id v313 = v428;
  uint64_t v314 = v451 + 48;
  uint64_t v315 = *(void *)(v451 + 80);
  uint64_t v316 = *(void *)(v451 + 88);
  for (nuint64_t n = v451 + 48; v315 != v316; v315 += 176)
  {
    sub_25B4D6A60((uint64_t)__b, (float32x2_t *)v315, (float32x2_t **)(v451 + 56), v449);
    if (__b[0])
    {
      sub_25B491958(v315, v469);
      uint64_t v317 = *(void *)(sub_25B490C80(v314, (unsigned __int8 **)&__b[8]) + 8);
      if (v317) {
        LODWORD(v317) = *(_DWORD *)(v317 + 116);
      }
      uint64_t v318 = *(void *)(v315 + 8);
      if (v318) {
        *(_DWORD *)(v318 + 120) = v317;
      }
      if (SHIBYTE(v468) < 0)
      {
        sub_25B4002F4(__dst, *(void **)&__b[8], *(unint64_t *)&__b[16]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)&__b[8];
        *(void *)&v482[0] = v468;
      }
      if ((sub_25B491880(*(void *)(v451 + 56), *(void *)(v451 + 64), (unsigned __int8 **)__dst) & 1) != 0
        && *(unsigned char *)(sub_25B490C80(v314, (unsigned __int8 **)__dst) + 76))
      {
        sub_25B490110((uint64_t)&v464, (unsigned __int8 *)(v315 + 128), v483);
        if (*((void *)&v465 + 1))
        {
          if (*((void *)&v465 + 1) == 1)
          {
            if (*(char *)(v465 + 39) < 0)
            {
              sub_25B4002F4(__src, *(void **)(v465 + 16), *(void *)(v465 + 24));
            }
            else
            {
              *(_OWORD *)__float32x4_t src = *(_OWORD *)(v465 + 16);
              *(void *)&__src[16] = *(void *)(v465 + 32);
            }
            if (sub_25B491880(v440[4], v440[5], (unsigned __int8 **)__src))
            {
              uint64_t v321 = sub_25B491A40((uint64_t)v440, (unsigned __int8 **)__src);
              sub_25B491B04(v315, (float *)(v321 + 32));
              objc_msgSend_confidence(*(void **)(v321 + 8), v322, v323);
              uint64_t v325 = *(void *)(v315 + 8);
              if (v325) {
                *(_DWORD *)(v325 + 108) = v324;
              }
              *(_DWORD *)(v315 + 88) = 1;
              uint64_t v314 = v451 + 48;
            }
            if ((__src[23] & 0x80000000) != 0) {
              operator delete(*(void **)__src);
            }
          }
          else
          {
            *(_DWORD *)(v315 + 88) = 1;
          }
        }
        else
        {
          LODWORD(v470) = 2;
          sub_25B456DFC((uint64_t)__src, v432, (unsigned int *)&v470);
          long long v484 = *(_OWORD *)(v315 + 16);
          float32x2_t v319 = operator new(0x10uLL);
          float32x4_t v472 = v319 + 1;
          _OWORD *v319 = v484;
          __float2 v470 = v319;
          unint64_t v471 = v319 + 1;
          sub_25B481B8C(&v484, (float32x2_t **)&v470, v313, (uint64_t)__src);
          int32x2_t v320 = (void *)v484;
          if (*(float *)v484 < 0.1) {
            *(_DWORD *)(v315 + 88) = 2;
          }
          operator delete(v320);
          operator delete(v319);
          *(void *)__float32x4_t src = &unk_2708F21F8;
          if (v479) {
            sub_25B404120(v479);
          }
          uint64_t v314 = v451 + 48;
        }
        sub_25B49052C((uint64_t)&v464);
      }
      else
      {
        *(_DWORD *)(v315 + 88) = 0;
      }
      if (SBYTE7(v482[0]) < 0) {
        operator delete(__dst[0]);
      }
    }
    else
    {
      *(_DWORD *)(v315 + 88) = 2;
    }

    if (SHIBYTE(v468) < 0) {
      operator delete(*(void **)&__b[8]);
    }
  }

  float32x2_t v326 = (uint64_t *)v451;
  uint64_t v327 = *(void *)(v451 + 80);
  uint64_t v328 = *(void *)(v451 + 88);
  float v426 = v313;
  if (v327 != v328)
  {
    do
    {
      if (*(_DWORD *)(v327 + 88) != 2)
      {
        if (!sub_25B491880(v326[7], v326[8], (unsigned __int8 **)(v327 + 152))) {
          goto LABEL_495;
        }
        unint64_t v329 = (float32x2_t *)sub_25B490C80(v314, (unsigned __int8 **)(v327 + 152));
        *(float32x2_t *)&long long v332 = sub_25B40DF5C(*(float32x2_t *)(v327 + 16), *(double *)(v327 + 24), v329[2], v329[3]);
        long long v333 = v332;
        DWORD2(v333) = *(_DWORD *)(v327 + 64);
        long long v335 = v334;
        DWORD2(v335) = *(_DWORD *)(v327 + 68);
        *(void *)(v327 + 16) = v332;
        *(void *)(v327 + 24) = v334;
        DWORD2(v332) = DWORD2(v335);
        DWORD2(v334) = DWORD2(v333);
        *(_OWORD *)(v327 + 32) = v333;
        *(_OWORD *)(v327 + 48) = v335;
        uint64_t v336 = *(void *)(v327 + 8);
        *(_OWORD *)__float32x4_t src = v332;
        *(_OWORD *)&__src[16] = v335;
        long long v474 = v334;
        *(_OWORD *)uint64_t v475 = v333;
        if (v336) {
          objc_copyStruct((void *)(v336 + 272), __src, 64, 1, 0);
        }
        int32x2_t v337 = objc_msgSend_identifier(*(void **)&v329[1], *(const char **)&v330, *(void *)&v331);
        sub_25B491958(v327, v337);

        float32x2_t v338 = vsub_f32(*(float32x2_t *)(v327 + 16), *(float32x2_t *)(v327 + 24));
        float32x2_t v326 = (uint64_t *)v451;
        if (sqrtf(vaddv_f32(vmul_f32(v338, v338))) < 0.3) {
LABEL_495:
        }
          *(_DWORD *)(v327 + 88) = 2;
      }
      v327 += 176;
    }
    while (v327 != v328);
    uint64_t v327 = v326[11];
  }
LABEL_498:
  float32x2_t v339 = (float32x2_t *)*v439;
  if (v327 == *v439) {
    goto LABEL_617;
  }
  unint64_t v340 = 0;
  unint64_t v444 = 0;
  unint64_t v447 = 0;
  char v341 = 0;
  do
  {
    if (v341)
    {
LABEL_520:
      *(double *)&long long v348 = sub_25B40D3C8(*(double *)&v339[22 * v444 + 2], *(double *)&v339[22 * v444 + 3], *(double *)&v339[22 * v447 + 2], *(double *)&v339[22 * v447 + 3]);
      uint64_t v349 = *v439 + 176 * v444;
      long long v350 = v348;
      DWORD2(v350) = *(_DWORD *)(v349 + 64);
      long long v352 = v351;
      DWORD2(v352) = *(_DWORD *)(v349 + 68);
      *(void *)(v349 + 16) = v348;
      *(void *)(v349 + 24) = v351;
      DWORD2(v348) = DWORD2(v352);
      DWORD2(v351) = DWORD2(v350);
      *(_OWORD *)(v349 + 32) = v350;
      *(_OWORD *)(v349 + 48) = v352;
      uint64_t v353 = *(void *)(v349 + 8);
      *(_OWORD *)__float32x4_t src = v348;
      *(_OWORD *)&__src[16] = v352;
      long long v474 = v351;
      *(_OWORD *)uint64_t v475 = v350;
      if (v353) {
        objc_copyStruct((void *)(v353 + 272), __src, 64, 1, 0);
      }
      objc_msgSend_confidence(*(void **)(*v439 + 176 * v444 + 8), v346, v347);
      float v355 = v354;
      objc_msgSend_confidence(*(void **)(*v439 + 176 * v447 + 8), v356, v357);
      uint64_t v359 = *v439;
      uint64_t v360 = *(void *)(*v439 + 176 * v444 + 8);
      if (v360)
      {
        if (v355 >= v358) {
          float v358 = v355;
        }
        *(float *)(v360 + 108) = v358;
        uint64_t v359 = *v439;
      }
      *(_DWORD *)(v359 + 176 * v444 + 88) = 6;
      uint64_t v327 = sub_25B487EC4(v359 + 176 * v447 + 176, *(void *)(v451 + 88), v359 + 176 * v447);
      uint64_t v361 = *(void *)(v451 + 88);
      if (v361 != v327)
      {
        uint64_t v362 = v361 - 176;
        uint64_t v363 = (void (***)(void))(v361 - 176);
        unint64_t v364 = (void (***)(void))(v361 - 176);
        do
        {
          uint64_t v365 = *v364;
          v364 -= 22;
          (*v365)(v363);
          v362 -= 176;
          BOOL v270 = v363 == (void (***)(void))v327;
          uint64_t v363 = v364;
        }
        while (!v270);
      }
      *(void *)(v451 + 88) = v327;
      goto LABEL_498;
    }
    if ((float32x2_t *)v327 == v339) {
      goto LABEL_617;
    }
    unint64_t v342 = 0;
    char v341 = 0;
    uint64_t v343 = 2;
    do
    {
      if (v340 < v342)
      {
        sub_25B4D4E4C((uint64_t)__src, &v339[22 * v340 + 2], &v339[v343], v449);
        BOOL v344 = *((float *)&v474 + 2) >= 5.0 && *((float *)&v474 + 2) <= 175.0;
        if (v344 || *((float *)&v474 + 1) >= 0.05 || *(float *)&__src[24] <= 0.05)
        {
          int v345 = 1;
        }
        else
        {
          int v345 = 0;
          char v341 = 1;
          unint64_t v444 = v340;
          unint64_t v447 = v342;
        }
        if (v477)
        {
          uint64_t v478 = v477;
          operator delete(v477);
        }
        if (v475[1])
        {
          unint64_t v476 = v475[1];
          operator delete(v475[1]);
        }
        float32x2_t v339 = *(float32x2_t **)(v451 + 80);
        uint64_t v327 = *(void *)(v451 + 88);
        if (!v345) {
          break;
        }
      }
      ++v342;
      v343 += 22;
    }
    while (v342 < 0x2E8BA2E8BA2E8BA3 * ((v327 - (uint64_t)v339) >> 4));
    ++v340;
  }
  while (v340 < 0x2E8BA2E8BA2E8BA3 * ((v327 - (uint64_t)v339) >> 4));
  if (v341) {
    goto LABEL_520;
  }
  if (v339 == (float32x2_t *)v327) {
    goto LABEL_617;
  }
  do
  {
    if (v339[11].i32[0] != 2)
    {
      float32x2_t v366 = (float32x2_t)v339[21].u8[7];
      if (v366.i8[0] < 0) {
        float32x2_t v366 = v339[20];
      }
      if (v366)
      {
        if (sub_25B491880(*(void *)(v451 + 56), *(void *)(v451 + 64), (unsigned __int8 **)&v339[19]))
        {
          if (*(unsigned char *)(sub_25B490C80(nn, (unsigned __int8 **)&v339[19]) + 76))
          {
            uint64_t v367 = v440[16];
            uint64_t v368 = v440[17];
            if (v367 != v368)
            {
              char v369 = 0;
              uint64_t v370 = v367 + 176;
              do
              {
                sub_25B4D4E4C((uint64_t)__src, v339 + 2, (float32x2_t *)(v370 - 160), v449);
                BOOL v371 = *((float *)&v474 + 2) >= 30.0 || *(float *)&__src[24] <= 0.5;
                if (v371
                  || *((float *)&v474 + 1) >= 0.2
                  || (sub_25B4D5ABC((int8x8_t *)__b, v339 + 2, *(float32x2_t *)(v370 - 160), *(float32x2_t *)(v370 - 152)), __b[0])&& (float32x2_t v372 = vsub_f32(*(float32x2_t *)&__b[8], *(float32x2_t *)&__b[16]), sqrtf(vaddv_f32(vmul_f32(v372, v372))) >= 0.5))
                {
                  int v373 = 0;
                }
                else
                {
                  int v373 = 1;
                  char v369 = 1;
                }
                if (v477)
                {
                  uint64_t v478 = v477;
                  operator delete(v477);
                }
                if (v475[1])
                {
                  unint64_t v476 = v475[1];
                  operator delete(v475[1]);
                }
                if (v370 == v368) {
                  int v374 = 1;
                }
                else {
                  int v374 = v373;
                }
                v370 += 176;
              }
              while (v374 != 1);
              if (v369) {
                v339[11].i32[0] = 2;
              }
            }
          }
        }
      }
    }
    v339 += 22;
  }
  while (v339 != (float32x2_t *)v327);
  size_t v376 = *(float32x2_t **)(v451 + 80);
  uint64_t v375 = *(float32x2_t **)(v451 + 88);
  if (v376 == v375) {
    goto LABEL_617;
  }
  uint64_t v377 = v462;
  uint64_t v378 = v463;
  uint64_t v422 = v462;
  v424 = *(float32x2_t **)(v451 + 88);
  uint64_t v420 = v463;
  while (2)
  {
    float32x4_t v379 = v431;
    if (!sub_25B47D97C(v377, v378, (uint64_t)&v376[2])) {
      goto LABEL_611;
    }
    int v380 = (float32x2_t *)sub_25B490C80(nn, (unsigned __int8 **)&v376[19]);
    if (v376[11].i32[0] == 2 || *(void *)&v380[1] == 0) {
      goto LABEL_611;
    }
    long long v382 = v380;
    uint64_t v383 = v380 + 2;
    sub_25B40E03C((float **)__b, v376 + 2, v380 + 2);
    sub_25B400BE4(&v464, (uint64_t)(*(void *)&__b[8] - *(void *)__b) >> 2);
    long long v384 = v464;
    if ((void)v464 != *((void *)&v464 + 1))
    {
      uint64_t v385 = 0;
      uint64_t v386 = (void *)v464;
      do
        *v386++ = v385++;
      while (v386 != *((void **)&v384 + 1));
    }
    unint64_t v387 = 126 - 2 * __clz((uint64_t)(*((void *)&v384 + 1) - v384) >> 3);
    *(void *)__float32x4_t src = __b;
    if (*((void *)&v384 + 1) == (void)v384) {
      uint64_t v388 = 0;
    }
    else {
      uint64_t v388 = v387;
    }
    sub_25B490D44(v384, *((uint64_t **)&v384 + 1), (uint64_t **)__src, v388, 1);
    unint64_t v390 = (void *)*((void *)&v464 + 1);
    uint64_t v391 = (void *)v464;
    if ((void)v464 == *((void *)&v464 + 1)) {
      goto LABEL_607;
    }
    unint64_t v445 = v376 + 2;
    while (2)
    {
      if (*(float *)(*(void *)__b + 4 * *v391) > 0.1) {
        goto LABEL_605;
      }
      char v392 = 0;
      uint64_t v393 = 0;
      uint64_t v394 = *v391 & 1;
      float32x2_t v395 = v383[v394];
      uint64_t v450 = *v391 >> 1;
      __dst[0] = (void *)(v451 + 56);
      __dst[1] = v379;
      while (2)
      {
        char v396 = v392;
        v397 = (uint64_t *)__dst[v393];
        uint64_t v399 = *v397;
        uint64_t v398 = v397[1];
        while (2)
        {
          if (v399 != v398)
          {
            uint64_t v400 = *(unsigned __int8 *)(v399 + 151);
            if ((v400 & 0x80u) == 0) {
              uint64_t v401 = *(unsigned __int8 *)(v399 + 151);
            }
            else {
              uint64_t v401 = *(void *)(v399 + 136);
            }
            float32x2_t v402 = (float32x2_t)v382[18].u8[7];
            int v403 = v402.i8[0];
            if (v402.i8[0] < 0) {
              float32x2_t v402 = v382[17];
            }
            if (v401 == *(void *)&v402)
            {
              if (v403 >= 0) {
                unsigned __int8 v404 = v382 + 16;
              }
              else {
                unsigned __int8 v404 = (float32x2_t *)v382[16];
              }
              if ((v400 & 0x80) == 0)
              {
                if (*(unsigned char *)(v399 + 151))
                {
                  uint64_t v405 = 0;
                  while (*(unsigned __int8 *)(v399 + v405 + 128) == v404->u8[v405])
                  {
                    if (v400 == ++v405) {
                      goto LABEL_599;
                    }
                  }
                  goto LABEL_595;
                }
LABEL_599:
                v399 += 176;
                continue;
              }
              if (!memcmp(*(const void **)(v399 + 128), v404, *(void *)(v399 + 136))) {
                goto LABEL_599;
              }
            }
LABEL_595:
            sub_25B477E0C((uint64_t)__src, v383, (float32x2_t *)(v399 + 16));
            if ((*(float *)&__src[20] >= *(float *)(v451 + 472)
               || *(float *)&__src[8] < *(float *)(v451 + 476)
               || *(float *)&__src[24] >= *(float *)(v451 + 480))
              && sub_25B40DB9C(v395, *(float32x2_t *)(v399 + 16), *(float32x2_t *)(v399 + 24), 0.00001) < 0.2)
            {
              float32x4_t v379 = v431;
              goto LABEL_605;
            }
            goto LABEL_599;
          }
          break;
        }
        char v392 = 1;
        uint64_t v393 = 1;
        if ((v396 & 1) == 0) {
          continue;
        }
        break;
      }
      float32x2_t v406 = vsub_f32(v445[1 - v450], v383[v394 ^ 1]);
      float v407 = sqrtf(vaddv_f32(vmul_f32(v406, v406)));
      float32x4_t v379 = v431;
      if (v407 >= 0.3)
      {
        __int32 v408 = v376[14].i32[1];
        v376[14].i32[1] = v408 + 1;
        if (v408 < *(_DWORD *)(v451 + 528))
        {
LABEL_605:
          if (++v391 == v390) {
            goto LABEL_606;
          }
          continue;
        }
      }
      break;
    }
    v376[11].i32[0] = 2;
    if (v407 >= 0.15)
    {
      *(_OWORD *)__dst = *(_OWORD *)v383->f32;
      *(float32x2_t *)((unint64_t)__dst | (8 * v394)) = v445[1 - v450];
      *(_OWORD *)v383->f32 = *(_OWORD *)__dst;
      long long v409 = *(_OWORD *)v382[2].f32;
      long long v410 = v409;
      DWORD2(v410) = v382[8].i32[0];
      *(float32x2_t *)&long long v389 = v382[3];
      long long v411 = v389;
      DWORD2(v411) = v382[8].i32[1];
      DWORD2(v409) = DWORD2(v411);
      DWORD2(v389) = DWORD2(v410);
      *(_OWORD *)v382[4].f32 = v410;
      *(_OWORD *)v382[6].f32 = v411;
      float32x2_t v412 = v382[1];
      *(_OWORD *)__float32x4_t src = v409;
      *(_OWORD *)&__src[16] = v411;
      long long v474 = v389;
      *(_OWORD *)uint64_t v475 = v410;
      if (v412) {
        objc_copyStruct((void *)(*(void *)&v412 + 272), __src, 64, 1, 0);
      }
    }
    else
    {
      v382[11].i32[0] = 2;
    }
LABEL_606:
    uint64_t v391 = (void *)v464;
    uint64_t v377 = v422;
    uint64_t v375 = v424;
    uint64_t v378 = v420;
LABEL_607:
    if (v391)
    {
      *((void *)&v464 + 1) = v391;
      operator delete(v391);
    }
    if (*(void *)__b)
    {
      *(void *)&__b[8] = *(void *)__b;
      operator delete(*(void **)__b);
    }
LABEL_611:
    v376 += 22;
    if (v376 != v375) {
      continue;
    }
    break;
  }
LABEL_617:
  sub_25B488028((uint64_t *)(v451 + 56));
  sub_25B488028(v439);
  sub_25B490778((uint64_t)v483);

  kdebug_trace();
  kdebug_trace();
  sub_25B48B8C8(v451, &v462, v426, v432);
  kdebug_trace();
  if (v440[2] != v440[1])
  {
    uint64_t v418 = *(void *)(v451 + 56);
    uint64_t v419 = *(void *)(v451 + 64);
    while (v418 != v419)
    {
      v415.n128_u32[0] = *(_DWORD *)(*v431 + 68);
      sub_25B48F298(v418, v413, v414, *(float *)(*v431 + 64), v415, v416, v417);
      v418 += 176;
    }
  }
  *(void *)&src[0] = &unk_2708F21F8;
  if (v460) {
    sub_25B404120(v460);
  }
  unint64_t v13 = v429;
LABEL_624:
}

void sub_25B487990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  if (__p) {
    operator delete(__p);
  }
  int32x2_t v73 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v73;
    operator delete(v73);
  }
  sub_25B490778(v71 - 224);

  if (a63) {
    sub_25B404120(a63);
  }

  _Unwind_Resume(a1);
}

id sub_25B487D24(void *a1, id *a2)
{
  id v4 = a1 + 2;
  unint64_t v5 = a1[2];
  uint64_t v6 = (void *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    float v24 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_25B3FCAD4(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    float64x2_t v14 = (void *)(v12 + 8 * v9);
    unint64_t v15 = v12 + 8 * v13;
    unint64_t v23 = v15;
    *float64x2_t v14 = *a2;
    BOOL v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    uint64_t v17 = (void *)*a1;
    uint64_t v16 = (void *)a1[1];
    if (v16 == (void *)*a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *--v16;
        *uint64_t v16 = 0;
        *--float64x2_t v14 = v18;
      }
      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      BOOL v8 = (void *)v22.i64[1];
      unint64_t v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    unint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    id result = (id)sub_25B47C960((uint64_t)&v21);
  }
  else
  {
    id result = *a2;
    void *v6 = result;
    BOOL v8 = v6 + 1;
  }
  a1[1] = v8;
  return result;
}

void *sub_25B487E48(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_25B40F000(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B487EA8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B487EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (_OWORD *)(a3 + v6);
      objc_storeStrong((id *)(a3 + v6 + 8), *(id *)(a1 + v6 + 8));
      long long v8 = *(_OWORD *)(a1 + v6 + 16);
      long long v9 = *(_OWORD *)(a1 + v6 + 48);
      v7[2] = *(_OWORD *)(a1 + v6 + 32);
      v7[3] = v9;
      v7[1] = v8;
      long long v10 = *(_OWORD *)(a1 + v6 + 64);
      long long v11 = *(_OWORD *)(a1 + v6 + 80);
      long long v12 = *(_OWORD *)(a1 + v6 + 96);
      *(_OWORD *)((char *)v7 + 105) = *(_OWORD *)(a1 + v6 + 105);
      v7[5] = v11;
      v7[6] = v12;
      v7[4] = v10;
      std::string::operator=((std::string *)(a3 + v6 + 128), (const std::string *)(a1 + v6 + 128));
      std::string::operator=((std::string *)(a3 + v6 + 152), (const std::string *)(a1 + v6 + 152));
      v6 += 176;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t sub_25B487F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_25B47C6E4(v3 + v6, a1 + v6, a3);
      v6 += 176;
    }
    while (a1 + v6 != a2);
    v3 += v6;
  }
  return v3;
}

uint64_t *sub_25B488028(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = result;
    do
    {
      if (*(_DWORD *)(v1 + 88) == 2)
      {
        id result = (uint64_t *)sub_25B487EC4(v1 + 176, v2, v1);
        uint64_t v2 = (uint64_t)result;
        id v4 = (uint64_t *)v3[1];
        if (v4 != result)
        {
          unint64_t v5 = v4 - 22;
          uint64_t v6 = v4 - 22;
          uint64_t v7 = v4 - 22;
          do
          {
            long long v8 = (uint64_t (**)(uint64_t *))*v7;
            v7 -= 22;
            id result = (uint64_t *)(*v8)(v6);
            v5 -= 22;
            BOOL v9 = v6 == (uint64_t *)v2;
            uint64_t v6 = v7;
          }
          while (!v9);
        }
        v3[1] = v2;
      }
      else
      {
        v1 += 176;
      }
    }
    while (v1 != v2);
  }
  return result;
}

void sub_25B4880E8(float *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  id v103 = a3;
  uint64_t v99 = a4;
  if (*(unsigned char *)(a4 + 137)) {
    goto LABEL_91;
  }
LABEL_2:
  while (2)
  {
    id v7 = v103;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (v9 == *a2)
    {
LABEL_90:

      break;
    }
    unint64_t v10 = 0;
    do
    {
      if (v9 == v8) {
        goto LABEL_90;
      }
      LOBYTE(v11) = 0;
      unint64_t v12 = 0;
      uint64_t v13 = (float32x2_t *)(v8 + 176 * v10 + 16);
      do
      {
        if (v10 >= v12) {
          goto LABEL_19;
        }
        if (v11)
        {

          goto LABEL_2;
        }
        float64x2_t v14 = (float32x2_t *)(v8 + 176 * v12 + 16);
        float v15 = sub_25B3FCCE0(v13, v14, 0);
        float v17 = a1[120];
        if (v15 < v17 || v15 > (float)(180.0 - v17)) {
          goto LABEL_18;
        }
        float v19 = 90.0 - v17;
        float v20 = v17 + 90.0;
        if (v19 < v15 && v15 < v20) {
          goto LABEL_18;
        }
        float32x2_t v22 = *v13;
        int32x2_t v27 = (int32x2_t)vsub_f32(v13[1], *v13);
        *(float32x2_t *)&long long v16 = *v14;
        int32x2_t v23 = (int32x2_t)v14[1];
        float32x2_t v24 = vsub_f32((float32x2_t)v23, *v14);
        *(float *)v23.i32 = -*(float *)&v27.i32[1];
        float32x2_t v25 = (float32x2_t)vzip1_s32(v23, v27);
        float32x2_t v26 = vmul_f32(v24, v25);
        *(float *)v27.i32 = vaddv_f32(v26);
        if (*(float *)v27.i32 == 0.0)
        {
LABEL_18:
          LOBYTE(v11) = 0;
          goto LABEL_19;
        }
        int32x2_t v104 = (int32x2_t)v26;
        long long v106 = v16;
        sub_25B40D7C0((float **)&v115, v13, v14, *(double *)&v27, *(double *)&v26, *(double *)&v16);
        sub_25B40DA84((uint64_t *)&v114, v14, *v13, v13[1], v29, v30, v31);
        float v32 = *(float *)v115;
        if (*((float *)v115 + 1) < *(float *)v115) {
          float v32 = *((float *)v115 + 1);
        }
        uint64_t v33 = (float *)((char *)v115 + 8);
        if ((char *)v115 + 8 != (char *)v116)
        {
          int v34 = (float *)((char *)v115 + 12);
          if ((char *)v115 + 12 != (char *)v116)
          {
            float v35 = *v33;
            uint64_t v36 = (float *)((char *)v115 + 12);
            do
            {
              float v37 = *v36++;
              float v38 = v37;
              if (v37 < v35)
              {
                float v35 = v38;
                uint64_t v33 = v34;
              }
              int v34 = v36;
            }
            while (v36 != v116);
          }
        }
        BOOL v11 = *v33 >= 0.3 && v32 >= 0.3;
        if (!v11) {
          goto LABEL_82;
        }
        long long v39 = v114;
        if ((~*(_DWORD *)v114 & 3) == 0)
        {
          unint64_t v98 = v114;
          float32x2_t v40 = *v13;
          float32x2_t v41 = v13[1];
          float32x2_t v42 = *v14;
          float32x2_t v43 = v14[1];
          float v101 = sub_25B40D718(*v13, v41, *v14, v43);
          float v46 = sub_25B40D718(v42, v43, v40, v41);
          *(float32x2_t *)&long long v47 = vsub_f32(v40, v41);
          *(float32x2_t *)&long long v48 = vsub_f32(v42, v43);
          *(float *)&long long v48 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v48, *(float32x2_t *)&v48)));
          if (sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)&v47))) >= (float)(*(float *)&v48
                                                                                               + *(float *)&v48)
            && (objc_msgSend_confidence(*(void **)(*a2 + 176 * v10 + 8), v44, v45, v98), *(float *)&v47 > a1[144])
            && v46 >= a1[119])
          {
            id v109 = v7;
            uint64_t v87 = sub_25B487EC4(*a2 + 176 * v12 + 176, a2[1], *a2 + 176 * v12);
            uint64_t v88 = a2[1];
            if (v88 != v87)
            {
              uint64_t v89 = v88 - 176;
              uint64_t v90 = (void (***)(void))(v88 - 176);
              unint64_t v91 = (void (***)(void))(v88 - 176);
              do
              {
                unint64_t v92 = *v91;
                v91 -= 22;
                (*v92)(v90);
                v89 -= 176;
                BOOL v81 = v90 == (void (***)(void))v87;
                uint64_t v90 = v91;
              }
              while (!v81);
            }
          }
          else
          {
            float32x2_t v49 = vsub_f32(*v13, v13[1]);
            v49.f32[0] = sqrtf(vaddv_f32(vmul_f32(v49, v49)));
            float32x2_t v50 = vsub_f32(*v14, v14[1]);
            if ((float)(v49.f32[0] + v49.f32[0]) > sqrtf(vaddv_f32(vmul_f32(v50, v50)))
              || (objc_msgSend_confidence(*(void **)(*a2 + 176 * v12 + 8), v44, v45), *(float *)&v47 <= a1[144])
              || v101 < a1[119])
            {
              *((void *)&v51 + 1) = *((void *)&v106 + 1);
              *(float32x2_t *)&long long v48 = vmul_f32(vsub_f32(v22, *(float32x2_t *)&v106), v25);
              *(float32x2_t *)&long long v51 = vmla_n_f32(*(float32x2_t *)&v106, v24, vdiv_f32(vadd_f32(*(float32x2_t *)&v48, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v48, 1)), vadd_f32((float32x2_t)v104, (float32x2_t)vdup_lane_s32(v104, 1))).f32[0]);
              *(float32x2_t *)&long long v47 = *v13;
              *(float32x2_t *)&long long v48 = v13[1];
              long long v102 = v48;
              *(void *)&long long v113 = v51;
              *((void *)&v113 + 1) = v47;
              *(void *)&long long v112 = v51;
              *(float32x2_t *)&long long v47 = *v14;
              long long v105 = v47;
              long long v107 = v51;
              *((float32x2_t *)&v112 + 1) = *v14;
              float32x2_t v52 = v14[1];
              if (sub_25B3FCCE0((float32x2_t *)&v113, (float32x2_t *)&v112, 0) <= 90.0)
              {
                *(float32x2_t *)&long long v53 = v52;
                long long v105 = v53;
              }
              else
              {
                *(void *)&long long v112 = v107;
                *((float32x2_t *)&v112 + 1) = v52;
              }
              long long v54 = operator new(0x40uLL);
              v111[1] = v54 + 8;
              v111[2] = v54 + 8;
              *(_OWORD *)long long v54 = v113;
              v54[2] = v107;
              v54[3] = v102;
              *((_OWORD *)v54 + 2) = v112;
              v54[6] = v107;
              v54[7] = v105;
              v111[0] = v54;
              sub_25B481B8C(&__p, (float32x2_t **)v111, v7, v99);
              float v56 = *((float *)__p + 2);
              uint64_t v100 = (float *)__p;
              if (*(float *)__p < v56 && *((float *)__p + 1) >= v56)
              {
                uint64_t v66 = *a2 + 176 * v10;
                long long v64 = v107;
                long long v67 = v107;
                DWORD2(v67) = *(_DWORD *)(v66 + 64);
                long long v65 = v102;
                long long v68 = v102;
                DWORD2(v68) = *(_DWORD *)(v66 + 68);
                *(void *)(v66 + 16) = v107;
                *(void *)(v66 + 24) = v102;
                DWORD2(v64) = DWORD2(v68);
                DWORD2(v65) = DWORD2(v67);
                *(_OWORD *)(v66 + 32) = v67;
                *(_OWORD *)(v66 + 48) = v68;
                uint64_t v69 = *(void *)(v66 + 8);
                long long src = v64;
                long long v118 = v68;
                long long v119 = v65;
                long long v120 = v67;
                if (v69) {
                  objc_copyStruct((void *)(v69 + 272), &src, 64, 1, 0);
                }
                uint64_t v62 = *a2;
                uint64_t v63 = *a2 + 176 * v12;
                *(_OWORD *)(v63 + 16) = v112;
                *(void *)&long long v64 = *(void *)(v63 + 16);
                *(void *)&long long v65 = *(void *)(v63 + 24);
              }
              else
              {
                uint64_t v57 = *a2 + 176 * v10;
                *((void *)&v58 + 1) = *((void *)&v113 + 1);
                *(_OWORD *)(v57 + 16) = v113;
                *(void *)&long long v58 = *(void *)(v57 + 16);
                *(void *)&long long v55 = *(void *)(v57 + 24);
                long long v59 = v58;
                DWORD2(v59) = *(_DWORD *)(v57 + 64);
                long long v60 = v55;
                DWORD2(v60) = *(_DWORD *)(v57 + 68);
                DWORD2(v58) = DWORD2(v60);
                DWORD2(v55) = DWORD2(v59);
                *(_OWORD *)(v57 + 32) = v59;
                *(_OWORD *)(v57 + 48) = v60;
                uint64_t v61 = *(void *)(v57 + 8);
                long long src = v58;
                long long v118 = v60;
                long long v119 = v55;
                long long v120 = v59;
                if (v61) {
                  objc_copyStruct((void *)(v61 + 272), &src, 64, 1, 0);
                }
                uint64_t v62 = *a2;
                uint64_t v63 = *a2 + 176 * v12;
                long long v65 = v105;
                long long v64 = v107;
                *(void *)(v63 + 16) = v107;
                *(void *)(v63 + 24) = v105;
              }
              long long v70 = v64;
              DWORD2(v70) = *(_DWORD *)(v63 + 64);
              long long v71 = v65;
              DWORD2(v71) = *(_DWORD *)(v63 + 68);
              *(_OWORD *)(v63 + 32) = v70;
              *(_OWORD *)(v63 + 48) = v71;
              DWORD2(v64) = DWORD2(v71);
              DWORD2(v65) = DWORD2(v70);
              uint64_t v72 = *(void *)(v62 + 176 * v12 + 8);
              long long src = v64;
              long long v118 = v71;
              long long v119 = v65;
              long long v120 = v70;
              if (v72) {
                objc_copyStruct((void *)(v72 + 272), &src, 64, 1, 0);
              }
              int32x2_t v73 = v100;
              float v74 = v100[2];
              if (*v100 < v74 && v100[1] < v100[3])
              {
                uint64_t v75 = sub_25B487EC4(*a2 + 176 * v10 + 176, a2[1], *a2 + 176 * v10);
                uint64_t v76 = a2[1];
                if (v76 != v75)
                {
                  id v108 = v7;
                  uint64_t v77 = v76 - 176;
                  uint64_t v78 = (void (***)(void))(v76 - 176);
                  float32x2_t v79 = (void (***)(void))(v76 - 176);
                  do
                  {
                    uint64_t v80 = *v79;
                    v79 -= 22;
                    (*v80)(v78);
                    v77 -= 176;
                    BOOL v81 = v78 == (void (***)(void))v75;
                    uint64_t v78 = v79;
                  }
                  while (!v81);
                  goto LABEL_67;
                }
                goto LABEL_68;
              }
              if (*v100 < v74 || v100[1] < v100[3]) {
                goto LABEL_69;
              }
              uint64_t v75 = sub_25B487EC4(*a2 + 176 * v12 + 176, a2[1], *a2 + 176 * v12);
              uint64_t v82 = a2[1];
              if (v82 != v75)
              {
                id v108 = v7;
                uint64_t v83 = v82 - 176;
                unint64_t v84 = (void (***)(void))(v82 - 176);
                float32x2_t v85 = (void (***)(void))(v82 - 176);
                do
                {
                  float32x2_t v86 = *v85;
                  v85 -= 22;
                  (*v86)(v84);
                  v83 -= 176;
                  BOOL v81 = v84 == (void (***)(void))v75;
                  unint64_t v84 = v85;
                }
                while (!v81);
LABEL_67:
                id v7 = v108;
              }
LABEL_68:
              a2[1] = v75;
              int32x2_t v73 = __p;
              if (__p) {
LABEL_69:
              }
                operator delete(v73);
              if (v111[0]) {
                operator delete(v111[0]);
              }
LABEL_82:
              long long v39 = v114;
              if (!v114) {
                goto LABEL_84;
              }
              goto LABEL_83;
            }
            id v109 = v7;
            uint64_t v87 = sub_25B487EC4(*a2 + 176 * v10 + 176, a2[1], *a2 + 176 * v10);
            uint64_t v93 = a2[1];
            if (v93 != v87)
            {
              uint64_t v94 = v93 - 176;
              float32x2_t v95 = (void (***)(void))(v93 - 176);
              float v96 = (void (***)(void))(v93 - 176);
              do
              {
                uint64_t v97 = *v96;
                v96 -= 22;
                (*v97)(v95);
                v94 -= 176;
                BOOL v81 = v95 == (void (***)(void))v87;
                float32x2_t v95 = v96;
              }
              while (!v81);
            }
          }
          a2[1] = v87;
          id v7 = v109;
          goto LABEL_82;
        }
        LOBYTE(v11) = 0;
LABEL_83:
        operator delete(v39);
LABEL_84:
        if (v115) {
          operator delete(v115);
        }
LABEL_19:
        ++v12;
        uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        unint64_t v28 = 0x2E8BA2E8BA2E8BA3 * ((v9 - *a2) >> 4);
      }
      while (v12 < v28);
      ++v10;
    }
    while (v10 < v28 && !v11);

    if (v11) {
      continue;
    }
    break;
  }
LABEL_91:
}

void sub_25B4888AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  operator delete(__p);
  if (v34) {
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_25B488940(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t a7, uint64_t a8, int32x2_t *a9)
{
  id v551 = a5;
  unint64_t v562 = a2;
  uint64_t v13 = a2 + 1;
  uint64_t v14 = a2[1];
  uint64_t v554 = v13;
  uint64_t v15 = v13[1];
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    unint64_t v17 = (v15 - v14) / 176;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    uint64_t v18 = (_DWORD *)(v14 + 108);
    do
    {
      _DWORD *v18 = v16;
      v18 += 44;
      ++v16;
    }
    while (v17 != v16);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v561 = (uint64_t *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20 != v19)
  {
    uint64_t v21 = 0;
    unint64_t v22 = (v20 - v19) / 176;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    int32x2_t v23 = (_DWORD *)(v19 + 108);
    do
    {
      *int32x2_t v23 = v21;
      v23 += 44;
      ++v21;
    }
    while (v22 != v21);
  }
  if (v15 != v14)
  {
    do
    {
      *(unsigned char *)(v14 + 76) = sub_25B47D97C(*a3, a3[1], v14 + 16);
      *(unsigned char *)(v14 + 77) = sub_25B47D97C(*a4, a4[1], v14 + 16);
      v14 += 176;
    }
    while (v14 != v15);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
  }
  while (v19 != v20)
  {
    *(unsigned char *)(v19 + 76) = sub_25B47D97C(*a3, a3[1], v19 + 16);
    *(unsigned char *)(v19 + 77) = sub_25B47D97C(*a4, a4[1], v19 + 16);
    v19 += 176;
  }
  float32x2_t v24 = (uint64_t *)(a1 + 56);
  uint64_t v25 = v562[1];
  uint64_t v26 = v562[2];
  if (v25 != v26)
  {
    do
    {
      uint64_t v27 = *(void *)(v25 + 8);
      if (v27) {
        *(_DWORD *)(v27 + 116) = 3;
      }
      v25 += 176;
    }
    while (v25 != v26);
    unint64_t v28 = (float32x2_t *)v562[1];
    for (uint64_t i = (float32x2_t *)v562[2]; v28 != i; v28 += 22)
    {
      if (v28[9].i8[4])
      {
        float32x2_t v30 = v28[1];
        if (v30) {
          *(_DWORD *)(*(void *)&v30 + 116) = 0;
        }
      }
      else if (v28[9].i8[5] && sub_25B49348C(a1, v28, v562[1], v562[2]))
      {
        float32x2_t v31 = v28[1];
        if (v31) {
          *(_DWORD *)(*(void *)&v31 + 116) = 0;
        }
        v28[9].i8[4] = 1;
      }
    }
  }
  uint64_t v32 = *(void *)(a1 + 56);
  uint64_t v33 = *(void *)(a1 + 64);
  if (v32 == v33) {
    goto LABEL_48;
  }
  do
  {
    if (!*(unsigned char *)(v32 + 76))
    {
      uint64_t v34 = *(void *)(v32 + 8);
      if (v34)
      {
        if (!*(_DWORD *)(v34 + 116)) {
          *(_DWORD *)(v34 + 116) = 1;
        }
      }
    }
    v32 += 176;
  }
  while (v32 != v33);
  uint64_t v32 = *(void *)(a1 + 56);
  uint64_t v35 = *(void *)(a1 + 64);
  if (v32 == v35)
  {
LABEL_48:
    uint64_t v37 = v32;
  }
  else
  {
    do
    {
      if (*(unsigned char *)(v32 + 76))
      {
        uint64_t v36 = *(void *)(v32 + 8);
        if (v36) {
          *(_DWORD *)(v36 + 116) = 0;
        }
      }
      v32 += 176;
    }
    while (v32 != v35);
    uint64_t v37 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 64);
    if (v37 == v32)
    {
      uint64_t v32 = *(void *)(a1 + 56);
    }
    else
    {
      uint64_t v38 = *(void *)(a1 + 56);
      do
      {
        if (*(unsigned char *)(v38 + 76)) {
          *(_DWORD *)(v38 + 88) = -1;
        }
        v38 += 176;
      }
      while (v38 != v32);
    }
  }
  v573 = (float *)(a1 + 464);
  sub_25B4D6DCC((uint64_t)v588, v37, v32, v554, (float *)(a1 + 464));
  uint64_t v39 = *(void *)(a1 + 56);
  uint64_t v556 = *(void *)(a1 + 64);
  uint64_t v569 = a1;
  if (v39 != v556)
  {
    uint64_t v555 = 0;
    do
    {
      uint64_t v40 = v562[23];
      uint64_t v570 = v562[24];
      if (v40 != v570)
      {
        uint64_t v558 = v39;
        float v565 = (float32x2_t *)(v39 + 16);
        while (1)
        {
          uint64_t v41 = *(void *)v40;
          sub_25B40E03C((float **)v599, (float32x2_t *)(*(void *)(*(void *)v40 + 32) + 16), (float32x2_t *)(*(void *)(*(void *)v40 + 32) + 192));
          float32x2_t v42 = v599[0];
          float32x2_t v43 = (float *)((char *)v599[0] + 4);
          BOOL v44 = v599[0] == v599[1] || v43 == v599[1];
          uint64_t v45 = (float *)v599[0];
          if (!v44)
          {
            float v46 = *(float *)v599[0];
            uint64_t v45 = (float *)v599[0];
            long long v47 = (float *)((char *)v599[0] + 4);
            do
            {
              float v48 = *v47++;
              float v49 = v48;
              if (v48 < v46)
              {
                float v46 = v49;
                uint64_t v45 = v43;
              }
              float32x2_t v43 = v47;
            }
            while (v47 != v599[1]);
          }
          uint64_t v50 = *(void *)(v41 + 32);
          LODWORD(src[1]) = 0;
          src[0] = *(void **)(v50 + 32);
          DWORD2(v615) = 0;
          *(void *)&long long v615 = *(void *)(v50 + 48);
          long long v51 = (float32x4_t *)operator new(0x10uLL);
          *long long v51 = *(float32x4_t *)&src[2 * ((int)((unint64_t)((char *)v45 - v42) >> 2) / -2) + 2];
          float32x2_t v52 = v51 + 1;
          long long v54 = *(float32x4_t **)(v41 + 32);
          long long v53 = *(float32x4_t **)(v41 + 40);
          long long v55 = v51 + 1;
          if (v54 != v53)
          {
            do
            {
              float32x4_t v56 = v54[2];
              float32x4_t v57 = v54[3];
              uint64_t v58 = v52 - v51;
              float32x4_t v59 = v52[-1];
              float32x4_t v60 = vsubq_f32(v59, v56);
              float32x4_t v61 = vsubq_f32(v59, v57);
              if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v60, v60))) >= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v61, v61))))
              {
                v56.i32[2] = 0;
                if (v52 >= v55)
                {
                  float32x4_t v579 = v56;
                  unint64_t v65 = v58 + 1;
                  if ((unint64_t)(v58 + 1) >> 60) {
LABEL_796:
                  }
                    sub_25B3FBC4C();
                  if (((char *)v55 - (char *)v51) >> 3 > v65) {
                    unint64_t v65 = ((char *)v55 - (char *)v51) >> 3;
                  }
                  if ((unint64_t)((char *)v55 - (char *)v51) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v66 = v65;
                  }
                  if (v66) {
                    unint64_t v66 = (unint64_t)sub_25B3FFAEC(v66);
                  }
                  else {
                    uint64_t v67 = 0;
                  }
                  long long v71 = (float32x4_t *)(v66 + 16 * v58);
                  long long v55 = (float32x4_t *)(v66 + 16 * v67);
                  *long long v71 = v579;
                  uint64_t v72 = v71 + 1;
                  if (v52 == v51) {
                    goto LABEL_93;
                  }
                  do
                  {
                    float32x4_t v73 = v52[-1];
                    --v52;
                    v71[-1] = v73;
                    --v71;
                  }
                  while (v52 != v51);
                  if (v51) {
LABEL_93:
                  }
                    operator delete(v51);
                  long long v51 = v71;
                  float32x2_t v52 = v72;
                }
                else
                {
                  *v52++ = v56;
                }
              }
              else
              {
                v57.i32[2] = 0;
                if (v52 >= v55)
                {
                  float32x4_t v578 = v57;
                  unint64_t v62 = v58 + 1;
                  if ((unint64_t)(v58 + 1) >> 60) {
                    goto LABEL_796;
                  }
                  if (((char *)v55 - (char *)v51) >> 3 > v62) {
                    unint64_t v62 = ((char *)v55 - (char *)v51) >> 3;
                  }
                  if ((unint64_t)((char *)v55 - (char *)v51) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v63 = v62;
                  }
                  if (v63) {
                    unint64_t v63 = (unint64_t)sub_25B3FFAEC(v63);
                  }
                  else {
                    uint64_t v64 = 0;
                  }
                  long long v68 = (float32x4_t *)(v63 + 16 * v58);
                  long long v55 = (float32x4_t *)(v63 + 16 * v64);
                  float32x4_t *v68 = v578;
                  uint64_t v69 = v68 + 1;
                  if (v52 == v51) {
                    goto LABEL_87;
                  }
                  do
                  {
                    float32x4_t v70 = v52[-1];
                    --v52;
                    v68[-1] = v70;
                    --v68;
                  }
                  while (v52 != v51);
                  if (v51) {
LABEL_87:
                  }
                    operator delete(v51);
                  long long v51 = v68;
                  float32x2_t v52 = v69;
                }
                else
                {
                  *v52++ = v57;
                }
              }
              v54 += 11;
            }
            while (v54 != v53);
            float32x2_t v42 = v599[0];
          }
          if (v42) {
            operator delete(v42);
          }
          float32x4_t v575 = v52[-1];
          float32x4_t v580 = *v51;
          operator delete(v51);
          *(void *)&long long v74 = v580.i64[0];
          *((void *)&v74 + 1) = v575.i64[0];
          *(_OWORD *)unint64_t v599 = v74;
          sub_25B4D4E4C((uint64_t)src, v565, (float32x2_t *)v599, v573);
          if (*((float *)&v616 + 1) < 0.1 && *((float *)&v616 + 2) < 5.0)
          {
            float v76 = *((float *)&v615 + 1);
            if (*((float *)&v615 + 1) >= *(float *)&v615) {
              float v76 = *(float *)&v615;
            }
            if (v76 >= 0.95) {
              break;
            }
          }
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v617[1])
          {
            *(void **)&long long v618 = v617[1];
            operator delete(v617[1]);
          }
          v40 += 8;
          if (v40 == v570)
          {
            uint64_t v39 = v558;
            float32x2_t v24 = (uint64_t *)(a1 + 56);
            goto LABEL_118;
          }
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v617[1])
        {
          *(void **)&long long v618 = v617[1];
          operator delete(v617[1]);
        }
        uint64_t v39 = v558;
        *(_DWORD *)(v558 + 88) = 2;
        uint64_t v555 = v41;
        float32x2_t v24 = (uint64_t *)(a1 + 56);
      }
LABEL_118:
      v39 += 176;
    }
    while (v39 != v556);
    uint64_t v77 = *(void *)(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 64);
    if (v77 == v39)
    {
      uint64_t v39 = *(void *)(a1 + 56);
    }
    else
    {
      do
      {
        if (*(_DWORD *)(v77 + 88) == 2)
        {
          uint64_t v39 = sub_25B487EC4(v77 + 176, v39, v77);
          uint64_t v78 = *(void *)(a1 + 64);
          if (v78 != v39)
          {
            uint64_t v79 = v78 - 176;
            uint64_t v80 = (void (***)(void))(v78 - 176);
            BOOL v81 = (void (***)(void))(v78 - 176);
            do
            {
              uint64_t v82 = *v81;
              v81 -= 22;
              uint64_t v83 = v39;
              (*v82)(v80);
              uint64_t v39 = v83;
              v79 -= 176;
              BOOL v44 = v80 == (void (***)(void))v83;
              uint64_t v80 = v81;
            }
            while (!v44);
          }
          *(void *)(a1 + 64) = v39;
        }
        else
        {
          v77 += 176;
        }
      }
      while (v77 != v39);
    }
    if (v555)
    {
      uint64_t v84 = *(void *)(v555 + 32);
      uint64_t v85 = *(void *)(v555 + 40);
      if (v84 != v85)
      {
        do
        {
          double v86 = sub_25B3F6148((uint64_t)src);
          objc_msgSend_confidence(*(void **)(v84 + 8), v87, v88, v86);
          float v90 = v89;
          unint64_t v91 = objc_opt_new();
          sub_25B49371C((uint64_t)src, (float *)(v84 + 32), 1, v91, v90);

          unint64_t v93 = *(void *)(a1 + 64);
          if (v93 >= *(void *)(a1 + 72))
          {
            uint64_t v94 = sub_25B47C818(v24, (uint64_t)src, v92);
          }
          else
          {
            sub_25B47C6E4(*(void *)(a1 + 64), (uint64_t)src, v92);
            uint64_t v94 = v93 + 176;
            *(void *)(a1 + 64) = v93 + 176;
          }
          *(void *)(a1 + 64) = v94;
          sub_25B3F5FE8((uint64_t)src);
          v84 += 176;
        }
        while (v84 != v85);
        uint64_t v39 = *(void *)(a1 + 64);
      }
    }
  }
  sub_25B4D6DCC((uint64_t)v587, *v24, v39, v554, v573);
  float32x2_t v95 = (float32x2_t *)v562[1];
  float v96 = (float32x2_t *)v562[2];
  if (v95 != v96)
  {
    uint64_t v97 = a1 + 48;
    v581 = (uint64_t *)(a1 + 912);
    while (!v95[9].i8[4])
    {
      v95[11].i32[0] = 5;
LABEL_189:
      v95 += 22;
      if (v95 == v96) {
        goto LABEL_190;
      }
    }
    sub_25B490110((uint64_t)v599, (unsigned __int8 *)&v95[16], v587);
    if (obj[1])
    {
LABEL_188:
      sub_25B49052C((uint64_t)v599);
      goto LABEL_189;
    }
    objc_msgSend_confidence(*(void **)&v95[1], v98, v99);
    if (v101 < *(float *)(a1 + 532)
      || (float32x2_t v102 = vsub_f32(v95[2], v95[3]), sqrtf(vaddv_f32(vmul_f32(v102, v102))) < *(float *)(a1 + 536)))
    {
      if ((sub_25B49348C(a1, v95, v562[1], v562[2]) & 1) == 0 && !sub_25B491E50(a1, v95, v562[1], v562[2]))
      {
LABEL_187:
        v95[11].i32[0] = 5;
        goto LABEL_188;
      }
      objc_msgSend_confidence(*(void **)&v95[1], v103, v104);
      if (v105 < *(float *)(a1 + 576))
      {
        long long v106 = sub_25B414548(v587, (unsigned __int8 *)&v95[16]);
        if (v106)
        {
          long long v107 = v106 + 56;
          while (1)
          {
            long long v107 = *(unsigned __int8 **)v107;
            if (!v107) {
              break;
            }
            BOOL v108 = *((_DWORD *)v107 + 10) == 2 || v107[52] != 0;
            uint64_t v109 = sub_25B490C80(v97, (unsigned __int8 **)v107 + 2);
            objc_msgSend_confidence(*(void **)(v109 + 8), v110, v111);
            float v114 = v113;
            if (v113 <= *(float *)(a1 + 576))
            {
              objc_msgSend_confidence(*(void **)&v95[1], v112, v100);
              BOOL v115 = (float)(v114 - v116) > 0.2;
            }
            else
            {
              BOOL v115 = 1;
            }
            if (v108 && v115)
            {
              v95[11].i32[0] = 5;
              float32x2_t v24 = v561;
              goto LABEL_188;
            }
          }
        }
        uint64_t v117 = *(float32x2_t **)(a1 + 912);
        long long v118 = *(float32x2_t **)(a1 + 920);
        if (v117 == v118)
        {
          float32x2_t v24 = v561;
        }
        else
        {
          int v119 = 0;
          do
          {
            sub_25B4D4E4C((uint64_t)src, v95 + 2, v117 + 2, v573);
            if (!LOBYTE(v617[0])) {
              goto LABEL_167;
            }
            float v120 = *((float *)&v615 + 1);
            if (*((float *)&v615 + 1) >= *(float *)&v615) {
              float v120 = *(float *)&v615;
            }
            if (v120 > 0.5)
            {
              sub_25B491B04((uint64_t)v117, (float *)&v95[4]);
              objc_msgSend_confidence(*(void **)&v95[1], v121, v122);
              float32x2_t v124 = v117[1];
              if (v124) {
                *(_DWORD *)(*(void *)&v124 + 108) = v123;
              }
              char v125 = 1;
              int v119 = 2;
            }
            else
            {
LABEL_167:
              char v125 = 0;
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v617[1])
            {
              *(void **)&long long v618 = v617[1];
              operator delete(v617[1]);
            }
            v117 += 22;
            if (v117 == v118) {
              char v126 = 1;
            }
            else {
              char v126 = v125;
            }
          }
          while ((v126 & 1) == 0);
          a1 = v569;
          float32x2_t v24 = v561;
          if (v119) {
            goto LABEL_177;
          }
          uint64_t v117 = *(float32x2_t **)(v569 + 920);
        }
        if ((unint64_t)v117 >= *(void *)(a1 + 928))
        {
          uint64_t v129 = sub_25B47C818(v581, (uint64_t)v95, v100);
        }
        else
        {
          sub_25B47C6E4((uint64_t)v117, (uint64_t)v95, v100);
          uint64_t v129 = (uint64_t)&v117[22];
          *(void *)(a1 + 920) = v117 + 22;
        }
        *(void *)(a1 + 920) = v129;
        goto LABEL_187;
      }
    }
LABEL_177:
    v95[11].i32[0] = 4;
    unint64_t v127 = *(void *)(a1 + 64);
    if (v127 >= *(void *)(a1 + 72))
    {
      uint64_t v128 = sub_25B47C818(v24, (uint64_t)v95, v100);
    }
    else
    {
      sub_25B47C6E4(*(void *)(a1 + 64), (uint64_t)v95, v100);
      uint64_t v128 = v127 + 176;
      *(void *)(a1 + 64) = v127 + 176;
    }
    *(void *)(a1 + 64) = v128;
    goto LABEL_188;
  }
LABEL_190:
  id v130 = v551;
  uint64_t v131 = *(void *)(a1 + 56);
  uint64_t v132 = *(void *)(a1 + 64);
  v576 = v130;
  if (v131 == v132)
  {
    unint64_t v140 = v130;
    long long v627 = 0uLL;
    uint64_t v628 = 0;
  }
  else
  {
    do
    {
      sub_25B490110((uint64_t)src, (unsigned __int8 *)(v131 + 128), v587);
      unint64_t v133 = (unsigned __int8 **)v615;
      if ((void)v615)
      {
        uint64_t v134 = 0;
        uint64_t v135 = v562[1];
        uint64_t v136 = v562[2];
        do
        {
          if (sub_25B491880(v135, v136, v133 + 2)) {
            v134 += *(unsigned __int8 *)(sub_25B490C80((uint64_t)v562, v133 + 2) + 76);
          }
          unint64_t v133 = (unsigned __int8 **)*v133;
        }
        while (v133);
        if (v134)
        {
          *(_WORD *)(v131 + 76) = 257;
          uint64_t v137 = *(void *)(v131 + 8);
          if (v137) {
            *(_DWORD *)(v137 + 116) = 0;
          }
        }
      }
      sub_25B49052C((uint64_t)src);
      v131 += 176;
    }
    while (v131 != v132);
    uint64_t v139 = *(float32x2_t **)(a1 + 56);
    char v138 = *(float32x2_t **)(a1 + 64);
    long long v627 = 0uLL;
    uint64_t v628 = 0;
    float32x2_t v24 = v561;
    unint64_t v140 = v576;
    if (v139 != v138)
    {
      p_s1 = &__s1;
      v566 = (uint64_t *)(a1 + 80);
      v559 = v562 + 4;
      while (1)
      {
        sub_25B490110((uint64_t)&v624, (unsigned __int8 *)&v139[16], v587);
        if (!v139[9].i8[5]) {
          goto LABEL_241;
        }
        uint64_t v143 = v626;
        if (!v139[9].i8[4] && v626 != 0) {
          goto LABEL_241;
        }
        uint64_t v145 = (_DWORD *)v139[1];
        if (v145 && v145[29] == 3) {
          v139[11].i32[0] = 2;
        }
        if (v143) {
          break;
        }
        __int32 v148 = v139[11].i32[0];
        __int32 v149 = v139[12].i32[1];
        if (v148 != 4) {
          v139[12].i32[1] = ++v149;
        }
        if (v149 >= *(_DWORD *)(a1 + 580))
        {
          objc_msgSend_confidence(v145, v141, v142);
          if (v150 < *(float *)(a1 + 576)) {
            goto LABEL_275;
          }
          __int32 v148 = v139[11].i32[0];
        }
        if (v148 != 4)
        {
          uint64_t v151 = sub_25B414548(v587, (unsigned __int8 *)&v139[16]);
          if (v151)
          {
            BOOL v152 = (unsigned __int8 **)*((void *)v151 + 7);
            if (v152)
            {
              uint64_t v153 = 0;
              do
              {
                if (*((unsigned char *)v152 + 52))
                {
                  uint64_t v154 = sub_25B490C80((uint64_t)v562, v152 + 2);
                  sub_25B47C6E4((uint64_t)src, v154, v155);
                  if (DWORD2(__p) == 4)
                  {
                    float32x2_t v156 = vsub_f32(*(float32x2_t *)&v615, *(float32x2_t *)((char *)&v615 + 8));
                    if (sqrtf(vaddv_f32(vmul_f32(v156, v156))) > 0.3) {
                      ++v153;
                    }
                  }
                  sub_25B3F5FE8((uint64_t)src);
                }
                BOOL v152 = (unsigned __int8 **)*v152;
              }
              while (v152);
              if (v153) {
                goto LABEL_275;
              }
            }
          }
        }
        unsigned __int16 v157 = sub_25B4929CC(a1, (uint64_t)v139, v576, a7, a8, a9, a6);
        if (v157 >= 0x100u && (_BYTE)v157)
        {
          char v158 = sub_25B492F88((float *)a1, v139, v566, v559, (float32x2_t **)v554, v576, a7);
          __int32 v159 = v139[13].i32[0];
          if ((v158 & 1) == 0) {
            v139[13].i32[0] = ++v159;
          }
          if (v159 < *(_DWORD *)(a1 + 520)) {
            goto LABEL_242;
          }
LABEL_273:
          if (sub_25B49348C(a1, v139, *(void *)(a1 + 56), *(void *)(a1 + 64))
            && v139[13].i32[0] < *(_DWORD *)(a1 + 520))
          {
            goto LABEL_242;
          }
LABEL_275:
          v139[11].i32[0] = 2;
          goto LABEL_242;
        }
        if (!(_BYTE)v157) {
          goto LABEL_273;
        }
LABEL_242:
        sub_25B49052C((uint64_t)&v624);
        v139 += 22;
        if (v139 == v138) {
          goto LABEL_338;
        }
      }
      if (v143 == 2)
      {
        unint64_t v147 = (float *)v625;
        if (*(char *)(v625 + 39) < 0)
        {
          sub_25B4002F4(__dst, *(void **)(v625 + 16), *(void *)(v625 + 24));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v625 + 16);
          uint64_t v613 = *(void *)(v625 + 32);
        }
        uint64_t v160 = *(void *)v147;
        if (*(char *)(*(void *)v147 + 39) < 0)
        {
          sub_25B4002F4(v610, *(void **)(v160 + 16), *(void *)(v160 + 24));
        }
        else
        {
          *(_OWORD *)v610 = *(_OWORD *)(v160 + 16);
          uint64_t v611 = *(void *)(v160 + 32);
        }
        int32x2_t v176 = (float32x2_t *)sub_25B490C80((uint64_t)v562, (unsigned __int8 **)__dst);
        uint64_t v177 = (float32x2_t *)sub_25B490C80((uint64_t)v562, (unsigned __int8 **)v610);
        sub_25B40E03C(&v609, v176 + 2, v177 + 2);
        float v178 = v609;
        if (v147[14] < v147[15])
        {
          float v179 = v609[3];
          if (v179 >= v609[2]) {
            float v179 = v609[2];
          }
          float v180 = v609[1];
          if (v180 >= *v609) {
            float v180 = *v609;
          }
          if (v179 >= v180) {
            float v179 = v180;
          }
          if (*(float *)(v160 + 56) < *(float *)(v160 + 60) && v179 >= 0.3)
          {
            sub_25B4928CC(src, v139, v176[2], v176[3]);
            if (LOBYTE(src[0]))
            {
              sub_25B4928CC(v599, (float32x2_t *)&v615, v177[2], v177[3]);
              if (LOBYTE(v599[0]))
              {
                objc_storeStrong((id *)&v615 + 1, obj[1]);
                long long v620 = v605;
                v621[0] = v606[0];
                *(_OWORD *)((char *)v621 + 9) = *(_OWORD *)((char *)v606 + 9);
                long long v616 = v601;
                *(_OWORD *)v617 = v602;
                long long v618 = v603;
                long long __p = v604;
                std::string::operator=(&v622, &v607);
                std::string::operator=(&v623, &v608);
                float32x2_t v181 = vsub_f32(*(float32x2_t *)&v616, *(float32x2_t *)((char *)&v616 + 8));
                float32x2_t v24 = v561;
                if (sqrtf(vaddv_f32(vmul_f32(v181, v181))) < *(float *)(a1 + 516)
                  || sub_25B4929CC(v569, (uint64_t)&v615, v576, a7, a8, a9, a6))
                {
LABEL_270:
                  v139[11].i32[0] = 0;
                  sub_25B3F5FE8((uint64_t)obj);
                  sub_25B3F5FE8((uint64_t)&v615);
                  a1 = v569;
                  if (!v178) {
                    goto LABEL_290;
                  }
LABEL_289:
                  operator delete(v178);
LABEL_290:
                  if (SHIBYTE(v611) < 0) {
                    operator delete(v610[0]);
                  }
                  if ((SHIBYTE(v613) & 0x80000000) == 0) {
                    goto LABEL_242;
                  }
                  uint64_t v175 = __dst[0];
                  goto LABEL_294;
                }
                uint64_t v199 = *(void *)(v569 + 56);
                uint64_t v198 = *(void *)(v569 + 64);
                while (2)
                {
                  if (v199 == v198) {
                    goto LABEL_270;
                  }
                  sub_25B47C6E4((uint64_t)v592, v199, v182);
                  uint64_t v200 = v598;
                  if ((v598 & 0x80u) == 0) {
                    size_t v201 = v598;
                  }
                  else {
                    size_t v201 = __n;
                  }
                  float32x2_t v202 = (float32x2_t)v139[18].u8[7];
                  int v203 = v202.i8[0];
                  if (v202.i8[0] < 0) {
                    float32x2_t v202 = v139[17];
                  }
                  if (v201 == *(void *)&v202)
                  {
                    if (v203 >= 0) {
                      uint64_t v204 = v139 + 16;
                    }
                    else {
                      uint64_t v204 = (float32x2_t *)v139[16];
                    }
                    if ((v598 & 0x80) == 0)
                    {
                      if (v598)
                      {
                        uint64_t v205 = p_s1;
                        while (*(unsigned __int8 *)v205 == v204->u8[0])
                        {
                          uint64_t v205 = (void **)((char *)v205 + 1);
                          uint64_t v204 = (float32x2_t *)((char *)v204 + 1);
                          if (!--v200) {
                            goto LABEL_316;
                          }
                        }
                        break;
                      }
LABEL_316:
                      sub_25B3F5FE8((uint64_t)v592);
                      v199 += 176;
                      continue;
                    }
                    if (!memcmp(__s1, v204, __n)) {
                      goto LABEL_316;
                    }
                  }
                  break;
                }
                sub_25B477E0C((uint64_t)v589, (float32x2_t *)&v593, (float32x2_t *)&v616);
                if (*(float *)&v589[1] >= *(float *)(v569 + 568)
                  && v591 < *(float *)(v569 + 564)
                  && v590 < *(float *)(v569 + 560))
                {
                  sub_25B3F5FE8((uint64_t)v592);
                  v139[11].i32[0] = 1;
                  float32x2_t v209 = vsub_f32(v176[2], v176[3]);
                  float32x2_t v210 = vsub_f32(v177[2], v177[3]);
                  if (sqrtf(vaddv_f32(vmul_f32(v209, v209))) <= sqrtf(vaddv_f32(vmul_f32(v210, v210))))
                  {
                    sub_25B491B04((uint64_t)v139, (float *)&v177[4]);
                    a1 = v569;
                    objc_msgSend_confidence(*(void **)&v177[1], v217, v218);
                    float32x2_t v220 = v139[1];
                    if (v220) {
                      *(_DWORD *)(*(void *)&v220 + 108) = v219;
                    }
                    v176[11].i32[0] = 1;
                    float32x2_t v216 = v176[1];
                    uint64_t v177 = v176;
                    if (!*(void *)&v216)
                    {
LABEL_335:
                      sub_25B4936C8((uint64_t *)&v627, (uint64_t)v177, v213);
                      sub_25B3F5FE8((uint64_t)obj);
                      sub_25B3F5FE8((uint64_t)&v615);
                      if (v178) {
                        goto LABEL_289;
                      }
                      goto LABEL_290;
                    }
                  }
                  else
                  {
                    sub_25B491B04((uint64_t)v139, (float *)&v176[4]);
                    a1 = v569;
                    objc_msgSend_confidence(*(void **)&v176[1], v211, v212);
                    float32x2_t v215 = v139[1];
                    if (v215) {
                      *(_DWORD *)(*(void *)&v215 + 108) = v214;
                    }
                    v177[11].i32[0] = 1;
                    float32x2_t v216 = v177[1];
                    if (!*(void *)&v216) {
                      goto LABEL_335;
                    }
                  }
                  *(_DWORD *)(*(void *)&v216 + 116) = 0;
                  goto LABEL_335;
                }
                goto LABEL_316;
              }
              sub_25B3F5FE8((uint64_t)obj);
            }
            sub_25B3F5FE8((uint64_t)&v615);
          }
        }
        v139[12].i32[1] = 0;
        v139[11].i32[0] = 0;
        float32x2_t v24 = v561;
        if (v178) {
          goto LABEL_289;
        }
        goto LABEL_290;
      }
      if (v143 != 1)
      {
        v139[12].i32[1] = 0;
LABEL_241:
        v139[11].i32[0] = 0;
        goto LABEL_242;
      }
      v139[12].i32[1] = 0;
      uint64_t v146 = v625;
      if (*(char *)(v625 + 39) < 0)
      {
        sub_25B4002F4(v599, *(void **)(v625 + 16), *(void *)(v625 + 24));
        uint64_t v146 = v625;
      }
      else
      {
        *(_OWORD *)unint64_t v599 = *(_OWORD *)(v625 + 16);
        obj[0] = *(id *)(v625 + 32);
      }
      if (!sub_25B491880(v562[1], v562[2], (unsigned __int8 **)v599)) {
        goto LABEL_254;
      }
      uint64_t v161 = sub_25B490C80((uint64_t)v562, (unsigned __int8 **)v599);
      objc_msgSend_confidence(*(void **)&v139[1], v162, v163);
      if (v166 > *(float *)(a1 + 532) && (objc_msgSend_confidence(*(void **)(v161 + 8), v164, v165), v167 < 0.5)
        || (objc_msgSend_confidence(*(void **)&v139[1], v164, v165, p_s1),
            float v169 = v168,
            objc_msgSend_confidence(*(void **)(v161 + 8), v170, v171),
            (float)(v169 - v172) >= 0.3)
        || (float v173 = *(float *)(v146 + 56), v174 = *(float *)(v146 + 60), vabds_f32(v173, v174) < 0.001))
      {
        v139[11].i32[0] = 0;
        goto LABEL_254;
      }
      if (v173 >= v174)
      {
        v139[11].i32[0] = 1;
        sub_25B491B04((uint64_t)v139, (float *)(v161 + 32));
        objc_msgSend_confidence(*(void **)(v161 + 8), v183, v184);
        float32x2_t v186 = v139[1];
        if (v186) {
          *(_DWORD *)(*(void *)&v186 + 108) = v185;
        }
        float v173 = *(float *)(v146 + 56);
        float v174 = *(float *)(v146 + 60);
      }
      if (v173 >= v174)
      {
LABEL_254:
        if (SHIBYTE(obj[0]) < 0)
        {
          uint64_t v175 = v599[0];
LABEL_294:
          operator delete(v175);
          goto LABEL_242;
        }
        goto LABEL_242;
      }
      float32x2_t v187 = v139[2];
      float32x2_t v188 = v139[3];
      float32x2_t v189 = *(float32x2_t *)(v161 + 16);
      float32x2_t v190 = *(float32x2_t *)(v161 + 24);
      sub_25B4928CC(src, v139, v189, v190);
      if (LOBYTE(src[0]))
      {
        float32x2_t v191 = vsub_f32(v187, v188);
        float32x2_t v192 = vsub_f32(v189, v190);
        if (vabds_f32(sqrtf(vaddv_f32(vmul_f32(v191, v191))), sqrtf(vaddv_f32(vmul_f32(v192, v192)))) < *(float *)(a1 + 512))
        {
LABEL_283:
          v139[11].i32[0] = 1;
          sub_25B491B04((uint64_t)v139, (float *)(v161 + 32));
          objc_msgSend_confidence(*(void **)(v161 + 8), v193, v194);
          float32x2_t v196 = v139[1];
          if (v196) {
            *(_DWORD *)(*(void *)&v196 + 108) = v195;
          }
          long long v197 = v139 + 13;
          goto LABEL_325;
        }
        unsigned __int16 v206 = sub_25B4929CC(a1, (uint64_t)&v615, v576, a7, a8, a9, a6);
        if (v206 >= 0x100u && (_BYTE)v206)
        {
          char v207 = sub_25B492F88((float *)a1, (float32x2_t *)&v615, v566, v559, (float32x2_t **)v554, v576, a7);
          __int32 v208 = v139[13].i32[0];
          if ((v207 & 1) == 0) {
            v139[13].i32[0] = ++v208;
          }
          if (v208 >= *(_DWORD *)(a1 + 520)) {
            goto LABEL_283;
          }
        }
        else if (!(_BYTE)v206)
        {
          goto LABEL_283;
        }
      }
      long long v197 = v139 + 11;
LABEL_325:
      v197->i32[0] = 0;
      sub_25B3F5FE8((uint64_t)&v615);
      goto LABEL_254;
    }
  }
LABEL_338:
  sub_25B488028(v24);
  sub_25B49250C(v24, *(void *)(a1 + 64), v627, *((uint64_t *)&v627 + 1), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v627 + 1) - v627) >> 4));
  src[0] = &v627;
  sub_25B3F5F28((void ***)src);

  v599[1] = 0;
  v599[0] = 0;
  obj[0] = 0;
  uint64_t v221 = *(void *)(a1 + 80);
  uint64_t v222 = *(void *)(a1 + 88);
  src[0] = v599;
  LOBYTE(src[1]) = 0;
  if (v222 == v221)
  {
    uint64_t v225 = 0;
  }
  else
  {
    unint64_t v223 = 0x2E8BA2E8BA2E8BA3 * ((v222 - v221) >> 4);
    if (v223 >= 0x1745D1745D1745ELL) {
      sub_25B3FBC4C();
    }
    v599[0] = sub_25B47C9B4(v223);
    v599[1] = v599[0];
    obj[0] = (char *)v599[0] + 176 * v224;
    uint64_t v225 = (void *)sub_25B487F74(v221, v222, (uint64_t)v599[0]);
    v599[1] = v225;
  }
  sub_25B49250C((uint64_t *)v599, (uint64_t)v225, v562[4], v562[5], 0x2E8BA2E8BA2E8BA3 * ((v562[5] - v562[4]) >> 4));
  uint64_t v226 = *(float32x2_t **)(a1 + 56);
  for (uint64_t j = *(float32x2_t **)(a1 + 64); v226 != j; a1 = v569)
  {
    uint64_t v229 = *(void *)(a1 + 56);
    uint64_t v228 = *(void *)(a1 + 64);
    if (v229 == v228) {
      goto LABEL_423;
    }
    uint64_t v230 = (float32x2_t **)&v226[16];
    while (1)
    {
      uint64_t v231 = *(unsigned __int8 *)(v229 + 151);
      if ((v231 & 0x80u) == 0) {
        uint64_t v232 = *(unsigned __int8 *)(v229 + 151);
      }
      else {
        uint64_t v232 = *(void *)(v229 + 136);
      }
      float32x2_t v233 = (float32x2_t)v226[18].u8[7];
      int v234 = v233.i8[0];
      if (v233.i8[0] < 0) {
        float32x2_t v233 = v226[17];
      }
      if (v232 != *(void *)&v233) {
        goto LABEL_361;
      }
      int64x2_t v235 = v234 >= 0 ? &v226[16] : *v230;
      if ((v231 & 0x80) == 0) {
        break;
      }
      if (memcmp(*(const void **)(v229 + 128), v235, *(void *)(v229 + 136))) {
        goto LABEL_361;
      }
LABEL_368:
      v229 += 176;
      if (v229 == v228) {
        goto LABEL_423;
      }
    }
    if (!*(unsigned char *)(v229 + 151)) {
      goto LABEL_368;
    }
    uint64_t v236 = 0;
    while (*(unsigned __int8 *)(v229 + v236 + 128) == v235->u8[v236])
    {
      if (v231 == ++v236) {
        goto LABEL_368;
      }
    }
LABEL_361:
    sub_25B477E0C((uint64_t)src, v226 + 2, (float32x2_t *)(v229 + 16));
    if (*((float *)&v615 + 2) > 20.0) {
      goto LABEL_368;
    }
    BOOL v237 = *(float *)src >= 0.7 && *((float *)&src[1] + 1) <= 1.0;
    if (!v237 || *((float *)&src[1] + 1) < 0.2) {
      goto LABEL_368;
    }
    if (!v229) {
      goto LABEL_423;
    }
    uint64_t v238 = (float32x2_t *)v599[0];
    uint64_t v239 = (float32x2_t *)v599[1];
    while (1)
    {
      if (v238 == v239) {
        goto LABEL_423;
      }
      sub_25B477E0C((uint64_t)src, v226 + 2, v238 + 2);
      BOOL v240 = *((float *)&v615 + 2) > 20.0 || *(float *)src < 0.5;
      if (!v240 && *((float *)&src[1] + 1) <= 1.0)
      {
        sub_25B477E0C((uint64_t)src, v238 + 2, (float32x2_t *)(v229 + 16));
        if (*((float *)&v615 + 2) <= 10.0 && *(float *)src >= 0.9 && *((float *)&src[1] + 1) <= 0.2) {
          break;
        }
      }
      v238 += 22;
    }
    if (v238)
    {
      uint64_t v243 = *(void *)(v569 + 56);
      uint64_t v242 = *(void *)(v569 + 64);
      if (v243 != v242)
      {
        uint64_t v582 = 0;
        uint64_t v244 = 0;
        while (1)
        {
          uint64_t v245 = *(unsigned __int8 *)(v243 + 151);
          if ((v245 & 0x80u) == 0) {
            uint64_t v246 = *(unsigned __int8 *)(v243 + 151);
          }
          else {
            uint64_t v246 = *(void *)(v243 + 136);
          }
          float32x2_t v247 = (float32x2_t)v226[18].u8[7];
          int v248 = v247.i8[0];
          if (v247.i8[0] < 0) {
            float32x2_t v247 = v226[17];
          }
          if (v246 != *(void *)&v247) {
            goto LABEL_404;
          }
          if (v248 >= 0) {
            uint64_t v249 = v226 + 16;
          }
          else {
            uint64_t v249 = *v230;
          }
          if ((v245 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v243 + 128), v249, *(void *)(v243 + 136))) {
              goto LABEL_404;
            }
          }
          else if (*(unsigned char *)(v243 + 151))
          {
            uint64_t v250 = 0;
            while (*(unsigned __int8 *)(v243 + v250 + 128) == v249->u8[v250])
            {
              if (v245 == ++v250) {
                goto LABEL_419;
              }
            }
LABEL_404:
            uint64_t v251 = v243 + 16;
            sub_25B40E03C((float **)src, (float32x2_t *)(v243 + 16), v226 + 2);
            uint64_t v252 = src[0];
            float v253 = *((float *)src[0] + 2);
            if (v253 >= *(float *)src[0]) {
              float v254 = *(float *)src[0];
            }
            else {
              float v254 = *((float *)src[0] + 2);
            }
            if (v254 >= 0.2)
            {
              float v255 = *((float *)src[0] + 3);
              float v256 = *((float *)src[0] + 1);
              if (v255 >= v256) {
                float v257 = *((float *)src[0] + 1);
              }
              else {
                float v257 = *((float *)src[0] + 3);
              }
              if (v257 < 0.2)
              {
                float32_t v258 = sub_25B40DB9C(*(float32x2_t *)(v251 + 8 * (v256 < v255)), *(float32x2_t *)(v229 + 16), *(float32x2_t *)(v229 + 24), 0.00001);
                uint64_t v259 = v582;
                if (v258 <= 0.2) {
                  uint64_t v259 = v243;
                }
                uint64_t v582 = v259;
              }
            }
            else if (sub_25B40DB9C(*(float32x2_t *)(v251 + 8 * (*(float *)src[0] < v253)), *(float32x2_t *)(v229 + 16), *(float32x2_t *)(v229 + 24), 0.00001) <= 0.2)
            {
              uint64_t v244 = v243;
            }
            operator delete(v252);
          }
LABEL_419:
          v243 += 176;
          if (v243 == v242)
          {
            if (v244 && v582)
            {
              *(unsigned char *)(v229 + 120) = 1;
              *(unsigned char *)(v244 + 120) = 1;
              *(unsigned char *)(v582 + 120) = 1;
            }
            break;
          }
        }
      }
    }
LABEL_423:
    v226 += 22;
  }
  src[0] = v599;
  sub_25B3F5F28((void ***)src);
  id v557 = v576;
  sub_25B4880E8((float *)a1, v561, v557, a8);
  sub_25B4D6460(v561, (uint64_t)v573);
  uint64_t v260 = *(float32x2_t **)(a1 + 56);
  uint64_t v261 = *(float32x2_t **)(a1 + 64);
  while (v260 != v261)
  {
    uint64_t v262 = *(void *)(a1 + 56);
    uint64_t v263 = *(void *)(a1 + 64);
    if (v262 != v263)
    {
      float32x2_t v264 = vsub_f32(v260[2], v260[3]);
      float v265 = sqrtf(vaddv_f32(vmul_f32(v264, v264)));
      do
      {
        uint64_t v266 = *(unsigned __int8 *)(v262 + 151);
        if ((v266 & 0x80u) == 0) {
          uint64_t v267 = *(unsigned __int8 *)(v262 + 151);
        }
        else {
          uint64_t v267 = *(void *)(v262 + 136);
        }
        float32x2_t v268 = (float32x2_t)v260[18].u8[7];
        int v269 = v268.i8[0];
        if (v268.i8[0] < 0) {
          float32x2_t v268 = v260[17];
        }
        if (v267 == *(void *)&v268)
        {
          if (v269 >= 0) {
            BOOL v270 = v260 + 16;
          }
          else {
            BOOL v270 = (float32x2_t *)v260[16];
          }
          if ((v266 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v262 + 128), v270, *(void *)(v262 + 136))) {
              goto LABEL_453;
            }
          }
          else
          {
            if (!*(unsigned char *)(v262 + 151)) {
              goto LABEL_453;
            }
            uint64_t v271 = 0;
            while (*(unsigned __int8 *)(v262 + v271 + 128) == v270->u8[v271])
            {
              if (v266 == ++v271) {
                goto LABEL_453;
              }
            }
          }
        }
        float32x2_t v272 = vsub_f32(*(float32x2_t *)(v262 + 16), *(float32x2_t *)(v262 + 24));
        if (sqrtf(vaddv_f32(vmul_f32(v272, v272))) >= (float)(v265 + 0.3))
        {
          float v273 = sub_25B3FCCE0(v260 + 2, (float32x2_t *)(v262 + 16), 0);
          float v274 = *(float *)(a1 + 508);
          if (v265 > *(float *)(a1 + 488)) {
            float v274 = v274 * 0.5;
          }
          if (v273 <= v274)
          {
            float32x2_t v275 = *(float32x2_t *)(v262 + 16);
            float32x2_t v276 = v260[2];
            float32x2_t v277 = vsub_f32(*(float32x2_t *)(v262 + 24), v275);
            float v278 = vaddv_f32(vmul_f32(vsub_f32(v276, v275), v277));
            float v279 = vaddv_f32(vmul_f32(v277, v277));
            if (v279 < 0.000001) {
              float v279 = 0.000001;
            }
            float32x2_t v280 = vsub_f32(vmla_n_f32(v275, v277, v278 / v279), v276);
            float v281 = sqrtf(vaddv_f32(vmul_f32(v280, v280)));
            float32x2_t v282 = vsub_f32(vmla_n_f32(v275, v277, vaddv_f32(vmul_f32(vsub_f32(v260[3], v275), v277)) / v279), v260[3]);
            float v283 = sqrtf(vaddv_f32(vmul_f32(v282, v282)));
            if (v283 < v281) {
              float v281 = v283;
            }
            if (v281 <= 0.15)
            {
              sub_25B40D638();
              float32x2_t v286 = vsub_f32(v284, v285);
              if ((float)(sqrtf(vaddv_f32(vmul_f32(v286, v286))) / (float)(v265 * cosf((float)(v273 / 180.0) * 3.1416))) > 0.5) {
                goto LABEL_507;
              }
            }
          }
        }
LABEL_453:
        v262 += 176;
      }
      while (v262 != v263);
    }
    float32x2_t v287 = (float32x2_t)v260[18].u8[7];
    if (v287.i8[0] < 0) {
      float32x2_t v287 = v260[17];
    }
    if (v287)
    {
      float32x2_t v288 = v260[2];
      float32x2_t v289 = v260[3];
      uint64_t v290 = *(void *)(a1 + 56);
      uint64_t v291 = *(void *)(a1 + 64);
      if (v290 != v291)
      {
        BOOL v292 = 0;
        BOOL v293 = 0;
        while (1)
        {
          uint64_t v294 = *(unsigned __int8 *)(v290 + 151);
          if ((v294 & 0x80u) == 0) {
            uint64_t v295 = *(unsigned __int8 *)(v290 + 151);
          }
          else {
            uint64_t v295 = *(void *)(v290 + 136);
          }
          if (!v295) {
            goto LABEL_493;
          }
          float32x2_t v296 = (float32x2_t)v260[18].u8[7];
          int v297 = v296.i8[0];
          if (v296.i8[0] < 0) {
            float32x2_t v296 = v260[17];
          }
          if (v295 == *(void *)&v296)
          {
            if (v297 >= 0) {
              uint64_t v298 = v260 + 16;
            }
            else {
              uint64_t v298 = (float32x2_t *)v260[16];
            }
            if ((v294 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v290 + 128), v298, *(void *)(v290 + 136))) {
                goto LABEL_493;
              }
            }
            else
            {
              if (!*(unsigned char *)(v290 + 151)) {
                goto LABEL_493;
              }
              uint64_t v299 = 0;
              while (*(unsigned __int8 *)(v290 + v299 + 128) == v298->u8[v299])
              {
                if (v294 == ++v299) {
                  goto LABEL_493;
                }
              }
            }
          }
          sub_25B40E03C((float **)src, v260 + 2, (float32x2_t *)(v290 + 16));
          if (v292)
          {
            BOOL v292 = 1;
            if (!v293) {
              goto LABEL_478;
            }
          }
          else
          {
            float v307 = *(float *)src[0];
            if (*((float *)src[0] + 1) < *(float *)src[0]) {
              float v307 = *((float *)src[0] + 1);
            }
            BOOL v292 = v307 <= *(float *)(v569 + 492);
            if (!v293)
            {
LABEL_478:
              int32x2_t v300 = (float *)((char *)src[0] + 8);
              long long v301 = (float *)((char *)src[0] + 12);
              if ((char *)src[0] + 8 != src[1] && v301 != src[1])
              {
                float v303 = *v300;
                unint64_t v304 = (float *)((char *)src[0] + 12);
                do
                {
                  float v305 = *v304++;
                  float v306 = v305;
                  if (v305 < v303)
                  {
                    float v303 = v306;
                    int32x2_t v300 = v301;
                  }
                  long long v301 = v304;
                }
                while (v304 != src[1]);
              }
              BOOL v293 = *v300 <= *(float *)(v569 + 492);
              if (!src[0]) {
                goto LABEL_493;
              }
LABEL_492:
              operator delete(src[0]);
              goto LABEL_493;
            }
          }
          BOOL v293 = 1;
          if (src[0]) {
            goto LABEL_492;
          }
LABEL_493:
          v290 += 176;
          if (v290 == v291) {
            goto LABEL_496;
          }
        }
      }
      BOOL v293 = 0;
      BOOL v292 = 0;
LABEL_496:
      float32x2_t v308 = vsub_f32(v288, v289);
      float v309 = sqrtf(vaddv_f32(vmul_f32(v308, v308)));
      unsigned int v310 = v292 + v293;
      a1 = v569;
      float v311 = *(float *)(v569 + 552);
      if (v309 < v311 && v310 < 2) {
        goto LABEL_507;
      }
      BOOL v313 = v309 >= v311;
      if (v309 >= (float)(v311 + v311)) {
        BOOL v313 = 0;
      }
      if (!v310 && v313)
      {
LABEL_507:
        if (!v260[15].i8[0]) {
          v260[11].i32[0] = 2;
        }
      }
    }
    v260 += 22;
  }
  uint64_t v315 = v561;
  sub_25B488028(v561);
  uint64_t v316 = *(float32x2_t **)(a1 + 56);
  int v560 = *(float32x2_t **)(a1 + 64);
  if (v316 != v560)
  {
    while (1)
    {
      v577 = v316 + 2;
      float32x2_t v317 = vsub_f32(v316[2], v316[3]);
      if (sqrtf(vaddv_f32(vmul_f32(v317, v317))) <= 1.0)
      {
        uint64_t v318 = *(float32x2_t **)(a1 + 56);
        float32x2_t v319 = *(float32x2_t **)(a1 + 64);
        if (v318 != v319) {
          break;
        }
      }
LABEL_670:
      v316 += 22;
      if (v316 == v560) {
        goto LABEL_671;
      }
    }
    int32x2_t v320 = (const void **)&v316[16];
    v571 = v316;
    int v563 = v316 + 16;
    v567 = *(float32x2_t **)(a1 + 64);
    while (1)
    {
      float32x2_t v321 = v318[2];
      float32x2_t v322 = v318[3];
      uint64_t v323 = v318[18].u8[7];
      id v583 = v318 + 2;
      if ((v323 & 0x80u) == 0) {
        float32x2_t v324 = (float32x2_t)v318[18].u8[7];
      }
      else {
        float32x2_t v324 = v318[17];
      }
      float32x2_t v325 = (float32x2_t)v316[18].u8[7];
      int v326 = v325.i8[0];
      if (v325.i8[0] < 0) {
        float32x2_t v325 = v316[17];
      }
      if (*(void *)&v324 != *(void *)&v325) {
        goto LABEL_531;
      }
      if (v326 >= 0) {
        uint64_t v327 = (unsigned __int8 *)v320;
      }
      else {
        uint64_t v327 = (unsigned __int8 *)*v320;
      }
      if ((v323 & 0x80) != 0)
      {
        if (memcmp(*(const void **)&v318[16], v327, *(void *)&v318[17])) {
          goto LABEL_531;
        }
      }
      else if (v318[18].i8[7])
      {
        uint64_t v328 = 0;
        while (v318[16].u8[v328] == v327[v328])
        {
          if (v323 == ++v328) {
            goto LABEL_630;
          }
        }
LABEL_531:
        if (v318[11].i32[0] != 2)
        {
          float32x2_t v329 = vsub_f32(v321, v322);
          if (sqrtf(vaddv_f32(vmul_f32(v329, v329))) <= 1.0 && sub_25B3FCCE0(v577, v583, 0) < *(float *)(a1 + 508))
          {
            float32x2_t v330 = 0;
            float32x2_t v331 = 0;
            long long v332 = 0;
            long long v333 = 0;
            long long v334 = 0;
            uint64_t v335 = 0;
            src[1] = 0;
            src[0] = 0;
            *(void *)&long long v615 = 0;
            v599[1] = 0;
            v599[0] = 0;
            char v336 = 1;
            obj[0] = 0;
            uint64_t v574 = v318;
            do
            {
              char v337 = v336;
              double v338 = sub_25B40DB9C(v577[v335], v318[2], v318[3], 0.00001);
              float32x2_t v339 = (double *)src[1];
              if (src[1] >= v334)
              {
                uint64_t v341 = ((char *)src[1] - (char *)v333) >> 3;
                unint64_t v342 = v341 + 1;
                if ((unint64_t)(v341 + 1) >> 61)
                {
                  src[0] = v333;
                  v599[0] = v331;
                  sub_25B3FBC4C();
                }
                if ((v334 - (unsigned char *)v333) >> 2 > v342) {
                  unint64_t v342 = (v334 - (unsigned char *)v333) >> 2;
                }
                if ((unint64_t)(v334 - (unsigned char *)v333) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v343 = v342;
                }
                if (v343) {
                  unint64_t v343 = (unint64_t)sub_25B3FCAD4(v343);
                }
                else {
                  uint64_t v344 = 0;
                }
                int v345 = (double *)(v343 + 8 * v341);
                *int v345 = v338;
                unint64_t v340 = v345 + 1;
                while (v339 != v333)
                {
                  uint64_t v346 = *((void *)v339-- - 1);
                  *((void *)v345-- - 1) = v346;
                }
                long long v334 = (unsigned char *)(v343 + 8 * v344);
                src[1] = v340;
                if (v333)
                {
                  operator delete(v333);
                  float32x2_t v330 = (double *)v599[1];
                }
                long long v333 = v345;
                uint64_t v318 = v574;
              }
              else
              {
                *(double *)src[1] = v338;
                unint64_t v340 = v339 + 1;
              }
              src[1] = v340;
              uint64_t v347 = v571;
              double v348 = sub_25B40DB9C(v583[v335], v571[2], v571[3], 0.00001);
              if (v330 >= v332)
              {
                uint64_t v349 = v330 - v331;
                unint64_t v350 = v349 + 1;
                if ((unint64_t)(v349 + 1) >> 61)
                {
                  src[0] = v333;
                  v599[0] = v331;
                  sub_25B3FBC4C();
                }
                if (((char *)v332 - (char *)v331) >> 2 > v350) {
                  unint64_t v350 = ((char *)v332 - (char *)v331) >> 2;
                }
                if ((unint64_t)((char *)v332 - (char *)v331) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v351 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v351 = v350;
                }
                if (v351) {
                  unint64_t v351 = (unint64_t)sub_25B3FCAD4(v351);
                }
                else {
                  uint64_t v352 = 0;
                }
                uint64_t v353 = (double *)(v351 + 8 * v349);
                *uint64_t v353 = v348;
                float v354 = v353 + 1;
                while (v330 != v331)
                {
                  uint64_t v355 = *((void *)v330-- - 1);
                  *((void *)v353-- - 1) = v355;
                }
                long long v332 = (double *)(v351 + 8 * v352);
                v599[1] = v354;
                if (v331) {
                  operator delete(v331);
                }
                float32x2_t v331 = v353;
                float32x2_t v330 = (double *)v354;
                uint64_t v318 = v574;
              }
              else
              {
                *v330++ = v348;
              }
              char v336 = 0;
              v599[1] = v330;
              uint64_t v335 = 1;
            }
            while ((v337 & 1) != 0);
            *(void *)&long long v615 = v334;
            src[0] = v333;
            obj[0] = v332;
            v599[0] = v331;
            double v356 = sub_25B40DB9C(vmul_f32(vadd_f32(v571[2], v571[3]), (float32x2_t)0x3F0000003F000000), v318[2], v318[3], 0.00001);
            uint64_t v357 = (double *)src[1];
            if (src[1] >= v334)
            {
              uint64_t v359 = ((char *)src[1] - (char *)v333) >> 3;
              unint64_t v360 = v359 + 1;
              a1 = v569;
              if ((unint64_t)(v359 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((v334 - (unsigned char *)v333) >> 2 > v360) {
                unint64_t v360 = (v334 - (unsigned char *)v333) >> 2;
              }
              if ((unint64_t)(v334 - (unsigned char *)v333) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v361 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v361 = v360;
              }
              if (v361) {
                unint64_t v361 = (unint64_t)sub_25B3FCAD4(v361);
              }
              else {
                uint64_t v362 = 0;
              }
              uint64_t v315 = v561;
              uint64_t v363 = (double *)(v361 + 8 * v359);
              *uint64_t v363 = v356;
              float v358 = v363 + 1;
              if (v357 == v333)
              {
                uint64_t v318 = v574;
              }
              else
              {
                uint64_t v318 = v574;
                do
                {
                  uint64_t v364 = *((void *)v357-- - 1);
                  *((void *)v363-- - 1) = v364;
                }
                while (v357 != v333);
              }
              src[0] = v363;
              src[1] = v358;
              *(void *)&long long v615 = v361 + 8 * v362;
              if (v333)
              {
                operator delete(v333);
                float32x2_t v330 = (double *)v599[1];
                long long v332 = (double *)obj[0];
              }
            }
            else
            {
              *(double *)src[1] = v356;
              float v358 = v357 + 1;
              a1 = v569;
              uint64_t v315 = v561;
            }
            src[1] = v358;
            double v365 = sub_25B40DB9C(vmul_f32(vadd_f32(v318[2], v318[3]), (float32x2_t)0x3F0000003F000000), v571[2], v571[3], 0.00001);
            if (v330 >= v332)
            {
              uint64_t v367 = (double *)v599[0];
              uint64_t v368 = ((char *)v330 - (char *)v599[0]) >> 3;
              unint64_t v369 = v368 + 1;
              if ((unint64_t)(v368 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if (((char *)v332 - (char *)v599[0]) >> 2 > v369) {
                unint64_t v369 = ((char *)v332 - (char *)v599[0]) >> 2;
              }
              if ((unint64_t)((char *)v332 - (char *)v599[0]) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v370 = v369;
              }
              if (v370) {
                unint64_t v370 = (unint64_t)sub_25B3FCAD4(v370);
              }
              else {
                uint64_t v371 = 0;
              }
              float32x2_t v372 = (double *)(v370 + 8 * v368);
              double *v372 = v365;
              float32x2_t v366 = v372 + 1;
              while (v330 != v367)
              {
                uint64_t v373 = *((void *)v330-- - 1);
                *((void *)v372-- - 1) = v373;
              }
              long long v332 = (double *)(v370 + 8 * v371);
              v599[0] = v372;
              obj[0] = v332;
              if (v367) {
                operator delete(v367);
              }
              a1 = v569;
            }
            else
            {
              *float32x2_t v330 = v365;
              float32x2_t v366 = v330 + 1;
            }
            v599[1] = v366;
            float v374 = sub_25B3FCCE0(v577, v583, 0);
            if (v374 < 5.0 || v374 > 175.0) {
              goto LABEL_610;
            }
            float32x2_t v377 = v571[2];
            int32x2_t v378 = (int32x2_t)vsub_f32(v571[3], v377);
            float32x2_t v379 = v574[2];
            float32x2_t v380 = v574[3];
            float32x2_t v381 = vsub_f32(v380, v379);
            *(float *)v375.i32 = -*(float *)&v378.i32[1];
            float32x2_t v382 = (float32x2_t)vzip1_s32(v375, v378);
            int32x2_t v383 = (int32x2_t)vmul_f32(v381, v382);
            if (vaddv_f32((float32x2_t)v383) == 0.0)
            {
LABEL_610:
              int32x2_t v320 = (const void **)v563;
              float32x2_t v319 = v567;
            }
            else
            {
              int32x2_t v404 = (int32x2_t)vmul_f32(vsub_f32(v377, v379), v382);
              float32x2_t v405 = vmla_n_f32(v379, v381, vdiv_f32(vadd_f32((float32x2_t)v404, (float32x2_t)vdup_lane_s32(v404, 1)), vadd_f32((float32x2_t)v383, (float32x2_t)vdup_lane_s32(v383, 1))).f32[0]);
              double v406 = sub_25B40DB9C(v405, v379, v380, 0.00001);
              if ((unint64_t)v358 >= (unint64_t)v615)
              {
                __int32 v408 = (double *)src[0];
                uint64_t v409 = ((char *)v358 - (char *)src[0]) >> 3;
                unint64_t v410 = v409 + 1;
                if ((unint64_t)(v409 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v411 = v615 - (unint64_t)src[0];
                if ((uint64_t)(v615 - (unint64_t)src[0]) >> 2 > v410) {
                  unint64_t v410 = v411 >> 2;
                }
                if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v412 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v412 = v410;
                }
                if (v412) {
                  unint64_t v412 = (unint64_t)sub_25B3FCAD4(v412);
                }
                else {
                  uint64_t v413 = 0;
                }
                uint64_t v422 = (double *)(v412 + 8 * v409);
                *uint64_t v422 = v406;
                float v407 = v422 + 1;
                while (v358 != v408)
                {
                  uint64_t v423 = *((void *)v358-- - 1);
                  *((void *)v422-- - 1) = v423;
                }
                src[0] = v422;
                *(void *)&long long v615 = v412 + 8 * v413;
                if (v408) {
                  operator delete(v408);
                }
                uint64_t v347 = v571;
              }
              else
              {
                *float v358 = v406;
                float v407 = v358 + 1;
              }
              src[1] = v407;
              double v424 = sub_25B40DB9C(v405, v347[2], v347[3], 0.00001);
              if (v366 >= v332)
              {
                float v426 = (double *)v599[0];
                uint64_t v427 = ((char *)v366 - (char *)v599[0]) >> 3;
                unint64_t v428 = v427 + 1;
                if ((unint64_t)(v427 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                if (((char *)v332 - (char *)v599[0]) >> 2 > v428) {
                  unint64_t v428 = ((char *)v332 - (char *)v599[0]) >> 2;
                }
                if ((unint64_t)((char *)v332 - (char *)v599[0]) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v429 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v429 = v428;
                }
                if (v429) {
                  unint64_t v429 = (unint64_t)sub_25B3FCAD4(v429);
                }
                else {
                  uint64_t v430 = 0;
                }
                int32x2_t v320 = (const void **)v563;
                float32x2_t v319 = v567;
                int v431 = (double *)(v429 + 8 * v427);
                *int v431 = v424;
                std::string v425 = v431 + 1;
                while (v366 != v426)
                {
                  uint64_t v432 = *((void *)v366-- - 1);
                  *((void *)v431-- - 1) = v432;
                }
                v599[0] = v431;
                obj[0] = (id)(v429 + 8 * v430);
                if (v426) {
                  operator delete(v426);
                }
              }
              else
              {
                double *v366 = v424;
                std::string v425 = v366 + 1;
                int32x2_t v320 = (const void **)v563;
                float32x2_t v319 = v567;
              }
              v599[1] = v425;
              float32x2_t v366 = (double *)v425;
            }
            v592[0] = 0;
            v592[1] = 0;
            *(void *)&long long v593 = 0;
            long long v384 = (void *)sub_25B492318((uint64_t *)v592, (uint64_t)src);
            uint64_t v385 = v384;
            v592[1] = v384;
            if ((unint64_t)v384 >= (unint64_t)v593)
            {
              uint64_t v388 = (void *)sub_25B492318((uint64_t *)v592, (uint64_t)v599);
            }
            else
            {
              *long long v384 = 0;
              v384[1] = 0;
              v384[2] = 0;
              sub_25B492490(v384, v599[0], (uint64_t)v366, ((char *)v366 - (char *)v599[0]) >> 3);
              uint64_t v388 = v385 + 3;
            }
            uint64_t v316 = v571;
            uint64_t v318 = v574;
            v592[1] = v388;
            if (v599[0]) {
              operator delete(v599[0]);
            }
            if (src[0]) {
              operator delete(src[0]);
            }
            long long v389 = *(double **)v592[0];
            double v390 = **(double **)v592[0];
            while (v389 != *((double **)v592[0] + 1))
            {
              double v391 = *v389++;
              double v392 = v391;
              if (v391 < v390) {
                double v390 = v392;
              }
            }
            if (v390 <= 0.1)
            {
              objc_msgSend_confidence(*(void **)&v571[1], v386, v387);
              if (v395 < *(float *)(a1 + 532))
              {
                objc_msgSend_confidence(*(void **)&v574[1], v393, v394);
                if (v396 >= *(float *)(a1 + 532)) {
                  goto LABEL_628;
                }
              }
              objc_msgSend_confidence(*(void **)&v574[1], v393, v394, p_s1);
              float v398 = v397;
              objc_msgSend_confidence(*(void **)&v571[1], v399, v400);
              if ((float)(v398 - v401) > 0.2) {
                goto LABEL_628;
              }
              unsigned int v402 = sub_25B491BE0(a1, v571, *(void *)(a1 + 56), *(void *)(a1 + 64));
              unsigned int v403 = sub_25B491BE0(a1, v574, *(void *)(a1 + 56), *(void *)(a1 + 64));
              uint64_t v316 = v571;
              if (v402 < v403
                || v402 == v403
                && ((BOOL v414 = sub_25B491E50(a1, v571, *(void *)(a1 + 56), *(void *)(a1 + 64)),
                     uint64_t v316 = v571,
                     ((v414 | !sub_25B491E50(a1, v574, *(void *)(a1 + 56), *(void *)(a1 + 64))) & 1) == 0)
                 || (objc_msgSend_confidence(*(void **)&v571[1], v415, v416),
                     float v418 = v417,
                     objc_msgSend_confidence(*(void **)&v574[1], v419, v420),
                     uint64_t v316 = v571,
                     v418 < v421)))
              {
LABEL_628:
                v316[11].i32[0] = 2;
              }
            }
            src[0] = v592;
            sub_25B413BE8((void ***)src);
          }
        }
      }
LABEL_630:
      v318 += 22;
      if (v318 == v319) {
        goto LABEL_670;
      }
    }
  }
LABEL_671:
  sub_25B488028(v315);
  uint64_t v434 = *(void *)(a1 + 56);
  uint64_t v435 = *(void *)(a1 + 64);
  if (v434 != v435)
  {
    do
    {
      float v436 = *(float *)(a1 + 480);
      long long v624 = *(_OWORD *)(v434 + 16);
      uint64_t v437 = *(void *)(a1 + 56);
      uint64_t v438 = *(void *)(a1 + 64);
      if (v437 != v438)
      {
        v439 = (_OWORD *)(v434 + 16);
        long long v440 = v624;
        int32x2_t v441 = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)&v624 + 8), *(float32x2_t *)&v624);
        *(float *)v433.i32 = -*(float *)&v441.i32[1];
        float32x2_t v442 = (float32x2_t)vzip1_s32(v433, v441);
        do
        {
          uint64_t v443 = *(unsigned __int8 *)(v437 + 151);
          if ((v443 & 0x80u) == 0) {
            uint64_t v444 = *(unsigned __int8 *)(v437 + 151);
          }
          else {
            uint64_t v444 = *(void *)(v437 + 136);
          }
          uint64_t v445 = *(unsigned __int8 *)(v434 + 151);
          int v446 = (char)v445;
          if ((v445 & 0x80u) != 0) {
            uint64_t v445 = *(void *)(v434 + 136);
          }
          if (v444 != v445) {
            goto LABEL_690;
          }
          if (v446 >= 0) {
            unint64_t v447 = (unsigned __int8 *)(v434 + 128);
          }
          else {
            unint64_t v447 = *(unsigned __int8 **)(v434 + 128);
          }
          if ((v443 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v437 + 128), v447, *(void *)(v437 + 136))) {
              goto LABEL_690;
            }
          }
          else if (*(unsigned char *)(v437 + 151))
          {
            uint64_t v448 = 0;
            while (*(unsigned __int8 *)(v437 + v448 + 128) == v447[v448])
            {
              if (v443 == ++v448) {
                goto LABEL_720;
              }
            }
LABEL_690:
            float v449 = sub_25B3FCCE0((float32x2_t *)&v624, (float32x2_t *)(v437 + 16), 0);
            if (v449 >= v436 && v449 <= (float)(180.0 - v436))
            {
              float32x2_t v452 = *(float32x2_t *)(v437 + 16);
              double v454 = *(double *)(v437 + 24);
              float32x2_t v453 = vsub_f32(*(float32x2_t *)&v454, v452);
              int32x2_t v433 = (int32x2_t)vmul_f32(v453, v442);
              *(float *)&double v454 = vaddv_f32((float32x2_t)v433);
              if (*(float *)&v454 != 0.0)
              {
                int32x2_t v584 = v433;
                sub_25B40D7C0((float **)v599, (float32x2_t *)&v624, (float32x2_t *)(v437 + 16), v454, *(double *)&v433, v450);
                sub_25B40DA84((uint64_t *)v592, (float32x2_t *)(v437 + 16), *(float32x2_t *)&v440, *(float32x2_t *)((char *)&v440 + 8), v455, v456, v457);
                unint64_t v459 = v599[0];
                unint64_t v460 = (float *)((char *)v599[0] + 12);
                float v461 = *((float *)v599[0] + 1);
                if (v461 >= *(float *)v599[0]) {
                  float v462 = *(float *)v599[0];
                }
                else {
                  float v462 = *((float *)v599[0] + 1);
                }
                if (v461 >= *(float *)v599[0]) {
                  uint64_t v463 = (char *)v599[0];
                }
                else {
                  uint64_t v463 = (char *)v599[0] + 4;
                }
                long long v464 = (float *)((char *)v599[0] + 8);
                if ((char *)v599[0] + 8 != v599[1] && v460 != v599[1])
                {
                  float v465 = *v464;
                  long long v466 = (float *)((char *)v599[0] + 12);
                  do
                  {
                    float v467 = *v466++;
                    float v468 = v467;
                    if (v467 < v465)
                    {
                      float v465 = v468;
                      long long v464 = v460;
                    }
                    unint64_t v460 = v466;
                  }
                  while (v466 != v599[1]);
                }
                int32x2_t v469 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v440, v452), v442);
                __float2 v470 = (void *)vmla_n_f32(v452, v453, vdiv_f32(vadd_f32((float32x2_t)v469, (float32x2_t)vdup_lane_s32(v469, 1)), vadd_f32((float32x2_t)v584, (float32x2_t)vdup_lane_s32(v584, 1))).f32[0]);
                uint64_t v471 = (v463 - (char *)v599[0]) >> 2;
                float v472 = *v464;
                if (v462 < 0.3 && v472 >= 0.3 && (*(unsigned char *)v592[0] & 2) != 0)
                {
                  *(_OWORD *)v589 = *v439;
                  v589[v471] = v470;
                  _OWORD *v439 = *(_OWORD *)v589;
                  long long v473 = *(_OWORD *)(v434 + 16);
                  long long v474 = v473;
                  DWORD2(v474) = *(_DWORD *)(v434 + 64);
                  *(void *)&long long v458 = *(void *)(v434 + 24);
                  long long v475 = v458;
                  DWORD2(v475) = *(_DWORD *)(v434 + 68);
                  DWORD2(v473) = DWORD2(v475);
                  DWORD2(v458) = DWORD2(v474);
                  *(_OWORD *)(v434 + 32) = v474;
                  *(_OWORD *)(v434 + 48) = v475;
                  uint64_t v476 = *(void *)(v434 + 8);
                  *(_OWORD *)long long src = v473;
                  long long v615 = v475;
                  long long v616 = v458;
                  *(_OWORD *)v617 = v474;
                  if (v476) {
                    objc_copyStruct((void *)(v476 + 272), src, 64, 1, 0);
                  }
                }
                if (v462 < 0.3 && v472 < 0.3)
                {
                  *(_OWORD *)v589 = *v439;
                  v589[v471] = v470;
                  _OWORD *v439 = *(_OWORD *)v589;
                  long long v477 = *(_OWORD *)(v434 + 16);
                  long long v478 = v477;
                  DWORD2(v478) = *(_DWORD *)(v434 + 64);
                  *(void *)&long long v458 = *(void *)(v434 + 24);
                  long long v479 = v458;
                  DWORD2(v479) = *(_DWORD *)(v434 + 68);
                  DWORD2(v477) = DWORD2(v479);
                  DWORD2(v458) = DWORD2(v478);
                  *(_OWORD *)(v434 + 32) = v478;
                  *(_OWORD *)(v434 + 48) = v479;
                  uint64_t v480 = *(void *)(v434 + 8);
                  *(_OWORD *)long long src = v477;
                  long long v615 = v479;
                  long long v616 = v458;
                  *(_OWORD *)v617 = v478;
                  if (v480) {
                    objc_copyStruct((void *)(v480 + 272), src, 64, 1, 0);
                  }
                }
                if (v592[0]) {
                  operator delete(v592[0]);
                }
                operator delete(v459);
              }
            }
          }
LABEL_720:
          v437 += 176;
        }
        while (v437 != v438);
      }
      v434 += 176;
      a1 = v569;
    }
    while (v434 != v435);
    uint64_t v481 = *(void *)(v569 + 56);
    uint64_t v482 = *(void *)(v569 + 64);
    if (v481 != v482)
    {
      float v483 = *(float *)(v569 + 492);
      while (1)
      {
        uint64_t v485 = *(void *)(a1 + 56);
        uint64_t v484 = *(void *)(a1 + 64);
        if (v485 != v484) {
          break;
        }
LABEL_793:
        v481 += 176;
        a1 = v569;
        if (v481 == v482) {
          goto LABEL_794;
        }
      }
      uint64_t v486 = (long long *)(v481 + 16);
      v487 = (const void **)(v481 + 128);
      while (2)
      {
        uint64_t v488 = *(unsigned __int8 *)(v485 + 151);
        if ((v488 & 0x80u) == 0) {
          uint64_t v489 = *(unsigned __int8 *)(v485 + 151);
        }
        else {
          uint64_t v489 = *(void *)(v485 + 136);
        }
        uint64_t v490 = *(unsigned __int8 *)(v481 + 151);
        int v491 = (char)v490;
        if ((v490 & 0x80u) != 0) {
          uint64_t v490 = *(void *)(v481 + 136);
        }
        if (v489 == v490)
        {
          if (v491 >= 0) {
            unint64_t v492 = (unsigned __int8 *)(v481 + 128);
          }
          else {
            unint64_t v492 = (unsigned __int8 *)*v487;
          }
          if ((v488 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v485 + 128), v492, *(void *)(v485 + 136))) {
              break;
            }
          }
          else if (*(unsigned char *)(v485 + 151))
          {
            uint64_t v493 = 0;
            while (*(unsigned __int8 *)(v485 + v493 + 128) == v492[v493])
            {
              if (v488 == ++v493) {
                goto LABEL_792;
              }
            }
            break;
          }
LABEL_792:
          v485 += 176;
          if (v485 == v484) {
            goto LABEL_793;
          }
          continue;
        }
        break;
      }
      float v494 = sub_25B3FCCE0((float32x2_t *)(v481 + 16), (float32x2_t *)(v485 + 16), 0);
      float v495 = *(float *)(v569 + 480);
      if (v494 < v495) {
        goto LABEL_792;
      }
      double v496 = 180.0 - v495;
      if (v496 < v494) {
        goto LABEL_792;
      }
      LODWORD(v496) = *(_DWORD *)(v569 + 508);
      if (v494 > *(float *)&v496 && 180.0 - *(float *)&v496 > v494) {
        goto LABEL_792;
      }
      float32x2_t v497 = *(float32x2_t *)(v481 + 16);
      int32x2_t v503 = (int32x2_t)vsub_f32(*(float32x2_t *)(v481 + 24), v497);
      float32x2_t v499 = *(float32x2_t *)(v485 + 16);
      int32x2_t v498 = *(int32x2_t *)(v485 + 24);
      float32x2_t v500 = vsub_f32((float32x2_t)v498, v499);
      *(float *)v498.i32 = -*(float *)&v503.i32[1];
      float32x2_t v501 = (float32x2_t)vzip1_s32(v498, v503);
      float32x2_t v502 = vmul_f32(v500, v501);
      *(float *)v503.i32 = vaddv_f32(v502);
      if (*(float *)v503.i32 == 0.0) {
        goto LABEL_792;
      }
      int32x2_t v585 = (int32x2_t)v502;
      sub_25B40D7C0((float **)v589, (float32x2_t *)(v481 + 16), (float32x2_t *)(v485 + 16), *(double *)&v503, *(double *)&v502, v496);
      sub_25B40DA84((uint64_t *)&v624, (float32x2_t *)(v485 + 16), *(float32x2_t *)(v481 + 16), *(float32x2_t *)(v481 + 24), v504, v505, v506);
      uint64_t v508 = (float *)v589[0];
      float v509 = *((float *)v589[0] + 1);
      if (v509 >= *(float *)v589[0]) {
        float v509 = *(float *)v589[0];
      }
      if (v509 < v483)
      {
        float v510 = (void *)v624;
        goto LABEL_788;
      }
      float v511 = *((float *)v589[0] + 3);
      if (v511 >= *((float *)v589[0] + 2)) {
        float v511 = *((float *)v589[0] + 2);
      }
      float v510 = (void *)v624;
      if (v511 < v483)
      {
        if ((*(unsigned char *)v624 & 1) == 0)
        {
LABEL_789:
          operator delete(v510);
          uint64_t v508 = (float *)v589[0];
LABEL_790:
          if (v508) {
            operator delete(v508);
          }
          goto LABEL_792;
        }
        sub_25B47C6E4((uint64_t)src, v481, v507);
        sub_25B47C6E4((uint64_t)v599, v481, v512);
        int32x2_t v513 = (int32x2_t)vmul_f32(vsub_f32(v497, v499), v501);
        float32x2_t v514 = vmla_n_f32(v499, v500, vdiv_f32(vadd_f32((float32x2_t)v513, (float32x2_t)vdup_lane_s32(v513, 1)), vadd_f32((float32x2_t)v585, (float32x2_t)vdup_lane_s32(v585, 1))).f32[0]);
        float v515 = *v508;
        float v516 = v508[1];
        BOOL v517 = *v508 > v516;
        long long v627 = v615;
        BOOL v572 = v517;
        v586 = (void *)((unint64_t)&v627 | (8 * v517));
        void *v586 = v514;
        long long v615 = v627;
        long long v518 = v627;
        long long v519 = v627;
        DWORD2(v519) = v618;
        *(void *)&long long v521 = *((void *)&v627 + 1);
        long long v520 = v521;
        DWORD2(v520) = DWORD1(v618);
        DWORD2(v518) = DWORD1(v618);
        DWORD2(v521) = v618;
        long long v616 = v519;
        *(_OWORD *)v617 = v520;
        *(_OWORD *)id v592 = v518;
        long long v593 = v520;
        long long v594 = v521;
        long long v595 = v519;
        if (src[1]) {
          objc_copyStruct((char *)src[1] + 272, v592, 64, 1, 0);
        }
        long long v627 = *(_OWORD *)obj;
        *(float32x2_t *)((unint64_t)&v627 | (8 * (v515 <= v516))) = v514;
        *(_OWORD *)obuint64_t j = v627;
        long long v522 = v627;
        long long v523 = v627;
        DWORD2(v523) = v603;
        *(void *)&long long v521 = *((void *)&v627 + 1);
        long long v524 = v521;
        DWORD2(v524) = DWORD1(v603);
        DWORD2(v522) = DWORD1(v603);
        DWORD2(v521) = v603;
        long long v601 = v523;
        long long v602 = v524;
        *(_OWORD *)id v592 = v522;
        long long v593 = v524;
        long long v594 = v521;
        long long v595 = v523;
        if (v599[1]) {
          objc_copyStruct((char *)v599[1] + 272, v592, 64, 1, 0);
        }
        if (sub_25B3FCCE0((float32x2_t *)obj, (float32x2_t *)(v485 + 16), 0) < *(float *)(v569 + 508))
        {
          float32x2_t v526 = vsub_f32((float32x2_t)obj[0], (float32x2_t)obj[1]);
          float v527 = sqrtf(vaddv_f32(vmul_f32(v526, v526)));
          if (v527 < *(float *)(v569 + 488))
          {
            float32x2_t v528 = vsub_f32(*(float32x2_t *)(v485 + 16), *(float32x2_t *)(v485 + 24));
            if (v527 < sqrtf(vaddv_f32(vmul_f32(v528, v528))))
            {
              uint64_t v530 = *(void *)(v569 + 56);
              uint64_t v529 = *(void *)(v569 + 64);
              if (v530 != v529)
              {
                float32x2_t v531 = *(float32x2_t *)((char *)v486 + 8 * v572);
                uint64_t v532 = *(char *)(v481 + 151);
                if ((int)v532 >= 0) {
                  uint64_t v533 = *(unsigned __int8 *)(v481 + 151);
                }
                else {
                  uint64_t v533 = *(void *)(v481 + 136);
                }
                uint64_t v564 = *(void *)(v569 + 64);
                uint64_t v568 = v482;
                do
                {
                  uint64_t v534 = *(unsigned __int8 *)(v530 + 151);
                  if ((v534 & 0x80u) == 0) {
                    uint64_t v535 = *(unsigned __int8 *)(v530 + 151);
                  }
                  else {
                    uint64_t v535 = *(void *)(v530 + 136);
                  }
                  if (v535 == v533)
                  {
                    if ((int)v532 >= 0) {
                      v536 = (unsigned __int8 *)(v481 + 128);
                    }
                    else {
                      v536 = (unsigned __int8 *)*v487;
                    }
                    if ((v534 & 0x80) != 0)
                    {
                      uint64_t v538 = v532;
                      int v539 = memcmp(*(const void **)(v530 + 128), v536, *(void *)(v530 + 136));
                      uint64_t v532 = v538;
                      uint64_t v529 = v564;
                      uint64_t v482 = v568;
                      if (!v539) {
                        goto LABEL_784;
                      }
                    }
                    else
                    {
                      if (!*(unsigned char *)(v530 + 151)) {
                        goto LABEL_784;
                      }
                      uint64_t v537 = 0;
                      while (*(unsigned __int8 *)(v530 + v537 + 128) == v536[v537])
                      {
                        if (v534 == ++v537) {
                          goto LABEL_784;
                        }
                      }
                    }
                  }
                  float32x2_t v540 = vsub_f32(v531, *(float32x2_t *)(v530 + 16));
                  int32x2_t v541 = (int32x2_t)vmul_f32(v540, v540);
                  float32x2_t v542 = vsub_f32(v531, *(float32x2_t *)(v530 + 24));
                  int32x2_t v543 = (int32x2_t)vmul_f32(v542, v542);
                  float32x2_t v544 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v543, v541), (float32x2_t)vzip2_s32(v543, v541)));
                  if (v544.f32[0] >= v544.f32[1]) {
                    v544.f32[0] = v544.f32[1];
                  }
                  if (v544.f32[0] < v483) {
                    goto LABEL_787;
                  }
LABEL_784:
                  v530 += 176;
                }
                while (v530 != v529);
              }
              long long v627 = *v486;
              void *v586 = v514;
              *((void *)&v545 + 1) = *((void *)&v627 + 1);
              *uint64_t v486 = v627;
              *(void *)&long long v545 = *(void *)(v481 + 16);
              *(void *)&long long v525 = *(void *)(v481 + 24);
              long long v546 = v545;
              DWORD2(v546) = *(_DWORD *)(v481 + 64);
              long long v547 = v525;
              DWORD2(v547) = *(_DWORD *)(v481 + 68);
              DWORD2(v545) = DWORD2(v547);
              DWORD2(v525) = DWORD2(v546);
              *(_OWORD *)(v481 + 32) = v546;
              *(_OWORD *)(v481 + 48) = v547;
              uint64_t v548 = *(void *)(v481 + 8);
              *(_OWORD *)id v592 = v545;
              long long v593 = v547;
              long long v594 = v525;
              long long v595 = v546;
              if (v548) {
                objc_copyStruct((void *)(v548 + 272), v592, 64, 1, 0);
              }
            }
          }
        }
LABEL_787:
        sub_25B3F5FE8((uint64_t)v599);
        sub_25B3F5FE8((uint64_t)src);
      }
LABEL_788:
      if (!v510) {
        goto LABEL_790;
      }
      goto LABEL_789;
    }
  }
LABEL_794:
  sub_25B4ED9BC((float *)(a1 + 608), a1 + 48);

  sub_25B490778((uint64_t)v587);
  sub_25B490778((uint64_t)v588);
}

void sub_25B48B554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_25B3F5FE8(a16);
  sub_25B3F5FE8(a29);
  operator delete(v40);
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  sub_25B49052C(v41 - 224);
  STACK[0x340] = v41 - 176;
  sub_25B3F5F28((void ***)&STACK[0x340]);

  sub_25B490778((uint64_t)&a35);
  sub_25B490778((uint64_t)&a40);

  _Unwind_Resume(a1);
}

void sub_25B48B8C8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v405 = *MEMORY[0x263EF8340];
  id v6 = a3;
  if (!*(unsigned char *)(a1 + 904)) {
    goto LABEL_422;
  }
  uint64_t v359 = a1;
  uint64_t v347 = (float *)(a1 + 816);
  id v324 = v6;
  id v327 = v6;
  long long v363 = 0uLL;
  *(void *)&long long v364 = 0;
  uint64_t v326 = a4;
  if (!*(unsigned char *)(a4 + 137))
  {
    v360[0] = 1;
    sub_25B456DFC((uint64_t)v370, a4, v360);
    long long v384 = 0u;
    long long v385 = 0u;
    long long v383 = 0u;
    sub_25B4582F4((uint64_t)&v386, (uint64_t)v370);
    long long v392 = 0u;
    long long v391 = 0u;
    long long v390 = 0u;
    LODWORD(v393) = 1132396544;
    long long v383 = v387;
    long long v384 = v388;
    long long v385 = v389;
    long long src = 0u;
    long long v372 = 0u;
    long long v375 = v388;
    long long v376 = v389;
    long long v373 = 0u;
    long long v374 = v387;
    sub_25B4582F4((uint64_t)v377, (uint64_t)&v386);
    long long v379 = v391;
    long long v380 = v392;
    long long v378 = v390;
    uint64_t v381 = v393;
    long long src = v374;
    long long v372 = v375;
    float32x4_t v394 = 0u;
    long long v395 = 0u;
    int8x16_t v396 = 0u;
    *(_OWORD *)float v397 = v374;
    long long v373 = v376;
    *(_OWORD *)&v397[16] = v375;
    *(_OWORD *)&v397[32] = v376;
    long long v398 = v375;
    long long v399 = v376;
    *(_OWORD *)&v397[48] = v374;
    sub_25B4582F4((uint64_t)v400, (uint64_t)v377);
    long long v401 = v378;
    long long v402 = v379;
    long long v403 = v380;
    uint64_t v404 = v381;
    float32x4_t v394 = *(float32x4_t *)v397;
    long long v395 = *(_OWORD *)&v397[16];
    int8x16_t v396 = *(int8x16_t *)&v397[32];
    sub_25B4EFFD0((uint64_t)&v382, &v394);
  }
  float32x2_t v366 = 0;
  uint64_t v367 = 0;
  uint64_t v368 = 0;
  v394.i64[0] = (uint64_t)&v363;
  sub_25B4821D4((void ***)&v394);

  unint64_t v351 = (float *)(a1 + 464);
  uint64_t v343 = (uint64_t)v366;
  uint64_t v332 = (uint64_t)v367;
  if (v366 != v367)
  {
    do
    {
      uint64_t v9 = *(void *)(v359 + 56);
      if (*(void *)(v359 + 64) == v9)
      {
        unint64_t v34 = 0;
        uint64_t v39 = 0;
        unint64_t v10 = 0;
        uint64_t v13 = 0;
        long long src = 0uLL;
        *(void *)&long long v372 = 0;
      }
      else
      {
        unint64_t v10 = 0;
        BOOL v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unint64_t v339 = 0;
        unint64_t v15 = 0;
        do
        {
          unsigned int v16 = sub_25B4F3148(v9 + 176 * v15, v343, v347);
          unsigned int v18 = v16;
          if (v11 >= v12)
          {
            uint64_t v19 = (v11 - v10) >> 2;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((v12 - v10) >> 1 > v20) {
              unint64_t v20 = (v12 - v10) >> 1;
            }
            if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            uint64_t v335 = v13;
            if (v21)
            {
              if (v21 >> 62) {
                sub_25B3FA70C();
              }
              unint64_t v22 = (char *)operator new(4 * v21);
            }
            else
            {
              unint64_t v22 = 0;
            }
            int32x2_t v23 = (unsigned int *)&v22[4 * v19];
            *int32x2_t v23 = v18;
            float32x2_t v24 = (char *)(v23 + 1);
            while (v11 != v10)
            {
              unsigned int v25 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *--int32x2_t v23 = v25;
            }
            unint64_t v12 = &v22[4 * v21];
            if (v10) {
              operator delete(v10);
            }
            unint64_t v10 = (char *)v23;
            BOOL v11 = v24;
            uint64_t v13 = v335;
          }
          else
          {
            *(_DWORD *)BOOL v11 = v16;
            v11 += 4;
          }
          if (v18 <= 1)
          {
            if ((unint64_t)v14 >= v339)
            {
              uint64_t v26 = (v14 - v13) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v339 - (void)v13) >> 1 > v27) {
                unint64_t v27 = (uint64_t)(v339 - (void)v13) >> 1;
              }
              if (v339 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28)
              {
                unint64_t v28 = (unint64_t)sub_25B3FBC64(v28);
                float32x2_t v30 = v12;
              }
              else
              {
                float32x2_t v30 = v12;
                uint64_t v29 = 0;
              }
              float32x2_t v31 = (char *)(v28 + 4 * v26);
              *(_DWORD *)float32x2_t v31 = v15;
              uint64_t v32 = v31 + 4;
              while (v14 != v13)
              {
                int v33 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *((_DWORD *)v31 - 1) = v33;
                v31 -= 4;
              }
              unint64_t v339 = v28 + 4 * v29;
              if (v13) {
                operator delete(v13);
              }
              uint64_t v13 = v31;
              uint64_t v14 = v32;
              unint64_t v12 = v30;
            }
            else
            {
              *(_DWORD *)uint64_t v14 = v15;
              v14 += 4;
            }
          }
          ++v15;
          uint64_t v9 = *(void *)(v359 + 56);
        }
        while (0x2E8BA2E8BA2E8BA3 * ((*(void *)(v359 + 64) - v9) >> 4) > v15);
        long long src = 0uLL;
        *(void *)&long long v372 = 0;
        unint64_t v34 = 0;
        if (v14 == v13)
        {
          uint64_t v39 = 0;
        }
        else
        {
          if ((unint64_t)((v14 - v13) >> 2) <= 1) {
            uint64_t v35 = 1;
          }
          else {
            uint64_t v35 = (v14 - v13) >> 2;
          }
          uint64_t v36 = v13;
          do
          {
            int v37 = *(_DWORD *)v36;
            v36 += 4;
            uint64_t v38 = *(void *)(v359 + 56) + 176 * v37;
            if (v34 >= (unint64_t)v372)
            {
              unint64_t v34 = sub_25B47C818((uint64_t *)&src, v38, v17);
            }
            else
            {
              sub_25B47C6E4(v34, v38, v17);
              v34 += 176;
            }
            *((void *)&src + 1) = v34;
            --v35;
          }
          while (v35);
          uint64_t v39 = src;
        }
      }
      sub_25B4D6DCC((uint64_t)&v394, v39, v34, (uint64_t *)&src, v351);
      uint64_t v42 = *((void *)&src + 1);
      uint64_t v43 = src;
      if (*((void *)&src + 1) != (void)src)
      {
        unint64_t v44 = 0;
        int v45 = 0;
        do
        {
          if (v42 == v43) {
            break;
          }
          uint64_t v46 = 0;
          unint64_t v47 = 0;
          do
          {
            objc_msgSend_confidence(*(void **)(v43 + 176 * v44 + 8), v40, v41, v324);
            if (v50 <= 0.8)
            {
              BOOL v52 = 0;
            }
            else
            {
              objc_msgSend_confidence(*(void **)(v43 + v46 + 8), v48, v49);
              BOOL v52 = v51 > 0.8;
            }
            *(void *)&long long v383 = v43 + 176 * v44 + 128;
            long long v53 = sub_25B48F7D8((uint64_t)&v394, (unsigned __int8 *)v383, (long long **)&v383);
            *(void *)&long long v383 = v43 + v46 + 128;
            long long v54 = sub_25B48FC44((uint64_t)(v53 + 40), (unsigned __int8 *)v383, (long long **)&v383);
            float v55 = *((float *)v54 + 20);
            BOOL v56 = v55 < 140.0;
            if (v55 <= 130.0) {
              BOOL v56 = 0;
            }
            int v57 = v52 && v56;
            if (!v54[54]) {
              int v57 = 0;
            }
            v45 += v57;
            ++v47;
            uint64_t v42 = *((void *)&src + 1);
            uint64_t v43 = src;
            unint64_t v58 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&src + 1) - src) >> 4);
            v46 += 176;
          }
          while (v47 < v58);
          ++v44;
        }
        while (v44 < v58);
        if (v45 > 0) {
          *(_DWORD *)(v343 + 88) = 2;
        }
      }
      sub_25B490778((uint64_t)&v394);
      v394.i64[0] = (uint64_t)&src;
      sub_25B3F5F28((void ***)&v394);
      if (v13) {
        operator delete(v13);
      }
      if (v10) {
        operator delete(v10);
      }
      v343 += 320;
    }
    while (v343 != v332);
    uint64_t v60 = (uint64_t)v366;
    uint64_t v59 = (uint64_t)v367;
    if (v366 != v367)
    {
      do
      {
        if (*(_DWORD *)(v60 + 88) == 2)
        {
          uint64_t v59 = sub_25B490678(v60 + 320, v59, v60);
          if (v367 != (float32x4_t *)v59)
          {
            float32x4_t v61 = v367 - 20;
            unint64_t v62 = v367 - 20;
            do
            {
              (*(void (**)(float32x4_t *))v62->i64[0])(v62);
              v61 -= 20;
              BOOL v110 = v62 == (float32x4_t *)v59;
              v62 -= 20;
            }
            while (!v110);
          }
          uint64_t v367 = (float32x4_t *)v59;
        }
        else
        {
          v60 += 320;
        }
      }
      while (v60 != v59);
      for (uint64_t i = (uint64_t)v366; ; i += 320)
      {
        if (i == v59) {
          goto LABEL_96;
        }
        uint64_t v64 = operator new(0x10uLL);
        *uint64_t v64 = *(_OWORD *)(i + 32);
        unint64_t v65 = sub_25B3FFAEC(2uLL);
        v65[1] = *(_OWORD *)(i + 48);
        *unint64_t v65 = *v64;
        operator delete(v64);
        int v66 = sub_25B48F32C(*a2, a2[1], (uint64_t)v65, 2);
        *(unsigned char *)(i + 76) = v66;
        uint64_t v67 = *(void *)(i + 8);
        if (v66) {
          break;
        }
        if (v67 && !*(_DWORD *)(v67 + 116))
        {
          int v68 = 1;
LABEL_94:
          *(_DWORD *)(v67 + 116) = v68;
        }
LABEL_95:
        operator delete(v65);
      }
      if (!v67) {
        goto LABEL_95;
      }
      int v68 = 0;
      goto LABEL_94;
    }
  }
LABEL_96:
  uint64_t v69 = *(void *)(v359 + 768);
  uint64_t v70 = *(void *)(v359 + 776);
  while (v69 != v70)
  {
    long long v71 = operator new(0x10uLL);
    *long long v71 = *(_OWORD *)(v69 + 32);
    uint64_t v72 = sub_25B3FFAEC(2uLL);
    v72[1] = *(_OWORD *)(v69 + 48);
    *uint64_t v72 = *v71;
    operator delete(v71);
    int v73 = sub_25B48F32C(*a2, a2[1], (uint64_t)v72, 2);
    *(unsigned char *)(v69 + 76) = v73;
    uint64_t v74 = *(void *)(v69 + 8);
    if (v73)
    {
      if (!v74) {
        goto LABEL_105;
      }
      int v75 = 0;
      goto LABEL_104;
    }
    if (v74 && !*(_DWORD *)(v74 + 116))
    {
      int v75 = 1;
LABEL_104:
      *(_DWORD *)(v74 + 116) = v75;
    }
LABEL_105:
    operator delete(v72);
    v69 += 320;
  }
  long long v363 = 0u;
  long long v364 = 0u;
  int v365 = 1065353216;
  uint64_t v336 = (uint64_t)v367;
  unint64_t v340 = v366;
  float32x2_t v325 = (uint64_t *)(v359 + 768);
  if (v366 != v367)
  {
    v76.i64[0] = 0;
    int32x2_t v77 = vdup_n_s32(0x49742400u);
    do
    {
      uint64_t v78 = *(float32x4_t **)(v359 + 768);
      uint64_t v79 = *(float32x4_t **)(v359 + 776);
      if (v78 != v79)
      {
        uint64_t v80 = (unsigned __int8 *)&v340[8];
        do
        {
          sub_25B5ED944((float32x4_t **)&src, v340 + 12, *(double *)v76.i64);
          sub_25B5ED944((float32x4_t **)&v383, v78 + 12, v81);
          long long v395 = xmmword_25B5F1380;
          *(int32x2_t *)v396.i8 = v77;
          v396.i64[1] = -3175874560;
          *(_WORD *)float v397 = 0;
          memset(&v397[8], 0, 48);
          uint64_t v82 = (void *)src;
          uint64_t v83 = (void *)v383;
          v397[0] = sub_25B48F32C(src, (uint64_t)(*((void *)&src + 1) - src) >> 4, v383, (uint64_t)(*((void *)&v383 + 1) - v383) >> 4);
          *(void *)&long long v382 = v340 + 8;
          uint64_t v84 = sub_25B48F7D8((uint64_t)&v363, v80, (long long **)&v382);
          *(void *)&long long v382 = v78 + 8;
          uint64_t v85 = sub_25B48FC44((uint64_t)(v84 + 40), (unsigned __int8 *)&v78[8], (long long **)&v382);
          double v86 = v85;
          __int16 v87 = *(_WORD *)v397;
          long long v89 = v395;
          int8x16_t v88 = v396;
          *(float32x4_t *)(v85 + 40) = v394;
          *(_OWORD *)(v85 + 56) = v89;
          *(int8x16_t *)(v85 + 72) = v88;
          *((_WORD *)v85 + 44) = v87;
          if (v85 + 40 != (unsigned __int8 *)&v394)
          {
            sub_25B3FE7A8((char *)v85 + 96, *(char **)&v397[8], *(uint64_t *)&v397[16], (uint64_t)(*(void *)&v397[16] - *(void *)&v397[8]) >> 2);
            sub_25B3FE7A8((char *)v86 + 120, *(char **)&v397[32], *(uint64_t *)&v397[40], (uint64_t)(*(void *)&v397[40] - *(void *)&v397[32]) >> 2);
          }
          *(void *)&long long v382 = v78 + 8;
          float v90 = sub_25B48F7D8((uint64_t)&v363, (unsigned __int8 *)&v78[8], (long long **)&v382);
          *(void *)&long long v382 = v340 + 8;
          unint64_t v91 = sub_25B48FC44((uint64_t)(v90 + 40), v80, (long long **)&v382);
          uint64_t v92 = v91;
          __int16 v93 = *(_WORD *)v397;
          long long v94 = v395;
          int8x16_t v76 = v396;
          *(float32x4_t *)(v91 + 40) = v394;
          *(_OWORD *)(v91 + 56) = v94;
          *(int8x16_t *)(v91 + 72) = v76;
          *((_WORD *)v91 + 44) = v93;
          if (v91 + 40 != (unsigned __int8 *)&v394)
          {
            sub_25B3FE7A8((char *)v91 + 96, *(char **)&v397[8], *(uint64_t *)&v397[16], (uint64_t)(*(void *)&v397[16] - *(void *)&v397[8]) >> 2);
            sub_25B3FE7A8((char *)v92 + 120, *(char **)&v397[32], *(uint64_t *)&v397[40], (uint64_t)(*(void *)&v397[40] - *(void *)&v397[32]) >> 2);
          }
          if (*(void *)&v397[32])
          {
            *(void *)&v397[40] = *(void *)&v397[32];
            operator delete(*(void **)&v397[32]);
          }
          if (*(void *)&v397[8])
          {
            *(void *)&v397[16] = *(void *)&v397[8];
            operator delete(*(void **)&v397[8]);
          }
          if (v83) {
            operator delete(v83);
          }
          if (v82) {
            operator delete(v82);
          }
          v78 += 20;
        }
        while (v78 != v79);
      }
      v340 += 20;
    }
    while (v340 != (float32x4_t *)v336);
    uint64_t v95 = (uint64_t)v367;
    if (v366 != v367)
    {
      float v96 = (unsigned __int8 *)&v366[8];
      do
      {
        if (*(v96 - 52))
        {
          sub_25B490110((uint64_t)&v394, v96, &v363);
          if (!*((void *)&v395 + 1))
          {
            uint64_t v97 = (uint64_t)(v96 - 128);
            *((_DWORD *)v96 - 10) = 4;
            unint64_t v98 = *(void *)(v359 + 776);
            if (v98 >= *(void *)(v359 + 784))
            {
              uint64_t v99 = sub_25B49037C(v325, v97);
              uint64_t v100 = v359;
            }
            else
            {
              sub_25B4901F0(*(void *)(v359 + 776), v97);
              uint64_t v99 = v98 + 320;
              uint64_t v100 = v359;
              *(void *)(v359 + 776) = v98 + 320;
            }
            *(void *)(v100 + 776) = v99;
          }
          sub_25B49052C((uint64_t)&v394);
        }
        else
        {
          *((_DWORD *)v96 - 10) = 5;
        }
        float v101 = v96 + 192;
        v96 += 320;
      }
      while (v101 != (unsigned __int8 *)v95);
    }
  }
  uint64_t v102 = *(void *)(v359 + 768);
  uint64_t v103 = *(void *)(v359 + 776);
  if (v102 == v103) {
    goto LABEL_170;
  }
  do
  {
    sub_25B490110((uint64_t)v360, (unsigned __int8 *)(v102 + 128), &v363);
    uint64_t v104 = v361;
    if (v361)
    {
      uint64_t v105 = (uint64_t)v366;
      uint64_t v106 = (uint64_t)v367;
      long long v107 = v361;
      while (1)
      {
        int v108 = sub_25B49058C(v107 + 2, v105, v106);
        if (v108 != -1)
        {
          if (*(unsigned char *)(v105 + 320 * v108 + 76)) {
            break;
          }
        }
        long long v107 = (unsigned __int8 **)*v107;
        if (!v107) {
          goto LABEL_144;
        }
      }
      *(unsigned char *)(v102 + 76) = 1;
      uint64_t v109 = *(void *)(v102 + 8);
      if (v109) {
        *(_DWORD *)(v109 + 116) = 0;
      }
    }
LABEL_144:
    if (*(unsigned char *)(v102 + 76)) {
      BOOL v110 = v362 == 1;
    }
    else {
      BOOL v110 = 0;
    }
    if (v110)
    {
      if (sub_25B49058C(v104 + 2, (uint64_t)v366, (uint64_t)v367) != -1)
      {
        v327;
        unsigned int v369 = 1;
        sub_25B456DFC((uint64_t)v370, v326, &v369);
        long long v384 = 0u;
        long long v385 = 0u;
        long long v383 = 0u;
        sub_25B4582F4((uint64_t)&v386, (uint64_t)v370);
        long long v391 = 0u;
        long long v392 = 0u;
        long long v390 = 0u;
        LODWORD(v393) = 1132396544;
        long long v383 = v387;
        long long v384 = v388;
        long long v385 = v389;
        long long src = 0u;
        long long v372 = 0u;
        long long v373 = 0u;
        long long v375 = v388;
        long long v376 = v389;
        long long v374 = v387;
        sub_25B4582F4((uint64_t)v377, (uint64_t)&v386);
        long long v378 = v390;
        long long v379 = v391;
        long long v380 = v392;
        uint64_t v381 = v393;
        long long src = v374;
        long long v372 = v375;
        *(_OWORD *)float v397 = v374;
        *(_OWORD *)&v397[16] = v375;
        long long v373 = v376;
        float32x4_t v394 = 0u;
        long long v395 = 0u;
        int8x16_t v396 = 0u;
        *(_OWORD *)&v397[32] = v376;
        long long v398 = v375;
        long long v399 = v376;
        *(_OWORD *)&v397[48] = v374;
        sub_25B4582F4((uint64_t)v400, (uint64_t)v377);
        long long v401 = v378;
        long long v402 = v379;
        long long v403 = v380;
        uint64_t v404 = v381;
        float32x4_t v394 = *(float32x4_t *)v397;
        long long v395 = *(_OWORD *)&v397[16];
        int8x16_t v396 = *(int8x16_t *)&v397[32];
        sub_25B4EFFD0((uint64_t)&v382, &v394);
      }
    }
    else
    {
      *(_DWORD *)(v102 + 88) = 0;
    }
    sub_25B49052C((uint64_t)v360);
    v102 += 320;
  }
  while (v102 != v103);
  uint64_t v111 = *(void *)(v359 + 768);
  uint64_t v112 = *(void *)(v359 + 776);
  if (v111 == v112)
  {
LABEL_170:
    long long v117 = 0uLL;
    long long src = 0u;
    long long v372 = 0u;
    LODWORD(v373) = 1065353216;
LABEL_171:
    long long v383 = v117;
    long long v384 = v117;
    LODWORD(v385) = 1065353216;
    goto LABEL_172;
  }
  do
  {
    if (*(_DWORD *)(v111 + 88) == 2)
    {
      uint64_t v112 = sub_25B490678(v111 + 320, v112, v111);
      uint64_t v113 = *(void *)(v359 + 776);
      if (v113 != v112)
      {
        uint64_t v114 = v113 - 320;
        BOOL v115 = (void (***)(void))(v113 - 320);
        do
        {
          (**v115)(v115);
          v114 -= 320;
          BOOL v110 = v115 == (void (***)(void))v112;
          v115 -= 40;
        }
        while (!v110);
      }
      *(void *)(v359 + 776) = v112;
    }
    else
    {
      v111 += 320;
    }
  }
  while (v111 != v112);
  uint64_t v116 = *v325;
  long long v117 = 0uLL;
  long long src = 0u;
  long long v372 = 0u;
  LODWORD(v373) = 1065353216;
  if (v116 == v112) {
    goto LABEL_171;
  }
  do
  {
    uint64_t v119 = *(void *)(v359 + 56);
    for (uint64_t j = *(void *)(v359 + 64); v119 != j; v119 = (uint64_t)(v122 + 48))
    {
      int v120 = sub_25B4F3148(v119, v116, v347);
      v394.i64[0] = v116 + 128;
      uint64_t v121 = sub_25B4F3FD0((uint64_t)&src, (unsigned __int8 *)(v116 + 128), (long long **)&v394);
      uint64_t v122 = (unsigned __int8 *)(v119 + 128);
      v394.i64[0] = (uint64_t)v122;
      *((_DWORD *)sub_25B4F443C((uint64_t *)v121 + 5, v122, (long long **)&v394) + 10) = v120;
      v394.i64[0] = (uint64_t)v122;
      int v123 = sub_25B4F3FD0((uint64_t)&src, v122, (long long **)&v394);
      v394.i64[0] = v116 + 128;
      *((_DWORD *)sub_25B4F443C((uint64_t *)v123 + 5, (unsigned __int8 *)(v116 + 128), (long long **)&v394) + 10) = v120;
    }
    v116 += 320;
  }
  while (v116 != v112);
  float32x2_t v124 = (unsigned __int8 *)v372;
  long long v383 = 0u;
  long long v384 = 0u;
  for (LODWORD(v385) = 1065353216; v124; float32x2_t v124 = *(unsigned __int8 **)v124)
  {
    for (uint64_t k = (uint64_t *)*((void *)v124 + 7); k; uint64_t k = (uint64_t *)*k)
    {
      int v126 = *((_DWORD *)k + 10);
      v394.i64[0] = (uint64_t)(v124 + 16);
      unint64_t v127 = sub_25B4F3FD0((uint64_t)&v383, v124 + 16, (long long **)&v394);
      v394.i64[0] = (uint64_t)(k + 2);
      *((_DWORD *)sub_25B4F443C((uint64_t *)v127 + 5, (unsigned __int8 *)k + 16, (long long **)&v394) + 10) = v126;
      int v128 = *((_DWORD *)k + 10);
      v394.i64[0] = (uint64_t)(k + 2);
      uint64_t v129 = sub_25B4F3FD0((uint64_t)&v383, (unsigned __int8 *)k + 16, (long long **)&v394);
      v394.i64[0] = (uint64_t)(v124 + 16);
      *((_DWORD *)sub_25B4F443C((uint64_t *)v129 + 5, v124 + 16, (long long **)&v394) + 10) = v128;
    }
  }
LABEL_172:
  id v130 = *(float32x2_t **)(v359 + 768);
  uint64_t v344 = *(float32x2_t **)(v359 + 776);
  if (v130 != v344)
  {
    while (1)
    {
      uint64_t v131 = *(void *)(v359 + 56);
      uint64_t v132 = *(void *)(v359 + 64);
      if (v131 != v132) {
        break;
      }
LABEL_217:
      v130 += 40;
      if (v130 == v344) {
        goto LABEL_218;
      }
    }
    while (2)
    {
      objc_msgSend_confidence(*(void **)(v131 + 8), v7, v8, v324);
      if (v133 >= *(float *)(v359 + 576))
      {
        v394.i64[0] = (uint64_t)&v130[16];
        uint64_t v134 = sub_25B4F3FD0((uint64_t)&src, (unsigned __int8 *)&v130[16], (long long **)&v394);
        v394.i64[0] = v131 + 128;
        int v135 = *((_DWORD *)sub_25B4F443C((uint64_t *)v134 + 5, (unsigned __int8 *)(v131 + 128), (long long **)&v394) + 10);
        if (!v135)
        {
          float v348 = v130[28].f32[0];
          __float2 v136 = __sincosf_stret((float)(v130[28].f32[1] / 180.0) * 3.1416);
          __float2 v138 = __sincosf_stret((float)(v130[29].f32[0] / 180.0) * 3.1416);
          v137.f32[0] = v138.__cosval;
          float32x2_t v139 = *(float32x2_t *)(v131 + 16);
          float32x2_t v140 = *(float32x2_t *)(v131 + 24);
          float32x2_t v141 = v130[26];
          float32x2_t v142 = vadd_f32(v141, vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v136.__sinval), LODWORD(v136.__cosval)), v348));
          float32x2_t v143 = vsub_f32(v142, v139);
          if (vaddv_f32(vmul_f32(v143, vsub_f32(v142, v140))) <= 0.00001)
          {
            float32x2_t v145 = vsub_f32(v140, v139);
            float v146 = vaddv_f32(vmul_f32(v143, v145));
            float v147 = vaddv_f32(vmul_f32(v145, v145));
            if (v147 < 0.000001) {
              float v147 = 0.000001;
            }
            float32x2_t v148 = vsub_f32(vmla_n_f32(v139, v145, v146 / v147), v142);
            BOOL v144 = sqrtf(vaddv_f32(vmul_f32(v148, v148))) < *(float *)(v359 + 860);
          }
          else
          {
            BOOL v144 = 0;
          }
          v137.i32[1] = LODWORD(v138.__sinval);
          float32x2_t v149 = vadd_f32(v141, vmul_n_f32(v137, v348));
          float32x2_t v150 = vsub_f32(v149, v139);
          if (vaddv_f32(vmul_f32(v150, vsub_f32(v149, v140))) <= 0.00001)
          {
            float32x2_t v152 = vsub_f32(v140, v139);
            float v153 = vaddv_f32(vmul_f32(v150, v152));
            float v154 = vaddv_f32(vmul_f32(v152, v152));
            if (v154 < 0.000001) {
              float v154 = 0.000001;
            }
            float32x2_t v155 = vsub_f32(vmla_n_f32(v139, v152, v153 / v154), v149);
            BOOL v151 = sqrtf(vaddv_f32(vmul_f32(v155, v155))) < *(float *)(v359 + 860);
          }
          else
          {
            BOOL v151 = 0;
          }
          if (v144 || v151)
          {
            float32x2_t v156 = *(float32x2_t **)(v359 + 56);
            unsigned __int16 v157 = *(float32x2_t **)(v359 + 64);
            if (v156 != v157)
            {
              int v135 = 0;
              while (1)
              {
                uint64_t v158 = *(unsigned __int8 *)(v131 + 151);
                if ((v158 & 0x80u) == 0) {
                  uint64_t v159 = *(unsigned __int8 *)(v131 + 151);
                }
                else {
                  uint64_t v159 = *(void *)(v131 + 136);
                }
                float32x2_t v160 = (float32x2_t)v156[18].u8[7];
                int v161 = v160.i8[0];
                if (v160.i8[0] < 0) {
                  float32x2_t v160 = v156[17];
                }
                if (v159 != *(void *)&v160) {
                  goto LABEL_205;
                }
                if (v161 >= 0) {
                  float32x2_t v162 = v156 + 16;
                }
                else {
                  float32x2_t v162 = (float32x2_t *)v156[16];
                }
                if ((v158 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)(v131 + 128), v162, *(void *)(v131 + 136))) {
                    goto LABEL_205;
                  }
                }
                else if (*(unsigned char *)(v131 + 151))
                {
                  uint64_t v163 = 0;
                  while (*(unsigned __int8 *)(v131 + v163 + 128) == v162->u8[v163])
                  {
                    if (v158 == ++v163) {
                      goto LABEL_212;
                    }
                  }
LABEL_205:
                  sub_25B4D4E4C((uint64_t)&v394, (float32x2_t *)(v131 + 16), v156 + 2, v351);
                  if (v394.i8[14])
                  {
                    *(void *)&long long v382 = v156 + 16;
                    int v164 = sub_25B4F3FD0((uint64_t)&src, (unsigned __int8 *)&v156[16], (long long **)&v382);
                    *(void *)&long long v382 = v130 + 16;
                    if (*((_DWORD *)sub_25B4F443C((uint64_t *)v164 + 5, (unsigned __int8 *)&v130[16], (long long **)&v382)+ 10) == -1)int v135 = 1; {
                  }
                    }
                  if (*(void *)&v397[32])
                  {
                    *(void *)&v397[40] = *(void *)&v397[32];
                    operator delete(*(void **)&v397[32]);
                  }
                  if (*(void *)&v397[8])
                  {
                    *(void *)&v397[16] = *(void *)&v397[8];
                    operator delete(*(void **)&v397[8]);
                  }
                }
LABEL_212:
                v156 += 22;
                if (v156 == v157) {
                  goto LABEL_215;
                }
              }
            }
          }
          int v135 = 0;
        }
LABEL_215:
        v394.i64[0] = v131 + 128;
        uint64_t v165 = sub_25B4F3FD0((uint64_t)&v383, (unsigned __int8 *)(v131 + 128), (long long **)&v394);
        v394.i64[0] = (uint64_t)&v130[16];
        *((_DWORD *)sub_25B4F443C((uint64_t *)v165 + 5, (unsigned __int8 *)&v130[16], (long long **)&v394) + 10) = v135;
        v394.i64[0] = (uint64_t)&v130[16];
        float v166 = sub_25B4F3FD0((uint64_t)&v383, (unsigned __int8 *)&v130[16], (long long **)&v394);
        v394.i64[0] = v131 + 128;
        *((_DWORD *)sub_25B4F443C((uint64_t *)v166 + 5, (unsigned __int8 *)(v131 + 128), (long long **)&v394) + 10) = v135;
      }
      v131 += 176;
      if (v131 == v132) {
        goto LABEL_217;
      }
      continue;
    }
  }
LABEL_218:
  uint64_t v167 = *(void *)(v359 + 56);
  uint64_t v168 = *(void *)(v359 + 64);
  if (v167 == v168) {
    goto LABEL_421;
  }
  do
  {
    float v169 = *(unsigned __int8 **)(v359 + 768);
    unint64_t v170 = *(unsigned __int8 **)(v359 + 776);
    if (v169 != v170)
    {
      uint64_t v171 = v169 + 128;
      while (1)
      {
        if (*(v171 - 52) | *(unsigned __int8 *)(v167 + 76))
        {
          v394.i64[0] = v167 + 128;
          float v172 = sub_25B4F3FD0((uint64_t)&v383, (unsigned __int8 *)(v167 + 128), (long long **)&v394);
          v394.i64[0] = (uint64_t)v171;
          if (!*((_DWORD *)sub_25B4F443C((uint64_t *)v172 + 5, v171, (long long **)&v394) + 10)) {
            break;
          }
        }
        float v173 = v171 + 192;
        v171 += 320;
        if (v173 == v170) {
          goto LABEL_226;
        }
      }
      *(_DWORD *)(v167 + 88) = 2;
    }
LABEL_226:
    v167 += 176;
  }
  while (v167 != v168);
  uint64_t v174 = *(void *)(v359 + 56);
  uint64_t v175 = *(void *)(v359 + 64);
  if (v174 != v175)
  {
    do
    {
      if (*(_DWORD *)(v174 + 88) == 2)
      {
        uint64_t v175 = sub_25B487EC4(v174 + 176, v175, v174);
        uint64_t v176 = *(void *)(v359 + 64);
        if (v176 != v175)
        {
          uint64_t v177 = v176 - 176;
          float v178 = (void (***)(void))(v176 - 176);
          float v179 = (void (***)(void))(v176 - 176);
          do
          {
            float v180 = *v179;
            v179 -= 22;
            (*v180)(v178);
            v177 -= 176;
            BOOL v110 = v178 == (void (***)(void))v175;
            float v178 = v179;
          }
          while (!v110);
        }
        *(void *)(v359 + 64) = v175;
      }
      else
      {
        v174 += 176;
      }
    }
    while (v174 != v175);
    uint64_t v181 = *(void *)(v359 + 56);
    if (v181 != v175)
    {
      uint64_t v331 = v175;
      while (1)
      {
        uint64_t v182 = *(float32x4_t **)(v359 + 768);
        float v183 = *(float32x4_t **)(v359 + 776);
        if (v182 == v183) {
          goto LABEL_371;
        }
        uint64_t v349 = (unsigned __int8 *)(v181 + 128);
        uint64_t v337 = v181;
        int v345 = *(float32x4_t **)(v359 + 776);
        do
        {
          if (!(v182[4].u8[12] | *(unsigned __int8 *)(v181 + 76))) {
            goto LABEL_357;
          }
          v394.i64[0] = (uint64_t)v349;
          uint64_t v184 = sub_25B4F3FD0((uint64_t)&v383, v349, (long long **)&v394);
          v394.i64[0] = (uint64_t)&v182[8];
          if (*((_DWORD *)sub_25B4F443C((uint64_t *)v184 + 5, (unsigned __int8 *)&v182[8], (long long **)&v394) + 10) != 1) {
            goto LABEL_357;
          }
          int v185 = 0;
          float32x2_t v186 = 0;
          float32x2_t v187 = (float32x4_t *)v181;
          unint64_t v188 = 0;
          uint64_t v189 = 0;
          float32x4_t v190 = v187[2];
          float32x4_t v191 = v187[3];
          v394.i64[0] = v187[2].i64[0];
          v190.i32[2] = 0;
          float32x4_t v352 = v190;
          *(void *)&long long v395 = v191.i64[0];
          v191.i32[2] = 0;
          float32x4_t v333 = v191;
          v394.i32[2] = 0;
          DWORD2(v395) = 0;
          char v192 = 1;
          do
          {
            float32x4_t v193 = *(&v394 + v189);
            char v194 = v192;
            float32x4_t v195 = v182[13];
            float32x4_t v196 = vsubq_f32(v193, v195);
            float32x4_t v197 = vmulq_f32(v196, v196);
            float32x4_t v198 = vaddq_f32(v197, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v197.f32, 1));
            int32x2_t v199 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v197, 2), v198).u64[0];
            *(float *)v199.i32 = sqrtf(*(float *)v199.i32);
            if (*(float *)v199.i32 < 0.000001) {
              *(float *)v199.i32 = 0.000001;
            }
            float32x4_t v200 = vdivq_f32(v196, (float32x4_t)vdupq_lane_s32(v199, 0));
            float32x4_t v201 = vmlaq_f32(vmlaq_n_f32(v195, v200, v182[14].f32[0]), (float32x4_t)0, v200);
            float32x4_t v202 = vsubq_f32(v193, v201);
            float32x4_t v203 = vmulq_f32(v202, v202);
            float32x4_t v204 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v203, 2), vaddq_f32(v203, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v203.f32, 1)));
            if (sqrtf(v204.f32[0]) < *(float *)(v359 + 860) && sub_25B5EDCEC(v182 + 12, v201, 0.0))
            {
              if ((unint64_t)v186 < v188)
              {
                *float32x2_t v186 = 1;
                uint64_t v205 = v186 + 1;
LABEL_251:
                unsigned __int16 v206 = v205;
                goto LABEL_279;
              }
              uint64_t v213 = v186 - v185;
              unint64_t v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v188 - (void)v185) >> 1 > v214) {
                unint64_t v214 = (uint64_t)(v188 - (void)v185) >> 1;
              }
              if (v188 - (unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v209 = v214;
              }
              if (v209) {
                unint64_t v209 = (unint64_t)sub_25B3FBC64(v209);
              }
              else {
                uint64_t v210 = 0;
              }
              unint64_t v211 = (int *)(v209 + 4 * v213);
              *unint64_t v211 = 1;
              unsigned __int16 v206 = v211 + 1;
              while (v186 != v185)
              {
                int v215 = *--v186;
                *--unint64_t v211 = v215;
              }
            }
            else
            {
              if ((unint64_t)v186 < v188)
              {
                *float32x2_t v186 = 0;
                uint64_t v205 = v186 + 1;
                goto LABEL_251;
              }
              uint64_t v207 = v186 - v185;
              unint64_t v208 = v207 + 1;
              if ((unint64_t)(v207 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v188 - (void)v185) >> 1 > v208) {
                unint64_t v208 = (uint64_t)(v188 - (void)v185) >> 1;
              }
              if (v188 - (unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v209 = v208;
              }
              if (v209) {
                unint64_t v209 = (unint64_t)sub_25B3FBC64(v209);
              }
              else {
                uint64_t v210 = 0;
              }
              unint64_t v211 = (int *)(v209 + 4 * v207);
              *unint64_t v211 = 0;
              unsigned __int16 v206 = v211 + 1;
              while (v186 != v185)
              {
                int v212 = *--v186;
                *--unint64_t v211 = v212;
              }
            }
            unint64_t v188 = v209 + 4 * v210;
            if (v185) {
              operator delete(v185);
            }
            int v185 = v211;
LABEL_279:
            char v192 = 0;
            float32x2_t v186 = v206;
            uint64_t v189 = 1;
          }
          while ((v194 & 1) != 0);
          int v217 = *v185;
          int v216 = v185[1];
          if (!(*v185 + v216))
          {
            float32x4_t v341 = v352;
            uint64_t v181 = v337;
            float v183 = v345;
            goto LABEL_282;
          }
          uint64_t v181 = v337;
          float v183 = v345;
          if (v217 == 1)
          {
            float32x4_t v341 = v333;
            float32x4_t v333 = v352;
            if (v216) {
              goto LABEL_300;
            }
          }
          else
          {
            if (v217) {
              BOOL v233 = 0;
            }
            else {
              BOOL v233 = v216 == 1;
            }
            float32x4_t v341 = v352;
            if (!v233)
            {
LABEL_300:
              *(_DWORD *)(v337 + 88) = 2;
              goto LABEL_356;
            }
          }
LABEL_282:
          float32x2_t v218 = *(float32x2_t *)v182[13].f32;
          float32x2_t v219 = *(float32x2_t *)(v181 + 32);
          float32x2_t v220 = *(float32x2_t *)(v181 + 48);
          float32x2_t v221 = vsub_f32(v220, v219);
          float v222 = vaddv_f32(vmul_f32(vsub_f32(v218, v219), v221));
          *(float32x2_t *)v204.f32 = vmul_f32(v221, v221);
          v204.f32[0] = vaddv_f32(*(float32x2_t *)v204.f32);
          if (v204.f32[0] >= 0.000001) {
            float v223 = v204.f32[0];
          }
          else {
            float v223 = 0.000001;
          }
          *(float32x2_t *)v198.f32 = vmla_n_f32(v219, v221, v222 / v223);
          float32x2_t v224 = vsub_f32(*(float32x2_t *)v198.f32, v218);
          float32x2_t v225 = vmul_f32(v224, v224);
          v225.f32[0] = sqrtf(vaddv_f32(v225));
          float v226 = v182[14].f32[0];
          if (v225.f32[0] >= v226)
          {
            float32x4_t v354 = v198;
            if (v225.f32[0] <= (float)(v226 + *(float *)(v359 + 872)))
            {
              uint64_t v229 = (float32x4_t *)sub_25B3FFAEC(1uLL);
              float32x4_t v232 = v354;
              v232.i32[2] = 0;
              uint64_t v231 = v229;
LABEL_304:
              float32x4_t *v231 = v232;
              uint64_t v239 = v231 + 1;
              BOOL v240 = v229;
LABEL_305:
              int64x2_t v235 = 0;
              int v234 = 0;
              unint64_t v241 = 0;
              __pa = v240;
              do
              {
                float v242 = *(float *)(v359 + 864);
                *(float *)v230.i32 = (float)(v182[14].f32[0] * 6.2832) / (float)(*(float *)(v359 + 868) * 360.0);
                float32x4_t v355 = *v240;
                BOOL v243 = sub_25B5EDCEC(v182 + 12, *v240, *(double *)&v230);
                float32x2_t v244 = vsub_f32(*(float32x2_t *)v355.f32, v219);
                float32x2_t v245 = vsub_f32(*(float32x2_t *)v355.f32, v220);
                float v246 = vaddv_f32(vmul_f32(v244, v245));
                int32x2_t v247 = (int32x2_t)vmul_f32(v244, v244);
                int32x2_t v230 = (int32x2_t)vmul_f32(v245, v245);
                float32x2_t v248 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v247, v230), (float32x2_t)vzip2_s32(v247, v230)));
                if (v248.f32[0] < v248.f32[1]) {
                  v248.f32[0] = v248.f32[1];
                }
                if ((float)(v246 / v248.f32[0]) <= v242 && v243)
                {
                  if ((unint64_t)v234 >= v241)
                  {
                    uint64_t v250 = v234 - v235;
                    unint64_t v251 = v250 + 1;
                    if ((unint64_t)(v250 + 1) >> 60) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v241 - (void)v235) >> 3 > v251) {
                      unint64_t v251 = (uint64_t)(v241 - (void)v235) >> 3;
                    }
                    if (v241 - (unint64_t)v235 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v252 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v252 = v251;
                    }
                    if (v252) {
                      unint64_t v252 = (unint64_t)sub_25B3FFAEC(v252);
                    }
                    else {
                      uint64_t v253 = 0;
                    }
                    float v254 = (float32x4_t *)(v252 + 16 * v250);
                    *float v254 = *v240;
                    float v255 = v254 + 1;
                    while (v234 != v235)
                    {
                      float32x4_t v256 = v234[-1];
                      --v234;
                      v254[-1] = v256;
                      --v254;
                    }
                    unint64_t v241 = v252 + 16 * v253;
                    if (v235) {
                      operator delete(v235);
                    }
                    int64x2_t v235 = v254;
                    int v234 = v255;
                  }
                  else
                  {
                    *v234++ = *v240;
                  }
                }
                ++v240;
              }
              while (v240 != v239);
              uint64_t v181 = v337;
              float v183 = v345;
              float v257 = __pa;
              if (__pa) {
                goto LABEL_331;
              }
            }
            else
            {
              int v234 = 0;
              int64x2_t v235 = 0;
            }
          }
          else
          {
            v225.f32[0] = sqrtf((float)(v226 * v226) - (float)(v225.f32[0] * v225.f32[0]));
            v204.f32[0] = sqrtf(v204.f32[0]);
            if (v204.f32[0] < 0.000001) {
              v204.f32[0] = 0.000001;
            }
            float32x2_t v227 = vdiv_f32(v221, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v204.f32, 0));
            *(float32x2_t *)v204.f32 = vmla_n_f32(*(float32x2_t *)v198.f32, v227, v225.f32[0]);
            *(float32x2_t *)v198.f32 = vmls_lane_f32(*(float32x2_t *)v198.f32, v227, v225, 0);
            float32x4_t v353 = v198;
            *(float32x4_t *)long long __p = v204;
            float32x2_t v228 = vsub_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v198.f32);
            if (sqrtf(vaddv_f32(vmul_f32(v228, v228))) < 0.01)
            {
              uint64_t v229 = (float32x4_t *)sub_25B3FFAEC(1uLL);
              uint64_t v231 = v229;
              float32x4_t v232 = *(float32x4_t *)__p;
              goto LABEL_304;
            }
            uint64_t v236 = (float32x4_t *)sub_25B3FFAEC(1uLL);
            uint64_t v238 = v236;
            *uint64_t v236 = *(float32x4_t *)__p;
            if (v237 >= 2)
            {
              v236[1] = v353;
              uint64_t v239 = v236 + 2;
              BOOL v240 = v236;
              goto LABEL_305;
            }
            uint64_t v286 = 2;
            if ((unint64_t)((16 * v237) >> 3) > 2) {
              uint64_t v286 = (16 * v237) >> 3;
            }
            if ((unint64_t)(16 * v237) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v287 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v287 = v286;
            }
            if (v287) {
              unint64_t v287 = (unint64_t)sub_25B3FFAEC(v287);
            }
            uint64_t v288 = 0;
            *(float32x4_t *)(v287 + 16) = v353;
            uint64_t v239 = (float32x4_t *)(v287 + 32);
            do
            {
              *(float32x4_t *)(v287 + v288 * 16) = v238[v288];
              --v288;
            }
            while (v288 != -1);
            float32x2_t v289 = (float32x4_t *)v287;
            operator delete(v238);
            if (v289 != v239)
            {
              BOOL v240 = v289;
              goto LABEL_305;
            }
            int v234 = 0;
            int64x2_t v235 = 0;
            float v257 = v239;
            float v183 = v345;
LABEL_331:
            operator delete(v257);
          }
          uint64_t v258 = v234 - v235;
          switch(v258)
          {
            case 2:
              float32x4_t v260 = v235[1];
              float32x4_t v261 = vsubq_f32(*v235, v341);
              float32x4_t v262 = vmulq_f32(v261, v261);
              v262.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v262.f32));
              float32x4_t v263 = vsubq_f32(v260, v341);
              float32x4_t v264 = vmulq_f32(v263, v263);
              v264.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v264.f32));
              int8x16_t v259 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v262, v264), 0), *(int8x16_t *)v235, (int8x16_t)v260);
              goto LABEL_338;
            case 1:
              int8x16_t v259 = *(int8x16_t *)v235;
LABEL_338:
              float32x4_t v356 = (float32x4_t)v259;
              *(void *)&long long v265 = v341.i64[0];
              *((void *)&v265 + 1) = v259.i64[0];
              float32x4_t v266 = v341;
              v266.i32[2] = *(_DWORD *)(v181 + 64);
              long long v267 = (__int128)v259;
              DWORD2(v267) = *(_DWORD *)(v181 + 68);
              *(_OWORD *)(v181 + 16) = v265;
              *(float32x4_t *)(v181 + 32) = v266;
              float32x4_t v268 = v341;
              v268.i32[2] = DWORD2(v267);
              v259.i32[2] = v266.i32[2];
              *(_OWORD *)(v181 + 48) = v267;
              uint64_t v269 = *(void *)(v181 + 8);
              float32x4_t v394 = v268;
              long long v395 = v267;
              int8x16_t v396 = v259;
              *(float32x4_t *)float v397 = v266;
              if (v269) {
                objc_copyStruct((void *)(v269 + 272), &v394, 64, 1, 0);
              }
              v266.i32[0] = v182[14].i32[0];
              float v270 = sub_25B5EDC28(v182[13], *(double *)v266.i64, v356);
              uint64_t v271 = operator new(0xCuLL);
              uint64_t v272 = 0;
              int v273 = 0;
              *(void *)uint64_t v271 = 0xFFFFFFFFLL;
              v271[2] = 1;
              float v274 = 0.0;
              do
              {
                float v275 = v270 + (float)(360 * v271[v272]);
                if (v182[14].f32[1] <= v275 && v182[14].f32[2] > v275)
                {
                  ++v273;
                  float v274 = v270 + (float)(360 * v271[v272]);
                }
                ++v272;
              }
              while (v272 != 3);
              operator delete(v271);
              BOOL v276 = v273 == 1;
              if (v273 == 1) {
                float v277 = v274;
              }
              else {
                float v277 = 0.0;
              }
              float v183 = v345;
              if (v276)
              {
                float v357 = v182[14].f32[0];
                __float2 v278 = __sincosf_stret((float)(v182[14].f32[1] / 180.0) * 3.1416);
                __float2 v279 = __sincosf_stret((float)(v182[14].f32[2] / 180.0) * 3.1416);
                float32x4_t v280 = v182[13];
                *(void *)&long long v281 = v182[13].i64[0];
                v282.i64[0] = v281;
                *(float32x2_t *)&v282.u32[2] = vadd_f32(*(float32x2_t *)v280.f32, vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v278.__sinval), LODWORD(v278.__cosval)), v357));
                float32x4_t v394 = v282;
                *((float32x2_t *)&v281 + 1) = vadd_f32(*(float32x2_t *)v280.f32, vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v279.__sinval), LODWORD(v279.__cosval)), v357));
                long long v382 = v281;
                v370[0] = *(float32x2_t *)v280.f32;
                v370[1] = *(float32x2_t *)v341.f32;
                float v283 = sub_25B3FCCE0(v370, (float32x2_t *)&v394, 0);
                if (v283 >= sub_25B3FCCE0(v370, (float32x2_t *)&v382, 0))
                {
                  float v285 = v182[14].f32[1];
                }
                else
                {
                  float v285 = v277;
                  float v277 = v182[14].f32[2];
                }
                v284.n128_f32[0] = v277;
                sub_25B4F3E58((uint64_t)v182, v285, v284);
              }
              break;
            case 0:
              int8x16_t v259 = (int8x16_t)v333;
              goto LABEL_338;
          }
          if (v235) {
            operator delete(v235);
          }
LABEL_356:
          operator delete(v185);
          uint64_t v175 = v331;
LABEL_357:
          v182 += 20;
        }
        while (v182 != v183);
LABEL_371:
        v181 += 176;
        if (v181 == v175)
        {
          if (*(void *)(v359 + 64) != *(void *)(v359 + 56))
          {
            uint64_t v290 = *(float32x2_t **)(v359 + 768);
            uint64_t v291 = *(float32x2_t **)(v359 + 776);
            if (v290 != v291)
            {
              long long v334 = *(float32x2_t **)(v359 + 776);
              do
              {
                int v292 = (int)v290[28].f32[1];
                int v342 = (int)v290[29].f32[0];
                if (v342 >= v292)
                {
                  int v338 = v342 - v292;
                  uint64_t v346 = v290;
                  int v293 = 0;
                  do
                  {
                    int v350 = v292;
                    float v358 = v346[28].f32[0];
                    __float2 v294 = __sincosf_stret((float)((float)v292 / 180.0) * 3.1416);
                    unint64_t v295 = 0;
                    float32x2_t v296 = 0;
                    int v297 = 0;
                    uint64_t v298 = *(float32x2_t **)(v359 + 64);
                    uint64_t v299 = *(float32x2_t **)(v359 + 56);
                    float32x2_t v300 = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v294.__sinval), LODWORD(v294.__cosval)), v358), v346[26]);
                    do
                    {
                      float v301 = sub_25B40DB9C(v300, v299[2], v299[3], 0.00001);
                      float v302 = v301;
                      if ((unint64_t)v296 >= v295)
                      {
                        uint64_t v303 = v296 - v297;
                        unint64_t v304 = v303 + 1;
                        if ((unint64_t)(v303 + 1) >> 62) {
                          sub_25B3FBC4C();
                        }
                        if ((uint64_t)(v295 - (void)v297) >> 1 > v304) {
                          unint64_t v304 = (uint64_t)(v295 - (void)v297) >> 1;
                        }
                        if (v295 - (unint64_t)v297 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v305 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v305 = v304;
                        }
                        if (v305) {
                          unint64_t v305 = (unint64_t)sub_25B3FBC64(v305);
                        }
                        else {
                          uint64_t v306 = 0;
                        }
                        float v307 = (float *)(v305 + 4 * v303);
                        *float v307 = v302;
                        float32x2_t v308 = v307 + 1;
                        while (v296 != v297)
                        {
                          int v309 = *((_DWORD *)v296-- - 1);
                          *((_DWORD *)v307-- - 1) = v309;
                        }
                        unint64_t v295 = v305 + 4 * v306;
                        if (v297) {
                          operator delete(v297);
                        }
                        int v297 = v307;
                        float32x2_t v296 = v308;
                      }
                      else
                      {
                        *v296++ = v301;
                      }
                      v299 += 22;
                    }
                    while (v299 != v298);
                    unsigned int v310 = v297 + 1;
                    BOOL v311 = v297 == v296 || v310 == v296;
                    uint64_t v312 = v297;
                    if (!v311)
                    {
                      float v313 = *v297;
                      uint64_t v312 = v297;
                      uint64_t v314 = v297 + 1;
                      do
                      {
                        float v315 = *v314++;
                        float v316 = v315;
                        if (v315 < v313)
                        {
                          float v313 = v316;
                          uint64_t v312 = v310;
                        }
                        unsigned int v310 = v314;
                      }
                      while (v314 != v296);
                    }
                    float v317 = *v312;
                    float v318 = *(float *)(v359 + 860);
                    if (v297) {
                      operator delete(v297);
                    }
                    if (v317 < v318) {
                      ++v293;
                    }
                    int v292 = v350 + 1;
                  }
                  while (v350 != v342);
                  uint64_t v290 = v346;
                  uint64_t v291 = v334;
                  if ((float)((float)v293 / (float)(v338 + 1)) >= *(float *)(v359 + 852)) {
                    v346[11].i32[0] = 2;
                  }
                }
                v290 += 40;
              }
              while (v290 != v291);
              uint64_t v319 = *(void *)(v359 + 768);
              uint64_t v320 = *(void *)(v359 + 776);
              while (v319 != v320)
              {
                if (*(_DWORD *)(v319 + 88) == 2)
                {
                  uint64_t v320 = sub_25B490678(v319 + 320, v320, v319);
                  uint64_t v321 = *(void *)(v359 + 776);
                  if (v321 != v320)
                  {
                    uint64_t v322 = v321 - 320;
                    uint64_t v323 = (void (***)(void))(v321 - 320);
                    do
                    {
                      (**v323)(v323);
                      v322 -= 320;
                      BOOL v110 = v323 == (void (***)(void))v320;
                      v323 -= 40;
                    }
                    while (!v110);
                  }
                  *(void *)(v359 + 776) = v320;
                }
                else
                {
                  v319 += 320;
                }
              }
            }
          }
          break;
        }
      }
    }
  }
LABEL_421:
  sub_25B4F4878((uint64_t)&v383);
  sub_25B4F4878((uint64_t)&src);
  sub_25B490778((uint64_t)&v363);
  v394.i64[0] = (uint64_t)&v366;
  sub_25B4821D4((void ***)&v394);
  id v6 = v324;
LABEL_422:
}

void sub_25B48ECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  STACK[0x3D0] = (unint64_t)&a53;
  sub_25B4F03D0((void ***)&STACK[0x3D0]);
  STACK[0x338] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x3B8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3B8]);
  }
  STACK[0x3D0] = (unint64_t)&a43;
  sub_25B4821D4((void ***)&STACK[0x3D0]);

  _Unwind_Resume(a1);
}

float sub_25B48F298(uint64_t a1, const char *a2, uint64_t a3, float a4, __n128 a5, double a6, __n128 a7)
{
  if (a5.n128_f32[0] >= a4) {
    float v8 = a4;
  }
  else {
    float v8 = a5.n128_f32[0];
  }
  if (a4 < a5.n128_f32[0]) {
    a4 = a5.n128_f32[0];
  }
  a5.n128_u64[0] = *(void *)(a1 + 16);
  a7.n128_u64[0] = *(void *)(a1 + 24);
  __n128 v9 = a5;
  v9.n128_f32[2] = a4;
  __n128 v10 = a7;
  v10.n128_f32[2] = a4;
  a7.n128_f32[2] = v8;
  a5.n128_f32[2] = v8;
  *(float *)(a1 + 64) = v8;
  *(float *)(a1 + 68) = a4;
  uint64_t v11 = *(void *)(a1 + 8);
  v13[0] = v9;
  v13[1] = v10;
  v13[2] = a7;
  v13[3] = a5;
  if (v11) {
    objc_copyStruct((void *)(v11 + 272), v13, 64, 1, 0);
  }

  return sub_25B47CB1C(a1, a2, a3);
}

uint64_t sub_25B48F32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 && a1 && a2 && a4) {
    operator new[]();
  }
  return 0;
}

unsigned __int8 *sub_25B48F7D8(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  unsigned int v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)unsigned int v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = v16 + 16;
  unsigned int v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *int v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    int v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B490C28((uint64_t)v41);
  return i;
}

void sub_25B48FC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B490C28((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_25B48FC44(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_25B403AF4((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_25B403F44(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  unsigned int v16 = (char *)operator new(0x90uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)unsigned int v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = v16 + 16;
  unsigned int v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_25B4002F4(v17, *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v17 = v19;
  }
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((void *)v16 + 11) = 0;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 21) = -1;
  *(_OWORD *)(v16 + 68) = xmmword_25B5F13D0;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *int v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    int v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  sub_25B490BD0((uint64_t)v41);
  return i;
}

void sub_25B4900B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B490BD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B4900CC(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  return a1;
}

char *sub_25B490110(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  id result = (char *)sub_25B414548(a3, a2);
  if (result)
  {
    for (uint64_t i = (char *)*((void *)result + 7); i; uint64_t i = *(char **)i)
    {
      if (i[88])
      {
        uint8x8_t v10 = (long long *)(i + 16);
        id result = (char *)sub_25B48FC44(a1, (unsigned __int8 *)i + 16, &v10);
        id v6 = result;
        long long v7 = *(_OWORD *)(i + 40);
        long long v8 = *(_OWORD *)(i + 56);
        long long v9 = *(_OWORD *)(i + 72);
        *((_WORD *)result + 44) = *((_WORD *)i + 44);
        *(_OWORD *)(result + 72) = v9;
        *(_OWORD *)(result + 56) = v8;
        *(_OWORD *)(result + 40) = v7;
        if (i != result)
        {
          sub_25B3FE7A8(result + 96, *((char **)i + 12), *((void *)i + 13), (uint64_t)(*((void *)i + 13) - *((void *)i + 12)) >> 2);
          id result = sub_25B3FE7A8(v6 + 120, *((char **)i + 15), *((void *)i + 16), (uint64_t)(*((void *)i + 16) - *((void *)i + 15)) >> 2);
        }
      }
    }
  }
  return result;
}

void sub_25B4901DC(_Unwind_Exception *a1)
{
  sub_25B49052C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4901F0(uint64_t a1, uint64_t a2)
{
  double v4 = sub_25B3F6148(a1);
  void *v5 = off_2708F1738;
  v5[22] = 0;
  v5[24] = &off_2708F1718;
  uint64_t v6 = (uint64_t)(v5 + 36);
  v5[37] = 0;
  v5[38] = 0;
  v5[36] = 0;
  uint64_t v9 = objc_msgSend_copy(*(void **)(a2 + 8), v7, v8, v4);
  uint8x8_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;

  uint64_t v13 = objc_msgSend_copy(*(void **)(a2 + 176), v11, v12);
  unint64_t v14 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v13;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  long long v16 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 208) = v16;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  if (a1 != a2) {
    sub_25B490828(v6, *(void ***)(a2 + 288), *(void ***)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3);
  }
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  return a1;
}

void sub_25B490354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B3F6050((void ***)va);

  sub_25B3F5FE8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_25B49037C(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 6);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xCCCCCCCCCCCCCCLL) {
    sub_25B3FBC4C();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 6) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 6);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 6) >= 0x66666666666666) {
    unint64_t v6 = 0xCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v6 = v3;
  }
  float v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xCCCCCCCCCCCCCCLL) {
      sub_25B3FA70C();
    }
    long long v7 = (char *)operator new(320 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  unsigned int v18 = v7;
  *(void *)long long v19 = &v7[320 * v2];
  *(void *)&v19[16] = &v7[320 * v6];
  sub_25B4901F0(*(uint64_t *)v19, a2);
  *(void *)&v19[8] = *(void *)v19 + 320;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  for (uint64_t i = 320; ; i -= 320)
  {
    uint64_t v11 = *(void *)v19 + i;
    if (v8 + i - 320 == v9) {
      break;
    }
    uint64_t v12 = v8 + i - 640;
    sub_25B4901F0(v11 - 640, v12);
  }
  uint64_t v13 = a1[2];
  long long v14 = *(_OWORD *)&v19[8];
  uint64_t v17 = *(void *)&v19[8];
  long long v15 = *(_OWORD *)a1;
  *a1 = v11 - 320;
  *(_OWORD *)long long v19 = v15;
  *(_OWORD *)(a1 + 1) = v14;
  *(void *)&v19[16] = v13;
  unsigned int v18 = (char *)v15;
  sub_25B490A54((uint64_t)&v18);
  return v17;
}

void sub_25B4904D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_25B490A54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B49052C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_25B4909EC((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_25B49058C(unsigned __int8 **a1, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
  {
    uint64_t v4 = 0;
    char v5 = *((unsigned char *)a1 + 23);
    if (v5 >= 0) {
      unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
    }
    else {
      unint64_t v6 = a1[1];
    }
    if (v5 >= 0) {
      long long v7 = (unsigned __int8 *)a1;
    }
    else {
      long long v7 = *a1;
    }
    if ((unint64_t)((a3 - a2) / 320) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (a3 - a2) / 320;
    }
    do
    {
      uint64_t v9 = a2 + 320 * v4;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 151);
      size_t v11 = *(void *)(v9 + 136);
      if ((v10 & 0x80u) == 0) {
        uint64_t v12 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 151);
      }
      else {
        uint64_t v12 = *(unsigned __int8 **)(v9 + 136);
      }
      if (v12 == v6)
      {
        uint64_t v13 = (const void **)(v9 + 128);
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*v13, v7, v11)) {
            return v4;
          }
        }
        else
        {
          if (!v10) {
            return v4;
          }
          for (uint64_t i = v7; *(unsigned __int8 *)v13 == *i; ++i)
          {
            uint64_t v13 = (const void **)((char *)v13 + 1);
            if (!--v10) {
              return v4;
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v8);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_25B490678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      objc_storeStrong((id *)(a3 + v6 + 8), *(id *)(a1 + v6 + 8));
      long long v9 = *(_OWORD *)(a1 + v6 + 16);
      long long v10 = *(_OWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + v6 + 32);
      *(_OWORD *)(v7 + 48) = v10;
      *(_OWORD *)(v7 + 16) = v9;
      long long v11 = *(_OWORD *)(a1 + v6 + 64);
      long long v12 = *(_OWORD *)(a1 + v6 + 80);
      long long v13 = *(_OWORD *)(a1 + v6 + 96);
      *(_OWORD *)(v7 + 105) = *(_OWORD *)(a1 + v6 + 105);
      *(_OWORD *)(v7 + 80) = v12;
      *(_OWORD *)(v7 + 96) = v13;
      *(_OWORD *)(v7 + 64) = v11;
      std::string::operator=((std::string *)(a3 + v6 + 128), (const std::string *)(a1 + v6 + 128));
      std::string::operator=((std::string *)(a3 + v6 + 152), (const std::string *)(a1 + v6 + 152));
      objc_storeStrong((id *)(a3 + v6 + 176), *(id *)(a1 + v6 + 176));
      long long v14 = *(_OWORD *)(a1 + v6 + 208);
      *(_OWORD *)(v7 + 220) = *(_OWORD *)(a1 + v6 + 220);
      *(_OWORD *)(v7 + 208) = v14;
      long long v15 = *(_OWORD *)(a1 + v6 + 240);
      long long v16 = *(_OWORD *)(a1 + v6 + 272);
      *(_OWORD *)(v7 + 256) = *(_OWORD *)(a1 + v6 + 256);
      *(_OWORD *)(v7 + 272) = v16;
      *(_OWORD *)(v7 + 240) = v15;
      if (a1 != a3) {
        sub_25B490828(v7 + 288, *(void ***)(v8 + 288), *(void ***)(v8 + 296), (uint64_t)(*(void *)(v8 + 296) - *(void *)(v8 + 288)) >> 3);
      }
      *(_DWORD *)(v7 + 312) = *(_DWORD *)(v8 + 312);
      v6 += 320;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t sub_25B490778(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_25B4907D8((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B4907D8(uint64_t a1)
{
  sub_25B49052C(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_25B490828(uint64_t a1, void **a2, void **a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(id **)a1;
  if (a4 <= (v8 - *(void *)a1) >> 3)
  {
    unint64_t v18 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
    if (v18 >= a4)
    {
      BOOL v22 = sub_25B490998(a2, a3, v9);
      for (uint64_t i = *(id **)(a1 + 8); i != v22; --i)
      {
        unint64_t v24 = *(i - 1);
      }
      *(void *)(a1 + 8) = v22;
    }
    else
    {
      long long v19 = &a2[v18];
      sub_25B490998(a2, v19, v9);
      float v20 = *(void **)(a1 + 8);
      while (v19 != a3)
      {
        float v21 = *v19++;
        *v20++ = v21;
      }
      *(void *)(a1 + 8) = v20;
    }
  }
  else
  {
    if (v9)
    {
      long long v10 = *(id **)(a1 + 8);
      long long v11 = *(id **)a1;
      if (v10 != v9)
      {
        do
        {
          long long v12 = *--v10;
        }
        while (v10 != v9);
        long long v11 = *(id **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      goto LABEL_26;
    }
    uint64_t v13 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v13;
    if (v14 >> 61) {
LABEL_26:
    }
      sub_25B3FBC4C();
    long long v15 = sub_25B3FCAD4(v14);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[v16];
    while (v6 != a3)
    {
      uint64_t v17 = *v6++;
      *v15++ = v17;
    }
    *(void *)(a1 + 8) = v15;
  }
}

id *sub_25B490998(void **a1, void **a2, id *location)
{
  if (a1 != a2)
  {
    char v5 = a1;
    do
    {
      uint64_t v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
  return location;
}

void sub_25B4909EC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t sub_25B490A54(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 320;
    (**(void (***)(void))(i - 320))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B490AC4()
{
}

void sub_25B490ADC(uint64_t a1)
{
  *(void *)a1 = off_2708F1738;
  unint64_t v2 = (void **)(a1 + 288);
  sub_25B3F6050(&v2);

  sub_25B3F5FE8(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B490B60(uint64_t a1)
{
  *(void *)a1 = off_2708F1738;
  uint64_t v3 = (void **)(a1 + 288);
  sub_25B3F6050(&v3);

  return sub_25B3F5FE8(a1);
}

void sub_25B490BD0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4909EC((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void sub_25B490C28(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4907D8((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B490C80(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 != v4)
  {
    char v5 = *((unsigned char *)a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v6 = a2[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 151);
      if ((v8 & 0x80u) == 0) {
        long long v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 151);
      }
      else {
        long long v9 = *(unsigned __int8 **)(v3 + 136);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v3 + 128), v7, *(void *)(v3 + 136))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 151)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10 + 128) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 176;
    }
    while (v3 != v4);
  }
  return a1 + 208;
}

uint64_t sub_25B490D44(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  long long v11 = (uint64_t *)result;
  while (2)
  {
    long long v12 = a2 - 1;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v45 = *v13;
                if (*(float *)(**a3 + 4 * *v12) > *(float *)(**a3 + 4 * *v13))
                {
                  *uint64_t v13 = *v12;
                  *long long v12 = v45;
                }
                break;
              case 3uLL:
                uint64_t v46 = **a3;
                id result = (uint64_t)sub_25B491504(v13, v13 + 1, a2 - 1, v46);
                break;
              case 4uLL:
                id result = (uint64_t)sub_25B49158C(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                unint64_t v47 = v13 + 1;
                float v48 = v13 + 2;
                uint64_t v49 = v13 + 3;
                id result = (uint64_t)sub_25B49158C(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v50 = v13[3];
                uint64_t v51 = **a3;
                if (*(float *)(v51 + 4 * *v12) > *(float *)(v51 + 4 * v50))
                {
                  *uint64_t v49 = *v12;
                  *long long v12 = v50;
                  uint64_t v52 = *v49;
                  uint64_t v53 = *v48;
                  float v54 = *(float *)(v51 + 4 * *v49);
                  if (v54 > *(float *)(v51 + 4 * *v48))
                  {
                    *float v48 = v52;
                    *uint64_t v49 = v53;
                    uint64_t v55 = *v47;
                    if (v54 > *(float *)(v51 + 4 * *v47))
                    {
                      v13[1] = v52;
                      v13[2] = v55;
                      uint64_t v56 = *v13;
                      if (v54 > *(float *)(v51 + 4 * *v13))
                      {
                        *uint64_t v13 = v52;
                        v13[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                int v57 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v58 = **a3;
                  uint64_t v59 = 8;
                  uint64_t v60 = v13;
                  do
                  {
                    uint64_t v62 = *v60;
                    uint64_t v61 = v60[1];
                    uint64_t v60 = v57;
                    float v63 = *(float *)(v58 + 4 * v61);
                    if (v63 > *(float *)(v58 + 4 * v62))
                    {
                      uint64_t v64 = v59;
                      do
                      {
                        *(uint64_t *)((char *)v13 + v64) = v62;
                        uint64_t v65 = v64 - 8;
                        if (v64 == 8)
                        {
                          int v66 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v62 = *(uint64_t *)((char *)v13 + v64 - 16);
                        v64 -= 8;
                      }
                      while (v63 > *(float *)(v58 + 4 * v62));
                      int v66 = (uint64_t *)((char *)v13 + v65);
LABEL_78:
                      *int v66 = v61;
                    }
                    int v57 = v60 + 1;
                    v59 += 8;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              unint64_t v98 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v99 = **a3;
                do
                {
                  uint64_t v101 = *v11;
                  uint64_t v100 = v11[1];
                  long long v11 = v98;
                  float v102 = *(float *)(v99 + 4 * v100);
                  if (v102 > *(float *)(v99 + 4 * v101))
                  {
                    do
                    {
                      *unint64_t v98 = v101;
                      uint64_t v101 = *(v98 - 2);
                      --v98;
                    }
                    while (v102 > *(float *)(v99 + 4 * v101));
                    *unint64_t v98 = v100;
                  }
                  unint64_t v98 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v67 = (v15 - 2) >> 1;
              int v68 = *a3;
              int64_t v69 = v67;
              do
              {
                int64_t v70 = v69;
                if (v67 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v13[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  uint64_t v74 = *v68;
                  if (v73 < (uint64_t)v15 && *(float *)(v74 + 4 * *v72) > *(float *)(v74 + 4 * v72[1]))
                  {
                    ++v72;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  int v75 = &v13[v70];
                  id result = *v72;
                  uint64_t v76 = *v75;
                  float v77 = *(float *)(v74 + 4 * *v75);
                  if (*(float *)(v74 + 4 * *v72) <= v77)
                  {
                    do
                    {
                      uint64_t v78 = v72;
                      *int v75 = result;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v79 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      uint64_t v72 = &v13[v71];
                      uint64_t v80 = v79 + 2;
                      if (v80 < (uint64_t)v15 && *(float *)(v74 + 4 * *v72) > *(float *)(v74 + 4 * v72[1]))
                      {
                        ++v72;
                        uint64_t v71 = v80;
                      }
                      id result = *v72;
                      int v75 = v78;
                    }
                    while (*(float *)(v74 + 4 * *v72) <= v77);
                    *uint64_t v78 = v76;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v81 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *v13;
                uint64_t v84 = *a3;
                uint64_t v85 = v13;
                do
                {
                  double v86 = v85;
                  v85 += v82 + 1;
                  uint64_t v87 = 2 * v82;
                  uint64_t v82 = (2 * v82) | 1;
                  uint64_t v88 = v87 + 2;
                  if (v88 < v81)
                  {
                    id result = v85[1];
                    if (*(float *)(*v84 + 4 * *v85) > *(float *)(*v84 + 4 * result))
                    {
                      ++v85;
                      uint64_t v82 = v88;
                    }
                  }
                  uint64_t *v86 = *v85;
                }
                while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == --a2)
                {
                  *uint64_t v85 = v83;
                }
                else
                {
                  *uint64_t v85 = *a2;
                  *a2 = v83;
                  uint64_t v89 = (char *)v85 - (char *)v13 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    unint64_t v91 = &v13[v90];
                    uint64_t v92 = *v91;
                    uint64_t v93 = *v85;
                    uint64_t v94 = *v84;
                    float v95 = *(float *)(v94 + 4 * *v85);
                    if (*(float *)(v94 + 4 * *v91) > v95)
                    {
                      do
                      {
                        float v96 = v91;
                        *uint64_t v85 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = &v13[v90];
                        uint64_t v92 = *v91;
                        uint64_t v85 = v96;
                      }
                      while (*(float *)(v94 + 4 * *v91) > v95);
                      *float v96 = v93;
                    }
                  }
                }
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x401)
          {
            sub_25B491504(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B491504(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B491504(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            id result = (uint64_t)sub_25B491504(v17 - 1, v17, &v11[v16 + 1], **a3);
            uint64_t v19 = *v11;
            uint64_t *v11 = *v17;
            *uint64_t v17 = v19;
          }
          else
          {
            id result = (uint64_t)sub_25B491504(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          uint64_t v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          float v22 = *(float *)(v21 + 4 * v20);
          if (*(float *)(v21 + 4 * *(v11 - 1)) > v22) {
            goto LABEL_13;
          }
          if (v22 <= *(float *)(v21 + 4 * *v12))
          {
            int v37 = v11 + 1;
            do
            {
              uint64_t v13 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v22 <= *(float *)(v21 + 4 * *v13));
          }
          else
          {
            uint64_t v13 = v11;
            do
            {
              uint64_t v36 = v13[1];
              ++v13;
            }
            while (v22 <= *(float *)(v21 + 4 * v36));
          }
          unint64_t v38 = a2;
          if (v13 < a2)
          {
            unint64_t v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v22 > *(float *)(v21 + 4 * v39));
          }
          if (v13 < v38)
          {
            uint64_t v40 = *v13;
            uint64_t v41 = *v38;
            do
            {
              *uint64_t v13 = v41;
              *unint64_t v38 = v40;
              do
              {
                uint64_t v42 = v13[1];
                ++v13;
                uint64_t v40 = v42;
              }
              while (v22 <= *(float *)(v21 + 4 * v42));
              do
              {
                uint64_t v43 = *--v38;
                uint64_t v41 = v43;
              }
              while (v22 > *(float *)(v21 + 4 * v43));
            }
            while (v13 < v38);
          }
          unint64_t v44 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            uint64_t *v11 = *v44;
          }
          a5 = 0;
          *unint64_t v44 = v20;
        }
        float v22 = *(float *)(v21 + 4 * v20);
LABEL_13:
        unint64_t v23 = v11;
        do
        {
          unint64_t v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          uint64_t v25 = v26;
        }
        while (*(float *)(v21 + 4 * v26) > v22);
        unint64_t v27 = a2;
        if (v24 == v11)
        {
          unint64_t v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(float *)(v21 + 4 * v29) <= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(float *)(v21 + 4 * v28) <= v22);
        }
        if (v23 < v27)
        {
          uint64_t v30 = *v27;
          uint8x8_t v31 = v23;
          unint64_t v32 = v27;
          do
          {
            uint64_t *v31 = v30;
            *unint64_t v32 = v25;
            do
            {
              unint64_t v24 = v31;
              uint64_t v33 = v31[1];
              ++v31;
              uint64_t v25 = v33;
            }
            while (*(float *)(v21 + 4 * v33) > v22);
            do
            {
              uint64_t v34 = *--v32;
              uint64_t v30 = v34;
            }
            while (*(float *)(v21 + 4 * v34) <= v22);
          }
          while (v31 < v32);
        }
        if (v24 != v11) {
          uint64_t *v11 = *v24;
        }
        uint64_t *v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        id result = sub_25B490D44(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v24 + 1;
      }
      BOOL v35 = sub_25B491640(v11, v24, a3);
      uint64_t v13 = v24 + 1;
      id result = sub_25B491640(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_25B491504(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + 4 * *a2);
  float v7 = *(float *)(a4 + 4 * *result);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * *a3);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *result;
      if (*(float *)(a4 + 4 * *a2) > *(float *)(a4 + 4 * *result))
      {
        char *result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      char *result = v4;
      *a2 = v5;
      if (*(float *)(a4 + 4 * *a3) <= v7) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      char *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *sub_25B49158C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  id result = sub_25B491504(a1, a2, a3, **a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(float *)(v12 + 4 * *a4) > *(float *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) > *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) > *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL sub_25B491640(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) > *(float *)(**a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B491504(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B49158C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 1;
      float v22 = a1 + 2;
      unint64_t v23 = a1 + 3;
      sub_25B49158C(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v24 = *(a2 - 1);
      uint64_t v25 = a1[3];
      uint64_t v26 = **a3;
      if (*(float *)(v26 + 4 * v24) > *(float *)(v26 + 4 * v25))
      {
        *unint64_t v23 = v24;
        *(a2 - 1) = v25;
        uint64_t v27 = *v23;
        uint64_t v28 = *v22;
        float v29 = *(float *)(v26 + 4 * *v23);
        if (v29 > *(float *)(v26 + 4 * *v22))
        {
          *float v22 = v27;
          *unint64_t v23 = v28;
          uint64_t v30 = *v21;
          if (v29 > *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (v29 > *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B491504(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * *v11);
    if (v17 > *(float *)(v13 + 4 * *v10))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= *(float *)(v13 + 4 * v16))
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *uint64_t v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_25B491880(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  if (a2 == a1) {
    return 0;
  }
  int v3 = *((char *)a3 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v4 = a3[1];
  }
  if (!v4) {
    return 0;
  }
  uint64_t v6 = a1;
  if (v3 >= 0) {
    float v7 = (unsigned __int8 *)a3;
  }
  else {
    float v7 = *a3;
  }
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 *)(v6 + 151);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v6 + 151);
    }
    else {
      uint64_t v9 = *(unsigned __int8 **)(v6 + 136);
    }
    if (v9 != v4) {
      goto LABEL_20;
    }
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v6 + 151)) {
      return 1;
    }
    uint64_t v10 = 0;
    while (*(unsigned __int8 *)(v6 + v10 + 128) == v7[v10])
    {
      if (v8 == ++v10) {
        return 1;
      }
    }
LABEL_20:
    v6 += 176;
    if (v6 == a2) {
      return 0;
    }
  }
  if (memcmp(*(const void **)(v6 + 128), v7, *(void *)(v6 + 136))) {
    goto LABEL_20;
  }
  return 1;
}

void sub_25B491958(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  id v15 = v3;
  if (v3)
  {
    sub_25B4FD504(v4, v3);
    float v7 = objc_msgSend_parentIdentifier(*(void **)(a1 + 8), v5, v6);
    objc_msgSend_UUIDString(v7, v8, v9);
    id v10 = objc_claimAutoreleasedReturnValue();
    uint64_t v13 = (char *)objc_msgSend_UTF8String(v10, v11, v12);
    sub_25B40B504((std::string *)(a1 + 152), v13);
  }
  else
  {
    sub_25B4FD504(v4, 0);
    if (*(char *)(a1 + 175) < 0)
    {
      *(void *)(a1 + 160) = 0;
      uint64_t v14 = *(unsigned char **)(a1 + 152);
    }
    else
    {
      uint64_t v14 = (unsigned char *)(a1 + 152);
      *(unsigned char *)(a1 + 175) = 0;
    }
    *uint64_t v14 = 0;
  }
}

void sub_25B491A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B491A40(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    char v5 = *((unsigned char *)a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v6 = a2[1];
    }
    if (v5 >= 0) {
      float v7 = (unsigned __int8 *)a2;
    }
    else {
      float v7 = *a2;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 151);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 151);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 136);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v3 + 128), v7, *(void *)(v3 + 136))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 151)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10 + 128) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 176;
    }
    while (v3 != v4);
  }
  return a1 + 208;
}

void sub_25B491B04(uint64_t a1, float *a2)
{
  float v2 = a2[2];
  if (a2[6] < v2) {
    float v2 = a2[6];
  }
  *(float *)(a1 + 64) = v2;
  float v3 = a2[2];
  if (v3 < a2[6]) {
    float v3 = a2[6];
  }
  *(float *)(a1 + 68) = v3;
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  *(void *)&long long v6 = *(void *)a2;
  *((void *)&v6 + 1) = *((void *)a2 + 2);
  long long v7 = *(_OWORD *)a2;
  *((float *)&v7 + 2) = v2;
  long long v8 = v5;
  *((float *)&v8 + 2) = v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *((float *)&v4 + 2) = v3;
  *((float *)&v5 + 2) = v2;
  *(float *)(a1 + 72) = v3 - v2;
  uint64_t v9 = *(void *)(a1 + 8);
  v10[0] = v4;
  v10[1] = v8;
  v10[2] = v5;
  v10[3] = v7;
  if (v9) {
    objc_copyStruct((void *)(v9 + 272), v10, 64, 1, 0);
  }
}

uint64_t sub_25B491BA4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_25B491BE0(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a1 + 544);
  long long v41 = *(_OWORD *)(a1 + 528);
  long long v42 = v4;
  long long v43 = *(_OWORD *)(a1 + 560);
  uint64_t v44 = *(void *)(a1 + 576);
  long long v5 = *(_OWORD *)(a1 + 480);
  long long v37 = *(_OWORD *)(a1 + 464);
  long long v38 = v5;
  long long v6 = *(_OWORD *)(a1 + 512);
  long long v39 = *(_OWORD *)(a1 + 496);
  long long v40 = v6;
  HIDWORD(v38) = 1041865114;
  uint64_t v34 = 0;
  BOOL v35 = 0;
  unint64_t v36 = 0;
  if (a3 == a4) {
    goto LABEL_35;
  }
  uint64_t v8 = a3;
  uint64_t v10 = (const void **)&a2[16];
  uint64_t v11 = a2 + 2;
  do
  {
    uint64_t v12 = *(unsigned __int8 *)(v8 + 151);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v8 + 151);
    }
    else {
      uint64_t v13 = *(void *)(v8 + 136);
    }
    float32x2_t v14 = (float32x2_t)a2[18].u8[7];
    int v15 = v14.i8[0];
    if (v14.i8[0] < 0) {
      float32x2_t v14 = a2[17];
    }
    if (v13 == *(void *)&v14)
    {
      if (v15 >= 0) {
        uint64_t v16 = (unsigned __int8 *)v10;
      }
      else {
        uint64_t v16 = (unsigned __int8 *)*v10;
      }
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v8 + 128), v16, *(void *)(v8 + 136))) {
          goto LABEL_25;
        }
      }
      else
      {
        if (!*(unsigned char *)(v8 + 151)) {
          goto LABEL_25;
        }
        uint64_t v17 = 0;
        while (*(unsigned __int8 *)(v8 + v17 + 128) == v16[v17])
        {
          if (v12 == ++v17) {
            goto LABEL_25;
          }
        }
      }
    }
    sub_25B4D4E4C((uint64_t)v28, v11, (float32x2_t *)(v8 + 16), (float *)&v37);
    uint64_t v18 = v35;
    if ((unint64_t)v35 >= v36)
    {
      BOOL v35 = sub_25B492078((void **)&v34, (uint64_t)v28);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v19 = v28[0];
      long long v20 = v28[1];
      long long v21 = v28[2];
      *((_WORD *)v35 + 24) = v29;
      *((_OWORD *)v18 + 1) = v20;
      *((_OWORD *)v18 + 2) = v21;
      *(_OWORD *)uint64_t v18 = v19;
      *((void *)v18 + 8) = 0;
      *((void *)v18 + 9) = 0;
      *((void *)v18 + 7) = 0;
      *(_OWORD *)(v18 + 56) = *(_OWORD *)v30;
      *((void *)v18 + 9) = v31;
      *((void *)v18 + 10) = 0;
      v30[0] = 0;
      v30[1] = 0;
      uint64_t v31 = 0;
      *((void *)v18 + 11) = 0;
      *((void *)v18 + 12) = 0;
      *((_OWORD *)v18 + 5) = *(_OWORD *)__p;
      *((void *)v18 + 12) = v33;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v33 = 0;
      BOOL v35 = v18 + 104;
    }
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
LABEL_25:
    v8 += 176;
  }
  while (v8 != a4);
  float v22 = v34;
  if (v34 == v35)
  {
LABEL_35:
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    goto LABEL_36;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  do
  {
    if (v22[14])
    {
      int v25 = *((_DWORD *)v22 + 1);
      if (!v25) {
        ++v23;
      }
      if (v25 == 1) {
        ++v24;
      }
    }
    v22 += 104;
  }
  while (v22 != v35);
LABEL_36:
  if (v23) {
    uint64_t v26 = (v24 != 0) + 1;
  }
  else {
    uint64_t v26 = v24 != 0;
  }
  *(void *)&v28[0] = &v34;
  sub_25B49223C((void ***)v28);
  return v26;
}

void sub_25B491E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a9 = (void **)&a22;
  sub_25B49223C(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_25B491E50(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  if (a3 == a4) {
    goto LABEL_35;
  }
  uint64_t v5 = a3;
  long long v7 = (const void **)&a2[16];
  uint64_t v8 = a2 + 2;
  uint64_t v9 = (float *)(a1 + 464);
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 151);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v5 + 151);
    }
    else {
      uint64_t v11 = *(void *)(v5 + 136);
    }
    float32x2_t v12 = (float32x2_t)a2[18].u8[7];
    int v13 = v12.i8[0];
    if (v12.i8[0] < 0) {
      float32x2_t v12 = a2[17];
    }
    if (v11 == *(void *)&v12)
    {
      if (v13 >= 0) {
        float32x2_t v14 = (unsigned __int8 *)v7;
      }
      else {
        float32x2_t v14 = (unsigned __int8 *)*v7;
      }
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v5 + 128), v14, *(void *)(v5 + 136))) {
          goto LABEL_25;
        }
      }
      else
      {
        if (!*(unsigned char *)(v5 + 151)) {
          goto LABEL_25;
        }
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v5 + v15 + 128) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_25;
          }
        }
      }
    }
    sub_25B4D4E4C((uint64_t)v25, v8, (float32x2_t *)(v5 + 16), v9);
    uint64_t v16 = v32;
    if ((unint64_t)v32 >= v33)
    {
      unint64_t v32 = sub_25B492078((void **)&v31, (uint64_t)v25);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v17 = v25[0];
      long long v18 = v25[1];
      long long v19 = v25[2];
      *((_WORD *)v32 + 24) = v26;
      *((_OWORD *)v16 + 1) = v18;
      *((_OWORD *)v16 + 2) = v19;
      *(_OWORD *)uint64_t v16 = v17;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 9) = 0;
      *((void *)v16 + 7) = 0;
      *(_OWORD *)(v16 + 56) = *(_OWORD *)v27;
      *((void *)v16 + 9) = v28;
      *((void *)v16 + 10) = 0;
      v27[0] = 0;
      v27[1] = 0;
      uint64_t v28 = 0;
      *((void *)v16 + 11) = 0;
      *((void *)v16 + 12) = 0;
      *((_OWORD *)v16 + 5) = *(_OWORD *)__p;
      *((void *)v16 + 12) = v30;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v30 = 0;
      unint64_t v32 = v16 + 104;
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
LABEL_25:
    v5 += 176;
  }
  while (v5 != a4);
  long long v20 = v31;
  if (v31 == v32)
  {
LABEL_35:
    BOOL v23 = 0;
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  do
  {
    if (v20[14]) {
      BOOL v22 = v20[13] == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22) {
      ++v21;
    }
    v20 += 104;
  }
  while (v20 != v32);
  BOOL v23 = v21 != 0;
LABEL_36:
  *(void *)&v25[0] = &v31;
  sub_25B49223C((void ***)v25);
  return v23;
}

void sub_25B49204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_25B4900CC(&a9);
  a9 = (void **)(v9 - 88);
  sub_25B49223C(&a9);
  _Unwind_Resume(a1);
}

char *sub_25B492078(void **a1, uint64_t a2)
{
  uint64_t v2 = 0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276) {
    sub_25B3FBC4C();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v5 = 0x276276276276276;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0x276276276276276) {
    sub_25B3FA70C();
  }
  uint64_t v7 = 104 * v5;
  uint64_t v8 = (char *)operator new(104 * v5);
  long long v9 = *(_OWORD *)(a2 + 16);
  uint64_t v10 = &v8[104 * v2];
  uint64_t v11 = &v8[v7];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_WORD *)v10 + 24) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v10 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((void *)v10 + 12) = 0;
  *((_OWORD *)v10 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v10 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  float32x2_t v12 = v10 + 104;
  int v13 = (char *)*a1;
  float32x2_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v14 - 104);
      long long v16 = *(_OWORD *)(v14 - 88);
      long long v17 = *(_OWORD *)(v14 - 72);
      *((_WORD *)v10 - 28) = *((_WORD *)v14 - 28);
      *(_OWORD *)(v10 - 72) = v17;
      *(_OWORD *)(v10 - 88) = v16;
      *(_OWORD *)(v10 - 104) = v15;
      *((_OWORD *)v10 - 3) = *((_OWORD *)v14 - 3);
      *((void *)v10 - 4) = *((void *)v14 - 4);
      *((void *)v14 - 6) = 0;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
      *((void *)v10 - 1) = *((void *)v14 - 1);
      v10 -= 104;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v14 -= 104;
    }
    while (v14 != v13);
    float32x2_t v14 = (char *)*a1;
    long long v18 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    while (v18 != v14)
    {
      v18 -= 104;
      sub_25B4922C0(v18);
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_25B49223C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 13;
        sub_25B4922C0(v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B4922C0(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
}

uint64_t sub_25B492318(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  long long v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_25B3FA70C();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  long long v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  long long v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_25B492490(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  float32x2_t v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  long long v19 = v15;
  long long v17 = (char *)v14.i64[0];
  sub_25B43EAC4((uint64_t)&v17);
  return v10;
}

void sub_25B49247C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B43EAC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B492490(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = sub_25B40040C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4924F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25B49250C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    size_t v8 = result;
    uint64_t v9 = result + 2;
    uint64_t v10 = result[2];
    unint64_t v11 = result[1];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v11) >> 4) >= a5)
    {
      uint64_t v19 = v11 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - a2) >> 4) >= a5)
      {
        uint64_t v20 = a3 + 176 * a5;
        uint64_t v21 = (uint64_t *)result[1];
      }
      else
      {
        uint64_t v20 = a3 + 16 * ((uint64_t)(v11 - a2) >> 4);
        BOOL result = (uint64_t *)sub_25B487F74(v20, a4, v11);
        uint64_t v21 = result;
        v8[1] = (uint64_t)result;
        if (v19 < 1) {
          return result;
        }
      }
      uint64_t v22 = 176 * a5;
      unint64_t v23 = (unint64_t)&v21[-22 * a5];
      uint64_t v24 = (uint64_t)v21;
      if (v23 < v11)
      {
        unint64_t v25 = v23;
        uint64_t v24 = (uint64_t)v21;
        do
        {
          sub_25B47C6E4(v24, v25, a3);
          v25 += 176;
          v24 += 176;
        }
        while (v25 < v11);
      }
      v8[1] = v24;
      if (v21 != (uint64_t *)(v7 + v22))
      {
        unint64_t v26 = 0;
        do
        {
          uint64_t v27 = &v21[v26 / 8];
          objc_storeStrong((id *)&v21[v26 / 8 - 21], *(id *)(v23 + v26 - 168));
          long long v28 = *(_OWORD *)(v23 + v26 - 160);
          long long v29 = *(_OWORD *)(v23 + v26 - 128);
          *((_OWORD *)v27 - 9) = *(_OWORD *)(v23 + v26 - 144);
          *((_OWORD *)v27 - 8) = v29;
          *((_OWORD *)v27 - 10) = v28;
          long long v30 = *(_OWORD *)(v23 + v26 - 112);
          long long v31 = *(_OWORD *)(v23 + v26 - 96);
          long long v32 = *(_OWORD *)(v23 + v26 - 80);
          *(_OWORD *)((char *)v27 - 71) = *(_OWORD *)(v23 + v26 - 71);
          *((_OWORD *)v27 - 6) = v31;
          *((_OWORD *)v27 - 5) = v32;
          *((_OWORD *)v27 - 7) = v30;
          std::string::operator=((std::string *)&v21[v26 / 8 - 6], (const std::string *)(v23 + v26 - 48));
          std::string::operator=((std::string *)&v21[v26 / 8 - 3], (const std::string *)(v23 + v26 - 24));
          v26 -= 176;
        }
        while (-16 * (((uint64_t)v21 - v7 - v22) >> 4) != v26);
      }
      return (uint64_t *)sub_25B487EC4(v6, v20, v7);
    }
    else
    {
      uint64_t v12 = *result;
      unint64_t v13 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *result) >> 4);
      if (v13 > 0x1745D1745D1745DLL) {
        sub_25B3FBC4C();
      }
      uint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v12) >> 4);
      unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v12) >> 4);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *result) >> 4);
      }
      if (v15 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v17 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v17 = v16;
      }
      unint64_t v47 = v9;
      if (v17) {
        unint64_t v17 = (unint64_t)sub_25B47C9B4(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v33 = v17 + 176 * v14;
      unint64_t v43 = v17;
      uint64_t v44 = v33;
      uint64_t v45 = v33;
      unint64_t v46 = v17 + 176 * v18;
      uint64_t v34 = 176 * a5;
      uint64_t v35 = v33 + 176 * a5;
      do
      {
        sub_25B47C6E4(v33, v6, a3);
        v33 += 176;
        v6 += 176;
        v34 -= 176;
      }
      while (v34);
      uint64_t v45 = v35;
      uint64_t v36 = sub_25B47CA6C(v7, v7, *v8, *v8, v44, v44);
      uint64_t v44 = v36;
      uint64_t v38 = v8[1];
      uint64_t v39 = v35;
      if (v7 != v38)
      {
        uint64_t v40 = 0;
        do
        {
          sub_25B47C6E4(v39 + v40, v7 + v40, v37);
          v40 += 176;
        }
        while (v7 + v40 != v38);
        v39 += v40;
        uint64_t v36 = v44;
        uint64_t v7 = v8[1];
      }
      uint64_t v41 = *v8;
      uint64_t *v8 = v36;
      v8[1] = v39;
      uint64_t v42 = v8[2];
      v8[2] = v46;
      uint64_t v45 = v7;
      unint64_t v46 = v42;
      unint64_t v43 = v41;
      uint64_t v44 = v41;
      return (uint64_t *)sub_25B47CA00((uint64_t)&v43);
    }
  }
  return result;
}

void sub_25B492850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4928CC(unsigned char *a1, float32x2_t *a2, float32x2_t a3, float32x2_t a4)
{
  sub_25B4D5ABC(&v21, a2 + 2, a3, a4);
  if (v21.i8[0])
  {
    sub_25B47C6E4((uint64_t)&v14, (uint64_t)a2, v6);
    long long v16 = v22;
    long long v8 = v22;
    long long v9 = v22;
    DWORD2(v9) = v19;
    *(void *)&long long v10 = *((void *)&v22 + 1);
    long long v11 = v10;
    DWORD2(v11) = v20;
    DWORD2(v8) = v20;
    DWORD2(v10) = v19;
    long long v17 = v9;
    long long v18 = v11;
    src[0] = v8;
    src[1] = v11;
    src[2] = v10;
    src[3] = v9;
    if (v15) {
      objc_copyStruct((void *)(v15 + 272), src, 64, 1, 0);
    }
    *a1 = 1;
    sub_25B47C6E4((uint64_t)(a1 + 16), (uint64_t)&v14, v7);
  }
  else
  {
    sub_25B3F6148((uint64_t)&v14);
    *a1 = 0;
    sub_25B47C6E4((uint64_t)(a1 + 16), (uint64_t)&v14, v12);
  }
  return sub_25B3F5FE8((uint64_t)&v14);
}

void sub_25B4929B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B4929CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int32x2_t *a6, uint64_t *a7)
{
  id v12 = a3;
  uint64_t v13 = (float32x2_t *)operator new(0x10uLL);
  v79[1] = v13 + 2;
  v79[2] = v13 + 2;
  *(_OWORD *)v13->f32 = *(_OWORD *)(a2 + 16);
  v79[0] = v13;
  uint64_t v71 = v13;
  sub_25B481B8C(&v78, v79, v12, a5);
  LODWORD(__p[0]) = 1;
  sub_25B456DFC((uint64_t)v75, a4, (unsigned int *)__p);
  sub_25B481B8C(&v77, v79, v12, (uint64_t)v75);
  v75[0] = &unk_2708F21F8;
  if (v76) {
    sub_25B404120(v76);
  }
  float v14 = *v78;
  unsigned int v73 = 2;
  sub_25B456DFC((uint64_t)v75, a4, &v73);
  sub_25B481B8C(__p, v79, v12, (uint64_t)v75);
  v75[0] = &unk_2708F21F8;
  if (v76) {
    sub_25B404120(v76);
  }
  int64_t v67 = (float32x2_t *)a2;
  uint64_t v69 = a1;
  float32x2_t v16 = *(float32x2_t *)(a2 + 16);
  int32x2_t v15 = *(int32x2_t *)(a2 + 24);
  int32x2_t v17 = (int32x2_t)vsub_f32((float32x2_t)v15, v16);
  int32x2_t v18 = (int32x2_t)vmul_f32((float32x2_t)v17, (float32x2_t)v17);
  v18.i32[0] = vadd_f32((float32x2_t)v18, (float32x2_t)vdup_lane_s32(v18, 1)).u32[0];
  float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  int32x2_t v21 = (int32x2_t)vmul_n_f32((float32x2_t)v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  *(float *)v17.i32 = -*(float *)&v21.i32[1];
  float32x2_t v72 = (float32x2_t)v21;
  float32x2_t v22 = (float32x2_t)vzip1_s32(v17, v21);
  int32x2_t v23 = (int32x2_t)vmul_f32(v22, v22);
  v23.i32[0] = vadd_f32((float32x2_t)v23, (float32x2_t)vdup_lane_s32(v23, 1)).u32[0];
  float v24 = *(float *)__p[0];
  float32x2_t v25 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25)));
  float32x2_t v27 = vmul_n_f32(v22, vmul_f32(v26, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v26, v26))).f32[0]);
  uint64_t v28 = *a7;
  if (a7[1] == *a7)
  {
    long long v29 = 0;
    uint64_t v36 = 0;
    int v32 = 0;
  }
  else
  {
    long long v29 = 0;
    long long v30 = 0;
    unint64_t v31 = 0;
    int v32 = 0;
    unint64_t v33 = 0;
    float32x2_t v34 = vmul_f32(vadd_f32((float32x2_t)v15, v16), (float32x2_t)0x3F0000003F000000);
    do
    {
      int32x2_t v15 = (int32x2_t)vmul_f32(v27, vsub_f32(v34, *(float32x2_t *)(v28 + 16 * v33)));
      if (vaddv_f32((float32x2_t)v15) > 0.0) {
        int v35 = 1;
      }
      else {
        int v35 = -1;
      }
      if ((unint64_t)v30 >= v31)
      {
        uint64_t v37 = v30 - v29;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v31 - (void)v29) >> 1 > v38) {
          unint64_t v38 = (uint64_t)(v31 - (void)v29) >> 1;
        }
        if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39) {
          unint64_t v39 = (unint64_t)sub_25B3FBC64(v39);
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = (int *)(v39 + 4 * v37);
        *uint64_t v41 = v35;
        uint64_t v36 = v41 + 1;
        while (v30 != v29)
        {
          int v42 = *--v30;
          *--uint64_t v41 = v42;
        }
        unint64_t v31 = v39 + 4 * v40;
        if (v29) {
          operator delete(v29);
        }
        long long v29 = v41;
      }
      else
      {
        int *v30 = v35;
        uint64_t v36 = v30 + 1;
      }
      v32 += v35;
      ++v33;
      uint64_t v28 = *a7;
      long long v30 = v36;
    }
    while (v33 < (a7[1] - *a7) >> 4);
  }
  BOOL v43 = 0;
  if (v32 >= 0) {
    uint64_t v44 = v32;
  }
  else {
    uint64_t v44 = -v32;
  }
  if (v36 == v29)
  {
    unint64_t v46 = v71;
    uint64_t v45 = v12;
LABEL_47:
    if (!v29) {
      goto LABEL_53;
    }
LABEL_52:
    operator delete(v29);
    goto LABEL_53;
  }
  unint64_t v46 = v71;
  uint64_t v45 = v12;
  if (v36 - v29 != v44) {
    goto LABEL_47;
  }
  float v47 = *(float *)a6[1].i32;
  int v48 = (int)(float)(*(float *)(v69 + 540) / v47);
  if (v48 < 1)
  {
    BOOL v43 = 0;
    goto LABEL_52;
  }
  BOOL v43 = 0;
  float32x2_t v49 = v67[2];
  float32x2_t v50 = vsub_f32(v49, v67[3]);
  int32x2_t v51 = (int32x2_t)vmul_f32(v50, v50);
  int v52 = (int)(float)(sqrtf(vaddv_f32((float32x2_t)v51)) / v47);
  if (v52 < 1) {
    goto LABEL_52;
  }
  float v68 = v14;
  v15.i32[0] = 0;
  int v53 = 0;
  v51.i32[0] = *v29;
  float32x2_t v54 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(v15, v51), 0), (int8x8_t)vneg_f32(v27), (int8x8_t)v27);
  float32x2_t v55 = (float32x2_t)vdup_lane_s32(a6[1], 0);
  float v56 = 0.0;
  do
  {
    int v57 = 0;
    float32x2_t v58 = vmla_f32(v49, v55, vmul_n_f32(v54, (float)v53));
    do
    {
      if (sub_25B4CC2F8(&a6[2], *(void *)&vcvt_s32_f32(vrndm_f32(vdiv_f32(vmla_f32(v58, v55, vmul_n_f32(v72, (float)v57)), v55)))))
      {
        float v59 = 1.0;
      }
      else
      {
        float v59 = 0.0;
      }
      float v56 = v56 + v59;
      ++v57;
    }
    while (v52 != v57);
    ++v53;
  }
  while (v53 != v48);
  BOOL v43 = v52 * v48 && (float)(v56 / (float)(v52 * v48)) >= *(float *)(v69 + 544);
  float v14 = v68;
  if (v29) {
    goto LABEL_52;
  }
LABEL_53:
  uint64_t v60 = v77;
  float v61 = *v77;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  operator delete(v60);
  if (v78) {
    operator delete(v78);
  }
  BOOL v62 = v61 < 0.4;
  BOOL v63 = v14 > 0.4;
  if (v24 > 0.1) {
    BOOL v63 = 1;
  }
  else {
    BOOL v62 = 0;
  }
  if (v62 && v43) {
    int v64 = 256;
  }
  else {
    int v64 = 0;
  }
  uint64_t v65 = v64 | (v63 || !v43);
  operator delete(v46);

  return v65;
}

void sub_25B492EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44)
{
  unint64_t v46 = *(std::__shared_weak_count **)(v44 + 128);
  if (v46) {
    sub_25B404120(v46);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a44) {
    operator delete(a44);
  }
  operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_25B492F88(float *a1, float32x2_t *a2, uint64_t *a3, uint64_t *a4, float32x2_t **a5, void *a6, uint64_t a7)
{
  id v11 = a6;
  sub_25B3F6148((uint64_t)v74);
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  unint64_t v39 = v11;
  uint64_t v40 = a2;
  if (*a3 == v13)
  {
LABEL_6:
    char v14 = 1;
  }
  else
  {
    while (1)
    {
      sub_25B477E0C((uint64_t)v49, a2 + 2, (float32x2_t *)(v12 + 16));
      if (v50 > 0.5 && v52 < a1[120] && *((float *)&v51 + 1) < a1[118]) {
        break;
      }
      v12 += 176;
      if (v12 == v13) {
        goto LABEL_6;
      }
    }
    objc_storeStrong(&v75, *(id *)(v12 + 8));
    long long v21 = *(_OWORD *)(v12 + 16);
    long long v22 = *(_OWORD *)(v12 + 48);
    long long v77 = *(_OWORD *)(v12 + 32);
    long long v78 = v22;
    long long v76 = v21;
    long long v23 = *(_OWORD *)(v12 + 64);
    long long v24 = *(_OWORD *)(v12 + 80);
    long long v25 = *(_OWORD *)(v12 + 96);
    *(_OWORD *)((char *)v81 + 9) = *(_OWORD *)(v12 + 105);
    long long v80 = v24;
    v81[0] = v25;
    long long v79 = v23;
    std::string::operator=(&v82, (const std::string *)(v12 + 128));
    std::string::operator=(&v83, (const std::string *)(v12 + 152));
    char v14 = 0;
  }
  sub_25B3F6148((uint64_t)v64);
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  if (*a4 != v16)
  {
    int32x2_t v17 = &v73;
    while (1)
    {
      sub_25B477E0C((uint64_t)v49, v40 + 2, (float32x2_t *)(v15 + 16));
      if (v50 > 0.5 && v52 < a1[120] && *((float *)&v51 + 1) < a1[118]) {
        break;
      }
      v15 += 176;
      if (v15 == v16) {
        goto LABEL_13;
      }
    }
    objc_storeStrong(&v65, *(id *)(v15 + 8));
    long long v26 = *(_OWORD *)(v15 + 16);
    long long v27 = *(_OWORD *)(v15 + 48);
    long long v67 = *(_OWORD *)(v15 + 32);
    long long v68 = v27;
    long long v66 = v26;
    long long v28 = *(_OWORD *)(v15 + 64);
    long long v29 = *(_OWORD *)(v15 + 80);
    long long v30 = *(_OWORD *)(v15 + 96);
    *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)(v15 + 105);
    long long v70 = v29;
    v71[0] = v30;
    long long v69 = v28;
    std::string::operator=(&v72, (const std::string *)(v15 + 128));
    std::string::operator=(&v73, (const std::string *)(v15 + 152));
    sub_25B3F6148((uint64_t)v54);
    objc_storeStrong(&v55, v65);
    long long v60 = v70;
    v61[0] = v71[0];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v71 + 9);
    long long v56 = v66;
    long long v57 = v67;
    long long v58 = v68;
    long long v59 = v69;
    std::string::operator=(&v62, &v72);
    float32x2_t v20 = v40;
LABEL_18:
    std::string::operator=(&v63, v17);
    sub_25B4928CC(v49, v20, *(float32x2_t *)&v56, *(float32x2_t *)((char *)&v56 + 8));
    float32x2_t v19 = v39;
    if (!v49[0] || (float32x2_t v31 = vsub_f32(v53[0], v53[1]), sqrtf(vaddv_f32(vmul_f32(v31, v31))) < a1[128]))
    {
      uint64_t v18 = 1;
LABEL_32:
      sub_25B3F5FE8((uint64_t)&v51);
      goto LABEL_33;
    }
    int v32 = (float32x2_t *)operator new(0x10uLL);
    v48[1] = v32 + 2;
    v48[2] = v32 + 2;
    *(_OWORD *)v32->f32 = *(_OWORD *)v53[0].f32;
    v48[0] = v32;
    unsigned int v41 = 1;
    sub_25B456DFC((uint64_t)&v42, a7, &v41);
    sub_25B481B8C(&v47, v48, v39, (uint64_t)&v42);
    int v42 = &unk_2708F21F8;
    if (v46) {
      sub_25B404120(v46);
    }
    unint64_t v33 = v47;
    if (*v47 < 0.4)
    {
      float32x2_t v34 = *a5;
      int v35 = a5[1];
      if (*a5 == v35)
      {
LABEL_29:
        uint64_t v18 = 0;
LABEL_31:
        operator delete(v33);
        operator delete(v32);
        goto LABEL_32;
      }
      while (1)
      {
        sub_25B477E0C((uint64_t)&v42, v53, v34 + 2);
        if (v43 > 0.5 && v45 < a1[121] && v44 < a1[118]) {
          break;
        }
        v34 += 22;
        if (v34 == v35) {
          goto LABEL_29;
        }
      }
    }
    uint64_t v18 = 1;
    goto LABEL_31;
  }
LABEL_13:
  sub_25B3F6148((uint64_t)v54);
  if ((v14 & 1) == 0)
  {
    objc_storeStrong(&v55, v75);
    long long v60 = v80;
    v61[0] = v81[0];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v81 + 9);
    long long v56 = v76;
    long long v57 = v77;
    long long v58 = v78;
    long long v59 = v79;
    std::string::operator=(&v62, &v82);
    int32x2_t v17 = &v83;
    float32x2_t v20 = v40;
    goto LABEL_18;
  }
  uint64_t v18 = 0;
  float32x2_t v19 = v39;
LABEL_33:
  sub_25B3F5FE8((uint64_t)v54);
  sub_25B3F5FE8((uint64_t)v64);
  sub_25B3F5FE8((uint64_t)v74);

  return v18;
}

void sub_25B4933E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v69 = *(std::__shared_weak_count **)(v65 + 128);
  if (v69) {
    sub_25B404120(v69);
  }
  operator delete(v67);
  sub_25B3F5FE8(v66 + 16);
  sub_25B3F5FE8((uint64_t)&a65);
  sub_25B3F5FE8((uint64_t)&STACK[0x270]);
  sub_25B3F5FE8((uint64_t)&STACK[0x320]);

  _Unwind_Resume(a1);
}

uint64_t sub_25B49348C(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v33 = 0;
  float32x2_t v34 = 0;
  unint64_t v35 = 0;
  if (a3 == a4) {
    goto LABEL_35;
  }
  uint64_t v5 = a3;
  uint64_t v7 = (const void **)&a2[16];
  long long v8 = a2 + 2;
  long long v9 = (float *)(a1 + 464);
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 151);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v5 + 151);
    }
    else {
      uint64_t v11 = *(void *)(v5 + 136);
    }
    float32x2_t v12 = (float32x2_t)a2[18].u8[7];
    int v13 = v12.i8[0];
    if (v12.i8[0] < 0) {
      float32x2_t v12 = a2[17];
    }
    if (v11 == *(void *)&v12)
    {
      if (v13 >= 0) {
        char v14 = (unsigned __int8 *)v7;
      }
      else {
        char v14 = (unsigned __int8 *)*v7;
      }
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v5 + 128), v14, *(void *)(v5 + 136))) {
          goto LABEL_25;
        }
      }
      else
      {
        if (!*(unsigned char *)(v5 + 151)) {
          goto LABEL_25;
        }
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v5 + v15 + 128) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_25;
          }
        }
      }
    }
    sub_25B4D4E4C((uint64_t)v27, v8, (float32x2_t *)(v5 + 16), v9);
    uint64_t v16 = v34;
    if ((unint64_t)v34 >= v35)
    {
      float32x2_t v34 = sub_25B492078((void **)&v33, (uint64_t)v27);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v17 = v27[0];
      long long v18 = v27[1];
      long long v19 = v27[2];
      *((_WORD *)v34 + 24) = v28;
      *((_OWORD *)v16 + 1) = v18;
      *((_OWORD *)v16 + 2) = v19;
      *(_OWORD *)uint64_t v16 = v17;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 9) = 0;
      *((void *)v16 + 7) = 0;
      *(_OWORD *)(v16 + 56) = *(_OWORD *)v29;
      *((void *)v16 + 9) = v30;
      *((void *)v16 + 10) = 0;
      v29[0] = 0;
      v29[1] = 0;
      uint64_t v30 = 0;
      *((void *)v16 + 11) = 0;
      *((void *)v16 + 12) = 0;
      *((_OWORD *)v16 + 5) = *(_OWORD *)__p;
      *((void *)v16 + 12) = v32;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v32 = 0;
      float32x2_t v34 = v16 + 104;
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
LABEL_25:
    v5 += 176;
  }
  while (v5 != a4);
  float32x2_t v20 = v33;
  if (v33 == v34)
  {
LABEL_35:
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    goto LABEL_36;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  do
  {
    if (v20[14])
    {
      int v23 = *((_DWORD *)v20 + 1);
      if (!v23) {
        ++v22;
      }
      if (v23 == 1) {
        ++v21;
      }
    }
    v20 += 104;
  }
  while (v20 != v34);
LABEL_36:
  if (v22) {
    BOOL v24 = v21 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  uint64_t v25 = !v24;
  *(void *)&v27[0] = &v33;
  sub_25B49223C((void ***)v27);
  return v25;
}

void sub_25B49369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_25B4900CC(&a9);
  a9 = (void **)(v9 - 88);
  sub_25B49223C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4936C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_25B47C818(a1, a2, a3);
  }
  else
  {
    sub_25B47C6E4(a1[1], a2, a3);
    uint64_t result = v4 + 176;
    a1[1] = v4 + 176;
  }
  a1[1] = result;
  return result;
}

void sub_25B493714(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25B49371C(uint64_t a1, float *a2, int a3, void *a4, float a5)
{
  id v25 = a4;
  uint64_t v9 = objc_alloc_init(RS3DSurface);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;

  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    *(unsigned char *)(v11 + 104) = 0;
    *(float *)(v11 + 108) = a5;
    uint64_t v12 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  sub_25B4FD4F4(v12, v25);
  sub_25B4FD504(*(void *)(a1 + 8), 0);
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    *(_DWORD *)(v13 + 116) = a3;
    uint64_t v14 = *(void *)(a1 + 8);
    if (v14) {
      *(_DWORD *)(v14 + 120) = -1;
    }
  }
  sub_25B491B04(a1, a2);
  long long v17 = objc_msgSend_identifier(*(void **)(a1 + 8), v15, v16);
  objc_msgSend_UUIDString(v17, v18, v19);
  id v20 = objc_claimAutoreleasedReturnValue();
  int v23 = (char *)objc_msgSend_UTF8String(v20, v21, v22);
  sub_25B40B504((std::string *)(a1 + 128), v23);

  if (*(char *)(a1 + 175) < 0)
  {
    *(void *)(a1 + 160) = 0;
    BOOL v24 = *(unsigned char **)(a1 + 152);
  }
  else
  {
    BOOL v24 = (unsigned char *)(a1 + 152);
    *(unsigned char *)(a1 + 175) = 0;
  }
  unsigned char *v24 = 0;
}

void sub_25B493844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B493870(uint64_t a1, long long *a2, void *a3, void *a4, float a5, float a6, float a7)
{
  id v48 = a3;
  id v13 = a4;
  uint64_t v14 = objc_alloc_init(RS3DSurface);
  uint64_t v15 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v14;

  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    *(unsigned char *)(v16 + 104) = 0;
    *(float *)(v16 + 108) = a7;
    uint64_t v17 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v17 = 0;
  }
  sub_25B4FD4F4(v17, v48);
  sub_25B4FD504(*(void *)(a1 + 8), v13);
  uint64_t v21 = *(void *)(a1 + 8);
  if (v21 && (*(_DWORD *)(v21 + 116) = -1, (uint64_t v22 = *(void *)(a1 + 8)) != 0))
  {
    *(_DWORD *)(v22 + 120) = -1;
    uint64_t v23 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v23 = 0;
  }
  if (a6 >= a5) {
    float v24 = a5;
  }
  else {
    float v24 = a6;
  }
  if (a5 >= a6) {
    float v25 = a5;
  }
  else {
    float v25 = a6;
  }
  *(float *)(a1 + 64) = v24;
  *(float *)(a1 + 68) = v25;
  long long v26 = *a2;
  *(_OWORD *)(a1 + 16) = *a2;
  *(void *)&long long v26 = *(void *)(a1 + 16);
  *(void *)&long long v20 = *(void *)(a1 + 24);
  long long v27 = v26;
  *((float *)&v27 + 2) = v24;
  long long v28 = v20;
  *((float *)&v28 + 2) = v25;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v28;
  *(float *)(a1 + 72) = v25 - v24;
  *((float *)&v26 + 2) = v25;
  *((float *)&v20 + 2) = v24;
  src[0] = v26;
  src[1] = v28;
  src[2] = v20;
  src[3] = v27;
  if (v23)
  {
    objc_copyStruct((void *)(v23 + 272), src, 64, 1, 0);
    objc_msgSend_identifier(*(void **)(a1 + 8), v29, v30);
  }
  else
  {
    objc_msgSend_identifier(0, v18, v19);
  float32x2_t v31 = };
  objc_msgSend_UUIDString(v31, v32, v33);
  id v34 = objc_claimAutoreleasedReturnValue();
  uint64_t v37 = (char *)objc_msgSend_UTF8String(v34, v35, v36);
  sub_25B40B504((std::string *)(a1 + 128), v37);

  if (v13)
  {
    uint64_t v40 = objc_msgSend_parentIdentifier(*(void **)(a1 + 8), v38, v39);
    objc_msgSend_UUIDString(v40, v41, v42);
    id v43 = objc_claimAutoreleasedReturnValue();
    unint64_t v46 = (char *)objc_msgSend_UTF8String(v43, v44, v45);
    sub_25B40B504((std::string *)(a1 + 152), v46);
  }
  else
  {
    if (*(char *)(a1 + 175) < 0)
    {
      *(void *)(a1 + 160) = 0;
      float v47 = *(unsigned char **)(a1 + 152);
    }
    else
    {
      float v47 = (unsigned char *)(a1 + 152);
      *(unsigned char *)(a1 + 175) = 0;
    }
    unsigned char *v47 = 0;
  }
}

void sub_25B493A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B493A9C()
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v0 = (void *)MEMORY[0x261164650]();
  *(void *)uint64_t v33 = 0x1A00000006;
  size_t size = 128;
  if (sysctl(v33, 2u, v32, &size, 0, 0))
  {
    if (*__error() != 12)
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      uint64_t v1 = (id)qword_26A5020A8;
      if (!os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
LABEL_34:
      int v27 = *__error();
      *(_DWORD *)buf = 67240192;
      int v31 = v27;
      uint64_t v23 = "sysctl failed: %{public, errno}d";
LABEL_35:
      _os_log_error_impl(&dword_25B3F3000, v1, OS_LOG_TYPE_ERROR, v23, buf, 8u);
LABEL_15:

      goto LABEL_16;
    }
    if (sysctl(v33, 2u, 0, &size, 0, 0))
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      uint64_t v1 = (id)qword_26A5020A8;
      if (!os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
    long long v18 = malloc_type_malloc(size, 0x4E4D353AuLL);
    if (!v18)
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      uint64_t v1 = (id)qword_26A5020A8;
      if (!os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      int v22 = *__error();
      *(_DWORD *)buf = 67240192;
      int v31 = v22;
      uint64_t v23 = "malloc failed: %{public, errno}d";
      goto LABEL_35;
    }
    uint64_t v19 = v18;
    if (sysctl(v33, 2u, v18, &size, 0, 0))
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      long long v20 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        int v28 = *__error();
        *(_DWORD *)buf = 67240192;
        int v31 = v28;
        _os_log_error_impl(&dword_25B3F3000, v20, OS_LOG_TYPE_ERROR, "sysctl failed: %{public, errno}d", buf, 8u);
      }

      free(v19);
      goto LABEL_16;
    }
    id v24 = [NSString alloc];
    size_t v25 = strlen((const char *)v19);
    unint64_t v4 = objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v24, v26, (uint64_t)v19, v25, 1, 1);
  }
  else
  {
    id v2 = [NSString alloc];
    unint64_t v4 = objc_msgSend_initWithCString_encoding_(v2, v3, (uint64_t)v32, 1);
  }
  id v6 = v4;
  if (!v4)
  {
LABEL_16:
    uint64_t v11 = MGCopyAnswer();
    id v6 = (id)qword_26A502198;
    qword_26A502198 = v11;
    goto LABEL_28;
  }
  if (objc_msgSend_hasSuffix_(v4, v5, @"DEV"))
  {
    uint64_t v9 = objc_msgSend_length(v6, v7, v8) - 3;
    objc_msgSend_substringToIndex_(v6, v10, v9);
  }
  else
  {
    if (!objc_msgSend_hasSuffix_(v6, v7, @"AP"))
    {
      uint64_t v21 = (void *)qword_26A502198;
      qword_26A502198 = (uint64_t)v6;
      id v6 = v6;

      goto LABEL_28;
    }
    uint64_t v14 = objc_msgSend_length(v6, v12, v13) - 2;
    objc_msgSend_substringToIndex_(v6, v15, v14);
  uint64_t v16 = };
  uint64_t v17 = (void *)qword_26A502198;
  qword_26A502198 = v16;

LABEL_28:
}

void sub_25B493E90()
{
  int v0 = (void *)MEMORY[0x261164650]();
  byte_26A5021A8 = sub_25B493EDC(&unk_2708FE428);
}

uint64_t sub_25B493EDC(void *a1)
{
  uint64_t v1 = qword_26A5021A0;
  id v3 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_26A5021A0, &unk_2708F1580);
  }
  uint64_t v4 = objc_msgSend_containsObject_(v3, v2, qword_26A502198);

  return v4;
}

void sub_25B493F44()
{
  int v0 = (void *)MEMORY[0x261164650]();
  byte_26A5021B8 = sub_25B493EDC(&unk_2708FE440);
}

BOOL sub_25B493F90()
{
  if (qword_26A5021B0 != -1) {
    dispatch_once(&qword_26A5021B0, &unk_2708F15A0);
  }
  if (byte_26A5021A8) {
    return 1;
  }
  if (qword_26A5021C0 != -1) {
    dispatch_once(&qword_26A5021C0, &unk_2708F15C0);
  }
  return byte_26A5021B8 != 0;
}

void sub_25B494018(void *a1)
{
  if (a1)
  {
    sub_25B494018(*a1);
    sub_25B494018(a1[1]);
    sub_25B49416C((void *)a1[6]);
    operator delete(a1);
  }
}

void sub_25B49406C(void *a1)
{
  if (a1)
  {
    sub_25B49406C(*a1);
    sub_25B49406C(a1[1]);
    sub_25B4940C0((void *)a1[6]);
    operator delete(a1);
  }
}

void sub_25B4940C0(void *a1)
{
  if (a1)
  {
    sub_25B4940C0(*a1);
    sub_25B4940C0(a1[1]);
    sub_25B494114((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_25B494114(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    id v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void sub_25B49416C(void *a1)
{
  if (a1)
  {
    sub_25B49416C(*a1);
    sub_25B49416C(a1[1]);
    sub_25B4941C0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_25B4941C0(uint64_t a1)
{
  sub_25B494210(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    id v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_25B494210(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1840;
  id v2 = *(void **)(a1 + 720);
  if (v2) {
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 688);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 656);
  if (v4)
  {
    *(void *)(a1 + 664) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  uint64_t v5 = *(void **)(a1 + 552);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v7 = (void **)(a1 + 528);
  sub_25B4942BC(&v7);
  return a1;
}

void sub_25B4942BC(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        id v6 = v4;
        sub_25B494350(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B494350(void ***a1)
{
  id v2 = *a1;
  if (*v2)
  {
    sub_25B4943A4((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void sub_25B4943A4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_25B4943F4(uint64_t a1)
{
  sub_25B494210(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B494430()
{
}

void sub_25B494448(void *a1)
{
  *a1 = &unk_2708F15F0;
  sub_25B3FB178((uint64_t)(a1 + 19));

  JUMPOUT(0x261163EE0);
}

void *sub_25B4944AC(void *a1)
{
  *a1 = &unk_2708F15F0;
  sub_25B3FB178((uint64_t)(a1 + 19));
  return a1;
}

uint64_t **sub_25B4944F0(void *a1, unsigned __int8 a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int8 *)result + 16) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_25B4945A4(uint64_t a1, const std::string *a2, long long *a3, long long *a4, long long *a5, uint64_t a6, unsigned __int8 **a7, int a8, std::string *__str)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1840;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  std::string v62 = (std::string *)(a1 + 608);
  std::string v63 = (void **)(a1 + 552);
  int v64 = (char *)(a1 + 656);
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  uint64_t v16 = (void **)(a1 + 688);
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  uint64_t v17 = (void **)(a1 + 720);
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 636) = 0;
  std::string::operator=((std::string *)(a1 + 584), a2);
  std::string::operator=(v62, __str);
  *(_DWORD *)(a1 + 632) = a8;
  long long v18 = *a4;
  long long v19 = a4[1];
  long long v20 = a4[3];
  *(_OWORD *)(a1 + 112) = a4[2];
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 80) = v18;
  *(_OWORD *)(a1 + 96) = v19;
  long long v21 = *a5;
  long long v22 = a5[2];
  *(_OWORD *)(a1 + 160) = a5[1];
  *(_OWORD *)(a1 + 176) = v22;
  *(_OWORD *)(a1 + 144) = v21;
  *(void *)(a1 + 576) = a6;
  sub_25B520618(a1, a3);
  long long v23 = *(_OWORD *)(a1 + 128);
  float32x2_t v24 = *(float32x2_t *)(a1 + 208);
  float32x2_t v25 = vsub_f32(*(float32x2_t *)(a1 + 200), *(float32x2_t *)&v23);
  int32x2_t v26 = (int32x2_t)vmul_f32(v25, v25);
  *(_WORD *)(a1 + 636) = **a7 | 0x100;
  *(_WORD *)(a1 + 638) = (*a7)[1] | 0x100;
  *(_DWORD *)(a1 + 640) = 16843009;
  *(float32x2_t *)&long long v23 = vsub_f32(v24, *(float32x2_t *)&v23);
  *(float32x2_t *)&long long v23 = vmul_f32(*(float32x2_t *)&v23, *(float32x2_t *)&v23);
  __long long src = (void **)vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)v26, (float32x2_t)vdup_lane_s32(v26, 1)), (int32x2_t)vadd_f32(*(float32x2_t *)&v23, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v23, 1))));
  sub_25B3FE7A8(v64, (char *)&__src, (uint64_t)&v66, 2uLL);
  *(unsigned char *)(a1 + 680) = 1;
  int v27 = *(void ***)(a1 + 536);
  uint64_t v28 = *(void *)(a1 + 528);
  long long v29 = (char *)v27 - v28;
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - v28) >> 3);
  if (v30 <= 1)
  {
    uint64_t v31 = *(void *)(a1 + 544);
    if (0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v27) >> 3) >= 2 - v30)
    {
      bzero(*(void **)(a1 + 536), 24 * ((24 - (uint64_t)v29) / 0x18uLL) + 24);
      *(void *)(a1 + 536) = &v27[3 * ((24 - (uint64_t)v29) / 0x18uLL) + 3];
      goto LABEL_23;
    }
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v28) >> 3);
    uint64_t v33 = 2 * v32;
    if (2 * v32 <= 2) {
      uint64_t v33 = 2;
    }
    if (v32 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v33;
    }
    unint64_t v35 = (char *)sub_25B413D74(v34);
    uint64_t v36 = &v35[24 * v30];
    unint64_t v38 = &v35[24 * v37];
    bzero(v36, 24 * ((24 - (uint64_t)v29) / 0x18uLL) + 24);
    uint64_t v39 = &v36[24 * ((24 - (uint64_t)v29) / 0x18uLL) + 24];
    uint64_t v40 = *(void *)(a1 + 536);
    uint64_t v41 = *(void *)(a1 + 528);
    if (v40 == v41)
    {
      *(void *)(a1 + 528) = v36;
      *(void *)(a1 + 536) = v39;
      *(void *)(a1 + 544) = v38;
      if (!v40) {
        goto LABEL_23;
      }
    }
    else
    {
      do
      {
        *((void *)v36 - 3) = 0;
        *((void *)v36 - 2) = 0;
        v36 -= 24;
        *((void *)v36 + 2) = 0;
        long long v42 = *(_OWORD *)(v40 - 24);
        v40 -= 24;
        *(_OWORD *)uint64_t v36 = v42;
        *((void *)v36 + 2) = *(void *)(v40 + 16);
        *(void *)uint64_t v40 = 0;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = 0;
      }
      while (v40 != v41);
      uint64_t v43 = *(void *)(a1 + 528);
      uint64_t v40 = *(void *)(a1 + 536);
      *(void *)(a1 + 528) = v36;
      *(void *)(a1 + 536) = v39;
      *(void *)(a1 + 544) = v38;
      if (v40 != v43)
      {
        do
        {
          v40 -= 24;
          __long long src = (void **)v40;
          sub_25B494350(&__src);
        }
        while (v40 != v43);
        uint64_t v40 = v43;
      }
      if (!v40) {
        goto LABEL_23;
      }
    }
    operator delete((void *)v40);
    goto LABEL_23;
  }
  if (v29 != (char *)48)
  {
    float v44 = (void **)(v28 + 48);
    while (v27 != v44)
    {
      v27 -= 3;
      __long long src = v27;
      sub_25B494350(&__src);
    }
    *(void *)(a1 + 536) = v44;
  }
LABEL_23:
  LOWORD(__src) = 257;
  sub_25B495540(v63, &__src, (unsigned char *)&__src + 2);
  LOWORD(__src) = 257;
  sub_25B495540(v16, &__src, (unsigned char *)&__src + 2);
  *(double *)v51.i64 = sub_25B4781B8((float32x4_t *)(a1 + 80), a1 + 144, 384, 288, v45, v46, v47, v48, v49, v50);
  v52.i64[0] = *(void *)(a1 + 216);
  v52.i32[2] = 0;
  float32x4_t v53 = vmlaq_f32(vmulq_f32(v52, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL));
  float32x4_t v54 = vmulq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL));
  float32x4_t v55 = vmulq_f32(v51, v51);
  float32x4_t v56 = vmulq_f32(v53, v53);
  float v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0]/ fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), v56)).f32[0]), 1.1755e-38);
  float v58 = 1.0;
  if (v57 <= 1.0) {
    float v58 = v57;
  }
  if (v57 >= -1.0) {
    float v59 = v58;
  }
  else {
    float v59 = -1.0;
  }
  float v60 = acosf(v59) * 180.0 / 3.14159274;
  if ((float)(180.0 - v60) < v60) {
    float v60 = 180.0 - v60;
  }
  *(float *)(a1 + 712) = v60;
  LOWORD(__src) = 0;
  sub_25B495540(v17, &__src, (unsigned char *)&__src + 2);
  return a1;
}

void sub_25B494A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13)
{
  if (*v16) {
    operator delete(*v16);
  }
  if (*v15) {
    operator delete(*v15);
  }
  long long v18 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 664) = v18;
    operator delete(v18);
  }
  if (*(char *)(v13 + 631) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v13 + 607) < 0) {
    operator delete(*v14);
  }
  if (*a11) {
    operator delete(*a11);
  }
  a13 = (void **)(v13 + 528);
  sub_25B4942BC(&a13);
  _Unwind_Resume(a1);
}

char *sub_25B494B20(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)sub_25B4953D4((uint64_t)a1, &v14, a2);
  id v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    id v6 = (char *)operator new(0x330uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = v6 + 32;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_25B4002F4(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v8 = v10;
    }
    *((void *)v6 + 8) = &unk_2708F1840;
    v6[472] = 0;
    v6[488] = 0;
    v6[496] = 0;
    v6[512] = 0;
    v6[520] = 0;
    v6[536] = 0;
    v6[544] = 0;
    v6[560] = 0;
    v6[568] = 0;
    v6[584] = 0;
    *((void *)v6 + 90) = 0;
    *(_OWORD *)(v6 + 728) = 0u;
    *((void *)v6 + 94) = 0;
    *(_OWORD *)(v6 + 760) = 0u;
    *((_OWORD *)v6 + 49) = 0u;
    *((void *)v6 + 100) = 0;
    *((_OWORD *)v6 + 27) = 0u;
    *((_OWORD *)v6 + 28) = 0u;
    *((_OWORD *)v6 + 25) = 0u;
    *((_OWORD *)v6 + 26) = 0u;
    *((_OWORD *)v6 + 23) = 0u;
    *((_OWORD *)v6 + 24) = 0u;
    *((_OWORD *)v6 + 21) = 0u;
    *((_OWORD *)v6 + 22) = 0u;
    *((_OWORD *)v6 + 19) = 0u;
    *((_OWORD *)v6 + 20) = 0u;
    *((_OWORD *)v6 + 38) = 0u;
    *((_OWORD *)v6 + 39) = 0u;
    *((_OWORD *)v6 + 37) = 0u;
    *(_OWORD *)(v6 + 664) = 0u;
    *(_OWORD *)(v6 + 680) = 0u;
    *(_OWORD *)(v6 + 648) = 0u;
    *((_DWORD *)v6 + 175) = 0;
    char v13 = 1;
    sub_25B3FA740(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    sub_25B495468((uint64_t)v12);
  }
  return v6;
}

void sub_25B494C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B494C90(uint64_t a1, uint64_t a2)
{
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x1F9uLL);
  if (a1 != a2)
  {
    unint64_t v4 = *(uint64_t **)(a2 + 528);
    uint64_t v5 = *(uint64_t **)(a2 + 536);
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    uint64_t v7 = *(void *)(a1 + 544);
    uint64_t v8 = *(void ***)(a1 + 528);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v8) >> 3) < v6)
    {
      uint64_t v9 = (void **)(a1 + 528);
      if (v8)
      {
        long long v10 = *(void ***)(a1 + 536);
        uint64_t v11 = *(void **)(a1 + 528);
        if (v10 != v8)
        {
          do
          {
            v10 -= 3;
            long long v21 = v10;
            sub_25B494350(&v21);
          }
          while (v10 != v8);
          uint64_t v11 = *v9;
        }
        *(void *)(a1 + 536) = v8;
        operator delete(v11);
        uint64_t v7 = 0;
        *uint64_t v9 = 0;
        *(void *)(a1 + 536) = 0;
        *(void *)(a1 + 544) = 0;
      }
      if (v6 > 0xAAAAAAAAAAAAAAALL) {
        sub_25B3FBC4C();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v6) {
        uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      sub_25B413D24((void *)(a1 + 528), v14);
      uint64_t v15 = sub_25B495148(a1 + 544, v4, v5, *(void **)(a1 + 536));
      goto LABEL_17;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 536) - (void)v8) >> 3) < v6)
    {
      uint64_t v16 = &v4[(uint64_t)(*(void *)(a1 + 536) - (void)v8) >> 3];
      sub_25B494F9C(*(uint64_t **)(a2 + 528), v16, *(uint64_t **)(a1 + 528));
      uint64_t v15 = sub_25B495148(a1 + 544, v16, v5, *(void **)(a1 + 536));
LABEL_17:
      *(void *)(a1 + 536) = v15;
      goto LABEL_21;
    }
    uint64_t v17 = sub_25B494F9C(*(uint64_t **)(a2 + 528), *(uint64_t **)(a2 + 536), *(uint64_t **)(a1 + 528));
    long long v18 = *(void ***)(a1 + 536);
    while (v18 != (void **)v17)
    {
      v18 -= 3;
      long long v21 = v18;
      sub_25B494350(&v21);
    }
    *(void *)(a1 + 536) = v17;
  }
LABEL_21:
  sub_25B494F08((void **)(a1 + 552), a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  std::string::operator=((std::string *)(a1 + 584), (const std::string *)(a2 + 584));
  std::string::operator=((std::string *)(a1 + 608), (const std::string *)(a2 + 608));
  int v19 = *(_DWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_DWORD *)(a1 + 648) = v19;
  if (a1 != a2) {
    sub_25B3FE7A8((char *)(a1 + 656), *(char **)(a2 + 656), *(void *)(a2 + 664), (uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 2);
  }
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  sub_25B494F08((void **)(a1 + 688), a2 + 688);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  sub_25B494F08((void **)(a1 + 720), a2 + 720);
  return a1;
}

void sub_25B494EF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 536) = v2;
  _Unwind_Resume(a1);
}

void sub_25B494F00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 536) = v2;
  _Unwind_Resume(a1);
}

void **sub_25B494F08(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        sub_25B40DE18(a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      unint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t *sub_25B494F9C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      if (a3 != i)
      {
        uint64_t v7 = (_DWORD *)*i;
        uint64_t v6 = i[1];
        uint64_t v8 = v6 - *i;
        unint64_t v9 = v8 >> 5;
        uint64_t v10 = a3[2];
        uint64_t v11 = (char *)*a3;
        if (v8 >> 5 <= (unint64_t)((v10 - *a3) >> 5))
        {
          uint64_t v15 = (char *)a3[1];
          unint64_t v16 = (v15 - v11) >> 5;
          if (v16 >= v9)
          {
            if (v7 != (_DWORD *)v6)
            {
              do
              {
                long long v21 = (const std::string *)(v7 + 2);
                int v22 = *v7;
                v7 += 8;
                long long v23 = (std::string *)(v11 + 8);
                *(_DWORD *)uint64_t v11 = v22;
                v11 += 32;
                std::string::operator=(v23, v21);
              }
              while (v7 != (_DWORD *)v6);
              uint64_t v15 = (char *)a3[1];
            }
            while (v15 != v11)
            {
              if (*(v15 - 1) < 0) {
                operator delete(*((void **)v15 - 3));
              }
              v15 -= 32;
            }
            a3[1] = (uint64_t)v11;
            goto LABEL_28;
          }
          uint64_t v17 = (uint64_t)&v7[8 * v16];
          if (v15 != v11)
          {
            do
            {
              long long v18 = (const std::string *)(v7 + 2);
              int v19 = *v7;
              v7 += 8;
              long long v20 = (std::string *)(v11 + 8);
              *(_DWORD *)uint64_t v11 = v19;
              v11 += 32;
              std::string::operator=(v20, v18);
            }
            while (v7 != (_DWORD *)v17);
            uint64_t v11 = (char *)a3[1];
          }
          uint64_t v14 = sub_25B4952A4((uint64_t)(a3 + 2), v17, v6, (uint64_t)v11);
        }
        else
        {
          if (v11)
          {
            sub_25B4943A4(a3);
            operator delete((void *)*a3);
            uint64_t v10 = 0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
          }
          if (v8 < 0) {
            sub_25B3FBC4C();
          }
          uint64_t v12 = v10 >> 4;
          if (v10 >> 4 <= v9) {
            uint64_t v12 = v8 >> 5;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          sub_25B43AF80(a3, v13);
          uint64_t v14 = sub_25B4952A4((uint64_t)(a3 + 2), (uint64_t)v7, v6, a3[1]);
        }
        a3[1] = v14;
      }
LABEL_28:
      a3 += 3;
    }
  }
  return a3;
}

void sub_25B49513C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_25B495148(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v12 = a4;
  v13[0] = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      v13[1] = v4;
      char v14 = 0;
      if (v8 != v7)
      {
        sub_25B43AF80(v4, (v8 - v7) >> 5);
        v4[1] = sub_25B4952A4((uint64_t)(v4 + 2), v7, v8, v4[1]);
        unint64_t v4 = (void *)v13[0];
      }
      v4 += 3;
      v13[0] = v4;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  sub_25B495240((uint64_t)v10);
  return v4;
}

void sub_25B495218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
}

uint64_t sub_25B495240(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint8x8_t v3 = **(void ****)(a1 + 16);
    unint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      uint64_t v5 = v3;
      sub_25B494350(&v5);
    }
  }
  return a1;
}

uint64_t sub_25B4952A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      uint64_t v8 = (unsigned char *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_25B4002F4(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  sub_25B495374((uint64_t)v11);
  return v4;
}

void sub_25B495360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B495374(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void *sub_25B4953D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((sub_25B4954C0(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_25B4954C0(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_25B495468(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4941C0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B4954C0(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

void *sub_25B495540(void **a1, unsigned char *a2, unsigned char *a3)
{
  a1[1] = 0;
  if (((unint64_t)a1[2] & 0x3FFFFFFFFFFFFFFLL) == 0)
  {
    size_t v6 = *a1;
    if (*a1)
    {
      operator delete(v6);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = operator new(8uLL);
    *(_OWORD *)(a1 + 1) = xmmword_25B5F1130;
  }

  return sub_25B4955CC(a1, a2, a3, 2);
}

void *sub_25B4955CC(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*result + 8 * v8) = 0;
LABEL_9:
  if (a2 != a3)
  {
    int v9 = v4 & 0x3F;
    uint64_t v10 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v11 = 1 << v9;
      if (*a2) {
        uint64_t v12 = *v10 | v11;
      }
      else {
        uint64_t v12 = *v10 & ~v11;
      }
      *uint64_t v10 = v12;
      ++a2;
      v10 += v9 == 63;
      if (v9 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t **sub_25B49566C(uint64_t **a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 32);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = operator new(0x40uLL);
    v9[32] = *a3;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 5) = v9 + 48;
    sub_25B3FA740(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t sub_25B495728(void *a1, void *a2)
{
  if (a1)
  {
    size_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if ((sub_25B4954C0(a2, v3 + 4) & 0x80) == 0)
      {
        if ((sub_25B4954C0(v3 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v3;
      }
      size_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_25B495794(uint64_t a1, void *a2)
{
  uint64_t v2 = *sub_25B4953D4(a1, &v4, a2);
  if (!v2) {
    sub_25B3FC090("map::at:  key not found");
  }
  return v2 + 64;
}

char *sub_25B4957D4(uint64_t a1, int a2, int a3, void **a4)
{
  unint64_t v6 = sub_25B4958A0(a1, &v13, a2, a3);
  unint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    unint64_t v7 = (char *)operator new(0x78uLL);
    *((void *)v7 + 4) = **a4;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    uint64_t v9 = v13;
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    uint64_t *v8 = (uint64_t)v7;
    uint64_t v10 = **(void **)a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *(void *)a1 = v10;
      uint64_t v11 = (uint64_t *)*v8;
    }
    sub_25B3FA798(*(uint64_t **)(a1 + 8), v11);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

uint64_t *sub_25B4958A0(uint64_t a1, void *a2, int a3, int a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  unint64_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = v5;
      int v8 = *((_DWORD *)v5 + 8);
      if (v8 == a3)
      {
        int v9 = *((_DWORD *)v7 + 9);
        BOOL v10 = v9 == a4;
        if (v9 <= a4)
        {
          if (v9 >= a4) {
            char v11 = 1;
          }
          else {
            char v11 = -1;
          }
          if (v10) {
            char v11 = 0;
          }
          if ((v11 & 0x80) == 0) {
            goto LABEL_21;
          }
          goto LABEL_18;
        }
LABEL_12:
        unint64_t v5 = (uint64_t *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v8 > a3) {
          goto LABEL_12;
        }
        if (v8 >= a3) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if ((v12 & 0x80) == 0) {
          goto LABEL_21;
        }
LABEL_18:
        uint64_t result = v7 + 1;
        unint64_t v5 = (uint64_t *)v7[1];
        if (!v5) {
          goto LABEL_21;
        }
      }
    }
  }
  unint64_t v7 = result;
LABEL_21:
  *a2 = v7;
  return result;
}

void *sub_25B495914(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v5 = (void *)(a1 + 8);
  do
  {
    char v6 = sub_25B4954C0(v3 + 4, a2);
    if (v6 >= 0) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      unint64_t v5 = v3;
    }
    size_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_25B4954C0(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_25B495994(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F1840;
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x1F9uLL);
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v4 = *(uint64_t **)(a2 + 528);
  unint64_t v5 = *(uint64_t **)(a2 + 536);
  if (v5 != v4)
  {
    sub_25B413D24((void *)(a1 + 528), 0xAAAAAAAAAAAAAAABLL * (v5 - v4));
    *(void *)(a1 + 536) = sub_25B495148(a1 + 544, v4, v5, *(void **)(a1 + 536));
  }
  sub_25B40EEE8((void *)(a1 + 552), a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  if (*(char *)(a2 + 607) < 0)
  {
    sub_25B4002F4((unsigned char *)(a1 + 584), *(void **)(a2 + 584), *(void *)(a2 + 592));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 584);
    *(void *)(a1 + 600) = *(void *)(a2 + 600);
    *(_OWORD *)(a1 + 584) = v6;
  }
  if (*(char *)(a2 + 631) < 0)
  {
    sub_25B4002F4((unsigned char *)(a1 + 608), *(void **)(a2 + 608), *(void *)(a2 + 616));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 608);
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 632);
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = v8;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  sub_25B3FCA58((void *)(a1 + 656), *(const void **)(a2 + 656), *(void *)(a2 + 664), (uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 2);
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  sub_25B40EEE8((void *)(a1 + 688), a2 + 688);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  sub_25B40EEE8((void *)(a1 + 720), a2 + 720);
  return a1;
}

void sub_25B495B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(char *)(v9 + 607) < 0) {
    operator delete(*v11);
  }
  if (*v10) {
    operator delete(*v10);
  }
  sub_25B4942BC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_25B495BE8(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 1;
    while (1)
    {
      int v4 = *(_DWORD *)(v3 + 32);
      if (v4 == a2)
      {
        int v5 = *(_DWORD *)(v3 + 36);
        BOOL v6 = v5 == a3;
        if (v5 <= a3)
        {
          if (v5 >= a3) {
            char v7 = 1;
          }
          else {
            char v7 = -1;
          }
          if (v6) {
            char v7 = 0;
          }
          if ((v7 & 0x80) == 0) {
            return result;
          }
LABEL_17:
          v3 += 8;
        }
      }
      else if (v4 <= a2)
      {
        if (v4 >= a2) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if ((v8 & 0x80) == 0) {
          return result;
        }
        goto LABEL_17;
      }
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

char *sub_25B495C44(uint64_t a1, uint64_t a2, long long **a3)
{
  int v5 = sub_25B495E18(a1, &v17, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    char v7 = v5;
    BOOL v6 = (char *)operator new(0x90uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    char v16 = 0;
    char v8 = v6 + 32;
    uint64_t v9 = *a3;
    if (*((char *)v9 + 23) < 0)
    {
      sub_25B4002F4(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)char v8 = v10;
    }
    *((_DWORD *)v6 + 14) = *((_DWORD *)v9 + 6);
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    char v16 = 1;
    uint64_t v11 = v17;
    *(void *)BOOL v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v11;
    uint64_t *v7 = (uint64_t)v6;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = (uint64_t *)v6;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = (uint64_t *)*v7;
    }
    sub_25B3FA798(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
    v15[0] = 0;
    sub_25B495EEC((uint64_t)v15);
  }
  return v6;
}

void sub_25B495D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25B495D5C(void *a1)
{
  if (a1)
  {
    sub_25B495D5C(*a1);
    sub_25B495D5C(a1[1]);
    sub_25B495DB0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_25B495DB0(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *sub_25B495E18(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (uint64_t *)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    int v7 = *(_DWORD *)(a3 + 24);
    do
    {
      while (1)
      {
        char v8 = v4;
        uint64_t v9 = v4 + 4;
        char v10 = sub_25B4954C0((void *)a3, v4 + 4);
        if (!v10)
        {
          int v11 = *((_DWORD *)v8 + 14);
          char v10 = v7 < v11 ? -1 : 1;
          if (v7 == v11) {
            break;
          }
        }
        if ((v10 & 0x80) == 0) {
          break;
        }
        int v4 = (uint64_t *)*v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_20;
        }
      }
      char v12 = sub_25B4954C0(v9, (void *)a3);
      if (!v12)
      {
        int v13 = *((_DWORD *)v8 + 14);
        char v12 = v13 < v7 ? -1 : 1;
        if (v13 == v7) {
          break;
        }
      }
      if ((v12 & 0x80) == 0) {
        break;
      }
      int v5 = v8 + 1;
      int v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    char v8 = (uint64_t *)(a1 + 8);
  }
LABEL_20:
  *a2 = v8;
  return v5;
}

void sub_25B495EEC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B495DB0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B495F44(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_9;
      }
      char v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          int v7 = v8;
          char v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          int v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if ((sub_25B4954C0(v7 + 4, v5 + 4) & 0x80) != 0)
      {
LABEL_9:
        if (!v6)
        {
          long long v20 = (void *)v3;
          int v11 = (uint64_t **)v3;
LABEL_14:
          char v12 = (uint64_t *)operator new(0x330uLL);
          int v13 = v12;
          v18[0] = v12;
          v18[1] = v3;
          char v19 = 0;
          if (*((char *)v5 + 55) < 0)
          {
            sub_25B4002F4((unsigned char *)v12 + 32, (void *)v5[4], v5[5]);
          }
          else
          {
            long long v14 = *((_OWORD *)v5 + 2);
            void v12[6] = v5[6];
            *((_OWORD *)v12 + 2) = v14;
          }
          sub_25B495994((uint64_t)(v13 + 8), (uint64_t)(v5 + 8));
          char v19 = 1;
          sub_25B3FA740((uint64_t **)a1, (uint64_t)v20, v11, v13);
          v18[0] = 0;
          sub_25B495468((uint64_t)v18);
          goto LABEL_18;
        }
        long long v20 = v7;
        int v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        int v11 = (uint64_t **)sub_25B4953D4(a1, &v20, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_18:
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          int v5 = v16;
        }
        while (!v10);
      }
      int v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_25B4960E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_25B495468((uint64_t)&a9);
  sub_25B49416C(*v9);
  _Unwind_Resume(a1);
}

uint64_t sub_25B496124(uint64_t a1, char a2, _OWORD *a3)
{
  char v5 = a2;
  uint64_t v3 = sub_25B496338(a1, a3);
  return sub_25B496430(v3, &v5);
}

void sub_25B496160(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F1D50;
  uint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B496194(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)a1 = &unk_2708F1D50;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  char v4 = 1;
  *(unsigned char *)(a1 + 136) = 1;
  long long v6 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = 1;
  uint64_t v9 = v8 * v7;
  *(void *)(a1 + 104) = v8 * v7;
  *(void *)(a1 + 112) = 0;
  if (v8 * v7)
  {
    int v11 = operator new(0x30uLL);
    char v4 = 0;
    v11[1] = 0;
    v11[2] = 0;
    void *v11 = &unk_2708F1D70;
    v11[4] = v9;
    *((unsigned char *)v11 + 40) = 0;
    *(void *)(a1 + 128) = v11;
    void v11[3] = a3;
    *(void *)(a1 + 120) = v11 + 3;
    *(void *)(a1 + 144) = a3;
  }
  *(unsigned char *)(a1 + 137) = v4;
  return a1;
}

uint64_t sub_25B49627C(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      uint64_t result = MEMORY[0x261163EC0](result, 0x1000C8077774924);
      *(void *)(v1 + 24) = 0;
    }
  }
  return result;
}

void sub_25B4962C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1D70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B496318(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2708F1D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_25B496338(uint64_t result, _OWORD *a2)
{
  *(void *)uint64_t result = &unk_2708F1D50;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = 1;
  *(void *)(result + 104) = v5 * v4;
  *(void *)(result + 112) = 0;
  if (v5 * v4) {
    sub_25B4966CC((uint64_t)&v6, v5 * v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B496418(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B496430(uint64_t a1, char *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    BOOL v10 = std::locale::use_facet((const std::locale *)v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v19);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    int v11 = std::locale::use_facet((const std::locale *)v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v19);
    std::ostream::put();
    std::ostream::flush();
  }
  char v12 = *a2;
  memset(v19, 0, sizeof(v19));
  uint64_t v13 = *(void *)(a1 + 104);
  long long v14 = *(unsigned char **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v13; --v13)
      *v14++ = v12;
  }
  else if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      uint64_t v16 = 0;
      v14[*(void *)(a1 + 56) * *(void *)&v19[0] + *(void *)(a1 + 64) * *((void *)&v19[0] + 1)] = v12;
      do
      {
        uint64_t v17 = *(void *)((char *)v19 + v16 + 8) + 1;
        *(void *)((char *)v19 + v16 + 8) = v17;
        if (v17 != *(void *)(a1 + 16 + v16)) {
          break;
        }
        *(void *)((char *)v19 + v16 + 8) = 0;
        v16 -= 8;
      }
      while (v16 != -16);
    }
  }
  return a1;
}

void sub_25B4966AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_25B4966CC(uint64_t a1, uint64_t a2)
{
  long long v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *long long v3 = &unk_2708F1D70;
  v3[4] = a2;
  *((unsigned char *)v3 + 40) = 1;
  operator new[]();
}

void sub_25B496754(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_25B49676C(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5, void *a6, char a7)
{
  uint64_t v850 = *MEMORY[0x263EF8340];
  unsigned __int8 v790 = a3;
  id v9 = a4;
  id v10 = a5;
  v746 = v9;
  objc_msgSend_referenceOriginTransform(v9, v11, v12);
  simd_float4x4 v852 = __invert_f4(v851);
  uint64_t v15 = 0;
  v830[0] = v852;
  do
  {
    *(float32x4_t *)((char *)&v836[0].data + v15 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_25B5F13E0, COERCE_FLOAT(*(_OWORD *)&v830[0].columns[v15])), (float32x4_t)xmmword_25B5F10E0, *(float32x2_t *)v830[0].columns[v15].f32, 1), (float32x4_t)xmmword_25B5F13F0, (float32x4_t)v830[0].columns[v15], 2), (float32x4_t)xmmword_25B5F12B0, (float32x4_t)v830[0].columns[v15], 3);
    ++v15;
  }
  while (v15 != 4);
  float32x4_t v759 = *(float32x4_t *)&v836[0].width;
  float32x4_t v762 = *(float32x4_t *)&v836[0].data;
  float32x4_t v753 = *(float32x4_t *)&v836[1].width;
  float32x4_t v755 = *(float32x4_t *)&v836[1].data;
  uint64_t v16 = objc_msgSend_camera(v9, v13, v14);
  objc_msgSend_transform(v16, v17, v18);
  uint64_t v19 = 0;
  v830[0].columns[0] = v20;
  v830[0].columns[1] = v21;
  v830[0].columns[2] = v22;
  v830[0].columns[3] = v23;
  do
  {
    *(float32x4_t *)((char *)&v836[0].data + v19 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v762, COERCE_FLOAT(*(_OWORD *)&v830[0].columns[v19])), v759, *(float32x2_t *)v830[0].columns[v19].f32, 1), v755, (float32x4_t)v830[0].columns[v19], 2), v753, (float32x4_t)v830[0].columns[v19], 3);
    ++v19;
  }
  while (v19 != 4);
  uint64_t v24 = 0;
  float32x4_t v25 = *(float32x4_t *)&v836[0].data;
  float32x4_t v26 = *(float32x4_t *)&v836[0].width;
  float32x4_t v27 = *(float32x4_t *)&v836[1].data;
  float32x4_t v28 = *(float32x4_t *)&v836[1].width;
  v830[0].columns[0] = (simd_float4)xmmword_25B5F1360;
  v830[0].columns[1] = (simd_float4)xmmword_25B5F13E0;
  v830[0].columns[2] = (simd_float4)xmmword_25B5F1400;
  v830[0].columns[3] = (simd_float4)xmmword_25B5F12B0;
  do
  {
    *(float32x4_t *)((char *)&v836[0].data + v24 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)&v830[0].columns[v24])), v26, *(float32x2_t *)v830[0].columns[v24].f32, 1), v27, (float32x4_t)v830[0].columns[v24], 2), v28, (float32x4_t)v830[0].columns[v24], 3);
    ++v24;
  }
  while (v24 != 4);
  vImage_Buffer v788 = v836[0];
  vImage_Buffer v789 = v836[1];

  long long v786 = 0u;
  long long v787 = 0u;
  long long v785 = 0u;
  uint64_t v31 = objc_msgSend_camera(v9, v29, v30);
  objc_msgSend_intrinsics(v31, v32, v33);
  DWORD2(v785) = v34;
  DWORD2(v786) = v35;
  *(void *)&long long v785 = v36;
  *(void *)&long long v786 = v37;
  DWORD2(v787) = v38;
  *(void *)&long long v787 = v39;

  id v40 = v10;
  v784[0] = 0;
  v784[1] = 0;
  v783 = (uint64_t *)v784;
  v747 = v40;
  if (a3)
  {
    for (unint64_t i = 0; i < objc_msgSend_count(v747, v41, v42); ++i)
    {
      double v45 = objc_msgSend_objectAtIndexedSubscript_(v747, v44, i);
      uint64_t v48 = objc_msgSend_identifier(v45, v46, v47);
      objc_msgSend_UUIDString((void *)v48, v49, v50);
      id v51 = objc_claimAutoreleasedReturnValue();
      float32x4_t v54 = (char *)objc_msgSend_UTF8String(v51, v52, v53);
      sub_25B403500(v791, v54);

      sub_25B403500(&__p, "");
      float v57 = objc_msgSend_parentIdentifier(v45, v55, v56);
      LOBYTE(v48) = v57 == 0;

      if ((v48 & 1) == 0)
      {
        float v60 = objc_msgSend_parentIdentifier(v45, v58, v59);
        objc_msgSend_UUIDString(v60, v61, v62);
        id v63 = objc_claimAutoreleasedReturnValue();
        uint64_t v66 = (char *)objc_msgSend_UTF8String(v63, v64, v65);
        sub_25B403500(v836, v66);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v836[0].data;
        __p.__r_.__value_.__r.__words[2] = v836[0].width;
        HIBYTE(v836[0].width) = 0;
        LOBYTE(v836[0].data) = 0;
      }
      objc_msgSend_quad(v45, v58, v59);
      v830[0].columns[0].i32[2] = v67;
      v830[0].columns[1].i32[2] = v68;
      v830[0].columns[0].i64[0] = v69;
      v830[0].columns[1].i64[0] = v70;
      v830[0].columns[2].i32[2] = v71;
      v830[0].columns[3].i32[2] = v72;
      v830[0].columns[2].i64[0] = v73;
      v830[0].columns[3].i64[0] = v74;
      uint64_t v75 = *(void *)(a2 + 120);
      long long v76 = sub_25B4944F0((void *)(v75 + 152), a3);
      long long v77 = operator new(2uLL);
      long long v78 = v77;
      *long long v77 = -1;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v77 + 1);
      if (v76) {
        uint64_t v79 = (uint64_t)(v76 + 3);
      }
      else {
        uint64_t v79 = v75 + 128;
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v77 + 1);
      sub_25B4945A4((uint64_t)v836, (const std::string *)v791, (long long *)v830, (long long *)&v788, &v785, v79, (unsigned __int8 **)&__dst, i, &__p);
      *(void *)&long long v801 = v791;
      long long v80 = sub_25B494B20(&v783, v791, (long long **)&v801);
      sub_25B494C90((uint64_t)(v80 + 64), (uint64_t)v836);
      sub_25B494210((uint64_t)v836);
      operator delete(v78);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v792) < 0) {
        operator delete(v791[0]);
      }
    }
    goto LABEL_225;
  }
  v743 = a6;
  long long v793 = 0u;
  *(_OWORD *)v794 = 0u;
  *(_OWORD *)v791 = 0u;
  long long v792 = 0u;
  obuint64_t j = v40;
  uint64_t v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v81, (uint64_t)v791, v830, 16);
  if (v84)
  {
    uint64_t v85 = *(void *)v792;
    do
    {
      for (uint64_t j = 0; j != v84; ++j)
      {
        if (*(void *)v792 != v85) {
          objc_enumerationMutation(obj);
        }
        uint64_t v87 = (void *)*((void *)v791[1] + j);
        uint64_t v88 = objc_msgSend_identifier(v87, v82, v83);
        objc_msgSend_UUIDString(v88, v89, v90);
        id v91 = objc_claimAutoreleasedReturnValue();
        uint64_t v94 = (char *)objc_msgSend_UTF8String(v91, v92, v93);
        sub_25B403500(&__dst, v94);

        objc_msgSend_quad(v87, v95, v96);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v97;
        LODWORD(v816) = v98;
        __p.__r_.__value_.__r.__words[0] = v99;
        __p.__r_.__value_.__r.__words[2] = v100;
        LODWORD(v817) = v101;
        LODWORD(v818) = v102;
        *((void *)&v816 + 1) = v103;
        *((void *)&v817 + 1) = v104;
        uint64_t v105 = *(void *)(a2 + 120);
        uint64_t v106 = sub_25B4944F0((void *)(v105 + 152), 0);
        if (v106) {
          uint64_t v109 = (uint64_t)(v106 + 3);
        }
        else {
          uint64_t v109 = v105 + 128;
        }
        unsigned __int8 v110 = objc_msgSend_edgeStates(v87, v107, v108) >> 24;
        __int16 v113 = objc_msgSend_edgeStates(v87, v111, v112);
        uint64_t v114 = operator new(2uLL);
        _WORD *v114 = v113 & 0xFF00 | v110;
        *(void *)&long long v802 = v114 + 1;
        *(void *)&long long v801 = v114;
        *((void *)&v801 + 1) = v114 + 1;
        sub_25B403500(__str, "");
        sub_25B4945A4((uint64_t)v836, &__dst, (long long *)&__p, (long long *)&v788, &v785, v109, (unsigned __int8 **)&v801, 0, (std::string *)__str);
        *(void *)&long long v847 = &__dst;
        BOOL v115 = sub_25B494B20(&v783, &__dst, (long long **)&v847);
        sub_25B494C90((uint64_t)(v115 + 64), (uint64_t)v836);
        sub_25B494210((uint64_t)v836);
        if (SBYTE7(v845) < 0) {
          operator delete(__str[0].__locale_);
        }
        operator delete(v114);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v82, (uint64_t)v791, v830, 16);
    }
    while (v84);
  }

  long long v118 = v783;
  if (v783 == (uint64_t *)v784) {
    goto LABEL_213;
  }
  do
  {
    if (*((char *)v118 + 55) < 0) {
      sub_25B4002F4(&__dst, (void *)v118[4], v118[5]);
    }
    else {
      std::string __dst = *(std::string *)(v118 + 4);
    }
    uint64_t v119 = v783;
    char obja = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (v783 != (uint64_t *)v784)
    {
      float v120 = *(float *)(a2 + 20);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      do
      {
        int v123 = (const void **)(v119 + 4);
        char v124 = *((unsigned char *)v119 + 55);
        unint64_t v125 = v119[5];
        if (v124 >= 0) {
          uint64_t v126 = *((unsigned __int8 *)v119 + 55);
        }
        else {
          uint64_t v126 = v119[5];
        }
        if (v126 != size) {
          goto LABEL_58;
        }
        if ((*((unsigned char *)v119 + 55) & 0x80) != 0)
        {
          if (memcmp(*v123, p_dst, v119[5])) {
            goto LABEL_58;
          }
        }
        else if (*((unsigned char *)v119 + 55))
        {
          unint64_t v127 = p_dst;
          int v128 = (unsigned __int8 *)(v119 + 4);
          uint64_t v129 = *((unsigned __int8 *)v119 + 55);
          while (*v128 == v127->__r_.__value_.__s.__data_[0])
          {
            ++v128;
            unint64_t v127 = (std::string *)((char *)v127 + 1);
            if (!--v129) {
              goto LABEL_84;
            }
          }
LABEL_58:
          float32x2_t v130 = (float32x2_t)v118[33];
          float32x2_t v131 = vsub_f32(v130, (float32x2_t)v119[33]);
          if (sqrtf(vaddv_f32(vmul_f32(v131, v131))) < v120)
          {
            uint64_t v132 = (unint64_t *)v118[74];
            LODWORD(v836[0].data) = 0;
            if (v124 < 0)
            {
              sub_25B4002F4(&v836[0].height, (void *)*v123, v125);
            }
            else
            {
              *(_OWORD *)&v836[0].vImagePixelCount height = *(_OWORD *)v123;
              v836[0].size_t rowBytes = v119[6];
            }
            sub_25B520AA0(v132, (uint64_t)v836);
            if (SHIBYTE(v836[0].rowBytes) < 0) {
              operator delete((void *)v836[0].height);
            }
            float32x2_t v130 = (float32x2_t)v118[33];
          }
          float32x2_t v133 = vsub_f32(v130, (float32x2_t)v119[34]);
          if (sqrtf(vaddv_f32(vmul_f32(v133, v133))) < v120)
          {
            uint64_t v134 = (unint64_t *)v118[74];
            LODWORD(v836[0].data) = 1;
            if (*((char *)v119 + 55) < 0)
            {
              sub_25B4002F4(&v836[0].height, (void *)v119[4], v119[5]);
            }
            else
            {
              *(_OWORD *)&v836[0].vImagePixelCount height = *(_OWORD *)v123;
              v836[0].size_t rowBytes = v119[6];
            }
            sub_25B520AA0(v134, (uint64_t)v836);
            if (SHIBYTE(v836[0].rowBytes) < 0) {
              operator delete((void *)v836[0].height);
            }
          }
          float32x2_t v135 = (float32x2_t)v118[34];
          float32x2_t v136 = vsub_f32(v135, (float32x2_t)v119[33]);
          if (sqrtf(vaddv_f32(vmul_f32(v136, v136))) < v120)
          {
            uint64_t v137 = v118[74];
            LODWORD(v836[0].data) = 0;
            if (*((char *)v119 + 55) < 0)
            {
              sub_25B4002F4(&v836[0].height, (void *)v119[4], v119[5]);
            }
            else
            {
              *(_OWORD *)&v836[0].vImagePixelCount height = *(_OWORD *)v123;
              v836[0].size_t rowBytes = v119[6];
            }
            sub_25B520AA0((unint64_t *)(v137 + 24), (uint64_t)v836);
            if (SHIBYTE(v836[0].rowBytes) < 0) {
              operator delete((void *)v836[0].height);
            }
            float32x2_t v135 = (float32x2_t)v118[34];
          }
          float32x2_t v138 = vsub_f32(v135, (float32x2_t)v119[34]);
          if (sqrtf(vaddv_f32(vmul_f32(v138, v138))) < v120)
          {
            uint64_t v139 = v118[74];
            LODWORD(v836[0].data) = 1;
            if (*((char *)v119 + 55) < 0)
            {
              sub_25B4002F4(&v836[0].height, (void *)v119[4], v119[5]);
            }
            else
            {
              *(_OWORD *)&v836[0].vImagePixelCount height = *(_OWORD *)v123;
              v836[0].size_t rowBytes = v119[6];
            }
            sub_25B520AA0((unint64_t *)(v139 + 24), (uint64_t)v836);
            if (SHIBYTE(v836[0].rowBytes) < 0) {
              operator delete((void *)v836[0].height);
            }
          }
        }
LABEL_84:
        float32x2_t v140 = (uint64_t *)v119[1];
        if (v140)
        {
          do
          {
            float32x2_t v141 = v140;
            float32x2_t v140 = (uint64_t *)*v140;
          }
          while (v140);
        }
        else
        {
          do
          {
            float32x2_t v141 = (uint64_t *)v119[2];
            BOOL v338 = *v141 == (void)v119;
            uint64_t v119 = v141;
          }
          while (!v338);
        }
        uint64_t v119 = v141;
      }
      while (v141 != (uint64_t *)v784);
    }
    if (obja < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    float32x2_t v142 = (uint64_t *)v118[1];
    if (v142)
    {
      do
      {
        float32x2_t v143 = v142;
        float32x2_t v142 = (uint64_t *)*v142;
      }
      while (v142);
    }
    else
    {
      do
      {
        float32x2_t v143 = (uint64_t *)v118[2];
        BOOL v338 = *v143 == (void)v118;
        long long v118 = v143;
      }
      while (!v338);
    }
    long long v118 = v143;
  }
  while (v143 != (uint64_t *)v784);
  BOOL v144 = v783;
  if (v783 == (uint64_t *)v784)
  {
LABEL_213:
    v836[0].data = (void *)v789.width;
    unsigned __int16 v206 = v743;
    goto LABEL_214;
  }
  do
  {
    float32x2_t v145 = (char *)operator new(8uLL);
    char v146 = 0;
    *(void *)float32x2_t v145 = 0x100000000;
    float v147 = v145;
    uint64_t v148 = 1;
    v749 = v144;
    v751 = v145;
    do
    {
      uint64_t v760 = v148;
      char v763 = v146;
      memset(&__p, 0, sizeof(__p));
      v756 = v147;
      float32x2_t v149 = (uint64_t *)(v144[74] + 24 * *(int *)v147);
      uint64_t v150 = *v149;
      uint64_t v151 = v149[1];
      if (*v149 == v151)
      {
        std::string::size_type v168 = 0;
        std::string::size_type v154 = 0;
        char v171 = 1;
        BOOL v144 = v749;
LABEL_124:
        unint64_t v172 = *(int *)v147;
        unint64_t v173 = v172 >> 6;
        uint64_t v174 = 1 << v172;
        *(void *)(v144[77] + 8 * v173) &= ~v174;
        if ((v171 & 1) == 0) {
          goto LABEL_127;
        }
LABEL_129:
        uint64_t v176 = v144[94];
        uint64_t v177 = *(void *)(v176 + 8 * v173) & ~v174;
        goto LABEL_131;
      }
      do
      {
        v836[0].data = (void *)(v150 + 8);
        float32x2_t v152 = sub_25B494B20(&v783, (void *)(v150 + 8), (long long **)v836) + 64;
        std::string::size_type v153 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          uint64_t v155 = 0x51B3BEA3677D46CFLL
               * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          unint64_t v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) > 0x572620AE4C415CLL) {
            sub_25B3FBC4C();
          }
          if (0xA3677D46CEFA8D9ELL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4) > v156)
            unint64_t v156 = 0xA3677D46CEFA8D9ELL
                 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4);
          if ((unint64_t)(0x51B3BEA3677D46CFLL
                                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4)) >= 0x2B9310572620AELL)
            unint64_t v157 = 0x572620AE4C415CLL;
          else {
            unint64_t v157 = v156;
          }
          v836[1].data = &__p.__r_.__value_.__r.__words[2];
          if (v157)
          {
            if (v157 > 0x572620AE4C415CLL) {
              sub_25B3FA70C();
            }
            uint64_t v158 = operator new(752 * v157);
          }
          else
          {
            uint64_t v158 = 0;
          }
          v836[0].data = v158;
          v836[0].vImagePixelCount height = (vImagePixelCount)v158 + 752 * v155;
          v836[0].vImagePixelCount width = v836[0].height;
          v836[0].size_t rowBytes = (size_t)v158 + 752 * v157;
          sub_25B495994(v836[0].height, (uint64_t)v152);
          vImagePixelCount height = v836[0].height;
          v836[0].width += 752;
          std::string::size_type v160 = __p.__r_.__value_.__l.__size_;
          std::string::size_type v161 = __p.__r_.__value_.__r.__words[0];
          for (uint64_t k = 752; ; k -= 752)
          {
            vImagePixelCount v163 = height + k;
            if (v160 + k - 752 == v161) {
              break;
            }
            uint64_t v164 = v160 + k - 1504;
            sub_25B495994(v163 - 1504, v164);
          }
          size_t v165 = __p.__r_.__value_.__r.__words[2];
          vImagePixelCount obje = v836[0].width;
          long long v166 = *(_OWORD *)&v836[0].width;
          long long v167 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[0] = v163 - 752;
          *(_OWORD *)&v836[0].vImagePixelCount height = v167;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v166;
          v836[0].size_t rowBytes = v165;
          v836[0].data = (void *)v167;
          sub_25B520E70((uint64_t)v836);
          std::string::size_type v154 = obje;
        }
        else
        {
          sub_25B495994(__p.__r_.__value_.__l.__size_, (uint64_t)v152);
          std::string::size_type v154 = v153 + 752;
        }
        __p.__r_.__value_.__l.__size_ = v154;
        v150 += 32;
      }
      while (v150 != v151);
      std::string::size_type v168 = __p.__r_.__value_.__r.__words[0];
      float v169 = (float32x2_t *)__p.__r_.__value_.__r.__words[0];
      BOOL v144 = v749;
      float v147 = v756;
      if (__p.__r_.__value_.__r.__words[0] == v154)
      {
        char v171 = 1;
        std::string::size_type v168 = v154;
        goto LABEL_124;
      }
      while (1)
      {
        float32x2_t v170 = vsub_f32(v169[25], v169[26]);
        if (sqrtf(vaddv_f32(vmul_f32(v170, v170))) <= 0.5) {
          break;
        }
        v169 += 94;
        if (v169 == (float32x2_t *)v154)
        {
          char v171 = 0;
          goto LABEL_124;
        }
      }
      unint64_t v175 = *(int *)v756;
      unint64_t v173 = v175 >> 6;
      uint64_t v174 = 1 << v175;
      *(void *)(v749[77] + 8 * v173) |= v174;
LABEL_127:
      while (*(unsigned char *)(v168 + 680))
      {
        v168 += 752;
        if (v168 == v154) {
          goto LABEL_129;
        }
      }
      uint64_t v176 = v144[94];
      uint64_t v177 = *(void *)(v176 + 8 * v173) | v174;
LABEL_131:
      *(void *)(v176 + 8 * v173) = v177;
      v836[0].data = &__p;
      sub_25B520DB0((void ***)v836);
      float v147 = &v751[4 * v760];
      char v146 = 1;
      uint64_t v148 = 2;
    }
    while ((v763 & 1) == 0);
    operator delete(v751);
    uint64_t v181 = (uint64_t *)v144[1];
    if (v181)
    {
      do
      {
        uint64_t v182 = v181;
        uint64_t v181 = (uint64_t *)*v181;
      }
      while (v181);
    }
    else
    {
      do
      {
        uint64_t v182 = (uint64_t *)v144[2];
        BOOL v338 = *v182 == (void)v144;
        BOOL v144 = v182;
      }
      while (!v338);
    }
    BOOL v144 = v182;
  }
  while (v182 != (uint64_t *)v784);
  float v183 = (float32x2_t *)v783;
  if (v783 == (uint64_t *)v784) {
    goto LABEL_213;
  }
  uint64_t v184 = 0;
  int v185 = 0;
  unint64_t v186 = 0;
  float32x2_t v187 = (float32x2_t)vdup_n_s32(0xBE4CCCCD);
  vImagePixelCount width = v789.width;
  float32x2_t v189 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
  do
  {
    float32x2_t v190 = v183[35];
    float32x2_t v191 = vmla_f32(v183[33], v187, v190);
    float32x2_t v192 = vmla_f32(v183[34], v189, v190);
    if ((unint64_t)v185 >= v186)
    {
      uint64_t v193 = v185 - v184;
      unint64_t v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v186 - (void)v184) >> 3 > v194) {
        unint64_t v194 = (uint64_t)(v186 - (void)v184) >> 3;
      }
      if (v186 - (unint64_t)v184 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v195 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v195 = v194;
      }
      if (v195) {
        unint64_t v195 = (unint64_t)sub_25B3FFAEC(v195);
      }
      else {
        uint64_t v116 = 0;
      }
      float32x4_t v196 = (float32x2_t *)(v195 + 16 * v193);
      *float32x4_t v196 = v191;
      v196[1] = v192;
      if (v185 == v184)
      {
        float32x4_t v198 = (float32x4_t *)(v195 + 16 * v193);
      }
      else
      {
        unint64_t v197 = v195 + 16 * v193;
        do
        {
          float32x4_t v178 = v185[-1];
          float32x4_t v198 = (float32x4_t *)(v197 - 16);
          *(float32x4_t *)(v197 - 16) = v178;
          --v185;
          v197 -= 16;
        }
        while (v185 != v184);
      }
      unint64_t v186 = v195 + 16 * v116;
      int v185 = (float32x4_t *)&v196[2];
      if (v184) {
        operator delete(v184);
      }
      uint64_t v184 = v198;
    }
    else
    {
      *(float32x2_t *)v185->f32 = v191;
      *(float32x2_t *)&v185->u32[2] = v192;
      ++v185;
    }
    int32x2_t v199 = (float32x2_t *)v183[1];
    if (v199)
    {
      do
      {
        float32x4_t v200 = (float32x2_t **)v199;
        int32x2_t v199 = (float32x2_t *)*v199;
      }
      while (v199);
    }
    else
    {
      do
      {
        float32x4_t v200 = (float32x2_t **)v183[2];
        BOOL v338 = *v200 == v183;
        float v183 = (float32x2_t *)v200;
      }
      while (!v338);
    }
    float v183 = (float32x2_t *)v200;
  }
  while (v200 != (float32x2_t **)v784);
  float32x4_t v201 = v783;
  if (v783 != (uint64_t *)v784)
  {
    float32x4_t v202 = v783;
    do
    {
      uint64_t v203 = v202[34];
      if (*((unsigned char *)v202 + 488)
        && (*(unsigned char *)v202[77] & 1) == 0
        && (*(unsigned char *)v202[94] & 1) == 0
        && *((unsigned char *)v202 + 701)
        && !*((unsigned char *)v202 + 700)
        && *((float *)v202 + 177) > 15.0)
      {
        v178.i64[0] = v202[33];
        v179.i64[0] = width;
        *((unsigned char *)v202 + 704) = sub_25B40E808((uint64_t)v184, (uint64_t)v185, v178, v179, v180);
      }
      if (*((unsigned char *)v202 + 512)
        && (*(unsigned char *)v202[77] & 2) == 0
        && (*(unsigned char *)v202[94] & 2) == 0
        && *((unsigned char *)v202 + 703)
        && !*((unsigned char *)v202 + 702)
        && *((float *)v202 + 178) > 15.0)
      {
        v178.i64[0] = v203;
        v179.i64[0] = width;
        *((unsigned char *)v202 + 705) = sub_25B40E808((uint64_t)v184, (uint64_t)v185, v178, v179, v180);
      }
      float32x4_t v204 = (uint64_t *)v202[1];
      if (v204)
      {
        do
        {
          uint64_t v205 = v204;
          float32x4_t v204 = (uint64_t *)*v204;
        }
        while (v204);
      }
      else
      {
        do
        {
          uint64_t v205 = (uint64_t *)v202[2];
          BOOL v338 = *v205 == (void)v202;
          float32x4_t v202 = v205;
        }
        while (!v338);
      }
      float32x4_t v202 = v205;
    }
    while (v205 != (uint64_t *)v784);
  }
  if (v184)
  {
    operator delete(v184);
    float32x4_t v201 = v783;
  }
  v836[0].data = (void *)v789.width;
  unsigned __int16 v206 = v743;
  if (v201 != (uint64_t *)v784)
  {
    do
    {
      if (*((unsigned char *)v201 + 488)
        && (*(unsigned char *)v201[77] & 1) == 0
        && (*(unsigned char *)v201[94] & 1) == 0
        && *((unsigned char *)v201 + 701)
        && !*((unsigned char *)v201 + 700)
        && *((float *)v201 + 177) > 15.0
        && !*((unsigned char *)v201 + 704))
      {
        *((unsigned char *)v201 + 706) = sub_25B520EE0(*(void *)v201[74], *(void *)(v201[74] + 8), (float32x2_t *)v836, (uint64_t)&v783);
      }
      if (*((unsigned char *)v201 + 512)
        && (*(unsigned char *)v201[77] & 2) == 0
        && (*(unsigned char *)v201[94] & 2) == 0
        && *((unsigned char *)v201 + 703)
        && !*((unsigned char *)v201 + 702)
        && *((float *)v201 + 178) > 15.0
        && !*((unsigned char *)v201 + 705))
      {
        *((unsigned char *)v201 + 707) = sub_25B520EE0(*(void *)(v201[74] + 24), *(void *)(v201[74] + 32), (float32x2_t *)v836, (uint64_t)&v783);
      }
      uint64_t v207 = (uint64_t *)v201[1];
      if (v207)
      {
        do
        {
          unint64_t v208 = v207;
          uint64_t v207 = (uint64_t *)*v207;
        }
        while (v207);
      }
      else
      {
        do
        {
          unint64_t v208 = (uint64_t *)v201[2];
          BOOL v338 = *v208 == (void)v201;
          float32x4_t v201 = v208;
        }
        while (!v338);
      }
      float32x4_t v201 = v208;
    }
    while (v208 != (uint64_t *)v784);
  }
LABEL_214:
  unint64_t v209 = (_OWORD *)*v206;
  uint64_t v210 = (_OWORD *)v206[1];
  if (v209 != v210)
  {
    v836[0].vImagePixelCount width = 0;
    v836[0].vImagePixelCount height = 0;
    v836[0].data = &v836[0].height;
    do
    {
      *(_OWORD *)objf = v209[1];
      LODWORD(v116) = llround(COERCE_FLOAT(*v209) / 0.2);
      LODWORD(v117) = llround(COERCE_FLOAT(HIDWORD(*(void *)v209)) / 0.2);
      sub_25B521008((uint64_t *)v836, v116, v117, v116 | (v117 << 32));
      LODWORD(v211) = llround(*(float *)objf / 0.2);
      LODWORD(v212) = llround(*((float *)objf + 1) / 0.2);
      sub_25B521008((uint64_t *)v836, v211, v212, v211 | (v212 << 32));
      v209 += 4;
    }
    while (v209 != v210);
    uint64_t v213 = v783;
    unint64_t v214 = (void *)v836[0].height;
    if (v783 != (uint64_t *)v784)
    {
      do
      {
        int v215 = llround(COERCE_FLOAT(v213[34]) / 0.2);
        int v216 = llround(COERCE_FLOAT(HIDWORD(v213[34])) / 0.2);
        uint64_t v217 = sub_25B5210EC((uint64_t)v214, llround(COERCE_FLOAT(v213[33]) / 0.2), llround(COERCE_FLOAT(HIDWORD(v213[33])) / 0.2));
        float32x2_t v218 = (unint64_t *)v213[98];
        unint64_t v219 = *v218 & 0xFFFFFFFFFFFFFFFELL | v217;
        unint64_t *v218 = v219;
        unint64_t *v218 = v219 & 0xFFFFFFFFFFFFFFFDLL | (2 * (sub_25B5210EC((uint64_t)v214, v215, v216) != 0));
        float32x2_t v220 = (uint64_t *)v213[1];
        if (v220)
        {
          do
          {
            float32x2_t v221 = v220;
            float32x2_t v220 = (uint64_t *)*v220;
          }
          while (v220);
        }
        else
        {
          do
          {
            float32x2_t v221 = (uint64_t *)v213[2];
            BOOL v338 = *v221 == (void)v213;
            uint64_t v213 = v221;
          }
          while (!v338);
        }
        uint64_t v213 = v221;
      }
      while (v221 != (uint64_t *)v784);
    }
    sub_25B3FA930(v214);
  }
LABEL_225:

  char v222 = a3;
  LOBYTE(v791[0]) = a3;
  if (!a3)
  {
    v836[0].vImagePixelCount width = 0;
    v836[0].vImagePixelCount height = 0;
    v836[0].data = &v836[0].height;
    float v223 = sub_25B49566C((uint64_t **)(a2 + 128), 0, v791);
    float32x2_t v224 = v223[5];
    float32x2_t v225 = v223 + 6;
    if (v224 == (uint64_t *)(v223 + 6))
    {
      unsigned __int8 v233 = 0;
    }
    else
    {
      do
      {
        if (sub_25B495728(v784[0], v224 + 6))
        {
          uint64_t v226 = sub_25B495794((uint64_t)&v783, v224 + 6);
          float32x2_t v227 = (int *)(v224 + 12);
          uint64_t v228 = *((_DWORD *)v224 + 24) ? v226 + 432 : v226 + 408;
          if (*(unsigned char *)(v228 + 16)
            && ((*(void *)(*(void *)(sub_25B495794((uint64_t)&v783, v224 + 6) + 552)
                           + (((unint64_t)*v227 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v227) & 1) == 0)
          {
            v830[0].columns[0].i64[0] = (uint64_t)(v224 + 4);
            uint64_t v229 = sub_25B4957D4((uint64_t)v836, *((_DWORD *)v224 + 8), *((_DWORD *)v224 + 9), v830);
            *((void *)v229 + 5) = v224[5];
            std::string::operator=((std::string *)v229 + 2, (const std::string *)v224 + 2);
            std::string::operator=((std::string *)v229 + 3, (const std::string *)v224 + 3);
            long long v230 = *(_OWORD *)v227;
            *((void *)v229 + 14) = v224[14];
            *((_OWORD *)v229 + 6) = v230;
          }
        }
        uint64_t v231 = (uint64_t *)v224[1];
        if (v231)
        {
          do
          {
            float32x4_t v232 = v231;
            uint64_t v231 = (uint64_t *)*v231;
          }
          while (v231);
        }
        else
        {
          do
          {
            float32x4_t v232 = (uint64_t *)v224[2];
            BOOL v338 = *v232 == (void)v224;
            float32x2_t v224 = v232;
          }
          while (!v338);
        }
        float32x2_t v224 = v232;
      }
      while (v232 != (uint64_t *)v225);
      unsigned __int8 v233 = v791[0];
    }
    int v234 = sub_25B49566C((uint64_t **)(a2 + 128), v233, v791);
    vImagePixelCount v235 = (vImagePixelCount)v234[7];
    long long v236 = *(_OWORD *)&v836[0].height;
    uint64_t v237 = v234 + 5;
    long long v238 = *(_OWORD *)(v234 + 5);
    v234[5] = (uint64_t *)v836[0].data;
    *((_OWORD *)v234 + 3) = v236;
    uint64_t v239 = v234 + 6;
    *(_OWORD *)&v836[0].data = v238;
    v836[0].vImagePixelCount width = v235;
    if (*((void *)&v236 + 1)) {
      BOOL v240 = (void *)(v236 + 16);
    }
    else {
      BOOL v240 = v237;
    }
    *BOOL v240 = v239;
    unint64_t v241 = (void *)v836[0].height;
    float v242 = (vImage_Buffer *)(v836[0].height + 16);
    if (!v235) {
      float v242 = v836;
    }
    v242->data = &v836[0].height;
    sub_25B4940C0(v241);
    char v222 = a3;
  }
  unsigned __int8 objb = v222 - 1;
  if ((v222 - 1) > 1u) {
    goto LABEL_314;
  }
  BOOL v243 = *(uint64_t ***)(a2 + 160);
  if (!v243)
  {
    v781 = 0;
    uint64_t v782 = 0;
    v780 = &v781;
    float v246 = v783;
    goto LABEL_315;
  }
  float32x2_t v244 = *(uint64_t ***)(a2 + 160);
  while (1)
  {
    unsigned int v245 = *((unsigned __int8 *)v244 + 32);
    if (v245 <= a3) {
      break;
    }
LABEL_254:
    float32x2_t v244 = (uint64_t **)*v244;
    if (!v244) {
      goto LABEL_314;
    }
  }
  if (v245 < a3)
  {
    ++v244;
    goto LABEL_254;
  }
  if ((a7 & 1) == 0)
  {
    __p.__r_.__value_.__s.__data_[0] = a3;
    int32x2_t v247 = (uint64_t **)(a2 + 152);
    while (1)
    {
      unsigned int v248 = *((unsigned __int8 *)v243 + 32);
      if (v248 <= a3) {
        break;
      }
LABEL_262:
      BOOL v243 = (uint64_t **)*v243;
      if (!v243) {
        goto LABEL_314;
      }
    }
    if (v248 < a3)
    {
      ++v243;
      goto LABEL_262;
    }
    uint64_t v249 = v783;
    if (v783 != (uint64_t *)v784)
    {
      while (2)
      {
        int v250 = __p.__r_.__value_.__s.__data_[0];
        unint64_t v251 = sub_25B49566C(v247, __p.__r_.__value_.__s.__data_[0], &__p);
        unint64_t v252 = (uint64_t **)sub_25B495914((uint64_t)(v251 + 5), v249 + 4);
        if (sub_25B49566C(v247, v250, &__p) + 6 != v252)
        {
          if (*((char *)v252 + 695) < 0)
          {
            sub_25B4002F4(v791, v252[84], (unint64_t)v252[85]);
          }
          else
          {
            long long v253 = *((_OWORD *)v252 + 42);
            *(_OWORD *)v791 = v253;
            *(void *)&long long v792 = v252[86];
          }
          float32x2_t v254 = (float32x2_t)v252[10];
          float32x2_t v255 = (float32x2_t)v252[14];
          float v256 = *((float *)v252 + 65);
          __int32 v769 = *((_DWORD *)v252 + 64);
          if (v250 == 2)
          {
            LODWORD(v253) = *((_DWORD *)v249 + 65);
            int32x2_t v764 = (int32x2_t)v253;
            if (vabds_f32(*(float *)&v253, v256) > 0.1)
            {
              float v257 = sub_25B49566C((uint64_t **)(a2 + 128), 2u, &__p);
              uint64_t v258 = v257[5];
              int8x16_t v259 = v257 + 6;
              if (v258 != (uint64_t *)(v257 + 6))
              {
                int32x2_t v260 = vdup_lane_s32(v764, 0);
                while (1)
                {
                  if (*((char *)v258 + 71) < 0)
                  {
                    sub_25B4002F4(v836, (void *)v258[6], v258[7]);
                  }
                  else
                  {
                    *(_OWORD *)&v836[0].data = *((_OWORD *)v258 + 3);
                    v836[0].vImagePixelCount width = v258[8];
                  }
                  uint64_t v261 = *((unsigned __int8 *)v249 + 55);
                  if ((v261 & 0x80u) == 0) {
                    uint64_t v262 = *((unsigned __int8 *)v249 + 55);
                  }
                  else {
                    uint64_t v262 = v249[5];
                  }
                  vImagePixelCount width_high = HIBYTE(v836[0].width);
                  int v264 = SHIBYTE(v836[0].width);
                  if ((v836[0].width & 0x8000000000000000) != 0) {
                    vImagePixelCount width_high = v836[0].height;
                  }
                  if (v262 != width_high) {
                    goto LABEL_293;
                  }
                  int v265 = *((_DWORD *)v258 + 24);
                  float32x4_t v266 = (v836[0].width & 0x8000000000000000) == 0 ? v836 : (vImage_Buffer *)v836[0].data;
                  if ((v261 & 0x80) == 0) {
                    break;
                  }
                  if (!memcmp((const void *)v249[4], v266, v249[5])) {
                    goto LABEL_291;
                  }
LABEL_293:
                  if (v264 < 0) {
                    operator delete(v836[0].data);
                  }
                  float32x4_t v268 = (uint64_t *)v258[1];
                  if (v268)
                  {
                    do
                    {
                      uint64_t v269 = v268;
                      float32x4_t v268 = (uint64_t *)*v268;
                    }
                    while (v268);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v269 = (uint64_t *)v258[2];
                      BOOL v338 = *v269 == (void)v258;
                      uint64_t v258 = v269;
                    }
                    while (!v338);
                  }
                  uint64_t v258 = v269;
                  if (v269 == (uint64_t *)v259) {
                    goto LABEL_301;
                  }
                }
                long long v267 = (unsigned __int8 *)(v249 + 4);
                if (*((unsigned char *)v249 + 55))
                {
                  while (*v267 == LOBYTE(v266->data))
                  {
                    ++v267;
                    float32x4_t v266 = (vImage_Buffer *)((char *)v266 + 1);
                    if (!--v261) {
                      goto LABEL_291;
                    }
                  }
                  goto LABEL_293;
                }
LABEL_291:
                if (v265 == 3)
                {
                  v258[14] = (uint64_t)v260;
                  *((_DWORD *)v258 + 25) = 0;
                }
                goto LABEL_293;
              }
LABEL_301:
              float v256 = *(float *)v764.i32;
            }
          }
          __int32 v765 = LODWORD(v256);
          LOBYTE(v836[0].data) = 0;
          float v270 = sub_25B49566C(v247, 0, v836);
          uint64_t v271 = (uint64_t **)sub_25B495914((uint64_t)(v270 + 5), v791);
          LOBYTE(v836[0].data) = 0;
          if (sub_25B49566C(v247, 0, v836) + 6 != v271)
          {
            sub_25B495994((uint64_t)v836, (uint64_t)(v271 + 8));
            float32x2_t v274 = vsub_f32(*(float32x2_t *)&v842, *(float32x2_t *)((char *)&v841 + 8));
            float v275 = vaddv_f32(vmul_f32(vsub_f32(v254, *(float32x2_t *)((char *)&v841 + 8)), v274));
            float v276 = vaddv_f32(vmul_f32(v274, v274));
            if (v276 < 0.000001) {
              float v276 = 0.000001;
            }
            *(float32x2_t *)v273.f32 = vmla_n_f32(*(float32x2_t *)((char *)&v841 + 8), v274, v275 / v276);
            float v277 = vaddv_f32(vmul_f32(vsub_f32(v255, *(float32x2_t *)((char *)&v841 + 8)), v274)) / v276;
            simd_float4 v278 = v273;
            v278.i32[2] = v769;
            *(float32x2_t *)v272.f32 = vmla_n_f32(*(float32x2_t *)((char *)&v841 + 8), v274, v277);
            v830[0].columns[0] = v278;
            simd_float4 v279 = v272;
            v279.i32[2] = v769;
            v830[0].columns[1] = v279;
            v272.i32[2] = v765;
            v830[0].columns[2] = v272;
            v273.i32[2] = v765;
            v830[0].columns[3] = v273;
            sub_25B520618((uint64_t)(v249 + 8), (long long *)v830);
            sub_25B520618((uint64_t)(v252 + 8), (long long *)v830);
            sub_25B494210((uint64_t)v836);
          }
          if (SBYTE7(v792) < 0) {
            operator delete(v791[0]);
          }
        }
        float32x4_t v280 = (uint64_t *)v249[1];
        if (v280)
        {
          do
          {
            long long v281 = v280;
            float32x4_t v280 = (uint64_t *)*v280;
          }
          while (v280);
        }
        else
        {
          do
          {
            long long v281 = (uint64_t *)v249[2];
            BOOL v338 = *v281 == (void)v249;
            uint64_t v249 = v281;
          }
          while (!v338);
        }
        uint64_t v249 = v281;
        if (v281 == (uint64_t *)v784) {
          break;
        }
        continue;
      }
    }
  }
LABEL_314:
  v781 = 0;
  uint64_t v782 = 0;
  v780 = &v781;
  float v246 = v783;
  if (!a3)
  {
    if (v783 == (uint64_t *)v784)
    {
LABEL_728:
      uint64_t v702 = *(void *)(a2 + 136);
      if (v702)
      {
        while (1)
        {
          uint64_t v703 = v702;
          if (!*(unsigned char *)(v702 + 32)) {
            break;
          }
          uint64_t v702 = *(void *)v702;
          if (!*(void *)v703) {
            goto LABEL_735;
          }
        }
      }
      else
      {
        uint64_t v703 = a2 + 136;
LABEL_735:
        v705 = operator new(0x40uLL);
        v705[32] = 0;
        *((void *)v705 + 7) = 0;
        *((void *)v705 + 6) = 0;
        *((void *)v705 + 5) = v705 + 48;
        sub_25B3FA740((uint64_t **)(a2 + 128), v703, (uint64_t **)v703, (uint64_t *)v705);
        uint64_t v703 = (uint64_t)v705;
      }
      if (!v782) {
        goto LABEL_682;
      }
      v706 = v780;
      if (v780 == &v781) {
        goto LABEL_682;
      }
      uint64_t v707 = v703 + 40;
      uint64_t v761 = v703;
      uint64_t v767 = v703 + 40;
      while (1)
      {
        int v708 = *((_DWORD *)v706 + 8);
        v709 = (const std::string *)(v706 + 6);
        v710 = (long long *)(v706 + 12);
        int v711 = *((_DWORD *)v706 + 24);
        float v712 = *((float *)v706 + 25);
        float v713 = *((float *)v706 + 27);
        int v714 = *((_DWORD *)v706 + 9);
        if (!sub_25B495BE8(*(void *)(v703 + 48), v708, v714))
        {
          v836[0].data = v706 + 4;
          v730 = (std::string *)sub_25B4957D4(v707, v708, *((_DWORD *)v706 + 9), v836);
          goto LABEL_781;
        }
        objd = (const std::string *)(v706 + 6);
        uint64_t v715 = *sub_25B4958A0(v707, v836, v708, v714);
        if (!v715) {
          sub_25B3FC090("map::at:  key not found");
        }
        v716 = (const void **)(v715 + 48);
        size_t v717 = *(unsigned __int8 *)(v715 + 71);
        size_t v718 = *(void *)(v715 + 56);
        if ((v717 & 0x80u) == 0) {
          uint64_t v719 = *(unsigned __int8 *)(v715 + 71);
        }
        else {
          uint64_t v719 = *(void *)(v715 + 56);
        }
        uint64_t v720 = *((unsigned __int8 *)v706 + 71);
        char v721 = v720;
        v722 = v706[7];
        if ((v720 & 0x80u) == 0) {
          v723 = (void *)*((unsigned __int8 *)v706 + 71);
        }
        else {
          v723 = v706[7];
        }
        if ((void *)v719 == v723)
        {
          int v724 = *(_DWORD *)(v715 + 96);
          float v725 = *(float *)(v715 + 100);
          float v726 = *(float *)(v715 + 108);
          if ((v720 & 0x80u) == 0) {
            v727 = (unsigned __int8 *)(v706 + 6);
          }
          else {
            v727 = (unsigned __int8 *)objd->__r_.__value_.__r.__words[0];
          }
          if ((v717 & 0x80) != 0)
          {
            v758 = v706[7];
            int v754 = *(_DWORD *)(v715 + 96);
            int v731 = memcmp(*v716, v727, *(void *)(v715 + 56));
            int v724 = v754;
            v722 = v758;
            if (v731) {
              goto LABEL_764;
            }
LABEL_758:
            if (v724 == v711 && ((float)(v712 - v725) > 0.05 || (float)(v713 - v726) > 5.0))
            {
              v836[0].data = v706 + 4;
              v733 = sub_25B4957D4(v767, *((_DWORD *)v706 + 8), *((_DWORD *)v706 + 9), v836);
              *((void *)v733 + 5) = v706[5];
              std::string::operator=((std::string *)v733 + 2, objd);
              std::string::operator=((std::string *)v733 + 3, (const std::string *)v706 + 3);
              long long v734 = *v710;
              *((void *)v733 + 14) = v706[14];
              *((_OWORD *)v733 + 6) = v734;
              size_t v717 = *(unsigned __int8 *)(v715 + 71);
              size_t v718 = *(void *)(v715 + 56);
              uint64_t v720 = *((unsigned __int8 *)v706 + 71);
              v722 = v706[7];
              char v721 = *((unsigned char *)v706 + 71);
            }
            goto LABEL_764;
          }
          v728 = (unsigned __int8 *)(v715 + 48);
          uint64_t v729 = *(unsigned __int8 *)(v715 + 71);
          if (!*(unsigned char *)(v715 + 71)) {
            goto LABEL_758;
          }
          while (*v728 == *v727)
          {
            ++v728;
            ++v727;
            if (!--v729) {
              goto LABEL_758;
            }
          }
        }
LABEL_764:
        if ((v717 & 0x80u) == 0) {
          size_t v735 = v717;
        }
        else {
          size_t v735 = v718;
        }
        int v736 = v721;
        if (v721 >= 0) {
          v737 = (void *)v720;
        }
        else {
          v737 = v722;
        }
        uint64_t v703 = v761;
        uint64_t v707 = v767;
        v709 = (const std::string *)(v706 + 6);
        if ((void *)v735 != v737) {
          goto LABEL_780;
        }
        if (v736 >= 0) {
          v738 = (unsigned __int8 *)(v706 + 6);
        }
        else {
          v738 = (unsigned __int8 *)objd->__r_.__value_.__r.__words[0];
        }
        if ((v717 & 0x80) != 0)
        {
          if (memcmp(*v716, v738, v718)) {
            goto LABEL_780;
          }
        }
        else if (v717)
        {
          while (*(unsigned __int8 *)v716 == *v738)
          {
            v716 = (const void **)((char *)v716 + 1);
            ++v738;
            if (!--v717) {
              goto LABEL_782;
            }
          }
LABEL_780:
          v836[0].data = v706 + 4;
          v730 = (std::string *)sub_25B4957D4(v767, *((_DWORD *)v706 + 8), *((_DWORD *)v706 + 9), v836);
LABEL_781:
          v739 = v730;
          v730[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v706[5];
          std::string::operator=(v730 + 2, v709);
          std::string::operator=(v739 + 3, (const std::string *)v706 + 3);
          long long v740 = *v710;
          v739[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v706[14];
          *(_OWORD *)&v739[4].__r_.__value_.__l.__data_ = v740;
        }
LABEL_782:
        v741 = v706[1];
        if (v741)
        {
          do
          {
            v742 = (void **)v741;
            v741 = (void *)*v741;
          }
          while (v741);
        }
        else
        {
          do
          {
            v742 = (void **)v706[2];
            BOOL v338 = *v742 == v706;
            v706 = v742;
          }
          while (!v338);
        }
        v706 = v742;
        if (v742 == &v781) {
          goto LABEL_682;
        }
      }
    }
    uint64_t v286 = *(void *)(a2 + 120);
    while (1)
    {
      if (*((unsigned char *)v246 + 488) || *((unsigned char *)v246 + 512))
      {
        float32x2_t v287 = vsub_f32((float32x2_t)v246[33], (float32x2_t)v246[34]);
        if (sqrtf(vaddv_f32(vmul_f32(v287, v287))) > *(float *)(v286 + 20))
        {
          if (*((unsigned char *)v246 + 744)) {
            break;
          }
        }
      }
LABEL_346:
      int v292 = (uint64_t *)v246[1];
      if (v292)
      {
        do
        {
          int v293 = v292;
          int v292 = (uint64_t *)*v292;
        }
        while (v292);
      }
      else
      {
        do
        {
          int v293 = (uint64_t *)v246[2];
          BOOL v338 = *v293 == (void)v246;
          float v246 = v293;
        }
        while (!v338);
      }
      float v246 = v293;
      if (v293 == (uint64_t *)v784) {
        goto LABEL_581;
      }
    }
    uint64_t v288 = operator new(8uLL);
    char v289 = 0;
    uint64_t v290 = 0;
    *uint64_t v288 = 0x100000000;
    while (1)
    {
      char v291 = v289;
      if (sub_25B507F44(v286, v246 + 8, *((_DWORD *)v288 + v290))) {
        break;
      }
      char v289 = 1;
      uint64_t v290 = 1;
      if (v291)
      {
        operator delete(v288);
        goto LABEL_346;
      }
    }
    operator delete(v288);
LABEL_354:
    id v294 = v746;
    uint64_t v295 = a2;
    if (!*(void *)(a2 + 216))
    {
      float32x2_t v296 = objc_alloc_init(RSSemanticSegmentation);
      int v297 = *(void **)(a2 + 216);
      *(void *)(a2 + 216) = v296;

      uint64_t v295 = a2;
    }
    if (*(void *)(v295 + 208))
    {

      uint64_t v298 = v294;
      goto LABEL_358;
    }
    uint64_t v307 = *(void *)(v295 + 216);
    id v308 = v294;
    int v309 = v308;
    if (v307)
    {
      id v310 = v308;
      float v313 = v310;
      if (!*(unsigned char *)(v307 + 96))
      {
        uint64_t v314 = (__CVBuffer *)objc_msgSend_colorBuffer(v310, v311, v312);
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v314);
        float v318 = (__CVBuffer *)objc_msgSend_colorBuffer(v313, v316, v317);
        size_t v319 = CVPixelBufferGetWidth(v318);
        uint64_t v322 = (__CVBuffer *)objc_msgSend_colorBuffer(v313, v320, v321);
        size_t v323 = CVPixelBufferGetHeight(v322);
        id v324 = sub_25B542A8C([RSCVPixelRotate alloc], (float)v323, (float)v319, 90, PixelFormatType);
        float32x2_t v325 = *(void **)(v307 + 8);
        *(void *)(v307 + 8) = v324;

        uint64_t v326 = sub_25B542A8C([RSCVPixelRotate alloc], 256.0, 192.0, 270, 1278226488);
        id v327 = *(void **)(v307 + 16);
        *(void *)(v307 + 16) = v326;

        uint64_t v328 = sub_25B542A8C([RSCVPixelRotate alloc], (float)v319, (float)v323, 180, PixelFormatType);
        float32x2_t v329 = *(void **)(v307 + 24);
        *(void *)(v307 + 24) = v328;

        float32x2_t v330 = sub_25B542A8C([RSCVPixelRotate alloc], 256.0, 192.0, 180, 1278226488);
        uint64_t v331 = *(void **)(v307 + 32);
        *(void *)(v307 + 32) = v330;

        uint64_t v332 = sub_25B542A8C([RSCVPixelRotate alloc], (float)v323, (float)v319, 270, PixelFormatType);
        float32x4_t v333 = *(void **)(v307 + 40);
        *(void *)(v307 + 40) = v332;

        long long v334 = sub_25B542A8C([RSCVPixelRotate alloc], 256.0, 192.0, 90, 1278226488);
        uint64_t v335 = *(void **)(v307 + 48);
        *(void *)(v307 + 48) = v334;

        *(unsigned char *)(v307 + 96) = 1;
      }
      if (*(unsigned char *)(v307 + 97))
      {
        uint64_t v336 = *(void *)(v307 + 88);
        uint64_t v337 = objc_msgSend_deviceOrientation(v313, v311, v312);
        if (v336 != v337)
        {
          BOOL v338 = !MEMORY[0x263F66F20] || MEMORY[0x263F66F30] == 0;
          if (!v338 && MEMORY[0x263F66F40] != 0)
          {
LABEL_403:
            *(void *)(v307 + 88) = objc_msgSend_deviceOrientation(v313, v311, v312);
            id v386 = objc_alloc_init(MEMORY[0x263F66F40]);
            long long v387 = *(void **)(v307 + 64);
            *(void *)(v307 + 64) = v386;

            switch(objc_msgSend_deviceOrientation(v313, v388, v389))
            {
              case 1:
              case 2:
                objc_msgSend_setNetworkModeEnum_(*(void **)(v307 + 64), v390, 2);
                id v466 = objc_alloc(MEMORY[0x263F66F30]);
                uint64_t v465 = objc_msgSend_initWithOutputResolution_(v466, v467, v468, 192.0, 256.0);
                goto LABEL_469;
              case 3:
              case 4:
                objc_msgSend_setNetworkModeEnum_(*(void **)(v307 + 64), v390, 1);
                id v462 = objc_alloc(MEMORY[0x263F66F30]);
                uint64_t v465 = objc_msgSend_initWithOutputResolution_(v462, v463, v464, 256.0, 192.0);
LABEL_469:
                int32x2_t v469 = *(void **)(v307 + 72);
                *(void *)(v307 + 72) = v465;

                *(void *)(v307 + 80) = objc_msgSend_networkModeEnum(*(void **)(v307 + 64), v470, v471);
                objc_msgSend_setEngineType_(*(void **)(v307 + 64), v472, 1);
                objc_msgSend_setRunByE5RT_(*(void **)(v307 + 64), v473, 1);
                LODWORD(v474) = 1053609165;
                objc_msgSend_setUncertaintyThreshold_(*(void **)(v307 + 64), v475, v476, v474);
                objc_msgSend_setModelConfig_(*(void **)(v307 + 64), v477, 0);
                id v478 = objc_alloc(MEMORY[0x263F66F20]);
                LODWORD(v479) = 1053609165;
                uint64_t v481 = objc_msgSend_initWithComputeEngine_andNetworkConfiguration_uncertaintyThreshold_(v478, v480, 1, 0, v479);
                uint64_t v482 = *(void **)(v307 + 56);
                *(void *)(v307 + 56) = v481;

                *(unsigned char *)(v307 + 97) = 1;
                goto LABEL_470;
              default:
                goto LABEL_404;
            }
          }
        }
        BOOL v340 = v336 == v337;

        if (v340)
        {
LABEL_470:
          uint64_t v483 = objc_msgSend_colorBuffer(v313, v341, v342);
          uint64_t v486 = objc_msgSend_deviceOrientation(v313, v484, v485);
          uint64_t v489 = 16;
          uint64_t v490 = 8;
          switch(v486)
          {
            case 1:
              goto LABEL_474;
            case 2:
              uint64_t v489 = 48;
              uint64_t v490 = 40;
              goto LABEL_474;
            case 3:
              int v491 = *(void **)(v307 + 56);
              unint64_t v492 = (__CVBuffer *)objc_msgSend_semantic(*(void **)(v307 + 72), v487, v488);
              IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v492);
              double v496 = (__CVBuffer *)objc_msgSend_confidence(*(void **)(v307 + 72), v494, v495);
              IOSurfaceRef v497 = CVPixelBufferGetIOSurface(v496);
              float32x2_t v500 = (__CVBuffer *)objc_msgSend_uncertainty(*(void **)(v307 + 72), v498, v499);
              IOSurfaceRef v501 = CVPixelBufferGetIOSurface(v500);
              objc_msgSend_runWithInput_output_confidenceOutput_uncertaintyOutput_resampleOutput_networkConfiguration_(v491, v502, v483, IOSurface, v497, v501, 1, 1);
              uint64_t v505 = objc_msgSend_semantic(*(void **)(v307 + 72), v503, v504);
              goto LABEL_476;
            case 4:
              uint64_t v489 = 32;
              uint64_t v490 = 24;
LABEL_474:
              double v506 = (__CVBuffer *)*(id *)(v307 + v490);
              uint64_t v507 = (__CVBuffer *)*(id *)(v307 + v489);
              CVPixelBufferRef v508 = sub_25B542B94(v506, v483);
              float v509 = *(void **)(v307 + 56);
              uint64_t v512 = (__CVBuffer *)objc_msgSend_semantic(*(void **)(v307 + 72), v510, v511);
              IOSurfaceRef v513 = CVPixelBufferGetIOSurface(v512);
              float v516 = (__CVBuffer *)objc_msgSend_confidence(*(void **)(v307 + 72), v514, v515);
              IOSurfaceRef v517 = CVPixelBufferGetIOSurface(v516);
              long long v520 = (__CVBuffer *)objc_msgSend_uncertainty(*(void **)(v307 + 72), v518, v519);
              IOSurfaceRef v521 = CVPixelBufferGetIOSurface(v520);
              objc_msgSend_runWithInput_output_confidenceOutput_uncertaintyOutput_resampleOutput_networkConfiguration_(v509, v522, (uint64_t)v508, v513, v517, v521, 1, *(void *)(v307 + 80));
              uint64_t v525 = objc_msgSend_semantic(*(void **)(v307 + 72), v523, v524);
              uint64_t v505 = (uint64_t)sub_25B542B94(v507, v525);
              break;
            default:
              uint64_t v505 = 0;
LABEL_476:
              double v506 = 0;
              uint64_t v507 = 0;
              break;
          }

          *(void *)(a2 + 208) = v505;
          uint64_t v298 = v294;
          if (!v505) {
            goto LABEL_581;
          }
LABEL_358:
          if (objb <= 1u) {
            CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 208), 1uLL);
          }
          id v299 = v298;
          float v302 = v299;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
          long long v816 = 0u;
          long long v817 = 0u;
          long long v818 = 0u;
          long long v819 = 0u;
          long long v820 = 0u;
          v824 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2708F1C28;
          uint64_t v823 = 0;
          __int16 v825 = 257;
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
          long long v805 = 0u;
          long long v806 = 0u;
          long long v807 = 0u;
          long long v808 = 0u;
          long long v809 = 0u;
          v812 = 0;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2708F1D50;
          size_t v811 = 0;
          __int16 v813 = 257;
          if (a3)
          {
            BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 208));
            *(void *)&long long v801 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 208));
            __str[0].__locale_ = (std::locale::__imp *)CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 208));
            sub_25B4578D0(v791, __str, (uint64_t *)&v801);
            sub_25B496194((uint64_t)v836, v791, (uint64_t)BaseAddress);
            long long v808 = *(_OWORD *)&v836[2].height;
            long long v809 = *(_OWORD *)&v836[2].rowBytes;
            long long v810 = *(_OWORD *)&v836[3].height;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v836[0].height;
            long long v805 = *(_OWORD *)&v836[0].rowBytes;
            long long v806 = *(_OWORD *)&v836[1].height;
            long long v807 = *(_OWORD *)&v836[1].rowBytes;
            size_t rowBytes = v836[3].rowBytes;
            unint64_t v305 = (std::__shared_weak_count *)v837;
            if ((void)v837) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v837 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v306 = v812;
            size_t v811 = rowBytes;
            v812 = v305;
            if (v306) {
              sub_25B404120(v306);
            }
            uint64_t v814 = v838;
            __int16 v813 = WORD4(v837);
            v836[0].data = &unk_2708F1D50;
            if ((void)v837) {
              sub_25B404120((std::__shared_weak_count *)v837);
            }
            CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 208), 1uLL);
            goto LABEL_541;
          }
          id v750 = v299;
          uint64_t v343 = (__CVBuffer *)objc_msgSend_colorBuffer(v299, v300, v301);
          int v344 = CVPixelBufferGetWidth(v343);
          uint64_t v347 = (__CVBuffer *)objc_msgSend_colorBuffer(v302, v345, v346);
          int v350 = (int)(float)((float)(int)CVPixelBufferGetHeight(v347) / *(float *)a2);
          v757 = (std::locale::__imp *)(int)(float)((float)v344 / *(float *)a2);
          v752 = (void *)v350;
          unint64_t v351 = *(id **)(a2 + 224);
          if (!v351) {
            operator new();
          }
          uint64_t v352 = objc_msgSend_colorBuffer(v302, v348, v349);
          (*((void (**)(id *, uint64_t))*v351 + 2))(v351, v352);
          sub_25B45F894((uint64_t)v351, v353, v354);
          id v357 = sub_25B45F820((uint64_t)v351, v355, v356);
          (*((void (**)(id *))*v351 + 3))(v351);
          id v358 = v351[5];
          size_t v361 = objc_msgSend_width(v358, v359, v360);
          float32x2_t v366 = objc_msgSend_height(v358, v362, v363);
          if (*(unsigned char *)(a2 + 369))
          {
            *(void *)&long long v801 = objc_msgSend_height(v358, v364, v365);
            __str[0].__locale_ = (std::locale::__imp *)objc_msgSend_width(v358, v367, v368);
            sub_25B4578D0(v791, &v801, (uint64_t *)__str);
            sub_25B496124((uint64_t)v836, 0, v791);
            long long v369 = *(_OWORD *)&v836[1].rowBytes;
            long long v370 = *(_OWORD *)&v836[2].rowBytes;
            *(_OWORD *)(a2 + 304) = *(_OWORD *)&v836[2].height;
            *(_OWORD *)(a2 + 320) = v370;
            *(_OWORD *)(a2 + 336) = *(_OWORD *)&v836[3].height;
            long long v371 = *(_OWORD *)&v836[0].rowBytes;
            *(_OWORD *)(a2 + 240) = *(_OWORD *)&v836[0].height;
            *(_OWORD *)(a2 + 256) = v371;
            *(_OWORD *)(a2 + 272) = *(_OWORD *)&v836[1].height;
            *(_OWORD *)(a2 + 288) = v369;
            size_t v372 = v836[3].rowBytes;
            uint64_t v373 = v837;
            if ((void)v837) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v837 + 8), 1uLL, memory_order_relaxed);
            }
            long long v374 = *(std::__shared_weak_count **)(a2 + 360);
            *(void *)(a2 + 352) = v372;
            *(void *)(a2 + 360) = v373;
            if (v374) {
              sub_25B404120(v374);
            }
            *(void *)(a2 + 376) = v838;
            *(_WORD *)(a2 + 368) = WORD4(v837);
            v836[0].data = &unk_2708F1D50;
            if ((void)v837) {
              sub_25B404120((std::__shared_weak_count *)v837);
            }
          }
          uint64_t v375 = *(void *)(a2 + 376);
          uint64_t v376 = objc_msgSend_width(v358, v364, v365);
          memset(v836, 0, 24);
          v836[0].size_t rowBytes = v361;
          v836[1].data = v366;
          v836[1].vImagePixelCount height = 1;
          objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(v358, v377, v375, v376, v836, 0);

          long long v792 = 0u;
          long long v793 = 0u;
          *(_OWORD *)v791 = 0u;
          sub_25B4641DC((uint64_t)v794, a2 + 232);
          *(_OWORD *)v791 = *(_OWORD *)&v794[1];
          long long v792 = *(_OWORD *)&v794[3];
          long long v793 = *(_OWORD *)&v794[5];
          if (v799)
          {
            long long v378 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
            long long v379 = sub_25B406B20(v378, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
            sub_25B406B20(v379, (uint64_t)" ", 1);
            long long v380 = (void *)MEMORY[0x263F8C0F8];
            uint64_t v381 = (void *)std::ostream::operator<<();
            sub_25B406B20(v381, (uint64_t)" ", 1);
            sub_25B406B20(v381, (uint64_t)"operator=", 9);
            std::ios_base::getloc((const std::ios_base *)((char *)v381 + *(void *)(*v381 - 24)));
            long long v382 = std::locale::use_facet((const std::locale *)v836, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v382->__vftable[2].~facet_0)(v382, 10);
            std::locale::~locale((std::locale *)v836);
            std::ostream::put();
            std::ostream::flush();
            sub_25B40961C("err", "empty tensor in");
            std::ios_base::getloc((const std::ios_base *)((char *)v380 + *(void *)(*v380 - 24)));
            long long v383 = std::locale::use_facet((const std::locale *)v836, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v383->__vftable[2].~facet_0)(v383, 10);
            std::locale::~locale((std::locale *)v836);
            std::ostream::put();
            std::ostream::flush();
          }
          if (HIBYTE(v825))
          {
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v791;
            long long v816 = v792;
            long long v817 = v793;
            *(void **)&long long v818 = v791[1];
            *((void *)&v818 + 1) = 1;
            uint64_t v821 = (uint64_t)v791[0] * (uint64_t)v791[1];
            uint64_t v822 = 0;
            sub_25B408738((uint64_t)v836, (uint64_t)v791[0] * (uint64_t)v791[1]);
          }
          uint64_t v391 = 0;
          char v392 = 1;
          do
          {
            std::string::size_type v393 = __p.__r_.__value_.__r.__words[v391 + 1];
            float32x4_t v394 = v791[v391];
            if ((v392 & 1) == 0) {
              break;
            }
            char v392 = 0;
            uint64_t v391 = 1;
          }
          while ((void *)v393 == v394);
          if ((void *)v393 == v394)
          {
            if (v798)
            {
              memset(v836, 0, 48);
              uint64_t v395 = v821;
              int8x16_t v396 = v826;
              if ((_BYTE)v825)
              {
                if (v821)
                {
                  float v397 = v800;
                  do
                  {
                    int v398 = *v397++;
                    *v396++ = v398;
                    --v395;
                  }
                  while (v395);
                }
              }
              else if (v821)
              {
                uint64_t v526 = 0;
                long long v527 = v818;
                float32x2_t v528 = v800;
                do
                {
                  uint64_t v529 = 0;
                  v396[(void)v527 * (uint64_t)v836[0].data + *((void *)&v527 + 1) * v836[0].height] = v528[v526];
                  do
                  {
                    vImagePixelCount v530 = *(vImagePixelCount *)((char *)&v836[0].height + v529 * 8) + 1;
                    *(vImagePixelCount *)((char *)&v836[0].height + v529 * 8) = v530;
                    if (v530 != __p.__r_.__value_.__r.__words[v529 + 2]) {
                      break;
                    }
                    *(vImagePixelCount *)((char *)&v836[0].height + v529 * 8) = 0;
                    --v529;
                  }
                  while (v529 != -2);
                  ++v526;
                }
                while (v526 != v395);
              }
            }
            else
            {
              memset(v836, 0, 48);
              uint64_t v425 = v821;
              float v426 = v826;
              if ((_BYTE)v825)
              {
                if (v821)
                {
                  uint64_t v427 = 0;
                  uint64_t v428 = v795;
                  uint64_t v429 = v796;
                  uint64_t v430 = v800;
                  do
                  {
                    uint64_t v431 = 0;
                    v426[v427] = v430[v428 * (uint64_t)v836[0].data + v429 * v836[0].height];
                    do
                    {
                      vImagePixelCount v432 = *(vImagePixelCount *)((char *)&v836[0].height + v431 * 8) + 1;
                      *(vImagePixelCount *)((char *)&v836[0].height + v431 * 8) = v432;
                      if (v432 != __p.__r_.__value_.__r.__words[v431 + 2]) {
                        break;
                      }
                      *(vImagePixelCount *)((char *)&v836[0].height + v431 * 8) = 0;
                      --v431;
                    }
                    while (v431 != -2);
                    ++v427;
                  }
                  while (v427 != v425);
                }
              }
              else if (v821)
              {
                uint64_t v548 = 0;
                long long v549 = v818;
                uint64_t v550 = v795;
                uint64_t v551 = v796;
                uint64_t v552 = v800;
                do
                {
                  uint64_t v553 = 0;
                  v426[(void)v549 * (uint64_t)v836[0].data + *((void *)&v549 + 1) * v836[0].height] = v552[v550 * (uint64_t)v836[0].data + v551 * v836[0].height];
                  do
                  {
                    vImagePixelCount v554 = *(vImagePixelCount *)((char *)&v836[0].height + v553 * 8) + 1;
                    *(vImagePixelCount *)((char *)&v836[0].height + v553 * 8) = v554;
                    if (v554 != __p.__r_.__value_.__r.__words[v553 + 2]) {
                      break;
                    }
                    *(vImagePixelCount *)((char *)&v836[0].height + v553 * 8) = 0;
                    --v553;
                  }
                  while (v553 != -2);
                  ++v548;
                }
                while (v548 != v425);
              }
            }
          }
          else
          {
            if (v798)
            {
              long long v842 = 0uLL;
              long long v843 = 0uLL;
              long long v840 = 0uLL;
              long long v841 = 0uLL;
              long long v838 = 0uLL;
              long long v839 = 0uLL;
              long long v837 = 0uLL;
              memset(v836, 0, sizeof(v836));
              long long v802 = 0uLL;
              long long v803 = 0uLL;
              long long v801 = 0uLL;
              sub_25B40AB84((uint64_t)v836, &__p.__r_.__value_.__r.__words[1], v791, (uint64_t)&v801);
              uint64_t v399 = 0;
              char v400 = 1;
              do
              {
                uint64_t v401 = *((void *)&v801 + v399);
                std::string::size_type v402 = __p.__r_.__value_.__r.__words[v399 + 1];
                if ((v400 & 1) == 0) {
                  break;
                }
                char v400 = 0;
                uint64_t v399 = 1;
              }
              while (v401 == v402);
              if (v401 != v402)
              {
                long long v403 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                uint64_t v404 = sub_25B406B20(v403, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                sub_25B406B20(v404, (uint64_t)" ", 1);
                uint64_t v405 = (void *)MEMORY[0x263F8C0F8];
                double v406 = (void *)std::ostream::operator<<();
                sub_25B406B20(v406, (uint64_t)" ", 1);
                sub_25B406B20(v406, (uint64_t)"broadcast_assign_continue", 25);
                std::ios_base::getloc((const std::ios_base *)((char *)v406 + *(void *)(*v406 - 24)));
                float v407 = std::locale::use_facet(__str, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v407->__vftable[2].~facet_0)(v407, 10);
                std::locale::~locale(__str);
                std::ostream::put();
                std::ostream::flush();
                sub_25B406ED4("err", "broadcast assign issue");
                std::ios_base::getloc((const std::ios_base *)((char *)v405 + *(void *)(*v405 - 24)));
                __int32 v408 = std::locale::use_facet(__str, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v408->__vftable[2].~facet_0)(v408, 10);
                std::locale::~locale(__str);
                std::ostream::put();
                std::ostream::flush();
              }
              long long v845 = 0u;
              long long v846 = 0u;
              *(_OWORD *)&__str[0].__locale_ = 0u;
              long long v848 = 0u;
              long long v849 = 0u;
              long long v847 = 0u;
              uint64_t v409 = v821;
              unint64_t v410 = v826;
              if ((_BYTE)v825)
              {
                if (v821)
                {
                  uint64_t v411 = 0;
                  data = v836[1].data;
                  size_t v413 = v836[0].rowBytes;
                  unint64_t v414 = (uint64_t)((uint64_t)v836[1].data - v836[0].rowBytes) >> 3;
                  if (v414 <= 1) {
                    unint64_t v414 = 1;
                  }
                  __n128 v415 = v800;
                  do
                  {
                    long long v847 = *(_OWORD *)&__str[0].__locale_;
                    if (data != (void *)v413)
                    {
                      uint64_t v416 = (uint64_t *)v413;
                      unint64_t v417 = v414;
                      do
                      {
                        uint64_t v418 = *v416++;
                        *((void *)&v847 + v418) = 0;
                        --v417;
                      }
                      while (v417);
                    }
                    uint64_t v419 = 0;
                    uint64_t v420 = 0;
                    char v421 = 1;
                    do
                    {
                      char v422 = v421;
                      v420 += *((void *)&v841 + v419) * *((void *)&v847 + v419);
                      uint64_t v419 = 1;
                      char v421 = 0;
                    }
                    while ((v422 & 1) != 0);
                    v410[v411] = v415[v420];
                    for (uint64_t m = 1; m != -1; --m)
                    {
                      double v424 = (std::locale::__imp *)((char *)__str[m].__locale_ + 1);
                      __str[m].__locale_ = v424;
                      if (v424 != *(std::locale::__imp **)((char *)&v801 + m * 8)) {
                        break;
                      }
                      __str[m].__locale_ = 0;
                    }
                    ++v411;
                  }
                  while (v411 != v409);
                }
              }
              else if (v821)
              {
                uint64_t v531 = 0;
                uint64_t v532 = v836[1].data;
                size_t v533 = v836[0].rowBytes;
                unint64_t v534 = (uint64_t)((uint64_t)v836[1].data - v836[0].rowBytes) >> 3;
                if (v534 <= 1) {
                  unint64_t v534 = 1;
                }
                long long v535 = v818;
                v536 = v800;
                do
                {
                  locale = __str[0].__locale_;
                  uint64_t v538 = __str[1].__locale_;
                  long long v847 = *(_OWORD *)&__str[0].__locale_;
                  if (v532 != (void *)v533)
                  {
                    int v539 = (uint64_t *)v533;
                    unint64_t v540 = v534;
                    do
                    {
                      uint64_t v541 = *v539++;
                      *((void *)&v847 + v541) = 0;
                      --v540;
                    }
                    while (v540);
                  }
                  uint64_t v542 = 0;
                  uint64_t v543 = 0;
                  char v544 = 1;
                  do
                  {
                    char v545 = v544;
                    v543 += *((void *)&v841 + v542) * *((void *)&v847 + v542);
                    uint64_t v542 = 1;
                    char v544 = 0;
                  }
                  while ((v545 & 1) != 0);
                  v410[(void)locale * (void)v535 + (void)v538 * *((void *)&v535 + 1)] = v536[v543];
                  for (uint64_t n = 1; n != -1; --n)
                  {
                    long long v547 = (std::locale::__imp *)((char *)__str[n].__locale_ + 1);
                    __str[n].__locale_ = v547;
                    if (v547 != *(std::locale::__imp **)((char *)&v801 + n * 8)) {
                      break;
                    }
                    __str[n].__locale_ = 0;
                  }
                  ++v531;
                }
                while (v531 != v409);
              }
            }
            else
            {
              long long v842 = 0uLL;
              long long v843 = 0uLL;
              long long v840 = 0uLL;
              long long v841 = 0uLL;
              long long v838 = 0uLL;
              long long v839 = 0uLL;
              long long v837 = 0uLL;
              memset(v836, 0, sizeof(v836));
              long long v802 = 0uLL;
              long long v803 = 0uLL;
              long long v801 = 0uLL;
              sub_25B40AB84((uint64_t)v836, &__p.__r_.__value_.__r.__words[1], v791, (uint64_t)&v801);
              uint64_t v433 = 0;
              char v434 = 1;
              do
              {
                uint64_t v435 = *((void *)&v801 + v433);
                std::string::size_type v436 = __p.__r_.__value_.__r.__words[v433 + 1];
                if ((v434 & 1) == 0) {
                  break;
                }
                char v434 = 0;
                uint64_t v433 = 1;
              }
              while (v435 == v436);
              if (v435 != v436)
              {
                uint64_t v437 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
                uint64_t v438 = sub_25B406B20(v437, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
                sub_25B406B20(v438, (uint64_t)" ", 1);
                v439 = (void *)MEMORY[0x263F8C0F8];
                long long v440 = (void *)std::ostream::operator<<();
                sub_25B406B20(v440, (uint64_t)" ", 1);
                sub_25B406B20(v440, (uint64_t)"broadcast_assign_stride", 23);
                std::ios_base::getloc((const std::ios_base *)((char *)v440 + *(void *)(*v440 - 24)));
                int32x2_t v441 = std::locale::use_facet(__str, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v441->__vftable[2].~facet_0)(v441, 10);
                std::locale::~locale(__str);
                std::ostream::put();
                std::ostream::flush();
                sub_25B406ED4("err", "broadcast assign issue");
                std::ios_base::getloc((const std::ios_base *)((char *)v439 + *(void *)(*v439 - 24)));
                float32x2_t v442 = std::locale::use_facet(__str, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v442->__vftable[2].~facet_0)(v442, 10);
                std::locale::~locale(__str);
                std::ostream::put();
                std::ostream::flush();
              }
              long long v845 = 0u;
              long long v846 = 0u;
              *(_OWORD *)&__str[0].__locale_ = 0u;
              long long v848 = 0u;
              long long v849 = 0u;
              long long v847 = 0u;
              uint64_t v443 = v821;
              uint64_t v444 = v826;
              if ((_BYTE)v825)
              {
                if (v821)
                {
                  uint64_t v445 = 0;
                  int v446 = v836[1].data;
                  size_t v447 = v836[0].rowBytes;
                  unint64_t v448 = (uint64_t)((uint64_t)v836[1].data - v836[0].rowBytes) >> 3;
                  if (v448 <= 1) {
                    unint64_t v448 = 1;
                  }
                  int v449 = v798;
                  uint64_t v450 = v795;
                  uint64_t v451 = v796;
                  float32x2_t v452 = v800;
                  do
                  {
                    long long v847 = *(_OWORD *)&__str[0].__locale_;
                    if (v446 != (void *)v447)
                    {
                      float32x2_t v453 = (uint64_t *)v447;
                      unint64_t v454 = v448;
                      do
                      {
                        uint64_t v455 = *v453++;
                        *((void *)&v847 + v455) = 0;
                        --v454;
                      }
                      while (v454);
                    }
                    uint64_t v456 = 0;
                    uint64_t v457 = 0;
                    char v458 = 1;
                    do
                    {
                      char v459 = v458;
                      v457 += *((void *)&v841 + v456) * *((void *)&v847 + v456);
                      uint64_t v456 = 1;
                      char v458 = 0;
                    }
                    while ((v459 & 1) != 0);
                    if (!v449) {
                      uint64_t v457 = v847 * v450 + *((void *)&v847 + 1) * v451;
                    }
                    v444[v445] = v452[v457];
                    for (iunint64_t i = 1; ii != -1; --ii)
                    {
                      float v461 = (std::locale::__imp *)((char *)__str[ii].__locale_ + 1);
                      __str[ii].__locale_ = v461;
                      if (v461 != *(std::locale::__imp **)((char *)&v801 + ii * 8)) {
                        break;
                      }
                      __str[ii].__locale_ = 0;
                    }
                    ++v445;
                  }
                  while (v445 != v443);
                }
              }
              else if (v821)
              {
                uint64_t v555 = 0;
                uint64_t v556 = v836[1].data;
                size_t v557 = v836[0].rowBytes;
                unint64_t v558 = (uint64_t)((uint64_t)v836[1].data - v836[0].rowBytes) >> 3;
                if (v558 <= 1) {
                  unint64_t v558 = 1;
                }
                long long v559 = v818;
                int v560 = v798;
                uint64_t v561 = v795;
                uint64_t v562 = v796;
                int v563 = v800;
                do
                {
                  uint64_t v564 = __str[0].__locale_;
                  float v565 = __str[1].__locale_;
                  long long v847 = *(_OWORD *)&__str[0].__locale_;
                  if (v556 != (void *)v557)
                  {
                    v566 = (uint64_t *)v557;
                    unint64_t v567 = v558;
                    do
                    {
                      uint64_t v568 = *v566++;
                      *((void *)&v847 + v568) = 0;
                      --v567;
                    }
                    while (v567);
                  }
                  uint64_t v569 = 0;
                  uint64_t v570 = 0;
                  char v571 = 1;
                  do
                  {
                    char v572 = v571;
                    v570 += *((void *)&v841 + v569) * *((void *)&v847 + v569);
                    uint64_t v569 = 1;
                    char v571 = 0;
                  }
                  while ((v572 & 1) != 0);
                  if (!v560) {
                    uint64_t v570 = v847 * v561 + *((void *)&v847 + 1) * v562;
                  }
                  v444[(void)v564 * (void)v559 + (void)v565 * *((void *)&v559 + 1)] = v563[v570];
                  for (juint64_t j = 1; jj != -1; --jj)
                  {
                    uint64_t v574 = (std::locale::__imp *)((char *)__str[jj].__locale_ + 1);
                    __str[jj].__locale_ = v574;
                    if (v574 != *(std::locale::__imp **)((char *)&v801 + jj * 8)) {
                      break;
                    }
                    __str[jj].__locale_ = 0;
                  }
                  ++v555;
                }
                while (v555 != v443);
              }
            }
            sub_25B3F9500((uint64_t)v836);
          }
          v794[0] = &unk_2708F1D50;
          if (v797) {
            sub_25B404120(v797);
          }
          float32x4_t v575 = *(__CVBuffer **)(a2 + 208);
          CVPixelBufferLockBaseAddress(v575, 1uLL);
          vImagePixelCount v576 = CVPixelBufferGetWidth(v575);
          vImagePixelCount v577 = CVPixelBufferGetHeight(v575);
          float32x4_t v578 = CVPixelBufferGetBaseAddress(v575);
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v575);
          float32x4_t v580 = (const vImage_Buffer *)(a2 + 176);
          v836[0].data = v578;
          v836[0].vImagePixelCount height = v577;
          v836[0].vImagePixelCount width = v576;
          v836[0].size_t rowBytes = BytesPerRow;
          if (*(std::locale::__imp **)(a2 + 192) == v757)
          {
            v581 = *(void **)(a2 + 176);
            if (*(void **)(a2 + 184) == v752 && v581)
            {
LABEL_533:
              vImageScale_Planar8(v836, v580, 0, 0);
              CVPixelBufferUnlockBaseAddress(v575, 1uLL);
LABEL_534:
              *(void *)&long long v801 = v752;
              __str[0].__locale_ = v757;
              sub_25B4578D0(v791, &v801, (uint64_t *)__str);
              sub_25B496194((uint64_t)v836, v791, (uint64_t)v580->data);
              long long v808 = *(_OWORD *)&v836[2].height;
              long long v809 = *(_OWORD *)&v836[2].rowBytes;
              long long v810 = *(_OWORD *)&v836[3].height;
              *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v836[0].height;
              long long v805 = *(_OWORD *)&v836[0].rowBytes;
              long long v806 = *(_OWORD *)&v836[1].height;
              long long v807 = *(_OWORD *)&v836[1].rowBytes;
              size_t v582 = v836[3].rowBytes;
              id v583 = (std::__shared_weak_count *)v837;
              if ((void)v837) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v837 + 8), 1uLL, memory_order_relaxed);
              }
              int32x2_t v584 = v812;
              size_t v811 = v582;
              v812 = v583;
              if (v584) {
                sub_25B404120(v584);
              }
              uint64_t v814 = v838;
              __int16 v813 = WORD4(v837);
              v836[0].data = &unk_2708F1D50;
              if ((void)v837) {
                sub_25B404120((std::__shared_weak_count *)v837);
              }

              float v302 = v750;
LABEL_541:
              sub_25B404048((uint64_t)v830, (uint64_t)&__p);
              sub_25B4641DC((uint64_t)&v832, (uint64_t)&__dst);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2708F1D50;
              if (v812) {
                sub_25B404120(v812);
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2708F1C28;
              if (v824) {
                sub_25B404120(v824);
              }

              if (!a3)
              {
                sub_25B508034((uint64_t)&v777);
                sub_25B4940C0(v781);
                unsigned __int8 v598 = v778;
                v780 = v777;
                v781 = v778;
                uint64_t v782 = v779;
                if (v779)
                {
                  v778[2] = &v781;
                  v777 = &v778;
                  v778 = 0;
                  uint64_t v779 = 0;
                  unsigned __int8 v598 = 0;
                }
                else
                {
                  v780 = &v781;
                }
                sub_25B4940C0(v598);
                if (objb <= 1u) {
                  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a2 + 208), 1uLL);
                }
                v832 = &unk_2708F1D50;
                if (v834) {
                  sub_25B404120(v834);
                }
                v830[0].columns[0].i64[0] = (uint64_t)&unk_2708F1C28;
                if (v831) {
                  sub_25B404120(v831);
                }
                goto LABEL_581;
              }
              int32x2_t v585 = v835;
              size_t v586 = *((void *)&v833 + 1) * v833;
              if (*((void *)&v833 + 1) * (void)v833)
              {
                unint64_t v587 = 0;
                uint64_t v588 = *((void *)&v833 + 1) * v833;
                v589 = v835;
                do
                {
                  int v590 = *v589++;
                  if (v590 == 31) {
                    ++v587;
                  }
                  --v588;
                }
                while (v588);
                uint64_t v829 = 0;
                v828 = 0;
                v827 = (uint64_t **)&v828;
                if (v587 >= 0x2711)
                {
                  LOWORD(v836[0].data) = 7943;
                  sub_25B51F3D0((uint64_t)&v827, v836, (unsigned char *)&v836[0].data + 2);
                  goto LABEL_556;
                }
              }
              else
              {
                uint64_t v829 = 0;
                v828 = 0;
                v827 = (uint64_t **)&v828;
              }
              LOWORD(v836[0].data) = 1798;
              BYTE2(v836[0].data) = 31;
              sub_25B51F3D0((uint64_t)&v827, v836, (unsigned char *)&v836[0].data + 3);
LABEL_556:
              if (!v586)
              {
                uint64_t v597 = 0;
LABEL_571:
                sub_25B496194((uint64_t)v791, &v833, v597);
                sub_25B5070A4((uint64_t)&__p, (uint64_t)v791);
              }
              if ((v586 & 0x8000000000000000) != 0) {
                sub_25B3FBC4C();
              }
              float v591 = operator new(v586);
              bzero(v591, v586);
              uint64_t v592 = 0;
              uint64_t v593 = v586;
              if (v586 <= 1) {
                uint64_t v593 = 1;
              }
LABEL_560:
              long long v594 = v828;
              if (!v828) {
                goto LABEL_568;
              }
              unsigned int v595 = v585[v592];
              while (1)
              {
                unsigned int v596 = *((unsigned __int8 *)v594 + 25);
                if (v595 >= v596)
                {
                  if (v596 >= v595)
                  {
                    LOBYTE(v594) = -1;
LABEL_568:
                    *((unsigned char *)v591 + v592++) = (_BYTE)v594;
                    if (v592 == v593)
                    {
                      uint64_t v597 = (uint64_t)v591;
                      goto LABEL_571;
                    }
                    goto LABEL_560;
                  }
                  ++v594;
                }
                long long v594 = (uint64_t **)*v594;
                if (!v594) {
                  goto LABEL_568;
                }
              }
            }
          }
          else
          {
            v581 = v580->data;
          }
          if (v581) {
            free(v581);
          }
          if (MEMORY[0x261164B50](v580, v752, v757, 8, 0)) {
            goto LABEL_534;
          }
          goto LABEL_533;
        }
      }
      else
      {
        if (MEMORY[0x263F66F20]) {
          BOOL v384 = MEMORY[0x263F66F30] == 0;
        }
        else {
          BOOL v384 = 1;
        }
        if (!v384 && MEMORY[0x263F66F40] != 0) {
          goto LABEL_403;
        }
LABEL_404:
      }
    }

    *(void *)(a2 + 208) = 0;
    goto LABEL_581;
  }
LABEL_315:
  if (v246 != (uint64_t *)v784)
  {
    uint64_t v282 = *(void *)(a2 + 120);
    do
    {
      if (*((unsigned char *)v246 + 488) || *((unsigned char *)v246 + 512) || *((unsigned char *)v246 + 560) || *((unsigned char *)v246 + 584))
      {
        float32x2_t v283 = vsub_f32((float32x2_t)v246[33], (float32x2_t)v246[34]);
        if (sqrtf(vaddv_f32(vmul_f32(v283, v283))) > *(float *)(v282 + 72)
          && (*((unsigned char *)v246 + 488) && *((float *)v246 + 177) > *(float *)(v282 + 76)
           || *((unsigned char *)v246 + 512) && *((float *)v246 + 178) > *(float *)(v282 + 76)
           || a3 == 1 && *((unsigned char *)v246 + 560)
           || *((unsigned char *)v246 + 584)))
        {
          goto LABEL_354;
        }
      }
      __n128 v284 = (uint64_t *)v246[1];
      if (v284)
      {
        do
        {
          float v285 = v284;
          __n128 v284 = (uint64_t *)*v284;
        }
        while (v284);
      }
      else
      {
        do
        {
          float v285 = (uint64_t *)v246[2];
          BOOL v338 = *v285 == (void)v246;
          float v246 = v285;
        }
        while (!v338);
      }
      float v246 = v285;
    }
    while (v285 != (uint64_t *)v784);
  }
LABEL_581:
  if (objb > 1u)
  {
LABEL_612:
    if (a3) {
      goto LABEL_613;
    }
    goto LABEL_728;
  }
  unint64_t v599 = *(uint64_t **)(a2 + 160);
  if (v599)
  {
    float32x4_t v600 = (uint64_t **)(a2 + 152);
    while (*((unsigned char *)v599 + 32))
    {
      unint64_t v599 = (uint64_t *)*v599;
      if (!v599) {
        goto LABEL_612;
      }
    }
    long long v601 = v780;
    if (v780 != &v781)
    {
      do
      {
        if (*((char *)v601 + 95) < 0)
        {
          sub_25B4002F4(v836, v601[9], (unint64_t)v601[10]);
        }
        else
        {
          *(_OWORD *)&v836[0].data = *(_OWORD *)(v601 + 9);
          v836[0].vImagePixelCount width = (vImagePixelCount)v601[11];
        }
        unsigned int v602 = *((_DWORD *)v601 + 24);
        float32x2_t objc = (float32x2_t)v601[14];
        v830[0].columns[0].i8[0] = 0;
        long long v603 = sub_25B49566C(v600, 0, v830);
        long long v604 = (float *)sub_25B495914((uint64_t)(v603 + 5), v836);
        v830[0].columns[0].i8[0] = 0;
        if (sub_25B49566C(v600, 0, v830) + 6 != (uint64_t **)v604)
        {
          if (v602 > 1)
          {
            float v613 = v604[65];
            if (v602 == 2 && (float v614 = v604[64], objc.f32[0] <= v614))
            {
              *((float *)v601 + 28) = v614;
            }
            else if (v602 == 3 && objc.f32[0] >= v613)
            {
              *((float *)v601 + 28) = v613;
            }
          }
          else
          {
            float32x2_t v605 = *(float32x2_t *)(v604 + 66);
            float32x2_t v606 = *(float32x2_t *)(v604 + 68);
            float32x2_t v607 = vsub_f32(objc, v605);
            int32x2_t v608 = (int32x2_t)vmul_f32(v607, v607);
            float32x2_t v609 = vsub_f32(objc, v606);
            int32x2_t v610 = (int32x2_t)vmul_f32(v609, v609);
            float32x2_t v611 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v608, v610), (float32x2_t)vzip2_s32(v608, v610)));
            if (v611.f32[0] >= v611.f32[1])
            {
              float32x2_t v615 = vsub_f32(v606, v605);
              if (v611.f32[0] > sqrtf(vaddv_f32(vmul_f32(v615, v615)))) {
                v601[14] = (void *)v606;
              }
            }
            else
            {
              float32x2_t v612 = vsub_f32(v605, v606);
              if (v611.f32[1] > sqrtf(vaddv_f32(vmul_f32(v612, v612)))) {
                v601[14] = (void *)v605;
              }
            }
          }
        }
        if (SHIBYTE(v836[0].width) < 0) {
          operator delete(v836[0].data);
        }
        long long v616 = v601[1];
        if (v616)
        {
          do
          {
            v617 = (void **)v616;
            long long v616 = (void *)*v616;
          }
          while (v616);
        }
        else
        {
          do
          {
            v617 = (void **)v601[2];
            BOOL v338 = *v617 == v601;
            long long v601 = v617;
          }
          while (!v338);
        }
        long long v601 = v617;
      }
      while (v617 != &v781);
    }
    goto LABEL_612;
  }
LABEL_613:
  __p.__r_.__value_.__s.__data_[0] = a3;
  long long v618 = sub_25B49566C((uint64_t **)(a2 + 128), a3, &__p);
  uint64_t v619 = (uint64_t)(v618 + 5);
  long long v620 = v618[5];
  v830[0].columns[1].i64[0] = 0;
  v830[0].columns[0].i64[1] = 0;
  v830[0].columns[0].i64[0] = (uint64_t)&v830[0].columns[0].i64[1];
  float32x4_t v621 = v618 + 6;
  if (v620 != (uint64_t *)(v618 + 6))
  {
    do
    {
      if (*((char *)v620 + 71) < 0)
      {
        sub_25B4002F4(v836, (void *)v620[6], v620[7]);
      }
      else
      {
        *(_OWORD *)&v836[0].data = *((_OWORD *)v620 + 3);
        v836[0].vImagePixelCount width = v620[8];
      }
      LODWORD(v836[0].rowBytes) = *((_DWORD *)v620 + 24);
      v791[0] = v836;
      std::string v622 = sub_25B495C44((uint64_t)v830, (uint64_t)v836, (long long **)v791);
      *((void *)v622 + 8) = v620[5];
      std::string::operator=((std::string *)v622 + 3, (const std::string *)v620 + 2);
      std::string::operator=((std::string *)v622 + 4, (const std::string *)v620 + 3);
      long long v623 = *((_OWORD *)v620 + 6);
      *((void *)v622 + 17) = v620[14];
      *(_OWORD *)(v622 + 120) = v623;
      if (SHIBYTE(v836[0].width) < 0) {
        operator delete(v836[0].data);
      }
      long long v624 = (uint64_t *)v620[1];
      if (v624)
      {
        do
        {
          uint64_t v625 = v624;
          long long v624 = (uint64_t *)*v624;
        }
        while (v624);
      }
      else
      {
        do
        {
          uint64_t v625 = (uint64_t *)v620[2];
          BOOL v338 = *v625 == (void)v620;
          long long v620 = v625;
        }
        while (!v338);
      }
      long long v620 = v625;
    }
    while (v625 != (uint64_t *)v621);
  }
  v766 = v618;
  uint64_t v626 = v780;
  if (v780 == &v781) {
    goto LABEL_673;
  }
  while (2)
  {
    float v628 = *((float *)v626 + 26);
    float v627 = *((float *)v626 + 27);
    float v629 = *((float *)v626 + 25);
    if (*((char *)v626 + 71) < 0)
    {
      sub_25B4002F4(v836, v626[6], (unint64_t)v626[7]);
    }
    else
    {
      *(_OWORD *)&v836[0].data = *((_OWORD *)v626 + 3);
      v836[0].vImagePixelCount width = (vImagePixelCount)v626[8];
    }
    long long v630 = (long long *)(v626 + 12);
    int v631 = *((_DWORD *)v626 + 24);
    LODWORD(v836[0].rowBytes) = v631;
    uint64_t v632 = v830[0].columns[0].i64[1];
    if (!v830[0].columns[0].i64[1]) {
      goto LABEL_644;
    }
    while (2)
    {
      char v633 = sub_25B4954C0(v836, (void *)(v632 + 32));
      if (v633 || ((v634 = *(_DWORD *)(v632 + 56), v631 < v634) ? (char v633 = -1) : (char v633 = 1), v631 != v634))
      {
        if (v633 < 0)
        {
LABEL_643:
          uint64_t v632 = *(void *)v632;
          if (!v632) {
            goto LABEL_644;
          }
          continue;
        }
      }
      break;
    }
    char v635 = sub_25B4954C0((void *)(v632 + 32), v836);
    if (v635 || ((v636 = *(_DWORD *)(v632 + 56), v636 < v631) ? (char v635 = -1) : (char v635 = 1), v636 != v631))
    {
      if (v635 < 0)
      {
        v632 += 8;
        goto LABEL_643;
      }
    }
    v641 = (float *)*sub_25B495E18((uint64_t)v830, v791, (uint64_t)v836);
    if (!v641) {
      sub_25B3FC090("map::at:  key not found");
    }
    float v642 = v641[33];
    float v643 = v641[31];
    float v644 = v627 - v642;
    if ((float)(v629 - v643) > 0.05 || v644 > 5.0 || (float)(v628 - v641[32]) > 100.0)
    {
      v791[0] = v836;
      uint64_t v647 = sub_25B495C44((uint64_t)v830, (uint64_t)v836, (long long **)v791);
      *((void *)v647 + 8) = v626[5];
      std::string::operator=((std::string *)v647 + 3, (const std::string *)v626 + 2);
      std::string::operator=((std::string *)v647 + 4, (const std::string *)v626 + 3);
      long long v648 = *v630;
      *((void *)v647 + 17) = v626[14];
      *(_OWORD *)(v647 + 120) = v648;
    }
    float v649 = fabsf(v644);
    if (fabsf(v629 - v643) < 0.05 && v649 > 5.0)
    {
      v791[0] = v836;
      v651 = sub_25B495C44((uint64_t)v830, (uint64_t)v836, (long long **)v791);
      *((void *)v651 + 8) = v626[5];
      std::string::operator=((std::string *)v651 + 3, (const std::string *)v626 + 2);
      std::string::operator=((std::string *)v651 + 4, (const std::string *)v626 + 3);
      long long v652 = *v630;
      *((void *)v651 + 17) = v626[14];
      *(_OWORD *)(v651 + 120) = v652;
    }
    if (v627 > 70.0 && v642 > 70.0 && v629 > 0.9 && v643 > 0.9)
    {
LABEL_644:
      v791[0] = v836;
      v637 = sub_25B495C44((uint64_t)v830, (uint64_t)v836, (long long **)v791);
      *((void *)v637 + 8) = v626[5];
      std::string::operator=((std::string *)v637 + 3, (const std::string *)v626 + 2);
      std::string::operator=((std::string *)v637 + 4, (const std::string *)v626 + 3);
      long long v638 = *v630;
      *((void *)v637 + 17) = v626[14];
      *(_OWORD *)(v637 + 120) = v638;
    }
    if (SHIBYTE(v836[0].width) < 0) {
      operator delete(v836[0].data);
    }
    v639 = v626[1];
    if (v639)
    {
      do
      {
        v640 = (void **)v639;
        v639 = (void *)*v639;
      }
      while (v639);
    }
    else
    {
      do
      {
        v640 = (void **)v626[2];
        BOOL v338 = *v640 == v626;
        uint64_t v626 = v640;
      }
      while (!v338);
    }
    uint64_t v626 = v640;
    if (v640 != &v781) {
      continue;
    }
    break;
  }
LABEL_673:
  sub_25B4940C0(v766[6]);
  v766[6] = 0;
  v766[7] = 0;
  v766[5] = (uint64_t *)v621;
  uint64_t v653 = v830[0].columns[0].i64[0];
  if ((unsigned __int32 *)v830[0].columns[0].i64[0] != &v830[0].columns[0].u32[2])
  {
    uint64_t v654 = 0;
    do
    {
      v791[0] = (void *)(v654 | ((unint64_t)*(unsigned int *)(v653 + 120) << 32));
      v836[0].data = v791;
      v655 = sub_25B4957D4(v619, v654, SHIDWORD(v791[0]), v836);
      *((void *)v655 + 5) = *(void *)(v653 + 64);
      std::string::operator=((std::string *)v655 + 2, (const std::string *)(v653 + 72));
      std::string::operator=((std::string *)v655 + 3, (const std::string *)(v653 + 96));
      long long v656 = *(_OWORD *)(v653 + 120);
      *((void *)v655 + 14) = *(void *)(v653 + 136);
      *((_OWORD *)v655 + 6) = v656;
      v657 = *(simd_float4x4 **)(v653 + 8);
      if (v657)
      {
        do
        {
          v658 = v657;
          v657 = (simd_float4x4 *)v657->columns[0].i64[0];
        }
        while (v657);
      }
      else
      {
        do
        {
          v658 = *(simd_float4x4 **)(v653 + 16);
          BOOL v338 = v658->columns[0].i64[0] == v653;
          uint64_t v653 = (uint64_t)v658;
        }
        while (!v338);
      }
      ++v654;
      uint64_t v653 = (uint64_t)v658;
    }
    while (v658 != (simd_float4x4 *)&v830[0].columns[0].u32[2]);
  }
  sub_25B495D5C((void *)v830[0].columns[0].i64[1]);
LABEL_682:
  unsigned __int8 v659 = v790;
  v660 = sub_25B49566C((uint64_t **)(a2 + 128), v790, &v790);
  if (v660[7])
  {
    v661 = v660[5];
    v662 = v660 + 6;
    if (v661 != (uint64_t *)(v660 + 6))
    {
      do
      {
        if (sub_25B495728(v784[0], v661 + 6))
        {
          v836[0].data = v661 + 6;
          v663 = sub_25B494B20(&v783, v661 + 6, (long long **)v836);
          int v665 = *((_DWORD *)v661 + 24);
          *(void *)&long long v666 = v661[14];
          float v667 = *((float *)v663 + 65);
          if (v665 == 1) {
            double v668 = *((double *)v661 + 14);
          }
          else {
            double v668 = *((double *)v663 + 34);
          }
          if (v665 == 1) {
            float v669 = *((float *)v663 + 65);
          }
          else {
            LODWORD(v669) = v661[14];
          }
          if (v665 == 2)
          {
            double v668 = *((double *)v663 + 34);
            LODWORD(v670) = v661[14];
          }
          else
          {
            float v670 = *((float *)v663 + 64);
          }
          if (v665 == 2) {
            float v669 = *((float *)v663 + 65);
          }
          if (v665)
          {
            *(void *)&long long v666 = *((void *)v663 + 33);
            *(double *)&long long v664 = v668;
          }
          else
          {
            *(void *)&long long v664 = *((void *)v663 + 34);
          }
          if (v665) {
            float v671 = v670;
          }
          else {
            float v671 = *((float *)v663 + 64);
          }
          long long v672 = v666;
          *((float *)&v672 + 2) = v671;
          if (v665) {
            float v667 = v669;
          }
          long long v673 = v664;
          *((float *)&v673 + 2) = v671;
          *(_OWORD *)&v836[0].data = v672;
          *(_OWORD *)&v836[0].vImagePixelCount width = v673;
          *((float *)&v664 + 2) = v667;
          *((float *)&v666 + 2) = v667;
          *(_OWORD *)&v836[1].data = v664;
          *(_OWORD *)&v836[1].vImagePixelCount width = v666;
          sub_25B520618((uint64_t)(v663 + 64), (long long *)v836);
          if (!a3)
          {
            v836[0].data = v661 + 6;
            v676 = (vImagePixelCount *)sub_25B494B20(&v783, v661 + 6, (long long **)v836);
            vImagePixelCount v677 = v676[74];
            v678 = *(_DWORD **)v677;
            v679 = *(_DWORD **)(v677 + 8);
            if (*(_DWORD **)v677 != v679)
            {
              do
              {
                if (*v678 == 1)
                {
                  v836[0].data = v678 + 2;
                  v684 = sub_25B494B20(&v783, (void *)v678 + 1, (long long **)v836);
                  long long v685 = *((_OWORD *)v684 + 6);
                  *(_OWORD *)&v836[0].data = *((_OWORD *)v684 + 5);
                  *(_OWORD *)&v836[0].vImagePixelCount width = v685;
                  long long v686 = *((_OWORD *)v684 + 8);
                  *(_OWORD *)&v836[1].data = *((_OWORD *)v684 + 7);
                  *(_OWORD *)&v836[1].vImagePixelCount width = v686;
                  v836[0].vImagePixelCount width = v676[33];
                  v836[1].data = (void *)v836[0].width;
                  v791[0] = v678 + 2;
                  v687 = sub_25B494B20(&v783, (void *)v678 + 1, (long long **)v791);
                  sub_25B520618((uint64_t)(v687 + 64), (long long *)v836);
                }
                else if (!*v678)
                {
                  v836[0].data = v678 + 2;
                  v680 = sub_25B494B20(&v783, (void *)v678 + 1, (long long **)v836);
                  long long v681 = *((_OWORD *)v680 + 6);
                  *(_OWORD *)&v836[0].data = *((_OWORD *)v680 + 5);
                  *(_OWORD *)&v836[0].vImagePixelCount width = v681;
                  long long v682 = *((_OWORD *)v680 + 8);
                  *(_OWORD *)&v836[1].data = *((_OWORD *)v680 + 7);
                  *(_OWORD *)&v836[1].vImagePixelCount width = v682;
                  v836[0].data = (void *)v676[33];
                  v836[1].vImagePixelCount width = (vImagePixelCount)v836[0].data;
                  v791[0] = v678 + 2;
                  v683 = sub_25B494B20(&v783, (void *)v678 + 1, (long long **)v791);
                  sub_25B520618((uint64_t)(v683 + 64), (long long *)v836);
                }
                v678 += 8;
              }
              while (v678 != v679);
              vImagePixelCount v677 = v676[74];
            }
            v688 = *(_DWORD **)(v677 + 24);
            v689 = *(_DWORD **)(v677 + 32);
            while (v688 != v689)
            {
              if (*v688 == 1)
              {
                v836[0].data = v688 + 2;
                v694 = sub_25B494B20(&v783, (void *)v688 + 1, (long long **)v836);
                long long v695 = *((_OWORD *)v694 + 6);
                *(_OWORD *)&v836[0].data = *((_OWORD *)v694 + 5);
                *(_OWORD *)&v836[0].vImagePixelCount width = v695;
                long long v696 = *((_OWORD *)v694 + 8);
                *(_OWORD *)&v836[1].data = *((_OWORD *)v694 + 7);
                *(_OWORD *)&v836[1].vImagePixelCount width = v696;
                v836[0].vImagePixelCount width = v676[34];
                v836[1].data = (void *)v836[0].width;
                v791[0] = v688 + 2;
                v697 = sub_25B494B20(&v783, (void *)v688 + 1, (long long **)v791);
                sub_25B520618((uint64_t)(v697 + 64), (long long *)v836);
              }
              else if (!*v688)
              {
                v836[0].data = v688 + 2;
                v690 = sub_25B494B20(&v783, (void *)v688 + 1, (long long **)v836);
                long long v691 = *((_OWORD *)v690 + 6);
                *(_OWORD *)&v836[0].data = *((_OWORD *)v690 + 5);
                *(_OWORD *)&v836[0].vImagePixelCount width = v691;
                long long v692 = *((_OWORD *)v690 + 8);
                *(_OWORD *)&v836[1].data = *((_OWORD *)v690 + 7);
                *(_OWORD *)&v836[1].vImagePixelCount width = v692;
                v836[0].data = (void *)v676[34];
                v836[1].vImagePixelCount width = (vImagePixelCount)v836[0].data;
                v791[0] = v688 + 2;
                v693 = sub_25B494B20(&v783, (void *)v688 + 1, (long long **)v791);
                sub_25B520618((uint64_t)(v693 + 64), (long long *)v836);
              }
              v688 += 8;
            }
          }
        }
        v674 = (uint64_t *)v661[1];
        if (v674)
        {
          do
          {
            v675 = v674;
            v674 = (uint64_t *)*v674;
          }
          while (v674);
        }
        else
        {
          do
          {
            v675 = (uint64_t *)v661[2];
            BOOL v338 = *v675 == (void)v661;
            v661 = v675;
          }
          while (!v338);
        }
        v661 = v675;
      }
      while (v675 != (uint64_t *)v662);
    }
  }
  sub_25B495F44((uint64_t)v830, &v783);
  v698 = sub_25B49566C((uint64_t **)(a2 + 152), v659, &v790);
  v699 = (uint64_t *)(v698 + 6);
  sub_25B49416C(v698[6]);
  v700 = (uint64_t *)v830[0].columns[0].i64[1];
  v698[5] = (uint64_t *)v830[0].columns[0].i64[0];
  v698[6] = v700;
  uint64_t v701 = v830[0].columns[1].i64[0];
  v698[7] = (uint64_t *)v830[0].columns[1].i64[0];
  if (v701)
  {
    v700[2] = (uint64_t)v699;
    v830[0].columns[0].i64[0] = (uint64_t)&v830[0].columns[0].i64[1];
    v830[0].columns[0].i64[1] = 0;
    v830[0].columns[1].i64[0] = 0;
    v700 = 0;
  }
  else
  {
    v698[5] = v699;
  }
  sub_25B49416C(v700);
  v704 = sub_25B49566C((uint64_t **)(a2 + 152), v659, &v790);
  sub_25B495F44(a1, v704 + 5);
  sub_25B4940C0(v781);
  sub_25B49416C(v784[0]);
}

void sub_25B49B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43)
{
  sub_25B4940C0(a40);
  sub_25B49416C(a43);

  _Unwind_Resume(a1);
}

void *sub_25B49C148(void *a1)
{
  a1[19] = &unk_2708F1D50;
  long long v2 = (std::__shared_weak_count *)a1[35];
  if (v2) {
    sub_25B404120(v2);
  }
  *a1 = &unk_2708F1C28;
  long long v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

id sub_25B49C1C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v4 = a3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v51, v59, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v52 != v9) {
          objc_enumerationMutation(v4);
        }
        int v11 = *(unsigned char **)(*((void *)&v51 + 1) + 8 * i);
        uint64_t v12 = objc_msgSend_parentIdentifier(v11, v6, v7, v47.i64[0]);
        uint64_t v15 = v12;
        if (v12)
        {
          objc_msgSend_UUIDString(v12, v13, v14);
          id v16 = objc_claimAutoreleasedReturnValue();
          uint64_t v19 = (char *)objc_msgSend_UTF8String(v16, v17, v18);
          sub_25B403500(__p, v19);

          objc_msgSend_quad(v11, v20, v21);
          int8x16_t v47 = v22;
          int8x16_t v48 = v23;
          uint64_t v24 = sub_25B495914(a2, __p);
          if ((void *)(a2 + 8) != v24)
          {
            sub_25B495994((uint64_t)v56, (uint64_t)(v24 + 8));
            float32x2_t v27 = vsub_f32(v58, v57);
            float v28 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)v47.i8, v57), v27));
            float v29 = vaddv_f32(vmul_f32(v27, v27));
            if (v29 < 0.000001) {
              float v29 = 0.000001;
            }
            *(float32x2_t *)&long long v30 = vmla_n_f32(v57, v27, v28 / v29);
            float32x2_t v31 = vsub_f32(*(float32x2_t *)&v30, v57);
            float32x2_t v32 = vsub_f32(*(float32x2_t *)&v30, v58);
            if (vaddv_f32(vmul_f32(v31, v32)) > 0.00001)
            {
              int32x2_t v33 = (int32x2_t)vmul_f32(v31, v31);
              int32x2_t v34 = (int32x2_t)vmul_f32(v32, v32);
              int32x2_t v35 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v33, v34), (float32x2_t)vzip2_s32(v33, v34)));
              *(int8x8_t *)&long long v30 = vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v35, 1), (float32x2_t)v35)), 0), (int8x8_t)v58, (int8x8_t)v57);
            }
            *(float32x2_t *)&long long v36 = vmla_n_f32(v57, v27, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)v48.i8, v57), v27)) / v29);
            float32x2_t v37 = vsub_f32(*(float32x2_t *)&v36, v57);
            float32x2_t v38 = vsub_f32(*(float32x2_t *)&v36, v58);
            if (vaddv_f32(vmul_f32(v37, v38)) > 0.00001)
            {
              int32x2_t v39 = (int32x2_t)vmul_f32(v37, v37);
              int32x2_t v40 = (int32x2_t)vmul_f32(v38, v38);
              int32x2_t v41 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v39, v40), (float32x2_t)vzip2_s32(v39, v40)));
              *(int8x8_t *)&long long v36 = vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v41, 1), (float32x2_t)v41)), 0), (int8x8_t)v58, (int8x8_t)v57);
            }
            float32x2_t v42 = vsub_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)&v30);
            if (sqrtf(vaddv_f32(vmul_f32(v42, v42))) > 0.000001
              || (float32x2_t v43 = vsub_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)&v36),
                  sqrtf(vaddv_f32(vmul_f32(v43, v43))) > 0.000001))
            {
              *(void *)&long long v44 = v30;
              *((void *)&v44 + 1) = vextq_s8(v47, v47, 8uLL).u64[0];
              *(void *)&long long v45 = v36;
              *((void *)&v45 + 1) = *((void *)&v44 + 1);
              *((void *)&v36 + 1) = vextq_s8(v48, v48, 8uLL).u64[0];
              *((void *)&v30 + 1) = *((void *)&v36 + 1);
              src[0] = v44;
              src[1] = v45;
              src[2] = v36;
              src[3] = v30;
              if (v11) {
                objc_copyStruct(v11 + 272, src, 64, 1, 0);
              }
              if (objc_msgSend_individualUpdate(v11, v25, v26, v47.i64[0]) == 2 && v11) {
                v11[105] = 1;
              }
            }
            sub_25B494210((uint64_t)v56);
          }
          if (v50 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v51, v59, 16);
    }
    while (v8);
  }

  return v4;
}

void sub_25B49C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_25B49C544(float32x4_t **a1, float32x4_t **a2)
{
  id v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = 126 - 2 * __clz(v5 - v4);
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_25B49C92C(v4, v5, v7, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
    float v29 = 0;
    long long v30 = 0;
    a1[1] = 0;
    *a1 = 0;
    a1[2] = 0;
  }
  else
  {
    long long v44 = a1;
    id v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = (char *)v11 - (char *)v10;
      uint64_t v15 = v11 - v10;
      if ((unint64_t)((char *)v11 - (char *)v10) >= 0x11)
      {
        do
        {
          id v16 = &v10[v15];
          float32x4_t v17 = v16[-2];
          float32x2_t v18 = (float32x2_t)vsubq_f32(v16[-1], v17).u64[0];
          v17.i64[0] = vsubq_f32(*v8, v17).u64[0];
          if (vmlas_n_f32(vmuls_lane_f32(-v17.f32[0], v18, 1), v17.f32[1], v18.f32[0]) > 0.0) {
            break;
          }
          --v11;
          v14 -= 16;
          uint64_t v15 = v14 >> 4;
        }
        while ((unint64_t)v14 > 0x10);
      }
      if (v10 == v11
        || (int16x4_t v19 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v10[v15 - 1], *v8))), v19.i8[0] & 1 | v19.i8[2] & 1))
      {
        if ((unint64_t)v11 >= v13)
        {
          unint64_t v20 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v21 = v13 - (void)v10;
          if (v21 >> 3 > v20) {
            unint64_t v20 = v21 >> 3;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)sub_25B3FFAEC(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = (float32x4_t *)(v22 + 16 * v15);
          float32x4_t *v24 = *v8;
          for (uint64_t i = v24 + 1; v11 != v10; --v24)
          {
            float32x4_t v26 = v11[-1];
            --v11;
            v24[-1] = v26;
          }
          unint64_t v12 = v22 + 16 * v23;
          if (v10) {
            operator delete(v10);
          }
          unint64_t v13 = v12;
          int v11 = i;
          id v10 = v24;
        }
        else
        {
          *v11++ = *v8;
          unint64_t v13 = v12;
        }
      }
      ++v8;
    }
    while (v8 != v9);
    float v28 = *a2;
    float32x2_t v27 = a2[1];
    a1 = v44;
    v44[1] = v11;
    *long long v44 = v10;
    v44[2] = (float32x4_t *)v13;
    if (v27 == v28)
    {
      float v29 = 0;
      long long v30 = 0;
    }
    else
    {
      float v29 = 0;
      long long v30 = 0;
      unint64_t v31 = 0;
      do
      {
        --v27;
        uint64_t v32 = (char *)v30 - v29;
        uint64_t v33 = ((char *)v30 - v29) >> 4;
        if ((unint64_t)((char *)v30 - v29) >= 0x11)
        {
          do
          {
            int32x2_t v34 = &v29[16 * v33];
            float32x4_t v35 = *((float32x4_t *)v34 - 2);
            float32x2_t v36 = (float32x2_t)vsubq_f32(*((float32x4_t *)v34 - 1), v35).u64[0];
            v35.i64[0] = vsubq_f32(*v27, v35).u64[0];
            if (vmlas_n_f32(vmuls_lane_f32(-v35.f32[0], v36, 1), v35.f32[1], v36.f32[0]) > 0.0) {
              break;
            }
            --v30;
            v32 -= 16;
            uint64_t v33 = v32 >> 4;
          }
          while ((unint64_t)v32 > 0x10);
        }
        if (v29 != (char *)v30)
        {
          int16x4_t v37 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)&v29[16 * v33 - 16], *v27)));
          if (!(v37.i8[0] & 1 | v37.i8[2] & 1)) {
            continue;
          }
        }
        if ((unint64_t)v30 >= v31)
        {
          unint64_t v38 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v31 - (void)v29) >> 3 > v38) {
            unint64_t v38 = (uint64_t)(v31 - (void)v29) >> 3;
          }
          if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            unint64_t v39 = (unint64_t)sub_25B3FFAEC(v39);
          }
          else {
            uint64_t v40 = 0;
          }
          int32x2_t v41 = (float32x4_t *)(v39 + 16 * v33);
          *int32x2_t v41 = *v27;
          for (uint64_t j = v41 + 1; v30 != (float32x4_t *)v29; --v41)
          {
            float32x4_t v43 = v30[-1];
            --v30;
            v41[-1] = v43;
          }
          unint64_t v31 = v39 + 16 * v40;
          if (v29) {
            operator delete(v29);
          }
          long long v30 = j;
          float v29 = (char *)v41;
        }
        else
        {
          *v30++ = *v27;
        }
      }
      while (v27 != v28);
      a1 = v44;
    }
  }
  if ((unint64_t)((char *)v30 - v29) >= 0x11) {
    sub_25B49D378((void **)a1, (char *)a1[1], v29 + 16, (char *)&v30[-1], ((char *)&v30[-1] - (v29 + 16)) >> 4);
  }
  if (v29)
  {
    operator delete(v29);
  }
}

void sub_25B49C8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    operator delete(v11);
  }
  uint64_t v14 = *v10;
  if (*v10)
  {
    *unint64_t v12 = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B49C92C(float32x4_t *a1, float32x4_t *a2, uint64_t a3, char a4)
{
void sub_25B49D378(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v6 = __src;
  uint64_t v9 = a1 + 2;
  id v10 = a1[2];
  unint64_t v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 4)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - (void)*a1) >> 4);
    if (v13 >> 60) {
      sub_25B3FBC4C();
    }
    uint64_t v14 = (__dst - v12) >> 4;
    uint64_t v15 = v10 - v12;
    if (v15 >> 3 > v13) {
      unint64_t v13 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __p[4] = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_25B3FFAEC(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    float32x2_t v27 = (_OWORD *)(v16 + 16 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 16 * v17);
    uint64_t v28 = 16 * a5;
    float32x4_t v29 = &v27[a5];
    do
    {
      long long v30 = *(_OWORD *)v6;
      v6 += 16;
      *v27++ = v30;
      v28 -= 16;
    }
    while (v28);
    __p[2] = v29;
    sub_25B49D54C(a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = v11 - (void)__dst;
  uint64_t v19 = (uint64_t)(v11 - (void)__dst) >> 4;
  if (v19 >= a5)
  {
    float32x4_t v20 = &__src[16 * a5];
    float v22 = (char *)a1[1];
LABEL_17:
    uint64_t v23 = &__dst[16 * a5];
    float32x4_t v24 = &v22[-16 * a5];
    float v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      float v25 = v22;
      do
      {
        long long v26 = *(_OWORD *)v24;
        v24 += 16;
        *(_OWORD *)float v25 = v26;
        v25 += 16;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23) {
      memmove(&v22[-16 * ((v22 - v23) >> 4)], __dst, v22 - v23);
    }
    if (v20 != v6)
    {
      memmove(__dst, v6, v20 - v6);
    }
    return;
  }
  float32x4_t v20 = &__src[16 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1[1], &__src[16 * v19], a4 - v20);
  }
  float v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

char *sub_25B49D54C(void **a1, uint64_t a2, char *__src)
{
  BOOL v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      long long v9 = *((_OWORD *)v8 - 1);
      v8 -= 16;
      *((_OWORD *)v7 - 1) = v9;
      v7 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  id v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

float32x4_t *sub_25B49D614(float32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = *a2;
  unsigned __int32 v4 = vmovn_s32(vcgtq_f32(*result, *a2)).u32[0];
  if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a2, *result))).u8[0] & 1) == 0)
  {
    if ((v4 & 0x10000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned __int8 v7 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a3, v3))).u8[0];
    unsigned __int32 v8 = vmovn_s32(vcgtq_f32(v3, *a3)).u32[0];
    if (v7)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if ((v8 & 0x10000) == 0)
    {
LABEL_9:
      float32x4_t v9 = *result;
      uint64_t *result = *a2;
      *a2 = v9;
      BOOL v10 = COERCE_FLOAT(*a3) < v9.f32[0];
      if (COERCE_FLOAT(*a3) == v9.f32[0]) {
        BOOL v10 = COERCE_FLOAT(HIDWORD(a3->i64[0])) < v9.f32[1];
      }
      uint64_t result = a2;
      if (v10) {
        goto LABEL_21;
      }
      return result;
    }
    a2 = a3;
LABEL_20:
    float32x4_t v9 = *result;
    a3 = a2;
LABEL_21:
    uint64_t *result = *a3;
    *a3 = v9;
    return result;
  }
  if (v4) {
    goto LABEL_7;
  }
LABEL_3:
  unsigned __int8 v5 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a3, v3))).u8[0];
  int16x4_t v6 = vmovn_s32(vcgtq_f32(v3, *a3));
  if (v5)
  {
    if ((v6.i8[0] & 1) == 0) {
      return result;
    }
  }
  else if ((v6.i8[2] & 1) == 0)
  {
    return result;
  }
  float32x4_t v11 = *a2;
  *a2 = *a3;
  *a3 = v11;
  int16x4_t v12 = vmovn_s32(vcgtq_f32(*result, *a2));
  if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a2, *result))).u8[0])
  {
    if (v12.i8[0]) {
      goto LABEL_20;
    }
  }
  else if (v12.i8[2])
  {
    goto LABEL_20;
  }
  return result;
}

float32x4_t sub_25B49D748(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  sub_25B49D614(a1, a2, a3);
  *(int16x4_t *)result.f32 = vmovn_s32(vcgtq_f32(*a3, *a4));
  if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a4, *a3))).u8[0])
  {
    if ((result.i8[0] & 1) == 0) {
      return result;
    }
  }
  else if ((result.i8[2] & 1) == 0)
  {
    return result;
  }
  float32x4_t result = *a3;
  *a3 = *a4;
  *a4 = result;
  *(int16x4_t *)result.f32 = vmovn_s32(vcgtq_f32(*a2, *a3));
  if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a3, *a2))).u8[0])
  {
    if ((result.i8[0] & 1) == 0) {
      return result;
    }
  }
  else if ((result.i8[2] & 1) == 0)
  {
    return result;
  }
  float32x4_t result = *a2;
  *a2 = *a3;
  *a3 = result;
  *(int16x4_t *)result.f32 = vmovn_s32(vcgtq_f32(*a1, *a2));
  if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*a2, *a1))).u8[0] & 1) == 0)
  {
    if ((result.i8[2] & 1) == 0) {
      return result;
    }
    goto LABEL_13;
  }
  if (result.i8[0])
  {
LABEL_13:
    float32x4_t result = *a1;
    *a1 = *a2;
    *a2 = result;
  }
  return result;
}

BOOL sub_25B49D858(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float32x4_t v6 = a2[-1];
      unsigned __int8 v7 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v6, *a1))).u8[0];
      int16x4_t v8 = vmovn_s32(vcgtq_f32(*a1, v6));
      if (v7)
      {
        if ((v8.i8[0] & 1) == 0) {
          return result;
        }
      }
      else if ((v8.i8[2] & 1) == 0)
      {
        return result;
      }
      float32x4_t v25 = *a1;
      *a1 = a2[-1];
      a2[-1] = v25;
      return result;
    case 3:
      sub_25B49D614(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_25B49D748(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      f32 = (_OWORD *)a1[1].f32;
      uint64_t v19 = a1 + 2;
      float32x4_t v20 = a1 + 3;
      sub_25B49D748(a1, a1 + 1, a1 + 2, a1 + 3);
      float32x4_t v21 = a2[-1];
      float32x4_t v22 = a1[3];
      unsigned __int8 v23 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v21, v22))).u8[0];
      int16x4_t v24 = vmovn_s32(vcgtq_f32(v22, v21));
      if (v23)
      {
        if ((v24.i8[0] & 1) == 0) {
          return 1;
        }
      }
      else if ((v24.i8[2] & 1) == 0)
      {
        return 1;
      }
      float32x4_t v26 = *v20;
      *float32x4_t v20 = a2[-1];
      a2[-1] = v26;
      int16x4_t v27 = vmovn_s32(vcgtq_f32(*v19, *v20));
      if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v20, *v19))).u8[0])
      {
        if ((v27.i8[0] & 1) == 0) {
          return 1;
        }
      }
      else if ((v27.i8[2] & 1) == 0)
      {
        return 1;
      }
      float32x4_t v28 = *v19;
      float32x4_t v29 = *v20;
      *uint64_t v19 = *v20;
      *float32x4_t v20 = v28;
      BOOL v30 = v29.f32[0] < COERCE_FLOAT(*f32);
      if (v29.f32[0] == COERCE_FLOAT(*f32)) {
        BOOL v30 = v29.f32[1] < COERCE_FLOAT(HIDWORD(*(void *)f32));
      }
      if (v30)
      {
        float32x4_t v31 = *a1;
        float32x4_t v32 = a1[1];
        a1[1] = v29;
        a1[2] = v32;
        BOOL v33 = v29.f32[0] < v31.f32[0];
        if (v29.f32[0] == v31.f32[0]) {
          BOOL v33 = v29.f32[1] < v31.f32[1];
        }
        if (v33)
        {
          float32x4_t v34 = *a1;
          *a1 = v29;
          a1[1] = v34;
        }
      }
      return 1;
    default:
      float32x4_t v9 = a1 + 2;
      sub_25B49D614(a1, a1 + 1, a1 + 2);
      BOOL v10 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    int16x4_t v13 = vmovn_s32(vcgtq_f32(*v9, *v10));
    if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v10, *v9))).u8[0])
    {
      if ((v13.i8[0] & 1) == 0) {
        goto LABEL_21;
      }
    }
    else if ((v13.i8[2] & 1) == 0)
    {
      goto LABEL_21;
    }
    float32x4_t v14 = *v10;
    *BOOL v10 = *v9;
    uint64_t v15 = a1;
    if (v9 == a1) {
      goto LABEL_20;
    }
    uint64_t v16 = v11;
    while (1)
    {
      long long v17 = *(long long *)((char *)&a1[1] + v16);
      if (v14.f32[0] != *(float *)&v17)
      {
        if (v14.f32[0] >= *(float *)&v17)
        {
          uint64_t v15 = v9;
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (v14.f32[1] >= *((float *)&v17 + 1)) {
        break;
      }
LABEL_17:
      --v9;
      *(float32x4_t *)((char *)a1 + v16 + 32) = *(float32x4_t *)((char *)a1 + v16 + 16);
      v16 -= 16;
      if (v16 == -32)
      {
        uint64_t v15 = a1;
        goto LABEL_20;
      }
    }
    uint64_t v15 = (float32x4_t *)((char *)a1 + v16 + 32);
LABEL_20:
    *uint64_t v15 = v14;
    if (++v12 == 8) {
      return &v10[1] == a2;
    }
LABEL_21:
    float32x4_t v9 = v10;
    v11 += 16;
    ++v10;
  }
  while (v10 != a2);
  return 1;
}

void sub_25B49DB58()
{
}

uint64_t sub_25B49DB70(uint64_t result, unint64_t a2, double a3, float a4)
{
  uint64_t v4 = result;
  int v23 = LODWORD(a3);
  unint64_t v22 = a2;
  if (a2)
  {
    sub_25B45F2BC(v21, &v22);
    BOOL result = sub_25B459378(v4, v21);
    unint64_t v8 = a2 - 1;
    if (a2 == 1)
    {
      return sub_25B4A1878(v4, &v23);
    }
    else
    {
      unint64_t v9 = 0;
      *(float *)v7.i32 = (float)(a4 - *(float *)&a3) / (float)v8;
      uint64_t v10 = *(void *)(v4 + 144);
      uint64x2_t v11 = (uint64x2_t)vdupq_n_s64(v8);
      float32x2_t v12 = (float32x2_t)vdup_lane_s32(v7, 0);
      float32x2_t v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
      int64x2_t v14 = (int64x2_t)xmmword_25B5F1130;
      int64x2_t v15 = vdupq_n_s64(2uLL);
      do
      {
        v16.f32[0] = (float)v9;
        unint64_t v17 = v9 + 1;
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v14));
        v16.f32[1] = (float)(v9 + 1);
        float32x2_t v19 = vmla_f32(v13, v16, v12);
        if (v18.i8[0]) {
          *(_DWORD *)(v10 + 4 * v9) = v19.i32[0];
        }
        if (v18.i8[4]) {
          *(_DWORD *)(v10 + 4 * v9 + 4) = v19.i32[1];
        }
        int64x2_t v14 = vaddq_s64(v14, v15);
        v9 += 2;
      }
      while (v17 + 1 != ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL));
    }
  }
  else
  {
    *(void *)BOOL result = &unk_2708F27E8;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(void *)(result + 120) = 0;
    *(void *)(result + 128) = 0;
    *(_WORD *)(result + 136) = 257;
  }
  return result;
}

void sub_25B49DCBC(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_2708F27E8;
  float32x4_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B49DCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[21] = *MEMORY[0x263EF8340];
  sub_25B45F2BC(v5, (unint64_t *)(a3 + 8));
  sub_25B49EA1C(a1, v5);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  sub_25B45E3AC((uint64_t)&v15, a3);
  long long v12 = v16;
  long long v13 = v17;
  long long v14 = v18;
  *(_OWORD *)&v5[0].__locale_ = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = v16;
  long long v9 = v17;
  long long v10 = v18;
  sub_25B45E3AC((uint64_t)v11, (uint64_t)&v15);
  *(_OWORD *)&v5[0].__locale_ = v8;
  long long v6 = v9;
  long long v7 = v10;
  sub_25B49EB10((uint64_t)v19, v5);
}

void sub_25B49E728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,std::locale a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if (a51) {
    sub_25B404120(a51);
  }
  STACK[0x270] = (unint64_t)&unk_2708F1A28;
  if (STACK[0x2F0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x2F0]);
  }
  if (a32) {
    sub_25B404120(a32);
  }
  if (STACK[0x258]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x258]);
  }
  STACK[0x340] = (unint64_t)&unk_2708F1A28;
  if (STACK[0x3C0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3C0]);
  }
  *int16x4_t v51 = &unk_2708F18A0;
  long long v53 = (std::__shared_weak_count *)v51[16];
  if (v53) {
    sub_25B404120(v53);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B49E9A0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (*(unsigned char *)(result + 136))
  {
    long long v2 = *(short float **)(result + 144);
    short float v3 = *v2;
    if (v1 >= 2)
    {
      unint64_t v4 = v1 - 1;
      unsigned __int8 v5 = v2 + 1;
      do
      {
        short float v6 = *v5++;
        short float v3 = v3 + v6;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    long long v7 = *(short float **)(result + 144);
    short float v8 = *v7;
    if (v1 >= 2)
    {
      uint64_t v9 = 1;
      for (uint64_t i = 1; i != v1; ++i)
      {
        short float v8 = v8 + v7[*(void *)(result + 56) * v9];
        if (v9 + 1 == v1) {
          uint64_t v9 = 0;
        }
        else {
          ++v9;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B49EA1C(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = &unk_2708F18A0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 1;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(result + 8) = *a2;
  *(_OWORD *)(result + 40) = v2;
  *(_OWORD *)(result + 24) = v3;
  *(void *)(result + 56) = 1;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 104) = v4;
  *(void *)(result + 112) = 0;
  if (v4) {
    sub_25B43814C((uint64_t)&v5, v4);
  }
  *(unsigned char *)(result + 137) = 1;
  return result;
}

void sub_25B49EAF8(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B49EB10(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B408738((uint64_t)v5, v4);
}

void sub_25B49F530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale((std::locale *)(v16 - 128));
  sub_25B3F9500((uint64_t)&a15);
  long long v18 = *(std::__shared_weak_count **)(v15 + 128);
  if (v18) {
    sub_25B404120(v18);
  }
  _Unwind_Resume(a1);
}

void sub_25B49F590(uint64_t a1, _OWORD *a2)
{
  *(void *)a1 = &unk_2708F1A28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  sub_25B408738((uint64_t)v5, v4);
}

void sub_25B49F8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  int16x4_t v27 = *(std::__shared_weak_count **)(v25 + 128);
  if (v27) {
    sub_25B404120(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B49F94C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    short float v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    long long v10 = std::locale::use_facet((const std::locale *)v16, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v16);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40961C("err", "empty tensor in");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64x2_t v11 = std::locale::use_facet((const std::locale *)v16, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v16);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 137))
  {
    long long v12 = *(_OWORD *)(a2 + 168);
    long long v13 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 40) = v13;
    *(_OWORD *)(a1 + 24) = v12;
    *(void *)(a1 + 56) = 1;
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 104) = v14;
    *(void *)(a1 + 112) = 0;
    sub_25B408738((uint64_t)v16, v14);
  }
  if (sub_25B459308((void *)a2, (void *)a1) == 2)
  {
    sub_25B4396A8((uint64_t)v16, (_OWORD *)(a2 + 152));
    sub_25B4A082C((uint64_t)v16, a2);
    sub_25B43979C(a1, (uint64_t)v16);
    *(void *)&v16[0] = &unk_2708F1A28;
    if (v17) {
      sub_25B404120(v17);
    }
  }
  else
  {
    sub_25B4A082C(a1, a2);
  }
  return a1;
}

void sub_25B49FBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B49FC34(uint64_t a1, unint64_t *a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    short float v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    long long v10 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64x2_t v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v12 = *a2;
  v22[0] = v12;
  uint64_t v20 = 0;
  if (v12 >= *(void *)(a1 + 8))
  {
    long long v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v14, (uint64_t)" ", 1);
    uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_25B406B20(v16, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    long long v17 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40B60C("err", "shape", (uint64_t)&v20, "=", (uint64_t)v22, "should smaller then");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    long long v18 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return *(void *)(a1 + 144) + 4 * *(void *)(a1 + 56) * v12;
}

void sub_25B49FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4A0008(uint64_t a1, unint64_t *a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    short float v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    long long v10 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64x2_t v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v12 = *a2;
  v22[0] = v12;
  uint64_t v20 = 0;
  if (v12 >= *(void *)(a1 + 8))
  {
    long long v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v14, (uint64_t)" ", 1);
    uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_25B406B20(v16, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    long long v17 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40B60C("err", "shape", (uint64_t)&v20, "=", (uint64_t)v22, "should smaller then");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    long long v18 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return *(void *)(a1 + 144) + 4 * *(void *)(a1 + 56) * v12;
}

void sub_25B4A03B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4A03DC(uint64_t a1, int *a2, int *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    long long v5 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    long long v7 = sub_25B406B20(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v7, (uint64_t)" ", 1);
    short float v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)" ", 1);
    long long v10 = sub_25B406B20(v9, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64x2_t v11 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    unint64_t v12 = std::locale::use_facet(v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v28);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v13 = 0;
  uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  uint64_t v15 = (void *)(a1 + 8);
  uint64_t v16 = *a3;
  v31[0] = *a2;
  v31[1] = v16;
  uint64_t v26 = 0;
  uint64_t v17 = 1;
  long long v18 = (std::locale::id *)MEMORY[0x263F8C108];
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)&v28[0].__locale_ = 0u;
  float32x2_t v19 = (std::locale::__imp **)v31;
  do
  {
    uint64_t v20 = *v19;
    if ((unint64_t)*v19 >= *v15)
    {
      sub_25B406B20(v14, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v14, (uint64_t)" ", 1);
      std::locale v21 = (void *)std::ostream::operator<<();
      sub_25B406B20(v21, (uint64_t)" ", 1);
      sub_25B406B20(v21, (uint64_t)"at", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      unint64_t v22 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40B60C("err", "shape", (uint64_t)&v26, "=", (uint64_t)v19, "should smaller then");
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      int v23 = std::locale::use_facet(&v27, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v20 = *v19;
    }
    v28[v13].__locale_ = v20;
    float32x2_t v19 = (std::locale::__imp **)&v31[v17];
    ++v15;
    uint64_t v26 = ++v13;
    uint64_t v17 = 2;
  }
  while (v13 != 2);
  return *(void *)(a1 + 144)
       + 2 * (*(void *)(a1 + 56) * (uint64_t)v28[0].__locale_ + *(void *)(a1 + 64) * (uint64_t)v28[1].__locale_);
}

void sub_25B4A07FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::locale a13)
{
}

uint64_t sub_25B4A082C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v133 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = (long long *)(a2 + 152);
  if (v4 == *(void *)(a2 + 152))
  {
    uint64_t v7 = *(void *)(result + 104);
    short float v8 = *(int **)(result + 144);
    if (*(unsigned char *)(a2 + 136))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v7)
        {
          uint64_t v9 = *(int **)(a2 + 144);
          int v10 = (int)*(double *)(a2 + 200);
          int v11 = (int)*(double *)(a2 + 208);
          do
          {
            int v13 = *v9++;
            int v12 = v13;
            if (v13 >= v11) {
              int v12 = v11;
            }
            if (v12 <= v10) {
              int v12 = v10;
            }
            *v8++ = v12;
            --v7;
          }
          while (v7);
        }
      }
      else if (v7)
      {
        uint64_t v67 = 0;
        uint64_t v68 = *(void *)(result + 56);
        uint64_t v69 = *(int **)(a2 + 144);
        int v70 = (int)*(double *)(a2 + 200);
        int v71 = (int)*(double *)(a2 + 208);
        do
        {
          int v73 = *v69++;
          int v72 = v73;
          if (v73 >= v71) {
            int v72 = v71;
          }
          if (v72 <= v70) {
            int v72 = v70;
          }
          v8[v68 * v67] = v72;
          if (v67 + 1 == v4) {
            uint64_t v67 = 0;
          }
          else {
            ++v67;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v7)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a2 + 144);
        int v39 = (int)*(double *)(a2 + 200);
        int v40 = (int)*(double *)(a2 + 208);
        do
        {
          int v41 = *(_DWORD *)(v38 + 4 * *(void *)(a2 + 56) * v37);
          if (v41 >= v40) {
            int v41 = v40;
          }
          if (v41 <= v39) {
            int v41 = v39;
          }
          *v8++ = v41;
          if (v37 + 1 == v4) {
            uint64_t v37 = 0;
          }
          else {
            ++v37;
          }
          --v7;
        }
        while (v7);
      }
    }
    else if (v7)
    {
      uint64_t v89 = 0;
      uint64_t v90 = *(void *)(result + 56);
      uint64_t v91 = *(void *)(a2 + 144);
      int v92 = (int)*(double *)(a2 + 200);
      int v93 = (int)*(double *)(a2 + 208);
      do
      {
        int v94 = *(_DWORD *)(v91 + 4 * *(void *)(a2 + 56) * v89);
        if (v94 >= v93) {
          int v94 = v93;
        }
        if (v94 <= v92) {
          int v94 = v92;
        }
        v8[v90 * v89] = v94;
        if (v89 + 1 == v4) {
          uint64_t v89 = 0;
        }
        else {
          ++v89;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v122 = 0uLL;
      long long v123 = 0uLL;
      long long v120 = 0uLL;
      long long v121 = 0uLL;
      long long v118 = 0uLL;
      long long v119 = 0uLL;
      long long v116 = 0uLL;
      long long v117 = 0uLL;
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      long long v112 = 0uLL;
      long long v113 = 0uLL;
      sub_25B439F30((uint64_t)&v115, v5, v6, &v112);
      uint64_t v14 = (std::locale::__imp *)v112;
      if ((void)v112 != *(void *)v5)
      {
        uint64_t v15 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v16 = sub_25B406B20(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v16, (uint64_t)" ", 1);
        uint64_t v17 = (void *)MEMORY[0x263F8C0F8];
        long long v18 = (void *)std::ostream::operator<<();
        sub_25B406B20(v18, (uint64_t)" ", 1);
        sub_25B406B20(v18, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        float32x2_t v19 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        uint64_t v20 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v131 = 0u;
      long long v132 = 0u;
      *(_OWORD *)&v130[0].__locale_ = 0u;
      uint64_t v21 = *(void *)(v3 + 104);
      uint64_t v22 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v21)
        {
          int v23 = 0;
          uint64_t v24 = 0;
          int v26 = (int)*(double *)(a2 + 200);
          float32x4_t v28 = (uint64_t *)*((void *)&v116 + 1);
          std::locale v27 = (uint64_t *)v117;
          unint64_t v29 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          uint64_t v30 = v127;
          uint64_t v31 = *(void *)(a2 + 144);
          double v25 = *(double *)(a2 + 208);
          do
          {
            v130[0].__locale_ = v23;
            locale = v23;
            if (v27 != v28)
            {
              BOOL v33 = v28;
              unint64_t v34 = v29;
              do
              {
                uint64_t v35 = *v33++;
                v130[v35].__locale_ = 0;
                --v34;
              }
              while (v34);
              locale = v130[0].__locale_;
            }
            int v36 = *(_DWORD *)(v31 + 4 * (void)locale * v30);
            if (v36 >= (int)v25) {
              int v36 = (int)v25;
            }
            if (v36 <= v26) {
              int v36 = v26;
            }
            *(_DWORD *)(v22 + 4 * v24) = v36;
            if ((std::locale::__imp *)((char *)v23 + 1) == v14) {
              int v23 = 0;
            }
            else {
              int v23 = (std::locale::__imp *)((char *)v23 + 1);
            }
            ++v24;
          }
          while (v24 != v21);
        }
      }
      else if (v21)
      {
        unsigned __int32 v74 = 0;
        uint64_t v75 = 0;
        int v77 = (int)*(double *)(a2 + 200);
        float32x4_t v79 = (uint64_t *)*((void *)&v116 + 1);
        uint64_t v78 = (uint64_t *)v117;
        unint64_t v80 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
        if (v80 <= 1) {
          unint64_t v80 = 1;
        }
        uint64_t v81 = v127;
        uint64_t v82 = *(void *)(v3 + 56);
        uint64_t v83 = *(void *)(a2 + 144);
        double v76 = *(double *)(a2 + 208);
        do
        {
          v130[0].__locale_ = v74;
          uint64_t v84 = v74;
          if (v78 != v79)
          {
            float32x4_t v85 = v79;
            unint64_t v86 = v80;
            do
            {
              uint64_t v87 = *v85++;
              v130[v87].__locale_ = 0;
              --v86;
            }
            while (v86);
            uint64_t v84 = v130[0].__locale_;
          }
          int v88 = *(_DWORD *)(v83 + 4 * (void)v84 * v81);
          if (v88 >= (int)v76) {
            int v88 = (int)v76;
          }
          if (v88 <= v77) {
            int v88 = v77;
          }
          *(_DWORD *)(v22 + 4 * (void)v74 * v82) = v88;
          if ((std::locale::__imp *)((char *)v74 + 1) == v14) {
            unsigned __int32 v74 = 0;
          }
          else {
            unsigned __int32 v74 = (std::locale::__imp *)((char *)v74 + 1);
          }
          ++v75;
        }
        while (v75 != v21);
      }
    }
    else
    {
      long long v128 = 0uLL;
      long long v129 = 0uLL;
      long long v126 = 0uLL;
      long long v127 = 0uLL;
      long long v124 = 0uLL;
      long long v125 = 0uLL;
      long long v122 = 0uLL;
      long long v123 = 0uLL;
      long long v120 = 0uLL;
      long long v121 = 0uLL;
      long long v118 = 0uLL;
      long long v119 = 0uLL;
      long long v116 = 0uLL;
      long long v117 = 0uLL;
      long long v114 = 0uLL;
      long long v115 = 0uLL;
      long long v112 = 0uLL;
      long long v113 = 0uLL;
      sub_25B439F30((uint64_t)&v115, v5, v6, &v112);
      float32x4_t v42 = (std::locale::__imp *)v112;
      if ((void)v112 != *(void *)v5)
      {
        float v43 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        BOOL v44 = sub_25B406B20(v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v44, (uint64_t)" ", 1);
        long long v45 = (void *)MEMORY[0x263F8C0F8];
        int16x4_t v46 = (void *)std::ostream::operator<<();
        sub_25B406B20(v46, (uint64_t)" ", 1);
        sub_25B406B20(v46, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
        int8x16_t v47 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
        int8x16_t v48 = std::locale::use_facet(v130, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
        std::locale::~locale(v130);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v131 = 0u;
      long long v132 = 0u;
      *(_OWORD *)&v130[0].__locale_ = 0u;
      uint64_t v49 = *(void *)(v3 + 104);
      uint64_t v50 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v49)
        {
          int16x4_t v51 = 0;
          uint64_t v52 = 0;
          int v54 = (int)*(double *)(a2 + 200);
          uint64_t v56 = (uint64_t *)*((void *)&v116 + 1);
          uint64_t v55 = (uint64_t *)v117;
          unint64_t v57 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
          if (v57 <= 1) {
            unint64_t v57 = 1;
          }
          uint64_t v58 = v127;
          int v59 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v60 = *(void *)(a2 + 144);
          double v53 = *(double *)(a2 + 208);
          do
          {
            v130[0].__locale_ = v51;
            float32x4_t v61 = v51;
            if (v55 != v56)
            {
              uint64_t v62 = v56;
              unint64_t v63 = v57;
              do
              {
                uint64_t v64 = *v62++;
                v130[v64].__locale_ = 0;
                --v63;
              }
              while (v63);
              float32x4_t v61 = v130[0].__locale_;
            }
            uint64_t v65 = *(void *)(a2 + 56);
            if (v59) {
              uint64_t v65 = v58;
            }
            int v66 = *(_DWORD *)(v60 + 4 * v65 * (void)v61);
            if (v66 >= (int)v53) {
              int v66 = (int)v53;
            }
            if (v66 <= v54) {
              int v66 = v54;
            }
            *(_DWORD *)(v50 + 4 * v52) = v66;
            if ((std::locale::__imp *)((char *)v51 + 1) == v42) {
              int16x4_t v51 = 0;
            }
            else {
              int16x4_t v51 = (std::locale::__imp *)((char *)v51 + 1);
            }
            ++v52;
          }
          while (v52 != v49);
        }
      }
      else if (v49)
      {
        unint64_t v95 = 0;
        uint64_t v96 = 0;
        int v98 = (int)*(double *)(a2 + 200);
        std::string::size_type v100 = (uint64_t *)*((void *)&v116 + 1);
        BOOL v99 = (uint64_t *)v117;
        unint64_t v101 = (uint64_t)(v117 - *((void *)&v116 + 1)) >> 3;
        if (v101 <= 1) {
          unint64_t v101 = 1;
        }
        uint64_t v102 = v127;
        uint64_t v103 = *(void *)(v3 + 56);
        int v104 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v105 = *(void *)(a2 + 144);
        double v97 = *(double *)(a2 + 208);
        do
        {
          v130[0].__locale_ = v95;
          unsigned __int8 v106 = v95;
          if (v99 != v100)
          {
            int16x4_t v107 = v100;
            unint64_t v108 = v101;
            do
            {
              uint64_t v109 = *v107++;
              v130[v109].__locale_ = 0;
              --v108;
            }
            while (v108);
            unsigned __int8 v106 = v130[0].__locale_;
          }
          uint64_t v110 = *(void *)(a2 + 56);
          if (v104) {
            uint64_t v110 = v102;
          }
          int v111 = *(_DWORD *)(v105 + 4 * v110 * (void)v106);
          if (v111 >= (int)v97) {
            int v111 = (int)v97;
          }
          if (v111 <= v98) {
            int v111 = v98;
          }
          *(_DWORD *)(v50 + 4 * (void)v95 * v103) = v111;
          if ((std::locale::__imp *)((char *)v95 + 1) == v42) {
            unint64_t v95 = 0;
          }
          else {
            unint64_t v95 = (std::locale::__imp *)((char *)v95 + 1);
          }
          ++v96;
        }
        while (v96 != v49);
      }
    }
    return sub_25B3F9500((uint64_t)&v115);
  }
  return result;
}

void sub_25B4A106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4A10A0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v108 = *MEMORY[0x263EF8340];
  long long v5 = (long long *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  if (v4 == *(void *)a2)
  {
    uint64_t v6 = *(void *)(result + 104);
    uint64_t v7 = *(_DWORD **)(result + 144);
    if (*(unsigned char *)(a2 + 184))
    {
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          short float v8 = *(int **)(a2 + 192);
          do
          {
            int v9 = *v8++;
            *v7++ = *(_DWORD *)(a2 + 248) + v9;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        uint64_t v54 = 0;
        uint64_t v55 = *(void *)(result + 56);
        uint64_t v56 = *(int **)(a2 + 192);
        do
        {
          int v57 = *v56++;
          v7[v55 * v54] = *(_DWORD *)(a2 + 248) + v57;
          if (v54 + 1 == v4) {
            uint64_t v54 = 0;
          }
          else {
            ++v54;
          }
          --v6;
        }
        while (v6);
      }
    }
    else if (*(unsigned char *)(result + 136))
    {
      if (v6)
      {
        uint64_t v30 = 0;
        uint64_t v31 = *(void *)(a2 + 192);
        do
        {
          *v7++ = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v31 + 4 * *(void *)(a2 + 104) * v30);
          if (v30 + 1 == v4) {
            uint64_t v30 = 0;
          }
          else {
            ++v30;
          }
          --v6;
        }
        while (v6);
      }
    }
    else if (v6)
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)(result + 56);
      uint64_t v72 = *(void *)(a2 + 192);
      do
      {
        v7[v71 * v70] = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v72 + 4 * *(void *)(a2 + 104) * v70);
        if (v70 + 1 == v4) {
          uint64_t v70 = 0;
        }
        else {
          ++v70;
        }
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 184))
    {
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v97 = 0uLL;
      long long v98 = 0uLL;
      long long v95 = 0uLL;
      long long v96 = 0uLL;
      long long v93 = 0uLL;
      long long v94 = 0uLL;
      long long v91 = 0uLL;
      long long v92 = 0uLL;
      long long v89 = 0uLL;
      long long v90 = 0uLL;
      long long v87 = 0uLL;
      long long v88 = 0uLL;
      sub_25B439F30((uint64_t)&v90, v5, (long long *)a2, &v87);
      int v10 = (std::locale::__imp *)v87;
      if ((void)v87 != *(void *)v5)
      {
        int v11 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        int v12 = sub_25B406B20(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v12, (uint64_t)" ", 1);
        int v13 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v14 = (void *)std::ostream::operator<<();
        sub_25B406B20(v14, (uint64_t)" ", 1);
        sub_25B406B20(v14, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v15 = std::locale::use_facet(v105, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(v105);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        uint64_t v16 = std::locale::use_facet(v105, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(v105);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)&v105[0].__locale_ = 0u;
      uint64_t v17 = *(void *)(v3 + 104);
      uint64_t v18 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v17)
        {
          float32x2_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v22 = (uint64_t *)*((void *)&v91 + 1);
          uint64_t v21 = (uint64_t *)v92;
          unint64_t v23 = (uint64_t)(v92 - *((void *)&v91 + 1)) >> 3;
          if (v23 <= 1) {
            unint64_t v23 = 1;
          }
          uint64_t v24 = v102;
          uint64_t v25 = *(void *)(a2 + 192);
          do
          {
            v105[0].__locale_ = v19;
            locale = v19;
            if (v21 != v22)
            {
              std::locale v27 = v22;
              unint64_t v28 = v23;
              do
              {
                uint64_t v29 = *v27++;
                v105[v29].__locale_ = 0;
                --v28;
              }
              while (v28);
              locale = v105[0].__locale_;
            }
            *(_DWORD *)(v18 + 4 * v20) = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v25 + 4 * (void)locale * v24);
            if ((std::locale::__imp *)((char *)v19 + 1) == v10) {
              float32x2_t v19 = 0;
            }
            else {
              float32x2_t v19 = (std::locale::__imp *)((char *)v19 + 1);
            }
            ++v20;
          }
          while (v20 != v17);
        }
      }
      else if (v17)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        float32x4_t v61 = (uint64_t *)*((void *)&v91 + 1);
        uint64_t v60 = (uint64_t *)v92;
        unint64_t v62 = (uint64_t)(v92 - *((void *)&v91 + 1)) >> 3;
        if (v62 <= 1) {
          unint64_t v62 = 1;
        }
        uint64_t v63 = v102;
        uint64_t v64 = *(void *)(v3 + 56);
        uint64_t v65 = *(void *)(a2 + 192);
        do
        {
          v105[0].__locale_ = v58;
          int v66 = v58;
          if (v60 != v61)
          {
            uint64_t v67 = v61;
            unint64_t v68 = v62;
            do
            {
              uint64_t v69 = *v67++;
              v105[v69].__locale_ = 0;
              --v68;
            }
            while (v68);
            int v66 = v105[0].__locale_;
          }
          *(_DWORD *)(v18 + 4 * (void)v58 * v64) = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v65 + 4 * (void)v66 * v63);
          if ((std::locale::__imp *)((char *)v58 + 1) == v10) {
            uint64_t v58 = 0;
          }
          else {
            uint64_t v58 = (std::locale::__imp *)((char *)v58 + 1);
          }
          ++v59;
        }
        while (v59 != v17);
      }
    }
    else
    {
      long long v103 = 0uLL;
      long long v104 = 0uLL;
      long long v101 = 0uLL;
      long long v102 = 0uLL;
      long long v99 = 0uLL;
      long long v100 = 0uLL;
      long long v97 = 0uLL;
      long long v98 = 0uLL;
      long long v95 = 0uLL;
      long long v96 = 0uLL;
      long long v93 = 0uLL;
      long long v94 = 0uLL;
      long long v91 = 0uLL;
      long long v92 = 0uLL;
      long long v89 = 0uLL;
      long long v90 = 0uLL;
      long long v87 = 0uLL;
      long long v88 = 0uLL;
      sub_25B439F30((uint64_t)&v90, v5, (long long *)a2, &v87);
      float32x4_t v32 = (std::locale::__imp *)v87;
      if ((void)v87 != *(void *)v5)
      {
        BOOL v33 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v34 = sub_25B406B20(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v34, (uint64_t)" ", 1);
        uint64_t v35 = (void *)MEMORY[0x263F8C0F8];
        int v36 = (void *)std::ostream::operator<<();
        sub_25B406B20(v36, (uint64_t)" ", 1);
        sub_25B406B20(v36, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
        uint64_t v37 = std::locale::use_facet(v105, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale(v105);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
        uint64_t v38 = std::locale::use_facet(v105, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
        std::locale::~locale(v105);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)&v105[0].__locale_ = 0u;
      uint64_t v39 = *(void *)(v3 + 104);
      uint64_t v40 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v39)
        {
          int v41 = 0;
          uint64_t v42 = 0;
          BOOL v44 = (uint64_t *)*((void *)&v91 + 1);
          float v43 = (uint64_t *)v92;
          unint64_t v45 = (uint64_t)(v92 - *((void *)&v91 + 1)) >> 3;
          if (v45 <= 1) {
            unint64_t v45 = 1;
          }
          uint64_t v46 = v102;
          int v47 = *(unsigned __int8 *)(a2 + 184);
          uint64_t v48 = *(void *)(a2 + 192);
          do
          {
            v105[0].__locale_ = v41;
            uint64_t v49 = v41;
            if (v43 != v44)
            {
              uint64_t v50 = v44;
              unint64_t v51 = v45;
              do
              {
                uint64_t v52 = *v50++;
                v105[v52].__locale_ = 0;
                --v51;
              }
              while (v51);
              uint64_t v49 = v105[0].__locale_;
            }
            uint64_t v53 = *(void *)(a2 + 104);
            if (v47) {
              uint64_t v53 = v46;
            }
            *(_DWORD *)(v40 + 4 * v42) = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v48 + 4 * v53 * (void)v49);
            if ((std::locale::__imp *)((char *)v41 + 1) == v32) {
              int v41 = 0;
            }
            else {
              int v41 = (std::locale::__imp *)((char *)v41 + 1);
            }
            ++v42;
          }
          while (v42 != v39);
        }
      }
      else if (v39)
      {
        int v73 = 0;
        uint64_t v74 = 0;
        double v76 = (uint64_t *)*((void *)&v91 + 1);
        uint64_t v75 = (uint64_t *)v92;
        unint64_t v77 = (uint64_t)(v92 - *((void *)&v91 + 1)) >> 3;
        if (v77 <= 1) {
          unint64_t v77 = 1;
        }
        uint64_t v78 = v102;
        uint64_t v79 = *(void *)(v3 + 56);
        int v80 = *(unsigned __int8 *)(a2 + 184);
        uint64_t v81 = *(void *)(a2 + 192);
        do
        {
          v105[0].__locale_ = v73;
          uint64_t v82 = v73;
          if (v75 != v76)
          {
            uint64_t v83 = v76;
            unint64_t v84 = v77;
            do
            {
              uint64_t v85 = *v83++;
              v105[v85].__locale_ = 0;
              --v84;
            }
            while (v84);
            uint64_t v82 = v105[0].__locale_;
          }
          uint64_t v86 = *(void *)(a2 + 104);
          if (v80) {
            uint64_t v86 = v78;
          }
          *(_DWORD *)(v40 + 4 * (void)v73 * v79) = *(_DWORD *)(a2 + 248) + *(_DWORD *)(v81 + 4 * v86 * (void)v82);
          if ((std::locale::__imp *)((char *)v73 + 1) == v32) {
            int v73 = 0;
          }
          else {
            int v73 = (std::locale::__imp *)((char *)v73 + 1);
          }
          ++v74;
        }
        while (v74 != v39);
      }
    }
    return sub_25B3F9500((uint64_t)&v90);
  }
  return result;
}

void sub_25B4A1844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::locale::~locale((std::locale *)(v7 - 128));
  sub_25B3F9500((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4A1878(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    long long v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    short float v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    int v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    int v10 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    int v11 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
  }
  int v12 = *a2;
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(_DWORD **)(a1 + 144);
  if (*(unsigned char *)(a1 + 136))
  {
    for (; v13; --v13)
      *v14++ = v12;
  }
  else if (v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      v14[v16 * v15] = v12;
      if (v15 + 1 == v17) {
        uint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      --v13;
    }
    while (v13);
  }
  return a1;
}

void sub_25B4A1A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B4A1AA0(uint64_t a1, float32x2_t **a2, uint64_t *a3, int a4, int a5, void *a6, uint64_t a7)
{
  int v11 = a6;
  int v12 = v11;
  switch(a4)
  {
    case 0:
      uint64_t v13 = a2 + 1;
      break;
    case 1:
      uint64_t v13 = a2 + 7;
      break;
    case 2:
      uint64_t v13 = a2 + 10;
      break;
    case 3:
      uint64_t v13 = a2 + 4;
      break;
    case 4:
      uint64_t v13 = a2 + 13;
      break;
    default:
      uint64_t v13 = a2 + 48;
      break;
  }
  switch(a5)
  {
    case 0:
      uint64_t v14 = a3 + 1;
      break;
    case 1:
      uint64_t v14 = a3 + 7;
      break;
    case 2:
      uint64_t v14 = a3 + 10;
      break;
    case 3:
      uint64_t v14 = a3 + 4;
      break;
    case 4:
      uint64_t v14 = a3 + 13;
      break;
    default:
      uint64_t v14 = a3 + 48;
      break;
  }
  if (v14[1] != *v14)
  {
    int v234 = v13;
    int v214 = a4;
    int v215 = a5;
    uint64_t v237 = a3;
    float32x2_t v224 = v11;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      if ((unint64_t)v16 >= v17)
      {
        uint64_t v19 = (v16 - v15) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v17 - (void)v15) >> 1 > v20) {
          unint64_t v20 = (uint64_t)(v17 - (void)v15) >> 1;
        }
        if (v17 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_25B3FBC64(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = (char *)(v21 + 4 * v19);
        *(_DWORD *)unint64_t v23 = 0;
        uint64_t v24 = v23 + 4;
        while (v16 != v15)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v23 - 1) = v25;
          v23 -= 4;
        }
        unint64_t v17 = v21 + 4 * v22;
        if (v15) {
          operator delete(v15);
        }
        uint64_t v15 = v23;
        uint64_t v16 = v24;
      }
      else
      {
        *(_DWORD *)uint64_t v16 = 0;
        v16 += 4;
      }
      ++v18;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((v14[1] - *v14) >> 4) > v18);
    std::locale v27 = *v234;
    int v26 = v234[1];
    uint64_t v28 = a1;
    if (*v234 != v26)
    {
      uint64_t v213 = v237 + 13;
      uint64_t v210 = v237 + 10;
      while (1)
      {
        uint64_t v29 = *v14;
        uint64_t v30 = v14[1] - *v14;
        if (!v30) {
          goto LABEL_73;
        }
        unint64_t v31 = v30 / 176;
        if (v31 <= 1) {
          unint64_t v31 = 1;
        }
        float32x4_t v32 = v15;
        while (1)
        {
          int v33 = *(_DWORD *)v32;
          v32 += 4;
          if (!v33) {
            break;
          }
          if (!--v31) {
            goto LABEL_73;
          }
        }
        uint64_t v211 = v26;
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        uint64_t v231 = v27 + 2;
        uint64_t v226 = v27;
        while (*(_DWORD *)&v15[4 * v35] == 1)
        {
LABEL_71:
          ++v35;
          uint64_t v29 = *v14;
          v34 += 176;
          if (0x2E8BA2E8BA2E8BA3 * ((v14[1] - *v14) >> 4) <= v35) {
            goto LABEL_72;
          }
        }
        sub_25B4D4E4C((uint64_t)&v246, v231, (float32x2_t *)(v29 + v34 + 16), (float *)(a1 + 8));
        if (!(_BYTE)v249)
        {
          int v40 = 0;
          goto LABEL_65;
        }
        float v38 = *((float *)&v247 + 1);
        if (*((float *)&v247 + 1) >= *(float *)&v247) {
          float v38 = *(float *)&v247;
        }
        if (v38 < *(float *)(v28 + 20)) {
          goto LABEL_53;
        }
        float v39 = *((float *)&v247 + 3);
        if (*((float *)&v247 + 3) < *(float *)&v248) {
          float v39 = *(float *)&v248;
        }
        if (v39 > *(float *)(v28 + 16))
        {
LABEL_53:
          int v40 = 12;
          goto LABEL_65;
        }
        *(_DWORD *)&v15[4 * v35] = 1;
        if (v215 == 3) {
          break;
        }
        if (!v215)
        {
          int v216 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v36, v37);
          float v43 = objc_msgSend_identifier(*(void **)&v27[1], v41, v42);
          sub_25B4A2C10(v216, v43, v237 + 4);

          uint64_t v46 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v44, v45);
          uint64_t v49 = objc_msgSend_identifier(*(void **)&v226[1], v47, v48);
          sub_25B4A2C10(v46, v49, v237 + 7);

          uint64_t v52 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v50, v51);
          uint64_t v55 = objc_msgSend_identifier(*(void **)&v226[1], v53, v54);
          sub_25B4A2C10(v52, v55, v210);

          float32x2_t v220 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v56, v57);
          uint64_t v60 = objc_msgSend_identifier(*(void **)&v226[1], v58, v59);
          sub_25B4A2C10(v220, v60, v213);
LABEL_59:

          std::locale v27 = v226;
        }
        objc_msgSend_identifier(*(void **)&v27[1], v36, v37, v210);
        uint64_t v63 = v29 + v34;
        id v221 = (id)objc_claimAutoreleasedReturnValue();
        sub_25B4FD4F4(*(void *)(v29 + v34 + 8), v221);
        uint64_t v217 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v64, v65);
        objc_msgSend_UUIDString(v217, v66, v67);
        id v68 = objc_claimAutoreleasedReturnValue();
        uint64_t v71 = (char *)objc_msgSend_UTF8String(v68, v69, v70);
        sub_25B40B504((std::string *)(v29 + v34 + 128), v71);

        std::locale v27 = v226;
        objc_msgSend_quad(*(void **)&v226[1], v72, v73);
        float32x4_t v222 = v74;
        objc_msgSend_quad(*(void **)(v29 + v34 + 8), v75, v76);
        float32x4_t v218 = v77;
        objc_msgSend_quad(*(void **)(v29 + v34 + 8), v78, v79);
        float32x4_t v82 = vsubq_f32(v222, v218);
        float32x4_t v84 = vsubq_f32(v222, v83);
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v84, v84))) < sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v82, v82))))
        {
          objc_msgSend_quad(*(void **)(v63 + 8), v80, v81);
          long long v223 = v85;
          objc_msgSend_quad(*(void **)(v63 + 8), v86, v87);
          long long v219 = v88;
          objc_msgSend_quad(*(void **)(v63 + 8), v89, v90);
          long long v212 = v91;
          objc_msgSend_quad(*(void **)(v63 + 8), v92, v93);
          uint64_t v96 = *(void *)(v63 + 8);
          long long src = v223;
          long long v243 = v219;
          long long v244 = v212;
          long long v245 = v97;
          if (v96) {
            objc_copyStruct((void *)(v96 + 272), &src, 64, 1, 0);
          }
          sub_25B47CB1C(v29 + v34, v94, v95);
        }
        int v40 = 10;
        uint64_t v28 = a1;
LABEL_65:
        if (v251)
        {
          unint64_t v252 = v251;
          operator delete(v251);
        }
        if (*((void *)&v249 + 1))
        {
          uint64_t v250 = *((void *)&v249 + 1);
          operator delete(*((void **)&v249 + 1));
        }
        if (v40 == 12 || !v40) {
          goto LABEL_71;
        }
LABEL_72:
        v27 += 22;
        int v26 = v211;
        if (v27 == v211) {
          goto LABEL_73;
        }
      }
      float32x2_t v220 = objc_msgSend_identifier(*(void **)(v29 + v34 + 8), v36, v37);
      uint64_t v60 = objc_msgSend_identifier(*(void **)&v27[1], v61, v62);
      sub_25B4A2C10(v220, v60, v213);
      goto LABEL_59;
    }
LABEL_73:
    if (v214 == v215 && v16 != v15)
    {
      unint64_t v98 = (v16 - v15) >> 2;
      if (v98 <= 1) {
        unint64_t v98 = 1;
      }
      uint64_t v99 = *v14 + 8;
      long long v100 = v15;
      do
      {
        if (*(void *)v99) {
          *(unsigned char *)(*(void *)v99 + 105) = *(_DWORD *)v100 != 0;
        }
        v99 += 176;
        v100 += 4;
        --v98;
      }
      while (v98);
    }
    if (v215)
    {
      uint64_t v101 = *v14;
      uint64_t v102 = v14[1];
      if (v102 != *v14)
      {
        unint64_t v103 = 0;
        uint64_t v104 = 136;
        do
        {
          uint64_t v105 = v101 + v104;
          uint64_t v106 = *(unsigned __int8 *)(v101 + v104 + 15);
          if ((v106 & 0x80u) != 0) {
            uint64_t v106 = *(void *)(v101 + v104);
          }
          if (v106)
          {
            uint64_t v107 = *(unsigned __int8 *)(v105 + 39);
            if ((v107 & 0x80u) != 0) {
              uint64_t v107 = *(void *)(v105 + 24);
            }
            if (v107 && sub_25B491880(v237[1], v237[2], (unsigned __int8 **)(v105 + 16)))
            {
              uint64_t v108 = (float32x2_t *)sub_25B490C80((uint64_t)v237, (unsigned __int8 **)(v105 + 16));
              uint64_t v109 = v101 + v104;
              float32x2_t v110 = vsub_f32(*(float32x2_t *)(v101 + v104 - 112), *(float32x2_t *)(v101 + v104 - 120));
              float32x2_t v111 = vsub_f32(v108[3], v108[2]);
              float v112 = vaddv_f32(vmul_f32(v110, v111));
              int32x2_t v113 = (int32x2_t)vmul_f32(v110, v110);
              int32x2_t v114 = (int32x2_t)vmul_f32(v111, v111);
              float32x2_t v115 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v113, v114), (float32x2_t)vzip2_s32(v113, v114)));
              float v116 = v112 / fmaxf(vmul_lane_f32(v115, v115, 1).f32[0], 0.000001);
              if (v116 > 1.0) {
                float v116 = 1.0;
              }
              if ((float)((float)(acosf(fmaxf(v116, -1.0)) * 180.0) / 3.1416) > 90.0)
              {
                objc_msgSend_quad(*(void **)(v109 - 128), v117, v118);
                long long v235 = v119;
                objc_msgSend_quad(*(void **)(v109 - 128), v120, v121);
                long long v232 = v122;
                objc_msgSend_quad(*(void **)(v109 - 128), v123, v124);
                long long v229 = v125;
                objc_msgSend_quad(*(void **)(v109 - 128), v126, v127);
                uint64_t v130 = *(void *)(v109 - 128);
                long long v246 = v235;
                long long v247 = v232;
                long long v248 = v229;
                long long v249 = v131;
                if (v130) {
                  objc_copyStruct((void *)(v130 + 272), &v246, 64, 1, 0);
                }
                sub_25B47CB1C(v105 - 136, v128, v129);
                uint64_t v101 = *v14;
                uint64_t v102 = v14[1];
              }
            }
          }
          ++v103;
          v104 += 176;
        }
        while (v103 < 0x2E8BA2E8BA2E8BA3 * ((v102 - v101) >> 4));
      }
    }
    else if (v16 != v15)
    {
      uint64_t v132 = 0;
      unint64_t v133 = 0;
      do
      {
        if (!*(_DWORD *)&v15[4 * v133])
        {
          uint64_t v134 = *v14;
          v224;
          if (v224)
          {
            float32x2_t v135 = vcvt_f32_f64(v224[7]);
            float64x2_t v136 = v224[5];
            unint64_t v137 = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
          }
          else
          {
            v136.f64[0] = 0.0;
            float32x2_t v135 = 0;
            unint64_t v137 = 0;
          }
          *(void *)&v136.f64[1] = v137;
          float32x2_t v138 = (float32x2_t *)(v134 + v132);
          *(float32x2_t *)&v136.f64[0] = vcvt_f32_f64(v136);
          float32x2_t v140 = vmul_f32(vadd_f32(v138[2], v135), *(float32x2_t *)&v136.f64[0]);
          float32x2_t v141 = vadd_f32(v138[3], v135);
          float v142 = -v140.f32[0];
          if (v140.f32[0] >= 0.0) {
            float v142 = v140.f32[0];
          }
          double v143 = COERCE_DOUBLE(vmul_f32(v141, *(float32x2_t *)&v136.f64[0]));
          float v144 = v142 - (float)(int)v142;
          if (v144 < 0.5) {
            int v145 = (int)v142;
          }
          else {
            int v145 = (int)v142 + 1;
          }
          int v146 = ((int)v142 & 1) + (int)v142;
          if (v144 != 0.5) {
            int v146 = v145;
          }
          if (v140.f32[0] >= 0.0) {
            int v147 = v146;
          }
          else {
            int v147 = -v146;
          }
          v140.f32[0] = -v140.f32[1];
          if (v140.f32[1] >= 0.0) {
            v140.f32[0] = v140.f32[1];
          }
          int v148 = (int)v140.f32[0];
          float v149 = v140.f32[0] - (float)(int)v140.f32[0];
          if (v149 < 0.5) {
            int v150 = v148;
          }
          else {
            int v150 = v148 + 1;
          }
          int v151 = (v148 & 1) + v148;
          if (v149 != 0.5) {
            int v151 = v150;
          }
          if (v140.f32[1] >= 0.0) {
            int v152 = v151;
          }
          else {
            int v152 = -v151;
          }
          float v153 = -*(float *)&v143;
          if (*(float *)&v143 >= 0.0) {
            float v153 = *(float *)&v143;
          }
          int v154 = (int)v153;
          float v155 = v153 - (float)(int)v153;
          if (v155 < 0.5) {
            int v156 = v154;
          }
          else {
            int v156 = v154 + 1;
          }
          int v157 = (v154 & 1) + v154;
          if (v155 != 0.5) {
            int v157 = v156;
          }
          if (*(float *)&v143 >= 0.0) {
            int v158 = v157;
          }
          else {
            int v158 = -v157;
          }
          float v159 = -*((float *)&v143 + 1);
          if (*((float *)&v143 + 1) >= 0.0) {
            float v159 = *((float *)&v143 + 1);
          }
          int v160 = (int)v159;
          float v161 = v159 - (float)(int)v159;
          if (v161 < 0.5) {
            int v162 = v160;
          }
          else {
            int v162 = v160 + 1;
          }
          int v163 = (v160 & 1) + v160;
          if (v161 != 0.5) {
            int v163 = v162;
          }
          if (*((float *)&v143 + 1) >= 0.0) {
            int v164 = v163;
          }
          else {
            int v164 = -v163;
          }
          *(float *)&double v143 = (float)v147;
          sub_25B49DB70((uint64_t)&v246, 0xAuLL, v143, (float)v158);
          *(float *)&double v165 = (float)v152;
          sub_25B49DB70((uint64_t)&src, 0xAuLL, v165, (float)v164);
          unsigned int v238 = 0;
          sub_25B4347A0((uint64_t)v239, a7, &v238);
          sub_25B49DCF0((uint64_t)&v240, (uint64_t)v239, (uint64_t)&src);
        }
        ++v133;
        v132 += 176;
      }
      while (v133 < (v16 - v15) >> 2);
    }
    if (!(*(unsigned __int8 *)(a1 + 128) | v215))
    {
      long long v166 = (id *)v237[19];
      for (uint64_t i = (id *)v237[20]; v166 != i; ++v166)
      {
        id v169 = *v166;
        long long src = 0uLL;
        *(void *)&long long v243 = 0;
        v241[0] = 0;
        v241[1] = 0;
        BOOL v240 = v241;
        uint64_t v170 = v237[1];
        uint64_t v171 = v237[2];
        if (v170 != v171)
        {
          int v172 = 0;
          int v173 = 0;
          uint64_t v174 = v170 + 128;
          do
          {
            uint64_t v175 = *(unsigned __int8 *)(v174 + 47);
            if ((v175 & 0x80u) != 0) {
              uint64_t v175 = *(void *)(v174 + 32);
            }
            if (v175)
            {
              uint64_t v176 = objc_msgSend_parentIdentifier(*(void **)(v174 - 120), v167, v168);
              float32x4_t v179 = objc_msgSend_identifier(v169, v177, v178);
              int isEqual = objc_msgSend_isEqual_(v176, v180, (uint64_t)v179);

              if (isEqual)
              {
                uint64_t v182 = (long long *)*((void *)&src + 1);
                if (*((void *)&src + 1) >= (unint64_t)v243)
                {
                  uint64_t v184 = sub_25B4A2CF4((uint64_t *)&src, (long long *)v174);
                }
                else
                {
                  if (*(char *)(v174 + 23) < 0)
                  {
                    sub_25B4002F4(*((unsigned char **)&src + 1), *(void **)v174, *(void *)(v174 + 8));
                  }
                  else
                  {
                    long long v183 = *(_OWORD *)v174;
                    *(void *)(*((void *)&src + 1) + 16) = *(void *)(v174 + 16);
                    long long *v182 = v183;
                  }
                  uint64_t v184 = (uint64_t)v182 + 24;
                }
                *((void *)&src + 1) = v184;
                float32x2_t v186 = *(float32x2_t *)(v174 - 112);
                float32x2_t v185 = *(float32x2_t *)(v174 - 104);
                objc_msgSend_circleCenter(v169, v167, v168, v210);
                float32x2_t v187 = vsub_f32(v185, v186);
                float32x2_t v189 = vsub_f32(v188, *(float32x2_t *)(v174 - 112));
                if ((float)((float)(atan2f(vmlas_n_f32((float)-v187.f32[1] * v189.f32[0], v189.f32[1], v187.f32[0]), vmlas_n_f32(vmuls_lane_f32(v187.f32[1], v189, 1), v189.f32[0], v187.f32[0]))* 180.0)/ 3.1416) <= 0.0)
                {
                  *((_DWORD *)sub_25B4A2E18((uint64_t **)&v240, (void *)v174, v174) + 14) = 0;
                  ++v173;
                }
                else
                {
                  *((_DWORD *)sub_25B4A2E18((uint64_t **)&v240, (void *)v174, v174) + 14) = 1;
                  ++v172;
                }
              }
            }
            uint64_t v190 = v174 + 48;
            v174 += 176;
          }
          while (v190 != v171);
          float32x2_t v191 = (unsigned __int8 **)*((void *)&src + 1);
          float32x2_t v192 = (unsigned __int8 **)src;
          for (int j = v172 > v173; v192 != v191; v192 += 3)
          {
            if ((sub_25B491880(v237[1], v237[2], v192) & 1) != 0
              && *((_DWORD *)sub_25B4A2E18((uint64_t **)&v240, v192, (uint64_t)v192) + 14) != j)
            {
              uint64_t v194 = sub_25B490C80((uint64_t)v237, v192);
              objc_msgSend_quad(*(void **)(v194 + 8), v195, v196);
              long long v236 = v197;
              objc_msgSend_quad(*(void **)(v194 + 8), v198, v199);
              long long v233 = v200;
              objc_msgSend_quad(*(void **)(v194 + 8), v201, v202);
              long long v230 = v203;
              objc_msgSend_quad(*(void **)(v194 + 8), v204, v205);
              uint64_t v208 = *(void *)(v194 + 8);
              long long v246 = v236;
              long long v247 = v233;
              long long v248 = v230;
              long long v249 = v209;
              if (v208) {
                objc_copyStruct((void *)(v208 + 272), &v246, 64, 1, 0);
              }
              sub_25B47CB1C(v194, v206, v207);
            }
          }
        }
        sub_25B400248(v241[0]);
        *(void *)&long long v246 = &src;
        sub_25B41032C((void ***)&v246);
      }
    }
    int v12 = v224;
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_25B4A29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  sub_25B4900CC(&STACK[0x2A0]);
  if (v21) {
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

void sub_25B4A2C10(void *a1, void *a2, uint64_t *a3)
{
  id v14 = a1;
  id v7 = a2;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  while (v8 != v9)
  {
    int v10 = objc_msgSend_parentIdentifier(*(void **)(v8 + 8), v5, v6);

    if (v10)
    {
      int v11 = objc_msgSend_parentIdentifier(*(void **)(v8 + 8), v5, v6);
      int isEqual = objc_msgSend_isEqual_(v11, v12, (uint64_t)v14);

      if (isEqual) {
        sub_25B491958(v8, v7);
      }
    }
    v8 += 176;
  }
}

void sub_25B4A2CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B4A2CF4(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_25B3FBC4C();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v17 = v6;
  if (v7)
  {
    uint64_t v9 = (char *)sub_25B413D74(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  int v10 = &v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  uint64_t v15 = v10;
  uint64_t v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_25B4002F4(v10, *(void **)a2, *((void *)a2 + 1));
    int v10 = v15;
  }
  else
  {
    long long v11 = *a2;
    *((void *)v10 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v10 = v11;
  }
  uint64_t v15 = v10 + 24;
  sub_25B4A2F38(a1, v14);
  uint64_t v12 = a1[1];
  sub_25B4A2FBC((uint64_t)v14);
  return v12;
}

void sub_25B4A2E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4A2FBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_25B4A2E18(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        uint64_t v8 = v5 + 4;
        if ((sub_25B4954C0(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        long long v5 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((sub_25B4954C0(v8, a2) & 0x80) == 0) {
        return v6;
      }
      uint64_t v9 = v6 + 1;
      long long v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    int v10 = (char *)operator new(0x40uLL);
    long long v11 = v10 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_25B4002F4(v11, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long v11 = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v6;
    *uint64_t v9 = (uint64_t *)v10;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v9;
    }
    sub_25B3FA798(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_25B4A2F24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B4A2F38(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 24;
      long long v6 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  uint64_t *result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B4A2FBC(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B4A31AC(uint64_t a1, uint64_t a2, const void *a3)
{
  if (*(unsigned char *)(a2 + 137))
  {
    long long v6 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v7 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v8 = sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v8, (uint64_t)" ", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    int v10 = sub_25B406B20(v9, (uint64_t)" ", 1);
    long long v11 = sub_25B406B20(v10, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet(&v55, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v13 = std::locale::use_facet(&v55, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  sub_25B4A6A64(&v62, a3, (uint64_t)a3 + 12, 3uLL);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v15 = v62;
  id v14 = v63;
  sub_25B4A6AE0((uint64_t *)&v59, v62, v63, v63 - v62);
  uint64_t v53 = a2;
  uint64_t v54 = v15;
  if (v15 >= v14)
  {
    int v18 = -1;
  }
  else
  {
    int v16 = 0;
    unint64_t v17 = (void *)MEMORY[0x263F8C0F8];
    int v18 = -1;
    uint64_t v19 = (std::locale::id *)MEMORY[0x263F8C108];
    unint64_t v20 = v15;
    do
    {
      int v21 = *v20;
      if (*v20) {
        BOOL v22 = v21 <= -2;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        unint64_t v23 = (void *)std::ostream::operator<<();
        sub_25B406B20(v23, (uint64_t)" ", 1);
        sub_25B406B20(v23, (uint64_t)"reshape", 7);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
        uint64_t v24 = std::locale::use_facet(&v55, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v55);
        uint64_t v15 = v54;
        std::ostream::put();
        std::ostream::flush();
        LODWORD(v55.__locale_) = 200000000;
        sub_25B406FE0("err", "shape can only be -1 or integer between 1 and ");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        int v25 = std::locale::use_facet(&v55, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v55);
        std::ostream::put();
        std::ostream::flush();
        int v21 = *v20;
      }
      if (v21 != -1 || v18 == -1)
      {
        if (v21 == -1 && v18 == -1) {
          int v18 = v16;
        }
      }
      else
      {
        sub_25B406B20(v17, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v17, (uint64_t)" ", 1);
        uint64_t v28 = (void *)std::ostream::operator<<();
        sub_25B406B20(v28, (uint64_t)" ", 1);
        sub_25B406B20(v28, (uint64_t)"reshape", 7);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        uint64_t v29 = std::locale::use_facet(&v55, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(&v55);
        uint64_t v15 = v54;
        std::ostream::put();
        std::ostream::flush();
        sub_25B4A6C8C("err", "shape cannot be deduced");
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        uint64_t v30 = std::locale::use_facet(&v55, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v55);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v20;
      ++v16;
    }
    while (v20 < v14);
  }
  int v31 = 1;
  if (v15 == v14)
  {
    uint64_t v33 = v53;
  }
  else
  {
    float32x4_t v32 = v15;
    uint64_t v33 = v53;
    do
    {
      int v34 = *v32++;
      v31 *= v34;
    }
    while (v32 != v14);
  }
  if (v31 >= 0) {
    unint64_t v35 = v31;
  }
  else {
    unint64_t v35 = -v31;
  }
  unint64_t v36 = *(void *)(v33 + 104);
  if (v36 < v35 || v36 % v35)
  {
    uint64_t v37 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    float v38 = sub_25B406B20(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v38, (uint64_t)" ", 1);
    float v39 = (void *)MEMORY[0x263F8C0F8];
    int v40 = (void *)std::ostream::operator<<();
    sub_25B406B20(v40, (uint64_t)" ", 1);
    sub_25B406B20(v40, (uint64_t)"reshape", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
    int v41 = std::locale::use_facet(&v55, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4A6D98("err", "length not match, cannot reshape");
    std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
    uint64_t v42 = std::locale::use_facet(&v55, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v18 != -1) {
    *(void *)&v59[8 * v18] = *(void *)(v33 + 104) / v35;
  }
  sub_25B4382B4(__b, &v59);
  *(void *)a1 = &unk_2708F18C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 257;
  if (*(unsigned char *)(v33 + 136))
  {
    uint64_t v43 = *(void *)(v33 + 120);
    uint64_t v44 = *(void *)(v33 + 128);
    if (!v44)
    {
      *(void *)(a1 + 120) = v43;
      *(void *)(a1 + 128) = 0;
      goto LABEL_49;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v43;
    *(void *)(a1 + 128) = v44;
    if (!v45) {
      goto LABEL_49;
    }
  }
  else
  {
    sub_25B408640((uint64_t)&v55, (_OWORD *)(v33 + 8));
    sub_25B40A18C((uint64_t)&v55, v33);
    uint64_t v47 = v56;
    uint64_t v46 = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v47;
    *(void *)(a1 + 128) = v46;
    if (v48) {
      sub_25B404120(v48);
    }
    v55.__locale_ = (std::locale::__imp *)&unk_2708F1C28;
    uint64_t v45 = v57;
    if (!v57) {
      goto LABEL_49;
    }
  }
  sub_25B404120(v45);
LABEL_49:
  sub_25B43876C(a1 + 8, __b);
  uint64_t v49 = 0;
  *(unsigned char *)(a1 + 137) = 0;
  uint64_t v50 = 1;
  while (1)
  {
    uint64_t v51 = *(void *)(a1 + v49 + 24);
    if (v51 != 1) {
      break;
    }
LABEL_53:
    v49 -= 8;
    if (v49 == -24)
    {
      char v52 = 1;
      goto LABEL_56;
    }
  }
  if (*(void *)(a1 + v49 + 72) == v50)
  {
    v50 *= v51;
    goto LABEL_53;
  }
  char v52 = 0;
LABEL_56:
  *(unsigned char *)(a1 + 136) = v52;
  *(void *)(a1 + 144) = **(void **)(a1 + 120) + 4 * *(void *)(a1 + 112);
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v15) {
    operator delete(v15);
  }
}

void sub_25B4A3A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    sub_25B404120(a27);
  }
  void *v27 = v28;
  int v31 = (std::__shared_weak_count *)v27[16];
  if (v31) {
    sub_25B404120(v31);
  }
  float32x4_t v32 = *(void **)(v29 - 136);
  if (v32)
  {
    *(void *)(v29 - 128) = v32;
    operator delete(v32);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4A3B38(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 152;
      uint64_t v7 = v4 - 152;
      uint64_t v8 = v4 - 152;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B4A3BF8(uint64_t a1, void *a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v75 = a1;
  uint64_t v3 = a2[1] - *a2;
  if (!v3)
  {
    uint64_t v58 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v59 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v60 = sub_25B406B20(v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_concatenate.hpp", 113);
    sub_25B406B20(v60, (uint64_t)" ", 1);
    uint64_t v61 = (void *)std::ostream::operator<<();
    uint64_t v62 = sub_25B406B20(v61, (uint64_t)" ", 1);
    uint64_t v63 = sub_25B406B20(v62, (uint64_t)"concatenate", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
    uint64_t v64 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
    std::locale::~locale(v88);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4A684C("err", "at least 1 to concat");
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    uint64_t v65 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
    std::locale::~locale(v88);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v66 = *a2;
    long long v67 = *(_OWORD *)(*a2 + 24);
    long long v85 = *(_OWORD *)(*a2 + 8);
    long long v86 = v67;
    long long v87 = *(_OWORD *)(v66 + 40);
    *(void *)&long long v85 = 0;
    sub_25B4A5270(v75, &v85);
    return;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = v3 / 152;
  long long v7 = *(_OWORD *)(v2 + 24);
  long long v85 = *(_OWORD *)(v2 + 8);
  long long v86 = v7;
  long long v87 = *(_OWORD *)(v2 + 40);
  *(void *)&long long v85 = 0;
  if (v6 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v73 = v8;
  uint64_t v9 = 16;
  BOOL v10 = (void *)MEMORY[0x263F8C0F8];
  long long v11 = (std::locale::id *)MEMORY[0x263F8C108];
  do
  {
    uint64_t v70 = v5;
    uint64_t v71 = v4;
    uint64_t v12 = 0;
    id v68 = (void *)(*a2 + 152 * v5 + 8);
    uint64_t v69 = v9;
    uint64_t v13 = *a2 + v9;
    do
    {
      if (*(void *)(v13 + v12) != *(void *)((char *)&v85 + v12 + 8))
      {
        id v14 = sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
        uint64_t v15 = sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_concatenate.hpp", 113);
        sub_25B406B20(v15, (uint64_t)" ", 1);
        int v16 = (void *)std::ostream::operator<<();
        unint64_t v17 = sub_25B406B20(v16, (uint64_t)" ", 1);
        int v18 = sub_25B406B20(v17, (uint64_t)"concatenate", 11);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        uint64_t v19 = std::locale::use_facet(v88, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(v88);
        std::ostream::put();
        std::ostream::flush();
        sub_25B4A6958("err", "can not concat");
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        unint64_t v20 = std::locale::use_facet(v88, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v88);
        std::ostream::put();
        std::ostream::flush();
        a1 = v75;
      }
      v12 += 8;
    }
    while (v12 != 16);
    uint64_t v4 = *v68 + v71;
    uint64_t v5 = v70 + 1;
    uint64_t v9 = v69 + 152;
  }
  while (v70 + 1 != v73);
  *(void *)&long long v85 = *v68 + v71;
  sub_25B4A5270(a1, &v85);
  uint64_t v21 = 0;
  unsigned int v72 = 0;
  BOOL v22 = (long long *)(v75 + 8);
  do
  {
    uint64_t v23 = *a2;
    if (*(unsigned char *)(*a2 + 152 * v21 + 137))
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/tensor_concatenate.hpp", 113);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      sub_25B406B20(v24, (uint64_t)" ", 1);
      sub_25B406B20(v24, (uint64_t)"concatenate", 11);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
      int v25 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(v88);
      std::ostream::put();
      std::ostream::flush();
      sub_25B407E3C("err", "empty tensor");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      int v26 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(v88);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v23 = *a2;
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(v23 + 152 * v21 + 8);
    uint64_t v29 = (std::locale::__imp **)(v75 + 8);
    do
    {
      uint64_t v30 = *v29++;
      int v31 = &v88[v27];
      v31->__locale_ = 0;
      v31[1].__locale_ = v30;
      v31[2].__locale_ = (std::locale::__imp *)1;
      v27 += 3;
    }
    while (v27 != 9);
    unsigned int v32 = v72 + v28;
    sub_25B436AEC((uint64_t)v22, (uint64_t)v88, 0, v72, v72 + v28, 1);
    uint64_t v76 = &unk_2708F18C0;
    unsigned int v72 = v32;
    uint64_t v81 = 0;
    float32x4_t v82 = 0;
    __int16 v83 = 257;
    long long v33 = *(_OWORD *)(v75 + 88);
    v79[0] = *(_OWORD *)(v75 + 72);
    v79[1] = v33;
    long long v80 = *(_OWORD *)(v75 + 104);
    long long v34 = *(_OWORD *)(v75 + 24);
    long long v77 = *v22;
    v78[0] = v34;
    long long v35 = *(_OWORD *)(v75 + 56);
    unint64_t v36 = (unint64_t *)v89;
    uint64_t v37 = 56;
    v78[1] = *(_OWORD *)(v75 + 40);
    v78[2] = v35;
    do
    {
      uint64_t v38 = *(v36 - 2);
      unint64_t v39 = *(v36 - 1) - v38;
      unint64_t v40 = *v36;
      v36 += 3;
      float v41 = (float)v39 / (float)v40;
      uint64_t v42 = (void **)((char *)&v76 + v37);
      *uint64_t v42 = *(void *)((char *)&v76 + v37) * v40;
      uint64_t v43 = *(void *)(v75 + v37);
      *(v42 - 6) = vcvtps_u32_f32(v41);
      *((void *)&v80 + 1) += v43 * v38;
      v37 += 8;
    }
    while (v37 != 80);
    *(void *)&long long v80 = *((void *)&v77 + 1) * v77 * *(void *)&v78[0];
    uint64_t v44 = *(void **)(v75 + 120);
    uint64_t v45 = *(std::__shared_weak_count **)(v75 + 128);
    if (v45)
    {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v46 = v82;
      uint64_t v81 = v44;
      float32x4_t v82 = v45;
      if (v46)
      {
        sub_25B404120(v46);
        uint64_t v44 = v81;
      }
    }
    else
    {
      uint64_t v81 = *(void **)(v75 + 120);
    }
    uint64_t v47 = 0;
    uint64_t v84 = *v44 + 4 * *((void *)&v80 + 1);
    HIBYTE(v83) = 0;
    uint64_t v48 = 1;
    while (1)
    {
      uint64_t v49 = *(void *)((char *)v78 + v47);
      if (v49 != 1) {
        break;
      }
LABEL_26:
      v47 -= 8;
      if (v47 == -24)
      {
        char v50 = 1;
        goto LABEL_29;
      }
    }
    if (*(void *)((char *)v79 + v47) == v48)
    {
      v48 *= v49;
      goto LABEL_26;
    }
    char v50 = 0;
LABEL_29:
    LOBYTE(v83) = v50;
    uint64_t v51 = *a2;
    uint64_t v52 = *a2 + 152 * v21;
    if (*(unsigned char *)(v52 + 137))
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      uint64_t v53 = (void *)std::ostream::operator<<();
      sub_25B406B20(v53, (uint64_t)" ", 1);
      sub_25B406B20(v53, (uint64_t)"assign_from", 11);
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
      uint64_t v54 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
      std::locale::~locale(v88);
      std::ostream::put();
      std::ostream::flush();
      sub_25B40961C("err", "empty tensor in");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      std::locale v55 = std::locale::use_facet(v88, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
      std::locale::~locale(v88);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v44 = v81;
    }
    if (v44 == *(void **)(v51 + 152 * v21 + 120)
      && (uint64_t v56 = (long long *)(v51 + 152 * v21 + 8), !sub_25B45A5A4(&v77, v56)))
    {
      uint64_t v57 = sub_25B4A5270((uint64_t)v88, v56);
      sub_25B4A5D24(v57, v52);
      sub_25B4A5D24((uint64_t)&v76, (uint64_t)v88);
      v88[0].__locale_ = (std::locale::__imp *)&unk_2708F18C0;
      if (v90) {
        sub_25B404120(v90);
      }
    }
    else
    {
      sub_25B4A5D24((uint64_t)&v76, v52);
    }
    uint64_t v76 = &unk_2708F18C0;
    if (v82) {
      sub_25B404120(v82);
    }
    ++v21;
  }
  while (v21 != v73);
}

void sub_25B4A45E8(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 256));
  _Unwind_Resume(a1);
}

_OWORD *sub_25B4A46C8(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[6] = 0u;
  uint64_t v5 = a1 + 6;
  a1[7] = 0u;
  a1[8] = 0u;
  sub_25B4A6774((uint64_t)(a1 + 9), a2);
  unint64_t v6 = 0;
  long long v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v53 = a2 + 8;
  uint64_t v54 = a2;
  BOOL v10 = (void *)MEMORY[0x263F8C0F8];
  do
  {
    int v11 = *(_DWORD *)(a3 + 4 * v9);
    if (v11 >= 0) {
      unsigned int v12 = *(_DWORD *)(a3 + 4 * v9);
    }
    else {
      unsigned int v12 = -v11;
    }
    if (v12 >= 3)
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      uint64_t v13 = (void *)std::ostream::operator<<();
      sub_25B406B20(v13, (uint64_t)" ", 1);
      sub_25B406B20(v13, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      id v14 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45E1E0("err", "the absolute value of axis should be less than dim");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      uint64_t v15 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v11 < 0) {
      v11 += 3;
    }
    if (v11 >= 3)
    {
      sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v10, (uint64_t)" ", 1);
      int v16 = (void *)std::ostream::operator<<();
      sub_25B406B20(v16, (uint64_t)" ", 1);
      sub_25B406B20(v16, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
      unint64_t v17 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
      sub_25B435E20("err");
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      int v18 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
      if (v11 < 0)
      {
        sub_25B406B20(v10, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
        sub_25B406B20(v10, (uint64_t)" ", 1);
        uint64_t v19 = (void *)std::ostream::operator<<();
        sub_25B406B20(v19, (uint64_t)" ", 1);
        sub_25B406B20(v19, (uint64_t)"init", 4);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        unint64_t v20 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v56);
        std::ostream::put();
        std::ostream::flush();
        sub_25B435E20("err");
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        uint64_t v21 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v56);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v22 = (v7 - v6) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v8 - (void)v6) >> 2 > v23) {
        unint64_t v23 = (uint64_t)(v8 - (void)v6) >> 2;
      }
      if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      int v26 = (char *)(v24 + 8 * v22);
      *(void *)int v26 = v11;
      uint64_t v27 = v26 + 8;
      while (v7 != v6)
      {
        uint64_t v28 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v26 - 1) = v28;
        v26 -= 8;
      }
      unint64_t v8 = v24 + 8 * v25;
      if (v6) {
        operator delete(v6);
      }
      unint64_t v6 = v26;
      long long v7 = v27;
    }
    else
    {
      *(void *)long long v7 = v11;
      v7 += 8;
    }
    ++v9;
  }
  while (v9 != 3);
  if (v7 != v6)
  {
    uint64_t v29 = 0;
    char v30 = 0;
    unint64_t v31 = (v7 - v6) >> 3;
    unint64_t v32 = v31 - 1;
    if (v31 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = (v7 - v6) >> 3;
    }
    long long v34 = (uint64_t *)(v6 + 8);
    do
    {
      uint64_t v35 = v29 + 1;
      if (v29 + 1 < v31)
      {
        uint64_t v36 = *(void *)&v6[8 * v29];
        uint64_t v37 = v34;
        unint64_t v38 = v32;
        do
        {
          uint64_t v39 = *v37++;
          v30 |= v36 == v39;
          --v38;
        }
        while (v38);
      }
      --v32;
      ++v34;
      uint64_t v29 = v35;
    }
    while (v35 != v33);
    if (v30)
    {
      unint64_t v40 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
      float v41 = sub_25B406B20(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/transpose_helper.hpp", 119);
      sub_25B406B20(v41, (uint64_t)" ", 1);
      uint64_t v42 = (void *)MEMORY[0x263F8C0F8];
      uint64_t v43 = (void *)std::ostream::operator<<();
      sub_25B406B20(v43, (uint64_t)" ", 1);
      sub_25B406B20(v43, (uint64_t)"init", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
      uint64_t v44 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
      sub_25B408054("err", "duplicate dim idx");
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
      uint64_t v45 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  for (uint64_t i = 0; i != 24; i += 8)
    *(void *)((char *)a1 + i + 48) = *(void *)&v6[i];
  operator delete(v6);
  for (uint64_t j = 0; j != 24; j += 8)
    *(void *)((char *)a1 + j) = *(void *)(v53 + 8 * *(void *)((char *)a1 + j + 48));
  for (uint64_t k = 0; k != 3; ++k)
    *((void *)a1 + *((void *)a1 + k + 6) + 9) = k;
  for (unint64_t m = 0; m != 3; ++m)
  {
    *((void *)v5 + m) = 1;
    if (m <= 1)
    {
      unint64_t v50 = m;
      uint64_t v51 = 1;
      do
      {
        v51 *= *(void *)(v54 + 16 + 8 * v50);
        *((void *)v5 + m) = v51;
        ++v50;
      }
      while (v50 != 2);
    }
  }
  return a1;
}

void sub_25B4A4F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  if (v14) {
    operator delete(v14);
  }
  *(void *)(v15 + 144) = &unk_2708F18C0;
  unint64_t v17 = *(std::__shared_weak_count **)(v15 + 272);
  if (v17) {
    sub_25B404120(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B4A4FA0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 281))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    long long v7 = (void *)std::ostream::operator<<();
    unint64_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    uint64_t v9 = sub_25B406B20(v8, (uint64_t)"operator=", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    BOOL v10 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)v13);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40961C("err", "empty tensor in");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    int v11 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v13);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 137))
  {
    sub_25B43876C(a1 + 8, (long long *)a2);
    sub_25B408738((uint64_t)v13, *(void *)(a1 + 104));
  }
  if (*(void *)(a2 + 264) == *(void *)(a1 + 120))
  {
    sub_25B4A5270((uint64_t)v13, (long long *)a2);
    sub_25B4A5354((uint64_t)v13, a2);
    sub_25B4A5D24(a1, (uint64_t)v13);
    *(void *)&v13[0] = &unk_2708F18C0;
    if (v14) {
      sub_25B404120(v14);
    }
  }
  else
  {
    sub_25B4A5354(a1, a2);
  }
  return a1;
}

void sub_25B4A5228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_25B404120(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4A5270(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_2708F18C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  sub_25B43876C(a1 + 8, a2);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3) {
    sub_25B408738((uint64_t)&v5, v3);
  }
  *(unsigned char *)(a1 + 137) = 1;
  return a1;
}

void sub_25B4A533C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4A5354(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v98 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(result + 8);
  if (*(void *)(result + 8) == *(void *)a2
    && *(void *)(result + 16) == *(void *)(a2 + 8)
    && *(void *)(result + 24) == *(void *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 280))
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      uint64_t v5 = *(void *)(result + 104);
      uint64_t v6 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v5)
        {
          uint64_t v7 = 0;
          uint64_t v8 = *(void *)(a2 + 288);
          do
          {
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            do
            {
              BOOL result = *((void *)&v83 + *(void *)(a2 + v9 + 72));
              v10 += *(void *)(a2 + v9 + 96) * result;
              v9 += 8;
            }
            while (v9 != 24);
            uint64_t v11 = 0;
            *(_DWORD *)(v6 + 4 * v7) = *(_DWORD *)(v8 + 4 * v10);
            do
            {
              uint64_t v12 = *(void *)((char *)&v84 + v11) + 1;
              *(void *)((char *)&v84 + v11) = v12;
              if (v12 != *(void *)(v3 + 24 + v11)) {
                break;
              }
              *(void *)((char *)&v84 + v11) = 0;
              v11 -= 8;
            }
            while (v11 != -24);
            ++v7;
          }
          while (v7 != v5);
        }
      }
      else if (v5)
      {
        uint64_t v59 = 0;
        uint64_t v60 = *(void *)(a2 + 288);
        do
        {
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          do
          {
            v62 += *(void *)(v3 + 56 + v61) * *(void *)((char *)&v83 + v61);
            v61 += 8;
          }
          while (v61 != 24);
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          do
          {
            v64 += *(void *)(a2 + v63 + 96) * *((void *)&v83 + *(void *)(a2 + v63 + 72));
            v63 += 8;
          }
          while (v63 != 24);
          uint64_t v65 = 0;
          *(_DWORD *)(v6 + 4 * v62) = *(_DWORD *)(v60 + 4 * v64);
          do
          {
            uint64_t v66 = *(void *)((char *)&v84 + v65) + 1;
            *(void *)((char *)&v84 + v65) = v66;
            BOOL result = *(void *)(v3 + 24 + v65);
            if (v66 != result) {
              break;
            }
            *(void *)((char *)&v84 + v65) = 0;
            v65 -= 8;
          }
          while (v65 != -24);
          ++v59;
        }
        while (v59 != v5);
      }
    }
    else
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      uint64_t v53 = *(void *)(result + 104);
      uint64_t v54 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v53)
        {
          uint64_t v55 = 0;
          uint64_t v56 = result + 24;
          do
          {
            BOOL result = sub_25B4A66B8(a2, (uint64_t)&v83);
            uint64_t v57 = 0;
            *(_DWORD *)(v54 + 4 * v55) = result;
            do
            {
              uint64_t v58 = *(void *)((char *)&v84 + v57) + 1;
              *(void *)((char *)&v84 + v57) = v58;
              if (v58 != *(void *)(v56 + v57)) {
                break;
              }
              *(void *)((char *)&v84 + v57) = 0;
              v57 -= 8;
            }
            while (v57 != -24);
            ++v55;
          }
          while (v55 != v53);
        }
      }
      else if (v53)
      {
        uint64_t v67 = 0;
        uint64_t v68 = result + 56;
        uint64_t v69 = result + 24;
        do
        {
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          do
          {
            v71 += *(void *)(v68 + v70) * *(void *)((char *)&v83 + v70);
            v70 += 8;
          }
          while (v70 != 24);
          BOOL result = sub_25B4A66B8(a2, (uint64_t)&v83);
          uint64_t v72 = 0;
          *(_DWORD *)(v54 + 4 * v71) = result;
          do
          {
            uint64_t v73 = *(void *)((char *)&v84 + v72) + 1;
            *(void *)((char *)&v84 + v72) = v73;
            if (v73 != *(void *)(v69 + v72)) {
              break;
            }
            *(void *)((char *)&v84 + v72) = 0;
            v72 -= 8;
          }
          while (v72 != -24);
          ++v67;
        }
        while (v67 != v53);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 280))
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      long long v76 = 0u;
      memset(v75, 0, sizeof(v75));
      sub_25B43A3F0((uint64_t)&v83, v4, (_OWORD *)a2, (uint64_t)v75);
      if (*(void *)&v75[0] != *(void *)v4 || *(_OWORD *)((char *)v75 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        id v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v14, (uint64_t)" ", 1);
        uint64_t v15 = (void *)MEMORY[0x263F8C0F8];
        int v16 = (void *)std::ostream::operator<<();
        sub_25B406B20(v16, (uint64_t)" ", 1);
        sub_25B406B20(v16, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        unint64_t v17 = std::locale::use_facet(v80, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v80);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
        int v18 = std::locale::use_facet(v80, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(v80);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v82 = 0u;
      *(_OWORD *)&v80[0].__locale_ = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      uint64_t v19 = *(void *)(v3 + 104);
      uint64_t v20 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v19)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(a2 + 288);
          do
          {
            uint64_t v74 = 0;
            sub_25B43A810((uint64_t)&v83, (uint64_t)v80, &v74, (uint64_t)&v77);
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            do
            {
              v24 += *(void *)(a2 + v23 + 96) * *((void *)&v77 + *(void *)(a2 + v23 + 72));
              v23 += 8;
            }
            while (v23 != 24);
            *(_DWORD *)(v20 + 4 * v21) = *(_DWORD *)(v22 + 4 * v24);
            for (uint64_t i = 2; i != -1; --i)
            {
              int v26 = (std::locale::__imp *)((char *)v80[i].__locale_ + 1);
              v80[i].__locale_ = v26;
              if (v26 != *(std::locale::__imp **)((char *)v75 + i * 8)) {
                break;
              }
              v80[i].__locale_ = 0;
            }
            ++v21;
          }
          while (v21 != v19);
        }
      }
      else if (v19)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v3 + 56;
        uint64_t v40 = *(void *)(a2 + 288);
        do
        {
          uint64_t v74 = 0;
          sub_25B43A810((uint64_t)&v83, (uint64_t)v80, &v74, (uint64_t)&v77);
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          do
          {
            v42 += *(void *)(v39 + v41 * 8) * (uint64_t)v80[v41].__locale_;
            ++v41;
          }
          while (v41 != 3);
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          do
          {
            v44 += *(void *)(a2 + v43 + 96) * *((void *)&v77 + *(void *)(a2 + v43 + 72));
            v43 += 8;
          }
          while (v43 != 24);
          *(_DWORD *)(v20 + 4 * v42) = *(_DWORD *)(v40 + 4 * v44);
          for (uint64_t j = 2; j != -1; --j)
          {
            uint64_t v46 = (std::locale::__imp *)((char *)v80[j].__locale_ + 1);
            v80[j].__locale_ = v46;
            if (v46 != *(std::locale::__imp **)((char *)v75 + j * 8)) {
              break;
            }
            v80[j].__locale_ = 0;
          }
          ++v38;
        }
        while (v38 != v19);
      }
    }
    else
    {
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      long long v76 = 0u;
      memset(v75, 0, sizeof(v75));
      sub_25B43A3F0((uint64_t)&v83, v4, (_OWORD *)a2, (uint64_t)v75);
      if (*(void *)&v75[0] != *(void *)v4 || *(_OWORD *)((char *)v75 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v27 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v28 = sub_25B406B20(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v28, (uint64_t)" ", 1);
        uint64_t v29 = (void *)MEMORY[0x263F8C0F8];
        char v30 = (void *)std::ostream::operator<<();
        sub_25B406B20(v30, (uint64_t)" ", 1);
        sub_25B406B20(v30, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
        unint64_t v31 = std::locale::use_facet(v80, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        std::locale::~locale(v80);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        unint64_t v32 = std::locale::use_facet(v80, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
        std::locale::~locale(v80);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v82 = 0u;
      *(_OWORD *)&v80[0].__locale_ = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      uint64_t v33 = *(void *)(v3 + 104);
      uint64_t v34 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v33)
        {
          for (uint64_t k = 0; k != v33; ++k)
          {
            uint64_t v74 = 0;
            sub_25B43A810((uint64_t)&v83, (uint64_t)v80, &v74, (uint64_t)&v77);
            *(_DWORD *)(v34 + 4 * k) = sub_25B4A66B8(a2, (uint64_t)&v77);
            for (uint64_t m = 2; m != -1; --m)
            {
              uint64_t v37 = (std::locale::__imp *)((char *)v80[m].__locale_ + 1);
              v80[m].__locale_ = v37;
              if (v37 != *(std::locale::__imp **)((char *)v75 + m * 8)) {
                break;
              }
              v80[m].__locale_ = 0;
            }
          }
        }
      }
      else if (v33)
      {
        uint64_t v47 = 0;
        uint64_t v48 = v3 + 56;
        do
        {
          uint64_t v74 = 0;
          sub_25B43A810((uint64_t)&v83, (uint64_t)v80, &v74, (uint64_t)&v77);
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          do
          {
            v50 += *(void *)(v48 + v49 * 8) * (uint64_t)v80[v49].__locale_;
            ++v49;
          }
          while (v49 != 3);
          *(_DWORD *)(v34 + 4 * v50) = sub_25B4A66B8(a2, (uint64_t)&v77);
          for (uint64_t n = 2; n != -1; --n)
          {
            uint64_t v52 = (std::locale::__imp *)((char *)v80[n].__locale_ + 1);
            v80[n].__locale_ = v52;
            if (v52 != *(std::locale::__imp **)((char *)v75 + n * 8)) {
              break;
            }
            v80[n].__locale_ = 0;
          }
          ++v47;
        }
        while (v47 != v33);
      }
    }
    return sub_25B3F9500((uint64_t)&v83);
  }
  return result;
}

void sub_25B4A5CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_25B4A5D24(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_OWORD *)(result + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(result + 8) == *(void *)(a2 + 8)
    && *(void *)(result + 16) == *(void *)(a2 + 16)
    && *(void *)(result + 24) == *(void *)(a2 + 24))
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      uint64_t v6 = *(void *)(result + 104);
      uint64_t v7 = *(_DWORD **)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v6)
        {
          uint64_t v8 = *(int **)(a2 + 144);
          do
          {
            int v9 = *v8++;
            *v7++ = v9;
            --v6;
          }
          while (v6);
        }
      }
      else if (v6)
      {
        uint64_t v64 = 0;
        uint64_t v65 = *(void *)(a2 + 144);
        do
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          do
          {
            v67 += *(void *)(v3 + 56 + v66) * *(void *)((char *)&v86 + v66);
            v66 += 8;
          }
          while (v66 != 24);
          uint64_t v68 = 0;
          v7[v67] = *(_DWORD *)(v65 + 4 * v64);
          do
          {
            uint64_t v69 = *(void *)((char *)&v87 + v68) + 1;
            *(void *)((char *)&v87 + v68) = v69;
            BOOL result = *(void *)(v3 + 24 + v68);
            if (v69 != result) {
              break;
            }
            *(void *)((char *)&v87 + v68) = 0;
            v68 -= 8;
          }
          while (v68 != -24);
          ++v64;
        }
        while (v64 != v6);
      }
    }
    else
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      uint64_t v56 = *(void *)(result + 104);
      uint64_t v57 = *(void *)(result + 144);
      if (*(unsigned char *)(result + 136))
      {
        if (v56)
        {
          uint64_t v58 = 0;
          uint64_t v59 = *(void *)(a2 + 144);
          do
          {
            uint64_t v60 = 0;
            uint64_t v61 = 0;
            do
            {
              v61 += *(void *)(a2 + 56 + v60) * *(void *)((char *)&v86 + v60);
              v60 += 8;
            }
            while (v60 != 24);
            uint64_t v62 = 0;
            *(_DWORD *)(v57 + 4 * v58) = *(_DWORD *)(v59 + 4 * v61);
            do
            {
              uint64_t v63 = *(void *)((char *)&v87 + v62) + 1;
              *(void *)((char *)&v87 + v62) = v63;
              BOOL result = *(void *)(v3 + 24 + v62);
              if (v63 != result) {
                break;
              }
              *(void *)((char *)&v87 + v62) = 0;
              v62 -= 8;
            }
            while (v62 != -24);
            ++v58;
          }
          while (v58 != v56);
        }
      }
      else if (v56)
      {
        uint64_t v70 = 0;
        uint64_t v71 = *(void *)(a2 + 144);
        do
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          do
          {
            v73 += *(void *)(v3 + 56 + v72) * *(void *)((char *)&v86 + v72);
            v72 += 8;
          }
          while (v72 != 24);
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          do
          {
            v75 += *(void *)(a2 + 56 + v74) * *(void *)((char *)&v86 + v74);
            v74 += 8;
          }
          while (v74 != 24);
          BOOL result = 0;
          *(_DWORD *)(v57 + 4 * v73) = *(_DWORD *)(v71 + 4 * v75);
          do
          {
            uint64_t v76 = *(void *)((char *)&v87 + result) + 1;
            *(void *)((char *)&v87 + result) = v76;
            if (v76 != *(void *)(v3 + 24 + result)) {
              break;
            }
            *(void *)((char *)&v87 + result) = 0;
            result -= 8;
          }
          while (result != -24);
          ++v70;
        }
        while (v70 != v56);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 136))
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      long long v79 = 0u;
      memset(v78, 0, sizeof(v78));
      sub_25B43A3F0((uint64_t)&v86, v4, v5, (uint64_t)v78);
      if (*(void *)&v78[0] != *(void *)v4 || *(_OWORD *)((char *)v78 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v10 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v11 = sub_25B406B20(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v11, (uint64_t)" ", 1);
        uint64_t v12 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v13 = (void *)std::ostream::operator<<();
        sub_25B406B20(v13, (uint64_t)" ", 1);
        sub_25B406B20(v13, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
        id v14 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
        uint64_t v15 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v85 = 0u;
      *(_OWORD *)&v83[0].__locale_ = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      uint64_t v16 = *(void *)(v3 + 104);
      uint64_t v17 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v16)
        {
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)(a2 + 144);
          do
          {
            uint64_t v77 = 0;
            sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
            *(_DWORD *)(v17 + 4 * v18) = *(_DWORD *)(v19 + 4 * v77);
            for (uint64_t i = 2; i != -1; --i)
            {
              uint64_t v21 = (std::locale::__imp *)((char *)v83[i].__locale_ + 1);
              v83[i].__locale_ = v21;
              if (v21 != *(std::locale::__imp **)((char *)v78 + i * 8)) {
                break;
              }
              v83[i].__locale_ = 0;
            }
            ++v18;
          }
          while (v18 != v16);
        }
      }
      else if (v16)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v3 + 56;
        uint64_t v40 = *(void *)(a2 + 144);
        do
        {
          uint64_t v77 = 0;
          sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          do
          {
            v42 += *(void *)(v39 + v41 * 8) * (uint64_t)v83[v41].__locale_;
            ++v41;
          }
          while (v41 != 3);
          *(_DWORD *)(v17 + 4 * v42) = *(_DWORD *)(v40 + 4 * v77);
          for (uint64_t j = 2; j != -1; --j)
          {
            uint64_t v44 = (std::locale::__imp *)((char *)v83[j].__locale_ + 1);
            v83[j].__locale_ = v44;
            if (v44 != *(std::locale::__imp **)((char *)v78 + j * 8)) {
              break;
            }
            v83[j].__locale_ = 0;
          }
          ++v38;
        }
        while (v38 != v16);
      }
    }
    else
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      long long v79 = 0u;
      memset(v78, 0, sizeof(v78));
      sub_25B43A3F0((uint64_t)&v86, v4, v5, (uint64_t)v78);
      if (*(void *)&v78[0] != *(void *)v4 || *(_OWORD *)((char *)v78 + 8) != *(_OWORD *)(v3 + 16))
      {
        uint64_t v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v23, (uint64_t)" ", 1);
        uint64_t v24 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v25 = (void *)std::ostream::operator<<();
        sub_25B406B20(v25, (uint64_t)" ", 1);
        sub_25B406B20(v25, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        int v26 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v27 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v83);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v85 = 0u;
      *(_OWORD *)&v83[0].__locale_ = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      uint64_t v28 = *(void *)(v3 + 104);
      uint64_t v29 = *(void *)(v3 + 144);
      if (*(unsigned char *)(v3 + 136))
      {
        if (v28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = a2 + 56;
          int v32 = *(unsigned __int8 *)(a2 + 136);
          uint64_t v33 = *(void *)(a2 + 144);
          do
          {
            uint64_t v77 = 0;
            sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
            if (v32)
            {
              uint64_t v34 = v77;
            }
            else
            {
              uint64_t v35 = 0;
              uint64_t v34 = 0;
              do
              {
                v34 += *(void *)(v31 + v35) * *(void *)((char *)&v80 + v35);
                v35 += 8;
              }
              while (v35 != 24);
            }
            *(_DWORD *)(v29 + 4 * v30) = *(_DWORD *)(v33 + 4 * v34);
            for (uint64_t k = 2; k != -1; --k)
            {
              uint64_t v37 = (std::locale::__imp *)((char *)v83[k].__locale_ + 1);
              v83[k].__locale_ = v37;
              if (v37 != *(std::locale::__imp **)((char *)v78 + k * 8)) {
                break;
              }
              v83[k].__locale_ = 0;
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      else if (v28)
      {
        uint64_t v45 = 0;
        uint64_t v46 = v3 + 56;
        uint64_t v47 = a2 + 56;
        int v48 = *(unsigned __int8 *)(a2 + 136);
        uint64_t v49 = *(void *)(a2 + 144);
        do
        {
          uint64_t v77 = 0;
          sub_25B43A810((uint64_t)&v86, (uint64_t)v83, &v77, (uint64_t)&v80);
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          do
          {
            v51 += *(void *)(v46 + v50 * 8) * (uint64_t)v83[v50].__locale_;
            ++v50;
          }
          while (v50 != 3);
          if (v48)
          {
            uint64_t v52 = v77;
          }
          else
          {
            uint64_t v53 = 0;
            uint64_t v52 = 0;
            do
            {
              v52 += *(void *)(v47 + v53) * *(void *)((char *)&v80 + v53);
              v53 += 8;
            }
            while (v53 != 24);
          }
          *(_DWORD *)(v29 + 4 * v51) = *(_DWORD *)(v49 + 4 * v52);
          for (uint64_t m = 2; m != -1; --m)
          {
            uint64_t v55 = (std::locale::__imp *)((char *)v83[m].__locale_ + 1);
            v83[m].__locale_ = v55;
            if (v55 != *(std::locale::__imp **)((char *)v78 + m * 8)) {
              break;
            }
            v83[m].__locale_ = 0;
          }
          ++v45;
        }
        while (v45 != v28);
      }
    }
    return sub_25B3F9500((uint64_t)&v86);
  }
  return result;
}

void sub_25B4A6684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_25B4A66B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  do
  {
    uint64_t v4 = *(void *)(a2 + 8 * *(void *)(a1 + v2 + 72));
    *(void *)((char *)v7 + v2) = v4;
    v3 += *(void *)(a1 + v2 + 96) * v4;
    v2 += 8;
  }
  while (v2 != 24);
  if (!*(unsigned char *)(a1 + 280))
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
    do
    {
      v3 += *(void *)(a1 + 200 + v5) * *(void *)((char *)v7 + v5);
      v5 += 8;
    }
    while (v5 != 24);
  }
  return *(unsigned int *)(*(void *)(a1 + 288) + 4 * v3);
}

uint64_t sub_25B4A6774(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2708F18C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = v10;
    if (v11) {
      sub_25B404120(v11);
    }
  }
  else
  {
    *(void *)(a1 + 120) = v9;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t sub_25B4A684C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  long long v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  long long v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B4A6944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4A6958(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  long long v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  long long v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B4A6A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_25B4A6A64(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    BOOL result = sub_25B3FCA18(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B4A6AC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4A6AE0(uint64_t *a1, int *a2, int *a3, uint64_t a4)
{
  if (a4 < 1) {
    return;
  }
  long long v5 = a2;
  uint64_t v7 = a1 + 2;
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[1];
  if (a4 <= (v8 - v9) >> 3)
  {
    if (v9 >> 3 >= a4)
    {
      uint64_t v16 = &a2[a4];
      uint64_t v18 = (void *)a1[1];
    }
    else
    {
      uint64_t v16 = &a2[v9 >> 3];
      if (v16 == a3)
      {
        uint64_t v18 = (void *)a1[1];
      }
      else
      {
        uint64_t v17 = &a2[v9 >> 3];
        uint64_t v18 = (void *)a1[1];
        do
        {
          uint64_t v19 = *v17++;
          *v18++ = v19;
        }
        while (v17 != a3);
      }
      a1[1] = (uint64_t)v18;
      if (v9 < 1) {
        return;
      }
    }
    int64_t v24 = (int64_t)&v18[-a4];
    uint64_t v25 = v18;
    if (v24 < (unint64_t)v9)
    {
      int v26 = &v18[-a4];
      uint64_t v25 = v18;
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
      }
      while ((unint64_t)v26 < v9);
    }
    a1[1] = (uint64_t)v25;
    if (v18 != (void *)(8 * a4)) {
      memmove(&v18[-(v24 >> 3)], 0, v24);
    }
    if (v16 != v5)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v5++;
        *v28++ = v29;
      }
      while (v5 != v16);
    }
  }
  else
  {
    uint64_t v10 = *a1;
    unint64_t v11 = a4 + ((v9 - *a1) >> 3);
    if (v11 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v12 = -v10 >> 3;
    uint64_t v13 = v8 - v10;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    __p[4] = v7;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_25B3FCAD4(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v20 = (void *)(v14 + 8 * v12);
    __p[0] = (void *)v14;
    __p[1] = v20;
    __p[3] = (void *)(v14 + 8 * v15);
    uint64_t v21 = 8 * a4;
    uint64_t v22 = &v20[a4];
    do
    {
      uint64_t v23 = *v5++;
      *v20++ = v23;
      v21 -= 8;
    }
    while (v21);
    __p[2] = v22;
    sub_25B4A6EA4((void **)a1, (uint64_t)__p, 0);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_25B4A6C8C(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  long long v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B4A6D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4A6D98(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  long long v5 = (void *)MEMORY[0x263F8C0F8];
  long long v6 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)a1, v4);
  sub_25B406B20(v6, (uint64_t)" ", 1);
  size_t v7 = strlen(a2);
  sub_25B406B20(v5, (uint64_t)a2, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_25B4A6E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

char *sub_25B4A6EA4(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  long long v6 = (char *)*a1;
  size_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    size_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  std::locale v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    size_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_25B4A6F6C(void *a1)
{
  *a1 = &unk_2708F18C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[16];
  if (v1) {
    sub_25B404120(v1);
  }

  JUMPOUT(0x261163EE0);
}

void *sub_25B4A6FD8(void *a1)
{
  *a1 = &unk_2708F18C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    sub_25B404120(v2);
  }
  return a1;
}

void sub_25B4A7024(uint64_t a1)
{
  sub_25B4A705C(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B4A705C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F16B8;
  if (*(unsigned char *)(a1 + 496)) {
    sub_25B3F5FE8(a1 + 320);
  }
  *(void *)(a1 + 160) = &unk_2708F18C0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2) {
    sub_25B404120(v2);
  }
  *(void *)(a1 + 8) = &unk_2708F18C0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void sub_25B4A7108(float32x2_t *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  uint64_t v211 = a4;
  int64_t v12 = a8;
  __p[0] = (void *)0x700000001;
  LODWORD(__p[1]) = 1;
  uint64_t v206 = a6;
  sub_25B4AA9F4((uint64_t)v234, a6, (uint64_t)__p);
  if (v12)
  {
    uint64_t v13 = (const void *)v12[1];
    unint64_t v14 = (uint64_t)(v12[2] - (void)v13) >> 4;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
  }
  uint64_t v231 = 0;
  uint64_t v232 = 0;
  uint64_t v233 = 0;
  sub_25B487E48(&v231, v13, (uint64_t)v13 + 16 * v14, v14);
  if (v211)
  {
    float64x2_t v225 = v211[7];
    *(float64x2_t *)long long v229 = v211[5];
    unint64_t v15 = vextq_s8(*(int8x16_t *)v229, *(int8x16_t *)v229, 8uLL).u64[0];
  }
  else
  {
    v229[0] = 0;
    float64x2_t v225 = 0u;
    unint64_t v15 = 0;
  }
  float64_t v223 = *(double *)&v15;
  int v226 = v235;
  int v228 = v236;
  unint64_t v241 = 0;
  BOOL v240 = 0;
  unint64_t v242 = 0;
  uint64_t v16 = a2[1];
  long long v219 = a2;
  int v215 = a1;
  if (a2[2] != v16)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = v16 + 176 * v17 + 16;
      if (sub_25B47D97C((uint64_t)v231, (v232 - (uint64_t)v231) >> 4, v18))
      {
        __p[1] = 0;
        __p[0] = 0;
        *(void *)&long long v247 = 0;
        uint64_t v19 = (char *)operator new(8uLL);
        char v20 = 0;
        uint64_t v21 = 0;
        *(void *)uint64_t v19 = v17;
        uint64_t v22 = v19 + 8;
        *(void *)&long long v247 = v19 + 8;
        __p[0] = v19;
        __p[1] = v19 + 8;
        uint64_t v23 = v19 + 8;
        do
        {
          char v24 = v20;
          uint64_t v25 = (float32x2_t *)v219[1];
          uint64_t v26 = v219[2] - (void)v25;
          if (!v26) {
            goto LABEL_16;
          }
          unint64_t v27 = 0;
          unint64_t v28 = 0x2E8BA2E8BA2E8BA3 * (v26 >> 4);
          uint64_t v29 = v25 + 3;
          float v30 = 1.0;
          do
          {
            if (v17 != v27)
            {
              float v31 = sub_25B40DB9C(*(float32x2_t *)(v18 + 8 * v21), v29[-1], *v29, 0.00001);
              if (v30 > v31) {
                float v30 = v31;
              }
            }
            ++v27;
            v29 += 22;
          }
          while (v27 < v28);
          if (v30 > 0.1)
          {
LABEL_16:
            if (v22 >= v23)
            {
              uint64_t v33 = (v22 - v19) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((v23 - v19) >> 2 > v34) {
                unint64_t v34 = (v23 - v19) >> 2;
              }
              if ((unint64_t)(v23 - v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35) {
                unint64_t v35 = (unint64_t)sub_25B3FCAD4(v35);
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v37 = (uint64_t *)(v35 + 8 * v33);
              *uint64_t v37 = v21;
              int v32 = v37 + 1;
              while (v22 != v19)
              {
                uint64_t v38 = *((void *)v22 - 1);
                v22 -= 8;
                *--uint64_t v37 = v38;
              }
              uint64_t v23 = (char *)(v35 + 8 * v36);
              __p[0] = v37;
              __p[1] = v32;
              *(void *)&long long v247 = v23;
              if (v19) {
                operator delete(v19);
              }
              uint64_t v19 = (char *)v37;
            }
            else
            {
              *(void *)uint64_t v22 = v21;
              int v32 = v22 + 8;
            }
            __p[1] = v32;
            uint64_t v22 = (char *)v32;
          }
          char v20 = 1;
          uint64_t v21 = 1;
        }
        while ((v24 & 1) == 0);
        uint64_t v39 = v241;
        if ((unint64_t)v241 >= v242)
        {
          uint64_t v40 = sub_25B530A0C(&v240, (uint64_t)__p);
          a1 = v215;
        }
        else
        {
          void *v241 = 0;
          v39[1] = 0;
          v39[2] = 0;
          sub_25B46BD74(v39, __p[0], (uint64_t)v22, (v22 - (char *)__p[0]) >> 3);
          a1 = v215;
          uint64_t v40 = (uint64_t)(v39 + 3);
        }
        a2 = v219;
        unint64_t v241 = (void *)v40;
        if (__p[0]) {
          operator delete(__p[0]);
        }
      }
      ++v17;
      uint64_t v16 = a2[1];
    }
    while (v17 < 0x2E8BA2E8BA2E8BA3 * ((a2[2] - v16) >> 4));
  }
  int v214 = a2 + 1;
  *(void **)&v41.f64[0] = v229[0];
  v41.f64[1] = v223;
  float32x2_t v213 = vcvt_f32_f64(v225);
  float32x2_t v212 = vcvt_f32_f64(v41);
  uint64_t v42 = v240;
  uint64_t v43 = v241;
  if (v240 != v241)
  {
    uint64_t v216 = (uint64_t)&a1[1];
    uint64_t v210 = v241;
    do
    {
      if (v42[1] - *v42 >= 0x10uLL)
      {
        uint64_t v217 = v42;
        uint64_t v44 = (float32x2_t *)(*v214 + 176 * *(void *)*v42);
        float32x2_t v45 = vmul_f32(vadd_f32(v44[2], v213), v212);
        float32x2_t v46 = vadd_f32(v44[3], v213);
        float v47 = -v45.f32[0];
        if (v45.f32[0] >= 0.0) {
          float v47 = v45.f32[0];
        }
        int v48 = (int)v47;
        float32x2_t v49 = vmul_f32(v46, v212);
        float v50 = v47 - (float)(int)v47;
        if (v50 < 0.5) {
          int v51 = v48;
        }
        else {
          int v51 = v48 + 1;
        }
        int v52 = (v48 & 1) + v48;
        if (v50 != 0.5) {
          int v52 = v51;
        }
        if (v45.f32[0] >= 0.0) {
          int v53 = v52;
        }
        else {
          int v53 = -v52;
        }
        float v54 = -v45.f32[1];
        if (v45.f32[1] >= 0.0) {
          float v54 = v45.f32[1];
        }
        int v55 = (int)v54;
        float v56 = v54 - (float)(int)v54;
        if (v56 < 0.5) {
          int v57 = v55;
        }
        else {
          int v57 = v55 + 1;
        }
        int v58 = (v55 & 1) + v55;
        if (v56 != 0.5) {
          int v58 = v57;
        }
        if (v45.f32[1] >= 0.0) {
          int v59 = v58;
        }
        else {
          int v59 = -v58;
        }
        float v60 = -v49.f32[0];
        if (v49.f32[0] >= 0.0) {
          float v60 = v49.f32[0];
        }
        int v61 = (int)v60;
        float v62 = v60 - (float)(int)v60;
        if (v62 < 0.5) {
          int v63 = v61;
        }
        else {
          int v63 = v61 + 1;
        }
        int v64 = (v61 & 1) + v61;
        if (v62 != 0.5) {
          int v64 = v63;
        }
        if (v49.f32[0] >= 0.0) {
          int v65 = v64;
        }
        else {
          int v65 = -v64;
        }
        float v66 = v49.f32[1];
        float v67 = -v49.f32[1];
        if (v49.f32[1] >= 0.0) {
          float v67 = v49.f32[1];
        }
        int v68 = (int)v67;
        float v69 = v67 - (float)(int)v67;
        if (v69 < 0.5) {
          int v70 = v68;
        }
        else {
          int v70 = v68 + 1;
        }
        int v71 = (v68 & 1) + v68;
        if (v69 == 0.5) {
          int v72 = v71;
        }
        else {
          int v72 = v70;
        }
        uint64_t v73 = operator new(0x10uLL);
        uint64_t v74 = v73;
        if (v66 >= 0.0) {
          int v75 = v72;
        }
        else {
          int v75 = -v72;
        }
        *uint64_t v73 = __PAIR64__(v59, v53);
        v73[1] = __PAIR64__(v75, v65);
        uint64_t v42 = v217;
        if (v217[1] - *v217 >= 9uLL)
        {
          uint64_t v76 = *(void *)(*v217 + 8);
          __p[0] = (void *)0x2FFFFFFFFLL;
          sub_25B530B20((uint64_t)&v243, v216, __p);
          sub_25B45F2BC(__p, &v244);
          sub_25B45CE3C((uint64_t)&v239, __p);
          sub_25B45F2BC(__p, &v244);
          sub_25B45CE3C((uint64_t)&v238, __p);
          __p[0] = 0;
          if (v244)
          {
            unint64_t v77 = 0;
            long long v78 = (_DWORD *)&v74[v76] + 1;
            do
            {
              LODWORD(v245[0]) = 0;
              int v79 = *(_DWORD *)sub_25B53237C((uint64_t)&v243, __p, (int *)v245);
              int v230 = v74[v76];
              LODWORD(v245[0]) = 1;
              long long v80 = (_DWORD *)sub_25B53237C((uint64_t)&v243, __p, (int *)v245);
              if (((*v78 + *v80) & ~((*v78 + *v80) >> 31)) >= v228) {
                int v81 = v228 - 1;
              }
              else {
                int v81 = (*v78 + *v80) & ~((*v78 + *v80) >> 31);
              }
              long long v82 = (void *)sub_25B5327CC((uint64_t)&v239, (unint64_t *)__p);
              int v83 = (v230 + v79) & ~((v230 + v79) >> 31);
              if (v83 >= v226) {
                int v83 = v226 - 1;
              }
              *long long v82 = v83;
              *(void *)sub_25B5327CC((uint64_t)&v238, (unint64_t *)__p) = v81;
              __p[0] = (void *)++v77;
            }
            while (v77 < v244);
          }
          v245[0] = (void *)0x200000001;
          sub_25B5314C0((uint64_t)__p, (uint64_t)v234, (uint64_t)v245, (uint64_t)&v239, (uint64_t)&v238);
          sub_25B532BA0((uint64_t)&v237, __p);
        }
        operator delete(v73);
        a1 = v215;
        uint64_t v43 = v210;
      }
      v42 += 3;
    }
    while (v42 != v43);
  }
  __p[0] = &v240;
  sub_25B413C78((void ***)__p);
  long long v84 = v211;
  uint64_t v86 = v219[1];
  uint64_t v85 = v219[2];
  if (v85 != v86 && *(void *)(a3 + 16) != *(void *)(a3 + 8))
  {
    long long v87 = v231;
    uint64_t v88 = (v232 - (uint64_t)v231) >> 4;
    do
    {
      if (sub_25B47D97C((uint64_t)v87, v88, v86 + 16)) {
        goto LABEL_111;
      }
      v86 += 176;
    }
    while (v86 != v85);
    long long v89 = *(float32x2_t **)(a3 + 8);
    long long v90 = *(float32x2_t **)(a3 + 16);
    if (v89 == v90) {
LABEL_110:
    }
      sub_25B4AB770(a1[64].f32[1], (uint64_t)&v243, a5, v206, (int)a1[65].f32[0]);
    long long v91 = v89 + 2;
    while (1)
    {
      int v92 = sub_25B47D97C((uint64_t)v87, v88, (uint64_t)v91);
      int v93 = a1[62].i8[0] ? v92 : 0;
      if (v93 == 1 && !sub_25B537C60(*v91, v91[1], a1[42], a1[43], 0.1, 0.9)) {
        break;
      }
      long long v94 = v91 + 20;
      v91 += 22;
      if (v94 == v90) {
        goto LABEL_110;
      }
    }
  }
LABEL_111:

  float32x2_t v227 = v84;
  long long v96 = v219;
  uint64_t v97 = v219[1];
  uint64_t v224 = v219[2];
  uint64_t v98 = a3;
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v224 - v97) >> 4)) < 2) {
    goto LABEL_212;
  }
  unint64_t v99 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  if (v99 < 2) {
    goto LABEL_212;
  }
  float v100 = v211 ? *((float *)&v227->f64[1] + 1) : 0.0;
  if (v97 == v224) {
    goto LABEL_212;
  }
  unint64_t v218 = 0;
  uint64_t v101 = 0;
  id v221 = 0;
  float v102 = 0.3 / v100;
  float v220 = v102;
  int v222 = v99 - 1171354717 * ((v224 - v97) >> 4);
  float v103 = 20.0;
  while (1)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v97 + 16);
    float32x2_t v104 = vsub_f32((float32x2_t)__p[0], (float32x2_t)__p[1]);
    if (sqrtf(vaddv_f32(vmul_f32(v104, v104))) >= 0.5 && v222 >= 1) {
      break;
    }
LABEL_122:
    v97 += 176;
    if (v97 == v224)
    {
      uint64_t v174 = (char *)v101 - (char *)v221;
      if (v101 != v221)
      {
        uint64_t v175 = 0;
        unint64_t v176 = v174 >> 2;
        if (v176 <= 1) {
          uint64_t v177 = 1;
        }
        else {
          uint64_t v177 = v176;
        }
        do
        {
          sub_25B47C6E4((uint64_t)__p, *(void *)(v98 + 8) + 176 * v221[v175], v95);
          uint64_t v179 = v96[1];
          unint64_t v180 = v96[2];
          if (v180 == v179)
          {
LABEL_204:
            int v248 = 1;
            if (v180 >= v96[3])
            {
              uint64_t v205 = sub_25B47C818(v214, (uint64_t)__p, v178);
            }
            else
            {
              sub_25B47C6E4(v180, (uint64_t)__p, v178);
              uint64_t v205 = v180 + 176;
              v96[2] = v180 + 176;
            }
            v96[2] = v205;
          }
          else
          {
            unint64_t v181 = 0;
            long long v182 = v247;
            float32x2_t v183 = vsub_f32(*(float32x2_t *)&v247, *(float32x2_t *)((char *)&v247 + 8));
            float v184 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v183, v183))), 0.000001);
            unint64_t v185 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v180 - v179) >> 4);
            float32x2_t v186 = (_DWORD *)(v179 + 112);
            while (1)
            {
              if (*v186 == 1)
              {
                float32x2_t v187 = *(float32x2_t *)(v186 - 24);
                float32x2_t v188 = *(float32x2_t *)(v186 - 22);
                sub_25B40D638();
                float32x2_t v191 = vsub_f32(v189, v190);
                float v192 = sqrtf(vaddv_f32(vmul_f32(v191, v191))) / v184;
                sub_25B40D638();
                float32x2_t v195 = vsub_f32(v193, v194);
                float32x2_t v196 = vsub_f32(v187, v188);
                float v197 = sqrtf(vaddv_f32(vmul_f32(v195, v195))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v196, v196))), 0.000001);
                if (v192 >= v197) {
                  float v197 = v192;
                }
                if (v197 > 0.8)
                {
                  float32x2_t v198 = vsub_f32(v188, v187);
                  float v199 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v182 + 8), v187), v198));
                  float v200 = vaddv_f32(vmul_f32(v198, v198));
                  if (v200 < 0.000001) {
                    float v200 = 0.000001;
                  }
                  float32x2_t v201 = vsub_f32(vmla_n_f32(v187, v198, v199 / v200), *(float32x2_t *)((char *)&v182 + 8));
                  float v202 = sqrtf(vaddv_f32(vmul_f32(v201, v201)));
                  float32x2_t v203 = vsub_f32(vmla_n_f32(v187, v198, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v182, v187), v198)) / v200), *(float32x2_t *)&v182);
                  float v204 = sqrtf(vaddv_f32(vmul_f32(v203, v203)));
                  if (v204 >= v202) {
                    float v202 = v204;
                  }
                  if (v202 < 0.3) {
                    break;
                  }
                }
              }
              ++v181;
              v186 += 44;
              if (v185 <= v181) {
                goto LABEL_204;
              }
            }
          }
          sub_25B3F5FE8((uint64_t)__p);
          ++v175;
        }
        while (v175 != v177);
        uint64_t v101 = v221;
      }
      if (v101) {
        operator delete(v101);
      }
LABEL_212:

      sub_25B537D50(v245, a7, v227);
    }
  }
  unint64_t v106 = 0;
  uint64_t v107 = v101;
  while (1)
  {
    uint64_t v108 = v96[1];
    unint64_t v109 = 0x2E8BA2E8BA2E8BA3 * ((v96[2] - v108) >> 4);
    BOOL v110 = v106 >= v109;
    float32x2_t v111 = (_OWORD *)(*(void *)(v98 + 8) + 176 * (v106 - v109) + 16);
    uint64_t v112 = v108 + 176 * v106 + 16;
    if (!v110) {
      float32x2_t v111 = (_OWORD *)v112;
    }
    *(_OWORD *)long long v245 = *v111;
    int32x2_t v113 = v245[0];
    int32x2_t v114 = v245[1];
    float32x2_t v115 = vsub_f32((float32x2_t)v245[0], (float32x2_t)v245[1]);
    float v116 = sqrtf(vaddv_f32(vmul_f32(v115, v115)));
    if (v116 >= 0.5)
    {
      float v117 = sub_25B3FCCE0((float32x2_t *)__p, (float32x2_t *)v245, 0);
      if (v117 <= v103 || v117 >= 160.0)
      {
        uint64_t v118 = __p[0];
        long long v119 = __p[1];
        sub_25B40D638();
        float32x2_t v122 = vsub_f32(v120, v121);
        float32x2_t v123 = vsub_f32((float32x2_t)v118, (float32x2_t)v119);
        float v124 = sqrtf(vaddv_f32(vmul_f32(v122, v122))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v123, v123))), 0.000001);
        sub_25B40D638();
        float32x2_t v127 = vsub_f32(v125, v126);
        float v128 = sqrtf(vaddv_f32(vmul_f32(v127, v127)));
        float v129 = fmaxf(v116, 0.000001);
        float v130 = v128 / v129;
        BOOL v131 = v124 <= (float)(v128 / v129);
        if (v124 >= (float)(v128 / v129)) {
          float v132 = v124;
        }
        else {
          float v132 = v128 / v129;
        }
        if (v131)
        {
          float32x2_t v139 = vsub_f32((float32x2_t)v119, (float32x2_t)v118);
          float v140 = vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v113, (float32x2_t)v118), v139));
          float v141 = vaddv_f32(vmul_f32(v139, v139));
          if (v141 < 0.000001) {
            float v141 = 0.000001;
          }
          float32x2_t v142 = vsub_f32(vmla_n_f32((float32x2_t)v118, v139, v140 / v141), (float32x2_t)v113);
          float v137 = sqrtf(vaddv_f32(vmul_f32(v142, v142)));
          float32x2_t v138 = vsub_f32(vmla_n_f32((float32x2_t)v118, v139, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v114, (float32x2_t)v118), v139)) / v141), (float32x2_t)v114);
        }
        else
        {
          float32x2_t v133 = vsub_f32((float32x2_t)v114, (float32x2_t)v113);
          float v134 = vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v118, (float32x2_t)v113), v133));
          float v135 = vaddv_f32(vmul_f32(v133, v133));
          if (v135 < 0.000001) {
            float v135 = 0.000001;
          }
          float32x2_t v136 = vsub_f32(vmla_n_f32((float32x2_t)v113, v133, v134 / v135), (float32x2_t)v118);
          float v137 = sqrtf(vaddv_f32(vmul_f32(v136, v136)));
          float32x2_t v138 = vsub_f32(vmla_n_f32((float32x2_t)v113, v133, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v119, (float32x2_t)v113), v133)) / v135), (float32x2_t)v119);
        }
        float32x2_t v143 = vmul_f32(v138, v138);
        if (v132 <= 0.8) {
          goto LABEL_156;
        }
        float v144 = sqrtf(vaddv_f32(v143));
        float v145 = v137 >= v144 ? v137 : v144;
        if (v145 >= 0.9) {
          goto LABEL_156;
        }
        if (v144 >= v137) {
          float v144 = v137;
        }
        if (v144 <= 0.3) {
          goto LABEL_156;
        }
        float32x2_t v146 = vsub_f32((float32x2_t)v114, (float32x2_t)v113);
        float v147 = vaddv_f32(vmul_f32(v146, v146));
        if (v147 >= 0.000001) {
          float v148 = v147;
        }
        else {
          float v148 = 0.000001;
        }
        if (v211)
        {
          float64x2_t v149 = v227[7];
          float64x2_t v150 = v227[8];
          float64x2_t v151 = v227[5];
          double v152 = v227[6].f64[0];
          unint64_t v153 = vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
        }
        else
        {
          v151.f64[0] = 0.0;
          float64x2_t v149 = 0uLL;
          v150.f64[0] = 0.0;
          unint64_t v153 = 0;
          double v152 = 0.0;
        }
        float32x2_t v154 = vmla_n_f32((float32x2_t)v113, v146, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v118, (float32x2_t)v113), v146)) / v148);
        float32x2_t v155 = vmla_n_f32((float32x2_t)v113, v146, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v119, (float32x2_t)v113), v146)) / v148);
        *(void *)&v151.f64[1] = v153;
        v146.f32[0] = v220;
        if (sub_25B4AB5E4(a5, v154, v155, v149, v150.f64[0], v151, v152, *(double *)&v146) < 10.0 && v124 > 0.8)
        {
          *(_DWORD *)(v97 + 112) = 1;
          uint64_t v101 = v107;
          float v103 = 20.0;
          goto LABEL_122;
        }
        if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v96[2] - v96[1]) >> 4) > v106)
        {
LABEL_156:
          uint64_t v101 = v107;
          float v103 = 20.0;
          goto LABEL_157;
        }
        float32x2_t v157 = vsub_f32((float32x2_t)v119, (float32x2_t)v118);
        float v158 = vaddv_f32(vmul_f32(v157, v157));
        if (v158 >= 0.000001) {
          *(float *)&double v156 = v158;
        }
        else {
          *(float *)&double v156 = 0.000001;
        }
        if (v211)
        {
          float64x2_t v159 = v227[7];
          float64x2_t v160 = v227[8];
          float64x2_t v161 = v227[5];
          double v162 = v227[6].f64[0];
          unint64_t v163 = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
        }
        else
        {
          v161.f64[0] = 0.0;
          float64x2_t v159 = 0uLL;
          v160.f64[0] = 0.0;
          unint64_t v163 = 0;
          double v162 = 0.0;
        }
        float32x2_t v164 = vmla_n_f32((float32x2_t)v118, v157, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v113, (float32x2_t)v118), v157)) / *(float *)&v156);
        *(void *)&v161.f64[1] = v163;
        float32x2_t v165 = vmla_n_f32((float32x2_t)v118, v157, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v114, (float32x2_t)v118), v157)) / *(float *)&v156);
        *(float *)&double v156 = v220;
        float v103 = 20.0;
        if (sub_25B4AB5E4(a5, v164, v165, v159, v160.f64[0], v161, v162, v156) < 10.0 && v130 > 0.8)
        {
          int v166 = v106 + 1171354717 * ((v96[2] - v96[1]) >> 4);
          if ((unint64_t)v107 >= v218)
          {
            uint64_t v167 = v107 - v221;
            unint64_t v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v218 - (void)v221) >> 1 > v168) {
              unint64_t v168 = (uint64_t)(v218 - (void)v221) >> 1;
            }
            if (v218 - (unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v169 = v168;
            }
            if (v169) {
              unint64_t v169 = (unint64_t)sub_25B3FBC64(v169);
            }
            else {
              uint64_t v170 = 0;
            }
            uint64_t v171 = (int *)(v169 + 4 * v167);
            int *v171 = v166;
            uint64_t v101 = v171 + 1;
            if (v107 == v221)
            {
              uint64_t v98 = a3;
              int v172 = v221;
            }
            else
            {
              uint64_t v98 = a3;
              int v172 = v221;
              do
              {
                int v173 = *--v107;
                *--uint64_t v171 = v173;
              }
              while (v107 != v221);
            }
            unint64_t v218 = v169 + 4 * v170;
            if (v172) {
              operator delete(v172);
            }
            id v221 = v171;
            long long v96 = v219;
          }
          else
          {
            *uint64_t v107 = v166;
            uint64_t v101 = v107 + 1;
            uint64_t v98 = a3;
          }
          goto LABEL_157;
        }
      }
    }
    uint64_t v101 = v107;
LABEL_157:
    ++v106;
    uint64_t v107 = v101;
    if (v106 == v222) {
      goto LABEL_122;
    }
  }
}

void sub_25B4AA378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_25B3F5FE8((uint64_t)&STACK[0x530]);
  if (LOBYTE(STACK[0x920])) {
    sub_25B3F5FE8((uint64_t)&STACK[0x870]);
  }
  if (v70) {
    operator delete(v70);
  }

  STACK[0x6D8] = (unint64_t)&unk_2708F18E0;
  if (STACK[0x758]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x758]);
  }

  if (__p) {
    operator delete(__p);
  }
  if (a68) {
    sub_25B404120(a68);
  }

  _Unwind_Resume(a1);
}

void sub_25B4AA9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[7] = *MEMORY[0x263EF8340];
  long long v5 = v9;
  for (uint64_t i = 8; i != 32; i += 8)
  {
    uint64_t v7 = *(void *)(a2 + i);
    *(v5 - 2) = 0;
    *(v5 - 1) = v7;
    void *v5 = 1;
    v5 += 3;
  }
  sub_25B436AEC(a2 + 8, (uint64_t)v8, 0, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8));
  sub_25B4360E0(a1, a2, (uint64_t)v8);
}

int *sub_25B4AAAA0(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    int64_t v12 = a2 - 1;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v46 = *v12;
                uint64_t v47 = *v13;
                if (*(float *)(**a3 + 4 * v46) > *(float *)(**a3 + 4 * v47))
                {
                  *uint64_t v13 = v46;
                  *int64_t v12 = v47;
                }
                break;
              case 3uLL:
                uint64_t v48 = **a3;
                BOOL result = sub_25B4AB268(v13, v13 + 1, a2 - 1, v48);
                break;
              case 4uLL:
                BOOL result = sub_25B4AB2F0(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                float32x2_t v49 = v13 + 2;
                float v50 = v13 + 3;
                BOOL result = sub_25B4AB2F0(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v51 = *v12;
                uint64_t v52 = v13[3];
                uint64_t v53 = **a3;
                if (*(float *)(v53 + 4 * v51) > *(float *)(v53 + 4 * v52))
                {
                  *float v50 = v51;
                  *int64_t v12 = v52;
                  uint64_t v54 = *v50;
                  uint64_t v55 = *v49;
                  float v56 = *(float *)(v53 + 4 * v54);
                  if (v56 > *(float *)(v53 + 4 * v55))
                  {
                    *float32x2_t v49 = v54;
                    *float v50 = v55;
                    uint64_t v57 = v13[1];
                    if (v56 > *(float *)(v53 + 4 * v57))
                    {
                      v13[1] = v54;
                      void v13[2] = v57;
                      uint64_t v58 = *v13;
                      if (v56 > *(float *)(v53 + 4 * v58))
                      {
                        *uint64_t v13 = v54;
                        v13[1] = v58;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                int v59 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v60 = **a3;
                  uint64_t v61 = 4;
                  float v62 = v13;
                  do
                  {
                    uint64_t v64 = *v62;
                    uint64_t v63 = v62[1];
                    float v62 = v59;
                    float v65 = *(float *)(v60 + 4 * v63);
                    if (v65 > *(float *)(v60 + 4 * v64))
                    {
                      uint64_t v66 = v61;
                      do
                      {
                        *(int *)((char *)v13 + v66) = v64;
                        uint64_t v67 = v66 - 4;
                        if (v66 == 4)
                        {
                          int v68 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v64 = *(int *)((char *)v13 + v66 - 8);
                        v66 -= 4;
                      }
                      while (v65 > *(float *)(v60 + 4 * v64));
                      int v68 = (int *)((char *)v13 + v67);
LABEL_78:
                      int *v68 = v63;
                    }
                    int v59 = v62 + 1;
                    v61 += 4;
                  }
                  while (v62 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              float v100 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v101 = **a3;
                do
                {
                  uint64_t v103 = *v11;
                  uint64_t v102 = v11[1];
                  uint64_t v11 = v100;
                  float v104 = *(float *)(v101 + 4 * v102);
                  if (v104 > *(float *)(v101 + 4 * v103))
                  {
                    do
                    {
                      int *v100 = v103;
                      uint64_t v103 = *(v100 - 2);
                      --v100;
                    }
                    while (v104 > *(float *)(v101 + 4 * v103));
                    int *v100 = v102;
                  }
                  float v100 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v69 = (v15 - 2) >> 1;
              int v70 = *a3;
              int64_t v71 = v69;
              do
              {
                int64_t v72 = v71;
                if (v69 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  uint64_t v74 = &v13[v73];
                  uint64_t v75 = 2 * v71 + 2;
                  uint64_t v76 = *v70;
                  if (v75 < (uint64_t)v15 && *(float *)(v76 + 4 * *v74) > *(float *)(v76 + 4 * v74[1]))
                  {
                    ++v74;
                    uint64_t v73 = 2 * v72 + 2;
                  }
                  BOOL result = &v13[v72];
                  uint64_t v77 = *v74;
                  uint64_t v78 = *result;
                  float v79 = *(float *)(v76 + 4 * v78);
                  if (*(float *)(v76 + 4 * v77) <= v79)
                  {
                    do
                    {
                      long long v80 = v74;
                      uint64_t *result = v77;
                      if (v69 < v73) {
                        break;
                      }
                      uint64_t v81 = 2 * v73;
                      uint64_t v73 = (2 * v73) | 1;
                      uint64_t v74 = &v13[v73];
                      uint64_t v82 = v81 + 2;
                      if (v82 < (uint64_t)v15 && *(float *)(v76 + 4 * *v74) > *(float *)(v76 + 4 * v74[1]))
                      {
                        ++v74;
                        uint64_t v73 = v82;
                      }
                      uint64_t v77 = *v74;
                      BOOL result = v80;
                    }
                    while (*(float *)(v76 + 4 * v77) <= v79);
                    *long long v80 = v78;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              uint64_t v83 = (unint64_t)v14 >> 2;
              do
              {
                uint64_t v84 = 0;
                int v85 = *v13;
                uint64_t v86 = *a3;
                long long v87 = v13;
                do
                {
                  uint64_t v88 = v87;
                  v87 += v84 + 1;
                  uint64_t v89 = 2 * v84;
                  uint64_t v84 = (2 * v84) | 1;
                  uint64_t v90 = v89 + 2;
                  if (v90 < v83)
                  {
                    BOOL result = (int *)v87[1];
                    if (*(float *)(*v86 + 4 * *v87) > *(float *)(*v86 + 4 * (void)result))
                    {
                      ++v87;
                      uint64_t v84 = v90;
                    }
                  }
                  *uint64_t v88 = *v87;
                }
                while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
                if (v87 == --a2)
                {
                  *long long v87 = v85;
                }
                else
                {
                  *long long v87 = *a2;
                  *a2 = v85;
                  uint64_t v91 = (char *)v87 - (char *)v13 + 4;
                  if (v91 >= 5)
                  {
                    unint64_t v92 = (((unint64_t)v91 >> 2) - 2) >> 1;
                    int v93 = &v13[v92];
                    uint64_t v94 = *v93;
                    uint64_t v95 = *v87;
                    uint64_t v96 = *v86;
                    float v97 = *(float *)(v96 + 4 * v95);
                    if (*(float *)(v96 + 4 * v94) > v97)
                    {
                      do
                      {
                        uint64_t v98 = v93;
                        *long long v87 = v94;
                        if (!v92) {
                          break;
                        }
                        unint64_t v92 = (v92 - 1) >> 1;
                        int v93 = &v13[v92];
                        uint64_t v94 = *v93;
                        long long v87 = v98;
                      }
                      while (*(float *)(v96 + 4 * v94) > v97);
                      *uint64_t v98 = v95;
                    }
                  }
                }
              }
              while (v83-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          unint64_t v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x201)
          {
            sub_25B4AB268(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B4AB268(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B4AB268(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            BOOL result = sub_25B4AB268(v17 - 1, v17, &v11[v16 + 1], **a3);
            int v19 = *v11;
            int *v11 = *v17;
            *unint64_t v17 = v19;
          }
          else
          {
            BOOL result = sub_25B4AB268(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          int v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          float v22 = *(float *)(v21 + 4 * v20);
          if (*(float *)(v21 + 4 * *(v11 - 1)) > v22) {
            goto LABEL_13;
          }
          if (v22 <= *(float *)(v21 + 4 * *v12))
          {
            uint64_t v38 = v11 + 1;
            do
            {
              uint64_t v13 = v38;
              if (v38 >= a2) {
                break;
              }
              ++v38;
            }
            while (v22 <= *(float *)(v21 + 4 * *v13));
          }
          else
          {
            uint64_t v13 = v11;
            do
            {
              uint64_t v37 = v13[1];
              ++v13;
            }
            while (v22 <= *(float *)(v21 + 4 * v37));
          }
          uint64_t v39 = a2;
          if (v13 < a2)
          {
            uint64_t v39 = a2;
            do
              uint64_t v40 = *--v39;
            while (v22 > *(float *)(v21 + 4 * v40));
          }
          if (v13 < v39)
          {
            int v41 = *v13;
            int v42 = *v39;
            do
            {
              *uint64_t v13 = v42;
              int *v39 = v41;
              do
              {
                uint64_t v43 = v13[1];
                ++v13;
                int v41 = v43;
              }
              while (v22 <= *(float *)(v21 + 4 * v43));
              do
              {
                uint64_t v44 = *--v39;
                int v42 = v44;
              }
              while (v22 > *(float *)(v21 + 4 * v44));
            }
            while (v13 < v39);
          }
          float32x2_t v45 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            int *v11 = *v45;
          }
          a5 = 0;
          *float32x2_t v45 = v20;
        }
        float v22 = *(float *)(v21 + 4 * v20);
LABEL_13:
        uint64_t v23 = v11;
        do
        {
          char v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          int v25 = v26;
        }
        while (*(float *)(v21 + 4 * v26) > v22);
        unint64_t v27 = a2;
        if (v24 == v11)
        {
          unint64_t v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(float *)(v21 + 4 * v29) <= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(float *)(v21 + 4 * v28) <= v22);
        }
        if (v23 < v27)
        {
          int v30 = *v27;
          int v31 = v25;
          int v32 = v23;
          uint64_t v33 = v27;
          do
          {
            *int v32 = v30;
            *uint64_t v33 = v31;
            do
            {
              char v24 = v32;
              uint64_t v34 = v32[1];
              ++v32;
              int v31 = v34;
            }
            while (*(float *)(v21 + 4 * v34) > v22);
            do
            {
              uint64_t v35 = *--v33;
              int v30 = v35;
            }
            while (*(float *)(v21 + 4 * v35) <= v22);
          }
          while (v32 < v33);
        }
        if (v24 != v11) {
          int *v11 = *v24;
        }
        int *v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        BOOL result = (int *)sub_25B4AAAA0(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v24 + 1;
      }
      BOOL v36 = sub_25B4AB3A4(v11, v24, a3);
      uint64_t v13 = v24 + 1;
      BOOL result = (int *)sub_25B4AB3A4(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v36) {
      continue;
    }
    return result;
  }
}

int *sub_25B4AB268(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + 4 * v4);
  float v7 = *(float *)(a4 + 4 * v5);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * v8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(float *)(a4 + 4 * v10) > *(float *)(a4 + 4 * v11))
      {
        uint64_t *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      uint64_t *result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(float *)(a4 + 4 * v12) <= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      uint64_t *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *sub_25B4AB2F0(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = sub_25B4AB268(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(float *)(v13 + 4 * v11) > *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_25B4AB3A4(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) > *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B4AB268(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B4AB2F0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      float v22 = a1 + 3;
      sub_25B4AB2F0(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(float *)(v25 + 4 * v23) > *(float *)(v25 + 4 * v24))
      {
        *float v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 > *(float *)(v25 + 4 * v27))
        {
          int *v21 = v26;
          *float v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 > *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 > *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B4AB268(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 > *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 4 * v16))
        {
          int v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      int v20 = a1;
LABEL_13:
      *int v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

float sub_25B4AB5E4(uint64_t a1, float32x2_t a2, float32x2_t a3, float64x2_t a4, double a5, float64x2_t a6, double a7, double a8)
{
  float32x2_t v8 = vcvt_f32_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a3), a4), a6)))));
  float32x2_t v9 = vsub_f32(vcvt_f32_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a2), a4), a6))))), v8);
  *(float *)a4.f64 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  float v10 = *(float *)a4.f64 + -5.0;
  double v11 = 0.0;
  float v12 = 5.0;
  if ((float)(*(float *)a4.f64 + -5.0) > 5.0)
  {
    int32x2_t v35 = (int32x2_t)vdiv_f32(v9, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4.f64[0], 0));
    v14.i32[0] = vdup_lane_s32(v35, 1).u32[0];
    v14.f32[1] = -*(float *)v35.i32;
    unint64_t v16 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(a1 + 16);
    float32x2_t v17 = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0));
    float v18 = (float)(int)(float)-*(float *)&a8;
    int v19 = (int)(float)-*(float *)&a8 + 1;
    int v20 = 5;
    float32x2_t v36 = v14;
    int v37 = LODWORD(a8);
    do
    {
      if (v18 < *(float *)&a8)
      {
        *(float32x2_t *)&a4.f64[0] = vmla_f32(vmla_n_f32(v8, (float32x2_t)v35, v12), v14, v17);
        int v21 = v19;
        do
        {
          *(float32x2_t *)&a4.f64[0] = vadd_f32(v14, *(float32x2_t *)&a4.f64[0]);
          unint64_t v22 = (int)*(float *)a4.f64;
          int v39 = (int)*((float *)a4.f64 + 1);
          int v40 = (int)*(float *)a4.f64;
          if ((int)*((float *)a4.f64 + 1) >= 1 && v15 > (int)*((float *)a4.f64 + 1) && (int)v22 >= 1 && v16 > v22)
          {
            float64x2_t v38 = a4;
            uint64_t v26 = (__int16 *)sub_25B4A03DC(a1, &v40, &v39);
            LODWORD(a8) = v37;
            a4 = v38;
            float32x2_t v14 = v36;
            _H0 = *v26;
            __asm { FCVT            D0, H0 }
            double v11 = v11 + _D0;
          }
          float v33 = (float)v21++;
        }
        while (v33 < *(float *)&a8);
      }
      float v12 = (float)++v20;
    }
    while (v10 > (float)v20);
  }
  return v11 / *(float *)&a8;
}

void sub_25B4AB770(float a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v294 = *MEMORY[0x263EF8340];
  unint64_t v261 = 0xFFFFFFFF00000001;
  int v262 = 1;
  sub_25B4AA9F4((uint64_t)&v263, a4, (uint64_t)&v261);
  sub_25B43A318((uint64_t)&v238, (uint64_t)&v263);
  long long v245 = 0u;
  long long v244 = 0u;
  long long v243 = 0u;
  *(float *)&uint64_t v246 = a1;
  long long v247 = 0u;
  long long v248 = 0u;
  long long v251 = v240;
  long long v252 = v241;
  long long v249 = 0u;
  long long v250 = v239;
  sub_25B43A318((uint64_t)v253, (uint64_t)&v238);
  long long v258 = v244;
  long long v259 = v245;
  long long v257 = v243;
  uint64_t v260 = v246;
  long long v247 = v250;
  long long v248 = v251;
  long long v249 = v252;
  float v7 = operator new(8uLL);
  int v232 = a5;
  void *v7 = 0;
  uint64_t v237 = v7;
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  float32x2_t v8 = 0;
  unint64_t v9 = 0;
  float v10 = 0;
  uint64_t v11 = 0;
  uint64_t v282 = 0;
  long long v281 = 0;
  unint64_t v283 = 0;
  while (1)
  {
    if (*v237 == v11)
    {
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v14 = (v10 - v8) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
        {
          unint64_t v283 = v9;
          long long v281 = v8;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v9 - (void)v8) >> 2 > v15) {
          unint64_t v15 = (uint64_t)(v9 - (void)v8) >> 2;
        }
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_25B3FCAD4(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        int v20 = (char *)(v16 + 8 * v14);
        *(void *)int v20 = 1;
        uint64_t v13 = v20 + 8;
        while (v10 != v8)
        {
          uint64_t v21 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v20 - 1) = v21;
          v20 -= 8;
        }
LABEL_32:
        unint64_t v9 = v16 + 8 * v17;
        uint64_t v282 = v13;
        if (v8) {
          operator delete(v8);
        }
        float32x2_t v8 = v20;
        goto LABEL_35;
      }
      *(void *)float v10 = 1;
      float v12 = v10 + 8;
    }
    else
    {
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v18 = (v10 - v8) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
        {
          unint64_t v283 = v9;
          long long v281 = v8;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v9 - (void)v8) >> 2 > v19) {
          unint64_t v19 = (uint64_t)(v9 - (void)v8) >> 2;
        }
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v19;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_25B3FCAD4(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        int v20 = (char *)(v16 + 8 * v18);
        *(void *)int v20 = *((void *)&v247 + v11);
        uint64_t v13 = v20 + 8;
        while (v10 != v8)
        {
          uint64_t v22 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v20 - 1) = v22;
          v20 -= 8;
        }
        goto LABEL_32;
      }
      *(void *)float v10 = *((void *)&v247 + v11);
      float v12 = v10 + 8;
    }
    uint64_t v13 = v12;
LABEL_35:
    uint64_t v282 = v13;
    ++v11;
    float v10 = v13;
    if (v11 == 3)
    {
      unint64_t v283 = v9;
      long long v281 = v8;
      sub_25B4382B4(&__b, (char **)&v281);
      unint64_t v23 = 0;
      long long v289 = 0u;
      long long v288 = 0u;
      *(_OWORD *)&v287[0].__locale_ = 0u;
      uint64_t v24 = v237;
      do
      {
        v287[v23].__locale_ = (std::locale::__imp *)1;
        if (v23 <= 1)
        {
          unint64_t v25 = v23;
          uint64_t v26 = 1;
          do
            v26 *= *((void *)&__b + ++v25);
          while (v25 != 2);
          v287[v23].__locale_ = (std::locale::__imp *)v26;
        }
        ++v23;
      }
      while (v23 != 3);
      sub_25B4A5270((uint64_t)v290, &__b);
      uint64_t v27 = *v237;
      uint64_t v233 = *v237;
      if (*v237 == 2)
      {
        uint64_t v28 = 2;
      }
      else
      {
        uint64_t v28 = *v237;
        if (!v27)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          std::string __p = 0;
          uint64_t v59 = 1;
          uint64_t v35 = 1;
          char v58 = 1;
          goto LABEL_104;
        }
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v234 = v28;
      std::string __p = 0;
      int v32 = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 1;
      while (2)
      {
        uint64_t v36 = *((void *)&v247 + v34);
        if ((unint64_t)v30 >= v31)
        {
          uint64_t v37 = (v30 - v29) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            goto LABEL_317;
          }
          if ((uint64_t)(v31 - (void)v29) >> 2 > v38) {
            unint64_t v38 = (uint64_t)(v31 - (void)v29) >> 2;
          }
          if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            unint64_t v39 = (unint64_t)sub_25B3FCAD4(v39);
          }
          else {
            uint64_t v40 = 0;
          }
          int v41 = (char *)(v39 + 8 * v37);
          *(void *)int v41 = *((void *)&v247 + v34);
          int v42 = v41 + 8;
          while (v30 != v29)
          {
            uint64_t v43 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v41 - 1) = v43;
            v41 -= 8;
          }
          unint64_t v31 = v39 + 8 * v40;
          if (v29)
          {
            unint64_t v44 = v39 + 8 * v40;
            operator delete(v29);
            unint64_t v31 = v44;
          }
          uint64_t v29 = v41;
          uint64_t v30 = v42;
          uint64_t v28 = v234;
        }
        else
        {
          *(void *)uint64_t v30 = v36;
          v30 += 8;
        }
        if (*v237 == v34)
        {
          if ((unint64_t)v32 < v33)
          {
            *(void *)int v32 = 0;
            float32x2_t v45 = v32 + 8;
            goto LABEL_68;
          }
          uint64_t v47 = (v32 - __p) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v49 = v31;
          if ((uint64_t)(v33 - (void)__p) >> 2 > v48) {
            unint64_t v48 = (uint64_t)(v33 - (void)__p) >> 2;
          }
          if (v33 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50) {
            unint64_t v50 = (unint64_t)sub_25B3FCAD4(v50);
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v54 = (std::locale::__imp **)(v50 + 8 * v47);
          *uint64_t v54 = 0;
          uint64_t v46 = (char *)(v54 + 1);
          if (v32 != __p)
          {
            uint64_t v55 = __p;
            do
            {
              float v56 = (std::locale::__imp *)*((void *)v32 - 1);
              v32 -= 8;
              *--uint64_t v54 = v56;
            }
            while (v32 != __p);
            goto LABEL_96;
          }
LABEL_95:
          uint64_t v55 = __p;
          goto LABEL_96;
        }
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v52 = (v32 - __p) >> 3;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
LABEL_317:
          }
            sub_25B3FBC4C();
          unint64_t v49 = v31;
          if ((uint64_t)(v33 - (void)__p) >> 2 > v53) {
            unint64_t v53 = (uint64_t)(v33 - (void)__p) >> 2;
          }
          if (v33 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v53;
          }
          if (v50) {
            unint64_t v50 = (unint64_t)sub_25B3FCAD4(v50);
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v54 = (std::locale::__imp **)(v50 + 8 * v52);
          *uint64_t v54 = v287[v34].__locale_;
          uint64_t v46 = (char *)(v54 + 1);
          if (v32 == __p) {
            goto LABEL_95;
          }
          uint64_t v55 = __p;
          do
          {
            uint64_t v57 = (std::locale::__imp *)*((void *)v32 - 1);
            v32 -= 8;
            *--uint64_t v54 = v57;
          }
          while (v32 != __p);
LABEL_96:
          unint64_t v33 = v50 + 8 * v51;
          if (v55) {
            operator delete(v55);
          }
          std::string __p = (char *)v54;
          uint64_t v28 = v234;
          unint64_t v31 = v49;
        }
        else
        {
          *(std::locale *)int v32 = v287[v34];
          float32x2_t v45 = v32 + 8;
LABEL_68:
          uint64_t v46 = v45;
        }
        v35 *= v36;
        ++v34;
        int v32 = v46;
        if (v34 != v28) {
          continue;
        }
        break;
      }
      char v58 = 0;
      uint64_t v59 = v28 + 1;
      if ((unint64_t)(v28 + 1) > 2)
      {
        uint64_t v60 = 1;
        uint64_t v24 = v237;
        uint64_t v27 = v233;
      }
      else
      {
        uint64_t v24 = v237;
        uint64_t v27 = v233;
LABEL_104:
        uint64_t v61 = 8 * v59;
        uint64_t v60 = 1;
        do
        {
          v60 *= *(void *)((char *)&v247 + v61);
          v61 += 8;
        }
        while (v61 != 24);
      }
      unint64_t v62 = *((void *)&v247 + v28);
      uint64_t v63 = (_DWORD *)v293;
      if (v27 == 2) {
        uint64_t v64 = *((void *)&v247 + v28);
      }
      else {
        uint64_t v64 = 1;
      }
      v286[2] = 0u;
      if (v27 == 2) {
        unint64_t v65 = v35;
      }
      else {
        unint64_t v65 = v62;
      }
      if (v27 == 2) {
        uint64_t v66 = 1;
      }
      else {
        uint64_t v66 = v35;
      }
      memset(v286, 0, 32);
      memset(v285, 0, sizeof(v285));
      uint64_t v235 = v28;
      if (v58)
      {
        if ((unint64_t)v30 >= v31)
        {
          uint64_t v78 = (v30 - v29) >> 3;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v31 - (void)v29) >> 2 > v79) {
            unint64_t v79 = (uint64_t)(v31 - (void)v29) >> 2;
          }
          if (v31 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v79;
          }
          if (v80) {
            unint64_t v80 = (unint64_t)sub_25B3FCAD4(v80);
          }
          uint64_t v81 = (char *)(v80 + 8 * v78);
          *(void *)uint64_t v81 = 0;
          while (v30 != v29)
          {
            uint64_t v82 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v81 - 1) = v82;
            v81 -= 8;
          }
          if (v29) {
            operator delete(v29);
          }
          uint64_t v67 = 0;
          int v231 = 0;
          uint64_t v29 = v81;
          uint64_t v24 = v237;
        }
        else
        {
          uint64_t v67 = 0;
          int v231 = 0;
          *(void *)uint64_t v30 = 0;
        }
      }
      else
      {
        uint64_t v229 = v66;
        char v230 = v58;
        uint64_t v67 = 0;
        int v68 = 0;
        unint64_t v69 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        int v231 = v28 - 1;
        do
        {
          if (*v24 != v71)
          {
            if ((unint64_t)v70 >= v69)
            {
              uint64_t v72 = (v70 - v67) >> 3;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v69 - (void)v67) >> 2 > v73) {
                unint64_t v73 = (uint64_t)(v69 - (void)v67) >> 2;
              }
              if (v69 - (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v73;
              }
              if (v74)
              {
                unint64_t v74 = (unint64_t)sub_25B3FCAD4(v74);
                int v70 = v68;
              }
              else
              {
                uint64_t v75 = 0;
              }
              uint64_t v76 = (char *)(v74 + 8 * v72);
              *(void *)uint64_t v76 = v71;
              int v68 = v76 + 8;
              while (v70 != v67)
              {
                uint64_t v77 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v76 - 1) = v77;
                v76 -= 8;
              }
              unint64_t v69 = v74 + 8 * v75;
              if (v67) {
                operator delete(v67);
              }
              uint64_t v67 = v76;
              int v70 = v68;
              uint64_t v24 = v237;
              uint64_t v28 = v235;
            }
            else
            {
              *(void *)int v70 = v71;
              v70 += 8;
              int v68 = v70;
            }
          }
          ++v71;
        }
        while (v71 != v28);
        char v58 = v230;
        uint64_t v66 = v229;
      }
      unint64_t v83 = v60 * v64;
      if (v233 == 2)
      {
        if (v255)
        {
          if (v65)
          {
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            unint64_t v86 = 0;
            uint64_t v87 = v256;
            float v88 = *(float *)&v260;
            uint64_t v89 = (__int16 *)(v256 + 2);
            if (v83 <= 1) {
              uint64_t v90 = 1;
            }
            else {
              uint64_t v90 = v60 * v64;
            }
            uint64_t v91 = 2 * v90;
            BOOL v92 = 1;
            int v93 = v63;
            do
            {
              _H1 = *(_WORD *)(v87 + 2 * v85);
              __asm { FCVT            S1, H1 }
              int v100 = v88 < _S1;
              if (v83 < 2)
              {
                ++v85;
                if (v92) {
                  goto LABEL_169;
                }
              }
              else
              {
                unint64_t v101 = v83 - 1;
                uint64_t v102 = v89;
                do
                {
                  __int16 v103 = *v102++;
                  _H1 = v103;
                  __asm { FCVT            S1, H1 }
                  if (v88 < _S1) {
                    ++v100;
                  }
                  --v101;
                }
                while (v101);
                v85 += v83;
                if (v92) {
                  goto LABEL_169;
                }
              }
              v100 += *v93;
LABEL_169:
              _DWORD *v93 = v100;
              uint64_t v106 = v231;
              do
              {
                uint64_t v107 = *((void *)v286 + v106) + 1;
                *((void *)v286 + v106) = v107;
                if (v107 != *(void *)&v29[8 * v106]) {
                  break;
                }
                *((void *)v286 + v106) = 0;
                BOOL v108 = v106-- <= 0;
              }
              while (!v108);
              if (v58)
              {
                BOOL v92 = 0;
                unint64_t v109 = 0;
              }
              else
              {
                unint64_t v109 = 0;
                BOOL v110 = (uint64_t *)v286;
                float32x2_t v111 = __p;
                uint64_t v112 = v235;
                do
                {
                  uint64_t v114 = *v110++;
                  uint64_t v113 = v114;
                  uint64_t v115 = *(void *)v111;
                  v111 += 8;
                  v109 += v115 * v113;
                  --v112;
                }
                while (v112);
                BOOL v92 = v109 > v86;
                if (v109 > v86) {
                  unint64_t v86 = v109;
                }
              }
              int v93 = &v63[v109];
              ++v84;
              uint64_t v89 = (__int16 *)((char *)v89 + v91);
            }
            while (v84 != v65);
          }
        }
        else if (v65)
        {
          uint64_t v149 = 0;
          unint64_t v150 = 0;
          uint64_t v151 = v256;
          float v152 = *(float *)&v260;
          BOOL v153 = 1;
          float32x2_t v154 = v63;
          do
          {
            uint64_t v155 = 0;
            uint64_t v156 = 0;
            do
            {
              v156 += v253[v155 + 7] * *(void *)((char *)v285 + v155 * 8);
              ++v155;
            }
            while (v155 != 3);
            _H1 = *(_WORD *)(v151 + 2 * v156);
            __asm { FCVT            S1, H1 }
            int v159 = v152 < _S1;
            for (uint64_t i = 16; i != -8; i -= 8)
            {
              uint64_t v161 = *(void *)((char *)v285 + i) + 1;
              *(void *)((char *)v285 + i) = v161;
              if (v161 != *(void *)((char *)&v247 + i)) {
                break;
              }
              *(void *)((char *)v285 + i) = 0;
            }
            if (v83 >= 2)
            {
              for (uint64_t j = 1; j != v83; ++j)
              {
                uint64_t v163 = 0;
                uint64_t v164 = 0;
                do
                {
                  v164 += v253[v163 + 7] * *(void *)((char *)v285 + v163 * 8);
                  ++v163;
                }
                while (v163 != 3);
                _H1 = *(_WORD *)(v151 + 2 * v164);
                __asm { FCVT            S1, H1 }
                if (v152 < _S1) {
                  ++v159;
                }
                for (uint64_t k = 16; k != -8; k -= 8)
                {
                  uint64_t v168 = *(void *)((char *)v285 + k) + 1;
                  *(void *)((char *)v285 + k) = v168;
                  if (v168 != *(void *)((char *)&v247 + k)) {
                    break;
                  }
                  *(void *)((char *)v285 + k) = 0;
                }
              }
            }
            if (!v153) {
              v159 += *v154;
            }
            *float32x2_t v154 = v159;
            uint64_t v169 = v231;
            do
            {
              uint64_t v170 = *((void *)v286 + v169) + 1;
              *((void *)v286 + v169) = v170;
              if (v170 != *(void *)&v29[8 * v169]) {
                break;
              }
              *((void *)v286 + v169) = 0;
              BOOL v108 = v169-- <= 0;
            }
            while (!v108);
            if (v58)
            {
              BOOL v153 = 0;
              unint64_t v171 = 0;
            }
            else
            {
              unint64_t v171 = 0;
              int v172 = (uint64_t *)v286;
              int v173 = __p;
              uint64_t v174 = v235;
              do
              {
                uint64_t v176 = *v172++;
                uint64_t v175 = v176;
                uint64_t v177 = *(void *)v173;
                v173 += 8;
                v171 += v177 * v175;
                --v174;
              }
              while (v174);
              BOOL v153 = v171 > v150;
              if (v171 > v150) {
                unint64_t v150 = v171;
              }
            }
            float32x2_t v154 = &v63[v171];
            ++v149;
          }
          while (v149 != v65);
        }
      }
      else if (v255)
      {
        if (v66)
        {
          uint64_t v116 = 0;
          uint64_t v117 = 0;
          unint64_t v118 = 0;
          uint64_t v119 = v256;
          BOOL v120 = 1;
          float v121 = *(float *)&v260;
          float32x2_t v122 = v63;
          do
          {
            if (v120)
            {
              if (v83)
              {
                float32x2_t v123 = v122;
                uint64_t v124 = v60 * v64;
                do
                {
                  _H1 = *(_WORD *)(v119 + 2 * v117);
                  __asm { FCVT            S1, H1 }
                  *v123++ = v121 < _S1;
                  ++v117;
                  --v124;
                }
                while (v124);
              }
            }
            else
            {
              float32x2_t v127 = v122;
              uint64_t v128 = v60 * v64;
              if (v83)
              {
                do
                {
                  _H1 = *(_WORD *)(v119 + 2 * v117);
                  __asm { FCVT            S1, H1 }
                  int v131 = *v127;
                  if (v121 < _S1) {
                    ++v131;
                  }
                  *v127++ = v131;
                  ++v117;
                  --v128;
                }
                while (v128);
              }
            }
            if (v65 >= 2)
            {
              uint64_t v132 = v256;
              float v133 = *(float *)&v260;
              for (uint64_t m = 1; m != v65; ++m)
              {
                float v135 = v122;
                uint64_t v136 = v60 * v64;
                if (v83)
                {
                  do
                  {
                    _H2 = *(_WORD *)(v132 + 2 * v117);
                    __asm { FCVT            S2, H2 }
                    int v139 = *v135;
                    if (v133 < _S2) {
                      ++v139;
                    }
                    *v135++ = v139;
                    ++v117;
                    --v136;
                  }
                  while (v136);
                }
              }
            }
            uint64_t v140 = v231;
            do
            {
              uint64_t v141 = *((void *)v286 + v140) + 1;
              *((void *)v286 + v140) = v141;
              if (v141 != *(void *)&v29[8 * v140]) {
                break;
              }
              *((void *)v286 + v140) = 0;
              BOOL v108 = v140-- <= 0;
            }
            while (!v108);
            if (v58)
            {
              BOOL v120 = 0;
              unint64_t v142 = 0;
            }
            else
            {
              unint64_t v142 = 0;
              float32x2_t v143 = (uint64_t *)v286;
              float v144 = __p;
              uint64_t v145 = v235;
              do
              {
                uint64_t v147 = *v143++;
                uint64_t v146 = v147;
                uint64_t v148 = *(void *)v144;
                v144 += 8;
                v142 += v148 * v146;
                --v145;
              }
              while (v145);
              BOOL v120 = v142 > v118;
              if (v142 > v118) {
                unint64_t v118 = v142;
              }
            }
            float32x2_t v122 = &v63[v142];
            ++v116;
          }
          while (v116 != v66);
        }
      }
      else if (v66)
      {
        uint64_t v178 = 0;
        unint64_t v179 = 0;
        uint64_t v180 = v256;
        BOOL v181 = 1;
        float v182 = *(float *)&v260;
        float32x2_t v183 = v63;
        do
        {
          if (v181)
          {
            if (v83)
            {
              for (uint64_t n = 0; n != v83; ++n)
              {
                uint64_t v185 = 0;
                uint64_t v186 = 0;
                do
                {
                  v186 += v253[v185 + 7] * *(void *)((char *)v285 + v185 * 8);
                  ++v185;
                }
                while (v185 != 3);
                _H1 = *(_WORD *)(v180 + 2 * v186);
                __asm { FCVT            S1, H1 }
                v183[n] = v182 < _S1;
                for (iuint64_t i = 16; ii != -8; ii -= 8)
                {
                  uint64_t v190 = *(void *)((char *)v285 + ii) + 1;
                  *(void *)((char *)v285 + ii) = v190;
                  if (v190 != *(void *)((char *)&v247 + ii)) {
                    break;
                  }
                  *(void *)((char *)v285 + ii) = 0;
                }
              }
            }
          }
          else if (v83)
          {
            for (juint64_t j = 0; jj != v83; ++jj)
            {
              uint64_t v192 = 0;
              uint64_t v193 = 0;
              do
              {
                v193 += v253[v192 + 7] * *(void *)((char *)v285 + v192 * 8);
                ++v192;
              }
              while (v192 != 3);
              _H1 = *(_WORD *)(v180 + 2 * v193);
              __asm { FCVT            S1, H1 }
              int v196 = v183[jj];
              if (v182 < _S1) {
                ++v196;
              }
              v183[jj] = v196;
              for (kuint64_t k = 16; kk != -8; kk -= 8)
              {
                uint64_t v198 = *(void *)((char *)v285 + kk) + 1;
                *(void *)((char *)v285 + kk) = v198;
                if (v198 != *(void *)((char *)&v247 + kk)) {
                  break;
                }
                *(void *)((char *)v285 + kk) = 0;
              }
            }
          }
          uint64_t v199 = v231;
          if (v65 > 1)
          {
            uint64_t v200 = v256;
            float v201 = *(float *)&v260;
            for (muint64_t m = 1; mm != v65; ++mm)
            {
              if (v83)
              {
                for (nuint64_t n = 0; nn != v83; ++nn)
                {
                  uint64_t v204 = 0;
                  uint64_t v205 = 0;
                  do
                  {
                    v205 += v253[v204 + 7] * *(void *)((char *)v285 + v204 * 8);
                    ++v204;
                  }
                  while (v204 != 3);
                  _H2 = *(_WORD *)(v200 + 2 * v205);
                  __asm { FCVT            S2, H2 }
                  int v208 = v183[nn];
                  if (v201 < _S2) {
                    ++v208;
                  }
                  v183[nn] = v208;
                  for (uint64_t i1 = 16; i1 != -8; i1 -= 8)
                  {
                    uint64_t v210 = *(void *)((char *)v285 + i1) + 1;
                    *(void *)((char *)v285 + i1) = v210;
                    if (v210 != *(void *)((char *)&v247 + i1)) {
                      break;
                    }
                    *(void *)((char *)v285 + i1) = 0;
                  }
                }
              }
            }
            uint64_t v199 = v231;
          }
          do
          {
            uint64_t v211 = *((void *)v286 + v199) + 1;
            *((void *)v286 + v199) = v211;
            if (v211 != *(void *)&v29[8 * v199]) {
              break;
            }
            *((void *)v286 + v199) = 0;
            BOOL v108 = v199-- <= 0;
          }
          while (!v108);
          if (v58)
          {
            BOOL v181 = 0;
            unint64_t v212 = 0;
          }
          else
          {
            unint64_t v212 = 0;
            float32x2_t v213 = (uint64_t *)v286;
            int v214 = __p;
            uint64_t v215 = v235;
            do
            {
              uint64_t v217 = *v213++;
              uint64_t v216 = v217;
              uint64_t v218 = *(void *)v214;
              v214 += 8;
              v212 += v218 * v216;
              --v215;
            }
            while (v215);
            BOOL v181 = v212 > v179;
            if (v212 > v179) {
              unint64_t v179 = v212;
            }
          }
          float32x2_t v183 = &v63[v212];
          ++v178;
        }
        while (v178 != v66);
      }
      if (v67) {
        operator delete(v67);
      }
      if (__p) {
        operator delete(__p);
      }
      if (v29) {
        operator delete(v29);
      }
      if (v281) {
        operator delete(v281);
      }
      operator delete(v24);
      memset(&v275[1], 0, 96);
      simd_float4 v278 = 0;
      __int16 v279 = 257;
      v275[0] = &unk_2708F1C28;
      float v277 = 0;
      sub_25B4363C0((uint64_t)&__b, (uint64_t)&v290[1], 0);
      uint64_t v219 = v291[(void)__b + 1];
      locale = v290[*((void *)&__b + 1) + 1].__locale_;
      v275[1] = v290[(void)__b + 1];
      v275[2] = locale;
      uint64_t v221 = v291[*((void *)&__b + 1) + 1];
      v275[7] = v219;
      v275[8] = v221;
      long long v276 = *(_OWORD *)&v291[7];
      int v222 = (void *)v291[9];
      float64_t v223 = (std::__shared_weak_count *)v292;
      if ((void)v292) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v292 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v224 = v278;
      float v277 = v222;
      simd_float4 v278 = v223;
      if (v224)
      {
        sub_25B404120(v224);
        int v222 = v277;
      }
      uint64_t v225 = 0;
      uint64_t v280 = *v222 + 4 * *((void *)&v276 + 1);
      HIBYTE(v279) = 0;
      uint64_t v226 = 1;
      while (1)
      {
        uint64_t v227 = v275[v225 + 2];
        if (v227 != 1)
        {
          if (v275[v225 + 8] != v226)
          {
            char v228 = 0;
LABEL_308:
            LOBYTE(v279) = v228;
            v290[0].__locale_ = (std::locale::__imp *)&unk_2708F18C0;
            if ((void)v292) {
              sub_25B404120((std::__shared_weak_count *)v292);
            }
            v253[0] = &unk_2708F1EB8;
            if (v254) {
              sub_25B404120(v254);
            }
            uint64_t v238 = &unk_2708F1EB8;
            if (v242) {
              sub_25B404120(v242);
            }
            float32x4_t v263 = &unk_2708F1EB8;
            if (v274) {
              sub_25B404120(v274);
            }
            sub_25B404048((uint64_t)&v238, (uint64_t)v275);
            long long v245 = 0u;
            long long v244 = 0u;
            long long v243 = 0u;
            LODWORD(v246) = v232;
            long long v247 = 0u;
            long long v248 = 0u;
            long long v251 = v240;
            long long v252 = v241;
            long long v249 = 0u;
            long long v250 = v239;
            sub_25B404048((uint64_t)v253, (uint64_t)&v238);
            long long v258 = v244;
            long long v259 = v245;
            long long v257 = v243;
            uint64_t v260 = v246;
            long long v247 = v250;
            long long v248 = v251;
            long long v249 = v252;
            float32x2_t v274 = 0;
            long long v269 = 0u;
            long long v270 = 0u;
            long long v264 = v250;
            long long v266 = v252;
            long long v265 = v251;
            float32x4_t v263 = &unk_2708F18E0;
            uint64_t v267 = *((void *)&v250 + 1);
            uint64_t v268 = 1;
            uint64_t v271 = v250 * *((void *)&v250 + 1);
            uint64_t v273 = 0;
            uint64_t v272 = 0;
            sub_25B43814C((uint64_t)v290, v250 * *((void *)&v250 + 1));
          }
          v226 *= v227;
        }
        if (--v225 == -2)
        {
          char v228 = 1;
          goto LABEL_308;
        }
      }
    }
  }
}

void sub_25B4ADC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (STACK[0x3E8]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3E8]);
  }
  STACK[0x220] = (unint64_t)&unk_2708F1C28;
  if (STACK[0x2A0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x2A0]);
  }
  if (a43) {
    sub_25B404120(a43);
  }
  STACK[0x400] = (unint64_t)a20;
  if (STACK[0x480]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x480]);
  }
  _Unwind_Resume(a1);
}

std::string *sub_25B4ADFB8(std::string *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (result[7].__r_.__value_.__s.__data_[8] == *(unsigned __int8 *)(a2 + 176))
  {
    if (result[7].__r_.__value_.__s.__data_[8])
    {
      objc_storeStrong((id *)&result->__r_.__value_.__l.__size_, *(id *)(a2 + 8));
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v4[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v4[2].__r_.__value_.__l.__data_ = v6;
      *(_OWORD *)&v4->__r_.__value_.__r.__words[2] = v5;
      long long v7 = *(_OWORD *)(a2 + 64);
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)((char *)&v4[4].__r_.__value_.__r.__words[1] + 1) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)&v4[3].__r_.__value_.__r.__words[1] = v8;
      *(_OWORD *)&v4[4].__r_.__value_.__l.__data_ = v9;
      *(_OWORD *)&v4[2].__r_.__value_.__r.__words[2] = v7;
      std::string::operator=((std::string *)((char *)v4 + 128), (const std::string *)(a2 + 128));
      return std::string::operator=((std::string *)((char *)v4 + 152), (const std::string *)(a2 + 152));
    }
  }
  else if (result[7].__r_.__value_.__s.__data_[8])
  {
    BOOL result = (std::string *)sub_25B3F5FE8((uint64_t)result);
    v4[7].__r_.__value_.__s.__data_[8] = 0;
  }
  else
  {
    BOOL result = (std::string *)sub_25B47C6E4((uint64_t)result, a2, a3);
    v4[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return result;
}

void *sub_25B4AE078(void *a1)
{
  a1[31] = &unk_2708F18E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[47];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[12] = &unk_2708F18E0;
  uint64_t v3 = (std::__shared_weak_count *)a1[28];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void *sub_25B4AE0F4(void *a1)
{
  a1[25] = &unk_2708F18E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[41];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[6] = &unk_2708F18E0;
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

uint64_t sub_25B4AE170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 168) == v4)
  {
    if (sub_25B40B05C(a1 + 56, a2 + 8)) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
  }
  else
  {
    int v5 = 0;
  }
  if (*(void *)(a1 + 320) == v4)
  {
    if (sub_25B40B05C(a1 + 208, a2 + 8)) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
  }
  else
  {
    int v6 = 0;
  }
  if (v5 <= v6) {
    return v6;
  }
  else {
    return v5;
  }
}

void sub_25B4AE200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v162 = *MEMORY[0x263EF8340];
  int v5 = (_OWORD *)(a1 + 8);
  char v6 = 1;
  do
  {
    uint64_t v7 = *((void *)v5 + v4);
    uint64_t v8 = *(void *)(a2 + 8 * v4);
    if ((v6 & 1) == 0) {
      break;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while (v7 == v8);
  if (*(unsigned char *)(a2 + 232)) {
    _ZF = *(unsigned char *)(a2 + 384) == 0;
  }
  else {
    _ZF = 1;
  }
  int v10 = !_ZF;
  if (v7 == v8)
  {
    if (v10)
    {
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      uint64_t v11 = *(void *)(a1 + 104);
      float v12 = *(short float **)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v11)
        {
          uint64_t v13 = *(short float **)(a2 + 240);
          uint64_t v14 = *(short float **)(a2 + 392);
          do
          {
            short float v15 = *v13++;
            short float v16 = v15;
            short float v17 = *v14++;
            *v12++ = v16 * v17;
            --v11;
          }
          while (v11);
        }
      }
      else if (v11)
      {
        uint64_t v83 = 0;
        uint64_t v84 = *(void *)(a1 + 56);
        uint64_t v85 = *(void *)(a1 + 64);
        uint64_t v86 = *(void *)(a2 + 240);
        uint64_t v87 = *(void *)(a2 + 392);
        do
        {
          uint64_t v88 = 0;
          v12[v84 * (void)v147 + v85 * *((void *)&v147 + 1)] = *(short float *)(v86 + 2 * v83)
                                                                 * *(short float *)(v87 + 2 * v83);
          do
          {
            uint64_t v89 = *(void *)((char *)&v147 + v88 + 8) + 1;
            *(void *)((char *)&v147 + v88 + 8) = v89;
            if (v89 != *(void *)(a1 + 16 + v88)) {
              break;
            }
            *(void *)((char *)&v147 + v88 + 8) = 0;
            v88 -= 8;
          }
          while (v88 != -16);
          ++v83;
        }
        while (v83 != v11);
      }
    }
    else
    {
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      uint64_t v45 = *(void *)(a1 + 104);
      uint64_t v46 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v45)
        {
          uint64_t v47 = 0;
          uint64_t v48 = a2 + 48;
          uint64_t v49 = a1 + 16;
          do
          {
            _S0 = sub_25B4AEC50(v48, v47, v147, *((uint64_t *)&v147 + 1));
            uint64_t v51 = 0;
            __asm { FCVT            H0, S0 }
            *(_WORD *)(v46 + 2 * v47) = LOWORD(_S0);
            do
            {
              uint64_t v55 = *(void *)((char *)&v147 + v51 + 8) + 1;
              *(void *)((char *)&v147 + v51 + 8) = v55;
              if (v55 != *(void *)(v49 + v51)) {
                break;
              }
              *(void *)((char *)&v147 + v51 + 8) = 0;
              v51 -= 8;
            }
            while (v51 != -16);
            ++v47;
          }
          while (v47 != v45);
        }
      }
      else if (v45)
      {
        uint64_t v90 = 0;
        uint64_t v91 = a2 + 48;
        uint64_t v92 = *(void *)(a1 + 56);
        uint64_t v93 = *(void *)(a1 + 64);
        uint64_t v94 = a1 + 16;
        do
        {
          uint64_t v95 = v92 * v147 + v93 * *((void *)&v147 + 1);
          _S0 = sub_25B4AEC50(v91, v90, v147, *((uint64_t *)&v147 + 1));
          uint64_t v97 = 0;
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v46 + 2 * v95) = LOWORD(_S0);
          do
          {
            uint64_t v98 = *(void *)((char *)&v147 + v97 + 8) + 1;
            *(void *)((char *)&v147 + v97 + 8) = v98;
            if (v98 != *(void *)(v94 + v97)) {
              break;
            }
            *(void *)((char *)&v147 + v97 + 8) = 0;
            v97 -= 8;
          }
          while (v97 != -16);
          ++v90;
        }
        while (v90 != v45);
      }
    }
  }
  else
  {
    if (v10)
    {
      long long v160 = 0uLL;
      long long v161 = 0uLL;
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      sub_25B40AB84((uint64_t)&v147, v5, (_OWORD *)a2, (uint64_t)&v138);
      uint64_t v18 = 0;
      char v19 = 1;
      do
      {
        uint64_t v20 = *((void *)&v138 + v18);
        uint64_t v21 = *((void *)v5 + v18);
        if ((v19 & 1) == 0) {
          break;
        }
        char v19 = 0;
        uint64_t v18 = 1;
      }
      while (v20 == v21);
      if (v20 != v21)
      {
        uint64_t v22 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        unint64_t v23 = sub_25B406B20(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v23, (uint64_t)" ", 1);
        uint64_t v24 = (void *)MEMORY[0x263F8C0F8];
        unint64_t v25 = (void *)std::ostream::operator<<();
        sub_25B406B20(v25, (uint64_t)" ", 1);
        sub_25B406B20(v25, (uint64_t)"broadcast_assign_continue", 25);
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v26 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v27 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v145 = 0u;
      long long v146 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v144[0].__locale_ = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      uint64_t v28 = *(void *)(a1 + 104);
      uint64_t v29 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v28)
        {
          uint64_t v30 = 0;
          int v32 = (uint64_t *)*((void *)&v148 + 1);
          unint64_t v31 = (uint64_t *)v149;
          unint64_t v33 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
          if (v33 <= 1) {
            unint64_t v33 = 1;
          }
          uint64_t v34 = *(void *)(a2 + 240);
          uint64_t v35 = *(void *)(a2 + 392);
          do
          {
            long long v141 = *(_OWORD *)&v144[0].__locale_;
            if (v31 != v32)
            {
              uint64_t v36 = v32;
              unint64_t v37 = v33;
              do
              {
                uint64_t v38 = *v36++;
                *((void *)&v141 + v38) = 0;
                --v37;
              }
              while (v37);
            }
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            char v41 = 1;
            do
            {
              char v42 = v41;
              v40 += *((void *)&v159 + v39) * *((void *)&v141 + v39);
              uint64_t v39 = 1;
              char v41 = 0;
            }
            while ((v42 & 1) != 0);
            *(short float *)(v29 + 2 * v30) = *(short float *)(v34 + 2 * v40) * *(short float *)(v35 + 2 * v40);
            for (uint64_t i = 1; i != -1; --i)
            {
              unint64_t v44 = (std::locale::__imp *)((char *)v144[i].__locale_ + 1);
              v144[i].__locale_ = v44;
              if (v44 != *(std::locale::__imp **)((char *)&v138 + i * 8)) {
                break;
              }
              v144[i].__locale_ = 0;
            }
            ++v30;
          }
          while (v30 != v28);
        }
      }
      else if (v28)
      {
        uint64_t v99 = 0;
        unint64_t v101 = (uint64_t *)*((void *)&v148 + 1);
        int v100 = (uint64_t *)v149;
        unint64_t v102 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
        if (v102 <= 1) {
          unint64_t v102 = 1;
        }
        uint64_t v103 = *(void *)(a1 + 56);
        uint64_t v104 = *(void *)(a1 + 64);
        uint64_t v105 = *(void *)(a2 + 240);
        uint64_t v106 = *(void *)(a2 + 392);
        do
        {
          locale = v144[0].__locale_;
          BOOL v108 = v144[1].__locale_;
          long long v141 = *(_OWORD *)&v144[0].__locale_;
          if (v100 != v101)
          {
            unint64_t v109 = v101;
            unint64_t v110 = v102;
            do
            {
              uint64_t v111 = *v109++;
              *((void *)&v141 + v111) = 0;
              --v110;
            }
            while (v110);
          }
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          char v114 = 1;
          do
          {
            char v115 = v114;
            v113 += *((void *)&v159 + v112) * *((void *)&v141 + v112);
            uint64_t v112 = 1;
            char v114 = 0;
          }
          while ((v115 & 1) != 0);
          *(short float *)(v29 + 2 * ((void)locale * v103 + (void)v108 * v104)) = *(short float *)(v105 + 2 * v113)
                                                                                    * *(short float *)(v106 + 2 * v113);
          for (uint64_t j = 1; j != -1; --j)
          {
            uint64_t v117 = (std::locale::__imp *)((char *)v144[j].__locale_ + 1);
            v144[j].__locale_ = v117;
            if (v117 != *(std::locale::__imp **)((char *)&v138 + j * 8)) {
              break;
            }
            v144[j].__locale_ = 0;
          }
          ++v99;
        }
        while (v99 != v28);
      }
    }
    else
    {
      long long v160 = 0uLL;
      long long v161 = 0uLL;
      long long v158 = 0uLL;
      long long v159 = 0uLL;
      long long v156 = 0uLL;
      long long v157 = 0uLL;
      long long v154 = 0uLL;
      long long v155 = 0uLL;
      long long v152 = 0uLL;
      long long v153 = 0uLL;
      long long v150 = 0uLL;
      long long v151 = 0uLL;
      long long v148 = 0uLL;
      long long v149 = 0uLL;
      long long v147 = 0uLL;
      long long v139 = 0uLL;
      long long v140 = 0uLL;
      long long v138 = 0uLL;
      sub_25B40AB84((uint64_t)&v147, v5, (_OWORD *)a2, (uint64_t)&v138);
      uint64_t v56 = 0;
      char v57 = 1;
      do
      {
        uint64_t v58 = *((void *)&v138 + v56);
        uint64_t v59 = *((void *)v5 + v56);
        if ((v57 & 1) == 0) {
          break;
        }
        char v57 = 0;
        uint64_t v56 = 1;
      }
      while (v58 == v59);
      if (v58 != v59)
      {
        uint64_t v60 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
        uint64_t v61 = sub_25B406B20(v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v61, (uint64_t)" ", 1);
        unint64_t v62 = (void *)MEMORY[0x263F8C0F8];
        uint64_t v63 = (void *)std::ostream::operator<<();
        sub_25B406B20(v63, (uint64_t)" ", 1);
        sub_25B406B20(v63, (uint64_t)"broadcast_assign_stride", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
        uint64_t v64 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
        sub_25B406ED4("err", "broadcast assign issue");
        std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
        unint64_t v65 = std::locale::use_facet(v144, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
        std::locale::~locale(v144);
        std::ostream::put();
        std::ostream::flush();
      }
      long long v145 = 0u;
      long long v146 = 0u;
      long long v143 = 0u;
      *(_OWORD *)&v144[0].__locale_ = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      uint64_t v66 = *(void *)(a1 + 104);
      uint64_t v67 = *(void *)(a1 + 144);
      if (*(unsigned char *)(a1 + 136))
      {
        if (v66)
        {
          uint64_t v68 = 0;
          uint64_t v69 = a2 + 48;
          uint64_t v71 = (uint64_t *)*((void *)&v148 + 1);
          int v70 = (uint64_t *)v149;
          unint64_t v72 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
          if (v72 <= 1) {
            unint64_t v72 = 1;
          }
          unint64_t v137 = v72;
          do
          {
            long long v141 = *(_OWORD *)&v144[0].__locale_;
            if (v70 != v71)
            {
              unint64_t v73 = v71;
              unint64_t v74 = v137;
              do
              {
                uint64_t v75 = *v73++;
                *((void *)&v141 + v75) = 0;
                --v74;
              }
              while (v74);
            }
            uint64_t v76 = 0;
            uint64_t v77 = 0;
            char v78 = 1;
            do
            {
              char v79 = v78;
              v77 += *((void *)&v159 + v76) * *((void *)&v141 + v76);
              uint64_t v76 = 1;
              char v78 = 0;
            }
            while ((v79 & 1) != 0);
            _S0 = sub_25B4AEC50(v69, v77, v141, *((uint64_t *)&v141 + 1));
            __asm { FCVT            H0, S0 }
            *(_WORD *)(v67 + 2 * v68) = LOWORD(_S0);
            for (uint64_t k = 1; k != -1; --k)
            {
              uint64_t v82 = (std::locale::__imp *)((char *)v144[k].__locale_ + 1);
              v144[k].__locale_ = v82;
              if (v82 != *(std::locale::__imp **)((char *)&v138 + k * 8)) {
                break;
              }
              v144[k].__locale_ = 0;
            }
            ++v68;
          }
          while (v68 != v66);
        }
      }
      else if (v66)
      {
        uint64_t v118 = 0;
        uint64_t v119 = (uint64_t *)*((void *)&v148 + 1);
        uint64_t v136 = (uint64_t *)v149;
        if ((unint64_t)((uint64_t)(v149 - *((void *)&v148 + 1)) >> 3) <= 1) {
          uint64_t v120 = 1;
        }
        else {
          uint64_t v120 = (uint64_t)(v149 - *((void *)&v148 + 1)) >> 3;
        }
        uint64_t v135 = *(void *)(a1 + 64);
        uint64_t v133 = v120;
        uint64_t v134 = *(void *)(a1 + 56);
        do
        {
          float32x2_t v122 = v144[0].__locale_;
          float v121 = v144[1].__locale_;
          long long v141 = *(_OWORD *)&v144[0].__locale_;
          if (v136 != v119)
          {
            float32x2_t v123 = v119;
            uint64_t v124 = v133;
            do
            {
              uint64_t v125 = *v123++;
              *((void *)&v141 + v125) = 0;
              --v124;
            }
            while (v124);
          }
          uint64_t v126 = 0;
          uint64_t v127 = 0;
          char v128 = 1;
          do
          {
            char v129 = v128;
            v127 += *((void *)&v159 + v126) * *((void *)&v141 + v126);
            uint64_t v126 = 1;
            char v128 = 0;
          }
          while ((v129 & 1) != 0);
          _S0 = sub_25B4AEC50(a2 + 48, v127, v141, *((uint64_t *)&v141 + 1));
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v67 + 2 * (v134 * (void)v122 + v135 * (void)v121)) = LOWORD(_S0);
          for (uint64_t m = 1; m != -1; --m)
          {
            uint64_t v132 = (std::locale::__imp *)((char *)v144[m].__locale_ + 1);
            v144[m].__locale_ = v132;
            if (v132 != *(std::locale::__imp **)((char *)&v138 + m * 8)) {
              break;
            }
            v144[m].__locale_ = 0;
          }
          ++v118;
        }
        while (v118 != v66);
      }
    }
    sub_25B3F9500((uint64_t)&v147);
  }
}

void sub_25B4AEC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float sub_25B4AEC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 184)) {
    uint64_t v4 = *(void *)(a1 + 104) * a3 + *(void *)(a1 + 112) * a4;
  }
  _H0 = *(_WORD *)(*(void *)(a1 + 192) + 2 * v4);
  if (!*(unsigned char *)(a1 + 336)) {
    a2 = *(void *)(a1 + 256) * a3 + *(void *)(a1 + 264) * a4;
  }
  _H1 = *(_WORD *)(*(void *)(a1 + 344) + 2 * a2);
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
  }
  return _S0 * _S1;
}

uint64_t sub_25B4AED9C(float32x2_t *a1, float32x2_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 32);
  uint64_t v4 = (void *)(a3 + 40);
  if (v3 == (void *)(a3 + 40))
  {
LABEL_24:
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    char v6 = a1 + 40;
    while (1)
    {
      uint64_t v7 = (float32x2_t *)*v6;
      if (*v6)
      {
        __int32 v8 = *((_DWORD *)v3 + 7);
        long long v9 = v6;
        do
        {
          __int32 v10 = v7[4].i32[0];
          BOOL v11 = v10 < v8;
          if (v10 >= v8) {
            float v12 = (float32x2_t **)v7;
          }
          else {
            float v12 = (float32x2_t **)&v7[1];
          }
          if (!v11) {
            long long v9 = v7;
          }
          uint64_t v7 = *v12;
        }
        while (*v12);
        if (v9 != v6 && v8 >= v9[4].i32[0] && !v9[7].i32[1])
        {
          float32x2_t v13 = vsub_f32(v9[5], v9[6]);
          if (sqrtf(vaddv_f32(vmul_f32(v13, v13))) > 1.0)
          {
            float v14 = sub_25B3FCCE0(a2, v9 + 5, 0);
            if ((float)(180.0 - v14) < v14) {
              float v14 = 180.0 - v14;
            }
            if (v14 <= 10.0) {
              break;
            }
          }
        }
      }
      short float v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          short float v16 = v15;
          short float v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          short float v16 = (void *)v3[2];
          BOOL v17 = *v16 == (void)v3;
          uint64_t v3 = v16;
        }
        while (!v17);
      }
      uint64_t v3 = v16;
      if (v16 == v4) {
        goto LABEL_24;
      }
    }
    uint64_t v19 = *((unsigned int *)v3 + 7);
    uint64_t v18 = 0x100000000;
  }
  return v19 | v18;
}

uint64_t sub_25B4AEED0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (char *__ptr32 *)(a3 + 168);
  uint64_t v4 = *(void *)(a3 + 168);
  if (v4)
  {
    unsigned int v5 = a2;
    uint64_t v7 = a3 + 168;
    do
    {
      int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 < a2;
      if (v8 >= a2) {
        __int32 v10 = (uint64_t *)v4;
      }
      else {
        __int32 v10 = (uint64_t *)(v4 + 8);
      }
      if (!v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if ((char *__ptr32 *)v7 != v3)
    {
      LODWORD(v3) = *(_DWORD *)(v7 + 32);
      if ((int)v3 <= a2)
      {
        float32x2_t v13 = *(float32x2_t *)(v7 + 40);
        if (sub_25B4AF3CC(a3, v13))
        {
          LODWORD(v3) = v5 >> 8;
          uint64_t v11 = 1;
          return v5 | (((unint64_t)v3 & 0xFFFFFF) << 8) | (v11 << 32);
        }
        float v14 = *(float32x2_t **)(a1 + 88);
        if (v14)
        {
          LOBYTE(v5) = 0;
          uint64_t v11 = 0;
          float v15 = 0.0;
          uint64_t v3 = &off_25B5F1000;
          while (1)
          {
            float32x2_t v16 = vsub_f32(v13, v14[3]);
            float v17 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
            if (v17 <= 0.3)
            {
              if (!v11 || v17 < v15)
              {
                unsigned int v5 = v14[2].u32[0];
                LODWORD(v3) = v5 >> 8;
                uint64_t v11 = 1;
                goto LABEL_23;
              }
              uint64_t v11 = 1;
            }
            float v17 = v15;
LABEL_23:
            float v14 = (float32x2_t *)*v14;
            float v15 = v17;
            if (!v14) {
              return v5 | (((unint64_t)v3 & 0xFFFFFF) << 8) | (v11 << 32);
            }
          }
        }
      }
    }
  }
  uint64_t v11 = 0;
  LOBYTE(v5) = 0;
  return v5 | (((unint64_t)v3 & 0xFFFFFF) << 8) | (v11 << 32);
}

void *sub_25B4AEFDC(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __int32 v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          __int32 v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  __int32 v10 = operator new(0x20uLL);
  *__int32 v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                uint64_t v21 = v27;
                uint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *__int32 v10 = *v30;
LABEL_72:
    void *v30 = v10;
    goto LABEL_73;
  }
  *__int32 v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_25B4AF3B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_25B4AF3CC(uint64_t a1, float32x2_t a2)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 24);
  unint64_t v3 = (float32x2_t **)(a1 + 32);
  if (v2 == (float32x2_t *)(a1 + 32)) {
    return 0;
  }
  while (1)
  {
    float32_t v5 = sub_25B40DB9C(a2, v2[5], v2[6], 0.00001);
    BOOL result = v5 <= 0.1;
    if (v5 <= 0.1) {
      break;
    }
    unint64_t v7 = (float32x2_t *)v2[1];
    if (v7)
    {
      do
      {
        uint8x8_t v8 = (float32x2_t **)v7;
        unint64_t v7 = (float32x2_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint8x8_t v8 = (float32x2_t **)v2[2];
        BOOL v9 = *v8 == v2;
        uint64_t v2 = (float32x2_t *)v8;
      }
      while (!v9);
    }
    uint64_t v2 = (float32x2_t *)v8;
    if (v8 == v3) {
      return 0;
    }
  }
  return result;
}

void *sub_25B4AF474(unint64_t a1)
{
  if (a1 >> 58) {
    sub_25B3FA70C();
  }
  return operator new(a1 << 6);
}

void sub_25B4AF4AC(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_25B3FCAD4(a2);
    float32_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v7 = &v4[8 * v6];
    BOOL v9 = (char *)*a1;
    uint8x8_t v8 = (char *)a1[1];
    __int32 v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint8x8_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *sub_25B4AF554(void *a1, id *a2)
{
  id v4 = *a2;
  id v5 = *a2;
  uint64_t v8 = objc_msgSend_count(*a2, v6, v7);
  id v9 = v5;
  *a1 = v4;
  a1[1] = 0;
  a1[2] = v9;
  a1[3] = v8;

  return a1;
}

void sub_25B4AF5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4AF5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id *a6, void *a7, void *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v1518 = *MEMORY[0x263EF8340];
  id v14 = *(id *)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v16 = *(void **)(a2 + 16);
  v1473[0] = v14;
  v1473[1] = v15;
  id v17 = v16;
  uint64_t v18 = *(void *)(a2 + 24);
  v1473[2] = v17;
  v1473[3] = v18;
  id v19 = *(id *)a3;
  uint64_t v20 = *(void *)(a3 + 8);
  uint64_t v21 = *(void **)(a3 + 16);
  v1472[0] = v19;
  v1472[1] = v20;
  id v22 = v21;
  uint64_t v23 = *(void *)(a3 + 24);
  v1472[2] = v22;
  v1472[3] = v23;
  sub_25B4B6B1C((uint64_t)v1474, (uint64_t)v1473, (uint64_t)v1472, 0.05);

  sub_25B4F5224((void *)(a1 + 384), v1474);
  v1425 = (char **)(a1 + 408);
  id v24 = *(id *)a5;
  uint64_t v25 = *(void *)(a5 + 8);
  id v26 = *(id *)(a5 + 16);
  uint64_t v27 = *(void *)(a5 + 24);
  id v1436 = *a6;
  id v1438 = a6[2];
  *(void *)(a1 + 416) = *(void *)(a1 + 408);
  id v28 = v24;
  id v1461 = v26;
  if (v28 == v1461 && v25 == v27)
  {

    goto LABEL_157;
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  int v32 = 0;
  id v1450 = v28;
  do
  {
    unint64_t v33 = objc_msgSend_objectAtIndex_(v28, v29, v25);
    objc_msgSend_quad(v33, v34, v35);
    float32x2_t v1466 = v36;
    float32x2_t v1471 = v37;

    if (v31 >= v32)
    {
      uint64_t v38 = ((char *)v31 - (char *)v30) >> 5;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 59) {
        sub_25B3FBC4C();
      }
      if (((char *)v32 - (char *)v30) >> 4 > v39) {
        unint64_t v39 = ((char *)v32 - (char *)v30) >> 4;
      }
      if ((unint64_t)((char *)v32 - (char *)v30) >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      char v41 = (char *)sub_25B3FBC9C(v40);
      char v42 = &v41[32 * v38];
      *(float32x2_t *)char v42 = v1466;
      *((float32x2_t *)v42 + 1) = v1471;
      *((_OWORD *)v42 + 1) = xmmword_25B5F1450;
      if (v31 == v30)
      {
        uint64_t v45 = (float32x2_t *)&v41[32 * v38];
      }
      else
      {
        uint64_t v43 = &v41[32 * v38];
        do
        {
          long long v44 = *(_OWORD *)v31[-2].f32;
          uint64_t v45 = (float32x2_t *)(v43 - 32);
          *((_OWORD *)v43 - 2) = *(_OWORD *)v31[-4].f32;
          *((_OWORD *)v43 - 1) = v44;
          v31 -= 4;
          v43 -= 32;
        }
        while (v31 != v30);
      }
      int v32 = (float32x2_t *)&v41[32 * (void)v29];
      unint64_t v31 = (float32x2_t *)(v42 + 32);
      if (v30) {
        operator delete(v30);
      }
      uint64_t v30 = v45;
      id v28 = v1450;
    }
    else
    {
      float32x2_t *v31 = v1466;
      v31[1] = v1471;
      *(_OWORD *)v31[2].f32 = xmmword_25B5F1450;
      v31 += 4;
    }
    ++v25;
  }
  while (v28 != v1461 || v25 != v27);

  if (v30 == v31) {
    goto LABEL_155;
  }
  float v46 = 0.5;
  uint64_t v47 = v30;
  while (1)
  {
    uint64_t v48 = v47 + 1;
    float32x2_t v49 = v47[1];
    float32x2_t v50 = *v47;
    float32x2_t v51 = vsub_f32(*v47, v49);
    if (sqrtf(vaddv_f32(vmul_f32(v51, v51))) < 0.8) {
      goto LABEL_146;
    }
    unint64_t v52 = 0;
    unint64_t v53 = v30;
    do
    {
      float32x2_t v54 = *v53;
      float32x2_t v55 = v53[1];
      v53 += 4;
      if (sub_25B40DB9C(v50, v54, v55, 0.00001) <= 0.1) {
        ++v52;
      }
    }
    while (v53 != v31);
    if (v52 < 2)
    {
      BOOL v60 = 0;
    }
    else
    {
      unint64_t v56 = 0;
      char v57 = v30;
      do
      {
        float32x2_t v58 = *v57;
        float32x2_t v59 = v57[1];
        v57 += 4;
        if (sub_25B40DB9C(v49, v58, v59, 0.00001) <= 0.1) {
          ++v56;
        }
      }
      while (v57 != v31);
      BOOL v60 = v56 > 1;
    }
    uint64_t v61 = v1484;
    if (v1484 == (float32x2_t *)v1485)
    {
      int v93 = 0;
      unint64_t v62 = 0;
      char v92 = 1;
      goto LABEL_90;
    }
    BOOL v1448 = v60;
    unint64_t v62 = 0;
    uint64_t v63 = 0;
    unint64_t v64 = 0;
    do
    {
      if (!v61[7].i32[1] && sub_25B40E8C0(v61 + 5, v47, 20.0, 0.8))
      {
        if ((unint64_t)v63 >= v64)
        {
          uint64_t v65 = (v63 - v62) >> 2;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v64 - (void)v62) >> 1 > v66) {
            unint64_t v66 = (uint64_t)(v64 - (void)v62) >> 1;
          }
          if (v64 - (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)sub_25B3FBC64(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v69 = (char *)(v67 + 4 * v65);
          *(_DWORD *)uint64_t v69 = v61[4].i32[0];
          int v70 = v69 + 4;
          while (v63 != v62)
          {
            int v71 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *((_DWORD *)v69 - 1) = v71;
            v69 -= 4;
          }
          unint64_t v64 = v67 + 4 * v68;
          if (v62) {
            operator delete(v62);
          }
          unint64_t v62 = v69;
          uint64_t v63 = v70;
        }
        else
        {
          *(_DWORD *)uint64_t v63 = v61[4].i32[0];
          v63 += 4;
        }
      }
      unint64_t v72 = (float32x2_t *)v61[1];
      if (v72)
      {
        do
        {
          unint64_t v73 = (float32x2_t **)v72;
          unint64_t v72 = (float32x2_t *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          unint64_t v73 = (float32x2_t **)v61[2];
          BOOL v410 = *v73 == v61;
          uint64_t v61 = (float32x2_t *)v73;
        }
        while (!v410);
      }
      uint64_t v61 = (float32x2_t *)v73;
    }
    while (v73 != v1485);
    float32x2_t v50 = *v47;
    float32x2_t v49 = v47[1];
    unint64_t v74 = v1484;
    if (v1484 == (float32x2_t *)v1485)
    {
      int v94 = 0;
      int v93 = 0;
      char v92 = 1;
      goto LABEL_86;
    }
    float32x2_t v75 = vsub_f32(v50, v49);
    float v76 = sqrtf(vaddv_f32(vmul_f32(v75, v75)));
    while (v74[7].i32[1])
    {
LABEL_76:
      uint64_t v90 = (float32x2_t *)v74[1];
      if (v90)
      {
        do
        {
          uint64_t v91 = (float32x2_t **)v90;
          uint64_t v90 = (float32x2_t *)*v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          uint64_t v91 = (float32x2_t **)v74[2];
          BOOL v410 = *v91 == v74;
          unint64_t v74 = (float32x2_t *)v91;
        }
        while (!v410);
      }
      unint64_t v74 = (float32x2_t *)v91;
      if (v91 == v1485)
      {
        int v94 = 0;
        int v93 = 0;
        char v92 = 1;
        goto LABEL_86;
      }
    }
    float32x2_t v77 = v74[5];
    float32x2_t v78 = v74[6];
    float v79 = sub_25B3FCCE0(v47, v74 + 5, 0);
    float v80 = sub_25B40E468(v50, v49, v77, v78);
    float32x2_t v50 = *v47;
    float32x2_t v49 = v47[1];
    float32x2_t v81 = vsub_f32(v49, *v47);
    float v82 = vaddv_f32(vmul_f32(v81, v81));
    if (v82 < 0.000001) {
      float v82 = 0.000001;
    }
    if (v79 > 5.0) {
      break;
    }
    float v46 = 0.5;
    if (v80 < 0.5) {
      goto LABEL_76;
    }
    float32x2_t v83 = vsub_f32(v77, v78);
    float32x2_t v84 = vsub_f32(vmla_n_f32(v50, v81, vaddv_f32(vmul_f32(vsub_f32(v74[5], v50), v81)) / v82), v74[5]);
    int32x2_t v85 = (int32x2_t)vmul_f32(v84, v84);
    float32x2_t v86 = vsub_f32(vmla_n_f32(v50, v81, vaddv_f32(vmul_f32(v81, vsub_f32(v74[6], v50))) / v82), v74[6]);
    int32x2_t v87 = (int32x2_t)vmul_f32(v86, v86);
    float v88 = v76 - sqrtf(vaddv_f32(vmul_f32(v83, v83)));
    BOOL v89 = (float)(vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v85, v87), (float32x2_t)vzip2_s32(v85, v87))))
                * 0.5) > 0.2
       || v88 <= 1.0;
    if (v89) {
      goto LABEL_76;
    }
    char v92 = 0;
    int v93 = v74[4].i32[0];
    int v94 = 1;
LABEL_86:
    uint64_t v48 = v47 + 1;
    if (v62 != v63 && ((v1448 & v94) != 1 || v63 - v62 != 4 || *(_DWORD *)v62 != v93)) {
      goto LABEL_125;
    }
LABEL_90:
    BOOL v95 = sub_25B4FF49C((uint64_t)v1474, v50);
    BOOL v96 = sub_25B4FF49C((uint64_t)v1474, v49);
    if (v95 && v96)
    {
      int v97 = sub_25B3FD470((float32x2_t **)v1474, v47, 0.1);
      int v98 = sub_25B3FD470((float32x2_t **)v1474, v48, 0.1);
      sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v97, v98, 0, *v47, v47[1]);
      if ((v92 & 1) == 0) {
        goto LABEL_93;
      }
      goto LABEL_126;
    }
    uint64_t v99 = v48;
    if (v95) {
      uint64_t v99 = v47;
    }
    else {
      uint64_t v48 = v47;
    }
    v1453 = v99;
    if (!v95 && !v96) {
      goto LABEL_125;
    }
    int v100 = v1475;
    if (v1475 == (float32x2_t *)v1476)
    {
LABEL_116:
      uint64_t v112 = v1477;
      if (v1477 != v1478)
      {
        float32x2_t v113 = *v48;
        do
        {
          float32x2_t v102 = (float32x2_t)v112[5];
          unint64_t v101 = (void *)v112[6];
          if (sub_25B40DB9C(v113, v102, (float32x2_t)v101, 0.00001) <= 0.1) {
            goto LABEL_149;
          }
          char v114 = (uint64_t *)v112[1];
          if (v114)
          {
            do
            {
              char v115 = v114;
              char v114 = (uint64_t *)*v114;
            }
            while (v114);
          }
          else
          {
            do
            {
              char v115 = (uint64_t *)v112[2];
              BOOL v410 = *v115 == (void)v112;
              uint64_t v112 = v115;
            }
            while (!v410);
          }
          uint64_t v112 = v115;
        }
        while (v115 != v1478);
      }
LABEL_125:
      LOBYTE(v1514[0]) = 0;
      LOBYTE(v1514[4]) = 0;
      goto LABEL_126;
    }
    while (1)
    {
      float32x2_t v102 = v100[5];
      unint64_t v101 = (void *)v100[6];
      float v103 = sub_25B40DB9C(*v48, v102, (float32x2_t)v101, 0.00001);
      if (v103 <= 0.1) {
        goto LABEL_149;
      }
      float32x2_t v104 = vsub_f32(*v47, v47[1]);
      BOOL v89 = sqrtf(vaddv_f32(vmul_f32(v104, v104))) <= 3.0;
      float32x2_t v105 = vsub_f32(v102, (float32x2_t)v101);
      float v106 = sqrtf(vaddv_f32(vmul_f32(v105, v105)));
      BOOL v107 = v89 || v106 <= 3.0;
      if (!v107 && v103 <= v46)
      {
        float v109 = sub_25B3FCCE0(v47, v100 + 5, 0);
        if ((float)(180.0 - v109) < v109) {
          float v109 = 180.0 - v109;
        }
        if (v109 > 80.0) {
          break;
        }
      }
      unint64_t v110 = (float32x2_t *)v100[1];
      if (v110)
      {
        do
        {
          uint64_t v111 = v110;
          unint64_t v110 = (float32x2_t *)*v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          uint64_t v111 = (float32x2_t *)v100[2];
          BOOL v410 = *v111 == (void)v100;
          int v100 = v111;
        }
        while (!v410);
      }
      int v100 = v111;
      if (v111 == (float32x2_t *)v1476) {
        goto LABEL_116;
      }
    }
    float32x2_t v102 = v100[5];
    unint64_t v101 = (void *)v100[6];
LABEL_149:
    float32x2_t v129 = vsub_f32((float32x2_t)v101, v102);
    int32x2_t v130 = (int32x2_t)vmul_f32(v129, vsub_f32(*v48, v102));
    int32x2_t v131 = (int32x2_t)vmul_f32(v129, v129);
    int32x2_t v132 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32(v130, v131), (float32x2_t)vzip2_s32(v130, v131));
    float v133 = vdiv_f32((float32x2_t)v132, (float32x2_t)vdup_lane_s32(v132, 1)).f32[0];
    if (v133 <= 0.0)
    {
      unint64_t v101 = (void *)v102;
      uint64_t v134 = v1453;
    }
    else
    {
      uint64_t v134 = v1453;
      if (v133 < 1.0) {
        unint64_t v101 = (void *)vmla_n_f32(v102, v129, v133);
      }
    }
    v1509[0] = v101;
    int v135 = sub_25B3FD470((float32x2_t **)v1474, v134, 0.1);
    int v136 = sub_25B3FD470((float32x2_t **)v1474, (float32x2_t *)v1509, 0.1);
    sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v135, v136, 0, *v134, (float32x2_t)v101);
    if ((v92 & 1) == 0) {
LABEL_93:
    }
      sub_25B3F9000((uint64_t)v1474, v93);
LABEL_126:
    if (v62) {
      operator delete(v62);
    }
    id v28 = v1450;
    if (LOBYTE(v1514[4]))
    {
      uint64_t v116 = *(_OWORD **)(a1 + 416);
      unint64_t v117 = *(void *)(a1 + 424);
      if ((unint64_t)v116 >= v117)
      {
        uint64_t v119 = ((char *)v116 - *v1425) >> 5;
        unint64_t v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 59) {
          sub_25B3FBC4C();
        }
        uint64_t v121 = v117 - (void)*v1425;
        if (v121 >> 4 > v120) {
          unint64_t v120 = v121 >> 4;
        }
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v122 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v122 = v120;
        }
        if (v122) {
          unint64_t v122 = (unint64_t)sub_25B3FBC9C(v122);
        }
        else {
          uint64_t v123 = 0;
        }
        uint64_t v124 = (_OWORD *)(v122 + 32 * v119);
        *uint64_t v124 = *(_OWORD *)v1514;
        v124[1] = *(_OWORD *)&v1514[2];
        uint64_t v126 = *(char **)(a1 + 408);
        uint64_t v125 = *(char **)(a1 + 416);
        uint64_t v127 = v124;
        if (v125 != v126)
        {
          do
          {
            long long v128 = *((_OWORD *)v125 - 1);
            *(v127 - 2) = *((_OWORD *)v125 - 2);
            *(v127 - 1) = v128;
            v127 -= 2;
            v125 -= 32;
          }
          while (v125 != v126);
          uint64_t v125 = *v1425;
        }
        uint64_t v118 = v124 + 2;
        *(void *)(a1 + 408) = v127;
        *(void *)(a1 + 416) = v124 + 2;
        *(void *)(a1 + 424) = v122 + 32 * v123;
        if (v125) {
          operator delete(v125);
        }
      }
      else
      {
        *uint64_t v116 = *(_OWORD *)v1514;
        v116[1] = *(_OWORD *)&v1514[2];
        uint64_t v118 = v116 + 2;
      }
      *(void *)(a1 + 416) = v118;
    }
LABEL_146:
    v47 += 4;
    if (v47 == v31)
    {
LABEL_155:
      if (v30) {
        operator delete(v30);
      }
LABEL_157:

      sub_25B54EE68(a1 + 432, (uint64_t)v1474, a8, a9, a10);
      if (*(unsigned char *)(a1 + 568))
      {
        sub_25B3FB178(a1 + 528);
        *(unsigned char *)(a1 + 568) = 0;
      }
      v1445 = (char **)(a1 + 456);
      *(void *)(a1 + 464) = *(void *)(a1 + 456);
      *(void *)(a1 + 488) = *(void *)(a1 + 480);
      v1437 = (char **)(a1 + 504);
      *(void *)(a1 + 512) = *(void *)(a1 + 504);
      unint64_t v137 = v1484;
      if (v1484 == (float32x2_t *)v1485)
      {
        long long v138 = 0;
        unint64_t v140 = 0;
      }
      else
      {
        long long v138 = 0;
        long long v139 = 0;
        unint64_t v140 = 0;
        do
        {
          if (v137[7].i32[1] == 1)
          {
            long long v141 = v137 + 5;
            if ((unint64_t)v139 >= v140)
            {
              uint64_t v143 = (v139 - (char *)v138) >> 5;
              unint64_t v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v140 - (void)v138) >> 4 > v144) {
                unint64_t v144 = (uint64_t)(v140 - (void)v138) >> 4;
              }
              if (v140 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v145 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v144;
              }
              if (v145) {
                unint64_t v145 = (unint64_t)sub_25B3FBC9C(v145);
              }
              else {
                uint64_t v146 = 0;
              }
              long long v147 = *(_OWORD *)v137[7].f32;
              long long v148 = (_OWORD *)(v145 + 32 * v143);
              *long long v148 = *(_OWORD *)v141->f32;
              v148[1] = v147;
              if (v139 == (char *)v138)
              {
                long long v151 = (float32x2_t *)(v145 + 32 * v143);
              }
              else
              {
                unint64_t v149 = v145 + 32 * v143;
                do
                {
                  long long v150 = *((_OWORD *)v139 - 1);
                  long long v151 = (float32x2_t *)(v149 - 32);
                  *(_OWORD *)(v149 - 32) = *((_OWORD *)v139 - 2);
                  *(_OWORD *)(v149 - 16) = v150;
                  v139 -= 32;
                  v149 -= 32;
                }
                while (v139 != (char *)v138);
              }
              unint64_t v140 = v145 + 32 * v146;
              long long v139 = (char *)(v148 + 2);
              if (v138) {
                operator delete(v138);
              }
              long long v138 = v151;
            }
            else
            {
              long long v142 = *(_OWORD *)v137[7].f32;
              *(_OWORD *)long long v139 = *(_OWORD *)v141->f32;
              *((_OWORD *)v139 + 1) = v142;
              v139 += 32;
            }
          }
          long long v152 = (float32x2_t *)v137[1];
          if (v152)
          {
            do
            {
              long long v153 = (float32x2_t **)v152;
              long long v152 = (float32x2_t *)*v152;
            }
            while (v152);
          }
          else
          {
            do
            {
              long long v153 = (float32x2_t **)v137[2];
              BOOL v410 = *v153 == v137;
              unint64_t v137 = (float32x2_t *)v153;
            }
            while (!v410);
          }
          unint64_t v137 = (float32x2_t *)v153;
        }
        while (v153 != v1485);
        if (v138 != (float32x2_t *)v139)
        {
          long long v154 = (float *)(a1 + 528);
          v1467 = (void **)(a1 + 544);
          long long v155 = v138;
          do
          {
            int v157 = v155[3].i32[0];
            int v156 = v155[3].i32[1];
            if (!*(unsigned char *)(a1 + 568))
            {
              memset(v1514, 0, 32);
              LODWORD(v1514[4]) = 1065353216;
              long long v158 = v1481;
              if (v1481 == v1482) {
                goto LABEL_212;
              }
              do
              {
                float32x2_t v159 = (float32x2_t)v158[5];
                if (sub_25B4AF3CC((uint64_t)v1474, v159)) {
                  sub_25B4AEFDC((float *)v1514, *((_DWORD *)v158 + 8), (_DWORD *)v158 + 8)[3] = v159;
                }
                long long v160 = (uint64_t *)v158[1];
                if (v160)
                {
                  do
                  {
                    long long v161 = v160;
                    long long v160 = (uint64_t *)*v160;
                  }
                  while (v160);
                }
                else
                {
                  do
                  {
                    long long v161 = (uint64_t *)v158[2];
                    BOOL v410 = *v161 == (void)v158;
                    long long v158 = v161;
                  }
                  while (!v410);
                }
                long long v158 = v161;
              }
              while (v161 != v1482);
              if (!*(unsigned char *)(a1 + 568))
              {
LABEL_212:
                int v172 = v1514[0];
                unint64_t v173 = (unint64_t)v1514[1];
                v1514[1] = 0;
                v1514[0] = 0;
                *(void *)(a1 + 528) = v172;
                *(void *)(a1 + 536) = v173;
                uint64_t v174 = v1514[2];
                uint64_t v175 = v1514[3];
                *(void **)(a1 + 544) = v1514[2];
                *(void *)(a1 + 552) = v175;
                *(_DWORD *)(a1 + 560) = v1514[4];
                if (v175)
                {
                  unint64_t v176 = v174[1];
                  if ((v173 & (v173 - 1)) != 0)
                  {
                    if (v176 >= v173) {
                      v176 %= v173;
                    }
                  }
                  else
                  {
                    v176 &= v173 - 1;
                  }
                  v172[v176] = v1467;
                  v1514[2] = 0;
                  v1514[3] = 0;
                }
                *(unsigned char *)(a1 + 568) = 1;
              }
              else
              {
                if (*(void *)(a1 + 552))
                {
                  uint64_t v162 = *v1467;
                  if (*v1467)
                  {
                    do
                    {
                      uint64_t v163 = (void *)*v162;
                      operator delete(v162);
                      uint64_t v162 = v163;
                    }
                    while (v163);
                  }
                  *(void *)(a1 + 544) = 0;
                  uint64_t v164 = *(void *)(a1 + 536);
                  if (v164)
                  {
                    for (uint64_t i = 0; i != v164; ++i)
                      *(void *)(*(void *)v154 + 8 * i) = 0;
                  }
                  *(void *)(a1 + 552) = 0;
                }
                int v166 = v1514[0];
                v1514[0] = 0;
                uint64_t v167 = *(void **)v154;
                *(void *)long long v154 = v166;
                if (v167) {
                  operator delete(v167);
                }
                unint64_t v168 = (unint64_t)v1514[1];
                uint64_t v169 = v1514[2];
                *(void **)(a1 + 536) = v1514[1];
                v1514[1] = 0;
                uint64_t v170 = v1514[3];
                *(void **)(a1 + 552) = v1514[3];
                *(_DWORD *)(a1 + 560) = v1514[4];
                *(void *)(a1 + 544) = v169;
                if (v170)
                {
                  unint64_t v171 = v169[1];
                  if ((v168 & (v168 - 1)) != 0)
                  {
                    if (v171 >= v168) {
                      v171 %= v168;
                    }
                  }
                  else
                  {
                    v171 &= v168 - 1;
                  }
                  *(void *)(*(void *)v154 + 8 * v171) = v1467;
                  v1514[2] = 0;
                  v1514[3] = 0;
                }
              }
              sub_25B3FB178((uint64_t)v1514);
            }
            unint64_t v177 = sub_25B4AEED0((uint64_t)v1445, v157, (uint64_t)v1474);
            *(void *)&long long v1492 = v177;
            if (HIDWORD(v177)
              && (int v178 = v177,
                  unint64_t v179 = sub_25B4AEED0((uint64_t)v1445, v156, (uint64_t)v1474),
                  *(void *)&long long v1490 = v179,
                  HIDWORD(v179)))
            {
              int v190 = v179;
              if (v178 != v179 && (v157 != v178 || v156 != v179))
              {
                sub_25B3F9000((uint64_t)v1474, v155[2].i32[0]);
                float32x2_t v191 = (float32x2_t *)sub_25B4AEFDC(v154, v178, &v1492);
                uint64_t v192 = (float32x2_t *)sub_25B4AEFDC(v154, v190, &v1490);
                sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v178, v190, 1u, v191[3], v192[3]);
                __int8 v193 = v155->i8[0];
                long long v194 = *(_OWORD *)((char *)v155->f32 + 1);
                *(_OWORD *)((char *)v1507 + 15) = *(_OWORD *)v155[2].f32;
                v1507[0] = v194;
                unint64_t v195 = *(void *)(a1 + 464);
                unint64_t v196 = *(void *)(a1 + 472);
                if (v195 >= v196)
                {
                  uint64_t v203 = (uint64_t)(v195 - (void)*v1445) >> 5;
                  unint64_t v204 = v203 + 1;
                  if ((unint64_t)(v203 + 1) >> 59) {
LABEL_2073:
                  }
                    sub_25B3FBC4C();
                  uint64_t v205 = v196 - (void)*v1445;
                  if (v205 >> 4 > v204) {
                    unint64_t v204 = v205 >> 4;
                  }
                  if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v206 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v206 = v204;
                  }
                  if (v206) {
                    unint64_t v206 = (unint64_t)sub_25B3FBC9C(v206);
                  }
                  else {
                    uint64_t v207 = 0;
                  }
                  unint64_t v208 = v206 + 32 * v203;
                  *(unsigned char *)unint64_t v208 = v193;
                  *(_OWORD *)(v208 + 1) = v1507[0];
                  *(_OWORD *)(v208 + 16) = *(_OWORD *)((char *)v1507 + 15);
                  uint64_t v210 = *(char **)(a1 + 456);
                  long long v209 = *(char **)(a1 + 464);
                  unint64_t v211 = v208;
                  if (v209 != v210)
                  {
                    do
                    {
                      long long v212 = *((_OWORD *)v209 - 1);
                      *(_OWORD *)(v211 - 32) = *((_OWORD *)v209 - 2);
                      *(_OWORD *)(v211 - 16) = v212;
                      v211 -= 32;
                      v209 -= 32;
                    }
                    while (v209 != v210);
                    long long v209 = *v1445;
                  }
                  unint64_t v197 = v208 + 32;
                  *(void *)(a1 + 456) = v211;
                  *(void *)(a1 + 464) = v208 + 32;
                  *(void *)(a1 + 472) = v206 + 32 * v207;
                  if (v209) {
                    operator delete(v209);
                  }
                }
                else
                {
                  *(unsigned char *)unint64_t v195 = v193;
                  *(_OWORD *)(v195 + 1) = v1507[0];
                  *(_OWORD *)(v195 + 16) = *(_OWORD *)((char *)v1507 + 15);
                  unint64_t v197 = v195 + 32;
                }
                *(void *)(a1 + 464) = v197;
              }
            }
            else
            {
              sub_25B3F9000((uint64_t)v1474, v155[2].i32[0]);
              __int8 v180 = v155->i8[0];
              long long v181 = *(_OWORD *)((char *)v155->f32 + 1);
              *(_OWORD *)((char *)&v1509[1] + 7) = *(_OWORD *)v155[2].f32;
              *(_OWORD *)v1509 = v181;
              unint64_t v182 = *(void *)(a1 + 512);
              unint64_t v183 = *(void *)(a1 + 520);
              if (v182 >= v183)
              {
                uint64_t v185 = (uint64_t)(v182 - (void)*v1437) >> 5;
                unint64_t v186 = v185 + 1;
                if ((unint64_t)(v185 + 1) >> 59) {
                  goto LABEL_2073;
                }
                uint64_t v187 = v183 - (void)*v1437;
                if (v187 >> 4 > v186) {
                  unint64_t v186 = v187 >> 4;
                }
                if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v188 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v188 = v186;
                }
                if (v188) {
                  unint64_t v188 = (unint64_t)sub_25B3FBC9C(v188);
                }
                else {
                  uint64_t v189 = 0;
                }
                unint64_t v198 = v188 + 32 * v185;
                *(unsigned char *)unint64_t v198 = v180;
                *(_OWORD *)(v198 + 1) = *(_OWORD *)v1509;
                *(_OWORD *)(v198 + 16) = *(_OWORD *)((char *)&v1509[1] + 7);
                uint64_t v200 = *(char **)(a1 + 504);
                uint64_t v199 = *(char **)(a1 + 512);
                unint64_t v201 = v198;
                if (v199 != v200)
                {
                  do
                  {
                    long long v202 = *((_OWORD *)v199 - 1);
                    *(_OWORD *)(v201 - 32) = *((_OWORD *)v199 - 2);
                    *(_OWORD *)(v201 - 16) = v202;
                    v201 -= 32;
                    v199 -= 32;
                  }
                  while (v199 != v200);
                  uint64_t v199 = *v1437;
                }
                unint64_t v184 = v198 + 32;
                *(void *)(a1 + 504) = v201;
                *(void *)(a1 + 512) = v198 + 32;
                *(void *)(a1 + 520) = v188 + 32 * v189;
                if (v199) {
                  operator delete(v199);
                }
              }
              else
              {
                *(unsigned char *)unint64_t v182 = v180;
                *(_OWORD *)(v182 + 1) = *(_OWORD *)v1509;
                *(_OWORD *)(v182 + 16) = *(_OWORD *)((char *)&v1509[1] + 7);
                unint64_t v184 = v182 + 32;
              }
              *(void *)(a1 + 512) = v184;
            }
            v155 += 4;
          }
          while (v155 != (float32x2_t *)v139);
        }
      }
      v1420 = (char **)(a1 + 480);
      float32x2_t v213 = v1484;
      if (v1484 != (float32x2_t *)v1485)
      {
        int v214 = v138;
        do
        {
          if (v213[7].i32[1] == 1)
          {
            uint64_t v215 = v213 + 5;
            if ((unint64_t)v214 >= v140)
            {
              uint64_t v217 = ((char *)v214 - (char *)v138) >> 5;
              unint64_t v218 = v217 + 1;
              if ((unint64_t)(v217 + 1) >> 59) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v140 - (void)v138) >> 4 > v218) {
                unint64_t v218 = (uint64_t)(v140 - (void)v138) >> 4;
              }
              if (v140 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v219 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v219 = v218;
              }
              if (v219) {
                unint64_t v219 = (unint64_t)sub_25B3FBC9C(v219);
              }
              else {
                uint64_t v220 = 0;
              }
              long long v221 = *(_OWORD *)v213[7].f32;
              int v222 = (float32x2_t *)(v219 + 32 * v217);
              *(_OWORD *)v222->f32 = *(_OWORD *)v215->f32;
              *(_OWORD *)v222[2].f32 = v221;
              if (v214 == v138)
              {
                uint64_t v225 = (float32x2_t *)(v219 + 32 * v217);
              }
              else
              {
                unint64_t v223 = v219 + 32 * v217;
                do
                {
                  long long v224 = *(_OWORD *)v214[-2].f32;
                  uint64_t v225 = (float32x2_t *)(v223 - 32);
                  *(_OWORD *)(v223 - 32) = *(_OWORD *)v214[-4].f32;
                  *(_OWORD *)(v223 - 16) = v224;
                  v214 -= 4;
                  v223 -= 32;
                }
                while (v214 != v138);
              }
              unint64_t v140 = v219 + 32 * v220;
              int v214 = v222 + 4;
              if (v138) {
                operator delete(v138);
              }
              long long v138 = v225;
            }
            else
            {
              long long v216 = *(_OWORD *)v213[7].f32;
              *(_OWORD *)v214->f32 = *(_OWORD *)v215->f32;
              *(_OWORD *)v214[2].f32 = v216;
              v214 += 4;
            }
          }
          uint64_t v226 = (float32x2_t *)v213[1];
          if (v226)
          {
            do
            {
              uint64_t v227 = (float32x2_t **)v226;
              uint64_t v226 = (float32x2_t *)*v226;
            }
            while (v226);
          }
          else
          {
            do
            {
              uint64_t v227 = (float32x2_t **)v213[2];
              BOOL v410 = *v227 == v213;
              float32x2_t v213 = (float32x2_t *)v227;
            }
            while (!v410);
          }
          float32x2_t v213 = (float32x2_t *)v227;
        }
        while (v227 != v1485);
        if (v138 != v214)
        {
          for (uint64_t j = v138; j != v214; j += 4)
          {
            uint64_t v229 = v1482[0];
            if (!v1482[0]) {
              continue;
            }
            int v230 = j[3].i32[0];
            int v231 = j[3].i32[1];
            int v232 = v1482;
            uint64_t v233 = (uint64_t *)v1482[0];
            do
            {
              uint64_t v234 = v233;
              uint64_t v235 = v232;
              int v236 = *((_DWORD *)v233 + 8);
              if (v236 >= v230) {
                int v232 = v233;
              }
              else {
                ++v233;
              }
              uint64_t v233 = (uint64_t *)*v233;
            }
            while (v233);
            if (v232 == v1482) {
              continue;
            }
            if (v236 < v230) {
              uint64_t v234 = v235;
            }
            if (*((_DWORD *)v234 + 8) > v230) {
              continue;
            }
            uint64_t v237 = v1482;
            uint64_t v238 = (uint64_t *)v1482[0];
            do
            {
              long long v239 = v238;
              long long v240 = v237;
              int v241 = *((_DWORD *)v238 + 8);
              if (v241 >= v231) {
                uint64_t v237 = v238;
              }
              else {
                ++v238;
              }
              uint64_t v238 = (uint64_t *)*v238;
            }
            while (v238);
            if (v237 == v1482) {
              continue;
            }
            if (v241 < v231) {
              long long v239 = v240;
            }
            if (*((_DWORD *)v239 + 8) > v231) {
              continue;
            }
            unint64_t v242 = v1482;
            long long v243 = (uint64_t *)v1482[0];
            do
            {
              long long v244 = v243;
              long long v245 = v242;
              int v246 = *((_DWORD *)v243 + 8);
              if (v246 >= v230) {
                unint64_t v242 = v243;
              }
              else {
                ++v243;
              }
              long long v243 = (uint64_t *)*v243;
            }
            while (v243);
            if (v242 == v1482) {
              goto LABEL_325;
            }
            if (v246 < v230) {
              long long v244 = v245;
            }
            if (v230 < *((_DWORD *)v244 + 8)) {
LABEL_325:
            }
              unint64_t v242 = v1482;
            long long v247 = v1482;
            do
            {
              long long v248 = (uint64_t *)v229;
              long long v249 = v247;
              int v250 = *(_DWORD *)(v229 + 32);
              long long v251 = (uint64_t *)(v229 + 8);
              if (v250 >= v231)
              {
                long long v251 = v248;
                long long v247 = v248;
              }
              uint64_t v229 = *v251;
            }
            while (v229);
            if (v247 == v1482 || (v250 >= v231 ? (long long v252 = v248) : (long long v252 = v249), v231 < *((_DWORD *)v252 + 8))) {
              long long v247 = v1482;
            }
            unint64_t v253 = sub_25B4AED9C(v1474, j, (uint64_t)(v242 + 5));
            unint64_t v254 = sub_25B4AED9C(v1474, j, (uint64_t)(v247 + 5));
            unint64_t v255 = HIDWORD(v254);
            if (HIDWORD(v253))
            {
              int v256 = v231;
              if (!v255)
              {
LABEL_340:
                long long v257 = (float32x2_t *)v1485[0];
                if (!v1485[0]) {
                  continue;
                }
                long long v258 = v1485;
                long long v259 = (uint64_t *)v1485[0];
                do
                {
                  uint64_t v260 = v259;
                  unint64_t v261 = v258;
                  int v262 = *((_DWORD *)v259 + 8);
                  if (v262 >= (int)v253) {
                    long long v258 = v259;
                  }
                  else {
                    ++v259;
                  }
                  long long v259 = (uint64_t *)*v259;
                }
                while (v259);
                if (v258 == v1485) {
                  continue;
                }
                if (v262 < (int)v253) {
                  uint64_t v260 = v261;
                }
                if (*((_DWORD *)v260 + 8) > (int)v253) {
                  continue;
                }
                float32x4_t v263 = (float32x2_t *)v1485;
                do
                {
                  long long v264 = v257;
                  long long v265 = v263;
                  int v266 = v257[4].i32[0];
                  uint64_t v267 = v257 + 1;
                  if (v266 >= (int)v253)
                  {
                    uint64_t v267 = v264;
                    float32x4_t v263 = v264;
                  }
                  long long v257 = (float32x2_t *)*v267;
                }
                while (v257);
                if (v263 == (float32x2_t *)v1485
                  || (v266 >= (int)v253 ? (uint64_t v268 = v264) : (uint64_t v268 = v265), v268[4].i32[0] > (int)v253))
                {
                  float32x4_t v263 = (float32x2_t *)v1485;
                }
                long long v269 = v263 + 5;
                float v270 = sub_25B3FCCE0(j, v263 + 5, 0);
                if ((float)(180.0 - v270) >= v270) {
                  float v271 = v270;
                }
                else {
                  float v271 = 180.0 - v270;
                }
                uint64_t v272 = (float32x2_t *)v1482[0];
                if (!v1482[0])
                {
                  __int16 v279 = 0;
                  goto LABEL_426;
                }
                uint64_t v273 = (float32x2_t *)v1482;
                float32x2_t v274 = (float32x2_t *)v1482[0];
                do
                {
                  float v275 = v274;
                  long long v276 = v273;
                  int v277 = v274[4].i32[0];
                  if (v277 >= v256) {
                    uint64_t v273 = v274;
                  }
                  else {
                    ++v274;
                  }
                  float32x2_t v274 = (float32x2_t *)*v274;
                }
                while (v274);
                v1462 = v269;
                if (v273 == (float32x2_t *)v1482
                  || (v277 >= v256 ? (simd_float4 v278 = v275) : (simd_float4 v278 = v276), v278[4].i32[0] > v256))
                {
                  __int16 v279 = 0;
                  uint64_t v280 = 0;
                  goto LABEL_408;
                }
                if (v277 >= v256) {
                  long long v276 = v275;
                }
                long long v281 = (float32x2_t *)v1481;
                if (v1481 == v1482)
                {
                  __int16 v279 = 0;
                  uint64_t v280 = 0;
                }
                else
                {
                  __int16 v279 = 0;
                  uint64_t v280 = 0;
                  unint64_t v282 = 0;
                  v1454 = v276;
                  do
                  {
                    __int32 v283 = v281[4].i32[0];
                    if (v283 != v256)
                    {
                      float32x2_t v284 = vsub_f32(v276[5], v281[5]);
                      if (sqrtf(vaddv_f32(vmul_f32(v284, v284))) < 0.2)
                      {
                        if ((unint64_t)v280 >= v282)
                        {
                          uint64_t v285 = v280 - v279;
                          unint64_t v286 = v285 + 1;
                          if ((unint64_t)(v285 + 1) >> 62) {
                            sub_25B3FBC4C();
                          }
                          unint64_t v287 = v282 - (void)v279;
                          unint64_t v288 = (uint64_t)(v282 - (void)v279) >> 1;
                          if (v288 > v286) {
                            unint64_t v286 = v288;
                          }
                          if (v287 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v289 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v289 = v286;
                          }
                          if (v289)
                          {
                            unint64_t v289 = (unint64_t)sub_25B3FBC64(v289);
                            char v291 = v279;
                            __int32 v283 = v281[4].i32[0];
                          }
                          else
                          {
                            char v291 = v279;
                            uint64_t v290 = 0;
                          }
                          long long v292 = (__int32 *)(v289 + 4 * v285);
                          *long long v292 = v283;
                          long long v293 = v292 + 1;
                          while (v280 != v291)
                          {
                            __int32 v294 = *--v280;
                            *--long long v292 = v294;
                          }
                          unint64_t v282 = v289 + 4 * v290;
                          if (v291)
                          {
                            unint64_t v295 = v289 + 4 * v290;
                            operator delete(v291);
                            unint64_t v282 = v295;
                          }
                          uint64_t v280 = v293;
                          __int16 v279 = v292;
                          long long v276 = v1454;
                        }
                        else
                        {
                          *v280++ = v283;
                        }
                      }
                    }
                    float32x2_t v296 = (float32x2_t *)v281[1];
                    if (v296)
                    {
                      do
                      {
                        int v297 = (float32x2_t **)v296;
                        float32x2_t v296 = (float32x2_t *)*v296;
                      }
                      while (v296);
                    }
                    else
                    {
                      do
                      {
                        int v297 = (float32x2_t **)v281[2];
                        BOOL v410 = *v297 == v281;
                        long long v281 = (float32x2_t *)v297;
                      }
                      while (!v410);
                    }
                    long long v281 = (float32x2_t *)v297;
                  }
                  while (v297 != v1482);
                  uint64_t v272 = (float32x2_t *)v1482[0];
                }
                if (v272)
                {
LABEL_408:
                  uint64_t v298 = (float32x2_t *)v1482;
                  id v299 = v272;
                  do
                  {
                    float32x2_t v300 = v299;
                    uint64_t v301 = v298;
                    int v302 = v299[4].i32[0];
                    if (v302 >= v230) {
                      uint64_t v298 = v299;
                    }
                    else {
                      ++v299;
                    }
                    id v299 = (float32x2_t *)*v299;
                  }
                  while (v299);
                  if (v298 == (float32x2_t *)v1482) {
                    goto LABEL_426;
                  }
                  if (v302 < v230) {
                    float32x2_t v300 = v301;
                  }
                  if (v300[4].i32[0] > v230) {
                    goto LABEL_426;
                  }
                  uint64_t v303 = (float32x2_t *)v1482;
                  unint64_t v304 = v272;
                  do
                  {
                    unint64_t v305 = v304;
                    uint64_t v306 = v303;
                    int v307 = v304[4].i32[0];
                    if (v307 >= v256) {
                      uint64_t v303 = v304;
                    }
                    else {
                      ++v304;
                    }
                    unint64_t v304 = (float32x2_t *)*v304;
                  }
                  while (v304);
                  if (v303 == (float32x2_t *)v1482) {
                    goto LABEL_426;
                  }
                  if (v307 < v256) {
                    unint64_t v305 = v306;
                  }
                  id v308 = (float32x2_t *)v1482;
                  int v309 = v272;
                  if (v305[4].i32[0] > v256) {
                    goto LABEL_426;
                  }
                  do
                  {
                    float v315 = v309;
                    float v316 = v308;
                    int v317 = v309[4].i32[0];
                    float v318 = v309 + 1;
                    if (v317 >= v230)
                    {
                      float v318 = v315;
                      id v308 = v315;
                    }
                    int v309 = (float32x2_t *)*v318;
                  }
                  while (v309);
                  if (v308 == (float32x2_t *)v1482) {
                    goto LABEL_442;
                  }
                  if (v317 < v230) {
                    float v315 = v316;
                  }
                  if (v230 < v315[4].i32[0]) {
LABEL_442:
                  }
                    id v308 = (float32x2_t *)v1482;
                  size_t v319 = (float32x2_t *)v1482;
                  do
                  {
                    uint64_t v320 = v272;
                    uint64_t v321 = v319;
                    int v322 = v272[4].i32[0];
                    size_t v323 = v272 + 1;
                    if (v322 >= v256)
                    {
                      size_t v323 = v320;
                      size_t v319 = v320;
                    }
                    uint64_t v272 = (float32x2_t *)*v323;
                  }
                  while (v272);
                  if (v319 == (float32x2_t *)v1482
                    || (v322 >= v256 ? (id v324 = v320) : (id v324 = v321), v256 < v324[4].i32[0]))
                  {
                    size_t v319 = (float32x2_t *)v1482;
                  }
                  if (v279 == v280)
                  {
                    char v310 = 1;
                  }
                  else
                  {
                    float32x2_t v325 = vsub_f32(v319[5], v308[5]);
                    v1439 = v279;
                    int v1451 = v256;
                    v1455 = v308;
                    v1449 = v319;
                    do
                    {
                      uint64_t v326 = v1482[0];
                      if (v1482[0])
                      {
                        int v327 = *v279;
                        uint64_t v328 = v1482;
                        float32x2_t v329 = (uint64_t *)v1482[0];
                        do
                        {
                          float32x2_t v330 = v329;
                          uint64_t v331 = v328;
                          int v332 = *((_DWORD *)v329 + 8);
                          if (v332 >= v327) {
                            uint64_t v328 = v329;
                          }
                          else {
                            ++v329;
                          }
                          float32x2_t v329 = (uint64_t *)*v329;
                        }
                        while (v329);
                        if (v328 != v1482)
                        {
                          if (v332 < v327) {
                            float32x2_t v330 = v331;
                          }
                          if (*((_DWORD *)v330 + 8) <= v327)
                          {
                            float32x4_t v333 = v1482;
                            do
                            {
                              long long v334 = (uint64_t *)v326;
                              uint64_t v335 = v333;
                              int v336 = *(_DWORD *)(v326 + 32);
                              uint64_t v337 = (uint64_t *)(v326 + 8);
                              if (v336 >= v327)
                              {
                                uint64_t v337 = v334;
                                float32x4_t v333 = v334;
                              }
                              uint64_t v326 = *v337;
                            }
                            while (v326);
                            if (v333 == v1482
                              || (v336 >= v327 ? (BOOL v338 = v334) : (BOOL v338 = v335), v327 < *((_DWORD *)v338 + 8)))
                            {
                              float32x4_t v333 = v1482;
                            }
                            unint64_t v339 = (void *)v319[5];
                            BOOL v340 = (void *)v333[5];
                            v1509[0] = v339;
                            v1509[1] = v340;
                            *(_OWORD *)&v1509[2] = xmmword_25B5F10F0;
                            float v341 = sub_25B3FCCE0((float32x2_t *)v1509, v1462, 0);
                            if ((float)(180.0 - v341) < v341) {
                              float v341 = 180.0 - v341;
                            }
                            if (v341 >= 20.0
                              || vaddv_f32(vmul_f32(v325, vsub_f32((float32x2_t)v340, (float32x2_t)v339))) <= 0.0)
                            {
                              uint64_t v342 = v333[5];
                              *(float32x2_t *)&v1507[0] = v1455[5];
                              *((void *)&v1507[0] + 1) = v342;
                              v1507[1] = xmmword_25B5F10F0;
                              float v343 = sub_25B3FCCE0((float32x2_t *)v1507, v1462, 0);
                              if ((float)(180.0 - v343) < v343) {
                                float v343 = 180.0 - v343;
                              }
                              int v344 = v1451;
                              if (v343 < v271) {
                                int v344 = v327;
                              }
                              int v1451 = v344;
                              if (v343 < v271) {
                                float v271 = v343;
                              }
                            }
                            size_t v319 = v1449;
                            id v308 = v1455;
                          }
                        }
                      }
                      ++v279;
                    }
                    while (v279 != v280);
                    if (v1451 == v256)
                    {
                      char v310 = 1;
                      __int16 v279 = v1439;
                    }
                    else
                    {
                      __int16 v279 = v1439;
                      sub_25B3F9000((uint64_t)v1474, j[2].i32[0]);
                      float32x4_t v355 = (float32x2_t *)v1482[0];
                      if (!v1482[0]) {
                        goto LABEL_516;
                      }
                      uint64_t v356 = (float32x2_t *)v1482;
                      do
                      {
                        id v357 = v355;
                        id v358 = v356;
                        int v359 = v355[4].i32[0];
                        if (v359 >= v1451) {
                          uint64_t v356 = v355;
                        }
                        else {
                          ++v355;
                        }
                        float32x4_t v355 = (float32x2_t *)*v355;
                      }
                      while (v355);
                      if (v356 == (float32x2_t *)v1482) {
                        goto LABEL_516;
                      }
                      if (v359 < v1451) {
                        id v357 = v358;
                      }
                      if (v1451 < v357[4].i32[0]) {
LABEL_516:
                      }
                        uint64_t v356 = (float32x2_t *)v1482;
                      sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v1451, v230, 1u, v356[5], v308[5]);
                      char v310 = 0;
                    }
                  }
                }
                else
                {
LABEL_426:
                  char v310 = 0;
                  LOBYTE(v1514[0]) = 0;
                  LOBYTE(v1514[4]) = 0;
                }
                if (v279) {
                  operator delete(v279);
                }
                if (LOBYTE(v1514[4])) {
                  char v311 = v310;
                }
                else {
                  char v311 = 1;
                }
                if ((v311 & 1) == 0)
                {
                  uint64_t v312 = *(_OWORD **)(a1 + 488);
                  unint64_t v313 = *(void *)(a1 + 496);
                  if ((unint64_t)v312 >= v313)
                  {
                    uint64_t v345 = ((char *)v312 - *v1420) >> 5;
                    unint64_t v346 = v345 + 1;
                    if ((unint64_t)(v345 + 1) >> 59) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v347 = v313 - (void)*v1420;
                    if (v347 >> 4 > v346) {
                      unint64_t v346 = v347 >> 4;
                    }
                    if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v348 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v348 = v346;
                    }
                    if (v348) {
                      unint64_t v348 = (unint64_t)sub_25B3FBC9C(v348);
                    }
                    else {
                      uint64_t v349 = 0;
                    }
                    int v350 = (_OWORD *)(v348 + 32 * v345);
                    *int v350 = *(_OWORD *)v1514;
                    v350[1] = *(_OWORD *)&v1514[2];
                    uint64_t v352 = *(char **)(a1 + 480);
                    unint64_t v351 = *(char **)(a1 + 488);
                    float32x4_t v353 = v350;
                    if (v351 != v352)
                    {
                      do
                      {
                        long long v354 = *((_OWORD *)v351 - 1);
                        *(v353 - 2) = *((_OWORD *)v351 - 2);
                        *(v353 - 1) = v354;
                        v353 -= 2;
                        v351 -= 32;
                      }
                      while (v351 != v352);
                      unint64_t v351 = *v1420;
                    }
                    uint64_t v314 = v350 + 2;
                    *(void *)(a1 + 480) = v353;
                    *(void *)(a1 + 488) = v350 + 2;
                    *(void *)(a1 + 496) = v348 + 32 * v349;
                    if (v351) {
                      operator delete(v351);
                    }
                  }
                  else
                  {
                    *uint64_t v312 = *(_OWORD *)v1514;
                    v312[1] = *(_OWORD *)&v1514[2];
                    uint64_t v314 = v312 + 2;
                  }
                  *(void *)(a1 + 488) = v314;
                }
              }
            }
            else
            {
              int v256 = v230;
              int v230 = v231;
              LODWORD(v253) = v254;
              if (v255) {
                goto LABEL_340;
              }
            }
          }
        }
      }
      if (v138) {
        operator delete(v138);
      }
      *(void *)(a1 + 584) = *(void *)(a1 + 576);
      long long __p = 0uLL;
      *(void *)&long long v1506 = 0;
      sub_25B4BB484((void **)&__p, v1485[1]);
      uint64_t v360 = v1484;
      if (v1484 == (float32x2_t *)v1485)
      {
        uint64_t v362 = (float32x2_t *)*((void *)&__p + 1);
        uint64_t v363 = (float32x2_t *)__p;
      }
      else
      {
        unint64_t v361 = v1506;
        uint64_t v362 = (float32x2_t *)*((void *)&__p + 1);
        uint64_t v363 = (float32x2_t *)__p;
        do
        {
          long long v364 = v360 + 5;
          if ((unint64_t)v362 >= v361)
          {
            uint64_t v366 = ((char *)v362 - (char *)v363) >> 5;
            unint64_t v367 = v366 + 1;
            if ((unint64_t)(v366 + 1) >> 59)
            {
              *(void *)&long long __p = v363;
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v361 - (void)v363) >> 4 > v367) {
              unint64_t v367 = (uint64_t)(v361 - (void)v363) >> 4;
            }
            if (v361 - (unint64_t)v363 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v368 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v368 = v367;
            }
            if (v368) {
              unint64_t v368 = (unint64_t)sub_25B3FBC9C(v368);
            }
            else {
              uint64_t v369 = 0;
            }
            long long v370 = *(_OWORD *)v360[7].f32;
            long long v371 = (float32x2_t *)(v368 + 32 * v366);
            *(_OWORD *)v371->f32 = *(_OWORD *)v364->f32;
            *(_OWORD *)v371[2].f32 = v370;
            if (v362 == v363)
            {
              long long v374 = (float32x2_t *)(v368 + 32 * v366);
            }
            else
            {
              unint64_t v372 = v368 + 32 * v366;
              do
              {
                long long v373 = *(_OWORD *)v362[-2].f32;
                long long v374 = (float32x2_t *)(v372 - 32);
                *(_OWORD *)(v372 - 32) = *(_OWORD *)v362[-4].f32;
                *(_OWORD *)(v372 - 16) = v373;
                v362 -= 4;
                v372 -= 32;
              }
              while (v362 != v363);
            }
            unint64_t v361 = v368 + 32 * v369;
            uint64_t v362 = v371 + 4;
            *((void *)&__p + 1) = v371 + 4;
            *(void *)&long long v1506 = v361;
            if (v363) {
              operator delete(v363);
            }
            uint64_t v363 = v374;
          }
          else
          {
            long long v365 = *(_OWORD *)v360[7].f32;
            *(_OWORD *)v362->f32 = *(_OWORD *)v364->f32;
            *(_OWORD *)v362[2].f32 = v365;
            v362 += 4;
          }
          *((void *)&__p + 1) = v362;
          uint64_t v375 = (float32x2_t *)v360[1];
          if (v375)
          {
            do
            {
              uint64_t v376 = (float32x2_t **)v375;
              uint64_t v375 = (float32x2_t *)*v375;
            }
            while (v375);
          }
          else
          {
            do
            {
              uint64_t v376 = (float32x2_t **)v360[2];
              BOOL v410 = *v376 == v360;
              uint64_t v360 = (float32x2_t *)v376;
            }
            while (!v410);
          }
          uint64_t v360 = (float32x2_t *)v376;
        }
        while (v376 != v1485);
        *(void *)&long long __p = v363;
      }
      v1424 = (char **)(a1 + 576);
      if (v363 != v362)
      {
        for (uint64_t k = v363; k != v362; k += 4)
        {
          if (!k[2].i32[1])
          {
            float32x2_t v378 = vsub_f32(*k, k[1]);
            if (sqrtf(vaddv_f32(vmul_f32(v378, v378))) <= 0.3)
            {
              sub_25B4BB534((uint64_t)v1514, (uint64_t)v1474, (uint64_t)k);
              memset(v1507, 0, sizeof(v1507));
              int v1508 = 1065353216;
              long long v379 = v1514[2];
              if (v1514[2])
              {
                do
                {
                  uint64_t v380 = v1485[0];
                  if (v1485[0])
                  {
                    int v381 = v379[4];
                    long long v382 = v1485;
                    do
                    {
                      long long v383 = (uint64_t *)v380;
                      BOOL v384 = v382;
                      int v385 = *(_DWORD *)(v380 + 32);
                      id v386 = (uint64_t *)(v380 + 8);
                      if (v385 >= v381)
                      {
                        id v386 = v383;
                        long long v382 = v383;
                      }
                      uint64_t v380 = *v386;
                    }
                    while (v380);
                    if (v382 != v1485)
                    {
                      long long v387 = v385 >= v381 ? v383 : v384;
                      if (v381 >= *((_DWORD *)v387 + 8))
                      {
                        if (v385 < v381) {
                          long long v383 = v384;
                        }
                        if (*((_DWORD *)v383 + 15) == 1) {
                          sub_25B3FAF64((uint64_t)v1507, v381, v379[4]);
                        }
                      }
                    }
                  }
                  long long v379 = *(_DWORD **)v379;
                }
                while (v379);
              }
              sub_25B3FB178((uint64_t)v1514);
              long long v388 = *(uint64_t **)&v1507[1];
              if (*(void *)&v1507[1])
              {
                while (1)
                {
                  uint64_t v389 = (float32x2_t *)v1485[0];
                  if (v1485[0])
                  {
                    int v390 = *((_DWORD *)v388 + 4);
                    uint64_t v391 = (float32x2_t *)v1485;
                    do
                    {
                      char v392 = v389;
                      std::string::size_type v393 = v391;
                      int v394 = v389[4].i32[0];
                      uint64_t v395 = v389 + 1;
                      if (v394 >= v390)
                      {
                        uint64_t v395 = v392;
                        uint64_t v391 = v392;
                      }
                      uint64_t v389 = (float32x2_t *)*v395;
                    }
                    while (v389);
                    if (v391 != (float32x2_t *)v1485)
                    {
                      int8x16_t v396 = v394 >= v390 ? v392 : v393;
                      if (v390 >= v396[4].i32[0])
                      {
                        float v397 = v393 + 5;
                        int v398 = v392 + 5;
                        if (v394 >= v390) {
                          uint64_t v399 = v398;
                        }
                        else {
                          uint64_t v399 = v397;
                        }
                        float v400 = sub_25B3FCCE0(v399, k, 0);
                        if ((float)(180.0 - v400) < v400) {
                          float v400 = 180.0 - v400;
                        }
                        if (v400 < 20.0) {
                          break;
                        }
                      }
                    }
                  }
                  long long v388 = (uint64_t *)*v388;
                  if (!v388) {
                    goto LABEL_587;
                  }
                }
              }
              else
              {
LABEL_587:
                long long v1492 = 0u;
                long long v1493 = 0u;
                int v1494 = 1065353216;
                sub_25B4BB6C8((uint64_t)v1514, (uint64_t)v1474, (uint64_t)k);
                sub_25B3FB278((uint64_t)&v1490, (uint64_t)v1514);
                uint64_t v401 = v1514[2];
                if (v1514[2])
                {
                  do
                  {
                    uint64_t v402 = v1485[0];
                    if (v1485[0])
                    {
                      int v403 = v401[4];
                      uint64_t v404 = v1485;
                      do
                      {
                        uint64_t v405 = (uint64_t *)v402;
                        double v406 = v404;
                        int v407 = *(_DWORD *)(v402 + 32);
                        __int32 v408 = (uint64_t *)(v402 + 8);
                        if (v407 >= v403)
                        {
                          __int32 v408 = v405;
                          uint64_t v404 = v405;
                        }
                        uint64_t v402 = *v408;
                      }
                      while (v402);
                      if (v404 != v1485)
                      {
                        uint64_t v409 = v407 >= v403 ? v405 : v406;
                        BOOL v410 = v403 < *((_DWORD *)v409 + 8) || v403 == k[2].i32[0];
                        if (!v410)
                        {
                          uint64_t v411 = (uint64_t)(v406 + 5);
                          uint64_t v412 = (uint64_t)(v405 + 5);
                          if (v407 >= v403) {
                            uint64_t v413 = v412;
                          }
                          else {
                            uint64_t v413 = v411;
                          }
                          sub_25B4BB6C8((uint64_t)v1509, (uint64_t)v1474, v413);
                          sub_25B4B9174((uint64_t *)&v1490, v1509);
                          sub_25B3FB178((uint64_t)v1509);
                        }
                      }
                    }
                    uint64_t v401 = *(_DWORD **)v401;
                  }
                  while (v401);
                }
                sub_25B3FB178((uint64_t)v1514);
                for (uint64_t m = (uint64_t *)v1491; m; uint64_t m = (uint64_t *)*m)
                {
                  uint64_t v415 = v1485[0];
                  if (v1485[0])
                  {
                    int v416 = *((_DWORD *)m + 4);
                    unint64_t v417 = v1485;
                    do
                    {
                      uint64_t v418 = (uint64_t *)v415;
                      uint64_t v419 = v417;
                      int v420 = *(_DWORD *)(v415 + 32);
                      char v421 = (uint64_t *)(v415 + 8);
                      if (v420 >= v416)
                      {
                        char v421 = v418;
                        unint64_t v417 = v418;
                      }
                      uint64_t v415 = *v421;
                    }
                    while (v415);
                    if (v417 != v1485)
                    {
                      char v422 = v420 >= v416 ? v418 : v419;
                      if (v416 >= *((_DWORD *)v422 + 8))
                      {
                        uint64_t v423 = (uint64_t)(v419 + 5);
                        uint64_t v424 = (uint64_t)(v418 + 5);
                        if (v420 >= v416) {
                          uint64_t v425 = v424;
                        }
                        else {
                          uint64_t v425 = v423;
                        }
                        sub_25B4BB534((uint64_t)v1514, (uint64_t)v1474, v425);
                        memset(v1509, 0, 32);
                        LODWORD(v1509[4]) = 1065353216;
                        float v426 = v1514[2];
                        if (v1514[2])
                        {
                          do
                          {
                            uint64_t v427 = (float32x2_t *)v1485[0];
                            if (v1485[0])
                            {
                              int v428 = v426[4];
                              uint64_t v429 = (float32x2_t *)v1485;
                              do
                              {
                                uint64_t v430 = v427;
                                uint64_t v431 = v429;
                                int v432 = v427[4].i32[0];
                                uint64_t v433 = v427 + 1;
                                if (v432 >= v428)
                                {
                                  uint64_t v433 = v430;
                                  uint64_t v429 = v430;
                                }
                                uint64_t v427 = (float32x2_t *)*v433;
                              }
                              while (v427);
                              if (v429 != (float32x2_t *)v1485)
                              {
                                char v434 = v432 >= v428 ? v430 : v431;
                                if (v428 >= v434[4].i32[0])
                                {
                                  if (v432 < v428) {
                                    uint64_t v430 = v431;
                                  }
                                  float32x2_t v435 = vsub_f32(v430[5], v430[6]);
                                  if (sqrtf(vaddv_f32(vmul_f32(v435, v435))) > 0.3) {
                                    sub_25B3FAF64((uint64_t)v1509, v428, v426[4]);
                                  }
                                }
                              }
                            }
                            float v426 = *(_DWORD **)v426;
                          }
                          while (v426);
                        }
                        sub_25B3FB178((uint64_t)v1514);
                        sub_25B4B9174((uint64_t *)&v1492, v1509);
                        sub_25B3FB178((uint64_t)v1509);
                      }
                    }
                  }
                }
                if (*((void *)&v1493 + 1) < 2uLL)
                {
                  sub_25B3F9000((uint64_t)v1474, k[2].i32[0]);
                  sub_25B3FB178((uint64_t)&v1490);
                  sub_25B3FB178((uint64_t)&v1492);
                  sub_25B3FB178((uint64_t)v1507);
                  std::string::size_type v436 = *(_OWORD **)(a1 + 584);
                  unint64_t v437 = *(void *)(a1 + 592);
                  if ((unint64_t)v436 >= v437)
                  {
                    uint64_t v440 = ((char *)v436 - *v1424) >> 5;
                    unint64_t v441 = v440 + 1;
                    if ((unint64_t)(v440 + 1) >> 59) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v442 = v437 - (void)*v1424;
                    if (v442 >> 4 > v441) {
                      unint64_t v441 = v442 >> 4;
                    }
                    if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v443 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v443 = v441;
                    }
                    if (v443) {
                      unint64_t v443 = (unint64_t)sub_25B3FBC9C(v443);
                    }
                    else {
                      uint64_t v444 = 0;
                    }
                    uint64_t v445 = (_OWORD *)(v443 + 32 * v440);
                    long long v446 = *(_OWORD *)k[2].f32;
                    *uint64_t v445 = *(_OWORD *)k->f32;
                    v445[1] = v446;
                    size_t v447 = *(char **)(a1 + 584);
                    unint64_t v448 = *(char **)(a1 + 576);
                    int v449 = v445;
                    if (v447 != v448)
                    {
                      do
                      {
                        long long v450 = *((_OWORD *)v447 - 1);
                        *(v449 - 2) = *((_OWORD *)v447 - 2);
                        *(v449 - 1) = v450;
                        v449 -= 2;
                        v447 -= 32;
                      }
                      while (v447 != v448);
                      size_t v447 = *v1424;
                    }
                    *(void *)(a1 + 576) = v449;
                    v439 = v445 + 2;
                    *(void *)(a1 + 584) = v445 + 2;
                    *(void *)(a1 + 592) = v443 + 32 * v444;
                    if (v447) {
                      operator delete(v447);
                    }
                  }
                  else
                  {
                    long long v438 = *(_OWORD *)k[2].f32;
                    _OWORD *v436 = *(_OWORD *)k->f32;
                    v436[1] = v438;
                    v439 = v436 + 2;
                  }
                  *(void *)(a1 + 584) = v439;
                  continue;
                }
                sub_25B3FB178((uint64_t)&v1490);
                sub_25B3FB178((uint64_t)&v1492);
              }
              sub_25B3FB178((uint64_t)v1507);
            }
          }
        }
      }
      v1435 = (char **)(a1 + 600);
      if (v363)
      {
        *((void *)&__p + 1) = v363;
        operator delete(v363);
      }
      *(void *)(a1 + 608) = *(void *)(a1 + 600);
      while (1)
      {
        sub_25B3FA97C((uint64_t)v1507, &v1484);
        sub_25B3FC41C((uint64_t)v1509, (uint64_t)v1488);
        uint64_t v451 = *(_OWORD **)&v1507[0];
        if (*(_OWORD **)&v1507[0] == (_OWORD *)((char *)v1507 + 8)) {
          break;
        }
        while (1)
        {
          float32x2_t v452 = *(_OWORD **)&v1507[0];
          if (*(_OWORD **)&v1507[0] != (_OWORD *)((char *)v1507 + 8)) {
            break;
          }
LABEL_723:
          float v494 = (void *)*((void *)v451 + 1);
          if (v494)
          {
            do
            {
              uint64_t v495 = v494;
              float v494 = (void *)*v494;
            }
            while (v494);
          }
          else
          {
            do
            {
              uint64_t v495 = (_OWORD *)*((void *)v451 + 2);
              BOOL v410 = *(void *)v495 == (void)v451;
              uint64_t v451 = v495;
            }
            while (!v410);
          }
          uint64_t v451 = v495;
          if (v495 == (_OWORD *)((char *)v1507 + 8)) {
            goto LABEL_790;
          }
        }
        while (1)
        {
          int v453 = *((_DWORD *)v451 + 8);
          int v454 = *((_DWORD *)v452 + 8);
          if (v453 < v454)
          {
            uint64_t v455 = (float32x2_t *)sub_25B3FAB54((uint64_t)v1509[0], (unint64_t)v1509[1], v453, v454);
            if (v455)
            {
              uint64_t v456 = v455;
              float v457 = v455[11].f32[1];
              if (v457 >= (float)(180.0 - v457)) {
                float v457 = 180.0 - v457;
              }
              if (v457 < 10.0 && v455[18].f32[1] < 0.2)
              {
                char v458 = (float *)v455[12];
                char v459 = (float *)v455[13];
                unint64_t v460 = v458 + 1;
                if (v458 != v459 && v460 != v459)
                {
                  float v462 = *v458;
                  uint64_t v463 = v458 + 1;
                  do
                  {
                    float v464 = *v463++;
                    float v465 = v464;
                    if (v464 < v462)
                    {
                      float v462 = v465;
                      char v458 = v460;
                    }
                    unint64_t v460 = v463;
                  }
                  while (v463 != v459);
                }
                if (*v458 < 0.1)
                {
                  id v466 = v455 + 3;
                  float v467 = v455 + 7;
                  char v468 = sub_25B40E348(v455 + 3, v455 + 7);
                  __float2 v470 = v456 + 6;
                  if (v468) {
                    __float2 v470 = (float32x2_t *)((char *)v456 + 52);
                  }
                  uint64_t v471 = (v469 & 1) != 0 ? &v456[10].i32[1] : (__int32 *)&v456[10];
                  uint64_t v472 = v1480[0];
                  if (!v1480[0]) {
                    goto LABEL_716;
                  }
                  __int32 v473 = v470->i32[0];
                  __int32 v474 = *v471;
                  long long v475 = v1480;
                  uint64_t v476 = (uint64_t *)v1480[0];
                  do
                  {
                    long long v477 = v476;
                    id v478 = v475;
                    __int32 v479 = *((_DWORD *)v476 + 8);
                    if (v479 >= v473) {
                      long long v475 = v476;
                    }
                    else {
                      ++v476;
                    }
                    uint64_t v476 = (uint64_t *)*v476;
                  }
                  while (v476);
                  if (v475 == v1480) {
                    goto LABEL_716;
                  }
                  uint64_t v480 = v479 >= v473 ? v477 : v478;
                  if (*((_DWORD *)v480 + 8) > v473) {
                    goto LABEL_716;
                  }
                  uint64_t v481 = v479 >= v473 ? v477 : v478;
                  if (v481[7] < 3uLL) {
                    goto LABEL_716;
                  }
                  uint64_t v482 = v1480;
                  do
                  {
                    uint64_t v483 = (uint64_t *)v472;
                    uint64_t v484 = v482;
                    __int32 v485 = *(_DWORD *)(v472 + 32);
                    uint64_t v486 = (uint64_t *)(v472 + 8);
                    if (v485 >= v474)
                    {
                      uint64_t v486 = v483;
                      uint64_t v482 = v483;
                    }
                    uint64_t v472 = *v486;
                  }
                  while (v472);
                  if (v482 == v1480
                    || (v485 >= v474 ? (v487 = v483) : (v487 = v484),
                        *((_DWORD *)v487 + 8) > v474
                     || (v485 >= v474 ? (uint64_t v488 = v483) : (uint64_t v488 = v484), (unint64_t)v488[7] <= 2)))
                  {
LABEL_716:
                    __int32 v489 = v456[5].i32[1];
                    __int32 v490 = v456[9].i32[1];
                    if (!(v489 | v490)) {
                      break;
                    }
                    if (v489 == 1 && v490 == 1) {
                      break;
                    }
                  }
                }
              }
            }
          }
          unint64_t v492 = (void *)*((void *)v452 + 1);
          if (v492)
          {
            do
            {
              uint64_t v493 = v492;
              unint64_t v492 = (void *)*v492;
            }
            while (v492);
          }
          else
          {
            do
            {
              uint64_t v493 = (_OWORD *)*((void *)v452 + 2);
              BOOL v410 = *(void *)v493 == (void)v452;
              float32x2_t v452 = v493;
            }
            while (!v410);
          }
          float32x2_t v452 = v493;
          if (v493 == (_OWORD *)((char *)v1507 + 8)) {
            goto LABEL_723;
          }
        }
        char v496 = sub_25B40E3D8(v456 + 3, v456 + 7);
        int32x2_t v498 = (int *)&v456[6];
        if (v496) {
          int32x2_t v498 = (int *)&v456[6] + 1;
        }
        int v499 = *v498;
        if (v497) {
          float32x2_t v500 = (int *)&v456[10] + 1;
        }
        else {
          float32x2_t v500 = (int *)&v456[10];
        }
        IOSurfaceRef v501 = (float32x2_t *)v1482[0];
        if (!v1482[0]) {
          goto LABEL_745;
        }
        float32x2_t v502 = (float32x2_t *)v1482;
        int32x2_t v503 = (float32x2_t *)v1482[0];
        do
        {
          uint64_t v504 = v503;
          uint64_t v505 = v502;
          int v506 = v503[4].i32[0];
          if (v506 >= v499) {
            float32x2_t v502 = v503;
          }
          else {
            ++v503;
          }
          int32x2_t v503 = (float32x2_t *)*v503;
        }
        while (v503);
        if (v502 == (float32x2_t *)v1482) {
          goto LABEL_745;
        }
        if (v506 < v499) {
          uint64_t v504 = v505;
        }
        if (v499 < v504[4].i32[0]) {
LABEL_745:
        }
          float32x2_t v502 = (float32x2_t *)v1482;
        int v507 = *v500;
        if (!v1482[0]) {
          goto LABEL_756;
        }
        CVPixelBufferRef v508 = (float32x2_t *)v1482;
        do
        {
          float v509 = v501;
          float v510 = v508;
          int v511 = v501[4].i32[0];
          uint64_t v512 = v501 + 1;
          if (v511 >= v507)
          {
            uint64_t v512 = v509;
            CVPixelBufferRef v508 = v509;
          }
          IOSurfaceRef v501 = (float32x2_t *)*v512;
        }
        while (v501);
        if (v508 == (float32x2_t *)v1482 || (v511 >= v507 ? (IOSurfaceRef v513 = v509) : (IOSurfaceRef v513 = v510), v507 < v513[4].i32[0])) {
LABEL_756:
        }
          CVPixelBufferRef v508 = (float32x2_t *)v1482;
        sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v499, v507, v456[5].u32[1], v502[5], v508[5]);
        sub_25B3F9000((uint64_t)v1474, v456[5].i32[0]);
        sub_25B3F9000((uint64_t)v1474, v456[9].i32[0]);
        float32x2_t v514 = *(_OWORD **)(a1 + 608);
        unint64_t v515 = *(void *)(a1 + 616);
        if ((unint64_t)v514 >= v515)
        {
          uint64_t v518 = ((char *)v514 - *v1435) >> 5;
          unint64_t v519 = v518 + 1;
          if ((unint64_t)(v518 + 1) >> 59) {
            goto LABEL_2079;
          }
          uint64_t v520 = v515 - (void)*v1435;
          if (v520 >> 4 > v519) {
            unint64_t v519 = v520 >> 4;
          }
          if ((unint64_t)v520 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v521 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v521 = v519;
          }
          if (v521) {
            unint64_t v521 = (unint64_t)sub_25B3FBC9C(v521);
          }
          else {
            uint64_t v522 = 0;
          }
          long long v523 = (_OWORD *)(v521 + 32 * v518);
          long long v524 = *(_OWORD *)v466[2].f32;
          *long long v523 = *(_OWORD *)v466->f32;
          v523[1] = v524;
          uint64_t v525 = *(char **)(a1 + 608);
          uint64_t v526 = *(char **)(a1 + 600);
          long long v527 = v523;
          if (v525 != v526)
          {
            do
            {
              long long v528 = *((_OWORD *)v525 - 1);
              *(v527 - 2) = *((_OWORD *)v525 - 2);
              *(v527 - 1) = v528;
              v527 -= 2;
              v525 -= 32;
            }
            while (v525 != v526);
            uint64_t v525 = *v1435;
          }
          *(void *)(a1 + 600) = v527;
          IOSurfaceRef v517 = v523 + 2;
          *(void *)(a1 + 608) = v523 + 2;
          *(void *)(a1 + 616) = v521 + 32 * v522;
          if (v525) {
            operator delete(v525);
          }
        }
        else
        {
          long long v516 = *(_OWORD *)v456[5].f32;
          *float32x2_t v514 = *(_OWORD *)v466->f32;
          v514[1] = v516;
          IOSurfaceRef v517 = v514 + 2;
        }
        *(void *)(a1 + 608) = v517;
        unint64_t v529 = *(void *)(a1 + 616);
        if ((unint64_t)v517 >= v529)
        {
          uint64_t v532 = ((char *)v517 - *v1435) >> 5;
          if ((unint64_t)(v532 + 1) >> 59) {
LABEL_2079:
          }
            sub_25B3FBC4C();
          uint64_t v533 = v529 - (void)*v1435;
          uint64_t v534 = v533 >> 4;
          if (v533 >> 4 <= (unint64_t)(v532 + 1)) {
            uint64_t v534 = v532 + 1;
          }
          if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v535 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v535 = v534;
          }
          if (v535) {
            unint64_t v535 = (unint64_t)sub_25B3FBC9C(v535);
          }
          else {
            uint64_t v536 = 0;
          }
          uint64_t v537 = (_OWORD *)(v535 + 32 * v532);
          long long v538 = *(_OWORD *)v467[2].f32;
          _OWORD *v537 = *(_OWORD *)v467->f32;
          v537[1] = v538;
          int v539 = *(char **)(a1 + 608);
          unint64_t v540 = *(char **)(a1 + 600);
          uint64_t v541 = v537;
          if (v539 != v540)
          {
            do
            {
              long long v542 = *((_OWORD *)v539 - 1);
              *(v541 - 2) = *((_OWORD *)v539 - 2);
              *(v541 - 1) = v542;
              v541 -= 2;
              v539 -= 32;
            }
            while (v539 != v540);
            int v539 = *v1435;
          }
          *(void *)(a1 + 600) = v541;
          uint64_t v531 = v537 + 2;
          *(void *)(a1 + 608) = v537 + 2;
          *(void *)(a1 + 616) = v535 + 32 * v536;
          if (v539) {
            operator delete(v539);
          }
        }
        else
        {
          long long v530 = *(_OWORD *)v467[2].f32;
          _OWORD *v517 = *(_OWORD *)v467->f32;
          v517[1] = v530;
          uint64_t v531 = v517 + 2;
        }
        *(void *)(a1 + 608) = v531;
        sub_25B3FAD08((uint64_t)v1509);
        sub_25B3FA930(*((void **)&v1507[0] + 1));
      }
LABEL_790:
      sub_25B3FAD08((uint64_t)v1509);
      sub_25B3FA930(*((void **)&v1507[0] + 1));
      v1423 = (void *)(a1 + 624);
      *(void *)(a1 + 632) = *(void *)(a1 + 624);
      uint64_t v543 = v1484;
      if (v1484 != (float32x2_t *)v1485)
      {
        char v544 = 0;
        char v545 = 0;
        unint64_t v546 = 0;
        do
        {
          long long v547 = v543 + 5;
          if ((unint64_t)v545 >= v546)
          {
            uint64_t v549 = ((char *)v545 - (char *)v544) >> 5;
            unint64_t v550 = v549 + 1;
            if ((unint64_t)(v549 + 1) >> 59) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v546 - (void)v544) >> 4 > v550) {
              unint64_t v550 = (uint64_t)(v546 - (void)v544) >> 4;
            }
            if (v546 - (unint64_t)v544 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v551 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v551 = v550;
            }
            if (v551) {
              unint64_t v551 = (unint64_t)sub_25B3FBC9C(v551);
            }
            else {
              uint64_t v552 = 0;
            }
            long long v553 = *(_OWORD *)v543[7].f32;
            vImagePixelCount v554 = (float32x2_t *)(v551 + 32 * v549);
            *(_OWORD *)v554->f32 = *(_OWORD *)v547->f32;
            *(_OWORD *)v554[2].f32 = v553;
            if (v545 == v544)
            {
              size_t v557 = (float32x2_t *)(v551 + 32 * v549);
            }
            else
            {
              unint64_t v555 = v551 + 32 * v549;
              do
              {
                long long v556 = *(_OWORD *)v545[-2].f32;
                size_t v557 = (float32x2_t *)(v555 - 32);
                *(_OWORD *)(v555 - 32) = *(_OWORD *)v545[-4].f32;
                *(_OWORD *)(v555 - 16) = v556;
                v545 -= 4;
                v555 -= 32;
              }
              while (v545 != v544);
            }
            unint64_t v546 = v551 + 32 * v552;
            char v545 = v554 + 4;
            if (v544) {
              operator delete(v544);
            }
            char v544 = v557;
          }
          else
          {
            long long v548 = *(_OWORD *)v543[7].f32;
            *(_OWORD *)v545->f32 = *(_OWORD *)v547->f32;
            *(_OWORD *)v545[2].f32 = v548;
            v545 += 4;
          }
          unint64_t v558 = (float32x2_t *)v543[1];
          if (v558)
          {
            do
            {
              long long v559 = (float32x2_t **)v558;
              unint64_t v558 = (float32x2_t *)*v558;
            }
            while (v558);
          }
          else
          {
            do
            {
              long long v559 = (float32x2_t **)v543[2];
              BOOL v410 = *v559 == v543;
              uint64_t v543 = (float32x2_t *)v559;
            }
            while (!v410);
          }
          uint64_t v543 = (float32x2_t *)v559;
        }
        while (v559 != v1485);
        if (v544 == v545) {
          goto LABEL_879;
        }
        int v560 = v544;
        do
        {
          uint64_t v561 = v544;
          do
          {
            uint64_t v562 = v1485[0];
            if (v1485[0])
            {
              __int32 v563 = v560[2].i32[0];
              uint64_t v564 = v1485;
              float v565 = (uint64_t *)v1485[0];
              do
              {
                v566 = v565;
                unint64_t v567 = v564;
                __int32 v568 = *((_DWORD *)v565 + 8);
                if (v568 >= v563) {
                  uint64_t v564 = v565;
                }
                else {
                  ++v565;
                }
                float v565 = (uint64_t *)*v565;
              }
              while (v565);
              if (v564 != v1485)
              {
                if (v568 < v563) {
                  v566 = v567;
                }
                if (*((_DWORD *)v566 + 8) <= v563)
                {
                  __int32 v569 = v561[2].i32[0];
                  uint64_t v570 = v1485;
                  do
                  {
                    char v571 = (uint64_t *)v562;
                    char v572 = v570;
                    __int32 v573 = *(_DWORD *)(v562 + 32);
                    uint64_t v574 = (uint64_t *)(v562 + 8);
                    if (v573 >= v569)
                    {
                      uint64_t v574 = v571;
                      uint64_t v570 = v571;
                    }
                    uint64_t v562 = *v574;
                  }
                  while (v562);
                  if (v570 != v1485)
                  {
                    float32x4_t v575 = v573 >= v569 ? v571 : v572;
                    if (*((_DWORD *)v575 + 8) <= v569 && !v560[2].i32[1] && v561[2].i32[1] == 1)
                    {
                      float v576 = sub_25B3FCCE0(v560, v561, 0);
                      if ((float)(180.0 - v576) < v576) {
                        float v576 = 180.0 - v576;
                      }
                      if (v576 < 10.0)
                      {
                        float32x2_t v578 = *v560;
                        float32x2_t v577 = v560[1];
                        float32x2_t v579 = *v561;
                        float32x2_t v580 = v561[1];
                        float32x2_t v581 = vsub_f32(v577, *v560);
                        float v582 = vaddv_f32(vmul_f32(vsub_f32(*v561, *v560), v581));
                        float v583 = vaddv_f32(vmul_f32(v581, v581));
                        if (v583 < 0.000001) {
                          float v583 = 0.000001;
                        }
                        float32x2_t v584 = vmla_n_f32(v578, v581, v582 / v583);
                        float32x2_t v585 = vsub_f32(v584, v579);
                        int32x2_t v586 = (int32x2_t)vmul_f32(v585, v585);
                        float32x2_t v587 = vsub_f32(vmla_n_f32(v578, v581, vaddv_f32(vmul_f32(v581, vsub_f32(v580, v578))) / v583), v580);
                        int32x2_t v588 = (int32x2_t)vmul_f32(v587, v587);
                        float32x2_t v589 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v588, v586), (float32x2_t)vzip2_s32(v588, v586)));
                        if (v589.f32[0] >= v589.f32[1]) {
                          v589.f32[0] = v589.f32[1];
                        }
                        if (v589.f32[0] < 0.2 && sub_25B40E468(*v560, v560[1], v579, v580) >= 0.99)
                        {
                          *(float32x2_t *)&long long v1492 = v584;
                          float32x2_t v590 = vsub_f32(v560[1], *v560);
                          float v591 = vaddv_f32(vmul_f32(vsub_f32(v561[1], *v560), v590));
                          float v592 = vaddv_f32(vmul_f32(v590, v590));
                          if (v592 < 0.000001) {
                            float v592 = 0.000001;
                          }
                          float32x2_t v593 = vmla_n_f32(*v560, v590, v591 / v592);
                          *(float32x2_t *)&long long v1490 = v593;
                          float32x2_t v594 = vsub_f32(v578, v584);
                          int32x2_t v595 = (int32x2_t)vmul_f32(v594, v594);
                          float32x2_t v596 = vsub_f32(v578, v593);
                          int32x2_t v597 = (int32x2_t)vmul_f32(v596, v596);
                          int32x2_t v598 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v595, v597), (float32x2_t)vzip2_s32(v595, v597)));
                          if (vcgt_f32((float32x2_t)v598, (float32x2_t)vdup_lane_s32(v598, 1)).u8[0])
                          {
                            *(float32x2_t *)&long long v1492 = v593;
                            *(float32x2_t *)&long long v1490 = v584;
                            float32x2_t v599 = v584;
                          }
                          else
                          {
                            float32x2_t v599 = v593;
                            float32x2_t v593 = v584;
                          }
                          int v601 = v560[3].i32[0];
                          int v600 = v560[3].i32[1];
                          int v602 = sub_25B3FD470((float32x2_t **)v1474, (float32x2_t *)&v1492, 0.1);
                          int v603 = sub_25B3FD470((float32x2_t **)v1474, (float32x2_t *)&v1490, 0.1);
                          sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v601, v602, 0, v578, v593);
                          sub_25B3FD8A4((uint64_t)v1507, (uint64_t)v1474, v602, v603, 1u, v593, v599);
                          sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v603, v600, 0, v599, v577);
                          sub_25B3F9000((uint64_t)v1474, v560[2].i32[0]);
                          if ((_BYTE)v1508) {
                            sub_25B3F9000((uint64_t)v1474, v561[2].i32[0]);
                          }
                          __int8 v604 = v560->i8[0];
                          long long v605 = *(_OWORD *)((char *)v560->f32 + 1);
                          *(_OWORD *)((char *)&v1514[1] + 7) = *(_OWORD *)v560[2].f32;
                          *(_OWORD *)v1514 = v605;
                          long long v606 = *(_OWORD *)v561[2].f32;
                          *(_OWORD *)((char *)&v1514[3] + 7) = *(_OWORD *)v561->f32;
                          *(_OWORD *)((char *)&v1514[5] + 7) = v606;
                          *(_OWORD *)v1509 = *(_OWORD *)v1514;
                          *(_OWORD *)&v1509[2] = *(_OWORD *)&v1514[2];
                          *(_OWORD *)&v1509[4] = *(_OWORD *)&v1514[4];
                          *(_OWORD *)((char *)&v1509[5] + 7) = v606;
                          float32x2_t v607 = *(_OWORD **)(a1 + 632);
                          unint64_t v608 = *(void *)(a1 + 640);
                          if ((unint64_t)v607 >= v608)
                          {
                            int32x2_t v610 = (_OWORD *)*v1423;
                            uint64_t v611 = ((uint64_t)v607 - *v1423) >> 6;
                            unint64_t v612 = v611 + 1;
                            if ((unint64_t)(v611 + 1) >> 58) {
                              sub_25B3FBC4C();
                            }
                            uint64_t v613 = v608 - (void)v610;
                            if (v613 >> 5 > v612) {
                              unint64_t v612 = v613 >> 5;
                            }
                            if ((unint64_t)v613 >= 0x7FFFFFFFFFFFFFC0) {
                              unint64_t v614 = 0x3FFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v614 = v612;
                            }
                            if (v614)
                            {
                              if (v614 >> 58) {
                                sub_25B3FA70C();
                              }
                              float32x2_t v615 = (char *)operator new(v614 << 6);
                            }
                            else
                            {
                              float32x2_t v615 = 0;
                            }
                            long long v616 = &v615[64 * v611];
                            *long long v616 = v604;
                            long long v617 = *(_OWORD *)&v1509[2];
                            *(_OWORD *)(v616 + 1) = *(_OWORD *)v1509;
                            *(_OWORD *)(v616 + 17) = v617;
                            *(_OWORD *)(v616 + 33) = *(_OWORD *)&v1509[4];
                            *((_OWORD *)v616 + 3) = *(_OWORD *)((char *)&v1509[5] + 7);
                            long long v618 = v616;
                            if (v607 != v610)
                            {
                              do
                              {
                                long long v619 = *(v607 - 4);
                                long long v620 = *(v607 - 3);
                                long long v621 = *(v607 - 1);
                                *((_OWORD *)v618 - 2) = *(v607 - 2);
                                *((_OWORD *)v618 - 1) = v621;
                                *((_OWORD *)v618 - 4) = v619;
                                *((_OWORD *)v618 - 3) = v620;
                                v618 -= 64;
                                v607 -= 4;
                              }
                              while (v607 != v610);
                              float32x2_t v607 = (_OWORD *)*v1423;
                            }
                            *(void *)(a1 + 624) = v618;
                            float32x2_t v609 = v616 + 64;
                            *(void *)(a1 + 632) = v616 + 64;
                            *(void *)(a1 + 640) = &v615[64 * v614];
                            if (v607) {
                              operator delete(v607);
                            }
                          }
                          else
                          {
                            *(unsigned char *)float32x2_t v607 = v604;
                            *(_OWORD *)((char *)v607 + 1) = *(_OWORD *)v1509;
                            *(_OWORD *)((char *)v607 + 17) = *(_OWORD *)&v1509[2];
                            *(_OWORD *)((char *)v607 + 33) = *(_OWORD *)&v1509[4];
                            v607[3] = *(_OWORD *)((char *)&v1509[5] + 7);
                            float32x2_t v609 = v607 + 4;
                          }
                          *(void *)(a1 + 632) = v609;
                        }
                      }
                    }
                  }
                }
              }
            }
            v561 += 4;
          }
          while (v561 != v545);
          v560 += 4;
        }
        while (v560 != v545);
        if (v544) {
LABEL_879:
        }
          operator delete(v544);
      }
      uint64_t v1456 = a1 + 648;
      *(void *)(a1 + 656) = *(void *)(a1 + 648);
      *(void *)(a1 + 680) = *(void *)(a1 + 672);
      memset(v1509, 0, 32);
      LODWORD(v1509[4]) = 1065353216;
      int v1508 = 1065353216;
      memset(v1507, 0, sizeof(v1507));
      while (2)
      {
        std::string v622 = v1486;
        long long v623 = v1487;
        uint64_t v624 = (char *)v1487 - (char *)v1486;
        if (v1487 == v1486)
        {
          uint64_t v626 = 0;
          float v628 = 0;
        }
        else
        {
          if (v624 < 0) {
            sub_25B3FBC4C();
          }
          uint64_t v625 = (int *)sub_25B3FCAD4(v624 >> 3);
          uint64_t v626 = v625;
          uint64_t v627 = 0;
          do
          {
            *(void *)&v625[v627] = *(void *)&v622[v627];
            v627 += 2;
          }
          while (&v622[v627] != v623);
          float v628 = &v625[v627];
        }
        sub_25B3FC41C((uint64_t)&v1492, (uint64_t)v1488);
        float v629 = v626;
        if (v626 == v628)
        {
LABEL_971:
          char v687 = 1;
          goto LABEL_972;
        }
        while (1)
        {
          long long v630 = sub_25B3FAB54(v1492, *((unint64_t *)&v1492 + 1), *v629, v629[1]);
          int v631 = *((_DWORD *)v630 + 4);
          int v632 = *((_DWORD *)v630 + 5);
          if (!sub_25B4BA7FC((uint64_t)v1509[0], (unint64_t)v1509[1], v631, v632))
          {
            uint64_t v633 = v1485[0];
            if (v1485[0])
            {
              int v634 = v1485;
              char v635 = (uint64_t *)v1485[0];
              do
              {
                int v636 = v635;
                v637 = v634;
                int v638 = *((_DWORD *)v635 + 8);
                if (v638 >= v631) {
                  int v634 = v635;
                }
                else {
                  ++v635;
                }
                char v635 = (uint64_t *)*v635;
              }
              while (v635);
              if (v634 != v1485)
              {
                if (v638 < v631) {
                  int v636 = v637;
                }
                if (*((_DWORD *)v636 + 8) <= v631)
                {
                  v639 = v1485;
                  do
                  {
                    v640 = (uint64_t *)v633;
                    v641 = v639;
                    int v642 = *(_DWORD *)(v633 + 32);
                    float v643 = (uint64_t *)(v633 + 8);
                    if (v642 >= v632)
                    {
                      float v643 = v640;
                      v639 = v640;
                    }
                    uint64_t v633 = *v643;
                  }
                  while (v633);
                  if (v639 != v1485)
                  {
                    float v644 = v642 >= v632 ? v640 : v641;
                    if (*((_DWORD *)v644 + 8) <= v632 && v631 < v632)
                    {
                      sub_25B4BA8D4((float *)v1509, v631, v632, *((double *)v630 + 2));
                      uint64_t v646 = v630 + 3;
                      uint64_t v647 = v630 + 7;
                      unint64_t v648 = sub_25B40E348((float32x2_t *)v630 + 3, (float32x2_t *)v630 + 7);
                      uint64_t v650 = 52;
                      if (!v648) {
                        uint64_t v650 = 48;
                      }
                      int v651 = *(_DWORD *)((char *)v630 + v650);
                      uint64_t v652 = 84;
                      if (!v649) {
                        uint64_t v652 = 80;
                      }
                      float v653 = sub_25B4BACEC(&v1479, v651, *(_DWORD *)((char *)v630 + v652));
                      if (fabsf(v653) == INFINITY || v653 > 1.0) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          v629 += 2;
          if (v629 == v628) {
            goto LABEL_971;
          }
        }
        float32x2_t v655 = vsub_f32((float32x2_t)v630[3], (float32x2_t)v630[4]);
        if (sqrtf(vaddv_f32(vmul_f32(v655, v655))) <= 0.45
          || ((float32x2_t v656 = vsub_f32((float32x2_t)v630[7], (float32x2_t)v630[8]), sqrtf(vaddv_f32(vmul_f32(v656, v656))) > 0.45)
            ? (BOOL v657 = *((unsigned char *)v630 + 120) == 0)
            : (BOOL v657 = 0),
              v657 ? (BOOL v658 = *((unsigned char *)v630 + 88) == 0) : (BOOL v658 = 0),
              !v658))
        {
LABEL_1251:
          char v687 = 0;
          goto LABEL_972;
        }
        float v659 = *((float *)v630 + 23);
        if (v659 >= (float)(180.0 - v659)) {
          float v659 = 180.0 - v659;
        }
        if (v659 < 15.0 && *((float *)v630 + 37) < 0.1)
        {
          v660 = (float *)v630[12];
          v661 = (float *)v630[13];
          if (v660 != v661)
          {
            v662 = v660 + 1;
            if (v660 + 1 != v661)
            {
              float v663 = *v660;
              long long v664 = v660 + 1;
              do
              {
                float v665 = *v664++;
                float v666 = v665;
                if (v665 < v663)
                {
                  float v663 = v666;
                  v660 = v662;
                }
                v662 = v664;
              }
              while (v664 != v661);
            }
          }
          if (*v660 < 0.45 && *((float *)v630 + 38) < 0.001)
          {
            unint64_t v667 = sub_25B40E348((float32x2_t *)v630 + 3, (float32x2_t *)v630 + 7);
            float v669 = (signed int *)(v630 + 6);
            if (v667) {
              float v669 = (signed int *)v630 + 13;
            }
            signed int v670 = *v669;
            float v671 = (int *)(v630 + 10);
            if (v668) {
              float v671 = (int *)v630 + 21;
            }
            int v672 = *v671;
            uint64_t v673 = v1480[0];
            if (!v1480[0]) {
              goto LABEL_989;
            }
            v674 = v1480;
            v675 = (uint64_t *)v1480[0];
            do
            {
              v676 = v675;
              vImagePixelCount v677 = v674;
              int v678 = *((_DWORD *)v675 + 8);
              if (v678 >= v670) {
                v674 = v675;
              }
              else {
                ++v675;
              }
              v675 = (uint64_t *)*v675;
            }
            while (v675);
            if (v674 == v1480) {
              goto LABEL_989;
            }
            v679 = v678 >= v670 ? v676 : v677;
            if (*((_DWORD *)v679 + 8) > v670) {
              goto LABEL_989;
            }
            if (v678 < v670) {
              v676 = v677;
            }
            if (v676[7] < 2uLL) {
              goto LABEL_989;
            }
            v680 = v1480;
            do
            {
              long long v681 = (uint64_t *)v673;
              long long v682 = v680;
              int v683 = *(_DWORD *)(v673 + 32);
              v684 = (uint64_t *)(v673 + 8);
              if (v683 >= v672)
              {
                v684 = v681;
                v680 = v681;
              }
              uint64_t v673 = *v684;
            }
            while (v673);
            if (v680 == v1480 || (v683 >= v672 ? (long long v685 = v681) : (long long v685 = v682), *((_DWORD *)v685 + 8) > v672))
            {
              BOOL v686 = 0;
            }
            else
            {
              v688 = v683 >= v672 ? v681 : v682;
              BOOL v686 = (unint64_t)v688[7] > 1;
            }
            if (!v686)
            {
LABEL_989:
              if (v670 != v672)
              {
                unint64_t v689 = v646[sub_25B40E348((float32x2_t *)v630 + 3, (float32x2_t *)v630 + 7)];
                unint64_t v691 = v647[v690];
                unint64_t v1499 = v689;
                unint64_t v1500 = v691;
                if (!sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&v1499))
                {
                  unsigned int v692 = *((_DWORD *)v630 + 18);
                  LODWORD(v1490) = *((_DWORD *)v630 + 10);
                  *(void *)((char *)&v1490 + 4) = __PAIR64__(v670, v692);
                  HIDWORD(v1490) = v672;
                  *(void *)&long long v1491 = v689;
                  *((void *)&v1491 + 1) = v691;
                  float v693 = sub_25B3FCCE0((float32x2_t *)&v1499, (float32x2_t *)v630 + 3, 0);
                  float v694 = sub_25B3FCCE0((float32x2_t *)&v1499, (float32x2_t *)v630 + 7, 0);
                  float v695 = 180.0 - v693;
                  if (v693 < (float)(180.0 - v693)) {
                    float v695 = v693;
                  }
                  if (v694 >= (float)(180.0 - v694)) {
                    float v694 = 180.0 - v694;
                  }
                  if (v695 >= v694) {
                    float v694 = v695;
                  }
                  if (v694 < 25.0)
                  {
                    int v696 = *((_DWORD *)v630 + 11);
                    int v697 = *((_DWORD *)v630 + 19);
                    if (!(v696 | v697) || v696 == 1 && v697 == 1)
                    {
                      unint64_t v698 = sub_25B40E3D8((float32x2_t *)v630 + 3, (float32x2_t *)v630 + 7);
                      v700 = (int *)(v630 + 6);
                      if (v698) {
                        v700 = (int *)v630 + 13;
                      }
                      int v701 = *v700;
                      LODWORD(__p) = *v700;
                      uint64_t v702 = v630 + 10;
                      if (v699) {
                        uint64_t v702 = (_DWORD *)v630 + 21;
                      }
                      LODWORD(v1503) = *v702;
                      int v703 = v1503;
                      v704 = sub_25B3FF7C0(&v1481, v701, &__p)[5];
                      v705 = sub_25B3FF7C0(&v1481, v703, &v1503);
                      sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v701, v703, *((_DWORD *)v630 + 11), (float32x2_t)v704, (float32x2_t)v705[5]);
                      sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 10));
                      sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 18));
                    }
                    else
                    {
                      BOOL v925 = v696 == 1;
                      if (v696 == 1) {
                        v926 = (long long *)(v630 + 7);
                      }
                      else {
                        v926 = (long long *)(v630 + 3);
                      }
                      if (v925) {
                        v927 = (long long *)(v630 + 3);
                      }
                      else {
                        v927 = (long long *)(v630 + 7);
                      }
                      long long v928 = v926[1];
                      long long __p = *v926;
                      long long v1506 = v928;
                      long long v929 = v927[1];
                      long long v1503 = *v927;
                      long long v1504 = v929;
                      unint64_t v930 = sub_25B40E348((float32x2_t *)&__p, (float32x2_t *)&v1503);
                      sub_25B40E3D8((float32x2_t *)&__p, (float32x2_t *)&v1503);
                      v932 = (int *)&v1506 + 2;
                      if (v930) {
                        v932 = (int *)&v1506 + 3;
                      }
                      int v933 = *v932;
                      int v1498 = *v932;
                      v934 = (char *)&v1504 + 8;
                      if (v931) {
                        v934 = (char *)&v1504 + 12;
                      }
                      int v1497 = *(_DWORD *)v934;
                      int v935 = v1497;
                      v936 = sub_25B3FF7C0(&v1481, v933, &v1498)[5];
                      v937 = sub_25B3FF7C0(&v1481, v935, &v1497);
                      sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v933, v935, 1u, (float32x2_t)v936, (float32x2_t)v937[5]);
                      sub_25B3F9000((uint64_t)v1474, v1504);
                    }
                    sub_25B4BB3C4(v1456, (uint64_t)&v1490);
                    break;
                  }
                }
              }
            }
          }
        }
        if (vabds_f32(90.0, *((float *)v630 + 23)) >= 15.0 || !*((unsigned char *)v630 + 136)) {
          goto LABEL_1113;
        }
        v706 = (float32x2_t *)(v630 + 16);
        float32x2_t v707 = (float32x2_t)v630[16];
        float32x2_t v708 = vsub_f32(v707, (float32x2_t)v630[3]);
        float32x2_t v709 = vsub_f32(v707, (float32x2_t)v630[4]);
        float v710 = vaddv_f32(vmul_f32(v708, v709));
        float32x2_t v711 = vsub_f32(v707, (float32x2_t)v630[7]);
        float32x2_t v712 = vsub_f32(v707, (float32x2_t)v630[8]);
        float v713 = vaddv_f32(vmul_f32(v711, v712));
        if (v710 > 0.0 || v713 <= 0.0)
        {
          if (v710 <= 0.0 || v713 > 0.0) {
            goto LABEL_1113;
          }
          int32x2_t v761 = (int32x2_t)vmul_f32(v708, v708);
          int32x2_t v762 = (int32x2_t)vmul_f32(v709, v709);
          float32x2_t v763 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v761, v762), (float32x2_t)vzip2_s32(v761, v762)));
          float v764 = v763.f32[1];
          BOOL v1430 = v763.f32[0] > v763.f32[1];
          float v1441 = v763.f32[0];
          if (v763.f32[0] > v763.f32[1]) {
            v763.f32[0] = v763.f32[1];
          }
          if (v763.f32[0] >= 0.45) {
            goto LABEL_1113;
          }
          int v765 = sub_25B3FD470((float32x2_t **)v1474, v706, 0.001);
          v766 = (int *)v630 + 13;
          if (v1441 <= v764) {
            v766 = (int *)(v630 + 6);
          }
          int v767 = *v766;
          if (v765 == *v766) {
            goto LABEL_1113;
          }
          v768 = v630 + 16;
          uint64_t v769 = v1482[0];
          int v1426 = v765;
          if (v1482[0])
          {
            v770 = v1482;
            v771 = (uint64_t *)v1482[0];
            do
            {
              v772 = v771;
              v773 = v770;
              int v774 = *((_DWORD *)v771 + 8);
              if (v774 >= v765) {
                v770 = v771;
              }
              else {
                ++v771;
              }
              v771 = (uint64_t *)*v771;
            }
            while (v771);
            if (v770 != v1482)
            {
              if (v774 < v765) {
                v772 = v773;
              }
              if (*((_DWORD *)v772 + 8) <= v765)
              {
                uint64_t v775 = v1480[0];
                if (v1480[0])
                {
                  v776 = v1480;
                  v777 = (uint64_t *)v1480[0];
                  do
                  {
                    v778 = v777;
                    uint64_t v779 = v776;
                    int v780 = *((_DWORD *)v777 + 8);
                    if (v780 >= v765) {
                      v776 = v777;
                    }
                    else {
                      ++v777;
                    }
                    v777 = (uint64_t *)*v777;
                  }
                  while (v777);
                  if (v776 != v1480)
                  {
                    v781 = v780 >= v765 ? v778 : v779;
                    if (*((_DWORD *)v781 + 8) <= v765)
                    {
                      if (v780 < v765) {
                        v778 = v779;
                      }
                      if (v778[7] >= 2uLL)
                      {
                        uint64_t v782 = v1482;
                        do
                        {
                          v783 = (uint64_t *)v769;
                          v784 = v782;
                          int v785 = *(_DWORD *)(v769 + 32);
                          long long v786 = (uint64_t *)(v769 + 8);
                          if (v785 >= v767)
                          {
                            long long v786 = v783;
                            uint64_t v782 = v783;
                          }
                          uint64_t v769 = *v786;
                        }
                        while (v769);
                        v768 = v630 + 16;
                        if (v782 != v1482)
                        {
                          long long v787 = v785 >= v767 ? v783 : v784;
                          if (*((_DWORD *)v787 + 8) <= v767)
                          {
                            vImage_Buffer v788 = v1480;
                            do
                            {
                              vImage_Buffer v789 = (uint64_t *)v775;
                              unsigned __int8 v790 = v788;
                              int v791 = *(_DWORD *)(v775 + 32);
                              long long v792 = (uint64_t *)(v775 + 8);
                              if (v791 >= v767)
                              {
                                long long v792 = v789;
                                vImage_Buffer v788 = v789;
                              }
                              uint64_t v775 = *v792;
                            }
                            while (v775);
                            v768 = v630 + 16;
                            if (v788 != v1480)
                            {
                              long long v793 = v791 >= v767 ? v789 : v790;
                              if (*((_DWORD *)v793 + 8) <= v767)
                              {
                                if (v791 < v767) {
                                  vImage_Buffer v789 = v790;
                                }
                                if ((unint64_t)v789[7] > 1) {
                                  goto LABEL_1113;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v794 = *v768;
          *(void *)&long long v1490 = *v768;
          uint64_t v795 = v646[v1430];
          *((void *)&v1490 + 1) = v795;
          long long v1491 = xmmword_25B5F10F0;
          if (sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&v1490)) {
            goto LABEL_1113;
          }
          unsigned int v914 = *((_DWORD *)v630 + 18);
          LODWORD(__p) = *((_DWORD *)v630 + 10);
          *(void *)((char *)&__p + 4) = __PAIR64__(v1426, v914);
          HIDWORD(__p) = v767;
          *(void *)&long long v1506 = v794;
          *((void *)&v1506 + 1) = v795;
          sub_25B4BB3C4(v1456, (uint64_t)&__p);
          v915 = v630 + 6;
          if (v1441 <= v764) {
            v915 = (_DWORD *)v630 + 13;
          }
          LODWORD(v1503) = *v915;
          int v916 = v1503;
          LODWORD(v1499) = v1426;
          v917 = sub_25B3FF7C0(&v1481, v1503, &v1503)[5];
          v918 = sub_25B3FF7C0(&v1481, v1426, &v1499);
          sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v916, v1426, *((_DWORD *)v630 + 11), (float32x2_t)v917, (float32x2_t)v918[5]);
          sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 10));
          int v920 = *((_DWORD *)v630 + 20);
          int v919 = *((_DWORD *)v630 + 21);
          int v1498 = v920;
          int v1497 = v1426;
          int v1496 = v919;
          int v1495 = v1426;
          if (v920 != v1426 && v919 != v1426)
          {
            v921 = sub_25B3FF7C0(&v1481, v920, &v1498);
            v922 = sub_25B3FF7C0(&v1481, v1426, &v1497);
            sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v920, v1426, *((_DWORD *)v630 + 19), (float32x2_t)v921[5], (float32x2_t)v922[5]);
            v923 = sub_25B3FF7C0(&v1481, v919, &v1496);
            v924 = sub_25B3FF7C0(&v1481, v1426, &v1495);
            sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v919, v1426, *((_DWORD *)v630 + 19), (float32x2_t)v923[5], (float32x2_t)v924[5]);
            sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 18));
          }
        }
        else
        {
          int32x2_t v714 = (int32x2_t)vmul_f32(v711, v711);
          int32x2_t v715 = (int32x2_t)vmul_f32(v712, v712);
          float32x2_t v716 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v714, v715), (float32x2_t)vzip2_s32(v714, v715)));
          float v717 = v716.f32[1];
          BOOL v1429 = v716.f32[0] > v716.f32[1];
          float v1440 = v716.f32[0];
          if (v716.f32[0] > v716.f32[1]) {
            v716.f32[0] = v716.f32[1];
          }
          if (v716.f32[0] < 0.45)
          {
            int v718 = sub_25B3FD470((float32x2_t **)v1474, v706, 0.001);
            uint64_t v719 = (int *)v630 + 21;
            if (v1440 <= v717) {
              uint64_t v719 = (int *)(v630 + 10);
            }
            int v720 = *v719;
            if (v718 != *v719)
            {
              char v721 = v630 + 16;
              uint64_t v722 = v1482[0];
              if (!v1482[0]) {
                goto LABEL_2094;
              }
              v723 = v1482;
              int v724 = (uint64_t *)v1482[0];
              do
              {
                float v725 = v724;
                float v726 = v723;
                int v727 = *((_DWORD *)v724 + 8);
                if (v727 >= v718) {
                  v723 = v724;
                }
                else {
                  ++v724;
                }
                int v724 = (uint64_t *)*v724;
              }
              while (v724);
              if (v723 == v1482) {
                goto LABEL_2094;
              }
              if (v727 < v718) {
                float v725 = v726;
              }
              if (*((_DWORD *)v725 + 8) > v718) {
                goto LABEL_2094;
              }
              uint64_t v728 = v1480[0];
              if (!v1480[0]) {
                goto LABEL_2094;
              }
              uint64_t v729 = v1480;
              v730 = (uint64_t *)v1480[0];
              do
              {
                int v731 = v730;
                v732 = v729;
                int v733 = *((_DWORD *)v730 + 8);
                if (v733 >= v718) {
                  uint64_t v729 = v730;
                }
                else {
                  ++v730;
                }
                v730 = (uint64_t *)*v730;
              }
              while (v730);
              if (v729 == v1480) {
                goto LABEL_2094;
              }
              long long v734 = v733 >= v718 ? v731 : v732;
              if (*((_DWORD *)v734 + 8) > v718) {
                goto LABEL_2094;
              }
              if (v733 < v718) {
                int v731 = v732;
              }
              if (v731[7] < 2uLL) {
                goto LABEL_2094;
              }
              size_t v735 = v1482;
              do
              {
                int v736 = (uint64_t *)v722;
                v737 = v735;
                int v738 = *(_DWORD *)(v722 + 32);
                v739 = (uint64_t *)(v722 + 8);
                if (v738 >= v720)
                {
                  v739 = v736;
                  size_t v735 = v736;
                }
                uint64_t v722 = *v739;
              }
              while (v722);
              if (v735 == v1482) {
                goto LABEL_2094;
              }
              long long v740 = v738 >= v720 ? v736 : v737;
              if (*((_DWORD *)v740 + 8) > v720) {
                goto LABEL_2094;
              }
              v741 = v1480;
              do
              {
                v742 = (uint64_t *)v728;
                v743 = v741;
                int v744 = *(_DWORD *)(v728 + 32);
                v745 = (uint64_t *)(v728 + 8);
                if (v744 >= v720)
                {
                  v745 = v742;
                  v741 = v742;
                }
                uint64_t v728 = *v745;
              }
              while (v728);
              char v721 = v630 + 16;
              if (v741 == v1480) {
                goto LABEL_2094;
              }
              v746 = v744 >= v720 ? v742 : v743;
              if (*((_DWORD *)v746 + 8) > v720) {
                goto LABEL_2094;
              }
              if (v744 < v720) {
                v742 = v743;
              }
              if ((unint64_t)v742[7] <= 1)
              {
LABEL_2094:
                uint64_t v747 = *v721;
                *(void *)&long long v1490 = *v721;
                uint64_t v748 = v647[v1429];
                *((void *)&v1490 + 1) = v748;
                long long v1491 = xmmword_25B5F10F0;
                int v749 = v718;
                if (!sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&v1490))
                {
                  unsigned int v750 = *((_DWORD *)v630 + 18);
                  LODWORD(__p) = *((_DWORD *)v630 + 10);
                  *(void *)((char *)&__p + 4) = __PAIR64__(v749, v750);
                  HIDWORD(__p) = v720;
                  *(void *)&long long v1506 = v747;
                  *((void *)&v1506 + 1) = v748;
                  sub_25B4BB3C4(v1456, (uint64_t)&__p);
                  v751 = v630 + 10;
                  if (v1440 <= v717) {
                    v751 = (_DWORD *)v630 + 21;
                  }
                  LODWORD(v1503) = *v751;
                  int v752 = v1503;
                  LODWORD(v1499) = v749;
                  float32x4_t v753 = sub_25B3FF7C0(&v1481, v1503, &v1503)[5];
                  int v754 = sub_25B3FF7C0(&v1481, v749, &v1499);
                  sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v752, v749, *((_DWORD *)v630 + 19), (float32x2_t)v753, (float32x2_t)v754[5]);
                  sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 18));
                  int v756 = *((_DWORD *)v630 + 12);
                  int v755 = *((_DWORD *)v630 + 13);
                  int v1498 = v756;
                  int v1497 = v749;
                  int v1496 = v755;
                  int v1495 = v749;
                  if (v756 != v749 && v755 != v749)
                  {
                    v757 = sub_25B3FF7C0(&v1481, v756, &v1498);
                    v758 = sub_25B3FF7C0(&v1481, v749, &v1497);
                    sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v756, v749, *((_DWORD *)v630 + 11), (float32x2_t)v757[5], (float32x2_t)v758[5]);
                    float32x4_t v759 = sub_25B3FF7C0(&v1481, v755, &v1496);
                    uint64_t v760 = sub_25B3FF7C0(&v1481, v749, &v1495);
                    sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v755, v749, *((_DWORD *)v630 + 11), (float32x2_t)v759[5], (float32x2_t)v760[5]);
                    sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 10));
                  }
                  break;
                }
              }
            }
          }
LABEL_1113:
          float v796 = *((float *)v630 + 23);
          if (*((unsigned char *)v630 + 136))
          {
            if (vabds_f32(90.0, v796) < 15.0)
            {
              float32x2_t v797 = (float32x2_t)v630[16];
              float32x2_t v798 = vsub_f32(v797, (float32x2_t)v630[3]);
              float32x2_t v799 = vsub_f32(v797, (float32x2_t)v630[4]);
              if (vaddv_f32(vmul_f32(v798, v799)) > 0.0)
              {
                float32x2_t v800 = vsub_f32(v797, (float32x2_t)v630[7]);
                float32x2_t v801 = vsub_f32(v797, (float32x2_t)v630[8]);
                if (vaddv_f32(vmul_f32(v800, v801)) > 0.0)
                {
                  int32x2_t v802 = (int32x2_t)vmul_f32(v800, v800);
                  int32x2_t v803 = (int32x2_t)vmul_f32(v801, v801);
                  float32x2_t v804 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v802, v803), (float32x2_t)vzip2_s32(v802, v803)));
                  float v805 = v804.f32[1];
                  float v806 = v804.f32[0] <= v804.f32[1] ? v804.f32[0] : v804.f32[1];
                  int32x2_t v807 = (int32x2_t)vmul_f32(v798, v798);
                  int32x2_t v808 = (int32x2_t)vmul_f32(v799, v799);
                  float32x2_t v809 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v807, v808), (float32x2_t)vzip2_s32(v807, v808)));
                  float v810 = v809.f32[1];
                  float v811 = v809.f32[0] <= v809.f32[1] ? v809.f32[0] : v809.f32[1];
                  if (v806 < 0.45 && v811 < 0.45)
                  {
                    float v1431 = v809.f32[0];
                    float v1442 = v804.f32[0];
                    int v812 = sub_25B3FD470((float32x2_t **)v1474, (float32x2_t *)v630 + 16, 0.1);
                    int v813 = v812;
                    if (v1431 <= v810) {
                      signed int v814 = *((_DWORD *)v630 + 12);
                    }
                    else {
                      signed int v814 = *((_DWORD *)v630 + 13);
                    }
                    if (v1431 <= v810) {
                      int v815 = *((_DWORD *)v630 + 13);
                    }
                    else {
                      int v815 = *((_DWORD *)v630 + 12);
                    }
                    int v817 = *((_DWORD *)v630 + 20);
                    int v816 = *((_DWORD *)v630 + 21);
                    if (v1442 <= v805) {
                      int v818 = *((_DWORD *)v630 + 20);
                    }
                    else {
                      int v818 = *((_DWORD *)v630 + 21);
                    }
                    *(void *)&long long v1490 = v630[16];
                    *((void *)&v1490 + 1) = v647[v1442 > v805];
                    long long v1491 = xmmword_25B5F10F0;
                    uint64_t v819 = v646[v1431 > v810];
                    *(void *)&long long __p = v1490;
                    *((void *)&__p + 1) = v819;
                    long long v1506 = xmmword_25B5F10F0;
                    unsigned int v820 = *((_DWORD *)v630 + 18);
                    LODWORD(v1503) = *((_DWORD *)v630 + 10);
                    *(void *)((char *)&v1503 + 4) = __PAIR64__(v812, v820);
                    HIDWORD(v1503) = v818;
                    long long v1504 = v1490;
                    unint64_t v1499 = __PAIR64__(v820, v1503);
                    unint64_t v1500 = __PAIR64__(v814, v812);
                    uint64_t v1501 = v1490;
                    uint64_t v1502 = v819;
                    int v1498 = v812;
                    int v1432 = v815;
                    int v1497 = v815;
                    if (v1442 <= v805) {
                      int v821 = v816;
                    }
                    else {
                      int v821 = v817;
                    }
                    int v1443 = v821;
                    int v1496 = v821;
                    uint64_t v822 = v1482[0];
                    if (!v1482[0])
                    {
                      BOOL v828 = 0;
                      goto LABEL_1183;
                    }
                    uint64_t v823 = v1482;
                    v824 = (uint64_t *)v1482[0];
                    do
                    {
                      __int16 v825 = v824;
                      v826 = v823;
                      int v827 = *((_DWORD *)v824 + 8);
                      if (v827 >= v812) {
                        uint64_t v823 = v824;
                      }
                      else {
                        ++v824;
                      }
                      v824 = (uint64_t *)*v824;
                    }
                    while (v824);
                    if (v823 == v1482) {
                      goto LABEL_1147;
                    }
                    if (v827 < v812) {
                      __int16 v825 = v826;
                    }
                    if (*((_DWORD *)v825 + 8) > v812)
                    {
LABEL_1147:
                      BOOL v828 = 0;
                    }
                    else
                    {
                      uint64_t v829 = (uint64_t *)v1480[0];
                      if (!v1480[0]) {
                        goto LABEL_1160;
                      }
                      v830 = v1480;
                      do
                      {
                        v831 = v829;
                        v832 = v830;
                        int v833 = *((_DWORD *)v829 + 8);
                        if (v833 >= v812) {
                          v830 = v829;
                        }
                        else {
                          ++v829;
                        }
                        uint64_t v829 = (uint64_t *)*v829;
                      }
                      while (v829);
                      if (v830 != v1480
                        && (v833 >= v812 ? (v834 = v831) : (v834 = v832), *((_DWORD *)v834 + 8) <= v812))
                      {
                        if (v833 < v812) {
                          v831 = v832;
                        }
                        unint64_t v835 = v831[7];
                      }
                      else
                      {
LABEL_1160:
                        unint64_t v835 = 0;
                      }
                      BOOL v828 = v835 > 1;
                    }
                    v836 = v1482;
                    do
                    {
                      long long v837 = (uint64_t *)v822;
                      long long v838 = v836;
                      int v839 = *(_DWORD *)(v822 + 32);
                      long long v840 = (uint64_t *)(v822 + 8);
                      if (v839 >= v818)
                      {
                        long long v840 = v837;
                        v836 = v837;
                      }
                      uint64_t v822 = *v840;
                    }
                    while (v822);
                    if (v836 == v1482) {
                      goto LABEL_1183;
                    }
                    long long v841 = v839 >= v818 ? v837 : v838;
                    uint64_t v842 = v1480[0];
                    if (*((_DWORD *)v841 + 8) > v818 || v1480[0] == 0) {
                      goto LABEL_1183;
                    }
                    v844 = v1480;
                    do
                    {
                      long long v845 = (uint64_t *)v842;
                      long long v846 = v844;
                      int v847 = *(_DWORD *)(v842 + 32);
                      long long v848 = (uint64_t *)(v842 + 8);
                      if (v847 >= v818)
                      {
                        long long v848 = v845;
                        v844 = v845;
                      }
                      uint64_t v842 = *v848;
                    }
                    while (v842);
                    if (v844 == v1480 || (v847 >= v818 ? (long long v849 = v845) : (long long v849 = v846), *((_DWORD *)v849 + 8) > v818))
                    {
LABEL_1183:
                      BOOL v850 = 1;
                    }
                    else
                    {
                      if (v847 < v818) {
                        long long v845 = v846;
                      }
                      BOOL v850 = (unint64_t)v845[7] < 2;
                    }
                    if (v812 != v818 && (!v828 || v850) && sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&v1490))
                    {
                      sub_25B4BB3C4(v1456, (uint64_t)&v1503);
                      simd_float4x4 v851 = sub_25B3FF7C0(&v1481, v813, &v1498)[5];
                      simd_float4x4 v852 = sub_25B3FF7C0(&v1481, v1443, &v1496);
                      sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v813, v1443, *((_DWORD *)v630 + 19), (float32x2_t)v851, (float32x2_t)v852[5]);
                      sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 18));
                    }
                    uint64_t v853 = v1482[0];
                    if (v1482[0])
                    {
                      v854 = v1482;
                      v855 = (uint64_t *)v1482[0];
                      do
                      {
                        v856 = v855;
                        v857 = v854;
                        int v858 = *((_DWORD *)v855 + 8);
                        if (v858 >= v813) {
                          v854 = v855;
                        }
                        else {
                          ++v855;
                        }
                        v855 = (uint64_t *)*v855;
                      }
                      while (v855);
                      if (v854 == v1482) {
                        goto LABEL_1210;
                      }
                      if (v858 < v813) {
                        v856 = v857;
                      }
                      uint64_t v859 = v1480[0];
                      if (*((_DWORD *)v856 + 8) > v813 || v1480[0] == 0) {
                        goto LABEL_1210;
                      }
                      v861 = v1480;
                      do
                      {
                        v862 = (uint64_t *)v859;
                        v863 = v861;
                        int v864 = *(_DWORD *)(v859 + 32);
                        v865 = (uint64_t *)(v859 + 8);
                        if (v864 >= v813)
                        {
                          v865 = v862;
                          v861 = v862;
                        }
                        uint64_t v859 = *v865;
                      }
                      while (v859);
                      if (v861 == v1480 || (v864 >= v813 ? (v866 = v862) : (v866 = v863), *((_DWORD *)v866 + 8) > v813))
                      {
LABEL_1210:
                        BOOL v867 = 0;
                      }
                      else
                      {
                        if (v864 < v813) {
                          v862 = v863;
                        }
                        BOOL v867 = (unint64_t)v862[7] > 1;
                      }
                      v868 = v1482;
                      do
                      {
                        v869 = (uint64_t *)v853;
                        v870 = v868;
                        int v871 = *(_DWORD *)(v853 + 32);
                        v872 = (uint64_t *)(v853 + 8);
                        if (v871 >= v814)
                        {
                          v872 = v869;
                          v868 = v869;
                        }
                        uint64_t v853 = *v872;
                      }
                      while (v853);
                      if (v868 != v1482)
                      {
                        v873 = v871 >= v814 ? v869 : v870;
                        uint64_t v874 = v1480[0];
                        if (*((_DWORD *)v873 + 8) <= v814 && v1480[0] != 0)
                        {
                          v876 = v1480;
                          do
                          {
                            v877 = (uint64_t *)v874;
                            v878 = v876;
                            int v879 = *(_DWORD *)(v874 + 32);
                            v880 = (uint64_t *)(v874 + 8);
                            if (v879 >= v814)
                            {
                              v880 = v877;
                              v876 = v877;
                            }
                            uint64_t v874 = *v880;
                          }
                          while (v874);
                          if (v876 != v1480)
                          {
                            v881 = v879 >= v814 ? v877 : v878;
                            if (*((_DWORD *)v881 + 8) <= v814)
                            {
                              if (v879 < v814) {
                                v877 = v878;
                              }
                              BOOL v882 = (unint64_t)v877[7] < 2;
LABEL_1237:
                              if (v813 != v814 && (!v867 || v882) && sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&__p))
                              {
                                sub_25B4BB3C4(v1456, (uint64_t)&v1499);
                                v883 = sub_25B3FF7C0(&v1481, v813, &v1498)[5];
                                v884 = sub_25B3FF7C0(&v1481, v1432, &v1497);
                                sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v813, v1432, *((_DWORD *)v630 + 11), (float32x2_t)v883, (float32x2_t)v884[5]);
                                sub_25B3F9000((uint64_t)v1474, *((_DWORD *)v630 + 10));
                              }
                              uint64_t v885 = a1;
                              if (*(void *)(a1 + 648) == *(void *)(a1 + 656))
                              {
                                float v796 = *((float *)v630 + 23);
                                goto LABEL_1243;
                              }
LABEL_1315:
                              uint64_t v940 = *(void *)(v885 + 648);
                              uint64_t v941 = *(void *)(v885 + 656);
                              if (v940 == v941) {
                                goto LABEL_1251;
                              }
                              do
                              {
                                int v942 = *(_DWORD *)(v940 + 8);
                                int v943 = *(_DWORD *)(v940 + 12);
                                if (!sub_25B3FAB54(v1478[5], v1478[6], v942, v943)
                                  && !sub_25B4BA7FC(*(uint64_t *)&v1507[0], *((unint64_t *)&v1507[0] + 1), v942, v943))
                                {
                                  unint64_t v944 = *(void *)(a1 + 680);
                                  if (v944 >= *(void *)(a1 + 688))
                                  {
                                    v945 = sub_25B4BB174((char **)(a1 + 672), v940);
                                  }
                                  else
                                  {
                                    *(void *)unint64_t v944 = *(void *)v940;
                                    *(void *)(v944 + 8) = *(void *)(v940 + 8);
                                    *(_OWORD *)(v944 + 16) = *(_OWORD *)(v940 + 16);
                                    v945 = (char *)(v944 + 32);
                                  }
                                  *(void *)(a1 + 680) = v945;
                                  sub_25B4BA8D4((float *)v1507, *(_DWORD *)(v940 + 8), *(_DWORD *)(v940 + 12), *(double *)(v940 + 8));
                                }
                                char v687 = 0;
                                v940 += 32;
                              }
                              while (v940 != v941);
LABEL_972:
                              sub_25B3FAD08((uint64_t)&v1492);
                              if (v626) {
                                operator delete(v626);
                              }
                              if ((v687 & 1) == 0) {
                                continue;
                              }
                              sub_25B3FB178((uint64_t)v1507);
                              sub_25B3FB178((uint64_t)v1509);
                              v1422 = (char **)(a1 + 696);
                              *(void *)(a1 + 704) = *(void *)(a1 + 696);
                              memset(v1507, 0, 24);
                              v946 = v1489;
                              if (v1489)
                              {
                                v947 = 0;
                                do
                                {
                                  if (*((_DWORD *)v946 + 4) < *((_DWORD *)v946 + 5))
                                  {
                                    v948 = v946 + 3;
                                    if ((unint64_t)v947 >= *(void *)&v1507[1])
                                    {
                                      unint64_t v954 = 0x8E38E38E38E38E39 * (((uint64_t)v947 - *(void *)&v1507[0]) >> 4);
                                      unint64_t v955 = v954 + 1;
                                      if (v954 + 1 > 0x1C71C71C71C71C7) {
                                        sub_25B3FBC4C();
                                      }
                                      if (0x1C71C71C71C71C72
                                         * ((uint64_t)(*(void *)&v1507[1] - *(void *)&v1507[0]) >> 4) > v955)
                                        unint64_t v955 = 0x1C71C71C71C71C72
                                             * ((uint64_t)(*(void *)&v1507[1] - *(void *)&v1507[0]) >> 4);
                                      if (0x8E38E38E38E38E39
                                         * ((uint64_t)(*(void *)&v1507[1] - *(void *)&v1507[0]) >> 4) >= 0xE38E38E38E38E3)
                                        unint64_t v956 = 0x1C71C71C71C71C7;
                                      else {
                                        unint64_t v956 = v955;
                                      }
                                      v1514[4] = &v1507[1];
                                      if (v956)
                                      {
                                        if (v956 > 0x1C71C71C71C71C7) {
                                          sub_25B3FA70C();
                                        }
                                        v957 = (char *)operator new(144 * v956);
                                      }
                                      else
                                      {
                                        v957 = 0;
                                      }
                                      v958 = &v957[144 * v954];
                                      v1514[0] = v957;
                                      v1514[1] = v958;
                                      v1514[2] = v958;
                                      v1514[3] = &v957[144 * v956];
                                      *(_OWORD *)v958 = *v948;
                                      long long v959 = *(_OWORD *)(v946 + 5);
                                      long long v960 = *(_OWORD *)(v946 + 7);
                                      long long v961 = *(_OWORD *)(v946 + 9);
                                      *((void *)v958 + 8) = v946[11];
                                      *((_OWORD *)v958 + 2) = v960;
                                      *((_OWORD *)v958 + 3) = v961;
                                      *((_OWORD *)v958 + 1) = v959;
                                      *((void *)v958 + 10) = 0;
                                      *((void *)v958 + 11) = 0;
                                      *((void *)v958 + 9) = 0;
                                      sub_25B3FCA58((void *)v958 + 9, (const void *)v946[12], v946[13], (v946[13] - v946[12]) >> 2);
                                      v962 = &v957[144 * v954];
                                      long long v963 = *(_OWORD *)(v946 + 15);
                                      long long v964 = *(_OWORD *)(v946 + 17);
                                      *(_OWORD *)(v962 + 124) = *(_OWORD *)((char *)v946 + 148);
                                      *((_OWORD *)v962 + 6) = v963;
                                      *((_OWORD *)v962 + 7) = v964;
                                      v965 = v1514[1];
                                      v1514[2] = (char *)v1514[2] + 144;
                                      uint64_t v966 = *((void *)&v1507[0] + 1);
                                      uint64_t v967 = *(void *)&v1507[0];
                                      *(void **)&long long v1492 = v1514[1];
                                      *((void **)&v1492 + 1) = v1514[1];
                                      long long v1490 = v1492;
                                      v1509[0] = &v1507[1];
                                      v1509[1] = &v1490;
                                      v1509[2] = &v1492;
                                      for (LOBYTE(v1509[3]) = 0; v966 != v967; v966 -= 144)
                                      {
                                        long long v968 = *(_OWORD *)(v966 - 112);
                                        long long v969 = *(_OWORD *)(v966 - 96);
                                        uint64_t v970 = *(void *)(v966 - 80);
                                        long long v972 = *(_OWORD *)(v966 - 144);
                                        long long v971 = *(_OWORD *)(v966 - 128);
                                        *(v965 - 9) = 0;
                                        v973 = (char *)(v965 - 9);
                                        *((_OWORD *)v965 - 9) = v972;
                                        *(v965 - 10) = v970;
                                        *((_OWORD *)v965 - 6) = v969;
                                        *((_OWORD *)v965 - 7) = v968;
                                        *((_OWORD *)v965 - 8) = v971;
                                        *((void *)v973 + 1) = 0;
                                        *((void *)v973 + 2) = 0;
                                        sub_25B3FCA58(v965 - 9, *(const void **)(v966 - 72), *(void *)(v966 - 64), (uint64_t)(*(void *)(v966 - 64) - *(void *)(v966 - 72)) >> 2);
                                        long long v975 = *(_OWORD *)(v966 - 48);
                                        long long v974 = *(_OWORD *)(v966 - 32);
                                        *(_OWORD *)((char *)v965 - 20) = *(_OWORD *)(v966 - 20);
                                        *((_OWORD *)v965 - 3) = v975;
                                        *((_OWORD *)v965 - 2) = v974;
                                        v965 = (void *)(*((void *)&v1492 + 1) - 144);
                                        *((void *)&v1492 + 1) -= 144;
                                      }
                                      LOBYTE(v1509[3]) = 1;
                                      sub_25B4BA79C((uint64_t)v1509);
                                      v976 = *(void **)&v1507[1];
                                      v1457 = (float32x2_t *)v1514[2];
                                      long long v977 = *(_OWORD *)&v1514[2];
                                      long long v978 = v1507[0];
                                      *(void *)&v1507[0] = v965;
                                      *(_OWORD *)&v1514[1] = v978;
                                      *(_OWORD *)((char *)v1507 + 8) = v977;
                                      v1514[3] = v976;
                                      v1514[0] = (void *)v978;
                                      sub_25B4BA738((uint64_t)v1514);
                                      v947 = v1457;
                                    }
                                    else
                                    {
                                      *(_OWORD *)v947->f32 = *v948;
                                      long long v949 = *(_OWORD *)(v946 + 5);
                                      long long v950 = *(_OWORD *)(v946 + 7);
                                      long long v951 = *(_OWORD *)(v946 + 9);
                                      v947[8] = (float32x2_t)v946[11];
                                      *(_OWORD *)v947[4].f32 = v950;
                                      *(_OWORD *)v947[6].f32 = v951;
                                      *(_OWORD *)v947[2].f32 = v949;
                                      v947[10] = 0;
                                      v947[11] = 0;
                                      v947[9] = 0;
                                      sub_25B3FCA58(&v947[9], (const void *)v946[12], v946[13], (v946[13] - v946[12]) >> 2);
                                      long long v952 = *(_OWORD *)(v946 + 15);
                                      long long v953 = *(_OWORD *)(v946 + 17);
                                      *(_OWORD *)&v947[15].i32[1] = *(_OWORD *)((char *)v946 + 148);
                                      *(_OWORD *)v947[12].f32 = v952;
                                      *(_OWORD *)v947[14].f32 = v953;
                                      v947 += 18;
                                    }
                                    *((void *)&v1507[0] + 1) = v947;
                                  }
                                  v946 = (uint64_t *)*v946;
                                }
                                while (v946);
                                for (uint64_t n = *(float32x2_t **)&v1507[0]; n != v947; n += 18)
                                {
                                  if (!(n[2].i32[1] | n[6].i32[1]) && n[12].i8[0] && n[8].i8[0] == 0)
                                  {
                                    float32x2_t v981 = vsub_f32(*n, n[1]);
                                    int32x2_t v982 = (int32x2_t)vmul_f32(v981, v981);
                                    float32x2_t v983 = vsub_f32(n[4], n[5]);
                                    int32x2_t v984 = (int32x2_t)vmul_f32(v983, v983);
                                    float32x2_t v985 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v984, v982), (float32x2_t)vzip2_s32(v984, v982)));
                                    float v986 = v985.f32[1];
                                    if (v985.f32[0] >= v985.f32[1]) {
                                      float v987 = v985.f32[1];
                                    }
                                    else {
                                      float v987 = v985.f32[0];
                                    }
                                    float v988 = 40.0;
                                    if (v987 >= 0.55) {
                                      float v988 = 30.0;
                                    }
                                    float v989 = n[8].f32[1];
                                    if (v989 >= (float)(180.0 - v989)) {
                                      float v989 = 180.0 - v989;
                                    }
                                    if (v989 < v988
                                      && v985.f32[1] > 0.25
                                      && v985.f32[0] > 0.25
                                      && n[15].f32[0] < 0.3
                                      && n[17].f32[0] > 0.75)
                                    {
                                      v992 = n + 4;
                                      if (v985.f32[1] >= v985.f32[0]) {
                                        float v993 = v985.f32[1];
                                      }
                                      else {
                                        float v993 = v985.f32[0];
                                      }
                                      if ((float)(v993 / v987) <= 2.0)
                                      {
                                        float v1458 = v985.f32[0];
                                        BOOL v994 = sub_25B4BA6A0(n[3].i32[0], n[3].i32[1], (uint64_t)v1474);
                                        BOOL v995 = sub_25B4BA6A0(n[7].i32[0], n[7].i32[1], (uint64_t)v1474);
                                        if (!v994 || v995)
                                        {
                                          if (v986 >= v1458) {
                                            v996 = n + 4;
                                          }
                                          else {
                                            v996 = n;
                                          }
                                          if (!v995 || v994) {
                                            v992 = v996;
                                          }
                                          else {
                                            v992 = n;
                                          }
                                        }
                                      }
                                      else if (v985.f32[1] < v985.f32[0])
                                      {
                                        v992 = n;
                                      }
                                      sub_25B3F9000((uint64_t)v1474, v992[2].i32[0]);
                                      v997 = *(_OWORD **)(a1 + 704);
                                      unint64_t v998 = *(void *)(a1 + 712);
                                      if ((unint64_t)v997 >= v998)
                                      {
                                        uint64_t v1001 = ((char *)v997 - *v1422) >> 5;
                                        unint64_t v1002 = v1001 + 1;
                                        if ((unint64_t)(v1001 + 1) >> 59) {
                                          sub_25B3FBC4C();
                                        }
                                        uint64_t v1003 = v998 - (void)*v1422;
                                        if (v1003 >> 4 > v1002) {
                                          unint64_t v1002 = v1003 >> 4;
                                        }
                                        if ((unint64_t)v1003 >= 0x7FFFFFFFFFFFFFE0) {
                                          unint64_t v1004 = 0x7FFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v1004 = v1002;
                                        }
                                        if (v1004) {
                                          unint64_t v1004 = (unint64_t)sub_25B3FBC9C(v1004);
                                        }
                                        else {
                                          uint64_t v1005 = 0;
                                        }
                                        v1006 = (_OWORD *)(v1004 + 32 * v1001);
                                        long long v1007 = *(_OWORD *)v992[2].f32;
                                        _OWORD *v1006 = *(_OWORD *)v992->f32;
                                        v1006[1] = v1007;
                                        v1008 = *(char **)(a1 + 704);
                                        v1009 = *(char **)(a1 + 696);
                                        v1010 = v1006;
                                        if (v1008 != v1009)
                                        {
                                          do
                                          {
                                            long long v1011 = *((_OWORD *)v1008 - 1);
                                            *(v1010 - 2) = *((_OWORD *)v1008 - 2);
                                            *(v1010 - 1) = v1011;
                                            v1010 -= 2;
                                            v1008 -= 32;
                                          }
                                          while (v1008 != v1009);
                                          v1008 = *v1422;
                                        }
                                        *(void *)(a1 + 696) = v1010;
                                        v1000 = v1006 + 2;
                                        *(void *)(a1 + 704) = v1006 + 2;
                                        *(void *)(a1 + 712) = v1004 + 32 * v1005;
                                        if (v1008) {
                                          operator delete(v1008);
                                        }
                                      }
                                      else
                                      {
                                        long long v999 = *(_OWORD *)v992[2].f32;
                                        _OWORD *v997 = *(_OWORD *)v992->f32;
                                        v997[1] = v999;
                                        v1000 = v997 + 2;
                                      }
                                      *(void *)(a1 + 704) = v1000;
                                    }
                                  }
                                }
                              }
                              v1514[0] = v1507;
                              sub_25B4BA614((void ***)v1514);
                              v1421 = (char **)(a1 + 720);
                              *(void *)(a1 + 728) = *(void *)(a1 + 720);
                              v1012 = v1486;
                              v1013 = v1487;
                              if (v1486 == v1487)
                              {
                                *(void *)(a1 + 752) = *(void *)(a1 + 744);
                                goto LABEL_1697;
                              }
                              while (2)
                              {
                                v1014 = (float32x2_t *)sub_25B3F9CFC(v1488, *v1012, v1012[1]);
                                if (v1014 && v1014[2].i32[0] < v1014[2].i32[1] && !(v1014[5].i32[1] | v1014[9].i32[1]))
                                {
                                  float32x2_t v1015 = vsub_f32(v1014[3], v1014[4]);
                                  int32x2_t v1016 = (int32x2_t)vmul_f32(v1015, v1015);
                                  float32x2_t v1017 = vsub_f32(v1014[7], v1014[8]);
                                  int32x2_t v1018 = (int32x2_t)vmul_f32(v1017, v1017);
                                  float32x2_t v1019 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v1016, v1018), (float32x2_t)vzip2_s32(v1016, v1018)));
                                  float v1020 = v1019.f32[1];
                                  if (v1019.f32[0] <= v1019.f32[1])
                                  {
                                    v1021 = v1014 + 3;
                                    char v1022 = (char)v1014[3];
                                    v1023 = v1014 + 9;
                                    float v1024 = v1019.f32[1];
                                    float v1020 = v1019.f32[0];
                                  }
                                  else
                                  {
                                    v1021 = v1014 + 7;
                                    char v1022 = (char)v1014[7];
                                    v1023 = v1014 + 5;
                                    float v1024 = v1019.f32[0];
                                  }
                                  __int32 v1025 = v1023->i32[0];
                                  v1514[0] = *(void **)((char *)v1021 + 1);
                                  *(float32x2_t *)((char *)v1514 + 7) = v1021[1];
                                  if (v1024 > 0.8 && v1020 < 0.45)
                                  {
                                    int v1026 = v1021[2].i32[0];
                                    __int32 v1027 = v1021[2].i32[1];
                                    __int32 v1028 = v1021[3].i32[0];
                                    __int32 v1029 = v1021[3].i32[1];
                                    if (v1020 <= 0.25)
                                    {
                                      v1039 = (uint64_t *)v1482[0];
                                      if (!v1482[0]) {
                                        goto LABEL_1437;
                                      }
                                      v1040 = v1482;
                                      v1041 = (uint64_t *)v1482[0];
                                      do
                                      {
                                        v1042 = v1041;
                                        v1043 = v1040;
                                        __int32 v1044 = *((_DWORD *)v1041 + 8);
                                        if (v1044 >= v1028) {
                                          v1040 = v1041;
                                        }
                                        else {
                                          ++v1041;
                                        }
                                        v1041 = (uint64_t *)*v1041;
                                      }
                                      while (v1041);
                                      if (v1040 == v1482) {
                                        goto LABEL_1437;
                                      }
                                      if (v1044 < v1028) {
                                        v1042 = v1043;
                                      }
                                      if (v1028 < *((_DWORD *)v1042 + 8)) {
LABEL_1437:
                                      }
                                        v1040 = v1482;
                                      if (!v1482[0]) {
                                        goto LABEL_1449;
                                      }
                                      v1045 = v1482;
                                      do
                                      {
                                        v1046 = v1039;
                                        v1047 = v1045;
                                        __int32 v1048 = *((_DWORD *)v1039 + 8);
                                        if (v1048 >= v1029) {
                                          v1045 = v1039;
                                        }
                                        else {
                                          ++v1039;
                                        }
                                        v1039 = (uint64_t *)*v1039;
                                      }
                                      while (v1039);
                                      if (v1045 == v1482
                                        || (v1048 >= v1029 ? (v1049 = v1046) : (v1049 = v1047),
                                            v1029 < *((_DWORD *)v1049 + 8)))
                                      {
LABEL_1449:
                                        v1045 = v1482;
                                      }
                                      uint64_t v1050 = v1040[10];
                                      if (!v1050) {
                                        goto LABEL_1460;
                                      }
                                      v1051 = v1040 + 10;
                                      do
                                      {
                                        v1052 = (uint64_t *)v1050;
                                        v1053 = v1051;
                                        __int32 v1054 = *(_DWORD *)(v1050 + 28);
                                        v1055 = (uint64_t *)(v1050 + 8);
                                        if (v1054 >= v1025)
                                        {
                                          v1055 = v1052;
                                          v1051 = v1052;
                                        }
                                        uint64_t v1050 = *v1055;
                                      }
                                      while (v1050);
                                      if (v1051 != v1040 + 10
                                        && (v1054 >= v1025 ? (v1056 = v1052) : (v1056 = v1053),
                                            v1025 >= *((_DWORD *)v1056 + 7)))
                                      {
                                        v1040 = v1045;
                                      }
                                      else
                                      {
LABEL_1460:
                                        uint64_t v1059 = v1045[10];
                                        v1057 = v1045 + 10;
                                        uint64_t v1058 = v1059;
                                        if (!v1059) {
                                          goto LABEL_1508;
                                        }
                                        v1060 = v1057;
                                        do
                                        {
                                          v1061 = (uint64_t *)v1058;
                                          v1062 = v1060;
                                          __int32 v1063 = *(_DWORD *)(v1058 + 28);
                                          v1064 = (uint64_t *)(v1058 + 8);
                                          if (v1063 >= v1025)
                                          {
                                            v1064 = v1061;
                                            v1060 = v1061;
                                          }
                                          uint64_t v1058 = *v1064;
                                        }
                                        while (v1058);
                                        if (v1060 == v1057) {
                                          goto LABEL_1508;
                                        }
                                        v1065 = v1063 >= v1025 ? v1061 : v1062;
                                        if (v1025 < *((_DWORD *)v1065 + 7)) {
                                          goto LABEL_1508;
                                        }
                                      }
                                      uint64_t v1066 = v1040[11];
LABEL_1473:
                                      if (v1066 == 1)
                                      {
                                        sub_25B3F9000((uint64_t)v1474, v1026);
                                        v1509[0] = v1514[0];
                                        *(void **)((char *)v1509 + 7) = *(void **)((char *)v1514 + 7);
                                        unint64_t v1067 = *(void *)(a1 + 728);
                                        unint64_t v1068 = *(void *)(a1 + 736);
                                        if (v1067 >= v1068)
                                        {
                                          uint64_t v1070 = (uint64_t)(v1067 - (void)*v1421) >> 5;
                                          unint64_t v1071 = v1070 + 1;
                                          if ((unint64_t)(v1070 + 1) >> 59) {
LABEL_2088:
                                          }
                                            sub_25B3FBC4C();
                                          uint64_t v1072 = v1068 - (void)*v1421;
                                          if (v1072 >> 4 > v1071) {
                                            unint64_t v1071 = v1072 >> 4;
                                          }
                                          if ((unint64_t)v1072 >= 0x7FFFFFFFFFFFFFE0) {
                                            unint64_t v1073 = 0x7FFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1073 = v1071;
                                          }
                                          if (v1073) {
                                            unint64_t v1073 = (unint64_t)sub_25B3FBC9C(v1073);
                                          }
                                          else {
                                            uint64_t v1074 = 0;
                                          }
                                          unint64_t v1082 = v1073 + 32 * v1070;
                                          *(unsigned char *)unint64_t v1082 = v1022;
                                          *(void **)(v1082 + 1) = v1509[0];
                                          *(void **)(v1082 + 8) = *(void **)((char *)v1509 + 7);
                                          *(_DWORD *)(v1082 + 16) = v1026;
                                          *(_DWORD *)(v1082 + 20) = v1027;
                                          *(_DWORD *)(v1082 + 24) = v1028;
                                          *(_DWORD *)(v1082 + 28) = v1029;
                                          v1083 = *(char **)(a1 + 728);
                                          v1084 = *(char **)(a1 + 720);
                                          unint64_t v1085 = v1082;
                                          if (v1083 != v1084)
                                          {
                                            do
                                            {
                                              long long v1086 = *((_OWORD *)v1083 - 1);
                                              *(_OWORD *)(v1085 - 32) = *((_OWORD *)v1083 - 2);
                                              *(_OWORD *)(v1085 - 16) = v1086;
                                              v1085 -= 32;
                                              v1083 -= 32;
                                            }
                                            while (v1083 != v1084);
                                            v1083 = *v1421;
                                          }
                                          *(void *)(a1 + 720) = v1085;
                                          unint64_t v1069 = v1082 + 32;
                                          *(void *)(a1 + 728) = v1082 + 32;
                                          *(void *)(a1 + 736) = v1073 + 32 * v1074;
                                          if (v1083) {
                                            operator delete(v1083);
                                          }
                                        }
                                        else
                                        {
                                          *(unsigned char *)unint64_t v1067 = v1022;
                                          *(void **)(v1067 + 1) = v1509[0];
                                          *(void **)(v1067 + 8) = *(void **)((char *)v1509 + 7);
                                          *(_DWORD *)(v1067 + 16) = v1026;
                                          *(_DWORD *)(v1067 + 20) = v1027;
                                          *(_DWORD *)(v1067 + 24) = v1028;
                                          *(_DWORD *)(v1067 + 28) = v1029;
                                          unint64_t v1069 = v1067 + 32;
                                        }
                                        *(void *)(a1 + 728) = v1069;
                                      }
                                    }
                                    else if (v1014[15].i8[0] && !v1014[11].i8[0])
                                    {
                                      float v1030 = v1014[11].f32[1];
                                      if (v1030 >= (float)(180.0 - v1030)) {
                                        float v1030 = 180.0 - v1030;
                                      }
                                      if (v1030 < 65.0)
                                      {
                                        uint64_t v1031 = v1480[0];
                                        if (v1480[0])
                                        {
                                          v1032 = v1480;
                                          v1033 = (uint64_t *)v1480[0];
                                          do
                                          {
                                            v1034 = v1033;
                                            v1035 = v1032;
                                            __int32 v1036 = *((_DWORD *)v1033 + 8);
                                            if (v1036 >= v1028) {
                                              v1032 = v1033;
                                            }
                                            else {
                                              ++v1033;
                                            }
                                            v1033 = (uint64_t *)*v1033;
                                          }
                                          while (v1033);
                                          if (v1032 == v1480
                                            || (v1036 >= v1028 ? (v1037 = v1034) : (v1037 = v1035),
                                                *((_DWORD *)v1037 + 8) > v1028))
                                          {
                                            uint64_t v1038 = 0;
                                          }
                                          else
                                          {
                                            if (v1036 < v1028) {
                                              v1034 = v1035;
                                            }
                                            uint64_t v1038 = v1034[7];
                                          }
                                          v1075 = v1480;
                                          do
                                          {
                                            v1076 = (uint64_t *)v1031;
                                            v1077 = v1075;
                                            __int32 v1078 = *(_DWORD *)(v1031 + 32);
                                            v1079 = (uint64_t *)(v1031 + 8);
                                            if (v1078 >= v1029)
                                            {
                                              v1079 = v1076;
                                              v1075 = v1076;
                                            }
                                            uint64_t v1031 = *v1079;
                                          }
                                          while (v1031);
                                          if (v1075 != v1480)
                                          {
                                            v1080 = v1078 >= v1029 ? v1076 : v1077;
                                            if (*((_DWORD *)v1080 + 8) <= v1029)
                                            {
                                              v1081 = v1078 >= v1029 ? v1076 : v1077;
                                              if (v1038 == 1)
                                              {
                                                uint64_t v1066 = v1081[7];
                                                goto LABEL_1473;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_1508:
                                v1012 += 2;
                                if (v1012 != v1013) {
                                  continue;
                                }
                                break;
                              }
                              v1087 = v1486;
                              v1088 = v1487;
                              v1418 = (char **)(a1 + 744);
                              for (*(void *)(a1 + 752) = *(void *)(a1 + 744); v1087 != v1088; v1087 += 2)
                              {
                                v1089 = (float32x2_t *)sub_25B3F9CFC(v1488, *v1087, v1087[1]);
                                if (v1089
                                  && v1089[2].i32[0] < v1089[2].i32[1]
                                  && v1089[11].i8[0]
                                  && !(v1089[5].i32[1] | v1089[9].i32[1])
                                  && vabds_f32(90.0, v1089[11].f32[1]) < 30.0)
                                {
                                  v1090 = v1089 + 3;
                                  float32x2_t v1091 = vsub_f32(v1089[3], v1089[4]);
                                  int32x2_t v1092 = (int32x2_t)vmul_f32(v1091, v1091);
                                  float32x2_t v1093 = vsub_f32(v1089[7], v1089[8]);
                                  int32x2_t v1094 = (int32x2_t)vmul_f32(v1093, v1093);
                                  float32x2_t v1095 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v1092, v1094), (float32x2_t)vzip2_s32(v1092, v1094)));
                                  if (v1095.f32[0] >= v1095.f32[1]) {
                                    v1096 = v1089 + 3;
                                  }
                                  else {
                                    v1096 = v1089 + 7;
                                  }
                                  if (v1095.f32[0] < v1095.f32[1])
                                  {
                                    float v1097 = v1095.f32[1];
                                  }
                                  else
                                  {
                                    v1090 = v1089 + 7;
                                    float v1097 = v1095.f32[0];
                                  }
                                  if (v1095.f32[0] >= v1095.f32[1]) {
                                    v1095.f32[0] = v1095.f32[1];
                                  }
                                  long long v1098 = *(_OWORD *)v1096[2].f32;
                                  *(_OWORD *)v1514 = *(_OWORD *)v1096->f32;
                                  *(_OWORD *)&v1514[2] = v1098;
                                  *(_OWORD *)&v1514[5] = *(_OWORD *)v1090->f32;
                                  *(_OWORD *)&v1514[7] = *(_OWORD *)v1090[2].f32;
                                  *(float *)&v1514[4] = v1097;
                                  LODWORD(v1514[9]) = v1095.i32[0];
                                  if (v1097 > 0.45 && v1095.f32[0] < 0.3)
                                  {
                                    v1459 = v1514[3];
                                    sub_25B3FEC94((uint64_t)v1509, (uint64_t)&v1514[5], *(double *)&v1514[3]);
                                    v1099 = v1509[0];
                                    v1100 = v1509[1];
                                    if (v1509[0])
                                    {
                                      v1509[1] = v1509[0];
                                      operator delete(v1509[0]);
                                    }
                                    if (v1099 != v1100)
                                    {
                                      sub_25B3FEC94((uint64_t)v1509, (uint64_t)&v1514[5], *(double *)&v1459);
                                      int v1101 = *(_DWORD *)v1509[0];
                                      v1509[1] = v1509[0];
                                      operator delete(v1509[0]);
                                      int v1102 = v1459 == v1101 ? HIDWORD(v1459) : (int)v1459;
                                      int v1103 = LODWORD(v1514[8]) == v1101 ? HIDWORD(v1514[8]) : LODWORD(v1514[8]);
                                      unint64_t v1104 = v1480[0];
                                      if (!v1480[0]) {
                                        goto LABEL_1545;
                                      }
                                      v1105 = v1480;
                                      v1106 = (uint64_t *)v1480[0];
                                      do
                                      {
                                        v1107 = v1106;
                                        v1108 = v1105;
                                        int v1109 = *((_DWORD *)v1106 + 8);
                                        if (v1109 >= v1101) {
                                          v1105 = v1106;
                                        }
                                        else {
                                          ++v1106;
                                        }
                                        v1106 = (uint64_t *)*v1106;
                                      }
                                      while (v1106);
                                      if (v1105 != v1480
                                        && (v1109 >= v1101 ? (v1110 = v1107) : (v1110 = v1108),
                                            *((_DWORD *)v1110 + 8) <= v1101))
                                      {
                                        if (v1109 < v1101) {
                                          v1107 = v1108;
                                        }
                                        uint64_t v1111 = v1107[7];
                                      }
                                      else
                                      {
LABEL_1545:
                                        uint64_t v1111 = 0;
                                      }
                                      uint64_t v1112 = v1482[0];
                                      if (v1482[0])
                                      {
                                        v1113 = v1482;
                                        v1114 = (uint64_t *)v1482[0];
                                        do
                                        {
                                          v1115 = v1114;
                                          v1116 = v1113;
                                          int v1117 = *((_DWORD *)v1114 + 8);
                                          if (v1117 >= v1103) {
                                            v1113 = v1114;
                                          }
                                          else {
                                            ++v1114;
                                          }
                                          v1114 = (uint64_t *)*v1114;
                                        }
                                        while (v1114);
                                        if (v1113 != v1482)
                                        {
                                          if (v1117 < v1103) {
                                            v1115 = v1116;
                                          }
                                          if (v1103 >= *((_DWORD *)v1115 + 8))
                                          {
                                            v1118 = v1482;
                                            v1119 = (uint64_t *)v1482[0];
                                            do
                                            {
                                              v1120 = v1119;
                                              v1121 = v1118;
                                              int v1122 = *((_DWORD *)v1119 + 8);
                                              if (v1122 >= v1103) {
                                                v1118 = v1119;
                                              }
                                              else {
                                                ++v1119;
                                              }
                                              v1119 = (uint64_t *)*v1119;
                                            }
                                            while (v1119);
                                            if (v1118 == v1482) {
                                              goto LABEL_1570;
                                            }
                                            if (v1122 < v1103) {
                                              v1120 = v1121;
                                            }
                                            if (v1103 < *((_DWORD *)v1120 + 8)) {
LABEL_1570:
                                            }
                                              v1118 = v1482;
                                            if (v1111 == 2 && v1118[11] == 1)
                                            {
                                              if (v1480[0])
                                              {
                                                v1123 = v1480;
                                                v1124 = (uint64_t *)v1480[0];
                                                do
                                                {
                                                  v1125 = v1124;
                                                  v1126 = v1123;
                                                  int v1127 = *((_DWORD *)v1124 + 8);
                                                  if (v1127 >= v1101) {
                                                    v1123 = v1124;
                                                  }
                                                  else {
                                                    ++v1124;
                                                  }
                                                  v1124 = (uint64_t *)*v1124;
                                                }
                                                while (v1124);
                                                if (v1123 == v1480
                                                  || (v1127 >= v1101 ? (v1128 = v1125) : (v1128 = v1126),
                                                      *((_DWORD *)v1128 + 8) > v1101))
                                                {
                                                  uint64_t v1129 = 0;
                                                }
                                                else
                                                {
                                                  if (v1127 < v1101) {
                                                    v1125 = v1126;
                                                  }
                                                  uint64_t v1129 = v1125[7];
                                                }
                                                v1130 = v1480;
                                                do
                                                {
                                                  v1131 = (unint64_t *)v1104;
                                                  v1132 = v1130;
                                                  int v1133 = *(_DWORD *)(v1104 + 32);
                                                  v1134 = (unint64_t *)(v1104 + 8);
                                                  if (v1133 >= v1102)
                                                  {
                                                    v1134 = v1131;
                                                    v1130 = v1131;
                                                  }
                                                  unint64_t v1104 = *v1134;
                                                }
                                                while (v1104);
                                                if (v1130 == v1480
                                                  || (v1133 >= v1102 ? (v1135 = v1131) : (v1135 = v1132),
                                                      *((_DWORD *)v1135 + 8) > v1102))
                                                {
                                                  unint64_t v1104 = 0;
                                                }
                                                else
                                                {
                                                  v1136 = v1133 >= v1102 ? v1131 : v1132;
                                                  unint64_t v1104 = v1136[7];
                                                }
                                              }
                                              else
                                              {
                                                uint64_t v1129 = 0;
                                              }
                                              v1137 = v1482;
                                              v1138 = (uint64_t *)v1482[0];
                                              do
                                              {
                                                v1139 = v1138;
                                                v1140 = v1137;
                                                int v1141 = *((_DWORD *)v1138 + 8);
                                                if (v1141 >= v1102) {
                                                  v1137 = v1138;
                                                }
                                                else {
                                                  ++v1138;
                                                }
                                                v1138 = (uint64_t *)*v1138;
                                              }
                                              while (v1138);
                                              if (v1137 != v1482)
                                              {
                                                if (v1141 < v1102) {
                                                  v1139 = v1140;
                                                }
                                                if (v1102 >= *((_DWORD *)v1139 + 8) && v1129 == 2)
                                                {
                                                  if (v1104 > 1) {
                                                    goto LABEL_2095;
                                                  }
                                                  v1143 = v1482;
                                                  v1144 = (uint64_t *)v1482[0];
                                                  do
                                                  {
                                                    v1145 = v1144;
                                                    v1146 = v1143;
                                                    int v1147 = *((_DWORD *)v1144 + 8);
                                                    if (v1147 >= v1102) {
                                                      v1143 = v1144;
                                                    }
                                                    else {
                                                      ++v1144;
                                                    }
                                                    v1144 = (uint64_t *)*v1144;
                                                  }
                                                  while (v1144);
                                                  if (v1143 == v1482) {
                                                    goto LABEL_1626;
                                                  }
                                                  if (v1147 < v1102) {
                                                    v1145 = v1146;
                                                  }
                                                  if (v1102 < *((_DWORD *)v1145 + 8)) {
LABEL_1626:
                                                  }
                                                    v1143 = v1482;
                                                  if (v1143[11] >= 2uLL)
                                                  {
LABEL_2095:
                                                    v1148 = v1482;
                                                    v1149 = (uint64_t *)v1482[0];
                                                    do
                                                    {
                                                      v1150 = v1149;
                                                      v1151 = v1148;
                                                      int v1152 = *((_DWORD *)v1149 + 8);
                                                      if (v1152 >= v1102) {
                                                        v1148 = v1149;
                                                      }
                                                      else {
                                                        ++v1149;
                                                      }
                                                      v1149 = (uint64_t *)*v1149;
                                                    }
                                                    while (v1149);
                                                    if (v1148 != v1482)
                                                    {
                                                      if (v1152 < v1102) {
                                                        v1150 = v1151;
                                                      }
                                                      if (v1102 >= *((_DWORD *)v1150 + 8))
                                                      {
                                                        v1153 = v1482;
                                                        do
                                                        {
                                                          v1154 = (uint64_t *)v1112;
                                                          v1155 = v1153;
                                                          int v1156 = *(_DWORD *)(v1112 + 32);
                                                          v1157 = (uint64_t *)(v1112 + 8);
                                                          if (v1156 >= v1102)
                                                          {
                                                            v1157 = v1154;
                                                            v1153 = v1154;
                                                          }
                                                          uint64_t v1112 = *v1157;
                                                        }
                                                        while (v1112);
                                                        if (v1153 == v1482
                                                          || (v1156 >= v1102 ? (v1158 = v1154) : (v1158 = v1155),
                                                              v1102 < *((_DWORD *)v1158 + 8)))
                                                        {
                                                          v1153 = v1482;
                                                        }
                                                        v1159 = (uint64_t *)v1153[9];
                                                        if (v1159 != v1153 + 10)
                                                        {
                                                          while (1)
                                                          {
                                                            __int32 v1160 = *((_DWORD *)v1159 + 7);
                                                            if (v1160 != LODWORD(v1514[2]) && v1485[0] != 0)
                                                            {
                                                              v1162 = v1485;
                                                              v1163 = (uint64_t *)v1485[0];
                                                              do
                                                              {
                                                                v1164 = v1163;
                                                                v1165 = v1162;
                                                                int v1166 = *((_DWORD *)v1163 + 8);
                                                                if (v1166 >= v1160) {
                                                                  v1162 = v1163;
                                                                }
                                                                else {
                                                                  ++v1163;
                                                                }
                                                                v1163 = (uint64_t *)*v1163;
                                                              }
                                                              while (v1163);
                                                              if (v1162 != v1485)
                                                              {
                                                                if (v1166 < v1160) {
                                                                  v1164 = v1165;
                                                                }
                                                                if (v1160 >= *((_DWORD *)v1164 + 8))
                                                                {
                                                                  v1167 = (float32x2_t *)v1485;
                                                                  v1168 = (float32x2_t *)v1485[0];
                                                                  do
                                                                  {
                                                                    v1169 = v1168;
                                                                    v1170 = v1167;
                                                                    __int32 v1171 = v1168[4].i32[0];
                                                                    if (v1171 >= v1160) {
                                                                      v1167 = v1168;
                                                                    }
                                                                    else {
                                                                      ++v1168;
                                                                    }
                                                                    v1168 = (float32x2_t *)*v1168;
                                                                  }
                                                                  while (v1168);
                                                                  if (v1167 == (float32x2_t *)v1485) {
                                                                    goto LABEL_1670;
                                                                  }
                                                                  if (v1171 < v1160) {
                                                                    v1169 = v1170;
                                                                  }
                                                                  if (v1160 < v1169[4].i32[0]) {
LABEL_1670:
                                                                  }
                                                                    v1167 = (float32x2_t *)v1485;
                                                                  float32x2_t v1172 = vsub_f32(v1167[5], v1167[6]);
                                                                  if (sqrtf(vaddv_f32(vmul_f32(v1172, v1172))) > 1.0) {
                                                                    break;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            v1173 = (uint64_t *)v1159[1];
                                                            if (v1173)
                                                            {
                                                              do
                                                              {
                                                                v1174 = v1173;
                                                                v1173 = (uint64_t *)*v1173;
                                                              }
                                                              while (v1173);
                                                            }
                                                            else
                                                            {
                                                              do
                                                              {
                                                                v1174 = (uint64_t *)v1159[2];
                                                                BOOL v410 = *v1174 == (void)v1159;
                                                                v1159 = v1174;
                                                              }
                                                              while (!v410);
                                                            }
                                                            v1159 = v1174;
                                                            if (v1174 == v1153 + 10) {
                                                              goto LABEL_1556;
                                                            }
                                                          }
                                                          sub_25B3F9000((uint64_t)v1474, (int)v1514[7]);
                                                          char v1175 = (char)v1514[5];
                                                          *(_OWORD *)v1509 = *(_OWORD *)((char *)&v1514[5] + 1);
                                                          *(_OWORD *)((char *)&v1509[1] + 7) = *(_OWORD *)&v1514[7];
                                                          unint64_t v1176 = *(void *)(a1 + 752);
                                                          unint64_t v1177 = *(void *)(a1 + 760);
                                                          if (v1176 >= v1177)
                                                          {
                                                            uint64_t v1179 = (uint64_t)(v1176 - (void)*v1418) >> 5;
                                                            unint64_t v1180 = v1179 + 1;
                                                            if ((unint64_t)(v1179 + 1) >> 59) {
                                                              goto LABEL_2088;
                                                            }
                                                            uint64_t v1181 = v1177 - (void)*v1418;
                                                            if (v1181 >> 4 > v1180) {
                                                              unint64_t v1180 = v1181 >> 4;
                                                            }
                                                            if ((unint64_t)v1181 >= 0x7FFFFFFFFFFFFFE0) {
                                                              unint64_t v1182 = 0x7FFFFFFFFFFFFFFLL;
                                                            }
                                                            else {
                                                              unint64_t v1182 = v1180;
                                                            }
                                                            if (v1182) {
                                                              unint64_t v1182 = (unint64_t)sub_25B3FBC9C(v1182);
                                                            }
                                                            else {
                                                              uint64_t v1183 = 0;
                                                            }
                                                            unint64_t v1184 = v1182 + 32 * v1179;
                                                            *(unsigned char *)unint64_t v1184 = v1175;
                                                            *(_OWORD *)(v1184 + 1) = *(_OWORD *)v1509;
                                                            *(_OWORD *)(v1184 + 16) = *(_OWORD *)((char *)&v1509[1] + 7);
                                                            v1185 = *(char **)(a1 + 752);
                                                            v1186 = *(char **)(a1 + 744);
                                                            unint64_t v1187 = v1184;
                                                            if (v1185 != v1186)
                                                            {
                                                              do
                                                              {
                                                                long long v1188 = *((_OWORD *)v1185 - 1);
                                                                *(_OWORD *)(v1187 - 32) = *((_OWORD *)v1185 - 2);
                                                                *(_OWORD *)(v1187 - 16) = v1188;
                                                                v1187 -= 32;
                                                                v1185 -= 32;
                                                              }
                                                              while (v1185 != v1186);
                                                              v1185 = *v1418;
                                                            }
                                                            *(void *)(a1 + 744) = v1187;
                                                            unint64_t v1178 = v1184 + 32;
                                                            *(void *)(a1 + 752) = v1184 + 32;
                                                            *(void *)(a1 + 760) = v1182 + 32 * v1183;
                                                            if (v1185) {
                                                              operator delete(v1185);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *(unsigned char *)unint64_t v1176 = v1514[5];
                                                            *(_OWORD *)(v1176 + 1) = *(_OWORD *)v1509;
                                                            *(_OWORD *)(v1176 + 16) = *(_OWORD *)((char *)&v1509[1] + 7);
                                                            unint64_t v1178 = v1176 + 32;
                                                          }
                                                          *(void *)(a1 + 752) = v1178;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_1556:
                                ;
                              }
LABEL_1697:
                              id v1189 = *(id *)a4;
                              uint64_t v1190 = *(void *)(a4 + 8);
                              id v1191 = *(id *)(a4 + 16);
                              if (v1189 == v1191)
                              {
                                BOOL v1192 = v1190 == *(void *)(a4 + 24);

                                if (!v1192) {
                                  goto LABEL_1700;
                                }
                              }
                              else
                              {

LABEL_1700:
                                id v1195 = *(id *)a4;
                                uint64_t v1196 = *(void *)(a4 + 8);
                                id v1197 = *(id *)(a4 + 16);
                                uint64_t v1198 = *(void *)(a4 + 24);
                                *(void *)(a1 + 776) = *(void *)(a1 + 768);
                                id v1199 = v1195;
                                id v1200 = v1197;
                                id v1201 = v1199;
                                id v1202 = v1200;
                                id v1203 = v1201;
                                id v1204 = v1202;
                                id v1205 = v1203;
                                id v1206 = v1204;
                                id v1207 = v1205;
                                id v1208 = v1206;
                                id v1209 = v1207;
                                id v1210 = v1208;

                                v1211 = (long long **)(a1 + 768);
                                id v1460 = v1209;
                                id v1447 = v1210;
                                while (v1460 != v1447 || v1196 != v1198)
                                {
                                  v1213 = objc_msgSend_objectAtIndex_(v1460, v1212, v1196);
                                  v1216 = objc_msgSend_boxesDict(v1213, v1214, v1215);
                                  v1218 = objc_msgSend_objectForKey_(v1216, v1217, @"rawdetection");

                                  if (v1218)
                                  {
                                    long long v1516 = 0u;
                                    long long v1517 = 0u;
                                    long long v1515 = 0u;
                                    memset(v1514, 0, sizeof(v1514));
                                    sub_25B445344((uint64_t)v1514, v1218);
                                    long long v1510 = *(_OWORD *)&v1514[8];
                                    long long v1511 = v1515;
                                    long long v1512 = v1516;
                                    long long v1513 = v1517;
                                    *(_OWORD *)v1509 = *(_OWORD *)v1514;
                                    *(_OWORD *)&v1509[2] = *(_OWORD *)&v1514[2];
                                    *(_OWORD *)&v1509[4] = *(_OWORD *)&v1514[4];
                                    *(_OWORD *)&v1509[6] = *(_OWORD *)&v1514[6];
                                  }
                                  else
                                  {
                                    long long v1512 = 0u;
                                    long long v1513 = 0u;
                                    long long v1510 = 0u;
                                    long long v1511 = 0u;
                                    memset(v1509, 0, sizeof(v1509));
                                  }

                                  v1219 = *(long long **)(a1 + 776);
                                  unint64_t v1220 = *(void *)(a1 + 784);
                                  if ((unint64_t)v1219 >= v1220)
                                  {
                                    v1222 = *v1211;
                                    uint64_t v1223 = ((char *)v1219 - (char *)*v1211) >> 7;
                                    unint64_t v1224 = v1223 + 1;
                                    if ((unint64_t)(v1223 + 1) >> 57) {
                                      sub_25B3FBC4C();
                                    }
                                    uint64_t v1225 = v1220 - (void)v1222;
                                    if (v1225 >> 6 > v1224) {
                                      unint64_t v1224 = v1225 >> 6;
                                    }
                                    if ((unint64_t)v1225 >= 0x7FFFFFFFFFFFFF80) {
                                      unint64_t v1226 = 0x1FFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v1226 = v1224;
                                    }
                                    if (v1226)
                                    {
                                      if (v1226 >> 57) {
                                        sub_25B3FA70C();
                                      }
                                      v1227 = (char *)operator new(v1226 << 7);
                                    }
                                    else
                                    {
                                      v1227 = 0;
                                    }
                                    long long v1228 = v1511;
                                    v1229 = &v1227[128 * v1223];
                                    *((_OWORD *)v1229 + 4) = v1510;
                                    *((_OWORD *)v1229 + 5) = v1228;
                                    long long v1230 = v1513;
                                    *((_OWORD *)v1229 + 6) = v1512;
                                    *((_OWORD *)v1229 + 7) = v1230;
                                    long long v1231 = *(_OWORD *)&v1509[2];
                                    *(_OWORD *)v1229 = *(_OWORD *)v1509;
                                    *((_OWORD *)v1229 + 1) = v1231;
                                    long long v1232 = *(_OWORD *)&v1509[6];
                                    *((_OWORD *)v1229 + 2) = *(_OWORD *)&v1509[4];
                                    *((_OWORD *)v1229 + 3) = v1232;
                                    v1233 = v1229;
                                    if (v1219 != v1222)
                                    {
                                      do
                                      {
                                        long long v1234 = *(v1219 - 8);
                                        long long v1235 = *(v1219 - 7);
                                        long long v1236 = *(v1219 - 5);
                                        *((_OWORD *)v1233 - 6) = *(v1219 - 6);
                                        *((_OWORD *)v1233 - 5) = v1236;
                                        *((_OWORD *)v1233 - 8) = v1234;
                                        *((_OWORD *)v1233 - 7) = v1235;
                                        long long v1237 = *(v1219 - 4);
                                        long long v1238 = *(v1219 - 3);
                                        long long v1239 = *(v1219 - 1);
                                        *((_OWORD *)v1233 - 2) = *(v1219 - 2);
                                        *((_OWORD *)v1233 - 1) = v1239;
                                        *((_OWORD *)v1233 - 4) = v1237;
                                        *((_OWORD *)v1233 - 3) = v1238;
                                        v1233 -= 128;
                                        v1219 -= 8;
                                      }
                                      while (v1219 != v1222);
                                      v1219 = *v1211;
                                    }
                                    *(void *)(a1 + 768) = v1233;
                                    v1221 = v1229 + 128;
                                    *(void *)(a1 + 776) = v1229 + 128;
                                    *(void *)(a1 + 784) = &v1227[128 * v1226];
                                    if (v1219) {
                                      operator delete(v1219);
                                    }
                                  }
                                  else
                                  {
                                    v1219[4] = v1510;
                                    v1219[5] = v1511;
                                    v1219[6] = v1512;
                                    v1219[7] = v1513;
                                    long long *v1219 = *(_OWORD *)v1509;
                                    v1219[1] = *(_OWORD *)&v1509[2];
                                    v1219[2] = *(_OWORD *)&v1509[4];
                                    v1219[3] = *(_OWORD *)&v1509[6];
                                    v1221 = v1219 + 8;
                                  }
                                  *(void *)(a1 + 776) = v1221;
                                  ++v1196;
                                }
                                id v1240 = v1460;

                                id v1241 = v1240;
                                id v1242 = v1241;

                                v1243 = v1481;
                                v1417 = v1242;
                                if (v1481 == v1482)
                                {
                                  v1285 = 0;
                                  v1286 = 0;
                                  v1444 = 0;
                                }
                                else
                                {
                                  v1244 = (uint64_t *)v1480[0];
                                  float32x2_t v1245 = v1474[0];
                                  v1246 = v1481;
                                  do
                                  {
                                    uint64_t v1247 = *((int *)v1246 + 8);
                                    if (!v1244) {
                                      goto LABEL_1737;
                                    }
                                    v1248 = v1480;
                                    v1249 = v1244;
                                    do
                                    {
                                      v1250 = v1249;
                                      v1251 = v1248;
                                      int v1252 = *((_DWORD *)v1249 + 8);
                                      if (v1252 >= (int)v1247) {
                                        v1248 = v1249;
                                      }
                                      else {
                                        ++v1249;
                                      }
                                      v1249 = (uint64_t *)*v1249;
                                    }
                                    while (v1249);
                                    if (v1248 != v1480
                                      && (v1252 >= (int)v1247 ? (v1253 = v1250) : (v1253 = v1251),
                                          *((_DWORD *)v1253 + 8) <= (int)v1247))
                                    {
                                      if (v1252 < (int)v1247) {
                                        v1250 = v1251;
                                      }
                                      unint64_t v1254 = v1250[7];
                                    }
                                    else
                                    {
LABEL_1737:
                                      unint64_t v1254 = 0;
                                    }
                                    if (*((unsigned char *)v1246 + 96)) {
                                      BOOL v1255 = 1;
                                    }
                                    else {
                                      BOOL v1255 = v1254 > 1;
                                    }
                                    char v1256 = v1255;
                                    *((unsigned char *)v1246 + 96) = v1256;
                                    if (!v1255)
                                    {
                                      v1257 = v1483;
                                      if (v1483)
                                      {
                                        while (1)
                                        {
                                          int v1258 = *((_DWORD *)v1257 + 5);
                                          uint64_t v1259 = *((int *)v1257 + 4);
                                          if (v1247 != v1259 && v1247 != v1258)
                                          {
                                            float32x2_t v1261 = *(float32x2_t *)(*(void *)&v1245 + 8 * v1259);
                                            float32x2_t v1262 = *(float32x2_t *)(*(void *)&v1245 + 8 * v1258);
                                            float32x2_t v1263 = *(float32x2_t *)(*(void *)&v1245 + 8 * v1247);
                                            float32x2_t v1264 = vsub_f32(v1262, v1261);
                                            float v1265 = vaddv_f32(vmul_f32(vsub_f32(v1263, v1261), v1264));
                                            float v1266 = vaddv_f32(vmul_f32(v1264, v1264));
                                            if (v1266 < 0.000001) {
                                              float v1266 = 0.000001;
                                            }
                                            float32x2_t v1267 = vmla_n_f32(v1261, v1264, v1265 / v1266);
                                            if (vaddv_f32(vmul_f32(vsub_f32(v1267, v1261), vsub_f32(v1267, v1262))) <= 0.0)
                                            {
                                              float32x2_t v1268 = vsub_f32(v1263, v1267);
                                              if (sqrtf(vaddv_f32(vmul_f32(v1268, v1268))) < 0.15) {
                                                break;
                                              }
                                            }
                                          }
                                          v1257 = (uint64_t *)*v1257;
                                          if (!v1257) {
                                            goto LABEL_1760;
                                          }
                                        }
                                        *((unsigned char *)v1246 + 96) = 1;
                                      }
                                    }
LABEL_1760:
                                    v1269 = (uint64_t *)v1246[1];
                                    if (v1269)
                                    {
                                      do
                                      {
                                        v1270 = v1269;
                                        v1269 = (uint64_t *)*v1269;
                                      }
                                      while (v1269);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v1270 = (uint64_t *)v1246[2];
                                        BOOL v410 = *v1270 == (void)v1246;
                                        v1246 = v1270;
                                      }
                                      while (!v410);
                                    }
                                    v1246 = v1270;
                                  }
                                  while (v1270 != v1482);
                                  unint64_t v1271 = 0;
                                  v1272 = 0;
                                  v1444 = 0;
                                  do
                                  {
                                    if (!*((unsigned char *)v1243 + 96))
                                    {
                                      if ((unint64_t)v1272 >= v1271)
                                      {
                                        uint64_t v1273 = (v1272 - v1444) >> 2;
                                        unint64_t v1274 = v1273 + 1;
                                        if ((unint64_t)(v1273 + 1) >> 62) {
                                          sub_25B3FBC4C();
                                        }
                                        if ((uint64_t)(v1271 - (void)v1444) >> 1 > v1274) {
                                          unint64_t v1274 = (uint64_t)(v1271 - (void)v1444) >> 1;
                                        }
                                        if (v1271 - (unint64_t)v1444 >= 0x7FFFFFFFFFFFFFFCLL) {
                                          unint64_t v1275 = 0x3FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v1275 = v1274;
                                        }
                                        if (v1275) {
                                          unint64_t v1275 = (unint64_t)sub_25B3FBC64(v1275);
                                        }
                                        else {
                                          uint64_t v1276 = 0;
                                        }
                                        v1277 = (char *)(v1275 + 4 * v1273);
                                        *(_DWORD *)v1277 = *((_DWORD *)v1243 + 8);
                                        v1278 = v1277 + 4;
                                        if (v1272 == v1444)
                                        {
                                          v1279 = v1444;
                                        }
                                        else
                                        {
                                          v1279 = v1444;
                                          do
                                          {
                                            int v1280 = *((_DWORD *)v1272 - 1);
                                            v1272 -= 4;
                                            *((_DWORD *)v1277 - 1) = v1280;
                                            v1277 -= 4;
                                          }
                                          while (v1272 != v1444);
                                        }
                                        unint64_t v1271 = v1275 + 4 * v1276;
                                        if (v1279) {
                                          operator delete(v1279);
                                        }
                                        v1272 = v1278;
                                        v1444 = v1277;
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1272 = *((_DWORD *)v1243 + 8);
                                        v1272 += 4;
                                      }
                                    }
                                    v1281 = (uint64_t *)v1243[1];
                                    if (v1281)
                                    {
                                      do
                                      {
                                        v1282 = v1281;
                                        v1281 = (uint64_t *)*v1281;
                                      }
                                      while (v1281);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v1282 = (uint64_t *)v1243[2];
                                        BOOL v410 = *v1282 == (void)v1243;
                                        v1243 = v1282;
                                      }
                                      while (!v410);
                                    }
                                    v1243 = v1282;
                                  }
                                  while (v1282 != v1482);
                                  v1283 = (int *)v1444;
                                  if (v1444 == v1272)
                                  {
                                    v1285 = 0;
                                    v1286 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v1284 = 0;
                                    v1285 = 0;
                                    v1286 = 0;
                                    do
                                    {
                                      v1287 = v1483;
                                      v1452 = v1283;
                                      if (v1483)
                                      {
                                        int v1288 = *v1283;
                                        uint64_t v1463 = *v1283;
                                        do
                                        {
                                          int v1289 = *((_DWORD *)v1287 + 5);
                                          if (v1288 == *((_DWORD *)v1287 + 4)
                                            || (BOOL v410 = v1288 == v1289, v1289 = *((_DWORD *)v1287 + 4), v410))
                                          {
                                            *(void *)&v1507[0] = *(void *)(*(void *)v1474 + 8 * v1463);
                                            int32x2_t v1468 = (int32x2_t)vsub_f32(*(float32x2_t *)&v1507[0], *(float32x2_t *)(*(void *)v1474 + 8 * v1289));
                                            *(int32x2_t *)&long long v1492 = v1468;
                                            sub_25B4B729C((float32x2_t *)v1514, v1211, (float32x2_t *)v1507, (uint64_t *)&v1492, (uint64_t *)v1474, v1288);
                                            if (LOBYTE(v1514[2])
                                              && (v1290 = v1514[3],
                                                  (sub_25B4B75E4(v1288, (uint64_t)v1514[3], (uint64_t)v1474) & 1) == 0))
                                            {
                                              if ((unint64_t)v1285 >= v1284)
                                              {
                                                uint64_t v1296 = ((char *)v1285 - (char *)v1286) >> 5;
                                                unint64_t v1297 = v1296 + 1;
                                                if ((unint64_t)(v1296 + 1) >> 59) {
                                                  sub_25B3FBC4C();
                                                }
                                                if ((uint64_t)(v1284 - (void)v1286) >> 4 > v1297) {
                                                  unint64_t v1297 = (uint64_t)(v1284 - (void)v1286) >> 4;
                                                }
                                                if (v1284 - (unint64_t)v1286 >= 0x7FFFFFFFFFFFFFE0) {
                                                  unint64_t v1298 = 0x7FFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v1298 = v1297;
                                                }
                                                if (v1298) {
                                                  unint64_t v1298 = (unint64_t)sub_25B3FBC9C(v1298);
                                                }
                                                else {
                                                  uint64_t v1299 = 0;
                                                }
                                                unint64_t v1308 = v1298 + 32 * v1296;
                                                *(_OWORD *)unint64_t v1308 = *(_OWORD *)v1514;
                                                *(void *)(v1308 + 16) = v1290;
                                                *(_DWORD *)(v1308 + 24) = v1288;
                                                if (v1285 == v1286)
                                                {
                                                  v1286 = (float32x2_t *)(v1298 + 32 * v1296);
                                                }
                                                else
                                                {
                                                  v1309 = (char *)(v1298 + 32 * v1296);
                                                  do
                                                  {
                                                    long long v1310 = *(_OWORD *)v1285[-2].f32;
                                                    *((_OWORD *)v1309 - 2) = *(_OWORD *)v1285[-4].f32;
                                                    *((_OWORD *)v1309 - 1) = v1310;
                                                    v1309 -= 32;
                                                    v1285 -= 4;
                                                  }
                                                  while (v1285 != v1286);
                                                  v1285 = v1286;
                                                  v1286 = (float32x2_t *)v1309;
                                                }
                                                unint64_t v1284 = v1298 + 32 * v1299;
                                                v1291 = (float32x2_t *)(v1308 + 32);
                                                if (v1285)
                                                {
                                                  operator delete(v1285);
                                                  int32x2_t v1468 = (int32x2_t)v1492;
                                                }
                                              }
                                              else
                                              {
                                                *(_OWORD *)v1285->f32 = *(_OWORD *)v1514;
                                                v1285[2] = (float32x2_t)v1514[3];
                                                v1285[3].i32[0] = v1288;
                                                v1291 = v1285 + 4;
                                              }
                                            }
                                            else
                                            {
                                              v1291 = v1285;
                                            }
                                            v1292.i32[0] = vdup_lane_s32(v1468, 1).u32[0];
                                            v1292.f32[1] = -*(float *)v1468.i32;
                                            float32x2_t v1469 = v1292;
                                            *(float32x2_t *)&long long v1490 = v1292;
                                            sub_25B4B729C((float32x2_t *)v1509, v1211, (float32x2_t *)v1507, (uint64_t *)&v1490, (uint64_t *)v1474, v1288);
                                            LOBYTE(v1514[2]) = v1509[2];
                                            *(_OWORD *)v1514 = *(_OWORD *)v1509;
                                            v1293 = v1509[3];
                                            v1514[3] = v1509[3];
                                            if (LOBYTE(v1509[2])
                                              && (sub_25B4B75E4(v1288, (uint64_t)v1509[3], (uint64_t)v1474) & 1) == 0)
                                            {
                                              if ((unint64_t)v1291 >= v1284)
                                              {
                                                uint64_t v1300 = ((char *)v1291 - (char *)v1286) >> 5;
                                                unint64_t v1301 = v1300 + 1;
                                                if ((unint64_t)(v1300 + 1) >> 59) {
                                                  goto LABEL_2063;
                                                }
                                                if ((uint64_t)(v1284 - (void)v1286) >> 4 > v1301) {
                                                  unint64_t v1301 = (uint64_t)(v1284 - (void)v1286) >> 4;
                                                }
                                                if (v1284 - (unint64_t)v1286 >= 0x7FFFFFFFFFFFFFE0) {
                                                  unint64_t v1302 = 0x7FFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v1302 = v1301;
                                                }
                                                if (v1302) {
                                                  unint64_t v1302 = (unint64_t)sub_25B3FBC9C(v1302);
                                                }
                                                else {
                                                  uint64_t v1303 = 0;
                                                }
                                                unint64_t v1311 = v1302 + 32 * v1300;
                                                *(_OWORD *)unint64_t v1311 = *(_OWORD *)v1514;
                                                *(void *)(v1311 + 16) = v1293;
                                                *(_DWORD *)(v1311 + 24) = v1288;
                                                if (v1291 == v1286)
                                                {
                                                  v1286 = (float32x2_t *)(v1302 + 32 * v1300);
                                                }
                                                else
                                                {
                                                  v1312 = (char *)(v1302 + 32 * v1300);
                                                  do
                                                  {
                                                    long long v1313 = *(_OWORD *)v1291[-2].f32;
                                                    *((_OWORD *)v1312 - 2) = *(_OWORD *)v1291[-4].f32;
                                                    *((_OWORD *)v1312 - 1) = v1313;
                                                    v1312 -= 32;
                                                    v1291 -= 4;
                                                  }
                                                  while (v1291 != v1286);
                                                  v1291 = v1286;
                                                  v1286 = (float32x2_t *)v1312;
                                                }
                                                unint64_t v1284 = v1302 + 32 * v1303;
                                                v1294 = (float32x2_t *)(v1311 + 32);
                                                if (v1291)
                                                {
                                                  operator delete(v1291);
                                                  float32x2_t v1469 = (float32x2_t)v1490;
                                                }
                                              }
                                              else
                                              {
                                                *(_OWORD *)v1291->f32 = *(_OWORD *)v1514;
                                                v1291[2] = (float32x2_t)v1514[3];
                                                v1291[3].i32[0] = v1288;
                                                v1294 = v1291 + 4;
                                              }
                                            }
                                            else
                                            {
                                              v1294 = v1291;
                                            }
                                            *(float32x2_t *)&long long v1490 = vneg_f32(v1469);
                                            sub_25B4B729C((float32x2_t *)v1509, v1211, (float32x2_t *)v1507, (uint64_t *)&v1490, (uint64_t *)v1474, v1288);
                                            LOBYTE(v1514[2]) = v1509[2];
                                            *(_OWORD *)v1514 = *(_OWORD *)v1509;
                                            v1295 = v1509[3];
                                            v1514[3] = v1509[3];
                                            if (LOBYTE(v1509[2])
                                              && (sub_25B4B75E4(v1288, (uint64_t)v1509[3], (uint64_t)v1474) & 1) == 0)
                                            {
                                              if ((unint64_t)v1294 >= v1284)
                                              {
                                                uint64_t v1304 = ((char *)v1294 - (char *)v1286) >> 5;
                                                unint64_t v1305 = v1304 + 1;
                                                if ((unint64_t)(v1304 + 1) >> 59) {
LABEL_2063:
                                                }
                                                  sub_25B3FBC4C();
                                                if ((uint64_t)(v1284 - (void)v1286) >> 4 > v1305) {
                                                  unint64_t v1305 = (uint64_t)(v1284 - (void)v1286) >> 4;
                                                }
                                                if (v1284 - (unint64_t)v1286 >= 0x7FFFFFFFFFFFFFE0) {
                                                  unint64_t v1306 = 0x7FFFFFFFFFFFFFFLL;
                                                }
                                                else {
                                                  unint64_t v1306 = v1305;
                                                }
                                                if (v1306) {
                                                  unint64_t v1306 = (unint64_t)sub_25B3FBC9C(v1306);
                                                }
                                                else {
                                                  uint64_t v1307 = 0;
                                                }
                                                unint64_t v1314 = v1306 + 32 * v1304;
                                                *(_OWORD *)unint64_t v1314 = *(_OWORD *)v1514;
                                                *(void *)(v1314 + 16) = v1295;
                                                *(_DWORD *)(v1314 + 24) = v1288;
                                                if (v1294 == v1286)
                                                {
                                                  v1286 = (float32x2_t *)(v1306 + 32 * v1304);
                                                }
                                                else
                                                {
                                                  v1315 = (char *)(v1306 + 32 * v1304);
                                                  do
                                                  {
                                                    long long v1316 = *(_OWORD *)v1294[-2].f32;
                                                    *((_OWORD *)v1315 - 2) = *(_OWORD *)v1294[-4].f32;
                                                    *((_OWORD *)v1315 - 1) = v1316;
                                                    v1315 -= 32;
                                                    v1294 -= 4;
                                                  }
                                                  while (v1294 != v1286);
                                                  v1294 = v1286;
                                                  v1286 = (float32x2_t *)v1315;
                                                }
                                                unint64_t v1284 = v1306 + 32 * v1307;
                                                v1285 = (float32x2_t *)(v1314 + 32);
                                                if (v1294) {
                                                  operator delete(v1294);
                                                }
                                              }
                                              else
                                              {
                                                *(_OWORD *)v1294->f32 = *(_OWORD *)v1514;
                                                v1294[2] = (float32x2_t)v1514[3];
                                                v1294[3].i32[0] = v1288;
                                                v1285 = v1294 + 4;
                                              }
                                            }
                                            else
                                            {
                                              v1285 = v1294;
                                            }
                                          }
                                          v1287 = (uint64_t *)*v1287;
                                        }
                                        while (v1287);
                                      }
                                      v1283 = v1452 + 1;
                                    }
                                    while (v1452 + 1 != (int *)v1272);
                                  }
                                }
                                v1317 = (uint64_t **)v1483;
                                if (v1483)
                                {
                                  unint64_t v1318 = 0;
                                  v1319 = 0;
                                  v1320 = 0;
                                  do
                                  {
                                    float32x2_t v1321 = v1474[0];
                                    uint64_t v1322 = *((int *)v1317 + 4);
                                    uint64_t v1323 = *((int *)v1317 + 5);
                                    if ((unint64_t)v1319 >= v1318)
                                    {
                                      uint64_t v1325 = ((char *)v1319 - (char *)v1320) >> 4;
                                      unint64_t v1326 = v1325 + 1;
                                      if ((unint64_t)(v1325 + 1) >> 60) {
                                        sub_25B3FBC4C();
                                      }
                                      if ((uint64_t)(v1318 - (void)v1320) >> 3 > v1326) {
                                        unint64_t v1326 = (uint64_t)(v1318 - (void)v1320) >> 3;
                                      }
                                      if (v1318 - (unint64_t)v1320 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v1327 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1327 = v1326;
                                      }
                                      if (v1327) {
                                        unint64_t v1327 = (unint64_t)sub_25B3FFAEC(v1327);
                                      }
                                      else {
                                        uint64_t v1328 = 0;
                                      }
                                      v1329 = (float32x2_t *)(v1327 + 16 * v1325);
                                      float32x2_t *v1329 = *(float32x2_t *)(*(void *)&v1321 + 8 * v1322);
                                      v1329[1] = *(float32x2_t *)(*(void *)&v1321 + 8 * v1323);
                                      if (v1319 == v1320)
                                      {
                                        v1320 = (float32x2_t *)(v1327 + 16 * v1325);
                                      }
                                      else
                                      {
                                        v1330 = (float32x2_t *)(v1327 + 16 * v1325);
                                        do
                                        {
                                          *(_OWORD *)v1330[-2].f32 = *(_OWORD *)v1319[-2].f32;
                                          v1330 -= 2;
                                          v1319 -= 2;
                                        }
                                        while (v1319 != v1320);
                                        v1319 = v1320;
                                        v1320 = v1330;
                                      }
                                      unint64_t v1318 = v1327 + 16 * v1328;
                                      v1324 = v1329 + 2;
                                      if (v1319) {
                                        operator delete(v1319);
                                      }
                                    }
                                    else
                                    {
                                      float32x2_t *v1319 = *(float32x2_t *)(*(void *)v1474 + 8 * v1322);
                                      v1319[1] = *(float32x2_t *)(*(void *)&v1321 + 8 * v1323);
                                      v1324 = v1319 + 2;
                                    }
                                    v1317 = (uint64_t **)*v1317;
                                    v1319 = v1324;
                                  }
                                  while (v1317);
                                }
                                else
                                {
                                  v1324 = 0;
                                  v1320 = 0;
                                }
                                LOBYTE(v1509[0]) = 0;
                                sub_25B443750(v1514, ((char *)v1285 - (char *)v1286) >> 5, (unsigned __int8 *)v1509);
                                if (v1285 != v1286)
                                {
                                  unint64_t v1331 = 0;
                                  v1427 = 0;
                                  v1433 = 0;
                                  unint64_t v1332 = 0;
                                  if ((unint64_t)(((char *)v1285 - (char *)v1286) >> 5) <= 1) {
                                    uint64_t v1333 = 1;
                                  }
                                  else {
                                    uint64_t v1333 = ((char *)v1285 - (char *)v1286) >> 5;
                                  }
                                  uint64_t v1470 = v1333;
                                  while (1)
                                  {
                                    v1334 = &v1286[4 * v1332];
                                    if (!*(void *)&v1334[2]) {
                                      goto LABEL_1944;
                                    }
                                    v1335 = (int *)&v1334[3];
                                    if (*((unsigned char *)sub_25B3FF7C0(&v1481, v1334[3].i32[0], &v1334[3]) + 96)) {
                                      goto LABEL_1944;
                                    }
                                    float32x2_t v1336 = v1334[2];
                                    float32x2_t v1337 = v1474[0];
                                    v1338 = *(void **)(*(void *)v1474 + 8 * *(int *)(*(void *)&v1336 + 16));
                                    float32x2_t v1339 = v1334[1];
                                    float32x2_t v1340 = vsub_f32((float32x2_t)v1338, v1339);
                                    if (sqrtf(vaddv_f32(vmul_f32(v1340, v1340))) < 0.15)
                                    {
                                      v1509[0] = (void *)*v1334;
                                      v1509[1] = v1338;
                                      if (!*((unsigned char *)sub_25B3FF7C0(&v1481, *(_DWORD *)(*(void *)&v1334[2] + 16), (_DWORD *)(*(void *)&v1334[2] + 16))+ 96)&& (sub_25B4B8D5C((float32x2_t *)v1509, v1320, v1324) & 1) == 0&& (sub_25B4B8D5C((float32x2_t *)v1509, v1433, v1427) & 1) == 0)
                                      {
                                        *((unsigned char *)sub_25B3FF7C0(&v1481, *(_DWORD *)(*(void *)&v1334[2] + 16), (_DWORD *)(*(void *)&v1334[2] + 16))+ 96) = 1;
                                        *((unsigned char *)sub_25B3FF7C0(&v1481, *v1335, &v1334[3]) + 96) = 1;
                                        v1345 = v1427;
                                        if ((unint64_t)v1427 >= v1331)
                                        {
                                          v1347 = v1433;
                                          uint64_t v1348 = ((char *)v1427 - (char *)v1433) >> 4;
                                          unint64_t v1349 = v1348 + 1;
                                          if ((unint64_t)(v1348 + 1) >> 60) {
                                            sub_25B3FBC4C();
                                          }
                                          if ((uint64_t)(v1331 - (void)v1433) >> 3 > v1349) {
                                            unint64_t v1349 = (uint64_t)(v1331 - (void)v1433) >> 3;
                                          }
                                          if (v1331 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                            unint64_t v1350 = 0xFFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1350 = v1349;
                                          }
                                          if (v1350)
                                          {
                                            unint64_t v1350 = (unint64_t)sub_25B3FFAEC(v1350);
                                            v1345 = v1427;
                                            v1347 = v1433;
                                          }
                                          else
                                          {
                                            uint64_t v1351 = 0;
                                          }
                                          v1357 = (float32x2_t *)(v1350 + 16 * v1348);
                                          *(_OWORD *)v1357->f32 = *(_OWORD *)v1509;
                                          if (v1345 == v1347)
                                          {
                                            v1347 = v1345;
                                            v1346 = (float32x2_t *)(v1350 + 16 * v1348);
                                          }
                                          else
                                          {
                                            unint64_t v1358 = v1350 + 16 * v1348;
                                            do
                                            {
                                              *(_OWORD *)(v1358 - 16) = *(_OWORD *)v1345[-2].f32;
                                              v1358 -= 16;
                                              v1345 -= 2;
                                            }
                                            while (v1345 != v1347);
                                            v1346 = (float32x2_t *)v1358;
                                          }
                                          unint64_t v1331 = v1350 + 16 * v1351;
                                          v1344 = v1357 + 2;
                                          if (v1347) {
                                            operator delete(v1347);
                                          }
                                        }
                                        else
                                        {
                                          *(_OWORD *)v1427->f32 = *(_OWORD *)v1509;
                                          v1344 = v1427 + 2;
                                          v1346 = v1433;
                                        }
                                        v1433 = v1346;
                                        goto LABEL_1943;
                                      }
                                      float32x2_t v1336 = v1334[2];
                                      float32x2_t v1337 = v1474[0];
                                      float32x2_t v1339 = v1334[1];
                                    }
                                    v1341 = *(void **)(*(void *)&v1337 + 8 * *(int *)(*(void *)&v1336 + 20));
                                    float32x2_t v1342 = vsub_f32((float32x2_t)v1341, v1339);
                                    if (sqrtf(vaddv_f32(vmul_f32(v1342, v1342))) >= 0.15) {
                                      goto LABEL_1944;
                                    }
                                    v1509[0] = (void *)*v1334;
                                    v1509[1] = v1341;
                                    if (*((unsigned char *)sub_25B3FF7C0(&v1481, *(_DWORD *)(*(void *)&v1334[2] + 20), (_DWORD *)(*(void *)&v1334[2] + 20))+ 96)|| (sub_25B4B8D5C((float32x2_t *)v1509, v1320, v1324) & 1) != 0|| (sub_25B4B8D5C((float32x2_t *)v1509, v1433, v1427) & 1) != 0)
                                    {
                                      goto LABEL_1944;
                                    }
                                    *((unsigned char *)sub_25B3FF7C0(&v1481, *(_DWORD *)(*(void *)&v1334[2] + 20), (_DWORD *)(*(void *)&v1334[2] + 20))+ 96) = 1;
                                    *((unsigned char *)sub_25B3FF7C0(&v1481, *v1335, &v1334[3]) + 96) = 1;
                                    v1343 = v1427;
                                    if ((unint64_t)v1427 >= v1331)
                                    {
                                      v1352 = v1433;
                                      uint64_t v1353 = ((char *)v1427 - (char *)v1433) >> 4;
                                      unint64_t v1354 = v1353 + 1;
                                      if ((unint64_t)(v1353 + 1) >> 60) {
                                        sub_25B3FBC4C();
                                      }
                                      if ((uint64_t)(v1331 - (void)v1433) >> 3 > v1354) {
                                        unint64_t v1354 = (uint64_t)(v1331 - (void)v1433) >> 3;
                                      }
                                      if (v1331 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v1355 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v1355 = v1354;
                                      }
                                      if (v1355)
                                      {
                                        unint64_t v1355 = (unint64_t)sub_25B3FFAEC(v1355);
                                        v1343 = v1427;
                                        v1352 = v1433;
                                      }
                                      else
                                      {
                                        uint64_t v1356 = 0;
                                      }
                                      v1359 = (float32x2_t *)(v1355 + 16 * v1353);
                                      *(_OWORD *)v1359->f32 = *(_OWORD *)v1509;
                                      v1360 = v1359;
                                      if (v1343 != v1352)
                                      {
                                        do
                                        {
                                          *(_OWORD *)v1360[-2].f32 = *(_OWORD *)v1343[-2].f32;
                                          v1360 -= 2;
                                          v1343 -= 2;
                                        }
                                        while (v1343 != v1352);
                                        v1343 = v1352;
                                      }
                                      v1433 = v1360;
                                      unint64_t v1331 = v1355 + 16 * v1356;
                                      v1344 = v1359 + 2;
                                      if (v1343) {
                                        operator delete(v1343);
                                      }
                                    }
                                    else
                                    {
                                      *(_OWORD *)v1427->f32 = *(_OWORD *)v1509;
                                      v1344 = v1427 + 2;
                                    }
LABEL_1943:
                                    *(void *)((char *)v1514[0] + ((v1332 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1332;
                                    v1427 = v1344;
LABEL_1944:
                                    if (++v1332 == v1470)
                                    {
                                      unint64_t v1361 = 0;
                                      while (1)
                                      {
                                        if ((*((void *)v1514[0] + (v1361 >> 6)) & (1 << v1361)) == 0)
                                        {
                                          v1464 = &v1286[4 * v1361];
                                          if (!*((unsigned char *)sub_25B3FF7C0(&v1481, v1464[3].i32[0], &v1464[3]) + 96)) {
                                            break;
                                          }
                                        }
LABEL_1948:
                                        if (++v1361 >= ((char *)v1285 - (char *)v1286) >> 5) {
                                          goto LABEL_2048;
                                        }
                                      }
                                      unint64_t v1362 = 0;
                                      while (2)
                                      {
                                        if (v1361 == v1362
                                          || (*((void *)v1514[0] + (v1362 >> 6)) & (1 << v1362)) != 0
                                          || (v1363 = &v1286[4 * v1362],
                                              v1364 = (int *)&v1363[3],
                                              *((unsigned char *)sub_25B3FF7C0(&v1481, v1363[3].i32[0], &v1363[3]) + 96)))
                                        {
LABEL_1954:
                                          if (++v1362 == v1470) {
                                            goto LABEL_1948;
                                          }
                                          continue;
                                        }
                                        break;
                                      }
                                      float32x2_t v1365 = v1464[1];
                                      float32x2_t v1366 = *v1363;
                                      float32x2_t v1367 = v1363[1];
                                      float32x2_t v1368 = vsub_f32(v1367, *v1363);
                                      float v1369 = vaddv_f32(vmul_f32(vsub_f32(v1365, *v1363), v1368));
                                      float v1370 = vaddv_f32(vmul_f32(v1368, v1368));
                                      if (v1370 < 0.000001) {
                                        float v1370 = 0.000001;
                                      }
                                      v1371 = (void *)vmla_n_f32(v1366, v1368, v1369 / v1370);
                                      if (vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v1371, v1366), vsub_f32((float32x2_t)v1371, v1367))) > 0.01|| (float32x2_t v1372 = vsub_f32(v1365, (float32x2_t)v1371), sqrtf(vaddv_f32(vmul_f32(v1372, v1372))) >= 0.15)|| (v1373 = vsub_f32((float32x2_t)v1371, v1365), sqrtf(vaddv_f32(vmul_f32(v1373, v1373))) > 0.15))
                                      {
LABEL_1966:
                                        float32x2_t v1374 = vsub_f32(v1366, v1365);
                                        if (sqrtf(vaddv_f32(vmul_f32(v1374, v1374))) > 0.15)
                                        {
                                          float32x2_t v1375 = vsub_f32(v1363[1], v1365);
                                          if (sqrtf(vaddv_f32(vmul_f32(v1375, v1375))) > 0.15) {
                                            goto LABEL_1954;
                                          }
                                        }
                                        if ((sub_25B4B8D5C(v1464, v1320, v1324) & 1) != 0
                                          || (sub_25B4B8D5C(v1464, v1433, v1427) & 1) != 0
                                          || (sub_25B4B8D5C(&v1286[4 * v1362], v1320, v1324) & 1) != 0
                                          || (sub_25B4B8D5C(&v1286[4 * v1362], v1433, v1427) & 1) != 0)
                                        {
                                          goto LABEL_1954;
                                        }
                                        unint64_t v1416 = v1331;
                                        if ((unint64_t)v1427 >= v1331)
                                        {
                                          uint64_t v1377 = ((char *)v1427 - (char *)v1433) >> 4;
                                          unint64_t v1378 = v1377 + 1;
                                          if ((unint64_t)(v1377 + 1) >> 60) {
                                            goto LABEL_2085;
                                          }
                                          if ((uint64_t)(v1416 - (void)v1433) >> 3 > v1378) {
                                            unint64_t v1378 = (uint64_t)(v1416 - (void)v1433) >> 3;
                                          }
                                          if (v1416 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                            unint64_t v1379 = 0xFFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1379 = v1378;
                                          }
                                          if (v1379) {
                                            unint64_t v1379 = (unint64_t)sub_25B3FFAEC(v1379);
                                          }
                                          else {
                                            uint64_t v1380 = 0;
                                          }
                                          v1381 = (float32x2_t *)(v1379 + 16 * v1377);
                                          *(_OWORD *)v1381->f32 = *(_OWORD *)v1464->f32;
                                          if (v1427 == v1433)
                                          {
                                            v1433 = (float32x2_t *)(v1379 + 16 * v1377);
                                            v1383 = v1427;
                                          }
                                          else
                                          {
                                            v1382 = (float32x2_t *)(v1379 + 16 * v1377);
                                            v1384 = v1427;
                                            v1383 = v1433;
                                            do
                                            {
                                              *(_OWORD *)v1382[-2].f32 = *(_OWORD *)v1384[-2].f32;
                                              v1382 -= 2;
                                              v1384 -= 2;
                                            }
                                            while (v1384 != v1433);
                                            v1433 = v1382;
                                          }
                                          unint64_t v1416 = v1379 + 16 * v1380;
                                          v1376 = v1381 + 2;
                                          if (v1383) {
                                            operator delete(v1383);
                                          }
                                        }
                                        else
                                        {
                                          *(_OWORD *)v1427->f32 = *(_OWORD *)v1464->f32;
                                          v1376 = v1427 + 2;
                                        }
                                        if ((unint64_t)v1376 >= v1416)
                                        {
                                          uint64_t v1428 = ((char *)v1376 - (char *)v1433) >> 4;
                                          unint64_t v1385 = v1428 + 1;
                                          if ((unint64_t)(v1428 + 1) >> 60) {
LABEL_2085:
                                          }
                                            sub_25B3FBC4C();
                                          if ((uint64_t)(v1416 - (void)v1433) >> 3 > v1385) {
                                            unint64_t v1385 = (uint64_t)(v1416 - (void)v1433) >> 3;
                                          }
                                          if (v1416 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                            unint64_t v1386 = 0xFFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1386 = v1385;
                                          }
                                          if (v1386) {
                                            unint64_t v1386 = (unint64_t)sub_25B3FFAEC(v1386);
                                          }
                                          else {
                                            uint64_t v1387 = 0;
                                          }
                                          v1388 = (float32x2_t *)(v1386 + 16 * v1428);
                                          *(_OWORD *)v1388->f32 = *(_OWORD *)v1363->f32;
                                          if (v1376 == v1433)
                                          {
                                            v1391 = (float32x2_t *)(v1386 + 16 * v1428);
                                            v1390 = v1433;
                                          }
                                          else
                                          {
                                            unint64_t v1389 = v1386 + 16 * v1428;
                                            v1390 = v1433;
                                            do
                                            {
                                              v1391 = (float32x2_t *)(v1389 - 16);
                                              *(_OWORD *)(v1389 - 16) = *(_OWORD *)v1376[-2].f32;
                                              v1376 -= 2;
                                              v1389 -= 16;
                                            }
                                            while (v1376 != v1433);
                                          }
                                          unint64_t v1331 = v1386 + 16 * v1387;
                                          v1427 = v1388 + 2;
                                          if (v1390) {
                                            operator delete(v1390);
                                          }
                                          v1433 = v1391;
                                        }
                                        else
                                        {
                                          *(_OWORD *)v1376->f32 = *(_OWORD *)v1363->f32;
                                          v1427 = v1376 + 2;
                                          unint64_t v1331 = v1416;
                                        }
                                      }
                                      else
                                      {
                                        v1509[0] = (void *)*v1464;
                                        v1509[1] = v1371;
                                        *(float32x2_t *)&v1507[0] = *v1363;
                                        *((void *)&v1507[0] + 1) = v1371;
                                        if ((sub_25B4B8D5C((float32x2_t *)v1509, v1320, v1324) & 1) != 0
                                          || (sub_25B4B8D5C((float32x2_t *)v1509, v1433, v1427) & 1) != 0
                                          || (sub_25B4B8D5C((float32x2_t *)v1507, v1320, v1324) & 1) != 0
                                          || (sub_25B4B8D5C((float32x2_t *)v1507, v1433, v1427) & 1) != 0)
                                        {
                                          float32x2_t v1366 = *v1363;
                                          goto LABEL_1966;
                                        }
                                        if ((unint64_t)v1427 >= v1331)
                                        {
                                          uint64_t v1394 = ((char *)v1427 - (char *)v1433) >> 4;
                                          unint64_t v1395 = v1394 + 1;
                                          if ((unint64_t)(v1394 + 1) >> 60) {
                                            goto LABEL_2089;
                                          }
                                          if ((uint64_t)(v1331 - (void)v1433) >> 3 > v1395) {
                                            unint64_t v1395 = (uint64_t)(v1331 - (void)v1433) >> 3;
                                          }
                                          if (v1331 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                            unint64_t v1396 = 0xFFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1396 = v1395;
                                          }
                                          if (v1396) {
                                            unint64_t v1396 = (unint64_t)sub_25B3FFAEC(v1396);
                                          }
                                          else {
                                            uint64_t v1397 = 0;
                                          }
                                          v1398 = (float32x2_t *)(v1396 + 16 * v1394);
                                          *(_OWORD *)v1398->f32 = *(_OWORD *)v1509;
                                          if (v1427 == v1433)
                                          {
                                            v1433 = (float32x2_t *)(v1396 + 16 * v1394);
                                            v1400 = v1427;
                                          }
                                          else
                                          {
                                            v1399 = (float32x2_t *)(v1396 + 16 * v1394);
                                            v1401 = v1427;
                                            v1400 = v1433;
                                            do
                                            {
                                              *(_OWORD *)v1399[-2].f32 = *(_OWORD *)v1401[-2].f32;
                                              v1399 -= 2;
                                              v1401 -= 2;
                                            }
                                            while (v1401 != v1433);
                                            v1433 = v1399;
                                          }
                                          unint64_t v1331 = v1396 + 16 * v1397;
                                          v1393 = v1398 + 2;
                                          if (v1400) {
                                            operator delete(v1400);
                                          }
                                        }
                                        else
                                        {
                                          *(_OWORD *)v1427->f32 = *(_OWORD *)v1509;
                                          v1393 = v1427 + 2;
                                        }
                                        if ((unint64_t)v1393 >= v1331)
                                        {
                                          unint64_t v1402 = v1331;
                                          uint64_t v1403 = ((char *)v1393 - (char *)v1433) >> 4;
                                          unint64_t v1404 = v1403 + 1;
                                          if ((unint64_t)(v1403 + 1) >> 60) {
LABEL_2089:
                                          }
                                            sub_25B3FBC4C();
                                          if ((uint64_t)(v1402 - (void)v1433) >> 3 > v1404) {
                                            unint64_t v1404 = (uint64_t)(v1402 - (void)v1433) >> 3;
                                          }
                                          if (v1402 - (unint64_t)v1433 >= 0x7FFFFFFFFFFFFFF0) {
                                            unint64_t v1405 = 0xFFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v1405 = v1404;
                                          }
                                          if (v1405) {
                                            unint64_t v1405 = (unint64_t)sub_25B3FFAEC(v1405);
                                          }
                                          else {
                                            uint64_t v1406 = 0;
                                          }
                                          v1407 = (float32x2_t *)(v1405 + 16 * v1403);
                                          *(_OWORD *)v1407->f32 = v1507[0];
                                          if (v1393 == v1433)
                                          {
                                            v1410 = (float32x2_t *)(v1405 + 16 * v1403);
                                            v1409 = v1433;
                                          }
                                          else
                                          {
                                            unint64_t v1408 = v1405 + 16 * v1403;
                                            v1409 = v1433;
                                            do
                                            {
                                              v1410 = (float32x2_t *)(v1408 - 16);
                                              *(_OWORD *)(v1408 - 16) = *(_OWORD *)v1393[-2].f32;
                                              v1393 -= 2;
                                              v1408 -= 16;
                                            }
                                            while (v1393 != v1433);
                                          }
                                          unint64_t v1411 = v1405 + 16 * v1406;
                                          v1427 = v1407 + 2;
                                          if (v1409) {
                                            operator delete(v1409);
                                          }
                                          v1433 = v1410;
                                          unint64_t v1331 = v1411;
                                        }
                                        else
                                        {
                                          *(_OWORD *)v1393->f32 = v1507[0];
                                          v1427 = v1393 + 2;
                                        }
                                      }
                                      v1392 = v1514[0];
                                      *((void *)v1514[0] + (v1361 >> 6)) |= 1 << v1361;
                                      v1392[v1362 >> 6] |= 1 << v1362;
                                      *((unsigned char *)sub_25B3FF7C0(&v1481, v1464[3].i32[0], &v1464[3]) + 96) = 1;
                                      *((unsigned char *)sub_25B3FF7C0(&v1481, *v1364, v1364) + 96) = 1;
                                      goto LABEL_1954;
                                    }
                                  }
                                }
                                v1427 = 0;
                                v1433 = 0;
LABEL_2048:
                                if (v1514[0]) {
                                  operator delete(v1514[0]);
                                }
                                if (v1320) {
                                  operator delete(v1320);
                                }
                                if (v1286) {
                                  operator delete(v1286);
                                }
                                if (v1444) {
                                  operator delete(v1444);
                                }
                                if (v1433 != v1427)
                                {
                                  v1412 = v1433;
                                  do
                                  {
                                    int v1413 = sub_25B3FD470((float32x2_t **)v1474, v1412, 0.1);
                                    v1414 = v1412 + 1;
                                    int v1415 = sub_25B3FD470((float32x2_t **)v1474, v1414, 0.1);
                                    sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v1413, v1415, 0, v1414[-1], *v1414);
                                    v1412 = v1414 + 1;
                                  }
                                  while (v1412 != v1427);
                                }
                                if (v1433) {
                                  operator delete(v1433);
                                }
                              }
                              sub_25B3F61CC(v1193, v1194, a1 + 792, (uint64_t)v1474, a7);
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      BOOL v867 = 0;
                    }
                    BOOL v882 = 1;
                    goto LABEL_1237;
                  }
                }
              }
            }
          }
LABEL_1243:
          if (v796 >= (float)(180.0 - v796)) {
            float v796 = 180.0 - v796;
          }
          if (v796 >= 15.0) {
            goto LABEL_1251;
          }
          unint64_t v886 = sub_25B40E348((float32x2_t *)v630 + 3, (float32x2_t *)v630 + 7);
          char v887 = v886;
          char v889 = v888;
          float32x2_t v891 = (float32x2_t)v647[v888];
          *(void *)&long long v1490 = v646[v886];
          float32x2_t v890 = (float32x2_t)v1490;
          *((float32x2_t *)&v1490 + 1) = v891;
          long long v1491 = xmmword_25B5F10F0;
          float32x2_t v892 = vsub_f32(*(float32x2_t *)&v1490, v891);
          if (sqrtf(vaddv_f32(vmul_f32(v892, v892))) >= 0.45) {
            goto LABEL_1251;
          }
          float v893 = sub_25B3FCCE0((float32x2_t *)&v1490, (float32x2_t *)v630 + 3, 0);
          float v894 = fabsf(sub_25B3FCCE0((float32x2_t *)&v1490, (float32x2_t *)v630 + 7, 0) + -90.0);
          if (fabsf(v893 + -90.0) >= 20.0 || v894 >= 20.0) {
            goto LABEL_1251;
          }
          v896 = (int *)(v630 + 6);
          if (v887) {
            v896 = (int *)v630 + 13;
          }
          int v897 = *v896;
          v898 = (int *)(v630 + 10);
          if (v889) {
            v898 = (int *)v630 + 21;
          }
          int v899 = *v898;
          uint64_t v900 = v1480[0];
          if (v1480[0])
          {
            v901 = v1480;
            v902 = (uint64_t *)v1480[0];
            do
            {
              v903 = v902;
              v904 = v901;
              int v905 = *((_DWORD *)v902 + 8);
              if (v905 >= v897) {
                v901 = v902;
              }
              else {
                ++v902;
              }
              v902 = (uint64_t *)*v902;
            }
            while (v902);
            if (v901 != v1480)
            {
              v906 = v905 >= v897 ? v903 : v904;
              if (*((_DWORD *)v906 + 8) <= v897)
              {
                if (v905 < v897) {
                  v903 = v904;
                }
                if (v903[7] >= 2uLL)
                {
                  v907 = v1480;
                  do
                  {
                    v908 = (uint64_t *)v900;
                    v909 = v907;
                    int v910 = *(_DWORD *)(v900 + 32);
                    v911 = (uint64_t *)(v900 + 8);
                    if (v910 >= v899)
                    {
                      v911 = v908;
                      v907 = v908;
                    }
                    uint64_t v900 = *v911;
                  }
                  while (v900);
                  if (v907 == v1480 || (v910 >= v899 ? (v912 = v908) : (v912 = v909), *((_DWORD *)v912 + 8) > v899))
                  {
                    BOOL v913 = 0;
                  }
                  else
                  {
                    v938 = v910 >= v899 ? v908 : v909;
                    BOOL v913 = (unint64_t)v938[7] > 1;
                  }
                  if (v913) {
                    goto LABEL_1251;
                  }
                }
              }
            }
          }
          if (v897 == v899 || sub_25B4BB268((uint64_t)v1474, (float32x2_t *)&v1490)) {
            goto LABEL_1251;
          }
          unsigned int v939 = *((_DWORD *)v630 + 18);
          LODWORD(__p) = *((_DWORD *)v630 + 10);
          *(void *)((char *)&__p + 4) = __PAIR64__(v897, v939);
          HIDWORD(__p) = v899;
          *(float32x2_t *)&long long v1506 = v890;
          *((float32x2_t *)&v1506 + 1) = v891;
          sub_25B4BB3C4(v1456, (uint64_t)&__p);
          sub_25B3FD8A4((uint64_t)v1514, (uint64_t)v1474, v897, v899, 0, v890, v891);
        }
        break;
      }
      uint64_t v885 = a1;
      goto LABEL_1315;
    }
  }
  float v46 = 0.5;
  goto LABEL_76;
}

void sub_25B4B646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (v54) {
    operator delete(v54);
  }
  sub_25B4B7174((uint64_t)&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4B68E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 792);
  if (v2)
  {
    *(void *)(a1 + 800) = v2;
    operator delete(v2);
  }
  int64_t v3 = *(void **)(a1 + 768);
  if (v3)
  {
    *(void *)(a1 + 776) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)(a1 + 744);
  if (v4)
  {
    *(void *)(a1 + 752) = v4;
    operator delete(v4);
  }
  id v5 = *(void **)(a1 + 720);
  if (v5)
  {
    *(void *)(a1 + 728) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 696);
  if (v6)
  {
    *(void *)(a1 + 704) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 672);
  if (v7)
  {
    *(void *)(a1 + 680) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 648);
  if (v8)
  {
    *(void *)(a1 + 656) = v8;
    operator delete(v8);
  }
  id v9 = *(void **)(a1 + 624);
  if (v9)
  {
    *(void *)(a1 + 632) = v9;
    operator delete(v9);
  }
  __int32 v10 = *(void **)(a1 + 600);
  if (v10)
  {
    *(void *)(a1 + 608) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 576);
  if (v11)
  {
    *(void *)(a1 + 584) = v11;
    operator delete(v11);
  }
  if (*(unsigned char *)(a1 + 568)) {
    sub_25B3FB178(a1 + 528);
  }
  float v12 = *(void **)(a1 + 504);
  if (v12)
  {
    *(void *)(a1 + 512) = v12;
    operator delete(v12);
  }
  float v13 = *(void **)(a1 + 480);
  if (v13)
  {
    *(void *)(a1 + 488) = v13;
    operator delete(v13);
  }
  id v14 = *(void **)(a1 + 456);
  if (v14)
  {
    *(void *)(a1 + 464) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 432);
  if (v15)
  {
    *(void *)(a1 + 440) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *(void **)(a1 + 408);
  if (v16)
  {
    *(void *)(a1 + 416) = v16;
    operator delete(v16);
  }
  id v17 = *(void **)(a1 + 384);
  if (v17)
  {
    *(void *)(a1 + 392) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 360);
  if (v18)
  {
    *(void *)(a1 + 368) = v18;
    operator delete(v18);
  }
  id v19 = *(void **)(a1 + 336);
  if (v19)
  {
    *(void *)(a1 + 344) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 312);
  if (v20)
  {
    *(void *)(a1 + 320) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(a1 + 288);
  if (v21)
  {
    *(void *)(a1 + 296) = v21;
    operator delete(v21);
  }
  id v22 = *(void **)(a1 + 264);
  if (v22)
  {
    *(void *)(a1 + 272) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 240);
  if (v23)
  {
    *(void *)(a1 + 248) = v23;
    operator delete(v23);
  }
  id v24 = *(void **)(a1 + 216);
  if (v24)
  {
    *(void *)(a1 + 224) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 192);
  if (v25)
  {
    *(void *)(a1 + 200) = v25;
    operator delete(v25);
  }
  id v26 = *(void **)(a1 + 168);
  if (v26)
  {
    *(void *)(a1 + 176) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)(a1 + 144);
  if (v27)
  {
    *(void *)(a1 + 152) = v27;
    operator delete(v27);
  }
  id v28 = *(void **)(a1 + 120);
  if (v28)
  {
    *(void *)(a1 + 128) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(a1 + 96);
  if (v29)
  {
    *(void *)(a1 + 104) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(a1 + 72);
  if (v30)
  {
    *(void *)(a1 + 80) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *(void **)(a1 + 48);
  if (v31)
  {
    *(void *)(a1 + 56) = v31;
    operator delete(v31);
  }
  int v32 = *(void **)(a1 + 24);
  if (v32)
  {
    *(void *)(a1 + 32) = v32;
    operator delete(v32);
  }
  unint64_t v33 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v33;
    operator delete(v33);
  }
  return a1;
}

uint64_t *sub_25B4B6B1C(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v65 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 24) = a1 + 32;
  unint64_t v74 = (uint64_t **)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = (uint64_t *)(a1 + 56);
  *(void *)(a1 + 48) = a1 + 56;
  unint64_t v67 = (uint64_t **)(a1 + 48);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  unint64_t v66 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v71 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 288) = a1 + 296;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  id v9 = *(id *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  id v11 = *(id *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  id v73 = *(id *)a3;
  uint64_t v13 = *(void *)(a3 + 8);
  id v72 = *(id *)(a3 + 16);
  uint64_t v69 = *(void *)(a3 + 24);
  memset(v84, 0, 24);
  memset(v83, 0, sizeof(v83));
  id v14 = v9;
  id v76 = v11;
  int v70 = (uint64_t *)a1;
  if (v14 != v76 || (uint64_t v16 = 0, v10 != v12))
  {
    uint64_t v16 = 0;
    uint64_t v17 = v10 - v12 + 1;
    do
    {
      do
      {
        uint64_t v18 = v16;
        id v19 = v14;
        uint64_t v20 = objc_msgSend_objectAtIndex_(v14, v15, v10 + v16);
        objc_msgSend_quad(v20, v21, v22);
        uint64_t v77 = v24;
        uint64_t v79 = v23;

        *(void *)&long long v25 = v79;
        *((void *)&v25 + 1) = v77;
        long long v82 = v25;
        sub_25B4BC19C((float32x2_t *)&v82, (float32x2_t **)a1, v84, (uint64_t)v83, a4);
        sub_25B4BC19C((float32x2_t *)&v82 + 1, (float32x2_t **)a1, v84, (uint64_t)v83, a4);
        ++v16;
        id v14 = v19;
      }
      while (v19 != v76);
    }
    while (v17 + v18);
  }

  id v26 = v73;
  id v75 = v72;
  uint64_t v68 = v14;
  if (v26 == v75 && v13 == v69)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      do
      {
        uint64_t v29 = v28;
        uint64_t v30 = objc_msgSend_objectAtIndex_(v26, v27, v13 + v28);
        objc_msgSend_quad(v30, v31, v32);
        uint64_t v78 = v34;
        uint64_t v80 = v33;

        *(void *)&long long v35 = v80;
        *((void *)&v35 + 1) = v78;
        long long v82 = v35;
        sub_25B4BC19C((float32x2_t *)&v82, (float32x2_t **)a1, v84, (uint64_t)v83, a4);
        sub_25B4BC19C((float32x2_t *)&v82 + 1, (float32x2_t **)a1, v84, (uint64_t)v83, a4);
        ++v28;
      }
      while (v26 != v75);
    }
    while (v13 - v69 + 1 + v29);
  }

  unint64_t v36 = 2 * (v28 + v16);
  float32x2_t v37 = (_DWORD *)v83[0];
  if (v36)
  {
    for (unint64_t i = 0; i < v36; i += 2)
      sub_25B4BC574(v71, v37[i], v37[i + 1]);
  }
  float32x2_t v81 = v8;
  if (2 * v16)
  {
    int v39 = 0;
    unint64_t v40 = 0;
    char v41 = (char *)v84[0];
    do
    {
      char v42 = &v37[v40];
      int v44 = *v42;
      int v43 = v42[1];
      if (*v42 != v43)
      {
        uint64_t v45 = (uint64_t **)&v41[8 * v40];
        float v46 = *v45;
        uint64_t v47 = v45[1];
        LODWORD(v82) = v39;
        uint64_t v48 = sub_25B4BC7EC(v74, v39, &v82);
        v48[5] = v46;
        v48[6] = v47;
        *((_DWORD *)v48 + 14) = v39;
        *((_DWORD *)v48 + 15) = 0;
        *((_DWORD *)v48 + 16) = v44;
        *((_DWORD *)v48 + 17) = v43;
      }
      v40 += 2;
      ++v39;
    }
    while (v40 < 2 * v16);
  }
  if (v28)
  {
    float32x2_t v49 = &v37[2 * v16 + 1];
    float32x2_t v50 = (uint64_t **)((char *)v84[0] + 16 * v16 + 8);
    float32x2_t v51 = v67;
    do
    {
      int v52 = *(v49 - 1);
      int v53 = *v49;
      if (v52 != *v49)
      {
        float32x2_t v54 = *(v50 - 1);
        float32x2_t v55 = *v50;
        LODWORD(v82) = v16;
        unint64_t v56 = sub_25B4BC7EC(v67, v16, &v82);
        v56[5] = v54;
        v56[6] = v55;
        *((_DWORD *)v56 + 14) = v16;
        *((_DWORD *)v56 + 15) = 1;
        *((_DWORD *)v56 + 16) = v52;
        *((_DWORD *)v56 + 17) = v53;
      }
      v49 += 2;
      LODWORD(v16) = v16 + 1;
      v50 += 2;
      --v28;
    }
    while (v28);
  }
  else
  {
    float32x2_t v51 = v67;
    if (!v37) {
      goto LABEL_28;
    }
  }
  operator delete(v37);
LABEL_28:
  if (v84[0]) {
    operator delete(v84[0]);
  }

  char v57 = *v74;
  if (*v74 != v65)
  {
    do
    {
      sub_25B4BB7C4(v66, *((_DWORD *)v57 + 8), (uint64_t)(v57 + 4));
      float32x2_t v58 = (uint64_t *)v57[1];
      if (v58)
      {
        do
        {
          float32x2_t v59 = v58;
          float32x2_t v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          float32x2_t v59 = (uint64_t *)v57[2];
          BOOL v60 = *v59 == (void)v57;
          char v57 = v59;
        }
        while (!v60);
      }
      char v57 = v59;
    }
    while (v59 != v65);
  }
  uint64_t v61 = *v51;
  if (*v51 != v81)
  {
    do
    {
      sub_25B4BB7C4(v66, *((_DWORD *)v61 + 8), (uint64_t)(v61 + 4));
      unint64_t v62 = (uint64_t *)v61[1];
      if (v62)
      {
        do
        {
          uint64_t v63 = v62;
          unint64_t v62 = (uint64_t *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          uint64_t v63 = (uint64_t *)v61[2];
          BOOL v60 = *v63 == (void)v61;
          uint64_t v61 = v63;
        }
        while (!v60);
      }
      uint64_t v61 = v63;
    }
    while (v63 != v81);
  }
  sub_25B4BB87C(v70);
  sub_25B4BBDFC((uint64_t)v70);
  return v70;
}

void sub_25B4B7050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_25B3FAD08(a10 + 328);
  uint64_t v18 = *(void **)(a10 + 304);
  if (v18)
  {
    *(void *)(a16 + 448) = v18;
    operator delete(v18);
  }
  sub_25B3FADC4(a10 + 152);
  sub_25B4B8EC8(a10);
  sub_25B3FB178(a17);
  sub_25B3FA930(*(void **)(a16 + 80));
  sub_25B3FA930(*(void **)(a16 + 56));
  sub_25B3FA930(*(void **)(a16 + 32));
  id v19 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B4B7174(uint64_t a1)
{
  sub_25B3FAD08(a1 + 464);
  uint64_t v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(void *)(a1 + 448) = v2;
    operator delete(v2);
  }
  sub_25B3FACCC(a1 + 400);
  int64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  sub_25B3FAD08(a1 + 336);
  sub_25B3FA930(*(void **)(a1 + 320));
  sub_25B3FAD70(*(void **)(a1 + 296));
  sub_25B3FACCC(a1 + 248);
  id v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
  }
  sub_25B3FB178(a1 + 184);
  sub_25B4B7240(*(void **)(a1 + 168));
  sub_25B3FAD70(*(void **)(a1 + 144));
  sub_25B3FB178(a1 + 96);
  sub_25B3FA930(*(void **)(a1 + 80));
  sub_25B3FA930(*(void **)(a1 + 56));
  sub_25B3FA930(*(void **)(a1 + 32));
  id v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_25B4B7240(void *a1)
{
  if (a1)
  {
    sub_25B4B7240(*a1);
    sub_25B4B7240(a1[1]);
    sub_25B3FA930((void *)a1[10]);
    sub_25B3FA930((void *)a1[7]);
    operator delete(a1);
  }
}

void sub_25B4B729C(float32x2_t *a1, long long **a2, float32x2_t *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  float32x2_t v7 = (float32x2_t)*a4;
  int32x2_t v8 = (int32x2_t)vmul_f32(v7, v7);
  *(float *)v8.i32 = sqrtf(vaddv_f32((float32x2_t)v8));
  if (*(float *)v8.i32 < 0.05) {
    goto LABEL_48;
  }
  int v14 = 0;
  float32x2_t v15 = vdiv_f32(v7, (float32x2_t)vdup_lane_s32(v8, 0));
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  do
  {
    float32x2_t v45 = vmla_n_f32(*a3, v15, (float)v14 * 0.05);
    BOOL v46 = sub_25B4BA2BC(*a2, a2[1], &v45, a4);
    sub_25B40DC2C((uint64_t *)&v47, &v46);
    ++v14;
  }
  while (v14 != 7);
  uint64_t v16 = v47;
  int v17 = v48 & 0x3F;
  if (v48 <= 0x3F && (v48 & 0x3F) == 0) {
    goto LABEL_46;
  }
  int v18 = 0;
  id v19 = &v47[8 * (v48 >> 6)];
  uint64_t v20 = v47;
  do
  {
    uint64_t v21 = *(void *)v20 & (1 << v18);
    if (v21) {
      break;
    }
    v20 += 8 * (v18 == 63);
    if (v18 == 63) {
      int v18 = 0;
    }
    else {
      ++v18;
    }
  }
  while (v18 != v17 || v20 != v19);
  unsigned int v22 = 0;
  uint64_t v23 = v47;
  while (((*(void *)v23 >> v22) & 1) == 0)
  {
    v23 += 8 * (v22 == 63);
    if (v22 == 63) {
      unsigned int v22 = 0;
    }
    else {
      ++v22;
    }
    if (v22 == v17 && v23 == v19)
    {
      uint64_t v23 = &v47[8 * (v48 >> 6)];
      unsigned int v22 = v48 & 0x3F;
      break;
    }
  }
  if (!v21) {
    goto LABEL_46;
  }
  BOOL v24 = v22 == v17 && v23 == v19;
  uint64_t v25 = v24 ? 0 : 8 * (v23 - v47) + v22;
  while (1)
  {
    float32x2_t v26 = *a3;
    float32x2_t v27 = vmla_n_f32(*a3, v15, (float)(unint64_t)v25 * 0.05);
    float32x2_t v45 = v27;
    float32x2_t v28 = vsub_f32(v27, v26);
    float v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    if (v29 >= 15.0)
    {
LABEL_44:
      float32x2_t v30 = 0;
      goto LABEL_45;
    }
    float32x2_t v30 = (float32x2_t)a5[25];
    if (v30) {
      break;
    }
LABEL_43:
    ++v25;
    if (!sub_25B4BA2BC(*a2, a2[1], &v45, a4)) {
      goto LABEL_44;
    }
  }
  uint64_t v31 = *a5;
  while (1)
  {
    int v32 = *(_DWORD *)(*(void *)&v30 + 20);
    uint64_t v33 = *(int *)(*(void *)&v30 + 16);
    if (v33 != a6 && v32 != a6)
    {
      float32x2_t v35 = *(float32x2_t *)(v31 + 8 * v33);
      float32x2_t v36 = *(float32x2_t *)(v31 + 8 * v32);
      float32x2_t v37 = vsub_f32(v36, v35);
      float v38 = vaddv_f32(vmul_f32(vsub_f32(v27, v35), v37));
      float v39 = vaddv_f32(vmul_f32(v37, v37));
      if (v39 < 0.000001) {
        float v39 = 0.000001;
      }
      float32x2_t v40 = vmla_n_f32(v35, v37, v38 / v39);
      if (vaddv_f32(vmul_f32(vsub_f32(v40, v35), vsub_f32(v40, v36))) <= 0.01)
      {
        float32x2_t v41 = vsub_f32(v27, v40);
        if (sqrtf(vaddv_f32(vmul_f32(v41, v41))) < 0.15)
        {
          float32x2_t v42 = vsub_f32(v40, v27);
          if (sqrtf(vaddv_f32(vmul_f32(v42, v42))) <= 0.15) {
            break;
          }
        }
      }
      float32x2_t v43 = vsub_f32(v35, v27);
      if (sqrtf(vaddv_f32(vmul_f32(v43, v43))) <= 0.15) {
        break;
      }
      float32x2_t v44 = vsub_f32(v36, v27);
      if (sqrtf(vaddv_f32(vmul_f32(v44, v44))) <= 0.15) {
        break;
      }
    }
    float32x2_t v30 = **(float32x2_t **)&v30;
    if (!*(void *)&v30) {
      goto LABEL_43;
    }
  }
LABEL_45:
  if (v29 < 0.2)
  {
LABEL_46:
    if (v16) {
      operator delete(v16);
    }
LABEL_48:
    a1->i8[0] = 0;
    a1[2].i8[0] = 0;
    a1[3] = 0;
    return;
  }
  *a1 = *a3;
  a1[1] = v27;
  a1[2].i8[0] = 1;
  a1[3] = v30;
  if (v16) {
    operator delete(v16);
  }
}

void sub_25B4B75C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B4B75E4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  sub_25B3FC120(v245, (void *)(a3 + 136));
  long long v247 = 0;
  uint64_t v248 = 0;
  int v246 = &v247;
  float32x2_t v7 = *(void **)(a3 + 160);
  if (v7 != (void *)(a3 + 168))
  {
    do
    {
      int32x2_t v8 = v247;
      id v9 = &v247;
      if (v246 == &v247) {
        goto LABEL_9;
      }
      uint64_t v10 = v247;
      id v11 = &v247;
      if (v247)
      {
        do
        {
          id v9 = (uint64_t **)v10;
          uint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          id v9 = (uint64_t **)v11[2];
          BOOL v12 = *v9 == (uint64_t *)v11;
          id v11 = v9;
        }
        while (v12);
      }
      int v13 = *((_DWORD *)v7 + 8);
      if (*((_DWORD *)v9 + 8) < v13)
      {
LABEL_9:
        if (v247) {
          int v14 = v9;
        }
        else {
          int v14 = &v247;
        }
        if (v247) {
          uint64_t v3 = (uint64_t)(v9 + 1);
        }
        else {
          uint64_t v3 = (uint64_t)&v247;
        }
      }
      else
      {
        int v14 = &v247;
        uint64_t v3 = (uint64_t)&v247;
        if (v247)
        {
          uint64_t v3 = (uint64_t)&v247;
          while (1)
          {
            while (1)
            {
              int v14 = (uint64_t **)v8;
              int v18 = *((_DWORD *)v8 + 8);
              if (v13 >= v18) {
                break;
              }
              int32x2_t v8 = *v14;
              uint64_t v3 = (uint64_t)v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            uint64_t v3 = (uint64_t)(v14 + 1);
            int32x2_t v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*(void *)v3)
      {
LABEL_16:
        float32x2_t v15 = operator new(0x68uLL);
        *((_DWORD *)v15 + 8) = *((_DWORD *)v7 + 8);
        *((void *)v15 + 5) = v7[5];
        sub_25B4BA210((uint64_t *)v15 + 6, v7 + 6);
        sub_25B4BA210((uint64_t *)v15 + 9, v7 + 9);
        *((unsigned char *)v15 + 96) = *((unsigned char *)v7 + 96);
        *(void *)float32x2_t v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = v14;
        *(void *)uint64_t v3 = v15;
        if (*v246)
        {
          int v246 = (uint64_t **)*v246;
          float32x2_t v15 = *(void **)v3;
        }
        sub_25B3FA798(v247, (uint64_t *)v15);
        ++v248;
      }
      uint64_t v16 = (void *)v7[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v7[2];
          BOOL v12 = *v17 == (void)v7;
          float32x2_t v7 = v17;
        }
        while (!v12);
      }
      float32x2_t v7 = v17;
    }
    while (v17 != (void *)(a3 + 168));
  }
  uint64_t v242 = a2;
  long long v250 = 0u;
  long long v249 = 0u;
  float v251 = *(float *)(a3 + 216);
  sub_25B3FA4B0((uint64_t)&v249, *(void *)(a3 + 192));
  id v19 = *(uint64_t **)(a3 + 200);
  if (v19)
  {
    unint64_t v20 = *((void *)&v249 + 1);
    do
    {
      int v22 = *((_DWORD *)v19 + 4);
      int v21 = *((_DWORD *)v19 + 5);
      if (v21 >= v22) {
        int v23 = *((_DWORD *)v19 + 4);
      }
      else {
        int v23 = *((_DWORD *)v19 + 5);
      }
      unint64_t v24 = v23 + 2654435769;
      if (v21 <= v22) {
        int v25 = *((_DWORD *)v19 + 4);
      }
      else {
        int v25 = *((_DWORD *)v19 + 5);
      }
      unint64_t v26 = (v25 + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
      if (v20)
      {
        uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          uint64_t v3 = (v25 + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
          if (v26 >= v20) {
            uint64_t v3 = v26 % v20;
          }
        }
        else
        {
          uint64_t v3 = v26 & (v20 - 1);
        }
        float32x2_t v28 = *(uint64_t ***)(v249 + 8 * v3);
        if (v28)
        {
          for (unint64_t i = *v28; i; unint64_t i = (uint64_t *)*i)
          {
            unint64_t v30 = i[1];
            if (v30 == v26)
            {
              int v31 = *((_DWORD *)i + 4);
              if (v31 == v22 && *((_DWORD *)i + 5) == v21 || v31 == v21 && *((_DWORD *)i + 5) == v22) {
                goto LABEL_83;
              }
            }
            else
            {
              if (v27.u32[0] > 1uLL)
              {
                if (v30 >= v20) {
                  v30 %= v20;
                }
              }
              else
              {
                v30 &= v20 - 1;
              }
              if (v30 != v3) {
                break;
              }
            }
          }
        }
      }
      int v32 = (char *)operator new(0x38uLL);
      *(void *)int v32 = 0;
      *((void *)v32 + 1) = v26;
      *((void *)v32 + 2) = v19[2];
      long long v33 = *(_OWORD *)(v19 + 3);
      *(_OWORD *)(v32 + 40) = *(_OWORD *)(v19 + 5);
      *(_OWORD *)(v32 + 24) = v33;
      float v34 = (float)(unint64_t)(*((void *)&v250 + 1) + 1);
      if (!v20 || (float)(v251 * (float)v20) < v34)
      {
        BOOL v35 = (v20 & (v20 - 1)) != 0;
        if (v20 < 3) {
          BOOL v35 = 1;
        }
        unint64_t v36 = v35 | (2 * v20);
        unint64_t v37 = vcvtps_u32_f32(v34 / v251);
        if (v36 <= v37) {
          size_t v38 = v37;
        }
        else {
          size_t v38 = v36;
        }
        sub_25B3FA4B0((uint64_t)&v249, v38);
        unint64_t v20 = *((void *)&v249 + 1);
        if ((*((void *)&v249 + 1) & (*((void *)&v249 + 1) - 1)) != 0)
        {
          if (v26 >= *((void *)&v249 + 1)) {
            uint64_t v3 = v26 % *((void *)&v249 + 1);
          }
          else {
            uint64_t v3 = v26;
          }
        }
        else
        {
          uint64_t v3 = (*((void *)&v249 + 1) - 1) & v26;
        }
      }
      uint64_t v39 = v249;
      float32x2_t v40 = *(void **)(v249 + 8 * v3);
      if (v40)
      {
        *(void *)int v32 = *v40;
      }
      else
      {
        *(void *)int v32 = v250;
        *(void *)&long long v250 = v32;
        *(void *)(v39 + 8 * v3) = &v250;
        if (!*(void *)v32) {
          goto LABEL_82;
        }
        unint64_t v41 = *(void *)(*(void *)v32 + 8);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v41 >= v20) {
            v41 %= v20;
          }
        }
        else
        {
          v41 &= v20 - 1;
        }
        float32x2_t v40 = (void *)(v249 + 8 * v41);
      }
      *float32x2_t v40 = v32;
LABEL_82:
      ++*((void *)&v250 + 1);
LABEL_83:
      id v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  long long v252 = 0;
  unint64_t v253 = 0;
  uint64_t v254 = 0;
  sub_25B3FC724(&v252, *(const void **)(a3 + 224), *(void *)(a3 + 232), (uint64_t)(*(void *)(a3 + 232) - *(void *)(a3 + 224)) >> 2);
  sub_25B3FC7A0((uint64_t)v255, a3 + 248);
  unint64_t v42 = *(unsigned int *)(v242 + 16);
  LODWORD(v272) = a1;
  LODWORD(__p) = v42;
  float32x2_t v43 = sub_25B3FA1DC(v245, a1, &v272);
  *((_DWORD *)sub_25B3FEBEC(v43 + 5, v42, (unsigned int *)&__p) + 8) = 1065353216;
  float32x2_t v44 = sub_25B3FA1DC(v245, v42, &__p);
  *((_DWORD *)sub_25B3FEBEC(v44 + 5, a1, (unsigned int *)&v272) + 8) = 1065353216;
  float32x2_t v45 = (_DWORD *)sub_25B3FA294((uint64_t)v255, a1, &v272)[3];
  BOOL v46 = sub_25B3FA294((uint64_t)v255, a1, &v272);
  uint64_t v47 = (_DWORD *)v46[4];
  if (v45 != v47)
  {
    while (*v45 != v42)
    {
      if (++v45 == v47)
      {
        float32x2_t v45 = (_DWORD *)v46[4];
        break;
      }
    }
  }
  if (v45 == (_DWORD *)sub_25B3FA294((uint64_t)v255, a1, &v272)[4])
  {
    unint64_t v48 = sub_25B3FA294((uint64_t)v255, a1, &v272);
    uint64_t v49 = v48;
    float32x2_t v51 = (char *)v48[4];
    unint64_t v50 = v48[5];
    if ((unint64_t)v51 >= v50)
    {
      float32x2_t v54 = (char *)v48[3];
      uint64_t v55 = (v51 - v54) >> 2;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62) {
        goto LABEL_360;
      }
      uint64_t v57 = v50 - (void)v54;
      if (v57 >> 1 > v56) {
        unint64_t v56 = v57 >> 1;
      }
      BOOL v230 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v230) {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        unint64_t v58 = (unint64_t)sub_25B3FBC64(v58);
        float32x2_t v54 = (char *)v49[3];
        float32x2_t v51 = (char *)v49[4];
      }
      else
      {
        uint64_t v59 = 0;
      }
      BOOL v60 = (_DWORD *)(v58 + 4 * v55);
      unint64_t v61 = v58 + 4 * v59;
      _DWORD *v60 = v42;
      int v52 = v60 + 1;
      while (v51 != v54)
      {
        int v62 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *--BOOL v60 = v62;
      }
      v49[3] = v60;
      v49[4] = v52;
      v49[5] = v61;
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      *(_DWORD *)float32x2_t v51 = v42;
      int v52 = v51 + 4;
    }
    v49[4] = v52;
    unint64_t v42 = __p;
  }
  uint64_t v63 = (_DWORD *)sub_25B3FA294((uint64_t)v255, v42, &__p)[3];
  unint64_t v64 = sub_25B3FA294((uint64_t)v255, v42, &__p);
  uint64_t v65 = (_DWORD *)v64[4];
  if (v63 != v65)
  {
    while (*v63 != v272)
    {
      if (++v63 == v65)
      {
        uint64_t v63 = (_DWORD *)v64[4];
        break;
      }
    }
  }
  if (v63 != (_DWORD *)sub_25B3FA294((uint64_t)v255, v42, &__p)[4]) {
    goto LABEL_127;
  }
  unint64_t v66 = sub_25B3FA294((uint64_t)v255, v42, &__p);
  unint64_t v42 = (unint64_t)v66;
  uint64_t v68 = (char *)v66[4];
  unint64_t v67 = v66[5];
  if ((unint64_t)v68 >= v67)
  {
    int v70 = (char *)v66[3];
    uint64_t v71 = (v68 - v70) >> 2;
    unint64_t v72 = v71 + 1;
    if (!((unint64_t)(v71 + 1) >> 62))
    {
      uint64_t v73 = v67 - (void)v70;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      BOOL v230 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v230) {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        unint64_t v74 = (unint64_t)sub_25B3FBC64(v74);
        int v70 = *(char **)(v42 + 24);
        uint64_t v68 = *(char **)(v42 + 32);
      }
      else
      {
        uint64_t v75 = 0;
      }
      id v76 = (_DWORD *)(v74 + 4 * v71);
      unint64_t v77 = v74 + 4 * v75;
      *id v76 = v272;
      uint64_t v69 = v76 + 1;
      while (v68 != v70)
      {
        int v78 = *((_DWORD *)v68 - 1);
        v68 -= 4;
        *--id v76 = v78;
      }
      *(void *)(v42 + 24) = v76;
      *(void *)(v42 + 32) = v69;
      *(void *)(v42 + 40) = v77;
      if (v70) {
        operator delete(v70);
      }
      goto LABEL_126;
    }
LABEL_360:
    sub_25B3FBC4C();
  }
  *(_DWORD *)uint64_t v68 = v272;
  uint64_t v69 = v68 + 4;
LABEL_126:
  *(void *)(v42 + 32) = v69;
LABEL_127:
  uint64_t v79 = (int *)operator new(4uLL);
  int *v79 = a1;
  memset(v267, 0, sizeof(v267));
  int v268 = 1065353216;
  long long v264 = 0;
  long long v265 = 0;
  uint64_t v266 = 0;
  LOBYTE(v262) = 0;
  uint64_t v234 = v79;
  uint64_t v235 = v79;
  char v263 = 0;
  while (1)
  {
    if (sub_25B3FAE64(v267, a1))
    {
      uint64_t v80 = v234;
      float32x2_t v81 = v235;
      goto LABEL_327;
    }
    long long v259 = 0;
    uint64_t v260 = 0;
    uint64_t v261 = 0;
    LODWORD(v272) = a1;
    sub_25B3FB200((uint64_t)v258, (int *)&v272, 1);
    LODWORD(v272) = a1;
    sub_25B3FB200((uint64_t)v257, (int *)&v272, 1);
    v256[0] = 0;
    v256[4] = 0;
    unint64_t v286 = 0;
    long long v82 = operator new(0x40uLL);
    *long long v82 = &unk_2708F1650;
    v82[1] = v267;
    v82[2] = v256;
    v82[3] = &v259;
    v82[4] = v257;
    v82[5] = &v264;
    v82[6] = &v262;
    v82[7] = v258;
    unint64_t v286 = v82;
    float32x2_t v83 = (int *)operator new(4uLL);
    *float32x2_t v83 = a1;
    memset(v281, 0, sizeof(v281));
    int v282 = 1065353216;
    memset(v279, 0, sizeof(v279));
    int v280 = 1065353216;
    long long v276 = 0u;
    long long v277 = 0u;
    float v278 = 1.0;
    uint64_t v233 = v83;
    int v275 = *v83;
    long long v273 = 0u;
    long long v274 = 0u;
    long long v272 = 0u;
    sub_25B4B91FC(&v272, &v275);
    uint64_t v84 = *((void *)&v274 + 1);
    while (v84)
    {
      int v85 = *(_DWORD *)(*(void *)(*((void *)&v272 + 1)
                                  + (((unint64_t)(v84 + v274 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v84 + v274 - 1) & 0x3FF));
      unint64_t v86 = v85;
      int v241 = v85;
      if (sub_25B3FAE64(v279, v85)) {
        goto LABEL_270;
      }
      long long v270 = 0u;
      long long v271 = 0u;
      long long __p = 0u;
      int32x2_t v87 = sub_25B4B9780((uint64_t)v255[0], (unint64_t)v255[1], v241);
      if (v87)
      {
        float v88 = (unsigned int *)v87[3];
        uint64_t v237 = (unsigned int *)v87[4];
        if (v88 != v237)
        {
          uint64_t v89 = 0;
          unint64_t v90 = 0;
          int v236 = (void *)v86;
          while (2)
          {
            uint64_t v91 = (void **)v270;
            char v92 = (void **)*((void *)&__p + 1);
            uint64_t v93 = v270 - *((void *)&__p + 1);
            unint64_t v42 = *v88;
            if ((void)v270 == *((void *)&__p + 1)) {
              uint64_t v94 = 0;
            }
            else {
              uint64_t v94 = (((void)v270 - *((void *)&__p + 1)) << 6) - 1;
            }
            unint64_t v95 = v89 + v90;
            if (v94 != v89 + v90) {
              goto LABEL_219;
            }
            if (v90 < 0x200)
            {
              uint64_t v106 = v93 >> 3;
              BOOL v107 = (void **)__p;
              uint64_t v108 = *((void *)&v270 + 1) - __p;
              if (v93 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v270 + 1) - __p) >> 3))
              {
                if (*((void *)&v270 + 1) == (void)__p) {
                  unint64_t v109 = 1;
                }
                else {
                  unint64_t v109 = v108 >> 2;
                }
                unint64_t v110 = (char *)sub_25B3FCAD4(v109);
                uint64_t v112 = v111;
                float32x2_t v113 = &v110[8 * v106];
                *(void *)&long long v114 = v110;
                *((void *)&v114 + 1) = v113;
                long long v243 = v114;
                char v115 = operator new(0x1000uLL);
                *(void *)&long long v116 = v113;
                *((void *)&v116 + 1) = &v110[8 * v112];
                if (v106 == v112)
                {
                  uint64_t v117 = 8 * v106;
                  unint64_t v86 = (unint64_t)v236;
                  if (v93 < 1)
                  {
                    uint64_t v172 = v117 >> 2;
                    if (v91 == v92) {
                      unint64_t v173 = 1;
                    }
                    else {
                      unint64_t v173 = v172;
                    }
                    uint64_t v174 = (char *)sub_25B3FCAD4(v173);
                    float32x2_t v113 = &v174[8 * (v173 >> 2)];
                    *(void *)&long long v176 = v174;
                    *((void *)&v176 + 1) = v113;
                    long long v243 = v176;
                    *(void *)&long long v116 = v113;
                    *((void *)&v116 + 1) = &v174[8 * v175];
                    if (v110)
                    {
                      long long v239 = v116;
                      operator delete(v110);
                      long long v116 = v239;
                    }
                  }
                  else
                  {
                    uint64_t v118 = v117 >> 3;
                    if (v118 >= -1) {
                      unint64_t v119 = v118 + 1;
                    }
                    else {
                      unint64_t v119 = v118 + 2;
                    }
                    v113 -= 8 * (v119 >> 1);
                    *(void *)&long long v116 = v113;
                    *(void *)&long long v120 = v243;
                    *((void *)&v120 + 1) = v113;
                    long long v243 = v120;
                  }
                }
                else
                {
                  unint64_t v86 = (unint64_t)v236;
                }
                *(void *)float32x2_t v113 = v115;
                *(void *)&long long v116 = v116 + 8;
                uint64_t v121 = v270;
                while (v121 != *((void *)&__p + 1))
                {
                  unint64_t v122 = (void *)*((void *)&v243 + 1);
                  if (*((void *)&v243 + 1) == (void)v243)
                  {
                    uint64_t v124 = v116;
                    if ((unint64_t)v116 >= *((void *)&v116 + 1))
                    {
                      if (*((void *)&v116 + 1) == *((void *)&v243 + 1)) {
                        unint64_t v129 = 1;
                      }
                      else {
                        unint64_t v129 = (uint64_t)(*((void *)&v116 + 1) - *((void *)&v243 + 1)) >> 2;
                      }
                      int32x2_t v130 = (char *)sub_25B3FCAD4(v129);
                      uint64_t v123 = &v130[(2 * v129 + 6) & 0xFFFFFFFFFFFFFFF8];
                      int32x2_t v132 = v123;
                      uint64_t v133 = v124 - *((void *)&v243 + 1);
                      if (v124 != *((void *)&v243 + 1))
                      {
                        int32x2_t v132 = &v123[v133 & 0xFFFFFFFFFFFFFFF8];
                        uint64_t v134 = 8 * (v133 >> 3);
                        int v135 = v123;
                        int v136 = (uint64_t *)*((void *)&v243 + 1);
                        do
                        {
                          uint64_t v137 = *v136++;
                          *(void *)int v135 = v137;
                          v135 += 8;
                          v134 -= 8;
                        }
                        while (v134);
                      }
                      *(void *)&long long v138 = v130;
                      *((void *)&v138 + 1) = v123;
                      long long v243 = v138;
                      *(void *)&long long v116 = v132;
                      *((void *)&v116 + 1) = &v130[8 * v131];
                      if (v122)
                      {
                        long long v238 = v116;
                        operator delete(v122);
                        long long v116 = v238;
                      }
                    }
                    else
                    {
                      uint64_t v125 = (uint64_t)(*((void *)&v116 + 1) - v116) >> 3;
                      if (v125 >= -1) {
                        uint64_t v126 = v125 + 1;
                      }
                      else {
                        uint64_t v126 = v125 + 2;
                      }
                      uint64_t v127 = v126 >> 1;
                      uint64_t v128 = v116 + 8 * (v126 >> 1);
                      uint64_t v123 = (char *)(v128 - (v116 - *((void *)&v243 + 1)));
                      if ((void)v116 == *((void *)&v243 + 1))
                      {
                        uint64_t v124 = *((void *)&v243 + 1);
                      }
                      else
                      {
                        uint64_t v240 = *((void *)&v116 + 1);
                        memmove((void *)(v128 - (v116 - *((void *)&v243 + 1))), *((const void **)&v243 + 1), v116 - *((void *)&v243 + 1));
                        *((void *)&v116 + 1) = v240;
                      }
                      *(void *)&long long v139 = v243;
                      *((void *)&v139 + 1) = v123;
                      long long v243 = v139;
                      *(void *)&long long v116 = v124 + 8 * v127;
                    }
                  }
                  else
                  {
                    uint64_t v123 = (char *)*((void *)&v243 + 1);
                  }
                  uint64_t v140 = *(void *)(v121 - 8);
                  v121 -= 8;
                  *((void *)v123 - 1) = v140;
                  *(void *)&long long v141 = v243;
                  *((void *)&v141 + 1) = *((void *)&v243 + 1) - 8;
                  long long v243 = v141;
                }
                long long v142 = (void *)__p;
                long long __p = v243;
                long long v270 = v116;
                if (v142)
                {
                  operator delete(v142);
                  uint64_t v91 = (void **)v270;
                }
                else
                {
                  uint64_t v91 = (void **)v116;
                }
              }
              else
              {
                if (*((void *)&v270 + 1) != (void)v270)
                {
                  *uint64_t v91 = operator new(0x1000uLL);
                  uint64_t v91 = (void **)(v270 + 8);
                  *(void *)&long long v270 = v270 + 8;
                  goto LABEL_217;
                }
                long long v152 = operator new(0x1000uLL);
                if (v107 == v92)
                {
                  if (v91 == v92) {
                    unint64_t v153 = 1;
                  }
                  else {
                    unint64_t v153 = v108 >> 2;
                  }
                  long long v154 = (char *)sub_25B3FCAD4(v153);
                  char v92 = (void **)&v154[(2 * v153 + 6) & 0xFFFFFFFFFFFFFFF8];
                  int v156 = (uint64_t *)*((void *)&__p + 1);
                  int v157 = v92;
                  uint64_t v158 = v270 - *((void *)&__p + 1);
                  if ((void)v270 != *((void *)&__p + 1))
                  {
                    int v157 = (void **)((char *)v92 + (v158 & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v159 = 8 * (v158 >> 3);
                    long long v160 = v92;
                    do
                    {
                      long long v161 = (void *)*v156++;
                      *v160++ = v161;
                      v159 -= 8;
                    }
                    while (v159);
                  }
                  uint64_t v162 = (void *)__p;
                  *(void *)&long long __p = v154;
                  *((void *)&__p + 1) = v92;
                  *(void *)&long long v270 = v157;
                  *((void *)&v270 + 1) = &v154[8 * v155];
                  if (v162)
                  {
                    operator delete(v162);
                    char v92 = (void **)*((void *)&__p + 1);
                  }
                }
                *(v92 - 1) = v152;
                uint64_t v163 = (char *)*((void *)&__p + 1);
                uint64_t v164 = (char *)v270;
                *((void *)&__p + 1) -= 8;
                uint64_t v165 = **((void **)&__p + 1);
                *((void *)&__p + 1) = v163;
                unint64_t v86 = (unint64_t)v236;
                if ((void)v270 == *((void *)&v270 + 1))
                {
                  uint64_t v166 = (uint64_t)&v163[-__p];
                  if ((unint64_t)v163 <= (unint64_t)__p)
                  {
                    if ((void)v270 == (void)__p) {
                      unint64_t v178 = 1;
                    }
                    else {
                      unint64_t v178 = (uint64_t)(v270 - __p) >> 2;
                    }
                    unint64_t v179 = (char *)sub_25B3FCAD4(v178);
                    long long v181 = (uint64_t *)*((void *)&__p + 1);
                    uint64_t v164 = &v179[8 * (v178 >> 2)];
                    uint64_t v182 = v270 - *((void *)&__p + 1);
                    if ((void)v270 != *((void *)&__p + 1))
                    {
                      uint64_t v164 = &v179[8 * (v178 >> 2) + (v182 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v183 = 8 * (v182 >> 3);
                      unint64_t v184 = &v179[8 * (v178 >> 2)];
                      do
                      {
                        uint64_t v185 = *v181++;
                        *(void *)unint64_t v184 = v185;
                        v184 += 8;
                        v183 -= 8;
                      }
                      while (v183);
                    }
                    unint64_t v186 = (void *)__p;
                    *(void *)&long long __p = v179;
                    *((void *)&__p + 1) = &v179[8 * (v178 >> 2)];
                    *(void *)&long long v270 = v164;
                    *((void *)&v270 + 1) = &v179[8 * v180];
                    unint64_t v86 = (unint64_t)v236;
                    if (v186)
                    {
                      operator delete(v186);
                      uint64_t v164 = (char *)v270;
                    }
                  }
                  else
                  {
                    uint64_t v167 = v166 >> 3;
                    BOOL v100 = v166 >> 3 < -1;
                    uint64_t v168 = (v166 >> 3) + 2;
                    if (v100) {
                      uint64_t v169 = v168;
                    }
                    else {
                      uint64_t v169 = v167 + 1;
                    }
                    uint64_t v170 = &v163[-8 * (v169 >> 1)];
                    uint64_t v171 = v270 - (void)v163;
                    if ((char *)v270 != v163)
                    {
                      memmove(&v163[-8 * (v169 >> 1)], v163, v270 - (void)v163);
                      uint64_t v163 = (char *)*((void *)&__p + 1);
                    }
                    uint64_t v164 = &v170[v171];
                    *((void *)&__p + 1) = &v163[-8 * (v169 >> 1)];
                    *(void *)&long long v270 = &v170[v171];
                  }
                }
                *(void *)uint64_t v164 = v165;
                uint64_t v91 = (void **)(v270 + 8);
                *(void *)&long long v270 = v270 + 8;
              }
            }
            else
            {
              *(void *)&long long v271 = v90 - 512;
              BOOL v96 = (char *)(*((void *)&__p + 1) + 8);
              int v97 = (void *)**((void **)&__p + 1);
              *((void *)&__p + 1) += 8;
              if (*((void *)&v270 + 1) == (void)v270)
              {
                uint64_t v98 = (uint64_t)&v96[-__p];
                if ((unint64_t)v96 <= (unint64_t)__p)
                {
                  if ((void)v270 == (void)__p) {
                    unint64_t v143 = 1;
                  }
                  else {
                    unint64_t v143 = (uint64_t)(v270 - __p) >> 2;
                  }
                  unint64_t v144 = (char *)sub_25B3FCAD4(v143);
                  uint64_t v146 = (uint64_t *)*((void *)&__p + 1);
                  uint64_t v91 = (void **)&v144[8 * (v143 >> 2)];
                  uint64_t v147 = v270 - *((void *)&__p + 1);
                  if ((void)v270 != *((void *)&__p + 1))
                  {
                    uint64_t v91 = (void **)&v144[8 * (v143 >> 2) + (v147 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v148 = 8 * (v147 >> 3);
                    unint64_t v149 = &v144[8 * (v143 >> 2)];
                    do
                    {
                      uint64_t v150 = *v146++;
                      *(void *)unint64_t v149 = v150;
                      v149 += 8;
                      v148 -= 8;
                    }
                    while (v148);
                  }
                  long long v151 = (void *)__p;
                  *(void *)&long long __p = v144;
                  *((void *)&__p + 1) = &v144[8 * (v143 >> 2)];
                  *(void *)&long long v270 = v91;
                  *((void *)&v270 + 1) = &v144[8 * v145];
                  if (v151)
                  {
                    operator delete(v151);
                    uint64_t v91 = (void **)v270;
                  }
                }
                else
                {
                  uint64_t v99 = v98 >> 3;
                  BOOL v100 = v98 >> 3 < -1;
                  uint64_t v101 = (v98 >> 3) + 2;
                  if (v100) {
                    uint64_t v102 = v101;
                  }
                  else {
                    uint64_t v102 = v99 + 1;
                  }
                  float v103 = &v96[-8 * (v102 >> 1)];
                  uint64_t v104 = v270 - (void)v96;
                  if ((char *)v270 == v96)
                  {
                    uint64_t v105 = v270;
                  }
                  else
                  {
                    memmove(&v96[-8 * (v102 >> 1)], v96, v270 - (void)v96);
                    uint64_t v105 = *((void *)&__p + 1);
                  }
                  uint64_t v91 = (void **)&v103[v104];
                  *((void *)&__p + 1) = v105 - 8 * (v102 >> 1);
                  *(void *)&long long v270 = &v103[v104];
                }
              }
              *uint64_t v91 = v97;
              uint64_t v91 = (void **)(v270 + 8);
              *(void *)&long long v270 = v270 + 8;
LABEL_217:
              unint64_t v86 = (unint64_t)v236;
            }
            uint64_t v89 = *((void *)&v271 + 1);
            unint64_t v90 = v271;
            char v92 = (void **)*((void *)&__p + 1);
            unint64_t v95 = v271 + *((void *)&v271 + 1);
LABEL_219:
            unint64_t v177 = (int *)(*(char **)((char *)v92 + ((v95 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v95 & 0x1FF));
            int *v177 = v241;
            v177[1] = v42;
            *((void *)&v271 + 1) = ++v89;
            if (++v88 == v237) {
              goto LABEL_231;
            }
            continue;
          }
        }
      }
      uint64_t v91 = 0;
LABEL_231:
      unint64_t v187 = *((void *)&v276 + 1);
      if (*((void *)&v276 + 1))
      {
        uint8x8_t v188 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v276 + 8));
        v188.i16[0] = vaddlv_u8(v188);
        if (v188.u32[0] > 1uLL)
        {
          unint64_t v42 = v86;
          if (*((void *)&v276 + 1) <= v86) {
            unint64_t v42 = v86 % *((void *)&v276 + 1);
          }
        }
        else
        {
          unint64_t v42 = (*((void *)&v276 + 1) - 1) & v86;
        }
        uint64_t v189 = *(uint64_t ***)(v276 + 8 * v42);
        if (v189)
        {
          for (uint64_t j = *v189; j; uint64_t j = (uint64_t *)*j)
          {
            unint64_t v191 = j[1];
            if (v191 == v86)
            {
              if (*((_DWORD *)j + 4) == v241) {
                goto LABEL_269;
              }
            }
            else
            {
              if (v188.u32[0] > 1uLL)
              {
                if (v191 >= *((void *)&v276 + 1)) {
                  v191 %= *((void *)&v276 + 1);
                }
              }
              else
              {
                v191 &= *((void *)&v276 + 1) - 1;
              }
              if (v191 != v42) {
                break;
              }
            }
          }
        }
      }
      uint64_t v192 = (char *)operator new(0x48uLL);
      v283[0] = v192;
      v283[1] = &v277;
      *(void *)uint64_t v192 = 0;
      *((void *)v192 + 1) = v86;
      *((_DWORD *)v192 + 4) = v241;
      *(_OWORD *)(v192 + 24) = __p;
      uint64_t v193 = *((void *)&v270 + 1);
      *((void *)v192 + 5) = v91;
      *((void *)v192 + 6) = v193;
      long long __p = 0u;
      long long v270 = 0u;
      *(_OWORD *)(v192 + 56) = v271;
      long long v271 = 0uLL;
      char v284 = 1;
      float v194 = (float)(unint64_t)(*((void *)&v277 + 1) + 1);
      if (!v187 || (float)(v278 * (float)v187) < v194)
      {
        BOOL v195 = (v187 & (v187 - 1)) != 0;
        if (v187 < 3) {
          BOOL v195 = 1;
        }
        unint64_t v196 = v195 | (2 * v187);
        unint64_t v197 = vcvtps_u32_f32(v194 / v278);
        if (v196 <= v197) {
          size_t v198 = v197;
        }
        else {
          size_t v198 = v196;
        }
        sub_25B3FA4B0((uint64_t)&v276, v198);
        unint64_t v187 = *((void *)&v276 + 1);
        if ((*((void *)&v276 + 1) & (*((void *)&v276 + 1) - 1)) != 0)
        {
          if (*((void *)&v276 + 1) <= v86) {
            unint64_t v42 = v86 % *((void *)&v276 + 1);
          }
          else {
            unint64_t v42 = v86;
          }
        }
        else
        {
          unint64_t v42 = (*((void *)&v276 + 1) - 1) & v86;
        }
      }
      uint64_t v199 = v276;
      uint64_t v200 = *(void **)(v276 + 8 * v42);
      if (v200)
      {
        *(void *)uint64_t v192 = *v200;
      }
      else
      {
        *(void *)uint64_t v192 = v277;
        *(void *)&long long v277 = v192;
        *(void *)(v199 + 8 * v42) = &v277;
        if (!*(void *)v192) {
          goto LABEL_268;
        }
        unint64_t v201 = *(void *)(*(void *)v192 + 8);
        if ((v187 & (v187 - 1)) != 0)
        {
          if (v201 >= v187) {
            v201 %= v187;
          }
        }
        else
        {
          v201 &= v187 - 1;
        }
        uint64_t v200 = (void *)(v276 + 8 * v201);
      }
      *uint64_t v200 = v192;
LABEL_268:
      v283[0] = 0;
      ++*((void *)&v277 + 1);
      sub_25B4B9D68((uint64_t)v283);
LABEL_269:
      sub_25B3FAF64((uint64_t)v279, v241, v241);
      sub_25B4B982C((uint64_t)&__p);
LABEL_270:
      unint64_t v202 = *((void *)&v276 + 1);
      if (*((void *)&v276 + 1))
      {
        uint8x8_t v203 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v276 + 8));
        v203.i16[0] = vaddlv_u8(v203);
        if (v203.u32[0] > 1uLL)
        {
          unint64_t v42 = v86;
          if (*((void *)&v276 + 1) <= v86) {
            unint64_t v42 = v86 % *((void *)&v276 + 1);
          }
        }
        else
        {
          unint64_t v42 = (*((void *)&v276 + 1) - 1) & v86;
        }
        unint64_t v204 = *(void ***)(v276 + 8 * v42);
        if (v204)
        {
          uint64_t v205 = (char *)*v204;
          if (*v204)
          {
            do
            {
              unint64_t v206 = *((void *)v205 + 1);
              if (v206 == v86)
              {
                if (*((_DWORD *)v205 + 4) == v241) {
                  goto LABEL_308;
                }
              }
              else
              {
                if (v203.u32[0] > 1uLL)
                {
                  if (v206 >= *((void *)&v276 + 1)) {
                    v206 %= *((void *)&v276 + 1);
                  }
                }
                else
                {
                  v206 &= *((void *)&v276 + 1) - 1;
                }
                if (v206 != v42) {
                  break;
                }
              }
              uint64_t v205 = *(char **)v205;
            }
            while (v205);
          }
        }
      }
      uint64_t v205 = (char *)operator new(0x48uLL);
      *(void *)&long long __p = v205;
      *((void *)&__p + 1) = &v277;
      *(void *)uint64_t v205 = 0;
      *((void *)v205 + 1) = v86;
      *((_DWORD *)v205 + 4) = v241;
      *(_OWORD *)(v205 + 24) = 0u;
      *(_OWORD *)(v205 + 40) = 0u;
      *(_OWORD *)(v205 + 56) = 0u;
      LOBYTE(v270) = 1;
      float v207 = (float)(unint64_t)(*((void *)&v277 + 1) + 1);
      if (!v202 || (float)(v278 * (float)v202) < v207)
      {
        BOOL v208 = (v202 & (v202 - 1)) != 0;
        if (v202 < 3) {
          BOOL v208 = 1;
        }
        unint64_t v209 = v208 | (2 * v202);
        unint64_t v210 = vcvtps_u32_f32(v207 / v278);
        if (v209 <= v210) {
          size_t v211 = v210;
        }
        else {
          size_t v211 = v209;
        }
        sub_25B3FA4B0((uint64_t)&v276, v211);
        unint64_t v202 = *((void *)&v276 + 1);
        if ((*((void *)&v276 + 1) & (*((void *)&v276 + 1) - 1)) != 0)
        {
          if (*((void *)&v276 + 1) <= v86) {
            unint64_t v42 = v86 % *((void *)&v276 + 1);
          }
          else {
            unint64_t v42 = v86;
          }
        }
        else
        {
          unint64_t v42 = (*((void *)&v276 + 1) - 1) & v86;
        }
      }
      uint64_t v212 = v276;
      float32x2_t v213 = *(void **)(v276 + 8 * v42);
      if (v213)
      {
        *(void *)uint64_t v205 = *v213;
LABEL_306:
        void *v213 = v205;
        goto LABEL_307;
      }
      *(void *)uint64_t v205 = v277;
      *(void *)&long long v277 = v205;
      *(void *)(v212 + 8 * v42) = &v277;
      if (*(void *)v205)
      {
        unint64_t v214 = *(void *)(*(void *)v205 + 8);
        if ((v202 & (v202 - 1)) != 0)
        {
          if (v214 >= v202) {
            v214 %= v202;
          }
        }
        else
        {
          v214 &= v202 - 1;
        }
        float32x2_t v213 = (void *)(v276 + 8 * v214);
        goto LABEL_306;
      }
LABEL_307:
      *(void *)&long long __p = 0;
      ++*((void *)&v277 + 1);
      sub_25B4B9D68((uint64_t)&__p);
LABEL_308:
      uint64_t v215 = *((void *)v205 + 8);
      if (v215)
      {
        long long v216 = (void **)*((void *)v205 + 4);
        unint64_t v217 = *((void *)v205 + 7);
        uint64_t v218 = (*(void **)((char *)v216 + ((v217 >> 6) & 0x3FFFFFFFFFFFFF8)))[v217 & 0x1FF];
        *(void *)&long long __p = v218;
        *((void *)v205 + 7) = ++v217;
        *((void *)v205 + 8) = v215 - 1;
        if (v217 >= 0x400)
        {
          operator delete(*v216);
          *((void *)v205 + 4) += 8;
          *((void *)v205 + 7) -= 512;
          uint64_t v218 = __p;
        }
        long long v219 = v281[0];
        if (!sub_25B4B98F4(*(uint64_t *)&v281[0], *((unint64_t *)&v281[0] + 1), v218, SHIDWORD(v218)))
        {
          int v220 = DWORD1(__p);
          double v244 = *(double *)&__p;
          int v221 = __p;
          if (!sub_25B4B98F4(v219, *((unint64_t *)&v219 + 1), SDWORD1(__p), __p))
          {
            sub_25B4B99E8((uint64_t)v281, v221, v220, v244);
            sub_25B4B91FC(&v272, (_DWORD *)&__p + 1);
            if (!v286) {
              sub_25B3FAF18();
            }
            if (((*(uint64_t (**)(void *, long long *))(*v286 + 48))(v286, &__p) & 1) == 0) {
              break;
            }
          }
        }
      }
      else
      {
        uint64_t v222 = (((void)v273 - *((void *)&v272 + 1)) << 7) - 1;
        if ((void)v273 == *((void *)&v272 + 1)) {
          uint64_t v222 = 0;
        }
        uint64_t v84 = *((void *)&v274 + 1) - 1;
        *((void *)&v274 + 1) = v84;
        if ((unint64_t)(v222 - (v84 + v274)) < 0x800) {
          continue;
        }
        operator delete(*(void **)(v273 - 8));
        *(void *)&long long v273 = v273 - 8;
      }
      uint64_t v84 = *((void *)&v274 + 1);
    }
    sub_25B4B9C40((uint64_t)&v272);
    sub_25B4B9D08((uint64_t)&v276);
    sub_25B3FB178((uint64_t)v279);
    sub_25B3FB178((uint64_t)v281);
    operator delete(v233);
    sub_25B4B90F0(v285);
    unint64_t v223 = v264;
    unint64_t v42 = (unint64_t)v265;
    if (v264 == v265) {
      sub_25B4B9174(v267, v258);
    }
    sub_25B3FB178((uint64_t)v257);
    sub_25B3FB178((uint64_t)v258);
    if (v259)
    {
      uint64_t v260 = v259;
      operator delete(v259);
    }
    uint64_t v80 = v234;
    float32x2_t v81 = v235;
    if (v223 != (char *)v42) {
      break;
    }
LABEL_327:
    if (v81 == v80) {
      break;
    }
    a1 = v81[1];
    uint64_t v235 = v81 + 1;
  }
  uint64_t v225 = v264;
  long long v224 = v265;
  if (v264 == v265)
  {
    char v228 = 0;
    long long v224 = 0;
    if (v264)
    {
LABEL_337:
      long long v265 = v225;
      operator delete(v225);
    }
  }
  else
  {
    uint64_t v226 = v264;
    do
    {
      if (v263 && *(_DWORD *)v226 == v262)
      {
        if (v264 != v226)
        {
          if (v226 == v265)
          {
            long long v224 = v264;
          }
          else
          {
            uint64_t v229 = 8 * ((v226 - v264) >> 3);
            do
            {
              *(void *)uint64_t v225 = *(void *)&v225[v229];
              v225 += 8;
            }
            while (&v225[v229] != v224);
            long long v224 = v225;
            uint64_t v225 = v264;
          }
        }
        char v228 = v225;
        goto LABEL_345;
      }
      v226 += 8;
    }
    while (v226 != v265);
    uint64_t v227 = *((void *)v265 - 1);
    char v228 = (char *)operator new(8uLL);
    *(void *)char v228 = v227;
    long long v224 = v228 + 8;
    if (v225) {
      goto LABEL_337;
    }
  }
LABEL_345:
  sub_25B3FB178((uint64_t)v267);
  operator delete(v234);
  BOOL v230 = v224 == v228 || (unint64_t)(v224 - v228) >= 0x20;
  uint64_t v53 = !v230;
  if (v228) {
    operator delete(v228);
  }
  sub_25B3FAE18((void *)v255[2]);
  int v231 = v255[0];
  v255[0] = 0;
  if (v231) {
    operator delete(v231);
  }
  if (v252)
  {
    unint64_t v253 = v252;
    operator delete(v252);
  }
  sub_25B3FB178((uint64_t)&v249);
  sub_25B4B7240(v247);
  sub_25B3FAD70(v245[1]);
  return v53;
}

void sub_25B4B8BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (v63)
  {
    a61 = (uint64_t)v63;
    operator delete(v63);
  }
  sub_25B3FB178((uint64_t)&a63);
  operator delete(__p);
  sub_25B4B8EC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4B8D5C(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  uint64_t v35 = v6;
  uint64_t v36 = v5;
  uint64_t v37 = v3;
  uint64_t v38 = v4;
  uint64_t v10 = a2;
  while (1)
  {
    float v12 = sub_25B3FCCE0(a1, v10, 0);
    sub_25B3FD008(&v31, a1, v10);
    int v13 = v31 + 1;
    BOOL v14 = v31 == v32 || v13 == v32;
    float32x2_t v15 = v31;
    if (!v14)
    {
      float v16 = *v31;
      float32x2_t v15 = v31;
      int v17 = v31 + 1;
      do
      {
        float v18 = *v17++;
        float v19 = v18;
        if (v18 < v16)
        {
          float v16 = v19;
          float32x2_t v15 = v13;
        }
        int v13 = v17;
      }
      while (v17 != v32);
    }
    float v20 = fabsf(v12);
    if (v20 > 165.0 || v20 < 15.0)
    {
      unint64_t v22 = v15 - v31;
      float32x2_t v23 = a1[v22 >> 1];
      uint64_t v24 = 1 - (v22 >> 1);
      unint64_t v25 = v22 & 1;
      float32x2_t v26 = vsub_f32(v23, v10[v25]);
      float32x2_t v27 = vsub_f32(a1[v24], v10[v25 ^ 1]);
      int32x2_t v28 = (int32x2_t)vmul_f32(v26, v26);
      int32x2_t v29 = (int32x2_t)vmul_f32(v27, v27);
      if ((float)(vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v28, v29), (float32x2_t)vzip2_s32(v28, v29))))
                 * 0.5) < 0.5)
        break;
    }
    if (v31) {
      operator delete(v31);
    }
    v10 += 2;
    if (v10 == a3) {
      return 0;
    }
  }
  if (v31) {
    operator delete(v31);
  }
  return 1;
}

uint64_t sub_25B4B8EC8(uint64_t a1)
{
  sub_25B3FACCC(a1 + 112);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_25B3FB178(a1 + 48);
  sub_25B4B7240(*(void **)(a1 + 32));
  sub_25B3FAD70(*(void **)(a1 + 8));
  return a1;
}

void sub_25B4B8F1C(void **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  id v9 = a1 + 2;
  uint64_t v10 = a1[2];
  unint64_t v11 = (unint64_t)a1[1];
  if (a5 > (uint64_t)&v10[-v11] >> 2)
  {
    float v12 = *a1;
    unint64_t v13 = a5 + ((uint64_t)(v11 - (void)*a1) >> 2);
    if (v13 >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v14 = (__dst - v12) >> 2;
    uint64_t v15 = v10 - v12;
    if (v15 >> 1 > v13) {
      unint64_t v13 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __p[4] = v9;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_25B3FBC64(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    float32x2_t v27 = (_DWORD *)(v16 + 4 * v14);
    __p[0] = (void *)v16;
    __p[1] = v27;
    __p[3] = (void *)(v16 + 4 * v17);
    uint64_t v28 = 4 * a5;
    int32x2_t v29 = &v27[a5];
    do
    {
      int v30 = *(_DWORD *)v6;
      v6 += 4;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __p[2] = v29;
    sub_25B3FF094(a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = v11 - (void)__dst;
  uint64_t v19 = (uint64_t)(v11 - (void)__dst) >> 2;
  if (v19 >= a5)
  {
    float v20 = &__src[4 * a5];
    unint64_t v22 = (char *)a1[1];
LABEL_17:
    float32x2_t v23 = &__dst[4 * a5];
    uint64_t v24 = &v22[-4 * a5];
    unint64_t v25 = v22;
    if ((unint64_t)v24 < v11)
    {
      unint64_t v25 = v22;
      do
      {
        int v26 = *(_DWORD *)v24;
        v24 += 4;
        *(_DWORD *)unint64_t v25 = v26;
        v25 += 4;
      }
      while ((unint64_t)v24 < v11);
    }
    a1[1] = v25;
    if (v22 != v23) {
      memmove(&v22[-4 * ((v22 - v23) >> 2)], __dst, v22 - v23);
    }
    if (v20 != v6)
    {
      memmove(__dst, v6, v20 - v6);
    }
    return;
  }
  float v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1[1], &__src[4 * v19], a4 - v20);
  }
  unint64_t v22 = (char *)(v11 + v21);
  a1[1] = (void *)(v11 + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

void *sub_25B4B90F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_25B4B9174(uint64_t *result, void *a2)
{
  uint64_t v2 = (uint64_t *)a2[2];
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      int v5 = *((_DWORD *)v2 + 4);
      uint64_t v6 = v5;
      BOOL result = sub_25B3FB40C((uint64_t)v4, v5, v5);
      uint64_t v7 = (uint64_t *)*v2;
      if (!result)
      {
        sub_25B474498((uint64_t)v8, a2, v2);
        v2[1] = v6;
        BOOL result = sub_25B3FB520(v4, v2);
      }
      uint64_t v2 = v7;
    }
    while (v7);
  }
  return result;
}

void sub_25B4B91FC(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v5;
      unint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          float32x2_t v43 = (char *)sub_25B3FCAD4(v42);
          float32x2_t v45 = &v43[8 * (v42 >> 2)];
          BOOL v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            uint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)uint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          float32x2_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          int64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            float32x2_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            float32x2_t v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unint64_t v25 = (char *)a1[3];
    int v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      int32x2_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          float32x2_t v54 = (char *)sub_25B3FCAD4(v52);
          int v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v56 = (uint64_t *)a1[1];
          uint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            uint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            BOOL v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)BOOL v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          int v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        unint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            uint64_t v98 = (char *)sub_25B3FCAD4(v97);
            BOOL v100 = &v98[8 * (v97 >> 2)];
            uint64_t v101 = (uint64_t *)a1[1];
            unint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              unint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              uint64_t v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)uint64_t v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            uint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              unint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            unint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            unint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)unint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    int v31 = (char *)sub_25B3FCAD4(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    uint64_t v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      id v76 = (char *)sub_25B3FCAD4(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        float32x2_t v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          int32x2_t v87 = (char *)sub_25B3FCAD4(v86);
          uint64_t v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            char v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)char v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          uint64_t v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            float32x2_t v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        uint64_t v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    BOOL v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(void *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_25B4B9750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_25B4B9780(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  int v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (BOOL result = *v5; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_25B4B982C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint8x8_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint8x8_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_25B4B98F4(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (a4 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  if (a4 <= a3) {
    int v5 = a3;
  }
  else {
    int v5 = a4;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v6 = (((v4 + 2654435769) << 6) + v5 + ((unint64_t)(v4 + 2654435769) >> 2) + 2654435769u) ^ (v4 + 2654435769);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= a2) {
      unint64_t v8 = v6 % a2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (a2 - 1);
  }
  uint64_t v9 = *(uint64_t ***)(a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (BOOL result = *v9; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      int v12 = *((_DWORD *)result + 4);
      if (v12 == a3 && *((_DWORD *)result + 5) == a4 || v12 == a4 && *((_DWORD *)result + 5) == a3) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= a2) {
          v11 %= a2;
        }
      }
      else
      {
        v11 &= a2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B4B99E8(uint64_t a1, int a2, int a3, double a4)
{
  if (a3 >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = a3;
  }
  unint64_t v8 = v7 + 2654435769;
  if (a3 <= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  unint64_t v10 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
    }
    else
    {
      uint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          int v16 = *((_DWORD *)i + 4);
          if (v16 == a2 && *((_DWORD *)i + 5) == a3 || v16 == a3 && *((_DWORD *)i + 5) == a2) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (double *)operator new(0x18uLL);
  *uint64_t v17 = 0.0;
  *((void *)v17 + 1) = v10;
  v17[2] = a4;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_25B3FA4B0(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    else
    {
      uint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t v17 = *v25;
LABEL_47:
    char *v25 = v17;
    goto LABEL_48;
  }
  *uint64_t v17 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)v17)
  {
    unint64_t v26 = *(void *)(*(void *)v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    unint64_t v25 = (double **)(*(void *)a1 + 8 * v26);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_25B4B9C2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4B9C40(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint8x8_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint8x8_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B4B9D08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      sub_25B4B982C((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_25B4B9D68(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25B4B982C((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t sub_25B4B9DC0(uint64_t a1, int *a2)
{
  int v5 = *a2;
  int v4 = a2[1];
  if (!sub_25B3FAE64(*(void **)(a1 + 8), v4))
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v7 + 4) && v5 != *(_DWORD *)v7)
    {
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = *v9;
      uint64_t v13 = v9[1];
      unint64_t v11 = v9 + 1;
      uint64_t v12 = v13;
      if (v10 != v13)
      {
        int v14 = *(_DWORD *)(v12 - 4);
        while (1)
        {
          void *v11 = v12 - 8;
          sub_25B473798(*(void **)(a1 + 32), v14);
          unint64_t v15 = *(uint64_t **)(a1 + 24);
          uint64_t v16 = *v15;
          uint64_t v17 = v15[1];
          unint64_t v11 = v15 + 1;
          uint64_t v12 = v17;
          if (v16 == v17) {
            break;
          }
          int v14 = *(_DWORD *)(v12 - 4);
          if (v5 == v14) {
            goto LABEL_11;
          }
        }
      }
      int v77 = v5;
      sub_25B3FB2F0(*(void **)(a1 + 32), &v77, (int *)&v78);
    }
LABEL_11:
    float v18 = *(void ***)(a1 + 24);
    BOOL v20 = v18[1];
    unint64_t v19 = (unint64_t)v18[2];
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v22 = ((char *)v20 - (unsigned char *)*v18) >> 3;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_65;
      }
      uint64_t v23 = v19 - (void)*v18;
      uint64_t v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
        uint64_t v24 = v22 + 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      unint64_t v26 = (char *)sub_25B3FCAD4(v25);
      uint64_t v27 = &v26[8 * v22];
      int32x2_t v29 = &v26[8 * v28];
      *(void *)uint64_t v27 = *(void *)a2;
      unint64_t v21 = v27 + 8;
      unint64_t v30 = (char *)*v18;
      for (uint64_t i = (char *)v18[1]; i != v30; i -= 8)
      {
        uint64_t v32 = *((void *)i - 1);
        *((void *)v27 - 1) = v32;
        v27 -= 8;
      }
      void *v18 = v27;
      v18[1] = v21;
      void v18[2] = v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *BOOL v20 = *(void *)a2;
      unint64_t v21 = v20 + 1;
    }
    v18[1] = v21;
    uint64_t v33 = sub_25B3FAE64(*(void **)(a1 + 32), v4);
    BOOL v6 = v33 == 0;
    if (!v33)
    {
      sub_25B3FAF64(*(void *)(a1 + 56), v4, v4);
      sub_25B3FAF64(*(void *)(a1 + 32), v4, v4);
LABEL_63:
      uint64_t v75 = *v8;
      *(_DWORD *)uint64_t v75 = v4;
      *(unsigned char *)(v75 + 4) = 1;
      return v6;
    }
    uint64_t v34 = *(uint64_t ***)(a1 + 24);
    uint64_t v36 = *v34;
    long long v35 = v34[1];
    uint64_t v37 = (char *)v35 - (char *)*v34;
    if (v37 >= 1)
    {
      uint64_t v38 = *(uint64_t ***)(a1 + 40);
      uint64_t v39 = v37 >> 3;
      uint64_t v40 = *v38;
      unint64_t v41 = (unint64_t)v38[1];
      uint64_t v42 = v41 - (void)*v38;
      uint64_t v43 = v42 >> 3;
      uint64_t v44 = (uint64_t *)((char *)*v38 + (v42 & 0xFFFFFFFFFFFFFFF8));
      float32x2_t v45 = v38[2];
      if (v39 > (uint64_t)((uint64_t)v45 - v41) >> 3)
      {
        if (!((unint64_t)(v43 + v39) >> 61))
        {
          uint64_t v46 = (char *)v45 - (char *)v40;
          uint64_t v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v43 + v39)) {
            uint64_t v47 = v43 + v39;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            unint64_t v48 = (unint64_t)sub_25B3FCAD4(v48);
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v55 = (void *)(v48 + 8 * v43);
          unint64_t v56 = &v55[v39];
          uint64_t v57 = 8 * v39;
          uint64_t v58 = v55;
          do
          {
            uint64_t v59 = *v36++;
            *v58++ = v59;
            v57 -= 8;
          }
          while (v57);
          BOOL v60 = *v38;
          if (*v38 != v44)
          {
            uint64_t v61 = v44;
            do
            {
              uint64_t v62 = *--v61;
              *--uint64_t v55 = v62;
            }
            while (v61 != v60);
          }
          unint64_t v63 = v48 + 8 * v49;
          for (uint64_t j = v38[1]; v44 != j; ++v56)
          {
            uint64_t v65 = *v44++;
            uint64_t *v56 = v65;
          }
          uint64_t v66 = *v38;
          *uint64_t v38 = v55;
          v38[1] = v56;
          v38[2] = (uint64_t *)v63;
          if (v66) {
            operator delete(v66);
          }
          goto LABEL_62;
        }
LABEL_65:
        sub_25B3FBC4C();
      }
      uint64_t v50 = (uint64_t)(v41 - (void)v44) >> 3;
      if (v50 >= v39)
      {
        float32x2_t v51 = &v36[v39];
        uint64_t v53 = v38[1];
LABEL_54:
        uint64_t v67 = &v44[v39];
        uint64_t v68 = &v53[-v39];
        uint64_t v69 = v53;
        if ((unint64_t)v68 < v41)
        {
          uint64_t v69 = v53;
          do
          {
            uint64_t v70 = *v68++;
            *v69++ = v70;
          }
          while ((unint64_t)v68 < v41);
        }
        v38[1] = v69;
        if (v53 != v67)
        {
          uint64_t v71 = v53 - 1;
          uint64_t v72 = 8 * (v53 - v67);
          uint64_t v73 = (uint64_t)&v40[v43 - 1];
          do
          {
            *v71-- = *(void *)(v73 + v72);
            v72 -= 8;
          }
          while (v72);
        }
        for (; v36 != v51; ++v44)
        {
          uint64_t v74 = *v36++;
          *uint64_t v44 = v74;
        }
        goto LABEL_62;
      }
      float32x2_t v51 = &v36[v50];
      if (v51 == v35)
      {
        uint64_t v53 = v38[1];
      }
      else
      {
        unint64_t v52 = v51;
        uint64_t v53 = v38[1];
        do
        {
          uint64_t v54 = *v52++;
          *v53++ = v54;
        }
        while (v52 != v35);
      }
      v38[1] = v53;
      if ((uint64_t)(v41 - (void)v44) >= 1) {
        goto LABEL_54;
      }
    }
LABEL_62:
    uint64_t v8 = (uint64_t *)(a1 + 48);
    goto LABEL_63;
  }
  return 1;
}

__n128 sub_25B4BA154(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2708F1650;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_25B4BA194(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_2708F1650;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void sub_25B4BA1F8()
{
}

uint64_t *sub_25B4BA210(uint64_t *a1, void *a2)
{
  a1[1] = 0;
  long long v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  long long v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_25B3FF15C(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      BOOL v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_25B4BA2A8(_Unwind_Exception *a1)
{
  sub_25B3FA930(*v1);
  _Unwind_Resume(a1);
}

BOOL sub_25B4BA2BC(long long *a1, long long *a2, float32x2_t *a3, uint64_t *a4)
{
  if (a1 == a2)
  {
    float v8 = INFINITY;
  }
  else
  {
    uint64_t v7 = a1;
    float v8 = INFINITY;
    do
    {
      long long v9 = *v7;
      long long v10 = v7[3];
      float32x2_t v11 = *a3;
      float32x2_t v12 = vsub_f32(*(float32x2_t *)&v10, *(float32x2_t *)v7);
      float v13 = vaddv_f32(vmul_f32(vsub_f32(*a3, *(float32x2_t *)v7), v12));
      float v14 = vaddv_f32(vmul_f32(v12, v12));
      if (v14 < 0.000001) {
        float v14 = 0.000001;
      }
      float32x2_t v15 = vmla_n_f32(*(float32x2_t *)&v9, v12, v13 / v14);
      *(void *)&long long v16 = *(void *)v7;
      *((void *)&v16 + 1) = *((void *)v7 + 6);
      long long v51 = v16;
      if (vaddv_f32(vmul_f32(vsub_f32(v15, *(float32x2_t *)&v9), vsub_f32(v15, *(float32x2_t *)&v10))) <= 0.01)
      {
        float32x2_t v17 = vsub_f32(v11, v15);
        float32x2_t v18 = vsub_f32(v15, v11);
        float v19 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
        if (sqrtf(vaddv_f32(vmul_f32(v17, v17))) < 0.3 && v19 < v8)
        {
          float32x2_t v52 = 0;
          uint64_t v53 = *a4;
          float v45 = (float)(sub_25B3FCCE0(&v52, (float32x2_t *)&v51, 0) / 180.0) * 3.1416;
          if ((float)(3.1416 - v45) < v45) {
            float v45 = 3.1416 - v45;
          }
          if ((float)((float)(fabsf(v45) / -1.5708) + 1.0) > 0.8) {
            float v8 = v19;
          }
        }
      }
      long long v21 = *v7;
      long long v22 = v7[1];
      float32x2_t v23 = *a3;
      float32x2_t v24 = vsub_f32(*(float32x2_t *)&v22, *(float32x2_t *)v7);
      float v25 = vaddv_f32(vmul_f32(vsub_f32(*a3, *(float32x2_t *)v7), v24));
      float v26 = vaddv_f32(vmul_f32(v24, v24));
      if (v26 < 0.000001) {
        float v26 = 0.000001;
      }
      float32x2_t v27 = vmla_n_f32(*(float32x2_t *)&v21, v24, v25 / v26);
      *(void *)&long long v28 = *(void *)v7;
      *((void *)&v28 + 1) = *((void *)v7 + 2);
      long long v50 = v28;
      if (vaddv_f32(vmul_f32(vsub_f32(v27, *(float32x2_t *)&v21), vsub_f32(v27, *(float32x2_t *)&v22))) <= 0.01)
      {
        float32x2_t v29 = vsub_f32(v23, v27);
        float32x2_t v30 = vsub_f32(v27, v23);
        float v31 = sqrtf(vaddv_f32(vmul_f32(v30, v30)));
        if (sqrtf(vaddv_f32(vmul_f32(v29, v29))) < 0.3 && v31 < v8)
        {
          float32x2_t v52 = 0;
          uint64_t v53 = *a4;
          float v46 = (float)(sub_25B3FCCE0(&v52, (float32x2_t *)&v50, 0) / 180.0) * 3.1416;
          if ((float)(3.1416 - v46) < v46) {
            float v46 = 3.1416 - v46;
          }
          if ((float)((float)(fabsf(v46) / -1.5708) + 1.0) > 0.8) {
            float v8 = v31;
          }
        }
      }
      long long v33 = v7[2];
      long long v34 = v7[3];
      float32x2_t v35 = *a3;
      float32x2_t v36 = vsub_f32(*(float32x2_t *)&v34, *(float32x2_t *)&v33);
      float v37 = vaddv_f32(vmul_f32(vsub_f32(*a3, *(float32x2_t *)&v33), v36));
      float v38 = vaddv_f32(vmul_f32(v36, v36));
      if (v38 < 0.000001) {
        float v38 = 0.000001;
      }
      float32x2_t v39 = vmla_n_f32(*(float32x2_t *)&v33, v36, v37 / v38);
      *(void *)&long long v40 = *((void *)v7 + 4);
      *((void *)&v40 + 1) = *((void *)v7 + 6);
      long long v49 = v40;
      if (vaddv_f32(vmul_f32(vsub_f32(v39, *(float32x2_t *)&v33), vsub_f32(v39, *(float32x2_t *)&v34))) <= 0.01)
      {
        float32x2_t v41 = vsub_f32(v35, v39);
        float32x2_t v42 = vsub_f32(v39, v35);
        float v43 = sqrtf(vaddv_f32(vmul_f32(v42, v42)));
        if (sqrtf(vaddv_f32(vmul_f32(v41, v41))) < 0.3 && v43 < v8)
        {
          float32x2_t v52 = 0;
          uint64_t v53 = *a4;
          float v47 = (float)(sub_25B3FCCE0(&v52, (float32x2_t *)&v49, 0) / 180.0) * 3.1416;
          if ((float)(3.1416 - v47) < v47) {
            float v47 = 3.1416 - v47;
          }
          if ((float)((float)(fabsf(v47) / -1.5708) + 1.0) > 0.8) {
            float v8 = v43;
          }
        }
      }
      v7 += 8;
    }
    while (v7 != a2);
  }
  return v8 < 0.3;
}

void sub_25B4BA614(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = (void *)*((void *)v4 - 9);
        if (v6)
        {
          *((void *)v4 - 8) = v6;
          operator delete(v6);
        }
        v4 -= 144;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_25B4BA6A0(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 144);
  uint64_t v3 = a3 + 144;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  do
  {
    int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 < a1;
    if (v8 >= a1) {
      long long v10 = (uint64_t *)v7;
    }
    else {
      long long v10 = (uint64_t *)(v7 + 8);
    }
    if (!v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a1 || *(void *)(v6 + 56) != 2) {
    return 0;
  }
  uint64_t v11 = v3;
  do
  {
    int v12 = *(_DWORD *)(v4 + 32);
    BOOL v13 = v12 < a2;
    if (v12 >= a2) {
      float v14 = (uint64_t *)v4;
    }
    else {
      float v14 = (uint64_t *)(v4 + 8);
    }
    if (!v13) {
      uint64_t v11 = v4;
    }
    uint64_t v4 = *v14;
  }
  while (*v14);
  return v11 != v3 && *(_DWORD *)(v11 + 32) <= a2 && *(void *)(v11 + 56) == 2;
}

uint64_t sub_25B4BA738(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 144;
    uint64_t v4 = *(void **)(v2 - 72);
    if (v4)
    {
      *(void *)(v2 - 64) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B4BA79C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 + 72);
      if (v5)
      {
        *(void *)(v3 + 80) = v5;
        operator delete(v5);
      }
      v3 += 144;
    }
  }
  return a1;
}

uint64_t *sub_25B4BA7FC(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (a4 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  if (a4 <= a3) {
    int v5 = a3;
  }
  else {
    int v5 = a4;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v6 = (((v4 + 2654435769) << 6) + v5 + ((unint64_t)(v4 + 2654435769) >> 2) + 2654435769u) ^ (v4 + 2654435769);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= a2) {
      unint64_t v8 = v6 % a2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (a2 - 1);
  }
  BOOL v9 = *(uint64_t ***)(a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (__n128 result = *v9; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v6 == v11)
    {
      if (*((_DWORD *)result + 4) == a3 && *((_DWORD *)result + 5) == a4) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= a2) {
          v11 %= a2;
        }
      }
      else
      {
        v11 &= a2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

void sub_25B4BA8D4(float *a1, int a2, int a3, double a4)
{
  if (a3 >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = a3;
  }
  unint64_t v8 = v7 + 2654435769;
  if (a3 <= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  unint64_t v10 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *((void *)a1 + 1);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v8 << 6) + v9 + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
    }
    else
    {
      uint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (*((_DWORD *)i + 4) == a2 && *((_DWORD *)i + 5) == a3) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  float32x2_t v17 = (double *)operator new(0x18uLL);
  *float32x2_t v17 = 0.0;
  *((void *)v17 + 1) = v10;
  v17[2] = a4;
  float v18 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v19 = a1[8];
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_40;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v11 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          float32x2_t v24 = operator new(8 * *(void *)&prime);
          float v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          float32x2_t v27 = (void *)*((void *)a1 + 2);
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v28) = a1 + 4;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_65;
                  }
                  void *v27 = *v33;
                  *long long v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_65:
                float32x2_t v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_69;
        }
        float v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v11 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_69:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v4 = v10 % v11;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    else
    {
      uint64_t v4 = (v11 - 1) & v10;
    }
  }
  float32x2_t v35 = *(void **)a1;
  float32x2_t v36 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v36)
  {
    *(void *)float32x2_t v17 = *v36;
LABEL_82:
    uint64_t *v36 = v17;
    goto LABEL_83;
  }
  *float32x2_t v17 = *((double *)a1 + 2);
  *((void *)a1 + 2) = v17;
  v35[v4] = a1 + 4;
  if (*(void *)v17)
  {
    unint64_t v37 = *(void *)(*(void *)v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v37 >= v11) {
        v37 %= v11;
      }
    }
    else
    {
      v37 &= v11 - 1;
    }
    float32x2_t v36 = (double **)(*(void *)a1 + 8 * v37);
    goto LABEL_82;
  }
LABEL_83:
  ++*((void *)a1 + 3);
}

void sub_25B4BACD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_25B4BACEC(void *a1, int a2, int a3)
{
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v55 = (uint64_t *)v56;
  int v59 = a2;
  int v5 = (char *)operator new(8uLL);
  unint64_t v6 = v5 + 8;
  *(_DWORD *)int v5 = a2;
  *((_DWORD *)v5 + 1) = 0;
  sub_25B4BB41C((uint64_t)v5, (uint64_t)(v5 + 8), 1);
  int v9 = (void *)*a1;
  int v7 = a1 + 1;
  unint64_t v8 = v9;
  if (v9 != v7)
  {
    do
    {
      *((_DWORD *)sub_25B3FEBEC(&v55, *((_DWORD *)v8 + 8), (unsigned int *)v8 + 8) + 8) = 2139095040;
      unint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          unint64_t v8 = v11;
        }
        while (!v12);
      }
      unint64_t v8 = v11;
    }
    while (v11 != v7);
  }
  *((_DWORD *)sub_25B3FEBEC(&v55, a2, (unsigned int *)&v59) + 8) = 0;
  BOOL v13 = v5 + 8;
  do
  {
    int v58 = 0;
    int v58 = *(_DWORD *)v5;
    if (v6 - v5 >= 9)
    {
      uint64_t v14 = 0;
      unint64_t v15 = (unint64_t)(v6 - v5) >> 3;
      int v16 = *(_DWORD *)v5;
      int v17 = *((_DWORD *)v5 + 1);
      uint64_t v18 = v15 - 2;
      if (v15 < 2) {
        uint64_t v18 = v15 - 1;
      }
      uint64_t v19 = v18 >> 1;
      BOOL v20 = v5;
      do
      {
        unint64_t v21 = v20;
        v20 += 8 * v14 + 8;
        uint64_t v22 = 2 * v14;
        uint64_t v14 = (2 * v14) | 1;
        uint64_t v23 = v22 + 2;
        if (v23 < (uint64_t)v15 && *((float *)v20 + 1) > *((float *)v20 + 3))
        {
          v20 += 8;
          uint64_t v14 = v23;
        }
        *(_DWORD *)unint64_t v21 = *(_DWORD *)v20;
        *((_DWORD *)v21 + 1) = *((_DWORD *)v20 + 1);
      }
      while (v14 <= v19);
      if (v6 - 8 == v20)
      {
        *(_DWORD *)BOOL v20 = v16;
        *((_DWORD *)v20 + 1) = v17;
      }
      else
      {
        *(_DWORD *)BOOL v20 = *((_DWORD *)v6 - 2);
        *((_DWORD *)v20 + 1) = *((_DWORD *)v6 - 1);
        *((_DWORD *)v6 - 2) = v16;
        *((_DWORD *)v6 - 1) = v17;
        sub_25B4BB41C((uint64_t)v5, (uint64_t)(v20 + 8), (v20 + 8 - v5) >> 3);
      }
    }
    uint64_t v24 = *v7;
    if (!*v7) {
      goto LABEL_30;
    }
    float v25 = v7;
    do
    {
      int v26 = *(_DWORD *)(v24 + 32);
      BOOL v27 = v26 < v58;
      if (v26 >= v58) {
        unint64_t v28 = (uint64_t *)v24;
      }
      else {
        unint64_t v28 = (uint64_t *)(v24 + 8);
      }
      if (!v27) {
        float v25 = (void *)v24;
      }
      uint64_t v24 = *v28;
    }
    while (*v28);
    if (v25 == v7 || v58 < *((_DWORD *)v25 + 8)) {
LABEL_30:
    }
      float v25 = v7;
    v6 -= 8;
    uint8x8_t v29 = (void *)v25[5];
    unint64_t v30 = v25 + 6;
    if (v29 != v25 + 6)
    {
      do
      {
        int v57 = *((_DWORD *)v29 + 7);
        uint64_t v31 = v57;
        float v32 = *((float *)v29 + 8);
        float v33 = *((float *)sub_25B3FEBEC(&v55, v57, (unsigned int *)&v57) + 8);
        int v34 = v58;
        if (v33 > (float)(v32 + *((float *)sub_25B3FEBEC(&v55, v58, (unsigned int *)&v58) + 8)))
        {
          float v35 = *((float *)sub_25B3FEBEC(&v55, v34, (unsigned int *)&v58) + 8);
          *((float *)sub_25B3FEBEC(&v55, v31, (unsigned int *)&v57) + 8) = v32 + v35;
          unint64_t v36 = v31 | ((unint64_t)*((unsigned int *)sub_25B3FEBEC(&v55, v31, (unsigned int *)&v57) + 8) << 32);
          if (v6 >= v13)
          {
            uint64_t v38 = (v6 - v5) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((v13 - v5) >> 2 > v39) {
              unint64_t v39 = (v13 - v5) >> 2;
            }
            if ((unint64_t)(v13 - v5) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v39;
            }
            if (v40)
            {
              if (v40 >> 61) {
                sub_25B3FA70C();
              }
              float32x2_t v41 = (char *)operator new(8 * v40);
            }
            else
            {
              float32x2_t v41 = 0;
            }
            float32x2_t v42 = (unint64_t *)&v41[8 * v38];
            *float32x2_t v42 = v36;
            uint64_t v37 = (uint64_t)(v42 + 1);
            if (v6 != v5)
            {
              do
              {
                unint64_t v43 = *((void *)v6 - 1);
                v6 -= 8;
                *--float32x2_t v42 = v43;
              }
              while (v6 != v5);
              unint64_t v6 = v5;
            }
            int v5 = (char *)v42;
            BOOL v13 = &v41[8 * v40];
            if (v6) {
              operator delete(v6);
            }
          }
          else
          {
            *(void *)unint64_t v6 = v36;
            uint64_t v37 = (uint64_t)(v6 + 8);
          }
          sub_25B4BB41C((uint64_t)v5, v37, (v37 - (uint64_t)v5) >> 3);
          unint64_t v6 = (char *)v37;
        }
        uint64_t v44 = (void *)v29[1];
        if (v44)
        {
          do
          {
            float v45 = v44;
            uint64_t v44 = (void *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            float v45 = (void *)v29[2];
            BOOL v12 = *v45 == (void)v29;
            uint8x8_t v29 = v45;
          }
          while (!v12);
        }
        uint8x8_t v29 = v45;
      }
      while (v45 != v30);
    }
  }
  while (v5 != v6);
  if (v5) {
    operator delete(v5);
  }
  if (!v56[0]) {
    goto LABEL_71;
  }
  float v46 = (float *)v56;
  float v47 = (float *)v56[0];
  do
  {
    unint64_t v48 = v47;
    long long v49 = v46;
    int v50 = *((_DWORD *)v47 + 7);
    if (v50 >= a3) {
      float v46 = v47;
    }
    else {
      v47 += 2;
    }
    float v47 = *(float **)v47;
  }
  while (v47);
  if (v46 != (float *)v56 && (v50 >= a3 ? (long long v51 = v48) : (long long v51 = v49), *((_DWORD *)v51 + 7) <= a3))
  {
    if (v50 < a3) {
      unint64_t v48 = v49;
    }
    float v52 = v48[8];
  }
  else
  {
LABEL_71:
    float v52 = INFINITY;
  }
  sub_25B3FA930(v56[0]);
  return v52;
}

void sub_25B4BB134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  operator delete(v13);
  sub_25B3FA930(a13);
  _Unwind_Resume(a1);
}

char *sub_25B4BB174(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (v2 - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_25B3FBC4C();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_25B3FA70C();
    }
    unint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)unint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = v12;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  BOOL v13 = v11 + 32;
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *((void *)v2 - 4);
      v2 -= 32;
      *((void *)v11 - 4) = v14;
      v11 -= 32;
      *((void *)v11 + 1) = *((void *)v2 + 1);
      *((_OWORD *)v11 + 1) = *((_OWORD *)v2 + 1);
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = &v10[32 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

BOOL sub_25B4BB268(uint64_t a1, float32x2_t *a2)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 312);
  uint64_t v3 = (float32x2_t **)(a1 + 320);
  if (v2 == (float32x2_t *)(a1 + 320)) {
    return 0;
  }
  while (1)
  {
    float v5 = sub_25B3FCCE0(v2 + 5, a2, 0);
    if ((float)(180.0 - v5) >= v5) {
      float v6 = v5;
    }
    else {
      float v6 = 180.0 - v5;
    }
    float32x2_t v7 = v2[5];
    float32x2_t v8 = v2[6];
    float32x2_t v9 = *a2;
    float32x2_t v10 = a2[1];
    float32x2_t v11 = vsub_f32(v8, v7);
    float v12 = vaddv_f32(vmul_f32(vsub_f32(*a2, v7), v11));
    float v13 = vaddv_f32(vmul_f32(v11, v11));
    if (v13 < 0.000001) {
      float v13 = 0.000001;
    }
    float32x2_t v14 = vsub_f32(vmla_n_f32(v7, v11, v12 / v13), v9);
    int32x2_t v15 = (int32x2_t)vmul_f32(v14, v14);
    float32x2_t v16 = vsub_f32(vmla_n_f32(v7, v11, vaddv_f32(vmul_f32(v11, vsub_f32(v10, v7))) / v13), v10);
    int32x2_t v17 = (int32x2_t)vmul_f32(v16, v16);
    float v18 = vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v15, v17), (float32x2_t)vzip2_s32(v15, v17)))) * 0.5;
    float v19 = sub_25B40E468(v7, v8, v9, v10);
    BOOL v20 = v6 <= 20.0;
    if (v18 > 0.1) {
      BOOL v20 = 0;
    }
    BOOL result = v19 >= 0.5 && (unint64_t)v20;
    if (result) {
      break;
    }
    uint64_t v22 = (float32x2_t *)v2[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = (float32x2_t **)v22;
        uint64_t v22 = (float32x2_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = (float32x2_t **)v2[2];
        BOOL v24 = *v23 == v2;
        uint64_t v2 = (float32x2_t *)v23;
      }
      while (!v24);
    }
    uint64_t v2 = (float32x2_t *)v23;
    if (v23 == v3) {
      return 0;
    }
  }
  return result;
}

char *sub_25B4BB3C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    BOOL result = sub_25B4BB174((char **)a1, a2);
  }
  else
  {
    *(void *)unint64_t v3 = *(void *)a2;
    *(void *)(v3 + 8) = *(void *)(a2 + 8);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
    BOOL result = (char *)(v3 + 32);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25B4BB41C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    float v5 = *(float *)(result + 8 * (v3 >> 1) + 4);
    float v6 = *(float *)(a2 - 4);
    if (v5 > v6)
    {
      int v9 = *(_DWORD *)(a2 - 8);
      float32x2_t v7 = (float *)(a2 - 8);
      int v8 = v9;
      do
      {
        unint64_t v10 = v4;
        float32x2_t v11 = v7;
        float32x2_t v7 = (float *)(result + 8 * v10);
        float *v11 = *v7;
        v11[1] = v5;
        if (!v10) {
          break;
        }
        unint64_t v4 = (v10 - 1) >> 1;
        float v5 = *(float *)(result + 8 * v4 + 4);
      }
      while (v5 > v6);
      *(_DWORD *)float32x2_t v7 = v8;
      *(float *)(result + 8 * v10 + 4) = v6;
    }
  }
  return result;
}

void sub_25B4BB484(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_25B3FBC4C();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)sub_25B3FBC9C(a2);
    float v5 = &v4[v3 & 0xFFFFFFFFFFFFFFE0];
    float32x2_t v7 = &v4[32 * v6];
    int v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 32;
        v8 -= 32;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_25B4BB534(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)BOOL result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  unint64_t v4 = (void *)(a2 + 168);
  uint64_t v3 = *(void *)(a2 + 168);
  if (v3)
  {
    uint64_t v6 = result;
    int v7 = *(_DWORD *)(a3 + 24);
    uint64_t v8 = a2 + 168;
    uint64_t v9 = *(void *)(a2 + 168);
    do
    {
      int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 < v7;
      if (v10 >= v7) {
        float v12 = (uint64_t *)v9;
      }
      else {
        float v12 = (uint64_t *)(v9 + 8);
      }
      if (!v11) {
        uint64_t v8 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if ((void *)v8 != v4 && v7 >= *(_DWORD *)(v8 + 32))
    {
      float v13 = *(void **)(v8 + 72);
      float32x2_t v14 = (void *)(v8 + 80);
      if (v13 != (void *)(v8 + 80))
      {
        do
        {
          BOOL result = sub_25B3FAF64(v6, *((_DWORD *)v13 + 7), *((_DWORD *)v13 + 7));
          int32x2_t v15 = (void *)v13[1];
          if (v15)
          {
            do
            {
              float32x2_t v16 = v15;
              int32x2_t v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              float32x2_t v16 = (void *)v13[2];
              BOOL v17 = *v16 == (void)v13;
              float v13 = v16;
            }
            while (!v17);
          }
          float v13 = v16;
        }
        while (v16 != v14);
        uint64_t v3 = *v4;
      }
    }
    if (v3)
    {
      int v18 = *(_DWORD *)(a3 + 28);
      float v19 = v4;
      do
      {
        int v20 = *(_DWORD *)(v3 + 32);
        BOOL v21 = v20 < v18;
        if (v20 >= v18) {
          uint64_t v22 = (uint64_t *)v3;
        }
        else {
          uint64_t v22 = (uint64_t *)(v3 + 8);
        }
        if (!v21) {
          float v19 = (void *)v3;
        }
        uint64_t v3 = *v22;
      }
      while (*v22);
      if (v19 != v4 && v18 >= *((_DWORD *)v19 + 8))
      {
        uint64_t v23 = (void *)v19[9];
        BOOL v24 = v19 + 10;
        if (v23 != v19 + 10)
        {
          do
          {
            BOOL result = sub_25B3FAF64(v6, *((_DWORD *)v23 + 7), *((_DWORD *)v23 + 7));
            float v25 = (void *)v23[1];
            if (v25)
            {
              do
              {
                int v26 = v25;
                float v25 = (void *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                int v26 = (void *)v23[2];
                BOOL v17 = *v26 == (void)v23;
                uint64_t v23 = v26;
              }
              while (!v17);
            }
            uint64_t v23 = v26;
          }
          while (v26 != v24);
        }
      }
    }
  }
  return result;
}

void sub_25B4BB6B0(_Unwind_Exception *a1)
{
  sub_25B3FB178(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4BB6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25B4BB534((uint64_t)v15, a2, a3);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  float v5 = v16;
  if (v16)
  {
    uint64_t v6 = (float32x2_t *)(a2 + 320);
    do
    {
      int v7 = (float32x2_t *)*v6;
      if (*v6)
      {
        int v8 = *((_DWORD *)v5 + 4);
        uint64_t v9 = v6;
        do
        {
          int v10 = v7[4].i32[0];
          BOOL v11 = v10 < v8;
          if (v10 >= v8) {
            float v12 = (float32x2_t **)v7;
          }
          else {
            float v12 = (float32x2_t **)&v7[1];
          }
          if (!v11) {
            uint64_t v9 = v7;
          }
          int v7 = *v12;
        }
        while (*v12);
        if (v9 != v6 && v8 >= v9[4].i32[0])
        {
          float32x2_t v13 = vsub_f32(v9[5], v9[6]);
          if (sqrtf(vaddv_f32(vmul_f32(v13, v13))) <= 0.3) {
            sub_25B3FAF64(a1, v8, *((_DWORD *)v5 + 4));
          }
        }
      }
      float v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return sub_25B3FB178((uint64_t)v15);
}

void sub_25B4BB7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B3FB178(v2);
  sub_25B3FB178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25B4BB7C4(uint64_t *result, int a2, uint64_t a3)
{
  unint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  float v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        float v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      float v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = operator new(0x48uLL);
    long long v10 = *(_OWORD *)(a3 + 16);
    v9[2] = *(_OWORD *)a3;
    v9[3] = v10;
    *((void *)v9 + 8) = *(void *)(a3 + 32);
    return sub_25B3FA740(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void sub_25B4BB87C(uint64_t *a1)
{
  v59[0] = 0;
  v59[1] = 0;
  v57[1] = 0;
  int v58 = (uint64_t *)v59;
  unint64_t v56 = (uint64_t *)v57;
  v57[0] = 0;
  LODWORD(v49) = 0;
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    unint64_t v4 = 0;
    float v5 = (float32x2_t *)(a1 + 10);
    do
    {
      uint64_t v6 = (float32x2_t *)a1[9];
      if (v6 != v5)
      {
        do
        {
          BOOL v7 = v4 == v6[8].i32[0] || v4 == v6[8].i32[1];
          if (v7)
          {
            int v8 = sub_25B4BC0C0(&v58, v4, &v49);
            sub_25B3FBE5C((uint64_t *)v8 + 5, v6[4].i32[0], v6[4].i32[0]);
          }
          if (sub_25B40DB9C(*(float32x2_t *)(*a1 + 8 * v4), v6[5], v6[6], 0.00001) <= 0.1)
          {
            uint64_t v9 = sub_25B4BC0C0(&v56, v4, &v49);
            sub_25B3FBE5C((uint64_t *)v9 + 5, v6[4].i32[0], v6[4].i32[0]);
          }
          long long v10 = (float32x2_t *)v6[1];
          if (v10)
          {
            do
            {
              BOOL v11 = (float32x2_t **)v10;
              long long v10 = (float32x2_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              BOOL v11 = (float32x2_t **)v6[2];
              BOOL v7 = *v11 == v6;
              uint64_t v6 = (float32x2_t *)v11;
            }
            while (!v7);
          }
          uint64_t v6 = (float32x2_t *)v11;
        }
        while (v11 != (float32x2_t **)v5);
        uint64_t v3 = (uint64_t *)*a1;
        uint64_t v2 = a1[1];
      }
      LODWORD(v49) = ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  sub_25B3FAD70((void *)a1[18]);
  a1[17] = (uint64_t)(a1 + 18);
  float v12 = (uint64_t **)(a1 + 17);
  a1[19] = 0;
  a1[18] = 0;
  sub_25B4B7240((void *)a1[21]);
  a1[20] = (uint64_t)(a1 + 21);
  a1[21] = 0;
  a1[22] = 0;
  if (a1[26])
  {
    float32x2_t v13 = (void *)a1[25];
    if (v13)
    {
      do
      {
        float32x2_t v14 = (void *)*v13;
        operator delete(v13);
        float32x2_t v13 = v14;
      }
      while (v14);
    }
    a1[25] = 0;
    uint64_t v15 = a1[24];
    if (v15)
    {
      for (uint64_t i = 0; i != v15; ++i)
        *(void *)(a1[23] + 8 * i) = 0;
    }
    a1[26] = 0;
  }
  a1[29] = a1[28];
  unint64_t v48 = a1 + 31;
  if (a1[34])
  {
    sub_25B3FAE18((void *)a1[33]);
    a1[33] = 0;
    uint64_t v17 = a1[32];
    if (v17)
    {
      for (uint64_t j = 0; j != v17; ++j)
        *(void *)(*v48 + 8 * j) = 0;
    }
    a1[34] = 0;
  }
  int v55 = 0;
  float v19 = (uint64_t *)*a1;
  if (a1[1] != *a1)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    do
    {
      uint64_t v22 = sub_25B4BC0C0(&v58, v21, &v55);
      uint64_t v23 = sub_25B4BC0C0(&v56, v21, &v55);
      long long v49 = (uint64_t *)v19[v20];
      sub_25B4BA210((uint64_t *)&v50, v22 + 5);
      sub_25B4BA210((uint64_t *)&v52, v23 + 5);
      char v54 = 0;
      v63[0] = v21;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      BOOL v60 = (uint64_t *)&v61;
      BOOL v24 = sub_25B3FA1DC((uint64_t **)a1 + 17, v21, v63);
      float v25 = (uint64_t *)(v24 + 6);
      sub_25B3FA930(v24[6]);
      int v26 = v61;
      v24[5] = v60;
      v24[6] = v26;
      BOOL v27 = v62;
      v24[7] = v62;
      if (v27)
      {
        v26[2] = (uint64_t)v25;
        BOOL v60 = (uint64_t *)&v61;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        int v26 = 0;
      }
      else
      {
        v24[5] = v25;
      }
      sub_25B3FA930(v26);
      unint64_t v28 = sub_25B3FF7C0((uint64_t **)a1 + 20, v21, v63);
      uint8x8_t v29 = v28;
      v28[5] = v49;
      if (v28 + 5 != &v49)
      {
        sub_25B3FF894((uint64_t)(v28 + 6), v50, &v51);
        sub_25B3FF894((uint64_t)(v29 + 9), v52, &v53);
      }
      *((unsigned char *)v29 + 96) = v54;
      unint64_t v30 = (int *)a1[28];
      uint64_t v31 = (int *)a1[29];
      float v32 = v30;
      if (v30 != v31)
      {
        while (*v32 != v21)
        {
          if (++v32 == v31)
          {
            float v32 = (int *)a1[29];
            break;
          }
        }
      }
      if (v32 == v31)
      {
        unint64_t v33 = a1[30];
        if ((unint64_t)v31 >= v33)
        {
          uint64_t v35 = v31 - v30;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v37 = v33 - (void)v30;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          BOOL v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v38) {
            unint64_t v39 = v36;
          }
          if (v39)
          {
            unint64_t v39 = (unint64_t)sub_25B3FBC64(v39);
            unint64_t v30 = (int *)a1[28];
            uint64_t v31 = (int *)a1[29];
          }
          else
          {
            uint64_t v40 = 0;
          }
          float32x2_t v41 = (int *)(v39 + 4 * v35);
          *float32x2_t v41 = v21;
          int v34 = v41 + 1;
          while (v31 != v30)
          {
            int v42 = *--v31;
            *--float32x2_t v41 = v42;
          }
          a1[28] = (uint64_t)v41;
          a1[29] = (uint64_t)v34;
          a1[30] = v39 + 4 * v40;
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          int *v31 = v21;
          int v34 = v31 + 1;
        }
        a1[29] = (uint64_t)v34;
        BOOL v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        sub_25B3FF328((uint64_t)v48, v63[0], v63[0], (uint64_t)&v60);
        if (v60) {
          operator delete(v60);
        }
        int v21 = v55;
      }
      sub_25B3FA930(v53);
      sub_25B3FA930(v51);
      int v55 = ++v21;
      uint64_t v20 = v21;
      float v19 = (uint64_t *)*a1;
    }
    while (v21 < (unint64_t)((a1[1] - *a1) >> 3));
  }
  unint64_t v43 = (float32x2_t *)a1[9];
  uint64_t v44 = (float32x2_t *)(a1 + 10);
  if (v43 != v44)
  {
    do
    {
      float32x2_t v45 = vsub_f32(v43[5], v43[6]);
      sub_25B3FDD40(v12, v43[8].i32[0], v43[8].i32[1], &v43[5], sqrtf(vaddv_f32(vmul_f32(v45, v45))));
      float v46 = (float32x2_t *)v43[1];
      if (v46)
      {
        do
        {
          float v47 = (float32x2_t **)v46;
          float v46 = (float32x2_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          float v47 = (float32x2_t **)v43[2];
          BOOL v7 = *v47 == v43;
          unint64_t v43 = (float32x2_t *)v47;
        }
        while (!v7);
      }
      unint64_t v43 = (float32x2_t *)v47;
    }
    while (v47 != (float32x2_t **)v44);
  }
  sub_25B3FAD70(v57[0]);
  sub_25B3FAD70(v59[0]);
}

void sub_25B4BBD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void sub_25B4BBDFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  uint64_t v3 = (void *)(a1 + 80);
  if (v2 != (void *)(a1 + 80))
  {
    do
    {
      sub_25B3FE034(a1 + 288, *((_DWORD *)v2 + 8), (long long *)(v2 + 5));
      unint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          float v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          float v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
    uint64_t v2 = *(void **)(a1 + 72);
  }
  if (v2 != v3)
  {
    do
    {
      BOOL v7 = *(void **)(a1 + 72);
      if (v7 != v3)
      {
        do
        {
          if (*((_DWORD *)v2 + 8) < *((_DWORD *)v7 + 8))
          {
            sub_25B3FE20C((uint64_t)v36, v2 + 5, v7 + 5);
            int v8 = *((_DWORD *)v7 + 8);
            LODWORD(v35) = *((_DWORD *)v2 + 8);
            HIDWORD(v35) = v8;
            uint64_t v9 = sub_25B3FE508(a1 + 464, v35, v8, &v35);
            long long v10 = v9;
            uint64_t v11 = v37;
            long long v12 = v36[3];
            long long v13 = v36[2];
            long long v14 = v36[0];
            *(_OWORD *)(v9 + 40) = v36[1];
            *(_OWORD *)(v9 + 56) = v13;
            *(_OWORD *)(v9 + 72) = v12;
            *((void *)v9 + 11) = v11;
            *(_OWORD *)(v9 + 24) = v14;
            if (v9 + 24 != (char *)v36) {
              sub_25B3FE7A8(v9 + 96, (char *)__p, (uint64_t)v39, (v39 - (unsigned char *)__p) >> 2);
            }
            long long v15 = *(_OWORD *)((char *)v41 + 12);
            long long v16 = v41[0];
            *(_OWORD *)(v10 + 120) = v40;
            *(_OWORD *)(v10 + 136) = v16;
            *(_OWORD *)(v10 + 148) = v15;
            int v18 = *(void **)(a1 + 448);
            unint64_t v17 = *(void *)(a1 + 456);
            if ((unint64_t)v18 >= v17)
            {
              uint64_t v20 = *(void *)(a1 + 440);
              uint64_t v21 = ((uint64_t)v18 - v20) >> 3;
              if ((unint64_t)(v21 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              uint64_t v22 = v17 - v20;
              uint64_t v23 = v22 >> 2;
              if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
                uint64_t v23 = v21 + 1;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v23;
              }
              float v25 = (char *)sub_25B3FCAD4(v24);
              BOOL v27 = &v25[8 * v21];
              *(void *)BOOL v27 = v35;
              float v19 = v27 + 8;
              unint64_t v28 = *(char **)(a1 + 440);
              for (uint64_t i = *(char **)(a1 + 448); i != v28; i -= 8)
              {
                uint64_t v30 = *((void *)i - 1);
                *((void *)v27 - 1) = v30;
                v27 -= 8;
              }
              *(void *)(a1 + 440) = v27;
              *(void *)(a1 + 448) = v19;
              *(void *)(a1 + 456) = &v25[8 * v26];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              void *v18 = v35;
              float v19 = v18 + 1;
            }
            *(void *)(a1 + 448) = v19;
            if ((_BYTE)v37) {
              sub_25B3FE8B0((uint64_t **)(a1 + 288), *((_DWORD *)v2 + 8), *((_DWORD *)v7 + 8), (uint64_t)v36);
            }
            if (__p)
            {
              unint64_t v39 = __p;
              operator delete(__p);
            }
          }
          uint64_t v31 = (void *)v7[1];
          if (v31)
          {
            do
            {
              float v32 = v31;
              uint64_t v31 = (void *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              float v32 = (void *)v7[2];
              BOOL v6 = *v32 == (void)v7;
              BOOL v7 = v32;
            }
            while (!v6);
          }
          BOOL v7 = v32;
        }
        while (v32 != v3);
      }
      unint64_t v33 = (void *)v2[1];
      if (v33)
      {
        do
        {
          int v34 = v33;
          unint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          int v34 = (void *)v2[2];
          BOOL v6 = *v34 == (void)v2;
          uint64_t v2 = v34;
        }
        while (!v6);
      }
      uint64_t v2 = v34;
    }
    while (v34 != v3);
  }
}

void sub_25B4BC0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_25B4BC0C0(uint64_t **a1, int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  float v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        float v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      float v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    BOOL v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    float32x2_t *v6 = (uint64_t *)v7;
    long long v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_25B4BC19C(float32x2_t *a1, float32x2_t **a2, void **a3, uint64_t a4, float a5)
{
  long long v10 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v11 = v9 - *a2;
  if (v9 == *a2)
  {
LABEL_7:
    unint64_t v16 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v16)
    {
      unint64_t v18 = v11 + 1;
      if ((v11 + 1) >> 61) {
        goto LABEL_87;
      }
      uint64_t v19 = v16 - (void)v10;
      if (v19 >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_25B3FCAD4(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v30 = (float32x2_t *)(v20 + 8 * v11);
      unint64_t v31 = v20 + 8 * v21;
      float32x2_t *v30 = *a1;
      unint64_t v17 = v30 + 1;
      unint64_t v33 = *a2;
      float v32 = (char *)a2[1];
      if (v32 != (char *)*a2)
      {
        do
        {
          float32x2_t v34 = *(float32x2_t *)(v32 - 8);
          v32 -= 8;
          v30[-1] = v34;
          --v30;
        }
        while (v32 != (char *)v33);
        float v32 = (char *)*a2;
      }
      *a2 = v30;
      a2[1] = v17;
      a2[2] = (float32x2_t *)v31;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *uint64_t v9 = *a1;
      unint64_t v17 = v9 + 1;
    }
    a2[1] = v17;
    unint64_t v36 = (float32x2_t *)a3[1];
    unint64_t v35 = (unint64_t)a3[2];
    if ((unint64_t)v36 >= v35)
    {
      uint64_t v38 = ((char *)v36 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v38 + 1) >> 61) {
        goto LABEL_87;
      }
      uint64_t v39 = v35 - (void)*a3;
      uint64_t v40 = v39 >> 2;
      if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
        uint64_t v40 = v38 + 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        unint64_t v41 = (unint64_t)sub_25B3FCAD4(v41);
      }
      else {
        uint64_t v42 = 0;
      }
      unint64_t v43 = (float32x2_t *)(v41 + 8 * v38);
      unint64_t v44 = v41 + 8 * v42;
      *unint64_t v43 = *a1;
      uint64_t v37 = v43 + 1;
      float v46 = (char *)*a3;
      float32x2_t v45 = (char *)a3[1];
      if (v45 != *a3)
      {
        do
        {
          float32x2_t v47 = *(float32x2_t *)(v45 - 8);
          v45 -= 8;
          v43[-1] = v47;
          --v43;
        }
        while (v45 != v46);
        float32x2_t v45 = (char *)*a3;
      }
      *a3 = v43;
      a3[1] = v37;
      a3[2] = (void *)v44;
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      float32x2_t *v36 = *a1;
      uint64_t v37 = v36 + 1;
    }
    a3[1] = v37;
    int v48 = ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3) - 1;
    int v50 = *(_DWORD **)(a4 + 8);
    unint64_t v49 = *(void *)(a4 + 16);
    if ((unint64_t)v50 >= v49)
    {
      float v52 = *(_DWORD **)a4;
      uint64_t v53 = ((uint64_t)v50 - *(void *)a4) >> 2;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62) {
        goto LABEL_88;
      }
      uint64_t v55 = v49 - (void)v52;
      if (v55 >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      BOOL v56 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v56) {
        unint64_t v57 = v54;
      }
      if (v57)
      {
        unint64_t v57 = (unint64_t)sub_25B3FBC64(v57);
        float v52 = *(_DWORD **)a4;
        int v50 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        uint64_t v58 = 0;
      }
      int v59 = (_DWORD *)(v57 + 4 * v53);
      unint64_t v60 = v57 + 4 * v58;
      _DWORD *v59 = v48;
      long long v51 = v59 + 1;
      while (v50 != v52)
      {
        int v61 = *--v50;
        *--int v59 = v61;
      }
      *(void *)a4 = v59;
      *(void *)(a4 + 8) = v51;
      *(void *)(a4 + 16) = v60;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *int v50 = v48;
      long long v51 = v50 + 1;
    }
    *(void *)(a4 + 8) = v51;
    return;
  }
  uint64_t v12 = 0;
  if (v11 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v9 - *a2;
  }
  while (1)
  {
    float32x2_t v14 = v10[v12];
    float32x2_t v15 = vsub_f32(*a1, v14);
    if (sqrtf(vaddv_f32(vmul_f32(v15, v15))) < a5) {
      break;
    }
    if (v13 == ++v12) {
      goto LABEL_7;
    }
  }
  uint64_t v23 = (float32x2_t *)a3[1];
  unint64_t v22 = (unint64_t)a3[2];
  if ((unint64_t)v23 < v22)
  {
    *uint64_t v23 = v14;
    unint64_t v24 = v23 + 1;
    goto LABEL_71;
  }
  uint64_t v25 = ((char *)v23 - (unsigned char *)*a3) >> 3;
  if ((unint64_t)(v25 + 1) >> 61) {
LABEL_87:
  }
    sub_25B3FBC4C();
  uint64_t v26 = v22 - (void)*a3;
  uint64_t v27 = v26 >> 2;
  if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
    uint64_t v27 = v25 + 1;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28)
  {
    unint64_t v28 = (unint64_t)sub_25B3FCAD4(v28);
    float32x2_t v14 = v10[v12];
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v62 = (float32x2_t *)(v28 + 8 * v25);
  unint64_t v63 = v28 + 8 * v29;
  float32x2_t *v62 = v14;
  unint64_t v24 = v62 + 1;
  uint64_t v65 = (char *)*a3;
  unint64_t v64 = (char *)a3[1];
  if (v64 != *a3)
  {
    do
    {
      float32x2_t v66 = *(float32x2_t *)(v64 - 8);
      v64 -= 8;
      v62[-1] = v66;
      --v62;
    }
    while (v64 != v65);
    unint64_t v64 = (char *)*a3;
  }
  *a3 = v62;
  a3[1] = v24;
  a3[2] = (void *)v63;
  if (v64) {
    operator delete(v64);
  }
LABEL_71:
  a3[1] = v24;
  uint64_t v68 = *(_DWORD **)(a4 + 8);
  unint64_t v67 = *(void *)(a4 + 16);
  if ((unint64_t)v68 >= v67)
  {
    uint64_t v70 = *(_DWORD **)a4;
    uint64_t v71 = ((uint64_t)v68 - *(void *)a4) >> 2;
    unint64_t v72 = v71 + 1;
    if (!((unint64_t)(v71 + 1) >> 62))
    {
      uint64_t v73 = v67 - (void)v70;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      BOOL v56 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v56) {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        unint64_t v74 = (unint64_t)sub_25B3FBC64(v74);
        uint64_t v70 = *(_DWORD **)a4;
        uint64_t v68 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        uint64_t v75 = 0;
      }
      id v76 = (_DWORD *)(v74 + 4 * v71);
      unint64_t v77 = v74 + 4 * v75;
      *id v76 = v12;
      uint64_t v69 = v76 + 1;
      while (v68 != v70)
      {
        int v78 = *--v68;
        *--id v76 = v78;
      }
      *(void *)a4 = v76;
      *(void *)(a4 + 8) = v69;
      *(void *)(a4 + 16) = v77;
      if (v70) {
        operator delete(v70);
      }
      goto LABEL_86;
    }
LABEL_88:
    sub_25B3FBC4C();
  }
  _DWORD *v68 = v12;
  uint64_t v69 = v68 + 1;
LABEL_86:
  *(void *)(a4 + 8) = v69;
}

void sub_25B4BC574(uint64_t a1, int a2, int a3)
{
  BOOL v6 = operator new(0x18uLL);
  BOOL v7 = v6;
  *((_DWORD *)v6 + 4) = a2;
  *((_DWORD *)v6 + 5) = a3;
  if (a3 >= a2) {
    int v8 = a2;
  }
  else {
    int v8 = a3;
  }
  unint64_t v9 = v8 + 2654435769;
  if (a3 <= a2) {
    int v10 = a2;
  }
  else {
    int v10 = a3;
  }
  unint64_t v11 = ((v9 << 6) + v10 + (v9 >> 2) + 2654435769u) ^ v9;
  void *v6 = 0;
  v6[1] = v11;
  unint64_t v12 = *(void *)(a1 + 8);
  if (!v12) {
    goto LABEL_26;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = v11;
    if (v12 <= v11) {
      unint64_t v14 = v11 % v12;
    }
  }
  else
  {
    unint64_t v14 = (v12 - 1) & v11;
  }
  float32x2_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v14);
  if (!v15 || (unint64_t v16 = *v15) == 0)
  {
LABEL_26:
    float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v20 = *(float *)(a1 + 32);
    if (!v12 || (float)(v20 * (float)v12) < v19)
    {
      uint64_t v21 = 2 * v12;
      BOOL v22 = v12 < 3 || (v12 & (v12 - 1)) != 0;
      size_t v23 = v22 | v21;
      unint64_t v24 = vcvtps_u32_f32(v19 / v20);
      if (v23 <= v24) {
        size_t v25 = v24;
      }
      else {
        size_t v25 = v23;
      }
      sub_25B3FA4B0(a1, v25);
      unint64_t v12 = *(void *)(a1 + 8);
      unint64_t v11 = v7[1];
    }
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    uint64_t v27 = *(void *)a1;
    unint64_t v28 = *(void **)(*(void *)a1 + 8 * v11);
    if (v28)
    {
      void *v7 = *v28;
    }
    else
    {
      void *v7 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v7;
      *(void *)(v27 + 8 * v11) = a1 + 16;
      if (!*v7)
      {
LABEL_48:
        ++*(void *)(a1 + 24);
        return;
      }
      unint64_t v29 = *(void *)(*v7 + 8);
      if (v26.u32[0] > 1uLL)
      {
        if (v29 >= v12) {
          v29 %= v12;
        }
      }
      else
      {
        v29 &= v12 - 1;
      }
      unint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    }
    void *v28 = v7;
    goto LABEL_48;
  }
  while (1)
  {
    unint64_t v17 = v16[1];
    if (v17 == v11) {
      break;
    }
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= v12) {
        v17 %= v12;
      }
    }
    else
    {
      v17 &= v12 - 1;
    }
    if (v17 != v14) {
      goto LABEL_26;
    }
LABEL_25:
    unint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_26;
    }
  }
  int v18 = *((_DWORD *)v16 + 4);
  if ((v18 != a2 || *((_DWORD *)v16 + 5) != a3) && (v18 != a3 || *((_DWORD *)v16 + 5) != a2)) {
    goto LABEL_25;
  }

  operator delete(v6);
}

void sub_25B4BC7D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_25B4BC7EC(uint64_t **a1, int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  float v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        float v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      float v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (char *)operator new(0x48uLL);
    *((_DWORD *)v9 + 8) = *a3;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 6) = 0;
    *(_OWORD *)(v9 + 56) = xmmword_25B5F10F0;
    sub_25B3FA740(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void sub_25B4BC8A4(uint64_t a1, const char *a2)
{
  v7[12] = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263EFFA08];
  v7[0] = @"Cabinet";
  v7[1] = @"Refrigerator";
  v7[2] = @"Shelf";
  _OWORD v7[3] = @"Stove";
  v7[4] = @"Sink";
  v7[5] = @"Washer";
  v7[6] = @"Toilet";
  v7[7] = @"Bathtub";
  v7[8] = @"Oven";
  v7[9] = @"Dishwasher";
  v7[10] = @"Fireplace";
  v7[11] = @"Storage";
  uint64_t v3 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], a2, (uint64_t)v7, 12);
  uint64_t v5 = objc_msgSend_setWithArray_(v2, v4, (uint64_t)v3);
  BOOL v6 = (void *)qword_26A5021C8;
  qword_26A5021C8 = v5;
}

void sub_25B4BC9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4BD4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_25B4820B0((void **)&a25);
  sub_25B4820B0(&a72);
  sub_25B50158C((uint64_t)&a49);
  a25 = &a64;
  sub_25B41032C((void ***)&a25);
  a25 = &a67;
  sub_25B41032C((void ***)&a25);

  _Unwind_Resume(a1);
}

void sub_25B4BD964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, id a19, void *a20)
{
  _Unwind_Resume(a1);
}

void *sub_25B4BDA48(void *a1, const char *a2)
{
  v5[1] = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v2 = a1[21];
    unint64_t v4 = @"offlineDebug";
    v5[0] = v2;
    a1 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v5, &v4, 1);
  }

  return a1;
}

id sub_25B4BDAD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v2277 = *MEMORY[0x263EF8340];
  id v2135 = a2;
  v2148 = a3;
  v2156 = (void *)a1;
  if (!a1)
  {
    id v2142 = 0;
    goto LABEL_1633;
  }
  int v2175 = 1276;
  uint64_t v2176 = 0;
  kdebug_trace();
  v2149 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v5, v6);
  if (*(unsigned char *)(a1 + 176)) {
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 168), v7, (uint64_t)v2149, @"floorPlan");
  }
  id v2142 = objc_alloc_init(RSFloorPlan);
  v2141 = objc_alloc_init(RSFloorPlan);
  objc_msgSend_array(MEMORY[0x263EFF8C0], v8, v9);
  id v2137 = (id)objc_claimAutoreleasedReturnValue();
  v2138 = objc_msgSend_array(MEMORY[0x263EFF8C0], v10, v11);
  if (v2148)
  {
    unint64_t v14 = objc_msgSend_floorPlan(v2148, v12, v13);

    if (v14)
    {
      unint64_t v17 = objc_msgSend_floorPlan(v2148, v15, v16);
      float v20 = objc_msgSend_copy(v17, v18, v19);

      size_t v23 = objc_msgSend_floorPlan(v2148, v21, v22);
      uint8x8_t v26 = objc_msgSend_objects(v23, v24, v25);

      if (v26)
      {
        unint64_t v29 = objc_msgSend_floorPlan(v2148, v27, v28);
        float v32 = objc_msgSend_objects(v29, v30, v31);
        unint64_t v35 = objc_msgSend_copy(v32, v33, v34);

        v2138 = v35;
      }
      id v2142 = v20;
    }
    id v36 = v2148[5];

    if (v36)
    {
      id v39 = v2148[5];
      uint64_t v42 = (RSFloorPlan *)objc_msgSend_copy(v39, v40, v41);

      if (objc_msgSend_count(v2138, v43, v44))
      {
LABEL_15:
        v2141 = v42;
LABEL_16:
        BOOL v56 = objc_msgSend_mirrorPoints(v2148, v45, v46);

        if (v56)
        {
          unint64_t v57 = objc_msgSend_mirrorPoints(v2148, v12, v13);
          unint64_t v60 = objc_msgSend_copy(v57, v58, v59);

          id v2137 = v60;
        }
        goto LABEL_18;
      }
      id v47 = v2148[5];
      objc_msgSend_objects(v47, v48, v49);
      v2141 = (RSFloorPlan *)objc_claimAutoreleasedReturnValue();
      float v52 = objc_msgSend_copy(v2141, v50, v51);

      v2138 = v52;
    }
    else
    {
      uint64_t v53 = objc_msgSend_floorPlan(v2148, v37, v38);

      if (!v53) {
        goto LABEL_16;
      }
      objc_msgSend_floorPlan(v2148, v45, v46);
      id v47 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v42 = (RSFloorPlan *)objc_msgSend_copy(v47, v54, v55);
    }

    goto LABEL_15;
  }
LABEL_18:
  if (*((unsigned char *)v2156 + 176))
  {
    int v61 = objc_msgSend_dictionaryRepresentation(v2148, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(*((void **)v2156 + 21), v62, (uint64_t)v61, @"onlineAsset");
  }
  kdebug_trace();
  uint64_t v63 = *((void *)v2156 + 6);
  v2174.n128_u64[0] = (unint64_t)v2135;
  if (v63)
  {
    float32x2_t v66 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v64, v65);
    memset(v2271, 0, 64);
    uint64_t v69 = objc_msgSend_allValues((void *)v2174.n128_u64[0], v67, v68);
    uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v70, (uint64_t)v2271, buf, 16);
    if (v73)
    {
      uint64_t v74 = **(void **)&v2271[16];
      do
      {
        for (uint64_t i = 0; i != v73; ++i)
        {
          if (**(void **)&v2271[16] != v74) {
            objc_enumerationMutation(v69);
          }
          id v76 = *(void **)(*(void *)&v2271[8] + 8 * i);
          unint64_t v77 = objc_msgSend_identifier(v76, v71, v72);
          if (v77)
          {
            BOOL v78 = objc_msgSend_count(v76, v71, v72) == 0;

            if (!v78)
            {
              uint64_t v79 = objc_msgSend_identifier(v76, v71, v72);
              objc_msgSend_setObject_forKey_(v66, v80, (uint64_t)v76, v79);
            }
          }
        }
        uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v71, (uint64_t)v2271, buf, 16);
      }
      while (v73);
    }

    if (objc_msgSend_count(v66, v81, v82))
    {
      objc_msgSend_allValues(v66, v83, v84);
      id v85 = (id)objc_claimAutoreleasedReturnValue();
      v2173.i64[0] = objc_msgSend_sortedArrayUsingComparator_(v85, v86, (uint64_t)&unk_2708F17F0);

      int32x2_t v87 = [RSPointCloud alloc];
      uint64_t v89 = objc_msgSend_initWithKeyframes_enableCameraPosition_(v87, v88, v2173.i64[0], 1);
      uint64_t v90 = *(void **)(v63 + 8);
      *(void *)(v63 + 8) = v89;

      objc_msgSend_processWithVoxelize_asPythonApproach_resample_(*(void **)(v63 + 8), v91, 1, 1, 1);
      uint64_t v92 = *(void *)(v63 + 16);
      if (v92)
      {
        *(unsigned char *)(v92 + 104) = 1;
        uint64_t v92 = *(void *)(v63 + 16);
        if (v92) {
          uint64_t v92 = *(void *)(v92 + 112);
        }
      }
      id v93 = (id)v92;
      objc_msgSend_removeAllObjects(v93, v94, v95);

      uint64_t v96 = *(void *)(v63 + 16);
      if (v96) {
        *(void *)(v96 + 88) = *(void *)(v96 + 80);
      }
      float32x4_t v2248 = 0u;
      float32x4_t v2247 = 0u;
      float32x4_t v2246 = 0u;
      float32x4_t src = 0u;
      id v97 = (id)v2173.i64[0];
      uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v98, (uint64_t)&src, __p, 16);
      if (v99)
      {
        uint64_t v100 = *(void *)v2246.i64[0];
        do
        {
          for (uint64_t j = 0; j != v99; ++j)
          {
            if (*(void *)v2246.i64[0] != v100) {
              objc_enumerationMutation(v97);
            }
            uint64_t v102 = *(void **)(v63 + 16);
            if (v102) {
              uint64_t v102 = (void *)v102[14];
            }
            uint64_t v103 = *(void **)(src.i64[1] + 8 * j);
            uint64_t v104 = v102;
            long long v107 = objc_msgSend_identifier(v103, v105, v106);
            long long v110 = objc_msgSend_UUIDString(v107, v108, v109);
            objc_msgSend_addObject_(v104, v111, (uint64_t)v110);

            long long v112 = *(void **)(v63 + 16);
            objc_msgSend_cameraPose(v103, v113, v114);
            sub_25B4D3F3C(v112, v115, v116, v117, v118);
          }
          uint64_t v99 = objc_msgSend_countByEnumeratingWithState_objects_count_(v97, v119, (uint64_t)&src, __p, 16);
        }
        while (v99);
      }
    }
  }

  v2139 = sub_25B400D94(*((id **)v2156 + 6));
  kdebug_trace();
  if (!objc_msgSend_count(v2139, v120, v121))
  {
    if (*((unsigned char *)v2156 + 176))
    {
      long long v219 = objc_msgSend_dictionaryRepresentation(v2142, v122, v123);
      objc_msgSend_setObject_forKeyedSubscript_(v2149, v220, (uint64_t)v219, @"final");
    }
    goto LABEL_1632;
  }
  kdebug_trace();
  uint64_t v124 = *((void *)v2156 + 7);
  uint64_t v125 = sub_25B522908(*((id **)v2156 + 6));
  sub_25B400578(v124, v2139, v125);

  sub_25B400D94(*((id **)v2156 + 7));
  v2145 = (__n128 *)objc_claimAutoreleasedReturnValue();
  if (*((unsigned char *)v2156 + 176))
  {
    if (v2145)
    {
      uint64_t v128 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v126, v127);
      int32x2_t v130 = objc_msgSend_numberWithBool_(NSNumber, v129, v2145->n128_u8[8]);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v131, (uint64_t)v130, @"is_center_scale_updated");

      LODWORD(v132) = v2145->n128_u32[3];
      int v135 = objc_msgSend_numberWithFloat_(NSNumber, v133, v134, v132);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v136, (uint64_t)v135, @"pixel_size");

      LODWORD(v137) = v2145[1].n128_u32[0];
      uint64_t v140 = objc_msgSend_numberWithFloat_(NSNumber, v138, v139, v137);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v141, (uint64_t)v140, @"floor_height");

      LODWORD(v142) = v2145[1].n128_u32[1];
      uint64_t v145 = objc_msgSend_numberWithFloat_(NSNumber, v143, v144, v142);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v146, (uint64_t)v145, @"ceiling_height");

      LODWORD(v147) = v2145[1].n128_u32[2];
      uint64_t v150 = objc_msgSend_numberWithFloat_(NSNumber, v148, v149, v147);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v151, (uint64_t)v150, @"support_height");

      unint64_t v153 = objc_msgSend_numberWithInt_(NSNumber, v152, v2145[1].n128_u32[3]);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v154, (uint64_t)v153, @"image_size");

      uint64_t v158 = sub_25B55D9D4(v2145[5], v2145[6].n128_f64[0], v155, v156, v157);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v159, (uint64_t)v158, @"scale");

      uint64_t v163 = sub_25B55D9D4(v2145[7], v2145[8].n128_f64[0], v160, v161, v162);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v164, (uint64_t)v163, @"shift");

      float32x4_t v2173 = (float32x4_t)v2145[4];
      uint64_t v167 = objc_msgSend_numberWithFloat_(NSNumber, v165, v166);
      *(void *)buf = v167;
      HIDWORD(v168) = v2173.i32[1];
      LODWORD(v168) = v2173.i32[1];
      uint64_t v171 = objc_msgSend_numberWithFloat_(NSNumber, v169, v170, v168);
      *(void *)&buf[8] = v171;
      uint64_t v174 = objc_msgSend_numberWithFloat_(NSNumber, v172, v173, COERCE_DOUBLE(__PAIR64__(v2173.u32[1], v2173.u32[2])));
      *(void *)&uint8_t buf[16] = v174;
      long long v176 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v175, (uint64_t)buf, 3);

      objc_msgSend_setObject_forKeyedSubscript_(v128, v177, (uint64_t)v176, @"center");
      v2173.i32[1] = HIDWORD(v2145[3].n128_u64[0]);
      uint64_t v180 = objc_msgSend_numberWithFloat_(NSNumber, v178, v179);
      *(void *)buf = v180;
      HIDWORD(v181) = v2173.i32[1];
      LODWORD(v181) = v2173.i32[1];
      unint64_t v184 = objc_msgSend_numberWithFloat_(NSNumber, v182, v183, v181);
      *(void *)&buf[8] = v184;
      unint64_t v186 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v185, (uint64_t)buf, 2);

      objc_msgSend_setObject_forKeyedSubscript_(v128, v187, (uint64_t)v186, @"floor_ceiling_count");
      uint64_t v189 = objc_msgSend_numberWithInt_(NSNumber, v188, v2145[2].n128_u32[0]);
      objc_msgSend_setObject_forKeyedSubscript_(v128, v190, (uint64_t)v189, @"z_slice");

      objc_msgSend_setObject_forKeyedSubscript_(*((void **)v2156 + 21), v191, (uint64_t)v128, @"geometryMeta");
    }
    else
    {
      uint64_t v128 = 0;
      objc_msgSend_setObject_forKeyedSubscript_(*((void **)v2156 + 21), v126, 0, @"geometryMeta");
    }
  }
  kdebug_trace();
  kdebug_trace();
  uint64_t v192 = (uint64_t *)*((void *)v2156 + 9);
  uint64_t v193 = v2139;
  unint64_t v196 = v2145;
  if (!v192 || !objc_msgSend_count(v193, v194, v195)) {
    goto LABEL_98;
  }
  unint64_t v197 = (void *)v192[1];
  if (v197)
  {
    uint64_t v198 = v197[6];
    if (v196)
    {
      uint64_t v199 = v196[7];
      if (v198 == v199) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    if (v198)
    {
      LODWORD(v199) = 0;
LABEL_58:
      uint64_t v200 = v192[5];
      v197[5] = (int)v199;
      v197[6] = (int)v199;
      v197[7] = v200;
      sub_25B4FDAAC((uint64_t)v197);
      sub_25B4FDBCC((size_t)v197, v201);
    }
  }
LABEL_59:
  unint64_t v202 = (void *)v192[6];
  if (!v202) {
    goto LABEL_63;
  }
  uint64_t v203 = v202[6];
  if (v196)
  {
    uint64_t v204 = v196[7];
    if (v203 == v204) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v203)
  {
    LODWORD(v204) = 0;
LABEL_62:
    v202[5] = (int)v204;
    v202[6] = (int)v204;
    v202[7] = 1;
    sub_25B4FDAAC((uint64_t)v202);
    sub_25B4FDBCC((size_t)v202, v205);
  }
LABEL_63:
  unint64_t v206 = (void *)v192[7];
  if (v206)
  {
    uint64_t v207 = v206[6];
    if (!v196)
    {
      if (!v207) {
        goto LABEL_67;
      }
      LODWORD(v208) = 0;
      goto LABEL_66;
    }
    uint64_t v208 = v196[7];
    if (v207 != v208)
    {
LABEL_66:
      v206[5] = (int)v208;
      v206[6] = (int)v208;
      v206[7] = 2;
      sub_25B4FDAAC((uint64_t)v206);
      sub_25B4FDBCC((size_t)v206, v209);
    }
  }
LABEL_67:
  sub_25B4FDD60(v192[1]);
  sub_25B4FDD60(v192[6]);
  sub_25B4FDD60(v192[7]);
  memset(buf, 0, 24);
  unint64_t v212 = objc_msgSend_count(v193, v210, v211);
  *(void *)long long __p = 0;
  sub_25B47DDC8((char **)buf, v212, __p);
  float32x2_t v213 = *(void **)buf;
  unint64_t v214 = *(void **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    uint64_t v215 = 0;
    long long v216 = *(void **)buf;
    do
      *v216++ = v215++;
    while (v216 != v214);
  }
  uint64_t v217 = v192[1];
  if (v217 && *(void *)(v217 + 64) == 1) {
    uint64_t v218 = *(__CVBuffer **)(v217 + 8);
  }
  else {
    uint64_t v218 = 0;
  }
  CVPixelBufferLockBaseAddress(v218, 0);
  uint64_t v221 = v192[6];
  if (v221 && *(void *)(v221 + 64) == 1) {
    uint64_t v222 = *(__CVBuffer **)(v221 + 8);
  }
  else {
    uint64_t v222 = 0;
  }
  CVPixelBufferLockBaseAddress(v222, 0);
  uint64_t v223 = v192[7];
  if (v223 && *(void *)(v223 + 64) == 1) {
    long long v224 = *(__CVBuffer **)(v223 + 8);
  }
  else {
    long long v224 = 0;
  }
  CVPixelBufferLockBaseAddress(v224, 0);
  sub_25B4ECF80(v193, buf, v196, (void *)v192[1], 1u, 1u, (void *)v192[6], 0, (void *)v192[7]);
  uint64_t v225 = v192[7];
  if (v225 && *(void *)(v225 + 64) == 1) {
    uint64_t v226 = *(__CVBuffer **)(v225 + 8);
  }
  else {
    uint64_t v226 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v226, 0);
  uint64_t v227 = v192[6];
  if (v227 && *(void *)(v227 + 64) == 1) {
    char v228 = *(__CVBuffer **)(v227 + 8);
  }
  else {
    char v228 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v228, 0);
  uint64_t v229 = v192[1];
  if (v229 && *(void *)(v229 + 64) == 1) {
    BOOL v230 = *(__CVBuffer **)(v229 + 8);
  }
  else {
    BOOL v230 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v230, 0);
  if (v213) {
    operator delete(v213);
  }
LABEL_98:

  int v231 = sub_25B400D94(*((id **)v2156 + 9));
  kdebug_trace();
  uint64_t v232 = *((void *)v2156 + 5);
  id v2133 = v231;
  v2143 = v196;
  if (v232)
  {
    *(_DWORD *)v2271 = 4857;
    *(void *)&v2271[8] = 0;
    kdebug_trace();
    memset(buf, 0, 24);
    memset(__p, 0, 24);
    sub_25B45F504();
    if (v2143)
    {
      float v233 = v2143[10];
      int8x16_t v234 = *(int8x16_t *)(v2143 + 14);
      *(void *)&double v235 = vextq_s8(v234, v234, 8uLL).u64[0];
    }
    else
    {
      v234.i64[0] = 0;
      float v233 = 0.0;
      double v235 = 0.0;
    }
    *(float *)&double v236 = *(double *)v234.i64;
    float v237 = v235;
    *((float *)&v236 + 1) = v237;
    *(double *)v2173.i64 = v236;
    long long v238 = sub_25B593370((uint64_t *)buf, 0, v233, v236);
    long long v239 = sub_25B593370((uint64_t *)__p, (const char *)3, v233, *(double *)v2173.i64);
    uint64_t v240 = objc_alloc_init(RSFloorPlan);
    sub_25B4E664C((uint64_t)v240, v238);
    v2136 = v240;
    sub_25B4E666C((uint64_t)v240, v239);
    if (v2143) {
      float v241 = *((float *)v2143 + 9);
    }
    else {
      float v241 = 0.0;
    }
    if (v240) {
      v240->floorHeight = v241;
    }
    if (v2143) {
      float v242 = *((float *)v2143 + 10);
    }
    else {
      float v242 = 0.0;
    }
    if (v240) {
      v240->ceilingHeight = v242;
    }
    sub_25B4E937C((unint64_t)v2136);

    if (*(void *)__p) {
      operator delete(*(void **)__p);
    }
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    sub_25B400F2C((uint64_t)v2271);
  }
  else
  {
    v2136 = 0;
  }

  if (*((unsigned char *)v2156 + 176))
  {
    long long v245 = objc_msgSend_dictionaryRepresentation(v2136, v243, v244);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v246, (uint64_t)v245, @"lcnn");
  }
  uint64_t v247 = *((void *)v2156 + 11);
  v2140 = v2136;
  v2165[0] = v2141;
  v2134 = v2138;
  v2162[0] = v2137;
  v2164[0] = (id)v2174.n128_u64[0];
  id v248 = v193;
  v2158 = v248;
  if (v247)
  {
    LODWORD(v2190) = 9802;
    v2191 = 0;
    kdebug_trace();
    float v251 = objc_msgSend_walls(v2140, v249, v250);
    if (objc_msgSend_count(v251, v252, v253))
    {

      goto LABEL_120;
    }
    long long v258 = objc_msgSend_openings(v2140, v254, v255);
    BOOL v261 = objc_msgSend_count(v258, v259, v260) == 0;

    if (!v261)
    {
LABEL_120:
      if (qword_26A5021D0 != -1) {
        dispatch_once(&qword_26A5021D0, &unk_2708F1620);
      }
      v2170.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v256, v257);
      __n128 v2243 = 0u;
      long long v2244 = 0u;
      long long v2241 = 0u;
      long long v2242 = 0u;
      int v262 = v2134;
      uint64_t v266 = objc_msgSend_countByEnumeratingWithState_objects_count_(v262, v263, (uint64_t)&v2241, __p, 16);
      if (v266)
      {
        uint64_t v267 = *(void *)v2242;
        do
        {
          for (uint64_t k = 0; k != v266; ++k)
          {
            if (*(void *)v2242 != v267) {
              objc_enumerationMutation(v262);
            }
            long long v269 = *(void **)(*((void *)&v2241 + 1) + 8 * k);
            long long v270 = (void *)qword_26A5021C8;
            long long v271 = objc_msgSend_type(v269, v264, v265);
            LODWORD(v270) = objc_msgSend_containsObject_(v270, v272, (uint64_t)v271);

            if (v270) {
              objc_msgSend_addObject_((void *)v2170.i64[0], v264, (uint64_t)v269);
            }
          }
          uint64_t v266 = objc_msgSend_countByEnumeratingWithState_objects_count_(v262, v264, (uint64_t)&v2241, __p, 16);
        }
        while (v266);
      }

      uint64_t v2186 = objc_msgSend_walls(v2140, v273, v274);
      uint64_t v2185 = objc_msgSend_openings(v2140, v275, v276);
      v2157 = (void **)(id)v2170.i64[0];
      char v2221 = 0;
      bzero(buf, 0x211uLL);
      long long v2235 = 0u;
      long long v2236 = 0u;
      long long v2233 = 0u;
      long long v2234 = 0u;
      long long v2231 = 0u;
      long long v2232 = 0u;
      long long v2229 = 0u;
      long long v2230 = 0u;
      long long v2227 = 0u;
      long long v2228 = 0u;
      long long v2225 = 0u;
      long long v2226 = 0u;
      long long v2223 = 0u;
      long long v2224 = 0u;
      long long v2222 = 0u;
      v2159 = (void **)v2162[0];
      unint64_t v279 = objc_msgSend_count(v2164[0], v277, v278);
      if (v279)
      {
        if (v279 >> 58) {
          sub_25B3FBC4C();
        }
        int v282 = (__n128 *)sub_25B4AF474(v279);
        __int32 v283 = &v282[4 * (void)v280];
      }
      else
      {
        int v282 = 0;
        __int32 v283 = 0;
      }
      char v284 = objc_msgSend_allValues(v2164[0], v280, v281);
      unint64_t v286 = objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x263F08B30], v285, @"timestamp", 1);
      v2208 = v286;
      unint64_t v288 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v287, (uint64_t)&v2208, 1);
      uint64_t v290 = objc_msgSend_sortedArrayUsingDescriptors_(v284, v289, (uint64_t)v288);

      long long v2239 = 0u;
      long long v2240 = 0u;
      long long v2237 = 0u;
      long long v2238 = 0u;
      id v291 = v290;
      uint64_t v295 = objc_msgSend_countByEnumeratingWithState_objects_count_(v291, v292, (uint64_t)&v2237, v2271, 16);
      if (v295)
      {
        uint64_t v296 = *(void *)v2238;
        int v297 = v282;
        do
        {
          for (uint64_t m = 0; m != v295; ++m)
          {
            if (*(void *)v2238 != v296) {
              objc_enumerationMutation(v291);
            }
            objc_msgSend_cameraPose(*(void **)(*((void *)&v2237 + 1) + 8 * m), v293, v294);
            __n128 v2171 = v299;
            *(__n128 *)v2172 = v300;
            float32x4_t v2173 = v301;
            __n128 v2174 = v302;
            if (v297 >= v283)
            {
              uint64_t v303 = ((char *)v297 - (char *)v282) >> 6;
              unint64_t v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 58) {
                sub_25B3FBC4C();
              }
              if (((char *)v283 - (char *)v282) >> 5 > v304) {
                unint64_t v304 = ((char *)v283 - (char *)v282) >> 5;
              }
              if ((unint64_t)((char *)v283 - (char *)v282) >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v305 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v305 = v304;
              }
              if (v305) {
                unint64_t v305 = (unint64_t)sub_25B4AF474(v305);
              }
              else {
                long long v293 = 0;
              }
              unint64_t v306 = v305 + (v303 << 6);
              *(__n128 *)unint64_t v306 = v2171;
              *(_OWORD *)(v306 + 16) = *(_OWORD *)v2172;
              *(float32x4_t *)(v306 + 32) = v2173;
              *(__n128 *)(v306 + 48) = v2174;
              if (v297 == v282)
              {
                char v311 = (__n128 *)(v305 + (v303 << 6));
              }
              else
              {
                unint64_t v307 = v305 + (v303 << 6);
                do
                {
                  __n128 v308 = v297[-4];
                  __n128 v309 = v297[-3];
                  __n128 v310 = v297[-1];
                  char v311 = (__n128 *)(v307 - 64);
                  *(__n128 *)(v307 - 32) = v297[-2];
                  *(__n128 *)(v307 - 16) = v310;
                  *(__n128 *)(v307 - 64) = v308;
                  *(__n128 *)(v307 - 48) = v309;
                  v297 -= 4;
                  v307 -= 64;
                }
                while (v297 != v282);
              }
              __int32 v283 = (__n128 *)(v305 + ((void)v293 << 6));
              int v297 = (__n128 *)(v306 + 64);
              if (v282) {
                operator delete(v282);
              }
              int v282 = v311;
            }
            else
            {
              *int v297 = v299;
              v297[1] = v300;
              v297[2] = (__n128)v301;
              v297[3] = v302;
              v297 += 4;
            }
          }
          uint64_t v295 = objc_msgSend_countByEnumeratingWithState_objects_count_(v291, v293, (uint64_t)&v2237, v2271, 16);
        }
        while (v295);
      }
      else
      {
        int v297 = v282;
      }

      uint64_t v314 = (RSFloorPlan *)v2165[0];
      if (!v2165[0]) {
        uint64_t v314 = objc_alloc_init(RSFloorPlan);
      }
      objc_msgSend_walls(v314, v312, v313);
      v2160 = (float *)objc_claimAutoreleasedReturnValue();
      int v317 = objc_msgSend_openings(v314, v315, v316);
      float v318 = v2160;
      v2163.i64[0] = (uint64_t)v317;
      obj[0] = v318;
      id v319 = objc_alloc(MEMORY[0x263EFF980]);
      v2167.i64[0] = objc_msgSend_initWithArray_copyItems_(v319, v320, (uint64_t)v318, 1);
      id v321 = objc_alloc(MEMORY[0x263EFF980]);
      v2168 = objc_msgSend_initWithArray_copyItems_(v321, v322, v2163.i64[0], 1);
      if (objc_msgSend_count((void *)v2167.i64[0], v323, v324) && objc_msgSend_count(v2168, v325, v326))
      {
        for (v2169.i64[0] = 0; v2169.i64[0] < (unint64_t)objc_msgSend_count(v2168, v327, v328); ++v2169.i64[0])
        {
          float32x2_t v330 = objc_msgSend_objectAtIndex_(v2168, v329, v2169.i64[0]);
          id v331 = (id)v2167.i64[0];
          id v332 = v330;
          id v333 = objc_alloc(MEMORY[0x263EFF980]);
          id v335 = (id)objc_msgSend_initWithArray_copyItems_(v333, v334, (uint64_t)v331, 1);
          id v338 = v332;
          unsigned int v339 = 0;
          for (unint64_t n = 0; ; ++n)
          {
            if (objc_msgSend_count(v335, v336, v337) <= n)
            {

              int v359 = v335;
              goto LABEL_194;
            }
            uint64_t v342 = objc_msgSend_objectAtIndexedSubscript_(v335, v341, n);
            objc_msgSend_quad(v342, v343, v344);
            v2174.n128_u64[0] = v345;
            uint64_t v347 = objc_msgSend_objectAtIndexedSubscript_(v335, v346, n);
            objc_msgSend_quad(v347, v348, v349);
            v2173.i64[0] = v350;

            objc_msgSend_quad(v338, v351, v352);
            v2172[0] = v353;
            objc_msgSend_quad(v338, v354, v355);
            v2171.n128_u64[0] = v356;
            float v357 = sub_25B40DB9C((float32x2_t)v2172[0], (float32x2_t)v2174.n128_u64[0], *(float32x2_t *)v2173.f32, 0.00001);
            float v358 = sub_25B40DB9C((float32x2_t)v2171.n128_u64[0], (float32x2_t)v2174.n128_u64[0], *(float32x2_t *)v2173.f32, 0.00001);
            if (v357 < 0.05 && v358 < 0.05) {
              break;
            }
            ++v339;
          }

          if ((n & 0x80000000) == 0)
          {
            objc_msgSend_removeAllObjects(v331, v360, v361);
            v2174.n128_u64[0] = objc_msgSend_objectAtIndexedSubscript_(v335, v362, n);
            objc_msgSend_quad((void *)v2174.n128_u64[0], v363, v364);
            float32x4_t v2173 = v365;
            objc_msgSend_quad(v338, v366, v367);
            *(_OWORD *)v2172 = v368;
            objc_msgSend_quad((void *)v2174.n128_u64[0], v369, v370);
            __n128 v2171 = v371;
            objc_msgSend_quad(v338, v372, v373);
            float32x4_t v376 = vsubq_f32(v2173, *(float32x4_t *)v2172);
            float32x4_t v378 = vsubq_f32((float32x4_t)v2171, v377);
            if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v376, v376))) >= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v378, v378))))
            {
              objc_msgSend_quad((void *)v2174.n128_u64[0], v374, v375);
              float32x4_t v2173 = v391;
              objc_msgSend_quad(v338, v392, v393);
              *(_OWORD *)v2172 = v394;
              objc_msgSend_quad(v338, v395, v396);
              __n128 v2171 = v397;
            }
            else
            {
              objc_msgSend_quad((void *)v2174.n128_u64[0], v374, v375);
              float32x4_t v2173 = v379;
              objc_msgSend_quad(v338, v380, v381);
              *(_OWORD *)v2172 = v382;
              objc_msgSend_quad(v338, v383, v384);
              __n128 v2171 = v387;
            }
            objc_msgSend_quad((void *)v2174.n128_u64[0], v385, v386);
            float32x4_t v2166 = v390;
            if (n)
            {
              uint64_t v398 = 0;
              uint64_t v399 = v339;
              do
              {
                float v400 = objc_msgSend_objectAtIndexedSubscript_(v335, v388, v398);
                objc_msgSend_addObject_(v331, v401, (uint64_t)v400);

                ++v398;
              }
              while (v399 != v398);
            }
            float32x4_t v402 = vsubq_f32(v2173, *(float32x4_t *)v2172);
            if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v402, v402))) >= 0.00001)
            {
              uint64_t v403 = objc_msgSend_copy((void *)v2174.n128_u64[0], v388, v389);
              uint64_t v405 = (void *)v403;
              float32x4_t src = v2173;
              float32x4_t v2246 = *(float32x4_t *)v2172;
              float32x4_t v2247 = *(float32x4_t *)v2172;
              float32x4_t v2248 = v2173;
              if (v403) {
                objc_copyStruct((void *)(v403 + 272), &src, 64, 1, 0);
              }
              objc_msgSend_addObject_(v331, v404, (uint64_t)v405);
            }
            float32x4_t v406 = vsubq_f32((float32x4_t)v2171, v2166);
            if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v406, v406))) >= 0.00001)
            {
              uint64_t v407 = objc_msgSend_copy((void *)v2174.n128_u64[0], v388, v389);
              uint64_t v409 = (void *)v407;
              float32x4_t src = (float32x4_t)v2171;
              float32x4_t v2246 = v2166;
              float32x4_t v2247 = v2166;
              float32x4_t v2248 = (float32x4_t)v2171;
              if (v407) {
                objc_copyStruct((void *)(v407 + 272), &src, 64, 1, 0);
              }
              objc_msgSend_addObject_(v331, v408, (uint64_t)v409);
            }
            for (iuint64_t i = (int)n + 1; ii < objc_msgSend_count(v335, v388, v389); ++ii)
            {
              uint64_t v412 = objc_msgSend_objectAtIndexedSubscript_(v335, v411, ii);
              objc_msgSend_addObject_(v331, v413, (uint64_t)v412);
            }
            int v359 = (void *)v2174.n128_u64[0];
LABEL_194:
          }
        }
      }

      id v2184 = (id)v2167.i64[0];
      id v2183 = v2168;
      unint64_t v416 = objc_msgSend_count(v2158, v414, v415);
      if (v416)
      {
        if (v416 >= 0x276276276276277) {
          sub_25B3FBC4C();
        }
        uint64_t v419 = 104 * v416;
        int v420 = (char *)operator new(104 * v416);
        size_t v421 = 104 * ((v419 - 104) / 0x68uLL) + 104;
        bzero(v420, v421);
        char v422 = &v420[v421];
      }
      else
      {
        int v420 = 0;
        char v422 = 0;
      }
      uint64_t v423 = 0;
      uint64_t v424 = 0;
      unint64_t v425 = 0;
      uint64_t v426 = (uint64_t)v420;
      while (objc_msgSend_count(v2158, v417, v418) > v425)
      {
        uint64_t v429 = objc_msgSend_semanticLabels(v2158, v427, v428);
        uint64_t v432 = objc_msgSend_semanticVotes(v2158, v430, v431);
        sub_25B5032E8((__int32 *)(v429 + v423), (uint16x4_t *)(v432 + v424), v426, v433, v434, v435);
        ++v425;
        v426 += 104;
        v424 += 8;
        v423 += 4;
      }
      unint64_t v2194 = 0;
      uint64_t v2193 = 0;
      unint64_t v2195 = 0;
      sub_25B4AF4AC((void **)&v2193, 0x4EC4EC4EC4EC4EC5 * ((v422 - v420) >> 3));
      if (v420 != v422)
      {
        std::string::size_type v436 = (void *)v2194;
        unint64_t v437 = v420;
        do
        {
          if ((unint64_t)v436 >= v2195)
          {
            uint64_t v439 = v2193;
            uint64_t v440 = ((uint64_t)v436 - v2193) >> 3;
            unint64_t v441 = v440 + 1;
            if ((unint64_t)(v440 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            uint64_t v442 = v2195 - v2193;
            if ((uint64_t)(v2195 - v2193) >> 2 > v441) {
              unint64_t v441 = v442 >> 2;
            }
            if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v443 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v443 = v441;
            }
            if (v443) {
              unint64_t v443 = (unint64_t)sub_25B3FCAD4(v443);
            }
            else {
              uint64_t v444 = 0;
            }
            uint64_t v445 = (void *)(v443 + 8 * v440);
            *uint64_t v445 = v437;
            unint64_t v438 = (unint64_t)(v445 + 1);
            if (v436 != (void *)v439)
            {
              do
              {
                uint64_t v446 = *--v436;
                *--uint64_t v445 = v446;
              }
              while (v436 != (void *)v439);
              std::string::size_type v436 = (void *)v2193;
            }
            uint64_t v2193 = (uint64_t)v445;
            unint64_t v2194 = v438;
            unint64_t v2195 = v443 + 8 * v444;
            if (v436) {
              operator delete(v436);
            }
          }
          else
          {
            void *v436 = v437;
            unint64_t v438 = (unint64_t)(v436 + 1);
          }
          unint64_t v2194 = v438;
          v437 += 104;
          std::string::size_type v436 = (void *)v438;
        }
        while (v437 != v422);
      }
      sub_25B4AF554(&src, (id *)&v2186);
      sub_25B4AF554(&v2204, (id *)&v2185);
      size_t v447 = v2157;
      uint64_t v450 = objc_msgSend_count(v447, v448, v449);
      long long v2200 = (unint64_t)v447;
      *(void *)&long long v2201 = v2200;
      *((void *)&v2201 + 1) = v450;

      uint64_t v451 = v2159;
      objc_msgSend_count(v451, v452, v453);

      sub_25B4AF554(&v2196, &v2184);
      sub_25B4AF554(&v2180, &v2183);
      v2187 = v282;
      unint64_t v2188 = ((char *)v297 - (char *)v282) >> 6;
      v2179[0] = objc_msgSend_points(v2158, v454, v455);
      v2179[1] = objc_msgSend_count(v2158, v456, v457);
      v2178[0] = (float32x2_t)v2193;
      v2178[1] = (float32x2_t)((uint64_t)(v2194 - v2193) >> 3);
      v2177[0] = objc_msgSend_cameraPositions(v2158, v458, v459);
      v2177[1] = objc_msgSend_count(v2158, v460, v461);
      sub_25B4AF5C4((uint64_t)buf, (uint64_t)&src, (uint64_t)&v2204, (uint64_t)&v2200, (uint64_t)&v2196, &v2180, &v2187, v2179, (uint64_t *)v2178, (uint64_t)v2177);
    }
    id v248 = v2158;
    id v922 = v2165[0];
    sub_25B400F2C((uint64_t)&v2190);
    v2165[0] = 0;
  }
  else
  {
    id v922 = 0;
  }

  if (*((unsigned char *)v2156 + 176))
  {
    float v464 = objc_msgSend_dictionaryRepresentation(v922, v462, v463);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v465, (uint64_t)v464, @"spp");
  }
  kdebug_trace();
  uint64_t v466 = *((void *)v2156 + 5);
  if (v466) {
    uint64_t v467 = v466 + 1968;
  }
  else {
    uint64_t v467 = 0;
  }
  char v468 = sub_25B566404(*((void *)v2156 + 8), v922, v467, v2143);

  if (*((unsigned char *)v2156 + 176))
  {
    uint64_t v471 = objc_msgSend_dictionaryRepresentation(v468, v469, v470);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v472, (uint64_t)v471, @"curved");
  }
  kdebug_trace();
  if (objc_msgSend_isDoorWindowEnabled(v2156, v473, v474))
  {
    uint64_t v477 = *((void *)v2156 + 4);
    id v478 = objc_msgSend_openings(v468, v475, v476);
    v2130 = v2158;
    __int32 v479 = v468;
    id v2131 = v478;
    v2128 = v2143;
    if (v477)
    {
      LODWORD(v2204) = 6676;
      *((void *)&v2204 + 1) = 0;
      v2146 = v479;
      kdebug_trace();
      uint64_t v482 = objc_msgSend_walls(v479, v480, v481);
      v2127 = objc_msgSend_copy(v482, v483, v484);

      if (v479)
      {
        int v488 = *((_DWORD *)v479 + 3);
        float v487 = v479[4];
      }
      else
      {
        float v487 = 0.0;
        int v488 = 0;
      }
      v2129 = objc_msgSend_copy(v2131, v485, v486);
      LODWORD(v489) = v488;
      sub_25B50349C(v2129, v489, v487);
      kdebug_trace();
      v2132 = sub_25B43EB28(*(void *)(v477 + 8), v2130, v2127, v2129, v2128, 0);
      int v491 = objc_msgSend_objectForKeyedSubscript_(v2132, v490, @"windows");
      sub_25B4E665C((uint64_t)v479, v491);

      uint64_t v493 = objc_msgSend_objectForKeyedSubscript_(v2132, v492, @"doors");
      sub_25B477C30((uint64_t)v479, v493);

      uint64_t v495 = objc_msgSend_objectForKeyedSubscript_(v2132, v494, @"opendoors");
      sub_25B477C10((uint64_t)v479, v495);

      kdebug_trace();
      if (*(unsigned char *)(v477 + 16))
      {
        unint64_t v498 = *(void *)(v477 + 8);
        int v499 = objc_msgSend_curvedWalls(v479, v496, v497);
        id v2147 = v2130;
        id v2154 = v499;
        if (v498)
        {
          LODWORD(v2237) = 5668;
          *((void *)&v2237 + 1) = 0;
          kdebug_trace();
          objc_msgSend_removeAllObjects(*(void **)(v498 + 1408), v500, v501);
          objc_msgSend_removeAllObjects(*(void **)(v498 + 1416), v502, v503);
          *(void *)buf = 0x200000001;
          *(_DWORD *)&buf[8] = 4;
          sub_25B43E700((char *)(v498 + 1320), buf, (uint64_t)&buf[12], 3uLL);
          unsigned int v506 = 0;
          v2157 = (void **)(v498 + 1408);
          v2159 = (void **)(v498 + 1416);
          *(void *)(v498 + 1424) = &unk_25B5F2004;
          for (v2174.n128_u64[0] = v498; ; unint64_t v498 = v2174.n128_u64[0])
          {
            if (objc_msgSend_count(v2154, v504, v505) <= (unint64_t)v506)
            {
              uint64_t v859 = objc_opt_new();
              v862 = objc_msgSend_copy(*v2157, v860, v861);
              objc_msgSend_setObject_forKeyedSubscript_(v859, v863, (uint64_t)v862, @"curved_windows");

              v866 = objc_msgSend_copy(*v2159, v864, v865);
              objc_msgSend_setObject_forKeyedSubscript_(v859, v867, (uint64_t)v866, @"curved_doors");

              v870 = objc_msgSend_copy(v859, v868, v869);
              sub_25B400F2C((uint64_t)&v2237);
              goto LABEL_495;
            }
            uint64_t v2150 = v506;
            objc_msgSend_objectAtIndexedSubscript_(v2154, v507, v506);
            id v508 = (id)objc_claimAutoreleasedReturnValue();
            id v2153 = v2147;
            v2155 = v508;
            kdebug_trace();
            v2172[0] = (id)objc_msgSend_copy(v508, v509, v510);
            objc_msgSend_endOrientation(v2172[0], v511, v512);
            if (v2172[0]) {
              *((float *)v2172[0] + 86) = v513 + 0.0;
            }
            id v514 = v2172[0];
            id v515 = v2153;
            size_t DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(v498 + 8));
            CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v498 + 8), 0);
            BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(v498 + 8));
            *(void *)(v498 + 16) = BaseAddress;
            bzero(BaseAddress, DataSize);
            objc_msgSend_radius(v514, v518, v519);
            float v521 = v520;
            objc_msgSend_endOrientation(v514, v522, v523);
            float v525 = v524;
            objc_msgSend_startOrientation(v514, v526, v527);
            float v529 = v528;
            objc_msgSend_quad(v514, v530, v531);
            float32x4_t v2170 = v532;
            objc_msgSend_quad(v514, v533, v534);
            float32x4_t v2167 = v535;
            memset(buf, 0, 24);
            memset(__p, 0, 24);
            memset(v2271, 0, 24);
            id v536 = v514;
            v2173.i64[0] = (uint64_t)v515;
            *(void *)&buf[8] = 0;
            *(void *)&__p[8] = 0;
            *(void *)&v2271[8] = 0;
            v2172[0] = v536;
            objc_msgSend_radius(v536, v537, v538);
            LODWORD(v2162[0]) = v539;
            objc_msgSend_quad(v536, v540, v541);
            LODWORD(v2165[1]) = v542;
            objc_msgSend_quad(v536, v543, v544);
            *(_OWORD *)v2164 = v545;
            objc_msgSend_startOrientation(v536, v546, v547);
            float v549 = v548;
            objc_msgSend_endOrientation(v536, v550, v551);
            float v553 = v552;
            objc_msgSend_circleCenter(v536, v554, v555);
            v557.i64[0] = v556;
            v2152.f32[0] = v521 * (float)((float)((float)(v525 - v529) * 3.1416) / 180.0);
            v2151.i32[0] = fabsf(COERCE_FLOAT(vsubq_f32(v2170, v2167).i32[2]));
            float v558 = *(float *)v2162 + -0.4;
            float v559 = *(float *)v2162 + 0.4;
            float v560 = *(float *)&v2165[1];
            long long v561 = *(_OWORD *)v2164;
            float v562 = *(float *)&v2164[1];
            float v563 = (float)(v549 * 3.1416) / 180.0;
            float v564 = (float)(v553 * 3.1416) / 180.0;
            *(float *)&long long v561 = (float)(*(float *)&v2165[1] + *(float *)&v2164[1]) * 0.5;
            *(_OWORD *)obuint64_t j = v561;
            v557.f32[2] = *(float *)&v561;
            float32x4_t v2167 = v557;
            float v565 = (float)(v563 + v564) * 0.5;
            __float2 v566 = __sincosf_stret(v565 + -1.5708);
            *(float *)&unint64_t v567 = -v566.__sinval;
            HIDWORD(v567) = LODWORD(v566.__cosval);
            v2279.columns[0] = (simd_float3)__PAIR64__(LODWORD(v566.__sinval), LODWORD(v566.__cosval));
            v2279.columns[1] = (simd_float3)v567;
            v2279.columns[2] = (simd_float3)xmmword_25B5F10E0;
            simd_float3x3 v2280 = __invert_f3(v2279);
            *(simd_float3 *)v2164 = v2280.columns[1];
            *(simd_float3 *)v2165 = v2280.columns[0];
            float32x4_t v2163 = (float32x4_t)v2280.columns[2];
            uint64_t v570 = 0;
            char v571 = 0;
            unint64_t v572 = 0;
            __int32 v573 = 0;
            uint64_t v574 = 0;
            unint64_t v575 = 0;
            unint64_t v576 = 0;
            float v577 = (float)(v563 - v565) + 1.5708;
            float v578 = (float)(v564 - v565) + 1.5708;
            while (objc_msgSend_count((void *)v2173.i64[0], v568, v569) > v576)
            {
              float32x2_t v581 = (float32x4_t *)(objc_msgSend_points((void *)v2173.i64[0], v579, v580) + 16 * v576);
              float32x4_t v583 = *v581;
              float v582 = &v581->f32[2];
              float32x4_t v2170 = v583;
              float32x4_t v584 = vsubq_f32(v583, v2167);
              float32x4_t v585 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v2165, v584.f32[0]), *(float32x4_t *)v2164, *(float32x2_t *)v584.f32, 1), v2163, v584, 2);
              float v586 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v585, v585)));
              float v587 = atan2f(v585.f32[1], v585.f32[0]);
              if (v587 >= -1.5708) {
                float v589 = v587;
              }
              else {
                float v589 = v587 + 6.2832;
              }
              if (v586 < v558
                || v586 > v559
                || v589 < v577
                || v589 > v578
                || v2170.f32[2] < v560
                || v2170.f32[2] > v562)
              {
                int32x2_t v595 = v571;
LABEL_282:
                int v601 = v574;
                goto LABEL_298;
              }
              if ((unint64_t)v571 >= v572)
              {
                uint64_t v596 = v571 - v570;
                unint64_t v597 = v596 + 1;
                if ((unint64_t)(v596 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v572 - (void)v570) >> 2 > v597) {
                  unint64_t v597 = (uint64_t)(v572 - (void)v570) >> 2;
                }
                if (v572 - (unint64_t)v570 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v598 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v598 = v597;
                }
                if (v598) {
                  unint64_t v598 = (unint64_t)sub_25B3FCAD4(v598);
                }
                else {
                  __int32 v568 = 0;
                }
                float32x2_t v599 = (unint64_t *)(v598 + 8 * v596);
                *float32x2_t v599 = v576;
                int32x2_t v595 = v599 + 1;
                while (v571 != v570)
                {
                  unint64_t v600 = *--v571;
                  *--float32x2_t v599 = v600;
                }
                unint64_t v572 = v598 + 8 * (void)v568;
                if (v570) {
                  operator delete(v570);
                }
                uint64_t v570 = v599;
              }
              else
              {
                unint64_t *v571 = v576;
                int32x2_t v595 = v571 + 1;
              }
              v588.f32[0] = *(float *)v2162 * (float)(1.5708 - v589);
              v588.f32[1] = *v582 - *(float *)obj;
              v588.f32[2] = v586 - *(float *)v2162;
              if ((unint64_t)v574 < v575)
              {
                *v574++ = v588;
                goto LABEL_282;
              }
              float32x4_t v2170 = v588;
              uint64_t v602 = v574 - v573;
              unint64_t v603 = v602 + 1;
              if ((unint64_t)(v602 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v575 - (void)v573) >> 3 > v603) {
                unint64_t v603 = (uint64_t)(v575 - (void)v573) >> 3;
              }
              if (v575 - (unint64_t)v573 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v604 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v604 = v603;
              }
              if (v604) {
                unint64_t v604 = (unint64_t)sub_25B3FFAEC(v604);
              }
              else {
                __int32 v568 = 0;
              }
              long long v605 = (float32x4_t *)(v604 + 16 * v602);
              float32x4_t *v605 = v2170;
              int v601 = v605 + 1;
              while (v574 != v573)
              {
                float32x4_t v606 = v574[-1];
                --v574;
                v605[-1] = v606;
                --v605;
              }
              unint64_t v575 = v604 + 16 * (void)v568;
              if (v573) {
                operator delete(v573);
              }
              __int32 v573 = v605;
LABEL_298:
              ++v576;
              char v571 = v595;
              uint64_t v574 = v601;
            }
            sub_25B4E3720((void **)buf, v571 - v570);
            sub_25B443B1C((void **)__p, v571 - v570);
            sub_25B4E3A80((void **)v2271, v571 - v570);
            for (juint64_t j = v570; jj != v571; ++jj)
            {
              uint64_t v610 = objc_msgSend_semanticLabels((void *)v2173.i64[0], v607, v608);
              uint64_t v613 = v610;
              unint64_t v614 = *jj;
              float32x2_t v615 = *(char **)&buf[8];
              if (*(void *)&buf[8] >= *(void *)&buf[16])
              {
                long long v617 = *(char **)buf;
                uint64_t v618 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2;
                unint64_t v619 = v618 + 1;
                if ((unint64_t)(v618 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                uint64_t v620 = *(void *)&buf[16] - *(void *)buf;
                if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 1 > v619) {
                  unint64_t v619 = v620 >> 1;
                }
                if ((unint64_t)v620 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v621 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v621 = v619;
                }
                if (v621) {
                  unint64_t v621 = (unint64_t)sub_25B3FBC64(v621);
                }
                else {
                  uint64_t v611 = 0;
                }
                std::string v622 = (_DWORD *)(v621 + 4 * v618);
                *std::string v622 = *(_DWORD *)(v613 + 4 * v614);
                long long v616 = v622 + 1;
                if (v615 != v617)
                {
                  do
                  {
                    int v623 = *((_DWORD *)v615 - 1);
                    v615 -= 4;
                    *--std::string v622 = v623;
                  }
                  while (v615 != v617);
                  float32x2_t v615 = *(char **)buf;
                }
                *(void *)buf = v622;
                *(void *)&uint8_t buf[16] = v621 + 4 * (void)v611;
                if (v615) {
                  operator delete(v615);
                }
              }
              else
              {
                **(_DWORD **)&buf[8] = *(_DWORD *)(v610 + 4 * v614);
                long long v616 = v615 + 4;
              }
              *(void *)&buf[8] = v616;
              uint64_t v624 = objc_msgSend_semanticVotes((void *)v2173.i64[0], v611, v612);
              uint64_t v627 = v624;
              unint64_t v628 = *jj;
              float v629 = *(char **)&__p[8];
              if (*(void *)&__p[8] >= *(void *)&__p[16])
              {
                int v631 = *(char **)__p;
                uint64_t v632 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3;
                unint64_t v633 = v632 + 1;
                if ((unint64_t)(v632 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v634 = *(void *)&__p[16] - *(void *)__p;
                if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 2 > v633) {
                  unint64_t v633 = v634 >> 2;
                }
                if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v635 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v635 = v633;
                }
                if (v635) {
                  unint64_t v635 = (unint64_t)sub_25B3FCAD4(v635);
                }
                else {
                  uint64_t v625 = 0;
                }
                int v636 = (void *)(v635 + 8 * v632);
                *int v636 = *(void *)(v627 + 8 * v628);
                long long v630 = v636 + 1;
                if (v629 != v631)
                {
                  do
                  {
                    uint64_t v637 = *((void *)v629 - 1);
                    v629 -= 8;
                    *--int v636 = v637;
                  }
                  while (v629 != v631);
                  float v629 = *(char **)__p;
                }
                *(void *)long long __p = v636;
                *(void *)&__p[16] = v635 + 8 * (void)v625;
                if (v629) {
                  operator delete(v629);
                }
              }
              else
              {
                **(void **)&__p[8] = *(void *)(v624 + 8 * v628);
                long long v630 = v629 + 8;
              }
              *(void *)&__p[8] = v630;
              uint64_t v638 = objc_msgSend_colors((void *)v2173.i64[0], v625, v626);
              uint64_t v639 = v638;
              unint64_t v640 = *jj;
              v641 = *(char **)&v2271[8];
              if (*(void *)&v2271[8] >= *(void *)&v2271[16])
              {
                float v643 = *(char **)v2271;
                uint64_t v644 = (uint64_t)(*(void *)&v2271[8] - *(void *)v2271) >> 4;
                unint64_t v645 = v644 + 1;
                if ((unint64_t)(v644 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                uint64_t v646 = *(void *)&v2271[16] - *(void *)v2271;
                if ((uint64_t)(*(void *)&v2271[16] - *(void *)v2271) >> 3 > v645) {
                  unint64_t v645 = v646 >> 3;
                }
                if ((unint64_t)v646 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v647 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v647 = v645;
                }
                if (v647) {
                  unint64_t v647 = (unint64_t)sub_25B3FFAEC(v647);
                }
                else {
                  float32x2_t v607 = 0;
                }
                unint64_t v648 = (_OWORD *)(v647 + 16 * v644);
                *unint64_t v648 = *(_OWORD *)(v639 + 16 * v640);
                int v642 = v648 + 1;
                if (v641 != v643)
                {
                  do
                  {
                    long long v649 = *((_OWORD *)v641 - 1);
                    v641 -= 16;
                    *--unint64_t v648 = v649;
                  }
                  while (v641 != v643);
                  v641 = *(char **)v2271;
                }
                *(void *)v2271 = v648;
                *(void *)&v2271[16] = v647 + 16 * (void)v607;
                if (v641) {
                  operator delete(v641);
                }
              }
              else
              {
                **(_OWORD **)&v2271[8] = *(_OWORD *)(v638 + 16 * v640);
                int v642 = v641 + 16;
              }
              *(void *)&v2271[8] = v642;
            }
            if (v570) {
              operator delete(v570);
            }

            float32x4_t src = 0uLL;
            v2246.i64[0] = 0;
            unint64_t v650 = v574 - v573;
            sub_25B443B1C((void **)&src, v650);
            if (v573 == v574)
            {
              unint64_t v650 = 0;
            }
            else
            {
              int v651 = (uint64_t *)src.i64[1];
              uint64_t v652 = v573;
              do
              {
                uint64_t v653 = v652->i64[0];
                if ((unint64_t)v651 >= v2246.i64[0])
                {
                  float32x2_t v655 = (uint64_t *)src.i64[0];
                  uint64_t v656 = ((uint64_t)v651 - src.i64[0]) >> 3;
                  unint64_t v657 = v656 + 1;
                  if ((unint64_t)(v656 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v658 = v2246.i64[0] - src.i64[0];
                  if ((v2246.i64[0] - src.i64[0]) >> 2 > v657) {
                    unint64_t v657 = v658 >> 2;
                  }
                  if ((unint64_t)v658 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v659 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v659 = v657;
                  }
                  if (v659) {
                    unint64_t v659 = (unint64_t)sub_25B3FCAD4(v659);
                  }
                  else {
                    uint64_t v660 = 0;
                  }
                  v661 = (uint64_t *)(v659 + 8 * v656);
                  uint64_t *v661 = v653;
                  uint64_t v654 = v661 + 1;
                  if (v651 != v655)
                  {
                    do
                    {
                      uint64_t v662 = *--v651;
                      *--v661 = v662;
                    }
                    while (v651 != v655);
                    int v651 = (uint64_t *)src.i64[0];
                  }
                  src.i64[0] = (uint64_t)v661;
                  src.i64[1] = (uint64_t)v654;
                  v2246.i64[0] = v659 + 8 * v660;
                  if (v651) {
                    operator delete(v651);
                  }
                }
                else
                {
                  uint64_t *v651 = v653;
                  uint64_t v654 = v651 + 1;
                }
                src.i64[1] = (uint64_t)v654;
                ++v652;
                int v651 = v654;
              }
              while (v652 != v574);
            }
            sub_25B443228(&v2241, v650);
            if (v573 != v574)
            {
              float v665 = (float *)v2241;
              float v666 = v573;
              do
              {
                *v665++ = (float)(fabsf(v666->f32[2]) / -0.8) + 1.0;
                ++v666;
              }
              while (v666 != v574);
            }
            v663.i32[0] = v2152.i32[0];
            if (v2152.f32[0] < v2151.f32[0]) {
              v663.f32[0] = v2151.f32[0];
            }
            float v667 = v663.f32[0] / 448.0;
            v663.f32[0] = 1.0 / (float)(v663.f32[0] / 448.0);
            *(_DWORD *)(v2174.n128_u64[0] + 304) = v663.i32[0];
            *(float *)v664.i32 = (float)(v667 * 448.0) * 0.5;
            *(_DWORD *)(v2174.n128_u64[0] + 308) = v664.i32[0];
            uint64_t v668 = (void *)src.i64[0];
            sub_25B5BF450((float32x2_t *)src.i64[0], (float32x2_t *)src.i64[1], buf, __p, v2271, (uint64_t *)&v2241, *(void *)(v2174.n128_u64[0] + 16), v663, v664);
            CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v2174.n128_u64[0] + 8), 0);
            if ((void)v2241)
            {
              *((void *)&v2241 + 1) = v2241;
              operator delete((void *)v2241);
            }
            if (v668) {
              operator delete(v668);
            }
            if (*(void *)v2271) {
              operator delete(*(void **)v2271);
            }
            if (*(void *)__p) {
              operator delete(*(void **)__p);
            }
            if (*(void *)buf) {
              operator delete(*(void **)buf);
            }
            if (v573) {
              operator delete(v573);
            }

            kdebug_trace();
            kdebug_trace();
            sub_25B441498();
            kdebug_trace();
            kdebug_trace();
            sub_25B441760(v2174.n128_i64[0]);
            id v669 = v2172[0];
            id v670 = (id)v2173.i64[0];
            v2172[0] = v669;
            objc_msgSend_circleCenter(v669, v671, v672);
            float32x4_t v2173 = v673;
            objc_msgSend_quad(v669, v674, v675);
            float32x4_t v2170 = v676;
            objc_msgSend_quad(v669, v677, v678);
            float32x4_t v2167 = v679;
            objc_msgSend_quad(v669, v680, v681);
            float32x4_t v2152 = v682;
            objc_msgSend_quad(v669, v683, v684);
            float32x4_t v2151 = v685;
            objc_msgSend_radius(v669, v686, v687);
            float v689 = v688;
            objc_msgSend_startOrientation(v669, v690, v691);
            float v693 = v692;
            objc_msgSend_endOrientation(v669, v694, v695);
            float v697 = v696;
            unint64_t v698 = (float32x4_t *)operator new(0x20uLL);
            id v699 = v670;
            float32x4_t v700 = v2173;
            v700.i32[2] = vmuls_lane_f32(0.5, vaddq_f32(v2170, v2167), 2);
            float32x4_t v2167 = v700;
            float v701 = (float)(v693 * 3.1416) / 180.0;
            __float2 v702 = __sincosf_stret(v701);
            v703.f32[0] = v2173.f32[0] + (float)(v689 * v702.__cosval);
            v703.f32[1] = v2173.f32[1] + (float)(v689 * v702.__sinval);
            v703.i32[2] = v2167.i32[2];
            float32x4_t v2170 = v703;
            float v704 = (float)(v697 * 3.1416) / 180.0;
            __float2 v705 = __sincosf_stret(v704);
            v706.f32[0] = v2173.f32[0] + (float)(v689 * v705.__cosval);
            v706.f32[1] = v2173.f32[1] + (float)(v689 * v705.__sinval);
            v706.i32[2] = v2167.i32[2];
            *unint64_t v698 = v706;
            v698[1] = v2170;
            __float2 v707 = __sincosf_stret((float)((float)(v701 + v704) * 0.5) + -1.5708);
            *(float *)&unint64_t v708 = -v707.__sinval;
            HIDWORD(v708) = LODWORD(v707.__cosval);
            *(_OWORD *)v2164 = v708;
            *(_OWORD *)v2165 = __PAIR64__(LODWORD(v707.__sinval), LODWORD(v707.__cosval));
            v2281.columns[0] = (simd_float3)__PAIR64__(LODWORD(v707.__sinval), LODWORD(v707.__cosval));
            v2281.columns[1] = (simd_float3)v708;
            v2281.columns[2] = (simd_float3)xmmword_25B5F10E0;
            simd_float3x3 v2282 = __invert_f3(v2281);
            *(simd_float3 *)v2162 = v2282.columns[1];
            float32x4_t v2163 = (float32x4_t)v2282.columns[0];
            *(simd_float3 *)obuint64_t j = v2282.columns[2];
            float32x2_t v709 = operator new(0x20uLL);
            float v710 = 0;
            float32x2_t v711 = 0;
            unint64_t v712 = 0;
            char v713 = 0;
            uint64_t v714 = 0;
            float32x4_t v715 = vsubq_f32(v2152, v2151);
            float32x4_t v716 = v2173;
            float32x4_t v717 = v2173;
            v717.f32[2] = v715.f32[2] * 0.5;
            v716.f32[2] = v715.f32[2] * -0.5;
            _OWORD *v709 = v716;
            v709[1] = v717;
            do
            {
              char v718 = v713;
              float32x4_t v2173 = v698[v714];
              float32x4_t v719 = vsubq_f32(v2173, v2167);
              float32x4_t v720 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2163, v719.f32[0]), *(float32x4_t *)v2162, *(float32x2_t *)v719.f32, 1), *(float32x4_t *)obj, v719, 2);
              v2170.i32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v720, v720)));
              float v721 = atan2f(v720.f32[1], v720.f32[0]);
              if (v721 < -1.5708) {
                float v721 = v721 + 6.2832;
              }
              float32x4_t v722 = vaddq_f32((float32x4_t)v709[v714], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v2165, (float)(1.5708 - v721) * v2170.f32[0]), *(float32x4_t *)v2164, v2170.f32[0]), (float32x4_t)xmmword_25B5F10E0, v2173, 2));
              if ((unint64_t)v711 >= v712)
              {
                float32x4_t v2173 = v722;
                uint64_t v724 = ((char *)v711 - (char *)v710) >> 4;
                unint64_t v725 = v724 + 1;
                if ((unint64_t)(v724 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v712 - (void)v710) >> 3 > v725) {
                  unint64_t v725 = (uint64_t)(v712 - (void)v710) >> 3;
                }
                if (v712 - (unint64_t)v710 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v726 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v726 = v725;
                }
                if (v726) {
                  unint64_t v726 = (unint64_t)sub_25B3FFAEC(v726);
                }
                else {
                  uint64_t v727 = 0;
                }
                uint64_t v728 = (float32x4_t *)(v726 + 16 * v724);
                float32x4_t *v728 = v2173;
                v723 = v728 + 1;
                while (v711 != v710)
                {
                  float32x4_t v729 = *(float32x4_t *)v711[-2].f32;
                  v711 -= 2;
                  v728[-1] = v729;
                  --v728;
                }
                unint64_t v712 = v726 + 16 * v727;
                if (v710) {
                  operator delete(v710);
                }
                float v710 = (float32x2_t *)v728;
              }
              else
              {
                *(float32x4_t *)v711->f32 = v722;
                v723 = (float32x4_t *)&v711[2];
              }
              char v713 = 1;
              float32x2_t v711 = (float32x2_t *)v723;
              uint64_t v714 = 1;
            }
            while ((v718 & 1) == 0);
            operator delete(v709);
            operator delete(v698);
            objc_msgSend_quad(v2172[0], v730, v731);
            float32x4_t v2173 = v732;
            __int32 v479 = v2146;
            int v733 = v699;
            objc_msgSend_quad(v2172[0], v734, v735);
            float32x4_t v2170 = v736;
            v741 = objc_msgSend_identifier(v2172[0], v737, v738);
            unint64_t v742 = 0;
            float32x4_t v2167 = vsubq_f32(v2173, v2170);
            float32x2_t v743 = vmul_f32(vadd_f32(*v710, v710[2]), (float32x2_t)0x3F0000003F000000);
            while (2)
            {
              if (v742 < objc_msgSend_count(*(void **)(v2174.n128_u64[0] + 1368), v739, v740))
              {
                uint64_t v746 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v744, v742);
                uint64_t v748 = (void *)v746;
                if (v746) {
                  double v749 = *(double *)(v746 + 24);
                }
                else {
                  double v749 = 0.0;
                }
                objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v747, v742);
                unsigned int v750 = (double *)objc_claimAutoreleasedReturnValue();
                if (v750) {
                  double v751 = v750[4];
                }
                else {
                  double v751 = 0.0;
                }

                uint64_t v753 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v752, v742);
                int v755 = (void *)v753;
                if (v753) {
                  double v756 = *(double *)(v753 + 24);
                }
                else {
                  double v756 = 0.0;
                }
                uint64_t v757 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v754, v742);
                float32x4_t v759 = (void *)v757;
                if (v757) {
                  double v760 = *(double *)(v757 + 40);
                }
                else {
                  double v760 = 0.0;
                }
                uint64_t v761 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v758, v742);
                float32x2_t v763 = (void *)v761;
                if (v761) {
                  double v764 = *(double *)(v761 + 32);
                }
                else {
                  double v764 = 0.0;
                }
                objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v762, v742);
                int v765 = (double *)objc_claimAutoreleasedReturnValue();
                if (v765) {
                  double v766 = v765[6];
                }
                else {
                  double v766 = 0.0;
                }

                LODWORD(v767) = *(_DWORD *)(v2174.n128_u64[0] + 304);
                v2170.i64[0] = v767;
                LODWORD(v767) = *(_DWORD *)(v2174.n128_u64[0] + 308);
                v2173.i64[0] = v767;
                v768 = operator new(0x10uLL);
                v769.f32[0] = v749;
                float32_t v770 = v751;
                v769.f32[1] = v770;
                v771.f32[0] = v756 + v760;
                float32_t v772 = v764 + v766;
                v771.f32[1] = v772;
                float32x2_t v773 = (float32x2_t)vdup_n_s32(0x43E00000u);
                float32x2_t v774 = vmul_f32(v771, v773);
                v775.f32[0] = floorf(v774.f32[0]);
                v775.f32[1] = 448.0 - floorf(v774.f32[1]);
                float32x2_t v776 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2170.f32, 0);
                float32x2_t v777 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2173.f32, 0);
                float32x2_t v778 = vmul_f32(v769, v773);
                v773.f32[0] = floorf(v778.f32[0]);
                v773.f32[1] = 448.0 - floorf(v778.f32[1]);
                *(float32x2_t *)v768 = vsub_f32(vdiv_f32(v773, v776), v777);
                *((float32x2_t *)v768 + 1) = vsub_f32(vdiv_f32(v775, v776), v777);
                sub_25B5BFAA4((float32x4_t **)buf, (int32x2_t *)v768, (int32x2_t *)v768 + 2, *(float32x4_t *)v710->f32, *(float32x4_t *)v710[2].f32);
                v781 = *(float32x4_t **)buf;
                long long v782 = **(_OWORD **)buf;
                float32x4_t v783 = *(float32x4_t *)(*(void *)buf + 16);
                float32x4_t v784 = vsubq_f32(v783, **(float32x4_t **)buf);
                v785.i64[0] = 0x3F0000003F000000;
                v785.i64[1] = 0x3F0000003F000000;
                float32x4_t v786 = vmulq_f32(vaddq_f32(**(float32x4_t **)buf, v783), v785);
                float v787 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v784, v784))) * 0.5;
                long long v788 = *(_OWORD *)v710->f32;
                float32x4_t v789 = vsubq_f32(*(float32x4_t *)v710->f32, v786);
                if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v789, v789))) < v787)
                {
                  long long v790 = *(_OWORD *)v710->f32;
                  DWORD2(v790) = *(void *)(*(void *)buf + 8);
                  *(_DWORD *)(*(void *)buf + 8) = DWORD2(v782);
                  v781->i64[0] = v788;
                  long long v782 = v790;
                }
                float32x4_t v791 = *(float32x4_t *)v710[2].f32;
                float32x4_t v792 = vsubq_f32(v791, v786);
                if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v792, v792))) >= v787)
                {
                  LODWORD(v793) = v710[3];
                }
                else
                {
                  v781[1].i32[2] = v783.i32[2];
                  v781[1].i64[0] = v791.i64[0];
                  float v793 = v710[3].f32[0];
                }
                float v794 = COERCE_FLOAT(*(void *)&v710[1]);
                if (v794 > v793 && *((float *)&v782 + 2) > v783.f32[2])
                {
                  if (*((float *)&v782 + 2) > v794)
                  {
                    v781->i32[2] = (__int32)v710[1];
                    v781->i64[0] = v782;
                    float v793 = v710[3].f32[0];
                  }
                  if (v783.f32[2] < v793)
                  {
LABEL_439:
                    v781[1].i32[2] = v710[3].i32[0];
                  }
                  else
                  {
                    objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v779, v742);
                    uint64_t v795 = (_DWORD *)objc_claimAutoreleasedReturnValue();
                    float32x2_t v797 = v795;
                    if (v795 && v795[5] == 1)
                    {

                      goto LABEL_439;
                    }
                    objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v796, v742);
                    float32x2_t v798 = (_DWORD *)objc_claimAutoreleasedReturnValue();
                    if (v798)
                    {
                      BOOL v799 = v798[5] == 4;

                      if (v799) {
                        goto LABEL_439;
                      }
                    }
                    else
                    {
                    }
                  }
                }
                float32x4_t v800 = vsubq_f32(v781[1], *v781);
                float v801 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v800, v800)));
                float v802 = fabsf(v800.f32[2]);
                if (v801 >= 0.3 || v802 >= 0.3)
                {
                  if (v802 > 1.5
                    || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v779, v742),
                        (int32x2_t v803 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0)
                    || (BOOL v804 = v803[5] == 1, v803, !v804))
                  {
                    if (v801 > 0.55
                      || (objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v779, v742),
                          (float v805 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0)
                      || (BOOL v806 = v805[5] == 4, v805, !v806))
                    {
                      float32x4_t v807 = *v781;
                      float32x4_t v808 = v781[1];
                      if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v2167, vsubq_f32(v808, *v781))) < 0.0)
                      {
                        v781->i32[2] = v807.i32[2];
                        v781->i64[0] = v808.i64[0];
                        v781[1].i32[2] = v808.i32[2];
                        v781[1].i64[0] = v807.i64[0];
                      }
                      objc_msgSend_circleCenter(v2172[0], v779, v780);
                      float32x2_t v810 = v809;
                      float32x4_t v2173 = *v781;
                      objc_msgSend_circleCenter(v2172[0], v811, v812);
                      float32x2_t v814 = v813;
                      float v815 = sub_25B5BFC48(v743, v810, *(float32x2_t *)v2173.f32);
                      float v816 = sub_25B5BFC48(v743, v814, *(float32x2_t *)v781[1].f32);
                      if (v815 <= v816) {
                        float v817 = v815;
                      }
                      else {
                        float v817 = v816;
                      }
                      if (v815 <= v816) {
                        float v818 = v816;
                      }
                      else {
                        float v818 = v815;
                      }
                      uint64_t v819 = objc_alloc_init(RS3DCurvedSurface);
                      objc_msgSend_radius(v2172[0], v820, v821);
                      if (v819) {
                        v819->_radius = v824;
                      }
                      objc_msgSend_circleCenter(v2172[0], v822, v823);
                      if (v819) {
                        *(void *)&v819->_circleCenter[4] = v827;
                      }
                      objc_msgSend_startOrientation(v2172[0], v825, v826);
                      float v829 = v828;
                      objc_msgSend_endOrientation(v2172[0], v830, v831);
                      if (v819) {
                        v819->_startOrientatiounint64_t n = (float)((float)(v817 * 180.0) / 3.1416)
                      }
                                                + (float)((float)(v829 + v834) * 0.5);
                      objc_msgSend_startOrientation(v2172[0], v832, v833);
                      float v836 = v835;
                      objc_msgSend_endOrientation(v2172[0], v837, v838);
                      if (v819) {
                        v819->_endOrientatiounint64_t n = (float)((float)(v818 * 180.0) / 3.1416)
                      }
                                              + (float)((float)(v836 + v839) * 0.5);
                      sub_25B530690((float32x2_t *)v819);
                      if (v819)
                      {
                        __int32 v841 = v781[1].i32[2];
                        __int32 v842 = v781->i32[2];
                        *(_DWORD *)&v819->_anon_110[8] = v842;
                        *(_DWORD *)&v819->_anon_110[24] = v842;
                        *(_DWORD *)&v819->_anon_110[40] = v841;
                        *(_DWORD *)&v819->_anon_110[56] = v841;
                      }
                      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v840, v742);
                      long long v843 = (float *)objc_claimAutoreleasedReturnValue();
                      if (v843)
                      {
                        float v844 = v843[3];
                        if (v819) {
                          goto LABEL_468;
                        }
                      }
                      else
                      {
                        float v844 = 0.0;
                        if (v819) {
LABEL_468:
                        }
                          v819->super.confidence = v844;
                      }

                      sub_25B4FD504((uint64_t)v819, v741);
                      long long v845 = objc_opt_new();
                      sub_25B4FD4F4((uint64_t)v819, v845);

                      if (v819) {
                        v819->super.individualUpdate = 0;
                      }
                      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v846, v742);
                      int v847 = (_DWORD *)objc_claimAutoreleasedReturnValue();
                      if (v847)
                      {
                        BOOL v849 = v847[5] == 1;

                        if (v849)
                        {
                          BOOL v850 = v2159;
                          if (v819)
                          {
                            char v851 = 2;
                            BOOL v850 = v2159;
                            goto LABEL_479;
                          }
                          goto LABEL_480;
                        }
                      }
                      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v2174.n128_u64[0] + 1368), v848, v742);
                      simd_float4x4 v852 = (_DWORD *)objc_claimAutoreleasedReturnValue();
                      if (v852)
                      {
                        BOOL v853 = v852[5] == 2;

                        if (v853)
                        {
                          BOOL v850 = v2157;
                          if (v819)
                          {
                            char v851 = 1;
                            BOOL v850 = v2157;
LABEL_479:
                            v819->super.type = v851;
                          }
LABEL_480:
                          objc_msgSend_addObject_(*v850, v848, (uint64_t)v819);
                        }
                      }
                    }
                  }
                }
                operator delete(v781);
                operator delete(v768);
                ++v742;
                continue;
              }
              break;
            }
            uint64_t v854 = objc_msgSend_count(*v2157, v744, v745);
            uint64_t v857 = objc_msgSend_count(*v2159, v855, v856);
            NSLog(&cfstr_CurvedWindowsL.isa, v854, v857);

            operator delete(v710);
            kdebug_trace();

            unsigned int v506 = v2150 + 1;
          }
        }
        v870 = 0;
LABEL_495:

        v872 = objc_msgSend_objectForKeyedSubscript_(v870, v871, @"curved_windows");
        sub_25B4E669C((uint64_t)v479, v872);

        uint64_t v874 = objc_msgSend_objectForKeyedSubscript_(v870, v873, @"curved_doors");
        sub_25B4E668C((uint64_t)v479, v874);
      }
      sub_25B400F2C((uint64_t)&v2204);
      v875 = 0;
      v876 = v479;
    }
    else
    {
      v876 = 0;
      v875 = v479;
    }

    if (*((unsigned char *)v2156 + 176))
    {
      int v879 = objc_msgSend_dictionaryRepresentation(v876, v877, v878);
      objc_msgSend_setObject_forKeyedSubscript_(v2149, v880, (uint64_t)v879, @"door_window");
    }
    v881 = (float *)*((void *)v2156 + 10);
    v2160 = v876;
    if (v881)
    {
      v2168 = objc_msgSend_array(MEMORY[0x263EFF980], v882, v883);
      float32x4_t v2248 = 0u;
      float32x4_t v2247 = 0u;
      float32x4_t v2246 = 0u;
      float32x4_t src = 0u;
      unint64_t v886 = objc_msgSend_windows(v2160, v884, v885);
      uint64_t v889 = objc_msgSend_countByEnumeratingWithState_objects_count_(v886, v887, (uint64_t)&src, __p, 16);
      if (v889)
      {
        uint64_t v890 = *(void *)v2246.i64[0];
        do
        {
          uint64_t v891 = 0;
          do
          {
            if (*(void *)v2246.i64[0] != v890) {
              objc_enumerationMutation(v886);
            }
            uint64_t v892 = *(void *)(src.i64[1] + 8 * v891);
            if (v892) {
              float v893 = *(float *)(v892 + 128);
            }
            else {
              float v893 = 0.0;
            }
            if (v893 > v881[7]) {
              objc_msgSend_addObject_(v2168, v888, v892);
            }
            ++v891;
          }
          while (v889 != v891);
          uint64_t v894 = objc_msgSend_countByEnumeratingWithState_objects_count_(v886, v888, (uint64_t)&src, __p, 16);
          uint64_t v889 = v894;
        }
        while (v894);
      }

      if (!objc_msgSend_count(v2168, v895, v896)
        || (objc_msgSend_walls(v2160, v897, v898),
            int v899 = objc_claimAutoreleasedReturnValue(),
            BOOL v902 = objc_msgSend_count(v899, v900, v901) == 0,
            v899,
            v902))
      {
        v921 = 0;
        v2157 = (void **)v2160;
      }
      else
      {
        v2157 = (void **)objc_msgSend_copy(v2160, v903, v904);
        int v905 = v2160;
        memset(v2271, 0, 64);
        v908 = objc_msgSend_walls(v905, v906, v907);
        uint64_t v912 = objc_msgSend_countByEnumeratingWithState_objects_count_(v908, v909, (uint64_t)v2271, buf, 16);
        v2159 = (void **)v905;
        if (v912)
        {
          uint64_t v913 = **(void **)&v2271[16];
          __n128 v2174 = 0u;
          do
          {
            for (kuint64_t k = 0; kk != v912; ++kk)
            {
              if (**(void **)&v2271[16] != v913) {
                objc_enumerationMutation(v908);
              }
              v915 = *(void **)(*(void *)&v2271[8] + 8 * kk);
              objc_msgSend_quad(v915, v910, v911);
              float32x4_t v2173 = v916;
              objc_msgSend_quad(v915, v917, v918);
              v920.i64[0] = 0x3F0000003F000000;
              v920.i64[1] = 0x3F0000003F000000;
              __n128 v2174 = (__n128)vmlaq_f32((float32x4_t)v2174, v920, vaddq_f32(v2173, v919));
            }
            uint64_t v912 = objc_msgSend_countByEnumeratingWithState_objects_count_(v908, v910, (uint64_t)v2271, buf, 16);
          }
          while (v912);
        }
        else
        {
          __n128 v2174 = 0u;
        }

        BOOL v925 = objc_msgSend_walls(v2159, v923, v924);
        uint64_t v928 = objc_msgSend_count(v925, v926, v927);

        if (v2159)
        {
          float v930 = *((float *)v2159 + 3);
          float v929 = *((float *)v2159 + 4);
        }
        else
        {
          float v929 = 0.0;
          float v930 = 0.0;
        }
        id v931 = v2168;
        memset(v2271, 0, 64);
        obj[0] = v931;
        uint64_t v933 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj[0], v932, (uint64_t)v2271, buf, 16);
        if (v933)
        {
          int v935 = 0;
          v936 = 0;
          unint64_t v937 = 0;
          v938 = 0;
          unsigned int v939 = 0;
          unint64_t v940 = 0;
          *(float *)v934.i32 = (float)(unint64_t)v928;
          float32x4_t v941 = vdivq_f32((float32x4_t)v2174, (float32x4_t)vdupq_lane_s32(v934, 0));
          v941.i32[2] = 0;
          *(float32x4_t *)v2165 = v941;
          v2166.i64[0] = **(void **)&v2271[16];
          *(float *)v2164 = (float)(v929 + v930) * 0.5;
          v941.i32[1] = 0;
          uint64_t v942 = v933;
          do
          {
            uint64_t v943 = 0;
            v2167.i64[0] = v942;
            do
            {
              if (**(void **)&v2271[16] != v2166.i64[0]) {
                objc_enumerationMutation(obj[0]);
              }
              unint64_t v944 = *(_DWORD **)(*(void *)&v2271[8] + 8 * v943);
              if (v944) {
                v941.i32[0] = v944[32];
              }
              else {
                v941.i64[0] = 0;
              }
              v2174.n128_u64[0] = v941.i64[0];
              float32x2_t v946 = (float32x2_t)sub_25B477C40(v944).n128_u64[0];
              float32x2_t v948 = vsub_f32(v946, v947);
              v949.f32[0] = sqrtf(vaddv_f32(vmul_f32(v948, v948)));
              *(float *)v950.i32 = v949.f32[0] + 1.1755e-38;
              *(float32x2_t *)v951.f32 = vdiv_f32(vsub_f32(v947, v946), (float32x2_t)vdup_lane_s32(v950, 0));
              float32x4_t v2173 = v949;
              float32x2_t v952 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v949.f32, 0), *(float32x2_t *)v951.f32);
              float32x4_t v953 = v951;
              v953.i32[2] = 0;
              __n128 v2171 = (__n128)v953;
              float32x4_t v954 = vmlaq_f32(vmulq_f32(v953, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v953, (int32x4_t)v953), (int8x16_t)v953, 0xCuLL));
              float32x4_t v955 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v954, (int32x4_t)v954), (int8x16_t)v954, 0xCuLL);
              *(float32x2_t *)v954.f32 = vmul_f32(vadd_f32(v946, v947), (float32x2_t)0x3F0000003F000000);
              v954.i32[2] = (__int32)v2164[0];
              float32x4_t v956 = vmulq_f32(vsubq_f32(v954, *(float32x4_t *)v2165), v955);
              float32x4_t v957 = vaddq_f32(v956, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v956.f32, 1));
              float32x4_t v958 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v956, 2), v957);
              v957.i64[0] = 0;
              *(float32x4_t *)v2172 = v955;
              float32x4_t v2170 = v954;
              float32x4_t v959 = vmlaq_n_f32(v954, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v958, v957), 0), (int8x16_t)v955, (int8x16_t)vnegq_f32(v955)), v2174.n128_f32[0]);
              float32x2_t v960 = vmls_f32(*(float32x2_t *)v959.f32, (float32x2_t)0x3F0000003F000000, v952);
              float32x4_t v2169 = v959;
              float32x2_t v961 = vmla_f32(*(float32x2_t *)v959.f32, (float32x2_t)0x3F0000003F000000, v952);
              if ((unint64_t)v936 >= v937)
              {
                uint64_t v963 = ((char *)v936 - (char *)v935) >> 4;
                unint64_t v964 = v963 + 1;
                if ((unint64_t)(v963 + 1) >> 60) {
                  goto LABEL_1638;
                }
                if ((uint64_t)(v937 - (void)v935) >> 3 > v964) {
                  unint64_t v964 = (uint64_t)(v937 - (void)v935) >> 3;
                }
                if (v937 - (unint64_t)v935 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v965 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v965 = v964;
                }
                if (v965) {
                  unint64_t v965 = (unint64_t)sub_25B3FFAEC(v965);
                }
                else {
                  v945 = 0;
                }
                uint64_t v966 = (float32x2_t *)(v965 + 16 * v963);
                *uint64_t v966 = v960;
                v966[1] = v961;
                if (v936 == v935)
                {
                  long long v968 = (float32x2_t *)(v965 + 16 * v963);
                }
                else
                {
                  unint64_t v967 = v965 + 16 * v963;
                  do
                  {
                    long long v968 = (float32x2_t *)(v967 - 16);
                    *(_OWORD *)(v967 - 16) = *(_OWORD *)v936[-2].f32;
                    v936 -= 2;
                    v967 -= 16;
                  }
                  while (v936 != v935);
                }
                unint64_t v937 = v965 + 16 * (void)v945;
                v962 = v966 + 2;
                if (v935) {
                  operator delete(v935);
                }
                int v935 = v968;
              }
              else
              {
                float32x2_t *v936 = v960;
                v936[1] = v961;
                v962 = v936 + 2;
              }
              float32x2_t v969 = (float32x2_t)vdupq_lane_s32((int32x2_t)v2174.n128_u64[0], 0).u64[0];
              v970.i64[0] = 0x3F0000003F000000;
              v970.i64[1] = 0x3F0000003F000000;
              __n128 v2174 = (__n128)vmlaq_f32(vmulq_f32(v2170, v970), v970, v2169);
              __n128 v2171 = (__n128)vmulq_f32((float32x4_t)v2171, v970);
              float32x4_t v973 = vmlsq_lane_f32((float32x4_t)v2174, (float32x4_t)v2171, *(float32x2_t *)v2173.f32, 0);
              float32x2_t v971 = vmul_f32(v969, (float32x2_t)v2172[0]);
              float32x2_t v972 = vmls_f32(*(float32x2_t *)v973.f32, (float32x2_t)0x3F0000003F000000, v971);
              *(float32x2_t *)v973.f32 = vmla_f32(*(float32x2_t *)v973.f32, (float32x2_t)0x3F0000003F000000, v971);
              if ((unint64_t)v962 >= v937)
              {
                *(float32x4_t *)v2172 = v973;
                uint64_t v975 = ((char *)v962 - (char *)v935) >> 4;
                unint64_t v976 = v975 + 1;
                if ((unint64_t)(v975 + 1) >> 60) {
                  goto LABEL_1638;
                }
                if ((uint64_t)(v937 - (void)v935) >> 3 > v976) {
                  unint64_t v976 = (uint64_t)(v937 - (void)v935) >> 3;
                }
                if (v937 - (unint64_t)v935 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v977 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v977 = v976;
                }
                if (v977) {
                  unint64_t v977 = (unint64_t)sub_25B3FFAEC(v977);
                }
                else {
                  v945 = 0;
                }
                long long v978 = (float32x2_t *)(v977 + 16 * v975);
                *long long v978 = v972;
                v978[1] = (float32x2_t)v2172[0];
                if (v962 == v935)
                {
                  v980 = (float32x2_t *)(v977 + 16 * v975);
                }
                else
                {
                  unint64_t v979 = v977 + 16 * v975;
                  do
                  {
                    v980 = (float32x2_t *)(v979 - 16);
                    *(_OWORD *)(v979 - 16) = *(_OWORD *)v962[-2].f32;
                    v962 -= 2;
                    v979 -= 16;
                  }
                  while (v962 != v935);
                }
                unint64_t v937 = v977 + 16 * (void)v945;
                long long v974 = (float32x4_t *)&v978[2];
                if (v935) {
                  operator delete(v935);
                }
                int v935 = v980;
              }
              else
              {
                float32x2_t *v962 = v972;
                v962[1] = *(float32x2_t *)v973.f32;
                long long v974 = (float32x4_t *)&v962[2];
              }
              v941.i32[1] = v2173.i32[1];
              float32x4_t v982 = vmlaq_n_f32((float32x4_t)v2174, (float32x4_t)v2171, v2173.f32[0]);
              float32x2_t v981 = vmls_f32(*(float32x2_t *)v982.f32, (float32x2_t)0x3F0000003F000000, v971);
              *(float32x2_t *)v982.f32 = vmla_f32(*(float32x2_t *)v982.f32, (float32x2_t)0x3F0000003F000000, v971);
              if ((unint64_t)v974 >= v937)
              {
                __n128 v2174 = (__n128)v982;
                uint64_t v983 = ((char *)v974 - (char *)v935) >> 4;
                unint64_t v984 = v983 + 1;
                if ((unint64_t)(v983 + 1) >> 60) {
LABEL_1638:
                }
                  sub_25B3FBC4C();
                if ((uint64_t)(v937 - (void)v935) >> 3 > v984) {
                  unint64_t v984 = (uint64_t)(v937 - (void)v935) >> 3;
                }
                if (v937 - (unint64_t)v935 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v985 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v985 = v984;
                }
                if (v985) {
                  unint64_t v985 = (unint64_t)sub_25B3FFAEC(v985);
                }
                else {
                  v945 = 0;
                }
                float v986 = (float32x2_t *)(v985 + 16 * v983);
                v941.i32[1] = v2174.n128_i32[1];
                *float v986 = v981;
                v986[1] = (float32x2_t)v2174.n128_u64[0];
                if (v974 == (float32x4_t *)v935)
                {
                  float v988 = (float32x2_t *)(v985 + 16 * v983);
                }
                else
                {
                  unint64_t v987 = v985 + 16 * v983;
                  do
                  {
                    float32x4_t v941 = v974[-1];
                    float v988 = (float32x2_t *)(v987 - 16);
                    *(float32x4_t *)(v987 - 16) = v941;
                    --v974;
                    v987 -= 16;
                  }
                  while (v974 != (float32x4_t *)v935);
                }
                unint64_t v937 = v985 + 16 * (void)v945;
                v936 = v986 + 2;
                if (v935) {
                  operator delete(v935);
                }
                int v935 = v988;
              }
              else
              {
                *(float32x2_t *)v974->f32 = v981;
                v974->i64[1] = v982.i64[0];
                v936 = (float32x2_t *)&v974[1];
              }
              if ((unint64_t)v939 >= v940)
              {
                uint64_t v990 = v939 - v938;
                unint64_t v991 = v990 + 1;
                if ((unint64_t)(v990 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v940 - (void)v938) >> 1 > v991) {
                  unint64_t v991 = (uint64_t)(v940 - (void)v938) >> 1;
                }
                if (v940 - (unint64_t)v938 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v992 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v992 = v991;
                }
                if (v992) {
                  unint64_t v992 = (unint64_t)sub_25B3FBC64(v992);
                }
                else {
                  v945 = 0;
                }
                float v993 = (_DWORD *)(v992 + 4 * v990);
                *float v993 = 1;
                float v989 = v993 + 1;
                while (v939 != v938)
                {
                  int v994 = *--v939;
                  *--float v993 = v994;
                }
                unint64_t v940 = v992 + 4 * (void)v945;
                if (v938) {
                  operator delete(v938);
                }
                v938 = v993;
              }
              else
              {
                *unsigned int v939 = 1;
                float v989 = v939 + 1;
              }
              if ((unint64_t)v989 >= v940)
              {
                uint64_t v996 = v989 - v938;
                unint64_t v997 = v996 + 1;
                if ((unint64_t)(v996 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v940 - (void)v938) >> 1 > v997) {
                  unint64_t v997 = (uint64_t)(v940 - (void)v938) >> 1;
                }
                if (v940 - (unint64_t)v938 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v998 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v998 = v997;
                }
                if (v998) {
                  unint64_t v998 = (unint64_t)sub_25B3FBC64(v998);
                }
                else {
                  v945 = 0;
                }
                long long v999 = (_DWORD *)(v998 + 4 * v996);
                unint64_t v940 = v998 + 4 * (void)v945;
                *long long v999 = 0;
                BOOL v995 = v999 + 1;
                if (v989 == v938) {
                  goto LABEL_623;
                }
                do
                {
                  int v1000 = *--v989;
                  *--long long v999 = v1000;
                }
                while (v989 != v938);
                if (v938) {
LABEL_623:
                }
                  operator delete(v938);
                v938 = v999;
              }
              else
              {
                *float v989 = 0;
                BOOL v995 = v989 + 1;
              }
              if ((unint64_t)v995 >= v940)
              {
                uint64_t v1001 = v995 - v938;
                unint64_t v1002 = v1001 + 1;
                if ((unint64_t)(v1001 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v940 - (void)v938) >> 1 > v1002) {
                  unint64_t v1002 = (uint64_t)(v940 - (void)v938) >> 1;
                }
                if (v940 - (unint64_t)v938 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v1003 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v1003 = v1002;
                }
                if (v1003) {
                  unint64_t v1003 = (unint64_t)sub_25B3FBC64(v1003);
                }
                else {
                  v945 = 0;
                }
                unint64_t v1004 = (_DWORD *)(v1003 + 4 * v1001);
                unint64_t v940 = v1003 + 4 * (void)v945;
                *unint64_t v1004 = 0;
                unsigned int v939 = v1004 + 1;
                if (v995 == v938) {
                  goto LABEL_639;
                }
                do
                {
                  int v1005 = *--v995;
                  *--unint64_t v1004 = v1005;
                }
                while (v995 != v938);
                if (v938) {
LABEL_639:
                }
                  operator delete(v938);
                v938 = v1004;
              }
              else
              {
                *BOOL v995 = 0;
                unsigned int v939 = v995 + 1;
              }
              ++v943;
            }
            while (v943 != v2167.i64[0]);
            uint64_t v1006 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj[0], v945, (uint64_t)v2271, buf, 16);
            uint64_t v942 = v1006;
          }
          while (v1006);
        }
        else
        {
          int v935 = 0;
          v936 = 0;
          v938 = 0;
          unsigned int v939 = 0;
        }

        v921 = v2159;
        long long v2241 = 0uLL;
        *(void *)&long long v2242 = 0;
        sub_25B40F7EC(&v2241, v935, (uint64_t)v936, ((char *)v936 - (char *)v935) >> 4);
        __n128 v2243 = 0uLL;
        *((void *)&v2242 + 1) = 0;
        int64_t v1007 = (char *)v939 - (char *)v938;
        if (v1007)
        {
          if (v1007 < 0) {
            sub_25B3FBC4C();
          }
          v1008 = sub_25B3FBC64(v1007 >> 2);
          *((void *)&v2242 + 1) = v1008;
          v2243.n128_u64[0] = (unint64_t)v1008;
          v2243.n128_u64[1] = (unint64_t)v1008 + 4 * v1009;
          memmove(v1008, v938, v1007);
          v2243.n128_u64[0] = (unint64_t)v1008 + 4 * (v1007 >> 2);
        }
        if (v938) {
          operator delete(v938);
        }
        if (v935) {
          operator delete(v935);
        }

        v1012 = objc_msgSend_walls(v2157, v1010, v1011);
        v1013 = sub_25B40F868(v1012, (uint64_t *)&v2241, (void *)&v2242 + 1, 1, v881[6], v881[3], v881[5]);
        sub_25B4E664C((uint64_t)v2157, v1013);

        int32x2_t v1016 = objc_msgSend_walls(v2157, v1014, v1015);
        float32x2_t v1017 = sub_25B40F868(v1016, (uint64_t *)&v2241, (void *)&v2242 + 1, 0, v881[6], v881[2], v881[4]);
        sub_25B4E664C((uint64_t)v2157, v1017);

        float v1020 = objc_msgSend_walls(v2157, v1018, v1019);
        unint64_t v1023 = objc_msgSend_count(v1020, v1021, v1022);
        int v1026 = objc_msgSend_walls(v2159, v1024, v1025);
        BOOL v1029 = v1023 < objc_msgSend_count(v1026, v1027, v1028);

        if (v1029) {
          sub_25B4E9AA0(v2157, v1030, v1031);
        }
        if (*((void *)&v2242 + 1)) {
          operator delete(*((void **)&v2242 + 1));
        }
        if ((void)v2241) {
          operator delete((void *)v2241);
        }
      }
    }
    else
    {
      v2157 = 0;
      v921 = (void **)v2160;
    }

    int v858 = v2157;
    if (*((unsigned char *)v2156 + 176))
    {
      v1034 = objc_msgSend_dictionaryRepresentation(v2157, v1032, v1033);
      objc_msgSend_setObject_forKeyedSubscript_(v2149, v1035, (uint64_t)v1034, @"bay_window_removal");
    }
  }
  else
  {
    int v858 = (void **)v468;
  }
  __int32 v1036 = (float *)*((void *)v2156 + 12);
  v1037 = v858;
  id v2154 = v1037;
  if (!v1036)
  {
    uint64_t v1325 = 0;
    goto LABEL_1128;
  }
  v2157 = v1037;
  v1040 = objc_msgSend_copy(v2157, v1038, v1039);
  memset(&__p[8], 0, 64);
  long long v2256 = 0u;
  long long v2257 = 0u;
  long long v2258 = 0u;
  long long v2259 = 0u;
  long long v2260 = 0u;
  long long v2261 = 0u;
  *(void *)long long __p = &unk_2708F1E98;
  uint64_t v2262 = 0;
  v2263 = &unk_2708F1F38;
  uint64_t v2264 = 0;
  uint64_t v2266 = 0;
  uint64_t v2265 = 0;
  sub_25B3F6148((uint64_t)v2267);
  uint64_t v2269 = 0;
  uint64_t v2268 = 0;
  uint64_t v2270 = 0;
  v2155 = v1040;
  sub_25B47BC48((uint64_t *)__p, v1040);
  long long v2200 = 0uLL;
  *(void *)&long long v2201 = 0;
  uint64_t v1042 = *((void *)&v2256 + 1);
  uint64_t v1043 = v2257;
  if (*((void *)&v2256 + 1) != (void)v2257)
  {
    __int32 v1044 = 0;
    do
    {
      if (*(char *)(v1042 + 151) < 0)
      {
        if (!*(void *)(v1042 + 136)) {
          goto LABEL_692;
        }
      }
      else if (!*(unsigned char *)(v1042 + 151))
      {
        goto LABEL_692;
      }
      if (*(char *)(v1042 + 175) < 0)
      {
        if (*(void *)(v1042 + 160))
        {
LABEL_674:
          if (sub_25B491880(*(uint64_t *)&__p[8], *(uint64_t *)&__p[16], (unsigned __int8 **)(v1042 + 152)))
          {
            v1045 = (_OWORD *)(sub_25B490C80((uint64_t)__p, (unsigned __int8 **)(v1042 + 152)) + 16);
            if ((unint64_t)v1044 >= (unint64_t)v2201)
            {
              v1047 = (_OWORD *)v2200;
              uint64_t v1048 = (uint64_t)((uint64_t)v1044 - v2200) >> 4;
              unint64_t v1049 = v1048 + 1;
              if ((unint64_t)(v1048 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              uint64_t v1050 = v2201 - v2200;
              if ((uint64_t)(v2201 - v2200) >> 3 > v1049) {
                unint64_t v1049 = v1050 >> 3;
              }
              if ((unint64_t)v1050 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v1051 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v1051 = v1049;
              }
              if (v1051) {
                unint64_t v1051 = (unint64_t)sub_25B3FFAEC(v1051);
              }
              else {
                uint64_t v1052 = 0;
              }
              v1053 = (_OWORD *)(v1051 + 16 * v1048);
              _OWORD *v1053 = *v1045;
              __int32 v1054 = v1053;
              if (v1044 != v1047)
              {
                do
                  *--__int32 v1054 = *--v1044;
                while (v1044 != v1047);
                __int32 v1044 = (_OWORD *)v2200;
              }
              v1046 = v1053 + 1;
              *(void *)&long long v2200 = v1054;
              *((void *)&v2200 + 1) = v1053 + 1;
              *(void *)&long long v2201 = v1051 + 16 * v1052;
              if (v1044) {
                operator delete(v1044);
              }
            }
            else
            {
              *__int32 v1044 = *v1045;
              v1046 = v1044 + 1;
            }
            *((void *)&v2200 + 1) = v1046;
            __int32 v1044 = v1046;
          }
        }
      }
      else if (*(unsigned char *)(v1042 + 175))
      {
        goto LABEL_674;
      }
LABEL_692:
      v1042 += 176;
    }
    while (v1042 != v1043);
  }
  long long v2196 = 0uLL;
  *(void *)&long long v2197 = 0;
  uint64_t v1055 = *(void *)&__p[56];
  uint64_t v1056 = *(void *)&__p[64];
  if (*(void *)&__p[56] != *(void *)&__p[64])
  {
    v1057 = 0;
    do
    {
      if (*(char *)(v1055 + 151) < 0)
      {
        if (!*(void *)(v1055 + 136)) {
          goto LABEL_721;
        }
      }
      else if (!*(unsigned char *)(v1055 + 151))
      {
        goto LABEL_721;
      }
      if (*(char *)(v1055 + 175) < 0)
      {
        if (*(void *)(v1055 + 160))
        {
LABEL_703:
          if (sub_25B491880(*(uint64_t *)&__p[8], *(uint64_t *)&__p[16], (unsigned __int8 **)(v1055 + 152)))
          {
            uint64_t v1058 = (_OWORD *)(sub_25B490C80((uint64_t)__p, (unsigned __int8 **)(v1055 + 152)) + 16);
            if ((unint64_t)v1057 >= (unint64_t)v2197)
            {
              v1060 = (_OWORD *)v2196;
              uint64_t v1061 = (uint64_t)((uint64_t)v1057 - v2196) >> 4;
              unint64_t v1062 = v1061 + 1;
              if ((unint64_t)(v1061 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              uint64_t v1063 = v2197 - v2196;
              if ((uint64_t)(v2197 - v2196) >> 3 > v1062) {
                unint64_t v1062 = v1063 >> 3;
              }
              if ((unint64_t)v1063 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v1064 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v1064 = v1062;
              }
              if (v1064) {
                unint64_t v1064 = (unint64_t)sub_25B3FFAEC(v1064);
              }
              else {
                uint64_t v1065 = 0;
              }
              uint64_t v1066 = (_OWORD *)(v1064 + 16 * v1061);
              *uint64_t v1066 = *v1058;
              unint64_t v1067 = v1066;
              if (v1057 != v1060)
              {
                do
                  *--unint64_t v1067 = *--v1057;
                while (v1057 != v1060);
                v1057 = (_OWORD *)v2196;
              }
              uint64_t v1059 = v1066 + 1;
              *(void *)&long long v2196 = v1067;
              *((void *)&v2196 + 1) = v1066 + 1;
              *(void *)&long long v2197 = v1064 + 16 * v1065;
              if (v1057) {
                operator delete(v1057);
              }
            }
            else
            {
              _OWORD *v1057 = *v1058;
              uint64_t v1059 = v1057 + 1;
            }
            *((void *)&v2196 + 1) = v1059;
            v1057 = v1059;
          }
        }
      }
      else if (*(unsigned char *)(v1055 + 175))
      {
        goto LABEL_703;
      }
LABEL_721:
      v1055 += 176;
    }
    while (v1055 != v1056);
  }
  v2174.n128_u64[0] = (unint64_t)v1036;
  v2181 = 0;
  v2180 = 0;
  unint64_t v2182 = 0;
  uint64_t v1069 = *((void *)&v2258 + 1);
  uint64_t v1068 = v2258;
  if ((void)v2258 == *((void *)&v2258 + 1))
  {
    uint64_t v1070 = 0;
    unint64_t v1071 = 0;
    goto LABEL_820;
  }
  uint64_t v1070 = 0;
  unint64_t v1071 = 0;
  unint64_t v1072 = 0;
  do
  {
    if (*(char *)(v1068 + 151) < 0)
    {
      if (!*(void *)(v1068 + 136)) {
        goto LABEL_817;
      }
    }
    else if (!*(unsigned char *)(v1068 + 151))
    {
      goto LABEL_817;
    }
    if (*(char *)(v1068 + 175) < 0)
    {
      if (!*(void *)(v1068 + 160)) {
        goto LABEL_817;
      }
    }
    else if (!*(unsigned char *)(v1068 + 175))
    {
      goto LABEL_817;
    }
    v2172[0] = v1070;
    if (!sub_25B491880(*(uint64_t *)&__p[32], *(uint64_t *)&__p[40], (unsigned __int8 **)(v1068 + 152)))
    {
      if (sub_25B491880(*(uint64_t *)&__p[8], *(uint64_t *)&__p[16], (unsigned __int8 **)(v1068 + 152)))
      {
        __int32 v1078 = (_OWORD *)(sub_25B490C80((uint64_t)__p, (unsigned __int8 **)(v1068 + 152)) + 16);
        v1079 = v2181;
        if ((unint64_t)v2181 >= v2182)
        {
          v1089 = (char *)v2180;
          uint64_t v1090 = (v2181 - (unsigned char *)v2180) >> 4;
          unint64_t v1091 = v1090 + 1;
          if ((unint64_t)(v1090 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v1092 = v2182 - (void)v2180;
          if ((uint64_t)(v2182 - (void)v2180) >> 3 > v1091) {
            unint64_t v1091 = v1092 >> 3;
          }
          if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v1093 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v1093 = v1091;
          }
          if (v1093) {
            unint64_t v1093 = (unint64_t)sub_25B3FFAEC(v1093);
          }
          else {
            uint64_t v1094 = 0;
          }
          v1113 = (char *)(v1093 + 16 * v1090);
          *(_OWORD *)v1113 = *v1078;
          v1114 = v1113;
          if (v1079 != v1089)
          {
            do
            {
              *((_OWORD *)v1114 - 1) = *((_OWORD *)v1079 - 1);
              v1114 -= 16;
              v1079 -= 16;
            }
            while (v1079 != v1089);
            v1079 = (char *)v2180;
          }
          v1080 = v1113 + 16;
          v2180 = v1114;
          unint64_t v2182 = v1093 + 16 * v1094;
          if (v1079) {
            operator delete(v1079);
          }
        }
        else
        {
          *(_OWORD *)v2181 = *v1078;
          v1080 = v1079 + 16;
        }
        v2181 = v1080;
      }
      goto LABEL_816;
    }
    uint64_t v1073 = sub_25B491A40((uint64_t)__p, (unsigned __int8 **)(v1068 + 152));
    sub_25B3F6148((uint64_t)buf);
    uint64_t v1074 = objc_opt_new();
    sub_25B49371C((uint64_t)buf, (float *)(v1073 + 32), -1, v1074, 1.0);

    uint64_t v1076 = *(void *)&__p[16];
    if (*(void *)&__p[16] >= *(void *)&__p[24])
    {
      uint64_t v1077 = sub_25B47C818((uint64_t *)&__p[8], (uint64_t)buf, v1075);
    }
    else
    {
      sub_25B47C6E4(*(uint64_t *)&__p[16], (uint64_t)buf, v1075);
      uint64_t v1077 = v1076 + 176;
    }
    *(void *)&__p[16] = v1077;
    v1081 = v2181;
    if ((unint64_t)v2181 >= v2182)
    {
      v1083 = (char *)v2180;
      uint64_t v1084 = (v2181 - (unsigned char *)v2180) >> 4;
      unint64_t v1085 = v1084 + 1;
      if ((unint64_t)(v1084 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v1086 = v2182 - (void)v2180;
      if ((uint64_t)(v2182 - (void)v2180) >> 3 > v1085) {
        unint64_t v1085 = v1086 >> 3;
      }
      if ((unint64_t)v1086 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v1087 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1087 = v1085;
      }
      if (v1087) {
        unint64_t v1087 = (unint64_t)sub_25B3FFAEC(v1087);
      }
      else {
        uint64_t v1088 = 0;
      }
      float32x2_t v1095 = (char *)(v1087 + 16 * v1084);
      *(_OWORD *)float32x2_t v1095 = *(_OWORD *)&buf[16];
      v1096 = v1095;
      if (v1081 != v1083)
      {
        do
        {
          *((_OWORD *)v1096 - 1) = *((_OWORD *)v1081 - 1);
          v1096 -= 16;
          v1081 -= 16;
        }
        while (v1081 != v1083);
        v1081 = (char *)v2180;
      }
      unint64_t v1082 = v1095 + 16;
      v2180 = v1096;
      unint64_t v2182 = v1087 + 16 * v1088;
      if (v1081) {
        operator delete(v1081);
      }
    }
    else
    {
      *(_OWORD *)v2181 = *(_OWORD *)&buf[16];
      unint64_t v1082 = v1081 + 16;
    }
    v2181 = v1082;
    uint64_t v1097 = *(void *)&__p[32];
    if (*(void *)&__p[40] == *(void *)&__p[32])
    {
LABEL_790:
      v1108 = v1071;
      goto LABEL_815;
    }
    uint64_t v1098 = 0;
    if ((unint64_t)((*(void *)&__p[40] - *(void *)&__p[32]) / 176) <= 1) {
      uint64_t v1099 = 1;
    }
    else {
      uint64_t v1099 = (*(void *)&__p[40] - *(void *)&__p[32]) / 176;
    }
    while (1)
    {
      uint64_t v1100 = v1097 + 176 * v1098;
      int v1101 = (unsigned __int8 *)(v1100 + 128);
      int v1102 = *(char *)(v1100 + 151);
      uint64_t v1103 = *(unsigned __int8 *)(v1100 + 151);
      if (v1102 < 0)
      {
        if (!*((void *)v1101 + 1)) {
          goto LABEL_786;
        }
      }
      else if (!v1103)
      {
        goto LABEL_786;
      }
      if ((v1103 & 0x80u) == 0) {
        uint64_t v1104 = v1103;
      }
      else {
        uint64_t v1104 = *((void *)v1101 + 1);
      }
      uint64_t v1105 = *(unsigned __int8 *)(v1068 + 175);
      int v1106 = (char)v1105;
      if ((v1105 & 0x80u) != 0) {
        uint64_t v1105 = *(void *)(v1068 + 160);
      }
      if (v1104 != v1105) {
        goto LABEL_786;
      }
      v1107 = v1106 >= 0 ? (unsigned __int8 *)(v1068 + 152) : *(unsigned __int8 **)(v1068 + 152);
      if ((v1103 & 0x80) != 0) {
        break;
      }
      if (!v1103) {
        goto LABEL_788;
      }
      while (*v1101 == *v1107)
      {
        ++v1101;
        ++v1107;
        if (!--v1103) {
          goto LABEL_788;
        }
      }
LABEL_786:
      if (++v1098 == v1099) {
        goto LABEL_790;
      }
    }
    if (memcmp(*(const void **)v1101, v1107, *((void *)v1101 + 1))) {
      goto LABEL_786;
    }
LABEL_788:
    if ((unint64_t)v1071 < v1072)
    {
      *(_DWORD *)unint64_t v1071 = v1098;
      v1071 += 4;
      goto LABEL_790;
    }
    uint64_t v1109 = (v1071 - v1070) >> 2;
    unint64_t v1110 = v1109 + 1;
    if ((unint64_t)(v1109 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v1072 - (unint64_t)v2172[0]) >> 1 > v1110) {
      unint64_t v1110 = (uint64_t)(v1072 - (unint64_t)v2172[0]) >> 1;
    }
    if (v1072 - (unint64_t)v2172[0] >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1111 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1111 = v1110;
    }
    if (v1111) {
      unint64_t v1111 = (unint64_t)sub_25B3FBC64(v1111);
    }
    else {
      uint64_t v1112 = 0;
    }
    v1115 = (char *)(v1111 + 4 * v1109);
    *(_DWORD *)v1115 = v1098;
    v1108 = v1115 + 4;
    if (v1071 == v2172[0])
    {
      id v1116 = v2172[0];
    }
    else
    {
      id v1116 = v2172[0];
      do
      {
        int v1117 = *((_DWORD *)v1071 - 1);
        v1071 -= 4;
        *((_DWORD *)v1115 - 1) = v1117;
        v1115 -= 4;
      }
      while (v1071 != v2172[0]);
    }
    unint64_t v1072 = v1111 + 4 * v1112;
    if (v1116) {
      operator delete(v1116);
    }
    v2172[0] = v1115;
LABEL_815:
    sub_25B3F5FE8((uint64_t)buf);
    unint64_t v1071 = v1108;
LABEL_816:
    uint64_t v1070 = (char *)v2172[0];
LABEL_817:
    v1068 += 176;
  }
  while (v1068 != v1069);
LABEL_820:
  unint64_t v2194 = 0;
  uint64_t v2193 = 0;
  unint64_t v2195 = 0;
  v1118 = *(char **)&__p[40];
  v1119 = *(char **)&__p[32];
  v2172[0] = v1070;
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v1120 = 0;
    if ((unint64_t)((v1071 - v1070) >> 2) <= 1) {
      uint64_t v1121 = 1;
    }
    else {
      uint64_t v1121 = (v1071 - v1070) >> 2;
    }
    do
    {
      int v1122 = v1070;
      uint64_t v1123 = v1121;
      if (v1071 == v1070)
      {
LABEL_827:
        sub_25B47C6E4((uint64_t)buf, (uint64_t)&v1119[176 * v1120], v1041);
        unint64_t v1126 = v2194;
        if (v2194 >= v2195)
        {
          uint64_t v1127 = sub_25B47C818(&v2193, (uint64_t)buf, v1125);
        }
        else
        {
          sub_25B47C6E4(v2194, (uint64_t)buf, v1125);
          uint64_t v1127 = v1126 + 176;
        }
        uint64_t v1070 = (char *)v2172[0];
        unint64_t v2194 = v1127;
        sub_25B3F5FE8((uint64_t)buf);
        v1118 = *(char **)&__p[40];
        v1119 = *(char **)&__p[32];
      }
      else
      {
        while (1)
        {
          int v1124 = *(_DWORD *)v1122;
          v1122 += 4;
          if (v1120 == v1124) {
            break;
          }
          if (!--v1123) {
            goto LABEL_827;
          }
        }
      }
      ++v1120;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((v1118 - v1119) >> 4) > v1120);
    if (v1118 != v1119)
    {
      v1128 = v1118 - 176;
      uint64_t v1129 = v1118 - 176;
      v1130 = v1118 - 176;
      do
      {
        v1131 = *(void (***)(char *))v1130;
        v1130 -= 176;
        (*v1131)(v1129);
        v1128 -= 176;
        BOOL v1206 = v1129 == v1119;
        uint64_t v1129 = v1130;
      }
      while (!v1206);
    }
    v1118 = v1119;
  }
  *(void *)&__p[40] = v1118;
  sub_25B547018(v2193, v2194, (uint64_t *)&__p[32]);
  v2191 = 0;
  v2190 = 0;
  unint64_t v2192 = 0;
  uint64_t v1132 = *(void *)&__p[32];
  uint64_t v1133 = *(void *)&__p[40];
  if (*(void *)&__p[32] != *(void *)&__p[40])
  {
    v1134 = 0;
    do
    {
      sub_25B3F6148((uint64_t)buf);
      v1135 = objc_opt_new();
      sub_25B49371C((uint64_t)buf, (float *)(v1132 + 32), -1, v1135, 1.0);

      uint64_t v1137 = *(void *)&__p[16];
      if (*(void *)&__p[16] >= *(void *)&__p[24])
      {
        uint64_t v1138 = sub_25B47C818((uint64_t *)&__p[8], (uint64_t)buf, v1136);
      }
      else
      {
        sub_25B47C6E4(*(uint64_t *)&__p[16], (uint64_t)buf, v1136);
        uint64_t v1138 = v1137 + 176;
      }
      *(void *)&__p[16] = v1138;
      if ((unint64_t)v1134 >= v2192)
      {
        v1140 = (char *)v2190;
        uint64_t v1141 = (v1134 - (unsigned char *)v2190) >> 4;
        unint64_t v1142 = v1141 + 1;
        if ((unint64_t)(v1141 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v1143 = v2192 - (void)v2190;
        if ((uint64_t)(v2192 - (void)v2190) >> 3 > v1142) {
          unint64_t v1142 = v1143 >> 3;
        }
        if ((unint64_t)v1143 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v1144 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1144 = v1142;
        }
        if (v1144) {
          unint64_t v1144 = (unint64_t)sub_25B3FFAEC(v1144);
        }
        else {
          uint64_t v1145 = 0;
        }
        v1146 = (_OWORD *)(v1144 + 16 * v1141);
        _OWORD *v1146 = *(_OWORD *)&buf[16];
        int v1147 = (char *)v1146;
        if (v1134 != v1140)
        {
          do
          {
            *((_OWORD *)v1147 - 1) = *((_OWORD *)v1134 - 1);
            v1147 -= 16;
            v1134 -= 16;
          }
          while (v1134 != v1140);
          v1134 = (char *)v2190;
        }
        v1139 = v1146 + 1;
        v2190 = v1147;
        v2191 = v1146 + 1;
        unint64_t v2192 = v1144 + 16 * v1145;
        if (v1134) {
          operator delete(v1134);
        }
      }
      else
      {
        *(_OWORD *)v1134 = *(_OWORD *)&buf[16];
        v1139 = v1134 + 16;
      }
      v2191 = v1139;
      sub_25B3F5FE8((uint64_t)buf);
      v1132 += 176;
      v1134 = (char *)v1139;
    }
    while (v1132 != v1133);
  }
  id v1148 = objc_alloc(MEMORY[0x263EFF980]);
  v2169.i64[0] = objc_msgSend_initWithCapacity_(v1148, v1149, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 4));
  uint64_t v1151 = *(void *)&__p[8];
  uint64_t v1152 = *(void *)&__p[16];
  while (v1151 != v1152)
  {
    objc_msgSend_addObject_((void *)v2169.i64[0], v1150, *(void *)(v1151 + 8));
    v1151 += 176;
  }
  id v1153 = objc_alloc(MEMORY[0x263EFF980]);
  v2168 = objc_msgSend_initWithCapacity_(v1153, v1154, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 4));
  uint64_t v1156 = *(void *)&__p[32];
  uint64_t v1157 = *(void *)&__p[40];
  while (v1156 != v1157)
  {
    objc_msgSend_addObject_(v2168, v1155, *(void *)(v1156 + 8));
    v1156 += 176;
  }
  id v1158 = (id)v2169.i64[0];
  *(void *)v2271 = v1158;
  sub_25B4AF554(&v2237, (id *)v2271);
  v2159 = v2168;
  src.i64[0] = (uint64_t)v2159;
  sub_25B4AF554(&v2204, (id *)&src);
  sub_25B4B6B1C((uint64_t)buf, (uint64_t)&v2237, (uint64_t)&v2204, 0.00000001);

  v2152.i64[0] = (uint64_t)v1158;
  obj[0] = 0;
  unint64_t v2188 = 0;
  v2187 = 0;
  unint64_t v2189 = 0;
  v1159 = v2220;
  while (2)
  {
    __int32 v1160 = v2218;
    if (v2218 == v2219) {
      goto LABEL_1012;
    }
    v2171.n128_u8[0] = 0;
    id v2153 = (char *)obj[0] + 1;
LABEL_868:
    v1161 = v2218;
    if (v2218 == v2219) {
      goto LABEL_1002;
    }
    while (2)
    {
      int v1162 = *((_DWORD *)v1160 + 8);
      int v1163 = *((_DWORD *)v1161 + 8);
      if (v1162 >= v1163 || !sub_25B3FAB54(v2220[0], v2220[1], *((_DWORD *)v1160 + 8), *((_DWORD *)v1161 + 8))) {
        goto LABEL_908;
      }
      v1164 = sub_25B3F9CFC(v1159, v1162, v1163);
      float32x4_t v2246 = *(float32x4_t *)(v1164 + 5);
      float32x4_t v2247 = *(float32x4_t *)(v1164 + 7);
      float32x4_t v2248 = *(float32x4_t *)(v1164 + 9);
      v1165 = (const void *)v1164[12];
      uint64_t v2249 = v1164[11];
      float32x4_t src = *(float32x4_t *)(v1164 + 3);
      v2251 = 0;
      uint64_t v2252 = 0;
      v2250 = 0;
      sub_25B3FCA58(&v2250, v1165, v1164[13], (v1164[13] - (uint64_t)v1165) >> 2);
      long long v1166 = *(_OWORD *)(v1164 + 17);
      long long v2253 = *(_OWORD *)(v1164 + 15);
      *(_OWORD *)v2254 = v1166;
      *(_OWORD *)&v2254[12] = *(_OWORD *)((char *)v1164 + 148);
      if (v2246.i32[1] | v2248.i32[1]) {
        goto LABEL_904;
      }
      float v1167 = *((float *)&v2249 + 1);
      if (*((float *)&v2249 + 1) >= (float)(180.0 - *((float *)&v2249 + 1))) {
        float v1167 = 180.0 - *((float *)&v2249 + 1);
      }
      if (v1167 >= v1036[4] || *(float *)&v2254[12] >= v1036[5]) {
        goto LABEL_900;
      }
      v1168 = (float *)v2250;
      if (v2250 != v2251)
      {
        v1169 = (float *)((char *)v2250 + 4);
        v1168 = (float *)v2250;
        if ((char *)v2250 + 4 != v2251)
        {
          float v1170 = *(float *)v2250;
          v1168 = (float *)v2250;
          __int32 v1171 = (float *)((char *)v2250 + 4);
          do
          {
            float v1172 = *v1171++;
            float v1173 = v1172;
            if (v1172 < v1170)
            {
              float v1170 = v1173;
              v1168 = v1169;
            }
            v1169 = v1171;
          }
          while (v1171 != (float *)v2251);
        }
      }
      if (*v1168 >= v1036[6])
      {
        char v1186 = 0;
        int v1187 = 0;
        long long v2272 = 0u;
        long long v2273 = 0u;
        memset(&v2271[8], 0, 64);
        uint64_t v2274 = 0;
        v2275 = 0;
        __int16 v2276 = 257;
        goto LABEL_901;
      }
      char v1174 = sub_25B40E348((float32x2_t *)&src, (float32x2_t *)&v2247);
      v2163.i32[0] = v2246.i32[3];
      LODWORD(v2164[0]) = v2246.i32[2];
      if (v1174) {
        __int32 v1176 = v2246.i32[3];
      }
      else {
        __int32 v1176 = v2246.i32[2];
      }
      __int32 v1177 = v2248.i32[2];
      LODWORD(v2165[0]) = v2248.i32[3];
      v2166.i32[0] = v2248.i32[2];
      if (v1175) {
        __int32 v1177 = v2248.i32[3];
      }
      uint64_t v1178 = *((void *)&v2210 + 1);
      if (*((void *)&v2210 + 1))
      {
        uint64_t v1179 = (long long *)((char *)&v2210 + 8);
        unint64_t v1180 = (uint64_t *)*((void *)&v2210 + 1);
        do
        {
          uint64_t v1181 = v1180;
          unint64_t v1182 = v1179;
          __int32 v1183 = *((_DWORD *)v1180 + 8);
          if (v1183 >= v1176) {
            uint64_t v1179 = v1180;
          }
          else {
            ++v1180;
          }
          unint64_t v1180 = (uint64_t *)*v1180;
        }
        while (v1180);
        if (v1179 == (long long *)((char *)&v2210 + 8)
          || (v1183 >= v1176 ? (unint64_t v1184 = v1181) : (unint64_t v1184 = v1182), *((_DWORD *)v1184 + 8) > v1176))
        {
          unint64_t v1185 = 0;
        }
        else
        {
          uint64_t v1190 = v1183 >= v1176 ? v1181 : v1182;
          unint64_t v1185 = *((void *)v1190 + 7);
        }
        id v1191 = (uint64_t *)&v2210 + 1;
        do
        {
          BOOL v1192 = (uint64_t *)v1178;
          double v1193 = v1191;
          __int32 v1194 = *(_DWORD *)(v1178 + 32);
          id v1195 = (uint64_t *)(v1178 + 8);
          if (v1194 >= v1177)
          {
            id v1195 = v1192;
            id v1191 = v1192;
          }
          uint64_t v1178 = *v1195;
        }
        while (v1178);
        if (v1191 != (uint64_t *)((char *)&v2210 + 8))
        {
          uint64_t v1196 = v1194 >= v1177 ? v1192 : v1193;
          if (*((_DWORD *)v1196 + 8) <= v1177)
          {
            id v1204 = v1194 >= v1177 ? v1192 : v1193;
            if (v1185 >= 3 && (unint64_t)v1204[7] > 2) {
              goto LABEL_900;
            }
          }
        }
      }
      int v1198 = (sub_25B40E3D8((float32x2_t *)&src, (float32x2_t *)&v2247) & 1) != 0 ? v2163.i32[0] : LODWORD(v2164[0]);
      LODWORD(v2177[0]) = v1198;
      int v1199 = (v1197 & 1) != 0 ? LODWORD(v2165[0]) : v2166.i32[0];
      LODWORD(v2186) = v1199;
      id v1200 = v2212;
      if (!v2212)
      {
LABEL_900:
        char v1186 = 0;
        int v1187 = 0;
        *(void *)v2271 = &unk_2708F2218;
        memset(&v2271[8], 0, 64);
        long long v2272 = 0u;
        long long v2273 = 0u;
        uint64_t v2274 = 0;
        v2275 = 0;
        __int16 v2276 = 257;
        goto LABEL_901;
      }
      id v1201 = v2212;
      while (2)
      {
        int v1202 = *((_DWORD *)v1201 + 8);
        if (v1198 < v1202)
        {
LABEL_940:
          id v1201 = (uint64_t *)*v1201;
          if (!v1201) {
            goto LABEL_900;
          }
          continue;
        }
        break;
      }
      if (v1202 < v1198)
      {
        ++v1201;
        goto LABEL_940;
      }
      while (1)
      {
        int v1203 = *((_DWORD *)v1200 + 8);
        if (v1199 < v1203) {
          goto LABEL_945;
        }
        if (v1203 >= v1199) {
          break;
        }
        ++v1200;
LABEL_945:
        id v1200 = (uint64_t *)*v1200;
        if (!v1200) {
          goto LABEL_900;
        }
      }
      id v1205 = sub_25B3FF7C0((uint64_t **)&v2211 + 1, v1198, v2177)[5];
      v2179[0] = v1205;
      v2178[0] = (float32x2_t)sub_25B3FF7C0((uint64_t **)&v2211 + 1, v1199, &v2186)[5];
      sub_25B3FD8A4((uint64_t)&v2241, (uint64_t)buf, v1198, v1199, 0, (float32x2_t)v1205, v2178[0]);
      BOOL v1206 = v2163.i32[0] == v1198 && LODWORD(v2164[0]) == v1199;
      char v1207 = v1206;
      BOOL v1208 = v2163.i32[0] == v1199 && LODWORD(v2164[0]) == v1198;
      if (!v1208 && (v1207 & 1) == 0) {
        sub_25B3F9000((uint64_t)buf, v2246.i32[0]);
      }
      BOOL v1210 = LODWORD(v2165[0]) == v1198 && v2166.i32[0] == v1199;
      BOOL v1211 = LODWORD(v2165[0]) == v1199 && v2166.i32[0] == v1198;
      if (!v1211 && !v1210) {
        sub_25B3F9000((uint64_t)buf, v2248.i32[0]);
      }
      LODWORD(v2185) = 3;
      LODWORD(v2208) = 2;
      LODWORD(v2184) = 2;
      sub_25B542DEC(&v2241, (int *)&v2185, (int *)&v2208, (int *)&v2184);
      sub_25B45A630((uint64_t)v2271, &v2241);
      sub_25B5470A0((uint64_t)v2271, 0, (uint64_t)&src, &src.i64[1]);
      sub_25B5470A0((uint64_t)v2271, 1, (uint64_t)&v2247, &v2247.i64[1]);
      sub_25B5470A0((uint64_t)v2271, 2, (uint64_t)v2179, (uint64_t *)v2178);
      if (HIBYTE(v2276))
      {
        char v1186 = 0;
        int v1187 = 0;
      }
      else
      {
        if (v2188 >= v2189)
        {
          unint64_t v1213 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v2188 - (void)v2187) >> 3);
          unint64_t v1214 = v1213 + 1;
          if (v1213 + 1 > 0x1AF286BCA1AF286) {
            sub_25B3FBC4C();
          }
          if (0xD79435E50D79436 * ((uint64_t)(v2189 - (void)v2187) >> 3) > v1214) {
            unint64_t v1214 = 0xD79435E50D79436 * ((uint64_t)(v2189 - (void)v2187) >> 3);
          }
          if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v2189 - (void)v2187) >> 3) >= 0xD79435E50D7943) {
            unint64_t v1215 = 0x1AF286BCA1AF286;
          }
          else {
            unint64_t v1215 = v1214;
          }
          v2144 = v1159;
          if (v1215)
          {
            if (v1215 > 0x1AF286BCA1AF286) {
              sub_25B3FA70C();
            }
            v1216 = operator new(152 * v1215);
            v2171.n128_u64[0] = v1215;
          }
          else
          {
            v1216 = 0;
            v2171.n128_u64[0] = 0;
          }
          v2166.i64[0] = (uint64_t)v1216;
          uint64_t v1217 = (uint64_t)v1216 + 152 * v1213;
          v1218 = (void *)sub_25B45F1E4(v1217, (uint64_t)v2271);
          uint64_t v1219 = v2188;
          unint64_t v1220 = v2187;
          while ((void *)v1219 != v1220)
          {
            v1219 -= 152;
            v1218 = (void *)sub_25B45F1E4((uint64_t)v1218 - 152, v1219);
          }
          uint64_t v1221 = v2166.i64[0] + 152 * v2171.n128_u64[0];
          v1222 = (void (***)(void))v2187;
          unint64_t v1223 = v2188;
          v2187 = v1218;
          v2171.n128_u64[0] = v1217 + 152;
          unint64_t v2188 = v1217 + 152;
          unint64_t v2189 = v1221;
          if ((void (***)(void))v1223 != v1222)
          {
            unint64_t v1224 = v1223 - 152;
            uint64_t v1225 = (void (***)(void))(v1223 - 152);
            unint64_t v1226 = (void (***)(void))(v1223 - 152);
            do
            {
              v1227 = *v1226;
              v1226 -= 19;
              (*v1227)(v1225);
              v1224 -= 152;
              BOOL v1206 = v1225 == v1222;
              uint64_t v1225 = v1226;
            }
            while (!v1206);
          }
          if (v1222) {
            operator delete(v1222);
          }
          uint64_t v1212 = v2171.n128_u64[0];
          v1159 = v2144;
        }
        else
        {
          uint64_t v1212 = sub_25B45F1E4(v2188, (uint64_t)v2271) + 152;
        }
        unint64_t v2188 = v1212;
        int v1187 = 28;
        char v1186 = 1;
        v2171.n128_u8[0] = 1;
      }
LABEL_901:
      *(void *)v2271 = &unk_2708F2218;
      if (v2275) {
        sub_25B404120(v2275);
      }
      if ((v1186 & 1) == 0) {
LABEL_904:
      }
        int v1187 = 0;
      if (v2250) {
        operator delete(v2250);
      }
      if (!v1187)
      {
LABEL_908:
        long long v1188 = (void *)*((void *)v1161 + 1);
        if (v1188)
        {
          do
          {
            id v1189 = v1188;
            long long v1188 = (void *)*v1188;
          }
          while (v1188);
        }
        else
        {
          do
          {
            id v1189 = (unsigned char *)*((void *)v1161 + 2);
            BOOL v1206 = *(void *)v1189 == (void)v1161;
            v1161 = v1189;
          }
          while (!v1206);
        }
        v1161 = v1189;
        if (v1189 == v2219) {
          break;
        }
        continue;
      }
      break;
    }
LABEL_1002:
    if (v2171.n128_u8[0])
    {
      BOOL v1230 = obj[0] >= (id)0xE;
      obj[0] = v2153;
      if (v1230) {
        goto LABEL_1012;
      }
      continue;
    }
    break;
  }
  long long v1228 = (void *)*((void *)v1160 + 1);
  if (v1228)
  {
    do
    {
      v1229 = v1228;
      long long v1228 = (void *)*v1228;
    }
    while (v1228);
  }
  else
  {
    do
    {
      v1229 = (unsigned char *)*((void *)v1160 + 2);
      BOOL v1206 = *(void *)v1229 == (void)v1160;
      __int32 v1160 = v1229;
    }
    while (!v1206);
  }
  __int32 v1160 = v1229;
  if (v1229 != v2219) {
    goto LABEL_868;
  }
LABEL_1012:
  uint64_t v1231 = *(void *)&__p[8];
  if (*(void *)&__p[16] == *(void *)&__p[8])
  {
    float v1232 = 0.0;
    float v1233 = 0.0;
    long long v1237 = v1158;
    unint64_t v1238 = 0x263EFF000;
  }
  else
  {
    float v1232 = *(float *)(*(void *)&__p[8] + 64);
    float v1233 = *(float *)(*(void *)&__p[8] + 68);
    uint64_t v1234 = *(void *)&__p[16] - 176;
    uint64_t v1235 = *(void *)&__p[16] - 176;
    long long v1236 = (void (***)(uint64_t))(*(void *)&__p[16] - 176);
    long long v1237 = v1158;
    unint64_t v1238 = 0x263EFF000;
    do
    {
      long long v1239 = *v1236;
      v1236 -= 22;
      (*v1239)(v1235);
      v1234 -= 176;
      BOOL v1206 = v1235 == v1231;
      uint64_t v1235 = (uint64_t)v1236;
    }
    while (!v1206);
  }
  *(void *)&__p[16] = v1231;
  id v1240 = v2218;
  if (v2218 != v2219)
  {
    do
    {
      if (!*((_DWORD *)v1240 + 15))
      {
        sub_25B3F6148((uint64_t)v2271);
        id v1241 = objc_opt_new();
        sub_25B493870((uint64_t)v2271, (long long *)(v1240 + 40), v1241, 0, v1232, v1233, 1.0);

        uint64_t v1243 = *(void *)&__p[16];
        if (*(void *)&__p[16] >= *(void *)&__p[24])
        {
          uint64_t v1244 = sub_25B47C818((uint64_t *)&__p[8], (uint64_t)v2271, v1242);
        }
        else
        {
          sub_25B47C6E4(*(uint64_t *)&__p[16], (uint64_t)v2271, v1242);
          uint64_t v1244 = v1243 + 176;
        }
        *(void *)&__p[16] = v1244;
        sub_25B3F5FE8((uint64_t)v2271);
      }
      float32x2_t v1245 = (void *)*((void *)v1240 + 1);
      if (v1245)
      {
        do
        {
          v1246 = v1245;
          float32x2_t v1245 = (void *)*v1245;
        }
        while (v1245);
      }
      else
      {
        do
        {
          v1246 = (unsigned char *)*((void *)v1240 + 2);
          BOOL v1206 = *(void *)v1246 == (void)v1240;
          id v1240 = v1246;
        }
        while (!v1206);
      }
      id v1240 = v1246;
    }
    while (v1246 != v2219);
  }
  sub_25B547E80((uint64_t *)&v2258, &v2180, (float32x2_t **)&__p[8], (uint64_t *)&v2187);
  sub_25B547E80((uint64_t *)&__p[56], &v2196, (float32x2_t **)&__p[8], (uint64_t *)&v2187);
  sub_25B547E80((uint64_t *)&v2256 + 1, &v2200, (float32x2_t **)&__p[8], (uint64_t *)&v2187);
  sub_25B547E80((uint64_t *)&__p[32], &v2190, (float32x2_t **)&__p[8], (uint64_t *)&v2187);
  sub_25B5481AC(v2258, *((uint64_t *)&v2258 + 1), (uint64_t)__p);
  sub_25B5481AC(*(uint64_t *)&__p[56], *(uint64_t *)&__p[64], (uint64_t)__p);
  sub_25B5481AC(*(uint64_t *)&__p[32], *(uint64_t *)&__p[40], (uint64_t)__p);
  v1248 = *(const char **)&__p[40];
  uint64_t v1249 = *(void *)&__p[32];
  if (*(void *)&__p[40] == *(void *)&__p[32] || (void)v2257 == *((void *)&v2256 + 1)) {
    goto LABEL_1096;
  }
  v1250 = 0;
  v1251 = 0;
  unint64_t v1252 = 0;
  uint64_t v1253 = 0;
  unint64_t v1254 = (float *)(v2174.n128_u64[0] + 28);
  while (2)
  {
    long long v2241 = *(_OWORD *)(v1249 + 176 * v1253 + 16);
    uint64_t v1255 = *((void *)&v2256 + 1);
    if ((void)v2257 == *((void *)&v2256 + 1)) {
      goto LABEL_1077;
    }
    unint64_t v1256 = 0;
    while (2)
    {
      sub_25B4D4E4C((uint64_t)v2271, (float32x2_t *)&v2241, (float32x2_t *)(v1255 + 176 * v1256 + 16), v1254);
      if (!v2271[48]) {
        goto LABEL_1047;
      }
      sub_25B4D5ABC((int8x8_t *)&src, (float32x2_t *)&v2241, *(float32x2_t *)(*((void *)&v2256 + 1) + 176 * v1256 + 16), *(float32x2_t *)(*((void *)&v2256 + 1) + 176 * v1256 + 24));
      if (src.i8[0])
      {
        float32x2_t v1257 = vsub_f32(*(float32x2_t *)&src.u32[2], *(float32x2_t *)v2246.f32);
        if (sqrtf(vaddv_f32(vmul_f32(v1257, v1257))) < 0.5)
        {
          if ((unint64_t)v1251 >= v1252)
          {
            uint64_t v1258 = (v1251 - v1250) >> 2;
            unint64_t v1259 = v1258 + 1;
            if ((unint64_t)(v1258 + 1) >> 62) {
              goto LABEL_1651;
            }
            if ((uint64_t)(v1252 - (void)v1250) >> 1 > v1259) {
              unint64_t v1259 = (uint64_t)(v1252 - (void)v1250) >> 1;
            }
            if (v1252 - (unint64_t)v1250 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v1260 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1260 = v1259;
            }
            if (v1260) {
              unint64_t v1260 = (unint64_t)sub_25B3FBC64(v1260);
            }
            else {
              uint64_t v1261 = 0;
            }
            float v1266 = (char *)(v1260 + 4 * v1258);
            *(_DWORD *)float v1266 = v1253;
            float32x2_t v1263 = v1266 + 4;
            while (v1251 != v1250)
            {
              int v1268 = *((_DWORD *)v1251 - 1);
              v1251 -= 4;
              *((_DWORD *)v1266 - 1) = v1268;
              v1266 -= 4;
            }
            goto LABEL_1066;
          }
LABEL_1049:
          *(_DWORD *)v1251 = v1253;
          float32x2_t v1263 = v1251 + 4;
          goto LABEL_1069;
        }
LABEL_1047:
        char v1262 = 1;
      }
      else
      {
        if ((unint64_t)v1251 < v1252) {
          goto LABEL_1049;
        }
        uint64_t v1264 = (v1251 - v1250) >> 2;
        unint64_t v1265 = v1264 + 1;
        if ((unint64_t)(v1264 + 1) >> 62) {
LABEL_1651:
        }
          sub_25B3FBC4C();
        if ((uint64_t)(v1252 - (void)v1250) >> 1 > v1265) {
          unint64_t v1265 = (uint64_t)(v1252 - (void)v1250) >> 1;
        }
        if (v1252 - (unint64_t)v1250 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1260 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1260 = v1265;
        }
        if (v1260) {
          unint64_t v1260 = (unint64_t)sub_25B3FBC64(v1260);
        }
        else {
          uint64_t v1261 = 0;
        }
        float v1266 = (char *)(v1260 + 4 * v1264);
        *(_DWORD *)float v1266 = v1253;
        float32x2_t v1263 = v1266 + 4;
        while (v1251 != v1250)
        {
          int v1267 = *((_DWORD *)v1251 - 1);
          v1251 -= 4;
          *((_DWORD *)v1266 - 1) = v1267;
          v1266 -= 4;
        }
LABEL_1066:
        unint64_t v1252 = v1260 + 4 * v1261;
        if (v1250) {
          operator delete(v1250);
        }
        v1250 = v1266;
LABEL_1069:
        char v1262 = 0;
        v1251 = v1263;
      }
      if (*((void *)&v2272 + 1))
      {
        *(void *)&long long v2273 = *((void *)&v2272 + 1);
        operator delete(*((void **)&v2272 + 1));
      }
      if (*(void *)&v2271[56])
      {
        *(void *)&v2271[64] = *(void *)&v2271[56];
        operator delete(*(void **)&v2271[56]);
      }
      if (v1262)
      {
        ++v1256;
        uint64_t v1255 = *((void *)&v2256 + 1);
        if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v2257 - *((void *)&v2256 + 1)) >> 4) > v1256) {
          continue;
        }
      }
      break;
    }
    v1248 = *(const char **)&__p[40];
    uint64_t v1249 = *(void *)&__p[32];
LABEL_1077:
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v1248[-v1249] >> 4) > (unint64_t)++v1253) {
      continue;
    }
    break;
  }
  memset(v2271, 0, 24);
  sub_25B547018(v1249, (uint64_t)v1248, (uint64_t *)v2271);
  unint64_t v1270 = *(void *)&__p[32];
  long long v1237 = (void *)v2152.i64[0];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    uint64_t v1271 = *(void *)&__p[40] - 176;
    uint64_t v1272 = *(void *)&__p[40] - 176;
    uint64_t v1273 = (void (***)(uint64_t))(*(void *)&__p[40] - 176);
    do
    {
      unint64_t v1274 = *v1273;
      v1273 -= 22;
      (*v1274)(v1272);
      v1271 -= 176;
      BOOL v1206 = v1272 == v1270;
      uint64_t v1272 = (uint64_t)v1273;
    }
    while (!v1206);
  }
  *(void *)&__p[40] = v1270;
  uint64_t v1275 = *(void *)&v2271[8];
  uint64_t v1276 = *(void *)v2271;
  if (*(void *)&v2271[8] != *(void *)v2271)
  {
    unint64_t v1277 = 0;
    if ((unint64_t)((v1251 - v1250) >> 2) <= 1) {
      uint64_t v1278 = 1;
    }
    else {
      uint64_t v1278 = (v1251 - v1250) >> 2;
    }
    do
    {
      v1279 = v1250;
      uint64_t v1280 = v1278;
      if (v1251 == v1250)
      {
LABEL_1089:
        uint64_t v1282 = v1276 + 176 * v1277;
        if (v1270 >= *(void *)&__p[48])
        {
          unint64_t v1270 = sub_25B47C818((uint64_t *)&__p[32], v1282, v1269);
        }
        else
        {
          sub_25B47C6E4(v1270, v1282, v1269);
          v1270 += 176;
        }
        *(void *)&__p[40] = v1270;
        uint64_t v1275 = *(void *)&v2271[8];
        uint64_t v1276 = *(void *)v2271;
      }
      else
      {
        while (1)
        {
          int v1281 = *(_DWORD *)v1279;
          v1279 += 4;
          if (v1277 == v1281) {
            break;
          }
          if (!--v1280) {
            goto LABEL_1089;
          }
        }
      }
      ++v1277;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((v1275 - v1276) >> 4) > v1277);
  }
  src.i64[0] = (uint64_t)v2271;
  sub_25B3F5F28((void ***)&src);
  unint64_t v1238 = 0x263EFF000uLL;
  if (v1250) {
    operator delete(v1250);
  }
LABEL_1096:
  v1283 = objc_msgSend_array(*(void **)(v1238 + 2432), v1248, v1247);
  v1286 = objc_msgSend_array(*(void **)(v1238 + 2432), v1284, v1285);
  int v1289 = objc_msgSend_array(*(void **)(v1238 + 2432), v1287, v1288);
  uint64_t v1292 = objc_msgSend_array(*(void **)(v1238 + 2432), v1290, v1291);
  unint64_t v1293 = v1238;
  v1294 = (void *)v1292;
  uint64_t v1299 = objc_msgSend_array(*(void **)(v1293 + 2432), v1295, v1296);
  uint64_t v1300 = *(void *)&__p[8];
  uint64_t v1301 = *(void *)&__p[16];
  while (v1300 != v1301)
  {
    uint64_t v1302 = objc_msgSend_copy(*(void **)(v1300 + 8), v1297, v1298);
    uint64_t v1304 = (void *)v1302;
    if (v1302) {
      *(unsigned char *)(v1302 + 104) = 0;
    }
    objc_msgSend_addObject_(v1283, v1303, v1302);

    v1300 += 176;
  }
  uint64_t v1305 = *(void *)&__p[32];
  for (muint64_t m = *(void *)&__p[40]; v1305 != mm; v1305 += 176)
  {
    uint64_t v1307 = objc_msgSend_copy(*(void **)(v1305 + 8), v1297, v1298);
    v1309 = (void *)v1307;
    if (v1307) {
      *(unsigned char *)(v1307 + 104) = 3;
    }
    objc_msgSend_addObject_(v1286, v1308, v1307);
  }
  uint64_t v1310 = *(void *)&__p[56];
  for (nunint64_t n = *(void *)&__p[64]; v1310 != nn; v1310 += 176)
  {
    uint64_t v1312 = objc_msgSend_copy(*(void **)(v1310 + 8), v1297, v1298);
    unint64_t v1314 = (void *)v1312;
    if (v1312) {
      *(unsigned char *)(v1312 + 104) = 1;
    }
    objc_msgSend_addObject_(v1289, v1313, v1312);
  }
  uint64_t v1315 = *((void *)&v2256 + 1);
  for (uint64_t i1 = v2257; v1315 != i1; v1315 += 176)
  {
    uint64_t v1317 = objc_msgSend_copy(*(void **)(v1315 + 8), v1297, v1298);
    v1319 = (void *)v1317;
    if (v1317) {
      *(unsigned char *)(v1317 + 104) = 2;
    }
    objc_msgSend_addObject_(v1294, v1318, v1317);
  }
  uint64_t v1321 = *((void *)&v2258 + 1);
  for (uint64_t i2 = v2258; i2 != v1321; i2 += 176)
  {
    uint64_t v1322 = objc_msgSend_copy(*(void **)(i2 + 8), v1297, v1298);
    v1324 = (void *)v1322;
    if (v1322) {
      *(unsigned char *)(v1322 + 104) = 4;
    }
    objc_msgSend_addObject_(v1299, v1323, v1322);
  }
  sub_25B4E664C((uint64_t)v2155, v1283);
  sub_25B4E666C((uint64_t)v2155, v1286);
  sub_25B4E665C((uint64_t)v2155, v1289);
  sub_25B477C30((uint64_t)v2155, v1294);
  sub_25B477C10((uint64_t)v2155, v1299);

  *(void *)v2271 = &v2187;
  sub_25B548290((void ***)v2271);
  sub_25B4B7174((uint64_t)buf);

  if (v2190)
  {
    v2191 = v2190;
    operator delete(v2190);
  }
  *(void *)buf = &v2193;
  sub_25B3F5F28((void ***)buf);
  if (v2180) {
    operator delete(v2180);
  }
  if (v2172[0]) {
    operator delete(v2172[0]);
  }
  if ((void)v2196) {
    operator delete((void *)v2196);
  }
  if ((void)v2200) {
    operator delete((void *)v2200);
  }
  sub_25B3F5E50((uint64_t)__p);

  uint64_t v1325 = v2155;
LABEL_1128:

  if (*((unsigned char *)v2156 + 176))
  {
    uint64_t v1328 = objc_msgSend_dictionaryRepresentation(v1325, v1326, v1327);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1329, (uint64_t)v1328, @"deduplicate_opening_opendoor");
  }
  uint64_t v1330 = *((void *)v2156 + 19);
  id v1331 = v1325;
  v2167.i64[0] = v1330;
  id v2153 = v1331;
  if (v1330)
  {
    v2157 = (void **)v1331;
    v2168 = objc_msgSend_walls(v2157, v1332, v1333);
    v2155 = objc_msgSend_doors(v2157, v1334, v1335);
    objc_msgSend_opendoors(v2157, v1336, v1337);
    id v2154 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v2168, v1338, v1339))
    {
      uint64_t v1342 = objc_msgSend_count(v2155, v1340, v1341);
      if ((unint64_t)(objc_msgSend_count(v2154, v1343, v1344) + v1342) >= 2)
      {
        v2170.i64[0] = (uint64_t)objc_alloc_init(MEMORY[0x263EFF9A0]);
        long long v2239 = 0u;
        long long v2240 = 0u;
        long long v2237 = 0u;
        long long v2238 = 0u;
        v1345 = v2155;
        uint64_t v1347 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1345, v1346, (uint64_t)&v2237, buf, 16);
        if (v1347)
        {
          uint64_t v1348 = *(void *)v2238;
          do
          {
            for (uint64_t i3 = 0; i3 != v1347; ++i3)
            {
              if (*(void *)v2238 != v1348) {
                objc_enumerationMutation(v1345);
              }
              unint64_t v1350 = *(void **)(*((void *)&v2237 + 1) + 8 * i3);
              sub_25B583BD0(v2167.i64[0], v1350, v2168);
              uint64_t v1353 = objc_msgSend_parentIdentifier(v1350, v1351, v1352);
              unint64_t v1355 = objc_msgSend_objectForKey_((void *)v2170.i64[0], v1354, (uint64_t)v1353);
              BOOL v1356 = v1355 == 0;

              if (v1356)
              {
                id v1360 = objc_alloc(MEMORY[0x263EFF980]);
                unint64_t v1358 = objc_msgSend_initWithObjects_(v1360, v1361, (uint64_t)v1350, 0);
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2170.i64[0], v1362, (uint64_t)v1358, v1353);
              }
              else
              {
                unint64_t v1358 = objc_msgSend_objectForKeyedSubscript_((void *)v2170.i64[0], v1357, (uint64_t)v1353);
                objc_msgSend_addObject_(v1358, v1359, (uint64_t)v1350);
              }
            }
            uint64_t v1347 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1345, v1363, (uint64_t)&v2237, buf, 16);
          }
          while (v1347);
        }

        long long v2206 = 0u;
        long long v2207 = 0u;
        long long v2204 = 0u;
        long long v2205 = 0u;
        id v1364 = v2154;
        uint64_t v1366 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1364, v1365, (uint64_t)&v2204, __p, 16);
        if (v1366)
        {
          uint64_t v1367 = *(void *)v2205;
          do
          {
            for (uint64_t i4 = 0; i4 != v1366; ++i4)
            {
              if (*(void *)v2205 != v1367) {
                objc_enumerationMutation(v1364);
              }
              float v1369 = *(void **)(*((void *)&v2204 + 1) + 8 * i4);
              sub_25B583BD0(v2167.i64[0], v1369, v2168);
              float32x2_t v1372 = objc_msgSend_parentIdentifier(v1369, v1370, v1371);
              float32x2_t v1374 = objc_msgSend_objectForKey_((void *)v2170.i64[0], v1373, (uint64_t)v1372);
              BOOL v1375 = v1374 == 0;

              if (v1375)
              {
                id v1379 = objc_alloc(MEMORY[0x263EFF980]);
                uint64_t v1377 = objc_msgSend_initWithObjects_(v1379, v1380, (uint64_t)v1369, 0);
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2170.i64[0], v1381, (uint64_t)v1377, v1372);
              }
              else
              {
                uint64_t v1377 = objc_msgSend_objectForKeyedSubscript_((void *)v2170.i64[0], v1376, (uint64_t)v1372);
                objc_msgSend_addObject_(v1377, v1378, (uint64_t)v1369);
              }
            }
            uint64_t v1366 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1364, v1382, (uint64_t)&v2204, __p, 16);
          }
          while (v1366);
        }

        obj[0] = objc_alloc_init(MEMORY[0x263EFF980]);
        v2160 = (float *)objc_alloc_init(MEMORY[0x263EFF980]);
        long long v2202 = 0u;
        long long v2203 = 0u;
        long long v2200 = 0u;
        long long v2201 = 0u;
        v2162[0] = (id)v2170.i64[0];
        v1384 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2162[0], v1383, (uint64_t)&v2200, v2271, 16);
        if (v1384)
        {
          v2163.i64[0] = *(void *)v2201;
          do
          {
            v2164[0] = v1384;
            unint64_t v1385 = 0;
            do
            {
              if (*(void *)v2201 != v2163.i64[0]) {
                objc_enumerationMutation(v2162[0]);
              }
              uint64_t v1386 = *(void *)(*((void *)&v2200 + 1) + 8 * (void)v1385);
              long long v2196 = 0u;
              long long v2197 = 0u;
              long long v2198 = 0u;
              long long v2199 = 0u;
              id v1387 = v2168;
              uint64_t v1391 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1387, v1388, (uint64_t)&v2196, &src, 16);
              if (v1391)
              {
                uint64_t v1392 = *(void *)v2197;
LABEL_1160:
                uint64_t v1393 = 0;
                while (1)
                {
                  if (*(void *)v2197 != v1392) {
                    objc_enumerationMutation(v1387);
                  }
                  uint64_t v1394 = *(void **)(*((void *)&v2196 + 1) + 8 * v1393);
                  unint64_t v1395 = objc_msgSend_identifier(v1394, v1389, v1390);
                  char isEqual = objc_msgSend_isEqual_(v1395, v1396, v1386);

                  if (isEqual) {
                    break;
                  }
                  if (v1391 == ++v1393)
                  {
                    uint64_t v1391 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1387, v1389, (uint64_t)&v2196, &src, 16);
                    if (v1391) {
                      goto LABEL_1160;
                    }
                    goto LABEL_1188;
                  }
                }
                id v1398 = v1394;

                if (!v1398) {
                  goto LABEL_1189;
                }
                objc_msgSend_objectForKey_(v2162[0], v1399, v1386);
                id v1400 = (id)objc_claimAutoreleasedReturnValue();
                id v1387 = v1398;
                v2165[0] = obj[0];
                v2166.i64[0] = (uint64_t)v2160;
                if (objc_msgSend_count(v1400, v1401, v1402))
                {
                  if (objc_msgSend_count(v1400, v1403, v1404) == 1)
                  {
                    uint64_t v1406 = objc_msgSend_objectAtIndexedSubscript_(v1400, v1405, 0);
                    BOOL v1409 = objc_msgSend_type(v1406, v1407, v1408) == 4;

                    v1412 = objc_msgSend_objectAtIndexedSubscript_(v1400, v1410, 0);
                    if (v1409) {
                      objc_msgSend_addObject_((void *)v2166.i64[0], v1411, (uint64_t)v1412);
                    }
                    else {
                      objc_msgSend_addObject_(v2165[0], v1411, (uint64_t)v1412);
                    }
                  }
                  else
                  {
                    __n128 v2174 = sub_25B583EFC(v2167.i64[0], v1387);
                    __n128 v1413 = sub_25B584074(v1387);
                    *(void *)&long long v2241 = MEMORY[0x263EF8330];
                    *((void *)&v2241 + 1) = 3221225472;
                    *(void *)&long long v2242 = sub_25B584110;
                    *((void *)&v2242 + 1) = &unk_265495400;
                    *(void *)&long long v2244 = v2167.i64[0];
                    float32x4_t v2169 = (float32x4_t)v1413;
                    *((void *)&v2244 + 1) = v1413.n128_u64[0];
                    __n128 v2243 = v2174;
                    int v1415 = objc_msgSend_sortedArrayUsingComparator_(v1400, v1414, (uint64_t)&v2241);
                    v1417 = objc_msgSend_objectAtIndexedSubscript_(v1415, v1416, 0);
                    objc_msgSend_quad(v1417, v1418, v1419);
                    *(_OWORD *)v2172 = v1420;
                    objc_msgSend_quad(v1417, v1421, v1422);
                    __n128 v2174 = v1423;
                    int v1426 = objc_msgSend_type(v1417, v1424, v1425);
                    objc_msgSend_confidence(v1417, v1427, v1428);
                    float v1432 = v1431;
                    BOOL v1433 = v1426 == 4;
                    for (unint64_t i5 = 1; objc_msgSend_count(v1415, v1429, v1430) > i5; ++i5)
                    {
                      id v1436 = objc_msgSend_objectAtIndexedSubscript_(v1415, v1435, i5);
                      objc_msgSend_quad(v1436, v1437, v1438);
                      float32x4_t v2173 = v1439;
                      objc_msgSend_quad(v1436, v1440, v1441);
                      __n128 v2171 = v1442;
                      BOOL v1445 = objc_msgSend_type(v1436, v1443, v1444) == 4;
                      objc_msgSend_confidence(v1436, v1446, v1447);
                      float v1449 = v1448;
                      v1450.i64[1] = v2169.i64[1];
                      if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v2169, vsubq_f32(v2173, (float32x4_t)v2174))) <= 0.05)
                      {
                        float32x4_t v1453 = vmulq_f32(v2169, vsubq_f32((float32x4_t)v2171, (float32x4_t)v2174));
                        v1453.f32[0] = vaddv_f32(*(float32x2_t *)v1453.f32);
                        v1450.i64[0] = 0;
                        __n128 v2174 = (__n128)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v1453, v1450), 0), (int8x16_t)v2171, (int8x16_t)v2174);
                        *(id *)&long long v1454 = v2172[0];
                        *((void *)&v1454 + 1) = __PAIR64__(HIDWORD(v2172[1]), COERCE_UNSIGNED_INT(fminf(*(float *)&v2172[1], v2173.f32[2])));
                        float v1432 = fminf(v1432, v1449);
                        *(_OWORD *)v2172 = v1454;
                      }
                      else
                      {
                        v1452 = sub_25B5841BC(v1417, *(__n128 *)v2172, v2174, v1432);
                        if (v1433) {
                          objc_msgSend_addObject_((void *)v2166.i64[0], v1451, (uint64_t)v1452);
                        }
                        else {
                          objc_msgSend_addObject_(v2165[0], v1451, (uint64_t)v1452);
                        }

                        id v1455 = v1436;
                        float v1432 = v1449;
                        BOOL v1433 = v1445;
                        __n128 v2174 = v2171;
                        *(float32x4_t *)v2172 = v2173;
                        v1417 = v1455;
                      }
                    }
                    v1457 = sub_25B5841BC(v1417, *(__n128 *)v2172, v2174, v1432);
                    if (v1433) {
                      objc_msgSend_addObject_((void *)v2166.i64[0], v1456, (uint64_t)v1457);
                    }
                    else {
                      objc_msgSend_addObject_(v2165[0], v1456, (uint64_t)v1457);
                    }
                  }
                }
              }
LABEL_1188:

LABEL_1189:
              unint64_t v1385 = (char *)v1385 + 1;
            }
            while (v1385 != v2164[0]);
            v1384 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2162[0], v1399, (uint64_t)&v2200, v2271, 16);
          }
          while (v1384);
        }

        sub_25B477C30((uint64_t)v2157, obj[0]);
        sub_25B477C10((uint64_t)v2157, v2160);
      }
    }

    float v1458 = 0;
  }
  else
  {
    v2157 = 0;
    float v1458 = v1331;
  }

  if (*((unsigned char *)v2156 + 176))
  {
    id v1461 = objc_msgSend_dictionaryRepresentation(v2157, v1459, v1460);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1462, (uint64_t)v1461, @"door_window_merge_doors");
  }
  v2163.i64[0] = *((void *)v2156 + 13);
  uint64_t v1463 = *((void *)v2156 + 9);
  if (v1463) {
    id v1464 = *(id *)(v1463 + 56);
  }
  else {
    id v1464 = 0;
  }
  id v1465 = v2142;
  v2162[0] = v2157;
  v2164[0] = v1464;
  obj[0] = v2143;
  v2166.i64[0] = (uint64_t)v1465;
  if (v2163.i64[0])
  {
    memset(&buf[8], 0, 128);
    long long v2210 = 0u;
    long long v2211 = 0u;
    *(void *)buf = &unk_2708F1E98;
    v2212 = 0;
    v2213 = &unk_2708F1F38;
    uint64_t v2214 = 0;
    uint64_t v2216 = 0;
    uint64_t v2215 = 0;
    sub_25B3F6148((uint64_t)&v2217);
    memset(&v2219[64], 0, 24);
    memset(&__p[8], 0, 64);
    long long v2256 = 0u;
    long long v2257 = 0u;
    long long v2258 = 0u;
    long long v2259 = 0u;
    long long v2260 = 0u;
    long long v2261 = 0u;
    *(void *)long long __p = &unk_2708F1E98;
    uint64_t v2262 = 0;
    v2263 = &unk_2708F1F38;
    uint64_t v2264 = 0;
    uint64_t v2266 = 0;
    uint64_t v2265 = 0;
    double v1466 = sub_25B3F6148((uint64_t)v2267);
    uint64_t v2269 = 0;
    uint64_t v2268 = 0;
    uint64_t v2270 = 0;
    float32x2_t v1469 = objc_msgSend_copy(v1465, v1467, v1468, v1466);
    sub_25B47BC48((uint64_t *)buf, v1469);

    v1472 = objc_msgSend_copy(v2162[0], v1470, v1471);
    sub_25B47BC48((uint64_t *)__p, v1472);

    if (v2164[0] && *((void *)v2164[0] + 8) == 1) {
      v1473 = (__CVBuffer *)*((void *)v2164[0] + 1);
    }
    else {
      v1473 = 0;
    }
    CVPixelBufferLockBaseAddress(v1473, 1uLL);
    id v1474 = v2164[0];
    if (v2164[0])
    {
      uint64_t v1475 = *((void *)v2164[0] + 5);
      id v1474 = (id)*((void *)v2164[0] + 6);
      uint64_t v1476 = *((void *)v2164[0] + 7);
    }
    else
    {
      uint64_t v1476 = 0;
      uint64_t v1475 = 0;
    }
    *(void *)&long long v2241 = v1476;
    *(void *)&long long v2237 = v1475;
    *(void *)&long long v2204 = v1474;
    sub_25B4CB164(v2271, &v2241, (uint64_t *)&v2237, &v2204);
    v2171.n128_u64[0] = (unint64_t)v2164[0];
    v1477 = sub_25B4FD9B4((__CVBuffer *)v2171.n128_u64[0]);
    sub_25B4CB400((uint64_t)&src, (long long *)v2271, (uint64_t)v1477);
    uint64_t v1478 = v2163.i64[0];
    *(unsigned char *)(v2163.i64[0] + 136) = *(unsigned char *)(v2163.i64[0] + 144);
    id v1479 = obj[0];
    v1480 = v1479;
    if (!*(unsigned char *)(v2163.i64[0] + 136))
    {
      v2167.i64[0] = (uint64_t)v1479;
      v2168 = v1479;
      v2173.i64[0] = *((void *)&v2261 + 1);
      v1481 = (id *)v2261;
      if ((void)v2261 != *((void *)&v2261 + 1))
      {
        while (1)
        {
          id v1482 = *v1481;
          objc_msgSend_startOrientation(v1482, v1483, v1484);
          float v1486 = v1485;
          objc_msgSend_endOrientation(v1482, v1487, v1488);
          float v1492 = v1491;
          if (v1491 >= v1486) {
            break;
          }
LABEL_1291:

          if (++v1481 == (id *)v2173.i64[0]) {
            goto LABEL_1292;
          }
        }
        objc_msgSend_radius(v1482, v1489, v1490);
        v2172[0] = v1493;
        objc_msgSend_circleCenter(v1482, v1494, v1495);
        float32x2_t v1497 = v1496;
        int v1498 = (int)(float)(v1486 * 10.0);
        int v1499 = (int)(float)((float)(v1492 + -2.5) * 10.0);
        if (v1498 >= v1499)
        {
          uint64_t v1501 = 0;
          long long v1512 = 0;
          unint64_t v1500 = 0;
        }
        else
        {
          unint64_t v1500 = 0;
          uint64_t v1501 = 0;
          uint64_t v1502 = 0;
          do
          {
            float v1503 = (float)v1498 / 10.0;
            if ((unint64_t)v1501 >= v1500)
            {
              uint64_t v1504 = v1501 - v1502;
              unint64_t v1505 = v1504 + 1;
              if ((unint64_t)(v1504 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v1500 - (void)v1502) >> 1 > v1505) {
                unint64_t v1505 = (uint64_t)(v1500 - (void)v1502) >> 1;
              }
              if (v1500 - (unint64_t)v1502 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v1506 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v1506 = v1505;
              }
              if (v1506) {
                unint64_t v1506 = (unint64_t)sub_25B3FBC64(v1506);
              }
              else {
                uint64_t v1507 = 0;
              }
              int v1508 = (float *)(v1506 + 4 * v1504);
              *int v1508 = v1503;
              v1509 = v1508 + 1;
              while (v1501 != v1502)
              {
                int v1510 = *((_DWORD *)v1501-- - 1);
                *((_DWORD *)v1508-- - 1) = v1510;
              }
              unint64_t v1500 = v1506 + 4 * v1507;
              if (v1502) {
                operator delete(v1502);
              }
              uint64_t v1502 = v1508;
              uint64_t v1501 = v1509;
            }
            else
            {
              *v1501++ = v1503;
            }
            v1498 += 50;
          }
          while (v1498 < v1499);
          if ((unint64_t)v1501 < v1500)
          {
            *uint64_t v1501 = v1492;
            long long v1511 = v1501 + 1;
            goto LABEL_1244;
          }
          long long v1512 = v1502;
        }
        uint64_t v1513 = v1501 - v1512;
        unint64_t v1514 = v1513 + 1;
        if ((unint64_t)(v1513 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v1500 - (void)v1512) >> 1 > v1514) {
          unint64_t v1514 = (uint64_t)(v1500 - (void)v1512) >> 1;
        }
        if (v1500 - (unint64_t)v1512 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1515 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1515 = v1514;
        }
        if (v1515) {
          unint64_t v1515 = (unint64_t)sub_25B3FBC64(v1515);
        }
        uint64_t v1502 = (float *)(v1515 + 4 * v1513);
        *uint64_t v1502 = v1492;
        long long v1511 = v1502 + 1;
        while (v1501 != v1512)
        {
          int v1516 = *((_DWORD *)v1501-- - 1);
          *((_DWORD *)v1502-- - 1) = v1516;
        }
        if (v1512) {
          operator delete(v1512);
        }
LABEL_1244:
        if (v1502 == v1511) {
          goto LABEL_1289;
        }
        unint64_t v1517 = 0;
        uint64_t v1518 = 0;
        v1519 = 0;
        float32x2_t v1520 = (float32x2_t)vdup_lane_s32((int32x2_t)v2172[0], 0);
        v1521 = v1502;
        do
        {
          __float2 v1524 = __sincosf_stret(*v1521 * 0.017453);
          float32x2_t v1525 = vmla_f32(v1497, (float32x2_t)__PAIR64__(LODWORD(v1524.__sinval), LODWORD(v1524.__cosval)), v1520);
          if ((unint64_t)v1518 >= v1517)
          {
            uint64_t v1526 = v1518 - v1519;
            unint64_t v1527 = v1526 + 1;
            if ((unint64_t)(v1526 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v1517 - (void)v1519) >> 2 > v1527) {
              unint64_t v1527 = (uint64_t)(v1517 - (void)v1519) >> 2;
            }
            if (v1517 - (unint64_t)v1519 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v1528 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1528 = v1527;
            }
            if (v1528) {
              unint64_t v1528 = (unint64_t)sub_25B3FCAD4(v1528);
            }
            else {
              v1522 = 0;
            }
            v1529 = (float32x2_t *)(v1528 + 8 * v1526);
            float32x2_t *v1529 = v1525;
            v1530 = v1529 + 1;
            if (v1518 != v1519)
            {
              do
              {
                float32x2_t v1531 = v1518[-1];
                --v1518;
                v1529[-1] = v1531;
                --v1529;
              }
              while (v1518 != v1519);
              uint64_t v1518 = v1519;
            }
            v1519 = v1529;
            unint64_t v1517 = v1528 + 8 * (void)v1522;
            if (v1518) {
              operator delete(v1518);
            }
            uint64_t v1518 = v1530;
          }
          else
          {
            *v1518++ = v1525;
          }
          ++v1521;
        }
        while (v1521 != v1511);
        uint64_t v1532 = (char *)v1518 - (char *)v1519;
        if ((unint64_t)((char *)v1518 - (char *)v1519) >= 0x10)
        {
          objc_msgSend_quad(v1482, v1522, *(void *)&v1523);
          LODWORD(v2172[1]) = v1533;
          objc_msgSend_quad(v1482, v1534, v1535);
          v2170.i32[2] = v1536;
          objc_msgSend_quad(v1482, v1537, v1538);
          v2169.i32[2] = v1539;
          objc_msgSend_quad(v1482, v1540, v1541);
          float v1545 = *(float *)&v2172[1];
          if (v2170.f32[2] < *(float *)&v2172[1]) {
            float v1545 = v2170.f32[2];
          }
          if (v2169.f32[2] < v1545) {
            float v1545 = v2169.f32[2];
          }
          if (v1544 >= v1545) {
            float v1546 = v1545;
          }
          else {
            float v1546 = v1544;
          }
          objc_msgSend_quad(v1482, v1542, v1543);
          v2172[1] = v1547;
          objc_msgSend_quad(v1482, v1548, v1549);
          v2170.i32[2] = v1550;
          objc_msgSend_quad(v1482, v1551, v1552);
          float32x4_t v2169 = v1553;
          objc_msgSend_quad(v1482, v1554, v1555);
          uint64_t v1557 = 0;
          float v1558 = *(float *)&v2172[1];
          if (*(float *)&v2172[1] < v2170.f32[2]) {
            float v1558 = v2170.f32[2];
          }
          if (v1558 < v2169.f32[2]) {
            float v1558 = v2169.f32[2];
          }
          if (v1558 >= v1556) {
            float v1559 = v1558;
          }
          else {
            float v1559 = v1556;
          }
          uint64_t v1560 = v1532 >> 3;
          if ((unint64_t)(v1532 >> 3) <= 2) {
            uint64_t v1560 = 2;
          }
          uint64_t v1561 = v1560 - 1;
          do
          {
            sub_25B3F6148((uint64_t)v2271);
            v1562 = &v1519[v1557];
            *(float32x2_t *)&long long v2241 = v1562[1];
            *((float32x2_t *)&v2241 + 1) = *v1562;
            v1563 = objc_opt_new();
            v1566 = objc_msgSend_identifier(v1482, v1564, v1565);
            sub_25B493870((uint64_t)v2271, &v2241, v1563, v1566, v1546, v1559, 1.0);

            uint64_t v1568 = *(void *)&__p[16];
            if (*(void *)&__p[16] >= *(void *)&__p[24])
            {
              uint64_t v1569 = sub_25B47C818((uint64_t *)&__p[8], (uint64_t)v2271, v1567);
            }
            else
            {
              sub_25B47C6E4(*(uint64_t *)&__p[16], (uint64_t)v2271, v1567);
              uint64_t v1569 = v1568 + 176;
            }
            *(void *)&__p[16] = v1569;
            sub_25B3F5FE8((uint64_t)v2271);
            ++v1557;
          }
          while (v1561 != v1557);
        }
        else if (!v1519)
        {
LABEL_1289:
          if (v1502) {
            operator delete(v1502);
          }
          goto LABEL_1291;
        }
        operator delete(v1519);
        goto LABEL_1289;
      }
LABEL_1292:

      uint64_t v1478 = v2163.i64[0];
      v1480 = (void *)v2167.i64[0];
    }
    uint64_t v1570 = v1478 + 8;
    uint64_t v1571 = v1478 + 8;
    v1572 = v1480;
    sub_25B4A1AA0(v1571, (float32x2_t **)buf, (uint64_t *)__p, 3, 4, v1480, (uint64_t)&src);
    sub_25B4A1AA0(v1570, (float32x2_t **)buf, (uint64_t *)__p, 0, 0, v1572, (uint64_t)&src);
    sub_25B4A1AA0(v1570, (float32x2_t **)buf, (uint64_t *)__p, 3, 3, v1572, (uint64_t)&src);
    sub_25B4A1AA0(v1570, (float32x2_t **)buf, (uint64_t *)__p, 1, 1, v1572, (uint64_t)&src);
    sub_25B4A1AA0(v1570, (float32x2_t **)buf, (uint64_t *)__p, 2, 2, v1572, (uint64_t)&src);
    sub_25B4A1AA0(v1570, (float32x2_t **)buf, (uint64_t *)__p, 4, 4, v1572, (uint64_t)&src);

    if (v2164[0])
    {
      v1573 = (void *)v2166.i64[0];
      if (*(void *)(v2171.n128_u64[0] + 64) == 1) {
        v1574 = *(__CVBuffer **)(v2171.n128_u64[0] + 8);
      }
      else {
        v1574 = 0;
      }
    }
    else
    {
      v1574 = 0;
      v1573 = (void *)v2166.i64[0];
    }
    CVPixelBufferUnlockBaseAddress(v1574, 1uLL);
    v2170.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v1575, v1576);
    v2168 = objc_msgSend_array(MEMORY[0x263EFF980], v1577, v1578);
    v2167.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v1579, v1580);
    objc_msgSend_array(MEMORY[0x263EFF980], v1581, v1582);
    v2165[0] = (id)objc_claimAutoreleasedReturnValue();
    v2169.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v1583, v1584);
    uint64_t v1587 = *(void *)&__p[8];
    uint64_t v1588 = *(void *)&__p[16];
    if (*(void *)&__p[8] != *(void *)&__p[16])
    {
      v1573 = (void *)v2166.i64[0];
      do
      {
        uint64_t v1589 = objc_msgSend_copy(*(void **)(v1587 + 8), v1585, v1586);
        v1591 = (void *)v1589;
        if (v1589) {
          *(unsigned char *)(v1589 + 104) = 0;
        }
        objc_msgSend_addObject_((void *)v2170.i64[0], v1590, v1589);

        v1587 += 176;
      }
      while (v1587 != v1588);
    }
    uint64_t v1592 = *(void *)&__p[32];
    uint64_t v1593 = *(void *)&__p[40];
    if (*(void *)&__p[32] != *(void *)&__p[40])
    {
      v1573 = (void *)v2166.i64[0];
      do
      {
        uint64_t v1594 = objc_msgSend_copy(*(void **)(v1592 + 8), v1585, v1586);
        v1596 = (void *)v1594;
        if (v1594) {
          *(unsigned char *)(v1594 + 104) = 3;
        }
        objc_msgSend_addObject_(v2168, v1595, v1594);

        v1592 += 176;
      }
      while (v1592 != v1593);
    }
    uint64_t v1597 = *(void *)&__p[56];
    uint64_t v1598 = *(void *)&__p[64];
    if (*(void *)&__p[56] != *(void *)&__p[64])
    {
      v1573 = (void *)v2166.i64[0];
      do
      {
        uint64_t v1599 = objc_msgSend_copy(*(void **)(v1597 + 8), v1585, v1586);
        v1601 = (void *)v1599;
        if (v1599) {
          *(unsigned char *)(v1599 + 104) = 1;
        }
        objc_msgSend_addObject_((void *)v2167.i64[0], v1600, v1599);

        v1597 += 176;
      }
      while (v1597 != v1598);
    }
    uint64_t v1602 = *((void *)&v2256 + 1);
    uint64_t v1603 = v2257;
    if (*((void *)&v2256 + 1) != (void)v2257)
    {
      v1573 = (void *)v2166.i64[0];
      do
      {
        uint64_t v1604 = objc_msgSend_copy(*(void **)(v1602 + 8), v1585, v1586);
        v1606 = (void *)v1604;
        if (v1604) {
          *(unsigned char *)(v1604 + 104) = 2;
        }
        objc_msgSend_addObject_(v2165[0], v1605, v1604);

        v1602 += 176;
      }
      while (v1602 != v1603);
    }
    uint64_t v1608 = *((void *)&v2258 + 1);
    uint64_t v1607 = v2258;
    if ((void)v2258 != *((void *)&v2258 + 1))
    {
      v1573 = (void *)v2166.i64[0];
      do
      {
        uint64_t v1609 = objc_msgSend_copy(*(void **)(v1607 + 8), v1585, v1586);
        v1611 = (void *)v1609;
        if (v1609) {
          *(unsigned char *)(v1609 + 104) = 4;
        }
        objc_msgSend_addObject_((void *)v2169.i64[0], v1610, v1609);

        v1607 += 176;
      }
      while (v1607 != v1608);
    }
    sub_25B4E664C((uint64_t)v2162[0], (void *)v2170.i64[0]);
    sub_25B4E666C((uint64_t)v2162[0], v2168);
    sub_25B4E665C((uint64_t)v2162[0], (void *)v2167.i64[0]);
    sub_25B477C30((uint64_t)v2162[0], v2165[0]);
    sub_25B477C10((uint64_t)v2162[0], (void *)v2169.i64[0]);
    id v1612 = v1573;
    v2171.n128_u64[0] = (unint64_t)v2162[0];
    v1615 = objc_msgSend_curvedWalls(v1612, v1613, v1614);
    unint64_t v1618 = objc_msgSend_count(v1615, v1616, v1617);
    v2271[0] = 0;
    sub_25B443750(&v2237, v1618, v2271);

    __n128 v2243 = 0u;
    long long v2244 = 0u;
    long long v2241 = 0u;
    long long v2242 = 0u;
    objc_msgSend_curvedWalls((void *)v2171.n128_u64[0], v1619, v1620);
    v2172[0] = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v1622 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2172[0], v1621, (uint64_t)&v2241, v2271, 16);
    if (v1622)
    {
      v2173.i64[0] = *(void *)v2242;
      do
      {
        v2174.n128_u64[0] = v1622;
        uint64_t v1625 = 0;
        do
        {
          if (*(void *)v2242 != v2173.i64[0]) {
            objc_enumerationMutation(v2172[0]);
          }
          unint64_t v1626 = 0;
          v1627 = *(unsigned char **)(*((void *)&v2241 + 1) + 8 * v1625);
          while (1)
          {
            v1628 = objc_msgSend_curvedWalls(v1612, v1623, v1624);
            BOOL v1631 = v1626 < objc_msgSend_count(v1628, v1629, v1630);

            if (!v1631) {
              break;
            }
            if ((*(void *)(v2237 + 8 * (v1626 >> 6)) & (1 << v1626)) == 0)
            {
              v1632 = objc_msgSend_curvedWalls(v1612, v1623, v1624);
              objc_msgSend_objectAtIndexedSubscript_(v1632, v1633, v1626);
              id v1634 = (id)objc_claimAutoreleasedReturnValue();
              v1635 = v1627;
              objc_msgSend_circleCenter(v1634, v1636, v1637);
              float32x2_t v1639 = v1638;
              objc_msgSend_circleCenter(v1635, v1640, v1641);
              float32x2_t v1645 = vsub_f32(v1639, v1644);
              if (sqrtf(vaddv_f32(vmul_f32(v1645, v1645))) < 0.5)
              {
                objc_msgSend_radius(v1634, v1642, v1643);
                float v1647 = v1646;
                objc_msgSend_radius(v1635, v1648, v1649);
                if (vabds_f32(v1647, v1652) < 0.4)
                {
                  objc_msgSend_startOrientation(v1634, v1650, v1651);
                  float v1654 = v1653;
                  objc_msgSend_startOrientation(v1635, v1655, v1656);
                  float v1660 = v1654 + -360.0;
                  if (v1654 < 360.0) {
                    float v1660 = v1654;
                  }
                  if (v1659 >= 360.0) {
                    float v1659 = v1659 + -360.0;
                  }
                  float v1661 = v1660 + 360.0;
                  if (v1660 >= 0.0) {
                    float v1661 = v1660;
                  }
                  if (v1659 < 0.0) {
                    float v1659 = v1659 + 360.0;
                  }
                  if (v1659 >= v1661) {
                    float v1662 = v1659;
                  }
                  else {
                    float v1662 = v1661;
                  }
                  if (v1659 >= v1661) {
                    float v1659 = v1661;
                  }
                  float v1663 = v1662 - v1659;
                  float v1664 = (float)(v1659 + 360.0) - v1662;
                  if (v1664 >= v1663) {
                    float v1664 = v1663;
                  }
                  if (v1664 < 40.0)
                  {
                    objc_msgSend_endOrientation(v1634, v1657, v1658);
                    float v1666 = v1665;
                    objc_msgSend_endOrientation(v1635, v1667, v1668);
                    float v1670 = v1666 + -360.0;
                    if (v1666 < 360.0) {
                      float v1670 = v1666;
                    }
                    if (v1669 >= 360.0) {
                      float v1669 = v1669 + -360.0;
                    }
                    float v1671 = v1670 + 360.0;
                    if (v1670 >= 0.0) {
                      float v1671 = v1670;
                    }
                    if (v1669 < 0.0) {
                      float v1669 = v1669 + 360.0;
                    }
                    if (v1669 >= v1671) {
                      float v1672 = v1669;
                    }
                    else {
                      float v1672 = v1671;
                    }
                    if (v1669 >= v1671) {
                      float v1669 = v1671;
                    }
                    float v1673 = v1672 - v1669;
                    float v1674 = (float)(v1669 + 360.0) - v1672;
                    if (v1674 >= v1673) {
                      float v1674 = v1673;
                    }
                    if (v1674 < 40.0)
                    {

                      if (v1635) {
                        v1635[105] = 1;
                      }
                      *(void *)(v2237 + 8 * (v1626 >> 6)) |= 1 << v1626;
                      v1677 = objc_msgSend_identifier(v1635, v1675, v1676);
                      v1680 = objc_msgSend_copy(v1677, v1678, v1679);

                      v1683 = objc_msgSend_curvedWalls(v1612, v1681, v1682);
                      v1685 = objc_msgSend_objectAtIndexedSubscript_(v1683, v1684, v1626);
                      v1688 = objc_msgSend_identifier(v1685, v1686, v1687);
                      v1691 = objc_msgSend_copy(v1688, v1689, v1690);
                      sub_25B4FD4F4((uint64_t)v1635, v1691);

                      v1694 = objc_msgSend_curvedWindows((void *)v2171.n128_u64[0], v1692, v1693);
                      v1697 = objc_msgSend_identifier(v1635, v1695, v1696);
                      sub_25B591B18(v1694, v1680, v1697);

                      v1700 = objc_msgSend_curvedDoors((void *)v2171.n128_u64[0], v1698, v1699);
                      v1703 = objc_msgSend_identifier(v1635, v1701, v1702);
                      sub_25B591B18(v1700, v1680, v1703);

                      goto LABEL_1368;
                    }
                  }
                }
              }
            }
            ++v1626;
          }
          if (v1627) {
            v1627[105] = 0;
          }
LABEL_1368:
          ++v1625;
        }
        while (v1625 != v2174.n128_u64[0]);
        uint64_t v1622 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2172[0], v1623, (uint64_t)&v2241, v2271, 16);
      }
      while (v1622);
    }

    if ((void)v2237) {
      operator delete((void *)v2237);
    }

    if (*(unsigned char *)(v2163.i64[0] + 144))
    {
      long long v2202 = 0u;
      long long v2203 = 0u;
      long long v2200 = 0u;
      long long v2201 = 0u;
      v1706 = objc_msgSend_curvedWindows((void *)v2171.n128_u64[0], v1704, v1705);
      uint64_t v1709 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1706, v1707, (uint64_t)&v2200, &v2241, 16);
      if (v1709)
      {
        uint64_t v1710 = *(void *)v2201;
        do
        {
          for (uint64_t i6 = 0; i6 != v1709; ++i6)
          {
            if (*(void *)v2201 != v1710) {
              objc_enumerationMutation(v1706);
            }
            uint64_t v1712 = *(void *)(*((void *)&v2200 + 1) + 8 * i6);
            if (v1712) {
              *(unsigned char *)(v1712 + 105) = 0;
            }
          }
          uint64_t v1709 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1706, v1708, (uint64_t)&v2200, &v2241, 16);
        }
        while (v1709);
      }

      long long v2198 = 0u;
      long long v2199 = 0u;
      long long v2196 = 0u;
      long long v2197 = 0u;
      v1715 = objc_msgSend_curvedDoors((void *)v2171.n128_u64[0], v1713, v1714);
      uint64_t v1718 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1715, v1716, (uint64_t)&v2196, &v2237, 16);
      if (v1718)
      {
        uint64_t v1719 = *(void *)v2197;
        do
        {
          for (uint64_t i7 = 0; i7 != v1718; ++i7)
          {
            if (*(void *)v2197 != v1719) {
              objc_enumerationMutation(v1715);
            }
            uint64_t v1721 = *(void *)(*((void *)&v2196 + 1) + 8 * i7);
            if (v1721) {
              *(unsigned char *)(v1721 + 105) = 0;
            }
          }
          uint64_t v1718 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1715, v1717, (uint64_t)&v2196, &v2237, 16);
        }
        while (v1718);
      }
    }
    else
    {
      v1715 = objc_msgSend_array(MEMORY[0x263EFF8C0], v1704, v1705);
      sub_25B4E667C(v2171.n128_i64[0], v1715);
    }

    id v1722 = (id)v2171.n128_u64[0];
    v1725 = objc_msgSend_set(MEMORY[0x263EFF9C0], v1723, v1724);
    v1728 = objc_msgSend_walls(v1722, v1726, v1727);
    sub_25B591958(v1728, v1725);

    v1731 = objc_msgSend_openings(v1722, v1729, v1730);
    sub_25B591958(v1731, v1725);

    v1734 = objc_msgSend_windows(v1722, v1732, v1733);
    sub_25B591958(v1734, v1725);

    v1737 = objc_msgSend_doors(v1722, v1735, v1736);
    sub_25B591958(v1737, v1725);

    v1740 = objc_msgSend_opendoors(v1722, v1738, v1739);
    sub_25B591958(v1740, v1725);

    v1743 = objc_msgSend_curvedWalls(v1722, v1741, v1742);
    sub_25B591958(v1743, v1725);

    objc_msgSend_walls(v1722, v1744, v1745);
    id v1746 = (id)objc_claimAutoreleasedReturnValue();
    long long v2204 = 0u;
    long long v2205 = 0u;
    long long v2206 = 0u;
    long long v2207 = 0u;
    id v1747 = v1746;
    uint64_t v1749 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1747, v1748, (uint64_t)&v2204, v2271, 16);
    if (v1749)
    {
      uint64_t v1750 = *(void *)v2205;
      do
      {
        for (uint64_t i8 = 0; i8 != v1749; ++i8)
        {
          if (*(void *)v2205 != v1750) {
            objc_enumerationMutation(v1747);
          }
          sub_25B4FD504(*(void *)(*((void *)&v2204 + 1) + 8 * i8), 0);
        }
        uint64_t v1749 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1747, v1752, (uint64_t)&v2204, v2271, 16);
      }
      while (v1749);
    }

    src.i64[0] = (uint64_t)&unk_2708F1EB8;
    if (*(void *)&v2254[16]) {
      sub_25B404120(*(std::__shared_weak_count **)&v2254[16]);
    }
    sub_25B3F5E50((uint64_t)__p);
    sub_25B3F5E50((uint64_t)buf);
    id v1753 = 0;
  }
  else
  {
    id v1722 = 0;
    id v1753 = v2162[0];
  }

  v1756 = v2158;
  if (*((unsigned char *)v2156 + 176))
  {
    v1757 = objc_msgSend_dictionaryRepresentation(v1722, v1754, v1755);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1758, (uint64_t)v1757, @"association");
  }
  v2170.i64[0] = sub_25B522908(*((id **)v2156 + 6));
  sub_25B410ACC(*((void *)v2156 + 14), v1722, v2158, v2134, 0);
  v2164[0] = (id)objc_claimAutoreleasedReturnValue();

  if (*((unsigned char *)v2156 + 176))
  {
    v1761 = objc_msgSend_dictionaryRepresentation(v2164[0], v1759, v1760);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1762, (uint64_t)v1761, @"non_uniform_height");

    if (*((unsigned char *)v2156 + 176))
    {
      if (v2170.i64[0])
      {
        v2174.n128_u64[0] = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v1763, v1764);
        unint64_t v1765 = 0x263F08000uLL;
        v1766 = (void *)v2174.n128_u64[0];
        v1768 = objc_msgSend_numberWithBool_(NSNumber, v1767, *(unsigned __int8 *)(v2170.i64[0] + 104));
        objc_msgSend_setObject_forKeyedSubscript_((void *)v2174.n128_u64[0], v1769, (uint64_t)v1768, @"is_update");

        uint64_t v1770 = *(void *)(v2170.i64[0] + 64) - *(void *)(v2170.i64[0] + 56);
        sub_25B443228(buf, (v1770 >> 3) + (v1770 >> 4));
        uint64_t v1772 = *(void *)(v2170.i64[0] + 56);
        if (*(void *)(v2170.i64[0] + 64) != v1772)
        {
          uint64_t v1773 = 0;
          uint64_t v1774 = 0;
          unint64_t v1775 = 0;
          do
          {
            uint64_t v1776 = *(void *)buf + v1773;
            v1777 = (uint64_t *)(v1772 + v1774);
            uint64_t v1778 = *v1777;
            *(_DWORD *)(v1776 + 8) = *((_DWORD *)v1777 + 2);
            *(void *)uint64_t v1776 = v1778;
            ++v1775;
            uint64_t v1772 = *(void *)(v2170.i64[0] + 56);
            v1774 += 16;
            v1773 += 12;
          }
          while (v1775 < (*(void *)(v2170.i64[0] + 64) - v1772) >> 4);
        }
        if (*(void *)&buf[8] == *(void *)buf)
        {
          id v1779 = objc_alloc_init(MEMORY[0x263EFF8F8]);
        }
        else
        {
          objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1771, *(uint64_t *)buf, *(void *)&buf[8] - *(void *)buf);
          id v1779 = (id)objc_claimAutoreleasedReturnValue();
        }
        v1781 = v1779;
        objc_msgSend_setObject_forKeyedSubscript_((void *)v2174.n128_u64[0], v1780, (uint64_t)v1779, @"boundary_points");

        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        uint64_t v1782 = *(void *)(v2170.i64[0] + 16) - *(void *)(v2170.i64[0] + 8);
        sub_25B443228(buf, (v1782 >> 3) + (v1782 >> 4));
        uint64_t v1784 = *(void *)(v2170.i64[0] + 8);
        if (*(void *)(v2170.i64[0] + 16) != v1784)
        {
          uint64_t v1785 = 0;
          uint64_t v1786 = 0;
          unint64_t v1787 = 0;
          do
          {
            uint64_t v1788 = *(void *)buf + v1785;
            v1789 = (uint64_t *)(v1784 + v1786);
            uint64_t v1790 = *v1789;
            *(_DWORD *)(v1788 + 8) = *((_DWORD *)v1789 + 2);
            *(void *)uint64_t v1788 = v1790;
            ++v1787;
            uint64_t v1784 = *(void *)(v2170.i64[0] + 8);
            v1786 += 16;
            v1785 += 12;
          }
          while (v1787 < (*(void *)(v2170.i64[0] + 16) - v1784) >> 4);
        }
        if (*(void *)&buf[8] == *(void *)buf)
        {
          id v1791 = objc_alloc_init(MEMORY[0x263EFF8F8]);
        }
        else
        {
          objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1783, *(uint64_t *)buf, *(void *)&buf[8] - *(void *)buf);
          id v1791 = (id)objc_claimAutoreleasedReturnValue();
        }
        v1793 = v1791;
        objc_msgSend_setObject_forKeyedSubscript_((void *)v2174.n128_u64[0], v1792, (uint64_t)v1791, @"incremental_points");

        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        uint64_t v1794 = *(void *)(v2170.i64[0] + 40) - *(void *)(v2170.i64[0] + 32);
        sub_25B443228(buf, (v1794 >> 3) + (v1794 >> 4));
        uint64_t v1796 = *(void *)(v2170.i64[0] + 32);
        if (*(void *)(v2170.i64[0] + 40) != v1796)
        {
          uint64_t v1797 = 0;
          uint64_t v1798 = 0;
          unint64_t v1799 = 0;
          do
          {
            uint64_t v1800 = *(void *)buf + v1797;
            v1801 = (uint64_t *)(v1796 + v1798);
            uint64_t v1802 = *v1801;
            *(_DWORD *)(v1800 + 8) = *((_DWORD *)v1801 + 2);
            *(void *)uint64_t v1800 = v1802;
            ++v1799;
            uint64_t v1796 = *(void *)(v2170.i64[0] + 32);
            v1798 += 16;
            v1797 += 12;
          }
          while (v1799 < (*(void *)(v2170.i64[0] + 40) - v1796) >> 4);
        }
        if (*(void *)&buf[8] == *(void *)buf)
        {
          id v1803 = objc_alloc_init(MEMORY[0x263EFF8F8]);
        }
        else
        {
          objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1795, *(uint64_t *)buf, *(void *)&buf[8] - *(void *)buf);
          id v1803 = (id)objc_claimAutoreleasedReturnValue();
        }
        v1805 = v1803;
        objc_msgSend_setObject_forKeyedSubscript_((void *)v2174.n128_u64[0], v1804, (uint64_t)v1803, @"covering_hull_points");

        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        objc_msgSend_setObject_forKeyedSubscript_((void *)v2174.n128_u64[0], v1806, *(void *)(v2170.i64[0] + 112), @"incremental_ids");
        v2168 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v1807, v1808);
        memset(__p, 0, 64);
        objc_msgSend_allKeys(*(void **)(v2170.i64[0] + 120), v1809, v1810);
        v2165[0] = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v1813 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2165[0], v1811, (uint64_t)__p, buf, 16);
        if (v1813)
        {
          v2167.i64[0] = **(void **)&__p[16];
          do
          {
            id v1814 = 0;
            v2169.i64[0] = v1813;
            do
            {
              if (**(void **)&__p[16] != v2167.i64[0]) {
                objc_enumerationMutation(v2165[0]);
              }
              uint64_t v1815 = *(void *)(*(void *)&__p[8] + 8 * (void)v1814);
              uint64_t v1818 = objc_msgSend_objectForKeyedSubscript_(*(void **)(v2170.i64[0] + 120), v1812, v1815);
              if (v1818)
              {
                v2173.i64[0] = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v1816, v1817);
                v1820 = objc_msgSend_numberWithUnsignedLong_(*(void **)(v1765 + 2584), v1819, *(void *)(v1818 + 16));
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1821, (uint64_t)v1820, @"begin");

                v1823 = objc_msgSend_numberWithUnsignedLong_(*(void **)(v1765 + 2584), v1822, *(void *)(v1818 + 24));
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1824, (uint64_t)v1823, @"end");

                v1826 = objc_msgSend_numberWithUnsignedLong_(*(void **)(v1765 + 2584), v1825, *(void *)(v1818 + 32));
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1827, (uint64_t)v1826, @"size");

                v1829 = objc_msgSend_numberWithUnsignedLong_(*(void **)(v1765 + 2584), v1828, *(void *)(v1818 + 40));
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1830, (uint64_t)v1829, @"raw_size");

                LODWORD(v1831) = *(_DWORD *)(v1818 + 12);
                v1834 = objc_msgSend_numberWithFloat_(*(void **)(v1765 + 2584), v1832, v1833, v1831);
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1835, (uint64_t)v1834, @"camera_height");

                LODWORD(v1836) = *(_DWORD *)(v1818 + 8);
                v1839 = objc_msgSend_numberWithFloat_(*(void **)(v1765 + 2584), v1837, v1838, v1836);
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1840, (uint64_t)v1839, @"camera_width");

                v1842 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1841, v1818 + 96, 64);
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1843, (uint64_t)v1842, @"pose");

                v2171.n128_u64[0] = v1815;
                v2172[0] = v1814;
                uint64_t v1845 = v1818;
                unint64_t v1846 = 0;
                v1847 = 0;
                v1848 = 0;
                uint64_t v1849 = 0;
                uint64_t v1850 = v1845;
                uint64_t v1851 = v1845 + 48;
                do
                {
                  for (int i9 = 0; i9 != 3; ++i9)
                  {
                    int v1853 = *(_DWORD *)(v1851 + 16 * v1849 + 4 * (i9 & 3));
                    if ((unint64_t)v1847 >= v1846)
                    {
                      uint64_t v1854 = (v1847 - v1848) >> 2;
                      unint64_t v1855 = v1854 + 1;
                      if ((unint64_t)(v1854 + 1) >> 62) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v1846 - (void)v1848) >> 1 > v1855) {
                        unint64_t v1855 = (uint64_t)(v1846 - (void)v1848) >> 1;
                      }
                      if (v1846 - (unint64_t)v1848 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v1856 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v1856 = v1855;
                      }
                      if (v1856) {
                        unint64_t v1856 = (unint64_t)sub_25B3FBC64(v1856);
                      }
                      else {
                        v1844 = 0;
                      }
                      v1857 = (char *)(v1856 + 4 * v1854);
                      *(_DWORD *)v1857 = v1853;
                      v1858 = v1857 + 4;
                      while (v1847 != v1848)
                      {
                        int v1859 = *((_DWORD *)v1847 - 1);
                        v1847 -= 4;
                        *((_DWORD *)v1857 - 1) = v1859;
                        v1857 -= 4;
                      }
                      unint64_t v1846 = v1856 + 4 * (void)v1844;
                      if (v1848) {
                        operator delete(v1848);
                      }
                      v1848 = v1857;
                      v1847 = v1858;
                      v1766 = (void *)v2174.n128_u64[0];
                    }
                    else
                    {
                      *(_DWORD *)v1847 = v1853;
                      v1847 += 4;
                    }
                  }
                  ++v1849;
                }
                while (v1849 != 3);
                uint64_t v1818 = v1850;
                if (v1847 == v1848)
                {
                  id v1860 = objc_alloc_init(MEMORY[0x263EFF8F8]);
                }
                else
                {
                  objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1844, (uint64_t)v1848, v1847 - v1848);
                  id v1860 = (id)objc_claimAutoreleasedReturnValue();
                }
                v1862 = v1860;
                unint64_t v1765 = 0x263F08000;
                uint64_t v1813 = v2169.i64[0];
                id v1814 = v2172[0];
                objc_msgSend_setObject_forKeyedSubscript_((void *)v2173.i64[0], v1861, (uint64_t)v1860, @"intrinsics");

                if (v1848) {
                  operator delete(v1848);
                }
                v1864 = (void *)v2173.i64[0];
                objc_msgSend_setObject_forKeyedSubscript_(v2168, v1863, v2173.i64[0], v2171.n128_u64[0]);
              }
              else
              {
                v1864 = 0;
                objc_msgSend_setObject_forKeyedSubscript_(v2168, v1816, 0, v1815);
              }

              id v1814 = (char *)v1814 + 1;
            }
            while (v1814 != (id)v1813);
            uint64_t v1865 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2165[0], v1812, (uint64_t)__p, buf, 16);
            uint64_t v1813 = v1865;
          }
          while (v1865);
        }

        objc_msgSend_setObject_forKeyedSubscript_(v1766, v1866, (uint64_t)v2168, @"mapping_interval");
        uint64_t v1868 = *(void *)(v2170.i64[0] + 80);
        uint64_t v1869 = *(void *)(v2170.i64[0] + 88);
        if (v1869 == v1868)
        {
          id v1870 = objc_alloc_init(MEMORY[0x263EFF8F8]);
        }
        else
        {
          objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v1867, v1868, v1869 - v1868);
          id v1870 = (id)objc_claimAutoreleasedReturnValue();
        }
        v1872 = v1870;
        objc_msgSend_setObject_forKeyedSubscript_(v1766, v1871, (uint64_t)v1870, @"incremental_poses");

        objc_msgSend_setObject_forKeyedSubscript_(*((void **)v2156 + 21), v1873, (uint64_t)v1766, @"temporalMeta");
      }
      else
      {
        v1766 = 0;
        objc_msgSend_setObject_forKeyedSubscript_(*((void **)v2156 + 21), v1763, 0, @"temporalMeta");
      }
      v1756 = v2158;
    }
  }
  kdebug_trace();
  v1874 = sub_25B5CB680(*((void *)v2156 + 17), v2164[0], v1756, (void *)v2170.i64[0]);

  if (*((unsigned char *)v2156 + 176))
  {
    v1877 = objc_msgSend_dictionaryRepresentation(v1874, v1875, v1876);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1878, (uint64_t)v1877, @"opening_height");
  }
  kdebug_trace();
  uint64_t v1881 = objc_msgSend_render(v2156, v1879, v1880);
  uint64_t v1882 = *((void *)v2156 + 5);
  if (v1882) {
    uint64_t v1883 = v1882 + 1968;
  }
  else {
    uint64_t v1883 = 0;
  }
  id v1884 = v1874;
  v1885 = v2134;
  v2165[0] = obj[0];
  if (v1881)
  {
    *(_DWORD *)buf = 15795;
    *(void *)&buf[8] = 0;
    kdebug_trace();
    if (*(unsigned char *)(v1881 + 954))
    {
      kdebug_trace();
      sub_25B479810(v1881 + 16, v1884, v2165[0], v1883);
      kdebug_trace();
    }
    sub_25B477C20((uint64_t)v1884, v1885);
    v1888 = objc_msgSend_objects(v1884, v1886, v1887);
    BOOL v1889 = v1888 == 0;

    if (v1889)
    {
      v1892 = objc_msgSend_array(MEMORY[0x263EFF8C0], v1890, v1891);
      sub_25B477C20((uint64_t)v1884, v1892);
    }
    v1893 = objc_msgSend_objects(v1884, v1890, v1891);
    BOOL v1896 = objc_msgSend_count(v1893, v1894, v1895) == 0;

    if (!v1896)
    {
      kdebug_trace();
      v1897 = objc_alloc_init(RSObjectAsset);
      v1900 = objc_msgSend_objects(v1884, v1898, v1899);
      sub_25B4E5180((uint64_t)v1897, v1900);

      uint64_t v1901 = *(void *)(v1881 + 944);
      v1904 = objc_msgSend_walls(v1884, v1902, v1903);
      v1907 = objc_msgSend_openings(v1884, v1905, v1906);
      v1908 = sub_25B415848(v1901, v1904, v1907, v1897, *(unsigned __int8 *)(v1881 + 952), *(unsigned __int8 *)(v1881 + 953));
      sub_25B477C20((uint64_t)v1884, v1908);

      kdebug_trace();
    }
    sub_25B4E97D4((void **)v1884);
    sub_25B4E9AA0((id *)v1884, v1909, v1910);
    sub_25B4E9F44((void **)v1884);
    if (!*(unsigned char *)(v1881 + 956)) {
      sub_25B4E9D70((uint64_t)v1884);
    }
    sub_25B4EC780((id *)v1884);
    objc_storeStrong((id *)(v1881 + 960), v1874);
    v2164[0] = *(id *)(v1881 + 960);
    sub_25B400F2C((uint64_t)buf);
  }
  else
  {
    v2164[0] = 0;
  }

  v1913 = v2158;
  if (*((unsigned char *)v2156 + 176))
  {
    v1914 = objc_msgSend_dictionaryRepresentation(v2164[0], v1911, v1912);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1915, (uint64_t)v1914, @"render");
  }
  kdebug_trace();
  v1916 = (float32x2_t *)*((void *)v2156 + 15);
  v1919 = objc_msgSend_objects(v2164[0], v1917, v1918);
  v2171.n128_u64[0] = sub_25B5A14F4(v1916, v2164[0], v1919, 0, 1, (void *)v2166.i64[0]);

  if (*((unsigned char *)v2156 + 176))
  {
    v1922 = objc_msgSend_dictionaryRepresentation((void *)v2171.n128_u64[0], v1920, v1921);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v1923, (uint64_t)v1922, @"floor");
  }
  kdebug_trace();
  v1926 = objc_msgSend_standardUserDefaults(MEMORY[0x263EFFA40], v1924, v1925);
  char v1928 = objc_msgSend_BOOLForKey_(v1926, v1927, @"com.apple.roomscancore.disable_outside_objects_removal");

  if (v1928) {
    goto LABEL_1622;
  }
  uint64_t v1931 = *((void *)v2156 + 18);
  v1932 = objc_msgSend_objects((void *)v2171.n128_u64[0], v1929, v1930);
  v2164[0] = (id)v2171.n128_u64[0];
  id v1933 = v1932;
  id v1936 = v1933;
  if (!v1931)
  {
    v2169.i64[0] = 0;
    goto LABEL_1616;
  }
  v2172[0] = v1933;
  uint64_t v1937 = objc_msgSend_count(v1933, v1934, v1935);
  v1940 = 0;
  if (!v2164[0])
  {
LABEL_1618:
    v2169.i64[0] = (uint64_t)v1936;
    goto LABEL_1619;
  }
  v2169.i64[0] = (uint64_t)v1936;
  if (!v1937) {
    goto LABEL_1619;
  }
  v1941 = objc_msgSend_floors(v2164[0], v1938, v1939);
  BOOL v1944 = objc_msgSend_count(v1941, v1942, v1943) == 0;

  if (v1944)
  {
    v1940 = 0;
    goto LABEL_1618;
  }
  v2169.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v1945, v1946);
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  v2167.i64[0] = objc_msgSend_array(MEMORY[0x263EFF980], v1947, v1948);
  unint64_t v1951 = 0;
  do
  {
    unint64_t v1952 = v1951;
    unint64_t v1953 = objc_msgSend_count(v1936, v1949, v1950);
    if (v1953 <= v1952) {
      break;
    }
    v1954 = objc_msgSend_objectAtIndexedSubscript_(v1936, v1949, v1952);
    v1957 = objc_msgSend_boxesDict(v1954, v1955, v1956);
    v1959 = objc_msgSend_objectForKey_(v1957, v1958, @"ultimate");
    BOOL v1960 = v1959 == 0;

    unint64_t v1951 = v1952 + 1;
  }
  while (v1960);
  unint64_t v1961 = 0;
  v2174.n128_u64[0] = 0;
  v2168 = 0;
  for (unint64_t i10 = 0; objc_msgSend_count(v1936, v1949, v1950) > i10; ++i10)
  {
    v1965 = objc_msgSend_objectAtIndexedSubscript_(v1936, v1963, i10);
    v1968 = objc_msgSend_boxesDict(v1965, v1966, v1967);
    v1970 = objc_msgSend_objectForKey_(v1968, v1969, @"rawdetection");
    BOOL v1971 = v1970 == 0;

    if (v1971) {
      goto LABEL_1515;
    }
    if (v1953 <= v1952)
    {
      v1984 = objc_msgSend_boxesDict(v1965, v1972, v1973);
      v1986 = objc_msgSend_objectForKey_(v1984, v1985, @"wallaligned");
      BOOL v1987 = v1986 == 0;

      if (v1987)
      {
LABEL_1515:
        objc_msgSend_addObject_((void *)v2169.i64[0], v1972, (uint64_t)v1965);
        goto LABEL_1551;
      }
      memset(buf, 0, 128);
      v1989 = objc_msgSend_boxesDict(v1965, v1972, v1988);
      v1991 = objc_msgSend_objectForKeyedSubscript_(v1989, v1990, @"wallaligned");
      sub_25B445344((uint64_t)buf, v1991);

      v1983 = (_OWORD *)v2174.n128_u64[0];
      if (v2174.n128_u64[0] >= v1961)
      {
        uint64_t v2001 = (uint64_t)(v2174.n128_u64[0] - (void)v2168) >> 7;
        unint64_t v2002 = v2001 + 1;
        if ((unint64_t)(v2001 + 1) >> 57) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v1961 - (void)v2168) >> 6 > v2002) {
          unint64_t v2002 = (uint64_t)(v1961 - (void)v2168) >> 6;
        }
        if (v1961 - (unint64_t)v2168 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v2003 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v2003 = v2002;
        }
        if (v2003) {
          unint64_t v2003 = (unint64_t)sub_25B563C40(v2003);
        }
        else {
          v1982 = 0;
        }
        v2015 = (_OWORD *)(v2003 + (v2001 << 7));
        v2015[4] = *(_OWORD *)&buf[64];
        v2015[5] = *(_OWORD *)&buf[80];
        v2015[6] = *(_OWORD *)&buf[96];
        v2015[7] = *(_OWORD *)&buf[112];
        _OWORD *v2015 = *(_OWORD *)buf;
        v2015[1] = *(_OWORD *)&buf[16];
        v2015[2] = *(_OWORD *)&buf[32];
        v2015[3] = *(_OWORD *)&buf[48];
        if ((void *)v2174.n128_u64[0] == v2168)
        {
          v2025 = (void *)(v2003 + (v2001 << 7));
          v2017 = v2168;
        }
        else
        {
          unint64_t v2016 = v2003 + (v2001 << 7);
          v2017 = v2168;
          v2018 = (char *)v2174.n128_u64[0];
          do
          {
            long long v2019 = *((_OWORD *)v2018 - 8);
            long long v2020 = *((_OWORD *)v2018 - 7);
            long long v2021 = *((_OWORD *)v2018 - 5);
            *(_OWORD *)(v2016 - 96) = *((_OWORD *)v2018 - 6);
            *(_OWORD *)(v2016 - 80) = v2021;
            *(_OWORD *)(v2016 - 128) = v2019;
            *(_OWORD *)(v2016 - 112) = v2020;
            long long v2022 = *((_OWORD *)v2018 - 4);
            long long v2023 = *((_OWORD *)v2018 - 3);
            long long v2024 = *((_OWORD *)v2018 - 1);
            v2025 = (void *)(v2016 - 128);
            *(_OWORD *)(v2016 - 32) = *((_OWORD *)v2018 - 2);
            *(_OWORD *)(v2016 - 16) = v2024;
            *(_OWORD *)(v2016 - 64) = v2022;
            *(_OWORD *)(v2016 - 48) = v2023;
            v2018 -= 128;
            v2016 -= 128;
          }
          while (v2018 != v2168);
        }
        unint64_t v1961 = v2003 + ((void)v1982 << 7);
        v2174.n128_u64[0] = (unint64_t)(v2015 + 8);
        if (v2017) {
          operator delete(v2017);
        }
        v2168 = v2025;
        goto LABEL_1550;
      }
    }
    else
    {
      v1974 = objc_msgSend_boxesDict(v1965, v1972, v1973);
      v1976 = objc_msgSend_objectForKey_(v1974, v1975, @"ultimate");
      BOOL v1977 = v1976 == 0;

      if (v1977) {
        goto LABEL_1515;
      }
      memset(buf, 0, 128);
      v1979 = objc_msgSend_boxesDict(v1965, v1972, v1978);
      v1981 = objc_msgSend_objectForKeyedSubscript_(v1979, v1980, @"ultimate");
      sub_25B445344((uint64_t)buf, v1981);

      v1983 = (_OWORD *)v2174.n128_u64[0];
      if (v2174.n128_u64[0] >= v1961)
      {
        uint64_t v1998 = (uint64_t)(v2174.n128_u64[0] - (void)v2168) >> 7;
        unint64_t v1999 = v1998 + 1;
        if ((unint64_t)(v1998 + 1) >> 57) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v1961 - (void)v2168) >> 6 > v1999) {
          unint64_t v1999 = (uint64_t)(v1961 - (void)v2168) >> 6;
        }
        if (v1961 - (unint64_t)v2168 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v2000 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v2000 = v1999;
        }
        if (v2000) {
          unint64_t v2000 = (unint64_t)sub_25B563C40(v2000);
        }
        else {
          v1982 = 0;
        }
        v2004 = (_OWORD *)(v2000 + (v1998 << 7));
        v2004[4] = *(_OWORD *)&buf[64];
        v2004[5] = *(_OWORD *)&buf[80];
        v2004[6] = *(_OWORD *)&buf[96];
        v2004[7] = *(_OWORD *)&buf[112];
        _OWORD *v2004 = *(_OWORD *)buf;
        v2004[1] = *(_OWORD *)&buf[16];
        v2004[2] = *(_OWORD *)&buf[32];
        v2004[3] = *(_OWORD *)&buf[48];
        if ((void *)v2174.n128_u64[0] == v2168)
        {
          v2014 = (void *)(v2000 + (v1998 << 7));
          v2006 = v2168;
        }
        else
        {
          unint64_t v2005 = v2000 + (v1998 << 7);
          v2006 = v2168;
          v2007 = (char *)v2174.n128_u64[0];
          do
          {
            long long v2008 = *((_OWORD *)v2007 - 8);
            long long v2009 = *((_OWORD *)v2007 - 7);
            long long v2010 = *((_OWORD *)v2007 - 5);
            *(_OWORD *)(v2005 - 96) = *((_OWORD *)v2007 - 6);
            *(_OWORD *)(v2005 - 80) = v2010;
            *(_OWORD *)(v2005 - 128) = v2008;
            *(_OWORD *)(v2005 - 112) = v2009;
            long long v2011 = *((_OWORD *)v2007 - 4);
            long long v2012 = *((_OWORD *)v2007 - 3);
            long long v2013 = *((_OWORD *)v2007 - 1);
            v2014 = (void *)(v2005 - 128);
            *(_OWORD *)(v2005 - 32) = *((_OWORD *)v2007 - 2);
            *(_OWORD *)(v2005 - 16) = v2013;
            *(_OWORD *)(v2005 - 64) = v2011;
            *(_OWORD *)(v2005 - 48) = v2012;
            v2007 -= 128;
            v2005 -= 128;
          }
          while (v2007 != v2168);
        }
        unint64_t v1961 = v2000 + ((void)v1982 << 7);
        v2174.n128_u64[0] = (unint64_t)(v2004 + 8);
        if (v2006) {
          operator delete(v2006);
        }
        v2168 = v2014;
        goto LABEL_1550;
      }
    }
    long long v1992 = *(_OWORD *)buf;
    long long v1993 = *(_OWORD *)&buf[16];
    long long v1994 = *(_OWORD *)&buf[48];
    *(_OWORD *)(v2174.n128_u64[0] + 32) = *(_OWORD *)&buf[32];
    v1983[3] = v1994;
    _OWORD *v1983 = v1992;
    v1983[1] = v1993;
    long long v1995 = *(_OWORD *)&buf[64];
    long long v1996 = *(_OWORD *)&buf[80];
    long long v1997 = *(_OWORD *)&buf[112];
    v1983[6] = *(_OWORD *)&buf[96];
    v1983[7] = v1997;
    v1983[4] = v1995;
    v1983[5] = v1996;
    v2174.n128_u64[0] = (unint64_t)(v1983 + 8);
LABEL_1550:
    objc_msgSend_addObject_((void *)v2167.i64[0], v1982, (uint64_t)v1965);
LABEL_1551:
  }
  unint64_t v2026 = 0;
  v2027 = 0;
  v2028 = 0;
  for (unint64_t i11 = 0; ; ++i11)
  {
    v2030 = objc_msgSend_floors(v2164[0], v1963, v1964);
    v2032 = objc_msgSend_objectAtIndexedSubscript_(v2030, v2031, 0);
    BOOL v2035 = objc_msgSend_polygonSize(v2032, v2033, v2034) > i11;

    if (!v2035) {
      break;
    }
    v2038 = objc_msgSend_floors(v2164[0], v2036, v2037);
    v2040 = objc_msgSend_objectAtIndexedSubscript_(v2038, v2039, 0);
    uint64_t v2043 = *(void *)(objc_msgSend_polygon(v2040, v2041, v2042) + 16 * i11);
    if ((unint64_t)v2027 >= v2026)
    {
      uint64_t v2045 = (v2027 - v2028) >> 3;
      unint64_t v2046 = v2045 + 1;
      if ((unint64_t)(v2045 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v2026 - (void)v2028) >> 2 > v2046) {
        unint64_t v2046 = (uint64_t)(v2026 - (void)v2028) >> 2;
      }
      if (v2026 - (unint64_t)v2028 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v2047 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v2047 = v2046;
      }
      if (v2047) {
        unint64_t v2047 = (unint64_t)sub_25B3FCAD4(v2047);
      }
      else {
        uint64_t v2048 = 0;
      }
      v2049 = (char *)(v2047 + 8 * v2045);
      *(void *)v2049 = v2043;
      v2044 = v2049 + 8;
      if (v2027 != v2028)
      {
        do
        {
          uint64_t v2050 = *((void *)v2027 - 1);
          v2027 -= 8;
          *((void *)v2049 - 1) = v2050;
          v2049 -= 8;
        }
        while (v2027 != v2028);
        v2027 = v2028;
      }
      v2028 = v2049;
      unint64_t v2026 = v2047 + 8 * v2048;
      if (v2027) {
        operator delete(v2027);
      }
    }
    else
    {
      *(void *)v2027 = v2043;
      v2044 = v2027 + 8;
    }

    v2027 = v2044;
  }
  uint64_t v2051 = 0;
  do
  {
    if (v2051 == 4) {
      break;
    }
    memset(buf, 0, 32);
    uint64_t v2052 = v2051 + 1;
    *(_DWORD *)&buf[32] = 1065353216;
    v2053 = v2168;
    if (v2168 == (void *)v2174.n128_u64[0])
    {
      v2056 = 0;
      v2055 = 0;
    }
    else
    {
      v2054 = 0;
      v2055 = 0;
      v2056 = 0;
      v2163.i64[0] = v2051 + 1;
      uint64_t v2057 = v2052 & 3;
      do
      {
        uint64_t v2058 = v2053[2 * v2051];
        uint64_t v2059 = v2053[2 * v2057];
        if (v2055 >= v2054)
        {
          uint64_t v2060 = (v2055 - v2056) >> 5;
          unint64_t v2061 = v2060 + 1;
          if ((unint64_t)(v2060 + 1) >> 59) {
            sub_25B3FBC4C();
          }
          if ((v2054 - v2056) >> 4 > v2061) {
            unint64_t v2061 = (v2054 - v2056) >> 4;
          }
          if ((unint64_t)(v2054 - v2056) >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v2062 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v2062 = v2061;
          }
          v2063 = (char *)sub_25B3FBC9C(v2062);
          v2065 = &v2063[32 * v2060];
          *(void *)v2065 = v2058;
          *((void *)v2065 + 1) = v2059;
          *((_OWORD *)v2065 + 1) = xmmword_25B5F10F0;
          if (v2055 == v2056)
          {
            v2068 = v2055;
            v2056 = &v2063[32 * v2060];
            id v1936 = v2172[0];
          }
          else
          {
            v2066 = &v2063[32 * v2060];
            id v1936 = v2172[0];
            do
            {
              long long v2067 = *((_OWORD *)v2055 - 1);
              *((_OWORD *)v2066 - 2) = *((_OWORD *)v2055 - 2);
              *((_OWORD *)v2066 - 1) = v2067;
              v2066 -= 32;
              v2055 -= 32;
            }
            while (v2055 != v2056);
            v2068 = v2056;
            v2056 = v2066;
          }
          v2054 = &v2063[32 * v2064];
          v2055 = v2065 + 32;
          if (v2068) {
            operator delete(v2068);
          }
        }
        else
        {
          *(void *)v2055 = v2058;
          *((void *)v2055 + 1) = v2059;
          *((_OWORD *)v2055 + 1) = xmmword_25B5F10F0;
          v2055 += 32;
        }
        v2053 += 16;
      }
      while (v2053 != (void *)v2174.n128_u64[0]);
      if (v2055 != v2056)
      {
        unint64_t v2069 = 0;
        if ((unint64_t)((v2055 - v2056) >> 5) <= 1) {
          uint64_t v2070 = 1;
        }
        else {
          uint64_t v2070 = (v2055 - v2056) >> 5;
        }
        do
        {
          v2071 = (float32x2_t *)&v2056[32 * v2069];
          float32x2_t v2072 = *v2071;
          float32x2_t v2073 = v2071[1];
          v2074 = (float32x2_t *)operator new(0x18uLL);
          uint64_t v2075 = 0;
          float32x2_t *v2074 = v2072;
          v2074[1] = v2073;
          v2074[2] = vmul_f32(vadd_f32(v2073, v2072), (float32x2_t)0x3F0000003F000000);
          while ((unint64_t)(v2027 - v2028) >= 0x20
               && !sub_25B57AC18((uint64_t)v2028, (uint64_t)v2027, v2074[v2075]))
          {
            if (++v2075 == 3) {
              goto LABEL_1601;
            }
          }
          sub_25B3FFB24((uint64_t)buf, v2069, v2069);
LABEL_1601:
          operator delete(v2074);
          ++v2069;
        }
        while (v2069 != v2070);
      }
      uint64_t v2052 = v2163.i64[0];
    }
    v2076 = *(void **)&buf[16];
    if (*(void *)&buf[16])
    {
      do
      {
        sub_25B3FFB24((uint64_t)__p, v2076[2], v2076[2]);
        v2076 = (void *)*v2076;
      }
      while (v2076);
    }
    uint64_t v2077 = *(void *)&__p[24];
    if (v2056) {
      operator delete(v2056);
    }
    sub_25B3FB178((uint64_t)buf);
    uint64_t v2051 = v2052;
  }
  while (v2077 != (v2055 - v2056) >> 5);
  v2078 = *(void **)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      v2079 = objc_msgSend_objectAtIndexedSubscript_((void *)v2167.i64[0], v2036, v2078[2]);
      objc_msgSend_addObject_((void *)v2169.i64[0], v2080, (uint64_t)v2079);

      v2078 = (void *)*v2078;
    }
    while (v2078);
  }
  if (v2028) {
    operator delete(v2028);
  }

  if (v2168) {
    operator delete(v2168);
  }
  sub_25B3FB178((uint64_t)__p);
LABEL_1616:
  v1940 = v1936;
LABEL_1619:

  sub_25B477C20((uint64_t)v2164[0], (void *)v2169.i64[0]);
  v1913 = v2158;
  if (*((unsigned char *)v2156 + 176))
  {
    v2083 = objc_msgSend_dictionaryRepresentation(v2164[0], v2081, v2082);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v2084, (uint64_t)v2083, @"remove_outside_object");
  }
LABEL_1622:
  v2085 = v2156;
  if (*((unsigned char *)v2156 + 163))
  {
    v2086 = sub_25B54C8CC(*((void *)v2156 + 16), v1913, (void *)v2170.i64[0], (void *)v2171.n128_u64[0]);
    sub_25B4E66BC(v2171.n128_i64[0], v2086);

    v2085 = v2156;
    if (*((unsigned char *)v2156 + 176))
    {
      v2087 = objc_msgSend_dictionaryRepresentation((void *)v2171.n128_u64[0], v1929, v1930);
      objc_msgSend_setObject_forKeyedSubscript_(v2149, v2088, (uint64_t)v2087, @"room_type");

      v2085 = v2156;
    }
  }
  if (v2085[176])
  {
    v2089 = objc_msgSend_dictionaryRepresentation((void *)v2171.n128_u64[0], v1929, v1930);
    objc_msgSend_setObject_forKeyedSubscript_(v2149, v2090, (uint64_t)v2089, @"final");
  }
  if (qword_26A5020F0 != -1) {
    dispatch_once(&qword_26A5020F0, &unk_2708F1298);
  }
  v2091 = (id)qword_26A5020E8;
  if (os_log_type_enabled(v2091, OS_LOG_TYPE_DEFAULT))
  {
    v2174.n128_u64[0] = objc_msgSend_walls((void *)v2171.n128_u64[0], v2092, v2093);
    uint64_t v2096 = objc_msgSend_count((void *)v2174.n128_u64[0], v2094, v2095);
    v2173.i64[0] = objc_msgSend_openings((void *)v2171.n128_u64[0], v2097, v2098);
    uint64_t v2101 = objc_msgSend_count((void *)v2173.i64[0], v2099, v2100);
    v2104 = objc_msgSend_windows((void *)v2171.n128_u64[0], v2102, v2103);
    uint64_t v2107 = objc_msgSend_count(v2104, v2105, v2106);
    v2110 = objc_msgSend_doors((void *)v2171.n128_u64[0], v2108, v2109);
    uint64_t v2113 = objc_msgSend_count(v2110, v2111, v2112);
    v2116 = objc_msgSend_opendoors((void *)v2171.n128_u64[0], v2114, v2115);
    uint64_t v2119 = objc_msgSend_count(v2116, v2117, v2118);
    v2122 = objc_msgSend_curvedWalls((void *)v2171.n128_u64[0], v2120, v2121);
    uint64_t v2125 = objc_msgSend_count(v2122, v2123, v2124);
    *(_DWORD *)buf = 134219264;
    *(void *)&uint8_t buf[4] = v2096;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v2101;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = v2107;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v2113;
    *(_WORD *)&buf[42] = 2048;
    *(void *)&buf[44] = v2119;
    *(_WORD *)&buf[52] = 2048;
    *(void *)&buf[54] = v2125;
    _os_log_impl(&dword_25B3F3000, v2091, OS_LOG_TYPE_DEFAULT, "Overall walls: %lu, openings: %lu, windows: %lu, doors: %lu, opendoors: %lu, curvedWalls: %lu", buf, 0x3Eu);
  }
  id v2142 = (id)v2171.n128_u64[0];
LABEL_1632:

  sub_25B400F2C((uint64_t)&v2175);
LABEL_1633:

  return v2142;
}

void sub_25B4C6A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,_Unwind_Exception *exception_objecta,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0xA40] = (unint64_t)&unk_2708F2218;
  if (STACK[0xAC0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0xAC0]);
  }
  if (v67) {
    operator delete(v67);
  }
  STACK[0xA40] = (unint64_t)&STACK[0x2B8];
  sub_25B548290((void ***)&STACK[0xA40]);
  sub_25B4B7174((uint64_t)&STACK[0x3D0]);

  if (STACK[0x2D0]) {
    operator delete((void *)STACK[0x2D0]);
  }
  STACK[0x3D0] = (unint64_t)&STACK[0x2E8];
  sub_25B3F5F28((void ***)&STACK[0x3D0]);
  if (STACK[0x278]) {
    operator delete((void *)STACK[0x278]);
  }
  if (STACK[0x200]) {
    operator delete((void *)STACK[0x200]);
  }
  if (STACK[0x300]) {
    operator delete((void *)STACK[0x300]);
  }
  if (STACK[0x340]) {
    operator delete((void *)STACK[0x340]);
  }
  sub_25B3F5E50((uint64_t)&STACK[0x8A0]);

  sub_25B400F2C((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_25B4C8378(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v4 = a2[1] - *a2;
  if (!v4)
  {
    int64x2_t v331 = 0uLL;
    unint64_t v332 = 0;
    goto LABEL_244;
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0;
  uint64_t v7 = (unsigned __int128)(v4 * (__int128)0x6666666666666667) >> 64;
  unint64_t v8 = (v7 >> 5) + ((unint64_t)v7 >> 63);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = (v7 >> 5) + ((unint64_t)v7 >> 63);
  }
  float v10 = 0.07;
  uint64_t v303 = (v7 >> 5) + ((unint64_t)v7 >> 63);
  do
  {
    unint64_t v11 = v6++;
    if (v6 < v8)
    {
      unint64_t v12 = v6;
      while (1)
      {
        uint64_t v13 = *v5;
        uint64_t v14 = *v5 + 80 * v11;
        int v15 = *(unsigned __int8 *)(v14 + 72);
        uint64_t v16 = *v5 + 80 * v12;
        int v17 = *(unsigned __int8 *)(v16 + 72);
        int v18 = *(unsigned __int8 *)(v14 + 73);
        int v19 = *(unsigned __int8 *)(v16 + 73);
        BOOL v20 = !v15 && v17 == 0;
        BOOL v21 = v20 && v18 == 0;
        if (v21 && v19 == 0)
        {
          size_t v23 = (float32x2_t *)(v13 + 80 * v11);
          float32x2_t v25 = v23[3];
          unint64_t v24 = v23 + 3;
          float32x2_t v26 = v25;
          uint64_t v27 = (float32x2_t *)(v13 + 80 * v12);
          float32x2_t v29 = v27[3];
          float32x2_t v30 = v27[4];
          uint64_t v28 = v27 + 3;
          float32x2_t v31 = vsub_f32(v30, v29);
          float v32 = vaddv_f32(vmul_f32(vsub_f32(v25, v29), v31));
          float v33 = vaddv_f32(vmul_f32(v31, v31));
          if (v33 < 0.000001) {
            float v33 = 0.000001;
          }
          float32x2_t v34 = vsub_f32(vmla_n_f32(v29, v31, v32 / v33), v26);
          if (sqrtf(vaddv_f32(vmul_f32(v34, v34))) < 0.07)
          {
            unint64_t v35 = (float32x2_t *)(v13 + 80 * v11);
            float32x2_t v37 = v35[4];
            id v36 = v35 + 4;
            float32x2_t v38 = v37;
            float32x2_t v39 = vsub_f32(vmla_n_f32(v29, v31, vaddv_f32(vmul_f32(vsub_f32(v37, v29), v31)) / v33), v37);
            if (sqrtf(vaddv_f32(vmul_f32(v39, v39))) < 0.07)
            {
              float32x2_t v40 = vsub_f32(v38, v26);
              float32x2_t v41 = vsub_f32(v26, v38);
              int32x2_t v42 = (int32x2_t)vmul_f32(v41, v41);
              *(float *)v42.i32 = sqrtf(vaddv_f32((float32x2_t)v42));
              float32x2_t v43 = vdiv_f32(v40, (float32x2_t)vdup_lane_s32(v42, 0));
              float32x2_t v44 = vsub_f32(v29, v30);
              int32x2_t v45 = (int32x2_t)vmul_f32(v44, v44);
              *(float *)v45.i32 = sqrtf(vaddv_f32((float32x2_t)v45));
              float32x2_t v46 = vdiv_f32(v31, (float32x2_t)vdup_lane_s32(v45, 0));
              if (fabsf(vmlas_n_f32((float)-v43.f32[1] * v46.f32[0], v46.f32[1], v43.f32[0])) < 0.02)
              {
                id v47 = (float32x2_t *)(v13 + 80 * v12);
                unint64_t v48 = sub_25B40E348(v24, v28);
                unint64_t v8 = v303;
                float32x2_t v50 = vsub_f32(v24[1 - v48], v28[1 - v49]);
                float v51 = sqrtf(vaddv_f32(vmul_f32(v50, v50)));
                float32x2_t v52 = *v24;
                float32x2_t v53 = *v36;
                float32x2_t v54 = vsub_f32(*v24, *v36);
                int32x2_t v55 = (int32x2_t)vmul_f32(v54, v54);
                float32x2_t v56 = v47[4];
                uint64_t v5 = a2;
                float32x2_t v57 = vsub_f32(*v28, v56);
                int32x2_t v58 = (int32x2_t)vmul_f32(v57, v57);
                if (v51 < (float)(vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v55, v58), (float32x2_t)vzip2_s32(v55, v58))))
                                 + -0.07))
                  break;
              }
            }
          }
        }
LABEL_33:
        if (++v12 == v8) {
          goto LABEL_34;
        }
      }
      uint64_t v59 = 0;
      float32x2_t v60 = vsub_f32(v53, v52);
      float v61 = vaddv_f32(vmul_f32(v60, v60));
      float v62 = 0.0;
      char v63 = 1;
      float32x2_t v64 = *v24;
      while (1)
      {
        char v65 = v63;
        float v66 = vaddv_f32(vmul_f32(v60, vsub_f32(v28[v59], v52)));
        if (v66 < v62) {
          break;
        }
        if (v66 <= v61) {
          goto LABEL_30;
        }
        float32x2_t v53 = v28[v59];
LABEL_31:
        char v63 = 0;
        uint64_t v59 = 1;
        float v61 = v66;
        if ((v65 & 1) == 0)
        {
          float32x2_t *v24 = v64;
          float32x2_t *v36 = v53;
          *(_OWORD *)v28->f32 = *(_OWORD *)v24->f32;
          goto LABEL_33;
        }
      }
      float32x2_t v64 = v28[v59];
      float v62 = v66;
LABEL_30:
      float v66 = v61;
      goto LABEL_31;
    }
LABEL_34:
    ;
  }
  while (v6 != v9);
  uint64_t v67 = 0;
  float v68 = 0.0;
  float v69 = 0.00001;
  uint64_t v298 = v9;
  do
  {
    float32x2_t v70 = vsub_f32(*(float32x2_t *)(*v5 + 80 * v67 + 24), *(float32x2_t *)(*v5 + 80 * v67 + 32));
    float v71 = sqrtf(vaddv_f32(vmul_f32(v70, v70)));
    if (v71 > v68) {
      float v68 = v71;
    }
    float v299 = v68;
    uint64_t v300 = v67 + 1;
    if (v67 + 1 < v8)
    {
      uint64_t v72 = v67 + 1;
      do
      {
        uint64_t v73 = *v5;
        if (*(unsigned __int8 *)(*v5 + 80 * v67 + 72) | *(unsigned __int8 *)(*v5 + 80 * v72 + 72)) {
          goto LABEL_110;
        }
        uint64_t v74 = (float32x2_t *)(v73 + 80 * v67 + 24);
        uint64_t v75 = (float32x2_t *)(v73 + 80 * v72 + 24);
        unint64_t v76 = sub_25B40E348(v74, v75);
        float32x2_t v78 = vsub_f32(v74[v76], v75[v77]);
        uint64_t v79 = v73 + 80 * v67;
        if (sqrtf(vaddv_f32(vmul_f32(v78, v78))) < v10)
        {
          *(unsigned char *)(v79 + v76 + 40) = 1;
          *(unsigned char *)(v73 + 80 * v72 + v77 + 40) = 1;
          unint64_t v8 = v303;
          goto LABEL_110;
        }
        int v80 = *(unsigned __int8 *)(v79 + 73);
        if (*(unsigned char *)(v79 + 73)) {
          BOOL v81 = *(unsigned char *)(v73 + 80 * v72 + 73) == 0;
        }
        else {
          BOOL v81 = 1;
        }
        unint64_t v8 = v303;
        if (v81)
        {
          uint64_t v82 = 0;
          float32x2_t v83 = *v75;
          float32x2_t v84 = *(float32x2_t *)(v73 + 80 * v72 + 32);
          float32x2_t v85 = *v74;
          float32x2_t v86 = vsub_f32(v84, *v75);
          float32x2_t v304 = vsub_f32(*v74, *v75);
          char v87 = 1;
          int v88 = v80;
          float32x2_t v89 = *v74;
          while (1)
          {
            char v90 = v87;
            if (sub_25B40DB9C(v89, v83, v84, v69) <= v10)
            {
              float32x2_t v89 = *(float32x2_t *)(v73 + 80 * v67 + 32);
              int32x2_t v104 = (int32x2_t)vsub_f32(v89, v85);
              v92.f32[0] = -*(float *)&v104.i32[1];
              *(int32x2_t *)v92.f32 = vzip1_s32(*(int32x2_t *)v92.f32, v104);
              int32x2_t v105 = (int32x2_t)vmul_f32(v86, *(float32x2_t *)v92.f32);
              if (vaddv_f32((float32x2_t)v105) != 0.0)
              {
                if (v88)
                {
LABEL_64:
                  unint64_t v116 = sub_25B40E348((float32x2_t *)(v73 + 80 * v67 + 24), v75);
                  v75[v117] = v74[v116];
                  *(unsigned char *)(v73 + 80 * v72 + v117 + 40) = 1;
                  __n128 v118 = (unsigned char *)(v73 + 80 * v67 + v116 + 40);
                  unint64_t v8 = v303;
                  goto LABEL_109;
                }
                int32x2_t v106 = (int32x2_t)vmul_f32(v304, *(float32x2_t *)v92.f32);
                float32x2_t v107 = vmla_n_f32(v83, v86, vdiv_f32(vadd_f32((float32x2_t)v106, (float32x2_t)vdup_lane_s32(v106, 1)), vadd_f32((float32x2_t)v105, (float32x2_t)vdup_lane_s32(v105, 1))).f32[0]);
                float32x2_t v108 = vsub_f32(v107, v74[v82]);
                if (sqrtf(vaddv_f32(vmul_f32(v108, v108))) < v10)
                {
                  uint64_t v119 = v73 + 80 * v72;
                  unint64_t v122 = *(void *)(v119 + 64);
                  uint64_t v121 = (void *)(v119 + 64);
                  unint64_t v120 = v122;
                  uint64_t v123 = (void **)(v121 - 1);
                  uint64_t v124 = (float32x2_t *)*(v121 - 1);
                  if ((unint64_t)v124 < v122)
                  {
                    *uint64_t v124 = v107;
                    uint64_t v125 = v124 + 1;
                    goto LABEL_101;
                  }
                  uint64_t v133 = (void **)(v121 - 2);
                  uint64_t v134 = *(v121 - 2);
                  uint64_t v135 = ((uint64_t)v124 - v134) >> 3;
                  if (!((unint64_t)(v135 + 1) >> 61))
                  {
                    uint64_t v136 = v120 - v134;
                    uint64_t v137 = v136 >> 2;
                    if (v136 >> 2 <= (unint64_t)(v135 + 1)) {
                      uint64_t v137 = v135 + 1;
                    }
                    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v138 = v137;
                    }
                    if (v138) {
                      unint64_t v138 = (unint64_t)sub_25B3FCAD4(v138);
                    }
                    else {
                      uint64_t v139 = 0;
                    }
                    uint64_t v163 = (float32x2_t *)(v138 + 8 * v135);
                    float32x2_t *v163 = v107;
                    uint64_t v125 = v163 + 1;
                    uint64_t v164 = (char *)*v123;
                    uint64_t v165 = (char *)*v133;
                    if (*v123 != *v133)
                    {
                      do
                      {
                        float32x2_t v166 = *(float32x2_t *)(v164 - 8);
                        v164 -= 8;
                        v163[-1] = v166;
                        --v163;
                      }
                      while (v164 != v165);
                      uint64_t v164 = (char *)*v133;
                    }
                    *uint64_t v133 = v163;
                    char *v123 = v125;
                    *uint64_t v121 = v138 + 8 * v139;
                    if (v164) {
                      operator delete(v164);
                    }
LABEL_101:
                    unint64_t v8 = v303;
                    char *v123 = v125;
                    v74[v82] = v107;
                    __n128 v118 = (unsigned char *)(v73 + 80 * v67 + v82 + 40);
LABEL_109:
                    unsigned char *v118 = 1;
                    uint64_t v5 = a2;
                    break;
                  }
LABEL_330:
                  sub_25B3FBC4C();
                }
                int v88 = 0;
              }
            }
            else
            {
              float32x2_t v94 = v75[v82];
              float32x2_t v89 = *(float32x2_t *)(v73 + 80 * v67 + 32);
              if (sub_25B40DB9C(v94, v85, v89, v69) <= v10)
              {
                int32x2_t v95 = (int32x2_t)vsub_f32(v89, v85);
                v92.f32[0] = -*(float *)&v95.i32[1];
                float32x2_t v96 = (float32x2_t)vzip1_s32(*(int32x2_t *)v92.f32, v95);
                int32x2_t v97 = (int32x2_t)vmul_f32(v86, v96);
                if (vaddv_f32((float32x2_t)v97) != 0.0)
                {
                  if (v80) {
                    goto LABEL_64;
                  }
                  float v98 = v10;
                  float v99 = v69;
                  int32x2_t v100 = (int32x2_t)vmul_f32(v304, v96);
                  float32x2_t v101 = vmla_n_f32(v83, v86, vdiv_f32(vadd_f32((float32x2_t)v100, (float32x2_t)vdup_lane_s32(v100, 1)), vadd_f32((float32x2_t)v97, (float32x2_t)vdup_lane_s32(v97, 1))).f32[0]);
                  float32x2_t v102 = vsub_f32(v101, v94);
                  float v103 = v98;
                  if (sqrtf(vaddv_f32(vmul_f32(v102, v102))) < v98)
                  {
                    uint64_t v126 = v73 + 80 * v67;
                    unint64_t v129 = *(void *)(v126 + 64);
                    uint64_t v128 = (void *)(v126 + 64);
                    unint64_t v127 = v129;
                    int32x2_t v130 = (void **)(v128 - 1);
                    uint64_t v131 = (float32x2_t *)*(v128 - 1);
                    if ((unint64_t)v131 < v129)
                    {
                      *uint64_t v131 = v101;
                      double v132 = v131 + 1;
                      goto LABEL_108;
                    }
                    uint64_t v149 = (void **)(v128 - 2);
                    uint64_t v150 = *(v128 - 2);
                    uint64_t v151 = ((uint64_t)v131 - v150) >> 3;
                    if (!((unint64_t)(v151 + 1) >> 61))
                    {
                      uint64_t v152 = v127 - v150;
                      uint64_t v153 = v152 >> 2;
                      if (v152 >> 2 <= (unint64_t)(v151 + 1)) {
                        uint64_t v153 = v151 + 1;
                      }
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v154 = v153;
                      }
                      if (v154) {
                        unint64_t v154 = (unint64_t)sub_25B3FCAD4(v154);
                      }
                      else {
                        uint64_t v155 = 0;
                      }
                      uint64_t v167 = (float32x2_t *)(v154 + 8 * v151);
                      float32x2_t *v167 = v101;
                      double v132 = v167 + 1;
                      double v168 = (char *)*v130;
                      uint64_t v169 = (char *)*v149;
                      if (*v130 != *v149)
                      {
                        do
                        {
                          float32x2_t v170 = *(float32x2_t *)(v168 - 8);
                          v168 -= 8;
                          v167[-1] = v170;
                          --v167;
                        }
                        while (v168 != v169);
                        double v168 = (char *)*v149;
                      }
                      *uint64_t v149 = v167;
                      *int32x2_t v130 = v132;
                      *uint64_t v128 = v154 + 8 * v155;
                      if (v168) {
                        operator delete(v168);
                      }
LABEL_108:
                      unint64_t v8 = v303;
                      *int32x2_t v130 = v132;
                      v75[v82] = v101;
                      __n128 v118 = (unsigned char *)(v73 + 80 * v72 + v82 + 40);
                      float v69 = v99;
                      float v10 = v103;
                      goto LABEL_109;
                    }
                    goto LABEL_330;
                  }
                  int v88 = 0;
                  float v69 = v99;
                  float v10 = v98;
                }
              }
            }
            char v87 = 0;
            uint64_t v82 = 1;
            if ((v90 & 1) == 0)
            {
              *(float32x2_t *)v91.f32 = v85;
              *(float32x2_t *)v92.f32 = v89;
              *(float32x2_t *)v93.f32 = v83;
              BOOL v109 = sub_25B40E540(v91, v92, v93, v84);
              uint64_t v5 = a2;
              unint64_t v8 = v303;
              if (!v109) {
                break;
              }
              int32x2_t v111 = (int32x2_t)vsub_f32(v89, v85);
              *(float *)v110.i32 = -*(float *)&v111.i32[1];
              float32x2_t v112 = (float32x2_t)vzip1_s32(v110, v111);
              int32x2_t v113 = (int32x2_t)vmul_f32(v86, v112);
              if (vaddv_f32((float32x2_t)v113) == 0.0) {
                break;
              }
              if (v80)
              {
                unint64_t v114 = sub_25B40E348((float32x2_t *)(v73 + 80 * v67 + 24), v75);
                unint64_t v8 = v303;
                v75[v115] = v74[v114];
                *(unsigned char *)(v73 + 80 * v72 + v115 + 40) = 1;
                *(unsigned char *)(v73 + 80 * v67 + v114 + 40) = 1;
                break;
              }
              int32x2_t v140 = (int32x2_t)vmul_f32(v304, v112);
              float32x2_t v141 = vmla_n_f32(v83, v86, vdiv_f32(vadd_f32((float32x2_t)v140, (float32x2_t)vdup_lane_s32(v140, 1)), vadd_f32((float32x2_t)v113, (float32x2_t)vdup_lane_s32(v113, 1))).f32[0]);
              uint64_t v142 = v73 + 80 * v67;
              unint64_t v145 = *(void *)(v142 + 64);
              uint64_t v144 = (void *)(v142 + 64);
              unint64_t v143 = v145;
              uint64_t v146 = (void **)(v144 - 1);
              double v147 = (float32x2_t *)*(v144 - 1);
              if ((unint64_t)v147 >= v145)
              {
                int v156 = (void **)(v144 - 2);
                uint64_t v157 = *(v144 - 2);
                uint64_t v158 = ((uint64_t)v147 - v157) >> 3;
                if ((unint64_t)(v158 + 1) >> 61) {
                  goto LABEL_330;
                }
                uint64_t v159 = v143 - v157;
                uint64_t v160 = v159 >> 2;
                if (v159 >> 2 <= (unint64_t)(v158 + 1)) {
                  uint64_t v160 = v158 + 1;
                }
                if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v161 = v160;
                }
                if (v161) {
                  unint64_t v161 = (unint64_t)sub_25B3FCAD4(v161);
                }
                else {
                  uint64_t v162 = 0;
                }
                uint64_t v171 = (float32x2_t *)(v161 + 8 * v158);
                float32x2_t *v171 = v141;
                uint64_t v148 = v171 + 1;
                uint64_t v172 = (char *)*v146;
                uint64_t v173 = (char *)*v156;
                if (*v146 != *v156)
                {
                  do
                  {
                    float32x2_t v174 = *(float32x2_t *)(v172 - 8);
                    v172 -= 8;
                    v171[-1] = v174;
                    --v171;
                  }
                  while (v172 != v173);
                  uint64_t v172 = (char *)*v156;
                }
                *int v156 = v171;
                *uint64_t v146 = v148;
                *uint64_t v144 = v161 + 8 * v162;
                if (v172) {
                  operator delete(v172);
                }
                unint64_t v8 = v303;
              }
              else
              {
                *double v147 = v141;
                uint64_t v148 = v147 + 1;
              }
              *uint64_t v146 = v148;
              uint64_t v175 = v73 + 80 * v72;
              unint64_t v178 = *(void *)(v175 + 64);
              unint64_t v177 = (void *)(v175 + 64);
              unint64_t v176 = v178;
              uint64_t v179 = (void **)(v177 - 1);
              uint64_t v180 = (float32x2_t *)*(v177 - 1);
              if ((unint64_t)v180 >= v178)
              {
                uint64_t v182 = (void **)(v177 - 2);
                uint64_t v183 = *(v177 - 2);
                uint64_t v184 = ((uint64_t)v180 - v183) >> 3;
                if ((unint64_t)(v184 + 1) >> 61) {
                  goto LABEL_330;
                }
                uint64_t v185 = v176 - v183;
                uint64_t v186 = v185 >> 2;
                if (v185 >> 2 <= (unint64_t)(v184 + 1)) {
                  uint64_t v186 = v184 + 1;
                }
                if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v187 = v186;
                }
                if (v187) {
                  unint64_t v187 = (unint64_t)sub_25B3FCAD4(v187);
                }
                else {
                  uint64_t v188 = 0;
                }
                uint64_t v189 = (float32x2_t *)(v187 + 8 * v184);
                float32x2_t *v189 = v141;
                double v181 = v189 + 1;
                int v190 = (char *)*v179;
                unint64_t v191 = (char *)*v182;
                if (*v179 != *v182)
                {
                  do
                  {
                    float32x2_t v192 = *(float32x2_t *)(v190 - 8);
                    v190 -= 8;
                    v189[-1] = v192;
                    --v189;
                  }
                  while (v190 != v191);
                  int v190 = (char *)*v182;
                }
                const char *v182 = v189;
                *uint64_t v179 = v181;
                void *v177 = v187 + 8 * v188;
                if (v190) {
                  operator delete(v190);
                }
                uint64_t v5 = a2;
                unint64_t v8 = v303;
              }
              else
              {
                float32x2_t *v180 = v141;
                double v181 = v180 + 1;
                uint64_t v5 = a2;
              }
              *uint64_t v179 = v181;
              break;
            }
          }
        }
LABEL_110:
        ++v72;
      }
      while (v72 != v8);
    }
    ++v67;
    float v68 = v299;
  }
  while (v300 != v298);
  uint64_t v194 = *v5;
  uint64_t v193 = v5[1];
  int64x2_t v331 = 0uLL;
  unint64_t v332 = 0;
  if (v194 == v193)
  {
LABEL_244:
    uint64_t v328 = 0;
    unint64_t v329 = 0;
    unint64_t v330 = 0;
    goto LABEL_245;
  }
  while (2)
  {
    uint64_t v195 = *(float32x2_t **)(v194 + 56);
    unint64_t v196 = (unint64_t)v195 - *(void *)(v194 + 48);
    if (v196)
    {
      if (*(unsigned char *)(v194 + 40))
      {
        if (*(unsigned char *)(v194 + 41)) {
          BOOL v197 = 1;
        }
        else {
          BOOL v197 = (int)(v196 >> 3) <= 0;
        }
        if (!v197)
        {
LABEL_148:
          for (unint64_t i = (v196 >> 3) + 1; i > 1; --i)
          {
            uint64_t v199 = *(void *)(v194 + 48);
            uint64_t v200 = (float32x2_t *)(v199 + 8 * (i - 2));
            float32x2_t v201 = *v200;
            if (*(unsigned char *)(v194 + 40)) {
              goto LABEL_157;
            }
            float32x2_t v202 = *(float32x2_t *)(v194 + 24);
            float32x2_t v203 = vsub_f32(v201, v202);
            float v204 = sqrtf(vaddv_f32(vmul_f32(v203, v203)));
            float32x2_t v205 = vsub_f32(v202, *(float32x2_t *)(v194 + 32));
            float v206 = sqrtf(vaddv_f32(vmul_f32(v205, v205))) * 0.3;
            if (v206 > 0.5) {
              float v206 = 0.5;
            }
            if (v204 >= v206)
            {
LABEL_157:
              if (*(unsigned char *)(v194 + 41)) {
                continue;
              }
              float32x2_t v207 = *(float32x2_t *)(v194 + 32);
              float32x2_t v208 = vsub_f32(v201, v207);
              float v209 = sqrtf(vaddv_f32(vmul_f32(v208, v208)));
              float32x2_t v210 = vsub_f32(*(float32x2_t *)(v194 + 24), v207);
              float v211 = sqrtf(vaddv_f32(vmul_f32(v210, v210))) * 0.3;
              if (v211 > 0.5) {
                float v211 = 0.5;
              }
              if (v209 >= v211) {
                continue;
              }
              *(float32x2_t *)(v194 + 32) = v201;
              *(unsigned char *)(v194 + 41) = 1;
            }
            else
            {
              *(float32x2_t *)(v194 + 24) = v201;
              *(unsigned char *)(v194 + 40) = 1;
            }
            int64_t v212 = (char *)v195 - (char *)&v200[1];
            if (v195 != &v200[1]) {
              memmove((void *)(v199 + 8 * (i - 2)), &v200[1], (char *)v195 - (char *)&v200[1]);
            }
            uint64_t v195 = (float32x2_t *)((char *)v200 + v212);
            *(void *)(v194 + 56) = (char *)v200 + v212;
          }
        }
      }
      else if ((int)(v196 >> 3) >= 1)
      {
        goto LABEL_148;
      }
    }
    if (!*(unsigned char *)(v194 + 72))
    {
      float32x2_t v213 = vsub_f32(*(float32x2_t *)(v194 + 24), *(float32x2_t *)(v194 + 32));
      float v214 = sqrtf(vaddv_f32(vmul_f32(v213, v213)));
      if ((v214 > 0.15 || *(unsigned char *)(v194 + 40) && *(unsigned char *)(v194 + 41))
        && (!a3
         || *(unsigned char *)(v194 + 40)
         || *(unsigned char *)(v194 + 41)
         || v195 != *(float32x2_t **)(v194 + 48)
         || v214 > (float)(v299 * 0.5)))
      {
        uint64_t v215 = v331.i64[1];
        if (v331.i64[1] >= v332)
        {
          uint64_t v216 = sub_25B3FFE64(&v331, (long long *)v194);
        }
        else
        {
          sub_25B3FFDC4((char *)v331.i64[1], (long long *)v194);
          uint64_t v216 = v215 + 80;
        }
        v331.i64[1] = v216;
      }
    }
    v194 += 80;
    if (v194 != v193) {
      continue;
    }
    break;
  }
  uint64_t v217 = v331.i64[0];
  uint64_t v328 = 0;
  unint64_t v329 = 0;
  unint64_t v330 = 0;
  for (uint64_t j = v331.i64[1]; v217 != j; v217 += 80)
  {
    if (*(char *)(v217 + 23) < 0)
    {
      sub_25B4002F4(__dst, *(void **)v217, *(void *)(v217 + 8));
    }
    else
    {
      long long v218 = *(_OWORD *)v217;
      id v321 = *(char **)(v217 + 16);
      *(_OWORD *)std::string __dst = v218;
    }
    long long v219 = *(_OWORD *)(v217 + 24);
    __int16 v323 = *(_WORD *)(v217 + 40);
    long long v322 = v219;
    float32x2_t v325 = 0;
    uint64_t v326 = 0;
    uint64_t v324 = 0;
    sub_25B400390(&v324, *(const void **)(v217 + 48), *(void *)(v217 + 56), (uint64_t)(*(void *)(v217 + 56) - *(void *)(v217 + 48)) >> 3);
    unsigned int v220 = *(unsigned __int16 *)(v217 + 72);
    __int16 v327 = *(_WORD *)(v217 + 72);
    double v221 = *(double *)&v322;
    if (SHIBYTE(v321) < 0)
    {
      sub_25B4002F4(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)__dst;
      uint64_t v316 = v321;
    }
    sub_25B4C9C30((uint64_t)&v317, __p, v220 > 0xFF, v221);
    unint64_t v222 = v329;
    if (v329 >= v330)
    {
      unint64_t v224 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v329 - v328) >> 3);
      unint64_t v225 = v224 + 1;
      if (v224 + 1 > 0x666666666666666) {
        sub_25B3FBC4C();
      }
      if (0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3) > v225) {
        unint64_t v225 = 0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v330 - v328) >> 3) >= 0x333333333333333) {
        unint64_t v226 = 0x666666666666666;
      }
      else {
        unint64_t v226 = v225;
      }
      uint64_t v337 = &v330;
      if (v226) {
        unint64_t v226 = (unint64_t)sub_25B460930(v226);
      }
      else {
        uint64_t v227 = 0;
      }
      id v333 = (void **)v226;
      uint64_t v334 = v226 + 40 * v224;
      uint64_t v335 = v334;
      unint64_t v336 = v226 + 40 * v227;
      sub_25B4C9CE4(v334, (uint64_t)&v317);
      v335 += 40;
      sub_25B4C9EFC(&v328, &v333);
      unint64_t v223 = v329;
      sub_25B4C9F74((uint64_t)&v333);
    }
    else
    {
      sub_25B4C9CE4(v329, (uint64_t)&v317);
      unint64_t v223 = v222 + 40;
    }
    unint64_t v329 = v223;
    sub_25B400248(v319[0]);
    if (SHIBYTE(v316) < 0) {
      operator delete(__p[0]);
    }
    double v228 = *((double *)&v322 + 1);
    if (SHIBYTE(v321) < 0)
    {
      sub_25B4002F4(v313, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v313 = *(_OWORD *)__dst;
      uint64_t v314 = v321;
    }
    sub_25B4C9C30((uint64_t)&v317, v313, SHIBYTE(v327), v228);
    unint64_t v229 = v329;
    if (v329 >= v330)
    {
      unint64_t v231 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v329 - v328) >> 3);
      unint64_t v232 = v231 + 1;
      if (v231 + 1 > 0x666666666666666) {
        sub_25B3FBC4C();
      }
      if (0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3) > v232) {
        unint64_t v232 = 0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v330 - v328) >> 3) >= 0x333333333333333) {
        unint64_t v233 = 0x666666666666666;
      }
      else {
        unint64_t v233 = v232;
      }
      uint64_t v337 = &v330;
      if (v233) {
        unint64_t v233 = (unint64_t)sub_25B460930(v233);
      }
      else {
        uint64_t v234 = 0;
      }
      id v333 = (void **)v233;
      uint64_t v334 = v233 + 40 * v231;
      uint64_t v335 = v334;
      unint64_t v336 = v233 + 40 * v234;
      sub_25B4C9CE4(v334, (uint64_t)&v317);
      v335 += 40;
      sub_25B4C9EFC(&v328, &v333);
      unint64_t v230 = v329;
      sub_25B4C9F74((uint64_t)&v333);
    }
    else
    {
      sub_25B4C9CE4(v329, (uint64_t)&v317);
      unint64_t v230 = v229 + 40;
    }
    unint64_t v329 = v230;
    sub_25B400248(v319[0]);
    if (SHIBYTE(v314) < 0) {
      operator delete(v313[0]);
    }
    double v235 = v324;
    double v236 = v325;
    if (v324 != v325)
    {
      do
      {
        double v237 = *v235;
        if (SHIBYTE(v321) < 0)
        {
          sub_25B4002F4(v311, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)char v311 = *(_OWORD *)__dst;
          uint64_t v312 = v321;
        }
        sub_25B4C9C30((uint64_t)&v317, v311, 0, v237);
        unint64_t v238 = v329;
        if (v329 >= v330)
        {
          unint64_t v240 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v329 - v328) >> 3);
          unint64_t v241 = v240 + 1;
          if (v240 + 1 > 0x666666666666666) {
            sub_25B3FBC4C();
          }
          if (0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3) > v241) {
            unint64_t v241 = 0x999999999999999ALL * ((uint64_t)(v330 - v328) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v330 - v328) >> 3) >= 0x333333333333333) {
            unint64_t v242 = 0x666666666666666;
          }
          else {
            unint64_t v242 = v241;
          }
          uint64_t v337 = &v330;
          if (v242) {
            unint64_t v242 = (unint64_t)sub_25B460930(v242);
          }
          else {
            uint64_t v243 = 0;
          }
          id v333 = (void **)v242;
          uint64_t v334 = v242 + 40 * v240;
          uint64_t v335 = v334;
          unint64_t v336 = v242 + 40 * v243;
          sub_25B4C9CE4(v334, (uint64_t)&v317);
          v335 += 40;
          sub_25B4C9EFC(&v328, &v333);
          unint64_t v239 = v329;
          sub_25B4C9F74((uint64_t)&v333);
        }
        else
        {
          sub_25B4C9CE4(v329, (uint64_t)&v317);
          unint64_t v239 = v238 + 40;
        }
        unint64_t v329 = v239;
        sub_25B400248(v319[0]);
        if (SHIBYTE(v312) < 0) {
          operator delete(v311[0]);
        }
        ++v235;
      }
      while (v235 != v236);
      double v235 = v324;
    }
    if (v235) {
      operator delete(v235);
    }
    if (SHIBYTE(v321) < 0) {
      operator delete(__dst[0]);
    }
  }
LABEL_245:
  if (a3)
  {
    __n128 v308 = 0;
    uint64_t v309 = 0;
    uint64_t v310 = 0;
    sub_25B4C9D5C((uint64_t)&v308, v328, v329, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v329 - v328) >> 3));
    sub_25B5DE964((uint64_t *)&v308);
    sub_25B5DEB20(a1, &v308);
    sub_25B5DEC24((uint64_t *)&v333, a1);
    unint64_t v244 = 0x2E8BA2E8BA2E8BA3 * ((v334 - (uint64_t)v333) >> 3);
    uint64_t v246 = *a1;
    uint64_t v245 = a1[1];
    unsigned int v339 = 0;
    uint64_t v340 = 0;
    id v338 = 0;
    if (v244 >= 2)
    {
      uint64_t v247 = 0;
      unint64_t v248 = 0xCCCCCCCCCCCCCCCDLL * ((v245 - v246) >> 3);
      uint64_t v306 = 0x2E8BA2E8BA2E8BA3 * ((v334 - (uint64_t)v333) >> 3);
      do
      {
        uint64_t v249 = v247++;
        if (v247 == v244) {
          uint64_t v250 = 0;
        }
        else {
          uint64_t v250 = v249 + 1;
        }
        float v251 = v333[11 * v249 + 10];
        long long v252 = v333[11 * v250 + 10];
        unint64_t v253 = ((unint64_t)v251 + 1) % v248;
        if ((void *)v253 != v252 && ((unint64_t)v252 + v248 - (void)v251) % v248 <= 3)
        {
          uint64_t v254 = 0;
          uint64_t v255 = *a1;
          float32x2_t v256 = vsub_f32(*(float32x2_t *)(*a1 + 40 * (void)v251), *(float32x2_t *)(*a1 + 40 * v253));
          int32x2_t v257 = (int32x2_t)vmul_f32(v256, v256);
          float32x2_t v258 = vsub_f32(*(float32x2_t *)(*a1 + 40 * (void)v252), *(float32x2_t *)(*a1 + 40 * (((unint64_t)v252 + 1) % v248)));
          int32x2_t v259 = (int32x2_t)vmul_f32(v258, v258);
          float32x2_t v260 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v259, v257), (float32x2_t)vzip2_s32(v259, v257)));
          if (v260.f32[1] >= v260.f32[0]) {
            float v261 = v260.f32[1];
          }
          else {
            float v261 = v260.f32[0];
          }
          if (v260.f32[0] >= v260.f32[1]) {
            float v262 = v260.f32[1];
          }
          else {
            float v262 = v260.f32[0];
          }
          uint64_t v317 = 0;
          float v318 = 0;
          v319[0] = 0;
          float v263 = 0.0;
          do
          {
            uint64_t v264 = v255 + 40 * v253;
            if (v254 >= v319[0])
            {
              unint64_t v265 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v254[-v317] >> 3);
              unint64_t v266 = v265 + 1;
              if (v265 + 1 > 0x666666666666666) {
                sub_25B3FBC4C();
              }
              if (0x999999999999999ALL * ((uint64_t)&v319[0][-v317] >> 3) > v266) {
                unint64_t v266 = 0x999999999999999ALL * ((uint64_t)&v319[0][-v317] >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v319[0][-v317] >> 3) >= 0x333333333333333) {
                unint64_t v267 = 0x666666666666666;
              }
              else {
                unint64_t v267 = v266;
              }
              *((void *)&v322 + 1) = v319;
              if (v267) {
                unint64_t v267 = (unint64_t)sub_25B460930(v267);
              }
              else {
                uint64_t v268 = 0;
              }
              __dst[0] = (void *)v267;
              __dst[1] = (void *)(v267 + 40 * v265);
              id v321 = (char *)__dst[1];
              *(void *)&long long v322 = v267 + 40 * v268;
              sub_25B4C9CE4((uint64_t)__dst[1], v264);
              v321 += 40;
              sub_25B4C9EFC(&v317, __dst);
              uint64_t v254 = v318;
              sub_25B4C9F74((uint64_t)__dst);
            }
            else
            {
              sub_25B4C9CE4((uint64_t)v254, v264);
              v254 += 40;
            }
            float v318 = v254;
            uint64_t v255 = *a1;
            uint64_t v269 = 40 * v253;
            if (v253 + 1 == v248) {
              unint64_t v253 = 0;
            }
            else {
              ++v253;
            }
            float32x2_t v270 = vsub_f32(*(float32x2_t *)(v255 + v269), *(float32x2_t *)(v255 + 40 * v253));
            float v263 = v263 + sqrtf(vaddv_f32(vmul_f32(v270, v270)));
          }
          while ((void *)v253 != v252);
          uint64_t v271 = v255 + 40 * (void)v252;
          if (v254 >= v319[0])
          {
            unint64_t v273 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v254[-v317] >> 3);
            unint64_t v274 = v273 + 1;
            if (v273 + 1 > 0x666666666666666) {
              sub_25B3FBC4C();
            }
            if (0x999999999999999ALL * ((uint64_t)&v319[0][-v317] >> 3) > v274) {
              unint64_t v274 = 0x999999999999999ALL * ((uint64_t)&v319[0][-v317] >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v319[0][-v317] >> 3) >= 0x333333333333333) {
              unint64_t v275 = 0x666666666666666;
            }
            else {
              unint64_t v275 = v274;
            }
            *((void *)&v322 + 1) = v319;
            if (v275) {
              unint64_t v275 = (unint64_t)sub_25B460930(v275);
            }
            else {
              uint64_t v276 = 0;
            }
            __dst[0] = (void *)v275;
            __dst[1] = (void *)(v275 + 40 * v273);
            id v321 = (char *)__dst[1];
            *(void *)&long long v322 = v275 + 40 * v276;
            sub_25B4C9CE4((uint64_t)__dst[1], v271);
            v321 += 40;
            sub_25B4C9EFC(&v317, __dst);
            uint64_t v272 = (uint64_t)v318;
            sub_25B4C9F74((uint64_t)__dst);
          }
          else
          {
            sub_25B4C9CE4((uint64_t)v254, v255 + 40 * (void)v252);
            uint64_t v272 = (uint64_t)(v254 + 40);
          }
          float v318 = (char *)v272;
          if (v263 < v261 && v263 < (float)(v262 + v262)) {
            sub_25B5DEED0((uint64_t *)&v338, (uint64_t)v339, v317, v272, 0xCCCCCCCCCCCCCCCDLL * ((v272 - v317) >> 3));
          }
          __dst[0] = &v317;
          sub_25B4000E4((void ***)__dst);
          unint64_t v244 = v306;
        }
      }
      while (v247 != v244);
    }
    __dst[0] = &v333;
    sub_25B5DF0D8((void ***)__dst);
    uint64_t v279 = (uint64_t)v338;
    uint64_t v278 = (uint64_t)v339;
    if (v339 != v338)
    {
      uint64_t v280 = v309;
      do
      {
        uint64_t v281 = v308;
        while (v281 != (float32x2_t *)v280)
        {
          if (sub_25B5DF12C(v279, (uint64_t)v281))
          {
            uint64_t v280 = sub_25B576C0C((uint64_t)&v281[5], v309, (uint64_t)v281);
            uint64_t v282 = v309;
            if (v309 != v280)
            {
              do
              {
                uint64_t v283 = v282 - 40;
                sub_25B400248(*(char **)(v282 - 24));
                uint64_t v282 = v283;
              }
              while (v283 != v280);
            }
            uint64_t v309 = v280;
          }
          else
          {
            v281 += 5;
            uint64_t v280 = v309;
          }
        }
        v279 += 40;
      }
      while (v279 != v278);
      char v284 = v338;
      uint64_t v285 = (uint64_t)v339;
      uint64_t v286 = a1[1];
      if (v338 != v339)
      {
        do
        {
          uint64_t v287 = (float32x2_t *)*a1;
          while (v287 != (float32x2_t *)v286)
          {
            float32x2_t v288 = vsub_f32(*v284, *v287);
            if (fabsf(sqrtf(vaddv_f32(vmul_f32(v288, v288)))) >= 0.07)
            {
              v287 += 5;
            }
            else
            {
              uint64_t v286 = sub_25B576C0C((uint64_t)&v287[5], v286, (uint64_t)v287);
              uint64_t v289 = a1[1];
              if (v289 != v286)
              {
                do
                {
                  uint64_t v290 = v289 - 40;
                  sub_25B400248(*(char **)(v289 - 24));
                  uint64_t v289 = v290;
                }
                while (v290 != v286);
              }
              a1[1] = v286;
            }
          }
          v284 += 5;
        }
        while (v284 != (float32x2_t *)v285);
        uint64_t v280 = v309;
      }
      sub_25B5DEED0((uint64_t *)&v308, v280, *a1, v286, 0xCCCCCCCCCCCCCCCDLL * ((v286 - *a1) >> 3));
      sub_25B5DEB20((uint64_t *)__dst, &v308);
      sub_25B5DF214((void **)a1);
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      a1[2] = (uint64_t)v321;
      __dst[1] = 0;
      id v321 = 0;
      __dst[0] = 0;
      id v333 = __dst;
      sub_25B4000E4(&v333);
    }
    sub_25B5DF280(a1);
    uint64_t v291 = *a1;
    uint64_t v292 = a1[1];
    if ((sub_25B5DE824((float32x2_t *)*a1, v292) & 1) == 0)
    {
      for (; v292 != v291; v292 -= 40)
        sub_25B400248(*(char **)(v292 - 24));
      a1[1] = v291;
    }
    __dst[0] = &v338;
    sub_25B4000E4((void ***)__dst);
    long long v293 = &v308;
  }
  else
  {
    memset(v307, 0, sizeof(v307));
    sub_25B4C9D5C((uint64_t)v307, v328, v329, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v329 - v328) >> 3));
    sub_25B5DE964((uint64_t *)v307);
    sub_25B5DFF34(a1, v307);
    sub_25B5E0584((float32x2_t **)a1, v307);
    sub_25B5E33A0(a1, (uint64_t *)v307, -0.5);
    sub_25B5E0584((float32x2_t **)a1, v307);
    sub_25B5E06B8(a1, (uint64_t *)v307, 1, a4, 0);
    sub_25B5E0584((float32x2_t **)a1, v307);
    sub_25B5E33A0(a1, (uint64_t *)v307, 0.0);
    sub_25B5E0584((float32x2_t **)a1, v307);
    sub_25B5E06B8(a1, (uint64_t *)v307, 1, a4, 1);
    sub_25B5E3D34(a1);
    sub_25B5DF280(a1);
    uint64_t v294 = *a1;
    uint64_t v295 = a1[1];
    if ((sub_25B5DE824((float32x2_t *)*a1, v295) & 1) == 0)
    {
      for (; v295 != v294; v295 -= 40)
        sub_25B400248(*(char **)(v295 - 24));
      a1[1] = v294;
    }
    long long v293 = v307;
  }
  __dst[0] = v293;
  sub_25B4000E4((void ***)__dst);
  __dst[0] = &v328;
  sub_25B4000E4((void ***)__dst);
  __dst[0] = &v331;
  sub_25B40016C((void ***)__dst);
}

void sub_25B4C99FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  a41 = (void *)(v51 - 184);
  sub_25B4000E4((void ***)&a41);
  sub_25B4000E4((void ***)&a36);
  a36 = (uint64_t)&a22;
  sub_25B4000E4((void ***)&a36);
  a36 = (uint64_t)&a51;
  sub_25B4000E4((void ***)&a36);
  a36 = v51 - 248;
  sub_25B40016C((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4C9C30(uint64_t a1, void *a2, char a3, double a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  uint64_t v7 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(double *)a1 = a4;
  unint64_t v8 = (uint64_t **)sub_25B4953D4(a1 + 8, &v12, a2);
  if (!*v8)
  {
    uint64_t v9 = v8;
    sub_25B4CA328((uint64_t)&v11, (uint64_t)v7, (uint64_t)a2);
    sub_25B3FA740(v7, v12, v9, v11);
  }
  *(unsigned char *)(a1 + 32) = a3;
  return a1;
}

void sub_25B4C9CD0(_Unwind_Exception *a1)
{
  sub_25B400248(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4C9CE4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  uint64_t v4 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = *(void *)a2;
  if (a1 != a2) {
    sub_25B4CA0B0(v4, *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

void sub_25B4C9D48(_Unwind_Exception *a1)
{
  sub_25B400248(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4C9D5C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      sub_25B3FBC4C();
    }
    unint64_t v6 = (void *)result;
    uint64_t v7 = (char *)sub_25B460930(a4);
    void *v6 = v7;
    v6[1] = v7;
    std::locale v6[2] = &v7[40 * v8];
    BOOL result = sub_25B4C9E10((uint64_t)(v6 + 2), a2, a3, (uint64_t)v7);
    v6[1] = result;
  }
  return result;
}

void sub_25B4C9DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_25B4000E4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4C9E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_25B4C9CE4(a4, v5);
      v5 += 40;
      a4 = v7 + 40;
      v7 += 40;
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_25B4C9E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B4C9E9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = v2 - 40;
        sub_25B400248(*(char **)(v2 - 24));
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t sub_25B4C9EFC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_25B4C9FC8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_25B4C9F74(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    sub_25B400248(*(char **)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B4C9FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      v8 -= 40;
      sub_25B4C9CE4(a7 - 40, v8);
      a7 = v10 - 40;
      v10 -= 40;
    }
    while (v8 != a5);
  }
  return a7;
}

void sub_25B4CA044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25B4CA058(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_25B400248(*(char **)(v3 + 16));
      v3 += 40;
    }
  }
  return a1;
}

uint64_t **sub_25B4CA0B0(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    char *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v19 = (uint64_t *)result;
    BOOL v20 = v8;
    BOOL v21 = v8;
    if (v8)
    {
      BOOL v20 = sub_25B3FFA98((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v10 = v21;
          unint64_t v11 = (uint64_t **)sub_25B4CA260((uint64_t)v5, &v18, v21 + 4);
          sub_25B3FA740(v5, v18, v11, v10);
          uint64_t v8 = v20;
          BOOL v21 = v20;
          if (v20) {
            BOOL v20 = sub_25B3FFA98((uint64_t)v20);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_25B4CA2D8((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      sub_25B4CA328((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v14 = v19;
      int v15 = (uint64_t **)sub_25B4CA260((uint64_t)v5, &v18, v19 + 4);
      uint64_t result = (uint64_t **)sub_25B3FA740(v5, v18, v15, v14);
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_25B4CA24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B4CA2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_25B4CA260(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if ((sub_25B4954C0(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t sub_25B4CA2D8(uint64_t a1)
{
  sub_25B400248(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_25B400248((char *)v2);
  }
  return a1;
}

void *sub_25B4CA328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_25B4002F4(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_25B4CA39C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_25B4CA3B8(0, v2);
  _Unwind_Resume(a1);
}

void sub_25B4CA3B8(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_25B4CADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61,void *a62)
{
  STACK[0x2F0] = (unint64_t)&unk_2708F18C0;
  if (STACK[0x370]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x370]);
  }
  if (a37) {
    sub_25B404120(a37);
  }
  STACK[0x260] = (unint64_t)&a40;
  sub_25B4A3B38((void ***)&STACK[0x260]);
  a43 = &unk_2708F1C28;
  if (a59) {
    sub_25B404120(a59);
  }
  a62 = &unk_2708F1C28;
  if (STACK[0x228]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x228]);
  }
  if (*(unsigned char *)(v62 + 512)) {
    sub_25B3F5FE8(v65 + 152);
  }
  *(void *)(v62 + 176) = v64;
  uint64_t v67 = *(std::__shared_weak_count **)(v62 + 304);
  if (v67) {
    sub_25B404120(v67);
  }
  *(void *)(v62 + 24) = v63;
  float v68 = *(std::__shared_weak_count **)(v62 + 152);
  if (v68) {
    sub_25B404120(v68);
  }
  _Unwind_Resume(a1);
}

void sub_25B4CB154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *sub_25B4CB164(_OWORD *a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = 0;
  _OWORD v18[3] = *MEMORY[0x263EF8340];
  a1[2] = 0u;
  uint64_t v6 = 1;
  uint64_t v7 = (void *)MEMORY[0x263F8C0F8];
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v8 = *a3;
  v18[0] = *a2;
  v18[1] = v8;
  uint64_t v9 = (std::locale::id *)MEMORY[0x263F8C108];
  void v18[2] = *a4;
  uint64_t v16 = 0;
  do
  {
    uint64_t v10 = &v18[v5];
    unint64_t v11 = v18[v5];
    if (v11 >= 0xBEBC200)
    {
      sub_25B406B20(v7, (uint64_t)"runtime_err in ", 15);
      sub_25B406B20(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/../common/../tensor/shape.hpp", 118);
      sub_25B406B20(v7, (uint64_t)" ", 1);
      uint64_t v12 = (void *)std::ostream::operator<<();
      sub_25B406B20(v12, (uint64_t)" ", 1);
      sub_25B406B20(v12, (uint64_t)"Shape", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      BOOL v13 = std::locale::use_facet(&v17, v9);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      sub_25B45806C("err", "shape[", (uint64_t)&v16, "]", " is ", (uint64_t)v10, " ,it should <= 6");
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      uint64_t v14 = std::locale::use_facet(&v17, v9);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v11 = *v10;
    }
    uint64_t v16 = v6;
    *(void *)((char *)a1 + v5 * 8) = v11;
    ++v5;
    ++v6;
  }
  while (v5 != 3);
  return a1;
}

void sub_25B4CB3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_25B4CB400(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_2708F1EB8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = (uint64_t **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  char v6 = 1;
  *(unsigned char *)(a1 + 136) = 1;
  sub_25B43876C(a1 + 8, a2);
  uint64_t v7 = *(void *)(a1 + 104);
  if (v7)
  {
    uint64_t v8 = operator new(0x30uLL);
    v8[1] = 0;
    v8[2] = 0;
    _OWORD v8[3] = a3;
    void *v8 = &unk_2708F1ED8;
    _OWORD v8[4] = v7;
    *((unsigned char *)v8 + 40) = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = v8 + 3;
    *(void *)(a1 + 128) = v8;
    if (v9)
    {
      sub_25B404120(v9);
      a3 = **v5;
    }
    char v6 = 0;
    *(void *)(a1 + 144) = a3 + 2 * *(void *)(a1 + 112);
  }
  *(unsigned char *)(a1 + 137) = v6;
  return a1;
}

void sub_25B4CB4F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_25B404120(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4CB5F4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id sub_25B4CB61C(__n128 a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v16[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = objc_msgSend_numberWithFloat_(NSNumber, a3, a4);
  v16[0] = v4;
  HIDWORD(v5) = a1.n128_u32[1];
  LODWORD(v5) = a1.n128_u32[1];
  uint64_t v8 = objc_msgSend_numberWithFloat_(NSNumber, v6, v7, v5);
  v16[1] = v8;
  unint64_t v11 = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v16[2] = v11;
  BOOL v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v12, (uint64_t)v16, 3);

  return v13;
}

void sub_25B4CB704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4CB830(_Unwind_Exception *a1)
{
  char v6 = v5;

  _Unwind_Resume(a1);
}

void sub_25B4CB878(void *a1, _OWORD *a2)
{
  id v23 = a1;
  if (objc_msgSend_count(v23, v3, v4) == 3)
  {
    char v6 = objc_msgSend_objectAtIndexedSubscript_(v23, v5, 0);
    objc_msgSend_floatValue(v6, v7, v8);
    *(void *)&long long v22 = v9;
    unint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v23, v10, 1);
    objc_msgSend_floatValue(v11, v12, v13);
    int v21 = v14;
    uint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(v23, v15, 2);
    objc_msgSend_floatValue(v16, v17, v18);
    long long v19 = v22;
    DWORD1(v19) = v21;
    DWORD2(v19) = v20;
    *a2 = v19;
  }
}

void sub_25B4CB93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_25B4CBA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4CBD64(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void sub_25B4CBF34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4CC004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B4CC098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4CC160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B4CC2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B4CC2F8(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  double v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_25B4CC3A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = a2;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_25B3FA4B0(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *int v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_25B4CC59C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B4CC5B0(uint64_t a1)
{
  sub_25B414644(a1 + 40);
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_25B4CC5FC(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        sub_25B4CC9D0(v4);
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_25B4CC680(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        sub_25B3FA70C();
      }
      float v13 = operator new(8 * *(void *)&prime);
      float v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      unint64_t v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            unint64_t v16 = i;
          }
          else
          {
            unint64_t v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                float32x2_t v25 = v24;
                unint64_t v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *unint64_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              unint64_t v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    uint64_t v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void sub_25B4CC9D0(void *a1)
{
  int8x8_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
}

id sub_25B4CCA28(void **a1, void *a2)
{
  uint64_t v587 = *MEMORY[0x263EF8340];
  id v508 = a2;
  if (a1)
  {
    objc_msgSend_removeAllObjects(a1[1], v3, v4);
    float v7 = objc_msgSend_copy(v508, v5, v6);
    unint64_t v10 = objc_msgSend_walls(v7, v8, v9);
    uint64_t v510 = v7;
    float v13 = objc_msgSend_windows(v7, v11, v12);
    sub_25B403500(&__p, "outer");
    sub_25B4CFDDC((float32x2_t **)v541, v10, v13);
    float32x4_t v532 = a1;
    if (SHIBYTE(v580) < 0) {
      operator delete(__p);
    }

    unint64_t v16 = objc_msgSend_walls(v510, v14, v15);
    unint64_t v19 = objc_msgSend_windows(v510, v17, v18);
    sub_25B4D0858(&v536, v16, v19, v541);

    uint8x8_t v20 = v536;
    uint64_t v21 = v537;
    sub_25B403500(&__p, "inner");
    sub_25B4CFDDC((float32x2_t **)&v534, v20, v21);
    if (SHIBYTE(v580) < 0) {
      operator delete(__p);
    }
    id v515 = objc_msgSend_array(MEMORY[0x263EFF8C0], v22, v23);
    unint64_t v24 = v537;
    float32x2_t v25 = v536;
    id v520 = v24;
    int v511 = objc_msgSend_array(MEMORY[0x263EFF980], v26, v27);
    if (objc_msgSend_count(v25, v28, v29) && objc_msgSend_count(v520, v30, v31))
    {
      *(_OWORD *)float v562 = 0u;
      long long v563 = 0u;
      LODWORD(v564) = 1065353216;
      long long v558 = 0u;
      long long v559 = 0u;
      LODWORD(v560) = 1065353216;
      float v513 = v534;
      if (v535 != v534)
      {
        unint64_t v34 = 0;
        unint64_t v514 = 0xAAAAAAAAAAAAAAABLL * ((v535 - (unsigned char *)v534) >> 4);
        do
        {
          uint64_t v527 = objc_msgSend_objectAtIndexedSubscript_(v520, v32, v34);
          sub_25B4CFA98(&v556, v527, v25);
          if (v557.i8[0])
          {
            float32x2_t v37 = objc_msgSend_identifier(v527, v35, v36);
            obuint64_t j = v34;
            objc_msgSend_UUIDString(v37, v38, v39);
            id v40 = objc_claimAutoreleasedReturnValue();
            float32x2_t v43 = (char *)objc_msgSend_UTF8String(v40, v41, v42);
            sub_25B403500(v574, v43);

            float32x2_t v554 = (float32x2_t)sub_25B477C40(v527).n128_u64[0];
            float32x2_t v555 = v44;
            objc_msgSend_quad(v527, v45, v46);
            float v518 = v47;
            objc_msgSend_quad(v527, v48, v49);
            if (v518 >= v52) {
              float v53 = v518;
            }
            else {
              float v53 = v52;
            }
            objc_msgSend_quad(v527, v50, v51);
            float v519 = v54;
            objc_msgSend_quad(v527, v55, v56);
            if (v57 >= v519) {
              float v58 = v519;
            }
            else {
              float v58 = v57;
            }
            uint64_t v59 = v556;
            float32x2_t v552 = (float32x2_t)sub_25B477C40(v556).n128_u64[0];
            float32x2_t v553 = v60;
            uint64_t v63 = objc_msgSend_identifier(v59, v61, v62);
            objc_msgSend_UUIDString(v63, v64, v65);
            id v66 = objc_claimAutoreleasedReturnValue();
            float v69 = (char *)objc_msgSend_UTF8String(v66, v67, v68);
            sub_25B403500(v570, v69);

            unint64_t v72 = 0;
            uint64_t v73 = (uint64_t)v513 + 48 * obj;
            while (objc_msgSend_count(v25, v70, v71) > v72)
            {
              uint64_t v75 = objc_msgSend_objectAtIndexedSubscript_(v25, v74, v72);
              float32x2_t v78 = objc_msgSend_identifier(v75, v76, v77);
              BOOL v81 = objc_msgSend_identifier(v59, v79, v80);
              char isEqual = objc_msgSend_isEqual_(v78, v82, (uint64_t)v81);

              if ((isEqual & 1) == 0)
              {
                float32x2_t v547 = (float32x2_t)sub_25B477C40(v75).n128_u64[0];
                float32x2_t v548 = v84;
                if (sub_25B4D18E4(v73, (uint64_t)&v547))
                {
                  long long __p = *(void **)v73;
                  id v579 = *(id *)(v73 + 8);
                  float v85 = sub_25B3FCCE0(&v547, (float32x2_t *)&__p, 0);
                  if (v85 <= *(float *)&dword_26A501CDC || v85 >= (float)(180.0 - *(float *)&dword_26A501CDC))
                  {
                    unint64_t v86 = (unint64_t)v552;
                    float32x2_t v87 = vsub_f32(v548, v547);
                    float v88 = vaddv_f32(vmul_f32(vsub_f32(v552, v547), v87));
                    float v89 = vaddv_f32(vmul_f32(v87, v87));
                    if (v89 < 0.000001) {
                      float v89 = 0.000001;
                    }
                    float32x2_t v90 = vmla_n_f32(v547, v87, v88 / v89);
                    if (vaddv_f32(vmul_f32(vsub_f32(v90, v547), vsub_f32(v90, v548))) <= 0.00001)
                    {
                      unint64_t v91 = (unint64_t)v553;
                      float32x2_t v92 = vmla_n_f32(v547, v87, vaddv_f32(vmul_f32(vsub_f32(v553, v547), v87)) / v89);
                      if (vaddv_f32(vmul_f32(vsub_f32(v92, v547), vsub_f32(v92, v548))) <= 0.00001)
                      {
                        sub_25B4D4E4C((uint64_t)&__p, &v552, &v547, flt_26A501CC8);
                        if (__p >= 3)
                        {
                          sub_25B4D021C((char **)v566, v59, v25);
                          float32x2_t v94 = (uint64_t *)v566[1];
                          int32x2_t v95 = (uint64_t *)v566[0];
                          if (v566[1] != v566[0]
                            && (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v566[1] - (char *)v566[0]) >> 4)) <= 2)
                          {
                            do
                            {
                              float32x2_t v96 = objc_msgSend_objectAtIndexedSubscript_(v25, v93, *v95);
                              float v99 = objc_msgSend_identifier(v96, v97, v98);
                              objc_msgSend_UUIDString(v99, v100, v101);
                              id v102 = objc_claimAutoreleasedReturnValue();
                              int32x2_t v105 = (char *)objc_msgSend_UTF8String(v102, v103, v104);
                              sub_25B403500(&v549, v105);

                              sub_25B4D1CEC((uint64_t)v562, (unsigned __int8 *)&v549, (uint64_t)&v549);
                              if (SHIBYTE(v551) < 0) {
                                operator delete(v549);
                              }
                              v95 += 14;
                            }
                            while (v95 != v94);
                          }
                          sub_25B4D1CEC((uint64_t)v562, (unsigned __int8 *)v570, (uint64_t)v570);
                          sub_25B4D1CEC((uint64_t)&v558, (unsigned __int8 *)v574, (uint64_t)v574);
                          float v549 = 0;
                          unint64_t v550 = 0;
                          uint64_t v551 = 0;
                          uint64_t v544 = 0;
                          float32x2_t v545 = 0;
                          uint64_t v546 = 0;
                          sub_25B4D5C54(&v547, &v549, &v544, v90, v92, 0.1);
                          v543[0] = v86;
                          v543[1] = (unint64_t)v90;
                          v542[0] = v91;
                          v542[1] = (unint64_t)v92;
                          int32x2_t v106 = v549;
                          if (v549 != v550)
                          {
                            float32x2_t v107 = sub_25B4D259C((unint64_t *)v549, v543, v542, (unint64_t *)&v552, (unint64_t *)&v554, v75, v58, v53);
                            objc_msgSend_addObject_(v511, v108, (uint64_t)v107);
                          }
                          if (v544) {
                            operator delete(v544);
                          }
                          if (v106) {
                            operator delete(v106);
                          }
                          float v549 = v566;
                          sub_25B4CC5FC((void ***)&v549);
                        }
                        if (v585)
                        {
                          float v586 = v585;
                          operator delete(v585);
                        }
                        if (v583)
                        {
                          float32x4_t v584 = v583;
                          operator delete(v583);
                        }
                      }
                    }
                  }
                }
              }

              ++v72;
            }
            if (SBYTE7(v571) < 0) {
              operator delete(v570[0]);
            }
            if (SBYTE7(v575) < 0) {
              operator delete(v574[0]);
            }

            unint64_t v34 = obj;
          }

          ++v34;
        }
        while (v514 > v34);
      }
      objc_msgSend_array(MEMORY[0x263EFF980], v32, v33);
      id v109 = (id)objc_claimAutoreleasedReturnValue();
      long long v572 = 0u;
      long long v573 = 0u;
      *(_OWORD *)uint64_t v570 = 0u;
      long long v571 = 0u;
      id v110 = v25;
      uint64_t v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v110, v111, (uint64_t)v570, &__p, 16);
      if (v114)
      {
        uint64_t v115 = *(void *)v571;
        do
        {
          for (uint64_t i = 0; i != v114; ++i)
          {
            if (*(void *)v571 != v115) {
              objc_enumerationMutation(v110);
            }
            uint64_t v117 = (void *)*((void *)v570[1] + i);
            __n128 v118 = objc_msgSend_identifier(v117, v112, v113);
            objc_msgSend_UUIDString(v118, v119, v120);
            id v121 = objc_claimAutoreleasedReturnValue();
            uint64_t v124 = (char *)objc_msgSend_UTF8String(v121, v122, v123);
            sub_25B403500(v574, v124);

            if (!sub_25B414548(v562, (unsigned __int8 *)v574)) {
              objc_msgSend_addObject_(v109, v112, (uint64_t)v117);
            }
            if (SBYTE7(v575) < 0) {
              operator delete(v574[0]);
            }
          }
          uint64_t v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v110, v112, (uint64_t)v570, &__p, 16);
        }
        while (v114);
      }

      objc_msgSend_array(MEMORY[0x263EFF980], v125, v126);
      id v127 = (id)objc_claimAutoreleasedReturnValue();
      long long v568 = 0u;
      long long v569 = 0u;
      *(_OWORD *)__float2 v566 = 0u;
      long long v567 = 0u;
      id v128 = v520;
      uint64_t v132 = objc_msgSend_countByEnumeratingWithState_objects_count_(v128, v129, (uint64_t)v566, v574, 16);
      if (v132)
      {
        uint64_t v133 = *(void *)v567;
        do
        {
          for (uint64_t j = 0; j != v132; ++j)
          {
            if (*(void *)v567 != v133) {
              objc_enumerationMutation(v128);
            }
            uint64_t v135 = (void *)*((void *)v566[1] + j);
            uint64_t v136 = objc_msgSend_identifier(v135, v130, v131);
            objc_msgSend_UUIDString(v136, v137, v138);
            id v139 = objc_claimAutoreleasedReturnValue();
            uint64_t v142 = (char *)objc_msgSend_UTF8String(v139, v140, v141);
            sub_25B403500(&v549, v142);

            if (!sub_25B414548(&v558, (unsigned __int8 *)&v549)) {
              objc_msgSend_addObject_(v127, v130, (uint64_t)v135);
            }
            if (SHIBYTE(v551) < 0) {
              operator delete(v549);
            }
          }
          uint64_t v132 = objc_msgSend_countByEnumeratingWithState_objects_count_(v128, v130, (uint64_t)v566, v574, 16);
        }
        while (v132);
      }

      sub_25B414644((uint64_t)&v558);
      sub_25B414644((uint64_t)v562);
      unint64_t v143 = v520;
    }
    else
    {
      id v109 = v25;
      unint64_t v143 = v520;
      id v127 = v520;
    }

    uint64_t v144 = v536;
    id v536 = v109;

    unint64_t v145 = v537;
    uint64_t v537 = v127;

    objc_msgSend_addObjectsFromArray_(v532[1], v146, (uint64_t)v511);
    double v147 = v537;
    uint64_t v148 = v536;
    id v149 = v147;
    *(_OWORD *)uint64_t v570 = 0u;
    long long v571 = 0u;
    LODWORD(v572) = 1065353216;
    long long v516 = objc_msgSend_array(MEMORY[0x263EFF980], v150, v151);
    uint64_t v154 = 0;
    unint64_t v155 = 0;
    float v156 = 0.25;
    while (objc_msgSend_count(v149, v152, v153) > v155)
    {
      objc_msgSend_objectAtIndexedSubscript_(v149, v157, v155);
      uint64_t v159 = (float *)objc_claimAutoreleasedReturnValue();
      sub_25B4CFA98(v574, v159, v148);
      if (LOBYTE(v574[1]))
      {
        uint64_t v160 = v574[0];
        unint64_t v161 = sub_25B477C40(v574[0]).n128_u64[0];
        if (v159)
        {
          float32x2_t v163 = (float32x2_t)v161;
          float v164 = v159[32];
          if (v164 > v156)
          {
            float32x2_t v165 = v162;
            if (v164 < 0.8)
            {
              float32x2_t v166 = (float32x2_t)sub_25B477C40(v159).n128_u64[0];
              float32x2_t v168 = v167;
              uint64_t v171 = objc_msgSend_identifier(v159, v169, v170);
              objc_msgSend_UUIDString(v171, v172, v173);
              id v174 = objc_claimAutoreleasedReturnValue();
              unint64_t v177 = (char *)objc_msgSend_UTF8String(v174, v175, v176);
              sub_25B403500(&__p, v177);

              unint64_t v178 = sub_25B414548(v540, (unsigned __int8 *)&__p);
              if (!v178 || (v179.i32[0] = *((_DWORD *)v178 + 11), v179.f32[0] <= 0.0))
              {
                float32x2_t v181 = vsub_f32(v166, v168);
                float32x2_t v179 = vmul_f32(v181, v181);
                v179.f32[0] = sqrtf(vaddv_f32(v179)) * 0.5;
              }
              float32x2_t v521 = v166;
              id obja = (id)v168;
              float32x2_t v182 = *(float32x2_t *)((char *)v534 + v154 + 32);
              v180.f32[0] = v159[32];
              float32x2_t v183 = vmls_lane_f32(vmul_f32(vadd_f32(v166, v168), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)((char *)v534 + v154 + 40), v180, 0);
              uint64_t v184 = (void *)vmla_n_f32(v183, v182, v179.f32[0]);
              float32x2_t v185 = vmls_lane_f32(v183, v182, v179, 0);
              float32x2_t v186 = vsub_f32(v165, v163);
              float v187 = vaddv_f32(vmul_f32(v186, v186));
              if (v187 >= 0.000001) {
                float v188 = v187;
              }
              else {
                float v188 = 0.000001;
              }
              float32x2_t v189 = vsub_f32(v185, (float32x2_t)v184);
              float v190 = vaddv_f32(vmul_f32(v189, v189));
              if (v190 >= 0.000001) {
                float v191 = v190;
              }
              else {
                float v191 = 0.000001;
              }
              sub_25B4D1CEC((uint64_t)v570, (unsigned __int8 *)&__p, (uint64_t)&__p);
              objc_msgSend_quad(v159, v192, v193);
              float v530 = v194;
              objc_msgSend_quad(v159, v195, v196);
              if (v530 >= v199) {
                float v200 = v530;
              }
              else {
                float v200 = v199;
              }
              objc_msgSend_quad(v159, v197, v198);
              float v531 = v201;
              objc_msgSend_quad(v159, v202, v203);
              v566[0] = (void *)vmla_n_f32(v163, v186, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v184, v163), v186)) / v188);
              v566[1] = (void *)vmla_n_f32(v163, v186, vaddv_f32(vmul_f32(vsub_f32(v185, v163), v186)) / v188);
              v562[0] = v566[0];
              v562[1] = v184;
              *(float32x2_t *)&long long v558 = v185;
              *((void **)&v558 + 1) = v566[1];
              float v549 = v184;
              unint64_t v550 = (void *)v185;
              uint64_t v544 = (void *)vmla_n_f32((float32x2_t)v184, v189, vaddv_f32(vmul_f32(vsub_f32(v521, (float32x2_t)v184), v189)) / v191);
              float32x2_t v545 = vmla_n_f32((float32x2_t)v184, v189, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)obja, (float32x2_t)v184), v189)) / v191);
              float v205 = v204;
              if (v204 >= v531) {
                float v205 = v531;
              }
              float v206 = sub_25B4D259C((unint64_t *)v566, (unint64_t *)v562, (unint64_t *)&v558, (unint64_t *)&v549, (unint64_t *)&v544, v160, v205, v200);
              objc_msgSend_addObject_(v516, v207, (uint64_t)v206);
              float v156 = 0.25;

              if (SHIBYTE(v580) < 0) {
                operator delete(__p);
              }
            }
          }
        }
      }
      ++v155;
      v154 += 48;
    }
    float32x2_t v208 = objc_msgSend_array(MEMORY[0x263EFF980], v157, v158);
    long long v576 = 0u;
    long long v577 = 0u;
    *(_OWORD *)uint64_t v574 = 0u;
    long long v575 = 0u;
    id v209 = v149;
    uint64_t v213 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v210, (uint64_t)v574, &__p, 16);
    if (v213)
    {
      uint64_t v214 = *(void *)v575;
      do
      {
        for (uint64_t k = 0; k != v213; ++k)
        {
          if (*(void *)v575 != v214) {
            objc_enumerationMutation(v209);
          }
          uint64_t v216 = (void *)*((void *)v574[1] + k);
          uint64_t v217 = objc_msgSend_identifier(v216, v211, v212);
          objc_msgSend_UUIDString(v217, v218, v219);
          id v220 = objc_claimAutoreleasedReturnValue();
          unint64_t v223 = (char *)objc_msgSend_UTF8String(v220, v221, v222);
          sub_25B403500(v566, v223);

          if (!sub_25B414548(v570, (unsigned __int8 *)v566)) {
            objc_msgSend_addObject_(v208, v211, (uint64_t)v216);
          }
          if (SBYTE7(v567) < 0) {
            operator delete(v566[0]);
          }
        }
        uint64_t v213 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v211, (uint64_t)v574, &__p, 16);
      }
      while (v213);
    }

    sub_25B414644((uint64_t)v570);
    unint64_t v224 = v537;
    uint64_t v537 = v208;

    objc_msgSend_addObjectsFromArray_(v532[1], v225, (uint64_t)v516);
    uint64_t v227 = v536;
    unint64_t v226 = v537;
    unint64_t v230 = objc_msgSend_openings(v510, v228, v229);
    unint64_t v233 = objc_msgSend_doors(v510, v231, v232);
    double v236 = objc_msgSend_opendoors(v510, v234, v235);
    id v517 = v227;
    id objb = v226;
    id v522 = v230;
    id v509 = v233;
    id v512 = v236;
    double v237 = v532;
    if (!objc_msgSend_count(v532[2], v238, v239))
    {
      uint64_t v444 = objc_msgSend_mutableCopy(v532[1], v240, v241);
      uint64_t v445 = v532[2];
      v532[2] = (void *)v444;

      id v446 = v517;
      id v427 = objb;
      goto LABEL_254;
    }
    int v507 = objc_msgSend_array(MEMORY[0x263EFF980], v240, v241);
    objc_msgSend_addObjectsFromArray_(v507, v242, (uint64_t)v509);
    objc_msgSend_addObjectsFromArray_(v507, v243, (uint64_t)v512);
    *(_OWORD *)uint64_t v570 = 0u;
    long long v571 = 0u;
    LODWORD(v572) = 1065353216;
    *(_OWORD *)__float2 v566 = 0u;
    long long v567 = 0u;
    LODWORD(v568) = 1065353216;
    unint64_t v244 = 0;
    float v528 = v532 + 18;
    id v505 = v517;
    unsigned int v506 = v505;
LABEL_112:
    if (objc_msgSend_count(v237[2], v245, v246, v498) > v244)
    {
      if (sub_25B4CC2F8(v528, v244)) {
        goto LABEL_152;
      }
      float v251 = objc_msgSend_objectAtIndexedSubscript_(v237[2], v245, v244);
      unint64_t v252 = 0;
      unint64_t v253 = 0;
      uint64_t v254 = 0;
      for (unint64_t m = 0; ; ++m)
      {
        if (objc_msgSend_count(v532[1], v249, v250) <= m)
        {
          if ((char *)v253 - (char *)v254 == 8)
          {
            uint64_t v272 = objc_msgSend_objectAtIndexedSubscript_(v532[1], v256, *v254);
            sub_25B4D2A50(v272);

            unint64_t v274 = objc_msgSend_objectAtIndexedSubscript_(v532[1], v273, *v254);
            sub_25B4D2C68(v251, v274);

            goto LABEL_149;
          }
          if (v254 != (uint64_t *)v253)
          {
LABEL_149:
            if (v254) {
              goto LABEL_150;
            }
            goto LABEL_151;
          }
          if (v251) {
            unint64_t v275 = (void *)v251[3];
          }
          else {
            unint64_t v275 = 0;
          }
          id v276 = v275;
          sub_25B4D2F14((char **)v574, v276, objb);

          if (v251) {
            long long v277 = (void *)v251[3];
          }
          else {
            long long v277 = 0;
          }
          id v278 = v277;
          sub_25B4D2F14((char **)v562, v278, v522);

          if (v251) {
            uint64_t v279 = (void *)v251[3];
          }
          else {
            uint64_t v279 = 0;
          }
          id v280 = v279;
          sub_25B4D2F14((char **)&v558, v280, v507);

          if ((void *)((char *)v574[1] - (char *)v574[0]) != (void *)112)
          {
            if (v562[0] != v562[1] || (void)v558 != *((void *)&v558 + 1)) {
              goto LABEL_202;
            }
            if (v251) {
              uint64_t v344 = (void *)v251[3];
            }
            else {
              uint64_t v344 = 0;
            }
            id v345 = v344;
            sub_25B4CFA98(&v544, v345, v506);

            if (v545.i8[0])
            {
              unint64_t v346 = v544;
              float32x2_t v347 = (float32x2_t)sub_25B477C40(v544).n128_u64[0];
              float32x2_t v349 = v348;
              if (v251) {
                uint64_t v350 = (void *)v251[1];
              }
              else {
                uint64_t v350 = 0;
              }
              id v351 = v350;
              long long v354 = objc_msgSend_lastObject(v351, v352, v353);
              float32x2_t v501 = v349;
              float32x2_t v355 = (float32x2_t)sub_25B477C40(v354).n128_u64[0];
              float32x2_t v357 = v356;

              float32x2_t v358 = vsub_f32(v349, v347);
              float v359 = vaddv_f32(vmul_f32(v358, v358));
              if (v359 >= 0.000001) {
                float v360 = v359;
              }
              else {
                float v360 = 0.000001;
              }
              if (v251) {
                uint64_t v361 = (void *)v251[1];
              }
              else {
                uint64_t v361 = 0;
              }
              id v362 = v361;
              uint64_t v364 = objc_msgSend_objectAtIndexedSubscript_(v362, v363, 0);
              float32x2_t v365 = (float32x2_t)sub_25B477C40(v364).n128_u64[0];
              float32x2_t v367 = v366;

              if (v251) {
                long long v368 = (void *)v251[2];
              }
              else {
                long long v368 = 0;
              }
              id v369 = v368;
              __n128 v371 = objc_msgSend_objectAtIndexedSubscript_(v369, v370, 0);
              float32x2_t v499 = (float32x2_t)sub_25B477C40(v371).n128_u64[0];
              float32x2_t v500 = v372;

              uint64_t v373 = (void *)vmla_n_f32(v347, v358, vaddv_f32(vmul_f32(vsub_f32(v355, v347), v358)) / v360);
              long long v374 = (void *)vmla_n_f32(v347, v358, vaddv_f32(vmul_f32(vsub_f32(v357, v347), v358)) / v360);
              float32x2_t v375 = vsub_f32(v355, (float32x2_t)v373);
              int32x2_t v376 = (int32x2_t)vmul_f32(v375, v375);
              v376.i32[0] = vadd_f32((float32x2_t)v376, (float32x2_t)vdup_lane_s32(v376, 1)).u32[0];
              float32x2_t v377 = vrsqrte_f32((float32x2_t)v376.u32[0]);
              float32x2_t v378 = vmul_f32(v377, vrsqrts_f32((float32x2_t)v376.u32[0], vmul_f32(v377, v377)));
              float32x2_t v379 = vmul_n_f32(v375, vmul_f32(v378, vrsqrts_f32((float32x2_t)v376.u32[0], vmul_f32(v378, v378))).f32[0]);
              float32x2_t v380 = vsub_f32(v365, v367);
              v380.f32[0] = sqrtf(vaddv_f32(vmul_f32(v380, v380)));
              float32x2_t v381 = vmla_n_f32((float32x2_t)v373, v379, v380.f32[0]);
              long long v382 = (void *)vmla_n_f32((float32x2_t)v374, v379, v380.f32[0]);
              float32x2_t v383 = vsub_f32((float32x2_t)v382, v381);
              float v384 = vaddv_f32(vmul_f32(v383, v383));
              if (v384 >= 0.000001) {
                float v385 = v384;
              }
              else {
                float v385 = 0.000001;
              }
              if (vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v373, v347), vsub_f32((float32x2_t)v373, v501))) > 0.00001
                || vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v374, v347), vsub_f32((float32x2_t)v374, v501))) > 0.00001)
              {
                uint64_t v386 = v505;
                goto LABEL_198;
              }
              if (v251) {
                __n128 v387 = (void *)v251[2];
              }
              else {
                __n128 v387 = 0;
              }
              id v388 = v387;
              float32x4_t v390 = objc_msgSend_objectAtIndexedSubscript_(v388, v389, 0);
              objc_msgSend_quad(v390, v391, v392);
              float v504 = v393;

              if (v251) {
                long long v394 = (void *)v251[2];
              }
              else {
                long long v394 = 0;
              }
              id v395 = v394;
              __n128 v397 = objc_msgSend_objectAtIndexedSubscript_(v395, v396, 0);
              objc_msgSend_quad(v397, v398, v399);
              long long v498 = v400;

              long long __p = v373;
              id v579 = v374;
              float v549 = v373;
              unint64_t v550 = (void *)v381;
              uint64_t v556 = v382;
              float32x2_t v557 = (float32x2_t)v374;
              float32x2_t v554 = v381;
              float32x2_t v555 = (float32x2_t)v382;
              float32x2_t v552 = vmla_n_f32(v381, v383, vaddv_f32(vmul_f32(vsub_f32(v499, v381), v383)) / v385);
              float32x2_t v553 = vmla_n_f32(v381, v383, vaddv_f32(vmul_f32(vsub_f32(v500, v381), v383)) / v385);
              uint64_t v401 = sub_25B4D259C((unint64_t *)&__p, (unint64_t *)&v549, (unint64_t *)&v556, (unint64_t *)&v554, (unint64_t *)&v552, v346, *((float *)&v498 + 2), v504);
              uint64_t v404 = objc_msgSend_array(MEMORY[0x263EFF980], v402, v403);
              if (v401) {
                uint64_t v405 = (void *)v401[3];
              }
              else {
                uint64_t v405 = 0;
              }
              id v406 = v405;
              objc_msgSend_addObject_(v404, v407, (uint64_t)v406);

              sub_25B403500(&__p, "outer");
              sub_25B4CFDDC((float32x2_t **)&v549, v506, v404);
              if (SHIBYTE(v580) < 0) {
                operator delete(__p);
              }
              sub_25B4D0858(&__p, v506, v404, &v549);
              uint64_t v386 = __p;

              sub_25B4D2A50(v401);
              sub_25B4D2C68(v251, v401);
              objc_msgSend_addObject_(v532[1], v408, (uint64_t)v401);
              uint64_t v411 = objc_msgSend_count(v532[1], v409, v410);
              sub_25B4CC3A8((uint64_t)v570, v411, v411);
              sub_25B414644((uint64_t)&v582);
              if (v580)
              {
                float32x2_t v581 = v580;
                operator delete(v580);
              }

              if (v549) {
                operator delete(v549);
              }

              if (v545.i8[0]) {
LABEL_198:
              }
            }
            else
            {
              uint64_t v386 = v505;
            }
            id v505 = v386;
            goto LABEL_202;
          }
          uint64_t v282 = objc_msgSend_objectAtIndexedSubscript_(objb, v281, *(int *)v574[0]);
          sub_25B4CFA98(&v549, v282, v506);
          if ((_BYTE)v550)
          {
            sub_25B403500(&__p, "outer");
            float32x2_t v283 = (float32x2_t)sub_25B4CFBE8(v282, &v549).n128_u64[0];
            float32x2_t v285 = v284;
            if (SHIBYTE(v580) < 0) {
              operator delete(__p);
            }
            uint64_t v286 = (void *)sub_25B477C40(v282).n128_u64[0];
            float32x2_t v288 = v287;
            uint64_t v544 = v286;
            float32x2_t v545 = v287;
            if (v251) {
              uint64_t v289 = (void *)v251[1];
            }
            else {
              uint64_t v289 = 0;
            }
            id v290 = v289;
            uint64_t v292 = objc_msgSend_objectAtIndexedSubscript_(v290, v291, 0);
            float32x2_t v293 = (float32x2_t)sub_25B477C40(v292).n128_u64[0];
            float32x2_t v295 = v294;

            if (v251) {
              uint64_t v296 = (void *)v251[1];
            }
            else {
              uint64_t v296 = 0;
            }
            id v297 = v296;
            float v299 = objc_msgSend_objectAtIndexedSubscript_(v297, v298, 1);
            float32x2_t v300 = (float32x2_t)sub_25B477C40(v299).n128_u64[0];
            float32x2_t v302 = v301;

            float32x2_t v305 = vsub_f32((float32x2_t)v286, v288);
            float32x2_t v306 = vmul_f32(v305, v305);
            v306.f32[0] = sqrtf(vaddv_f32(v306)) * 0.5;
            float32x2_t v307 = vsub_f32(v293, v295);
            int32x2_t v308 = (int32x2_t)vmul_f32(v307, v307);
            float32x2_t v309 = vsub_f32(v300, v302);
            int32x2_t v310 = (int32x2_t)vmul_f32(v309, v309);
            float32x2_t v311 = vmla_n_f32(vmul_f32(vadd_f32((float32x2_t)v286, v288), (float32x2_t)0x3F0000003F000000), v285, vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v308, v310), (float32x2_t)vzip2_s32(v308, v310))))* 0.5);
            uint64_t v312 = (void *)vmla_n_f32(v311, v283, v306.f32[0]);
            float32x2_t v313 = vmls_lane_f32(v311, v283, v306, 0);
            uint64_t v556 = v312;
            float32x2_t v557 = v313;
            float32x2_t v314 = vsub_f32(v313, (float32x2_t)v312);
            float v315 = vaddv_f32(vmul_f32(v314, v314));
            if (v315 >= 0.000001) {
              float v316 = v315;
            }
            else {
              float v316 = 0.000001;
            }
            objc_msgSend_quad(v282, v303, v304);
            float v502 = v317;
            objc_msgSend_quad(v282, v318, v319);
            if (v502 >= v322) {
              float v323 = v502;
            }
            else {
              float v323 = v322;
            }
            objc_msgSend_quad(v282, v320, v321);
            float v503 = v324;
            objc_msgSend_quad(v282, v325, v326);
            long long __p = v286;
            id v579 = v312;
            float32x2_t v554 = v313;
            float32x2_t v555 = v288;
            float32x2_t v552 = vmla_n_f32((float32x2_t)v312, v314, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v286, (float32x2_t)v312), v314)) / v316);
            float32x2_t v553 = vmla_n_f32((float32x2_t)v312, v314, vaddv_f32(vmul_f32(vsub_f32(v288, (float32x2_t)v312), v314)) / v316);
            float v328 = v327;
            if (v327 >= v503) {
              float v328 = v503;
            }
            unint64_t v329 = v549;
            unint64_t v330 = sub_25B4D259C((unint64_t *)&v544, (unint64_t *)&__p, (unint64_t *)&v554, (unint64_t *)&v556, (unint64_t *)&v552, v549, v328, v323);
            sub_25B4D2A50(v330);
            sub_25B4D2C68(v251, v330);
            objc_msgSend_addObject_(v532[1], v331, (uint64_t)v330);
            uint64_t v334 = objc_msgSend_identifier(v282, v332, v333);
            objc_msgSend_UUIDString(v334, v335, v336);
            id v337 = objc_claimAutoreleasedReturnValue();
            uint64_t v340 = (char *)objc_msgSend_UTF8String(v337, v338, v339);
            sub_25B403500(&__p, v340);
            sub_25B414308((uint64_t)v566, (unsigned __int8 *)&__p, (uint64_t)&__p);
            if (SHIBYTE(v580) < 0) {
              operator delete(__p);
            }

            uint64_t v343 = objc_msgSend_count(v532[1], v341, v342);
            sub_25B4CC3A8((uint64_t)v570, v343, v343);
          }
          else
          {
          }
LABEL_202:
          long long __p = &v558;
          sub_25B4CC5FC((void ***)&__p);
          long long __p = v562;
          sub_25B4CC5FC((void ***)&__p);
          long long __p = v574;
          sub_25B4CC5FC((void ***)&__p);
          if (v254) {
LABEL_150:
          }
            operator delete(v254);
LABEL_151:

          double v237 = v532;
LABEL_152:
          ++v244;
          goto LABEL_112;
        }
        uint64_t v257 = objc_msgSend_objectAtIndexedSubscript_(v532[1], v256, m);
        float32x2_t v258 = (void *)v257;
        if (v257) {
          int32x2_t v259 = *(void **)(v257 + 24);
        }
        else {
          int32x2_t v259 = 0;
        }
        id v260 = v259;
        v574[0] = (void *)sub_25B477C40(v260).n128_u64[0];
        v574[1] = v261;

        if (v251) {
          float v262 = (void *)v251[3];
        }
        else {
          float v262 = 0;
        }
        id v263 = v262;
        v562[0] = (void *)sub_25B477C40(v263).n128_u64[0];
        v562[1] = v264;

        sub_25B4D4E4C((uint64_t)&__p, (float32x2_t *)v574, (float32x2_t *)v562, (float *)v532 + 6);
        if (!BYTE4(v579)) {
          goto LABEL_123;
        }
        if ((unint64_t)v253 < v252) {
          break;
        }
        uint64_t v266 = ((char *)v253 - (char *)v254) >> 3;
        unint64_t v267 = v266 + 1;
        if ((unint64_t)(v266 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v252 - (void)v254) >> 2 > v267) {
          unint64_t v267 = (uint64_t)(v252 - (void)v254) >> 2;
        }
        if (v252 - (unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v268 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v268 = v267;
        }
        if (v268) {
          unint64_t v268 = (unint64_t)sub_25B3FCAD4(v268);
        }
        else {
          uint64_t v269 = 0;
        }
        float32x2_t v270 = (uint64_t *)(v268 + 8 * v266);
        *float32x2_t v270 = m;
        unint64_t v265 = (unint64_t *)(v270 + 1);
        while (v253 != (unint64_t *)v254)
        {
          uint64_t v271 = *--v253;
          *--float32x2_t v270 = v271;
        }
        unint64_t v252 = v268 + 8 * v269;
        if (v254) {
          operator delete(v254);
        }
        uint64_t v254 = v270;
LABEL_139:
        if (v585)
        {
          float v586 = v585;
          operator delete(v585);
        }
        if (v583)
        {
          float32x4_t v584 = v583;
          operator delete(v583);
        }

        unint64_t v253 = v265;
      }
      *v253++ = m;
LABEL_123:
      unint64_t v265 = v253;
      goto LABEL_139;
    }
    uint64_t v412 = objc_msgSend_mutableCopy(v237[1], v247, v248);
    uint64_t v413 = v237[2];
    v237[2] = (void *)v412;

    if (v528 != v570)
    {
      *((_DWORD *)v532 + 44) = v572;
      unint64_t v416 = (void *)v571;
      unint64_t v417 = (char *)v532[19];
      if (!v417) {
        goto LABEL_237;
      }
      for (unint64_t n = 0; n != v417; ++n)
        *((void *)*v528 + (void)n) = 0;
      uint64_t v419 = v532[20];
      v532[20] = 0;
      v532[21] = 0;
      if (v419)
      {
        while (v416)
        {
          unint64_t v420 = v416[2];
          v419[2] = v420;
          size_t v421 = (void *)*v419;
          v419[1] = v420;
          char v422 = sub_25B4CC680((uint64_t)v528, v420, v419 + 2);
          sub_25B46F674(v528, v419, v422);
          unint64_t v416 = (void *)*v416;
          uint64_t v419 = v421;
          if (!v421) {
            goto LABEL_237;
          }
        }
        do
        {
          uint64_t v426 = (void *)*v419;
          operator delete(v419);
          uint64_t v419 = v426;
        }
        while (v426);
      }
      else
      {
LABEL_237:
        while (v416)
        {
          uint64_t v423 = operator new(0x18uLL);
          *uint64_t v423 = 0;
          unint64_t v424 = v416[2];
          v423[2] = v424;
          v423[1] = v424;
          unint64_t v425 = sub_25B4CC680((uint64_t)v528, v424, v423 + 2);
          sub_25B46F674(v528, v423, v425);
          unint64_t v416 = (void *)*v416;
        }
      }
    }
    objc_msgSend_array(MEMORY[0x263EFF980], v414, v415);
    id v427 = (id)objc_claimAutoreleasedReturnValue();
    long long v576 = 0u;
    long long v577 = 0u;
    *(_OWORD *)uint64_t v574 = 0u;
    long long v575 = 0u;
    id v428 = objb;
    uint64_t v432 = objc_msgSend_countByEnumeratingWithState_objects_count_(v428, v429, (uint64_t)v574, &__p, 16);
    if (v432)
    {
      uint64_t v433 = *(void *)v575;
      do
      {
        for (iuint64_t i = 0; ii != v432; ++ii)
        {
          if (*(void *)v575 != v433) {
            objc_enumerationMutation(v428);
          }
          uint8x8_t v435 = (void *)*((void *)v574[1] + ii);
          std::string::size_type v436 = objc_msgSend_identifier(v435, v430, v431);
          objc_msgSend_UUIDString(v436, v437, v438);
          id v439 = objc_claimAutoreleasedReturnValue();
          uint64_t v442 = (char *)objc_msgSend_UTF8String(v439, v440, v441);
          sub_25B403500(v562, v442);

          if (!sub_25B414548(v566, (unsigned __int8 *)v562)) {
            objc_msgSend_addObject_(v427, v430, (uint64_t)v435);
          }
          if (SBYTE7(v563) < 0) {
            operator delete(v562[0]);
          }
        }
        uint64_t v432 = objc_msgSend_countByEnumeratingWithState_objects_count_(v428, v430, (uint64_t)v574, &__p, 16);
      }
      while (v432);
    }

    id v443 = v506;
    sub_25B414644((uint64_t)v566);
    sub_25B3FB178((uint64_t)v570);

LABEL_254:
    size_t v447 = v536;
    id v536 = v517;

    unint64_t v448 = v537;
    uint64_t v537 = v427;

    sub_25B4E664C((uint64_t)v510, v536);
    sub_25B4E665C((uint64_t)v510, v537);
    uint64_t v449 = v532[1];
    id v533 = v510;
    id v450 = v449;
    long long v558 = 0u;
    long long v559 = 0u;
    long long v560 = 0u;
    long long v561 = 0u;
    id objc = v450;
    uint64_t v452 = objc_msgSend_countByEnumeratingWithState_objects_count_(objc, v451, (uint64_t)&v558, v570, 16);
    if (v452)
    {
      uint64_t v529 = *(void *)v559;
      do
      {
        uint64_t v453 = 0;
        do
        {
          if (*(void *)v559 != v529) {
            objc_enumerationMutation(objc);
          }
          int v454 = *(void **)(*((void *)&v558 + 1) + 8 * v453);
          id v455 = v533;
          uint64_t v456 = v454;
          uint64_t v459 = objc_msgSend_array(MEMORY[0x263EFF980], v457, v458);
          float v462 = objc_msgSend_walls(v455, v460, v461);
          objc_msgSend_addObjectsFromArray_(v459, v463, (uint64_t)v462);

          long long v568 = 0u;
          long long v569 = 0u;
          *(_OWORD *)__float2 v566 = 0u;
          long long v567 = 0u;
          if (v456) {
            float v464 = (void *)v456[1];
          }
          else {
            float v464 = 0;
          }
          id v465 = v464;
          uint64_t v468 = objc_msgSend_countByEnumeratingWithState_objects_count_(v465, v466, (uint64_t)v566, &__p, 16);
          if (v468)
          {
            uint64_t v469 = *(void *)v567;
            do
            {
              for (juint64_t j = 0; jj != v468; ++jj)
              {
                if (*(void *)v567 != v469) {
                  objc_enumerationMutation(v465);
                }
                objc_msgSend_addObject_(v459, v467, *((void *)v566[1] + jj));
              }
              uint64_t v468 = objc_msgSend_countByEnumeratingWithState_objects_count_(v465, v467, (uint64_t)v566, &__p, 16);
            }
            while (v468);
          }

          sub_25B4E664C((uint64_t)v455, v459);
          __int32 v473 = objc_msgSend_array(MEMORY[0x263EFF980], v471, v472);
          uint64_t v476 = objc_msgSend_windows(v455, v474, v475);
          objc_msgSend_addObjectsFromArray_(v473, v477, (uint64_t)v476);

          long long v564 = 0u;
          long long v565 = 0u;
          *(_OWORD *)float v562 = 0u;
          long long v563 = 0u;
          if (v456) {
            id v478 = (void *)v456[2];
          }
          else {
            id v478 = 0;
          }
          id v479 = v478;
          uint64_t v482 = objc_msgSend_countByEnumeratingWithState_objects_count_(v479, v480, (uint64_t)v562, v574, 16);
          if (v482)
          {
            uint64_t v483 = *(void *)v563;
            do
            {
              for (kuint64_t k = 0; kk != v482; ++kk)
              {
                if (*(void *)v563 != v483) {
                  objc_enumerationMutation(v479);
                }
                objc_msgSend_addObject_(v473, v481, *((void *)v562[1] + kk));
              }
              uint64_t v482 = objc_msgSend_countByEnumeratingWithState_objects_count_(v479, v481, (uint64_t)v562, v574, 16);
            }
            while (v482);
          }

          sub_25B4E665C((uint64_t)v455, v473);
          float v487 = objc_msgSend_array(MEMORY[0x263EFF980], v485, v486);
          __int32 v490 = objc_msgSend_openings(v455, v488, v489);
          objc_msgSend_addObjectsFromArray_(v487, v491, (uint64_t)v490);

          if (v456) {
            unint64_t v492 = (void *)v456[3];
          }
          else {
            unint64_t v492 = 0;
          }
          id v493 = v492;
          objc_msgSend_addObject_(v487, v494, (uint64_t)v493);

          sub_25B4E666C((uint64_t)v455, v487);
          ++v453;
        }
        while (v453 != v452);
        uint64_t v496 = objc_msgSend_countByEnumeratingWithState_objects_count_(objc, v495, (uint64_t)&v558, v570, 16);
        uint64_t v452 = v496;
      }
      while (v496);
    }

    if (v534) {
      operator delete(v534);
    }
    sub_25B414644((uint64_t)v540);
    if (v538)
    {
      int v539 = v538;
      operator delete(v538);
    }

    if (v541[0]) {
      operator delete(v541[0]);
    }
  }
  else
  {
    id v533 = 0;
  }

  return v533;
}

void sub_25B4CE8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  STACK[0x3B0] = (unint64_t)&a71;
  sub_25B4CC5FC((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x230];
  sub_25B4CC5FC((void ***)&STACK[0x3B0]);
  STACK[0x3B0] = (unint64_t)&STACK[0x330];
  sub_25B4CC5FC((void ***)&STACK[0x3B0]);
  if (v71) {
    operator delete(v71);
  }

  JUMPOUT(0x25B4CF054);
}

void sub_25B4CEBC8()
{
  JUMPOUT(0x25B4CEBC0);
}

void sub_25B4CEBD4()
{
  JUMPOUT(0x25B4CEBB0);
}

void sub_25B4CEBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a62) {
    operator delete(a62);
  }
  a62 = &STACK[0x270];
  sub_25B4CC5FC((void ***)&a62);
  sub_25B4900CC(&STACK[0x3B0]);

  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }

  JUMPOUT(0x25B4CF008);
}

void sub_25B4CEC28()
{
}

void sub_25B4CEC30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_25B4CEC5C()
{
}

void sub_25B4CEC68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_25B3F61B8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_25B4CEC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,void *a32)
{
  if (v34) {
    operator delete(v34);
  }

  sub_25B414644((uint64_t)&STACK[0x270]);
  sub_25B3FB178((uint64_t)&STACK[0x2B0]);

  JUMPOUT(0x25B4CF134);
}

void sub_25B4CEC84()
{
  if (v2) {
    operator delete(v2);
  }

  JUMPOUT(0x25B4CF054);
}

void sub_25B4CEC98()
{
  JUMPOUT(0x25B4CEEC4);
}

void sub_25B4CECA0()
{
}

void sub_25B4CECD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,void *a32)
{
  operator delete(v32);

  sub_25B414644((uint64_t)&STACK[0x270]);
  sub_25B3FB178((uint64_t)&STACK[0x2B0]);

  JUMPOUT(0x25B4CF134);
}

void sub_25B4CED00()
{
}

void sub_25B4CED08()
{
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }

  JUMPOUT(0x25B4CF0CCLL);
}

void sub_25B4CED50()
{
  JUMPOUT(0x25B4CED58);
}

void sub_25B4CED60()
{
  JUMPOUT(0x25B4CED68);
}

void sub_25B4CED74()
{
  JUMPOUT(0x25B4CED7CLL);
}

void sub_25B4CED90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  sub_25B414644((uint64_t)&STACK[0x270]);
  sub_25B3FB178((uint64_t)&STACK[0x2B0]);

  if (__p) {
    operator delete(__p);
  }
  sub_25B4CC5B0((uint64_t)&a40);
  if (a50) {
    operator delete(a50);
  }

  _Unwind_Resume(a1);
}

void sub_25B4CEDA8()
{
}

void sub_25B4CEDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,unint64_t *a62)
{
  a62 = &STACK[0x270];
  sub_25B4CC5FC(&a62);
  sub_25B4900CC(&STACK[0x3B0]);
  JUMPOUT(0x25B4CEEA4);
}

void sub_25B4CEDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,unint64_t *a62,uint64_t a63)
{
  if (a67 < 0) {
    JUMPOUT(0x25B4CEDCCLL);
  }
  a62 = &STACK[0x270];
  sub_25B4CC5FC(&a62);
  sub_25B4900CC(&STACK[0x3B0]);
  JUMPOUT(0x25B4CEEA4);
}

void sub_25B4CEDD4()
{
  JUMPOUT(0x25B4CEE0CLL);
}

void sub_25B4CEE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a67 < 0) {
    operator delete(__p);
  }

  JUMPOUT(0x25B4CF004);
}

void sub_25B4CEE48()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }

  JUMPOUT(0x25B4CF004);
}

void sub_25B4CEE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  JUMPOUT(0x25B4CF134);
}

void sub_25B4CEE70()
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }

  JUMPOUT(0x25B4CF054);
}

void sub_25B4CEE88()
{
  JUMPOUT(0x25B4CEEB4);
}

void sub_25B4CEEAC()
{
}

void sub_25B4CEEEC()
{
  JUMPOUT(0x25B4CF11CLL);
}

void sub_25B4CEF20()
{
  JUMPOUT(0x25B4CF110);
}

void sub_25B4CEF30()
{
}

void sub_25B4CEF38()
{
  JUMPOUT(0x25B4CF11CLL);
}

void sub_25B4CEF40()
{
  JUMPOUT(0x25B4CF11CLL);
}

void sub_25B4CEF50()
{
  JUMPOUT(0x25B4CEF7CLL);
}

void sub_25B4CEF60()
{
  JUMPOUT(0x25B4CEF7CLL);
}

void sub_25B4CEF68()
{
  JUMPOUT(0x25B4CEF70);
}