void sub_25B5657B8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5657EC(void *a1, void *a2)
{
  id v85 = a2;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    v84 = a1;
    do
    {
      v6 = objc_msgSend_walls(v85, v3, v4, v84);
      v8 = objc_msgSend_objectAtIndexedSubscript_(v6, v7, v5);

      uint64_t v9 = *a1;
      uint64_t v92 = (uint64_t)v8;
      objc_msgSend_quad(v8, v10, v11);
      float v86 = v12;
      long long src = 0uLL;
      *(void *)&long long v96 = 0;
      uint64_t v13 = v9 + 96 * v5;
      uint64_t v15 = *(void *)(v13 + 40);
      uint64_t v14 = *(void *)(v13 + 48);
      __p[0] = &src;
      while (v15 != v14)
      {
        sub_25B521880((void **)__p, v15);
        v15 += 120;
      }
      uint64_t v16 = v9 + 96 * v5;
      uint64_t v18 = *(void *)(v16 + 64);
      uint64_t v17 = *(void *)(v16 + 72);
      __p[0] = &src;
      while (v18 != v17)
      {
        sub_25B521880((void **)__p, v18);
        v18 += 120;
      }
      uint64_t v87 = v5;
      uint64_t v19 = src;
      v20 = 0;
      if (*((void *)&src + 1) != (void)src)
      {
        f32 = 0;
        unint64_t v22 = 0;
        unint64_t v23 = 0;
        unint64_t v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)&src + 1) - src) >> 3);
        while (1)
        {
          uint64_t v25 = v19 + 120 * v23;
          v28 = *(float32x4_t **)(v25 + 40);
          v26 = (float32x4_t **)(v25 + 40);
          v27 = v28;
          if ((unint64_t)f32 >= v22)
          {
            uint64_t v30 = ((char *)f32 - (char *)v20) >> 4;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60) {
              goto LABEL_94;
            }
            if ((uint64_t)(v22 - (void)v20) >> 3 > v31) {
              unint64_t v31 = (uint64_t)(v22 - (void)v20) >> 3;
            }
            if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              unint64_t v32 = (unint64_t)sub_25B3FFAEC(v32);
            }
            else {
              uint64_t v33 = 0;
            }
            v34 = (float32x4_t *)(v32 + 16 * v30);
            float32x4_t *v34 = v27[1];
            v29 = v34 + 1;
            while (f32 != v20)
            {
              float32x4_t v35 = *(float32x4_t *)(f32 - 4);
              f32 -= 4;
              v34[-1] = v35;
              --v34;
            }
            unint64_t v22 = v32 + 16 * v33;
            if (v20) {
              operator delete(v20);
            }
            v20 = (float *)v34;
          }
          else
          {
            *(float32x4_t *)f32 = v27[1];
            v29 = (float32x4_t *)(f32 + 4);
          }
          ++v23;
          v36 = *v26;
          float32x4_t v37 = (*v26)[4];
          float32x4_t v38 = vsubq_f32(v37, *(float32x4_t *)(*(void *)(v19 + 120 * (v23 % v24) + 40) + 16));
          float32x4_t v39 = vmulq_f32(v38, v38);
          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]) >= 0.01)
          {
            if ((unint64_t)v29 >= v22)
            {
              uint64_t v40 = ((char *)v29 - (char *)v20) >> 4;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 60) {
LABEL_94:
              }
                sub_25B3FBC4C();
              if ((uint64_t)(v22 - (void)v20) >> 3 > v41) {
                unint64_t v41 = (uint64_t)(v22 - (void)v20) >> 3;
              }
              if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42)
              {
                unint64_t v42 = (unint64_t)sub_25B3FFAEC(v42);
                float32x4_t v37 = v36[4];
              }
              else
              {
                uint64_t v43 = 0;
              }
              v44 = (float32x4_t *)(v42 + 16 * v40);
              float32x4_t *v44 = v37;
              f32 = v44[1].f32;
              while (v29 != (float32x4_t *)v20)
              {
                float32x4_t v45 = v29[-1];
                --v29;
                v44[-1] = v45;
                --v44;
              }
              unint64_t v22 = v42 + 16 * v43;
              if (v20) {
                operator delete(v20);
              }
              v20 = (float *)v44;
              goto LABEL_47;
            }
            *v29++ = v37;
          }
          f32 = (float *)v29;
LABEL_47:
          uint64_t v19 = src;
          unint64_t v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)&src + 1) - src) >> 3);
          if (v24 <= v23) {
            goto LABEL_50;
          }
        }
      }
      unint64_t v22 = 0;
      f32 = 0;
LABEL_50:
      uint64_t v46 = (char *)f32 - (char *)v20;
      if ((unint64_t)((char *)f32 - (char *)v20) > 0x1F)
      {
        uint64_t v49 = (v46 << 28) - 0x200000000;
        unint64_t v50 = v46 >> 4;
        if (v46 >> 4 > (unint64_t)(v49 >> 32))
        {
          unint64_t v51 = v49 >> 32;
          v52 = &v20[4 * v51 + 2];
          do
          {
            float *v52 = v86;
            v52 += 4;
            ++v51;
          }
          while (v50 > v51);
        }
        if ((int)((unint64_t)v46 >> 4) >= 3)
        {
          uint64_t v53 = (v50 - 2);
          v54 = v20 + 2;
          do
          {
            float v55 = *v54;
            if (*v54 < (float)(v86 + 0.03)) {
              float v55 = v86 + 0.03;
            }
            float *v54 = v55;
            v54 += 4;
            --v53;
          }
          while (v53);
        }
        float v56 = v20[2];
        for (i = v20; i != f32; i += 4)
        {
          if (v56 < i[2]) {
            float v56 = i[2];
          }
        }
        v58 = &v20[4 * v50];
        long long v91 = *((_OWORD *)v58 - 1);
        long long v59 = v91;
        *((float *)&v59 + 2) = v56;
        long long v88 = v59;
        long long v60 = *((_OWORD *)v58 - 2);
        long long v90 = v60;
        *((float *)&v60 + 2) = v56;
        long long v89 = v60;
        __p[0] = &src;
        sub_25B55E2EC((void ***)__p);
        if ((unint64_t)v46 > 0x2F) {
          goto LABEL_84;
        }
      }
      else
      {
        __p[0] = &src;
        sub_25B55E2EC((void ***)__p);
      }
      objc_msgSend_quad((void *)v92, v47, v48);
      long long v64 = v63;
      uint64_t v65 = 0;
      HIDWORD(v64) = HIDWORD(v88);
      HIDWORD(v66) = HIDWORD(v89);
      long long v88 = v64;
      long long v89 = v66;
      HIDWORD(v67) = HIDWORD(v90);
      f32 = v20;
      HIDWORD(v68) = HIDWORD(v91);
      long long v90 = v67;
      long long v91 = v68;
      do
      {
        objc_msgSend_quad((void *)v92, v61, v62);
        DWORD2(src) = v69;
        DWORD2(v96) = v70;
        *(void *)&long long src = v71;
        *(void *)&long long v96 = v72;
        DWORD2(v97) = v73;
        DWORD2(v98) = v74;
        *(void *)&long long v97 = v75;
        *(void *)&long long v98 = v76;
        if ((unint64_t)f32 >= v22)
        {
          uint64_t v77 = ((char *)f32 - (char *)v20) >> 4;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v22 - (void)v20) >> 3 > v78) {
            unint64_t v78 = (uint64_t)(v22 - (void)v20) >> 3;
          }
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79) {
            unint64_t v79 = (unint64_t)sub_25B3FFAEC(v79);
          }
          else {
            v61 = 0;
          }
          v80 = (float *)(v79 + 16 * v77);
          *(_OWORD *)v80 = *(&src + v65);
          v81 = v80 + 4;
          while (f32 != v20)
          {
            long long v82 = *((_OWORD *)f32 - 1);
            f32 -= 4;
            *((_OWORD *)v80 - 1) = v82;
            v80 -= 4;
          }
          unint64_t v22 = v79 + 16 * (void)v61;
          if (v20) {
            operator delete(v20);
          }
          v20 = v80;
          f32 = v81;
        }
        else
        {
          *(_OWORD *)f32 = *(&src + v65);
          f32 += 4;
        }
        ++v65;
      }
      while (v65 != 4);
LABEL_84:
      long long src = v88;
      long long v96 = v89;
      long long v97 = v90;
      long long v98 = v91;
      if (v92) {
        objc_copyStruct((void *)(v92 + 272), &src, 64, 1, 0);
      }
      size_t v83 = ((char *)f32 - (char *)v20) >> 4;
      LOBYTE(__p[0]) = 0;
      sub_25B565E80(&src, v83, __p);
      int v94 = 1065353216;
      sub_25B400C5C(__p, v83, &v94);
      sub_25B4FD368(v92, (char *)v20, (char *)src, (char *)__p[0], v83);
      a1 = v84;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((void)src)
      {
        *((void *)&src + 1) = src;
        operator delete((void *)src);
      }
      if (v20) {
        operator delete(v20);
      }

      uint64_t v5 = v87 + 1;
    }
    while (v87 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[1] - *v84) >> 5));
  }
}

void sub_25B565DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (v30) {
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

void *sub_25B565E80(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_25B46E9EC(a1, a2);
    v6 = (unsigned char *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B565EE4(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_25B565F00(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[6] - v1) >> 3);
  uint64_t v3 = a1[8];
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[9] - v3) >> 3);
  if ((int)v2 >= 1 && (int)v4 >= 3)
  {
    *(_DWORD *)(*(void *)(v3 + 120 * (v4 - 1) + 40) + 72) = *(_DWORD *)(*(void *)(v1 + 40) + 24);
    float result = *(float *)(*(void *)(a1[5] + 120 * (v2 - 1) + 40) + 72);
    *(float *)(*(void *)(a1[8] + 120 * (v4 - 3) + 40) + 24) = result;
  }
  return result;
}

uint64_t sub_25B565F7C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1BA8;
  *(void *)(a1 + 872) = &unk_2708F1EB8;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v2) {
    sub_25B404120(v2);
  }
  *(void *)(a1 + 720) = &unk_2708F1EB8;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 848);
  if (v3) {
    sub_25B404120(v3);
  }
  *(void *)(a1 + 560) = &unk_2708F1C28;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 688);
  if (v4) {
    sub_25B404120(v4);
  }
  *(void *)(a1 + 408) = &unk_2708F1C28;
  size_t v5 = *(std::__shared_weak_count **)(a1 + 536);
  if (v5) {
    sub_25B404120(v5);
  }
  *(void *)(a1 + 256) = &unk_2708F1C28;
  v6 = *(std::__shared_weak_count **)(a1 + 384);
  if (v6) {
    sub_25B404120(v6);
  }
  *(void *)(a1 + 128) = &unk_2708F1BC8;
  v8 = (void **)(a1 + 224);
  sub_25B56614C(&v8);
  return a1;
}

void *sub_25B5660D0(void *a1)
{
  a1[20] = &unk_2708F21F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[36];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[1] = &unk_2708F21F8;
  uint64_t v3 = (std::__shared_weak_count *)a1[17];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void sub_25B56614C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B56620C(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1BC8;
  uint64_t v1 = (void **)(a1 + 96);
  sub_25B56614C(&v1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B566284(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1BC8;
  uint64_t v3 = (void **)(a1 + 96);
  sub_25B56614C(&v3);
  return a1;
}

void sub_25B5662DC(uint64_t a1)
{
  sub_25B565F7C(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B566318()
{
}

uint64_t sub_25B566330(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 96);
    *(void *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id sub_25B566404(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v609[1] = *(int32x2_t *)MEMORY[0x263EF8340];
  id v464 = a2;
  v495 = a4;
  if (!a1)
  {
    id v463 = 0;
    goto LABEL_682;
  }
  if (*(unsigned char *)(a3 + 137))
  {
    uint64_t v9 = 0;
    id v463 = v464;
    goto LABEL_683;
  }
  id v463 = (id)objc_msgSend_copy(v464, v7, v8);
  v538 = 0;
  __p = 0;
  unint64_t v539 = 0;
  v535 = 0;
  v534 = 0;
  unint64_t v536 = 0;
  v532 = 0;
  v531 = 0;
  unint64_t v533 = 0;
  v528 = 0;
  v529 = 0;
  unint64_t v530 = 0;
  unint64_t v461 = *(void *)(a3 + 8);
  long long v526 = 0u;
  long long v527 = 0u;
  long long v524 = 0u;
  long long v525 = 0u;
  float v12 = objc_msgSend_walls(v464, v10, v11);
  uint64_t v484 = a3;
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v524, v607, 16);
  if (v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)v525;
    *(float *)v15.i32 = (float)v461;
    int32x2_t v508 = v15;
    float32x2_t v18 = (float32x2_t)vdup_lane_s32(v15, 0);
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v525 != v17) {
          objc_enumerationMutation(v12);
        }
        v20 = *(void **)(*((void *)&v524 + 1) + 8 * v19);
        float32x2_t v23 = (float32x2_t)sub_25B477C40(v20).n128_u64[0];
        if (v495)
        {
          float32x2_t v25 = v495[8];
          float v26 = v495[1].f32[1];
        }
        else
        {
          float v26 = 0.0;
          float32x2_t v25 = 0;
        }
        v27.i32[1] = v508.i32[1];
        *(float *)v27.i32 = (float)(v26 * *(float *)v508.i32) * 0.5;
        float v28 = 1.0 / v26;
        float32x2_t v29 = vsub_f32((float32x2_t)vdup_lane_s32(v27, 0), v25);
        float32x2_t v30 = vminnm_f32(vmaxnm_f32(vmul_n_f32(vadd_f32(v23, v29), v28), 0), v18);
        float32x2_t v31 = vminnm_f32(vmaxnm_f32(vmul_n_f32(vadd_f32(v29, v24), v28), 0), v18);
        if ((unint64_t)v16 >= v539)
        {
          unint64_t v32 = (float32x2_t *)__p;
          uint64_t v33 = ((char *)v16 - (unsigned char *)__p) >> 4;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v35 = v539 - (void)__p;
          if ((uint64_t)(v539 - (void)__p) >> 3 > v34) {
            unint64_t v34 = v35 >> 3;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)sub_25B3FFAEC(v36);
          }
          else {
            v21 = 0;
          }
          float32x4_t v37 = (float32x2_t *)(v36 + 16 * v33);
          *float32x4_t v37 = v30;
          v37[1] = v31;
          if (v16 == v32)
          {
            float32x4_t v39 = v16;
            float32x4_t v38 = (char *)(v36 + 16 * v33);
          }
          else
          {
            float32x4_t v38 = (char *)(v36 + 16 * v33);
            do
            {
              *((_OWORD *)v38 - 1) = *(_OWORD *)v16[-2].f32;
              v38 -= 16;
              v16 -= 2;
            }
            while (v16 != v32);
            float32x4_t v39 = __p;
          }
          uint64_t v16 = v37 + 2;
          __p = v38;
          v538 = v37 + 2;
          unint64_t v539 = v36 + 16 * (void)v21;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *uint64_t v16 = v30;
          v16[1] = v31;
          v16 += 2;
        }
        v538 = v16;
        objc_msgSend_confidence(v20, v21, v22);
        int v42 = v41;
        uint64_t v43 = v532;
        if ((unint64_t)v532 >= v533)
        {
          float32x4_t v45 = (char *)v531;
          uint64_t v46 = (v532 - (unsigned char *)v531) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v48 = v533 - (void)v531;
          if ((uint64_t)(v533 - (void)v531) >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49) {
            unint64_t v49 = (unint64_t)sub_25B3FBC64(v49);
          }
          else {
            uint64_t v40 = 0;
          }
          unint64_t v50 = (char *)(v49 + 4 * v46);
          *(_DWORD *)unint64_t v50 = v42;
          v44 = v50 + 4;
          while (v43 != v45)
          {
            int v51 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v50 - 1) = v51;
            v50 -= 4;
          }
          v531 = v50;
          unint64_t v533 = v49 + 4 * (void)v40;
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)v532 = v41;
          v44 = v43 + 4;
        }
        v532 = v44;
        ++v19;
      }
      while (v19 != v14);
      uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v40, (uint64_t)&v524, v607, 16);
      uint64_t v14 = v52;
    }
    while (v52);
  }

  long long v522 = 0u;
  long long v523 = 0u;
  long long v520 = 0u;
  long long v521 = 0u;
  float v55 = objc_msgSend_openings(v464, v53, v54);
  uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v520, v606, 16);
  if (v57)
  {
    uint64_t v59 = *(void *)v521;
    *(float *)v58.i32 = (float)v461;
    float32x2_t v60 = (float32x2_t)vdup_lane_s32(v58, 0);
    do
    {
      uint64_t v61 = 0;
      do
      {
        if (*(void *)v521 != v59) {
          objc_enumerationMutation(v55);
        }
        uint64_t v62 = *(void **)(*((void *)&v520 + 1) + 8 * v61);
        float32x2_t v65 = (float32x2_t)sub_25B477C40(v62).n128_u64[0];
        if (v495)
        {
          float32x2_t v68 = v495[8];
          v67.i32[0] = v495[1].i32[1];
        }
        else
        {
          int32x2_t v67 = 0;
          float32x2_t v68 = 0;
        }
        float v69 = 1.0 / *(float *)v67.i32;
        *(float *)v67.i32 = (float)(*(float *)v67.i32 * (float)v461) * 0.5;
        float32x2_t v70 = vsub_f32((float32x2_t)vdup_lane_s32(v67, 0), v68);
        float32x2_t v71 = vminnm_f32(vmaxnm_f32(vmul_n_f32(vadd_f32(v65, v70), v69), 0), v60);
        float32x2_t v72 = vminnm_f32(vmaxnm_f32(vmul_n_f32(vadd_f32(v70, v66), v69), 0), v60);
        int v73 = v535;
        if ((unint64_t)v535 >= v536)
        {
          uint64_t v75 = v534;
          uint64_t v76 = ((char *)v535 - (unsigned char *)v534) >> 4;
          unint64_t v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v78 = v536 - (void)v534;
          if ((uint64_t)(v536 - (void)v534) >> 3 > v77) {
            unint64_t v77 = v78 >> 3;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79) {
            unint64_t v79 = (unint64_t)sub_25B3FFAEC(v79);
          }
          else {
            long long v63 = 0;
          }
          v80 = (float32x2_t *)(v79 + 16 * v76);
          float32x2_t *v80 = v71;
          v80[1] = v72;
          v81 = v80;
          if (v73 != v75)
          {
            do
            {
              *(_OWORD *)v81[-2].f32 = *((_OWORD *)v73 - 1);
              v81 -= 2;
              v73 -= 2;
            }
            while (v73 != v75);
            int v73 = v534;
          }
          int v74 = v80 + 2;
          v534 = v81;
          unint64_t v536 = v79 + 16 * (void)v63;
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          float32x2_t *v535 = v71;
          v73[1] = v72;
          int v74 = (float32x2_t *)(v73 + 2);
        }
        v535 = v74;
        objc_msgSend_confidence(v62, v63, v64);
        int v84 = v83;
        id v85 = v529;
        if ((unint64_t)v529 >= v530)
        {
          uint64_t v87 = (char *)v528;
          uint64_t v88 = (v529 - (unsigned char *)v528) >> 2;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v90 = v530 - (void)v528;
          if ((uint64_t)(v530 - (void)v528) >> 1 > v89) {
            unint64_t v89 = v90 >> 1;
          }
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = v89;
          }
          if (v91) {
            unint64_t v91 = (unint64_t)sub_25B3FBC64(v91);
          }
          else {
            long long v82 = 0;
          }
          uint64_t v92 = (char *)(v91 + 4 * v88);
          *(_DWORD *)uint64_t v92 = v84;
          float v86 = v92 + 4;
          while (v85 != v87)
          {
            int v93 = *((_DWORD *)v85 - 1);
            v85 -= 4;
            *((_DWORD *)v92 - 1) = v93;
            v92 -= 4;
          }
          v528 = v92;
          unint64_t v530 = v91 + 4 * (void)v82;
          if (v87) {
            operator delete(v87);
          }
        }
        else
        {
          *(_DWORD *)v529 = v83;
          float v86 = v85 + 4;
        }
        v529 = v86;
        ++v61;
      }
      while (v61 != v57);
      uint64_t v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v82, (uint64_t)&v520, v606, 16);
      uint64_t v57 = v94;
    }
    while (v94);
  }

  if (!*(unsigned char *)(v484 + 137))
  {
    v604 = 0;
    v603 = 0;
    uint64_t v605 = 0;
    *(_OWORD *)v541 = 0u;
    *(_OWORD *)v542 = 0u;
    *(_OWORD *)v540 = 0u;
    sub_25B4582F4((uint64_t)&v543, v484);
    long long v550 = 0u;
    long long v549 = 0u;
    long long v548 = 0u;
    LODWORD(v551) = 1132396544;
    *(_OWORD *)v540 = v544;
    *(_OWORD *)v541 = v545;
    *(_OWORD *)v542 = v546;
    *(_OWORD *)v555 = 0u;
    *(_OWORD *)v556 = 0u;
    *(_OWORD *)v559 = v545;
    long long v560 = v546;
    long long v557 = 0u;
    *(_OWORD *)v558 = v544;
    sub_25B4582F4((uint64_t)v561, (uint64_t)&v543);
    long long v564 = v549;
    long long v565 = v550;
    long long v563 = v548;
    v566 = v551;
    *(_OWORD *)v555 = *(_OWORD *)v558;
    *(_OWORD *)v556 = *(_OWORD *)v559;
    long long v568 = 0u;
    *(_OWORD *)v569 = 0u;
    long long v570 = 0u;
    long long v571 = *(_OWORD *)v558;
    long long v557 = v560;
    *(_OWORD *)v572 = *(_OWORD *)v559;
    long long v573 = v560;
    long long v576 = v560;
    *(_OWORD *)v575 = *(_OWORD *)v559;
    long long v574 = *(_OWORD *)v558;
    sub_25B4582F4((uint64_t)v577, (uint64_t)v561);
    long long v579 = v563;
    long long v580 = v564;
    long long v581 = v565;
    v582 = v566;
    long long v568 = v571;
    *(_OWORD *)v569 = *(_OWORD *)v572;
    long long v570 = v573;
    sub_25B4EFFD0((uint64_t)v588, &v568);
  }
  *(_OWORD *)v516 = 0u;
  memset(v517, 0, sizeof(v517));
  long long v518 = 0u;
  v519 = 0;
  v569[0] = 0;
  long long v568 = 0uLL;
  v555[0] = &v568;
  sub_25B56A548((void ***)v555);
  if (v516[0] == v516[1]) {
    goto LABEL_670;
  }
  unint64_t v96 = (char *)v516[1] - (char *)v516[0];
  if ((void *)((char *)v516[1] - (char *)v516[0]) >= (void *)0x20)
  {
    *(_OWORD *)v552 = 0u;
    long long v553 = 0u;
    int v554 = 1065353216;
    uint64_t v491 = (v96 >> 4);
    unint64_t v467 = v96 >> 4;
    if ((int)(v96 >> 4) > 1)
    {
      unint64_t v97 = 0;
      uint64_t v470 = (int)((uint64_t)v96 >> 4);
      uint64_t v475 = 1;
      uint64_t v473 = 152;
      do
      {
        v472 = (void *)(v97 + 1);
        if ((uint64_t)(v97 + 1) < v470)
        {
          uint64_t v98 = v473;
          unint64_t v99 = v475;
          do
          {
            unint64_t v100 = v97;
            *(_OWORD *)v540 = 0u;
            *(_OWORD *)v541 = 0u;
            *(_OWORD *)v542 = 0u;
            sub_25B4641DC((uint64_t)&v543, v518 + 152 * v97);
            *(_OWORD *)v540 = v544;
            *(_OWORD *)v541 = v545;
            *(_OWORD *)v542 = v546;
            *(_OWORD *)v588 = 0u;
            long long v589 = 0u;
            long long v590 = 0u;
            sub_25B4641DC((uint64_t)&v591, v518 + v98);
            *(_OWORD *)v588 = v592;
            long long v589 = v593;
            long long v590 = v594;
            sub_25B578A4C(v555, (long long *)v540, (long long *)v588);
            long long v570 = 0u;
            *(_OWORD *)v569 = 0u;
            long long v568 = 0u;
            long long v571 = *(_OWORD *)v555;
            *(_OWORD *)v572 = *(_OWORD *)v556;
            long long v573 = v557;
            long long v574 = *(_OWORD *)v558;
            *(_OWORD *)v575 = *(_OWORD *)v559;
            long long v576 = v560;
            sub_25B4641DC((uint64_t)v577, (uint64_t)v561);
            long long v579 = v563;
            long long v580 = v564;
            long long v581 = v565;
            sub_25B4641DC((uint64_t)&v582, (uint64_t)&v566);
            long long v585 = 0u;
            long long v586 = 0u;
            long long v584 = 0u;
            int v587 = 2;
            long long v568 = v571;
            *(_OWORD *)v569 = *(_OWORD *)v572;
            long long v570 = v573;
            unint64_t v101 = sub_25B578D14((uint64_t)&v568);
            v582 = &unk_2708F1D50;
            if (v583) {
              sub_25B404120(v583);
            }
            v577[0] = &unk_2708F1D50;
            if (v578) {
              sub_25B404120(v578);
            }
            v566 = &unk_2708F1D50;
            if (v567) {
              sub_25B404120(v567);
            }
            v561[0] = &unk_2708F1D50;
            if (v562) {
              sub_25B404120(v562);
            }
            if (v101 >= 0x65)
            {
              unint64_t v102 = sub_25B578EA8((uint64_t)v540);
              if (v102 <= sub_25B578EA8((uint64_t)v588)) {
                sub_25B4CC3A8((uint64_t)v552, v100, v100);
              }
              else {
                sub_25B4CC3A8((uint64_t)v552, v99, v99);
              }
            }
            v591 = &unk_2708F1D50;
            if (v595) {
              sub_25B404120(v595);
            }
            v543 = &unk_2708F1D50;
            if (v547) {
              sub_25B404120(v547);
            }
            ++v99;
            v98 += 152;
            unint64_t v97 = v100;
          }
          while (v491 != v99);
        }
        v473 += 152;
        ++v475;
        unint64_t v97 = (unint64_t)v472;
      }
      while (v472 != (void *)(v467 - 1));
    }
    v569[0] = 0;
    long long v103 = 0uLL;
    long long v568 = 0u;
    if ((int)v467 < 1)
    {
      long long v509 = 0uLL;
      v128 = 0;
      v105 = 0;
      v104 = 0;
      long long v129 = 0uLL;
    }
    else
    {
      v104 = 0;
      v105 = 0;
      unint64_t v106 = 0;
      long long v503 = 0uLL;
      long long v509 = 0uLL;
      do
      {
        if (!sub_25B4CC2F8(v552, v106))
        {
          v107 = (char *)v516[0] + 16 * v106;
          v108 = (char *)*((void *)&v509 + 1);
          if (*((void *)&v509 + 1) >= (unint64_t)v104)
          {
            uint64_t v110 = (uint64_t)(*((void *)&v509 + 1) - v509) >> 4;
            unint64_t v111 = v110 + 1;
            if ((unint64_t)(v110 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)&v104[-v509] >> 3 > v111) {
              unint64_t v111 = (uint64_t)&v104[-v509] >> 3;
            }
            if ((unint64_t)&v104[-v509] >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v112 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v112 = v111;
            }
            if (v112) {
              unint64_t v112 = (unint64_t)sub_25B3FFAEC(v112);
            }
            else {
              uint64_t v113 = 0;
            }
            v114 = (_OWORD *)(v112 + 16 * v110);
            _OWORD *v114 = *v107;
            v115 = v114;
            if (*((void *)&v509 + 1) != (void)v509)
            {
              do
              {
                *--v115 = *((_OWORD *)v108 - 1);
                v108 -= 16;
              }
              while (v108 != (char *)v509);
              v108 = (char *)v509;
            }
            v104 = (char *)(v112 + 16 * v113);
            uint64_t v109 = (uint64_t)(v114 + 1);
            *(void *)&long long v509 = v115;
            if (v108) {
              operator delete(v108);
            }
          }
          else
          {
            **((_OWORD **)&v509 + 1) = *v107;
            uint64_t v109 = *((void *)&v509 + 1) + 16;
          }
          *(void *)&long long v116 = v509;
          *((void *)&v116 + 1) = v109;
          long long v509 = v116;
          v117 = (char *)*((void *)&v503 + 1);
          if (*((void *)&v503 + 1) >= (unint64_t)v105)
          {
            uint64_t v119 = (uint64_t)(*((void *)&v503 + 1) - v503) >> 3;
            unint64_t v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)&v105[-v503] >> 2 > v120) {
              unint64_t v120 = (uint64_t)&v105[-v503] >> 2;
            }
            if ((unint64_t)&v105[-v503] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v120;
            }
            if (v121) {
              unint64_t v121 = (unint64_t)sub_25B3FCAD4(v121);
            }
            else {
              uint64_t v122 = 0;
            }
            v123 = (void *)(v121 + 8 * v119);
            void *v123 = *((void *)v517[1] + v106);
            uint64_t v118 = (uint64_t)(v123 + 1);
            if (*((void *)&v503 + 1) != (void)v503)
            {
              do
              {
                uint64_t v124 = *((void *)v117 - 1);
                v117 -= 8;
                *--v123 = v124;
              }
              while (v117 != (char *)v503);
              v117 = (char *)v503;
            }
            v105 = (char *)(v121 + 8 * v122);
            *(void *)&long long v503 = v123;
            if (v117) {
              operator delete(v117);
            }
          }
          else
          {
            **((void **)&v503 + 1) = *((void *)v517[1] + v106);
            uint64_t v118 = *((void *)&v503 + 1) + 8;
          }
          *(void *)&long long v125 = v503;
          *((void *)&v125 + 1) = v118;
          long long v503 = v125;
          uint64_t v126 = v518 + 152 * v106;
          if ((void *)*((void *)&v568 + 1) >= v569[0]) {
            uint64_t v127 = sub_25B578FD4((uint64_t *)&v568, v126);
          }
          else {
            uint64_t v127 = sub_25B4641DC(*((uint64_t *)&v568 + 1), v126) + 152;
          }
          *((void *)&v568 + 1) = v127;
        }
        ++v106;
      }
      while (v106 != v491);
      long long v103 = v568;
      v128 = v569[0];
      long long v129 = v503;
    }
    v504 = v516[0];
    *(_OWORD *)v516 = v509;
    v517[0] = v104;
    v130 = v517[1];
    *(_OWORD *)&v517[1] = v129;
    v517[3] = v105;
    long long v131 = v518;
    long long v518 = v103;
    long long v568 = v131;
    v132 = v519;
    v519 = v128;
    v569[0] = v132;
    v555[0] = &v568;
    sub_25B56A548((void ***)v555);
    if (v130) {
      operator delete(v130);
    }
    if (v504) {
      operator delete(v504);
    }
    sub_25B3FB178((uint64_t)v552);
  }
  sub_25B579E50(v555, (uint64_t *)&__p, (uint64_t *)&v531, (uint64_t *)&v534, (uint64_t *)&v528, (uint64_t *)v516, &v517[1], 1, v95);
  v597 = 0;
  v596 = 0;
  unint64_t v598 = 0;
  v134 = (char *)v516[0];
  v135 = &off_25B5F1000;
  if (v516[1] == v516[0])
  {
    v469 = 0;
    v136 = 0;
    goto LABEL_487;
  }
  v136 = 0;
  unint64_t v476 = 0;
  uint64_t v137 = 0;
  v469 = 0;
  do
  {
    v478 = v517[1];
    uint64_t v510 = *((void *)v517[1] + v137);
    v138 = (char *)v555[0];
    if (v555[1] == v555[0])
    {
      v139 = 0;
      v140 = 0;
      unint64_t v141 = 0;
    }
    else
    {
      v139 = 0;
      v140 = 0;
      unint64_t v141 = 0;
      unint64_t v142 = 0;
      do
      {
        v143 = (float32x2_t *)&v138[16 * v142];
        if ((unint64_t)v140 >= v141)
        {
          uint64_t v145 = v140 - v139;
          unint64_t v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 61) {
            goto LABEL_692;
          }
          if ((uint64_t)(v141 - (void)v139) >> 2 > v146) {
            unint64_t v146 = (uint64_t)(v141 - (void)v139) >> 2;
          }
          if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v147 = v146;
          }
          if (v147) {
            unint64_t v147 = (unint64_t)sub_25B3FCAD4(v147);
          }
          else {
            uint64_t v148 = 0;
          }
          v149 = (float32x2_t *)(v147 + 8 * v145);
          float32x2_t *v149 = *v143;
          v144 = v149 + 1;
          while (v140 != v139)
          {
            float32x2_t v150 = v140[-1];
            --v140;
            v149[-1] = v150;
            --v149;
          }
          unint64_t v141 = v147 + 8 * v148;
          if (v139) {
            operator delete(v139);
          }
          v139 = v149;
        }
        else
        {
          float32x2_t *v140 = *v143;
          v144 = v140 + 1;
        }
        v151 = (float32x2_t *)((char *)v555[0] + 16 * v142 + 8);
        if ((unint64_t)v144 >= v141)
        {
          uint64_t v152 = v144 - v139;
          unint64_t v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 61) {
LABEL_692:
          }
            sub_25B3FBC4C();
          if ((uint64_t)(v141 - (void)v139) >> 2 > v153) {
            unint64_t v153 = (uint64_t)(v141 - (void)v139) >> 2;
          }
          if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v153;
          }
          if (v154) {
            unint64_t v154 = (unint64_t)sub_25B3FCAD4(v154);
          }
          else {
            uint64_t v155 = 0;
          }
          v156 = (float32x2_t *)(v154 + 8 * v152);
          float32x2_t *v156 = *v151;
          v140 = v156 + 1;
          while (v144 != v139)
          {
            float32x2_t v157 = v144[-1];
            --v144;
            v156[-1] = v157;
            --v156;
          }
          unint64_t v141 = v154 + 8 * v155;
          if (v139) {
            operator delete(v139);
          }
          v139 = v156;
        }
        else
        {
          float32x2_t *v144 = *v151;
          v140 = v144 + 1;
        }
        ++v142;
        v138 = (char *)v555[0];
      }
      while (v142 < ((char *)v555[1] - (char *)v555[0]) >> 4);
    }
    v158 = (char *)v558[0];
    if (v558[1] != v558[0])
    {
      unint64_t v159 = 0;
      do
      {
        v160 = (float32x2_t *)&v158[16 * v159];
        if ((unint64_t)v140 >= v141)
        {
          uint64_t v162 = v140 - v139;
          unint64_t v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 61) {
            goto LABEL_693;
          }
          if ((uint64_t)(v141 - (void)v139) >> 2 > v163) {
            unint64_t v163 = (uint64_t)(v141 - (void)v139) >> 2;
          }
          if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v164 = v163;
          }
          if (v164) {
            unint64_t v164 = (unint64_t)sub_25B3FCAD4(v164);
          }
          else {
            uint64_t v165 = 0;
          }
          v166 = (float32x2_t *)(v164 + 8 * v162);
          float32x2_t *v166 = *v160;
          v161 = v166 + 1;
          while (v140 != v139)
          {
            float32x2_t v167 = v140[-1];
            --v140;
            v166[-1] = v167;
            --v166;
          }
          unint64_t v141 = v164 + 8 * v165;
          if (v139) {
            operator delete(v139);
          }
          v139 = v166;
        }
        else
        {
          float32x2_t *v140 = *v160;
          v161 = v140 + 1;
        }
        v168 = (float32x2_t *)((char *)v558[0] + 16 * v159 + 8);
        if ((unint64_t)v161 >= v141)
        {
          uint64_t v169 = v161 - v139;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 61) {
LABEL_693:
          }
            sub_25B3FBC4C();
          if ((uint64_t)(v141 - (void)v139) >> 2 > v170) {
            unint64_t v170 = (uint64_t)(v141 - (void)v139) >> 2;
          }
          if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v171 = v170;
          }
          if (v171) {
            unint64_t v171 = (unint64_t)sub_25B3FCAD4(v171);
          }
          else {
            uint64_t v172 = 0;
          }
          v173 = (float32x2_t *)(v171 + 8 * v169);
          float32x2_t *v173 = *v168;
          v140 = v173 + 1;
          while (v161 != v139)
          {
            float32x2_t v174 = v161[-1];
            --v161;
            v173[-1] = v174;
            --v173;
          }
          unint64_t v141 = v171 + 8 * v172;
          if (v139) {
            operator delete(v139);
          }
          v139 = v173;
        }
        else
        {
          float32x2_t *v161 = *v168;
          v140 = v161 + 1;
        }
        ++v159;
        v158 = (char *)v558[0];
      }
      while (v159 < ((char *)v558[1] - (char *)v558[0]) >> 4);
    }
    if ((unint64_t)(v140 - v139) >= 3) {
      unint64_t v175 = 3;
    }
    else {
      unint64_t v175 = v140 - v139;
    }
    v133.n128_u64[0] = v478[v137];
    __n128 v480 = v133;
    uint64_t v482 = v137;
    if (v140 == v139)
    {
      v203 = 0;
      v204 = 0;
      unint64_t v205 = v476;
      if (v139) {
        goto LABEL_409;
      }
      goto LABEL_410;
    }
    float v176 = *(float *)&v510 * 3.14159265 / 180.0;
    v492 = (int32x2_t *)&v134[16 * v137];
    float32x2_t v177 = (float32x2_t)vrev64_s32(*v492);
    int32x2_t v179 = v492[1];
    v178 = (float *)&v492[1];
    __float2 v180 = __sincosf_stret(v176);
    v181 = 0;
    float32x2_t v182 = vmla_n_f32(v177, (float32x2_t)__PAIR64__(LODWORD(v180.__sinval), LODWORD(v180.__cosval)), *(float *)v179.i32);
    v540[1] = 0;
    v540[0] = 0;
    v541[0] = 0;
    v183 = v139;
    do
    {
      float32x2_t v184 = vsub_f32(*v183, v182);
      float v185 = vaddv_f32(vmul_f32(v184, v184));
      if (v181 >= v541[0])
      {
        v187 = (float *)v540[0];
        uint64_t v188 = ((char *)v181 - (char *)v540[0]) >> 2;
        unint64_t v189 = v188 + 1;
        if ((unint64_t)(v188 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        int64_t v190 = (char *)v541[0] - (char *)v540[0];
        if (((char *)v541[0] - (char *)v540[0]) >> 1 > v189) {
          unint64_t v189 = v190 >> 1;
        }
        if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v191 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v191 = v189;
        }
        if (v191)
        {
          unint64_t v191 = (unint64_t)sub_25B3FBC64(v191);
          v181 = (float *)v540[1];
          v187 = (float *)v540[0];
        }
        else
        {
          uint64_t v192 = 0;
        }
        v193 = (float *)(v191 + 4 * v188);
        float *v193 = v185;
        v186 = v193 + 1;
        while (v181 != v187)
        {
          int v194 = *((_DWORD *)v181-- - 1);
          *((_DWORD *)v193-- - 1) = v194;
        }
        v540[0] = v193;
        v540[1] = v186;
        v541[0] = (void *)(v191 + 4 * v192);
        if (v187) {
          operator delete(v187);
        }
      }
      else
      {
        float *v181 = v185;
        v186 = v181 + 1;
      }
      v540[1] = v186;
      ++v183;
      v181 = (float *)v186;
    }
    while (v183 != v140);
    sub_25B577B28((char **)v588, (uint64_t *)v540, v175);
    v195 = (uint64_t *)v588[0];
    uint64_t v196 = *(void *)v588[0];
    float32x2_t v197 = (float32x2_t)vrev64_s32(*v492);
    if (v175)
    {
      float v198 = *v178;
      v199 = (float *)v540[0];
      unint64_t v200 = v175;
      while (1)
      {
        uint64_t v202 = *v195++;
        uint64_t v201 = v202;
        sub_25B577CE8((uint64_t)v552, v197, v198, v139[v202]);
        if (LOBYTE(v552[0]))
        {
          if (sqrtf(v199[v201]) < 30.0) {
            break;
          }
        }
        if (!--v200)
        {
          uint64_t v201 = v196;
          break;
        }
      }
    }
    else
    {
      uint64_t v201 = *(void *)v588[0];
    }
    float32x2_t v489 = v139[v201];
    float v206 = *((float *)&v510 + 1) * 3.14159265 / 180.0;
    LODWORD(v498) = *(void *)v178;
    __float2 v207 = __sincosf_stret(v206);
    v208 = 0;
    float32x2_t v209 = vmla_n_f32(v197, (float32x2_t)__PAIR64__(LODWORD(v207.__sinval), LODWORD(v207.__cosval)), v498);
    v552[1] = 0;
    v552[0] = 0;
    *(void *)&long long v553 = 0;
    v210 = v139;
    do
    {
      float32x2_t v211 = vsub_f32(*v210, v209);
      float v212 = vaddv_f32(vmul_f32(v211, v211));
      if ((unint64_t)v208 >= (unint64_t)v553)
      {
        v214 = (float *)v552[0];
        uint64_t v215 = ((char *)v208 - (char *)v552[0]) >> 2;
        unint64_t v216 = v215 + 1;
        if ((unint64_t)(v215 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v217 = v553 - (unint64_t)v552[0];
        if ((uint64_t)(v553 - (unint64_t)v552[0]) >> 1 > v216) {
          unint64_t v216 = v217 >> 1;
        }
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v218 = v216;
        }
        if (v218)
        {
          unint64_t v218 = (unint64_t)sub_25B3FBC64(v218);
          v208 = (float *)v552[1];
          v214 = (float *)v552[0];
        }
        else
        {
          uint64_t v219 = 0;
        }
        v220 = (float *)(v218 + 4 * v215);
        float *v220 = v212;
        v213 = v220 + 1;
        while (v208 != v214)
        {
          int v221 = *((_DWORD *)v208-- - 1);
          *((_DWORD *)v220-- - 1) = v221;
        }
        v552[0] = v220;
        v552[1] = v213;
        *(void *)&long long v553 = v218 + 4 * v219;
        if (v214) {
          operator delete(v214);
        }
      }
      else
      {
        float *v208 = v212;
        v213 = v208 + 1;
      }
      v552[1] = v213;
      ++v210;
      v208 = (float *)v213;
    }
    while (v210 != v140);
    sub_25B577B28((char **)&v603, (uint64_t *)v552, v175);
    v222 = (uint64_t *)v603;
    uint64_t v223 = *(void *)v603;
    if (v175)
    {
      float32x2_t v224 = (float32x2_t)vrev64_s32(*v492);
      float v225 = *v178;
      v226 = (float *)v552[0];
      while (1)
      {
        uint64_t v228 = *v222++;
        uint64_t v227 = v228;
        sub_25B577CE8((uint64_t)&v600, v224, v225, v139[v228]);
        if ((_BYTE)v600)
        {
          if (sqrtf(v226[v227]) < 30.0) {
            break;
          }
        }
        if (!--v175) {
          goto LABEL_299;
        }
      }
    }
    else
    {
LABEL_299:
      uint64_t v227 = v223;
    }
    float32x2_t v229 = v139[v227];
    v601 = 0;
    v600 = 0;
    v602 = 0;
    int8x8_t v486 = (int8x8_t)v229;
    float32x2_t v230 = vsub_f32(v489, v229);
    if (sqrtf(vaddv_f32(vmul_f32(v230, v230))) >= 0.001)
    {
      __long long src = xmmword_25B5F1130;
      sub_25B4FF638((char *)&v600, (char *)&__src, (uint64_t)v609, 2uLL);
    }
    else
    {
      if (*((float *)v540[0] + v201) >= *((float *)v552[0] + v227))
      {
        v231 = operator new(8uLL);
        void *v231 = 1;
      }
      else
      {
        v231 = operator new(8uLL);
        void *v231 = 0;
      }
      v602 = v231 + 1;
      v600 = v231;
      v601 = v231 + 1;
    }
    v203 = 0;
    v204 = 0;
    unint64_t v234 = 0;
    char v235 = 0;
    uint64_t v236 = 0;
    char v237 = 1;
    do
    {
      char v238 = v235;
      v239 = v600;
      if (v600 != v601)
      {
        while (*v239 != v236)
        {
          if (++v239 == v601)
          {
            v239 = v601;
            break;
          }
        }
      }
      if (v239 != v601)
      {
        if (v237) {
          unsigned int v240 = -1;
        }
        else {
          unsigned int v240 = 0;
        }
        float32x2_t v241 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v240), (int8x8_t)v489, v486);
        float32x2_t v242 = (float32x2_t)*v492;
        sub_25B577CE8((uint64_t)&__src, (float32x2_t)vrev64_s32(*v492), *v178, v241);
        long long v599 = 0uLL;
        if ((_BYTE)__src)
        {
          int32x2_t v243 = *(int32x2_t *)((char *)&__src + 8);
          float32x2_t v244 = vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)((char *)&__src + 8)), v242);
          float v245 = *((float *)&v478[v482] + (v236 & 1));
          float v246 = atan2f(v244.f32[0], v244.f32[1]) * 57.2957795;
          float v247 = v246 + 360.0;
          BOOL v248 = *(float *)&v510 >= v246 || *((float *)&v510 + 1) <= v246;
          if (!v248 || (*(float *)&v510 < v247 ? (_NF = v247 < *((float *)&v510 + 1)) : (_NF = 0), _NF))
          {
            float v251 = vabds_f32(v245, v246);
            float v252 = vabds_f32(v245, v247);
            if (v252 >= v251) {
              float v252 = v251;
            }
            BOOL v250 = v252 < 30.0;
          }
          else
          {
            BOOL v250 = 0;
          }
          int32x2_t v253 = v609[0];
          float32x2_t v254 = vsub_f32((float32x2_t)vrev64_s32(v609[0]), v242);
          v232.n128_f64[0] = atan2f(v254.f32[0], v254.f32[1]) * 57.2957795;
          *(float *)&unint64_t v233 = v232.n128_f64[0];
          v232.n128_f32[0] = *(float *)&v233 + 360.0;
          unint64_t v499 = v233;
          if ((*(float *)&v510 >= *(float *)&v233 || *((float *)&v510 + 1) <= *(float *)&v233)
            && (*(float *)&v510 >= v232.n128_f32[0] || v232.n128_f32[0] >= *((float *)&v510 + 1)))
          {
            BOOL v257 = 0;
            BOOL v258 = !v250;
            BOOL v259 = 1;
            goto LABEL_343;
          }
          float v260 = vabds_f32(v245, *(float *)&v233);
          float v261 = vabds_f32(v245, v232.n128_f32[0]);
          if (v261 >= v260) {
            float v261 = v260;
          }
          BOOL v257 = v261 < 30.0;
          BOOL v259 = v261 >= 30.0;
          BOOL v258 = !v250;
          if (!v250 || v261 >= 30.0)
          {
LABEL_343:
            if (!v257 && !v258)
            {
              *(float32x2_t *)&long long v599 = v241;
              int32x2_t v253 = v243;
              v232.n128_f32[0] = v246;
              unint64_t v499 = v232.n128_u64[0];
              goto LABEL_354;
            }
            if (v250 || v259) {
              goto LABEL_394;
            }
          }
          *(float32x2_t *)&long long v599 = v241;
LABEL_354:
          *((int32x2_t *)&v599 + 1) = v253;
          if (sub_25B577E40((float32x2_t *)&v599, v484))
          {
            if ((unint64_t)v204 >= v234)
            {
              uint64_t v263 = (v204 - v203) >> 4;
              unint64_t v264 = v263 + 1;
              if ((unint64_t)(v263 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v234 - (void)v203) >> 3 > v264) {
                unint64_t v264 = (uint64_t)(v234 - (void)v203) >> 3;
              }
              if (v234 - (unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v265 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v265 = v264;
              }
              if (v265) {
                unint64_t v265 = (unint64_t)sub_25B3FFAEC(v265);
              }
              else {
                uint64_t v266 = 0;
              }
              v271 = (_OWORD *)(v265 + 16 * v263);
              _OWORD *v271 = v599;
              if (v204 == v203)
              {
                v273 = (char *)(v265 + 16 * v263);
              }
              else
              {
                unint64_t v272 = v265 + 16 * v263;
                do
                {
                  v273 = (char *)(v272 - 16);
                  *(_OWORD *)(v272 - 16) = *((_OWORD *)v204 - 1);
                  v204 -= 16;
                  v272 -= 16;
                }
                while (v204 != v203);
              }
              unint64_t v234 = v265 + 16 * v266;
              v204 = (char *)(v271 + 1);
              if (v203) {
                operator delete(v203);
              }
              v203 = v273;
            }
            else
            {
              *(_OWORD *)v204 = v599;
              v204 += 16;
            }
            __n128 v274 = v480;
            __n128 v232 = v480;
            HIDWORD(v233) = HIDWORD(v499);
            v232.n128_u32[1] = v499;
            v274.n128_u32[0] = v499;
            if ((v237 & 1) == 0) {
              v274.n128_f64[0] = v232.n128_f64[0];
            }
            __n128 v480 = v274;
          }
          goto LABEL_394;
        }
        if (v237) {
          unsigned int v262 = -1;
        }
        else {
          unsigned int v262 = 0;
        }
        *(float32x2_t *)&long long v599 = v241;
        *((int8x8_t *)&v599 + 1) = vbsl_s8((int8x8_t)vdup_n_s32(v262), (int8x8_t)v182, (int8x8_t)v209);
        if (sub_25B577E40((float32x2_t *)&v599, v484))
        {
          if ((unint64_t)v204 >= v234)
          {
            uint64_t v267 = (v204 - v203) >> 4;
            unint64_t v268 = v267 + 1;
            if ((unint64_t)(v267 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v234 - (void)v203) >> 3 > v268) {
              unint64_t v268 = (uint64_t)(v234 - (void)v203) >> 3;
            }
            if (v234 - (unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v269 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v269 = v268;
            }
            if (v269) {
              unint64_t v269 = (unint64_t)sub_25B3FFAEC(v269);
            }
            else {
              uint64_t v270 = 0;
            }
            v275 = (_OWORD *)(v269 + 16 * v267);
            v232.n128_u64[1] = *((void *)&v599 + 1);
            _OWORD *v275 = v599;
            if (v204 == v203)
            {
              v277 = (char *)(v269 + 16 * v267);
            }
            else
            {
              unint64_t v276 = v269 + 16 * v267;
              do
              {
                __n128 v232 = *((__n128 *)v204 - 1);
                v277 = (char *)(v276 - 16);
                *(__n128 *)(v276 - 16) = v232;
                v204 -= 16;
                v276 -= 16;
              }
              while (v204 != v203);
            }
            unint64_t v234 = v269 + 16 * v270;
            v204 = (char *)(v275 + 1);
            if (v203) {
              operator delete(v203);
            }
            v203 = v277;
          }
          else
          {
            v232.n128_u64[1] = *((void *)&v599 + 1);
            *(_OWORD *)v204 = v599;
            v204 += 16;
          }
        }
      }
LABEL_394:
      char v237 = 0;
      char v235 = 1;
      uint64_t v236 = 1;
    }
    while ((v238 & 1) == 0);
    v209.i32[0] = 1135869952;
    *(float *)&unint64_t v233 = v480.n128_f32[1] + 360.0;
    unint64_t v511 = v233;
    if (v480.n128_f32[0] <= v480.n128_f32[1]) {
      float v278 = v480.n128_f32[1];
    }
    else {
      float v278 = v480.n128_f32[1] + 360.0;
    }
    if (v600) {
      operator delete(v600);
    }
    v135 = &off_25B5F1000;
    unint64_t v205 = v476;
    if (v603)
    {
      v604 = v603;
      operator delete(v603);
    }
    if (v552[0])
    {
      v552[1] = v552[0];
      operator delete(v552[0]);
    }
    if (v588[0])
    {
      v588[1] = v588[0];
      operator delete(v588[0]);
    }
    if (v540[0])
    {
      v540[1] = v540[0];
      operator delete(v540[0]);
    }
    v279.i32[1] = HIDWORD(v511);
    v279.f32[0] = v278 - v480.n128_f32[0];
    v232.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)v480.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v480.n128_u64[0], 1)), 0), (int8x8_t)__PAIR64__(v511, v480.n128_u32[0]), (int8x8_t)v480.n128_u64[0]);
    v280.i32[1] = v232.n128_i32[1];
    *(float *)v280.i32 = v480.n128_f32[0] + 360.0;
    v232.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v279, v209)), 0), (int8x8_t)v232.n128_u64[0], v280);
    __n128 v480 = v232;
    if (v139) {
LABEL_409:
    }
      operator delete(v139);
LABEL_410:
    v281 = (char *)v516[0] + 16 * v482;
    if ((unint64_t)v136 >= v205)
    {
      uint64_t v282 = (v136 - v469) >> 4;
      unint64_t v283 = v282 + 1;
      if ((unint64_t)(v282 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v205 - (void)v469) >> 3 > v283) {
        unint64_t v283 = (uint64_t)(v205 - (void)v469) >> 3;
      }
      if (v205 - (unint64_t)v469 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v284 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v284 = v283;
      }
      if (v284) {
        unint64_t v284 = (unint64_t)sub_25B3FFAEC(v284);
      }
      else {
        uint64_t v285 = 0;
      }
      v286 = (_OWORD *)(v284 + 16 * v282);
      _OWORD *v286 = *v281;
      if (v136 == v469)
      {
        v289 = (char *)(v284 + 16 * v282);
        v288 = v469;
      }
      else
      {
        unint64_t v287 = v284 + 16 * v282;
        v288 = v469;
        do
        {
          v289 = (char *)(v287 - 16);
          *(_OWORD *)(v287 - 16) = *((_OWORD *)v136 - 1);
          v136 -= 16;
          v287 -= 16;
        }
        while (v136 != v469);
      }
      unint64_t v205 = v284 + 16 * v285;
      v136 = (char *)(v286 + 1);
      if (v288) {
        operator delete(v288);
      }
      v469 = v289;
    }
    else
    {
      *(_OWORD *)v136 = *v281;
      v136 += 16;
    }
    v290 = v597;
    unint64_t v476 = v205;
    if ((unint64_t)v597 >= v598)
    {
      v292 = (char *)v596;
      uint64_t v293 = (v597 - (unsigned char *)v596) >> 3;
      unint64_t v294 = v293 + 1;
      if ((unint64_t)(v293 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v295 = v598 - (void)v596;
      if ((uint64_t)(v598 - (void)v596) >> 2 > v294) {
        unint64_t v294 = v295 >> 2;
      }
      if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v296 = v294;
      }
      if (v296) {
        unint64_t v296 = (unint64_t)sub_25B3FCAD4(v296);
      }
      else {
        uint64_t v297 = 0;
      }
      v298 = (char *)(v296 + 8 * v293);
      __n128 v133 = v480;
      *(void *)v298 = v480.n128_u64[0];
      v291 = v298 + 8;
      if (v290 != v292)
      {
        do
        {
          unint64_t v299 = *((void *)v290 - 1);
          v290 -= 8;
          v133.n128_u64[0] = v299;
          *((void *)v298 - 1) = v299;
          v298 -= 8;
        }
        while (v290 != v292);
        v290 = (char *)v596;
      }
      v596 = v298;
      unint64_t v598 = v296 + 8 * v297;
      if (v290) {
        operator delete(v290);
      }
    }
    else
    {
      __n128 v133 = v480;
      *(void *)v597 = v480.n128_u64[0];
      v291 = v290 + 8;
    }
    v597 = v291;
    if (v204 != v203)
    {
      uint64_t v300 = 0;
      v301 = v556[0];
      if ((unint64_t)((v204 - v203) >> 4) <= 1) {
        uint64_t v302 = 1;
      }
      else {
        uint64_t v302 = (v204 - v203) >> 4;
      }
      do
      {
        v303 = (__n128 *)&v203[16 * v300];
        v304 = (__n128 *)v555[1];
        if (v555[1] >= v301)
        {
          v306 = (__n128 *)v555[0];
          int64_t v307 = ((char *)v555[1] - (char *)v555[0]) >> 4;
          unint64_t v308 = v307 + 1;
          if ((unint64_t)(v307 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((int64_t)((uint64_t)v301 - (unint64_t)v555[0]) >> 3 > v308) {
            unint64_t v308 = (int64_t)((uint64_t)v301 - (unint64_t)v555[0]) >> 3;
          }
          if ((unint64_t)v301 - (unint64_t)v555[0] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v309 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v309 = v308;
          }
          if (v309) {
            unint64_t v309 = (unint64_t)sub_25B3FFAEC(v309);
          }
          else {
            uint64_t v310 = 0;
          }
          v311 = (__n128 *)(v309 + 16 * v307);
          __n128 v133 = *v303;
          __n128 *v311 = *v303;
          v312 = v311;
          if (v304 != v306)
          {
            do
            {
              __n128 v133 = v304[-1];
              v312[-1] = v133;
              --v312;
              --v304;
            }
            while (v304 != v306);
            v304 = (__n128 *)v555[0];
          }
          v301 = (void *)(v309 + 16 * v310);
          v305 = v311 + 1;
          v555[0] = v312;
          v556[0] = v301;
          if (v304) {
            operator delete(v304);
          }
        }
        else
        {
          __n128 v133 = *v303;
          *(__n128 *)v555[1] = *v303;
          v305 = v304 + 1;
        }
        v555[1] = v305;
        v313 = (char *)v557;
        if ((unint64_t)v557 >= *((void *)&v557 + 1))
        {
          v315 = (char *)v556[1];
          uint64_t v316 = (uint64_t)(v557 - (unint64_t)v556[1]) >> 2;
          unint64_t v317 = v316 + 1;
          if ((unint64_t)(v316 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          int64_t v318 = *((void *)&v557 + 1) - (unint64_t)v556[1];
          if ((uint64_t)(*((void *)&v557 + 1) - (unint64_t)v556[1]) >> 1 > v317) {
            unint64_t v317 = v318 >> 1;
          }
          if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v319 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v319 = v317;
          }
          if (v319) {
            unint64_t v319 = (unint64_t)sub_25B3FBC64(v319);
          }
          else {
            uint64_t v320 = 0;
          }
          v321 = (_DWORD *)(v319 + 4 * v316);
          _DWORD *v321 = 1065353216;
          v314 = v321 + 1;
          while (v313 != v315)
          {
            unsigned __int32 v322 = *((_DWORD *)v313 - 1);
            v313 -= 4;
            v133.n128_u32[0] = v322;
            *--v321 = v322;
          }
          v556[1] = v321;
          *((void *)&v557 + 1) = v319 + 4 * v320;
          if (v315) {
            operator delete(v315);
          }
        }
        else
        {
          *(_DWORD *)long long v557 = 1065353216;
          v314 = v313 + 4;
        }
        *(void *)&long long v557 = v314;
        ++v300;
      }
      while (v300 != v302);
    }
    if (v203) {
      operator delete(v203);
    }
    uint64_t v137 = v482 + 1;
    v134 = (char *)v516[0];
  }
  while (v482 + 1 < (unint64_t)(((char *)v516[1] - (char *)v516[0]) >> 4));
LABEL_487:
  sub_25B579E50(v540, (uint64_t *)v555, (uint64_t *)&v556[1], (uint64_t *)v558, (uint64_t *)&v559[1], (uint64_t *)v516, &v596, 2, v133);
  v552[1] = 0;
  v552[0] = 0;
  *(void *)&long long v553 = 0;
  sub_25B57A6A0((_OWORD *)v540[0], (_OWORD *)v540[1], v552);
  uint64_t v462 = v136 - v469;
  v324 = 0;
  if (v136 != v469)
  {
    v325 = 0;
    uint64_t v326 = 0;
    unint64_t v327 = (v136 - v469) >> 4;
    if (v327 <= 1) {
      unint64_t v327 = 1;
    }
    unint64_t v465 = v327;
    unint64_t v466 = 0;
    v471 = v136;
    while (1)
    {
      *(void *)&long long v323 = *((void *)v596 + v326);
      long long v512 = v323;
      v588[1] = 0;
      v588[0] = 0;
      *(void *)&long long v589 = 0;
      sub_25B57A6A0((_OWORD *)v552[0], (_OWORD *)v552[1], v588);
      uint64_t v468 = v326;
      v328 = (char *)v588[1];
      v477 = v324;
      if (v588[1] != v588[0]) {
        break;
      }
      *((void *)&v323 + 1) = *((void *)&v512 + 1);
      float v406 = *((float *)&v512 + 1);
      float v407 = *(float *)&v512;
LABEL_573:
      float v506 = v406;
      if (v328)
      {
        v588[1] = v328;
        operator delete(v328);
      }
      float v408 = v506 + 360.0;
      if (v407 <= v506) {
        float v408 = v506;
      }
      if ((float)(v408 - v407) >= 360.0) {
        *(float *)&long long v323 = v407 + 360.0;
      }
      else {
        *(float *)&long long v323 = v407;
      }
      *((float *)&v323 + 1) = v408;
      if ((unint64_t)v325 >= v466)
      {
        long long v514 = v323;
        uint64_t v410 = (v325 - v324) >> 3;
        unint64_t v411 = v410 + 1;
        if ((unint64_t)(v410 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v466 - (void)v324) >> 2 > v411) {
          unint64_t v411 = (uint64_t)(v466 - (void)v324) >> 2;
        }
        if (v466 - (unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v412 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v412 = v411;
        }
        if (v412) {
          unint64_t v412 = (unint64_t)sub_25B3FCAD4(v412);
        }
        else {
          uint64_t v413 = 0;
        }
        v414 = (char *)(v412 + 8 * v410);
        *((void *)&v323 + 1) = *((void *)&v514 + 1);
        *(void *)v414 = v514;
        uint64_t v409 = (uint64_t)(v414 + 8);
        while (v325 != v324)
        {
          uint64_t v415 = *((void *)v325 - 1);
          v325 -= 8;
          *((void *)v414 - 1) = v415;
          v414 -= 8;
        }
        unint64_t v466 = v412 + 8 * v413;
        if (v324) {
          operator delete(v324);
        }
        v324 = v414;
      }
      else
      {
        *(void *)v325 = v323;
        uint64_t v409 = (uint64_t)(v325 + 8);
      }
      uint64_t v326 = v468 + 1;
      v325 = (char *)v409;
      if (v468 + 1 == v465) {
        goto LABEL_600;
      }
    }
    unint64_t v329 = 0;
    int32x2_t v330 = *(int32x2_t *)&v469[16 * v468];
    float32x2_t v331 = (float32x2_t)vrev64_s32(v330);
    v332 = (float *)&v469[16 * v468 + 8];
    float32x2_t v496 = (float32x2_t)v330;
    float32x2_t v333 = (float32x2_t)vdup_lane_s32(v330, 1);
    v328 = (char *)v588[0];
    long long v334 = v512;
    v474 = v325;
    while (2)
    {
      v335 = (float32x2_t *)&v328[16 * v329];
      float32x2_t v336 = vsub_f32(*v335, v331);
      float32x2_t v337 = vsub_f32(v335[1], v331);
      float32x2_t *v335 = v336;
      v335[1] = v337;
      float32x2_t v338 = vsub_f32(v337, v336);
      float v339 = v337.f32[1];
      float v493 = v337.f32[1] - v336.f32[1];
      float v340 = sqrtf(vmlas_n_f32(v493 * v493, v338.f32[0], v338.f32[0]));
      float v341 = vmuls_lane_f32(-v337.f32[0], v336, 1);
      float v487 = v336.f32[0];
      float v490 = vmlas_n_f32(v341, v337.f32[1], v336.f32[0]);
      float v342 = (float)((float)((float)(*v332 * *v332) * v340) * v340) - (float)(v490 * v490);
      long long v513 = v334;
      int32x2_t v500 = (int32x2_t)v338;
      float v505 = *((float *)&v334 + 1);
      if (v342 <= 0.0)
      {
LABEL_567:
        ++v329;
        v328 = (char *)v588[0];
        float v406 = v505;
        long long v323 = v513;
        float v407 = *(float *)&v513;
        *((float *)&v323 + 1) = v505;
        *(void *)&long long v334 = v323;
        if (v329 >= ((char *)v588[1] - (char *)v588[0]) >> 4) {
          goto LABEL_573;
        }
        continue;
      }
      break;
    }
    v343 = (float32x2_t *)operator new(8uLL);
    v344 = v343;
    float v345 = -(float)(v341 + (float)(v487 * v339));
    float v346 = fabsf(v493);
    *(float *)v347.i32 = v340 * v340;
    float v348 = sqrtf(v342);
    float v349 = -*(float *)v500.i32;
    if (v493 >= 0.0) {
      float v349 = *(float *)v500.i32;
    }
    float v479 = v349;
    float v481 = v346;
    v350.f32[0] = (float)((float)(v349 * v348) + (float)(v490 * v493)) / *(float *)v347.i32;
    float v483 = v348;
    *(float *)&unsigned int v485 = -(float)(v341 + (float)(v487 * v339));
    int32x2_t v488 = v347;
    v350.f32[1] = (float)((float)(v346 * v348) + (float)(v345 * *(float *)v500.i32)) / *(float *)v347.i32;
    float32x2_t *v343 = vadd_f32(v331, v350);
    v351 = (float32x2_t *)sub_25B3FCAD4(2uLL);
    float32x2_t v352 = (float32x2_t)vdup_lane_s32(v500, 0);
    v352.f32[0] = v493;
    v351[1] = vadd_f32(v331, vdiv_f32(vmla_f32(vmul_n_f32(vneg_f32((float32x2_t)__PAIR64__(LODWORD(v481), LODWORD(v479))), v483), v352, (float32x2_t)__PAIR64__(v485, LODWORD(v490))), (float32x2_t)vdup_lane_s32(v488, 0)));
    float32x2_t *v351 = *v344;
    operator delete(v344);
    v354 = 0;
    unint64_t v501 = 0;
    v355 = 0;
    v356 = 0;
    unint64_t v357 = 0;
    v358 = 0;
    for (uint64_t i = 0; i != 2; ++i)
    {
      int32x2_t v360 = (int32x2_t)v351[i];
      if (vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v360, *(float32x2_t *)((char *)v552[0] + 16 * v329)), vsub_f32((float32x2_t)v360, *(float32x2_t *)((char *)v552[0] + 16 * v329 + 8)))) > 0.00001)goto LABEL_509; {
      float v361 = atan2f(vsub_f32((float32x2_t)vdup_lane_s32(v360, 1), v496).f32[0], vsub_f32((float32x2_t)v360, v333).f32[0])/ *((double *)v135 + 286)* 180.0;
      }
      BOOL v362 = *(float *)&v513 < (float)(v361 + 360.0);
      if ((float)(v361 + 360.0) >= v505) {
        BOOL v362 = 0;
      }
      BOOL v363 = v505 > v361 && *(float *)&v513 < v361;
      if (!v363 && !v362)
      {
LABEL_509:
        v365 = v354;
      }
      else
      {
        if ((unint64_t)v354 >= v501)
        {
          uint64_t v366 = v354 - v358;
          unint64_t v367 = v366 + 1;
          if ((unint64_t)(v366 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v501 - (void)v358) >> 1 > v367) {
            unint64_t v367 = (uint64_t)(v501 - (void)v358) >> 1;
          }
          if (v501 - (unint64_t)v358 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v368 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v368 = v367;
          }
          if (v368) {
            unint64_t v368 = (unint64_t)sub_25B3FBC64(v368);
          }
          else {
            uint64_t v369 = 0;
          }
          v370 = (float *)(v368 + 4 * v366);
          float *v370 = v361;
          v365 = v370 + 1;
          while (v354 != v358)
          {
            int v371 = *((_DWORD *)v354-- - 1);
            *((_DWORD *)v370-- - 1) = v371;
          }
          unint64_t v501 = v368 + 4 * v369;
          if (v358) {
            operator delete(v358);
          }
          v358 = v370;
          v135 = &off_25B5F1000;
        }
        else
        {
          float *v354 = v361;
          v365 = v354 + 1;
        }
        if ((unint64_t)v356 >= v357)
        {
          uint64_t v372 = v356 - v355;
          unint64_t v373 = v372 + 1;
          if ((unint64_t)(v372 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v357 - (void)v355) >> 2 > v373) {
            unint64_t v373 = (uint64_t)(v357 - (void)v355) >> 2;
          }
          if (v357 - (unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v374 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v374 = v373;
          }
          if (v374) {
            unint64_t v374 = (unint64_t)sub_25B3FCAD4(v374);
          }
          else {
            uint64_t v375 = 0;
          }
          v376 = (float32x2_t *)(v374 + 8 * v372);
          float32x2_t *v376 = v351[i];
          v377 = v376 + 1;
          while (v356 != v355)
          {
            float32x2_t v378 = v356[-1];
            --v356;
            v376[-1] = v378;
            --v376;
          }
          unint64_t v357 = v374 + 8 * v375;
          if (v355) {
            operator delete(v355);
          }
          v355 = v376;
          v356 = v377;
          v135 = &off_25B5F1000;
        }
        else
        {
          *v356++ = v351[i];
        }
      }
      v354 = v365;
    }
    if ((char *)v356 - (char *)v355 == 8)
    {
      float32x2_t v379 = (float32x2_t)vdup_n_s32(0x43B40000u);
      int8x8_t v380 = (int8x8_t)vcge_f32(*(float32x2_t *)&v513, v379);
      int8x8_t v381 = (int8x8_t)vadd_f32(*(float32x2_t *)&v513, (float32x2_t)vdup_n_s32(0xC3B40000));
      *(float *)v353.i32 = *v358 + -360.0;
      if (*v358 < 360.0) {
        v353.i32[0] = *(__int32 *)v358;
      }
      if (*(float *)v353.i32 < 0.0) {
        *(float *)v353.i32 = *(float *)v353.i32 + 360.0;
      }
      float32x2_t v382 = (float32x2_t)vbsl_s8(v380, v381, *(int8x8_t *)&v513);
      float32x2_t v383 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_f32(v382), (int8x8_t)vadd_f32(v382, v379), (int8x8_t)v382);
      float32x2_t v384 = (float32x2_t)vdup_lane_s32(v353, 0);
      int8x8_t v385 = (int8x8_t)vcgt_f32(v383, v384);
      float32x2_t v386 = (float32x2_t)vbsl_s8(v385, (int8x8_t)v383, (int8x8_t)v384);
      float32x2_t v387 = (float32x2_t)vbsl_s8(v385, (int8x8_t)v384, (int8x8_t)v383);
      float32x2_t v388 = vsub_f32(v386, v387);
      float32x2_t v389 = vsub_f32(vadd_f32(v387, v379), v386);
      float32x2_t v390 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v388, v389), (int8x8_t)v389, (int8x8_t)v388);
      v136 = v471;
      v332 = (float *)&v469[16 * v468 + 8];
      v325 = v474;
      if (v390.f32[0] >= 0.1 && v390.f32[1] >= 0.1)
      {
        int32x2_t v391 = (int32x2_t)vmaxnm_f32(v390, (float32x2_t)vdup_n_s32(0x3A83126Fu));
        __asm { FMOV            V3.2S, #10.0 }
        int32x2_t v395 = vcgt_f32(vdiv_f32((float32x2_t)vrev64_s32(v391), (float32x2_t)v391), _D3);
        if (vorr_s8((int8x8_t)vdup_lane_s32(v395, 1), (int8x8_t)v395).u8[0])
        {
          BOOL v396 = (vcgt_f32((float32x2_t)v391, (float32x2_t)vdup_lane_s32(v391, 1)).u8[0] & 1) == 0;
          float v397 = v505;
          if (!v396) {
            float v397 = *v358;
          }
          float v505 = v397;
          long long v398 = v513;
          if (v396) {
            *(float *)&long long v398 = *v358;
          }
          long long v513 = v398;
          v399 = (float32x2_t *)((char *)v552[0] + 16 * v329);
          float32x2_t v400 = *v355;
          float32x2_t v401 = vsub_f32(*v399, *v355);
          float v402 = sqrtf(vaddv_f32(vmul_f32(v401, v401)));
          if (v402 >= 0.01)
          {
            float32x2_t v403 = v399[1];
            float32x2_t v404 = vsub_f32(v403, v400);
            float v405 = sqrtf(vaddv_f32(vmul_f32(v404, v404)));
            if (v405 >= 0.01)
            {
              if (v402 <= v405) {
                float32x2_t *v399 = v400;
              }
              else {
                float32x2_t v403 = *v355;
              }
              v399[1] = v403;
              if (!v355)
              {
LABEL_564:
                if (v358) {
                  operator delete(v358);
                }
                operator delete(v351);
                v324 = v477;
                goto LABEL_567;
              }
LABEL_563:
              operator delete(v355);
              goto LABEL_564;
            }
          }
        }
      }
    }
    else
    {
      v136 = v471;
      v332 = (float *)&v469[16 * v468 + 8];
      v325 = v474;
    }
    if (!v355) {
      goto LABEL_564;
    }
    goto LABEL_563;
  }
  uint64_t v409 = 0;
LABEL_600:
  long long v568 = 0uLL;
  v569[0] = 0;
  sub_25B40F7EC(&v568, v552[0], (uint64_t)v552[1], ((char *)v552[1] - (char *)v552[0]) >> 4);
  long long v570 = 0uLL;
  v569[1] = 0;
  sub_25B3FCA58(&v569[1], v541[1], (uint64_t)v542[0], ((char *)v542[0] - (char *)v541[1]) >> 2);
  long long v571 = 0uLL;
  v572[0] = 0;
  sub_25B40F7EC(&v571, v543, v544, (uint64_t)(v544 - (void)v543) >> 4);
  long long v573 = 0uLL;
  v572[1] = 0;
  sub_25B3FCA58(&v572[1], (const void *)v545, *((uint64_t *)&v545 + 1), (uint64_t)(*((void *)&v545 + 1) - v545) >> 2);
  long long v574 = 0uLL;
  v575[0] = 0;
  sub_25B579DB8(&v574, v469, (uint64_t)v136, v462 >> 4);
  long long v576 = 0uLL;
  v575[1] = 0;
  sub_25B400390(&v575[1], v324, v409, (v409 - (uint64_t)v324) >> 3);
  if (v324) {
    operator delete(v324);
  }
  if (v552[0])
  {
    v552[1] = v552[0];
    operator delete(v552[0]);
  }
  if ((void)v545) {
    operator delete((void *)v545);
  }
  if (v543) {
    operator delete(v543);
  }
  if (v541[1]) {
    operator delete(v541[1]);
  }
  if (v540[0]) {
    operator delete(v540[0]);
  }
  if (v596) {
    operator delete(v596);
  }
  if (v469) {
    operator delete(v469);
  }
  if (v559[1]) {
    operator delete(v559[1]);
  }
  if (v558[0]) {
    operator delete(v558[0]);
  }
  if (v556[1]) {
    operator delete(v556[1]);
  }
  if (v555[0]) {
    operator delete(v555[0]);
  }
  v515 = objc_msgSend_array(MEMORY[0x263EFF980], v416, v417);
  v502 = (void *)v568;
  if (*((void *)&v568 + 1) != (void)v568)
  {
    unint64_t v421 = 0;
    *(float *)v420.i32 = (float)v461 * 0.5;
    float32x2_t v422 = (float32x2_t)vdup_lane_s32(v420, 0);
    unint64_t v423 = (uint64_t)(*((void *)&v568 + 1) - v568) >> 4;
    v424 = (float32x2_t *)(v568 + 8);
    do
    {
      v425 = objc_alloc_init(RS3DSurface);
      float32x2_t v426 = vsub_f32(v424[-1], v422);
      if (v495)
      {
        float v427 = v495[1].f32[1];
        long long v428 = *(_OWORD *)v495[8].f32;
        v429 = (void *)vmla_n_f32(v495[8], v426, v427);
        float32x2_t v430 = vsub_f32(*v424, v422);
      }
      else
      {
        v429 = (void *)vmla_f32(0, 0, v426);
        float32x2_t v430 = vsub_f32(*v424, v422);
        *(void *)&long long v428 = 0;
        float v427 = 0.0;
      }
      v555[0] = v429;
      v555[1] = (void *)vmla_n_f32(*(float32x2_t *)&v428, v430, v427);
      sub_25B477C9C((uint64_t)v555, v425);
      if (v425)
      {
        v425->type = 0;
        v425->confidence = *((float *)v569[1] + v421);
      }
      objc_msgSend_addObject_(v515, v431, (uint64_t)v425);

      ++v421;
      v424 += 2;
    }
    while (v421 < v423);
  }
  v507 = objc_msgSend_array(MEMORY[0x263EFF980], v418, v419);
  v497 = (void *)v571;
  if (*((void *)&v571 + 1) != (void)v571)
  {
    unint64_t v435 = 0;
    *(float *)v434.i32 = (float)v461 * 0.5;
    float32x2_t v436 = (float32x2_t)vdup_lane_s32(v434, 0);
    unint64_t v437 = (uint64_t)(*((void *)&v571 + 1) - v571) >> 4;
    v438 = (float32x2_t *)(v571 + 8);
    do
    {
      v439 = objc_alloc_init(RS3DSurface);
      float32x2_t v440 = vsub_f32(v438[-1], v436);
      if (v495)
      {
        float v441 = v495[1].f32[1];
        long long v442 = *(_OWORD *)v495[8].f32;
        v443 = (void *)vmla_n_f32(v495[8], v440, v441);
        float32x2_t v444 = vsub_f32(*v438, v436);
      }
      else
      {
        v443 = (void *)vmla_f32(0, 0, v440);
        float32x2_t v444 = vsub_f32(*v438, v436);
        *(void *)&long long v442 = 0;
        float v441 = 0.0;
      }
      v555[0] = v443;
      v555[1] = (void *)vmla_n_f32(*(float32x2_t *)&v442, v444, v441);
      sub_25B477C9C((uint64_t)v555, v439);
      if (v439)
      {
        v439->type = 3;
        v439->confidence = *((float *)v572[1] + v435);
      }
      objc_msgSend_addObject_(v507, v445, (uint64_t)v439);

      ++v435;
      v438 += 2;
    }
    while (v435 < v437);
  }
  v446 = objc_msgSend_array(MEMORY[0x263EFF980], v432, v433);
  v494 = (void *)v574;
  if (*((void *)&v574 + 1) != (void)v574)
  {
    unint64_t v448 = 0;
    *(float *)v447.i32 = (float)v461 * 0.5;
    unint64_t v449 = (uint64_t)(*((void *)&v574 + 1) - v574) >> 4;
    v450 = (float *)(v574 + 8);
    uint64_t v451 = 4;
    float32x2_t v452 = (float32x2_t)vdup_lane_s32(v447, 0);
    while (1)
    {
      v453 = objc_alloc_init(RS3DCurvedSurface);
      v454 = v453;
      if (v495) {
        break;
      }
      float v455 = 0.0;
      if (v453) {
        goto LABEL_646;
      }
LABEL_647:
      if (!v495)
      {
        *(void *)&long long v457 = 0;
        float v456 = 0.0;
        if (!v453) {
          goto LABEL_650;
        }
LABEL_649:
        *(float32x2_t *)&v453->_circleCenter[4] = vmla_n_f32(*(float32x2_t *)&v457, vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(v450 - 2)), v452), v456);
        v458 = (char *)v575[1];
        LODWORD(v453->_startOrientation) = *((void *)v575[1] + v448);
        v453->_endOrientation = *(float *)&v458[v451];
        goto LABEL_650;
      }
      float v456 = v495[1].f32[1];
      long long v457 = *(_OWORD *)v495[8].f32;
      if (v453) {
        goto LABEL_649;
      }
LABEL_650:
      sub_25B530690((float32x2_t *)v453);
      if (v454) {
        v454->super.type = 0;
      }
      objc_msgSend_addObject_(v446, v459, (uint64_t)v454);

      ++v448;
      v451 += 8;
      v450 += 4;
      if (v448 >= v449) {
        goto LABEL_658;
      }
    }
    float v455 = v495[1].f32[1];
    if (!v453) {
      goto LABEL_647;
    }
LABEL_646:
    v453->_radius = *v450 * v455;
    goto LABEL_647;
  }
LABEL_658:
  sub_25B4E664C((uint64_t)v463, v515);
  sub_25B4E666C((uint64_t)v463, v507);
  sub_25B4E667C((uint64_t)v463, v446);
  sub_25B4E937C((unint64_t)v463);

  if (v575[1]) {
    operator delete(v575[1]);
  }
  if (v494) {
    operator delete(v494);
  }
  if (v572[1]) {
    operator delete(v572[1]);
  }
  if (v497) {
    operator delete(v497);
  }
  if (v569[1]) {
    operator delete(v569[1]);
  }
  if (v502) {
    operator delete(v502);
  }
LABEL_670:
  *(void *)&long long v568 = &v518;
  sub_25B56A548((void ***)&v568);
  if (v517[1])
  {
    v517[2] = v517[1];
    operator delete(v517[1]);
  }
  if (v516[0])
  {
    v516[1] = v516[0];
    operator delete(v516[0]);
  }
  if (v528) {
    operator delete(v528);
  }
  if (v531) {
    operator delete(v531);
  }
  if (v534) {
    operator delete(v534);
  }
  if (__p) {
    operator delete(__p);
  }
LABEL_682:
  uint64_t v9 = v464;
LABEL_683:

  return v463;
}

void sub_25B569E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  STACK[0x540] = (unint64_t)&STACK[0x860];
  sub_25B56A548((void ***)&STACK[0x540]);
  if (a17) {
    operator delete(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  STACK[0x770] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x7F0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x7F0]);
  }
  if (STACK[0x878]) {
    operator delete((void *)STACK[0x878]);
  }
  if (a71) {
    operator delete(a71);
  }
  if (STACK[0x208]) {
    operator delete((void *)STACK[0x208]);
  }
  if (STACK[0x220]) {
    operator delete((void *)STACK[0x220]);
  }
  if (STACK[0x238]) {
    operator delete((void *)STACK[0x238]);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_25B56A4C4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  size_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_25B56A548(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 152;
      v7 = v4 - 152;
      uint64_t v8 = v4 - 152;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        v7 = v8;
      }
      while (!v10);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_25B56A608(uint64_t a1)
{
  size_t v5 = (void **)(a1 + 48);
  sub_25B56A548(&v5);
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_25B56A664(void *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  id v7 = a1;
  unint64_t v8 = (a2[1] - *a2) >> 7;
  LODWORD(v65) = -1082130432;
  sub_25B400C5C(&__p, v8, &v65);
  sub_25B413A88(v64, v8, (uint64_t)&__p);
  int32x2_t v58 = a3;
  float32x2_t v60 = a4;
  if (__p)
  {
    uint64_t v62 = (uint64_t *)__p;
    operator delete(__p);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 128;
    uint64_t v13 = 24;
    while (1)
    {
      unint64_t v14 = v11++;
      if (v11 < (v10 - v9) >> 7) {
        break;
      }
      unint64_t v23 = (v10 - v9) >> 7;
LABEL_16:
      v13 += 24;
      v12 += 128;
      if (v11 >= v23) {
        goto LABEL_17;
      }
    }
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    unint64_t v59 = v11;
    while (1)
    {
      __p = 0;
      uint64_t v62 = 0;
      unint64_t v63 = 0;
      sub_25B443EE4((uint64_t)&__p, (float32x4_t *)(v9 + (v14 << 7)), (float32x4_t *)(v9 + v15));
      if ((objc_msgSend_isEqualToString_(v7, v17, @"Chair") & 1) != 0
        || objc_msgSend_isEqualToString_(v7, v18, @"Table"))
      {
        int v20 = v63;
      }
      else
      {
        if (!objc_msgSend_isEqualToString_(v7, v19, @"Storage")) {
          goto LABEL_11;
        }
        int v20 = (int)__p;
      }
      uint64_t v21 = v64[0];
      *(_DWORD *)(*(void *)(v64[0] + v16) + 4 * v14) = v20;
      *(_DWORD *)(*(void *)(v21 + 24 * v14) + 4 * v11) = v20;
LABEL_11:
      ++v11;
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      uint64_t v22 = v10 - *a2;
      v16 += 24;
      v15 += 128;
      if (v11 >= v22 >> 7)
      {
        unint64_t v23 = v22 >> 7;
        unint64_t v11 = v59;
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  sub_25B400BE4(&__p, (v58[1] - *v58) >> 2);
  float32x2_t v24 = (uint64_t *)__p;
  float32x2_t v25 = v62;
  float v26 = v60;
  if (__p != v62)
  {
    uint64_t v27 = 0;
    float v28 = (uint64_t *)__p;
    do
      *v28++ = v27++;
    while (v28 != v25);
  }
  unint64_t v29 = 126 - 2 * __clz(v25 - v24);
  float32x2_t v65 = v58;
  if (v25 == v24) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_25B56AB0C((uint64_t)v24, v25, &v65, v30, 1);
  v60[1] = *v60;
  float32x2_t v31 = (uint64_t *)__p;
  if (__p != v62)
  {
    do
    {
      uint64_t v32 = *v31;
      unint64_t v34 = (_DWORD *)v26[1];
      unint64_t v33 = v26[2];
      if ((unint64_t)v34 >= v33)
      {
        unint64_t v36 = (_DWORD *)*v26;
        uint64_t v37 = ((uint64_t)v34 - *v26) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v39 = v33 - (void)v36;
        if (v39 >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        BOOL v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v40) {
          unint64_t v41 = v38;
        }
        if (v41)
        {
          unint64_t v41 = (unint64_t)sub_25B3FBC64(v41);
          unint64_t v36 = (_DWORD *)*v26;
          unint64_t v34 = (_DWORD *)v26[1];
        }
        else
        {
          uint64_t v42 = 0;
        }
        uint64_t v43 = (_DWORD *)(v41 + 4 * v37);
        *uint64_t v43 = v32;
        uint64_t v35 = v43 + 1;
        while (v34 != v36)
        {
          int v44 = *--v34;
          *--uint64_t v43 = v44;
        }
        *float v26 = v43;
        v26[1] = v35;
        v26[2] = v41 + 4 * v42;
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        _DWORD *v34 = v32;
        uint64_t v35 = v34 + 1;
      }
      v26[1] = v35;
      float32x4_t v45 = (uint64_t *)__p;
      uint64_t v46 = v62;
      if ((unint64_t)((char *)v62 - (unsigned char *)__p) < 9)
      {
        float32x2_t v31 = 0;
        unint64_t v47 = 0;
        unint64_t v48 = 0;
        unint64_t v49 = 0;
        if (!__p) {
          goto LABEL_63;
        }
      }
      else
      {
        float32x2_t v31 = 0;
        unint64_t v47 = 0;
        unint64_t v48 = 0;
        unint64_t v49 = 0;
        unint64_t v50 = 1;
        do
        {
          uint64_t v51 = v45[v50];
          if (*(float *)(*(void *)(v64[0] + 24 * v32) + 4 * v51) <= 0.25)
          {
            if ((unint64_t)v49 >= v48)
            {
              uint64_t v52 = v49 - v31;
              unint64_t v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v48 - (void)v31) >> 2 > v53) {
                unint64_t v53 = (uint64_t)(v48 - (void)v31) >> 2;
              }
              if (v48 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v53;
              }
              if (v54)
              {
                unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
                unint64_t v49 = v47;
              }
              else
              {
                uint64_t v55 = 0;
              }
              float v56 = (uint64_t *)(v54 + 8 * v52);
              *float v56 = v51;
              unint64_t v47 = v56 + 1;
              while (v49 != v31)
              {
                uint64_t v57 = *--v49;
                *--float v56 = v57;
              }
              unint64_t v48 = v54 + 8 * v55;
              if (v31) {
                operator delete(v31);
              }
              float32x2_t v31 = v56;
            }
            else
            {
              *unint64_t v49 = v51;
              unint64_t v47 = v49 + 1;
            }
            float32x4_t v45 = (uint64_t *)__p;
            uint64_t v46 = v62;
            unint64_t v49 = v47;
          }
          ++v50;
        }
        while (v50 < v46 - v45);
        if (!v45) {
          goto LABEL_63;
        }
      }
      uint64_t v62 = v45;
      operator delete(v45);
      unint64_t v49 = v47;
LABEL_63:
      __p = v31;
      uint64_t v62 = v49;
      unint64_t v63 = v48;
      float v26 = v60;
    }
    while (v31 != v49);
  }
  if (v31)
  {
    uint64_t v62 = v31;
    operator delete(v31);
  }
  __p = v64;
  sub_25B413C78((void ***)&__p);
}

void sub_25B56AA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, uint64_t a14, char a15)
{
  __p = &a15;
  sub_25B413C78((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_25B56AB0C(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t v11 = (uint64_t *)result;
  while (2)
  {
    uint64_t v12 = a2 - 1;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v45 = *v13;
                if (*(float *)(**a3 + (*v12 << 32 >> 30)) > *(float *)(**a3 + (*v13 << 32 >> 30)))
                {
                  *uint64_t v13 = *v12;
                  *uint64_t v12 = v45;
                }
                break;
              case 3uLL:
                uint64_t v46 = **a3;
                float result = (uint64_t)sub_25B56B36C(v13, v13 + 1, a2 - 1, v46);
                break;
              case 4uLL:
                float result = (uint64_t)sub_25B56B40C(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                unint64_t v47 = v13 + 1;
                unint64_t v48 = v13 + 2;
                unint64_t v49 = v13 + 3;
                float result = (uint64_t)sub_25B56B40C(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v50 = v13[3];
                uint64_t v51 = **a3;
                if (*(float *)(v51 + (*v12 << 32 >> 30)) > *(float *)(v51 + 4 * (int)v50))
                {
                  *unint64_t v49 = *v12;
                  *uint64_t v12 = v50;
                  uint64_t v52 = *v49;
                  uint64_t v53 = *v48;
                  float v54 = *(float *)(v51 + (*v49 << 32 >> 30));
                  if (v54 > *(float *)(v51 + (*v48 << 32 >> 30)))
                  {
                    *unint64_t v48 = v52;
                    *unint64_t v49 = v53;
                    uint64_t v55 = *v47;
                    if (v54 > *(float *)(v51 + (*v47 << 32 >> 30)))
                    {
                      v13[1] = v52;
                      v13[2] = v55;
                      uint64_t v56 = *v13;
                      if (v54 > *(float *)(v51 + (*v13 << 32 >> 30)))
                      {
                        *uint64_t v13 = v52;
                        v13[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                uint64_t v57 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v58 = **a3;
                  uint64_t v59 = 8;
                  float32x2_t v60 = v13;
                  do
                  {
                    uint64_t v62 = *v60;
                    uint64_t v61 = v60[1];
                    float32x2_t v60 = v57;
                    float v63 = *(float *)(v58 + 4 * (int)v61);
                    if (v63 > *(float *)(v58 + 4 * (int)v62))
                    {
                      uint64_t v64 = v59;
                      do
                      {
                        *(uint64_t *)((char *)v13 + v64) = v62;
                        uint64_t v65 = v64 - 8;
                        if (v64 == 8)
                        {
                          float32x2_t v66 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v62 = *(uint64_t *)((char *)v13 + v64 - 16);
                        v64 -= 8;
                      }
                      while (v63 > *(float *)(v58 + 4 * (int)v62));
                      float32x2_t v66 = (uint64_t *)((char *)v13 + v65);
LABEL_78:
                      *float32x2_t v66 = v61;
                    }
                    uint64_t v57 = v60 + 1;
                    v59 += 8;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              uint64_t v98 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v99 = **a3;
                do
                {
                  uint64_t v101 = *v11;
                  uint64_t v100 = v11[1];
                  unint64_t v11 = v98;
                  float v102 = *(float *)(v99 + 4 * (int)v100);
                  if (v102 > *(float *)(v99 + 4 * (int)v101))
                  {
                    do
                    {
                      *uint64_t v98 = v101;
                      uint64_t v101 = *(v98 - 2);
                      --v98;
                    }
                    while (v102 > *(float *)(v99 + 4 * (int)v101));
                    *uint64_t v98 = v100;
                  }
                  uint64_t v98 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v67 = (v15 - 2) >> 1;
              float32x2_t v68 = *a3;
              int64_t v69 = v67;
              do
              {
                int64_t v70 = v69;
                if (v67 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  float32x2_t v72 = &v13[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  uint64_t v74 = *v68;
                  if (v73 < (uint64_t)v15 && *(float *)(v74 + (*v72 << 32 >> 30)) > *(float *)(v74 + 4 * (int)v72[1]))
                  {
                    ++v72;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  uint64_t v75 = &v13[v70];
                  float result = *v72;
                  uint64_t v76 = *v75;
                  float v77 = *(float *)(v74 + (*v75 << 32 >> 30));
                  if (*(float *)(v74 + (*v72 << 32 >> 30)) <= v77)
                  {
                    do
                    {
                      uint64_t v78 = v72;
                      *uint64_t v75 = result;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v79 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      float32x2_t v72 = &v13[v71];
                      uint64_t v80 = v79 + 2;
                      if (v80 < (uint64_t)v15
                        && *(float *)(v74 + (*v72 << 32 >> 30)) > *(float *)(v74 + 4 * (int)v72[1]))
                      {
                        ++v72;
                        uint64_t v71 = v80;
                      }
                      float result = *v72;
                      uint64_t v75 = v78;
                    }
                    while (*(float *)(v74 + (*v72 << 32 >> 30)) <= v77);
                    *uint64_t v78 = v76;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v81 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *v13;
                int v84 = *a3;
                id v85 = v13;
                do
                {
                  float v86 = v85;
                  v85 += v82 + 1;
                  uint64_t v87 = 2 * v82;
                  uint64_t v82 = (2 * v82) | 1;
                  uint64_t v88 = v87 + 2;
                  if (v88 < v81)
                  {
                    float result = v85[1];
                    if (*(float *)(*v84 + (*v85 << 32 >> 30)) > *(float *)(*v84 + 4 * (int)result))
                    {
                      ++v85;
                      uint64_t v82 = v88;
                    }
                  }
                  *float v86 = *v85;
                }
                while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == --a2)
                {
                  *id v85 = v83;
                }
                else
                {
                  *id v85 = *a2;
                  *a2 = v83;
                  uint64_t v89 = (char *)v85 - (char *)v13 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    unint64_t v91 = &v13[v90];
                    uint64_t v92 = *v91;
                    uint64_t v93 = *v85;
                    uint64_t v94 = *v84;
                    float v95 = *(float *)(v94 + (*v85 << 32 >> 30));
                    if (*(float *)(v94 + (*v91 << 32 >> 30)) > v95)
                    {
                      do
                      {
                        unint64_t v96 = v91;
                        *id v85 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = &v13[v90];
                        uint64_t v92 = *v91;
                        id v85 = v96;
                      }
                      while (*(float *)(v94 + (*v91 << 32 >> 30)) > v95);
                      *unint64_t v96 = v93;
                    }
                  }
                }
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x401)
          {
            sub_25B56B36C(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B56B36C(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B56B36C(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            float result = (uint64_t)sub_25B56B36C(v17 - 1, v17, &v11[v16 + 1], **a3);
            uint64_t v19 = *v11;
            *unint64_t v11 = *v17;
            *uint64_t v17 = v19;
          }
          else
          {
            float result = (uint64_t)sub_25B56B36C(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          uint64_t v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          float v22 = *(float *)(v21 + 4 * (int)v20);
          if (*(float *)(v21 + (*(v11 - 1) << 32 >> 30)) > v22) {
            goto LABEL_13;
          }
          if (v22 <= *(float *)(v21 + (*v12 << 32 >> 30)))
          {
            uint64_t v37 = v11 + 1;
            do
            {
              uint64_t v13 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v22 <= *(float *)(v21 + (*v13 << 32 >> 30)));
          }
          else
          {
            uint64_t v13 = v11;
            do
            {
              uint64_t v36 = v13[1];
              ++v13;
            }
            while (v22 <= *(float *)(v21 + 4 * (int)v36));
          }
          unint64_t v38 = a2;
          if (v13 < a2)
          {
            unint64_t v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v22 > *(float *)(v21 + 4 * (int)v39));
          }
          if (v13 < v38)
          {
            uint64_t v40 = *v13;
            uint64_t v41 = *v38;
            do
            {
              *uint64_t v13 = v41;
              *unint64_t v38 = v40;
              do
              {
                uint64_t v42 = v13[1];
                ++v13;
                uint64_t v40 = v42;
              }
              while (v22 <= *(float *)(v21 + 4 * (int)v42));
              do
              {
                uint64_t v43 = *--v38;
                uint64_t v41 = v43;
              }
              while (v22 > *(float *)(v21 + 4 * (int)v43));
            }
            while (v13 < v38);
          }
          int v44 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *unint64_t v11 = *v44;
          }
          a5 = 0;
          uint64_t *v44 = v20;
        }
        float v22 = *(float *)(v21 + 4 * (int)v20);
LABEL_13:
        unint64_t v23 = v11;
        do
        {
          float32x2_t v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          uint64_t v25 = v26;
        }
        while (*(float *)(v21 + 4 * (int)v26) > v22);
        uint64_t v27 = a2;
        if (v24 == v11)
        {
          uint64_t v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(float *)(v21 + 4 * (int)v29) <= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(float *)(v21 + 4 * (int)v28) <= v22);
        }
        if (v23 < v27)
        {
          uint64_t v30 = *v27;
          float32x2_t v31 = v23;
          uint64_t v32 = v27;
          do
          {
            *float32x2_t v31 = v30;
            *uint64_t v32 = v25;
            do
            {
              float32x2_t v24 = v31;
              uint64_t v33 = v31[1];
              ++v31;
              uint64_t v25 = v33;
            }
            while (*(float *)(v21 + 4 * (int)v33) > v22);
            do
            {
              uint64_t v34 = *--v32;
              uint64_t v30 = v34;
            }
            while (*(float *)(v21 + 4 * (int)v34) <= v22);
          }
          while (v31 < v32);
        }
        if (v24 != v11) {
          *unint64_t v11 = *v24;
        }
        *float32x2_t v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        float result = sub_25B56AB0C(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v24 + 1;
      }
      BOOL v35 = sub_25B56B4D8(v11, v24, a3);
      uint64_t v13 = v24 + 1;
      float result = sub_25B56B4D8(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_25B56B36C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + (*a2 << 32 >> 30));
  float v7 = *(float *)(a4 + (*result << 32 >> 30));
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + (*a3 << 32 >> 30));
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *result;
      if (*(float *)(a4 + (*a2 << 32 >> 30)) > *(float *)(a4 + (*result << 32 >> 30)))
      {
        *float result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *float result = v4;
      *a2 = v5;
      if (*(float *)(a4 + (*a3 << 32 >> 30)) <= v7) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *float result = v8;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *sub_25B56B40C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  float result = sub_25B56B36C(a1, a2, a3, **a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(float *)(v12 + (*a4 << 32 >> 30)) > *(float *)(v12 + (*a3 << 32 >> 30)))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(float *)(v12 + (*a3 << 32 >> 30)) > *(float *)(v12 + (*a2 << 32 >> 30)))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(float *)(v12 + (*a2 << 32 >> 30)) > *(float *)(v12 + (*a1 << 32 >> 30)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL sub_25B56B4D8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * (int)v8) > *(float *)(**a3 + (*a1 << 32 >> 30)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B56B36C(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B56B40C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 1;
      float v22 = a1 + 2;
      unint64_t v23 = a1 + 3;
      sub_25B56B40C(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v24 = *(a2 - 1);
      uint64_t v25 = a1[3];
      uint64_t v26 = **a3;
      if (*(float *)(v26 + 4 * (int)v24) > *(float *)(v26 + 4 * (int)v25))
      {
        *unint64_t v23 = v24;
        *(a2 - 1) = v25;
        uint64_t v27 = *v23;
        uint64_t v28 = *v22;
        float v29 = *(float *)(v26 + (*v23 << 32 >> 30));
        if (v29 > *(float *)(v26 + (*v22 << 32 >> 30)))
        {
          *float v22 = v27;
          *unint64_t v23 = v28;
          uint64_t v30 = *v21;
          if (v29 > *(float *)(v26 + (*v21 << 32 >> 30)))
          {
            a1[1] = v27;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (v29 > *(float *)(v26 + (*a1 << 32 >> 30)))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B56B36C(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + (*v11 << 32 >> 30));
    if (v17 > *(float *)(v13 + (*v10 << 32 >> 30)))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= *(float *)(v13 + 4 * (int)v16))
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      uint64_t *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

float sub_25B56B744(float32x4_t *a1, float *a2)
{
  uint64_t v4 = operator new(0xCuLL);
  uint64_t v5 = 0;
  v4[2] = 4;
  *(void *)uint64_t v4 = 0x300000001;
  float v6 = a2[1];
  float v7 = a2[2];
  float v8 = sqrt(v7 * v7 + *a2 * *a2 + v6 * v6);
  float v9 = *a2 / v8;
  float v10 = v6 / v8;
  float v11 = v7 / v8;
  float v12 = -1.0;
  float v13 = 0.0;
  do
  {
    float32x4_t v14 = vsubq_f32(*a1, a1[v4[v5]]);
    float v15 = sqrt(v14.f32[2] * v14.f32[2] + v14.f32[0] * v14.f32[0] + v14.f32[1] * v14.f32[1]);
    float v16 = fabsf((float)((float)(v10 * (float)(v14.f32[1] / v15)) + (float)((float)(v14.f32[0] / v15) * v9))+ (float)((float)(v14.f32[2] / v15) * v11));
    if (v16 > v12)
    {
      float v12 = v16;
      float v13 = v15;
    }
    ++v5;
  }
  while (v5 != 3);
  operator delete(v4);
  return v13;
}

void sub_25B56B850(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  float v6 = (void *)a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
  unint64_t v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      uint64_t v20 = (void *)(v5 + 24 * a2);
      if (v6 != v20)
      {
        uint64_t v21 = (void *)a1[1];
        do
        {
          unint64_t v23 = (void *)*(v21 - 3);
          v21 -= 3;
          float v22 = v23;
          if (v23)
          {
            *(v6 - 2) = v22;
            operator delete(v22);
          }
          float v6 = v21;
        }
        while (v21 != v20);
      }
      a1[1] = (uint64_t)v20;
    }
  }
  else
  {
    uint64_t v10 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v6) >> 3) >= v8)
    {
      uint64_t v24 = &v6[3 * v8];
      uint64_t v25 = 24 * a2 - 8 * (((uint64_t)v6 - *a1) >> 3);
      do
      {
        void *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_25B3FCA58(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v6 += 3;
        v25 -= 24;
      }
      while (v25);
      a1[1] = (uint64_t)v24;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        sub_25B3FBC4C();
      }
      float v29 = a1 + 2;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v5) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= a2) {
        uint64_t v12 = a2;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      float32x4_t v14 = (char *)sub_25B413D74(v13);
      float v15 = &v14[24 * v7];
      v26[0] = v14;
      v26[1] = v15;
      uint64_t v27 = v15;
      uint64_t v28 = &v14[24 * v16];
      uint64_t v17 = 3 * a2;
      uint64_t v18 = &v14[24 * a2];
      uint64_t v19 = 8 * v17 - 24 * v7;
      do
      {
        *(void *)float v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = 0;
        sub_25B3FCA58(v15, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v15 += 24;
        v19 -= 24;
      }
      while (v19);
      uint64_t v27 = v18;
      sub_25B43EA54(a1, v26);
      sub_25B43EAC4((uint64_t)v26);
    }
  }
}

void sub_25B56B9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void **sub_25B56BA20(void **a1)
{
  uint64_t v3 = a1 + 6;
  sub_25B413C78(&v3);
  uint64_t v3 = a1 + 3;
  sub_25B413C78(&v3);
  uint64_t v3 = a1;
  sub_25B413C78(&v3);
  return a1;
}

_OWORD *sub_25B56BA78(_OWORD *result, _OWORD *a2, float32x2_t **a3, float32x2_t a4, float a5)
{
  uint64_t v5 = 0;
  long long v6 = a2[5];
  v28[4] = a2[4];
  v28[5] = v6;
  long long v7 = a2[7];
  v28[6] = a2[6];
  v28[7] = v7;
  long long v8 = a2[1];
  v28[0] = *a2;
  v28[1] = v8;
  long long v9 = a2[3];
  v28[2] = a2[2];
  v28[3] = v9;
  do
  {
    uint64_t v10 = (float *)&v28[v5];
    float32x2_t v11 = vsub_f32(*(float32x2_t *)&v28[v5], a4);
    v10[2] = *((float *)&v28[v5] + 2) - a5;
    *(float32x2_t *)uint64_t v10 = v11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v12 = 0;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  *BOOL result = 0u;
  result[1] = 0u;
  float32x2_t v13 = **a3;
  float v14 = (*a3)[1].f32[0];
  float v15 = a3[3];
  uint64_t v16 = a3[6];
  float32x2_t v17 = *v15;
  float32x2_t v18 = *v16;
  float v19 = v15[1].f32[0];
  float v20 = v16[1].f32[0];
  do
  {
    float v21 = *(float *)&v28[v12];
    float v22 = *((float *)&v28[v12] + 1);
    float v23 = *((float *)&v28[v12] + 2);
    uint64_t v24 = (float32x2_t *)&result[v12];
    v24[1].f32[0] = (float)((float)(v22 * v19) + (float)(v21 * v14)) + (float)(v23 * v20);
    *uint64_t v24 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v17, v22), v13, v21), v18, v23);
    ++v12;
  }
  while (v12 != 8);
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v26 = (float32x2_t *)&result[i];
    float32x2_t v27 = vadd_f32(*(float32x2_t *)&result[i], a4);
    v26[1].f32[0] = *((float *)&result[i] + 2) + a5;
    *uint64_t v26 = v27;
  }
  return result;
}

void sub_25B56BB7C(void *a1, float a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __float2 v3 = __sincosf_stret(a2);
  uint64_t v4 = (char *)operator new(0xCuLL);
  *(float *)uint64_t v4 = v3.__cosval;
  *(void *)(v4 + 4) = LODWORD(v3.__sinval);
  v10[0] = v4;
  v10[1] = v4 + 12;
  v10[2] = v4 + 12;
  uint64_t v5 = (float *)operator new(0xCuLL);
  *uint64_t v5 = -v3.__sinval;
  v5[1] = v3.__cosval;
  v5[2] = 0.0;
  v10[3] = v5;
  v10[4] = v5 + 3;
  v10[5] = v5 + 3;
  long long v6 = operator new(0xCuLL);
  v10[7] = v6 + 3;
  v10[8] = v6 + 3;
  *(void *)long long v6 = 0;
  v6[2] = 1065353216;
  v10[6] = v6;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v7 = operator new(0x48uLL);
  *a1 = v7;
  a1[1] = v7;
  a1[2] = v7 + 9;
  uint64_t v8 = 0;
  a1[1] = sub_25B44C094((uint64_t)(a1 + 2), (uint64_t)v10, (uint64_t)&v11, v7);
  do
  {
    long long v9 = (void *)v10[v8 + 6];
    if (v9)
    {
      v10[v8 + 7] = v9;
      operator delete(v9);
    }
    v8 -= 3;
  }
  while (v8 != -9);
}

void sub_25B56BCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v13 = v12;
  *(void *)(v11 + 8) = v13;
  sub_25B413C78(&a9);
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = *(void **)(&a11 + v15 + 48);
    if (v16)
    {
      *(void *)(&a11 + v15 + 56) = v16;
      operator delete(v16);
    }
    v15 -= 24;
    if (v15 == -72) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_25B56BD40(uint64_t *a1, uint64_t *a2, int *a3, int *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  if (a3 != a4)
  {
    long long v7 = a3;
    do
    {
      sub_25B3FAF64((uint64_t)v22, *v7, *v7);
      ++v7;
    }
    while (v7 != a4);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8 != *a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (!sub_25B3FAE64(v22, v11))
      {
        uint64_t v12 = (long long *)(v9 + v10);
        unint64_t v14 = a1[1];
        unint64_t v13 = a1[2];
        if (v14 >= v13)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 6);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x155555555555555) {
            sub_25B3FBC4C();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a1) >> 6);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0xAAAAAAAAAAAAAALL) {
            unint64_t v19 = 0x155555555555555;
          }
          else {
            unint64_t v19 = v17;
          }
          uint64_t v28 = a1 + 2;
          if (v19) {
            unint64_t v19 = (unint64_t)sub_25B41D460(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          unint64_t v24 = v19;
          uint64_t v25 = v19 + 192 * v16;
          uint64_t v26 = v25;
          unint64_t v27 = v19 + 192 * v20;
          sub_25B46EAF0(v25, v12);
          v26 += 192;
          sub_25B4458D0(a1, &v24);
          uint64_t v15 = a1[1];
          sub_25B4459A4((uint64_t)&v24);
        }
        else
        {
          sub_25B46EAF0(a1[1], v12);
          uint64_t v15 = v14 + 192;
          a1[1] = v14 + 192;
        }
        a1[1] = v15;
        uint64_t v9 = *a2;
        uint64_t v8 = a2[1];
      }
      ++v11;
      v10 += 192;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 6) > v11);
  }
  return sub_25B3FB178((uint64_t)v22);
}

void sub_25B56BF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_25B56BF44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1[1];
    do
    {
      uint64_t v7 = *a1 + 24 * *(int *)(v2 + 4 * v5);
      if (v7 + 24 == v6)
      {
        uint64_t v11 = v6;
        uint64_t v6 = *a1 + 24 * *(int *)(v2 + 4 * v5);
      }
      else
      {
        do
        {
          uint64_t v8 = *(void **)v7;
          if (*(void *)v7)
          {
            *(void *)(v7 + 8) = v8;
            operator delete(v8);
            *(void *)(v7 + 16) = 0;
          }
          uint64_t v9 = v7 + 24;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 + 24);
          *(void *)(v7 + 16) = *(void *)(v7 + 40);
          *(void *)(v7 + 32) = 0;
          *(void *)(v7 + 40) = 0;
          *(void *)(v7 + 24) = 0;
          uint64_t v10 = v7 + 48;
          v7 += 24;
        }
        while (v10 != v6);
        uint64_t v11 = a1[1];
        uint64_t v6 = v9;
      }
      if (v11 != v6)
      {
        uint64_t v12 = v11;
        do
        {
          unint64_t v14 = *(void **)(v12 - 24);
          v12 -= 24;
          unint64_t v13 = v14;
          if (v14)
          {
            *(void *)(v11 - 16) = v13;
            operator delete(v13);
          }
          uint64_t v11 = v12;
        }
        while (v12 != v6);
      }
      a1[1] = v6;
      ++v5;
      uint64_t v2 = *a2;
      uint64_t v15 = a2[1];
    }
    while (v5 < (v15 - *a2) >> 2);
    if (v15 != v2)
    {
      unint64_t v16 = 0;
      uint64_t v17 = *a1;
      uint64_t v18 = v6;
      do
      {
        if (v18 == v17)
        {
          uint64_t v18 = v17;
        }
        else
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          do
          {
            uint64_t v21 = v17 + v19;
            uint64_t v22 = *(void *)(v17 + v19 + 8);
            uint64_t v23 = *(void *)(v17 + v19) + 4 * *(int *)(*a2 + 4 * v16);
            uint64_t v24 = v22 - (v23 + 4);
            if (v22 != v23 + 4)
            {
              memmove((void *)(*(void *)(v17 + v19) + 4 * *(int *)(*a2 + 4 * v16)), (const void *)(v23 + 4), v22 - (v23 + 4));
              uint64_t v17 = *a1;
              uint64_t v6 = a1[1];
            }
            *(void *)(v21 + 8) = v23 + v24;
            ++v20;
            v19 += 24;
          }
          while (v20 < 0xAAAAAAAAAAAAAAABLL * ((v6 - v17) >> 3));
          uint64_t v2 = *a2;
          uint64_t v15 = a2[1];
          uint64_t v18 = v6;
        }
        ++v16;
      }
      while (v16 < (v15 - v2) >> 2);
    }
  }
}

float32_t sub_25B56C0EC(float32x2_t **a1, float32x4_t *a2)
{
  float32x4_t v15 = *a2;
  float32x4_t v17 = a2[1];
  float32x4_t v16 = a2[3];
  float32x4_t v14 = a2[4];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  __float2 v3 = (float32x2_t *)operator new(0xCuLL);
  int8x16_t v4 = (int8x16_t)vsubq_f32(v15, v14);
  v5.i32[0] = vextq_s8(v4, v4, 8uLL).u32[0];
  v5.i32[1] = v4.i32[0];
  float64x2_t v6 = vcvtq_f64_f32(v5);
  float64x2_t v7 = vmulq_f64(v6, v6);
  *(double *)v4.i64 = sqrt(v7.f64[0] + v7.f64[1] + *(float *)&v4.i32[1] * *(float *)&v4.i32[1]);
  int8x16_t v8 = (int8x16_t)vsubq_f32(v15, v16);
  int8x16_t v9 = (int8x16_t)vsubq_f32(v15, v17);
  a1[1] = (float32x2_t *)((char *)v3 + 12);
  a1[2] = (float32x2_t *)((char *)v3 + 12);
  float64x2_t v10 = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
  float64x2_t v11 = vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v8.i8));
  float64x2_t v12 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v8.i8));
  float32x2_t *v3 = vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmulq_f64(v10, v10), vaddq_f64(vmulq_f64(v11, v11), vmulq_f64(v12, v12)))));
  float32_t result = *(double *)v4.i64;
  v3[1].f32[0] = result;
  *a1 = v3;
  return result;
}

uint64_t *sub_25B56C1E0(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int8x16_t v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) < *(float *)(**a3 + 4 * *result))
      {
        *float32_t result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &result[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_25B56C44C(result, v24, a3, v25, a5);
        uint64_t v26 = (uint64_t *)&v22[8 * v23];
        float32_t result = sub_25B56C44C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v26);
        unint64_t v27 = &v22[8 * a4];
        uint64_t v28 = *a3;
        float v29 = v26;
        while (v29 != (uint64_t *)v27)
        {
          uint64_t v30 = *v29;
          float v31 = *(float *)(*v28 + 4 * *v29);
          float v32 = *(float *)(*v28 + 4 * *(void *)v22);
          if (v31 >= v32) {
            uint64_t v30 = *(void *)v22;
          }
          v22 += 8 * (v31 >= v32);
          v29 += v31 < v32;
          *v8++ = v30;
          if (v22 == (char *)v26)
          {
            if (v29 != (uint64_t *)v27)
            {
              uint64_t v33 = 0;
              do
              {
                v8[v33] = v29[v33];
                ++v33;
              }
              while (&v29[v33] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          uint64_t v34 = 0;
          do
          {
            v8[v34] = *(void *)&v22[v34 * 8];
            ++v34;
          }
          while (&v22[v34 * 8] != (char *)v26);
        }
      }
      else
      {
        sub_25B56C1E0(result, v24, a3, v25, a5, a6);
        sub_25B56C1E0(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        return sub_25B56C668(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      float64x2_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        float32x4_t v15 = result;
        do
        {
          uint64_t v16 = *v15;
          float32x4_t v15 = v12;
          uint64_t v17 = *v12;
          float v18 = *(float *)(v14 + 4 * v17);
          if (v18 < *(float *)(v14 + 4 * v16))
          {
            uint64_t v19 = v13;
            while (1)
            {
              *(uint64_t *)((char *)result + v19 + 8) = v16;
              if (!v19) {
                break;
              }
              uint64_t v16 = *(uint64_t *)((char *)result + v19 - 8);
              v19 -= 8;
              if (v18 >= *(float *)(v14 + 4 * v16))
              {
                unint64_t v20 = (uint64_t *)((char *)result + v19 + 8);
                goto LABEL_15;
              }
            }
            unint64_t v20 = result;
LABEL_15:
            uint64_t *v20 = v17;
          }
          float64x2_t v12 = v15 + 1;
          v13 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_25B56C44C(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    float32x2_t v5 = a5;
    float64x2_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *float32x2_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *result);
      if (v12 >= v13) {
        uint64_t v10 = *result;
      }
      *a5 = v10;
      float32x2_t v5 = a5 + 1;
      if (v12 >= v13) {
        float64x2_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v24 = &result[a4 >> 1];
      sub_25B56C1E0(result, v24, a3, a4 >> 1, a5, a4 >> 1);
      float32_t result = (uint64_t *)sub_25B56C1E0(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v25 = *a3;
      uint64_t v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        uint64_t v27 = *v26;
        float v28 = *(float *)(*v25 + 4 * *v26);
        float v29 = *(float *)(*v25 + 4 * *v7);
        if (v28 >= v29) {
          uint64_t v27 = *v7;
        }
        v26 += v28 < v29;
        v7 += v28 >= v29;
        *v5++ = v27;
        if (v7 == v24)
        {
          if (v26 != a2)
          {
            uint64_t v30 = 0;
            do
            {
              v5[v30] = v26[v30];
              ++v30;
            }
            while (&v26[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        uint64_t v31 = 0;
        do
        {
          v5[v31] = v7[v31];
          ++v31;
        }
        while (&v7[v31] != v24);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **a3;
        uint64_t v17 = a5;
        float v18 = a5;
        do
        {
          uint64_t v20 = *v18++;
          uint64_t v19 = v20;
          if (*(float *)(v16 + 4 * *v14) >= *(float *)(v16 + 4 * v20))
          {
            *float v18 = *v14;
          }
          else
          {
            v17[1] = v19;
            uint64_t v21 = a5;
            if (v17 != a5)
            {
              uint64_t v22 = v15;
              while (1)
              {
                uint64_t v21 = (uint64_t *)((char *)a5 + v22);
                uint64_t v23 = *(uint64_t *)((char *)a5 + v22 - 8);
                if (*(float *)(v16 + 4 * *v14) >= *(float *)(v16 + 4 * v23)) {
                  break;
                }
                uint64_t *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  uint64_t v21 = a5;
                  break;
                }
              }
            }
            uint64_t *v21 = *v14;
          }
          ++v14;
          v15 += 8;
          uint64_t v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

void *sub_25B56C668(void *result, void *a2, void *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    float v12 = result;
    while (v8 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v13 = **a4;
      while (1)
      {
        uint64_t v14 = *v12;
        if (*(float *)(v13 + 4 * *a2) < *(float *)(v13 + 4 * *v12)) {
          break;
        }
        ++v12;
        if (!--a5) {
          return result;
        }
      }
      if (a5 >= v8)
      {
        if (a5 == 1)
        {
          *float v12 = *a2;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v25 = a5;
        }
        else {
          uint64_t v25 = a5 + 1;
        }
        uint64_t v24 = v25 >> 1;
        float v18 = &v12[v25 >> 1];
        uint64_t v17 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = a3 - a2;
          uint64_t v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            float v28 = &v17[v26 >> 1];
            uint64_t v30 = *v28;
            float v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (*(float *)(v13 + 4 * v30) < *(float *)(v13 + 4 * *v18)) {
              uint64_t v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[v15 >> 1];
        float v18 = a2;
        if (a2 != v12)
        {
          unint64_t v19 = a2 - v12;
          float v18 = v12;
          do
          {
            unint64_t v20 = v19 >> 1;
            uint64_t v21 = &v18[v19 >> 1];
            uint64_t v23 = *v21;
            uint64_t v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (*(float *)(v13 + 4 * *v17) < *(float *)(v13 + 4 * v23)) {
              unint64_t v19 = v20;
            }
            else {
              float v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = v18 - v12;
      }
      if (v18 == a2)
      {
        a2 = v17;
      }
      else
      {
        uint64_t v31 = (char *)v17 - (char *)a2;
        if (v17 == a2)
        {
          a2 = v18;
        }
        else
        {
          float v32 = v18 + 1;
          if (v18 + 1 == a2)
          {
            uint64_t v80 = *v18;
            uint64_t v82 = v16;
            uint64_t v37 = a2;
            size_t v38 = (char *)v17 - (char *)a2;
            uint64_t v39 = a7;
            uint64_t v40 = a4;
            uint64_t v41 = a3;
            uint64_t v42 = a8;
            uint64_t v84 = v24;
            memmove(v18, v37, v38);
            uint64_t v16 = v82;
            uint64_t v24 = v84;
            a8 = v42;
            a3 = v41;
            a4 = v40;
            a7 = v39;
            a2 = (void *)((char *)v18 + v31);
            *(void *)((char *)v18 + v31) = v80;
          }
          else
          {
            uint64_t v33 = a2 + 1;
            if (a2 + 1 == v17)
            {
              uint64_t v43 = *(v17 - 1);
              a2 = v18 + 1;
              if (v17 - 1 != v18)
              {
                int v44 = a7;
                uint64_t v45 = a4;
                uint64_t v46 = a3;
                uint64_t v47 = a8;
                uint64_t v83 = v16;
                uint64_t v85 = v24;
                uint64_t v81 = *(v17 - 1);
                memmove(v18 + 1, v18, (char *)(v17 - 1) - (char *)v18);
                uint64_t v43 = v81;
                uint64_t v16 = v83;
                uint64_t v24 = v85;
                a8 = v47;
                a3 = v46;
                a4 = v45;
                a7 = v44;
              }
              *float v18 = v43;
            }
            else
            {
              uint64_t v34 = a2 - v18;
              if (v34 == v31 >> 3)
              {
                do
                {
                  uint64_t v35 = *(v32 - 1);
                  *(v32 - 1) = *(v33 - 1);
                  *(v33 - 1) = v35;
                  if (v32 == a2) {
                    break;
                  }
                  ++v32;
                }
                while (v33++ != v17);
              }
              else
              {
                uint64_t v48 = v31 >> 3;
                uint64_t v49 = a2 - v18;
                do
                {
                  uint64_t v50 = v49;
                  uint64_t v49 = v48;
                  uint64_t v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  uint64_t v51 = &v18[v49];
                  do
                  {
                    uint64_t v53 = *--v51;
                    uint64_t v52 = v53;
                    float v54 = &v51[v34];
                    uint64_t v55 = v51;
                    do
                    {
                      uint64_t v56 = v54;
                      *uint64_t v55 = *v54;
                      uint64_t v57 = &v54[v34];
                      BOOL v58 = __OFSUB__(v34, v17 - v54);
                      uint64_t v60 = v34 - (v17 - v54);
                      char v59 = (v60 < 0) ^ v58;
                      float v54 = &v18[v60];
                      if (v59) {
                        float v54 = v57;
                      }
                      uint64_t v55 = v56;
                    }
                    while (v54 != v51);
                    *uint64_t v56 = v52;
                  }
                  while (v51 != v18);
                }
                a2 = &v18[v31 >> 3];
              }
            }
          }
        }
      }
      a5 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a5 + v8)
      {
        uint64_t v65 = a2;
        float32x2_t v66 = v17;
        uint64_t v61 = a4;
        uint64_t v67 = v24;
        uint64_t v68 = v16;
        uint64_t v62 = a7;
        uint64_t v63 = a8;
        float32_t result = (void *)sub_25B56C668(a2, v66, a3);
        a2 = v18;
        uint64_t v8 = v68;
        a5 = v67;
        a3 = v65;
      }
      else
      {
        uint64_t v61 = a4;
        uint64_t v62 = a7;
        uint64_t v63 = a8;
        uint64_t v64 = a3;
        float32_t result = (void *)sub_25B56C668(v12, v18, a2);
        a3 = v64;
        float v12 = a2;
        a2 = v17;
      }
      a7 = v62;
      a4 = v61;
      a8 = v63;
      if (!v8) {
        return result;
      }
    }
    if (a5 <= v8)
    {
      if (v12 != a2)
      {
        uint64_t v73 = 0;
        do
        {
          *(void *)&a7[v73 * 8] = v12[v73];
          ++v73;
        }
        while (&v12[v73] != a2);
        uint64_t v74 = &a7[v73 * 8];
        if (v74 != a7)
        {
          uint64_t v75 = *a4;
          while (a2 != a3)
          {
            uint64_t v76 = *a2;
            float v77 = *(float *)(*v75 + 4 * *a2);
            float v78 = *(float *)(*v75 + 4 * *(void *)a7);
            if (v77 >= v78) {
              uint64_t v76 = *(void *)a7;
            }
            a2 += v77 < v78;
            a7 += 8 * (v77 >= v78);
            *v12++ = v76;
            if (a7 == v74) {
              return result;
            }
          }
          return memmove(v12, a7, v74 - a7);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v69 = 0;
      do
      {
        *(void *)&a7[v69 * 8] = a2[v69];
        ++v69;
      }
      while (&a2[v69] != a3);
      int64_t v70 = &a7[v69 * 8];
      if (v70 != a7)
      {
        uint64_t v71 = a3 - 1;
        while (a2 != v12)
        {
          uint64_t v72 = *((void *)v70 - 1);
          if (*(float *)(**a4 + 4 * v72) >= *(float *)(**a4 + 4 * *(a2 - 1))) {
            v70 -= 8;
          }
          else {
            uint64_t v72 = *--a2;
          }
          *v71-- = v72;
          if (v70 == a7) {
            return result;
          }
        }
        uint64_t v79 = 0;
        do
        {
          v71[v79] = *(void *)&v70[v79 * 8 - 8];
          --v79;
        }
        while (&v70[v79 * 8] != a7);
      }
    }
  }
  return result;
}

void *sub_25B56CB74(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    float32x2_t v5 = a2;
    unint64_t v6 = 0;
    float64x2_t v7 = v5;
    do
    {
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          float64x2_t v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      float64x2_t v7 = v9;
    }
    while (v9 != a3);
    sub_25B3FCA18(a1, v6);
    uint64_t v11 = (_DWORD *)a1[1];
    do
    {
      *uint64_t v11 = *((_DWORD *)v5 + 7);
      float v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          float v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          float32x2_t v5 = v13;
        }
        while (!v10);
      }
      ++v11;
      float32x2_t v5 = v13;
    }
    while (v13 != a3);
    a1[1] = v11;
  }
  return a1;
}

void sub_25B56CC50(_Unwind_Exception *exception_object)
{
  __float2 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B56CC6C(uint64_t *a1, void *a2, int a3, void *a4, uint64_t a5, uint64_t *a6, int a7, double a8, double a9, float32x4_t _Q2)
{
  uint64_t v10 = a5;
  int v11 = a3;
  float v12 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = (_OWORD *)(*a1 + 192 * a3);
  long long v16 = v15[5];
  uint64_t v424 = a3;
  v457[4] = v15[4];
  v457[5] = v16;
  long long v17 = v15[7];
  v457[6] = v15[6];
  v457[7] = v17;
  long long v18 = v15[1];
  v457[0] = *v15;
  v457[1] = v18;
  long long v19 = v15[3];
  v457[2] = v15[2];
  v457[3] = v19;
  int v429 = a7 - 1;
  while (2)
  {
    uint64_t v430 = v14 + 1;
    *(_OWORD *)unint64_t v437 = v457[(v14 + 1) & 3];
    float32x4_t v20 = vsubq_f32((float32x4_t)v457[((_BYTE)v14 + 2) & 3], *(float32x4_t *)v437);
    float64x2_t v21 = vcvtq_f64_f32(*(float32x2_t *)v20.f32);
    v21.f64[0] = sqrt(v20.f32[2] * v20.f32[2] + vaddvq_f64(vmulq_f64(v21, v21)));
    *(float *)v21.f64 = v21.f64[0];
    *(float32x2_t *)v20.f32 = vdiv_f32(*(float32x2_t *)v20.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v21.f64[0], 0));
    *(float32x4_t *)__long long src = v20;
    v20.f32[0] = v20.f32[2] / *(float *)v21.f64;
    float32x4_t v443 = (float32x4_t)v457[v14];
    *(float32x4_t *)__p = v20;
    uint64_t v23 = *a1;
    uint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      do
      {
        if (*(_DWORD *)(*v12 + 4 * v28) == v11)
        {
          float v29 = (float32x2_t *)(v23 + 192 * v28);
          float v30 = v29[3].f32[0] - v29[1].f32[0];
          float32x2_t v31 = vsub_f32(v29[2], *v29);
          float64x2_t v32 = vcvtq_f64_f32(v31);
          double v33 = sqrt(v30 * v30 + vaddvq_f64(vmulq_f64(v32, v32)));
          *(float *)&double v33 = v33;
          *(float32x2_t *)_Q2.f32 = vdiv_f32(v31, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v33, 0));
          _Q2.i32[3] = HIDWORD(__p[1]);
          if ((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)__src, *(float32x2_t *)&_Q2).i32[1]), *(float *)__src, _Q2.f32[0])+ (float)((float)(v30 / *(float *)&v33) * *(float *)__p)) > 0.95)
          {
            if ((unint64_t)v27 >= v26)
            {
              uint64_t v34 = (v27 - v24) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v26 - (void)v24) >> 1 > v35) {
                unint64_t v35 = (uint64_t)(v26 - (void)v24) >> 1;
              }
              if (v26 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v35;
              }
              if (v36)
              {
                unint64_t v36 = (unint64_t)sub_25B3FBC64(v36);
                unint64_t v27 = (char *)v25;
              }
              else
              {
                uint64_t v37 = 0;
              }
              size_t v38 = (char *)(v36 + 4 * v34);
              *(_DWORD *)size_t v38 = v28;
              uint64_t v25 = (uint64_t)(v38 + 4);
              while (v27 != v24)
              {
                int v39 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              unint64_t v26 = v36 + 4 * v37;
              if (v24) {
                operator delete(v24);
              }
              uint64_t v24 = v38;
              float v12 = a2;
            }
            else
            {
              *(_DWORD *)unint64_t v27 = v28;
              uint64_t v25 = (uint64_t)(v27 + 4);
            }
            uint64_t v23 = *a1;
            uint64_t v22 = a1[1];
            unint64_t v27 = (char *)v25;
          }
        }
        ++v28;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 6) > v28);
    }
    float32x4_t v40 = vsubq_f32(*(float32x4_t *)v437, v443);
    float64x2_t v41 = vcvtq_f64_f32(*(float32x2_t *)v40.f32);
    float64x2_t v42 = vmulq_f64(v41, v41);
    v41.f64[0] = sqrt(v40.f32[2] * v40.f32[2] + vaddvq_f64(v42));
    *(float *)v41.f64 = v41.f64[0];
    *(float32x2_t *)_Q2.f32 = vdiv_f32(*(float32x2_t *)v40.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v41.f64[0], 0));
    *(float *)v41.f64 = v40.f32[2] / *(float *)v41.f64;
    float32x4_t v434 = (float32x4_t)v41;
    unint64_t v438 = _Q2.i64[0];
    _Q2.i32[2] = LODWORD(v41.f64[0]);
    float32x4_t v431 = _Q2;
    switch(v429)
    {
      case 0:
        v454 = 0;
        float v455 = 0;
        uint64_t v456 = 0;
        sub_25B3FC724(&v454, v24, v25, (v25 - (uint64_t)v24) >> 2);
        uint64_t v43 = v454;
        int v44 = (int *)v455;
        uint64_t v45 = v455 - (char *)v454;
        if ((unint64_t)(v455 - (char *)v454) < 8)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          if (!v454)
          {
LABEL_31:
            if (v47 != v46)
            {
              uint64_t v48 = 0;
              uint64_t v49 = *(_DWORD **)(v10 + 8);
              if ((unint64_t)(v47 - v46) <= 1) {
                uint64_t v50 = 1;
              }
              else {
                uint64_t v50 = v47 - v46;
              }
              do
              {
                unint64_t v51 = *(void *)(v10 + 16);
                if ((unint64_t)v49 >= v51)
                {
                  uint64_t v53 = *(_DWORD **)v10;
                  uint64_t v54 = ((uint64_t)v49 - *(void *)v10) >> 2;
                  unint64_t v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v56 = v51 - (void)v53;
                  if (v56 >> 1 > v55) {
                    unint64_t v55 = v56 >> 1;
                  }
                  _CF = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF) {
                    unint64_t v58 = v55;
                  }
                  if (v58)
                  {
                    unint64_t v58 = (unint64_t)sub_25B3FBC64(v58);
                    uint64_t v53 = *(_DWORD **)v10;
                    uint64_t v49 = *(_DWORD **)(v10 + 8);
                  }
                  else
                  {
                    uint64_t v59 = 0;
                  }
                  uint64_t v60 = (_DWORD *)(v58 + 4 * v54);
                  *uint64_t v60 = v46[v48];
                  uint64_t v52 = v60 + 1;
                  while (v49 != v53)
                  {
                    int v61 = *--v49;
                    *--uint64_t v60 = v61;
                  }
                  *(void *)uint64_t v10 = v60;
                  *(void *)(v10 + 8) = v52;
                  *(void *)(v10 + 16) = v58 + 4 * v59;
                  if (v53) {
                    operator delete(v53);
                  }
                }
                else
                {
                  *uint64_t v49 = v46[v48];
                  uint64_t v52 = v49 + 1;
                }
                *(void *)(v10 + 8) = v52;
                ++v48;
                uint64_t v49 = v52;
              }
              while (v48 != v50);
            }
            float v12 = a2;
            goto LABEL_334;
          }
LABEL_30:
          float v455 = (char *)v43;
          operator delete(v43);
          goto LABEL_31;
        }
        v432 = v24;
        unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
        v464.i32[0] = 0;
        sub_25B400C5C(&v471, v120, &v464);
        uint64_t v121 = *a1;
        if (a1[1] != *a1)
        {
          uint64_t v122 = 0;
          unint64_t v123 = 0;
          do
          {
            float v124 = sub_25B443CA8((_OWORD *)(v121 + v122));
            *(float *)(v471.i64[0] + 4 * v123++) = v124;
            uint64_t v121 = *a1;
            v122 += 192;
          }
          while (v123 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6));
        }
        unint64_t v125 = v45 >> 2;
        v464.i32[0] = 0;
        sub_25B400C5C(&v468, v125, &v464);
        if (v44 == v43)
        {
          long long v129 = v468;
          uint64_t v24 = v432;
          long long v131 = (const std::nothrow_t *)MEMORY[0x263F8C180];
        }
        else
        {
          uint64_t v127 = 0;
          uint64_t v128 = *a1;
          long long v129 = v468;
          if (v125 <= 1) {
            uint64_t v130 = 1;
          }
          else {
            uint64_t v130 = v125;
          }
          uint64_t v24 = v432;
          long long v131 = (const std::nothrow_t *)MEMORY[0x263F8C180];
          do
          {
            uint64_t v132 = 0;
            _Q2.i64[0] = 0;
            do
            {
              *(float32x2_t *)_Q2.f32 = vadd_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(v128 + 192 * v43[v127] + v132));
              v132 += 16;
            }
            while (v132 != 128);
            *(float32x2_t *)_Q2.f32 = vmul_f32(*(float32x2_t *)_Q2.f32, (float32x2_t)0x3E0000003E000000);
            _Q2.i32[2] = v443.i32[2];
            _Q2 = vsubq_f32(_Q2, v443);
            _S4 = (int)__p[0];
            __asm { FMLA            S3, S4, V2.S[2] }
            v129[v127++] = _S3;
          }
          while (v127 != v130);
        }
        v464.i32[0] = 0;
        sub_25B400C5C(&v462, v469 - v129, &v464);
        float32x2_t v254 = (float *)v468;
        if (v469 != v468)
        {
          unint64_t v255 = v469 - v468;
          v256 = (float *)v462.i64[0];
          if (v255 <= 1) {
            unint64_t v255 = 1;
          }
          do
          {
            float v257 = *v254++;
            *v256++ = -v257;
            --v255;
          }
          while (v255);
        }
        sub_25B400BE4(v461, (v462.i64[1] - v462.i64[0]) >> 2);
        BOOL v258 = (uint64_t *)v461[0];
        BOOL v259 = (uint64_t *)v461[1];
        if (v461[0] != v461[1])
        {
          uint64_t v260 = 0;
          float v261 = (uint64_t *)v461[0];
          do
            *v261++ = v260++;
          while (v261 != v259);
        }
        v464.i64[0] = (uint64_t)&v462;
        if ((char *)v259 - (char *)v258 < 1025)
        {
LABEL_349:
          sub_25B56C1E0(v258, v259, (uint64_t **)&v464, v259 - v258, 0, 0);
        }
        else
        {
          unint64_t v262 = v259 - v258;
          while (1)
          {
            uint64_t v263 = (uint64_t *)operator new(8 * v262, v131);
            if (v263) {
              break;
            }
            BOOL v264 = v262 > 1;
            v262 >>= 1;
            if (!v264) {
              goto LABEL_349;
            }
          }
          uint64_t v266 = v263;
          sub_25B56C1E0(v258, v259, (uint64_t **)&v464, v259 - v258, v263, v262);
          operator delete(v266);
        }
        uint64_t v267 = (uint64_t *)v461[0];
        uint64_t v268 = v43[*(void *)v461[0]];
        uint64_t v10 = a5;
        if ((float)(*(float *)(*(void *)(*a4 + 24 * (int)v268) + 4 * v424) / *(float *)(v471.i64[0] + 4 * v268)) <= 0.7
          || (float v269 = *(float *)&v468[*(void *)v461[0]], v269 <= 0.2)
          || (float)(v269 - *(float *)&v468[*((void *)v461[0] + 1)]) <= 0.1)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 0;
        }
        else
        {
          uint64_t v458 = 0;
          unint64_t v459 = 0;
          unint64_t v460 = 0;
          uint64_t v271 = *a1;
          uint64_t v270 = a1[1];
          unint64_t v272 = 0;
          if (v270 == *a1)
          {
            uint64_t v280 = 0;
          }
          else
          {
            unint64_t v273 = 0;
            do
            {
              __n128 v274 = (char *)v454;
              if (v454 != (int *)v455)
              {
                do
                {
                  if (v273 == *(_DWORD *)v274) {
                    goto LABEL_362;
                  }
                  v274 += 4;
                }
                while (v274 != v455);
                __n128 v274 = v455;
              }
LABEL_362:
              if (v274 != v455)
              {
                v275 = (long long *)(v271 + 192 * v273);
                if (v272 >= v460)
                {
                  unint64_t v276 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v272 - v458) >> 6);
                  unint64_t v277 = v276 + 1;
                  if (v276 + 1 > 0x155555555555555) {
                    sub_25B3FBC4C();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v460 - v458) >> 6) > v277) {
                    unint64_t v277 = 0x5555555555555556 * ((uint64_t)(v460 - v458) >> 6);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v460 - v458) >> 6) >= 0xAAAAAAAAAAAAAALL) {
                    unint64_t v278 = 0x155555555555555;
                  }
                  else {
                    unint64_t v278 = v277;
                  }
                  unint64_t v467 = &v460;
                  if (v278) {
                    unint64_t v278 = (unint64_t)sub_25B41D460(v278);
                  }
                  else {
                    uint64_t v279 = 0;
                  }
                  v464.i64[0] = v278;
                  v464.i64[1] = v278 + 192 * v276;
                  unint64_t v465 = v464.u64[1];
                  unint64_t v466 = v278 + 192 * v279;
                  sub_25B46EAF0(v464.i64[1], v275);
                  v465 += 192;
                  sub_25B4458D0(&v458, &v464);
                  unint64_t v272 = v459;
                  sub_25B4459A4((uint64_t)&v464);
                }
                else
                {
                  sub_25B46EAF0(v272, (long long *)(v271 + 192 * v273));
                  v272 += 192;
                }
                unint64_t v459 = v272;
                uint64_t v271 = *a1;
                uint64_t v270 = a1[1];
              }
              ++v273;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v270 - v271) >> 6) > v273);
            uint64_t v267 = (uint64_t *)v461[0];
            uint64_t v280 = v458;
          }
          uint64_t v410 = 0;
          uint64_t v411 = *v267;
          float32x2_t v412 = 0;
          do
          {
            float32x2_t v412 = vadd_f32(v412, *(float32x2_t *)(v280 + 192 * *v267 + v410));
            v410 += 16;
          }
          while (v410 != 128);
          float v413 = 999.0;
          if (v272 != v280)
          {
            uint64_t v414 = 0;
            unint64_t v415 = (uint64_t)(v272 - v280) / 192;
            *(float32x2_t *)v265.f32 = vmul_f32(v412, (float32x2_t)0x3E0000003E000000);
            v265.i32[2] = v443.i32[2];
            _Q2 = vsubq_f32(v265, v443);
            _Q4 = v434;
            __asm { FMLA            S3, S4, V2.S[2] }
            if (v415 <= 1) {
              unint64_t v415 = 1;
            }
            float v413 = 999.0;
            do
            {
              if (v414 != v411)
              {
                uint64_t v419 = 0;
                _Q4.i64[0] = 0;
                do
                {
                  *(float32x2_t *)_Q4.f32 = vadd_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)(v280 + v419));
                  v419 += 16;
                }
                while (v419 != 128);
                *(float32x2_t *)_Q4.f32 = vmul_f32(*(float32x2_t *)_Q4.f32, (float32x2_t)0x3E0000003E000000);
                _Q4.i32[2] = v443.i32[2];
                _Q4 = vsubq_f32(_Q4, v443);
                _S6 = v434.i32[0];
                __asm { FMLA            S5, S6, V4.S[2] }
                _Q4.f32[0] = vabds_f32(_S3, _S5);
                if (_Q4.f32[0] < v413) {
                  float v413 = _Q4.f32[0];
                }
              }
              ++v414;
              v280 += 192;
            }
            while (v414 != v415);
          }
          if (v413 >= 0.4)
          {
            uint64_t v46 = 0;
            uint64_t v47 = 0;
          }
          else
          {
            float32x2_t v422 = v454;
            uint64_t v46 = sub_25B3FBC64(1uLL);
            *uint64_t v46 = v422[v411];
            uint64_t v47 = v46 + 1;
          }
          v464.i64[0] = (uint64_t)&v458;
          sub_25B41D070((void ***)&v464);
          uint64_t v267 = (uint64_t *)v461[0];
          if (!v461[0])
          {
LABEL_380:
            if (v462.i64[0])
            {
              v462.i64[1] = v462.i64[0];
              operator delete((void *)v462.i64[0]);
            }
            if (v468)
            {
              v469 = v468;
              operator delete(v468);
            }
            if (v471.i64[0])
            {
              v471.i64[1] = v471.i64[0];
              operator delete((void *)v471.i64[0]);
            }
            uint64_t v43 = v454;
            if (!v454) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        v461[1] = v267;
        operator delete(v267);
        goto LABEL_380;
      case 1:
        if ((char *)v25 == v24) {
          goto LABEL_600;
        }
        float v86 = 0;
        uint64_t v87 = 0;
        unint64_t v88 = 0;
        uint64_t v89 = 0;
        unint64_t v90 = 0;
        do
        {
          uint64_t v92 = *(_DWORD **)v10;
          unint64_t v91 = *(_DWORD **)(v10 + 8);
          if (*(_DWORD **)v10 != v91)
          {
            while (*v92 != *(_DWORD *)&v24[4 * v90])
            {
              if (++v92 == v91)
              {
                uint64_t v92 = *(_DWORD **)(v10 + 8);
                break;
              }
            }
          }
          if (v92 == v91)
          {
            if ((unint64_t)v89 >= v88)
            {
              uint64_t v93 = (v89 - (char *)v86) >> 2;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v88 - (void)v86) >> 1 > v94) {
                unint64_t v94 = (uint64_t)(v88 - (void)v86) >> 1;
              }
              if (v88 - (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v94;
              }
              if (v95)
              {
                unint64_t v95 = (unint64_t)sub_25B3FBC64(v95);
                uint64_t v89 = v87;
              }
              else
              {
                uint64_t v96 = 0;
              }
              unint64_t v97 = (int *)(v95 + 4 * v93);
              *unint64_t v97 = *(_DWORD *)&v24[4 * v90];
              uint64_t v87 = (char *)(v97 + 1);
              while (v89 != (char *)v86)
              {
                int v98 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--unint64_t v97 = v98;
              }
              unint64_t v88 = v95 + 4 * v96;
              if (v86) {
                operator delete(v86);
              }
              float v86 = v97;
              uint64_t v89 = v87;
              float v12 = a2;
            }
            else
            {
              *(_DWORD *)uint64_t v89 = *(_DWORD *)&v24[4 * v90];
              v89 += 4;
              uint64_t v87 = v89;
            }
          }
          ++v90;
        }
        while (v90 < (v25 - (uint64_t)v24) >> 2);
        if (v89 - (char *)v86 != 8) {
          goto LABEL_125;
        }
        uint64_t v99 = v86[1];
        if (*(float *)(*(void *)(*a4 + 24 * *v86) + 4 * v99) > 0.0)
        {
          uint64_t v100 = *a1;
          uint64_t v101 = (float32x4_t *)(*a1 + 192 * *v86);
          float32x4_t v464 = v431;
          float v102 = sub_25B56B744(v101, v464.f32);
          long long v103 = (float32x4_t *)(v100 + 192 * (int)v99);
          v104.f32[0] = sub_25B56B744(v103, v464.f32);
          uint64_t v106 = 0;
          _Q1.i64[0] = 0;
          float v108 = 0.0;
          do
          {
            *(float32x2_t *)_Q1.f32 = vadd_f32(*(float32x2_t *)_Q1.f32, *(float32x2_t *)v101[v106].f32);
            float v108 = v108 + v101[v106++].f32[2];
          }
          while (v106 != 8);
          uint64_t v109 = 0;
          *(float32x2_t *)_Q1.f32 = vmul_f32(*(float32x2_t *)_Q1.f32, (float32x2_t)0x3E0000003E000000);
          v105.f32[0] = v108 * 0.125;
          float32x2_t v110 = 0;
          float v111 = 0.0;
          float v12 = a2;
          do
          {
            float32x2_t v110 = vadd_f32(v110, *(float32x2_t *)v103[v109].f32);
            float v111 = v111 + v103[v109++].f32[2];
          }
          while (v109 != 8);
          _Q1.i32[2] = v105.i32[0];
          *(float32x2_t *)v105.f32 = vmul_f32(v110, (float32x2_t)0x3E0000003E000000);
          v105.f32[2] = v111 * 0.125;
          _Q2 = vsubq_f32(v105, _Q1);
          *(double *)_Q1.i64 = sqrt(v434.f32[0] * v434.f32[0]+ *(float *)&v438 * *(float *)&v438+ *((float *)&v438 + 1) * *((float *)&v438 + 1));
          _Q1.f32[0] = *(double *)_Q1.i64;
          _S5 = v434.f32[0] / _Q1.f32[0];
          __asm { FMLA            S1, S5, V2.S[2] }
          *(double *)_Q2.i64 = (float)(fabsf(_Q1.f32[0]) + -0.03);
          _Q2.f32[0] = v102 * 0.5 + v104.f32[0] * 0.5 - *(double *)_Q2.i64;
          if (_Q2.f32[0] >= 0.0)
          {
            uint64_t v115 = 0;
            v104.i64[0] = 0;
            int8x16_t v116 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q1, v104), 0);
            int8x16_t v117 = (int8x16_t)vnegq_f32(v431);
            float32x4_t v118 = (float32x4_t)vbslq_s8(v116, (int8x16_t)v431, v117);
            *(float *)v117.i32 = _Q2.f32[0] * -0.5;
            float32x4_t v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.i8, 0);
            _Q2.f32[0] = _Q2.f32[0] * 0.5;
            _Q2 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0);
            do
            {
              v101[v115] = vmlaq_f32(v101[v115], v118, v119);
              v103[v115] = vmlaq_f32(v103[v115], v118, _Q2);
              ++v115;
            }
            while (v115 != 8);
          }
LABEL_125:
          if (!v86) {
            goto LABEL_600;
          }
        }
        goto LABEL_598;
      case 2:
        float32x4_t v66 = *(float32x4_t *)__src;
        v66.i32[2] = (__int32)__p[0];
        float32x4_t v464 = v66;
        uint64_t v68 = *(_DWORD **)v10;
        uint64_t v67 = *(void *)(v10 + 8);
        int64_t v69 = v67 - *(void *)v10;
        if (v67 == *(void *)v10)
        {
          int64_t v70 = 0;
          uint64_t v72 = 0;
        }
        else
        {
          if (v69 < 0) {
            sub_25B3FBC4C();
          }
          int64_t v70 = (char *)sub_25B3FBC64(v69 >> 2);
          uint64_t v72 = &v70[4 * v71];
          memmove(v70, v68, v69);
          int64_t v69 = (int64_t)&v70[4 * (v69 >> 2)];
        }
        uint64_t v182 = *a6;
        uint64_t v181 = a6[1];
        if (v181 == *a6) {
          goto LABEL_226;
        }
        unint64_t v183 = 0;
        float32x2_t v184 = (char *)v69;
        do
        {
          if (v70 == v184)
          {
            float v185 = v70;
          }
          else
          {
            float v185 = v70;
            while (*(_DWORD *)v185 != *(_DWORD *)(v182 + 4 * v183))
            {
              v185 += 4;
              if (v185 == v184)
              {
                float v185 = v184;
                break;
              }
            }
          }
          if (v185 == v184)
          {
            if (v184 >= v72)
            {
              uint64_t v186 = (v184 - v70) >> 2;
              unint64_t v187 = v186 + 1;
              if ((unint64_t)(v186 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((v72 - v70) >> 1 > v187) {
                unint64_t v187 = (v72 - v70) >> 1;
              }
              if ((unint64_t)(v72 - v70) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v188 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v187;
              }
              if (v188)
              {
                unint64_t v188 = (unint64_t)sub_25B3FBC64(v188);
                float32x2_t v184 = (char *)v69;
              }
              else
              {
                uint64_t v189 = 0;
              }
              int64_t v190 = (char *)(v188 + 4 * v186);
              *(_DWORD *)int64_t v190 = *(_DWORD *)(v182 + 4 * v183);
              int64_t v69 = (int64_t)(v190 + 4);
              while (v184 != v70)
              {
                int v191 = *((_DWORD *)v184 - 1);
                v184 -= 4;
                *((_DWORD *)v190 - 1) = v191;
                v190 -= 4;
              }
              uint64_t v72 = (char *)(v188 + 4 * v189);
              if (v70) {
                operator delete(v70);
              }
              int64_t v70 = v190;
              float v12 = a2;
            }
            else
            {
              *(_DWORD *)float32x2_t v184 = *(_DWORD *)(v182 + 4 * v183);
              int64_t v69 = (int64_t)(v184 + 4);
            }
            uint64_t v182 = *a6;
            uint64_t v181 = a6[1];
            float32x2_t v184 = (char *)v69;
          }
          ++v183;
        }
        while (v183 < (v181 - v182) >> 2);
LABEL_226:
        if ((char *)v25 == v24)
        {
          uint64_t v46 = 0;
          uint64_t v10 = a5;
          if (!v70) {
            goto LABEL_334;
          }
          goto LABEL_333;
        }
        uint64_t v46 = 0;
        uint64_t v192 = 0;
        unint64_t v193 = 0;
        unint64_t v194 = 0;
        do
        {
          if (v70 == (char *)v69)
          {
            v195 = v70;
          }
          else
          {
            v195 = v70;
            while (*v195 != *(_DWORD *)&v24[4 * v194])
            {
              if (++v195 == (_DWORD *)v69)
              {
                v195 = (_DWORD *)v69;
                break;
              }
            }
          }
          if (v195 == (_DWORD *)v69)
          {
            if ((unint64_t)v192 >= v193)
            {
              uint64_t v196 = v24;
              uint64_t v197 = v192 - v46;
              unint64_t v198 = v197 + 1;
              if ((unint64_t)(v197 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v193 - (void)v46) >> 1 > v198) {
                unint64_t v198 = (uint64_t)(v193 - (void)v46) >> 1;
              }
              if (v193 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v198;
              }
              if (v199) {
                unint64_t v199 = (unint64_t)sub_25B3FBC64(v199);
              }
              else {
                uint64_t v200 = 0;
              }
              uint64_t v201 = (_DWORD *)(v199 + 4 * v197);
              *uint64_t v201 = *(_DWORD *)&v196[4 * v194];
              uint64_t v202 = v201 + 1;
              while (v192 != v46)
              {
                int v203 = *--v192;
                *--uint64_t v201 = v203;
              }
              unint64_t v193 = v199 + 4 * v200;
              if (v46)
              {
                v204 = v46;
                unint64_t v205 = v193;
                operator delete(v204);
                unint64_t v193 = v205;
              }
              uint64_t v46 = v201;
              uint64_t v192 = v202;
              uint64_t v24 = v196;
            }
            else
            {
              *v192++ = *(_DWORD *)&v24[4 * v194];
            }
          }
          ++v194;
        }
        while (v194 < (v25 - (uint64_t)v24) >> 2);
        if (v192 == v46)
        {
          uint64_t v10 = a5;
        }
        else
        {
          uint64_t v206 = 0;
          *(float32x4_t *)__srcb = v464;
          float v207 = v464.f32[1];
          if ((unint64_t)(v192 - v46) <= 1) {
            uint64_t v208 = 1;
          }
          else {
            uint64_t v208 = v192 - v46;
          }
          uint64_t v10 = a5;
          do
          {
            uint64_t v209 = 0;
            v210 = (float32x4_t *)(*a1 + 192 * (int)v46[v206]);
            float32x2_t v211 = 0;
            do
              float32x2_t v211 = vadd_f32(v211, *(float32x2_t *)v210[v209++].f32);
            while (v209 != 8);
            float v212 = sub_25B56B744(v210, v464.f32);
            uint64_t v213 = 0;
            *(float32x2_t *)v214.f32 = vmul_f32(v211, (float32x2_t)0x3E0000003E000000);
            _Q2.i32[3] = v443.i32[3];
            v214.i64[0] = vsubq_f32(v214, v443).u64[0];
            float v215 = (float)(vmlas_n_f32(vmuls_lane_f32(v207, *(float32x2_t *)v214.f32, 1), *(float *)__srcb, v214.f32[0])
                         + 0.0)
                 + v212 * 0.5 * -0.300000012;
            float32x4_t v216 = vmulq_n_f32(*(float32x4_t *)__srcb, v215);
            do
            {
              uint64_t v217 = *a1 + 192 * (int)v46[v206];
              *(float32x4_t *)(v217 + v213) = vsubq_f32(*(float32x4_t *)(v217 + v213), v216);
              v213 += 16;
            }
            while (v213 != 128);
            ++v206;
          }
          while (v206 != v208);
        }
        float v12 = a2;
        if (v70) {
LABEL_333:
        }
          operator delete(v70);
LABEL_334:
        if (!v46) {
          goto LABEL_600;
        }
        int32x2_t v253 = v46;
        goto LABEL_599;
      case 3:
        float32x4_t v462 = _Q2;
        if ((char *)v25 == v24)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v76 = 0;
          goto LABEL_265;
        }
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        unint64_t v75 = 0;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        do
        {
          uint64_t v79 = *(_DWORD **)v10;
          float v78 = *(_DWORD **)(v10 + 8);
          if (*(_DWORD **)v10 != v78)
          {
            while (*v79 != *(_DWORD *)&v24[4 * v77])
            {
              if (++v79 == v78)
              {
                uint64_t v79 = *(_DWORD **)(v10 + 8);
                break;
              }
            }
          }
          if (v79 == v78)
          {
            if ((unint64_t)v76 >= v75)
            {
              uint64_t v80 = (v76 - v73) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v75 - (void)v73) >> 1 > v81) {
                unint64_t v81 = (uint64_t)(v75 - (void)v73) >> 1;
              }
              if (v75 - (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82)
              {
                unint64_t v82 = (unint64_t)sub_25B3FBC64(v82);
                uint64_t v76 = (char *)v74;
              }
              else
              {
                uint64_t v83 = 0;
              }
              uint64_t v84 = (char *)(v82 + 4 * v80);
              *(_DWORD *)uint64_t v84 = *(_DWORD *)&v24[4 * v77];
              uint64_t v74 = (uint64_t)(v84 + 4);
              while (v76 != v73)
              {
                int v85 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v84 - 1) = v85;
                v84 -= 4;
              }
              unint64_t v75 = v82 + 4 * v83;
              if (v73) {
                operator delete(v73);
              }
              uint64_t v73 = v84;
              uint64_t v76 = (char *)v74;
              float v12 = a2;
            }
            else
            {
              *(_DWORD *)uint64_t v76 = *(_DWORD *)&v24[4 * v77];
              v76 += 4;
              uint64_t v74 = (uint64_t)v76;
            }
          }
          ++v77;
        }
        while (v77 < (v25 - (uint64_t)v24) >> 2);
LABEL_265:
        uint64_t v433 = v24;
        if ((unint64_t)(v76 - v73) <= 4)
        {
          uint64_t v468 = 0;
          v469 = 0;
          uint64_t v470 = 0;
          goto LABEL_567;
        }
        float32x4_t v464 = 0uLL;
        unint64_t v465 = 0;
        float v219 = sub_25B56B744((float32x4_t *)(*a1 + 192 * *(int *)v73), v462.f32);
        __srcc = (int *)v73;
        uint64_t v221 = *a1;
        uint64_t v220 = a1[1];
        if (v220 == *a1)
        {
          __pc = 0;
LABEL_389:
          BOOL v250 = 0;
          v239 = 0;
          uint64_t v282 = 0;
          goto LABEL_393;
        }
        uint64_t v222 = 0;
        uint64_t v223 = 0;
        float32x2_t v224 = 0;
        unint64_t v225 = 0;
        v226 = 0;
        unint64_t v227 = 0;
        do
        {
          uint64_t v228 = __srcc;
          if (__srcc != (int *)v74)
          {
            while (v227 != *v228)
            {
              if (++v228 == (_DWORD *)v74)
              {
                uint64_t v228 = (_DWORD *)v74;
                break;
              }
            }
          }
          if (v228 != (_DWORD *)v74)
          {
            uint64_t v229 = 0;
            uint64_t v230 = v221 + v222;
            float32x2_t v231 = 0;
            float v232 = 0.0;
            do
            {
              float32x2_t v231 = vadd_f32(v231, *(float32x2_t *)(v230 + v229));
              float v232 = v232 + *(float *)(v230 + v229 + 8);
              v229 += 16;
            }
            while (v229 != 128);
            *(float32x2_t *)&long long v218 = vmul_f32(v231, (float32x2_t)0x3E0000003E000000);
            *((float *)&v218 + 2) = v232 * 0.125;
            if ((unint64_t)v226 >= v225)
            {
              *(_OWORD *)v439 = v218;
              uint64_t v233 = (v226 - v224) >> 4;
              unint64_t v234 = v233 + 1;
              __pb = v224;
              if ((unint64_t)(v233 + 1) >> 60) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v225 - (void)v224) >> 3 > v234) {
                unint64_t v234 = (uint64_t)(v225 - (void)v224) >> 3;
              }
              if (v225 - (unint64_t)v224 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v235 = v234;
              }
              if (v235) {
                unint64_t v235 = (unint64_t)sub_25B3FFAEC(v235);
              }
              else {
                uint64_t v236 = 0;
              }
              char v237 = (char *)(v235 + 16 * v233);
              *(_OWORD *)char v237 = *(_OWORD *)v439;
              uint64_t v223 = v237 + 16;
              while (v226 != __pb)
              {
                long long v238 = *((_OWORD *)v226 - 1);
                v226 -= 16;
                *((_OWORD *)v237 - 1) = v238;
                v237 -= 16;
              }
              unint64_t v225 = v235 + 16 * v236;
              if (__pb) {
                operator delete(__pb);
              }
              float32x2_t v224 = v237;
            }
            else
            {
              *(_OWORD *)v226 = v218;
              uint64_t v223 = v226 + 16;
            }
            uint64_t v221 = *a1;
            uint64_t v220 = a1[1];
            v226 = v223;
          }
          ++v227;
          v222 += 192;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v220 - v221) >> 6) > v227);
        if (v226 == v224)
        {
          __pc = v224;
          goto LABEL_389;
        }
        unint64_t v435 = v223;
        float32x2_t v440 = 0;
        v239 = 0;
        unint64_t v240 = 0;
        unint64_t v241 = 0;
        do
        {
          __pc = v224;
          float v242 = vmlas_n_f32(vmuls_lane_f32(COERCE_FLOAT(HIDWORD(*(void *)&v224[16 * v241])) - v443.f32[1], *(float32x2_t *)v462.f32, 1), COERCE_FLOAT(*(_OWORD *)&v224[16 * v241]) - v443.f32[0], v462.f32[0]);
          if ((unint64_t)v239 >= v240)
          {
            uint64_t v243 = v239 - v440;
            unint64_t v244 = v243 + 1;
            if ((unint64_t)(v243 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v240 - (void)v440) >> 1 > v244) {
              unint64_t v244 = (uint64_t)(v240 - (void)v440) >> 1;
            }
            if (v240 - (unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v245 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v245 = v244;
            }
            if (v245) {
              unint64_t v245 = (unint64_t)sub_25B3FBC64(v245);
            }
            else {
              uint64_t v246 = 0;
            }
            float v247 = (float *)(v245 + 4 * v243);
            *float v247 = v242;
            BOOL v248 = v247 + 1;
            if (v239 == v440)
            {
              uint64_t v24 = v433;
            }
            else
            {
              uint64_t v24 = v433;
              do
              {
                int v249 = *((_DWORD *)v239-- - 1);
                *((_DWORD *)v247-- - 1) = v249;
              }
              while (v239 != v440);
            }
            unint64_t v240 = v245 + 4 * v246;
            if (v440)
            {
              operator delete(v440);
              v226 = v435;
            }
            float32x2_t v440 = v247;
            v239 = v248;
          }
          else
          {
            *v239++ = v242;
          }
          ++v241;
          float32x2_t v224 = __pc;
        }
        while (v241 < (v226 - __pc) >> 4);
        BOOL v250 = v440;
        float v251 = v440 + 1;
        if (v440 == v239 || v251 == v239)
        {
          uint64_t v282 = v440;
        }
        else
        {
          float v281 = *v440;
          uint64_t v282 = v440;
          unint64_t v283 = v440 + 1;
          do
          {
            float v284 = *v283++;
            float v285 = v284;
            if (v284 < v281)
            {
              float v281 = v285;
              uint64_t v282 = v251;
            }
            float v251 = v283;
          }
          while (v283 != v239);
        }
LABEL_393:
        float v441 = v250;
        uint64_t v286 = (int)(v282 - v250);
        unint64_t v287 = (_DWORD *)v464.i64[1];
        unint64_t v288 = v465;
        if (v464.i64[1] >= v465)
        {
          v290 = (_DWORD *)v464.i64[0];
          uint64_t v291 = (v464.i64[1] - v464.i64[0]) >> 2;
          unint64_t v292 = v291 + 1;
          if ((unint64_t)(v291 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v465 - v464.i64[0]) >> 1 > v292) {
            unint64_t v292 = (uint64_t)(v465 - v464.i64[0]) >> 1;
          }
          if (v465 - v464.i64[0] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v293 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v293 = v292;
          }
          if (v293) {
            unint64_t v293 = (unint64_t)sub_25B3FBC64(v293);
          }
          else {
            uint64_t v294 = 0;
          }
          uint64_t v295 = (_DWORD *)(v293 + 4 * v291);
          *uint64_t v295 = __srcc[v286];
          v289 = v295 + 1;
          if (v287 == v290)
          {
            uint64_t v24 = v433;
          }
          else
          {
            uint64_t v24 = v433;
            do
            {
              int v296 = *--v287;
              *--uint64_t v295 = v296;
            }
            while (v287 != v290);
          }
          unint64_t v288 = v293 + 4 * v294;
          v464.i64[0] = (uint64_t)v295;
          unint64_t v465 = v288;
          if (v290) {
            operator delete(v290);
          }
        }
        else
        {
          *(_DWORD *)v464.i64[1] = __srcc[v286];
          v289 = v287 + 1;
        }
        v464.i64[1] = (uint64_t)v289;
        if (v441 == v239)
        {
          v298 = v441;
        }
        else
        {
          uint64_t v297 = v441 + 1;
          v298 = v441;
          if (v441 + 1 != v239)
          {
            float v299 = *v441;
            v298 = v441;
            uint64_t v300 = v441 + 1;
            do
            {
              float v301 = *v300++;
              float v302 = v301;
              if (v299 < v301)
              {
                float v299 = v302;
                v298 = v297;
              }
              uint64_t v297 = v300;
            }
            while (v300 != v239);
          }
        }
        uint64_t v303 = (int)(v298 - v441);
        if ((unint64_t)v289 >= v288)
        {
          v306 = (_DWORD *)v464.i64[0];
          uint64_t v307 = ((uint64_t)v289 - v464.i64[0]) >> 2;
          unint64_t v308 = v307 + 1;
          v304 = (char *)__srcc;
          if ((unint64_t)(v307 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v288 - v464.i64[0]) >> 1 > v308) {
            unint64_t v308 = (uint64_t)(v288 - v464.i64[0]) >> 1;
          }
          if (v288 - v464.i64[0] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v309 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v309 = v308;
          }
          if (v309) {
            unint64_t v309 = (unint64_t)sub_25B3FBC64(v309);
          }
          else {
            uint64_t v310 = 0;
          }
          v311 = (_DWORD *)(v309 + 4 * v307);
          _DWORD *v311 = __srcc[v303];
          v305 = v311 + 1;
          if (v289 == v306)
          {
            uint64_t v24 = v433;
          }
          else
          {
            uint64_t v24 = v433;
            do
            {
              int v312 = *--v289;
              *--v311 = v312;
            }
            while (v289 != v306);
          }
          v464.i64[0] = (uint64_t)v311;
          unint64_t v465 = v309 + 4 * v310;
          if (v306) {
            operator delete(v306);
          }
        }
        else
        {
          v304 = (char *)__srcc;
          _DWORD *v289 = __srcc[v303];
          v305 = v289 + 1;
        }
        v464.i64[1] = (uint64_t)v305;
        float v313 = v441[v303] - v441[v286];
        int v314 = vcvtms_s32_f32(v313 / v219);
        v469 = 0;
        uint64_t v470 = 0;
        uint64_t v468 = 0;
        uint64_t v315 = (v314 - 1);
        if (v314 <= 1)
        {
          uint64_t v316 = 0;
          if (v314 < 0)
          {
            unsigned __int32 v322 = 0;
          }
          else
          {
            unint64_t v317 = 0;
            unint64_t v318 = 0;
            uint64_t v319 = 0;
            uint64_t v320 = (v314 + 1);
            do
            {
              uint64_t v321 = v464.i64[0];
              if ((unint64_t)v317 >= v318)
              {
                uint64_t v323 = (v317 - v316) >> 2;
                unint64_t v324 = v323 + 1;
                if ((unint64_t)(v323 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v318 - (void)v316) >> 1 > v324) {
                  unint64_t v324 = (uint64_t)(v318 - (void)v316) >> 1;
                }
                if (v318 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v325 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v325 = v324;
                }
                if (v325) {
                  unint64_t v325 = (unint64_t)sub_25B3FBC64(v325);
                }
                else {
                  uint64_t v326 = 0;
                }
                unint64_t v327 = (char *)(v325 + 4 * v323);
                *(_DWORD *)unint64_t v327 = *(_DWORD *)(v321 + 4 * v319);
                unsigned __int32 v322 = v327 + 4;
                while (v317 != v316)
                {
                  int v328 = *((_DWORD *)v317 - 1);
                  v317 -= 4;
                  *((_DWORD *)v327 - 1) = v328;
                  v327 -= 4;
                }
                unint64_t v318 = v325 + 4 * v326;
                if (v316) {
                  operator delete(v316);
                }
                uint64_t v316 = v327;
                uint64_t v24 = v433;
              }
              else
              {
                *(_DWORD *)unint64_t v317 = *(_DWORD *)(v464.i64[0] + 4 * v319);
                unsigned __int32 v322 = v317 + 4;
              }
              ++v319;
              unint64_t v317 = v322;
            }
            while (v319 != v320);
          }
          unint64_t v386 = (v322 - v316) >> 2;
          uint64_t v387 = (uint64_t)v322;
          uint64_t v73 = (char *)__srcc;
          sub_25B3FE7A8((char *)&v464, v316, v387, v386);
          sub_25B3FE7A8((char *)&v468, v73, v74, (v74 - (uint64_t)v73) >> 2);
          uint64_t v389 = v464.i64[1];
          uint64_t v388 = v464.i64[0];
          if (v464.i64[1] != v464.i64[0])
          {
            unint64_t v390 = 0;
            v392 = v468;
            int32x2_t v391 = v469;
            float32x4_t v393 = v464;
            do
            {
              v394 = (char *)v391;
              if (v392 != v391)
              {
                v394 = (char *)v392;
                while (*(_DWORD *)v394 != *(_DWORD *)(v388 + 4 * v390))
                {
                  v394 += 4;
                  if (v394 == (char *)v391)
                  {
                    v394 = (char *)v391;
                    break;
                  }
                }
              }
              if (v394 != (char *)v391)
              {
                int64_t v395 = (char *)v391 - (v394 + 4);
                if (v391 != (int *)(v394 + 4))
                {
                  memmove(v394, v394 + 4, (char *)v391 - (v394 + 4));
                  uint64_t v389 = *(_OWORD *)&v393 >> 64;
                  uint64_t v388 = (uint64_t)v393;
                }
                int32x2_t v391 = (int *)&v394[v395];
              }
              ++v390;
            }
            while (v390 < (v389 - v388) >> 2);
            v469 = v391;
            uint64_t v73 = (char *)__srcc;
          }
          goto LABEL_559;
        }
        int v436 = v314;
        float32x4_t v471 = 0uLL;
        uint64_t v472 = 0;
        unint64_t v445 = (v74 - (uint64_t)v304) >> 2;
        sub_25B3FE7A8((char *)&v471, v304, v74, v445);
        uint64_t v331 = v464.i64[0];
        if (v464.i64[1] != v464.i64[0])
        {
          unint64_t v332 = 0;
          float32x2_t v333 = (char *)v471.i64[1];
          long long v334 = (char *)v471.i64[0];
          unint64_t v335 = (v464.i64[1] - v464.i64[0]) >> 2;
          do
          {
            if (v334 == v333)
            {
              float32x2_t v336 = v334;
            }
            else
            {
              float32x2_t v336 = v334;
              while (*(_DWORD *)v336 != *(_DWORD *)(v331 + 4 * v332))
              {
                v336 += 4;
                if (v336 == v333)
                {
                  float32x2_t v336 = v333;
                  break;
                }
              }
            }
            if (v336 != v333)
            {
              int64_t v337 = v333 - (v336 + 4);
              if (v333 != v336 + 4) {
                memmove(v336, v336 + 4, v333 - (v336 + 4));
              }
              float32x2_t v333 = &v336[v337];
            }
            ++v332;
          }
          while (v335 > v332);
          v471.i64[1] = (uint64_t)v333;
        }
        uint64_t v316 = 0;
        float32x2_t v338 = 0;
        unint64_t v339 = 0;
        unint64_t v340 = 0;
        do
        {
          uint64_t v341 = v471.i64[0];
          if (v340 >= (v471.i64[1] - v471.i64[0]) >> 2) {
            goto LABEL_477;
          }
          if ((unint64_t)v338 < v339)
          {
            *(_DWORD *)float32x2_t v338 = *(_DWORD *)(v471.i64[0] + 4 * v340);
            v338 += 4;
LABEL_477:
            uint64_t v73 = (char *)__srcc;
            goto LABEL_495;
          }
          uint64_t v342 = (v338 - v316) >> 2;
          unint64_t v343 = v342 + 1;
          if ((unint64_t)(v342 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v339 - (void)v316) >> 1 > v343) {
            unint64_t v343 = (uint64_t)(v339 - (void)v316) >> 1;
          }
          if (v339 - (unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v344 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v344 = v343;
          }
          if (v344) {
            unint64_t v344 = (unint64_t)sub_25B3FBC64(v344);
          }
          else {
            uint64_t v345 = 0;
          }
          float v346 = (char *)(v344 + 4 * v342);
          *(_DWORD *)float v346 = *(_DWORD *)(v341 + 4 * v340);
          int32x2_t v347 = v346 + 4;
          if (v338 == v316)
          {
            uint64_t v73 = (char *)__srcc;
          }
          else
          {
            uint64_t v73 = (char *)__srcc;
            do
            {
              int v348 = *((_DWORD *)v338 - 1);
              v338 -= 4;
              *((_DWORD *)v346 - 1) = v348;
              v346 -= 4;
            }
            while (v338 != v316);
          }
          unint64_t v339 = v344 + 4 * v345;
          if (v316) {
            operator delete(v316);
          }
          uint64_t v316 = v346;
          float32x2_t v338 = v347;
LABEL_495:
          ++v340;
        }
        while (v340 != v315);
        float v349 = (int *)v464.i64[0];
        if (v338 != v316)
        {
          uint64_t v423 = v74;
          uint64_t v350 = 0;
          unint64_t v351 = (v338 - v316) >> 2;
          float32x2_t v352 = (_DWORD *)v464.i64[1];
          unint64_t v353 = v465;
          if (v351 <= 1) {
            uint64_t v354 = 1;
          }
          else {
            uint64_t v354 = v351;
          }
          do
          {
            if ((unint64_t)v352 >= v353)
            {
              uint64_t v356 = v352 - v349;
              unint64_t v357 = v356 + 1;
              if ((unint64_t)(v356 + 1) >> 62)
              {
                unint64_t v465 = v353;
                v464.i64[0] = (uint64_t)v349;
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v353 - (void)v349) >> 1 > v357) {
                unint64_t v357 = (uint64_t)(v353 - (void)v349) >> 1;
              }
              if (v353 - (unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v358 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v358 = v357;
              }
              if (v358) {
                unint64_t v358 = (unint64_t)sub_25B3FBC64(v358);
              }
              else {
                uint64_t v359 = 0;
              }
              int32x2_t v360 = (int *)(v358 + 4 * v356);
              *int32x2_t v360 = *(_DWORD *)&v316[4 * v350];
              v355 = v360 + 1;
              while (v352 != v349)
              {
                int v361 = *--v352;
                *--int32x2_t v360 = v361;
              }
              unint64_t v353 = v358 + 4 * v359;
              v464.i64[1] = (uint64_t)v355;
              if (v349) {
                operator delete(v349);
              }
              float v349 = v360;
              uint64_t v73 = (char *)__srcc;
            }
            else
            {
              *float32x2_t v352 = *(_DWORD *)&v316[4 * v350];
              v355 = v352 + 1;
            }
            v464.i64[1] = (uint64_t)v355;
            ++v350;
            float32x2_t v352 = v355;
          }
          while (v350 != v354);
          unint64_t v465 = v353;
          v464.i64[0] = (uint64_t)v349;
          uint64_t v74 = v423;
        }
        uint64_t v362 = 0;
        uint64_t v363 = *a1 + 192 * *v349;
        float32x2_t v364 = 0;
        float v365 = 0.0;
        do
        {
          float32x2_t v364 = vadd_f32(v364, *(float32x2_t *)(v363 + v362));
          float v365 = v365 + *(float *)(v363 + v362 + 8);
          v362 += 16;
        }
        while (v362 != 128);
        if (v464.i64[1] - (uint64_t)v349 > 8uLL)
        {
          *(float32x2_t *)v329.f32 = vmul_f32(v364, (float32x2_t)0x3E0000003E000000);
          _S4 = v462.i32[2];
          float32x4_t v367 = v462;
          unint64_t v368 = (v464.i64[1] - (uint64_t)v349) >> 2;
          if (v368 <= 3) {
            unint64_t v368 = 3;
          }
          for (uint64_t i = 2; i != v368; ++i)
          {
            uint64_t v370 = 0;
            uint64_t v371 = *a1 + 192 * v349[i];
            v330.i64[0] = 0;
            float v372 = 0.0;
            do
            {
              *(float32x2_t *)v330.f32 = vadd_f32(*(float32x2_t *)v330.f32, *(float32x2_t *)(v371 + v370));
              float v372 = v372 + *(float *)(v371 + v370 + 8);
              v370 += 16;
            }
            while (v370 != 128);
            uint64_t v373 = 0;
            *(float32x2_t *)v330.f32 = vmul_f32(*(float32x2_t *)v330.f32, (float32x2_t)0x3E0000003E000000);
            v330.f32[2] = v372 * 0.125;
            v329.f32[2] = v365 * 0.125;
            _Q6 = vsubq_f32(vmlaq_n_f32(v329, v367, (float)(v313 / (float)v436) * (float)(i - 1)), v330);
            __asm { FMLA            S7, S4, V6.S[2] }
            float32x4_t v376 = vmulq_n_f32(v367, _S7);
            do
            {
              uint64_t v377 = *a1 + 192 * v349[i];
              float32x4_t v330 = vaddq_f32(v376, *(float32x4_t *)(v377 + v373));
              *(float32x4_t *)(v377 + v373) = v330;
              v373 += 16;
            }
            while (v373 != 128);
          }
        }
        sub_25B3FE7A8((char *)&v468, v73, v74, v445);
        uint64_t v379 = v464.i64[1];
        uint64_t v378 = v464.i64[0];
        uint64_t v24 = v433;
        if (v464.i64[1] != v464.i64[0])
        {
          unint64_t v380 = 0;
          float32x2_t v382 = v468;
          int8x8_t v381 = v469;
          float32x4_t v383 = v464;
          do
          {
            float32x2_t v384 = (char *)v381;
            if (v382 != v381)
            {
              float32x2_t v384 = (char *)v382;
              while (*(_DWORD *)v384 != *(_DWORD *)(v378 + 4 * v380))
              {
                v384 += 4;
                if (v384 == (char *)v381)
                {
                  float32x2_t v384 = (char *)v381;
                  break;
                }
              }
            }
            if (v384 != (char *)v381)
            {
              int64_t v385 = (char *)v381 - (v384 + 4);
              if (v381 != (int *)(v384 + 4))
              {
                memmove(v384, v384 + 4, (char *)v381 - (v384 + 4));
                uint64_t v379 = *(_OWORD *)&v383 >> 64;
                uint64_t v378 = (uint64_t)v383;
              }
              int8x8_t v381 = (int *)&v384[v385];
            }
            ++v380;
          }
          while (v380 < (v379 - v378) >> 2);
          v469 = v381;
          uint64_t v73 = (char *)__srcc;
        }
        if (v471.i64[0]) {
          operator delete((void *)v471.i64[0]);
        }
LABEL_559:
        uint64_t v10 = a5;
        float v12 = a2;
        if (v316) {
          operator delete(v316);
        }
        if (v441) {
          operator delete(v441);
        }
        if (__pc) {
          operator delete(__pc);
        }
        if (v464.i64[0]) {
          operator delete((void *)v464.i64[0]);
        }
LABEL_567:
        if (v73) {
          operator delete(v73);
        }
        float v86 = v468;
        if (v469 == v468)
        {
          float v86 = v469;
          if (!v469) {
            goto LABEL_600;
          }
LABEL_597:
          v469 = v86;
          goto LABEL_598;
        }
        unint64_t v396 = 0;
        float v397 = *(_DWORD **)(v10 + 8);
        unint64_t v398 = v469 - v468;
        do
        {
          v399 = *(_DWORD **)v10;
          float32x2_t v400 = v397;
          if (*(_DWORD **)v10 != v397)
          {
            float32x2_t v400 = *(_DWORD **)v10;
            while (*v400 != v86[v396])
            {
              if (++v400 == v397)
              {
                float32x2_t v400 = v397;
                break;
              }
            }
          }
          if (v400 == v397)
          {
            unint64_t v401 = *(void *)(v10 + 16);
            if ((unint64_t)v397 >= v401)
            {
              uint64_t v403 = v397 - v399;
              unint64_t v404 = v403 + 1;
              if ((unint64_t)(v403 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              uint64_t v405 = v401 - (void)v399;
              if (v405 >> 1 > v404) {
                unint64_t v404 = v405 >> 1;
              }
              _CF = (unint64_t)v405 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v406 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v406 = v404;
              }
              if (v406)
              {
                unint64_t v406 = (unint64_t)sub_25B3FBC64(v406);
                v399 = *(_DWORD **)v10;
                float v397 = *(_DWORD **)(v10 + 8);
              }
              else
              {
                uint64_t v407 = 0;
              }
              float v408 = (_DWORD *)(v406 + 4 * v403);
              *float v408 = v86[v396];
              float v402 = v408 + 1;
              while (v397 != v399)
              {
                int v409 = *--v397;
                *--float v408 = v409;
              }
              *(void *)uint64_t v10 = v408;
              *(void *)(v10 + 8) = v402;
              *(void *)(v10 + 16) = v406 + 4 * v407;
              if (v399) {
                operator delete(v399);
              }
            }
            else
            {
              *float v397 = v86[v396];
              float v402 = v397 + 1;
            }
            *(void *)(v10 + 8) = v402;
            float v397 = v402;
            float v12 = a2;
          }
          ++v396;
        }
        while (v398 > v396);
        if (v86) {
          goto LABEL_597;
        }
LABEL_600:
        if (v24) {
          operator delete(v24);
        }
        uint64_t v14 = v430;
        int v11 = a3;
        if (v430 != 4) {
          continue;
        }
        return;
      case 4:
        *(float32x4_t *)__pa = v40;
        *(float64x2_t *)__srca = v42;
        *(float32x4_t *)unint64_t v461 = _Q2;
        v464.i64[1] = 0;
        unint64_t v465 = 0;
        v464.i64[0] = (uint64_t)&v464.i64[1];
        if ((char *)v25 != v24)
        {
          uint64_t v62 = 0;
          while (1)
          {
            uint64_t v64 = *(_DWORD **)v10;
            uint64_t v63 = *(_DWORD **)(v10 + 8);
            if (*(_DWORD **)v10 != v63)
            {
              do
              {
                if (*v64 == *(_DWORD *)&v24[4 * v62]) {
                  goto LABEL_58;
                }
                ++v64;
              }
              while (v64 != v63);
              uint64_t v64 = *(_DWORD **)(v10 + 8);
            }
LABEL_58:
            if (v64 == v63) {
              sub_25B3FBE5C((uint64_t *)&v464, *(_DWORD *)&v24[4 * v62], *(_DWORD *)&v24[4 * v62]);
            }
            if (++v62 >= (unint64_t)((v25 - (uint64_t)v24) >> 2))
            {
              uint64_t v65 = (uint64_t *)v464.i64[0];
              goto LABEL_140;
            }
          }
        }
        uint64_t v65 = &v464.i64[1];
LABEL_140:
        sub_25B56CB74(&v471, v65, &v464.i64[1]);
        v135 = (void *)v471.i64[1];
        if (v471.i64[1] == v471.i64[0])
        {
          float32x4_t v462 = 0uLL;
          uint64_t v463 = 0;
          if (!v471.i64[1]) {
            goto LABEL_170;
          }
          goto LABEL_169;
        }
        uint64_t v468 = 0;
        v469 = 0;
        uint64_t v470 = 0;
        sub_25B3FC724(&v468, (const void *)v471.i64[0], v471.i64[1], (v471.i64[1] - v471.i64[0]) >> 2);
        float v136 = sub_25B56B744((float32x4_t *)(*a1 + 192 * *(int *)v471.i64[0]), (float *)v461);
        v137.i32[0] = vextq_s8(*(int8x16_t *)__pa, *(int8x16_t *)__pa, 8uLL).u32[0];
        v137.i32[1] = (__int32)__pa[0];
        float64x2_t v138 = vcvtq_f64_f32(v137);
        float64x2_t v139 = vmulq_f64(v138, v138);
        float v140 = sqrt(vaddq_f64(v139, (float64x2_t)vdupq_laneq_s64((int64x2_t)vaddq_f64(v139, *(float64x2_t *)__srca), 1)).f64[0]);
        unint64_t v141 = v468;
        unint64_t v142 = v469;
        unint64_t v143 = v469 - v468;
        int v144 = (int)fmin((double)(int)vcvtms_s32_f32(v140 / v136), (double)v143);
        unint64_t v145 = (__PAIR64__(v144, v140 - (float)((float)v144 * v136)) - COERCE_UNSIGNED_INT(0.08)) >> 32;
        if ((int)v145 < 1)
        {
          float32x4_t v462 = v471;
          uint64_t v463 = v472;
          uint64_t v472 = 0;
          float32x4_t v471 = 0uLL;
          if (!v468) {
            goto LABEL_168;
          }
        }
        else
        {
          if (v143 > v145)
          {
            unint64_t v146 = sub_25B3FBC64((__PAIR64__(v144, v140 - (float)((float)v144 * v136)) - COERCE_UNSIGNED_INT(0.08)) >> 32);
            memmove(v146, v141, 4 * v145);
            sub_25B3FE7A8((char *)&v468, (char *)v146, (uint64_t)v146 + 4 * v145, v145);
            if (v146) {
              operator delete(v146);
            }
            unint64_t v141 = v468;
            unint64_t v142 = v469;
          }
          if (v142 != v141)
          {
            uint64_t v147 = 0;
            float v148 = v140 / (float)(int)v145;
            v149.i64[0] = 0x3F0000003F000000;
            v149.i64[1] = 0x3F0000003F000000;
            float32x4_t v444 = vmlaq_f32(v443, v149, vmulq_n_f32(v431, v148));
            unint64_t v150 = v142 - v141;
            if (v150 <= 1) {
              unint64_t v150 = 1;
            }
            do
            {
              uint64_t v151 = 0;
              uint64_t v152 = *a1 + 192 * v141[v147];
              v149.i64[0] = 0;
              float v153 = 0.0;
              do
              {
                *(float32x2_t *)v149.f32 = vadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)(v152 + v151));
                float v153 = v153 + *(float *)(v152 + v151 + 8);
                v151 += 16;
              }
              while (v151 != 128);
              uint64_t v154 = 0;
              *(float32x2_t *)v149.f32 = vmul_f32(*(float32x2_t *)v149.f32, (float32x2_t)0x3E0000003E000000);
              v149.f32[2] = v153 * 0.125;
              _Q2 = vsubq_f32(vmlaq_n_f32(v444, v431, v148 * (float)(int)v147), v149);
              _S4 = v434.i32[0];
              __asm { FMLA            S3, S4, V2.S[2] }
              float32x4_t v158 = vmulq_n_f32(v431, _S3);
              do
              {
                uint64_t v159 = *a1 + 192 * v141[v147];
                float32x4_t v149 = vaddq_f32(v158, *(float32x4_t *)(v159 + v154));
                *(float32x4_t *)(v159 + v154) = v149;
                v154 += 16;
              }
              while (v154 != 128);
              ++v147;
            }
            while (v147 != v150);
          }
          float32x4_t v462 = 0uLL;
          uint64_t v463 = 0;
          sub_25B3FC724(&v462, (const void *)v471.i64[0], v471.i64[1], (v471.i64[1] - v471.i64[0]) >> 2);
          if (v142 != v141)
          {
            unint64_t v160 = 0;
            v161 = (char *)v462.i64[1];
            uint64_t v162 = (char *)v462.i64[0];
            unint64_t v164 = v468;
            unint64_t v163 = v469;
            do
            {
              uint64_t v165 = v161;
              if (v162 != v161)
              {
                uint64_t v165 = v162;
                do
                {
                  if (*(_DWORD *)v165 == v141[v160]) {
                    goto LABEL_161;
                  }
                  v165 += 4;
                }
                while (v165 != v161);
                uint64_t v165 = v161;
              }
LABEL_161:
              if (v165 != v161)
              {
                int64_t v166 = v161 - (v165 + 4);
                if (v161 != v165 + 4)
                {
                  memmove(v165, v165 + 4, v161 - (v165 + 4));
                  unint64_t v141 = v164;
                  unint64_t v142 = v163;
                }
                v161 = &v165[v166];
              }
              ++v160;
            }
            while (v160 < v142 - v141);
            v462.i64[1] = (uint64_t)v161;
            uint64_t v10 = a5;
            float v12 = a2;
            if (v141) {
              goto LABEL_167;
            }
LABEL_168:
            v135 = (void *)v471.i64[0];
            if (!v471.i64[0])
            {
LABEL_170:
              sub_25B3FA930((void *)v464.i64[1]);
              float v86 = (int *)v462.i64[0];
              if (v462.i64[1] == v462.i64[0])
              {
                float v86 = (int *)v462.i64[1];
                if (!v462.i64[1]) {
                  goto LABEL_600;
                }
              }
              else
              {
                unint64_t v167 = 0;
                v168 = *(_DWORD **)(v10 + 8);
                unint64_t v169 = (v462.i64[1] - v462.i64[0]) >> 2;
                do
                {
                  unint64_t v170 = *(_DWORD **)v10;
                  unint64_t v171 = v168;
                  if (*(_DWORD **)v10 != v168)
                  {
                    unint64_t v171 = *(_DWORD **)v10;
                    do
                    {
                      if (*v171 == v86[v167]) {
                        goto LABEL_177;
                      }
                      ++v171;
                    }
                    while (v171 != v168);
                    unint64_t v171 = v168;
                  }
LABEL_177:
                  if (v171 == v168)
                  {
                    unint64_t v172 = *(void *)(v10 + 16);
                    if ((unint64_t)v168 >= v172)
                    {
                      uint64_t v174 = v168 - v170;
                      unint64_t v175 = v174 + 1;
                      if ((unint64_t)(v174 + 1) >> 62) {
                        sub_25B3FBC4C();
                      }
                      uint64_t v176 = v172 - (void)v170;
                      if (v176 >> 1 > v175) {
                        unint64_t v175 = v176 >> 1;
                      }
                      _CF = (unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL;
                      unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
                      if (!_CF) {
                        unint64_t v177 = v175;
                      }
                      if (v177)
                      {
                        unint64_t v177 = (unint64_t)sub_25B3FBC64(v177);
                        unint64_t v170 = *(_DWORD **)v10;
                        v168 = *(_DWORD **)(v10 + 8);
                      }
                      else
                      {
                        uint64_t v178 = 0;
                      }
                      int32x2_t v179 = (_DWORD *)(v177 + 4 * v174);
                      *int32x2_t v179 = v86[v167];
                      v173 = v179 + 1;
                      while (v168 != v170)
                      {
                        int v180 = *--v168;
                        *--int32x2_t v179 = v180;
                      }
                      *(void *)uint64_t v10 = v179;
                      *(void *)(v10 + 8) = v173;
                      *(void *)(v10 + 16) = v177 + 4 * v178;
                      if (v170) {
                        operator delete(v170);
                      }
                    }
                    else
                    {
                      _DWORD *v168 = v86[v167];
                      v173 = v168 + 1;
                    }
                    *(void *)(v10 + 8) = v173;
                    v168 = v173;
                    float v12 = a2;
                  }
                  ++v167;
                }
                while (v169 > v167);
                if (!v86) {
                  goto LABEL_600;
                }
              }
              v462.i64[1] = (uint64_t)v86;
LABEL_598:
              int32x2_t v253 = v86;
LABEL_599:
              operator delete(v253);
              goto LABEL_600;
            }
LABEL_169:
            v471.i64[1] = (uint64_t)v135;
            operator delete(v135);
            goto LABEL_170;
          }
          uint64_t v10 = a5;
          if (!v141) {
            goto LABEL_168;
          }
        }
LABEL_167:
        v469 = v141;
        operator delete(v141);
        goto LABEL_168;
      default:
        goto LABEL_600;
    }
  }
}

void sub_25B56EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  a66 = (uint64_t)&a56;
  sub_25B41D070((void ***)&a66);
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  uint64_t v68 = *(void **)(v66 - 216);
  if (v68)
  {
    *(void *)(v66 - 208) = v68;
    operator delete(v68);
  }
  int64_t v69 = *(void **)(v66 - 192);
  if (v69)
  {
    *(void *)(v66 - 184) = v69;
    operator delete(v69);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_25B56F224()
{
}

void sub_25B56F23C(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v738 = *MEMORY[0x263EF8340];
  long long v678 = 0uLL;
  v679[0] = 0;
  unint64_t v676 = 0;
  uint64_t v675 = 0;
  unint64_t v677 = 0;
  __float2 v3 = *(long long **)a2;
  int8x16_t v4 = (long long *)*((void *)a2 + 1);
  if (*(long long **)a2 == v4) {
    goto LABEL_121;
  }
  int v5 = 0;
  do
  {
    if ((objc_msgSend_isEqualToString_(*((void **)v3 + 16), a2, @"Chair") & 1) != 0
      || (objc_msgSend_isEqualToString_(*((void **)v3 + 16), v6, @"Table") & 1) != 0
      || objc_msgSend_isEqualToString_(*((void **)v3 + 16), v7, @"Storage"))
    {
      uint64_t v9 = *((void *)&v678 + 1);
      if (*((void *)&v678 + 1) >= v679[0])
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v679[0] - v678) >> 6) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v679[0] - v678) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v679[0] - v678) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v13 = 0x155555555555555;
        }
        else {
          unint64_t v13 = v12;
        }
        *(void *)&v724[16] = v679;
        if (v13) {
          unint64_t v13 = (unint64_t)sub_25B41D460(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        *(void *)buf = v13;
        *(void *)&buf[8] = v13 + 192 * v11;
        *(void *)v724 = *(void *)&buf[8];
        *(void *)&v724[8] = v13 + 192 * v14;
        sub_25B46EAF0(*(uint64_t *)&buf[8], v3);
        *(void *)v724 += 192;
        sub_25B4458D0((uint64_t *)&v678, buf);
        uint64_t v10 = *((void *)&v678 + 1);
        sub_25B4459A4((uint64_t)buf);
      }
      else
      {
        sub_25B46EAF0(*((uint64_t *)&v678 + 1), v3);
        uint64_t v10 = v9 + 192;
      }
      *((void *)&v678 + 1) = v10;
    }
    v5 += objc_msgSend_isEqualToString_(*((void **)v3 + 16), v8, @"Chair");
    v3 += 12;
  }
  while (v3 != v4);
  if (!v5 || (uint64_t v15 = v678, (void)v678 == *((void *)&v678 + 1)))
  {
LABEL_121:
    unint64_t v97 = *(long long **)a2;
    int v98 = (long long *)*((void *)a2 + 1);
    if (*(long long **)a2 != v98)
    {
      unint64_t v99 = v676;
      do
      {
        if (v99 >= v677)
        {
          unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - v675) >> 6);
          unint64_t v101 = v100 + 1;
          if (v100 + 1 > 0x155555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v677 - v675) >> 6) > v101) {
            unint64_t v101 = 0x5555555555555556 * ((uint64_t)(v677 - v675) >> 6);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v677 - v675) >> 6) >= 0xAAAAAAAAAAAAAALL) {
            unint64_t v102 = 0x155555555555555;
          }
          else {
            unint64_t v102 = v101;
          }
          *(void *)&v724[16] = &v677;
          if (v102) {
            unint64_t v102 = (unint64_t)sub_25B41D460(v102);
          }
          else {
            uint64_t v103 = 0;
          }
          *(void *)buf = v102;
          *(void *)&buf[8] = v102 + 192 * v100;
          *(void *)v724 = *(void *)&buf[8];
          *(void *)&v724[8] = v102 + 192 * v103;
          sub_25B46EAF0(*(uint64_t *)&buf[8], v97);
          *(void *)v724 += 192;
          sub_25B4458D0(&v675, buf);
          unint64_t v99 = v676;
          sub_25B4459A4((uint64_t)buf);
        }
        else
        {
          sub_25B46EAF0(v99, v97);
          v99 += 192;
        }
        unint64_t v676 = v99;
        v97 += 12;
      }
      while (v97 != v98);
    }
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    float32x4_t v104 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_25B3F3000, v104, OS_LOG_TYPE_DEBUG, "Skip Chair Beautification since there is no chair.", buf, 2u);
    }

    memset(buf, 0, sizeof(buf));
    *(void *)v724 = 0;
    sub_25B471374(buf, v675, v676, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v676 - v675) >> 6));
    *(void *)&v724[16] = 0;
    *(_OWORD *)a1 = *(_OWORD *)buf;
    uint64_t v105 = *(void *)v724;
    *(_OWORD *)v724 = 0uLL;
    memset(buf, 0, sizeof(buf));
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = v105;
    v699[0] = buf;
    sub_25B41D070((void ***)v699);
    goto LABEL_141;
  }
  __p = 0;
  long long v16 = 0;
  unint64_t v616 = 0;
  long long v17 = 0;
  long long v18 = 0;
  unint64_t v611 = 0;
  long long v19 = 0;
  float32x4_t v20 = 0;
  unint64_t v608 = 0;
  v680[1] = 0;
  v680[0] = 0;
  *(void *)&long long v681 = 0;
  do
  {
    id v21 = *(id *)(v15 + 128);
    if (objc_msgSend_isEqualToString_(v21, v22, @"Chair"))
    {
      uint64_t v24 = v17;
      int v25 = -1431655765 * ((unint64_t)(v15 - v678) >> 6);
      if ((unint64_t)v16 < v616)
      {
        *(_DWORD *)long long v16 = v25;
        v16 += 4;
LABEL_29:
        long long v17 = v24;
        goto LABEL_80;
      }
      uint64_t v28 = (v16 - __p) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v616 - (void)__p) >> 1 > v29) {
        unint64_t v29 = (uint64_t)(v616 - (void)__p) >> 1;
      }
      if (v616 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        unint64_t v30 = (unint64_t)sub_25B3FBC64(v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v37 = (char *)(v30 + 4 * v28);
      *(_DWORD *)uint64_t v37 = v25;
      size_t v38 = v37 + 4;
      long long v17 = v24;
      if (v16 == __p)
      {
        int v39 = __p;
      }
      else
      {
        int v39 = __p;
        do
        {
          int v40 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v37 - 1) = v40;
          v37 -= 4;
        }
        while (v16 != __p);
      }
      unint64_t v616 = v30 + 4 * v31;
      if (v39) {
        operator delete(v39);
      }
      __p = v37;
      long long v16 = v38;
    }
    else if (objc_msgSend_isEqualToString_(v21, v23, @"Table"))
    {
      uint64_t v24 = v17;
      int v27 = -1431655765 * ((unint64_t)(v15 - v678) >> 6);
      if ((unint64_t)v18 < v611)
      {
        *(_DWORD *)long long v18 = v27;
        v18 += 4;
        goto LABEL_29;
      }
      uint64_t v33 = (v18 - v24) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v611 - (void)v24) >> 1 > v34) {
        unint64_t v34 = (uint64_t)(v611 - (void)v24) >> 1;
      }
      if (v611 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)sub_25B3FBC64(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v46 = (char *)(v35 + 4 * v33);
      *(_DWORD *)uint64_t v46 = v27;
      uint64_t v47 = v46 + 4;
      while (v18 != v24)
      {
        int v48 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v46 - 1) = v48;
        v46 -= 4;
      }
      unint64_t v611 = v35 + 4 * v36;
      if (v24) {
        operator delete(v24);
      }
      long long v17 = v46;
      long long v18 = v47;
    }
    else if (objc_msgSend_isEqualToString_(v21, v26, @"Storage"))
    {
      int v32 = -1431655765 * ((unint64_t)(v15 - v678) >> 6);
      if ((unint64_t)v20 >= v608)
      {
        float64x2_t v41 = v17;
        uint64_t v42 = (v20 - v19) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v608 - (void)v19) >> 1 > v43) {
          unint64_t v43 = (uint64_t)(v608 - (void)v19) >> 1;
        }
        if (v608 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          unint64_t v44 = (unint64_t)sub_25B3FBC64(v44);
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v49 = (char *)(v44 + 4 * v42);
        *(_DWORD *)uint64_t v49 = v32;
        uint64_t v50 = v49 + 4;
        while (v20 != v19)
        {
          int v51 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v49 - 1) = v51;
          v49 -= 4;
        }
        unint64_t v608 = v44 + 4 * v45;
        if (v19) {
          operator delete(v19);
        }
        long long v19 = v49;
        float32x4_t v20 = v50;
        long long v17 = v41;
      }
      else
      {
        *(_DWORD *)float32x4_t v20 = v32;
        v20 += 4;
      }
    }
LABEL_80:

    v15 += 192;
  }
  while (v15 != *((void *)&v678 + 1));
  v699[1] = 0;
  v699[0] = 0;
  v700.i64[0] = 0;
  v717[1] = 0;
  v717[0] = 0;
  *(void *)&v718[0] = 0;
  v689[1] = 0;
  v689[0] = 0;
  v690.i64[0] = 0;
  uint64_t v52 = v16 - __p;
  if (v16 == __p)
  {
    v618 = v19;
    uint64_t v54 = 0;
  }
  else
  {
    v618 = v19;
    obj = v17;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v57 = v52 >> 2;
    if (v57 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v57;
    }
    do
    {
      uint64_t v59 = (long long *)(v678 + 192 * *(int *)&__p[4 * v56]);
      if ((unint64_t)v53 >= v55)
      {
        uint64_t v66 = (v53 - v54) >> 7;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 57)
        {
          *(void *)&v718[0] = v55;
          v717[0] = v54;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v55 - (void)v54) >> 6 > v67) {
          unint64_t v67 = (uint64_t)(v55 - (void)v54) >> 6;
        }
        if (v55 - (unint64_t)v54 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68) {
          unint64_t v68 = (unint64_t)sub_25B563C40(v68);
        }
        else {
          uint64_t v69 = 0;
        }
        int64_t v70 = (_OWORD *)(v68 + (v66 << 7));
        long long v71 = *v59;
        long long v72 = v59[1];
        long long v73 = v59[3];
        v70[2] = v59[2];
        v70[3] = v73;
        *int64_t v70 = v71;
        v70[1] = v72;
        long long v74 = v59[4];
        long long v75 = v59[5];
        long long v76 = v59[7];
        v70[6] = v59[6];
        v70[7] = v76;
        v70[4] = v74;
        v70[5] = v75;
        if (v53 == v54)
        {
          uint64_t v84 = (char *)(v68 + (v66 << 7));
        }
        else
        {
          unint64_t v77 = v68 + (v66 << 7);
          do
          {
            long long v78 = *((_OWORD *)v53 - 8);
            long long v79 = *((_OWORD *)v53 - 7);
            long long v80 = *((_OWORD *)v53 - 5);
            *(_OWORD *)(v77 - 96) = *((_OWORD *)v53 - 6);
            *(_OWORD *)(v77 - 80) = v80;
            *(_OWORD *)(v77 - 128) = v78;
            *(_OWORD *)(v77 - 112) = v79;
            long long v81 = *((_OWORD *)v53 - 4);
            long long v82 = *((_OWORD *)v53 - 3);
            long long v83 = *((_OWORD *)v53 - 1);
            uint64_t v84 = (char *)(v77 - 128);
            *(_OWORD *)(v77 - 32) = *((_OWORD *)v53 - 2);
            *(_OWORD *)(v77 - 16) = v83;
            *(_OWORD *)(v77 - 64) = v81;
            *(_OWORD *)(v77 - 48) = v82;
            v53 -= 128;
            v77 -= 128;
          }
          while (v53 != v54);
        }
        unint64_t v55 = v68 + (v69 << 7);
        uint64_t v53 = (char *)(v70 + 8);
        v717[1] = v70 + 8;
        if (v54) {
          operator delete(v54);
        }
        uint64_t v54 = v84;
      }
      else
      {
        long long v60 = *v59;
        long long v61 = v59[1];
        long long v62 = v59[3];
        *((_OWORD *)v53 + 2) = v59[2];
        *((_OWORD *)v53 + 3) = v62;
        *(_OWORD *)uint64_t v53 = v60;
        *((_OWORD *)v53 + 1) = v61;
        long long v63 = v59[4];
        long long v64 = v59[5];
        long long v65 = v59[7];
        *((_OWORD *)v53 + 6) = v59[6];
        *((_OWORD *)v53 + 7) = v65;
        *((_OWORD *)v53 + 4) = v63;
        *((_OWORD *)v53 + 5) = v64;
        v53 += 128;
      }
      v717[1] = v53;
      int v85 = (_DWORD *)(v678 + 192 * *(int *)&__p[4 * v56] + 136);
      float v86 = (char *)v689[1];
      if (v689[1] >= (void *)v690.i64[0])
      {
        unint64_t v88 = (char *)v689[0];
        int64_t v89 = ((char *)v689[1] - (char *)v689[0]) >> 2;
        unint64_t v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 62)
        {
          *(void *)&v718[0] = v55;
          v717[0] = v54;
          sub_25B3FBC4C();
        }
        uint64_t v91 = v690.i64[0] - (unint64_t)v689[0];
        if ((uint64_t)(v690.i64[0] - (unint64_t)v689[0]) >> 1 > v90) {
          unint64_t v90 = v91 >> 1;
        }
        _CF = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v93 = v90;
        }
        if (v93)
        {
          unint64_t v93 = (unint64_t)sub_25B3FBC64(v93);
          float v86 = (char *)v689[1];
          unint64_t v88 = (char *)v689[0];
        }
        else
        {
          uint64_t v94 = 0;
        }
        unint64_t v95 = (_DWORD *)(v93 + 4 * v89);
        *unint64_t v95 = *v85;
        uint64_t v87 = v95 + 1;
        while (v86 != v88)
        {
          int v96 = *((_DWORD *)v86 - 1);
          v86 -= 4;
          *--unint64_t v95 = v96;
        }
        v689[0] = v95;
        v689[1] = v87;
        v690.i64[0] = v93 + 4 * v94;
        if (v88) {
          operator delete(v88);
        }
      }
      else
      {
        *(_DWORD *)v689[1] = *v85;
        uint64_t v87 = v86 + 4;
      }
      v689[1] = v87;
      ++v56;
    }
    while (v56 != v58);
    *(void *)&v718[0] = v55;
    v717[0] = v54;
    long long v17 = obj;
  }
  obja = v17;
  sub_25B56A664(@"Chair", (uint64_t *)v717, (uint64_t *)v689, v699);
  uint64_t v106 = (int *)v699[0];
  v107 = (int *)v699[1];
  if (v699[0] != v699[1])
  {
    float v108 = (char *)v680[1];
    do
    {
      uint64_t v109 = (long long *)(v678 + 192 * *(int *)&__p[4 * *v106]);
      if ((unint64_t)v108 >= (unint64_t)v681)
      {
        unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((v108 - (char *)v680[0]) >> 6);
        unint64_t v111 = v110 + 1;
        if (v110 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) > v111) {
          unint64_t v111 = 0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v112 = 0x155555555555555;
        }
        else {
          unint64_t v112 = v111;
        }
        *(void *)&v724[16] = &v681;
        if (v112) {
          unint64_t v112 = (unint64_t)sub_25B41D460(v112);
        }
        else {
          uint64_t v113 = 0;
        }
        *(void *)buf = v112;
        *(void *)&buf[8] = v112 + 192 * v110;
        *(void *)v724 = *(void *)&buf[8];
        *(void *)&v724[8] = v112 + 192 * v113;
        sub_25B46EAF0(*(uint64_t *)&buf[8], v109);
        *(void *)v724 += 192;
        sub_25B4458D0((uint64_t *)v680, buf);
        float v108 = (char *)v680[1];
        sub_25B4459A4((uint64_t)buf);
      }
      else
      {
        sub_25B46EAF0((uint64_t)v108, (long long *)(v678 + 192 * *(int *)&__p[4 * *v106]));
        v108 += 192;
      }
      v680[1] = v108;
      ++v106;
    }
    while (v106 != v107);
    uint64_t v106 = (int *)v699[0];
    uint64_t v54 = (char *)v717[0];
  }
  v717[1] = v54;
  v689[1] = v689[0];
  v699[1] = v106;
  if (v18 == v17)
  {
    float32x4_t v118 = v54;
  }
  else
  {
    uint64_t v114 = 0;
    unint64_t v115 = (v18 - v17) >> 2;
    unint64_t v116 = *(void *)&v718[0];
    if (v115 <= 1) {
      uint64_t v117 = 1;
    }
    else {
      uint64_t v117 = v115;
    }
    float32x4_t v118 = v54;
    do
    {
      float32x4_t v119 = (long long *)(v678 + 192 * *(int *)&v17[4 * v114]);
      if ((unint64_t)v54 >= v116)
      {
        uint64_t v126 = (v54 - v118) >> 7;
        unint64_t v127 = v126 + 1;
        if ((unint64_t)(v126 + 1) >> 57)
        {
          *(void *)&v718[0] = v116;
          v717[0] = v118;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v116 - (void)v118) >> 6 > v127) {
          unint64_t v127 = (uint64_t)(v116 - (void)v118) >> 6;
        }
        if (v116 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v128 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v128 = v127;
        }
        if (v128) {
          unint64_t v128 = (unint64_t)sub_25B563C40(v128);
        }
        else {
          uint64_t v129 = 0;
        }
        uint64_t v130 = (_OWORD *)(v128 + (v126 << 7));
        long long v131 = *v119;
        long long v132 = v119[1];
        long long v133 = v119[3];
        v130[2] = v119[2];
        v130[3] = v133;
        _OWORD *v130 = v131;
        v130[1] = v132;
        long long v134 = v119[4];
        long long v135 = v119[5];
        long long v136 = v119[7];
        v130[6] = v119[6];
        v130[7] = v136;
        v130[4] = v134;
        v130[5] = v135;
        if (v54 == v118)
        {
          int v144 = (char *)(v128 + (v126 << 7));
        }
        else
        {
          unint64_t v137 = v128 + (v126 << 7);
          do
          {
            long long v138 = *((_OWORD *)v54 - 8);
            long long v139 = *((_OWORD *)v54 - 7);
            long long v140 = *((_OWORD *)v54 - 5);
            *(_OWORD *)(v137 - 96) = *((_OWORD *)v54 - 6);
            *(_OWORD *)(v137 - 80) = v140;
            *(_OWORD *)(v137 - 128) = v138;
            *(_OWORD *)(v137 - 112) = v139;
            long long v141 = *((_OWORD *)v54 - 4);
            long long v142 = *((_OWORD *)v54 - 3);
            long long v143 = *((_OWORD *)v54 - 1);
            int v144 = (char *)(v137 - 128);
            *(_OWORD *)(v137 - 32) = *((_OWORD *)v54 - 2);
            *(_OWORD *)(v137 - 16) = v143;
            *(_OWORD *)(v137 - 64) = v141;
            *(_OWORD *)(v137 - 48) = v142;
            v54 -= 128;
            v137 -= 128;
          }
          while (v54 != v118);
        }
        unint64_t v116 = v128 + (v129 << 7);
        uint64_t v54 = (char *)(v130 + 8);
        v717[1] = v130 + 8;
        if (v118) {
          operator delete(v118);
        }
        float32x4_t v118 = v144;
      }
      else
      {
        long long v120 = *v119;
        long long v121 = v119[1];
        long long v122 = v119[3];
        *((_OWORD *)v54 + 2) = v119[2];
        *((_OWORD *)v54 + 3) = v122;
        *(_OWORD *)uint64_t v54 = v120;
        *((_OWORD *)v54 + 1) = v121;
        long long v123 = v119[4];
        long long v124 = v119[5];
        long long v125 = v119[7];
        *((_OWORD *)v54 + 6) = v119[6];
        *((_OWORD *)v54 + 7) = v125;
        *((_OWORD *)v54 + 4) = v123;
        *((_OWORD *)v54 + 5) = v124;
        v54 += 128;
      }
      v717[1] = v54;
      unint64_t v145 = (_DWORD *)(v678 + 192 * *(int *)&obja[4 * v114] + 136);
      unint64_t v146 = (char *)v689[1];
      if (v689[1] >= (void *)v690.i64[0])
      {
        float v148 = (char *)v689[0];
        int64_t v149 = ((char *)v689[1] - (char *)v689[0]) >> 2;
        unint64_t v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 62)
        {
          *(void *)&v718[0] = v116;
          v717[0] = v118;
          sub_25B3FBC4C();
        }
        uint64_t v151 = v690.i64[0] - (unint64_t)v689[0];
        if ((uint64_t)(v690.i64[0] - (unint64_t)v689[0]) >> 1 > v150) {
          unint64_t v150 = v151 >> 1;
        }
        _CF = (unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v152 = v150;
        }
        if (v152)
        {
          unint64_t v152 = (unint64_t)sub_25B3FBC64(v152);
          unint64_t v146 = (char *)v689[1];
          float v148 = (char *)v689[0];
        }
        else
        {
          uint64_t v153 = 0;
        }
        uint64_t v154 = (_DWORD *)(v152 + 4 * v149);
        *uint64_t v154 = *v145;
        uint64_t v147 = v154 + 1;
        while (v146 != v148)
        {
          int v155 = *((_DWORD *)v146 - 1);
          v146 -= 4;
          *--uint64_t v154 = v155;
        }
        v689[0] = v154;
        v689[1] = v147;
        v690.i64[0] = v152 + 4 * v153;
        if (v148) {
          operator delete(v148);
        }
      }
      else
      {
        *(_DWORD *)v689[1] = *v145;
        uint64_t v147 = v146 + 4;
      }
      v689[1] = v147;
      ++v114;
      long long v17 = obja;
    }
    while (v114 != v117);
    *(void *)&v718[0] = v116;
    v717[0] = v118;
  }
  sub_25B56A664(@"Table", (uint64_t *)v717, (uint64_t *)v689, v699);
  v156 = (int *)v699[0];
  float32x2_t v157 = (int *)v699[1];
  if (v699[0] != v699[1])
  {
    float32x4_t v158 = (char *)v680[1];
    do
    {
      uint64_t v159 = (long long *)(v678 + 192 * *(int *)&obja[4 * *v156]);
      if ((unint64_t)v158 >= (unint64_t)v681)
      {
        unint64_t v160 = 0xAAAAAAAAAAAAAAABLL * ((v158 - (char *)v680[0]) >> 6);
        unint64_t v161 = v160 + 1;
        if (v160 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) > v161) {
          unint64_t v161 = 0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v162 = 0x155555555555555;
        }
        else {
          unint64_t v162 = v161;
        }
        *(void *)&v724[16] = &v681;
        if (v162) {
          unint64_t v162 = (unint64_t)sub_25B41D460(v162);
        }
        else {
          uint64_t v163 = 0;
        }
        *(void *)buf = v162;
        *(void *)&buf[8] = v162 + 192 * v160;
        *(void *)v724 = *(void *)&buf[8];
        *(void *)&v724[8] = v162 + 192 * v163;
        sub_25B46EAF0(*(uint64_t *)&buf[8], v159);
        *(void *)v724 += 192;
        sub_25B4458D0((uint64_t *)v680, buf);
        float32x4_t v158 = (char *)v680[1];
        sub_25B4459A4((uint64_t)buf);
      }
      else
      {
        sub_25B46EAF0((uint64_t)v158, (long long *)(v678 + 192 * *(int *)&obja[4 * *v156]));
        v158 += 192;
      }
      v680[1] = v158;
      ++v156;
    }
    while (v156 != v157);
    v156 = (int *)v699[0];
    float32x4_t v118 = (char *)v717[0];
  }
  v717[1] = v118;
  v689[1] = v689[0];
  v699[1] = v156;
  unint64_t v164 = v618;
  uint64_t v165 = v20 - v618;
  if (v20 != v618)
  {
    uint64_t v166 = 0;
    unint64_t v167 = v165 >> 2;
    unint64_t v168 = *(void *)&v718[0];
    if (v167 <= 1) {
      uint64_t v169 = 1;
    }
    else {
      uint64_t v169 = v167;
    }
    unint64_t v170 = v118;
    do
    {
      unint64_t v171 = (long long *)(v678 + 192 * *(int *)&v164[4 * v166]);
      if ((unint64_t)v118 >= v168)
      {
        uint64_t v178 = (v118 - v170) >> 7;
        unint64_t v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 57)
        {
          *(void *)&v718[0] = v168;
          v717[0] = v170;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v168 - (void)v170) >> 6 > v179) {
          unint64_t v179 = (uint64_t)(v168 - (void)v170) >> 6;
        }
        if (v168 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v180 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v180 = v179;
        }
        if (v180) {
          unint64_t v180 = (unint64_t)sub_25B563C40(v180);
        }
        else {
          uint64_t v181 = 0;
        }
        uint64_t v182 = (_OWORD *)(v180 + (v178 << 7));
        long long v183 = *v171;
        long long v184 = v171[1];
        long long v185 = v171[3];
        v182[2] = v171[2];
        v182[3] = v185;
        *uint64_t v182 = v183;
        v182[1] = v184;
        long long v186 = v171[4];
        long long v187 = v171[5];
        long long v188 = v171[7];
        v182[6] = v171[6];
        v182[7] = v188;
        v182[4] = v186;
        v182[5] = v187;
        if (v118 == v170)
        {
          uint64_t v196 = (char *)(v180 + (v178 << 7));
          unint64_t v164 = v618;
        }
        else
        {
          unint64_t v189 = v180 + (v178 << 7);
          unint64_t v164 = v618;
          do
          {
            long long v190 = *((_OWORD *)v118 - 8);
            long long v191 = *((_OWORD *)v118 - 7);
            long long v192 = *((_OWORD *)v118 - 5);
            *(_OWORD *)(v189 - 96) = *((_OWORD *)v118 - 6);
            *(_OWORD *)(v189 - 80) = v192;
            *(_OWORD *)(v189 - 128) = v190;
            *(_OWORD *)(v189 - 112) = v191;
            long long v193 = *((_OWORD *)v118 - 4);
            long long v194 = *((_OWORD *)v118 - 3);
            long long v195 = *((_OWORD *)v118 - 1);
            uint64_t v196 = (char *)(v189 - 128);
            *(_OWORD *)(v189 - 32) = *((_OWORD *)v118 - 2);
            *(_OWORD *)(v189 - 16) = v195;
            *(_OWORD *)(v189 - 64) = v193;
            *(_OWORD *)(v189 - 48) = v194;
            v118 -= 128;
            v189 -= 128;
          }
          while (v118 != v170);
        }
        unint64_t v168 = v180 + (v181 << 7);
        float32x4_t v118 = (char *)(v182 + 8);
        v717[1] = v182 + 8;
        if (v170) {
          operator delete(v170);
        }
        unint64_t v170 = v196;
      }
      else
      {
        long long v172 = *v171;
        long long v173 = v171[1];
        long long v174 = v171[3];
        *((_OWORD *)v118 + 2) = v171[2];
        *((_OWORD *)v118 + 3) = v174;
        *(_OWORD *)float32x4_t v118 = v172;
        *((_OWORD *)v118 + 1) = v173;
        long long v175 = v171[4];
        long long v176 = v171[5];
        long long v177 = v171[7];
        *((_OWORD *)v118 + 6) = v171[6];
        *((_OWORD *)v118 + 7) = v177;
        *((_OWORD *)v118 + 4) = v175;
        *((_OWORD *)v118 + 5) = v176;
        v118 += 128;
      }
      v717[1] = v118;
      sub_25B443BC4((uint64_t *)buf, (float32x4_t *)(v678 + 192 * *(int *)&v164[4 * v166]));
      float v197 = (float)(*(float *)(*(void *)buf + 12) * *(float *)(*(void *)buf + 16))
           * *(float *)(*(void *)buf + 20);
      unint64_t v198 = (char *)v689[1];
      if (v689[1] >= (void *)v690.i64[0])
      {
        uint64_t v200 = (char *)v689[0];
        int64_t v201 = ((char *)v689[1] - (char *)v689[0]) >> 2;
        unint64_t v202 = v201 + 1;
        if ((unint64_t)(v201 + 1) >> 62)
        {
          *(void *)&v718[0] = v168;
          v717[0] = v170;
          sub_25B3FBC4C();
        }
        uint64_t v203 = v690.i64[0] - (unint64_t)v689[0];
        if ((uint64_t)(v690.i64[0] - (unint64_t)v689[0]) >> 1 > v202) {
          unint64_t v202 = v203 >> 1;
        }
        _CF = (unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v204 = 0x3FFFFFFFFFFFFFFFLL;
        if (!_CF) {
          unint64_t v204 = v202;
        }
        if (v204)
        {
          unint64_t v204 = (unint64_t)sub_25B3FBC64(v204);
          unint64_t v198 = (char *)v689[1];
          uint64_t v200 = (char *)v689[0];
        }
        else
        {
          uint64_t v205 = 0;
        }
        uint64_t v206 = (float *)(v204 + 4 * v201);
        *uint64_t v206 = v197;
        unint64_t v199 = v206 + 1;
        while (v198 != v200)
        {
          int v207 = *((_DWORD *)v198 - 1);
          v198 -= 4;
          *((_DWORD *)v206-- - 1) = v207;
        }
        v689[0] = v206;
        v689[1] = v199;
        v690.i64[0] = v204 + 4 * v205;
        if (v200) {
          operator delete(v200);
        }
      }
      else
      {
        *(float *)v689[1] = v197;
        unint64_t v199 = v198 + 4;
      }
      v689[1] = v199;
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      ++v166;
    }
    while (v166 != v169);
    *(void *)&v718[0] = v168;
    v717[0] = v170;
  }
  sub_25B56A664(@"Storage", (uint64_t *)v717, (uint64_t *)v689, v699);
  uint64_t v208 = (int *)v699[0];
  uint64_t v209 = (int *)v699[1];
  if (v699[0] != v699[1])
  {
    v210 = (char *)v680[1];
    do
    {
      float32x2_t v211 = (long long *)(v678 + 192 * *(int *)&v618[4 * *v208]);
      if ((unint64_t)v210 >= (unint64_t)v681)
      {
        unint64_t v212 = 0xAAAAAAAAAAAAAAABLL * ((v210 - (char *)v680[0]) >> 6);
        unint64_t v213 = v212 + 1;
        if (v212 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) > v213) {
          unint64_t v213 = 0x5555555555555556 * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v681 - (unint64_t)v680[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v214 = 0x155555555555555;
        }
        else {
          unint64_t v214 = v213;
        }
        *(void *)&v724[16] = &v681;
        if (v214) {
          unint64_t v214 = (unint64_t)sub_25B41D460(v214);
        }
        else {
          uint64_t v215 = 0;
        }
        *(void *)buf = v214;
        *(void *)&buf[8] = v214 + 192 * v212;
        *(void *)v724 = *(void *)&buf[8];
        *(void *)&v724[8] = v214 + 192 * v215;
        sub_25B46EAF0(*(uint64_t *)&buf[8], v211);
        *(void *)v724 += 192;
        sub_25B4458D0((uint64_t *)v680, buf);
        v210 = (char *)v680[1];
        sub_25B4459A4((uint64_t)buf);
      }
      else
      {
        sub_25B46EAF0((uint64_t)v210, (long long *)(v678 + 192 * *(int *)&v618[4 * *v208]));
        v210 += 192;
      }
      v680[1] = v210;
      ++v208;
    }
    while (v208 != v209);
  }
  if (v689[0])
  {
    v689[1] = v689[0];
    operator delete(v689[0]);
  }
  if (v717[0]) {
    operator delete(v717[0]);
  }
  if (v699[0]) {
    operator delete(v699[0]);
  }
  if (v618) {
    operator delete(v618);
  }
  if (obja) {
    operator delete(obja);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_25B41D3A8((void **)&v678);
  long long v678 = *(_OWORD *)v680;
  v679[0] = v681;
  *(void *)&long long v681 = 0;
  v680[1] = 0;
  v680[0] = 0;
  *(void *)buf = v680;
  sub_25B41D070((void ***)buf);
  uint64_t v674 = 0;
  long long v672 = 0u;
  long long v673 = 0u;
  long long v670 = 0u;
  long long v671 = 0u;
  uint64_t v216 = *((void *)&v678 + 1);
  uint64_t v217 = v678;
  unint64_t v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6);
  LODWORD(v699[0]) = 0;
  sub_25B400C5C(buf, v218, v699);
  sub_25B56B850((uint64_t *)&v671 + 1, v218, (uint64_t)buf);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  LODWORD(v699[0]) = 0;
  sub_25B400C5C(buf, v218, v699);
  sub_25B56B850((uint64_t *)&v670, v218, (uint64_t)buf);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  LODWORD(v699[0]) = 0;
  sub_25B400C5C(buf, v218, v699);
  sub_25B56B850((uint64_t *)&v673, v218, (uint64_t)buf);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v216 != v217)
  {
    uint64_t v219 = 0;
    if (v218 <= 1) {
      unint64_t v218 = 1;
    }
    do
    {
      uint64_t v220 = 0;
      for (uint64_t i = 0; i != v218; ++i)
      {
        memset(buf, 0, sizeof(buf));
        *(void *)v724 = 0;
        sub_25B443EE4((uint64_t)buf, (float32x4_t *)(v678 + 192 * v219), (float32x4_t *)(v678 + v220));
        *(_DWORD *)(*(void *)(v670 + 24 * v219) + 4 * i) = *(_DWORD *)buf;
        *(_DWORD *)(*(void *)(*((void *)&v671 + 1) + 24 * v219) + 4 * i) = *(_DWORD *)&buf[4];
        *(_DWORD *)(*(void *)(v673 + 24 * v219) + 4 * i) = *(_DWORD *)&buf[8];
        v220 += 192;
      }
      ++v219;
    }
    while (v219 != v218);
  }
  v668 = 0;
  v667 = 0;
  unint64_t v669 = 0;
  LODWORD(v699[0]) = 0;
  sub_25B400C5C(buf, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6), v699);
  LODWORD(v717[0]) = 0;
  sub_25B400C5C(v699, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6), v717);
  uint64_t v222 = v678;
  if (*((void *)&v678 + 1) != (void)v678)
  {
    uint64_t v223 = 0;
    unint64_t v224 = 0;
    do
    {
      float v226 = sub_25B443CA8((_OWORD *)(v222 + v223));
      *((float *)v699[0] + v224++) = v226;
      uint64_t v222 = v678;
      v223 += 192;
    }
    while (v224 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6));
    if (*((void *)&v678 + 1) != (void)v678)
    {
      unint64_t v227 = 0;
      unint64_t __pa = 0;
      uint64_t v228 = 0;
      unint64_t v229 = 0;
      while (!objc_msgSend_isEqualToString_(*(void **)(v222 + 192 * v229 + 128), v225, @"Chair")|| *((float *)v699[0] + v229) < 1.0)
      {
LABEL_321:
        ++v229;
        uint64_t v222 = v678;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6) <= v229)
        {
          unint64_t v669 = __pa;
          v668 = v228;
          v667 = v227;
          goto LABEL_339;
        }
      }
      uint64_t v230 = *((void *)&v678 + 1);
      uint64_t v231 = v678;
      if (*((void *)&v678 + 1) == (void)v678) {
        goto LABEL_317;
      }
      unint64_t v232 = 0;
      int v233 = 0;
      uint64_t v234 = 128;
      do
      {
        if (v229 == v232)
        {
          *(_DWORD *)(*(void *)buf + 4 * v229) = 0;
          float v235 = 0.0;
        }
        else
        {
          float v235 = *(float *)(*(void *)(*((void *)&v671 + 1) + 24 * v229) + 4 * v232) / *((float *)v699[0] + v232);
          *(float *)(*(void *)buf + 4 * v232) = v235;
        }
        if (v235 > 0.6)
        {
          v233 += objc_msgSend_isEqualToString_(*(void **)(v231 + v234), v225, @"Chair");
          uint64_t v230 = *((void *)&v678 + 1);
          uint64_t v231 = v678;
        }
        ++v232;
        v234 += 192;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v230 - v231) >> 6) > v232);
      if (v233 <= 1)
      {
LABEL_317:
        uint64_t v236 = v228;
      }
      else
      {
        if ((unint64_t)v228 < __pa)
        {
          *v228++ = v229;
          goto LABEL_317;
        }
        uint64_t v237 = v228 - v227;
        unint64_t v238 = v237 + 1;
        if ((unint64_t)(v237 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(__pa - (void)v227) >> 1 > v238) {
          unint64_t v238 = (uint64_t)(__pa - (void)v227) >> 1;
        }
        if (__pa - (unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v239 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v239 = v238;
        }
        if (v239) {
          unint64_t v239 = (unint64_t)sub_25B3FBC64(v239);
        }
        else {
          unint64_t v225 = 0;
        }
        unint64_t v240 = (int *)(v239 + 4 * v237);
        *unint64_t v240 = v229;
        uint64_t v236 = v240 + 1;
        while (v228 != v227)
        {
          int v241 = *--v228;
          *--unint64_t v240 = v241;
        }
        unint64_t __pa = v239 + 4 * (void)v225;
        if (v227) {
          operator delete(v227);
        }
        unint64_t v227 = v240;
      }
      if ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >= 1) {
        bzero(*(void **)buf, 4 * (((*(void *)&buf[8] - *(void *)buf) >> 2) - (*(void *)&buf[8] - *(void *)buf > 3uLL)) + 4);
      }
      uint64_t v228 = v236;
      goto LABEL_321;
    }
  }
  uint64_t v228 = 0;
  unint64_t v227 = 0;
LABEL_339:
  if (v699[0])
  {
    v699[1] = v699[0];
    operator delete(v699[0]);
  }
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  memset(v666, 0, sizeof(v666));
  sub_25B43E84C(v666, v670, *((uint64_t *)&v670 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v670 + 1) - v670) >> 3));
  memset(v665, 0, sizeof(v665));
  sub_25B43E84C(v665, *((uint64_t *)&v671 + 1), v672, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v672 - *((void *)&v671 + 1)) >> 3));
  memset(v664, 0, sizeof(v664));
  sub_25B43E84C(v664, v673, *((uint64_t *)&v673 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v673 + 1) - v673) >> 3));
  if (v227 != v228)
  {
    sub_25B56BD40((uint64_t *)buf, (uint64_t *)&v678, v227, v228);
    sub_25B41D3A8((void **)&v678);
    long long v678 = *(_OWORD *)buf;
    v679[0] = *(void *)v724;
    *(void *)v724 = 0;
    memset(buf, 0, sizeof(buf));
    v699[0] = buf;
    sub_25B41D070((void ***)v699);
    sub_25B56BF44(v666, (uint64_t *)&v667);
    sub_25B56BF44(v665, (uint64_t *)&v667);
    sub_25B56BF44(v664, (uint64_t *)&v667);
  }
  *(_DWORD *)buf = 0;
  sub_25B40FF0C(&v662, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6), buf);
  *(_DWORD *)buf = 0;
  sub_25B40FF0C(v699, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6), buf);
  uint64_t v243 = v678;
  if (*((void *)&v678 + 1) != (void)v678)
  {
    unint64_t v244 = 0;
    do
    {
      if ((objc_msgSend_isEqualToString_(*(void **)(v243 + 192 * v244 + 128), v242, @"Chair") & 1) == 0
        || (uint64_t v246 = v678, *((void *)&v678 + 1) == (void)v678))
      {
        unsigned int v250 = -1;
      }
      else
      {
        uint64_t v247 = 0;
        unint64_t v248 = 0;
        int v249 = (float32x4_t *)(v678 + 192 * v244);
        unsigned int v250 = -1;
        float v251 = 0.0;
        do
        {
          char isEqualToString = objc_msgSend_isEqualToString_(*(void **)(v246 + v247 + 128), v242, @"Table");
          uint64_t v246 = v678;
          if ((isEqualToString & 1) != 0
            || (int v254 = objc_msgSend_isEqualToString_(*(void **)(v678 + v247 + 128), v253, @"Storage"),
                uint64_t v246 = v678,
                v254)
            && (v245.f32[0] = *(float *)(v678 + v247 + 72) - *(float *)(v678 + v247 + 8), v245.f32[0] < 1.3))
          {
            memset(buf, 0, sizeof(buf));
            *(void *)v724 = 0;
            sub_25B443EE4((uint64_t)buf, v249, (float32x4_t *)(v246 + v247));
            v245.i32[0] = *(_DWORD *)buf;
            if (*(float *)buf > v251)
            {
              unsigned int v250 = v248;
              float v251 = *(float *)buf;
            }
            uint64_t v246 = v678;
          }
          ++v248;
          v247 += 192;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*((void *)&v678 + 1) - v246) >> 6) > v248);
        if ((v250 & 0x80000000) == 0)
        {
          sub_25B443BC4((uint64_t *)buf, (float32x4_t *)(v246 + 192 * v250));
          sub_25B443BC4((uint64_t *)v717, (float32x4_t *)(v678 + 192 * v244));
          unint64_t v255 = v717[0];
          if ((float)(*(float *)(*(void *)buf + 12) * *(float *)(*(void *)buf + 16)) >= (float)((float)(*((float *)v717[0] + 3) * *((float *)v717[0] + 4)) + (float)(*((float *)v717[0] + 3) * *((float *)v717[0] + 4)))
            && vabds_f32(*(float *)(v678 + 192 * v244 + 8), *(float *)(v678 + 192 * v250 + 8)) <= 0.3)
          {
            ++*((_DWORD *)v699[0] + v250);
          }
          else
          {
            unsigned int v250 = -1;
          }
          v717[1] = v255;
          operator delete(v255);
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }
      }
      if (v244 >= ((char *)v663 - (unsigned char *)v662) >> 2) {
        sub_25B56F224();
      }
      *((_DWORD *)v662 + v244++) = v250;
      uint64_t v243 = v678;
    }
    while (v244 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6));
    if (*((void *)&v678 + 1) != (void)v678)
    {
      uint64_t v256 = 0;
      unint64_t v257 = 0;
      do
      {
        if (objc_msgSend_isEqualToString_(*(void **)(v243 + v256 + 128), v242, @"Chair", *(double *)&v245))
        {
          if (v257 >= ((char *)v663 - (unsigned char *)v662) >> 2) {
            sub_25B56F224();
          }
          uint64_t v258 = *((unsigned int *)v662 + v257);
          if ((v258 & 0x80000000) == 0
            && *((_DWORD *)v699[0] + v258) == 1
            && ((objc_msgSend_isEqualToString_(*(void **)(v678 + 192 * v258 + 128), v242, @"Cabinet") & 1) != 0|| objc_msgSend_isEqualToString_(*(void **)(v678 + 192 * v258 + 128), v242, @"Storage")))
          {
            float32x2_t v245 = vmul_f32(vsub_f32(*(float32x2_t *)(v678 + v256 + 16), *(float32x2_t *)(v678 + v256)), vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v678 + 192 * v258), *(float32x2_t *)(v678 + 192 * v258 + 32)), (float32x2_t)0x3F0000003F000000), vmul_f32(vadd_f32(*(float32x2_t *)(v678 + v256), *(float32x2_t *)(v678 + v256 + 32)), (float32x2_t)0x3F0000003F000000)));
            v245.f32[0] = vaddv_f32(v245);
            if (v245.f32[0] < 0.0)
            {
              if (v257 >= ((char *)v663 - (unsigned char *)v662) >> 2) {
                sub_25B56F224();
              }
              *((_DWORD *)v662 + v257) = -1;
            }
          }
        }
        ++v257;
        uint64_t v243 = v678;
        v256 += 192;
      }
      while (v257 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6));
    }
  }
  if (v699[0])
  {
    v699[1] = v699[0];
    operator delete(v699[0]);
  }
  BOOL v259 = (int *)v662;
  uint64_t v260 = v663;
  v661[1] = 0;
  v661[0] = 0;
  v660 = v661;
  if (v662 == v663) {
    goto LABEL_411;
  }
  do
  {
    sub_25B3FF15C((uint64_t *)&v660, (uint64_t *)v661, *v259, *v259);
    ++v259;
  }
  while (v259 != v260);
  uint64_t v261 = (uint64_t)v660;
  if (v660 == v661)
  {
LABEL_411:
    unint64_t v262 = 0;
    uint64_t v263 = 0;
  }
  else
  {
    unint64_t v262 = 0;
    uint64_t v263 = 0;
    unint64_t v264 = 0;
    do
    {
      int v265 = *(_DWORD *)(v261 + 28);
      if ((v265 & 0x80000000) == 0)
      {
        if ((unint64_t)v263 >= v264)
        {
          uint64_t v266 = (v263 - v262) >> 2;
          unint64_t v267 = v266 + 1;
          if ((unint64_t)(v266 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v264 - (void)v262) >> 1 > v267) {
            unint64_t v267 = (uint64_t)(v264 - (void)v262) >> 1;
          }
          if (v264 - (unint64_t)v262 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v268 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v268 = v267;
          }
          if (v268)
          {
            unint64_t v268 = (unint64_t)sub_25B3FBC64(v268);
            uint64_t v270 = v262;
            int v265 = *(_DWORD *)(v261 + 28);
          }
          else
          {
            uint64_t v270 = v262;
            uint64_t v269 = 0;
          }
          unint64_t v262 = (char *)(v268 + 4 * v266);
          *(_DWORD *)unint64_t v262 = v265;
          uint64_t v271 = v262 + 4;
          while (v263 != v270)
          {
            int v272 = *((_DWORD *)v263 - 1);
            v263 -= 4;
            *((_DWORD *)v262 - 1) = v272;
            v262 -= 4;
          }
          unint64_t v264 = v268 + 4 * v269;
          if (v270) {
            operator delete(v270);
          }
          uint64_t v263 = v271;
        }
        else
        {
          *(_DWORD *)uint64_t v263 = v265;
          v263 += 4;
        }
      }
      unint64_t v273 = *(void **)(v261 + 8);
      if (v273)
      {
        do
        {
          __n128 v274 = (void **)v273;
          unint64_t v273 = (void *)*v273;
        }
        while (v273);
      }
      else
      {
        do
        {
          __n128 v274 = *(void ***)(v261 + 16);
          _ZF = *v274 == (void *)v261;
          uint64_t v261 = (uint64_t)v274;
        }
        while (!_ZF);
      }
      uint64_t v261 = (uint64_t)v274;
    }
    while (v274 != v661);
  }
  v607 = v262;
  id v599 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  uint64_t v278 = *((void *)&v678 + 1);
  uint64_t v279 = v678;
  if (*((void *)&v678 + 1) != (void)v678)
  {
    uint64_t v280 = 0;
    unint64_t v281 = 0;
    do
    {
      unsigned int v282 = *((_DWORD *)v662 + v281);
      if ((v282 & 0x80000000) == 0)
      {
        uint64_t v283 = 0;
        float v284 = (long long *)(v279 + 192 * v281);
        long long v285 = *v284;
        long long v286 = v284[1];
        long long v287 = v284[2];
        long long v725 = v284[3];
        *(_OWORD *)&v724[16] = v287;
        *(_OWORD *)v724 = v286;
        *(_OWORD *)buf = v285;
        long long v288 = v284[4];
        long long v289 = v284[5];
        long long v290 = v284[6];
        long long v729 = v284[7];
        long long v728 = v290;
        long long v727 = v289;
        long long v726 = v288;
        uint64_t v291 = v279 + v280;
        float32x2_t v292 = 0;
        float v293 = 0.0;
        do
        {
          float32x2_t v292 = vadd_f32(v292, *(float32x2_t *)(v291 + v283));
          float v293 = v293 + *(float *)(v291 + v283 + 8);
          v283 += 16;
        }
        while (v283 != 128);
        uint64_t v294 = (float32x4_t *)(v279 + 192 * v282);
        *(_OWORD *)v619 = v284[1];
        *(_OWORD *)objf = *v284;
        *(float32x4_t *)__pf = v294[1];
        float32x4_t v612 = v294[2];
        float32x4_t v617 = *v294;
        LODWORD(v699[0]) = 0;
        sub_25B400C5C(v689, 2uLL, v699);
        uint64_t v295 = v689[0];
        float32x2_t v296 = vsub_f32((float32x2_t)v619[0], (float32x2_t)objf[0]);
        float64x2_t v297 = vcvtq_f64_f32(v296);
        v297.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v297, v297)));
        *(float *)v297.f64 = v297.f64[0];
        *(float32x2_t *)v689[0] = vdiv_f32(v296, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v297.f64[0], 0));
        memset(v716, 0, sizeof(v716));
        sub_25B3FCA58(v716, v295, (uint64_t)v689[1], ((char *)v689[1] - (char *)v295) >> 2);
        LODWORD(v699[0]) = 0;
        sub_25B400C5C(v680, 2uLL, v699);
        LODWORD(v717[0]) = 0;
        sub_25B400C5C(v699, 2uLL, v717);
        float32x2_t v298 = vsub_f32((float32x2_t)__pf[0], *(float32x2_t *)v617.f32);
        float64x2_t v299 = vcvtq_f64_f32(v298);
        v299.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v299, v299)));
        *(float *)v299.f64 = v299.f64[0];
        *(float32x2_t *)v699[0] = vdiv_f32(v298, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v299.f64[0], 0));
        LODWORD(v715[0]) = 0;
        sub_25B400C5C(v717, 2uLL, v715);
        uint64_t v300 = (float *)v717[0];
        float32x2_t v301 = (float32x2_t)vsubq_f32(v612, *(float32x4_t *)__pf).u64[0];
        float64x2_t v302 = vcvtq_f64_f32(v301);
        *(float *)v302.f64 = sqrt(vaddvq_f64(vmulq_f64(v302, v302)));
        *(float *)v717[0] = v301.f32[0] / *(float *)v302.f64;
        v300[1] = v301.f32[1] / *(float *)v302.f64;
        uint64_t v303 = (float *)v716[0];
        float v304 = *(float *)(v716[0] + 4);
        v301.f32[0] = (float)(v304 * (float)(v301.f32[1] / *(float *)v302.f64))
                    + (float)(*(float *)v716[0] * (float)(v301.f32[0] / *(float *)v302.f64));
        float v305 = fabsf((float)(v304 * *((float *)v699[0] + 1)) + (float)(*(float *)v716[0] * *(float *)v699[0]));
        float v306 = fabsf(v301.f32[0]);
        if (v305 <= v306) {
          uint64_t v307 = (char *)v300;
        }
        else {
          uint64_t v307 = (char *)v699[0];
        }
        unint64_t v308 = &v699[1];
        if (v305 <= v306) {
          unint64_t v308 = &v717[1];
        }
        sub_25B3FE7A8((char *)v680, v307, (uint64_t)*v308, ((unsigned char *)*v308 - v307) >> 2);
        unint64_t v309 = (float *)v680[0];
        float v310 = *((float *)v680[0] + 1);
        if ((float)((float)(v303[1] * v310) + (float)(*v303 * *(float *)v680[0])) < 0.0)
        {
          *(float *)v680[0] = -*(float *)v680[0];
          v309[1] = -v310;
        }
        if (v717[0])
        {
          v717[1] = v717[0];
          operator delete(v717[0]);
        }
        if (v699[0])
        {
          v699[1] = v699[0];
          operator delete(v699[0]);
        }
        operator delete(v303);
        float v312 = *(float *)v689[0];
        float v311 = *((float *)v689[0] + 1);
        float v314 = *(float *)v680[0];
        float v313 = *((float *)v680[0] + 1);
        v680[1] = v680[0];
        operator delete(v680[0]);
        if (v689[0])
        {
          v689[1] = v689[0];
          operator delete(v689[0]);
        }
        float v315 = fmin(fmax((float)((float)(v311 * v313) + (float)(v312 * v314)), -1.0), 1.0);
        float v316 = acosf(v315);
        if ((float)((float)(v312 * v313) - (float)(v311 * v314)) < 0.0) {
          float v316 = -v316;
        }
        sub_25B56BB7C(v717, v316);
        long long v706 = 0u;
        float32x4_t v705 = 0u;
        long long v704 = 0u;
        float32x4_t v703 = 0u;
        long long v702 = 0u;
        float32x4_t v701 = 0u;
        float32x4_t v700 = 0u;
        *(_OWORD *)v699 = 0u;
        sub_25B56BA78(v699, buf, (float32x2_t **)v717[0], vmul_f32(v292, (float32x2_t)0x3E0000003E000000), v293 * 0.125);
        long long v317 = *(_OWORD *)v699;
        float32x4_t v318 = v700;
        long long v319 = v702;
        v284[2] = (__int128)v701;
        v284[3] = v319;
        *float v284 = v317;
        v284[1] = (__int128)v318;
        float32x4_t v320 = v703;
        long long v321 = v704;
        long long v322 = v706;
        v284[6] = (__int128)v705;
        v284[7] = v322;
        v284[4] = (__int128)v320;
        v284[5] = v321;
        v699[0] = v717;
        sub_25B413C78((void ***)v699);
        uint64_t v323 = v279 + 192 * v282;
        uint64_t v325 = *(void *)(v323 + 144);
        unint64_t v324 = (uint64_t *)(v323 + 144);
        unint64_t v327 = objc_msgSend_objectForKey_(v599, v326, v325);
        BOOL v328 = v327 == 0;

        if (v328)
        {
          id v332 = objc_alloc(MEMORY[0x263EFF980]);
          float32x4_t v330 = objc_msgSend_initWithObjects_(v332, v333, *(void *)(v279 + 192 * v281 + 144), 0);
          objc_msgSend_setObject_forKey_(v599, v334, (uint64_t)v330, *v324);
        }
        else
        {
          float32x4_t v330 = objc_msgSend_objectForKeyedSubscript_(v599, v329, *v324);
          objc_msgSend_addObject_(v330, v331, *(void *)(v279 + 192 * v281 + 144));
        }

        uint64_t v278 = *((void *)&v678 + 1);
        uint64_t v279 = v678;
      }
      ++v281;
      v280 += 192;
    }
    while (v281 < 0xAAAAAAAAAAAAAAABLL * ((v278 - v279) >> 6));
  }
  v658 = 0;
  v657 = 0;
  uint64_t v659 = 0;
  if (v263 == v607)
  {
    long long v526 = 0;
    long long v525 = 0;
    goto LABEL_618;
  }
  uint64_t v335 = 0;
  unint64_t v336 = (v263 - v607) >> 2;
  if (v336 <= 1) {
    unint64_t v336 = 1;
  }
  unint64_t v598 = v336;
  float v337 = 0.125;
  while (2)
  {
    memset(v656, 0, sizeof(v656));
    sub_25B56CC6C((uint64_t *)&v678, &v662, *(_DWORD *)&v607[4 * v335], v665, (uint64_t)&v657, v656, 1, v275, v276, v277);
    int v338 = *(_DWORD *)&v607[4 * v335];
    unint64_t v339 = operator new(0xCuLL);
    *(void *)unint64_t v339 = 0;
    v339[2] = 0;
    uint64_t v343 = *((void *)&v678 + 1);
    uint64_t v344 = v678;
    if (*((void *)&v678 + 1) == (void)v678)
    {
      int v346 = 0;
      float v352 = 0.0;
      uint64_t v344 = *((void *)&v678 + 1);
      float v351 = 0.0;
      float v350 = 0.0;
      float v349 = 0.0;
      float v348 = 0.0;
      float v347 = 0.0;
    }
    else
    {
      unint64_t v345 = 0;
      int v346 = 0;
      float v347 = 0.0;
      float v348 = 0.0;
      float v349 = 0.0;
      float v350 = 0.0;
      float v351 = 0.0;
      float v352 = 0.0;
      do
      {
        if (*((_DWORD *)v662 + v345) == v338)
        {
          unint64_t v353 = v657;
          if (v657 != v658)
          {
            while (v345 != *v353)
            {
              if (++v353 == v658)
              {
                unint64_t v353 = v658;
                break;
              }
            }
          }
          if (v353 == v658)
          {
            sub_25B56C0EC((float32x2_t **)buf, (float32x4_t *)(v344 + 192 * v345));
            if (v339) {
              operator delete(v339);
            }
            unint64_t v339 = *(_DWORD **)buf;
            LODWORD(v340) = **(_DWORD **)buf;
            LODWORD(v341) = *(_DWORD *)(*(void *)buf + 4);
            float v349 = v349 + **(float **)buf;
            float v348 = v348 + *(float *)&v341;
            v342.i32[0] = *(_DWORD *)(*(void *)buf + 8);
            float v347 = v347 + v342.f32[0];
            if (**(float **)buf > v352) {
              float v352 = **(float **)buf;
            }
            if (*(float *)&v341 > v351) {
              float v351 = *(float *)(*(void *)buf + 4);
            }
            if (v342.f32[0] > v350) {
              float v350 = *(float *)(*(void *)buf + 8);
            }
            ++v346;
            uint64_t v343 = *((void *)&v678 + 1);
            uint64_t v344 = v678;
          }
        }
        ++v345;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v343 - v344) >> 6) > v345);
    }
    v602 = v339;
    uint64_t v603 = v335;
    if (v343 == v344)
    {
      uint64_t v343 = v344;
    }
    else
    {
      uint64_t v354 = 0;
      unint64_t v355 = 0;
      v342.f32[0] = v348 / (float)v346;
      float v356 = v347 / (float)v346;
      float v357 = (float)(v352 + (float)(v349 / (float)v346)) * 0.5;
      *(float *)&double v341 = v351 + v342.f32[0];
      float v358 = (float)(v351 + v342.f32[0]) * 0.5;
      *(float *)&double v340 = v350 + v356;
      float v359 = *(float *)&v340 * 0.5;
      int32x2_t v360 = v657;
      int v361 = v658;
      float v605 = v357;
      v604 = v657;
      do
      {
        if (*((_DWORD *)v662 + v355) == v338)
        {
          uint64_t v362 = v360;
          if (v360 != v361)
          {
            while (v355 != *v362)
            {
              if (++v362 == v361)
              {
                uint64_t v362 = v361;
                break;
              }
            }
          }
          if (v362 == v361)
          {
            uint64_t v363 = 0;
            float32x2_t v364 = (float32x4_t *)(v344 + 192 * v355);
            uint64_t v365 = v344 + v354;
            float32x2_t v366 = 0;
            float v367 = 0.0;
            do
            {
              float32x2_t v366 = vadd_f32(v366, *(float32x2_t *)(v365 + v363));
              float v367 = v367 + *(float *)(v365 + v363 + 8);
              v363 += 16;
            }
            while (v363 != 128);
            float32x4_t v368 = v364[2];
            float32x4_t v369 = v364[3];
            float32x4_t v370 = *v364;
            float32x4_t v700 = v364[1];
            *(float32x4_t *)v699 = v370;
            long long v702 = (__int128)v369;
            float32x4_t v371 = v364[6];
            float32x4_t v372 = v364[7];
            float32x4_t v373 = v364[5];
            float32x4_t v703 = v364[4];
            float32x4_t v701 = v368;
            long long v706 = (__int128)v372;
            float32x4_t v705 = v371;
            long long v704 = (__int128)v373;
            float32x4_t v613 = v700;
            *(_OWORD *)objg = *(_OWORD *)v699;
            *(_OWORD *)__pg = v702;
            *(float32x4_t *)v620 = v703;
            unint64_t v374 = operator new(0xCuLL);
            *(void *)v724 = v374 + 3;
            __asm { FMOV            V12.2S, #-1.0 }
            *(void *)unint64_t v374 = _D12;
            v374[2] = -1082130432;
            *(void *)buf = v374;
            *(void *)&buf[8] = v374 + 3;
            memset(&v724[8], 0, 24);
            uint64_t v378 = operator new(0xCuLL);
            *(void *)&v724[24] = v378 + 3;
            *(void *)uint64_t v378 = 0xBF8000003F800000;
            v378[2] = -1082130432;
            *(void *)&v724[8] = v378;
            *(void *)&v724[16] = v378 + 3;
            *(void *)&long long v726 = 0;
            long long v725 = 0uLL;
            uint64_t v379 = operator new(0xCuLL);
            *(void *)&long long v726 = v379 + 3;
            __asm { FMOV            V9.2S, #1.0 }
            *(void *)uint64_t v379 = _D9;
            v379[2] = -1082130432;
            *(void *)&long long v725 = v379;
            *((void *)&v725 + 1) = v379 + 3;
            long long v727 = 0uLL;
            *((void *)&v726 + 1) = 0;
            int8x8_t v381 = operator new(0xCuLL);
            *((void *)&v727 + 1) = v381 + 3;
            *(void *)int8x8_t v381 = 0x3F800000BF800000;
            v381[2] = -1082130432;
            *((void *)&v726 + 1) = v381;
            *(void *)&long long v727 = v381 + 3;
            *(void *)&long long v729 = 0;
            long long v728 = 0uLL;
            float32x2_t v382 = operator new(0xCuLL);
            *(void *)&long long v729 = v382 + 3;
            *(void *)float32x2_t v382 = _D12;
            v382[2] = 1065353216;
            *(void *)&long long v728 = v382;
            *((void *)&v728 + 1) = v382 + 3;
            id v730 = 0;
            v731 = 0;
            *((void *)&v729 + 1) = 0;
            float32x4_t v383 = operator new(0xCuLL);
            v731 = (char *)(v383 + 3);
            *(void *)float32x4_t v383 = 0xBF8000003F800000;
            v383[2] = 1065353216;
            *((void *)&v729 + 1) = v383;
            id v730 = v383 + 3;
            v733 = 0;
            v734 = 0;
            id v732 = 0;
            float32x2_t v384 = operator new(0xCuLL);
            v734 = v384 + 3;
            *(void *)float32x2_t v384 = _D9;
            v384[2] = 1065353216;
            id v732 = v384;
            v733 = v384 + 3;
            id v736 = 0;
            v737 = 0;
            v735 = 0;
            int64_t v385 = operator new(0xCuLL);
            float v337 = 0.125;
            v737 = (char *)(v385 + 3);
            *(void *)int64_t v385 = 0x3F800000BF800000;
            v385[2] = 1065353216;
            v735 = v385;
            id v736 = v385 + 3;
            *(void *)&v718[0] = 0;
            v717[0] = 0;
            v717[1] = 0;
            v689[0] = v717;
            LOBYTE(v689[1]) = 0;
            v717[0] = operator new(0xC0uLL);
            v717[1] = v717[0];
            *(void *)&v718[0] = (char *)v717[0] + 192;
            uint64_t v386 = 0;
            v717[1] = sub_25B44C094((uint64_t)v718, (uint64_t)buf, (uint64_t)&v738, (void *)v717[0]);
            *(float32x2_t *)v387.f32 = vmul_f32(v366, (float32x2_t)0x3E0000003E000000);
            v387.f32[2] = v367 * 0.125;
            float32x4_t v609 = v387;
            float32x4_t v388 = vsubq_f32(v613, *(float32x4_t *)objg);
            float64x2_t v389 = vcvtq_f64_f32(*(float32x2_t *)v388.f32);
            v389.f64[0] = sqrt(v388.f32[2] * v388.f32[2] + vaddvq_f64(vmulq_f64(v389, v389)));
            *(float *)v389.f64 = v389.f64[0];
            *(float32x2_t *)v390.f32 = vdiv_f32(*(float32x2_t *)v388.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v389.f64[0], 0));
            v390.f32[2] = v388.f32[2] / *(float *)v389.f64;
            float32x4_t v614 = v390;
            float32x4_t v391 = vsubq_f32(*(float32x4_t *)__pg, *(float32x4_t *)objg);
            float64x2_t v392 = vcvtq_f64_f32(*(float32x2_t *)v391.f32);
            v392.f64[0] = sqrt(v391.f32[2] * v391.f32[2] + vaddvq_f64(vmulq_f64(v392, v392)));
            *(float *)v392.f64 = v392.f64[0];
            *(float32x2_t *)v393.f32 = vdiv_f32(*(float32x2_t *)v391.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v392.f64[0], 0));
            v393.f32[2] = v391.f32[2] / *(float *)v392.f64;
            float32x4_t v394 = vsubq_f32(*(float32x4_t *)v620, *(float32x4_t *)objg);
            float64x2_t v395 = vcvtq_f64_f32(*(float32x2_t *)v394.f32);
            v395.f64[0] = sqrt(v394.f32[2] * v394.f32[2] + vaddvq_f64(vmulq_f64(v395, v395)));
            *(float *)v395.f64 = v395.f64[0];
            *(float32x2_t *)v396.f32 = vdiv_f32(*(float32x2_t *)v394.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v395.f64[0], 0));
            v396.f32[2] = v394.f32[2] / *(float *)v395.f64;
            v397.i64[0] = 0x3F0000003F000000;
            v397.i64[1] = 0x3F0000003F000000;
            *(float32x4_t *)objb = v396;
            *(float32x4_t *)__pb = v393;
            do
            {
              unint64_t v398 = (&v735)[v386];
              if (v398)
              {
                *(id *)((char *)&v736 + v386 * 8) = v398;
                operator delete(v398);
                float32x4_t v396 = *(float32x4_t *)objb;
                float32x4_t v393 = *(float32x4_t *)__pb;
                v397.i64[0] = 0x3F0000003F000000;
                v397.i64[1] = 0x3F0000003F000000;
              }
              v386 -= 3;
            }
            while (v386 != -24);
            v399 = (float **)v717[0];
            if (v717[1] != v717[0])
            {
              unint64_t v400 = ((char *)v717[1] - (char *)v717[0]) / 24;
              if (v400 <= 1) {
                unint64_t v400 = 1;
              }
              unint64_t v401 = v699;
              do
              {
                float v402 = *v399;
                v399 += 3;
                *(float32x4_t *)unint64_t v401 = vmlaq_f32(v609, v397, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v393, v402[1] * v358), v614, *v402 * v605), v396, v402[2] * v359));
                v401 += 2;
                --v400;
              }
              while (v400);
            }
            float32x4_t v403 = *(float32x4_t *)v699;
            float32x4_t v404 = v700;
            float32x4_t v405 = (float32x4_t)v702;
            v364[2] = v701;
            v364[3] = v405;
            *float32x2_t v364 = v403;
            v364[1] = v404;
            float32x4_t v406 = v703;
            float32x4_t v407 = (float32x4_t)v704;
            float32x4_t v408 = (float32x4_t)v706;
            v364[6] = v705;
            v364[7] = v408;
            v364[4] = v406;
            v364[5] = v407;
            *(void *)buf = v717;
            sub_25B413C78((void ***)buf);
            uint64_t v343 = *((void *)&v678 + 1);
            uint64_t v344 = v678;
            int32x2_t v360 = v604;
          }
        }
        ++v355;
        v354 += 192;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v343 - v344) >> 6) > v355);
    }
    if (v602)
    {
      operator delete(v602);
      uint64_t v343 = *((void *)&v678 + 1);
      uint64_t v344 = v678;
    }
    uint64_t v409 = v603;
    int v410 = *(_DWORD *)&v607[4 * v603];
    if (v343 != v344)
    {
      unint64_t v411 = 0;
      int v412 = 0;
      double v340 = 0.0;
      float v413 = v657;
      uint64_t v414 = v658;
      uint64_t v415 = 8;
      LODWORD(v341) = 1176256512;
      do
      {
        if (*((_DWORD *)v662 + v411) == v410)
        {
          v416 = v657;
          if (v657 != v658)
          {
            while (v411 != *v416)
            {
              if (++v416 == v658)
              {
                v416 = v658;
                break;
              }
            }
          }
          if (v416 == v658)
          {
            uint64_t v417 = 0;
            v342.i64[0] = 0;
            do
            {
              v342.f32[0] = v342.f32[0] + *(float *)(v344 + v415 + v417);
              v417 += 16;
            }
            while (v417 != 128);
            v342.f32[0] = v342.f32[0] * v337;
            ++v412;
            *(float *)&double v340 = *(float *)&v340 + v342.f32[0];
            if (v342.f32[0] < *(float *)&v341) {
              *(float *)&double v341 = v342.f32[0];
            }
          }
        }
        ++v411;
        v415 += 192;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v343 - v344) >> 6) > v411);
      if (v343 != v344)
      {
        unint64_t v418 = 0;
        v342.f32[0] = (float)v412;
        float v419 = (float)(*(float *)&v340 / (float)v412) + *(float *)&v341;
        LODWORD(v341) = 0.5;
        *(float *)&double v340 = v419 * 0.5;
        uint64_t v420 = 8;
        do
        {
          if (*((_DWORD *)v662 + v418) == v410)
          {
            unint64_t v421 = v413;
            if (v413 != v414)
            {
              while (v418 != *v421)
              {
                if (++v421 == v414)
                {
                  unint64_t v421 = v414;
                  break;
                }
              }
            }
            if (v421 == v414)
            {
              uint64_t v422 = 0;
              uint64_t v423 = v344 + v420;
              double v341 = 0.0;
              do
              {
                *(float *)&double v341 = *(float *)&v341 + *(float *)(v423 + v422);
                v422 += 16;
              }
              while (v422 != 128);
              uint64_t v424 = 0;
              *(float *)&double v341 = (float)(*(float *)&v341 * v337) - *(float *)&v340;
              do
              {
                v342.f32[0] = *(float *)(v678 + v420 + v424) - *(float *)&v341;
                *(_DWORD *)(v678 + v420 + v424) = v342.i32[0];
                v424 += 16;
              }
              while (v424 != 128);
              uint64_t v343 = *((void *)&v678 + 1);
              uint64_t v344 = v678;
            }
          }
          ++v418;
          v420 += 192;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v343 - v344) >> 6) > v418);
        int v410 = *(_DWORD *)&v607[4 * v603];
      }
    }
    sub_25B56CC6C((uint64_t *)&v678, &v662, v410, v665, (uint64_t)&v657, v656, 2, v340, v341, v342);
    if ((*a3 - 1) <= 1)
    {
      int v426 = *(_DWORD *)&v607[4 * v603];
      uint64_t v427 = v678;
      long long v428 = (long long *)(v678 + 192 * v426);
      long long v429 = v428[2];
      long long v431 = *v428;
      long long v430 = v428[1];
      long long v725 = v428[3];
      *(_OWORD *)&v724[16] = v429;
      *(_OWORD *)buf = v431;
      *(_OWORD *)v724 = v430;
      long long v432 = v428[6];
      long long v434 = v428[4];
      long long v433 = v428[5];
      long long v729 = v428[7];
      long long v728 = v432;
      long long v726 = v434;
      long long v727 = v433;
      id v730 = *((id *)v428 + 16);
      LODWORD(v731) = *((_DWORD *)v428 + 34);
      id v732 = *((id *)v428 + 18);
      v734 = 0;
      v735 = 0;
      v733 = 0;
      sub_25B3FCA58(&v733, *((const void **)v428 + 19), *((void *)v428 + 20), (uint64_t)(*((void *)v428 + 20) - *((void *)v428 + 19)) >> 2);
      uint64_t v435 = v427 + 192 * v426;
      id v736 = *(id *)(v435 + 176);
      LOWORD(v737) = *(_WORD *)(v435 + 184);
      v718[3] = v726;
      v718[4] = v727;
      v718[5] = v728;
      v718[6] = v729;
      *(_OWORD *)v717 = *(_OWORD *)buf;
      v718[0] = *(_OWORD *)v724;
      v718[1] = *(_OWORD *)&v724[16];
      v718[2] = v725;
      int v436 = v663;
      unint64_t v437 = v662;
      if (v663 == v662)
      {
        v610 = 0;
        v439 = 0;
        float32x2_t v440 = 0;
      }
      else
      {
        unint64_t v438 = 0;
        v610 = 0;
        v439 = 0;
        float32x2_t v440 = 0;
        unint64_t v441 = 0;
        do
        {
          if (v437[v441] == v426)
          {
            if ((unint64_t)v440 >= v438)
            {
              uint64_t v442 = (v440 - v439) >> 2;
              unint64_t v443 = v442 + 1;
              if ((unint64_t)(v442 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v438 - (void)v439) >> 1 > v443) {
                unint64_t v443 = (uint64_t)(v438 - (void)v439) >> 1;
              }
              if (v438 - (unint64_t)v439 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v444 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v444 = v443;
              }
              if (v444)
              {
                unint64_t v444 = (unint64_t)sub_25B3FBC64(v444);
                float32x2_t v440 = v610;
              }
              else
              {
                uint64_t v445 = 0;
              }
              v446 = (char *)(v444 + 4 * v442);
              *(_DWORD *)v446 = v441;
              int32x2_t v447 = v446 + 4;
              while (v440 != v439)
              {
                int v448 = *((_DWORD *)v440 - 1);
                v440 -= 4;
                *((_DWORD *)v446 - 1) = v448;
                v446 -= 4;
              }
              unint64_t v438 = v444 + 4 * v445;
              if (v439) {
                operator delete(v439);
              }
              v439 = v446;
              float32x2_t v440 = v447;
            }
            else
            {
              *(_DWORD *)float32x2_t v440 = v441;
              v440 += 4;
            }
            int v436 = v663;
            unint64_t v437 = v662;
            v610 = v440;
          }
          ++v441;
        }
        while (v441 < v436 - v437);
      }
      LODWORD(v689[0]) = 0;
      sub_25B400C5C(v699, 4uLL, v689);
      sub_25B413A88(v716, (v440 - v439) >> 2, (uint64_t)v699);
      if (v699[0])
      {
        v699[1] = v699[0];
        operator delete(v699[0]);
      }
      LODWORD(v689[0]) = 0;
      sub_25B400C5C(v699, 4uLL, v689);
      sub_25B413A88(v715, (v610 - v439) >> 2, (uint64_t)v699);
      unint64_t v606 = (v610 - v439) >> 2;
      if (v699[0])
      {
        v699[1] = v699[0];
        operator delete(v699[0]);
      }
      if (v610 != v439)
      {
        uint64_t v449 = 0;
        uint64_t v450 = (v610 - v439) >> 2;
        if (v606 <= 1) {
          uint64_t v450 = 1;
        }
        uint64_t v615 = v450;
        do
        {
          int v451 = *(_DWORD *)&v439[4 * v449];
          uint64_t v452 = v678;
          uint64_t v453 = v678 + 192 * v451;
          float32x4_t v703 = *(float32x4_t *)(v453 + 64);
          long long v704 = *(_OWORD *)(v453 + 80);
          float32x4_t v705 = *(float32x4_t *)(v453 + 96);
          long long v706 = *(_OWORD *)(v453 + 112);
          *(_OWORD *)v699 = *(_OWORD *)v453;
          float32x4_t v700 = *(float32x4_t *)(v453 + 16);
          float32x4_t v701 = *(float32x4_t *)(v453 + 32);
          long long v702 = *(_OWORD *)(v453 + 48);
          id v707 = *(id *)(v453 + 128);
          int v708 = *(_DWORD *)(v453 + 136);
          id v709 = *(id *)(v453 + 144);
          v711 = 0;
          uint64_t v712 = 0;
          v710 = 0;
          sub_25B3FCA58(&v710, *(const void **)(v453 + 152), *(void *)(v453 + 160), (uint64_t)(*(void *)(v453 + 160) - *(void *)(v453 + 152)) >> 2);
          id v454 = *(id *)(v452 + 192 * v451 + 176);
          uint64_t v455 = 0;
          id v713 = v454;
          uint64_t v456 = *(void *)(v716[0] + 24 * v449);
          uint64_t v457 = *(void *)(v715[0] + 24 * v449);
          float32x2_t v458 = vsub_f32(*(float32x2_t *)v700.f32, (float32x2_t)v699[0]);
          float64x2_t v459 = vcvtq_f64_f32(v458);
          double v460 = sqrt(vaddvq_f64(vmulq_f64(v459, v459))+ (float)(v700.f32[2] - *(float *)&v699[1]) * (float)(v700.f32[2] - *(float *)&v699[1]));
          *(float *)&double v460 = v460;
          *(float32x2_t *)&long long v461 = vdiv_f32(v458, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v460, 0));
          v462.f32[0] = (float)(v700.f32[2] - *(float *)&v699[1]) / *(float *)&v460;
          long long v463 = v461;
          DWORD2(v463) = v462.i32[0];
          *(_OWORD *)v621 = v463;
          int objc = v461;
          do
          {
            uint64_t v464 = 0;
            v462.i64[0] = 0;
            do
            {
              *(float32x2_t *)v462.f32 = vadd_f32(*(float32x2_t *)v462.f32, (float32x2_t)v699[v464]);
              v464 += 2;
            }
            while (v464 != 16);
            uint64_t v465 = v455 + 1;
            float32x4_t v466 = vsubq_f32(*(float32x4_t *)&v717[2 * ((v455 + 2) & 3)], *(float32x4_t *)&v717[2 * ((v455 + 1) & 3)]);
            float64x2_t v467 = vcvtq_f64_f32(*(float32x2_t *)v466.f32);
            float64x2_t v468 = vmulq_f64(v467, v467);
            double v469 = sqrt(v466.f32[2] * v466.f32[2] + vaddvq_f64(v468));
            *(float *)&double v469 = v469;
            *(float32x2_t *)v462.f32 = vmul_f32(*(float32x2_t *)v462.f32, (float32x2_t)0x3E0000003E000000);
            *(float32x2_t *)&v468.f64[0] = vdiv_f32(*(float32x2_t *)v466.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v469, 0));
            int __p_4 = HIDWORD(v468.f64[0]);
            float32x4_t v470 = (float32x4_t)v468;
            v470.f32[2] = v466.f32[2] / *(float *)&v469;
            unint64_t v471 = vsubq_f32(v462, *(float32x4_t *)&v717[2 * v455]).u64[0];
            *(float *)(v456 + 4 * v455) = fabsf(vmlas_n_f32(vmuls_lane_f32(*((float *)&v471 + 1), *(float32x2_t *)&v468.f64[0], 1), *(float *)v468.f64, *(float *)&v471)+ 0.0);
            float32x4_t v472 = vmulq_f32(v470, *(float32x4_t *)v621);
            v462.f32[0] = acos(fmin(fmax(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v472, 2), vaddq_f32(v472, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v472.f32, 1))).f32[0], -1.0), 1.0));
            _S2 = objc;
            _V3.S[1] = __p_4;
            __asm { FMLA            S1, S2, V3.S[1] }
            if (_S1 < 0.0) {
              v462.f32[0] = -v462.f32[0];
            }
            *(_DWORD *)(v457 + 4 * v455++) = v462.i32[0];
          }
          while (v465 != 4);

          if (v710) {
            operator delete(v710);
          }

          ++v449;
        }
        while (v449 != v615);
      }
      LODWORD(v699[0]) = 0;
      sub_25B40FF0C(v698, v606, v699);
      LODWORD(v699[0]) = 0;
      sub_25B400C5C(v697, v606, v699);
      if (v610 == v439)
      {
        objd = 0;
      }
      else
      {
        uint64_t v476 = 0;
        uint64_t v477 = v716[0];
        v478 = v698[0];
        uint64_t v479 = v715[0];
        __n128 v480 = v697[0];
        if (v606 <= 1) {
          uint64_t v481 = 1;
        }
        else {
          uint64_t v481 = (v610 - v439) >> 2;
        }
        do
        {
          uint64_t v482 = (float **)(v477 + 24 * v476);
          float v483 = *v482;
          uint64_t v484 = v482[1];
          unsigned int v485 = v483 + 1;
          _ZF = v483 == v484 || v485 == v484;
          float v487 = v483;
          if (!_ZF)
          {
            float v488 = *v483;
            float v487 = v483;
            float32x2_t v489 = v483 + 1;
            do
            {
              float v490 = *v489++;
              float v491 = v490;
              if (v490 < v488)
              {
                float v488 = v491;
                float v487 = v485;
              }
              unsigned int v485 = v489;
            }
            while (v489 != v484);
          }
          unint64_t v492 = (char *)v487 - (char *)v483;
          v478[v476] = v492 >> 2;
          v480[v476] = *(_DWORD *)(*(void *)(v479 + 24 * v476) + ((uint64_t)(v492 << 30) >> 30));
          ++v476;
        }
        while (v476 != v481);
        objd = 0;
        float v493 = 0;
        unint64_t __pc = 0;
        uint64_t v494 = 0;
        uint64_t v622 = v481;
        do
        {
          v495 = operator new(0xCuLL);
          *(void *)v495 = 0;
          v495[2] = 0;
          sub_25B56C0EC((float32x2_t **)v699, (float32x4_t *)(v678 + 192 * *(int *)&v439[4 * v494]));
          operator delete(v495);
          float32x2_t v496 = v699[0];
          v497 = v697[0];
          if ((unint64_t)v493 >= __pc)
          {
            uint64_t v498 = (v493 - objd) >> 2;
            unint64_t v499 = v498 + 1;
            if ((unint64_t)(v498 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(__pc - (void)objd) >> 1 > v499) {
              unint64_t v499 = (uint64_t)(__pc - (void)objd) >> 1;
            }
            if (__pc - (unint64_t)objd >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v500 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v500 = v499;
            }
            if (v500) {
              unint64_t v500 = (unint64_t)sub_25B3FBC64(v500);
            }
            else {
              uint64_t v501 = 0;
            }
            v502 = (char *)(v500 + 4 * v498);
            *(_DWORD *)v502 = v497[v494];
            long long v503 = v502 + 4;
            while (v493 != objd)
            {
              int v504 = *((_DWORD *)v493 - 1);
              v493 -= 4;
              *((_DWORD *)v502 - 1) = v504;
              v502 -= 4;
            }
            unint64_t __pc = v500 + 4 * v501;
            if (objd) {
              operator delete(objd);
            }
            objd = v502;
            float v493 = v503;
          }
          else
          {
            *(_DWORD *)float v493 = *((_DWORD *)v697[0] + v494);
            v493 += 4;
          }
          int v505 = *(_DWORD *)&v439[4 * v494];
          uint64_t v506 = v678;
          v507 = (long long *)(v678 + 192 * v505);
          float32x4_t v508 = (float32x4_t)v507[2];
          long long v510 = *v507;
          float32x4_t v509 = (float32x4_t)v507[1];
          long long v702 = v507[3];
          float32x4_t v701 = v508;
          *(_OWORD *)v699 = v510;
          float32x4_t v700 = v509;
          float32x4_t v511 = (float32x4_t)v507[6];
          float32x4_t v513 = (float32x4_t)v507[4];
          long long v512 = v507[5];
          long long v706 = v507[7];
          float32x4_t v705 = v511;
          float32x4_t v703 = v513;
          long long v704 = v512;
          id v707 = *((id *)v507 + 16);
          int v708 = *((_DWORD *)v507 + 34);
          id v709 = *((id *)v507 + 18);
          v711 = 0;
          uint64_t v712 = 0;
          v710 = 0;
          sub_25B3FCA58(&v710, *((const void **)v507 + 19), *((void *)v507 + 20), (uint64_t)(*((void *)v507 + 20) - *((void *)v507 + 19)) >> 2);
          uint64_t v514 = v506 + 192 * v505;
          id v515 = *(id *)(v514 + 176);
          uint64_t v516 = 0;
          id v713 = v515;
          __int16 v517 = *(_WORD *)(v514 + 184);
          float32x4_t v693 = v703;
          long long v694 = v704;
          float32x4_t v695 = v705;
          long long v696 = v706;
          *(_OWORD *)v689 = *(_OWORD *)v699;
          float32x4_t v690 = v700;
          float32x4_t v691 = v701;
          long long v692 = v702;
          float32x2_t v518 = 0;
          float v519 = 0.0;
          __int16 v714 = v517;
          do
          {
            float32x2_t v518 = vadd_f32(v518, (float32x2_t)v689[v516]);
            float v519 = v519 + *(float *)&v689[v516 + 1];
            v516 += 2;
          }
          while (v516 != 16);
          sub_25B56BB7C(v688, *((float *)v697[0] + v494));
          long long v686 = 0u;
          long long v687 = 0u;
          long long v684 = 0u;
          long long v685 = 0u;
          long long v682 = 0u;
          long long v683 = 0u;
          *(_OWORD *)v680 = 0u;
          long long v681 = 0u;
          sub_25B56BA78(v680, v689, v688[0], vmul_f32(v518, (float32x2_t)0x3E0000003E000000), v519 * v337);
          long long v520 = (_OWORD *)(v678 + 192 * *(int *)&v439[4 * v494]);
          v520[4] = v684;
          v520[5] = v685;
          v520[6] = v686;
          v520[7] = v687;
          *long long v520 = *(_OWORD *)v680;
          v520[1] = v681;
          v520[2] = v682;
          v520[3] = v683;
          v680[0] = v688;
          sub_25B413C78((void ***)v680);

          if (v710)
          {
            v711 = v710;
            operator delete(v710);
          }

          if (v496) {
            operator delete(v496);
          }
          ++v494;
        }
        while (v494 != v622);
      }
      if (v697[0])
      {
        v697[1] = v697[0];
        operator delete(v697[0]);
      }
      if (v698[0])
      {
        v698[1] = v698[0];
        operator delete(v698[0]);
      }
      v699[0] = v715;
      sub_25B413C78((void ***)v699);
      v699[0] = v716;
      sub_25B413C78((void ***)v699);
      if (v439) {
        operator delete(v439);
      }

      if (v733)
      {
        v734 = v733;
        operator delete(v733);
      }

      uint64_t v409 = v603;
      sub_25B56CC6C((uint64_t *)&v678, &v662, *(_DWORD *)&v607[4 * v603], v665, (uint64_t)&v657, v656, 3, v521, v522, v523);
      if (*a3 == 1)
      {
        int v524 = 4;
LABEL_608:
        sub_25B56CC6C((uint64_t *)&v678, &v662, *(_DWORD *)&v607[4 * v603], v665, (uint64_t)&v657, v656, v524, v275, v276, v277);
      }
      else if (*a3 == 2)
      {
        int v524 = 5;
        goto LABEL_608;
      }
      if (objd) {
        operator delete(objd);
      }
    }
    uint64_t v335 = v409 + 1;
    if (v335 != v598) {
      continue;
    }
    break;
  }
  long long v525 = (int *)v657;
  long long v526 = v658;
  if (v657 == v658)
  {
    long long v526 = (int *)v657;
  }
  else
  {
    long long v527 = (int *)v657;
    do
      objc_msgSend_addObject_(0, v425, *(void *)(v678 + 192 * *v527++ + 144));
    while (v527 != v526);
  }
LABEL_618:
  sub_25B56BD40((uint64_t *)buf, (uint64_t *)&v678, v525, v526);
  sub_25B41D3A8((void **)&v678);
  long long v678 = *(_OWORD *)buf;
  v679[0] = *(void *)v724;
  *(void *)v724 = 0;
  memset(buf, 0, sizeof(buf));
  v699[0] = buf;
  sub_25B41D070((void ***)v699);
  for (j = *(long long **)a2; j != *((long long **)a2 + 1); j += 12)
  {
    id v531 = *((id *)j + 16);
    if ((objc_msgSend_isEqualToString_(v531, v532, @"Chair") & 1) == 0
      && (objc_msgSend_isEqualToString_(v531, v533, @"Table") & 1) == 0
      && (objc_msgSend_isEqualToString_(v531, v534, @"Storage") & 1) == 0)
    {
      uint64_t v535 = *((void *)&v678 + 1);
      if (*((void *)&v678 + 1) >= v679[0])
      {
        unint64_t v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v678 + 1) - v678) >> 6);
        unint64_t v538 = v537 + 1;
        if (v537 + 1 > 0x155555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v679[0] - v678) >> 6) > v538) {
          unint64_t v538 = 0x5555555555555556 * ((uint64_t)(v679[0] - v678) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v679[0] - v678) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v539 = 0x155555555555555;
        }
        else {
          unint64_t v539 = v538;
        }
        *(void *)&v724[16] = v679;
        if (v539) {
          unint64_t v539 = (unint64_t)sub_25B41D460(v539);
        }
        else {
          uint64_t v540 = 0;
        }
        *(void *)buf = v539;
        *(void *)&buf[8] = v539 + 192 * v537;
        *(void *)v724 = *(void *)&buf[8];
        *(void *)&v724[8] = v539 + 192 * v540;
        sub_25B46EAF0(*(uint64_t *)&buf[8], j);
        *(void *)v724 += 192;
        sub_25B4458D0((uint64_t *)&v678, buf);
        uint64_t v536 = *((void *)&v678 + 1);
        sub_25B4459A4((uint64_t)buf);
      }
      else
      {
        sub_25B46EAF0(*((uint64_t *)&v678 + 1), j);
        uint64_t v536 = v535 + 192;
      }
      *((void *)&v678 + 1) = v536;
    }
  }
  long long v654 = 0u;
  long long v655 = 0u;
  long long v652 = 0u;
  long long v653 = 0u;
  v541 = objc_msgSend_allValues(v599, v528, v529);
  obje = v541;
  uint64_t v543 = objc_msgSend_countByEnumeratingWithState_objects_count_(v541, v542, (uint64_t)&v652, v722, 16);
  if (v543)
  {
    uint64_t v544 = 0;
    uint64_t __pd = *(void *)v653;
    do
    {
      for (uint64_t k = 0; k != v543; ++k)
      {
        if (*(void *)v653 != __pd) {
          objc_enumerationMutation(obje);
        }
        long long v546 = *(void **)(*((void *)&v652 + 1) + 8 * k);
        long long v648 = 0u;
        long long v649 = 0u;
        long long v650 = 0u;
        long long v651 = 0u;
        id v547 = v546;
        char v549 = 0;
        uint64_t v550 = objc_msgSend_countByEnumeratingWithState_objects_count_(v547, v548, (uint64_t)&v648, v721, 16);
        if (v550)
        {
          uint64_t v551 = *(void *)v649;
          do
          {
            for (uint64_t m = 0; m != v550; ++m)
            {
              if (*(void *)v649 != v551) {
                objc_enumerationMutation(v547);
              }
              id v553 = *(id *)(*((void *)&v648 + 1) + 8 * m);
              if ((objc_msgSend_containsObject_(0, v554, (uint64_t)v553) & 1) == 0)
              {
                v556 = objc_msgSend_numberWithInt_(NSNumber, v555, v544);
                objc_msgSend_setObject_forKeyedSubscript_(0, v557, (uint64_t)v556, v553);

                char v549 = 1;
              }
            }
            uint64_t v550 = objc_msgSend_countByEnumeratingWithState_objects_count_(v547, v558, (uint64_t)&v648, v721, 16);
          }
          while (v550);
        }

        uint64_t v544 = v544 + (v549 & 1);
      }
      v541 = obje;
      uint64_t v543 = objc_msgSend_countByEnumeratingWithState_objects_count_(obje, v559, (uint64_t)&v652, v722, 16);
    }
    while (v543);
  }

  uint64_t v561 = *((void *)&v678 + 1);
  for (uint64_t n = v678; n != v561; n += 192)
  {
    unint64_t v562 = v676;
    if (v676 >= v677)
    {
      unint64_t v565 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v676 - v675) >> 6);
      unint64_t v566 = v565 + 1;
      if (v565 + 1 > 0x155555555555555) {
        sub_25B3FBC4C();
      }
      if (0x5555555555555556 * ((uint64_t)(v677 - v675) >> 6) > v566) {
        unint64_t v566 = 0x5555555555555556 * ((uint64_t)(v677 - v675) >> 6);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v677 - v675) >> 6) >= 0xAAAAAAAAAAAAAALL) {
        unint64_t v567 = 0x155555555555555;
      }
      else {
        unint64_t v567 = v566;
      }
      *(void *)&v724[16] = &v677;
      if (v567) {
        unint64_t v567 = (unint64_t)sub_25B41D460(v567);
      }
      else {
        uint64_t v568 = 0;
      }
      *(void *)buf = v567;
      *(void *)&buf[8] = v567 + 192 * v565;
      *(void *)v724 = *(void *)&buf[8];
      *(void *)&v724[8] = v567 + 192 * v568;
      sub_25B46EAF0(*(uint64_t *)&buf[8], (long long *)n);
      *(void *)v724 += 192;
      sub_25B4458D0(&v675, buf);
      unint64_t v564 = v676;
      sub_25B4459A4((uint64_t)buf);
    }
    else
    {
      sub_25B46EAF0(v676, (long long *)n);
      unint64_t v564 = v562 + 192;
    }
    unint64_t v676 = v564;
    if (objc_msgSend_isEqualToString_(*(void **)(n + 128), v563, @"Chair"))
    {
      long long v570 = objc_msgSend_objectForKeyedSubscript_(0, v569, *(void *)(n + 144));
      BOOL v571 = v570 == 0;

      if (!v571)
      {
        objc_storeStrong((id *)(v676 - 16), @"ChairGroup");
        long long v573 = objc_msgSend_objectForKeyedSubscript_(0, v572, *(void *)(n + 144));
        __int16 v576 = objc_msgSend_intValue(v573, v574, v575);
        *(_WORD *)(v676 - 8) = v576;
      }
    }
  }
  id v577 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  long long v646 = 0u;
  long long v647 = 0u;
  long long v644 = 0u;
  long long v645 = 0u;
  id __pe = v599;
  uint64_t v580 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pe, v578, (uint64_t)&v644, v720, 16);
  if (v580)
  {
    uint64_t v581 = *(void *)v645;
    do
    {
      for (iuint64_t i = 0; ii != v580; ++ii)
      {
        if (*(void *)v645 != v581) {
          objc_enumerationMutation(__pe);
        }
        uint64_t v583 = *(void *)(*((void *)&v644 + 1) + 8 * ii);
        long long v584 = objc_msgSend_objectForKey_(__pe, v579, v583);
        long long v642 = 0u;
        long long v643 = 0u;
        long long v640 = 0u;
        long long v641 = 0u;
        id v585 = v584;
        uint64_t v587 = objc_msgSend_countByEnumeratingWithState_objects_count_(v585, v586, (uint64_t)&v640, v719, 16);
        if (v587)
        {
          uint64_t v588 = *(void *)v641;
          do
          {
            for (uint64_t jj = 0; jj != v587; ++jj)
            {
              if (*(void *)v641 != v588) {
                objc_enumerationMutation(v585);
              }
              id v590 = *(id *)(*((void *)&v640 + 1) + 8 * jj);
              if ((objc_msgSend_containsObject_(0, v591, (uint64_t)v590) & 1) == 0) {
                objc_msgSend_setObject_forKeyedSubscript_(v577, v592, v583, v590);
              }
            }
            uint64_t v587 = objc_msgSend_countByEnumeratingWithState_objects_count_(v585, v593, (uint64_t)&v640, v719, 16);
          }
          while (v587);
        }
      }
      uint64_t v580 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pe, v579, (uint64_t)&v644, v720, 16);
    }
    while (v580);
  }

  memset(buf, 0, sizeof(buf));
  *(void *)v724 = 0;
  sub_25B471374(buf, v675, v676, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v676 - v675) >> 6));
  id v594 = v577;
  *(void *)&v724[8] = v594;
  id v595 = __pe;
  *(void *)&v724[16] = v595;
  *(_OWORD *)a1 = *(_OWORD *)buf;
  *(void *)(a1 + 16) = *(void *)v724;
  memset(buf, 0, sizeof(buf));
  long long v596 = *(_OWORD *)&v724[8];
  memset(v724, 0, 24);
  *(_OWORD *)(a1 + 24) = v596;
  v699[0] = buf;
  sub_25B41D070((void ***)v699);

  if (v657)
  {
    v658 = v657;
    operator delete(v657);
  }

  if (v607) {
    operator delete(v607);
  }
  sub_25B3FA930(v661[0]);
  if (v662)
  {
    v663 = (int *)v662;
    operator delete(v662);
  }
  *(void *)buf = v664;
  sub_25B413C78((void ***)buf);
  *(void *)buf = v665;
  sub_25B413C78((void ***)buf);
  *(void *)buf = v666;
  sub_25B413C78((void ***)buf);
  if (v667) {
    operator delete(v667);
  }
  *(void *)buf = &v673;
  sub_25B413C78((void ***)buf);
  *(void *)buf = (char *)&v671 + 8;
  sub_25B413C78((void ***)buf);
  *(void *)buf = &v670;
  sub_25B413C78((void ***)buf);
LABEL_141:
  *(void *)buf = &v675;
  sub_25B41D070((void ***)buf);
  *(void *)buf = &v678;
  sub_25B41D070((void ***)buf);
}

void sub_25B572CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (STACK[0x238]) {
    operator delete((void *)STACK[0x238]);
  }

  if (a32) {
    operator delete(a32);
  }
  sub_25B3FA930((void *)STACK[0x258]);
  unint64_t v34 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v34;
    operator delete(v34);
  }
  unint64_t v35 = (void *)STACK[0x2C8];
  STACK[0x360] = (unint64_t)&STACK[0x280];
  sub_25B413C78((void ***)&STACK[0x360]);
  STACK[0x360] = (unint64_t)&STACK[0x298];
  sub_25B413C78((void ***)&STACK[0x360]);
  STACK[0x360] = (unint64_t)&STACK[0x2B0];
  sub_25B413C78((void ***)&STACK[0x360]);
  if (v35)
  {
    STACK[0x2D0] = (unint64_t)v35;
    operator delete(v35);
  }
  STACK[0x360] = a10;
  sub_25B413C78((void ***)&STACK[0x360]);
  STACK[0x360] = a11;
  sub_25B413C78((void ***)&STACK[0x360]);
  STACK[0x360] = (unint64_t)&STACK[0x2E0];
  sub_25B413C78((void ***)&STACK[0x360]);
  STACK[0x360] = (unint64_t)&STACK[0x328];
  sub_25B41D070((void ***)&STACK[0x360]);
  STACK[0x360] = (unint64_t)&STACK[0x340];
  sub_25B41D070((void ***)&STACK[0x360]);
  _Unwind_Resume(a1);
}

uint64_t sub_25B573404(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      __float2 v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x16_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_25B57346C(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        float64x2_t v7 = v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        int v5 = (unsigned __int16 *)*v7;
        unint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        unint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    float64x2_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = v7;
    float64x2_t v7 = operator new(0x38uLL);
    *((_WORD *)v7 + 16) = *a3;
    *((_WORD *)v7 + 20) = 0;
    v7[6] = 0;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    const char *v6 = v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *sub_25B573544(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  __int16 v19 = a2;
  __int16 v18 = a3;
  if (a2 >= a3) {
    unint64_t v6 = (unsigned __int16 *)&v19;
  }
  else {
    unint64_t v6 = (unsigned __int16 *)&v18;
  }
  float64x2_t v7 = (unsigned __int16 *)(sub_25B57346C(a1, *v6, v6) + 5);
  do
  {
    unsigned int v8 = v7;
    float64x2_t v7 = (unsigned __int16 *)*((void *)v7 + 1);
  }
  while (v7);
  int v9 = *v8;
  if (a3 >= a2) {
    uint64_t v10 = (unsigned __int16 *)&v19;
  }
  else {
    uint64_t v10 = (unsigned __int16 *)&v18;
  }
  float32_t result = sub_25B57346C(a1, *v10, v10);
  unint64_t v12 = (unsigned __int16 *)(result + 5);
  do
  {
    unint64_t v13 = v12;
    unint64_t v12 = (unsigned __int16 *)*((void *)v12 + 1);
  }
  while (v12);
  if (v9 != *v13)
  {
    uint64_t v14 = sub_25B57346C(a1, *v10, v10) + 5;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (void *)v14[1];
    }
    while (v14);
    long long v16 = (unsigned __int16 *)(sub_25B57346C(a1, *v6, v6) + 5);
    do
    {
      long long v17 = v16;
      long long v16 = (unsigned __int16 *)*((void *)v16 + 1);
    }
    while (v16);
    float32_t result = sub_25B57346C(a1, *v17, v17);
    result[6] = v15;
  }
  return result;
}

void *sub_25B573648(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        float64x2_t v7 = v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        int v5 = (unsigned __int16 *)*v7;
        unint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        unint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    float64x2_t v7 = a1 + 1;
LABEL_9:
    int v9 = v7;
    float64x2_t v7 = operator new(0x30uLL);
    *((_WORD *)v7 + 16) = *a3;
    v7[5] = 0;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    unsigned __int16 *v6 = v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *sub_25B57371C(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        float64x2_t v7 = (char *)v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        int v5 = *(unsigned __int16 **)v7;
        unint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = (unsigned __int16 *)*((void *)v7 + 1);
      if (!v5)
      {
        unint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    float64x2_t v7 = (char *)(a1 + 1);
LABEL_9:
    int v9 = v7;
    float64x2_t v7 = (char *)operator new(0x48uLL);
    *((_WORD *)v7 + 16) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(void *)float64x2_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    unsigned __int16 *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    sub_25B3FA798(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_25B5737F8(uint64_t a1)
{
  return a1;
}

void sub_25B573834(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = 1;
  if (*(void *)a1 != v2)
  {
    while (*(_DWORD *)(v3 + 8) != -1)
    {
LABEL_18:
      v3 += 12;
      if (v3 == v2) {
        goto LABEL_61;
      }
    }
    int v47 = v4;
    uint64_t v5 = *(void *)v3;
    sub_25B573C08(&v50, a1, *(void *)v3);
    unsigned int v8 = v50;
    float64x2_t v7 = v51;
    unint64_t v9 = (v51 - v50) >> 2;
    unint64_t v10 = *(unsigned int *)(a1 + 28);
    if (v9 < v10)
    {
      int v4 = v47;
      if (!v50)
      {
LABEL_15:
        if (v9 >= v10) {
          ++v4;
        }
        uint64_t v2 = *(void *)(a1 + 8);
        goto LABEL_18;
      }
    }
    else
    {
      if (v50 == v51)
      {
        int v12 = 0;
        int v4 = v47;
      }
      else
      {
        int v11 = 0;
        int v12 = 0;
        unint64_t v6 = *(void *)a1;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
        uint64_t v14 = v50;
        int v4 = v47;
        do
        {
          unint64_t v15 = *(int *)v14;
          if (v13 <= v15 || (*(_DWORD *)(v6 + 12 * (int)v15 + 8) = v47, unint64_t v16 = *(int *)v14, v13 <= v16)) {
            sub_25B56F224();
          }
          if (*(float *)(v6 + 12 * (int)v16) == *(float *)&v5
            && *(float *)(v6 + 12 * (int)v16 + 4) == *((float *)&v5 + 1))
          {
            int v12 = v11;
          }
          ++v11;
          v14 += 4;
        }
        while (v14 != v7);
      }
      unint64_t v42 = v10;
      unint64_t v43 = v9;
      long long v17 = &v8[4 * v12];
      int64_t v18 = v7 - (v17 + 4);
      if (v7 != v17 + 4)
      {
        memmove(&v8[4 * v12], v17 + 4, v7 - (v17 + 4));
        int v4 = v47;
      }
      __int16 v19 = &v17[v18];
      if (&v17[v18] != v8)
      {
        uint64_t v41 = v3;
        uint64_t v20 = 0;
        unint64_t v21 = (&v17[v18] - v8) >> 2;
        uint64_t v22 = v51;
        unint64_t v23 = v52;
        while (1)
        {
          unint64_t v24 = *(int *)&v8[4 * v20];
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2) <= v24)
          {
            int v51 = v22;
            sub_25B56F224();
          }
          uint64_t v25 = *(void *)a1 + 12 * (int)v24;
          unint64_t v26 = v6 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25 + 8);
          sub_25B573C08(&v48, a1, *(void *)v25);
          unint64_t v44 = v26;
          uint64_t v45 = v20;
          uint64_t v28 = v48;
          int v27 = v49;
          BOOL v29 = *(unsigned int *)(a1 + 28) > (unint64_t)((v49 - v48) >> 2) || v48 == v49;
          int v4 = v47;
          __p = v48;
          if (!v29) {
            break;
          }
LABEL_55:
          if (__p)
          {
            operator delete(__p);
            int v4 = v47;
          }
          unint64_t v6 = v44;
          uint64_t v20 = v45 + 1;
          if (v45 + 1 >= v21)
          {
            int v51 = v22;
            uint64_t v3 = v41;
            goto LABEL_59;
          }
        }
        unint64_t v31 = *(void *)a1;
        uint64_t v30 = *(void *)(a1 + 8);
        while (2)
        {
          int v32 = *(_DWORD *)v28;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v31) >> 2) <= *(int *)v28)
          {
LABEL_62:
            int v51 = v22;
            sub_25B56F224();
          }
          unint64_t v33 = v32;
          int v34 = *(_DWORD *)(v31 + 12 * v32 + 8);
          if (v34 == -2)
          {
LABEL_52:
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v31) >> 2) <= v33) {
              goto LABEL_62;
            }
            *(_DWORD *)(v31 + 12 * (int)v33 + 8) = v4;
          }
          else if (v34 == -1)
          {
            if ((unint64_t)v19 >= v23)
            {
              unint64_t v35 = v50;
              uint64_t v36 = (v19 - v50) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
              {
                int v51 = v22;
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v23 - (void)v50) >> 1 > v37) {
                unint64_t v37 = (uint64_t)(v23 - (void)v50) >> 1;
              }
              if (v23 - (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38)
              {
                unint64_t v38 = (unint64_t)sub_25B3FBC64(v38);
                int v32 = *(_DWORD *)v28;
              }
              else
              {
                uint64_t v39 = 0;
              }
              unsigned int v8 = (char *)(v38 + 4 * v36);
              *(_DWORD *)unsigned int v8 = v32;
              uint64_t v22 = v8 + 4;
              while (v19 != v35)
              {
                int v40 = *((_DWORD *)v19 - 1);
                v19 -= 4;
                *((_DWORD *)v8 - 1) = v40;
                v8 -= 4;
              }
              unint64_t v23 = v38 + 4 * v39;
              uint64_t v50 = v8;
              if (v35) {
                operator delete(v35);
              }
              int v4 = v47;
            }
            else
            {
              *(_DWORD *)__int16 v19 = v32;
              unsigned int v8 = v50;
              uint64_t v22 = v19 + 4;
            }
            unint64_t v21 = (v22 - v8) >> 2;
            unint64_t v33 = *(int *)v28;
            unint64_t v31 = *(void *)a1;
            uint64_t v30 = *(void *)(a1 + 8);
            __int16 v19 = v22;
            goto LABEL_52;
          }
          v28 += 4;
          if (v28 == v27) {
            goto LABEL_55;
          }
          continue;
        }
      }
LABEL_59:
      unint64_t v10 = v42;
      unint64_t v9 = v43;
      if (!v8) {
        goto LABEL_15;
      }
    }
    operator delete(v8);
    int v4 = v47;
    goto LABEL_15;
  }
LABEL_61:
  *(_DWORD *)(a1 + 36) = v4 - 1;
}

void sub_25B573BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B573C08(char **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v4 = *(float **)a2;
  uint64_t v3 = *(float **)(a2 + 8);
  if (*(float **)a2 != v3)
  {
    float64x2_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    int v10 = 0;
    do
    {
      if (sqrt((float)(*(float *)&a3 - *v4) * (float)(*(float *)&a3 - *v4)+ (float)(*((float *)&a3 + 1) - v4[1]) * (float)(*((float *)&a3 + 1) - v4[1])) <= *(float *)(a2 + 32))
      {
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v13 = (v9 - v7) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v8 - (void)v7) >> 1 > v14) {
            unint64_t v14 = (uint64_t)(v8 - (void)v7) >> 1;
          }
          if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)sub_25B3FBC64(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          long long v17 = (char *)(v15 + 4 * v13);
          *(_DWORD *)long long v17 = v10;
          int v12 = v17 + 4;
          while (v9 != v7)
          {
            int v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          unint64_t v8 = v15 + 4 * v16;
          *a1 = v17;
          a1[1] = v12;
          a1[2] = (char *)v8;
          if (v7) {
            operator delete(v7);
          }
          float64x2_t v7 = v17;
        }
        else
        {
          *(_DWORD *)unint64_t v9 = v10;
          int v12 = v9 + 4;
        }
        a1[1] = v12;
        uint64_t v3 = *(float **)(a2 + 8);
        unint64_t v9 = v12;
      }
      ++v10;
      v4 += 3;
    }
    while (v4 != v3);
  }
}

void sub_25B573D70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B573E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B573E24(float32x2_t *a1, void *a2, void *a3)
{
  uint64_t v596 = *MEMORY[0x263EF8340];
  id v493 = a2;
  uint64_t v5 = a3;
  unint64_t v492 = a1;
  if (!a1) {
    goto LABEL_481;
  }
  long long v525 = v5;
  unint64_t v8 = objc_msgSend_walls(v5, v6, v7);
  uint64_t v11 = objc_msgSend_count(v8, v9, v10);
  unint64_t v14 = objc_msgSend_curvedWalls(v525, v12, v13);
  unint64_t v17 = objc_msgSend_count(v14, v15, v16) + v11;

  uint64_t v5 = v525;
  if (!v17) {
    goto LABEL_481;
  }
  id v585 = 0;
  __p = 0;
  unint64_t v586 = 0;
  long long v580 = 0u;
  long long v581 = 0u;
  long long v582 = 0u;
  long long v583 = 0u;
  objc_msgSend_walls(v525, v18, v19);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v580, v595, 16);
  unint64_t v516 = v17;
  if (!v23)
  {
    uint64_t v25 = 0;
    goto LABEL_45;
  }
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = *(void *)v581;
  do
  {
    for (uint64_t i = 0; i != v23; ++i)
    {
      if (*(void *)v581 != v26) {
        objc_enumerationMutation(obj);
      }
      uint64_t v28 = *(void **)(*((void *)&v580 + 1) + 8 * i);
      objc_msgSend_quad(v28, v21, v22);
      uint64_t v526 = v31;
      if ((unint64_t)v25 >= v24)
      {
        unint64_t v33 = __p;
        uint64_t v34 = ((char *)v25 - (unsigned char *)__p) >> 3;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v24 - (void)__p) >> 2 > v35) {
          unint64_t v35 = (uint64_t)(v24 - (void)__p) >> 2;
        }
        if (v24 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          unint64_t v36 = (unint64_t)sub_25B3FCAD4(v36);
        }
        else {
          BOOL v29 = 0;
        }
        unint64_t v37 = (void *)(v36 + 8 * v34);
        *unint64_t v37 = v526;
        int v32 = v37 + 1;
        if (v25 != v33)
        {
          do
          {
            uint64_t v38 = *--v25;
            *--unint64_t v37 = v38;
          }
          while (v25 != v33);
          uint64_t v25 = __p;
        }
        __p = v37;
        id v585 = v32;
        unint64_t v586 = v36 + 8 * (void)v29;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v25 = v31;
        int v32 = v25 + 1;
      }
      id v585 = v32;
      objc_msgSend_quad(v28, v29, v30);
      uint64_t v527 = v39;
      unint64_t v24 = v586;
      if ((unint64_t)v32 < v586)
      {
        *int v32 = v39;
        uint64_t v25 = v32 + 1;
        goto LABEL_41;
      }
      int v40 = __p;
      uint64_t v41 = ((char *)v32 - (unsigned char *)__p) >> 3;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v586 - (void)__p) >> 2 > v42) {
        unint64_t v42 = (uint64_t)(v586 - (void)__p) >> 2;
      }
      if (v586 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        unint64_t v43 = (unint64_t)sub_25B3FCAD4(v43);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v44 = (void *)(v43 + 8 * v41);
      unint64_t v24 = v43 + 8 * (void)v21;
      void *v44 = v527;
      uint64_t v25 = v44 + 1;
      if (v32 == v40)
      {
        __p = v44;
        id v585 = v44 + 1;
        unint64_t v586 = v43 + 8 * (void)v21;
LABEL_40:
        operator delete(v32);
        goto LABEL_41;
      }
      do
      {
        uint64_t v45 = *--v32;
        *--unint64_t v44 = v45;
      }
      while (v32 != v40);
      int v32 = __p;
      __p = v44;
      id v585 = v25;
      unint64_t v586 = v43 + 8 * (void)v21;
      if (v32) {
        goto LABEL_40;
      }
LABEL_41:
      id v585 = v25;
    }
    uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v580, v595, 16);
  }
  while (v23);
LABEL_45:

  long long v578 = 0u;
  long long v579 = 0u;
  long long v576 = 0u;
  long long v577 = 0u;
  int v48 = objc_msgSend_curvedWalls(v525, v46, v47);
  uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v49, (uint64_t)&v576, v594, 16);
  if (!v52) {
    goto LABEL_85;
  }
  uint64_t v53 = *(void *)v577;
  while (2)
  {
    uint64_t v54 = 0;
    while (2)
    {
      if (*(void *)v577 != v53) {
        objc_enumerationMutation(v48);
      }
      unint64_t v55 = *(void **)(*((void *)&v576 + 1) + 8 * v54);
      objc_msgSend_quad(v55, v50, v51);
      uint64_t v528 = v58;
      if ((unint64_t)v25 >= v586)
      {
        long long v60 = __p;
        uint64_t v61 = ((char *)v25 - (unsigned char *)__p) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v63 = v586 - (void)__p;
        if ((uint64_t)(v586 - (void)__p) >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64) {
          unint64_t v64 = (unint64_t)sub_25B3FCAD4(v64);
        }
        else {
          uint64_t v56 = 0;
        }
        long long v65 = (void *)(v64 + 8 * v61);
        *long long v65 = v528;
        uint64_t v59 = v65 + 1;
        if (v25 != v60)
        {
          do
          {
            uint64_t v66 = *--v25;
            *--long long v65 = v66;
          }
          while (v25 != v60);
          uint64_t v25 = __p;
        }
        __p = v65;
        id v585 = v59;
        unint64_t v586 = v64 + 8 * (void)v56;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v25 = v58;
        uint64_t v59 = v25 + 1;
      }
      id v585 = v59;
      objc_msgSend_quad(v55, v56, v57);
      uint64_t v529 = v67;
      if ((unint64_t)v59 < v586)
      {
        *uint64_t v59 = v67;
        uint64_t v25 = v59 + 1;
        goto LABEL_83;
      }
      unint64_t v68 = __p;
      uint64_t v69 = ((char *)v59 - (unsigned char *)__p) >> 3;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v71 = v586 - (void)__p;
      if ((uint64_t)(v586 - (void)__p) >> 2 > v70) {
        unint64_t v70 = v71 >> 2;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v72 = v70;
      }
      if (v72) {
        unint64_t v72 = (unint64_t)sub_25B3FCAD4(v72);
      }
      else {
        uint64_t v50 = 0;
      }
      long long v73 = (void *)(v72 + 8 * v69);
      *long long v73 = v529;
      uint64_t v25 = v73 + 1;
      if (v59 == v68)
      {
        __p = v73;
        id v585 = v73 + 1;
        unint64_t v586 = v72 + 8 * (void)v50;
LABEL_82:
        operator delete(v59);
        goto LABEL_83;
      }
      do
      {
        uint64_t v74 = *--v59;
        *--long long v73 = v74;
      }
      while (v59 != v68);
      uint64_t v59 = __p;
      __p = v73;
      id v585 = v25;
      unint64_t v586 = v72 + 8 * (void)v50;
      if (v59) {
        goto LABEL_82;
      }
LABEL_83:
      id v585 = v25;
      if (++v54 != v52) {
        continue;
      }
      break;
    }
    uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v50, (uint64_t)&v576, v594, 16);
    if (v52) {
      continue;
    }
    break;
  }
LABEL_85:

  sub_25B4CF17C((float32x2_t **)v575, v492 + 1, (float32x2_t **)&__p, v516, v75, v76, v77, v78);
  long long v80 = v575[0];
  if ((void *)((char *)v575[1] - (char *)v575[0]) == (void *)32)
  {
    int64x2_t v573 = 0uLL;
    unint64_t v574 = 0;
    memset(v572, 0, 24);
    if (v525) {
      LODWORD(v79) = v525[4];
    }
    else {
      *(void *)&long long v79 = 0;
    }
    long long v490 = v79;
    long long v570 = 0u;
    long long v571 = 0u;
    long long v568 = 0u;
    long long v569 = 0u;
    id v496 = v493;
    uint64_t v499 = objc_msgSend_countByEnumeratingWithState_objects_count_(v496, v81, (uint64_t)&v568, v593, 16);
    if (v499)
    {
      uint64_t v498 = *(void *)v569;
      long long v508 = v84;
      do
      {
        for (uint64_t j = 0; j != v499; ++j)
        {
          if (*(void *)v569 != v498) {
            objc_enumerationMutation(v496);
          }
          __int16 v517 = *(void **)(*((void *)&v568 + 1) + 8 * j);
          for (obja = 0; ; ++obja)
          {
            int v85 = objc_msgSend_floors(v517, v82, v83, v490);
            BOOL v88 = objc_msgSend_count(v85, v86, v87) > (unint64_t)obja;

            if (!v88) {
              break;
            }
            uint64_t v91 = objc_msgSend_floors(v517, v89, v90);
            unint64_t v93 = objc_msgSend_objectAtIndexedSubscript_(v91, v92, (uint64_t)obja);
            if (!objc_msgSend_polygonSize(v93, v94, v95))
            {

LABEL_106:
              long long v566 = 0u;
              long long v567 = 0u;
              long long v564 = 0u;
              long long v565 = 0u;
              uint64_t v126 = objc_msgSend_walls(v517, v124, v125);
              uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v126, v127, (uint64_t)&v564, v592, 16);
              if (v130)
              {
                uint64_t v131 = *(void *)v565;
                do
                {
                  for (uint64_t k = 0; k != v130; ++k)
                  {
                    if (*(void *)v565 != v131) {
                      objc_enumerationMutation(v126);
                    }
                    long long v133 = *(void **)(*((void *)&v564 + 1) + 8 * k);
                    objc_msgSend_quad(v133, v128, v129);
                    float32x2_t v531 = v134;
                    objc_msgSend_quad(v133, v135, v136);
                    *(float32x2_t *)&long long v137 = v531;
                    *((float32x2_t *)&v137 + 1) = v138;
                    *(_OWORD *)uint64_t v536 = v137;
                    *(float32x2_t *)&long long v137 = vsub_f32(v531, v138);
                    if (sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v137, *(float32x2_t *)&v137))) >= 0.5)
                    {
                      *(double *)&uint64_t v139 = COERCE_DOUBLE(sub_25B57644C((float32x2_t *)v536, v525, v129));
                      if ((_BYTE)v128)
                      {
                        double v140 = *(double *)&v139;
                        *(double *)&uint64_t v141 = COERCE_DOUBLE(sub_25B57644C((float32x2_t *)&v536[1], v525, v129));
                        if ((_BYTE)v128)
                        {
                          double v142 = *(double *)&v141;
                          id v143 = objc_alloc_init(MEMORY[0x263F08C38]);
                          objc_msgSend_UUIDString(v143, v144, v145);
                          id v146 = objc_claimAutoreleasedReturnValue();
                          int64_t v149 = (char *)objc_msgSend_UTF8String(v146, v147, v148);
                          sub_25B403500(&v560, v149);
                          sub_25B3FFD2C((uint64_t)src, &v560, 0, v140, v142);
                          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v560.__r_.__value_.__l.__data_);
                          }

                          uint64_t v150 = v573.i64[1];
                          if (v573.i64[1] >= v574)
                          {
                            uint64_t v151 = sub_25B3FFE64(&v573, (long long *)src);
                          }
                          else
                          {
                            sub_25B3FFDC4((char *)v573.i64[1], (long long *)src);
                            uint64_t v151 = v150 + 80;
                          }
                          v573.i64[1] = v151;
                          if (v563[0])
                          {
                            v563[1] = v563[0];
                            operator delete(v563[0]);
                          }
                          if ((src[23] & 0x80000000) != 0) {
                            operator delete(*(void **)src);
                          }
                        }
                      }
                    }
                  }
                  uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v126, v128, (uint64_t)&v564, v592, 16);
                }
                while (v130);
              }

              continue;
            }
            int v98 = objc_msgSend_floors(v517, v96, v97);
            unint64_t v100 = objc_msgSend_objectAtIndexedSubscript_(v98, v99, (uint64_t)obja);
            if (objc_msgSend_polygonSize(v100, v101, v102) == 4)
            {
              unint64_t v530 = objc_msgSend_floors(v517, v103, v104);
              uint64_t v106 = objc_msgSend_objectAtIndexedSubscript_(v530, v105, (uint64_t)obja);
              uint64_t v109 = (float *)objc_msgSend_polygonEdgeConfidence(v106, v107, v108);
              unint64_t v112 = objc_msgSend_floors(v517, v110, v111);
              uint64_t v114 = objc_msgSend_objectAtIndexedSubscript_(v112, v113, (uint64_t)obja);
              uint64_t v117 = objc_msgSend_polygonEdgeConfidence(v114, v115, v116) + 16;
              if (v109 != (float *)v117)
              {
                float32x4_t v118 = v109 + 1;
                if (v109 + 1 != (float *)v117)
                {
                  float v119 = *v109;
                  long long v120 = v109 + 1;
                  do
                  {
                    float v121 = *v120++;
                    float v122 = v121;
                    if (v119 < v121)
                    {
                      float v119 = v122;
                      uint64_t v109 = v118;
                    }
                    float32x4_t v118 = v120;
                  }
                  while (v120 != (float *)v117);
                }
              }
              BOOL v123 = *v109 < 0.5;

              if (v123) {
                goto LABEL_106;
              }
            }
            else
            {
            }
            unint64_t v152 = 0;
            uint64_t v153 = 0;
            unint64_t v154 = 0;
            uint64_t v155 = 0;
            long long v156 = v508;
            LOBYTE(v156) = 0;
            long long v508 = v156;
            do
            {
              float32x2_t v157 = objc_msgSend_floors(v517, v124, v125);
              uint64_t v159 = objc_msgSend_objectAtIndexedSubscript_(v157, v158, (uint64_t)obja);
              objc_msgSend_quad(v159, v160, v161);
              *(_DWORD *)&src[8] = v162;
              *(_DWORD *)&src[24] = v163;
              *(void *)long long src = v164;
              *(void *)&src[16] = v165;
              DWORD2(v562) = v166;
              LODWORD(v563[1]) = v167;
              *(void *)&long long v562 = v168;
              v563[0] = v169;
              float32x2_t v170 = *(float32x2_t *)&src[16 * v155];
              if ((unint64_t)v153 >= v154)
              {
                uint64_t v171 = v153 - v152;
                unint64_t v172 = v171 + 1;
                if ((unint64_t)(v171 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v154 - (void)v152) >> 2 > v172) {
                  unint64_t v172 = (uint64_t)(v154 - (void)v152) >> 2;
                }
                if (v154 - (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v173 = v172;
                }
                if (v173) {
                  unint64_t v173 = (unint64_t)sub_25B3FCAD4(v173);
                }
                else {
                  uint64_t v174 = 0;
                }
                long long v175 = (float32x2_t *)(v173 + 8 * v171);
                *long long v175 = v170;
                long long v176 = v175 + 1;
                while (v153 != v152)
                {
                  float32x2_t v177 = v153[-1];
                  --v153;
                  v175[-1] = v177;
                  --v175;
                }
                unint64_t v154 = v173 + 8 * v174;
                if (v152) {
                  operator delete(v152);
                }
                unint64_t v152 = v175;
                uint64_t v153 = v176;
              }
              else
              {
                *v153++ = v170;
              }

              ++v155;
            }
            while (v155 != 4);
            v532 = 0;
            uint64_t v178 = 0;
            unint64_t v504 = 0;
            unint64_t v179 = 0;
            for (int m = 0; ; int m = v203)
            {
              uint64_t v181 = objc_msgSend_floors(v517, v124, v125);
              long long v183 = objc_msgSend_objectAtIndexedSubscript_(v181, v182, (uint64_t)obja);
              BOOL v186 = objc_msgSend_polygonSize(v183, v184, v185) < v179;

              if (v186) {
                break;
              }
              unint64_t v189 = objc_msgSend_floors(v517, v82, v83);
              long long v191 = objc_msgSend_objectAtIndexedSubscript_(v189, v190, (uint64_t)obja);
              uint64_t v194 = objc_msgSend_polygonEdgeConfidence(v191, v192, v193);
              float v197 = objc_msgSend_floors(v517, v195, v196);
              unint64_t v199 = objc_msgSend_objectAtIndexedSubscript_(v197, v198, (uint64_t)obja);
              float v202 = *(float *)(v194 + 4 * (v179 % objc_msgSend_polygonSize(v199, v200, v201)));

              if (v202 < 0.5)
              {
                int v203 = 0;
                goto LABEL_182;
              }
              unint64_t v204 = objc_msgSend_floors(v517, v124, v125);
              uint64_t v206 = objc_msgSend_objectAtIndexedSubscript_(v204, v205, (uint64_t)obja);
              uint64_t v209 = objc_msgSend_polygon(v206, v207, v208);
              unint64_t v212 = objc_msgSend_floors(v517, v210, v211);
              unint64_t v214 = objc_msgSend_objectAtIndexedSubscript_(v212, v213, (uint64_t)obja);
              long long v511 = *(_OWORD *)(v209 + 16 * (v179 % objc_msgSend_polygonSize(v214, v215, v216)));

              v536[0] = (void *)v511;
              *(double *)&uint64_t v218 = COERCE_DOUBLE(sub_25B57644C((float32x2_t *)v536, v525, v217));
              double v220 = *(double *)&v218;
              int v203 = v124;
              if ((_BYTE)v124)
              {
                if ((unint64_t)v178 >= v504)
                {
                  uint64_t v222 = v178 - v532;
                  unint64_t v223 = v222 + 1;
                  if ((unint64_t)(v222 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v504 - (void)v532) >> 2 > v223) {
                    unint64_t v223 = (uint64_t)(v504 - (void)v532) >> 2;
                  }
                  if (v504 - (unint64_t)v532 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v224 = v223;
                  }
                  if (v224) {
                    unint64_t v224 = (unint64_t)sub_25B3FCAD4(v224);
                  }
                  else {
                    long long v124 = 0;
                  }
                  unint64_t v225 = (double *)(v224 + 8 * v222);
                  *unint64_t v225 = v220;
                  uint64_t v221 = (uint64_t *)(v225 + 1);
                  if (v178 == v532)
                  {
                    float v226 = v532;
                  }
                  else
                  {
                    float v226 = v532;
                    do
                    {
                      uint64_t v227 = *--v178;
                      *((void *)v225-- - 1) = v227;
                    }
                    while (v178 != v532);
                  }
                  unint64_t v504 = v224 + 8 * (void)v124;
                  if (v226) {
                    operator delete(v226);
                  }
                  v532 = (uint64_t *)v225;
                  if (!m) {
                    goto LABEL_181;
                  }
LABEL_172:
                  id v228 = objc_alloc_init(MEMORY[0x263F08C38]);
                  objc_msgSend_UUIDString(v228, v229, v230);
                  id v231 = objc_claimAutoreleasedReturnValue();
                  uint64_t v234 = (char *)objc_msgSend_UTF8String(v231, v232, v233);
                  sub_25B403500(&v559, v234);
                  sub_25B3FFD2C((uint64_t)src, &v559, 0, *(double *)&v508, v220);
                  if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v559.__r_.__value_.__l.__data_);
                  }

                  uint64_t v235 = v573.i64[1];
                  if (v573.i64[1] >= v574)
                  {
                    uint64_t v236 = sub_25B3FFE64(&v573, (long long *)src);
                  }
                  else
                  {
                    sub_25B3FFDC4((char *)v573.i64[1], (long long *)src);
                    uint64_t v236 = v235 + 80;
                  }
                  v573.i64[1] = v236;
                  if (v563[0])
                  {
                    v563[1] = v563[0];
                    operator delete(v563[0]);
                  }
                  if ((src[23] & 0x80000000) != 0) {
                    operator delete(*(void **)src);
                  }
                  goto LABEL_181;
                }
                uint64_t *v178 = v218;
                uint64_t v221 = v178 + 1;
                if (m) {
                  goto LABEL_172;
                }
              }
              else
              {
                uint64_t v221 = v178;
              }
LABEL_181:
              *(double *)&long long v219 = v220;
              long long v508 = v219;
              uint64_t v178 = v221;
LABEL_182:
              ++v179;
            }
            if ((unint64_t)((char *)v178 - (char *)v532) <= 0x18)
            {
              uint64_t v260 = 0;
              goto LABEL_246;
            }
            unint64_t v237 = 0;
            unint64_t v238 = 0;
            unint64_t v239 = 0;
            int v240 = 0;
            float32x2_t v241 = *v152;
            float32x2_t v242 = vsub_f32(v152[1], *v152);
            *(float *)v187.i32 = sqrtf(vaddv_f32(vmul_f32(v242, v242)));
            float32x2_t v243 = vsub_f32(v152[3], *v152);
            *(float *)v188.i32 = sqrtf(vaddv_f32(vmul_f32(v243, v243)));
            float32x2_t v512 = vdiv_f32(v242, (float32x2_t)vdup_lane_s32(v187, 0));
            float32x2_t v244 = vdiv_f32(v243, (float32x2_t)vdup_lane_s32(v188, 0));
            __int32 v502 = v188.i32[0];
            __int32 v505 = v187.i32[0];
            double v245 = (float)(*(float *)v187.i32 / 5.0);
            double v246 = (float)(*(float *)v188.i32 / 5.0);
            do
            {
              int v247 = 0;
              float v248 = ((double)v240 + 0.5) * v245;
              float32x2_t v249 = vmla_n_f32(v241, v512, v248);
              do
              {
                float v250 = ((double)v247 + 0.5) * v246;
                float32x2_t v251 = vmla_n_f32(v249, v244, v250);
                if ((unint64_t)v238 >= v237)
                {
                  uint64_t v252 = v238 - v239;
                  unint64_t v253 = v252 + 1;
                  if ((unint64_t)(v252 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v237 - (void)v239) >> 2 > v253) {
                    unint64_t v253 = (uint64_t)(v237 - (void)v239) >> 2;
                  }
                  if (v237 - (unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v254 = v253;
                  }
                  if (v254) {
                    unint64_t v254 = (unint64_t)sub_25B3FCAD4(v254);
                  }
                  else {
                    uint64_t v255 = 0;
                  }
                  uint64_t v256 = (float32x2_t *)(v254 + 8 * v252);
                  float32x2_t *v256 = v251;
                  unint64_t v257 = v256 + 1;
                  if (v238 != v239)
                  {
                    do
                    {
                      float32x2_t v258 = v238[-1];
                      --v238;
                      v256[-1] = v258;
                      --v256;
                    }
                    while (v238 != v239);
                    unint64_t v238 = v239;
                  }
                  unint64_t v239 = v256;
                  unint64_t v237 = v254 + 8 * v255;
                  if (v238) {
                    operator delete(v238);
                  }
                  unint64_t v238 = v257;
                }
                else
                {
                  *v238++ = v251;
                }
                ++v247;
              }
              while (v247 != 5);
              ++v240;
            }
            while (v240 != 5);
            if (v239 == v238)
            {
              uint64_t v260 = 0;
              BOOL v259 = 0;
              unint64_t v239 = v238;
LABEL_230:
              operator delete(v239);
              goto LABEL_231;
            }
            BOOL v259 = 0;
            uint64_t v260 = 0;
            unint64_t v261 = 0;
            unint64_t v262 = v239;
            do
            {
              float32x2_t v263 = *v262;
              if (sub_25B57AC18((uint64_t)v532, (uint64_t)v178, *v262))
              {
                if ((unint64_t)v259 >= v261)
                {
                  uint64_t v264 = v259 - v260;
                  unint64_t v265 = v264 + 1;
                  if ((unint64_t)(v264 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v261 - (void)v260) >> 2 > v265) {
                    unint64_t v265 = (uint64_t)(v261 - (void)v260) >> 2;
                  }
                  if (v261 - (unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v266 = v265;
                  }
                  if (v266)
                  {
                    unint64_t v266 = (unint64_t)sub_25B3FCAD4(v266);
                    float32x2_t v263 = *v262;
                  }
                  else
                  {
                    uint64_t v267 = 0;
                  }
                  unint64_t v268 = (float32x2_t *)(v266 + 8 * v264);
                  *unint64_t v268 = v263;
                  uint64_t v269 = v268 + 1;
                  if (v259 != v260)
                  {
                    do
                    {
                      float32x2_t v270 = v259[-1];
                      --v259;
                      v268[-1] = v270;
                      --v268;
                    }
                    while (v259 != v260);
                    BOOL v259 = v260;
                  }
                  uint64_t v260 = v268;
                  unint64_t v261 = v266 + 8 * v267;
                  if (v259) {
                    operator delete(v259);
                  }
                  BOOL v259 = v269;
                }
                else
                {
                  *v259++ = v263;
                }
              }
              ++v262;
            }
            while (v262 != v238);
            if (v239) {
              goto LABEL_230;
            }
LABEL_231:
            uint64_t v271 = (float32x2_t *)*((void *)&v572[0] + 1);
            if (*((void *)&v572[0] + 1) >= *(void *)&v572[1])
            {
              uint64_t v273 = (uint64_t)(*((void *)&v572[0] + 1) - *(void *)&v572[0]) >> 6;
              if ((unint64_t)(v273 + 1) >> 58) {
                sub_25B3FBC4C();
              }
              unint64_t v274 = (uint64_t)(*(void *)&v572[1] - *(void *)&v572[0]) >> 5;
              if (v274 <= v273 + 1) {
                unint64_t v274 = v273 + 1;
              }
              if (*(void *)&v572[1] - *(void *)&v572[0] >= 0x7FFFFFFFFFFFFFC0uLL) {
                unint64_t v275 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v275 = v274;
              }
              *(void *)&long long v562 = &v572[1];
              if (v275) {
                unint64_t v275 = (unint64_t)sub_25B4AF474(v275);
              }
              else {
                uint64_t v276 = 0;
              }
              float32x4_t v277 = (float32x2_t *)(v275 + (v273 << 6));
              *(void *)long long src = v275;
              *(void *)&src[8] = v277;
              *(void *)&src[16] = v277;
              *(void *)&src[24] = v275 + (v276 << 6);
              float32x2_t *v277 = v241;
              v277[1] = v512;
              v277[2] = v244;
              v277[3].i32[0] = v505;
              v277[3].i32[1] = v502;
              v277[5] = 0;
              v277[6] = 0;
              v277[4] = 0;
              sub_25B400390(&v277[4], v260, (uint64_t)v259, v259 - v260);
              v277[7].i32[0] = 5;
              uint64_t v278 = *(void *)&src[8];
              *(void *)&src[16] += 64;
              uint64_t v279 = *((void *)&v572[0] + 1);
              uint64_t v280 = *(void *)&v572[0];
              *(void *)&long long v553 = *(void *)&src[8];
              *((void *)&v553 + 1) = *(void *)&src[8];
              long long v587 = v553;
              v536[0] = &v572[1];
              v536[1] = &v587;
              *(void *)&long long v537 = &v553;
              for (BYTE8(v537) = 0; v279 != v280; v279 -= 64)
              {
                long long v281 = *(_OWORD *)(v279 - 64);
                long long v282 = *(_OWORD *)(v279 - 48);
                *(void *)(v278 - 32) = 0;
                uint64_t v283 = v278 - 32;
                *(_OWORD *)(v278 - 64) = v281;
                *(_OWORD *)(v278 - 48) = v282;
                *(void *)(v283 + 8) = 0;
                *(void *)(v283 + 16) = 0;
                sub_25B400390((void *)(v278 - 32), *(const void **)(v279 - 32), *(void *)(v279 - 24), (uint64_t)(*(void *)(v279 - 24) - *(void *)(v279 - 32)) >> 3);
                *(_DWORD *)(v278 - 8) = *(_DWORD *)(v279 - 8);
                uint64_t v278 = *((void *)&v553 + 1) - 64;
                *((void *)&v553 + 1) -= 64;
              }
              BYTE8(v537) = 1;
              sub_25B576D3C((uint64_t)v536);
              uint64_t v284 = *(void *)&v572[1];
              long long v285 = *(_OWORD *)&src[16];
              float32x4_t v513 = *(float32x2_t **)&src[16];
              long long v286 = v572[0];
              *(void *)&v572[0] = v278;
              *(_OWORD *)&src[8] = v286;
              *(_OWORD *)((char *)v572 + 8) = v285;
              *(void *)&src[24] = v284;
              *(void *)long long src = v286;
              sub_25B576CD8((uint64_t)src);
              int v272 = v513;
            }
            else
            {
              **((void **)&v572[0] + 1) = v241;
              v271[1] = v512;
              v271[2] = v244;
              v271[3].i32[0] = v505;
              v271[3].i32[1] = v502;
              v271[5] = 0;
              v271[6] = 0;
              v271[4] = 0;
              sub_25B400390(&v271[4], v260, (uint64_t)v259, v259 - v260);
              v271[7].i32[0] = 5;
              int v272 = v271 + 8;
            }
            *((void *)&v572[0] + 1) = v272;
LABEL_246:
            if (v532) {
              operator delete(v532);
            }
            if (v152) {
              operator delete(v152);
            }
            if (v260) {
              operator delete(v260);
            }
          }
          long long v557 = 0u;
          long long v558 = 0u;
          long long v555 = 0u;
          long long v556 = 0u;
          long long v287 = objc_msgSend_curvedWalls(v517, v89, v90);
          uint64_t v291 = objc_msgSend_countByEnumeratingWithState_objects_count_(v287, v288, (uint64_t)&v555, v591, 16);
          if (v291)
          {
            uint64_t v292 = *(void *)v556;
            do
            {
              for (uint64_t n = 0; n != v291; ++n)
              {
                if (*(void *)v556 != v292) {
                  objc_enumerationMutation(v287);
                }
                uint64_t v294 = *(void **)(*((void *)&v555 + 1) + 8 * n);
                uint64_t v295 = objc_msgSend_identifier(v294, v289, v290);
                objc_msgSend_UUIDString(v295, v296, v297);
                id v298 = objc_claimAutoreleasedReturnValue();
                float32x2_t v301 = (char *)objc_msgSend_UTF8String(v298, v299, v300);

                sub_25B403500(&v554, v301);
                objc_msgSend_quad(v294, v302, v303);
                double v533 = v304;
                objc_msgSend_quad(v294, v305, v306);
                sub_25B3FFD2C((uint64_t)src, &v554, 1, v533, v307);
                if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v554.__r_.__value_.__l.__data_);
                }
                uint64_t v308 = v573.i64[1];
                if (v573.i64[1] >= v574)
                {
                  uint64_t v309 = sub_25B3FFE64(&v573, (long long *)src);
                }
                else
                {
                  sub_25B3FFDC4((char *)v573.i64[1], (long long *)src);
                  uint64_t v309 = v308 + 80;
                }
                v573.i64[1] = v309;
                if (v563[0])
                {
                  v563[1] = v563[0];
                  operator delete(v563[0]);
                }
                if ((src[23] & 0x80000000) != 0) {
                  operator delete(*(void **)src);
                }
              }
              uint64_t v291 = objc_msgSend_countByEnumeratingWithState_objects_count_(v287, v289, (uint64_t)&v555, v591, 16);
            }
            while (v291);
          }
        }
        uint64_t v499 = objc_msgSend_countByEnumeratingWithState_objects_count_(v496, v82, (uint64_t)&v568, v593, 16);
      }
      while (v499);
    }

    uint64_t v551 = 0;
    v552 = 0;
    uint64_t v550 = 0;
    uint64_t v311 = *((void *)&v572[0] + 1);
    uint64_t v310 = *(void *)&v572[0];
    v536[0] = &v550;
    LOBYTE(v536[1]) = 0;
    uint64_t v312 = *((void *)&v572[0] + 1) - *(void *)&v572[0];
    if (*((void *)&v572[0] + 1) != *(void *)&v572[0])
    {
      if (v312 < 0) {
        sub_25B3FBC4C();
      }
      uint64_t v550 = (char *)sub_25B4AF474(v312 >> 6);
      uint64_t v551 = (uint64_t)v550;
      v552 = &v550[64 * v313];
      *(void *)&long long v587 = v550;
      uint64_t v588 = v550;
      *(void *)long long src = &v552;
      *(void *)&src[8] = &v588;
      *(void *)&src[16] = &v587;
      uint64_t v314 = (uint64_t)v550;
      src[24] = 0;
      do
      {
        long long v315 = *(_OWORD *)(v310 + 16);
        *(_OWORD *)uint64_t v314 = *(_OWORD *)v310;
        *(_OWORD *)(v314 + 16) = v315;
        *(void *)(v314 + 40) = 0;
        *(void *)(v314 + 48) = 0;
        *(void *)(v314 + 32) = 0;
        sub_25B400390((void *)(v314 + 32), *(const void **)(v310 + 32), *(void *)(v310 + 40), (uint64_t)(*(void *)(v310 + 40) - *(void *)(v310 + 32)) >> 3);
        *(_DWORD *)(v314 + 56) = *(_DWORD *)(v310 + 56);
        uint64_t v314 = v587 + 64;
        *(void *)&long long v587 = v587 + 64;
        v310 += 64;
      }
      while (v310 != v311);
      src[24] = 1;
      sub_25B576C78((uint64_t)src);
      uint64_t v551 = v314;
    }
    sub_25B4C8378((uint64_t *)&v553, v573.i64, 0, (uint64_t *)&v550);
    *(void *)long long src = &v550;
    sub_25B400058((void ***)src);
    long long v546 = 0u;
    long long v547 = 0u;
    long long v548 = 0u;
    long long v549 = 0u;
    id v491 = v496;
    uint64_t v495 = objc_msgSend_countByEnumeratingWithState_objects_count_(v491, v316, (uint64_t)&v546, v590, 16);
    if (v495)
    {
      uint64_t v494 = *(void *)v547;
      do
      {
        for (iuint64_t i = 0; ii != (id)v495; iuint64_t i = (char *)ii + 1)
        {
          if (*(void *)v547 != v494) {
            objc_enumerationMutation(v491);
          }
          long long v319 = *(void **)(*((void *)&v546 + 1) + 8 * (void)ii);
          long long v542 = 0u;
          long long v543 = 0u;
          long long v544 = 0u;
          long long v545 = 0u;
          float32x4_t v320 = objc_msgSend_curvedWalls(v319, v317, v318, v490);
          uint64_t v322 = objc_msgSend_countByEnumeratingWithState_objects_count_(v320, v321, (uint64_t)&v542, v589, 16);
          if (v322)
          {
            uint64_t v509 = *(void *)v543;
            float32x2_t v518 = v320;
            do
            {
              uint64_t v514 = v322;
              for (uint64_t jj = 0; jj != v514; ++jj)
              {
                if (*(void *)v543 != v509) {
                  objc_enumerationMutation(v320);
                }
                uint64_t v326 = *(void **)(*((void *)&v542 + 1) + 8 * jj);
                unint64_t v327 = objc_msgSend_identifier(v326, v323, v324);
                objc_msgSend_UUIDString(v327, v328, v329);
                id v330 = objc_claimAutoreleasedReturnValue();
                float32x2_t v333 = (char *)objc_msgSend_UTF8String(v330, v331, v332);

                uint64_t v334 = v553;
                if (*((void *)&v553 + 1) != (void)v553)
                {
                  unint64_t v335 = 0;
                  uint64_t v336 = 40;
                  uint64_t v337 = 8;
                  while (1)
                  {
                    sub_25B403500(src, v333);
                    if ((void *)(v334 + v337 + 8) == sub_25B495914(v334 + v337, src))
                    {
                      BOOL v341 = 0;
                    }
                    else
                    {
                      uint64_t v339 = *((void *)&v553 + 1);
                      uint64_t v338 = v553;
                      sub_25B403500(v536, v333);
                      uint64_t v340 = v338 + 40 * ((v335 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((v339 - v338) >> 3)));
                      BOOL v341 = v340 + 16 != (void)sub_25B495914(v340 + 8, v536);
                      if (SBYTE7(v537) < 0) {
                        operator delete(v536[0]);
                      }
                    }
                    if ((src[23] & 0x80000000) != 0) {
                      operator delete(*(void **)src);
                    }
                    if (v341) {
                      break;
                    }
                    ++v335;
                    uint64_t v334 = v553;
                    v337 += 40;
                    v336 += 40;
                    if (v335 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v553 + 1) - v553) >> 3)) {
                      goto LABEL_345;
                    }
                  }
                  objc_msgSend_startOrientation(v326, v323, v324);
                  float v343 = v342;
                  objc_msgSend_endOrientation(v326, v344, v345);
                  float v347 = v346;
                  float v348 = (float)(v343 * 3.1416) / 180.0;
                  float v349 = cosf(v348);
                  objc_msgSend_radius(v326, v350, v351);
                  float v353 = v352;
                  float v354 = sinf(v348);
                  objc_msgSend_radius(v326, v355, v356);
                  float v358 = v357;
                  objc_msgSend_circleCenter(v326, v359, v360);
                  float32x2_t v501 = v361;
                  float v362 = v354;
                  float v363 = v353;
                  float v364 = v349;
                  float v503 = v348;
                  float v506 = (float)(v347 * 3.1416) / 180.0;
                  float v365 = cosf(v506);
                  objc_msgSend_radius(v326, v366, v367);
                  float v369 = v368;
                  float v370 = sinf(v506);
                  objc_msgSend_radius(v326, v371, v372);
                  float v374 = v373;
                  objc_msgSend_circleCenter(v326, v375, v376);
                  v377.f32[0] = v364 * v363;
                  v377.f32[1] = v362 * v358;
                  v378.f32[0] = v365 * v369;
                  v378.f32[1] = v370 * v374;
                  float32x2_t v380 = vadd_f32(v378, v379);
                  float32x2_t v381 = *(float32x2_t *)(v553 + 40 * v335);
                  float32x2_t v382 = vsub_f32(vadd_f32(v377, v501), v381);
                  int32x2_t v383 = (int32x2_t)vmul_f32(v382, v382);
                  float32x2_t v384 = vsub_f32(v380, v381);
                  int32x2_t v385 = (int32x2_t)vmul_f32(v384, v384);
                  int32x2_t v386 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v383, v385), (float32x2_t)vzip2_s32(v383, v385)));
                  if (vcgt_f32((float32x2_t)vdup_lane_s32(v386, 1), (float32x2_t)v386).u32[0])
                  {
                    float v387 = v503 + 0.05236;
                    if ((float)(v503 + 0.05236) >= (float)(v506 + -0.017453)) {
                      goto LABEL_345;
                    }
                    float32x4_t v388 = 0;
                    float64x2_t v389 = 0;
                    unint64_t v390 = 0;
                    do
                    {
                      if ((unint64_t)v389 >= v390)
                      {
                        uint64_t v392 = v389 - v388;
                        unint64_t v393 = v392 + 1;
                        if ((unint64_t)(v392 + 1) >> 62) {
                          sub_25B3FBC4C();
                        }
                        if ((uint64_t)(v390 - (void)v388) >> 1 > v393) {
                          unint64_t v393 = (uint64_t)(v390 - (void)v388) >> 1;
                        }
                        if (v390 - (unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v394 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v394 = v393;
                        }
                        if (v394) {
                          unint64_t v394 = (unint64_t)sub_25B3FBC64(v394);
                        }
                        else {
                          uint64_t v323 = 0;
                        }
                        float64x2_t v395 = (float *)(v394 + 4 * v392);
                        *float64x2_t v395 = v387;
                        float32x4_t v391 = v395 + 1;
                        while (v389 != v388)
                        {
                          int v396 = *((_DWORD *)v389-- - 1);
                          *((_DWORD *)v395-- - 1) = v396;
                        }
                        unint64_t v390 = v394 + 4 * (void)v323;
                        if (v388) {
                          operator delete(v388);
                        }
                        float32x4_t v388 = v395;
                      }
                      else
                      {
                        *float64x2_t v389 = v387;
                        float32x4_t v391 = v389 + 1;
                      }
                      float v387 = v387 + 0.05236;
                      float64x2_t v389 = v391;
                    }
                    while (v387 < (float)(v506 + -0.017453));
                  }
                  else
                  {
                    float v397 = v506 + -0.05236;
                    if ((float)(v506 + -0.05236) <= (float)(v503 + 0.017453)) {
                      goto LABEL_345;
                    }
                    float32x4_t v388 = 0;
                    unint64_t v398 = 0;
                    unint64_t v399 = 0;
                    do
                    {
                      if ((unint64_t)v398 >= v399)
                      {
                        uint64_t v400 = v398 - v388;
                        unint64_t v401 = v400 + 1;
                        if ((unint64_t)(v400 + 1) >> 62) {
                          sub_25B3FBC4C();
                        }
                        if ((uint64_t)(v399 - (void)v388) >> 1 > v401) {
                          unint64_t v401 = (uint64_t)(v399 - (void)v388) >> 1;
                        }
                        if (v399 - (unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v402 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v402 = v401;
                        }
                        if (v402) {
                          unint64_t v402 = (unint64_t)sub_25B3FBC64(v402);
                        }
                        else {
                          uint64_t v323 = 0;
                        }
                        float32x4_t v403 = (float *)(v402 + 4 * v400);
                        *float32x4_t v403 = v397;
                        float32x4_t v391 = v403 + 1;
                        while (v398 != v388)
                        {
                          int v404 = *((_DWORD *)v398-- - 1);
                          *((_DWORD *)v403-- - 1) = v404;
                        }
                        unint64_t v399 = v402 + 4 * (void)v323;
                        if (v388) {
                          operator delete(v388);
                        }
                        float32x4_t v388 = v403;
                      }
                      else
                      {
                        *unint64_t v398 = v397;
                        float32x4_t v391 = v398 + 1;
                      }
                      float v397 = v397 + -0.05236;
                      unint64_t v398 = v391;
                    }
                    while (v397 > (float)(v503 + 0.017453));
                  }
                  for (kuint64_t k = v388; kk != v391; v336 += 40)
                  {
                    float v406 = cosf(*kk);
                    objc_msgSend_radius(v326, v407, v408);
                    float v410 = v409;
                    float v411 = sinf(*kk);
                    objc_msgSend_radius(v326, v412, v413);
                    float v415 = v414;
                    objc_msgSend_circleCenter(v326, v416, v417);
                    float32x2_t v419 = v418;
                    sub_25B403500(v540, v333);
                    v420.f32[0] = v406 * v410;
                    v420.f32[1] = v411 * v415;
                    sub_25B4C9C30((uint64_t)src, v540, 0, COERCE_DOUBLE(vadd_f32(v420, v419)));
                    if (v541 < 0) {
                      operator delete(v540[0]);
                    }
                    sub_25B5766FC((uint64_t *)&v553, v336 + v553, (unint64_t)src);
                    sub_25B400248(*(char **)&src[16]);
                    ++kk;
                  }
                  if (v388) {
                    operator delete(v388);
                  }
                }
LABEL_345:
                float32x4_t v320 = v518;
              }
              uint64_t v322 = objc_msgSend_countByEnumeratingWithState_objects_count_(v518, v323, (uint64_t)&v542, v589, 16);
            }
            while (v322);
          }
        }
        uint64_t v495 = objc_msgSend_countByEnumeratingWithState_objects_count_(v491, v317, (uint64_t)&v546, v590, 16);
      }
      while (v495);
    }

    unint64_t v421 = objc_alloc_init(RS3DSurface);
    uint64_t v422 = v421;
    if (v421)
    {
      v421->type = 5;
      sub_25B4FD4F4((uint64_t)v421, *(void **)&v492[4]);
      v422->individualUpdate = 1;
      v422->confidence = 1.0;
    }
    else
    {
      sub_25B4FD4F4(0, *(void **)&v492[4]);
    }
    uint64_t v424 = 0;
    v425 = v575[0];
    do
    {
      *(void *)&long long v423 = v425[v424];
      DWORD2(v423) = v490;
      *(_OWORD *)&v536[2 * v424++] = v423;
    }
    while (v424 != 4);
    HIDWORD(v426) = HIDWORD(v537);
    *(_OWORD *)long long src = *(_OWORD *)v536;
    *(_OWORD *)&src[16] = v537;
    long long v562 = v538;
    *(_OWORD *)long long v563 = v539;
    v507 = v422;
    if (v422) {
      objc_copyStruct(&v422[1], src, 64, 1, 0);
    }
    uint64_t v427 = (void *)*((void *)&v553 + 1);
    long long v428 = (void *)v553;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v553 + 1) - v553) >> 3) <= 3)
    {
      long long v429 = 0;
      long long v430 = 0;
      unint64_t v535 = 0;
      unint64_t v431 = 0;
      float64x2_t v459 = 0;
      unint64_t v520 = 0;
      int objc = 0;
      long long v433 = 0;
      double v460 = 0;
      for (mint m = 0; mm != 4; ++mm)
      {
        if ((unint64_t)v430 >= v535)
        {
          uint64_t v462 = (v430 - v429) >> 4;
          unint64_t v463 = v462 + 1;
          if ((unint64_t)(v462 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v535 - (void)v429) >> 3 > v463) {
            unint64_t v463 = (uint64_t)(v535 - (void)v429) >> 3;
          }
          if (v535 - (unint64_t)v429 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v464 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v464 = v463;
          }
          if (v464) {
            unint64_t v464 = (unint64_t)sub_25B3FFAEC(v464);
          }
          else {
            uint64_t v465 = 0;
          }
          float32x4_t v466 = (char *)(v464 + 16 * v462);
          *(_OWORD *)float32x4_t v466 = *(_OWORD *)&v536[2 * mm];
          float64x2_t v467 = v466 + 16;
          while (v430 != v429)
          {
            long long v468 = *((_OWORD *)v430 - 1);
            v430 -= 16;
            *((_OWORD *)v466 - 1) = v468;
            v466 -= 16;
          }
          unint64_t v535 = v464 + 16 * v465;
          if (v429) {
            operator delete(v429);
          }
          long long v429 = v466;
          long long v430 = v467;
        }
        else
        {
          *(_OWORD *)long long v430 = *(_OWORD *)&v536[2 * mm];
          v430 += 16;
        }
        if (v459 >= objc)
        {
          double v469 = &v459[-v431];
          uint64_t v470 = (uint64_t)&v459[-v431 + 1];
          if (v470 < 0) {
            sub_25B3FBC4C();
          }
          if (2 * (uint64_t)&objc[-v431] > (unint64_t)v470) {
            uint64_t v470 = 2 * (void)&objc[-v431];
          }
          if ((unint64_t)&objc[-v431] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v471 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v471 = v470;
          }
          if (v471)
          {
            float32x4_t v472 = (char *)operator new(v471);
            uint64_t v473 = v429;
          }
          else
          {
            uint64_t v473 = v429;
            float32x4_t v472 = 0;
          }
          v474 = &v469[(void)v472];
          uint64_t v475 = &v469[(void)v472];
          *uint64_t v475 = 0;
          uint64_t v476 = v475 + 1;
          if (v459 != (char *)v431)
          {
            uint64_t v477 = &v459[~v431];
            do
            {
              char v478 = *--v459;
              (v477--)[(void)v472] = v478;
            }
            while (v459 != (char *)v431);
            v474 = v472;
          }
          int objc = &v472[v471];
          if (v431) {
            operator delete((void *)v431);
          }
          unint64_t v431 = (unint64_t)v474;
          float64x2_t v459 = v476;
          long long v429 = v473;
        }
        else
        {
          *v459++ = 0;
        }
        if ((unint64_t)v460 >= v520)
        {
          uint64_t v480 = (v460 - v433) >> 2;
          unint64_t v481 = v480 + 1;
          if ((unint64_t)(v480 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v520 - (void)v433) >> 1 > v481) {
            unint64_t v481 = (uint64_t)(v520 - (void)v433) >> 1;
          }
          if (v520 - (unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v482 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v482 = v481;
          }
          if (v482) {
            unint64_t v482 = (unint64_t)sub_25B3FBC64(v482);
          }
          else {
            uint64_t v483 = 0;
          }
          uint64_t v484 = (char *)(v482 + 4 * v480);
          *(_DWORD *)uint64_t v484 = 1036831949;
          uint64_t v479 = v484 + 4;
          while (v460 != v433)
          {
            int v485 = *((_DWORD *)v460 - 1);
            v460 -= 4;
            *((_DWORD *)v484 - 1) = v485;
            v484 -= 4;
          }
          unint64_t v520 = v482 + 4 * v483;
          if (v433) {
            operator delete(v433);
          }
          long long v433 = v484;
        }
        else
        {
          *(_DWORD *)double v460 = 1036831949;
          uint64_t v479 = v460 + 4;
        }
        double v460 = v479;
      }
    }
    else if ((void)v553 == *((void *)&v553 + 1))
    {
      long long v429 = 0;
      long long v430 = 0;
      unint64_t v431 = 0;
      long long v433 = 0;
    }
    else
    {
      long long v429 = 0;
      long long v430 = 0;
      unint64_t v534 = 0;
      unint64_t v431 = 0;
      long long v432 = 0;
      unint64_t v519 = 0;
      objb = 0;
      long long v433 = 0;
      long long v434 = 0;
      long long v510 = (void *)*((void *)&v553 + 1);
      do
      {
        *(void *)&long long v426 = *v428;
        DWORD2(v426) = v490;
        if ((unint64_t)v430 >= v534)
        {
          long long v515 = v426;
          uint64_t v435 = (v430 - v429) >> 4;
          unint64_t v436 = v435 + 1;
          if ((unint64_t)(v435 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v534 - (void)v429) >> 3 > v436) {
            unint64_t v436 = (uint64_t)(v534 - (void)v429) >> 3;
          }
          if (v534 - (unint64_t)v429 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v437 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v437 = v436;
          }
          if (v437) {
            unint64_t v437 = (unint64_t)sub_25B3FFAEC(v437);
          }
          else {
            uint64_t v438 = 0;
          }
          v439 = (char *)(v437 + 16 * v435);
          *(_OWORD *)v439 = v515;
          float32x2_t v440 = v439 + 16;
          while (v430 != v429)
          {
            long long v441 = *((_OWORD *)v430 - 1);
            v430 -= 16;
            *((_OWORD *)v439 - 1) = v441;
            v439 -= 16;
          }
          unint64_t v534 = v437 + 16 * v438;
          if (v429) {
            operator delete(v429);
          }
          long long v429 = v439;
          long long v430 = v440;
        }
        else
        {
          *(_OWORD *)long long v430 = v426;
          v430 += 16;
        }
        if (v432 >= objb)
        {
          uint64_t v442 = &v432[-v431];
          uint64_t v443 = (uint64_t)&v432[-v431 + 1];
          if (v443 < 0) {
            sub_25B3FBC4C();
          }
          if (2 * (uint64_t)&objb[-v431] > (unint64_t)v443) {
            uint64_t v443 = 2 * (void)&objb[-v431];
          }
          if ((unint64_t)&objb[-v431] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v444 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v444 = v443;
          }
          if (v444)
          {
            uint64_t v445 = (char *)operator new(v444);
            v446 = v429;
          }
          else
          {
            v446 = v429;
            uint64_t v445 = 0;
          }
          int32x2_t v447 = &v442[(void)v445];
          int v448 = &v442[(void)v445];
          *int v448 = 0;
          uint64_t v449 = v448 + 1;
          if (v432 != (char *)v431)
          {
            uint64_t v450 = &v432[~v431];
            do
            {
              char v451 = *--v432;
              (v450--)[(void)v445] = v451;
            }
            while (v432 != (char *)v431);
            int32x2_t v447 = v445;
          }
          objb = &v445[v444];
          if (v431) {
            operator delete((void *)v431);
          }
          unint64_t v431 = (unint64_t)v447;
          long long v432 = v449;
          long long v429 = v446;
          uint64_t v427 = v510;
        }
        else
        {
          *v432++ = 0;
        }
        if ((unint64_t)v434 >= v519)
        {
          uint64_t v453 = (v434 - v433) >> 2;
          unint64_t v454 = v453 + 1;
          if ((unint64_t)(v453 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v519 - (void)v433) >> 1 > v454) {
            unint64_t v454 = (uint64_t)(v519 - (void)v433) >> 1;
          }
          if (v519 - (unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v455 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v455 = v454;
          }
          if (v455) {
            unint64_t v455 = (unint64_t)sub_25B3FBC64(v455);
          }
          else {
            uint64_t v456 = 0;
          }
          uint64_t v457 = (char *)(v455 + 4 * v453);
          *(_DWORD *)uint64_t v457 = 1065353216;
          uint64_t v452 = v457 + 4;
          while (v434 != v433)
          {
            int v458 = *((_DWORD *)v434 - 1);
            v434 -= 4;
            *((_DWORD *)v457 - 1) = v458;
            v457 -= 4;
          }
          unint64_t v519 = v455 + 4 * v456;
          if (v433) {
            operator delete(v433);
          }
          long long v433 = v457;
        }
        else
        {
          *(_DWORD *)long long v434 = 1065353216;
          uint64_t v452 = v434 + 4;
        }
        v428 += 5;
        long long v434 = v452;
      }
      while (v428 != v427);
    }
    sub_25B4FD368((uint64_t)v507, v429, (char *)v431, v433, (v430 - v429) >> 4);
    float v488 = objc_msgSend_array(MEMORY[0x263EFF980], v486, v487);
    objc_msgSend_addObject_(v488, v489, (uint64_t)v507);
    sub_25B4E66AC((uint64_t)v525, v488);

    if (v433) {
      operator delete(v433);
    }
    if (v431) {
      operator delete((void *)v431);
    }
    if (v429) {
      operator delete(v429);
    }

    *(void *)long long src = &v553;
    sub_25B4000E4((void ***)src);
    *(void *)long long src = v572;
    sub_25B400058((void ***)src);
    *(void *)long long src = &v573;
    sub_25B40016C((void ***)src);
    long long v80 = v575[0];
  }
  if (v80) {
    operator delete(v80);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v5 = v525;
LABEL_481:
}

void sub_25B575EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v70)
  {
    operator delete(v70);
    if (!v68)
    {
LABEL_3:
      if (!v69)
      {
LABEL_5:

        a35 = (uint64_t)&a67;
        sub_25B4000E4((void ***)&a35);
        a35 = (uint64_t)&STACK[0x340];
        sub_25B400058((void ***)&a35);
        a35 = (uint64_t)&STACK[0x360];
        sub_25B40016C((void ***)&a35);
        if (STACK[0x378]) {
          operator delete((void *)STACK[0x378]);
        }
        if (STACK[0x418]) {
          operator delete((void *)STACK[0x418]);
        }

        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(v69);
      goto LABEL_5;
    }
  }
  else if (!v68)
  {
    goto LABEL_3;
  }
  operator delete(v68);
  if (!v69) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t sub_25B57644C(float32x2_t *a1, void *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  unint64_t v6 = objc_msgSend_walls(a2, (const char *)a2, a3);
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v44, v48, 16);
  if (!v10)
  {

    return 0;
  }
  uint64_t v11 = *(void *)v45;
  int8x8_t v12 = 0;
  v3.i32[0] = 2139095039;
  int8x8_t v13 = 0;
  v4.i32[0] = 2139095039;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v45 != v11) {
        objc_enumerationMutation(v6);
      }
      uint64_t v15 = 0;
      uint64_t v16 = *(void **)(*((void *)&v44 + 1) + 8 * i);
      char v17 = 1;
      do
      {
        char v18 = v17;
        objc_msgSend_quad(v16, v8, v9, v40, v41, v42, v43);
        char v17 = 0;
        LODWORD(v41) = v19;
        LODWORD(v43) = v20;
        uint64_t v40 = v21;
        uint64_t v42 = v22;
        long long v23 = *((_OWORD *)&v40 + v15);
        float32x2_t v24 = vsub_f32(*a1, *(float32x2_t *)&v23);
        float32x2_t v25 = vmul_f32(v24, v24);
        v25.f32[0] = sqrtf(vaddv_f32(v25));
        int8x8_t v12 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v4, v25), 0), *(int8x8_t *)&v23, v12);
        if (v4.f32[0] > v25.f32[0]) {
          v4.f32[0] = v25.f32[0];
        }
        uint64_t v15 = 1;
      }
      while ((v18 & 1) != 0);
      float32x2_t v26 = (float32x2_t)sub_25B477C40(v16).n128_u64[0];
      float32x2_t v28 = vsub_f32(v27, v26);
      float v29 = vaddv_f32(vmul_f32(vsub_f32(*a1, v26), v28));
      float v30 = vaddv_f32(vmul_f32(v28, v28));
      if (v30 < 0.000001) {
        float v30 = 0.000001;
      }
      float32x2_t v31 = vmla_n_f32(v26, v28, v29 / v30);
      float32x2_t v32 = vsub_f32(v31, v26);
      float32x2_t v33 = vsub_f32(v31, v27);
      if (vaddv_f32(vmul_f32(v32, v33)) > 0.00001)
      {
        int32x2_t v34 = (int32x2_t)vmul_f32(v32, v32);
        int32x2_t v35 = (int32x2_t)vmul_f32(v33, v33);
        int32x2_t v36 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v34, v35), (float32x2_t)vzip2_s32(v34, v35)));
        float32x2_t v31 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v36, 1), (float32x2_t)v36)), 0), (int8x8_t)v27, (int8x8_t)v26);
      }
      float32x2_t v37 = vsub_f32(*a1, v31);
      float32x2_t v38 = vmul_f32(v37, v37);
      v38.f32[0] = sqrtf(vaddv_f32(v38));
      int8x8_t v13 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v3, v38), 0), (int8x8_t)v31, v13);
      if (v3.f32[0] > v38.f32[0]) {
        v3.f32[0] = v38.f32[0];
      }
    }
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v8, (uint64_t)&v44, v48, 16, v40, v41, v42, v43);
  }
  while (v10);

  if (v4.f32[0] >= 0.35 && v3.f32[0] >= 0.2) {
    return 0;
  }
  if (v4.f32[0] < 0.35) {
    return (uint64_t)v12;
  }
  return (uint64_t)v13;
}

void sub_25B5766D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5766FC(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a1[1];
  unint64_t v8 = a1 + 2;
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v10 > 0x666666666666666) {
      sub_25B3FBC4C();
    }
    uint64_t v11 = a2 - v9;
    int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v9) >> 3);
    if (2 * v13 > v10) {
      unint64_t v10 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v10;
    }
    float32x2_t v32 = v8;
    if (v14)
    {
      uint64_t v16 = (char *)sub_25B460930(v14);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
    uint64_t v17 = (uint64_t)&v16[40 * v12];
    float v29 = v16;
    *(void *)&long long v30 = v17;
    *((void *)&v30 + 1) = v17;
    float32x2_t v31 = &v16[40 * v15];
    if (v12 == v15)
    {
      if (v11 < 1)
      {
        if (v9 == a2) {
          unint64_t v19 = 1;
        }
        else {
          unint64_t v19 = 2 * v12;
        }
        float32x2_t v38 = v8;
        int v20 = (char *)sub_25B460930(v19);
        uint64_t v21 = (uint64_t)&v20[40 * (v19 >> 2)];
        int32x2_t v35 = v20;
        v36.i64[0] = v21;
        long long v23 = &v20[40 * v22];
        v36.i64[1] = v21;
        float32x2_t v37 = v23;
        uint64_t v24 = v30;
        if (*((void *)&v30 + 1) == (void)v30)
        {
          int64x2_t v27 = vdupq_n_s64(v30);
          uint64_t v25 = v21;
        }
        else
        {
          uint64_t v25 = v21 + 40 * ((*((void *)&v30 + 1) - (void)v30) / 40);
          uint64_t v26 = 40 * ((*((void *)&v30 + 1) - (void)v30) / 40);
          do
          {
            sub_25B4C9CE4(v21, v24);
            v21 += 40;
            v24 += 40;
            v26 -= 40;
          }
          while (v26);
          int v20 = v35;
          uint64_t v21 = v36.i64[0];
          int64x2_t v27 = (int64x2_t)v30;
          long long v23 = v37;
        }
        float32x2_t v28 = v31;
        int32x2_t v35 = v29;
        float v29 = v20;
        *(void *)&long long v30 = v21;
        int64x2_t v36 = v27;
        *((void *)&v30 + 1) = v25;
        float32x2_t v31 = v23;
        float32x2_t v37 = v28;
        sub_25B4C9F74((uint64_t)&v35);
        uint64_t v17 = v25;
      }
      else
      {
        if (v12 >= -1) {
          uint64_t v18 = v12 + 1;
        }
        else {
          uint64_t v18 = v12 + 2;
        }
        uint64_t v17 = sub_25B576C0C(v17, v17, v17 - 40 * (v18 >> 1));
        *(void *)&long long v30 = v30 - 40 * (v18 >> 1);
        *((void *)&v30 + 1) = v17;
      }
    }
    sub_25B4C9CE4(v17, a3);
    *((void *)&v30 + 1) += 40;
    sub_25B576B08(a1, &v29, a2);
    sub_25B4C9F74((uint64_t)&v29);
  }
  else if (a2 == v6)
  {
    sub_25B4C9CE4(a2, a3);
    a1[1] = a2 + 40;
  }
  else
  {
    sub_25B5769B8((uint64_t)a1, a2, v6, a2 + 40);
    if (a2 <= a3) {
      a3 += 40 * (a1[1] > a3);
    }
    sub_25B576A98((uint64_t)v33, a2, a3);
    sub_25B400248(v34);
  }
}

void sub_25B576984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  *(void *)(v23 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void sub_25B5769B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  if (v9 >= a3)
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      sub_25B4C9CE4(v11, v9);
      v9 += 40;
      v11 += 40;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v11;
  if (v7 != a4)
  {
    uint64_t v12 = v7 - 40;
    uint64_t v13 = 8 * (v8 >> 3);
    uint64_t v14 = a2 - 40;
    do
    {
      sub_25B576A98((uint64_t)v15, v12, v14 + v13);
      sub_25B400248(v16);
      v12 -= 40;
      v13 -= 40;
    }
    while (v13);
  }
}

void sub_25B576A90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B576A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  if (a2 != a3) {
    sub_25B4CA0B0((uint64_t **)(a2 + 8), *(void **)(a3 + 8), (void *)(a3 + 16));
  }
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a3 + 32);

  return sub_25B4C9CE4(a1, a2);
}

uint64_t sub_25B576B08(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = sub_25B4C9FC8((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[2];
  if (v8 != a3)
  {
    uint64_t v10 = 0;
    do
    {
      sub_25B4C9CE4(v9 + v10, a3 + v10);
      v10 += 40;
    }
    while (a3 + v10 != v8);
    v9 += v10;
    uint64_t v7 = a2[1];
  }
  a2[2] = v9;
  uint64_t v11 = *a1;
  *a1 = v7;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_25B576C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_25B576A98((uint64_t)v7, a3, v5);
      sub_25B400248(v8);
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_25B576C78(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(void *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 64;
    }
  }
  return a1;
}

uint64_t sub_25B576CD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B576D3C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 + 32);
      if (v5)
      {
        *(void *)(v3 + 40) = v5;
        operator delete(v5);
      }
      v3 += 64;
    }
  }
  return a1;
}

void sub_25B576D9C(uint64_t *a1, uint64_t *a2, void *a3, unint64_t **a4)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4 != *a1)
  {
    unint64_t v69 = 0;
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    do
    {
      if (v6 == v7)
      {
        uint64_t v6 = v7;
      }
      else
      {
        uint64_t v8 = 0;
        do
        {
          uint64_t v71 = *(void *)(*a3 + 8 * v8);
          uint64_t v9 = (float32x2_t *)(*a1 + 16 * v69);
          BOOL v88 = 0;
          int64_t v89 = 0;
          uint64_t v90 = 0;
          memset(v87, 0, sizeof(v87));
          __n128 v77 = &unk_2708F21F8;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          uint64_t v84 = 0;
          int v85 = 0;
          __int16 v86 = 257;
          sub_25B5773C8(v9, &v77, (void **)&v88, (uint64_t)v87);
          unint64_t v68 = v9;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          unint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          unint64_t v72 = 0;
          unint64_t v73 = 0;
          uint64_t v70 = v8;
          uint64_t v17 = (float32x2_t *)(v7 + 16 * v8);
          uint64_t v18 = v88;
          uint64_t v74 = (float *)&v17[1];
          double v75 = v89;
          float v19 = *(float *)&v71 + 10.0;
          float v20 = *((float *)&v71 + 1) + -10.0;
          do
          {
            *(float32x2_t *)&long long v10 = vsub_f32((float32x2_t)vrev64_s32(*v18), *v17);
            long long v76 = v10;
            float v21 = atan2f(*(float *)&v10, *((float *)&v10 + 1));
            long long v10 = v76;
            float v22 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v10, *(float32x2_t *)&v10)));
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v23 = v12 - v11;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 62) {
                goto LABEL_108;
              }
              if ((uint64_t)(v13 - (void)v11) >> 1 > v24) {
                unint64_t v24 = (uint64_t)(v13 - (void)v11) >> 1;
              }
              if (v13 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              if (v25) {
                unint64_t v25 = (unint64_t)sub_25B3FBC64(v25);
              }
              else {
                uint64_t v26 = 0;
              }
              int64x2_t v27 = (float *)(v25 + 4 * v23);
              float *v27 = v22;
              float32x2_t v28 = v27 + 1;
              while (v12 != v11)
              {
                int v29 = *((_DWORD *)v12-- - 1);
                *((_DWORD *)v27-- - 1) = v29;
              }
              unint64_t v13 = v25 + 4 * v26;
              if (v11) {
                operator delete(v11);
              }
              uint64_t v11 = v27;
              uint64_t v12 = v28;
            }
            else
            {
              *v12++ = v22;
            }
            float v30 = v21 * 57.2957795;
            if ((unint64_t)v15 >= v16)
            {
              uint64_t v31 = v15 - v14;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
LABEL_108:
              }
                sub_25B3FBC4C();
              if ((uint64_t)(v16 - (void)v14) >> 1 > v32) {
                unint64_t v32 = (uint64_t)(v16 - (void)v14) >> 1;
              }
              if (v16 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_25B3FBC64(v33);
              }
              else {
                uint64_t v34 = 0;
              }
              int32x2_t v35 = (float *)(v33 + 4 * v31);
              *int32x2_t v35 = v30;
              int64x2_t v36 = v35 + 1;
              while (v15 != v14)
              {
                int v37 = *((_DWORD *)v15-- - 1);
                *((_DWORD *)v35-- - 1) = v37;
              }
              unint64_t v16 = v33 + 4 * v34;
              if (v14) {
                operator delete(v14);
              }
              uint64_t v14 = v35;
              uint64_t v15 = v36;
            }
            else
            {
              *v15++ = v30;
            }
            float v38 = vabds_f32(v22, *v74);
            if (v38 < 10.0)
            {
              if (*(float *)&v71 < v30 && *((float *)&v71 + 1) > v30
                || (*(float *)&v71 < (float)(v30 + 360.0)
                  ? (BOOL v39 = (float)(v30 + 360.0) < *((float *)&v71 + 1))
                  : (BOOL v39 = 0),
                    v39))
              {
                ++v73;
              }
            }
            if (v38 < (float)(*v74 / 3.0))
            {
              if (v19 < v30 && v20 > v30
                || (v19 < (float)(v30 + 360.0) ? (BOOL v40 = (float)(v30 + 360.0) < v20) : (BOOL v40 = 0), v40))
              {
                ++v72;
              }
            }
            ++v18;
          }
          while (v18 != v75);
          uint64_t v41 = v88;
          float v42 = *v14;
          float v43 = *(v15 - 1);
          if (*v14 >= 360.0) {
            float v42 = *v14 + -360.0;
          }
          if (v43 >= 360.0) {
            float v43 = v43 + -360.0;
          }
          if (v42 < 0.0) {
            float v42 = v42 + 360.0;
          }
          if (v43 < 0.0) {
            float v43 = v43 + 360.0;
          }
          if (v43 >= v42) {
            float v44 = v43;
          }
          else {
            float v44 = v42;
          }
          if (v43 < v42) {
            float v42 = v43;
          }
          float v45 = v44 - v42;
          float v46 = (float)(v42 + 360.0) - v44;
          if (v46 < v45) {
            float v45 = v46;
          }
          float v47 = (float)(unint64_t)(v89 - v88);
          BOOL v49 = 1;
          if ((float)((float)v73 / v47) <= 0.15 || (float)(vabds_f32(*v11, *(v12 - 1)) / v45) >= 4.0)
          {
            if ((float)((float)v72 / v47) == 0.0
              || (float32x2_t v48 = vsub_f32(*v68, v68[1]), sqrtf(vaddv_f32(vmul_f32(v48, v48))) >= 10.0))
            {
              BOOL v49 = 0;
            }
          }
          __n128 v77 = &unk_2708F21F8;
          if (v85) {
            sub_25B404120(v85);
          }
          if (v87[0]) {
            operator delete(v87[0]);
          }
          if (v41) {
            operator delete(v41);
          }
          operator delete(v14);
          operator delete(v11);
          if (v49)
          {
            uint64_t v50 = a4;
            uint64_t v52 = a4[1];
            unint64_t v51 = (unint64_t)a4[2];
            if ((unint64_t)v52 >= v51)
            {
              uint64_t v54 = *a4;
              uint64_t v55 = v52 - *a4;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 2 > v56) {
                unint64_t v56 = v57 >> 2;
              }
              BOOL v58 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v58) {
                unint64_t v59 = v56;
              }
              if (v59)
              {
                long long v60 = sub_25B3FCAD4(v59);
                uint64_t v50 = a4;
                unint64_t v59 = (unint64_t)v60;
                uint64_t v54 = *a4;
                uint64_t v52 = a4[1];
              }
              else
              {
                uint64_t v61 = 0;
              }
              unint64_t v62 = (unint64_t *)(v59 + 8 * v55);
              *unint64_t v62 = v69;
              uint64_t v53 = v62 + 1;
              while (v52 != v54)
              {
                unint64_t v63 = *--v52;
                *--unint64_t v62 = v63;
              }
              *uint64_t v50 = v62;
              v50[1] = v53;
              v50[2] = (unint64_t *)(v59 + 8 * v61);
              if (v54)
              {
                operator delete(v54);
                uint64_t v50 = a4;
              }
            }
            else
            {
              unint64_t *v52 = v69;
              uint64_t v53 = v52 + 1;
            }
            v50[1] = v53;
          }
          uint64_t v8 = v70 + 1;
          uint64_t v7 = *a2;
          uint64_t v6 = a2[1];
        }
        while (v70 + 1 < (unint64_t)((v6 - *a2) >> 4));
        uint64_t v5 = *a1;
        uint64_t v4 = a1[1];
      }
      ++v69;
    }
    while (v69 < (v4 - v5) >> 4);
  }
}

void sub_25B577358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a45) {
    sub_25B404120(a45);
  }
  float v47 = *(void **)(v45 - 200);
  if (v47) {
    operator delete(v47);
  }
  float32x2_t v48 = *(void **)(v45 - 176);
  if (v48) {
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5773C8(float32x2_t *a1, void *a2, void **a3, uint64_t a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  float32x2_t v8 = a1[1];
  float32x2_t v9 = vsub_f32(*a1, v8);
  int v10 = llroundf(sqrtf(vaddv_f32(vmul_f32(v9, v9))));
  if (v10 <= 2) {
    unint64_t v11 = 2;
  }
  else {
    unint64_t v11 = v10;
  }
  sub_25B49DB70((uint64_t)v68, v11, *(double *)a1, v8.f32[0]);
  LODWORD(v12) = a1->i32[1];
  sub_25B49DB70((uint64_t)v66, v11, v12, a1[1].f32[1]);
  v72[0].__locale_ = 0;
  do
  {
    int v63 = *(_DWORD *)sub_25B503824((uint64_t)v68, (unint64_t *)v72);
    unint64_t v13 = (_DWORD *)sub_25B503824((uint64_t)v66, (unint64_t *)v72);
    LODWORD(v14) = v63;
    HIDWORD(v14) = *v13;
    unint64_t v16 = a3[1];
    unint64_t v15 = (unint64_t)a3[2];
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v64 = v14;
      uint64_t v18 = ((char *)v16 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v19 = v15 - (void)*a3;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v21 = (unint64_t)sub_25B3FCAD4(v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = (void *)(v21 + 8 * v18);
      *uint64_t v23 = v64;
      uint64_t v17 = v23 + 1;
      unint64_t v25 = (char *)*a3;
      unint64_t v24 = (char *)a3[1];
      if (v24 != *a3)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v23 = v26;
        }
        while (v24 != v25);
        unint64_t v24 = (char *)*a3;
      }
      *a3 = v23;
      a3[1] = v17;
      a3[2] = (void *)(v21 + 8 * v22);
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *unint64_t v16 = v14;
      uint64_t v17 = v16 + 1;
    }
    a3[1] = v17;
    ++v72[0].__locale_;
  }
  while (v72[0].__locale_ < (std::locale::__imp *)v11);
  if (!*((unsigned char *)a2 + 137))
  {
    uint64_t v27 = 0;
    unint64_t v62 = a2 + 1;
    int32x2_t v28 = vadd_s32(vmovn_s64(*(int64x2_t *)(a2 + 1)), (int32x2_t)-1);
    int v29 = (void *)MEMORY[0x263F8C0F8];
    float v30 = (std::locale::id *)MEMORY[0x263F8C108];
    long long v60 = a3;
    uint64_t v61 = a4;
    unint64_t v59 = a2;
    do
    {
      uint64_t v65 = v27;
      float32x2_t v31 = *(float32x2_t *)((char *)*a3 + 8 * v27);
      if (*((unsigned char *)a2 + 137))
      {
        sub_25B406B20(v29, (uint64_t)"runtime_err in ", 15);
        sub_25B406B20(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
        sub_25B406B20(v29, (uint64_t)" ", 1);
        unint64_t v32 = (void *)std::ostream::operator<<();
        sub_25B406B20(v32, (uint64_t)" ", 1);
        sub_25B406B20(v32, (uint64_t)"at", 2);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
        unint64_t v33 = std::locale::use_facet(v72, v30);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(v72);
        std::ostream::put();
        std::ostream::flush();
        sub_25B407E3C("err", "empty tensor");
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        uint64_t v34 = std::locale::use_facet(v72, v30);
        ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
        std::locale::~locale(v72);
        std::ostream::put();
        std::ostream::flush();
      }
      uint64_t v35 = 0;
      int32x2_t v36 = vmax_s32(vmin_s32(v28, vcvt_s32_f32(v31)), 0);
      *(void *)&long long v37 = v36.u32[0];
      *((void *)&v37 + 1) = v36.u32[1];
      long long v74 = 0u;
      long long v75 = v37;
      uint64_t v70 = 0;
      *(_OWORD *)&v72[0].__locale_ = 0u;
      long long v73 = 0u;
      float v38 = (std::locale::__imp **)&v75;
      BOOL v39 = v62;
      uint64_t v40 = 1;
      do
      {
        uint64_t v41 = *v38;
        if ((unint64_t)*v38 >= *v39)
        {
          sub_25B406B20(v29, (uint64_t)"runtime_err in ", 15);
          sub_25B406B20(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
          sub_25B406B20(v29, (uint64_t)" ", 1);
          float v42 = (void *)std::ostream::operator<<();
          sub_25B406B20(v42, (uint64_t)" ", 1);
          sub_25B406B20(v42, (uint64_t)"at", 2);
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
          float v43 = std::locale::use_facet(&v71, v30);
          ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
          std::locale::~locale(&v71);
          std::ostream::put();
          std::ostream::flush();
          sub_25B40B60C("err", "shape", (uint64_t)&v70, "=", (uint64_t)v38, "should smaller then");
          std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
          float v44 = std::locale::use_facet(&v71, v30);
          ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
          std::locale::~locale(&v71);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v41 = *v38;
        }
        v72[v35].__locale_ = v41;
        float v38 = (std::locale::__imp **)&v75 + v40;
        uint64_t v70 = v35 + 1;
        ++v39;
        ++v35;
        uint64_t v40 = 2;
      }
      while (v35 != 2);
      a2 = v59;
      uint64_t v45 = v59[7] * (uint64_t)v72[0].__locale_ + v59[8] * (uint64_t)v72[1].__locale_;
      uint64_t v46 = v59[18];
      float32x2_t v48 = *(_DWORD **)(v61 + 8);
      unint64_t v47 = *(void *)(v61 + 16);
      if ((unint64_t)v48 >= v47)
      {
        uint64_t v50 = *(_DWORD **)v61;
        uint64_t v51 = ((uint64_t)v48 - *(void *)v61) >> 2;
        unint64_t v52 = v51 + 1;
        a3 = v60;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        uint64_t v53 = v47 - (void)v50;
        if (v53 >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        BOOL v54 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v54) {
          unint64_t v55 = v52;
        }
        if (v55)
        {
          unint64_t v55 = (unint64_t)sub_25B3FBC64(v55);
          uint64_t v50 = *(_DWORD **)v61;
          float32x2_t v48 = *(_DWORD **)(v61 + 8);
        }
        else
        {
          uint64_t v56 = 0;
        }
        uint64_t v57 = (_DWORD *)(v55 + 4 * v51);
        *uint64_t v57 = *(_DWORD *)(v46 + 4 * v45);
        BOOL v49 = v57 + 1;
        while (v48 != v50)
        {
          int v58 = *--v48;
          *--uint64_t v57 = v58;
        }
        *(void *)uint64_t v61 = v57;
        *(void *)(v61 + 8) = v49;
        *(void *)(v61 + 16) = v55 + 4 * v56;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *float32x2_t v48 = *(_DWORD *)(v46 + 4 * v45);
        BOOL v49 = v48 + 1;
        a3 = v60;
      }
      *(void *)(v61 + 8) = v49;
      uint64_t v27 = v65 + 1;
    }
    while (v65 + 1 != v11);
  }
  v66[0] = &unk_2708F27E8;
  if (v67) {
    sub_25B404120(v67);
  }
  v68[0] = &unk_2708F27E8;
  if (v69) {
    sub_25B404120(v69);
  }
}

void sub_25B577A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (a52) {
    sub_25B404120(a52);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B577B28(char **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = *sub_25B400BE4(a1, (a2[1] - *a2) >> 2);
  uint64_t v7 = (uint64_t *)a1[1];
  if ((uint64_t *)v6 != v7)
  {
    uint64_t v8 = 0;
    float32x2_t v9 = (uint64_t *)v6;
    do
      *v9++ = v8++;
    while (v9 != v7);
  }
  unint64_t v10 = 126 - 2 * __clz(((uint64_t)v7 - v6) >> 3);
  int v29 = a2;
  if (v7 == (uint64_t *)v6) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_25B577F10(v6, v7, &v29, v11, 1);
  unint64_t v12 = (a2[1] - *a2) >> 2;
  if (v12 >= a3) {
    unint64_t v12 = a3;
  }
  unint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  unint64_t v15 = (v14 - *a1) >> 3;
  if (v12 <= v15)
  {
    if (v12 >= v15) {
      return;
    }
    int32x2_t v28 = &v13[8 * v12];
    goto LABEL_23;
  }
  unint64_t v16 = v12 - v15;
  uint64_t v17 = a1[2];
  if (v12 - v15 <= (v17 - v14) >> 3)
  {
    bzero(a1[1], 8 * v16);
    int32x2_t v28 = &v14[8 * v16];
LABEL_23:
    a1[1] = v28;
    return;
  }
  if (v12 >> 61) {
    sub_25B3FBC4C();
  }
  uint64_t v18 = v17 - v13;
  if (v18 >> 2 > v12) {
    unint64_t v12 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v12;
  }
  uint64_t v20 = (char *)sub_25B3FCAD4(v19);
  unint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  uint64_t v23 = &v20[8 * v15];
  unint64_t v25 = &v20[8 * v24];
  bzero(v23, 8 * v16);
  uint64_t v26 = &v23[8 * v16];
  while (v22 != v21)
  {
    uint64_t v27 = *((void *)v22 - 1);
    v22 -= 8;
    *((void *)v23 - 1) = v27;
    v23 -= 8;
  }
  *a1 = v23;
  a1[1] = v26;
  a1[2] = v25;
  if (v21)
  {
    operator delete(v21);
  }
}

void sub_25B577CCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B577CE8(uint64_t a1, float32x2_t a2, float a3, float32x2_t a4)
{
  float32x2_t v18 = vsub_f32(a4, a2);
  double v7 = a3;
  double v8 = v18.f32[0] * v18.f32[0];
  long double v9 = pow(a3, 4.0) * 4.0 * v8;
  float v10 = v9 / pow(v18.f32[1], 4.0)
      + v7 * v7 * ((v8 / (v18.f32[1] * v18.f32[1]) + 1.0) * -4.0) * (v7 * v7 / (v18.f32[1] * v18.f32[1]) + -1.0);
  if (v10 <= 0.0)
  {
    char v17 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    float v11 = sqrtf(v10);
    float v12 = (float)((float)((float)((float)(a3 + a3) * a3) * v18.f32[0]) / v18.f32[1]) / v18.f32[1];
    float v13 = vmul_f32(v18, v18).f32[0];
    float v14 = (float)((float)((float)(v13 / v18.f32[1]) / v18.f32[1]) + 1.0)
        + (float)((float)((float)(v13 / v18.f32[1]) / v18.f32[1]) + 1.0);
    v15.f32[0] = (float)(v12 + v11) / v14;
    v16.f32[0] = (float)(v12 - v11) / v14;
    v15.f32[1] = (float)((float)(a3 * a3) - (float)(v18.f32[0] * v15.f32[0])) / v18.f32[1];
    v16.f32[1] = (float)((float)(a3 * a3) - (float)(v18.f32[0] * v16.f32[0])) / v18.f32[1];
    *(float32x2_t *)(a1 + 8) = vadd_f32(v15, a2);
    *(float32x2_t *)(a1 + 16) = vadd_f32(v16, a2);
    char v17 = 1;
  }
  *(unsigned char *)a1 = v17;
}

BOOL sub_25B577E40(float32x2_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 137)) {
    return 0;
  }
  memset(__p, 0, sizeof(__p));
  double v7 = 0;
  double v8 = 0;
  uint64_t v9 = 0;
  sub_25B5773C8(a1, (void *)a2, __p, (uint64_t)&v7);
  float v3 = 0.0;
  if (v7 != v8)
  {
    uint64_t v4 = v7;
    do
    {
      float v5 = *v4++;
      float v3 = v3 + v5;
    }
    while (v4 != v8);
  }
  BOOL v2 = (float)(v3 / (float)(unint64_t)(v8 - v7)) > 0.1;
  if (v7) {
    operator delete(v7);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_25B577EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B577F10(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  float v11 = (uint64_t *)result;
  while (2)
  {
    float v12 = a2 - 1;
    float v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v45 = *v13;
                if (*(float *)(**a3 + 4 * *v12) < *(float *)(**a3 + 4 * *v13))
                {
                  *float v13 = *v12;
                  *float v12 = v45;
                }
                break;
              case 3uLL:
                uint64_t v46 = **a3;
                float32_t result = (uint64_t)sub_25B5786D0(v13, v13 + 1, a2 - 1, v46);
                break;
              case 4uLL:
                float32_t result = (uint64_t)sub_25B578758(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                unint64_t v47 = v13 + 1;
                float32x2_t v48 = v13 + 2;
                BOOL v49 = v13 + 3;
                float32_t result = (uint64_t)sub_25B578758(v13, v13 + 1, v13 + 2, v13 + 3, a3);
                uint64_t v50 = v13[3];
                uint64_t v51 = **a3;
                if (*(float *)(v51 + 4 * *v12) < *(float *)(v51 + 4 * v50))
                {
                  *BOOL v49 = *v12;
                  *float v12 = v50;
                  uint64_t v52 = *v49;
                  uint64_t v53 = *v48;
                  float v54 = *(float *)(v51 + 4 * *v49);
                  if (v54 < *(float *)(v51 + 4 * *v48))
                  {
                    *float32x2_t v48 = v52;
                    *BOOL v49 = v53;
                    uint64_t v55 = *v47;
                    if (v54 < *(float *)(v51 + 4 * *v47))
                    {
                      v13[1] = v52;
                      v13[2] = v55;
                      uint64_t v56 = *v13;
                      if (v54 < *(float *)(v51 + 4 * *v13))
                      {
                        *float v13 = v52;
                        v13[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                uint64_t v57 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v58 = **a3;
                  uint64_t v59 = 8;
                  long long v60 = v13;
                  do
                  {
                    uint64_t v62 = *v60;
                    uint64_t v61 = v60[1];
                    long long v60 = v57;
                    float v63 = *(float *)(v58 + 4 * v61);
                    if (v63 < *(float *)(v58 + 4 * v62))
                    {
                      uint64_t v64 = v59;
                      do
                      {
                        *(uint64_t *)((char *)v13 + v64) = v62;
                        uint64_t v65 = v64 - 8;
                        if (v64 == 8)
                        {
                          uint64_t v66 = v13;
                          goto LABEL_78;
                        }
                        uint64_t v62 = *(uint64_t *)((char *)v13 + v64 - 16);
                        v64 -= 8;
                      }
                      while (v63 < *(float *)(v58 + 4 * v62));
                      uint64_t v66 = (uint64_t *)((char *)v13 + v65);
LABEL_78:
                      *uint64_t v66 = v61;
                    }
                    uint64_t v57 = v60 + 1;
                    v59 += 8;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              int v98 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v99 = **a3;
                do
                {
                  uint64_t v101 = *v11;
                  uint64_t v100 = v11[1];
                  float v11 = v98;
                  float v102 = *(float *)(v99 + 4 * v100);
                  if (v102 < *(float *)(v99 + 4 * v101))
                  {
                    do
                    {
                      *int v98 = v101;
                      uint64_t v101 = *(v98 - 2);
                      --v98;
                    }
                    while (v102 < *(float *)(v99 + 4 * v101));
                    *int v98 = v100;
                  }
                  int v98 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v67 = (v15 - 2) >> 1;
              unint64_t v68 = *a3;
              int64_t v69 = v67;
              do
              {
                int64_t v70 = v69;
                if (v67 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = &v13[v71];
                  uint64_t v73 = 2 * v69 + 2;
                  uint64_t v74 = *v68;
                  if (v73 < (uint64_t)v15 && *(float *)(v74 + 4 * *v72) < *(float *)(v74 + 4 * v72[1]))
                  {
                    ++v72;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  long long v75 = &v13[v70];
                  float32_t result = *v72;
                  uint64_t v76 = *v75;
                  float v77 = *(float *)(v74 + 4 * *v75);
                  if (*(float *)(v74 + 4 * *v72) >= v77)
                  {
                    do
                    {
                      long long v78 = v72;
                      *long long v75 = result;
                      if (v67 < v71) {
                        break;
                      }
                      uint64_t v79 = 2 * v71;
                      uint64_t v71 = (2 * v71) | 1;
                      unint64_t v72 = &v13[v71];
                      uint64_t v80 = v79 + 2;
                      if (v80 < (uint64_t)v15 && *(float *)(v74 + 4 * *v72) < *(float *)(v74 + 4 * v72[1]))
                      {
                        ++v72;
                        uint64_t v71 = v80;
                      }
                      float32_t result = *v72;
                      long long v75 = v78;
                    }
                    while (*(float *)(v74 + 4 * *v72) >= v77);
                    *long long v78 = v76;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v81 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v82 = 0;
                uint64_t v83 = *v13;
                uint64_t v84 = *a3;
                int v85 = v13;
                do
                {
                  __int16 v86 = v85;
                  v85 += v82 + 1;
                  uint64_t v87 = 2 * v82;
                  uint64_t v82 = (2 * v82) | 1;
                  uint64_t v88 = v87 + 2;
                  if (v88 < v81)
                  {
                    float32_t result = v85[1];
                    if (*(float *)(*v84 + 4 * *v85) < *(float *)(*v84 + 4 * result))
                    {
                      ++v85;
                      uint64_t v82 = v88;
                    }
                  }
                  *__int16 v86 = *v85;
                }
                while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == --a2)
                {
                  *int v85 = v83;
                }
                else
                {
                  *int v85 = *a2;
                  *a2 = v83;
                  uint64_t v89 = (char *)v85 - (char *)v13 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    uint64_t v91 = &v13[v90];
                    uint64_t v92 = *v91;
                    uint64_t v93 = *v85;
                    uint64_t v94 = *v84;
                    float v95 = *(float *)(v94 + 4 * *v85);
                    if (*(float *)(v94 + 4 * *v91) < v95)
                    {
                      do
                      {
                        int v96 = v91;
                        *int v85 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        uint64_t v91 = &v13[v90];
                        uint64_t v92 = *v91;
                        int v85 = v96;
                      }
                      while (*(float *)(v94 + 4 * *v91) < v95);
                      *int v96 = v93;
                    }
                  }
                }
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          char v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x401)
          {
            sub_25B5786D0(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B5786D0(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B5786D0(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            float32_t result = (uint64_t)sub_25B5786D0(v17 - 1, v17, &v11[v16 + 1], **a3);
            uint64_t v19 = *v11;
            *float v11 = *v17;
            *char v17 = v19;
          }
          else
          {
            float32_t result = (uint64_t)sub_25B5786D0(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          uint64_t v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          float v22 = *(float *)(v21 + 4 * v20);
          if (*(float *)(v21 + 4 * *(v11 - 1)) < v22) {
            goto LABEL_13;
          }
          if (v22 >= *(float *)(v21 + 4 * *v12))
          {
            long long v37 = v11 + 1;
            do
            {
              float v13 = v37;
              if (v37 >= a2) {
                break;
              }
              ++v37;
            }
            while (v22 >= *(float *)(v21 + 4 * *v13));
          }
          else
          {
            float v13 = v11;
            do
            {
              uint64_t v36 = v13[1];
              ++v13;
            }
            while (v22 >= *(float *)(v21 + 4 * v36));
          }
          float v38 = a2;
          if (v13 < a2)
          {
            float v38 = a2;
            do
              uint64_t v39 = *--v38;
            while (v22 < *(float *)(v21 + 4 * v39));
          }
          if (v13 < v38)
          {
            uint64_t v40 = *v13;
            uint64_t v41 = *v38;
            do
            {
              *float v13 = v41;
              *float v38 = v40;
              do
              {
                uint64_t v42 = v13[1];
                ++v13;
                uint64_t v40 = v42;
              }
              while (v22 >= *(float *)(v21 + 4 * v42));
              do
              {
                uint64_t v43 = *--v38;
                uint64_t v41 = v43;
              }
              while (v22 < *(float *)(v21 + 4 * v43));
            }
            while (v13 < v38);
          }
          float v44 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *float v11 = *v44;
          }
          a5 = 0;
          uint64_t *v44 = v20;
        }
        float v22 = *(float *)(v21 + 4 * v20);
LABEL_13:
        uint64_t v23 = v11;
        do
        {
          uint64_t v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          uint64_t v25 = v26;
        }
        while (*(float *)(v21 + 4 * v26) < v22);
        uint64_t v27 = a2;
        if (v24 == v11)
        {
          uint64_t v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(float *)(v21 + 4 * v29) >= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(float *)(v21 + 4 * v28) >= v22);
        }
        if (v23 < v27)
        {
          uint64_t v30 = *v27;
          float32x2_t v31 = v23;
          unint64_t v32 = v27;
          do
          {
            *float32x2_t v31 = v30;
            *unint64_t v32 = v25;
            do
            {
              uint64_t v24 = v31;
              uint64_t v33 = v31[1];
              ++v31;
              uint64_t v25 = v33;
            }
            while (*(float *)(v21 + 4 * v33) < v22);
            do
            {
              uint64_t v34 = *--v32;
              uint64_t v30 = v34;
            }
            while (*(float *)(v21 + 4 * v34) >= v22);
          }
          while (v31 < v32);
        }
        if (v24 != v11) {
          *float v11 = *v24;
        }
        *uint64_t v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        float32_t result = sub_25B577F10(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        float v13 = v24 + 1;
      }
      BOOL v35 = sub_25B57880C(v11, v24, a3);
      float v13 = v24 + 1;
      float32_t result = sub_25B57880C(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_25B5786D0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  float v6 = *(float *)(a4 + 4 * *a2);
  float v7 = *(float *)(a4 + 4 * *result);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * *a3);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *result;
      if (*(float *)(a4 + 4 * *a2) < *(float *)(a4 + 4 * *result))
      {
        *float32_t result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *float32_t result = v4;
      *a2 = v5;
      if (*(float *)(a4 + 4 * *a3) >= v7) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *float32_t result = v8;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *sub_25B578758(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  float32_t result = sub_25B5786D0(a1, a2, a3, **a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(float *)(v12 + 4 * *a4) < *(float *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) < *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) < *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL sub_25B57880C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B5786D0(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B578758(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 1;
      float v22 = a1 + 2;
      uint64_t v23 = a1 + 3;
      sub_25B578758(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v24 = *(a2 - 1);
      uint64_t v25 = a1[3];
      uint64_t v26 = **a3;
      if (*(float *)(v26 + 4 * v24) < *(float *)(v26 + 4 * v25))
      {
        *uint64_t v23 = v24;
        *(a2 - 1) = v25;
        uint64_t v27 = *v23;
        uint64_t v28 = *v22;
        float v29 = *(float *)(v26 + 4 * *v23);
        if (v29 < *(float *)(v26 + 4 * *v22))
        {
          *float v22 = v27;
          *uint64_t v23 = v28;
          uint64_t v30 = *v21;
          if (v29 < *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (v29 < *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B5786D0(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      uint64_t *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

_OWORD *sub_25B578A4C(_OWORD *a1, long long *a2, long long *a3)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  uint64_t v5 = a1 + 3;
  long long v6 = *a2;
  long long v7 = a2[2];
  a1[4] = a2[1];
  a1[5] = v7;
  a1[3] = v6;
  sub_25B4641DC((uint64_t)(a1 + 6), (uint64_t)(a2 + 3));
  long long v8 = *a3;
  long long v9 = a3[2];
  *(_OWORD *)((char *)a1 + 264) = a3[1];
  *(_OWORD *)((char *)a1 + 280) = v9;
  *(_OWORD *)((char *)a1 + 248) = v8;
  sub_25B4641DC((uint64_t)a1 + 296, (uint64_t)(a3 + 3));
  uint64_t v10 = 0;
  char v11 = 1;
  do
  {
    uint64_t v12 = *((void *)v5 + v10);
    uint64_t v13 = *((void *)a1 + v10 + 31);
    if ((v11 & 1) == 0) {
      break;
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while (v12 == v13);
  if (v12 != v13)
  {
    uint64_t v14 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v15 = sub_25B406B20(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
    sub_25B406B20(v15, (uint64_t)" ", 1);
    uint64_t v16 = (void *)MEMORY[0x263F8C0F8];
    float v17 = (void *)std::ostream::operator<<();
    sub_25B406B20(v17, (uint64_t)" ", 1);
    sub_25B406B20(v17, (uint64_t)"TensorBinaryExp", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    uint64_t v18 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408160("err", "Binary Exp shape should equal");
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    uint64_t v19 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v20 = v5[1];
  *a1 = *v5;
  a1[1] = v20;
  a1[2] = v5[2];
  return a1;
}

void sub_25B578CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  v10[37] = &unk_2708F1D50;
  uint64_t v12 = (std::__shared_weak_count *)v10[53];
  if (v12) {
    sub_25B404120(v12);
  }
  v10[12] = &unk_2708F1D50;
  uint64_t v13 = (std::__shared_weak_count *)v10[28];
  if (v13) {
    sub_25B404120(v13);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_25B578D14(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 8) * *(void *)a1;
  memset(v21, 0, sizeof(v21));
  if (*(unsigned char *)(a1 + 280) && *(unsigned char *)(a1 + 480))
  {
    float v3 = *(unsigned __int8 **)(a1 + 288);
    uint64_t v4 = *(unsigned __int8 **)(a1 + 488);
    unint64_t v5 = *(int *)(a1 + 544);
    unint64_t v6 = (*v4 + (unint64_t)*v3) / v5;
    if (v2 >= 2)
    {
      unint64_t v7 = v2 - 1;
      long long v8 = v4 + 1;
      long long v9 = v3 + 1;
      do
      {
        unsigned int v11 = *v9++;
        uint64_t v10 = v11;
        unsigned int v12 = *v8++;
        v6 += ((unint64_t)v12 + v10) / v5;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    unint64_t v13 = sub_25B5791C8(a1 + 48, 0, 0, 0);
    unint64_t v14 = *(int *)(a1 + 544);
    uint64_t v15 = 8;
    unint64_t v6 = v13 / v14;
    do
    {
      uint64_t v16 = *(void *)((char *)v21 + v15) + 1;
      *(void *)((char *)v21 + v15) = v16;
      if (v16 != *(void *)(a1 + v15)) {
        break;
      }
      *(void *)((char *)v21 + v15) = 0;
      v15 -= 8;
    }
    while (v15 != -8);
    if (v2 >= 2)
    {
      for (uint64_t i = 1; i != v2; ++i)
      {
        v6 += sub_25B5791C8(a1 + 48, i, *(uint64_t *)&v21[0], *((uint64_t *)&v21[0] + 1)) / v14;
        for (uint64_t j = 8; j != -8; j -= 8)
        {
          uint64_t v19 = *(void *)((char *)v21 + j) + 1;
          *(void *)((char *)v21 + j) = v19;
          if (v19 != *(void *)(a1 + j)) {
            break;
          }
          *(void *)((char *)v21 + j) = 0;
        }
      }
    }
  }
  return v6;
}

uint64_t sub_25B578EA8(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 8) * *(void *)a1;
  memset(v16, 0, sizeof(v16));
  if (*(unsigned char *)(a1 + 184))
  {
    float v3 = *(unsigned __int8 **)(a1 + 192);
    uint64_t result = *v3;
    if (v2 >= 2)
    {
      unint64_t v5 = v2 - 1;
      unint64_t v6 = v3 + 1;
      do
      {
        unsigned int v7 = *v6++;
        result += v7;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 104);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(unsigned __int8 **)(a1 + 192);
    uint64_t result = *v10;
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v12 = *(void *)((char *)v16 + i) + 1;
      *(void *)((char *)v16 + i) = v12;
      if (v12 != *(void *)(a1 + i)) {
        break;
      }
      *(void *)((char *)v16 + i) = 0;
    }
    if (v2 >= 2)
    {
      for (uint64_t j = 1; j != v2; ++j)
      {
        result += v10[v8 * *(void *)&v16[0] + v9 * *((void *)&v16[0] + 1)];
        for (uint64_t k = 8; k != -8; k -= 8)
        {
          uint64_t v15 = *(void *)((char *)v16 + k) + 1;
          *(void *)((char *)v16 + k) = v15;
          if (v15 != *(void *)(a1 + k)) {
            break;
          }
          *(void *)((char *)v16 + k) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B578FD4(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1AF286BCA1AF286) {
    sub_25B3FBC4C();
  }
  unint64_t v6 = a1 + 2;
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v7 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = v6;
  if (v7)
  {
    uint64_t v8 = (char *)sub_25B579110(v7);
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v8[152 * v2];
  uint64_t v12 = sub_25B4641DC(v11, a2);
  uint64_t v14 = *a1;
  for (i = a1[1]; i != v14; uint64_t v12 = sub_25B4641DC(v12 - 152, i))
    i -= 152;
  long long v15 = *(_OWORD *)a1;
  *a1 = v12;
  a1[1] = v11 + 152;
  long long v19 = v15;
  uint64_t v16 = a1[2];
  a1[2] = (uint64_t)&v8[152 * v10];
  uint64_t v20 = v16;
  uint64_t v18 = v15;
  sub_25B57915C((uint64_t)&v18);
  return v11 + 152;
}

void *sub_25B579110(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287) {
    sub_25B3FA70C();
  }
  return operator new(152 * a1);
}

uint64_t sub_25B57915C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 152);
    *(void *)(a1 + 16) = i - 152;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25B5791C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a1 + 232)) {
    uint64_t v4 = *(void *)(a1 + 152) * a3 + *(void *)(a1 + 160) * a4;
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 240) + v4);
  if (!*(unsigned char *)(a1 + 432)) {
    a2 = *(void *)(a1 + 352) * a3 + *(void *)(a1 + 360) * a4;
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 440) + a2) + v5;
}

uint64_t sub_25B57920C(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (char *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (char *)v10;
          uint64_t v11 = a2 - (char *)v10;
          unint64_t v12 = (a2 - (char *)v10) >> 2;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((unsigned __int16 *)a2 - 1) > (unsigned __int16)v10[1])
                {
                  __int16 v45 = *v10;
                  _WORD *v10 = *((_WORD *)a2 - 2);
                  *((_WORD *)a2 - 2) = v45;
                  __int16 v46 = v10[1];
                  v10[1] = *((_WORD *)a2 - 1);
                  *((_WORD *)a2 - 1) = v46;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)sub_25B5799DC(v10, v10 + 2, (_WORD *)a2 - 2);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)sub_25B579AB8(v10, v10 + 2, v10 + 4, (__int16 *)a2 - 2);
                break;
              case 5uLL:
                uint64_t result = (uint64_t)sub_25B579AB8(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*((unsigned __int16 *)a2 - 1) > (unsigned __int16)v10[7])
                {
                  __int16 v47 = v10[6];
                  v10[6] = *((_WORD *)a2 - 2);
                  *((_WORD *)a2 - 2) = v47;
                  __int16 v48 = v10[7];
                  v10[7] = *((_WORD *)a2 - 1);
                  *((_WORD *)a2 - 1) = v48;
                  unsigned int v49 = (unsigned __int16)v10[7];
                  unsigned int v50 = (unsigned __int16)v10[5];
                  if (v49 > v50)
                  {
                    __int16 v51 = v10[4];
                    __int16 v52 = v10[6];
                    v10[4] = v52;
                    v10[6] = v51;
                    v10[5] = v49;
                    v10[7] = v50;
                    unsigned int v53 = (unsigned __int16)v10[3];
                    if (v49 > v53)
                    {
                      __int16 v54 = v10[2];
                      v10[2] = v52;
                      v10[4] = v54;
                      v10[3] = v49;
                      v10[5] = v53;
                      unsigned int v55 = (unsigned __int16)v10[1];
                      if (v49 > v55)
                      {
                        __int16 v56 = *v10;
                        _WORD *v10 = v52;
                        v10[2] = v56;
                        v10[1] = v49;
                        v10[3] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 95)
          {
            uint64_t v57 = (char *)(v10 + 2);
            BOOL v59 = v10 == (_WORD *)a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                uint64_t v61 = (char *)v10;
                do
                {
                  unsigned int v62 = *((unsigned __int16 *)v61 + 3);
                  unsigned int v63 = *((unsigned __int16 *)v61 + 1);
                  uint64_t v61 = v57;
                  if (v62 > v63)
                  {
                    unsigned int v64 = *(_DWORD *)v57;
                    uint64_t v65 = v60;
                    while (1)
                    {
                      *(_DWORD *)((char *)v10 + v65 + 4) = *(_DWORD *)((char *)v10 + v65);
                      if (!v65) {
                        break;
                      }
                      unsigned int v66 = *(unsigned __int16 *)((char *)v10 + v65 - 2);
                      v65 -= 4;
                      if (v66 >= HIWORD(v64))
                      {
                        int64_t v67 = (unsigned int *)((char *)v10 + v65 + 4);
                        goto LABEL_83;
                      }
                    }
                    int64_t v67 = (unsigned int *)v10;
LABEL_83:
                    *int64_t v67 = v64;
                  }
                  uint64_t v57 = v61 + 4;
                  v60 += 4;
                }
                while (v61 + 4 != a2);
              }
            }
            else if (!v59)
            {
              unint64_t v90 = v10 + 1;
              do
              {
                unsigned int v91 = *((unsigned __int16 *)v9 + 3);
                unsigned int v92 = *((unsigned __int16 *)v9 + 1);
                uint64_t v9 = v57;
                if (v91 > v92)
                {
                  unsigned int v93 = *(_DWORD *)v57;
                  uint64_t v94 = v90;
                  do
                  {
                    unsigned int v95 = (unsigned __int16)*(v94 - 2);
                    v94 -= 2;
                    *(_DWORD *)(v94 + 3) = *(_DWORD *)(v94 + 1);
                  }
                  while (v95 < HIWORD(v93));
                  *(_DWORD *)(v94 + 1) = v93;
                }
                uint64_t v57 = v9 + 4;
                v90 += 2;
              }
              while (v9 + 4 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (_WORD *)a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = (unsigned int *)&v10[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v12)
                  {
                    BOOL v73 = *((unsigned __int16 *)v72 + 1) > *((unsigned __int16 *)v72 + 3);
                    v72 += v73;
                    if (v73) {
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  if (*((unsigned __int16 *)v72 + 1) <= (unsigned __int16)v10[2 * v70 + 1])
                  {
                    uint64_t v74 = (unsigned int *)&v10[2 * v70];
                    unsigned int v75 = *v74;
                    do
                    {
                      uint64_t v76 = v74;
                      uint64_t v74 = v72;
                      *(_WORD *)uint64_t v76 = *(_WORD *)v72;
                      *((_WORD *)v76 + 1) = *((_WORD *)v72 + 1);
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      unint64_t v72 = (unsigned int *)&v10[2 * v77];
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v12)
                      {
                        uint64_t result = *((unsigned __int16 *)v72 + 3);
                        BOOL v73 = *((unsigned __int16 *)v72 + 1) > result;
                        v72 += v73;
                        if (v73) {
                          uint64_t v77 = v78;
                        }
                      }
                      uint64_t v71 = v77;
                    }
                    while (*((unsigned __int16 *)v72 + 1) <= HIWORD(v75));
                    *uint64_t v74 = v75;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v79 = (unint64_t)v11 >> 2;
              do
              {
                uint64_t v80 = 0;
                int v81 = *(_DWORD *)v10;
                uint64_t v82 = (char *)v10;
                do
                {
                  uint64_t v83 = &v82[4 * v80 + 4];
                  uint64_t v84 = (2 * v80) | 1;
                  uint64_t v85 = 2 * v80 + 2;
                  if (v85 < v79)
                  {
                    BOOL v73 = *((unsigned __int16 *)v83 + 1) > *((unsigned __int16 *)v83 + 3);
                    v83 += 4 * v73;
                    if (v73) {
                      uint64_t v84 = v85;
                    }
                  }
                  *(_WORD *)uint64_t v82 = *(_WORD *)v83;
                  *((_WORD *)v82 + 1) = *((_WORD *)v83 + 1);
                  uint64_t v82 = v83;
                  uint64_t v80 = v84;
                }
                while (v84 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v83 == a2 - 4)
                {
                  *(_DWORD *)uint64_t v83 = v81;
                }
                else
                {
                  *(_WORD *)uint64_t v83 = *((_WORD *)a2 - 2);
                  *((_WORD *)v83 + 1) = *((_WORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v81;
                  uint64_t v86 = v83 - (char *)v10 + 4;
                  if (v86 >= 5)
                  {
                    unint64_t v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                    if ((unsigned __int16)v10[2 * v87 + 1] > *((unsigned __int16 *)v83 + 1))
                    {
                      unsigned int v88 = *(_DWORD *)v83;
                      do
                      {
                        uint64_t v89 = v83;
                        uint64_t v83 = (char *)&v10[2 * v87];
                        *(_WORD *)uint64_t v89 = *(_WORD *)v83;
                        *((_WORD *)v89 + 1) = *((_WORD *)v83 + 1);
                        if (!v87) {
                          break;
                        }
                        unint64_t v87 = (v87 - 1) >> 1;
                      }
                      while ((unsigned __int16)v10[2 * v87 + 1] > HIWORD(v88));
                      *(_DWORD *)uint64_t v83 = v88;
                    }
                  }
                }
                a2 -= 4;
                BOOL v73 = v79-- <= 2;
              }
              while (!v73);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x201)
          {
            sub_25B5799DC(v9, &v9[4 * (v12 >> 1)], (_WORD *)a2 - 2);
            sub_25B5799DC((_WORD *)v9 + 2, v14 - 2, (_WORD *)a2 - 4);
            sub_25B5799DC((_WORD *)v9 + 4, &v9[4 * v13 + 4], (_WORD *)a2 - 6);
            uint64_t result = (uint64_t)sub_25B5799DC(v14 - 2, v14, &v9[4 * v13 + 4]);
            __int16 v15 = *(_WORD *)v9;
            *(_WORD *)uint64_t v9 = *v14;
            *uint64_t v14 = v15;
            __int16 v16 = *((_WORD *)v9 + 1);
            *((_WORD *)v9 + 1) = v14[1];
            v14[1] = v16;
          }
          else
          {
            uint64_t result = (uint64_t)sub_25B5799DC(&v9[4 * (v12 >> 1)], v9, (_WORD *)a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *((unsigned __int16 *)v9 - 1) > *((unsigned __int16 *)v9 + 1)) {
            break;
          }
          int v32 = *(_DWORD *)v9;
          unsigned int v33 = HIWORD(*(_DWORD *)v9);
          if (*((unsigned __int16 *)a2 - 1) >= v33)
          {
            uint64_t v36 = v9 + 4;
            do
            {
              uint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              unsigned int v37 = *((unsigned __int16 *)v36 + 1);
              v36 += 4;
            }
            while (v37 >= v33);
          }
          else
          {
            uint64_t v34 = v9;
            do
            {
              uint64_t v10 = v34 + 4;
              unsigned int v35 = *((unsigned __int16 *)v34 + 3);
              v34 += 4;
            }
            while (v35 >= v33);
          }
          float v38 = a2;
          if (v10 < (_WORD *)a2)
          {
            uint64_t v39 = a2;
            do
            {
              float v38 = v39 - 4;
              unsigned int v40 = *((unsigned __int16 *)v39 - 1);
              v39 -= 4;
            }
            while (v40 < v33);
          }
          while (v10 < (_WORD *)v38)
          {
            __int16 v41 = *v10;
            _WORD *v10 = *(_WORD *)v38;
            *(_WORD *)float v38 = v41;
            __int16 v42 = v10[1];
            v10[1] = *((_WORD *)v38 + 1);
            *((_WORD *)v38 + 1) = v42;
            do
            {
              unsigned int v43 = (unsigned __int16)v10[3];
              v10 += 2;
            }
            while (v43 >= v33);
            do
            {
              unsigned int v44 = *((unsigned __int16 *)v38 - 1);
              v38 -= 4;
            }
            while (v44 < v33);
          }
          BOOL v4 = v10 - 2 >= (_WORD *)v9;
          BOOL v5 = v10 - 2 == (_WORD *)v9;
          if (v10 - 2 != (_WORD *)v9)
          {
            *(_WORD *)uint64_t v9 = *(v10 - 2);
            *((_WORD *)v9 + 1) = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v32;
          *(v10 - 1) = v33;
        }
        int v17 = *(_DWORD *)v9;
        unsigned int v18 = HIWORD(*(_DWORD *)v9);
        long long v19 = v9;
        do
        {
          uint64_t v20 = v19;
          v19 += 4;
        }
        while (*((unsigned __int16 *)v20 + 3) > v18);
        uint64_t v21 = a2;
        if (v20 == v9)
        {
          uint64_t v24 = a2;
          while (v19 < v24)
          {
            uint64_t v22 = v24 - 4;
            unsigned int v25 = *((unsigned __int16 *)v24 - 1);
            v24 -= 4;
            if (v25 > v18) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 4;
            unsigned int v23 = *((unsigned __int16 *)v21 - 1);
            v21 -= 4;
          }
          while (v23 <= v18);
        }
LABEL_22:
        uint64_t v10 = v19;
        if (v19 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            __int16 v27 = *v10;
            _WORD *v10 = *(_WORD *)v26;
            *(_WORD *)uint64_t v26 = v27;
            __int16 v28 = v10[1];
            v10[1] = *((_WORD *)v26 + 1);
            *((_WORD *)v26 + 1) = v28;
            do
            {
              unsigned int v29 = (unsigned __int16)v10[3];
              v10 += 2;
            }
            while (v29 > v18);
            do
            {
              unsigned int v30 = *((unsigned __int16 *)v26 - 1);
              v26 -= 4;
            }
            while (v30 <= v18);
          }
          while (v10 < (_WORD *)v26);
        }
        if (v10 - 2 != (_WORD *)v9)
        {
          *(_WORD *)uint64_t v9 = *(v10 - 2);
          *((_WORD *)v9 + 1) = *(v10 - 1);
        }
        *(v10 - 2) = v17;
        *(v10 - 1) = v18;
        if (v19 >= v22) {
          break;
        }
LABEL_33:
        uint64_t result = sub_25B57920C(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_25B579B80((__int16 *)v9, (char *)v10 - 4);
      uint64_t result = sub_25B579B80(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = (char *)(v10 - 2);
    if (!v31) {
      continue;
    }
    return result;
  }
}

_WORD *sub_25B5799DC(_WORD *result, _WORD *a2, _WORD *a3)
{
  uint64_t v3 = a2 + 1;
  unsigned int v4 = (unsigned __int16)a2[1];
  BOOL v5 = result + 1;
  unsigned int v6 = (unsigned __int16)a3[1];
  if (v4 > (unsigned __int16)result[1])
  {
    __int16 v7 = *result;
    if (v6 <= v4)
    {
      *uint64_t result = *a2;
      *a2 = v7;
      unsigned int v11 = (unsigned __int16)result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if ((unsigned __int16)a3[1] <= v11) {
        return result;
      }
      __int16 v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL v5 = a2 + 1;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v7;
    }
    uint64_t v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    __int16 v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    __int16 v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if ((unsigned __int16)a2[1] > *v5)
    {
      __int16 v10 = *result;
      *uint64_t result = *a2;
      *a2 = v10;
LABEL_10:
      unsigned __int16 v13 = *v5;
      *BOOL v5 = *v3;
      unsigned __int16 *v3 = v13;
    }
  }
  return result;
}

_WORD *sub_25B579AB8(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  uint64_t result = sub_25B5799DC(a1, a2, a3);
  if ((unsigned __int16)a4[1] > (unsigned __int16)a3[1])
  {
    __int16 v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    __int16 v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if ((unsigned __int16)a3[1] > (unsigned __int16)a2[1])
    {
      __int16 v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      __int16 v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if ((unsigned __int16)a2[1] > (unsigned __int16)a1[1])
      {
        __int16 v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        __int16 v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

BOOL sub_25B579B80(__int16 *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((unsigned __int16 *)a2 - 1) > (unsigned __int16)a1[1])
      {
        __int16 v6 = *a1;
        *a1 = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v6;
        __int16 v7 = a1[1];
        a1[1] = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_25B5799DC(a1, a1 + 2, (_WORD *)a2 - 2);
      return 1;
    case 4:
      sub_25B579AB8(a1, a1 + 2, a1 + 4, (__int16 *)a2 - 2);
      return 1;
    case 5:
      sub_25B579AB8(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*((unsigned __int16 *)a2 - 1) > (unsigned __int16)a1[7])
      {
        __int16 v16 = a1[6];
        a1[6] = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v16;
        __int16 v17 = a1[7];
        a1[7] = *((_WORD *)a2 - 1);
        *((_WORD *)a2 - 1) = v17;
        unsigned int v18 = (unsigned __int16)a1[7];
        unsigned int v19 = (unsigned __int16)a1[5];
        if (v18 > v19)
        {
          __int16 v20 = a1[4];
          __int16 v21 = a1[6];
          a1[4] = v21;
          a1[6] = v20;
          a1[5] = v18;
          a1[7] = v19;
          unsigned int v22 = (unsigned __int16)a1[3];
          if (v18 > v22)
          {
            __int16 v23 = a1[2];
            a1[2] = v21;
            a1[4] = v23;
            a1[3] = v18;
            a1[5] = v22;
            unsigned int v24 = (unsigned __int16)a1[1];
            if (v18 > v24)
            {
              __int16 v25 = *a1;
              *a1 = v21;
              a1[2] = v25;
              a1[1] = v18;
              a1[3] = v24;
            }
          }
        }
      }
      return 1;
    default:
      __int16 v8 = (char *)(a1 + 4);
      sub_25B5799DC(a1, a1 + 2, a1 + 4);
      __int16 v9 = (char *)(a1 + 6);
      if (a1 + 6 == (__int16 *)a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*((unsigned __int16 *)v9 + 1) > *((unsigned __int16 *)v8 + 1))
    {
      unsigned int v12 = *(_DWORD *)v9;
      uint64_t v13 = v10;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v13 + 12) = *(_DWORD *)((char *)a1 + v13 + 8);
        if (v13 == -8) {
          break;
        }
        unsigned int v14 = *(unsigned __int16 *)((char *)a1 + v13 + 6);
        v13 -= 4;
        if (v14 >= HIWORD(v12))
        {
          __int16 v15 = (__int16 *)((char *)a1 + v13 + 12);
          goto LABEL_13;
        }
      }
      __int16 v15 = a1;
LABEL_13:
      *(_DWORD *)__int16 v15 = v12;
      if (++v11 == 8) {
        return v9 + 4 == a2;
      }
    }
    __int16 v8 = v9;
    v10 += 4;
    v9 += 4;
    if (v9 == a2) {
      return 1;
    }
  }
}

void *sub_25B579DB8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      sub_25B3FBC4C();
    }
    BOOL result = sub_25B3FFAEC(a4);
    __int16 v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_25B579E34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B579E50(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, int a8, __n128 a9)
{
  memset(v35, 0, sizeof(v35));
  memset(__p, 0, sizeof(__p));
  if (a8 == 2)
  {
    sub_25B57A108(a2, a6, a7, (uint64_t)v35, a9);
    sub_25B57A108(a4, a6, a7, (uint64_t)__p, v16);
  }
  else if (a8 == 1)
  {
    sub_25B576D9C(a2, a6, a7, v35);
    sub_25B576D9C(a4, a6, a7, (unint64_t **)__p);
  }
  BOOL v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  __int16 v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  __int16 v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_25B57A438(a2, a3, (uint64_t)v35, &v31, (uint64_t)&v28);
  sub_25B57A438(a4, a5, (uint64_t)__p, &v25, (uint64_t)&v22);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  __int16 v17 = v31;
  sub_25B40F7EC(a1, v31, v32, (v32 - (uint64_t)v31) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  unsigned int v18 = v28;
  sub_25B3FCA58(a1 + 3, v28, v29, (v29 - (uint64_t)v28) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  unsigned int v19 = v25;
  sub_25B40F7EC(a1 + 6, v25, v26, (v26 - (uint64_t)v25) >> 4);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  __int16 v20 = v22;
  sub_25B3FCA58(a1 + 9, v22, v23, (v23 - (uint64_t)v22) >> 2);
  if (v20) {
    operator delete(v20);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v18) {
    operator delete(v18);
  }
  if (v17) {
    operator delete(v17);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  __int16 v21 = v35[0];
  if (v35[0])
  {
    operator delete(v21);
  }
}

void sub_25B57A064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v26 = *v23;
  if (*v23)
  {
    *(void *)(v21 + 56) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 32) = v27;
    operator delete(v27);
  }
  __int16 v28 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v28;
    operator delete(v28);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  uint64_t v29 = *(void **)(v24 - 88);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B57A108(void *a1, uint64_t *a2, void *a3, uint64_t a4, __n128 a5)
{
  if (a1[1] != *a1)
  {
    unint64_t v47 = 0;
    do
    {
      uint64_t v5 = *a2;
      if (a2[1] != *a2)
      {
        unint64_t v6 = 0;
        while (2)
        {
          __int16 v7 = 0;
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          uint64_t v10 = 0;
          uint64_t v11 = *a1 + 16 * v47;
          unsigned int v12 = (float32x2_t *)(v5 + 16 * v6);
          LODWORD(v48) = *(void *)(*a3 + 8 * v6);
          LODWORD(v13) = HIDWORD(*(void *)(*a3 + 8 * v6));
          char v14 = 1;
          do
          {
            char v15 = v14;
            a5.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(v11 + 8 * v10)), *v12);
            __n128 v49 = a5;
            a5.n128_f32[0] = (float)(atan2f(a5.n128_f32[0], a5.n128_f32[1]) * 180.0) / 3.1416;
            if (v48 >= a5.n128_f32[0] || a5.n128_f32[0] >= v13)
            {
              float v17 = a5.n128_f32[0] + 360.0;
              if (v48 >= v17 || v17 >= v13)
              {
                if (v7) {
                  operator delete(v7);
                }
                goto LABEL_44;
              }
            }
            a5 = v49;
            float v19 = sqrtf(vaddv_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]))) - v12[1].f32[0];
            if ((unint64_t)v8 >= v9)
            {
              uint64_t v21 = v8 - v7;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v9 - (void)v7) >> 1 > v22) {
                unint64_t v22 = (uint64_t)(v9 - (void)v7) >> 1;
              }
              if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v23) {
                unint64_t v23 = (unint64_t)sub_25B3FBC64(v23);
              }
              else {
                uint64_t v24 = 0;
              }
              __int16 v25 = (float *)(v23 + 4 * v21);
              *__int16 v25 = v19;
              __int16 v20 = v25 + 1;
              while (v8 != v7)
              {
                int v26 = *((_DWORD *)v8-- - 1);
                *((_DWORD *)v25-- - 1) = v26;
              }
              unint64_t v9 = v23 + 4 * v24;
              if (v7) {
                operator delete(v7);
              }
              __int16 v7 = v25;
            }
            else
            {
              float *v8 = v19;
              __int16 v20 = v8 + 1;
            }
            char v14 = 0;
            uint64_t v8 = v20;
            uint64_t v10 = 1;
          }
          while ((v15 & 1) != 0);
          float v27 = *v7;
          float v28 = v7[1];
          if (*v7 > 7.0 && v28 < -7.0)
          {
            operator delete(v7);
LABEL_47:
            uint64_t v32 = *(unint64_t **)(a4 + 8);
            unint64_t v31 = *(void *)(a4 + 16);
            if ((unint64_t)v32 >= v31)
            {
              uint64_t v34 = *(unint64_t **)a4;
              uint64_t v35 = ((uint64_t)v32 - *(void *)a4) >> 3;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              uint64_t v37 = v31 - (void)v34;
              if (v37 >> 2 > v36) {
                unint64_t v36 = v37 >> 2;
              }
              BOOL v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v38) {
                unint64_t v39 = v36;
              }
              if (v39)
              {
                unint64_t v39 = (unint64_t)sub_25B3FCAD4(v39);
                uint64_t v34 = *(unint64_t **)a4;
                uint64_t v32 = *(unint64_t **)(a4 + 8);
              }
              else
              {
                uint64_t v40 = 0;
              }
              __int16 v41 = (unint64_t *)(v39 + 8 * v35);
              *__int16 v41 = v47;
              uint64_t v33 = v41 + 1;
              while (v32 != v34)
              {
                unint64_t v42 = *--v32;
                *--__int16 v41 = v42;
              }
              *(void *)a4 = v41;
              *(void *)(a4 + 8) = v33;
              *(void *)(a4 + 16) = v39 + 8 * v40;
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *uint64_t v32 = v47;
              uint64_t v33 = v32 + 1;
            }
            *(void *)(a4 + 8) = v33;
            break;
          }
          operator delete(v7);
          if (v27 < -7.0 && v28 > 7.0) {
            goto LABEL_47;
          }
LABEL_44:
          ++v6;
          uint64_t v5 = *a2;
          if (v6 < (a2[1] - *a2) >> 4) {
            continue;
          }
          break;
        }
      }
      ++v47;
    }
    while (v47 < (uint64_t)(a1[1] - *a1) >> 4);
  }
}

void sub_25B57A41C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B57A438(uint64_t *a1, uint64_t *a2, uint64_t a3, void **a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (v8 != *a1)
  {
    unint64_t v12 = 0;
    do
    {
      float v13 = *(uint64_t **)a3;
      uint64_t v14 = *(void *)(a3 + 8) - *(void *)a3;
      if (v14)
      {
        unint64_t v15 = v14 >> 3;
        if (v15 <= 1) {
          unint64_t v15 = 1;
        }
        while (1)
        {
          uint64_t v16 = *v13++;
          if (v12 == v16) {
            break;
          }
          if (!--v15) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        float v17 = (_OWORD *)(v9 + 16 * v12);
        float v19 = a4[1];
        unint64_t v18 = (unint64_t)a4[2];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = ((char *)v19 - (unsigned char *)*a4) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v23 = v18 - (void)*a4;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24) {
            unint64_t v24 = (unint64_t)sub_25B3FFAEC(v24);
          }
          else {
            uint64_t v25 = 0;
          }
          int v26 = (_OWORD *)(v24 + 16 * v21);
          *int v26 = *v17;
          float v28 = (char *)*a4;
          float v27 = (char *)a4[1];
          uint64_t v29 = v26;
          if (v27 != *a4)
          {
            do
            {
              *--uint64_t v29 = *((_OWORD *)v27 - 1);
              v27 -= 16;
            }
            while (v27 != v28);
            float v27 = (char *)*a4;
          }
          __int16 v20 = v26 + 1;
          *a4 = v29;
          a4[1] = v26 + 1;
          a4[2] = (void *)(v24 + 16 * v25);
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *float v19 = *v17;
          __int16 v20 = v19 + 1;
        }
        a4[1] = v20;
        uint64_t v9 = *a1;
        uint64_t v8 = a1[1];
      }
      ++v12;
    }
    while (v12 < (v8 - v9) >> 4);
  }
  uint64_t v31 = *a2;
  uint64_t v30 = a2[1];
  if (v30 != *a2)
  {
    unint64_t v32 = 0;
    do
    {
      uint64_t v33 = *(uint64_t **)a3;
      uint64_t v34 = *(void *)(a3 + 8) - *(void *)a3;
      if (v34)
      {
        unint64_t v35 = v34 >> 3;
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        while (1)
        {
          uint64_t v36 = *v33++;
          if (v32 == v36) {
            break;
          }
          if (!--v35) {
            goto LABEL_33;
          }
        }
      }
      else
      {
LABEL_33:
        BOOL v38 = *(_DWORD **)(a5 + 8);
        unint64_t v37 = *(void *)(a5 + 16);
        if ((unint64_t)v38 >= v37)
        {
          uint64_t v40 = *(_DWORD **)a5;
          uint64_t v41 = ((uint64_t)v38 - *(void *)a5) >> 2;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v43 = v37 - (void)v40;
          if (v43 >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            unint64_t v44 = (unint64_t)sub_25B3FBC64(v44);
            uint64_t v40 = *(_DWORD **)a5;
            BOOL v38 = *(_DWORD **)(a5 + 8);
          }
          else
          {
            uint64_t v45 = 0;
          }
          __int16 v46 = (_DWORD *)(v44 + 4 * v41);
          *__int16 v46 = *(_DWORD *)(v31 + 4 * v32);
          unint64_t v39 = v46 + 1;
          while (v38 != v40)
          {
            int v47 = *--v38;
            *--__int16 v46 = v47;
          }
          *(void *)a5 = v46;
          *(void *)(a5 + 8) = v39;
          *(void *)(a5 + 16) = v44 + 4 * v45;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *BOOL v38 = *(_DWORD *)(v31 + 4 * v32);
          unint64_t v39 = v38 + 1;
        }
        *(void *)(a5 + 8) = v39;
        uint64_t v31 = *a2;
        uint64_t v30 = a2[1];
      }
      ++v32;
    }
    while (v32 < (v30 - v31) >> 2);
  }
}

void sub_25B57A6A0(_OWORD *a1, _OWORD *a2, void **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    unint64_t v6 = (char *)a3[1];
    do
    {
      unint64_t v7 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v8 = (v6 - (unsigned char *)*a3) >> 4;
        if ((unint64_t)(v8 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v9 = v7 - (void)*a3;
        uint64_t v10 = v9 >> 3;
        if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)sub_25B3FFAEC(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        float v13 = (_OWORD *)(v11 + 16 * v8);
        *float v13 = *v5;
        unint64_t v15 = (char *)*a3;
        uint64_t v14 = (char *)a3[1];
        uint64_t v16 = v13;
        if (v14 != *a3)
        {
          do
          {
            *--uint64_t v16 = *((_OWORD *)v14 - 1);
            v14 -= 16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*a3;
        }
        unint64_t v6 = (char *)(v13 + 1);
        *a3 = v16;
        a3[1] = v13 + 1;
        a3[2] = (void *)(v11 + 16 * v12);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v6 = *v5;
        v6 += 16;
      }
      a3[1] = v6;
      ++v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_25B57A7B0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_25B57A8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B57A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef *sub_25B57A990(CVPixelBufferRef *a1)
{
  return a1;
}

CVPixelBufferRef *sub_25B57A9C4(CVPixelBufferRef *a1)
{
  return a1;
}

unint64_t sub_25B57A9F8(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 64));
  float v3 = vaddv_f32(vmul_f32(*(float32x2_t *)(a1 + 96), v2));
  float v4 = vaddv_f32(vmul_f32(v2, *(float32x2_t *)(a1 + 88)));
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  float v7 = v3 / *(float *)&v5;
  float v8 = -v7;
  if (v7 >= 0.0) {
    float v8 = v7;
  }
  int v9 = (int)v8;
  float v10 = v8 - (float)(int)v8;
  if (v10 < 0.5) {
    int v11 = v9;
  }
  else {
    int v11 = v9 + 1;
  }
  int v12 = (v9 & 1) + v9;
  if (v10 != 0.5) {
    int v12 = v11;
  }
  float v13 = v4 / *((float *)&v5 + 1);
  float v14 = -v13;
  if (v13 >= 0.0) {
    float v14 = v13;
  }
  int v15 = (int)v14;
  float v16 = v14 - (float)(int)v14;
  if (v16 < 0.5) {
    int v17 = v15;
  }
  else {
    int v17 = v15 + 1;
  }
  int v18 = (v15 & 1) + v15;
  if (v16 != 0.5) {
    int v18 = v17;
  }
  if (v7 < 0.0) {
    int v12 = -v12;
  }
  if ((int)v6 >= 0) {
    int v19 = *(_OWORD *)(a1 + 32);
  }
  else {
    int v19 = v6 + 1;
  }
  uint64_t v20 = (v12 + (v19 >> 1));
  if (v13 < 0.0) {
    int v18 = -v18;
  }
  if ((SDWORD1(v6) & 0x80000000) == 0) {
    int v21 = HIDWORD(*(void *)(a1 + 32));
  }
  else {
    int v21 = DWORD1(v6) + 1;
  }
  uint64_t v22 = (v18 + (v21 >> 1));
  BOOL v23 = (int)v22 >= SDWORD1(v6) || (int)v22 <= -1;
  unint64_t v24 = v22 << 32;
  if (v23) {
    unint64_t v24 = 0xFFFFFFFF00000000;
  }
  if ((int)v20 >= (int)v6 || (int)v20 <= -1) {
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  return v24 | v20;
}

void sub_25B57AAEC(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016686640) {
    uint64_t v4 = 505;
  }
  else {
    uint64_t v4 = 500;
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  long long v6 = (void *)MEMORY[0x263F12A50];
  size_t Width = IOSurfaceGetWidth(IOSurface);
  size_t Height = IOSurfaceGetHeight(IOSurface);
  objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(v6, v9, v4, Width, Height, 0);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setUsage_(v14, v10, 3);
  uint64_t v12 = objc_msgSend_newTextureWithDescriptor_iosurface_plane_(*(void **)(a1 + 8), v11, (uint64_t)v14, IOSurface, 0);
  float v13 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v12;
}

void sub_25B57ABC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B57ABDC(uint64_t a1)
{
  sub_25B4D409C(a1);

  JUMPOUT(0x261163EE0);
}

BOOL sub_25B57AC18(uint64_t a1, uint64_t a2, float32x2_t a3)
{
  if ((int)((unint64_t)(a2 - a1) >> 3) < 1)
  {
    float v7 = 0.0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = ((unint64_t)(a2 - a1) >> 3);
    float v7 = 0.0;
    do
    {
      float32x2_t v8 = vsub_f32(*(float32x2_t *)(a1 + 8 * v5), a3);
      uint64_t v9 = v5 + 1;
      if (v6 - 1 == v5) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v5 + 1;
      }
      float32x2_t v11 = vsub_f32(*(float32x2_t *)(a1 + 8 * v10), a3);
      float v7 = v7
         + atan2f(vmlas_n_f32((float)-v8.f32[1] * v11.f32[0], v11.f32[1], v8.f32[0]), vmlas_n_f32(vmuls_lane_f32(v8.f32[1], v11, 1), v11.f32[0], v8.f32[0]));
      uint64_t v5 = v9;
    }
    while (v6 != v9);
  }
  return fabsf(v7) > 0.1;
}

void sub_25B57ACD8(void *a1, float32x2_t *a2, uint64_t a3)
{
  int v51 = 1077936128;
  if ((unint64_t)(a3 - (void)a2) > 0x17)
  {
    uint64_t v5 = &a2[(a3 - (uint64_t)a2) >> 4];
    float32x2_t v6 = v5[-1];
    v50[0] = *a2;
    v50[1] = v6;
    float32x2_t v7 = *(float32x2_t *)(a3 - 8);
    v49[0] = *v5;
    v49[1] = v7;
    __int16 v46 = 0;
    int v47 = 0;
    uint64_t v48 = 0;
    __p = 0;
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    sub_25B57B078(&v46, v50, a2, (unint64_t)&v5[-1], (float *)&v51);
    sub_25B57B078(&__p, v49, v5, a3 - 8, (float *)&v51);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    float32x2_t v8 = v46;
    uint64_t v9 = v47;
    if (v46 == v47)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v10 = 0;
      do
      {
        unint64_t v11 = a1[2];
        if ((unint64_t)v10 >= v11)
        {
          float v13 = (void *)*a1;
          uint64_t v14 = ((uint64_t)v10 - *a1) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v16 = v11 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_25B3FCAD4(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          int v19 = (void *)(v17 + 8 * v14);
          *int v19 = *v8;
          uint64_t v12 = v19 + 1;
          if (v10 != v13)
          {
            do
            {
              uint64_t v20 = *--v10;
              *--int v19 = v20;
            }
            while (v10 != v13);
            uint64_t v10 = (void *)*a1;
          }
          *a1 = v19;
          a1[1] = v12;
          a1[2] = v17 + 8 * v18;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          void *v10 = *v8;
          uint64_t v12 = v10 + 1;
        }
        a1[1] = v12;
        v8 += 2;
        uint64_t v10 = v12;
      }
      while (v8 != v9);
    }
    int v21 = __p;
    uint64_t v22 = v44;
    if (__p != v44)
    {
      do
      {
        unint64_t v23 = a1[2];
        if ((unint64_t)v12 >= v23)
        {
          unint64_t v24 = (void *)*a1;
          uint64_t v25 = ((uint64_t)v12 - *a1) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v27 = v23 - (void)v24;
          if (v27 >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_25B3FCAD4(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = (void *)(v28 + 8 * v25);
          *uint64_t v30 = *v21;
          uint64_t v31 = v30 + 1;
          if (v12 != v24)
          {
            do
            {
              uint64_t v32 = *--v12;
              *--uint64_t v30 = v32;
            }
            while (v12 != v24);
            uint64_t v12 = (void *)*a1;
          }
          *a1 = v30;
          a1[1] = v31;
          a1[2] = v28 + 8 * v29;
          if (v12) {
            operator delete(v12);
          }
          uint64_t v12 = v31;
        }
        else
        {
          *v12++ = *v21;
        }
        a1[1] = v12;
        v21 += 2;
      }
      while (v21 != v22);
      int v21 = v44;
    }
    unint64_t v33 = a1[2];
    if ((unint64_t)v12 >= v33)
    {
      unint64_t v35 = (void *)*a1;
      uint64_t v36 = ((uint64_t)v12 - *a1) >> 3;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v38 = v33 - (void)v35;
      if (v38 >> 2 > v37) {
        unint64_t v37 = v38 >> 2;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39) {
        unint64_t v39 = (unint64_t)sub_25B3FCAD4(v39);
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = (void *)(v39 + 8 * v36);
      *uint64_t v41 = *(v21 - 1);
      uint64_t v34 = v41 + 1;
      if (v12 != v35)
      {
        do
        {
          uint64_t v42 = *--v12;
          *--uint64_t v41 = v42;
        }
        while (v12 != v35);
        uint64_t v12 = (void *)*a1;
      }
      *a1 = v41;
      a1[1] = v34;
      a1[2] = v39 + 8 * v40;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v12 = *(v21 - 1);
      uint64_t v34 = v12 + 1;
    }
    a1[1] = v34;
    if (__p)
    {
      unint64_t v44 = __p;
      operator delete(__p);
    }
    if (v46)
    {
      int v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_25B57B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (v15)
  {
    *(void *)(v14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B57B078(void **a1, float32x2_t *a2, float32x2_t *a3, unint64_t a4, float *a5)
{
  if ((unint64_t)(((uint64_t)(a4 - (void)a3) >> 3) + 1) >= 2)
  {
    float v7 = 0.0;
    float32x2_t v8 = a3;
    if ((unint64_t)a3 < a4)
    {
      float32x2_t v9 = vsub_f32(a2[1], *a2);
      float v10 = vaddv_f32(vmul_f32(v9, v9));
      float v11 = 0.000001;
      if (v10 >= 0.000001) {
        float v11 = v10;
      }
      float v7 = 0.0;
      uint64_t v12 = a3;
      float32x2_t v8 = a3;
      float v13 = a3;
      do
      {
        float32x2_t v14 = *v13++;
        float32x2_t v15 = vsub_f32(vmla_n_f32(*a2, v9, vaddv_f32(vmul_f32(vsub_f32(v14, *a2), v9)) / v11), v14);
        float v16 = sqrtf(vaddv_f32(vmul_f32(v15, v15)));
        if (v16 > v7)
        {
          float v7 = v16;
          float32x2_t v8 = v12;
        }
        uint64_t v12 = v13;
      }
      while ((unint64_t)v13 < a4);
    }
    if (*a5 <= v7)
    {
      float32x2_t v20 = *v8;
      float32x2_t v21 = a2[1];
      v32[0] = *a2;
      v32[1] = v20;
      v31[0] = v20;
      v31[1] = v21;
      sub_25B57B078(a1, v32);
      sub_25B57B078(a1, v31);
    }
    else
    {
      uint64_t v18 = a1[1];
      unint64_t v17 = (unint64_t)a1[2];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v22 = ((char *)v18 - (unsigned char *)*a1) >> 4;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v24 = v17 - (void)*a1;
        if (v24 >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)sub_25B3FFAEC(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (_OWORD *)(v25 + 16 * v22);
        unint64_t v28 = v25 + 16 * v26;
        _OWORD *v27 = *(_OWORD *)a2->f32;
        int v19 = v27 + 1;
        uint64_t v30 = (char *)*a1;
        uint64_t v29 = (char *)a1[1];
        if (v29 != *a1)
        {
          do
          {
            *--uint64_t v27 = *((_OWORD *)v29 - 1);
            v29 -= 16;
          }
          while (v29 != v30);
          uint64_t v29 = (char *)*a1;
        }
        *a1 = v27;
        a1[1] = v19;
        a1[2] = (void *)v28;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v18 = *(_OWORD *)a2->f32;
        int v19 = v18 + 1;
      }
      a1[1] = v19;
    }
  }
}

void sub_25B57B25C(uint64_t a1, float32x2_t **a2, unint64_t a3)
{
  if (*a2 == a2[1])
  {
    *(void *)a1 = &unk_2708F1D50;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(_WORD *)(a1 + 136) = 257;
  }
  else
  {
    char v25 = 0;
    memset(&v24[1], 0, 32);
    v24[0] = vdupq_n_s64(a3);
    uint64_t v5 = sub_25B496338(a1, v24);
    sub_25B496430(v5, &v25);
    LOBYTE(v24[0]) = 1;
    float v11 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 == v12)
    {
      float v13 = 0;
      unint64_t v17 = 0;
    }
    else
    {
      float v13 = 0;
      float32x2_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        float32x2_t v6 = *v11;
        int32x2_t v16 = vcvt_s32_f32(*v11);
        if ((unint64_t)v14 >= v15)
        {
          uint64_t v18 = v14 - v13;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v15 - (void)v13) >> 2 > v19) {
            unint64_t v19 = (uint64_t)(v15 - (void)v13) >> 2;
          }
          if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            unint64_t v20 = (unint64_t)sub_25B3FCAD4(v20);
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (int32x2_t *)(v20 + 8 * v18);
          *uint64_t v22 = v16;
          unint64_t v17 = v22 + 1;
          while (v14 != v13)
          {
            float32x2_t v23 = (float32x2_t)v14[-1];
            --v14;
            float32x2_t v6 = v23;
            v22[-1] = (int32x2_t)v23;
            --v22;
          }
          unint64_t v15 = v20 + 8 * v21;
          if (v13) {
            operator delete(v13);
          }
          float v13 = v22;
        }
        else
        {
          *float32x2_t v14 = v16;
          unint64_t v17 = v14 + 1;
        }
        ++v11;
        float32x2_t v14 = v17;
      }
      while (v11 != v12);
    }
    sub_25B40B8E4((void *)a1, v13, v17, v24, *(double *)&v6, v7, v8, v9, v10);
    if (v13) {
      operator delete(v13);
    }
  }
}

void sub_25B57B424(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  *uint64_t v1 = &unk_2708F1D50;
  uint64_t v4 = (std::__shared_weak_count *)v1[16];
  if (v4) {
    sub_25B404120(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B57B474(float32x2_t **a1)
{
  uint64_t v1 = *a1;
  float32x2_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  float32x2_t v3 = (float32x2_t)0x80000000800000;
  do
  {
    float32x2_t v4 = *v1++;
    float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v3), (int8x8_t)v4, (int8x8_t)v3);
  }
  while (v1 != v2);
  float32x2_t v5 = vrndp_f32(vadd_f32(v3, (float32x2_t)0x3F0000003F000000));
  if (v5.f32[0] < v5.f32[1]) {
    v5.f32[0] = v5.f32[1];
  }
  sub_25B57B25C((uint64_t)v14, a1, (unint64_t)v5.f32[0]);
  sub_25B4641DC((uint64_t)&v9, (uint64_t)v14);
  v8[0] = v10;
  v8[1] = v11;
  v8[2] = v12;
  uint64_t v6 = sub_25B578EA8((uint64_t)v8);
  int32x2_t v9 = &unk_2708F1D50;
  if (v13) {
    sub_25B404120(v13);
  }
  v14[0] = &unk_2708F1D50;
  if (v15) {
    sub_25B404120(v15);
  }
  return v6;
}

void sub_25B57B58C(unint64_t *a1, float32x2_t **a2, float32x2_t **a3, unint64_t a4)
{
  sub_25B57B25C((uint64_t)&v18, a2, a4);
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  sub_25B4641DC((uint64_t)&v49, (uint64_t)&v18);
  long long v46 = v50;
  long long v47 = v51;
  long long v48 = v52;
  *(void *)&long long v18 = &unk_2708F1D50;
  if ((void)v26) {
    sub_25B404120((std::__shared_weak_count *)v26);
  }
  sub_25B57B25C((uint64_t)&v18, a3, a4);
  long long v40 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  sub_25B4641DC((uint64_t)&v41, (uint64_t)&v18);
  long long v38 = v42;
  long long v39 = v43;
  long long v40 = v44;
  *(void *)&long long v18 = &unk_2708F1D50;
  if ((void)v26) {
    sub_25B404120((std::__shared_weak_count *)v26);
  }
  sub_25B578A4C(v10, &v46, &v38);
  long long v20 = 0u;
  long long v21 = v10[0];
  long long v22 = v10[1];
  long long v23 = v10[2];
  long long v24 = v10[3];
  long long v25 = v10[4];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v26 = v10[5];
  sub_25B4641DC((uint64_t)&v27, (uint64_t)&v11);
  long long v29 = v13;
  long long v30 = v14;
  long long v31 = v15;
  sub_25B4641DC((uint64_t)&v32, (uint64_t)&v16);
  long long v35 = 0u;
  long long v36 = 0u;
  int v37 = 2;
  long long v18 = v21;
  long long v19 = v22;
  long long v34 = 0u;
  long long v20 = v23;
  unint64_t v7 = sub_25B578D14((uint64_t)&v18);
  uint64_t v32 = &unk_2708F1D50;
  if (v33) {
    sub_25B404120(v33);
  }
  uint64_t v27 = &unk_2708F1D50;
  if (v28) {
    sub_25B404120(v28);
  }
  int32x2_t v16 = &unk_2708F1D50;
  if (v17) {
    sub_25B404120(v17);
  }
  long long v11 = &unk_2708F1D50;
  if (v12) {
    sub_25B404120(v12);
  }
  uint64_t v8 = sub_25B578EA8((uint64_t)&v46);
  uint64_t v9 = sub_25B578EA8((uint64_t)&v38);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  uint64_t v41 = &unk_2708F1D50;
  if (v45) {
    sub_25B404120(v45);
  }
  __n128 v49 = &unk_2708F1D50;
  if (v53) {
    sub_25B404120(v53);
  }
}

void sub_25B57B884(_Unwind_Exception *a1)
{
  STACK[0x420] = (unint64_t)&unk_2708F1D50;
  if (STACK[0x4A0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4A0]);
  }
  STACK[0x4F0] = (unint64_t)&unk_2708F1D50;
  if (STACK[0x570]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x570]);
  }
  _Unwind_Resume(a1);
}

void sub_25B57B8E8(unint64_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t **a4, double a5)
{
  unint64_t v7 = a2;
  float32x2_t v9 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v10 = (float32x2_t)0x80000000800000;
  if (a2 != a3)
  {
    long long v11 = a2;
    do
    {
      float32x2_t v12 = *v11++;
      float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v12), (int8x8_t)v12, (int8x8_t)v9);
      float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v10), (int8x8_t)v12, (int8x8_t)v10);
    }
    while (v11 != a3);
  }
  long long v13 = *a4;
  long long v14 = a4[1];
  if (*a4 != v14)
  {
    long long v15 = *a4;
    do
    {
      float32x2_t v16 = *v15++;
      float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v16), (int8x8_t)v16, (int8x8_t)v9);
      float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, v10), (int8x8_t)v16, (int8x8_t)v10);
    }
    while (v15 != v14);
  }
  float32x2_t v17 = vsub_f32(v10, v9);
  unint64_t v18 = vcvtpd_u64_f64((float)(v17.f32[0] / *(float *)&a5) + 0.5);
  unint64_t v19 = vcvtpd_u64_f64((float)(v17.f32[1] / *(float *)&a5) + 0.5);
  if (v18 <= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = v18;
  }
  long long v50 = 0;
  long long v51 = 0;
  unint64_t v52 = 0;
  if (a2 != a3)
  {
    long long v21 = 0;
    double v46 = a5;
    float32x2_t v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      int32x2_t v23 = vrev64_s32((int32x2_t)vrndm_f32(vdiv_f32(vsub_f32(*v7, v9), v22)));
      if ((unint64_t)v21 >= v52)
      {
        long long v25 = (char *)v50;
        uint64_t v26 = (v21 - (unsigned char *)v50) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v28 = v52 - (void)v50;
        if ((uint64_t)(v52 - (void)v50) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29) {
          unint64_t v29 = (unint64_t)sub_25B3FCAD4(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        long long v31 = (int32x2_t *)(v29 + 8 * v26);
        *long long v31 = v23;
        long long v24 = v31 + 1;
        if (v21 != v25)
        {
          do
          {
            int32x2_t v32 = *(int32x2_t *)(v21 - 8);
            v21 -= 8;
            v31[-1] = v32;
            --v31;
          }
          while (v21 != v25);
          long long v21 = (char *)v50;
        }
        long long v50 = v31;
        unint64_t v52 = v29 + 8 * v30;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(int32x2_t *)long long v21 = v23;
        long long v24 = (int32x2_t *)(v21 + 8);
      }
      long long v51 = v24;
      ++v7;
      long long v21 = (char *)v24;
    }
    while (v7 != a3);
    long long v13 = *a4;
    long long v14 = a4[1];
    a5 = v46;
  }
  __p = 0;
  long long v48 = 0;
  unint64_t v49 = 0;
  if (v13 != v14)
  {
    unint64_t v33 = 0;
    float32x2_t v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      int32x2_t v35 = vrev64_s32((int32x2_t)vrndm_f32(vdiv_f32(vsub_f32(*v13, v9), v34)));
      if ((unint64_t)v33 >= v49)
      {
        int v37 = (char *)__p;
        uint64_t v38 = (v33 - (unsigned char *)__p) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v40 = v49 - (void)__p;
        if ((uint64_t)(v49 - (void)__p) >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41) {
          unint64_t v41 = (unint64_t)sub_25B3FCAD4(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        long long v43 = (int32x2_t *)(v41 + 8 * v38);
        *long long v43 = v35;
        long long v36 = v43 + 1;
        if (v33 != v37)
        {
          do
          {
            int32x2_t v44 = *(int32x2_t *)(v33 - 8);
            v33 -= 8;
            v43[-1] = v44;
            --v43;
          }
          while (v33 != v37);
          unint64_t v33 = (char *)__p;
        }
        __p = v43;
        unint64_t v49 = v41 + 8 * v42;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(int32x2_t *)unint64_t v33 = v35;
        long long v36 = (int32x2_t *)(v33 + 8);
      }
      long long v48 = v36;
      ++v13;
      unint64_t v33 = (char *)v36;
    }
    while (v13 != v14);
  }
  sub_25B57B58C(a1, (float32x2_t **)&v50, (float32x2_t **)&__p, v20);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v45 = v50;
  if (v50)
  {
    operator delete(v45);
  }
}

void sub_25B57BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B57BC60(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v3 = a1;
  float32x2_t v4 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v5 = (float32x2_t)0x80000000800000;
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      float32x2_t v7 = *v6++;
      float32x2_t v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v4, v7), (int8x8_t)v7, (int8x8_t)v4);
      float32x2_t v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v5), (int8x8_t)v7, (int8x8_t)v5);
    }
    while (v6 != a2);
  }
  float32x2_t v8 = vsub_f32(v5, v4);
  int v57 = (int)(float)(v8.f32[1] / 0.03) + 10;
  int v58 = (int)(float)(v8.f32[0] / 0.03) + 10;
  if (a1 == a2)
  {
    float32x2_t v9 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    float32x2_t v9 = 0;
    float32x2_t v10 = 0;
    unint64_t v11 = 0;
    float32x2_t v12 = (float32x2_t)vdup_n_s32(0x3CF5C28Fu);
    __asm { FMOV            V10.2S, #5.0 }
    do
    {
      float32x2_t v18 = vadd_f32(vdiv_f32(vsub_f32(*v3, v4), v12), _D10);
      float v19 = -v18.f32[0];
      if (v18.f32[0] >= 0.0) {
        float v19 = v18.f32[0];
      }
      int v20 = (int)v19;
      float v21 = v19 - (float)(int)v19;
      if (v21 < 0.5) {
        int v22 = v20;
      }
      else {
        int v22 = v20 + 1;
      }
      int v23 = (v20 & 1) + v20;
      if (v21 != 0.5) {
        int v23 = v22;
      }
      if (v18.f32[0] < 0.0) {
        int v23 = -v23;
      }
      v24.i32[0] = v23;
      float v25 = -v18.f32[1];
      if (v18.f32[1] >= 0.0) {
        float v25 = v18.f32[1];
      }
      int v26 = (int)v25;
      float v27 = v25 - (float)(int)v25;
      if (v27 < 0.5) {
        int v28 = v26;
      }
      else {
        int v28 = v26 + 1;
      }
      int v29 = (v26 & 1) + v26;
      if (v27 != 0.5) {
        int v29 = v28;
      }
      if (v18.f32[1] < 0.0) {
        int v29 = -v29;
      }
      v24.i32[1] = v29;
      if ((unint64_t)v10 >= v11)
      {
        int32x2_t v42 = v24;
        uint64_t v31 = v10 - v9;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v11 - (void)v9) >> 2 > v32) {
          unint64_t v32 = (uint64_t)(v11 - (void)v9) >> 2;
        }
        if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        int32x2_t v35 = (int32x2_t *)(v33 + 8 * v31);
        *int32x2_t v35 = v42;
        uint64_t v30 = v35 + 1;
        while (v10 != v9)
        {
          int32x2_t v36 = v10[-1];
          --v10;
          v35[-1] = v36;
          --v35;
        }
        unint64_t v11 = v33 + 8 * v34;
        if (v9) {
          operator delete(v9);
        }
        float32x2_t v9 = v35;
      }
      else
      {
        int32x2_t *v10 = v24;
        uint64_t v30 = v10 + 1;
      }
      ++v3;
      float32x2_t v10 = v30;
    }
    while (v3 != a2);
  }
  sub_25B50CC50(&v43, &v58, &v57);
  sub_25B496124((uint64_t)v56, 0, &v43);
  char v55 = 1;
  sub_25B40B8E4(v56, v9, v30, &v55, v37, v38, v39, v40, v41);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  sub_25B4641DC((uint64_t)&v46, (uint64_t)v56);
  int v53 = 0;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v43 = v47;
  long long v44 = v48;
  long long v45 = v49;
  sub_25B57C228((uint64_t)v54, &v43);
}

void sub_25B57C0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    sub_25B404120(a29);
  }
  STACK[0x290] = (unint64_t)&unk_2708F21F8;
  if (STACK[0x310]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x310]);
  }
  STACK[0x330] = (unint64_t)&unk_2708F1D50;
  if (STACK[0x3B0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x3B0]);
  }
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_25B57C228(uint64_t a1, void *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  sub_25B458194((uint64_t)&v2, *a2 * a2[1]);
}

void sub_25B57D0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  if (a26) {
    sub_25B404120(a26);
  }
  _Unwind_Resume(a1);
}

void sub_25B57D19C(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2708F21F8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v3 = a2[1];
  long long v2 = a2[2];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = 1;
  uint64_t v5 = *(void *)(a1 + 8) * v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  sub_25B458EBC((uint64_t)v6, v5);
}

void sub_25B57DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  std::locale::~locale(&a21);
  sub_25B3F9500((uint64_t)&a27);
  int v29 = *(std::__shared_weak_count **)(v27 + 128);
  if (v29) {
    sub_25B404120(v29);
  }
  _Unwind_Resume(a1);
}

void sub_25B57DE94(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  sub_25B57E5E4((uint64_t)v32, a2, a3);
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_25B57F504(*a3, (uint64_t)&v29);
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 8;
  float32x2_t v8 = v29;
  unint64_t v9 = v30 - v29;
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v30 - v29;
  }
  uint64_t v11 = v10 - 1;
  char v12 = 1;
  unint64_t v13 = 1;
  do
  {
    char v14 = v12;
    if (v30 != v29)
    {
      if (*v29 == v6)
      {
LABEL_7:
        v13 *= *(void *)(v7 + 8 * v6);
      }
      else
      {
        unint64_t v15 = 0;
        while (v11 != v15)
        {
          uint64_t v16 = v29[++v15];
          if (v16 == v6)
          {
            if (v15 < v9) {
              goto LABEL_7;
            }
            break;
          }
        }
      }
    }
    char v12 = 0;
    uint64_t v6 = 1;
  }
  while ((v14 & 1) != 0);
  if (v36)
  {
    float32x2_t v17 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    float32x2_t v18 = sub_25B406B20(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v18, (uint64_t)" ", 1);
    float v19 = (void *)MEMORY[0x263F8C0F8];
    int v20 = (void *)std::ostream::operator<<();
    sub_25B406B20(v20, (uint64_t)" ", 1);
    sub_25B406B20(v20, (uint64_t)"operator/=", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    float v21 = std::locale::use_facet(&v38, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v38);
    std::ostream::put();
    std::ostream::flush();
    sub_25B4074D0("err", "scalar assign should create a storage first");
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    int v22 = std::locale::use_facet(&v38, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v38);
    std::ostream::put();
    std::ostream::flush();
  }
  float v23 = (float)v13;
  uint64_t v24 = v33;
  float v25 = v37;
  if (v35)
  {
    if (v33)
    {
      do
      {
        *float v25 = *v25 / v23;
        ++v25;
        --v24;
      }
      while (v24);
    }
  }
  else if (v33)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v32[7];
    uint64_t v28 = v32[1];
    do
    {
      v25[v27 * v26] = v25[v27 * v26] / v23;
      if (v26 + 1 == v28) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
      --v24;
    }
    while (v24);
  }
  sub_25B45E3AC(a1, (uint64_t)v32);
  if (v8) {
    operator delete(v8);
  }
  v32[0] = &unk_2708F27E8;
  if (v34) {
    sub_25B404120(v34);
  }
}

void sub_25B57E1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    sub_25B404120(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B57E210(uint64_t a1, int *a2)
{
  v22[1] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 137))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v5 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    uint64_t v6 = sub_25B406B20(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v6, (uint64_t)" ", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    float32x2_t v8 = sub_25B406B20(v7, (uint64_t)" ", 1);
    unint64_t v9 = sub_25B406B20(v8, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B407E3C("err", "empty tensor");
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t v12 = *a2;
  v22[0] = v12;
  uint64_t v20 = 0;
  if (*(void *)(a1 + 8) <= v12)
  {
    unint64_t v13 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    char v14 = sub_25B406B20(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/tensor/tensor.hpp", 99);
    sub_25B406B20(v14, (uint64_t)" ", 1);
    unint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_25B406B20(v16, (uint64_t)" ", 1);
    sub_25B406B20(v16, (uint64_t)"at", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    float32x2_t v17 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
    sub_25B40B60C("err", "shape", (uint64_t)&v20, "=", (uint64_t)v22, "should smaller then");
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    float32x2_t v18 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v21);
    std::ostream::put();
    std::ostream::flush();
  }
  return *(void *)(a1 + 144) + 4 * *(void *)(a1 + 56) * v12;
}

void sub_25B57E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_25B57E5E4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v238[7] = *MEMORY[0x263EF8340];
  uint64_t v234 = 0;
  uint64_t v235 = 0;
  uint64_t v236 = 0;
  sub_25B57F504(*a3, (uint64_t)&v234);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v213 = a2;
  float32x2_t v8 = (void *)(a2 + 8);
  id v231 = 0;
  unint64_t v232 = 0;
  unint64_t v233 = 0;
  unint64_t v9 = v234;
  uint64_t v10 = v235;
  unint64_t v11 = v235 - v234;
  unint64_t v216 = v11 - 1;
  unint64_t v219 = v11;
  __p = v8;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  unint64_t v12 = v11 - 1;
  char v13 = 1;
  do
  {
    char v14 = v13;
    if (v10 != v9)
    {
      if (*v9 == v7)
      {
LABEL_6:
        if ((unint64_t)v4 < v6)
        {
          uint64_t v15 = 1;
LABEL_14:
          *v4++ = v15;
          goto LABEL_45;
        }
        uint64_t v22 = ((char *)v4 - v5) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
        {
          unint64_t v232 = v4;
          unint64_t v233 = v6;
          id v231 = v5;
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v6 - (void)v5) >> 2 > v23) {
          unint64_t v23 = (uint64_t)(v6 - (void)v5) >> 2;
        }
        if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)sub_25B3FCAD4(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        int v29 = (char *)(v24 + 8 * v22);
        *(void *)int v29 = 1;
        uint64_t v30 = (uint64_t *)(v29 + 8);
        while (v4 != (uint64_t *)v5)
        {
          uint64_t v31 = *--v4;
          *((void *)v29 - 1) = v31;
          v29 -= 8;
        }
        unint64_t v6 = v24 + 8 * v25;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v29;
        uint64_t v4 = v30;
        goto LABEL_45;
      }
      unint64_t v16 = 0;
      while (v12 != v16)
      {
        uint64_t v17 = v9[++v16];
        if (v17 == v7)
        {
          if (v16 < v219) {
            goto LABEL_6;
          }
          break;
        }
      }
    }
    if ((unint64_t)v4 < v6)
    {
      uint64_t v15 = __p[v7];
      goto LABEL_14;
    }
    uint64_t v18 = ((char *)v4 - v5) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
    {
      unint64_t v232 = v4;
      unint64_t v233 = v6;
      id v231 = v5;
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v6 - (void)v5) >> 2 > v19) {
      unint64_t v19 = (uint64_t)(v6 - (void)v5) >> 2;
    }
    if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)sub_25B3FCAD4(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v26 = (char *)(v20 + 8 * v18);
    *(void *)uint64_t v26 = __p[v7];
    uint64_t v27 = (uint64_t *)(v26 + 8);
    while (v4 != (uint64_t *)v5)
    {
      uint64_t v28 = *--v4;
      *((void *)v26 - 1) = v28;
      v26 -= 8;
    }
    unint64_t v6 = v20 + 8 * v21;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v5 = v26;
    uint64_t v4 = v27;
LABEL_45:
    char v13 = 0;
    uint64_t v7 = 1;
  }
  while ((v14 & 1) != 0);
  unint64_t v232 = v4;
  unint64_t v233 = v6;
  id v231 = v5;
  sub_25B40826C(__b, &v231);
  long long v228 = 0u;
  long long v229 = 0u;
  v227[0] = *((void *)&__b[0] + 1);
  v227[1] = 1;
  sub_25B4583CC((uint64_t)v224, __b);
  unint64_t v32 = __p;
  uint64_t v33 = v9[v216];
  uint64_t v34 = v33;
  unint64_t v35 = v219;
  uint64_t v218 = v33;
  if (v33 == 1)
  {
    if (!v216 || (uint64_t v36 = v9[v219 - 2]) != 0)
    {
      uint64_t v34 = 1;
      goto LABEL_53;
    }
    do
    {
      uint64_t v34 = v36;
      if (v35 == 2) {
        break;
      }
      uint64_t v36 = v9[v35-- - 3];
    }
    while (v34 - v36 == 1);
  }
  if (!v34)
  {
    double v37 = 0;
    std::locale v38 = 0;
    unint64_t v39 = 0;
    int32x2_t v40 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 1;
    uint64_t v44 = 1;
    char v74 = 1;
    goto LABEL_117;
  }
LABEL_53:
  uint64_t v220 = v34;
  double v37 = 0;
  std::locale v38 = 0;
  unint64_t v39 = 0;
  int32x2_t v40 = 0;
  __n128 v41 = 0;
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 1;
  while (2)
  {
    uint64_t v45 = v32[v43];
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v46 = (v38 - v37) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        goto LABEL_304;
      }
      unint64_t v48 = v42;
      if ((uint64_t)(v39 - (void)v37) >> 2 > v47) {
        unint64_t v47 = (uint64_t)(v39 - (void)v37) >> 2;
      }
      if (v39 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        unint64_t v49 = (unint64_t)sub_25B3FCAD4(v49);
        uint64_t v51 = __p[v43];
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v51 = v32[v43];
      }
      long long v52 = (char *)(v49 + 8 * v46);
      *(void *)long long v52 = v51;
      int v53 = v52 + 8;
      while (v38 != v37)
      {
        uint64_t v54 = *((void *)v38 - 1);
        v38 -= 8;
        *((void *)v52 - 1) = v54;
        v52 -= 8;
      }
      unint64_t v39 = v49 + 8 * v50;
      if (v37)
      {
        unint64_t v55 = v49 + 8 * v50;
        operator delete(v37);
        unint64_t v39 = v55;
      }
      double v37 = v52;
      std::locale v38 = v53;
      unint64_t v42 = v48;
    }
    else
    {
      *(void *)std::locale v38 = v45;
      v38 += 8;
    }
    if (v235 != v234)
    {
      unint64_t v56 = v235 - v234;
      uint64_t v57 = v56 <= 1 ? 1 : v235 - v234;
      if (*v234 == v43) {
        goto LABEL_76;
      }
      unint64_t v59 = 0;
      uint64_t v60 = v57 - 1;
      do
      {
        if (v60 == v59) {
          goto LABEL_82;
        }
        uint64_t v61 = v234[++v59];
      }
      while (v61 != v43);
      if (v59 < v56)
      {
LABEL_76:
        if ((unint64_t)v41 < v42)
        {
          *(void *)__n128 v41 = 0;
          int v58 = v41 + 8;
          goto LABEL_84;
        }
        uint64_t v68 = (v41 - v40) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        unint64_t v65 = v39;
        if ((uint64_t)(v42 - (void)v40) >> 2 > v69) {
          unint64_t v69 = (uint64_t)(v42 - (void)v40) >> 2;
        }
        if (v42 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v69;
        }
        if (v66) {
          unint64_t v66 = (unint64_t)sub_25B3FCAD4(v66);
        }
        else {
          uint64_t v67 = 0;
        }
        int64_t v70 = (char *)(v66 + 8 * v68);
        *(void *)int64_t v70 = 0;
        unsigned int v62 = v70 + 8;
        while (v41 != v40)
        {
          uint64_t v72 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v70 - 1) = v72;
          v70 -= 8;
        }
        goto LABEL_109;
      }
    }
LABEL_82:
    if ((unint64_t)v41 >= v42)
    {
      uint64_t v63 = (v41 - v40) >> 3;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
LABEL_304:
      }
        sub_25B3FBC4C();
      unint64_t v65 = v39;
      if ((uint64_t)(v42 - (void)v40) >> 2 > v64) {
        unint64_t v64 = (uint64_t)(v42 - (void)v40) >> 2;
      }
      if (v42 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v64;
      }
      if (v66) {
        unint64_t v66 = (unint64_t)sub_25B3FCAD4(v66);
      }
      else {
        uint64_t v67 = 0;
      }
      int64_t v70 = (char *)(v66 + 8 * v63);
      *(void *)int64_t v70 = v227[v43];
      unsigned int v62 = v70 + 8;
      while (v41 != v40)
      {
        uint64_t v71 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v70 - 1) = v71;
        v70 -= 8;
      }
LABEL_109:
      unint64_t v42 = v66 + 8 * v67;
      if (v40)
      {
        unint64_t v73 = v66 + 8 * v67;
        operator delete(v40);
        unint64_t v42 = v73;
      }
      int32x2_t v40 = v70;
      unint64_t v39 = v65;
      goto LABEL_112;
    }
    *(void *)__n128 v41 = v227[v43];
    int v58 = v41 + 8;
LABEL_84:
    unsigned int v62 = v58;
LABEL_112:
    v44 *= v45;
    ++v43;
    __n128 v41 = v62;
    unint64_t v32 = __p;
    if (v43 != v220) {
      continue;
    }
    break;
  }
  char v74 = 0;
  uint64_t v33 = v218;
  uint64_t v75 = v220;
  if ((unint64_t)(v220 + 1) > 1)
  {
    uint64_t v77 = 1;
  }
  else
  {
    uint64_t v76 = 0;
LABEL_117:
    uint64_t v78 = v76;
    uint64_t v77 = 1;
    do
      v77 *= v32[v78++];
    while (v78 != 2);
  }
  if (v33 == 1) {
    uint64_t v79 = v32[v75];
  }
  else {
    uint64_t v79 = 1;
  }
  uint64_t v80 = v226;
  if (v33 == 1) {
    unint64_t v81 = v44;
  }
  else {
    unint64_t v81 = v32[v75];
  }
  if (v33 == 1) {
    uint64_t v82 = 1;
  }
  else {
    uint64_t v82 = v44;
  }
  uint64_t v217 = v82;
  memset(v238, 0, 48);
  memset(v237, 0, sizeof(v237));
  if ((v74 & 1) == 0)
  {
    uint64_t v212 = v79;
    v210 = v226;
    char v211 = v74;
    uint64_t v85 = 0;
    unint64_t v86 = 0;
    unint64_t v87 = 0;
    uint64_t v88 = 0;
    int v221 = v75 - 1;
    unint64_t __pa = 0;
    while (1)
    {
      if (v235 == v234) {
        goto LABEL_141;
      }
      unint64_t v89 = v235 - v234;
      uint64_t v90 = v89 <= 1 ? 1 : v235 - v234;
      if (*v234 != v88) {
        break;
      }
LABEL_158:
      if (++v88 == v75)
      {
        uint64_t v84 = (int *)a3;
        uint64_t v83 = a1;
        char v74 = v211;
        uint64_t v80 = v210;
        uint64_t v33 = v218;
        goto LABEL_174;
      }
    }
    unint64_t v91 = 0;
    uint64_t v92 = v90 - 1;
    while (v92 != v91)
    {
      uint64_t v93 = v234[++v91];
      if (v93 == v88)
      {
        if (v91 < v89) {
          goto LABEL_158;
        }
        break;
      }
    }
LABEL_141:
    if ((unint64_t)v87 >= v86)
    {
      uint64_t v94 = v75;
      uint64_t v95 = (v87 - __pa) >> 3;
      unint64_t v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v86 - (void)__pa) >> 2 > v96) {
        unint64_t v96 = (uint64_t)(v86 - (void)__pa) >> 2;
      }
      if (v86 - (unint64_t)__pa >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v97 = v96;
      }
      if (v97)
      {
        unint64_t v97 = (unint64_t)sub_25B3FCAD4(v97);
        unint64_t v87 = v85;
      }
      else
      {
        uint64_t v98 = 0;
      }
      uint64_t v99 = (char *)(v97 + 8 * v95);
      *(void *)uint64_t v99 = v88;
      uint64_t v85 = v99 + 8;
      uint64_t v75 = v94;
      while (v87 != __pa)
      {
        uint64_t v100 = *((void *)v87 - 1);
        v87 -= 8;
        *((void *)v99 - 1) = v100;
        v99 -= 8;
      }
      unint64_t v86 = v97 + 8 * v98;
      if (__pa) {
        operator delete(__pa);
      }
      unint64_t __pa = v99;
      unint64_t v87 = v85;
    }
    else
    {
      *(void *)unint64_t v87 = v88;
      v87 += 8;
      uint64_t v85 = v87;
    }
    goto LABEL_158;
  }
  if ((unint64_t)v38 >= v39)
  {
    uint64_t v212 = v79;
    uint64_t v101 = (v38 - v37) >> 3;
    unint64_t v102 = v101 + 1;
    if ((unint64_t)(v101 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v39 - (void)v37) >> 2 > v102) {
      unint64_t v102 = (uint64_t)(v39 - (void)v37) >> 2;
    }
    if (v39 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103) {
      unint64_t v103 = (unint64_t)sub_25B3FCAD4(v103);
    }
    uint64_t v104 = (char *)(v103 + 8 * v101);
    *(void *)uint64_t v104 = 0;
    while (v38 != v37)
    {
      uint64_t v105 = *((void *)v38 - 1);
      v38 -= 8;
      *((void *)v104 - 1) = v105;
      v104 -= 8;
    }
    if (v37) {
      operator delete(v37);
    }
    int v221 = 0;
    unint64_t __pa = 0;
    double v37 = v104;
    uint64_t v84 = (int *)a3;
    uint64_t v83 = a1;
LABEL_174:
    uint64_t v79 = v212;
  }
  else
  {
    int v221 = 0;
    unint64_t __pa = 0;
    *(void *)std::locale v38 = 0;
    uint64_t v84 = (int *)a3;
    uint64_t v83 = a1;
  }
  unint64_t v106 = v77 * v79;
  if (v33 == 1)
  {
    if (*(unsigned char *)(v213 + 136))
    {
      if (v81)
      {
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        uint64_t v110 = *(void *)(v213 + 144);
        uint64_t v111 = (float *)(v110 + 4);
        if (v106 <= 1) {
          uint64_t v112 = 1;
        }
        else {
          uint64_t v112 = v106;
        }
        uint64_t v113 = 4 * v112;
        BOOL v114 = 1;
        unint64_t v115 = v80;
        while (1)
        {
          float v116 = *(float *)(v110 + 4 * v108);
          if (v106 < 2) {
            break;
          }
          unint64_t v117 = v106 - 1;
          float32x4_t v118 = v111;
          do
          {
            float v119 = *v118++;
            float v116 = v116 + v119;
            --v117;
          }
          while (v117);
          v108 += v106;
          if (!v114) {
            goto LABEL_188;
          }
LABEL_189:
          float *v115 = v116;
          uint64_t v120 = v221;
          do
          {
            uint64_t v121 = v238[v120] + 1;
            v238[v120] = v121;
            if (v121 != *(void *)&v37[8 * v120]) {
              break;
            }
            v238[v120] = 0;
            BOOL v122 = v120-- <= 0;
          }
          while (!v122);
          if (v74)
          {
            BOOL v114 = 0;
            unint64_t v123 = 0;
          }
          else
          {
            unint64_t v123 = 0;
            long long v124 = v238;
            uint64_t v125 = v40;
            uint64_t v126 = v75;
            do
            {
              uint64_t v128 = *v124++;
              uint64_t v127 = v128;
              uint64_t v129 = *(void *)v125;
              v125 += 8;
              v123 += v129 * v127;
              --v126;
            }
            while (v126);
            BOOL v114 = v123 > v109;
            if (v123 > v109) {
              unint64_t v109 = v123;
            }
          }
          unint64_t v115 = &v80[v123];
          ++v107;
          uint64_t v111 = (float *)((char *)v111 + v113);
          if (v107 == v81) {
            goto LABEL_291;
          }
        }
        ++v108;
        if (v114) {
          goto LABEL_189;
        }
LABEL_188:
        float v116 = v116 + *v115;
        goto LABEL_189;
      }
    }
    else if (v81)
    {
      uint64_t v154 = 0;
      unint64_t v155 = 0;
      uint64_t v156 = *(void *)(v213 + 56);
      uint64_t v157 = *(void *)(v213 + 64);
      uint64_t v158 = v213 + 16;
      uint64_t v159 = *(void *)(v213 + 144);
      BOOL v160 = 1;
      uint64_t v161 = v80;
      do
      {
        uint64_t v162 = 0;
        float v163 = *(float *)(v159 + 4 * (v156 * v237[0] + v157 * v237[1]));
        do
        {
          uint64_t v164 = v237[v162 + 1] + 1;
          v237[v162 + 1] = v164;
          if (v164 != *(void *)(v158 + v162 * 8)) {
            break;
          }
          v237[v162-- + 1] = 0;
        }
        while (v162 != -2);
        if (v106 >= 2)
        {
          for (uint64_t i = 1; i != v106; ++i)
          {
            uint64_t v166 = 0;
            float v163 = v163 + *(float *)(v159 + 4 * (v156 * v237[0] + v157 * v237[1]));
            do
            {
              uint64_t v167 = v237[v166 + 1] + 1;
              v237[v166 + 1] = v167;
              if (v167 != *(void *)(v158 + v166 * 8)) {
                break;
              }
              v237[v166-- + 1] = 0;
            }
            while (v166 != -2);
          }
        }
        if (!v160) {
          float v163 = v163 + *v161;
        }
        float *v161 = v163;
        uint64_t v168 = v221;
        do
        {
          uint64_t v169 = v238[v168] + 1;
          v238[v168] = v169;
          if (v169 != *(void *)&v37[8 * v168]) {
            break;
          }
          v238[v168] = 0;
          BOOL v122 = v168-- <= 0;
        }
        while (!v122);
        if (v74)
        {
          BOOL v160 = 0;
          unint64_t v170 = 0;
        }
        else
        {
          unint64_t v170 = 0;
          uint64_t v171 = v238;
          unint64_t v172 = v40;
          uint64_t v173 = v75;
          do
          {
            uint64_t v175 = *v171++;
            uint64_t v174 = v175;
            uint64_t v176 = *(void *)v172;
            v172 += 8;
            v170 += v176 * v174;
            --v173;
          }
          while (v173);
          BOOL v160 = v170 > v155;
          if (v170 > v155) {
            unint64_t v155 = v170;
          }
        }
        uint64_t v161 = &v80[v170];
        ++v154;
      }
      while (v154 != v81);
    }
  }
  else if (*(unsigned char *)(v213 + 136))
  {
    if (v217)
    {
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      unint64_t v132 = 0;
      BOOL v133 = 1;
      float32x2_t v134 = v80;
      do
      {
        if (v133)
        {
          if (v106)
          {
            uint64_t v135 = *(void *)(v213 + 144);
            uint64_t v136 = v134;
            unint64_t v137 = v106;
            do
            {
              *v136++ = *(float *)(v135 + 4 * v131++);
              --v137;
            }
            while (v137);
          }
        }
        else if (v106)
        {
          uint64_t v138 = *(void *)(v213 + 144);
          uint64_t v139 = v134;
          unint64_t v140 = v106;
          do
          {
            float *v139 = *(float *)(v138 + 4 * v131) + *v139;
            ++v139;
            ++v131;
            --v140;
          }
          while (v140);
        }
        if (v81 >= 2)
        {
          for (uint64_t j = 1; j != v81; ++j)
          {
            if (v106)
            {
              uint64_t v142 = *(void *)(v213 + 144);
              id v143 = v134;
              unint64_t v144 = v106;
              do
              {
                float *v143 = *(float *)(v142 + 4 * v131) + *v143;
                ++v143;
                ++v131;
                --v144;
              }
              while (v144);
            }
          }
        }
        uint64_t v145 = v221;
        do
        {
          uint64_t v146 = v238[v145] + 1;
          v238[v145] = v146;
          if (v146 != *(void *)&v37[8 * v145]) {
            break;
          }
          v238[v145] = 0;
          BOOL v122 = v145-- <= 0;
        }
        while (!v122);
        if (v74)
        {
          BOOL v133 = 0;
          unint64_t v147 = 0;
        }
        else
        {
          unint64_t v147 = 0;
          uint64_t v148 = v238;
          int64_t v149 = v40;
          uint64_t v150 = v75;
          do
          {
            uint64_t v152 = *v148++;
            uint64_t v151 = v152;
            uint64_t v153 = *(void *)v149;
            v149 += 8;
            v147 += v153 * v151;
            --v150;
          }
          while (v150);
          BOOL v133 = v147 > v132;
          if (v147 > v132) {
            unint64_t v132 = v147;
          }
        }
        float32x2_t v134 = &v80[v147];
        ++v130;
      }
      while (v130 != v217);
    }
  }
  else if (v217)
  {
    uint64_t v177 = 0;
    unint64_t v178 = 0;
    uint64_t v179 = v213 + 16;
    BOOL v180 = 1;
    uint64_t v181 = v80;
    do
    {
      if (v180)
      {
        if (v106)
        {
          uint64_t v182 = 0;
          uint64_t v184 = *(void *)(v213 + 56);
          uint64_t v183 = *(void *)(v213 + 64);
          uint64_t v185 = *(void *)(v213 + 144);
          do
          {
            uint64_t v186 = 0;
            v181[v182] = *(float *)(v185 + 4 * (v184 * v237[0] + v183 * v237[1]));
            do
            {
              uint64_t v187 = v237[v186 + 1] + 1;
              v237[v186 + 1] = v187;
              if (v187 != *(void *)(v179 + v186 * 8)) {
                break;
              }
              v237[v186-- + 1] = 0;
            }
            while (v186 != -2);
            ++v182;
          }
          while (v182 != v106);
        }
      }
      else if (v106)
      {
        uint64_t v188 = 0;
        uint64_t v190 = *(void *)(v213 + 56);
        uint64_t v189 = *(void *)(v213 + 64);
        uint64_t v191 = *(void *)(v213 + 144);
        do
        {
          uint64_t v192 = 0;
          v181[v188] = *(float *)(v191 + 4 * (v190 * v237[0] + v189 * v237[1])) + v181[v188];
          do
          {
            uint64_t v193 = v237[v192 + 1] + 1;
            v237[v192 + 1] = v193;
            if (v193 != *(void *)(v179 + v192 * 8)) {
              break;
            }
            v237[v192-- + 1] = 0;
          }
          while (v192 != -2);
          ++v188;
        }
        while (v188 != v106);
      }
      uint64_t v194 = v221;
      if (v81 >= 2)
      {
        for (uint64_t k = 1; k != v81; ++k)
        {
          if (v106)
          {
            uint64_t v196 = 0;
            uint64_t v197 = *(void *)(v213 + 56);
            uint64_t v198 = *(void *)(v213 + 64);
            uint64_t v199 = *(void *)(v213 + 144);
            do
            {
              uint64_t v200 = 0;
              v181[v196] = *(float *)(v199 + 4 * (v197 * v237[0] + v198 * v237[1])) + v181[v196];
              do
              {
                uint64_t v201 = v237[v200 + 1] + 1;
                v237[v200 + 1] = v201;
                if (v201 != *(void *)(v179 + v200 * 8)) {
                  break;
                }
                v237[v200-- + 1] = 0;
              }
              while (v200 != -2);
              ++v196;
            }
            while (v196 != v106);
          }
        }
        uint64_t v194 = v221;
      }
      do
      {
        uint64_t v202 = v238[v194] + 1;
        v238[v194] = v202;
        if (v202 != *(void *)&v37[8 * v194]) {
          break;
        }
        v238[v194] = 0;
        BOOL v122 = v194-- <= 0;
      }
      while (!v122);
      if (v74)
      {
        BOOL v180 = 0;
        unint64_t v203 = 0;
      }
      else
      {
        unint64_t v203 = 0;
        unint64_t v204 = v238;
        uint64_t v205 = v40;
        uint64_t v206 = v75;
        do
        {
          uint64_t v208 = *v204++;
          uint64_t v207 = v208;
          uint64_t v209 = *(void *)v205;
          v205 += 8;
          v203 += v209 * v207;
          --v206;
        }
        while (v206);
        BOOL v180 = v203 > v178;
        if (v203 > v178) {
          unint64_t v178 = v203;
        }
      }
      uint64_t v181 = &v80[v203];
      ++v177;
    }
    while (v177 != v217);
  }
LABEL_291:
  if (__pa) {
    operator delete(__pa);
  }
  if (v40) {
    operator delete(v40);
  }
  if (v37) {
    operator delete(v37);
  }
  if (v231) {
    operator delete(v231);
  }
  if (v234) {
    operator delete(v234);
  }
  sub_25B43CCC0(v83, (uint64_t)v224, *v84);
  v224[0] = &unk_2708F21F8;
  if (v225) {
    sub_25B404120(v225);
  }
}

void sub_25B57F404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (v37) {
    operator delete(v37);
  }
  if (v36) {
    operator delete(v36);
  }
  if (a36) {
    sub_25B404120(a36);
  }
  int32x2_t v40 = *(void **)(v38 - 256);
  if (v40)
  {
    *(void *)(v38 - 248) = v40;
    operator delete(v40);
  }
  __n128 v41 = *(void **)(v38 - 232);
  if (v41) {
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B57F504(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0)
  {
    uint64_t v3 = (int)a1 + 2;
    uint64_t v5 = *(uint64_t **)(a2 + 8);
    unint64_t v13 = *(void *)(a2 + 16);
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v6 = *(uint64_t **)a2;
      uint64_t v15 = ((uint64_t)v5 - *(void *)a2) >> 3;
      unint64_t v16 = v15 + 1;
      if (!((unint64_t)(v15 + 1) >> 61))
      {
        uint64_t v17 = v13 - (void)v6;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        BOOL v10 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unint64_t v18 = (unint64_t)sub_25B3FCAD4(v18);
          unint64_t v6 = *(uint64_t **)a2;
          uint64_t v5 = *(uint64_t **)(a2 + 8);
        }
        else
        {
          uint64_t v19 = 0;
        }
        unint64_t v20 = (uint64_t *)(v18 + 8 * v15);
        unint64_t v21 = v18 + 8 * v19;
        uint64_t *v20 = v3;
        char v14 = v20 + 1;
        while (v5 != v6)
        {
          uint64_t v23 = *--v5;
          *--unint64_t v20 = v23;
        }
        goto LABEL_27;
      }
LABEL_40:
      sub_25B3FBC4C();
    }
LABEL_11:
    *uint64_t v5 = v3;
    char v14 = v5 + 1;
    goto LABEL_29;
  }
  uint64_t v3 = a1;
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if ((unint64_t)v5 < v4) {
    goto LABEL_11;
  }
  unint64_t v6 = *(uint64_t **)a2;
  uint64_t v7 = ((uint64_t)v5 - *(void *)a2) >> 3;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61) {
    goto LABEL_40;
  }
  uint64_t v9 = v4 - (void)v6;
  if (v9 >> 2 > v8) {
    unint64_t v8 = v9 >> 2;
  }
  BOOL v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v11 = v8;
  }
  if (v11)
  {
    unint64_t v11 = (unint64_t)sub_25B3FCAD4(v11);
    unint64_t v6 = *(uint64_t **)a2;
    uint64_t v5 = *(uint64_t **)(a2 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v20 = (uint64_t *)(v11 + 8 * v7);
  unint64_t v21 = v11 + 8 * v12;
  uint64_t *v20 = v3;
  char v14 = v20 + 1;
  while (v5 != v6)
  {
    uint64_t v22 = *--v5;
    *--unint64_t v20 = v22;
  }
LABEL_27:
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v21;
  if (v6) {
    operator delete(v6);
  }
LABEL_29:
  *(void *)(a2 + 8) = v14;
  unint64_t v24 = *(uint64_t **)a2;
  uint64_t v25 = (void *)MEMORY[0x263F8C0F8];
  if (v14 != *(void **)a2)
  {
    unint64_t v26 = 0;
    uint64_t v27 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if ((unint64_t)v24[v26] >= 2)
      {
        uint64_t v28 = sub_25B406B20(v25, (uint64_t)"runtime_err in ", 15);
        int v29 = sub_25B406B20(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../common/reduce_helper.hpp", 118);
        sub_25B406B20(v29, (uint64_t)" ", 1);
        uint64_t v30 = (void *)std::ostream::operator<<();
        uint64_t v31 = sub_25B406B20(v30, (uint64_t)" ", 1);
        unint64_t v32 = sub_25B406B20(v31, (uint64_t)"format_reduce_axes", 18);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
        uint64_t v33 = std::locale::use_facet(&v47, v27);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        sub_25B408160("err", "reduce axis larger than dim-1");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v34 = std::locale::use_facet(&v47, v27);
        ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v24 = *(uint64_t **)a2;
        char v14 = *(void **)(a2 + 8);
      }
      ++v26;
    }
    while (v26 < v14 - v24);
  }
  uint64_t result = std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  double v37 = *(uint64_t **)a2;
  uint64_t v36 = *(void *)(a2 + 8);
  if (v36 - *(void *)a2 != 8)
  {
    unint64_t v38 = 0;
    unint64_t v39 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if (v37[v38] == v37[v38 + 1])
      {
        int32x2_t v40 = sub_25B406B20(v25, (uint64_t)"runtime_err in ", 15);
        __n128 v41 = sub_25B406B20(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../common/reduce_helper.hpp", 118);
        sub_25B406B20(v41, (uint64_t)" ", 1);
        unint64_t v42 = (void *)std::ostream::operator<<();
        uint64_t v43 = sub_25B406B20(v42, (uint64_t)" ", 1);
        uint64_t v44 = sub_25B406B20(v43, (uint64_t)"format_reduce_axes", 18);
        std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
        uint64_t v45 = std::locale::use_facet(&v47, v39);
        ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        sub_25B408160("err", "duplicate axis in reduce axis");
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
        uint64_t v46 = std::locale::use_facet(&v47, v39);
        ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        uint64_t result = std::ostream::flush();
        double v37 = *(uint64_t **)a2;
        uint64_t v36 = *(void *)(a2 + 8);
      }
      ++v38;
    }
    while (v38 < ((v36 - (uint64_t)v37) >> 3) - 1);
  }
  return result;
}

void sub_25B57F9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_25B57FA14(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t result = sub_25B3FCAD4(a4);
    uint64_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_25B57FA90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B57FAAC(void *a1, float32x2_t **a2, float32x2_t **a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  float32x2_t v6 = (float32x2_t)0x80000000800000;
  float32x2_t v7 = (float32x2_t)0x80000000800000;
  if (*a2 != v5)
  {
    do
    {
      float32x2_t v8 = *v4++;
      float32x2_t v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v7), (int8x8_t)v8, (int8x8_t)v7);
    }
    while (v4 != v5);
    float32x2_t v7 = vadd_f32(v7, (float32x2_t)0x3F0000003F000000);
  }
  float32x2_t v9 = vrndp_f32(v7);
  if (v9.f32[0] < v9.f32[1]) {
    v9.f32[0] = v9.f32[1];
  }
  BOOL v10 = *a3;
  unint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    float32x2_t v12 = (float32x2_t)0x80000000800000;
    do
    {
      float32x2_t v13 = *v10++;
      float32x2_t v12 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v12), (int8x8_t)v13, (int8x8_t)v12);
    }
    while (v10 != v11);
    float32x2_t v6 = vadd_f32(v12, (float32x2_t)0x3F0000003F000000);
  }
  float32x2_t v14 = vrndp_f32(v6);
  if (v14.f32[0] < v14.f32[1]) {
    v14.f32[0] = v14.f32[1];
  }
  if ((unint64_t)v9.f32[0] <= (unint64_t)v14.f32[0]) {
    unint64_t v15 = (unint64_t)v14.f32[0];
  }
  else {
    unint64_t v15 = (unint64_t)v9.f32[0];
  }
  sub_25B57B25C((uint64_t)v49, a2, v15);
  sub_25B57B25C((uint64_t)v48, a3, v15);
  sub_25B4641DC((uint64_t)&v26, (uint64_t)v49);
  sub_25B4641DC((uint64_t)v28, (uint64_t)v48);
  uint64_t v16 = 0;
  char v17 = 1;
  do
  {
    uint64_t v18 = *((void *)v27 + v16);
    uint64_t v19 = v28[v16 + 1];
    if ((v17 & 1) == 0) {
      break;
    }
    char v17 = 0;
    uint64_t v16 = 1;
  }
  while (v18 == v19);
  if (v18 != v19)
  {
    unint64_t v20 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"runtime_err in ", 15);
    unint64_t v21 = sub_25B406B20(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/RoomScanCore/Sources/Utilities/wTensor/core/function/../expression/exp_element_binary.hpp", 127);
    sub_25B406B20(v21, (uint64_t)" ", 1);
    uint64_t v22 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v23 = (void *)std::ostream::operator<<();
    sub_25B406B20(v23, (uint64_t)" ", 1);
    sub_25B406B20(v23, (uint64_t)"TensorBinaryExp", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    unint64_t v24 = std::locale::use_facet(v50, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(v50);
    std::ostream::put();
    std::ostream::flush();
    sub_25B408160("err", "Binary Exp shape should equal");
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
    uint64_t v25 = std::locale::use_facet(v50, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(v50);
    std::ostream::put();
    std::ostream::flush();
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = v27[0];
  long long v33 = v27[1];
  long long v34 = v27[2];
  sub_25B4641DC((uint64_t)v35, (uint64_t)&v26);
  sub_25B4641DC((uint64_t)v36, (uint64_t)v28);
  long long v29 = v32;
  long long v30 = v33;
  long long v31 = v34;
  uint64_t v47 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v37 = v32;
  long long v38 = v33;
  long long v39 = v34;
  v36[20] = &unk_2708F1DA8;
  uint64_t v40 = *((void *)&v32 + 1);
  uint64_t v41 = 1;
  uint64_t v44 = v32 * *((void *)&v32 + 1);
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  sub_25B457F00((uint64_t)v50, v32 * *((void *)&v32 + 1));
}

void sub_25B582848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x600]);
  sub_25B3F9500((uint64_t)&STACK[0x630]);
  if (STACK[0x408]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x408]);
  }
  sub_25B582B84(&a71);
  sub_25B582C00(&a27);
  STACK[0x420] = (unint64_t)&unk_2708F1D50;
  if (STACK[0x4A0]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x4A0]);
  }
  STACK[0x4B8] = (unint64_t)&unk_2708F1D50;
  if (STACK[0x538]) {
    sub_25B404120((std::__shared_weak_count *)STACK[0x538]);
  }
  a27 = a11;
  sub_25B46929C((void ***)&a27);
  _Unwind_Resume(a1);
}

void *sub_25B582B84(void *a1)
{
  a1[31] = &unk_2708F1D50;
  long long v2 = (std::__shared_weak_count *)a1[47];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[12] = &unk_2708F1D50;
  uint64_t v3 = (std::__shared_weak_count *)a1[28];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void *sub_25B582C00(void *a1)
{
  a1[25] = &unk_2708F1D50;
  long long v2 = (std::__shared_weak_count *)a1[41];
  if (v2) {
    sub_25B404120(v2);
  }
  a1[6] = &unk_2708F1D50;
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_25B404120(v3);
  }
  return a1;
}

void sub_25B582C7C(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    BOOL v122 = a2 - 4;
    BOOL v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t v58 = *(a2 - 1);
                unint64_t v59 = a1[3];
                if (v58 > v59)
                {
                  uint64_t v60 = *a1;
                  *a1 = *(a2 - 4);
                  *(a2 - 4) = v60;
                  uint64_t v61 = a1[1];
                  a1[1] = *(a2 - 3);
                  *(a2 - 3) = v61;
                  uint64_t v62 = a1[2];
                  a1[2] = *(a2 - 2);
                  a1[3] = v58;
                  *(a2 - 2) = v62;
                  *(a2 - 1) = v59;
                }
                break;
              case 3:
                sub_25B5835D4(a1, a1 + 4, v122);
                break;
              case 4:
                sub_25B583714(a1, a1 + 4, a1 + 8, v122);
                break;
              case 5:
                sub_25B583814(a1, a1 + 4, a1 + 8, a1 + 12, v122);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 767)
          {
            uint64_t v63 = a1 + 4;
            BOOL v65 = a1 == a2 || v63 == a2;
            if (a4)
            {
              if (!v65)
              {
                uint64_t v66 = 0;
                uint64_t v67 = a1;
                do
                {
                  uint64_t v68 = v63;
                  unint64_t v69 = v67[7];
                  if (v69 > v67[3])
                  {
                    long long v70 = *(_OWORD *)v63;
                    uint64_t v71 = v67[6];
                    *uint64_t v63 = 0;
                    v63[1] = 0;
                    uint64_t v72 = v66;
                    v63[2] = 0;
                    while (1)
                    {
                      unint64_t v73 = (char *)a1 + v72;
                      *((_OWORD *)v73 + 2) = *(_OWORD *)((char *)a1 + v72);
                      uint64_t v75 = *(uint64_t *)((char *)a1 + v72 + 16);
                      uint64_t v74 = *(uint64_t *)((char *)a1 + v72 + 24);
                      *((void *)v73 + 1) = 0;
                      *((void *)v73 + 2) = 0;
                      *(void *)unint64_t v73 = 0;
                      *((void *)v73 + 6) = v75;
                      *((void *)v73 + 7) = v74;
                      if (!v72) {
                        break;
                      }
                      if (v69 <= *((void *)v73 - 1))
                      {
                        uint64_t v76 = (uint64_t *)((char *)a1 + v72);
                        goto LABEL_90;
                      }
                      v72 -= 32;
                    }
                    uint64_t v76 = a1;
LABEL_90:
                    uint64_t v77 = (void *)*v76;
                    if (*v76)
                    {
                      v76[1] = (uint64_t)v77;
                      long long v123 = v70;
                      operator delete(v77);
                      long long v70 = v123;
                    }
                    *(_OWORD *)uint64_t v76 = v70;
                    v76[2] = v71;
                    v76[3] = v69;
                  }
                  uint64_t v63 = v68 + 4;
                  v66 += 32;
                  uint64_t v67 = v68;
                }
                while (v68 + 4 != a2);
              }
            }
            else if (!v65)
            {
              do
              {
                uint64_t v111 = v63;
                unint64_t v112 = a1[7];
                if (v112 > a1[3])
                {
                  long long v113 = *(_OWORD *)v111;
                  uint64_t v114 = a1[6];
                  *uint64_t v111 = 0;
                  v111[1] = 0;
                  v111[2] = 0;
                  while (1)
                  {
                    *((_OWORD *)a1 + 2) = *(_OWORD *)a1;
                    uint64_t v116 = a1[2];
                    uint64_t v115 = a1[3];
                    a1[1] = 0;
                    a1[2] = 0;
                    *a1 = 0;
                    a1[6] = v116;
                    a1[7] = v115;
                    if (v112 <= *(a1 - 1)) {
                      break;
                    }
                    a1 -= 4;
                  }
                  *(_OWORD *)a1 = v113;
                  a1[2] = v114;
                  a1[3] = v112;
                }
                uint64_t v63 = v111 + 4;
                a1 = v111;
              }
              while (v111 + 4 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v78 = (unint64_t)(v12 - 2) >> 1;
              int64_t v79 = v78;
              do
              {
                int64_t v80 = v79;
                if (v78 >= v79)
                {
                  uint64_t v81 = (2 * v79) | 1;
                  uint64_t v82 = &a1[4 * v81];
                  if (2 * v80 + 2 < v12)
                  {
                    BOOL v83 = v82[3] > (unint64_t)v82[7];
                    v82 += 4 * v83;
                    if (v83) {
                      uint64_t v81 = 2 * v80 + 2;
                    }
                  }
                  unint64_t v84 = a1[4 * v80 + 3];
                  if (v82[3] <= v84)
                  {
                    uint64_t v85 = 0;
                    unint64_t v86 = &a1[4 * v80];
                    long long v124 = *(_OWORD *)v86;
                    uint64_t v121 = v86[2];
                    v86[1] = 0;
                    v86[2] = 0;
                    *unint64_t v86 = 0;
                    while (1)
                    {
                      unint64_t v87 = v82;
                      if (v85)
                      {
                        v86[1] = (uint64_t)v85;
                        operator delete(v85);
                        *unint64_t v86 = 0;
                        v86[1] = 0;
                        v86[2] = 0;
                      }
                      *(_OWORD *)unint64_t v86 = *(_OWORD *)v87;
                      uint64_t v88 = v87[3];
                      v86[2] = v87[2];
                      *unint64_t v87 = 0;
                      v87[1] = 0;
                      v87[2] = 0;
                      v86[3] = v88;
                      if (v78 < v81) {
                        break;
                      }
                      uint64_t v82 = &a1[4 * ((2 * v81) | 1)];
                      if (2 * v81 + 2 < v12)
                      {
                        BOOL v83 = v82[3] > (unint64_t)v82[7];
                        v82 += 4 * v83;
                        uint64_t v81 = v83 ? 2 * v81 + 2 : (2 * v81) | 1;
                      }
                      else
                      {
                        uint64_t v81 = (2 * v81) | 1;
                      }
                      if (v82[3] > v84) {
                        break;
                      }
                      uint64_t v85 = (void *)*v87;
                      unint64_t v86 = v87;
                    }
                    *(_OWORD *)unint64_t v87 = v124;
                    v87[2] = v121;
                    v87[3] = v84;
                  }
                }
                int64_t v79 = v80 - 1;
              }
              while (v80);
              uint64_t v89 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v90 = 0;
                uint64_t v91 = *a1;
                uint64_t v92 = a1[1];
                uint64_t v93 = a1[2];
                uint64_t v94 = a1[3];
                a1[1] = 0;
                a1[2] = 0;
                uint64_t v95 = a1;
                *a1 = 0;
                do
                {
                  unint64_t v96 = &v95[4 * v90 + 4];
                  uint64_t v97 = (2 * v90) | 1;
                  uint64_t v98 = 2 * v90 + 2;
                  if (v98 < v89)
                  {
                    unint64_t v99 = v96[3];
                    unint64_t v100 = v96[7];
                    v96 += 4 * (v99 > v100);
                    if (v99 > v100) {
                      uint64_t v97 = v98;
                    }
                  }
                  *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
                  uint64_t v101 = v96[3];
                  v95[2] = v96[2];
                  *unint64_t v96 = 0;
                  v96[1] = 0;
                  v96[2] = 0;
                  v95[3] = v101;
                  uint64_t v95 = v96;
                  uint64_t v90 = v97;
                }
                while (v97 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                unint64_t v102 = a2 - 4;
                if (v96 == a2 - 4)
                {
                  uint64_t v110 = (void *)*v96;
                  if (*v96)
                  {
                    v96[1] = (uint64_t)v110;
                    operator delete(v110);
                  }
                  *unint64_t v96 = v91;
                  v96[1] = v92;
                  v96[2] = v93;
                  v96[3] = v94;
                }
                else
                {
                  *(_OWORD *)unint64_t v96 = *((_OWORD *)a2 - 2);
                  uint64_t v103 = *(a2 - 1);
                  v96[2] = *(a2 - 2);
                  v96[3] = v103;
                  *(a2 - 4) = v91;
                  *(a2 - 3) = v92;
                  *(a2 - 2) = v93;
                  *(a2 - 1) = v94;
                  uint64_t v104 = (char *)v96 - (char *)a1 + 32;
                  if (v104 >= 33)
                  {
                    unint64_t v105 = (((unint64_t)v104 >> 5) - 2) >> 1;
                    unint64_t v106 = v96[3];
                    if (a1[4 * v105 + 3] > v106)
                    {
                      long long v125 = *(_OWORD *)v96;
                      uint64_t v107 = v96[2];
                      v96[1] = 0;
                      v96[2] = 0;
                      *unint64_t v96 = 0;
                      while (1)
                      {
                        uint64_t v108 = &a1[4 * v105];
                        *(_OWORD *)unint64_t v96 = *(_OWORD *)v108;
                        v96[2] = v108[2];
                        uint64_t *v108 = 0;
                        v108[1] = 0;
                        v108[2] = 0;
                        v96[3] = v108[3];
                        if (!v105) {
                          break;
                        }
                        unint64_t v105 = (v105 - 1) >> 1;
                        if (a1[4 * v105 + 3] <= v106) {
                          break;
                        }
                        unint64_t v109 = (void *)*v108;
                        unint64_t v96 = v108;
                        if (*v108)
                        {
                          v108[1] = (uint64_t)v109;
                          operator delete(v109);
                          *unint64_t v96 = 0;
                          v96[1] = 0;
                          v96[2] = 0;
                        }
                      }
                      *(_OWORD *)uint64_t v108 = v125;
                      v108[2] = v107;
                      v108[3] = v106;
                    }
                  }
                }
                a2 = v102;
                BOOL v83 = v89-- <= 2;
              }
              while (!v83);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          float32x2_t v14 = &a1[4 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 <= 0x1000)
          {
            sub_25B5835D4(v14, a1, v122);
          }
          else
          {
            sub_25B5835D4(a1, v14, v122);
            sub_25B5835D4(a1 + 4, v14 - 4, a2 - 8);
            sub_25B5835D4(a1 + 8, &a1[4 * v13 + 4], a2 - 12);
            sub_25B5835D4(v14 - 4, v14, &a1[4 * v13 + 4]);
            long long v15 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)float32x2_t v14 = v15;
            uint64_t v16 = a1[2];
            uint64_t v17 = a1[3];
            uint64_t v18 = v14[3];
            a1[2] = v14[2];
            a1[3] = v18;
            v14[2] = v16;
            v14[3] = v17;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v19 = a1[3];
          if (*(a1 - 1) > v19) {
            goto LABEL_12;
          }
          long long v40 = *(_OWORD *)a1;
          uint64_t v41 = a1[2];
          a1[1] = 0;
          a1[2] = 0;
          *a1 = 0;
          if (v19 <= *(a2 - 1))
          {
            uint64_t v44 = a1 + 4;
            do
            {
              BOOL v10 = v44;
              if (v44 >= a2) {
                break;
              }
              unint64_t v45 = v44[3];
              v44 += 4;
            }
            while (v19 <= v45);
          }
          else
          {
            long long v42 = a1;
            do
            {
              BOOL v10 = v42 + 4;
              unint64_t v43 = v42[7];
              v42 += 4;
            }
            while (v19 <= v43);
          }
          uint64_t v46 = a2;
          if (v10 < a2)
          {
            uint64_t v47 = a2;
            do
            {
              uint64_t v46 = v47 - 4;
              unint64_t v48 = *(v47 - 1);
              v47 -= 4;
            }
            while (v19 > v48);
          }
          while (v10 < v46)
          {
            uint64_t v49 = *v10;
            uint64_t *v10 = *v46;
            *uint64_t v46 = v49;
            uint64_t v50 = v10[1];
            v10[1] = v46[1];
            v46[1] = v50;
            uint64_t v51 = v10[2];
            uint64_t v52 = v10[3];
            uint64_t v53 = v46[3];
            v10[2] = v46[2];
            v10[3] = v53;
            v46[2] = v51;
            v46[3] = v52;
            do
            {
              unint64_t v54 = v10[7];
              v10 += 4;
            }
            while (v19 <= v54);
            do
            {
              unint64_t v55 = *(v46 - 1);
              v46 -= 4;
            }
            while (v19 > v55);
          }
          unint64_t v56 = (void *)*a1;
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 == a1)
          {
            if (v56)
            {
              *(v10 - 3) = (uint64_t)v56;
              long long v120 = v40;
              operator delete(v56);
              long long v40 = v120;
            }
          }
          else
          {
            if (v56)
            {
              a1[1] = (uint64_t)v56;
              long long v119 = v40;
              operator delete(v56);
              long long v40 = v119;
              *a1 = 0;
              a1[1] = 0;
              a1[2] = 0;
            }
            *(_OWORD *)a1 = *((_OWORD *)v10 - 2);
            uint64_t v57 = *(v10 - 1);
            a1[2] = *(v10 - 2);
            *(v10 - 4) = 0;
            *(v10 - 3) = 0;
            *(v10 - 2) = 0;
            a1[3] = v57;
          }
          a4 = 0;
          *((_OWORD *)v10 - 2) = v40;
          *(v10 - 2) = v41;
          *(v10 - 1) = v19;
        }
        unint64_t v19 = a1[3];
LABEL_12:
        long long v20 = *(_OWORD *)a1;
        uint64_t v21 = a1[2];
        a1[1] = 0;
        a1[2] = 0;
        uint64_t v22 = a1;
        *a1 = 0;
        do
        {
          uint64_t v23 = v22;
          v22 += 4;
        }
        while (v23[7] > v19);
        unint64_t v24 = a2;
        if (v23 == a1)
        {
          uint64_t v27 = a2;
          while (v22 < v27)
          {
            uint64_t v25 = v27 - 4;
            unint64_t v28 = *(v27 - 1);
            v27 -= 4;
            if (v28 > v19) {
              goto LABEL_22;
            }
          }
          uint64_t v25 = v27;
        }
        else
        {
          do
          {
            uint64_t v25 = v24 - 4;
            unint64_t v26 = *(v24 - 1);
            v24 -= 4;
          }
          while (v26 <= v19);
        }
LABEL_22:
        BOOL v10 = v22;
        if (v22 < v25)
        {
          long long v29 = v25;
          do
          {
            uint64_t v30 = *v10;
            uint64_t *v10 = *v29;
            uint64_t *v29 = v30;
            uint64_t v31 = v10[1];
            v10[1] = v29[1];
            v29[1] = v31;
            uint64_t v32 = v10[2];
            uint64_t v33 = v10[3];
            uint64_t v34 = v29[3];
            v10[2] = v29[2];
            v10[3] = v34;
            v29[2] = v32;
            v29[3] = v33;
            do
            {
              unint64_t v35 = v10[7];
              v10 += 4;
            }
            while (v35 > v19);
            do
            {
              unint64_t v36 = *(v29 - 1);
              v29 -= 4;
            }
            while (v36 <= v19);
          }
          while (v10 < v29);
        }
        long long v37 = (void *)*a1;
        if (v10 - 4 == a1)
        {
          if (v37)
          {
            *(v10 - 3) = (uint64_t)v37;
            long long v118 = v20;
            operator delete(v37);
            long long v20 = v118;
          }
        }
        else
        {
          if (v37)
          {
            a1[1] = (uint64_t)v37;
            long long v117 = v20;
            operator delete(v37);
            long long v20 = v117;
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
          }
          *(_OWORD *)a1 = *((_OWORD *)v10 - 2);
          uint64_t v38 = *(v10 - 1);
          a1[2] = *(v10 - 2);
          *(v10 - 4) = 0;
          *(v10 - 3) = 0;
          *(v10 - 2) = 0;
          a1[3] = v38;
        }
        *((_OWORD *)v10 - 2) = v20;
        *(v10 - 2) = v21;
        *(v10 - 1) = v19;
        if (v22 >= v25) {
          break;
        }
LABEL_37:
        sub_25B582C7C(a1, v10 - 4, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v39 = sub_25B583964(a1, v10 - 4);
      if (sub_25B583964(v10, a2)) {
        break;
      }
      if (!v39) {
        goto LABEL_37;
      }
    }
    a2 = v10 - 4;
    if (!v39) {
      continue;
    }
    break;
  }
}

uint64_t *sub_25B5835D4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = a2[3];
  unint64_t v4 = result[3];
  unint64_t v5 = a3[3];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      uint64_t v9 = *a2;
      *a2 = *a3;
      *a3 = v9;
      uint64_t v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      uint64_t v11 = a3[2];
      a2[3] = v5;
      a3[3] = v3;
      uint64_t v13 = a2[2];
      unint64_t v12 = a2[3];
      a2[2] = v11;
      a3[2] = v13;
      unint64_t v14 = result[3];
      if (v12 > v14)
      {
        uint64_t v15 = *result;
        *uint64_t result = *a2;
        *a2 = v15;
        uint64_t v16 = result[1];
        result[1] = a2[1];
        a2[1] = v16;
        uint64_t v17 = result[2];
        result[2] = a2[2];
        result[3] = v12;
        a2[2] = v17;
        a2[3] = v14;
      }
    }
  }
  else
  {
    uint64_t v6 = *result;
    if (v5 <= v3)
    {
      *uint64_t result = *a2;
      *a2 = v6;
      uint64_t v18 = result[1];
      result[1] = a2[1];
      a2[1] = v18;
      uint64_t v19 = result[2];
      result[2] = a2[2];
      result[3] = v3;
      a2[2] = v19;
      a2[3] = v4;
      unint64_t v20 = a3[3];
      if (v20 <= v4) {
        return result;
      }
      uint64_t v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      uint64_t v22 = a2[1];
      a2[1] = a3[1];
      a3[1] = v22;
      uint64_t v23 = a2[2];
      a2[2] = a3[2];
      a2[3] = v20;
      a3[2] = v23;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v6;
      uint64_t v7 = result[1];
      result[1] = a3[1];
      a3[1] = v7;
      uint64_t v8 = result[2];
      result[2] = a3[2];
      result[3] = v5;
      a3[2] = v8;
    }
    a3[3] = v4;
  }
  return result;
}

uint64_t *sub_25B583714(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_25B5835D4(a1, a2, a3);
  unint64_t v9 = a4[3];
  unint64_t v10 = a3[3];
  if (v9 > v10)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t v13 = a4[2];
    a3[3] = v9;
    a4[3] = v10;
    uint64_t v15 = a3[2];
    unint64_t v14 = a3[3];
    a3[2] = v13;
    a4[2] = v15;
    unint64_t v16 = a2[3];
    if (v14 > v16)
    {
      uint64_t v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      uint64_t v18 = a2[1];
      a2[1] = a3[1];
      a3[1] = v18;
      uint64_t v19 = a3[2];
      a2[3] = v14;
      a3[3] = v16;
      uint64_t v21 = a2[2];
      unint64_t v20 = a2[3];
      a2[2] = v19;
      a3[2] = v21;
      unint64_t v22 = a1[3];
      if (v20 > v22)
      {
        uint64_t v23 = *a1;
        *a1 = *a2;
        *a2 = v23;
        uint64_t v24 = a1[1];
        a1[1] = a2[1];
        a2[1] = v24;
        uint64_t v25 = a1[2];
        a1[2] = a2[2];
        a1[3] = v20;
        a2[2] = v25;
        a2[3] = v22;
      }
    }
  }
  return result;
}

uint64_t *sub_25B583814(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_25B583714(a1, a2, a3, a4);
  unint64_t v11 = a5[3];
  unint64_t v12 = a4[3];
  if (v11 > v12)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t v15 = a5[2];
    a4[3] = v11;
    a5[3] = v12;
    uint64_t v17 = a4[2];
    unint64_t v16 = a4[3];
    a4[2] = v15;
    a5[2] = v17;
    unint64_t v18 = a3[3];
    if (v16 > v18)
    {
      uint64_t v19 = *a3;
      *a3 = *a4;
      *a4 = v19;
      uint64_t v20 = a3[1];
      a3[1] = a4[1];
      a4[1] = v20;
      uint64_t v21 = a4[2];
      a3[3] = v16;
      a4[3] = v18;
      uint64_t v23 = a3[2];
      unint64_t v22 = a3[3];
      a3[2] = v21;
      a4[2] = v23;
      unint64_t v24 = a2[3];
      if (v22 > v24)
      {
        uint64_t v25 = *a2;
        *a2 = *a3;
        *a3 = v25;
        uint64_t v26 = a2[1];
        a2[1] = a3[1];
        a3[1] = v26;
        uint64_t v27 = a3[2];
        a2[3] = v22;
        a3[3] = v24;
        uint64_t v29 = a2[2];
        unint64_t v28 = a2[3];
        a2[2] = v27;
        a3[2] = v29;
        unint64_t v30 = a1[3];
        if (v28 > v30)
        {
          uint64_t v31 = *a1;
          *a1 = *a2;
          *a2 = v31;
          uint64_t v32 = a1[1];
          a1[1] = a2[1];
          a2[1] = v32;
          uint64_t v33 = a1[2];
          a1[2] = a2[2];
          a1[3] = v28;
          a2[2] = v33;
          a2[3] = v30;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B583964(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = a1[3];
      if (v6 > v7)
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 3);
        *(a2 - 3) = v9;
        uint64_t v10 = a1[2];
        a1[2] = *(a2 - 2);
        a1[3] = v6;
        *(a2 - 2) = v10;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_25B5835D4(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      sub_25B583714(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      sub_25B583814(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v11 = a1 + 8;
      sub_25B5835D4(a1, a1 + 4, a1 + 8);
      unint64_t v12 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = v12[3];
    if (v15 > v11[3])
    {
      long long v16 = *(_OWORD *)v12;
      uint64_t v17 = v12[2];
      v12[1] = 0;
      v12[2] = 0;
      uint64_t v18 = v13;
      *unint64_t v12 = 0;
      while (1)
      {
        uint64_t v19 = (char *)a1 + v18;
        *((_OWORD *)v19 + 6) = *(_OWORD *)((char *)a1 + v18 + 64);
        uint64_t v21 = *(uint64_t *)((char *)a1 + v18 + 80);
        uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 88);
        *((void *)v19 + 9) = 0;
        *((void *)v19 + 10) = 0;
        *((void *)v19 + 8) = 0;
        *((void *)v19 + 14) = v21;
        *((void *)v19 + 15) = v20;
        if (v18 == -64)
        {
          uint64_t v22 = (uint64_t)a1;
          goto LABEL_13;
        }
        if (v15 <= *((void *)v19 + 7)) {
          break;
        }
        v18 -= 32;
      }
      uint64_t v22 = (uint64_t)a1 + v18 + 64;
LABEL_13:
      uint64_t v23 = *(void **)v22;
      if (*(void *)v22)
      {
        *(void *)(v22 + 8) = v23;
        long long v24 = v16;
        operator delete(v23);
        long long v16 = v24;
      }
      *(_OWORD *)uint64_t v22 = v16;
      *(void *)(v22 + 16) = v17;
      *(void *)(v22 + 24) = v15;
      if (++v14 == 8) {
        return v12 + 4 == a2;
      }
    }
    unint64_t v11 = v12;
    v13 += 32;
    v12 += 4;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t sub_25B583B6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B583BD0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v52 = a3;
  uint64_t v8 = objc_msgSend_parentIdentifier(v5, v6, v7);
  __n128 v53 = sub_25B583EFC(a1, v5);
  id v9 = v5;
  objc_msgSend_quad(v9, v10, v11);
  float32x4_t v61 = v12;
  objc_msgSend_quad(v9, v13, v14);
  float32x4_t v59 = v15;

  id v16 = v9;
  objc_msgSend_quad(v16, v17, v18);
  float32x4_t v57 = v19;
  objc_msgSend_quad(v16, v20, v21);
  float32x4_t v56 = v22;

  uint64_t v23 = (char *)v16;
  objc_msgSend_quad(v23, v24, v25);
  float32x4_t v55 = v26;
  objc_msgSend_quad(v23, v27, v28);
  float32x4_t v54 = v29;

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v30 = v52;
  uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v63, v68, 16);
  if (v34)
  {
    float32x4_t v35 = vsubq_f32(v61, v59);
    float32x4_t v36 = vmulq_f32(v35, v35);
    v36.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).u64[0];
    v36.f32[0] = sqrtf(v36.f32[0]) * 0.5;
    float32x2_t v62 = *(float32x2_t *)v36.f32;
    float32x4_t v37 = vsubq_f32(v57, v56);
    float32x4_t v38 = vmulq_f32(v37, v37);
    v38.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).u64[0];
    v38.f32[0] = sqrtf(v38.f32[0]) * 0.5;
    float32x2_t v60 = *(float32x2_t *)v38.f32;
    float32x4_t v39 = vsubq_f32(v55, v54);
    int32x4_t v40 = (int32x4_t)vmulq_f32(v39, v39);
    v40.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
    float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
    float32x4_t v58 = vmulq_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
    uint64_t v43 = *(void *)v64;
    while (2)
    {
      for (uint64_t i = 0; i != v34; ++i)
      {
        if (*(void *)v64 != v43) {
          objc_enumerationMutation(v30);
        }
        unint64_t v45 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        uint64_t v46 = objc_msgSend_identifier(v45, v32, v33);
        int isEqual = objc_msgSend_isEqual_(v46, v47, (uint64_t)v8);

        if (isEqual)
        {
          __n128 v49 = sub_25B584074(v45);
          float32x4_t v50 = vmlaq_n_f32((float32x4_t)v53, v58, v60.f32[0]);
          float32x4_t v51 = vmlsq_lane_f32((float32x4_t)v53, v58, v60, 0);
          src[0] = vmlsq_lane_f32(v50, (float32x4_t)v49, v62, 0);
          src[1] = vmlaq_n_f32(v50, (float32x4_t)v49, v62.f32[0]);
          src[2] = vmlaq_n_f32(v51, (float32x4_t)v49, v62.f32[0]);
          src[3] = vmlsq_lane_f32(v51, (float32x4_t)v49, v62, 0);
          if (v23) {
            objc_copyStruct(v23 + 272, src, 64, 1, 0);
          }
          goto LABEL_12;
        }
      }
      uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v63, v68, 16);
      if (v34) {
        continue;
      }
      break;
    }
  }
LABEL_12:
}

void sub_25B583E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

__n128 sub_25B583EFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v6 = v3;
  if (a1)
  {
    objc_msgSend_quad(v3, v4, v5);
    float32x4_t v53 = v7;
    objc_msgSend_quad(v6, v8, v9);
    float32x4_t v52 = v10;
    objc_msgSend_quad(v6, v11, v12);
    float32x4_t v51 = v13;
    objc_msgSend_quad(v6, v14, v15);
    float32x4_t v50 = v16;
    objc_msgSend_quad(v6, v17, v18);
    float32x4_t v49 = v19;
    objc_msgSend_quad(v6, v20, v21);
    float32x4_t v48 = v22;
    objc_msgSend_quad(v6, v23, v24);
    float32x4_t v47 = v25;
    objc_msgSend_quad(v6, v26, v27);
    float32x4_t v46 = v28;
    objc_msgSend_quad(v6, v29, v30);
    float32x4_t v45 = v31;
    objc_msgSend_quad(v6, v32, v33);
    float32x4_t v44 = v34;
    objc_msgSend_quad(v6, v35, v36);
    float32x4_t v43 = v37;
    objc_msgSend_quad(v6, v38, v39);
    *(float *)&long long v40 = 0.25 * vaddq_f32(vaddq_f32(vaddq_f32(v53, v52), v51), v50).f32[0];
    DWORD1(v40) = vmuls_lane_f32(0.25, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32(vaddq_f32(v49, v48), v47), v46), 1);
    DWORD2(v40) = vmuls_lane_f32(0.25, vaddq_f32(vaddq_f32(vaddq_f32(v45, v44), v43), v41), 2);
    long long v54 = v40;
  }
  else
  {
    long long v54 = 0u;
  }

  return (__n128)v54;
}

void sub_25B584038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_25B584074(void *a1)
{
  id v1 = a1;
  objc_msgSend_quad(v1, v2, v3);
  float32x4_t v13 = v4;
  objc_msgSend_quad(v1, v5, v6);
  float32x4_t v8 = vsubq_f32(v13, v7);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  float32x4_t v14 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);

  return (__n128)v14;
}

void sub_25B5840FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B584110(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  float32x2_t v14 = (float32x2_t)sub_25B583EFC(*(void *)(a1 + 48), a2).n128_u64[0];
  float32x2_t v6 = (float32x2_t)sub_25B583EFC(*(void *)(a1 + 48), v5).n128_u64[0];
  float32x2_t v7 = *(float32x2_t *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 32);
  int32x2_t v9 = (int32x2_t)vmul_f32(v7, vsub_f32(v14, *(float32x2_t *)&v8));
  int32x2_t v10 = (int32x2_t)vmul_f32(v7, vsub_f32(v6, *(float32x2_t *)&v8));
  float32x2_t v11 = vadd_f32((float32x2_t)vzip1_s32(v9, v10), (float32x2_t)vzip2_s32(v9, v10));
  if (v11.f32[0] < v11.f32[1]) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = v11.f32[0] > v11.f32[1];
  }

  return v12;
}

void sub_25B5841A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float *sub_25B5841BC(void *a1, __n128 a2, __n128 a3, float a4)
{
  id v5 = a1;
  uint64_t v8 = objc_msgSend_copy(v5, v6, v7);
  int32x2_t v9 = (float *)v8;
  __n128 v10 = a2;
  __n128 v11 = a3;
  v11.n128_u32[2] = a2.n128_u32[2];
  src[0] = a2;
  src[1] = v11;
  v10.n128_u32[2] = a3.n128_u32[2];
  src[2] = a3;
  src[3] = v10;
  if (v8)
  {
    objc_copyStruct((void *)(v8 + 272), src, 64, 1, 0);
    v9[27] = a4;
  }

  return v9;
}

void sub_25B584258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B584DAC(_Unwind_Exception *a1)
{
  if (v6)
  {
    free(v6);
    if (!v5)
    {
LABEL_3:
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v5)
  {
    goto LABEL_3;
  }
  free(v5);
  if (!v2)
  {
LABEL_5:
    sub_25B5446E8(v4);
    sub_25B4B9C40(v1 + 520);
    sub_25B4B9C40(v3);
    _Unwind_Resume(a1);
  }
LABEL_4:
  free(v2);
  goto LABEL_5;
}

void sub_25B5850C4(uint64_t a1, const char *a2, uint64_t a3)
{
  unsigned int v3 = a2;
  uint64_t v5 = objc_msgSend_type(*(void **)(a1 + 864), a2, a3);
  uint64_t v8 = objc_msgSend_type(*(void **)(a1 + 856), v6, v7);
  if (!*(unsigned char *)(a1 + 928))
  {
LABEL_37:
    uint64_t v14 = 3;
    goto LABEL_38;
  }
  uint64_t v11 = *(void *)(a1 + 1000);
  if (v11 == 3) {
    return;
  }
  if (v11 == -1) {
    uint64_t v11 = v3 - 1;
  }
  uint64_t v12 = 1;
  if (!v8) {
    uint64_t v12 = 2;
  }
  if ((v5 == 0) != (v8 == 0)) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v11) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v13;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (v8) {
      BOOL v15 = v5 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    int v16 = v15;
    if (*(void *)(a1 + 832) != *(void *)(a1 + 840) && (v8 | v5) == 0) {
      uint64_t v14 = 3;
    }
    if (v16 == 1 && !*(void *)(a1 + 904))
    {
      uint64_t v18 = objc_msgSend_date(MEMORY[0x263EFF910], v9, v10);
      float32x4_t v19 = *(void **)(a1 + 904);
      *(void *)(a1 + 904) = v18;
    }
    uint64_t v20 = objc_msgSend_date(MEMORY[0x263EFF910], v9, v10);
    objc_msgSend_timeIntervalSinceDate_(v20, v21, *(void *)(a1 + 896));
    double v23 = v22;

    uint64_t v26 = *(void *)(a1 + 904);
    if (v26)
    {
      uint64_t v27 = objc_msgSend_date(MEMORY[0x263EFF910], v24, v25);
      objc_msgSend_timeIntervalSinceDate_(v27, v28, *(void *)(a1 + 904));
      double v30 = v29;

      LODWORD(v26) = v30 > 5.0;
    }
    if (v23 > 10.0 || (v16 & v26) != 0)
    {
      float32x4_t v31 = [RSTextCoachingSignal alloc];
      if (v31) {
        float32x4_t v31 = (RSTextCoachingSignal *)sub_25B51F704(v31, 0, 1.0);
      }
      uint64_t v32 = *(void **)(a1 + 864);
      *(void *)(a1 + 864) = v31;

      uint64_t v33 = [RSTextCoachingSignal alloc];
      if (v33) {
        uint64_t v33 = (RSTextCoachingSignal *)sub_25B51F704(v33, 0, 1.0);
      }
      float32x4_t v34 = *(void **)(a1 + 856);
      *(void *)(a1 + 856) = v33;

      goto LABEL_37;
    }
  }
LABEL_38:
  *(void *)(a1 + 1000) = v14;
}

void sub_25B585278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B58528C(uint64_t a1)
{
  sub_25B5852C4(a1);

  JUMPOUT(0x261163EE0);
}

uint64_t sub_25B5852C4(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1E58;
  float32x2_t v6 = (void **)(a1 + 136);
  sub_25B413C78(&v6);
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v3;
  float32x4_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    operator delete(v4);
    unsigned int v3 = *(void **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_25B58535C(uint64_t a1, uint64_t a2, float32x2_t *a3, void *a4, void *a5, uint64_t *a6)
{
  if (a3[12].u8[0] | a3[8].u8[0]) {
    return 0;
  }
  float32x2_t v6 = a4;
  if (a4[1] == *a4) {
    return 0;
  }
  uint64_t v7 = a5;
  if (a5[1] == *a5) {
    return 0;
  }
  uint64_t v12 = a3 + 4;
  unint64_t v14 = sub_25B40E348(a3, a3 + 4);
  BOOL v15 = a3 + 3;
  if (v14) {
    BOOL v15 = (float32x2_t *)((char *)a3 + 28);
  }
  __int32 v16 = v15->i32[0];
  uint64_t v17 = a3 + 7;
  if (v13) {
    uint64_t v17 = (float32x2_t *)((char *)a3 + 60);
  }
  __int32 v18 = v17->i32[0];
  uint64_t v19 = a2 + 144;
  uint64_t v20 = *(void *)(a2 + 144);
  if (!v20) {
    goto LABEL_27;
  }
  uint64_t v21 = a2 + 144;
  uint64_t v22 = a2 + 144;
  uint64_t v23 = *(void *)(a2 + 144);
  do
  {
    __int32 v24 = *(_DWORD *)(v23 + 32);
    BOOL v25 = v24 < v16;
    if (v24 >= v16) {
      uint64_t v26 = (uint64_t *)v23;
    }
    else {
      uint64_t v26 = (uint64_t *)(v23 + 8);
    }
    if (!v25) {
      uint64_t v22 = v23;
    }
    uint64_t v23 = *v26;
  }
  while (*v26);
  if (v22 != v19 && *(_DWORD *)(v22 + 32) <= v16 && *(void *)(v22 + 56) > 1uLL) {
    return 0;
  }
  do
  {
    __int32 v27 = *(_DWORD *)(v20 + 32);
    BOOL v28 = v27 < v18;
    if (v27 >= v18) {
      double v29 = (uint64_t *)v20;
    }
    else {
      double v29 = (uint64_t *)(v20 + 8);
    }
    if (!v28) {
      uint64_t v21 = v20;
    }
    uint64_t v20 = *v29;
  }
  while (*v29);
  if (v21 != v19 && *(_DWORD *)(v21 + 32) <= v18) {
    unint64_t v30 = *(void *)(v21 + 56);
  }
  else {
LABEL_27:
  }
    unint64_t v30 = 0;
  BOOL result = 0;
  if (v30 <= 1 && v16 != v18)
  {
    uint64_t v370 = v13;
    float32x4_t v371 = a6;
    unint64_t v369 = v14;
    float32x2_t v35 = a3[sub_25B40E348(a3, v12)];
    float32x2_t v37 = v12[v36];
    *(float32x2_t *)&long long v411 = v35;
    *((float32x2_t *)&v411 + 1) = v37;
    float32x4_t v38 = *(float32x2_t ***)(a2 + 312);
    uint64_t v39 = (float32x2_t **)(a2 + 320);
    if (v38 == (float32x2_t **)(a2 + 320))
    {
LABEL_41:
      int v44 = 1;
    }
    else
    {
      int v40 = *(_DWORD *)(a1 + 80);
      while (1)
      {
        int v41 = *((_DWORD *)v38 + 8);
        if (v41 != v40 && v41 != *(_DWORD *)(a1 + 84))
        {
          v32.i64[0] = (uint64_t)v38[5];
          v33.i64[0] = (uint64_t)v38[6];
          *(float32x2_t *)v34.f32 = v35;
          if (sub_25B40E540(v32, v33, v34, v37)) {
            break;
          }
        }
        float32x2_t v42 = v38[1];
        if (v42)
        {
          do
          {
            float32x4_t v43 = (float32x2_t **)v42;
            float32x2_t v42 = (float32x2_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            float32x4_t v43 = (float32x2_t **)v38[2];
            BOOL v50 = *v43 == (float32x2_t *)v38;
            float32x4_t v38 = v43;
          }
          while (!v50);
        }
        float32x4_t v38 = v43;
        if (v43 == v39) {
          goto LABEL_41;
        }
      }
      int v44 = 0;
    }
    float32x4_t v45 = *(float32x2_t **)(a2 + 160);
    float32x4_t v46 = &off_25B5F1000;
    if (v45 != (float32x2_t *)(a2 + 168))
    {
      float32x2_t v47 = vsub_f32(v37, v35);
      float v48 = vaddv_f32(vmul_f32(v47, v47));
      if (v48 < 0.000001) {
        float v48 = 0.000001;
      }
      do
      {
        __int32 v49 = v45[4].i32[0];
        BOOL v50 = v49 == v16 || v49 == v18;
        if (!v50)
        {
          float32x2_t v51 = v45[5];
          float32x2_t v52 = vmla_n_f32(v35, v47, vaddv_f32(vmul_f32(vsub_f32(v51, v35), v47)) / v48);
          if (vaddv_f32(vmul_f32(vsub_f32(v52, v35), vsub_f32(v52, v37))) <= 0.00001)
          {
            float32x2_t v53 = vsub_f32(v51, v52);
            if (sqrtf(vaddv_f32(vmul_f32(v53, v53))) < 0.3) {
              return 0;
            }
          }
        }
        long long v54 = (float32x2_t *)v45[1];
        if (v54)
        {
          do
          {
            float32x4_t v55 = (float32x2_t **)v54;
            long long v54 = (float32x2_t *)*v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            float32x4_t v55 = (float32x2_t **)v45[2];
            BOOL v50 = *v55 == v45;
            float32x4_t v45 = (float32x2_t *)v55;
          }
          while (!v50);
        }
        float32x4_t v45 = (float32x2_t *)v55;
      }
      while (v55 != (float32x2_t **)(a2 + 168));
    }
    if (!v44) {
      return 0;
    }
    uint64_t v373 = a1;
    float32x2_t v56 = *a3;
    float32x2_t v57 = a3[1];
    float32x2_t v409 = *a3;
    float32x2_t v410 = v57;
    float32x2_t v58 = a3[5];
    float32x2_t v407 = a3[4];
    float32x2_t v408 = v58;
    float32x2_t v59 = *(float32x2_t *)(v7[1] - 16);
    LODWORD(v400) = 0;
    if (*(void *)(a2 + 88))
    {
      uint64_t v367 = v6;
      float v364 = v7;
      int v60 = 0;
      unint64_t v61 = 0;
      float32x2_t v62 = 0;
      long long v63 = 0;
      do
      {
        if (!*((_DWORD *)sub_25B3F9544((uint64_t **)(a2 + 72), v60, &v400) + 15))
        {
          unsigned int v388 = sub_25B3F9544((uint64_t **)(a2 + 72), v60, &v400)[5];
          unsigned int v377 = HIDWORD(sub_25B3F9544((uint64_t **)(a2 + 72), v60, &v400)[5]);
          unsigned int v378 = sub_25B3F9544((uint64_t **)(a2 + 72), v60, &v400)[6];
          long long v64 = sub_25B3F9544((uint64_t **)(a2 + 72), v60, &v400);
          LODWORD(v65) = v378;
          HIDWORD(v65) = HIDWORD(v64[6]);
          if ((unint64_t)v62 >= v61)
          {
            unint64_t v379 = v65;
            unint64_t v389 = __PAIR64__(v377, v388);
            uint64_t v66 = (v62 - (char *)v63) >> 4;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v61 - (void)v63) >> 3 > v67) {
              unint64_t v67 = (uint64_t)(v61 - (void)v63) >> 3;
            }
            if (v61 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v67;
            }
            if (v68) {
              unint64_t v68 = (unint64_t)sub_25B3FFAEC(v68);
            }
            else {
              uint64_t v69 = 0;
            }
            long long v70 = (unint64_t *)(v68 + 16 * v66);
            *long long v70 = v389;
            v70[1] = v379;
            if (v62 == (char *)v63)
            {
              uint64_t v72 = (float32x2_t *)v62;
              long long v63 = (float32x2_t *)(v68 + 16 * v66);
            }
            else
            {
              uint64_t v71 = (char *)(v68 + 16 * v66);
              do
              {
                *((_OWORD *)v71 - 1) = *((_OWORD *)v62 - 1);
                v71 -= 16;
                v62 -= 16;
              }
              while (v62 != (char *)v63);
              uint64_t v72 = v63;
              long long v63 = (float32x2_t *)v71;
            }
            unint64_t v61 = v68 + 16 * v69;
            float32x2_t v62 = (char *)(v70 + 2);
            if (v72)
            {
              operator delete(v72);
              int v60 = (int)v400;
            }
          }
          else
          {
            *(void *)float32x2_t v62 = __PAIR64__(v377, v388);
            *((void *)v62 + 1) = v65;
            v62 += 16;
          }
        }
        LODWORD(v400) = ++v60;
      }
      while (*(void *)(a2 + 88) > (unint64_t)v60);
      float v374 = (int *)(v373 + 80);
      if (v62 == (char *)v63)
      {
        uint64_t v390 = 0xFFFFFFFFLL;
        long long v63 = (float32x2_t *)v62;
      }
      else
      {
        uint64_t v73 = 0;
        unint64_t v74 = 0;
        uint64_t v75 = *(unsigned int *)(v373 + 80);
        float32x2_t v76 = vmul_f32(vadd_f32(v409, v410), (float32x2_t)0x3F0000003F000000);
        while (v75 == v74 || !sub_25B40E2B8(v63[v73], v63[v73 + 1], v59, v76))
        {
          ++v74;
          v73 += 2;
          if (v74 >= (v62 - (char *)v63) >> 4)
          {
            uint64_t v7 = v364;
            uint64_t v39 = (float32x2_t **)(a2 + 320);
            float32x2_t v6 = v367;
            float32x4_t v46 = &off_25B5F1000;
            goto LABEL_88;
          }
        }
        uint64_t v390 = v74;
      }
      uint64_t v7 = v364;
      uint64_t v39 = (float32x2_t **)(a2 + 320);
      float32x2_t v6 = v367;
      float32x4_t v46 = &off_25B5F1000;
    }
    else
    {
      float32x2_t v62 = 0;
      long long v63 = 0;
      float v374 = (int *)(v373 + 80);
LABEL_88:
      uint64_t v390 = 0xFFFFFFFFLL;
    }
    long long v77 = v411;
    BOOL v78 = sub_25B40E2B8(*(float32x2_t *)&v411, *(float32x2_t *)((char *)&v411 + 8), v59, vmul_f32(vadd_f32(v56, v57), (float32x2_t)0x3F0000003F000000));
    int v79 = v390 != 0xFFFFFFFFLL || v78;
    BOOL v80 = v79 == 0;
    if (v79) {
      unsigned int v81 = -1;
    }
    else {
      unsigned int v81 = 0;
    }
    int8x8_t v82 = (int8x8_t)vdup_n_s32(v81);
    float32x2_t v83 = (float32x2_t)vbsl_s8(v82, *(int8x8_t *)&v77, *(int8x8_t *)((char *)&v77 + 8));
    if (v80) {
      unint64_t v84 = &v409;
    }
    else {
      unint64_t v84 = &v407;
    }
    float32x2_t v85 = *v84;
    unint64_t v86 = &v410;
    if (!v80) {
      unint64_t v86 = &v408;
    }
    float32x2_t v87 = *v86;
    float32x2_t v88 = vsub_f32(*v86, v85);
    int32x2_t v89 = (int32x2_t)vmul_f32(v88, v88);
    float v90 = vaddv_f32((float32x2_t)v89);
    float v91 = *((float *)v46 + 880);
    if (v90 < v91) {
      float v90 = *((float *)v46 + 880);
    }
    float32x2_t v92 = (float32x2_t)vbsl_s8(v82, *(int8x8_t *)((char *)&v77 + 8), *(int8x8_t *)&v77);
    float32x2_t v93 = vsub_f32(v92, v85);
    if (sqrtf(vaddv_f32(vmul_f32(v93, v93))) >= v91)
    {
      float32x2_t v104 = vsub_f32(v92, v87);
      float32x2_t v105 = 0;
      if (sqrtf(vaddv_f32(vmul_f32(v104, v104))) >= v91) {
        goto LABEL_123;
      }
      float32x2_t v95 = vsub_f32(v83, v92);
      int32x2_t v106 = (int32x2_t)vmul_f32(v95, v95);
      v106.i32[0] = vadd_f32((float32x2_t)v106, (float32x2_t)vdup_lane_s32(v106, 1)).u32[0];
      float32x2_t v107 = vrsqrte_f32((float32x2_t)v106.u32[0]);
      float32x2_t v108 = vmul_f32(v107, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v107, v107)));
      float32x2_t v99 = vmul_n_f32(v95, vmul_f32(v108, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v108, v108))).f32[0]);
      float32x2_t v103 = vsub_f32(v85, v87);
      int32x2_t v109 = (int32x2_t)vmul_f32(v103, v103);
      v109.i32[0] = vadd_f32((float32x2_t)v109, (float32x2_t)vdup_lane_s32(v109, 1)).u32[0];
      float32x2_t v110 = vrsqrte_f32((float32x2_t)v109.u32[0]);
      float32x2_t v111 = vmul_f32(v110, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v110, v110)));
      unsigned __int32 v102 = vmul_f32(v111, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v111, v111))).u32[0];
    }
    else
    {
      unsigned __int32 v94 = vadd_f32((float32x2_t)v89, (float32x2_t)vdup_lane_s32(v89, 1)).u32[0];
      float32x2_t v95 = vsub_f32(v83, v92);
      int32x2_t v96 = (int32x2_t)vmul_f32(v95, v95);
      v96.i32[0] = vadd_f32((float32x2_t)v96, (float32x2_t)vdup_lane_s32(v96, 1)).u32[0];
      float32x2_t v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
      float32x2_t v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
      float32x2_t v99 = vmul_n_f32(v95, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]);
      float32x2_t v100 = vrsqrte_f32((float32x2_t)v94);
      float32x2_t v101 = vmul_f32(v100, vrsqrts_f32((float32x2_t)v94, vmul_f32(v100, v100)));
      unsigned __int32 v102 = vmul_f32(v101, vrsqrts_f32((float32x2_t)v94, vmul_f32(v101, v101))).u32[0];
      float32x2_t v103 = v88;
    }
    float32x2_t v380 = v103;
    float32x2_t v391 = vsub_f32(v59, vmla_n_f32(v85, v88, vaddv_f32(vmul_f32(vsub_f32(v59, v85), v88)) / v90));
    float v112 = (float)(acosf(vaddv_f32(vmul_f32(v99, vmul_n_f32(v103, *(float *)&v102)))) * 180.0) / 3.1416;
    __float2 v113 = __sincosf_stret((float)((float)(180.0 - v112) / 180.0) * 3.1416);
    v114.f32[0] = -v113.__sinval;
    v114.i32[1] = LODWORD(v113.__cosval);
    float32x2_t v115 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v113.__sinval), LODWORD(v113.__cosval)), v380.f32[0]), v114, v380, 1);
    if (vaddv_f32(vmul_f32(v115, v95)) >= 0.0) {
      goto LABEL_121;
    }
    int32x2_t v116 = (int32x2_t)vmul_f32(v115, v115);
    float32x2_t v381 = v114;
    v116.i32[0] = vadd_f32((float32x2_t)v116, (float32x2_t)vdup_lane_s32(v116, 1)).u32[0];
    float32x2_t v117 = vrsqrte_f32((float32x2_t)v116.u32[0]);
    float32x2_t v118 = vmul_f32(v117, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v117, v117)));
    float v119 = vaddv_f32(vmul_f32(vmul_n_f32(v115, vmul_f32(v118, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v118, v118))).f32[0]), v99));
    float v120 = 1.0;
    if (v119 <= 1.0) {
      float v120 = v119;
    }
    float v121 = v119 >= -1.0 ? v120 : -1.0;
    float v122 = acosf(v121);
    float32x2_t v123 = (float32x2_t)__PAIR64__(LODWORD(v113.__sinval), LODWORD(v113.__cosval));
    float32x2_t v124 = v381;
    float v125 = (float)(v122 * 180.0) / 3.1416;
    if (v125 > 180.0 || v125 <= 175.0)
    {
LABEL_121:
      __float2 v127 = __sincosf_stret((float)((float)(v112 + -180.0) / 180.0) * 3.1416);
      v124.f32[0] = -v127.__sinval;
      v124.i32[1] = LODWORD(v127.__cosval);
      float32x2_t v123 = (float32x2_t)__PAIR64__(LODWORD(v127.__sinval), LODWORD(v127.__cosval));
    }
    float32x2_t v105 = vmla_lane_f32(vmul_n_f32(v123, v391.f32[0]), v124, v391, 1);
LABEL_123:
    float32x2_t v128 = vsub_f32(*(float32x2_t *)&v77, *(float32x2_t *)((char *)&v77 + 8));
    float v129 = sqrtf(vaddv_f32(vmul_f32(v128, v128)));
    if (v129 > *(float *)(v373 + 52)) {
      goto LABEL_214;
    }
    unint64_t v130 = *v374;
    uint64_t v131 = *v371;
    unint64_t v132 = v371[1] - *v371;
    if (v132 <= v130) {
      goto LABEL_214;
    }
    unint64_t v133 = *(int *)(v373 + 84);
    if (v132 <= v133 || *(unsigned char *)(v131 + v130) == 3 && *(unsigned char *)(v131 + v133) == 3) {
      goto LABEL_214;
    }
    if (v129 < *(float *)(v373 + 56)) {
      goto LABEL_214;
    }
    float32x2_t v134 = vsub_f32(v409, v410);
    int32x2_t v135 = (int32x2_t)vmul_f32(v134, v134);
    float32x2_t v136 = vsub_f32(v407, v408);
    int32x2_t v137 = (int32x2_t)vmul_f32(v136, v136);
    uint64_t v138 = (const float *)(v373 + 72);
    float32x2_t v139 = vadd_f32((float32x2_t)vzip1_s32(v137, v135), (float32x2_t)vzip2_s32(v137, v135));
    float32x2_t v140 = vld1_dup_f32(v138);
    int32x2_t v141 = vcgt_f32(v140, vsqrt_f32(v139));
    if ((v141.i32[1] | v141.i32[0])) {
      goto LABEL_214;
    }
    float v142 = sub_25B3FCCE0(&v409, &v407, 0);
    if (v142 >= (float)(180.0 - v142)) {
      float v142 = 180.0 - v142;
    }
    if (v142 <= 60.0)
    {
LABEL_214:
      int v209 = 0;
      goto LABEL_215;
    }
    float v368 = v6;
    memset(v406, 0, sizeof(v406));
    uint64_t v143 = *v7;
    float v365 = v7;
    if (v7[1] != *v7)
    {
      unint64_t v360 = 0;
      unint64_t v361 = 0;
      unint64_t v144 = 0;
      __p = 0;
      float v363 = 0;
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      unint64_t v147 = (v62 - (char *)v63) >> 4;
      if (v147 <= 1) {
        unint64_t v147 = 1;
      }
      unint64_t v392 = v147;
      float32x2_t v366 = v39;
      while (1)
      {
        uint64_t v359 = v146;
        uint64_t v148 = (float32x2_t *)(v143 + 16 * v146);
        if (v62 == (char *)v63)
        {
          uint64_t v153 = 0;
          int v372 = 1;
          unint64_t v154 = 0xFFFFFFFF00000000;
        }
        else
        {
          uint64_t v149 = 0;
          float32x2_t v150 = vmul_f32(vadd_f32(*(float32x2_t *)&v411, *(float32x2_t *)((char *)&v411 + 8)), (float32x2_t)0x3F0000003F000000);
          float32x2_t v382 = (float32x2_t *)(v143 + 16 * v146);
          float32x2_t v151 = *v382;
          uint64_t v152 = v63 + 1;
          while (!sub_25B40E2B8(v152[-1], *v152, v151, v150))
          {
            ++v149;
            v152 += 2;
            if (v392 == v149)
            {
              uint64_t v153 = 0;
              int v372 = 1;
              unint64_t v154 = 0xFFFFFFFF00000000;
              goto LABEL_144;
            }
          }
          int v372 = 0;
          unint64_t v154 = v149 << 32;
          uint64_t v153 = 1;
LABEL_144:
          uint64_t v39 = v366;
          uint64_t v148 = v382;
        }
        uint64_t v400 = (void *)(v154 | v153);
        float v375 = sub_25B3FCCE0((float32x2_t *)&v411, v148, 0);
        long long v156 = v411;
        float32x2_t v157 = *v148;
        float32x2_t v158 = v148[1];
        *(float32x2_t *)v159.f32 = vsub_f32(*(float32x2_t *)((char *)&v411 + 8), *(float32x2_t *)&v411);
        float32x2_t v160 = vsub_f32(v158, *v148);
        v162.f32[0] = -v159.f32[1];
        float32x2_t v161 = (float32x2_t)vzip1_s32(*(int32x2_t *)v162.f32, *(int32x2_t *)v159.f32);
        *(float32x2_t *)v162.f32 = vmul_f32(v160, v161);
        if (vaddv_f32(*(float32x2_t *)v162.f32) == 0.0
          || (v159.i64[0] = v411,
              float32x4_t v383 = v162,
              v162.i64[0] = *((void *)&v411 + 1),
              *(float32x2_t *)v155.f32 = *v148,
              BOOL v163 = sub_25B40E540(v159, v162, v155, v158),
              v166.i64[1] = v383.i64[1],
              !v163))
        {
          char v385 = 0;
          float32x2_t v188 = vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)&v156, *(float32x2_t *)((char *)&v156 + 8)), (float32x2_t)0x3F0000003F000000), v157);
          float32x2_t v187 = vmul_f32(v188, v188);
        }
        else
        {
          int32x2_t v167 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v156, v157), v161);
          *(int32x2_t *)v165.f32 = vdup_lane_s32(v167, 1);
          int32x2_t v168 = (int32x2_t)vmla_n_f32(v157, v160, vdiv_f32(vadd_f32((float32x2_t)v167, *(float32x2_t *)v165.f32), vadd_f32(*(float32x2_t *)v383.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v383.f32, 1))).f32[0]);
          float32x2_t v169 = (float32x2_t)vrev64_s32(v168);
          if (v375 > 10.0 && v375 < 170.0 && v62 != (char *)v63)
          {
            float32x2_t v358 = vsub_f32((float32x2_t)v168, v157);
            float v357 = sqrtf(vaddv_f32(vmul_f32(v358, v358)));
            unint64_t v170 = v63 + 1;
            unint64_t v171 = v392;
            while (1)
            {
              float32x2_t v172 = v170[-1];
              int32x2_t v173 = (int32x2_t)vsub_f32(*v170, v172);
              v165.f32[0] = -*(float *)&v173.i32[1];
              float32x2_t v174 = (float32x2_t)vzip1_s32(*(int32x2_t *)v165.f32, v173);
              *(float32x2_t *)v165.f32 = vmul_f32(v160, v174);
              if (vaddv_f32(*(float32x2_t *)v165.f32) != 0.0)
              {
                *(float32x2_t *)v164.f32 = v170[-1];
                float32x4_t v384 = v165;
                *(float32x2_t *)v165.f32 = v157;
                *(float32x2_t *)v166.f32 = *v170;
                BOOL v175 = sub_25B40E540(v164, v166, v165, v158);
                v166.i64[1] = v384.i64[1];
                if (v175)
                {
                  int32x2_t v176 = (int32x2_t)vmul_f32(vsub_f32(v172, v157), v174);
                  int32x2_t v177 = (int32x2_t)vmla_n_f32(v157, v160, vdiv_f32(vadd_f32((float32x2_t)v176, (float32x2_t)vdup_lane_s32(v176, 1)), vadd_f32(*(float32x2_t *)v384.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v384.f32, 1))).f32[0]);
                  float32x2_t v178 = (float32x2_t)vrev64_s32(v177);
                  float32x2_t v179 = vsub_f32(v157, v178);
                  float v180 = vaddv_f32(vmul_f32(vsub_f32(v169, v178), v179));
                  float v181 = vaddv_f32(vmul_f32(v179, v179));
                  if (v181 < v91) {
                    float v181 = v91;
                  }
                  float32x2_t v182 = vmla_n_f32(v178, v179, v180 / v181);
                  *(float32x2_t *)v165.f32 = vmul_f32(vsub_f32(v182, v178), vsub_f32(v182, v157));
                  if (vaddv_f32(*(float32x2_t *)v165.f32) <= 0.00001)
                  {
                    float32x2_t v184 = vsub_f32(v169, v182);
                    v165.i32[1] = 1065646817;
                    BOOL v183 = sqrtf(vaddv_f32(vmul_f32(v184, v184))) < 0.01;
                  }
                  else
                  {
                    BOOL v183 = 0;
                  }
                  if (v372)
                  {
                    float32x2_t v185 = vsub_f32((float32x2_t)v177, v157);
                    if (vaddv_f32(vmul_f32(v185, v358)) <= 0.0) {
                      BOOL v183 = 0;
                    }
                    if (v183 && sqrtf(vaddv_f32(vmul_f32(v185, v185))) > v357) {
                      break;
                    }
                  }
                }
              }
              v170 += 2;
              if (!--v171) {
                goto LABEL_164;
              }
            }
LABEL_295:
            uint64_t v300 = __p;
            float32x2_t v301 = v363;
            int v209 = 0;
LABEL_364:
            if (v406[0]) {
              operator delete((void *)v406[0]);
            }
            if (v301) {
              operator delete(v301);
            }
            if (v300) {
              operator delete(v300);
            }
LABEL_215:
            if (v63) {
              operator delete(v63);
            }
            if (v209) {
              return *(void *)(v373 + 8) != *(void *)v373;
            }
            return 0;
          }
LABEL_164:
          float32x2_t v186 = vsub_f32(v169, v157);
          float32x2_t v187 = vmul_f32(v186, v186);
          char v385 = 1;
          uint64_t v39 = v366;
        }
        float v189 = sqrtf(vaddv_f32(v187));
        if ((unint64_t)v145 >= v361)
        {
          uint64_t v190 = v145 - __p;
          unint64_t v191 = v190 + 1;
          if ((unint64_t)(v190 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v361 - (void)__p) >> 1 > v191) {
            unint64_t v191 = (uint64_t)(v361 - (void)__p) >> 1;
          }
          if (v361 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v192 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v192 = v191;
          }
          if (v192) {
            unint64_t v192 = (unint64_t)sub_25B3FBC64(v192);
          }
          else {
            uint64_t v193 = 0;
          }
          uint64_t v194 = (float *)(v192 + 4 * v190);
          *uint64_t v194 = v189;
          long long v195 = v194 + 1;
          if (v145 == __p)
          {
            uint64_t v196 = __p;
          }
          else
          {
            uint64_t v196 = __p;
            do
            {
              int v197 = *((_DWORD *)v145-- - 1);
              *((_DWORD *)v194-- - 1) = v197;
            }
            while (v145 != __p);
          }
          unint64_t v361 = v192 + 4 * v193;
          if (v196) {
            operator delete(v196);
          }
          __p = v194;
          uint64_t v145 = v195;
          uint64_t v39 = v366;
        }
        else
        {
          *v145++ = v189;
        }
        if ((unint64_t)v144 >= v360)
        {
          uint64_t v198 = v144 - v363;
          unint64_t v199 = v198 + 1;
          if ((unint64_t)(v198 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v360 - (void)v363) >> 1 > v199) {
            unint64_t v199 = (uint64_t)(v360 - (void)v363) >> 1;
          }
          if (v360 - (unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v200 = v199;
          }
          if (v200) {
            unint64_t v200 = (unint64_t)sub_25B3FBC64(v200);
          }
          else {
            uint64_t v201 = 0;
          }
          uint64_t v202 = (float *)(v200 + 4 * v198);
          *uint64_t v202 = v375;
          unint64_t v203 = v202 + 1;
          if (v144 == v363)
          {
            unint64_t v204 = v363;
          }
          else
          {
            unint64_t v204 = v363;
            do
            {
              int v205 = *((_DWORD *)v144-- - 1);
              *((_DWORD *)v202-- - 1) = v205;
            }
            while (v144 != v363);
          }
          unint64_t v360 = v200 + 4 * v201;
          if (v204) {
            operator delete(v204);
          }
          float v363 = v202;
          unint64_t v144 = v203;
          uint64_t v39 = v366;
        }
        else
        {
          *v144++ = v375;
        }
        sub_25B40DC2C(v406, &v400);
        char v206 = v385 ^ 1;
        if ((_BYTE)v400) {
          char v206 = 1;
        }
        if ((v206 & 1) == 0)
        {
          if (v189 > 5.0) {
            goto LABEL_295;
          }
          float v207 = *(float *)(v373 + 68);
          if (v375 > v207 && v375 < (float)(180.0 - v207)) {
            goto LABEL_295;
          }
        }
        uint64_t v146 = v359 + 1;
        uint64_t v143 = *v365;
        if (v359 + 1 >= (unint64_t)((v365[1] - *v365) >> 4)) {
          goto LABEL_222;
        }
      }
    }
    __p = 0;
    float v363 = 0;
    uint64_t v145 = 0;
LABEL_222:
    if (v369) {
      v210 = a3 + 1;
    }
    else {
      v210 = a3;
    }
    char v211 = a3 + 5;
    if (!v370) {
      char v211 = a3 + 4;
    }
    uint64_t v212 = *(float32x2_t ***)(a2 + 312);
    if (v212 != v39)
    {
      float32x2_t v213 = *v210;
      float32x2_t v214 = *v211;
      uint64_t v215 = *(float32x2_t **)(a2 + 312);
      while (1)
      {
        __int32 v216 = v215[4].i32[0];
        if (v216 == *(_DWORD *)(v373 + 80)) {
          goto LABEL_235;
        }
        float32x2_t v217 = v215[5];
        float32x2_t v218 = v215[6];
        float32x2_t v219 = vsub_f32(v218, v217);
        float v220 = vaddv_f32(vmul_f32(vsub_f32(v213, v217), v219));
        float v221 = vaddv_f32(vmul_f32(v219, v219));
        if (v221 < v91) {
          float v221 = v91;
        }
        float32x2_t v222 = vmla_n_f32(v217, v219, v220 / v221);
        if (vaddv_f32(vmul_f32(vsub_f32(v222, v217), vsub_f32(v222, v218))) > 0.00001
          || (float32x2_t v223 = vsub_f32(v213, v222), sqrtf(vaddv_f32(vmul_f32(v223, v223))) >= 0.1))
        {
LABEL_235:
          char v224 = 0;
        }
        else
        {
          char v224 = 1;
        }
        if (v216 != *(_DWORD *)(v373 + 84))
        {
          float32x2_t v225 = v215[5];
          float32x2_t v226 = v215[6];
          float32x2_t v227 = vsub_f32(v226, v225);
          float v228 = vaddv_f32(vmul_f32(vsub_f32(v214, v225), v227));
          float v229 = vaddv_f32(vmul_f32(v227, v227));
          if (v229 < v91) {
            float v229 = v91;
          }
          float32x2_t v230 = vmla_n_f32(v225, v227, v228 / v229);
          if (vaddv_f32(vmul_f32(vsub_f32(v230, v225), vsub_f32(v230, v226))) <= 0.00001)
          {
            float32x2_t v231 = vsub_f32(v214, v230);
            if (sqrtf(vaddv_f32(vmul_f32(v231, v231))) < 0.1) {
              break;
            }
          }
        }
        if (v224) {
          break;
        }
        unint64_t v232 = (float32x2_t *)v215[1];
        if (v232)
        {
          do
          {
            unint64_t v233 = (float32x2_t **)v232;
            unint64_t v232 = (float32x2_t *)*v232;
          }
          while (v232);
        }
        else
        {
          do
          {
            unint64_t v233 = (float32x2_t **)v215[2];
            BOOL v50 = *v233 == v215;
            uint64_t v215 = (float32x2_t *)v233;
          }
          while (!v50);
        }
        uint64_t v215 = (float32x2_t *)v233;
        if (v233 == v39)
        {
          float32x2_t v234 = vsub_f32(*(float32x2_t *)((char *)&v411 + 8), *(float32x2_t *)&v411);
          float v235 = vaddv_f32(vmul_f32(v234, v234));
          if (v235 < v91) {
            float v235 = v91;
          }
          float32x2_t v236 = vsub_f32(*(float32x2_t *)&v411, *(float32x2_t *)((char *)&v411 + 8));
          float v237 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v236, v236))), v91);
          while (1)
          {
            float32x2_t v238 = (float32x2_t)v212[5];
            float32x2_t v239 = (float32x2_t)v212[6];
            float32x2_t v240 = vmla_n_f32(*(float32x2_t *)&v411, v234, vaddv_f32(vmul_f32(vsub_f32(v238, *(float32x2_t *)&v411), v234)) / v235);
            float32x2_t v241 = vsub_f32(v240, v238);
            int32x2_t v242 = (int32x2_t)vmul_f32(v241, v241);
            float32x2_t v243 = vmla_n_f32(*(float32x2_t *)&v411, v234, vaddv_f32(vmul_f32(v234, vsub_f32(v239, *(float32x2_t *)&v411))) / v235);
            float32x2_t v244 = vsub_f32(v243, v239);
            int32x2_t v245 = (int32x2_t)vmul_f32(v244, v244);
            if ((float)(vaddv_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v242, v245), (float32x2_t)vzip2_s32(v242, v245))))
                       * 0.5) < 0.09)
            {
              float32x2_t v246 = vsub_f32(v239, v238);
              float v247 = vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v411, v238), v246));
              float v248 = vaddv_f32(vmul_f32(v246, v246));
              if (v248 < v91) {
                float v248 = v91;
              }
              float32x2_t v249 = vmla_n_f32(v238, v246, v247 / v248);
              float32x2_t v250 = vsub_f32(v249, v238);
              float32x2_t v251 = vsub_f32(v249, v239);
              if (vaddv_f32(vmul_f32(v250, v251)) > 0.00001)
              {
                int32x2_t v252 = (int32x2_t)vmul_f32(v250, v250);
                int32x2_t v253 = (int32x2_t)vmul_f32(v251, v251);
                int32x2_t v254 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v252, v253), (float32x2_t)vzip2_s32(v252, v253)));
                float32x2_t v249 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32(v254, 1), (float32x2_t)v254), 0), (int8x8_t)v238, (int8x8_t)v239);
              }
              float32x2_t v255 = vmla_n_f32(v238, v246, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v411 + 8), v238), v246)) / v248);
              float32x2_t v256 = vsub_f32(v255, v238);
              float32x2_t v257 = vsub_f32(v255, v239);
              if (vaddv_f32(vmul_f32(v256, v257)) > 0.00001)
              {
                int32x2_t v258 = (int32x2_t)vmul_f32(v256, v256);
                int32x2_t v259 = (int32x2_t)vmul_f32(v257, v257);
                int32x2_t v260 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v258, v259), (float32x2_t)vzip2_s32(v258, v259)));
                float32x2_t v255 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32(v260, 1), (float32x2_t)v260), 0), (int8x8_t)v238, (int8x8_t)v239);
              }
              float32x2_t v261 = vsub_f32(v240, *(float32x2_t *)&v411);
              float32x2_t v262 = vsub_f32(v240, *(float32x2_t *)((char *)&v411 + 8));
              if (vaddv_f32(vmul_f32(v261, v262)) > 0.00001)
              {
                int32x2_t v263 = (int32x2_t)vmul_f32(v261, v261);
                int32x2_t v264 = (int32x2_t)vmul_f32(v262, v262);
                int32x2_t v265 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v263, v264), (float32x2_t)vzip2_s32(v263, v264)));
                float32x2_t v240 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32(v265, 1), (float32x2_t)v265), 0), *(int8x8_t *)&v411, *(int8x8_t *)((char *)&v411 + 8));
              }
              float32x2_t v266 = vsub_f32(v243, *(float32x2_t *)&v411);
              float32x2_t v267 = vsub_f32(v243, *(float32x2_t *)((char *)&v411 + 8));
              if (vaddv_f32(vmul_f32(v266, v267)) > 0.00001)
              {
                int32x2_t v268 = (int32x2_t)vmul_f32(v266, v266);
                int32x2_t v269 = (int32x2_t)vmul_f32(v267, v267);
                int32x2_t v270 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v268, v269), (float32x2_t)vzip2_s32(v268, v269)));
                float32x2_t v243 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32(v270, 1), (float32x2_t)v270), 0), *(int8x8_t *)&v411, *(int8x8_t *)((char *)&v411 + 8));
              }
              float32x2_t v271 = vsub_f32(v249, v255);
              float32x2_t v272 = vsub_f32(v240, v243);
              float32x2_t v273 = vsub_f32(v238, v239);
              float v274 = fminf(sqrtf(vaddv_f32(vmul_f32(v272, v272))) / fmaxf(sqrtf(vaddv_f32(vmul_f32(v273, v273))), v91), 1.0);
              float v275 = *(float *)(v373 + 60);
              if (fminf(sqrtf(vaddv_f32(vmul_f32(v271, v271))) / v237, 1.0) >= v275 || v274 >= v275) {
                goto LABEL_296;
              }
            }
            float32x4_t v277 = v212[1];
            if (v277)
            {
              do
              {
                uint64_t v278 = (float32x2_t **)v277;
                float32x4_t v277 = (float32x2_t *)*v277;
              }
              while (v277);
            }
            else
            {
              do
              {
                uint64_t v278 = (float32x2_t **)v212[2];
                BOOL v50 = *v278 == (float32x2_t *)v212;
                uint64_t v212 = v278;
              }
              while (!v50);
            }
            uint64_t v212 = v278;
            if (v278 == v39) {
              goto LABEL_273;
            }
          }
        }
      }
LABEL_296:
      int v209 = 0;
      uint64_t v300 = __p;
      float32x2_t v301 = v363;
      goto LABEL_364;
    }
LABEL_273:
    float32x2_t v279 = vsub_f32(*(float32x2_t *)&v411, *(float32x2_t *)((char *)&v411 + 8));
    int32x2_t v280 = (int32x2_t)vmul_f32(v279, v279);
    *(float *)v280.i32 = sqrtf(vaddv_f32((float32x2_t)v280));
    int v281 = (int)(*(float *)v280.i32 / 0.06 + 1.0);
    if (v281 < 1)
    {
      unint64_t v302 = 0;
      uint64_t v283 = 0;
      long long v282 = 0;
    }
    else
    {
      long long v282 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      int v285 = 0;
      float32x2_t v286 = vdiv_f32(vsub_f32(*(float32x2_t *)((char *)&v411 + 8), *(float32x2_t *)&v411), (float32x2_t)vdup_lane_s32(v280, 0));
      int v393 = (int)(*(float *)v280.i32 / 0.06 + 1.0);
      do
      {
        float v287 = (double)v285 * 0.03 + (double)v285 * 0.03;
        float32x2_t v288 = vmla_n_f32(*(float32x2_t *)&v411, v286, v287);
        if ((unint64_t)v283 >= v284)
        {
          uint64_t v289 = v283 - v282;
          unint64_t v290 = v289 + 1;
          if ((unint64_t)(v289 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v291 = v284 - (void)v282;
          unint64_t v292 = (uint64_t)(v284 - (void)v282) >> 2;
          if (v292 > v290) {
            unint64_t v290 = v292;
          }
          if (v291 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v293 = v290;
          }
          if (v293) {
            unint64_t v293 = (unint64_t)sub_25B3FCAD4(v293);
          }
          else {
            uint64_t v294 = 0;
          }
          uint64_t v295 = (float32x2_t *)(v293 + 8 * v289);
          *uint64_t v295 = v288;
          float32x2_t v296 = v295 + 1;
          while (v283 != v282)
          {
            float32x2_t v297 = v283[-1];
            --v283;
            v295[-1] = v297;
            --v295;
          }
          unint64_t v284 = v293 + 8 * v294;
          if (v282)
          {
            unint64_t v298 = v293 + 8 * v294;
            operator delete(v282);
            unint64_t v284 = v298;
          }
          long long v282 = v295;
          uint64_t v283 = v296;
          int v281 = v393;
        }
        else
        {
          *v283++ = v288;
        }
        ++v285;
      }
      while (v285 != v281);
      if ((unint64_t)v283 < v284)
      {
        *uint64_t v283 = *(float32x2_t *)((char *)&v411 + 8);
        float64x2_t v299 = v283 + 1;
LABEL_313:
        uint64_t v308 = (char *)v299 - (char *)v282;
        if (v299 == v282)
        {
          int v209 = 0;
        }
        else
        {
          unint64_t v394 = v308 >> 3;
          float64x2_t v395 = (float32x4_t *)(v308 >> 3);
          sub_25B45F2BC(&v397, (unint64_t *)&v395);
          v412[0] = 0;
          sub_25B459378((uint64_t)&v400, &v397);
          sub_25B4A1878((uint64_t)&v400, v412);
          uint64_t v310 = *v368;
          uint64_t v309 = v368[1];
          unint64_t v311 = 0xAAAAAAAAAAAAAAABLL * ((v309 - *v368) >> 3);
          unint64_t v312 = (v311 - *(_DWORD *)(v373 + 76)) & ~(((int)v311 - *(_DWORD *)(v373 + 76)) >> 31);
          BOOL v25 = v311 > v312;
          uint64_t v313 = v363;
          if (v25)
          {
            unint64_t v314 = v145 - __p;
            uint64_t v376 = v406[0];
            if (v314 <= v312) {
              unint64_t v314 = v312;
            }
            unint64_t v386 = v314;
            do
            {
              if (v312 == v386) {
                break;
              }
              if (((*(void *)(v376 + ((v312 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v312) & 1) == 0 && __p[v312] <= 5.0)
              {
                float v315 = v313[v312];
                float v316 = *(float *)(v373 + 68);
                if (v315 > v316 && v315 < (float)(180.0 - v316)) {
                  continue;
                }
              }
              uint64_t v318 = 0;
              unint64_t v319 = 0;
              LODWORD(v397) = 0;
              do
              {
                if (sub_25B586E34(*(float32x4_t **)(*v368 + 24 * v312), *(float32x4_t **)(*v368 + 24 * v312 + 8), v282[v318].f32[0], v282[v318].f32[1]))
                {
                  *(_DWORD *)sub_25B57E210((uint64_t)&v400, (int *)&v397) = 1065353216;
                  unint64_t v320 = v394;
                }
                else
                {
                  unint64_t v320 = v299 - v282;
                }
                LODWORD(v397) = ++v319;
                ++v318;
              }
              while (v320 > v319);
              uint64_t v310 = *v368;
              uint64_t v309 = v368[1];
              uint64_t v313 = v363;
              ++v312;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v309 - v310) >> 3) > v312);
          }
          uint64_t v321 = v365[1];
          float32x2_t v322 = *(float32x2_t *)(v321 - 8);
          float32x2_t v387 = *(float32x2_t *)(v321 - 16);
          sub_25B4D3EC4(&v395, 4uLL);
          float32x2_t v323 = vsub_f32(v322, v387);
          int32x2_t v324 = (int32x2_t)vmul_f32(v323, v323);
          unsigned __int32 v325 = vadd_f32((float32x2_t)v324, (float32x2_t)vdup_lane_s32(v324, 1)).u32[0];
          float32x2_t v326 = vrsqrte_f32((float32x2_t)v325);
          float32x2_t v327 = vmul_f32(v326, vrsqrts_f32((float32x2_t)v325, vmul_f32(v326, v326)));
          float32x2_t v328 = vmul_n_f32(v323, vmul_f32(v327, vrsqrts_f32((float32x2_t)v325, vmul_f32(v327, v327))).f32[0]);
          float32x2_t v329 = vmla_lane_f32(vmul_n_f32((float32x2_t)0x3ED8616D3F6803C9, v328.f32[0]), (float32x2_t)0x3F6803C9BED8616DLL, v328, 1);
          int32x2_t v330 = (int32x2_t)vmul_f32(v329, v329);
          v330.i32[0] = vadd_f32((float32x2_t)v330, (float32x2_t)vdup_lane_s32(v330, 1)).u32[0];
          *(float *)v324.i32 = sqrtf(vaddv_f32((float32x2_t)v324));
          float32x2_t v331 = vrsqrte_f32((float32x2_t)v330.u32[0]);
          float32x2_t v332 = vmul_f32(v331, vrsqrts_f32((float32x2_t)v330.u32[0], vmul_f32(v331, v331)));
          float32x2_t v333 = vmla_n_f32(v387, vmul_n_f32(v329, vmul_f32(v332, vrsqrts_f32((float32x2_t)v330.u32[0], vmul_f32(v332, v332))).f32[0]), *(float *)v324.i32);
          float32x2_t v334 = vmla_lane_f32(vmul_n_f32((float32x2_t)0xBED8616D3F6803C9, v328.f32[0]), (float32x2_t)0x3F6803C93ED8616DLL, v328, 1);
          int32x2_t v335 = (int32x2_t)vmul_f32(v334, v334);
          v335.i32[0] = vadd_f32((float32x2_t)v335, (float32x2_t)vdup_lane_s32(v335, 1)).u32[0];
          float32x2_t v336 = vmla_n_f32(v387, v328, *(float *)v324.i32);
          float32x2_t v337 = vrsqrte_f32((float32x2_t)v335.u32[0]);
          float32x2_t v338 = vmul_f32(v337, vrsqrts_f32((float32x2_t)v335.u32[0], vmul_f32(v337, v337)));
          float32x2_t v339 = vmul_n_f32(v334, vmul_f32(v338, vrsqrts_f32((float32x2_t)v335.u32[0], vmul_f32(v338, v338))).f32[0]);
          uint64_t v340 = (uint64_t *)v395;
          LODWORD(v341) = v387.i32[0];
          HIDWORD(v341) = HIDWORD(v395->i64[0]);
          v395->i32[2] = v395->i64[1];
          *uint64_t v340 = v341;
          float v342 = (uint64_t *)v395;
          float32x4_t v343 = *v395;
          v395->i32[2] = v395->i64[1];
          v343.i32[1] = v387.i32[1];
          *float v342 = v343.i64[0];
          uint64_t v345 = v395;
          uint64_t v344 = v396;
          *(float32x2_t *)v395[1].f32 = vmla_n_f32(v387, v339, *(float *)v324.i32);
          *(float32x2_t *)v345[2].f32 = v336;
          *(float32x2_t *)v345[3].f32 = v333;
          if (v394 <= 1) {
            uint64_t v346 = 1;
          }
          else {
            uint64_t v346 = v394;
          }
          float v347 = (float *)v282 + 1;
          while (!sub_25B586E34(v345, v344, *(v347 - 1), *v347))
          {
            v347 += 2;
            if (!--v346) {
              goto LABEL_353;
            }
          }
          if (v404)
          {
            float v348 = *v405;
            if (v401 >= 2)
            {
              unint64_t v349 = v401 - 1;
              float v350 = v405 + 1;
              do
              {
                float v351 = *v350++;
                float v348 = v348 + v351;
                --v349;
              }
              while (v349);
            }
          }
          else
          {
            float v348 = *v405;
            if (v401 >= 2)
            {
              uint64_t v352 = 1;
              for (uint64_t i = 1; i != v401; ++i)
              {
                float v348 = v348 + v405[v402 * v352];
                if (v352 + 1 == v401) {
                  uint64_t v352 = 0;
                }
                else {
                  ++v352;
                }
              }
            }
          }
          if ((float)(v348 / (float)v401) < *(float *)(v373 + 64))
          {
LABEL_353:
            int v209 = 0;
            goto LABEL_358;
          }
          __int32 v354 = a3[6].i32[0];
          LODWORD(v397) = a3[2].i32[0];
          *(void *)((char *)&v397 + 4) = __PAIR64__(v16, v354);
          HIDWORD(v397) = v18;
          long long v398 = v411;
          float32x2_t v399 = v105;
          unint64_t v355 = *(void *)(v373 + 8);
          if (v355 >= *(void *)(v373 + 16))
          {
            uint64_t v356 = sub_25B586D0C((char **)v373, (uint64_t)&v397);
          }
          else
          {
            *(_OWORD *)unint64_t v355 = v397;
            *(_OWORD *)(v355 + 16) = v398;
            *(float32x2_t *)(v355 + 32) = v399;
            uint64_t v356 = (char *)(v355 + 40);
          }
          *(void *)(v373 + 8) = v356;
          int v209 = 1;
          uint64_t v345 = v395;
LABEL_358:
          if (v345)
          {
            int v396 = v345;
            operator delete(v345);
          }
          uint64_t v400 = &unk_2708F27E8;
          if (v403) {
            sub_25B404120(v403);
          }
        }
        uint64_t v300 = __p;
        float32x2_t v301 = v363;
        if (v282) {
          operator delete(v282);
        }
        goto LABEL_364;
      }
      unint64_t v302 = v284;
    }
    uint64_t v303 = v283 - v282;
    unint64_t v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v302 - (void)v282) >> 2 > v304) {
      unint64_t v304 = (uint64_t)(v302 - (void)v282) >> 2;
    }
    if (v302 - (unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v305 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v305 = v304;
    }
    if (v305) {
      unint64_t v305 = (unint64_t)sub_25B3FCAD4(v305);
    }
    uint64_t v306 = (float32x2_t *)(v305 + 8 * v303);
    float32x2_t *v306 = *(float32x2_t *)((char *)&v411 + 8);
    float64x2_t v299 = v306 + 1;
    while (v283 != v282)
    {
      float32x2_t v307 = v283[-1];
      --v283;
      v306[-1] = v307;
      --v306;
    }
    if (v282) {
      operator delete(v282);
    }
    long long v282 = v306;
    goto LABEL_313;
  }
  return result;
}

void sub_25B586C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a59) {
    sub_25B404120(a59);
  }
  if (v60) {
    operator delete(v60);
  }
  long long v63 = *(void **)(v61 - 232);
  if (v63) {
    operator delete(v63);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a17) {
    operator delete(a17);
  }
  if (v59) {
    operator delete(v59);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B586D0C(char **a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_25B3FBC4C();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_25B3FA70C();
    }
    int32x2_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    int32x2_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v4];
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)uint64_t v10 = *(void *)a2;
  *((void *)v10 + 1) = v11;
  *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  uint64_t v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *((void *)v2 - 5);
      v2 -= 40;
      *((void *)v10 - 5) = v13;
      v10 -= 40;
      *((void *)v10 + 1) = *((void *)v2 + 1);
      long long v14 = *((_OWORD *)v2 + 1);
      *((void *)v10 + 4) = *((void *)v2 + 4);
      *((_OWORD *)v10 + 1) = v14;
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

uint64_t sub_25B586E34(float32x4_t *a1, float32x4_t *a2, float a3, float a4)
{
  if (a2 == a1)
  {
    char v5 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    char v5 = 0;
    unint64_t v6 = a2 - a1;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = a2 - a1;
    }
    for (uint64_t i = a1; ; ++i)
    {
      unint64_t v9 = v4++;
      float32x4_t v10 = *i;
      LODWORD(v11) = HIDWORD(i->i64[0]);
      uint64_t v12 = v6 > v4 ? v9 + 1 : 0;
      float32x4_t v13 = a1[v12];
      if (vabds_f32(v10.f32[0], a3) < 0.00001 && vabds_f32(v11, a4) < 0.00001) {
        break;
      }
      if (vabds_f32(v13.f32[0], a3) < 0.00001 && vabds_f32(v13.f32[1], a4) < 0.00001) {
        break;
      }
      if (v13.f32[1] >= v11) {
        LODWORD(v14) = HIDWORD(i->i64[0]);
      }
      else {
        LODWORD(v14) = HIDWORD(a1[v12].i64[0]);
      }
      if (v14 < a4)
      {
        LODWORD(v15) = v11 >= v13.f32[1] ? HIDWORD(i->i64[0]) : HIDWORD(a1[v12].i64[0]);
        if (v15 >= a4)
        {
          float v16 = v10.f32[0]
              + (float)((float)((float)(a4 - v11) * vsubq_f32(v13, v10).f32[0])
                      / (float)((float)(v13.f32[1] - v11) + 0.00000011921));
          if (vabds_f32(v16, a3) < 0.00001) {
            break;
          }
          if (v16 > a3) {
            v5 ^= 1u;
          }
        }
      }
      if (v7 == v4) {
        return v5 & 1;
      }
    }
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t sub_25B586F3C(void *a1, float *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  sub_25B5873E8(v70, (v2 - *a1) >> 4);
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    unint64_t v6 = v5 >> 4;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    uint64_t v7 = (char *)v70[0] + 4;
    unint64_t v8 = (int *)(*a1 + 4);
    do
    {
      *(v7 - 1) = *(v8 - 1);
      int v9 = *v8;
      v8 += 4;
      _DWORD *v7 = v9;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  sub_25B5873E8(__p, 2uLL);
  uint64_t v10 = *(void *)a2;
  float v11 = (float32x2_t *)__p[0];
  *(_DWORD *)__p[0] = *(void *)a2;
  float v12 = a2[1];
  v11->f32[1] = v12;
  uint64_t v13 = *((void *)a2 + 1);
  v11[1].i32[0] = v13;
  float v14 = a2[3];
  v11[1].f32[1] = v14;
  float v15 = (float *)v70[0];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  float32x2_t v18 = 0;
  uint64_t v19 = v16 - v17;
  uint64_t v20 = v19 >> 4;
  if (v19)
  {
    uint64_t v21 = (float32x2_t *)v70[0];
    uint64_t v22 = v19 >> 4;
    do
    {
      float32x2_t v23 = *v21++;
      float32x2_t v18 = vadd_f32(v18, v23);
      --v22;
    }
    while (v22);
  }
  int32x2_t v24 = (int32x2_t)*v11;
  *(float *)v24.i32 = (float)(unint64_t)v20;
  float32x2_t v25 = vadd_f32(vdiv_f32(v18, (float32x2_t)vdup_lane_s32(v24, 0)), vmul_f32(vadd_f32(vadd_f32(*v11, 0), v11[1]), (float32x2_t)0xBF000000BF000000));
  int32x2_t v26 = vceqz_f32(v25);
  if (v26.i8[0] & v26.i8[4]) {
    float v27 = 1.0;
  }
  else {
    float v27 = v25.f32[0];
  }
  if ((unint64_t)v19 <= 0x10)
  {
    uint64_t v28 = 0;
    float v29 = v25.f32[1];
  }
  else
  {
    uint64_t v28 = 0;
    float v29 = v25.f32[1];
    v25.f32[0] = vmuls_lane_f32(*((float *)v70[0] + 1), v25, 1) + (float)(v27 * *(float *)v70[0]);
    unint64_t v30 = (float *)((char *)v70[0] + 12);
    uint64_t v31 = 1;
    do
    {
      float v32 = v25.f32[1] * *v30;
      if ((float)(v32 + (float)(v27 * *(v30 - 1))) > v25.f32[0])
      {
        uint64_t v28 = v31;
        v25.f32[0] = v32 + (float)(v27 * *(v30 - 1));
      }
      ++v31;
      v30 += 2;
    }
    while (v20 != v31);
  }
  float32x4_t v34 = (float *)((char *)v70[0] + 8 * v28);
  float v35 = *v34;
  float v36 = v34[1];
  float32x2_t v37 = (float *)&v11[(float)((float)-(float)(v29 * v14) - (float)(v27 * *(float *)&v13)) > (float)((float)-(float)(v29 * v12)
                                                                                                  - (float)(v27 * *(float *)&v10))];
  float v38 = v35 - *v37;
  float v39 = v36 - v37[1];
  if ((float)((float)(v29 * v39) + (float)(v38 * v27)) > 0.0)
  {
    unint64_t v40 = 0;
    float v41 = -v38;
    float v42 = -v39;
    char v43 = 1;
    uint64_t v44 = 1;
LABEL_23:
    if (v40 <= 0x3E7) {
      uint64_t v45 = 999;
    }
    else {
      uint64_t v45 = v40;
    }
    float v46 = v39;
    float v47 = v38;
    unint64_t v48 = v40;
    do
    {
      if ((unint64_t)v19 < 0x11)
      {
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v49 = 0;
        float v50 = (float)(v42 * v15[1]) + (float)(v41 * *v15);
        float32x2_t v51 = v15 + 3;
        uint64_t v52 = 1;
        do
        {
          float v53 = v42 * *v51;
          if ((float)(v53 + (float)(v41 * *(v51 - 1))) > v50)
          {
            uint64_t v49 = v52;
            float v50 = v53 + (float)(v41 * *(v51 - 1));
          }
          ++v52;
          v51 += 2;
        }
        while (v20 != v52);
      }
      float32x2_t v54 = vsub_f32(*(float32x2_t *)&v15[2 * v49], v11[(float)((float)-(float)(v42 * v14) - (float)(v41 * *(float *)&v13)) > (float)((float)-(float)(v42 * v12)- (float)(v41 * *(float *)&v10))]);
      *(&v71 + v44) = (uint64_t)v54;
      if (vmlas_n_f32(vmuls_lane_f32(v42, v54, 1), v41, v54.f32[0]) <= 0.00000001) {
        break;
      }
      float v55 = -v54.f32[0];
      float v56 = -v54.f32[1];
      if (v43)
      {
        char v43 = 0;
        uint64_t v33 = 0;
        float v41 = v39 - v54.f32[1];
        float v64 = (float)(v41 * v41) + (float)((float)(v38 - v54.f32[0]) * (float)(v38 - v54.f32[0]));
        float v65 = (float)((float)(v39 - v54.f32[1]) * v56) + (float)(v55 * (float)(v38 - v54.f32[0]));
        float v66 = (float)(v55 * v64) - (float)((float)(v38 - v54.f32[0]) * v65);
        float v42 = (float)(v56 * v64) - (float)((float)(v39 - v54.f32[1]) * v65);
        if ((float)((float)(v42 * v42) + (float)(v66 * v66)) == 0.0) {
          float v42 = -(float)(v38 - v54.f32[0]);
        }
        else {
          float v41 = v66;
        }
        uint64_t v44 = 2;
        BOOL v67 = v40 >= 0x3E7;
        unint64_t v40 = v48 + 1;
        if (v67) {
          goto LABEL_49;
        }
        goto LABEL_23;
      }
      float v57 = *(float *)&v72 - v54.f32[0];
      float v58 = *((float *)&v72 + 1) - v54.f32[1];
      float v59 = v47 - v54.f32[0];
      v54.f32[0] = v46 - v54.f32[1];
      float v60 = (float)((float)(v46 - v54.f32[1]) * (float)(*((float *)&v72 + 1) - v54.f32[1])) + (float)(v57 * v59);
      float v61 = (float)(v54.f32[0] * v54.f32[0]) + (float)(v59 * v59);
      float v41 = (float)(v59 * v60) - (float)(v57 * v61);
      float v42 = (float)((float)(v46 - v54.f32[1]) * v60) - (float)((float)(*((float *)&v72 + 1) - v54.f32[1]) * v61);
      if ((float)((float)(v42 * v56) + (float)(v41 * v55)) < 0.0)
      {
        float v62 = (float)(v58 * v58) + (float)(v57 * v57);
        float v41 = (float)(v57 * v60) - (float)(v59 * v62);
        float v42 = (float)(v58 * v60) - (float)(v54.f32[0] * v62);
        if ((float)((float)(v42 * v56) + (float)(v41 * v55)) < 0.0)
        {
          uint64_t v33 = 1;
          goto LABEL_49;
        }
        float v46 = *((float *)&v72 + 1);
        float v47 = *(float *)&v72;
      }
      uint64_t v72 = v73;
    }
    while (v48++ != v45);
  }
  uint64_t v33 = 0;
LABEL_49:
  __p[1] = v11;
  operator delete(v11);
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  return v33;
}

void sub_25B58731C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B587340(float32x2_t *a1, float32x2_t *a2, int a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  if (a2 == a1) {
    return 0;
  }
  uint64_t v7 = a3;
  float32x2_t v8 = vmul_f32(vadd_f32(a4, a5), (float32x2_t)0x3F0000003F000000);
  if ((unint64_t)(((char *)a2 - (char *)a1) / 40) <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = ((char *)a2 - (char *)a1) / 40;
  }
  for (uint64_t i = a1 + 1; !v7 || !sub_25B40E2B8(i[-1], *i, a6, v8); i += 5)
  {
    --v7;
    if (!--v9) {
      return 0;
    }
  }
  return 1;
}

void *sub_25B5873E8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_25B587460(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_25B58747C(void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  unint64_t v6 = (char *)(*a1)[2];
  if (v5 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_25B3FBC4C();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)*v4) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v13 = (unint64_t)sub_25B460930(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 40 * v10;
    unint64_t v16 = v13 + 40 * v14;
    long long v17 = *a2;
    long long v18 = a2[1];
    *(void *)(v15 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v15 = v17;
    *(_OWORD *)(v15 + 16) = v18;
    uint64_t v9 = (void *)(v15 + 40);
    uint64_t v20 = (char *)*v4;
    uint64_t v19 = (char *)v4[1];
    if (v19 != *v4)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 40);
        long long v22 = *(_OWORD *)(v19 - 24);
        *(void *)(v15 - 8) = *((void *)v19 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        *(_OWORD *)(v15 - 40) = v21;
        v15 -= 40;
        v19 -= 40;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v4;
    }
    *uint64_t v4 = (void *)v15;
    v4[1] = v9;
    v4[2] = (void *)v16;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v7;
    *((_OWORD *)v5 + 1) = v8;
    uint64_t v9 = v5 + 40;
  }
  v4[1] = v9;
  return a1;
}

void sub_25B5875AC(uint64_t a1, float32x2_t **a2, float32x2_t **a3, void *a4, uint64_t a5, void *a6, unint64_t *a7, uint64_t a8)
{
  long long v8 = *(_OWORD *)(a4[1] - 16);
  long long v668 = v8;
  uint64_t v9 = *a2;
  if (a2[1] == *a2)
  {
    uint64_t v51 = a1;
    long long v674 = 0uLL;
    *(void *)&long long v675 = 0;
    v632 = &v674;
    sub_25B413C78((void ***)&v632);
    uint64_t v603 = 0;
    v601 = 0;
    uint64_t v52 = 0;
    float v605 = 0;
  }
  else
  {
    __p = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = &v9[5 * v13];
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
      float32x2_t v15 = v14[1];
      float32x2_t v16 = vsub_f32(v15, *v14);
      int32x2_t v17 = (int32x2_t)vmul_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)v17, (float32x2_t)vdup_lane_s32(v17, 1)).u32[0];
      float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      float32x2_t v20 = vmul_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v632 = (void *)vmls_lane_f32(*v14, v20, *(float32x2_t *)&v8, 0);
      v633 = (char *)vmla_n_f32(v15, v20, *(float *)&v8);
      if (sub_25B586F3C(a6, (float *)&v632))
      {
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v21 = v11 - __p;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v12 - (void)__p) >> 2 > v22) {
            unint64_t v22 = (uint64_t)(v12 - (void)__p) >> 2;
          }
          if (v12 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            unint64_t v23 = (unint64_t)sub_25B3FCAD4(v23);
          }
          else {
            uint64_t v24 = 0;
          }
          float32x2_t v25 = (unint64_t *)(v23 + 8 * v21);
          *float32x2_t v25 = v13;
          int32x2_t v26 = v25 + 1;
          if (v11 == __p)
          {
            float v27 = __p;
          }
          else
          {
            float v27 = __p;
            do
            {
              unint64_t v28 = *--v11;
              *--float32x2_t v25 = v28;
            }
            while (v11 != __p);
          }
          unint64_t v12 = v23 + 8 * v24;
          if (v27) {
            operator delete(v27);
          }
          __p = v25;
          unint64_t v11 = v26;
        }
        else
        {
          *v11++ = v13;
        }
      }
      ++v13;
      uint64_t v9 = *a2;
    }
    while (v13 < 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
    long long v674 = 0uLL;
    *(void *)&long long v675 = 0;
    if (v11 == __p)
    {
      float v605 = 0;
      uint64_t v52 = 0;
      v601 = 0;
      uint64_t v603 = 0;
      uint64_t v51 = a1;
    }
    else
    {
      unint64_t v29 = 0;
      do
      {
        unint64_t v30 = v29++;
        if (v29 >= v11 - __p)
        {
          unint64_t v48 = v11 - __p;
        }
        else
        {
          unint64_t v31 = __p[v30];
          v619 = (void *)v29;
          do
          {
            unint64_t v32 = __p[v29];
            float v33 = sub_25B3FCCE0(&(*a2)[5 * v31], &(*a2)[5 * v32], 0);
            float v34 = *(float *)(a1 + 16);
            BOOL v36 = v33 < v34;
            float v35 = vabds_f32(180.0, v33);
            BOOL v36 = v36 || v35 < v34;
            if (v36)
            {
              float32x2_t v37 = operator new(0x10uLL);
              float v38 = v37 + 2;
              *float32x2_t v37 = v31;
              v37[1] = v32;
              *(void *)&long long v39 = v37;
              *((void *)&v39 + 1) = v37 + 2;
              uint64_t v40 = *((void *)&v674 + 1);
              if (*((void *)&v674 + 1) >= (unint64_t)v675)
              {
                *(_OWORD *)v625 = v39;
                unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v674 + 1) - v674) >> 3);
                unint64_t v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_25B3FBC4C();
                }
                if (0x5555555555555556 * ((uint64_t)(v675 - v674) >> 3) > v43) {
                  unint64_t v43 = 0x5555555555555556 * ((uint64_t)(v675 - v674) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v675 - v674) >> 3) >= 0x555555555555555) {
                  unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v44 = v43;
                }
                v636[0] = &v675;
                uint64_t v45 = (char *)sub_25B413D74(v44);
                float v46 = &v45[24 * v42];
                v632 = v45;
                v633 = v46;
                v635 = (uint64_t *)&v45[24 * v47];
                *(_OWORD *)float v46 = *(_OWORD *)v625;
                *((void *)v46 + 2) = v38;
                v634 = v46 + 24;
                sub_25B43EA54(&v674, &v632);
                uint64_t v41 = *((void *)&v674 + 1);
                sub_25B43EAC4((uint64_t)&v632);
              }
              else
              {
                **((_OWORD **)&v674 + 1) = v39;
                *(void *)(v40 + 16) = v38;
                uint64_t v41 = v40 + 24;
              }
              *((void *)&v674 + 1) = v41;
            }
            ++v29;
          }
          while (v29 < v11 - __p);
          unint64_t v48 = v11 - __p;
          unint64_t v29 = (unint64_t)v619;
        }
      }
      while (v29 < v48);
      uint64_t v50 = *((void *)&v674 + 1);
      uint64_t v49 = v674;
      uint64_t v51 = a1;
      if (*((void *)&v674 + 1) != (void)v674)
      {
        float v605 = 0;
        uint64_t v52 = 0;
        unint64_t v600 = 0;
        v601 = 0;
        uint64_t v603 = 0;
        unint64_t v599 = 0;
        uint64_t v53 = 0;
        float v54 = 2.0;
        while (1)
        {
          float v55 = (uint64_t *)(v49 + 24 * v53);
          uint64_t v56 = v55[1];
          uint64_t v622 = v55 + 1;
          uint64_t v57 = *v55;
          unint64_t v58 = v56 - *v55;
          if (v58 - 25 >= 0xFFFFFFFFFFFFFFF7 && (int)(v58 >> 3) >= 2) {
            break;
          }
LABEL_182:
          if (++v53 >= 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 3)) {
            goto LABEL_187;
          }
        }
        uint64_t v595 = v53;
        uint64_t v59 = 0;
        uint64_t v60 = 1;
LABEL_52:
        unint64_t v61 = (unint64_t)(v56 - v57) >> 3;
        uint64_t v612 = v59 + 1;
        if (v59 + 1 >= (int)v61) {
          goto LABEL_180;
        }
        uint64_t v607 = v60;
        while (1)
        {
          sub_25B40E03C((float **)&v670, &(*a2)[5 * *(void *)(v57 + 8 * v59)], &(*a2)[5 * *(void *)(v57 + 8 * v60)]);
          float v62 = v670;
          long long v63 = (float *)((char *)v670 + 4);
          BOOL v64 = v670 == v671 || v63 == v671;
          float v65 = v670;
          if (!v64)
          {
            float v66 = *(float *)v670;
            float v65 = v670;
            BOOL v67 = (float *)((char *)v670 + 4);
            do
            {
              float v68 = *v67++;
              float v69 = v68;
              if (v68 < v66)
              {
                float v66 = v69;
                float v65 = v63;
              }
              long long v63 = v67;
            }
            while (v67 != v671);
          }
          unint64_t v70 = (unint64_t)(v65 - (unsigned char *)v670) >> 2;
          uint64_t v71 = *a2;
          uint64_t v72 = (uint64_t)&(*a2)[5 * *(void *)(*v55 + 8 * v59)];
          float32x2_t v74 = *(float32x2_t *)(v72 + 8);
          uint64_t v73 = (float32x2_t *)(v72 + 8);
          float32x2_t v75 = v74;
          if ((v70 + 1) < 3) {
            uint64_t v73 = &(*a2)[5 * *(void *)(*v55 + 8 * v59)];
          }
          float32x2_t v76 = *v73;
          long long v77 = &v71[5 * *(void *)(*v55 + 8 * v60)];
          if (v70) {
            BOOL v78 = v77 + 1;
          }
          else {
            BOOL v78 = v77;
          }
          float32x2_t v79 = *v78;
          int32x2_t v80 = (int32x2_t)vsub_f32(v76, *v78);
          v81.i32[0] = vdup_lane_s32(v80, 1).u32[0];
          v81.f32[1] = -*(float *)v80.i32;
          int32x2_t v82 = (int32x2_t)vmul_f32(v81, v81);
          v82.i32[0] = vadd_f32((float32x2_t)v82, (float32x2_t)vdup_lane_s32(v82, 1)).u32[0];
          float32x2_t v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
          float32x2_t v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
          float32x2_t v85 = vmul_n_f32(v81, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
          float32x2_t v86 = vmul_f32(vadd_f32((*a2)[5 * *(void *)(*v55 + 8 * v59)], v75), (float32x2_t)0x3F0000003F000000);
          float32x2_t v87 = vmul_f32(vadd_f32(*v77, v77[1]), (float32x2_t)0x3F0000003F000000);
          float32x2_t v88 = (float32x2_t)v668;
          float32x2_t v89 = vsub_f32(v76, *(float32x2_t *)&v668);
          float32x2_t v90 = vmul_f32(v89, v89);
          v90.f32[0] = sqrtf(vaddv_f32(v90));
          float32x2_t v91 = vsub_f32(*v78, *(float32x2_t *)&v668);
          float32x2_t v92 = vmul_f32(v91, v91);
          v92.f32[0] = sqrtf(vaddv_f32(v92));
          float32x2_t v93 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v92, v90), 0), (int8x8_t)vsub_f32(v87, v86), (int8x8_t)vsub_f32(v86, v87));
          int32x2_t v94 = (int32x2_t)vmul_f32(v85, v93);
          int8x8_t v95 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(0, vadd_f32((float32x2_t)v94, (float32x2_t)vdup_lane_s32(v94, 1))), 0), (int8x8_t)vneg_f32(v85), (int8x8_t)v85);
          DWORD2(v678) = 0;
          *(void *)&long long v678 = 0;
          BYTE12(v678) = -1;
          int32x2_t v626 = (int32x2_t)v76;
          *(float32x2_t *)&long long v677 = v76;
          *((float32x2_t *)&v677 + 1) = v79;
          float32x2_t v96 = v71[5 * *(void *)(*v55 + 8 * v60) + 2];
          float32x2_t v97 = v71[5 * *(void *)(*v55 + 8 * v59) + 2];
          *(int8x8_t *)&long long v678 = vbsl_s8((int8x8_t)vcgt_f32(v97, v96), (int8x8_t)v96, (int8x8_t)v97);
          int8x8_t v679 = v95;
          uint64_t v98 = *(void *)(*v55 + 8 * v59);
          float32x2_t v99 = &v71[5 * v98];
          float32x2_t v100 = v99[1];
          float32x2_t v101 = vsub_f32(*v99, v100);
          float v102 = sqrtf(vaddv_f32(vmul_f32(v101, v101)));
          if (v102 <= 0.2) {
            goto LABEL_176;
          }
          float32x2_t v103 = &v71[5 * *(void *)(*v55 + 8 * v60)];
          float32x2_t v104 = v103[1];
          float32x2_t v105 = vsub_f32(*v103, v104);
          float v106 = sqrtf(vaddv_f32(vmul_f32(v105, v105)));
          if (v106 <= 0.2) {
            goto LABEL_176;
          }
          float v107 = sqrtf(vaddv_f32(vmul_f32((float32x2_t)v80, (float32x2_t)v80)));
          if (v102 >= v107) {
            float v102 = v107;
          }
          if (v106 < v102) {
            float v102 = v106;
          }
          if (v107 > v54) {
            goto LABEL_176;
          }
          if (v102 < 0.1) {
            goto LABEL_176;
          }
          int32x2_t v108 = (int32x2_t)vmul_f32(vadd_f32(*v99, v100), (float32x2_t)0x3F0000003F000000);
          int32x2_t v109 = (int32x2_t)vmul_f32(vadd_f32(*v103, v104), (float32x2_t)0x3F0000003F000000);
          float32x2_t v110 = vmla_lane_f32(vmul_n_f32(vsub_f32((float32x2_t)vzip2_s32(v108, v109), (float32x2_t)vdup_lane_s32(v626, 1)), vsub_f32(v79, (float32x2_t)v626).f32[0]), vsub_f32((float32x2_t)vzip1_s32(v108, v109), (float32x2_t)vdup_lane_s32(v626, 0)), (float32x2_t)v80, 1);
          if (vmul_lane_f32(v110, v110, 1).f32[0] > 0.0) {
            goto LABEL_176;
          }
          if (a2[1] == v71)
          {
LABEL_85:
            float v114 = sub_25B3FCCE0((float32x2_t *)&v677, &v71[5 * v98], 0);
            float v115 = sub_25B3FCCE0((float32x2_t *)&v677, &(*a2)[5 * *(void *)(*v55 + 8 * v60)], 0);
            if (v115 >= v114) {
              float v116 = v114;
            }
            else {
              float v116 = v115;
            }
            float v117 = *(float *)(v51 + 16);
            if (v116 < (float)(90.0 - v117)) {
              goto LABEL_176;
            }
            if (v114 >= v115) {
              float v115 = v114;
            }
            if (v115 > (float)(180.0 - v117)) {
              goto LABEL_176;
            }
            float32x2_t v118 = *a2;
            LODWORD(v112) = -1;
          }
          else
          {
            uint64_t v111 = 0;
            unint64_t v112 = 0;
            while (1)
            {
              sub_25B477E0C((uint64_t)&v632, &v71[v111], (float32x2_t *)&v677);
              if (*(float *)&v632 >= 0.9 && *((float *)&v634 + 1) <= 0.2 && *(float *)&v635 < 10.0) {
                break;
              }
              ++v112;
              uint64_t v71 = *a2;
              v111 += 5;
              if (0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2) <= v112)
              {
                uint64_t v98 = *(void *)(*v55 + 8 * v59);
                uint64_t v51 = a1;
                goto LABEL_85;
              }
            }
            float32x2_t v118 = *a2;
            float v119 = &(*a2)[5 * v112];
            long long v677 = *(_OWORD *)v119->f32;
            long long v678 = *(_OWORD *)v119[2].f32;
            float32x2_t v79 = *(float32x2_t *)((char *)&v677 + 8);
            int32x2_t v626 = (int32x2_t)v677;
            float32x2_t v120 = vsub_f32(*(float32x2_t *)((char *)&v677 + 8), *(float32x2_t *)&v677);
            int32x2_t v121 = (int32x2_t)vmul_f32(v120, v120);
            *(float *)v121.i32 = sqrtf(vaddv_f32((float32x2_t)v121));
            float32x2_t v122 = vdiv_f32(vsub_f32((float32x2_t)vext_s8(*(int8x8_t *)&v677, *(int8x8_t *)((char *)&v677 + 8), 4uLL), (float32x2_t)vext_s8(*(int8x8_t *)((char *)&v677 + 8), *(int8x8_t *)&v677, 4uLL)), (float32x2_t)vdup_lane_s32(v121, 0));
            int32x2_t v123 = (int32x2_t)vmul_f32(v122, v93);
            int8x8_t v95 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(0, vadd_f32((float32x2_t)v123, (float32x2_t)vdup_lane_s32(v123, 1))), 0), (int8x8_t)vneg_f32(v122), (int8x8_t)v122);
            int8x8_t v679 = v95;
            if (v118[5 * v112 + 3].i8[4] != 3) {
              goto LABEL_137;
            }
          }
          if (v118[5 * *(void *)(*v55 + 8 * v59) + 3].i8[4] != 3
            || v118[5 * *(void *)(*v55 + 8 * v60) + 3].i8[4] != 3)
          {
            if (a2[1] == v118)
            {
              float32x4_t v159 = v118;
            }
            else
            {
              uint64_t v615 = v52;
              unint64_t v124 = 0;
              char v610 = 1;
              do
              {
                if (*(void *)(*v55 + 8 * v59) != v124
                  && v124 != v112
                  && *(void *)(*v55 + 8 * v60) != v124)
                {
                  float v125 = &v118[5 * v124];
                  sub_25B40E03C((float **)&v632, (float32x2_t *)&v677, v125);
                  uint64_t v126 = v632;
                  __float2 v127 = (float *)v632;
                  if (v632 != v633)
                  {
                    float32x2_t v128 = (float *)((char *)v632 + 4);
                    __float2 v127 = (float *)v632;
                    if ((char *)v632 + 4 != v633)
                    {
                      float v129 = *(float *)v632;
                      __float2 v127 = (float *)v632;
                      unint64_t v130 = (float *)((char *)v632 + 4);
                      do
                      {
                        float v131 = *v130++;
                        float v132 = v131;
                        if (v131 < v129)
                        {
                          float v129 = v132;
                          __float2 v127 = v128;
                        }
                        float32x2_t v128 = v130;
                      }
                      while (v130 != (float *)v633);
                    }
                  }
                  float v133 = *v127;
                  float32x2_t v134 = *v125;
                  float32x2_t v135 = v125[1];
                  float32x2_t v136 = vsub_f32(*v125, v135);
                  double v137 = COERCE_DOUBLE(vmul_f32(v136, v136));
                  if (sqrtf(vaddv_f32(*(float32x2_t *)&v137)) >= 0.3 || (double v137 = v133, v133 >= 0.00001))
                  {
                    LODWORD(v137) = *(_DWORD *)(a1 + 20);
                    if (v133 < *(float *)&v137
                      || (int32x2_t v604 = *(int32x2_t *)&v137, sub_25B40E2B8((float32x2_t)v626, v79, v134, v135)))
                    {
                      char v610 = 0;
                      int v138 = 23;
                    }
                    else
                    {
                      float32x2_t v139 = vsub_f32(v135, v134);
                      float v140 = vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v626, v134), v139));
                      float v141 = vaddv_f32(vmul_f32(v139, v139));
                      if (v141 < 0.000001) {
                        float v141 = 0.000001;
                      }
                      float32x2_t v142 = vmla_n_f32(v134, v139, v140 / v141);
                      float32x2_t v143 = vsub_f32(v142, v134);
                      float32x2_t v144 = vsub_f32(v142, v135);
                      if (vaddv_f32(vmul_f32(v143, v144)) > 0.00001)
                      {
                        int32x2_t v145 = (int32x2_t)vmul_f32(v143, v143);
                        int32x2_t v146 = (int32x2_t)vmul_f32(v144, v144);
                        int32x2_t v147 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v145, v146), (float32x2_t)vzip2_s32(v145, v146)));
                        float32x2_t v142 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v147, 1), (float32x2_t)v147)), 0), (int8x8_t)v135, (int8x8_t)v134);
                      }
                      float32x2_t v148 = vmla_n_f32(v134, v139, vaddv_f32(vmul_f32(vsub_f32(v79, v134), v139)) / v141);
                      float32x2_t v149 = vsub_f32(v148, v134);
                      float32x2_t v150 = vsub_f32(v148, v135);
                      if (vaddv_f32(vmul_f32(v149, v150)) > 0.00001)
                      {
                        int32x2_t v151 = (int32x2_t)vmul_f32(v149, v149);
                        int32x2_t v152 = (int32x2_t)vmul_f32(v150, v150);
                        int32x2_t v153 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v151, v152), (float32x2_t)vzip2_s32(v151, v152)));
                        float32x2_t v148 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v153, 1), (float32x2_t)v153)), 0), (int8x8_t)v135, (int8x8_t)v134);
                      }
                      float32x2_t v154 = vsub_f32(v142, (float32x2_t)v626);
                      int32x2_t v155 = (int32x2_t)vmul_f32(v154, v154);
                      float32x2_t v156 = vsub_f32(v148, v79);
                      int32x2_t v157 = (int32x2_t)vmul_f32(v156, v156);
                      int8x8_t v158 = vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32(v604, 0), vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v157, v155), (float32x2_t)vzip2_s32(v157, v155)))));
                      v610 &= v158.i8[4] & v158.i8[0];
                      int v138 = (v158.i32[1] & v158.i32[0] & 1) != 0 ? 0 : 23;
                    }
                  }
                  else
                  {
                    int v138 = 25;
                  }
                  float v54 = 2.0;
                  if (v126) {
                    operator delete(v126);
                  }
                  if (v138 != 25 && v138) {
                    break;
                  }
                }
                ++v124;
                float32x2_t v118 = *a2;
              }
              while (0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2) > v124);
              if ((v610 & 1) == 0)
              {
                uint64_t v52 = v615;
                uint64_t v51 = a1;
                goto LABEL_176;
              }
              float32x4_t v159 = *a2;
              float32x2_t v118 = a2[1];
              uint64_t v52 = v615;
            }
            char v160 = sub_25B587340(v159, v118, v112, (float32x2_t)v626, v79, v88);
            float v161 = sub_25B3FCCE0((float32x2_t *)&v677, (float32x2_t *)&v668, 0);
            if ((v160 & 1) != 0 || (float v163 = *(float *)(a1 + 12), v161 <= v163) || v161 >= (float)(180.0 - v163))
            {
              int8x8_t v162 = (int8x8_t)v678;
              if ((unint64_t)v52 >= v600)
              {
                unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * (v52 - v605) + 1;
                if (v164 > 0x666666666666666) {
                  sub_25B3FBC4C();
                }
                if (0x999999999999999ALL * ((uint64_t)(v600 - (void)v605) >> 3) > v164) {
                  unint64_t v164 = 0x999999999999999ALL * ((uint64_t)(v600 - (void)v605) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v600 - (void)v605) >> 3) >= 0x333333333333333) {
                  unint64_t v165 = 0x666666666666666;
                }
                else {
                  unint64_t v165 = v164;
                }
                if (v165) {
                  unint64_t v165 = (unint64_t)sub_25B460930(v165);
                }
                else {
                  uint64_t v166 = 0;
                }
                unint64_t v167 = v165 + 8 * (v52 - v605);
                *(_OWORD *)unint64_t v167 = v677;
                *(int8x8_t *)(v167 + 16) = v162;
                *(_DWORD *)(v167 + 24) = 0;
                *(unsigned char *)(v167 + 28) = 2;
                *(int8x8_t *)(v167 + 32) = v95;
                if (v52 == v605)
                {
                  float32x2_t v172 = (int8x8_t *)(v165 + 8 * (v52 - v605));
                  float32x2_t v169 = v605;
                }
                else
                {
                  unint64_t v168 = v165 + 8 * (v52 - v605);
                  float32x2_t v169 = v605;
                  do
                  {
                    long long v170 = *(_OWORD *)v52[-5].i8;
                    long long v171 = *(_OWORD *)v52[-3].i8;
                    float32x2_t v172 = (int8x8_t *)(v168 - 40);
                    *(int8x8_t *)(v168 - 8) = v52[-1];
                    *(_OWORD *)(v168 - 24) = v171;
                    *(_OWORD *)(v168 - 40) = v170;
                    v52 -= 5;
                    v168 -= 40;
                  }
                  while (v52 != v605);
                }
                unint64_t v600 = v165 + 40 * v166;
                uint64_t v52 = (int8x8_t *)(v167 + 40);
                if (v169) {
                  operator delete(v169);
                }
                float v605 = v172;
              }
              else
              {
                *(_OWORD *)v52->i8 = v677;
                v52[2] = v162;
                v52[3].i32[0] = 0;
                v52[3].i8[4] = 2;
                v52[4] = v95;
                v52 += 5;
              }
              if ((unint64_t)v603 >= v599)
              {
                uint64_t v174 = (v603 - v601) >> 2;
                unint64_t v175 = v174 + 1;
                if ((unint64_t)(v174 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v599 - (void)v601) >> 1 > v175) {
                  unint64_t v175 = (uint64_t)(v599 - (void)v601) >> 1;
                }
                if (v599 - (unint64_t)v601 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v176 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v176 = v175;
                }
                if (v176) {
                  unint64_t v176 = (unint64_t)sub_25B3FBC64(v176);
                }
                else {
                  uint64_t v177 = 0;
                }
                float32x2_t v178 = (char *)(v176 + 4 * v174);
                *(_DWORD *)float32x2_t v178 = v112;
                int32x2_t v173 = v178 + 4;
                float32x2_t v179 = v603;
                if (v603 == v601)
                {
                  float v180 = v601;
                  uint64_t v51 = a1;
                }
                else
                {
                  float v180 = v601;
                  uint64_t v51 = a1;
                  do
                  {
                    int v181 = *((_DWORD *)v179 - 1);
                    v179 -= 4;
                    *((_DWORD *)v178 - 1) = v181;
                    v178 -= 4;
                  }
                  while (v179 != v601);
                }
                unint64_t v599 = v176 + 4 * v177;
                if (v180) {
                  operator delete(v180);
                }
                v601 = v178;
              }
              else
              {
                *(_DWORD *)uint64_t v603 = v112;
                int32x2_t v173 = v603 + 4;
                uint64_t v51 = a1;
              }
              float v62 = v670;
              uint64_t v603 = v173;
              goto LABEL_176;
            }
LABEL_137:
            uint64_t v51 = a1;
            goto LABEL_176;
          }
          uint64_t v51 = a1;
LABEL_176:
          if (v62) {
            operator delete(v62);
          }
          ++v60;
          uint64_t v56 = *v622;
          uint64_t v57 = *v55;
          unint64_t v61 = (unint64_t)(*v622 - *v55) >> 3;
          if ((int)v60 >= (int)v61)
          {
            uint64_t v60 = v607;
LABEL_180:
            ++v60;
            ++v59;
            if (v612 >= (int)v61 - 1)
            {
              uint64_t v50 = *((void *)&v674 + 1);
              uint64_t v49 = v674;
              uint64_t v53 = v595;
              goto LABEL_182;
            }
            goto LABEL_52;
          }
        }
      }
      float v605 = 0;
      uint64_t v52 = 0;
      v601 = 0;
      uint64_t v603 = 0;
    }
LABEL_187:
    v632 = &v674;
    sub_25B413C78((void ***)&v632);
    if (__p) {
      operator delete(__p);
    }
  }
  float32x2_t v182 = (void *)(v51 + 136);
  BOOL v183 = *(void **)(v51 + 144);
  if ((unint64_t)v183 >= *(void *)(v51 + 152))
  {
    uint64_t v184 = sub_25B4F1C44((void *)(v51 + 136), a5);
  }
  else
  {
    void *v183 = 0;
    v183[1] = 0;
    v183[2] = 0;
    sub_25B40EE6C(v183, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
    uint64_t v184 = (uint64_t)(v183 + 3);
    *(void *)(v51 + 144) = v183 + 3;
  }
  *(void *)(v51 + 144) = v184;
  long long v671 = 0;
  long long v670 = 0;
  unint64_t v672 = 0;
  float32x2_t v185 = (long long *)*a2;
  float32x2_t v186 = (long long *)a2[1];
  v632 = &v670;
  unint64_t v616 = v52;
  if (v185 == v186)
  {
    float32x2_t v187 = v603;
LABEL_340:
    uint64_t v309 = 0;
    float v274 = 0;
    uint64_t v310 = 0;
    unint64_t v311 = 0;
    unint64_t v669 = 0;
    long long v623 = 0u;
    long long v668 = 0u;
    goto LABEL_460;
  }
  float32x2_t v187 = v603;
  do
  {
    sub_25B58747C((void ***)&v632, v185);
    float32x2_t v185 = (long long *)((char *)v185 + 40);
  }
  while (v185 != v186);
  float32x2_t v188 = v671;
  float v189 = v670;
  if (v671 == v670) {
    goto LABEL_340;
  }
  uint64_t v190 = *a3;
  unint64_t v608 = v182;
  if (a3[1] != *a3)
  {
    unint64_t v191 = 0;
    do
    {
      v632 = 0;
      v633 = 0;
      v634 = 0;
      unint64_t v192 = (long long *)v670;
      uint64_t v193 = (long long *)v671;
      *(void *)&long long v677 = &v632;
      if (v670 == v671)
      {
        long long v671 = v670;
      }
      else
      {
        uint64_t v194 = &v190[2 * v191];
        do
        {
          sub_25B58747C((void ***)&v677, v192);
          unint64_t v192 = (long long *)((char *)v192 + 40);
        }
        while (v192 != v193);
        long long v195 = (int8x8_t *)v670;
        uint64_t i = (char *)v632;
        long long v671 = v670;
        if (v633 != v632)
        {
          uint64_t v197 = 0;
          float32x2_t v198 = *v194;
          float32x2_t v199 = v194[1];
          if ((unint64_t)((v633 - (unsigned char *)v632) / 40) <= 1) {
            uint64_t v200 = 1;
          }
          else {
            uint64_t v200 = (v633 - (unsigned char *)v632) / 40;
          }
          uint64_t v201 = (float32x2_t *)((char *)v632 + 8);
          while (1)
          {
            float32x2_t v202 = v201[-1];
            float32x2_t v203 = *v201;
            float v204 = sub_25B40DB9C(v198, v202, *v201, 0.00001);
            float v205 = sub_25B40DB9C(v199, v202, v203, 0.00001);
            if (v204 < 0.05 && v205 < 0.05) {
              break;
            }
            ++v197;
            v201 += 5;
            if (v200 == v197) {
              goto LABEL_288;
            }
          }
          char v206 = &i[40 * v197];
          float32x2_t v207 = *(float32x2_t *)v206;
          float32x2_t v208 = vsub_f32(*(float32x2_t *)v206, v198);
          int32x2_t v209 = (int32x2_t)vmul_f32(v208, v208);
          float32x2_t v210 = vsub_f32(*(float32x2_t *)v206, v199);
          int32x2_t v211 = (int32x2_t)vmul_f32(v210, v210);
          int32x2_t v212 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v209, v211), (float32x2_t)vzip2_s32(v209, v211)));
          long long v677 = *((_OWORD *)v206 + 1);
          *(void *)&long long v678 = *((void *)v206 + 4);
          long long v674 = *((_OWORD *)v206 + 1);
          *(void *)&long long v675 = *((void *)v206 + 4);
          if (vcgt_f32((float32x2_t)vdup_lane_s32(v212, 1), (float32x2_t)v212).u8[0]) {
            unsigned int v213 = -1;
          }
          else {
            unsigned int v213 = 0;
          }
          int8x8_t v214 = *(int8x8_t *)(v206 + 8);
          if (v197)
          {
            uint64_t v215 = 0;
            do
            {
              __int32 v216 = (char *)v632 + 40 * v215;
              if ((unint64_t)v195 >= v672)
              {
                float32x2_t v219 = (int8x8_t *)v670;
                unint64_t v220 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v195 - (unsigned char *)v670) >> 3);
                unint64_t v221 = v220 + 1;
                if (v220 + 1 > 0x666666666666666) {
                  sub_25B3FBC4C();
                }
                if (0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3) > v221) {
                  unint64_t v221 = 0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v672 - (void)v670) >> 3) >= 0x333333333333333) {
                  unint64_t v222 = 0x666666666666666;
                }
                else {
                  unint64_t v222 = v221;
                }
                if (v222)
                {
                  unint64_t v222 = (unint64_t)sub_25B460930(v222);
                  long long v195 = (int8x8_t *)v671;
                  float32x2_t v219 = (int8x8_t *)v670;
                }
                else
                {
                  uint64_t v223 = 0;
                }
                unint64_t v224 = v222 + 40 * v220;
                long long v225 = *(_OWORD *)v216;
                long long v226 = *((_OWORD *)v216 + 1);
                *(void *)(v224 + 32) = *((void *)v216 + 4);
                *(_OWORD *)unint64_t v224 = v225;
                *(_OWORD *)(v224 + 16) = v226;
                if (v195 == v219)
                {
                  float32x2_t v230 = (void *)(v222 + 40 * v220);
                  uint64_t v52 = v616;
                }
                else
                {
                  unint64_t v227 = v222 + 40 * v220;
                  uint64_t v52 = v616;
                  do
                  {
                    long long v228 = *(_OWORD *)v195[-5].i8;
                    long long v229 = *(_OWORD *)v195[-3].i8;
                    float32x2_t v230 = (void *)(v227 - 40);
                    *(int8x8_t *)(v227 - 8) = v195[-1];
                    *(_OWORD *)(v227 - 24) = v229;
                    *(_OWORD *)(v227 - 40) = v228;
                    v195 -= 5;
                    v227 -= 40;
                  }
                  while (v195 != v219);
                }
                long long v195 = (int8x8_t *)(v224 + 40);
                long long v670 = v230;
                long long v671 = (void *)(v224 + 40);
                unint64_t v672 = v222 + 40 * v223;
                if (v219) {
                  operator delete(v219);
                }
              }
              else
              {
                long long v217 = *(_OWORD *)v216;
                long long v218 = *((_OWORD *)v216 + 1);
                v195[4] = *(int8x8_t *)(v216 + 32);
                *(_OWORD *)v195->i8 = v217;
                *(_OWORD *)v195[2].i8 = v218;
                v195 += 5;
                uint64_t v52 = v616;
              }
              long long v671 = v195;
              ++v215;
            }
            while (v215 != v197);
          }
          int8x8_t v231 = (int8x8_t)vdup_n_s32(v213);
          int8x8_t v232 = vbsl_s8(v231, (int8x8_t)v198, (int8x8_t)v199);
          if ((unint64_t)v195 >= v672)
          {
            unint64_t v235 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v195 - (unsigned char *)v670) >> 3);
            unint64_t v236 = v235 + 1;
            if (v235 + 1 > 0x666666666666666) {
              goto LABEL_769;
            }
            if (0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3) > v236) {
              unint64_t v236 = 0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v672 - (void)v670) >> 3) >= 0x333333333333333) {
              unint64_t v237 = 0x666666666666666;
            }
            else {
              unint64_t v237 = v236;
            }
            if (v237) {
              unint64_t v237 = (unint64_t)sub_25B460930(v237);
            }
            else {
              uint64_t v238 = 0;
            }
            float32x2_t v239 = (float32x2_t *)(v237 + 40 * v235);
            float32x2_t *v239 = v207;
            v239[1] = (float32x2_t)v232;
            *(_OWORD *)v239[2].f32 = v677;
            v239[4] = (float32x2_t)v678;
            float32x2_t v240 = (char *)v671;
            float32x2_t v241 = (char *)v670;
            int32x2_t v242 = v239;
            if (v671 != v670)
            {
              do
              {
                long long v243 = *(_OWORD *)(v240 - 40);
                long long v244 = *(_OWORD *)(v240 - 24);
                v242[-1] = *(float32x2_t *)(v240 - 8);
                *(_OWORD *)v242[-3].f32 = v244;
                *(_OWORD *)v242[-5].f32 = v243;
                v242 -= 5;
                v240 -= 40;
              }
              while (v240 != v241);
              float32x2_t v240 = v241;
            }
            float32x2_t v234 = (int8x8_t *)&v239[5];
            long long v670 = v242;
            long long v671 = &v239[5];
            unint64_t v672 = v237 + 40 * v238;
            if (v240) {
              operator delete(v240);
            }
          }
          else
          {
            int8x8_t *v195 = (int8x8_t)v207;
            v195[1] = v232;
            int8x8_t v233 = (int8x8_t)v678;
            *(_OWORD *)v195[2].i8 = v677;
            v195[4] = v233;
            float32x2_t v234 = v195 + 5;
          }
          int8x8_t v245 = vbsl_s8(v231, (int8x8_t)v199, (int8x8_t)v198);
          long long v671 = v234;
          if ((unint64_t)v234 >= v672)
          {
            unint64_t v248 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v234 - (unsigned char *)v670) >> 3);
            unint64_t v249 = v248 + 1;
            if (v248 + 1 > 0x666666666666666) {
LABEL_769:
            }
              sub_25B3FBC4C();
            if (0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3) > v249) {
              unint64_t v249 = 0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v672 - (void)v670) >> 3) >= 0x333333333333333) {
              unint64_t v250 = 0x666666666666666;
            }
            else {
              unint64_t v250 = v249;
            }
            if (v250) {
              unint64_t v250 = (unint64_t)sub_25B460930(v250);
            }
            else {
              uint64_t v251 = 0;
            }
            unint64_t v252 = v250 + 40 * v248;
            *(int8x8_t *)unint64_t v252 = v245;
            *(int8x8_t *)(v252 + 8) = v214;
            *(_OWORD *)(v252 + 16) = v674;
            *(void *)(v252 + 32) = v675;
            int32x2_t v253 = (char *)v671;
            int32x2_t v254 = (char *)v670;
            float32x2_t v255 = (char *)v252;
            if (v671 != v670)
            {
              do
              {
                long long v256 = *(_OWORD *)(v253 - 40);
                long long v257 = *(_OWORD *)(v253 - 24);
                *((void *)v255 - 1) = *((void *)v253 - 1);
                *(_OWORD *)(v255 - 24) = v257;
                *(_OWORD *)(v255 - 40) = v256;
                v255 -= 40;
                v253 -= 40;
              }
              while (v253 != v254);
              int32x2_t v253 = v254;
            }
            float v247 = (int8x8_t *)(v252 + 40);
            long long v670 = v255;
            long long v671 = (void *)(v252 + 40);
            unint64_t v672 = v250 + 40 * v251;
            if (v253) {
              operator delete(v253);
            }
          }
          else
          {
            *float32x2_t v234 = v245;
            v234[1] = v214;
            int8x8_t v246 = (int8x8_t)v675;
            *(_OWORD *)v234[2].i8 = v674;
            v234[4] = v246;
            float v247 = v234 + 5;
          }
          long long v671 = v247;
          unint64_t v258 = (v197 + 1);
          for (uint64_t i = (char *)v632; v258 < 0xCCCCCCCCCCCCCCCDLL * ((v633 - (unsigned char *)v632) >> 3); uint64_t i = (char *)v632)
          {
            int32x2_t v259 = &i[40 * v258];
            if ((unint64_t)v247 >= v672)
            {
              float32x2_t v262 = (int8x8_t *)v670;
              unint64_t v263 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v247 - (unsigned char *)v670) >> 3);
              unint64_t v264 = v263 + 1;
              if (v263 + 1 > 0x666666666666666) {
                sub_25B3FBC4C();
              }
              if (0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3) > v264) {
                unint64_t v264 = 0x999999999999999ALL * ((uint64_t)(v672 - (void)v670) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v672 - (void)v670) >> 3) >= 0x333333333333333) {
                unint64_t v265 = 0x666666666666666;
              }
              else {
                unint64_t v265 = v264;
              }
              if (v265)
              {
                unint64_t v265 = (unint64_t)sub_25B460930(v265);
                float v247 = (int8x8_t *)v671;
                float32x2_t v262 = (int8x8_t *)v670;
              }
              else
              {
                uint64_t v266 = 0;
              }
              unint64_t v267 = v265 + 40 * v263;
              long long v268 = *(_OWORD *)v259;
              long long v269 = *((_OWORD *)v259 + 1);
              *(void *)(v267 + 32) = *((void *)v259 + 4);
              *(_OWORD *)unint64_t v267 = v268;
              *(_OWORD *)(v267 + 16) = v269;
              if (v247 == v262)
              {
                float32x2_t v273 = (void *)(v265 + 40 * v263);
              }
              else
              {
                unint64_t v270 = v265 + 40 * v263;
                do
                {
                  long long v271 = *(_OWORD *)v247[-5].i8;
                  long long v272 = *(_OWORD *)v247[-3].i8;
                  float32x2_t v273 = (void *)(v270 - 40);
                  *(int8x8_t *)(v270 - 8) = v247[-1];
                  *(_OWORD *)(v270 - 24) = v272;
                  *(_OWORD *)(v270 - 40) = v271;
                  v247 -= 5;
                  v270 -= 40;
                }
                while (v247 != v262);
              }
              float v247 = (int8x8_t *)(v267 + 40);
              long long v670 = v273;
              long long v671 = (void *)(v267 + 40);
              unint64_t v672 = v265 + 40 * v266;
              if (v262) {
                operator delete(v262);
              }
            }
            else
            {
              long long v260 = *(_OWORD *)v259;
              long long v261 = *((_OWORD *)v259 + 1);
              v247[4] = *(int8x8_t *)(v259 + 32);
              *(_OWORD *)v247->i8 = v260;
              *(_OWORD *)v247[2].i8 = v261;
              v247 += 5;
            }
            long long v671 = v247;
            ++v258;
          }
        }
        if (i)
        {
LABEL_288:
          v633 = i;
          operator delete(i);
        }
      }
      ++v191;
      uint64_t v190 = *a3;
    }
    while (v191 < ((char *)a3[1] - (char *)*a3) >> 4);
    float32x2_t v188 = v671;
    float v189 = v670;
    float32x2_t v187 = v603;
  }
  unint64_t v669 = 0;
  long long v668 = 0u;
  if (v188 == v189)
  {
    long long v623 = 0uLL;
    uint64_t v309 = 0;
    float v274 = 0;
    uint64_t v310 = 0;
    unint64_t v311 = 0;
    goto LABEL_460;
  }
  float v274 = 0;
  float v275 = 0;
  unint64_t v276 = 0;
  unint64_t v277 = 0;
  do
  {
    uint64_t v278 = (float32x2_t *)&v189[40 * v277];
    float32x2_t v279 = vsub_f32(*v278, v278[1]);
    if (sqrtf(vaddv_f32(vmul_f32(v279, v279))) > 0.06)
    {
      if ((unint64_t)v275 >= v276)
      {
        int32x2_t v280 = v274;
        uint64_t v281 = (v275 - v274) >> 4;
        unint64_t v282 = v281 + 1;
        v627 = v280;
        if ((unint64_t)(v281 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        unint64_t v283 = v276 - (void)v280;
        unint64_t v284 = (uint64_t)(v276 - (void)v280) >> 3;
        if (v284 > v282) {
          unint64_t v282 = v284;
        }
        if (v283 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v285 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v285 = v282;
        }
        if (v285) {
          unint64_t v285 = (unint64_t)sub_25B3FFAEC(v285);
        }
        else {
          uint64_t v286 = 0;
        }
        float v287 = (_OWORD *)(v285 + 16 * v281);
        *float v287 = *(_OWORD *)v278->f32;
        if (v275 == v627)
        {
          float v274 = (char *)(v285 + 16 * v281);
        }
        else
        {
          unint64_t v288 = v285 + 16 * v281;
          do
          {
            float v274 = (char *)(v288 - 16);
            *(_OWORD *)(v288 - 16) = *((_OWORD *)v275 - 1);
            v275 -= 16;
            v288 -= 16;
          }
          while (v275 != v627);
        }
        unint64_t v276 = v285 + 16 * v286;
        float v275 = (char *)(v287 + 1);
        if (v627) {
          operator delete(v627);
        }
      }
      else
      {
        *(_OWORD *)float v275 = *(_OWORD *)v278->f32;
        v275 += 16;
      }
      uint64_t v289 = (char *)v670 + 40 * v277 + 28;
      unint64_t v290 = (char *)*((void *)&v668 + 1);
      if (*((void *)&v668 + 1) >= (unint64_t)v669)
      {
        v628 = v274;
        unint64_t v292 = v668;
        uint64_t v293 = *((void *)&v668 + 1) - v668;
        uint64_t v294 = *((void *)&v668 + 1) - v668 + 1;
        if (v294 < 0) {
          sub_25B3FBC4C();
        }
        unint64_t v295 = (unint64_t)&v669[-v668];
        if (2 * (uint64_t)&v669[-v668] > (unint64_t)v294) {
          uint64_t v294 = 2 * v295;
        }
        if (v295 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v296 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v296 = v294;
        }
        if (v296) {
          float32x2_t v297 = (char *)operator new(v296);
        }
        else {
          float32x2_t v297 = 0;
        }
        unint64_t v298 = &v297[v293];
        v297[v293] = *v289;
        uint64_t v291 = (uint64_t)&v297[v293 + 1];
        if (v290 != (char *)v292)
        {
          float64x2_t v299 = &v290[~v292];
          do
          {
            char v300 = *--v290;
            (v299--)[(void)v297] = v300;
          }
          while (v290 != (char *)v292);
          unint64_t v298 = v297;
        }
        *(void *)&long long v668 = v298;
        unint64_t v669 = &v297[v296];
        if (v292) {
          operator delete((void *)v292);
        }
        float v274 = v628;
      }
      else
      {
        **((unsigned char **)&v668 + 1) = *v289;
        uint64_t v291 = (uint64_t)(v290 + 1);
      }
      *((void *)&v668 + 1) = v291;
      float32x2_t v188 = v671;
      float v189 = v670;
    }
    ++v277;
  }
  while (v277 < 0xCCCCCCCCCCCCCCCDLL * ((v188 - v189) >> 3));
  if (v274 != v275)
  {
    v629 = v274;
    uint64_t v301 = 0;
    unint64_t v302 = *a3;
    uint64_t v303 = a3[1];
    v632 = 0;
    v633 = 0;
    v636[0] = 0;
    v636[1] = 0;
    v634 = 0;
    v635 = v636;
    v637 = v638;
    v638[0] = 0;
    v640[0] = 0;
    v640[1] = 0;
    v638[1] = 0;
    v639 = v640;
    memset(v641, 0, sizeof(v641));
    int v642 = 1065353216;
    long long v643 = v644;
    v644[0] = 0;
    v645[0] = 0;
    v645[1] = 0;
    v644[1] = 0;
    v644[2] = v645;
    long long v647 = 0u;
    long long v646 = 0u;
    int v648 = 1065353216;
    long long v649 = 0u;
    long long v650 = 0u;
    long long v651 = 0u;
    uint64_t v652 = 0;
    int v653 = 1065353216;
    long long v654 = v655;
    v655[0] = 0;
    memset(v666, 0, sizeof(v666));
    long long v665 = 0u;
    v656[0] = 0;
    v656[1] = 0;
    v655[1] = 0;
    v655[2] = v656;
    long long v658 = 0u;
    long long v657 = 0u;
    int v659 = 1065353216;
    long long v662 = 0u;
    long long v661 = 0u;
    long long v660 = 0u;
    uint64_t v663 = 0;
    int v664 = 1065353216;
    int v667 = 1065353216;
    long long v677 = 0uLL;
    *(void *)&long long v678 = 0;
    long long v674 = 0uLL;
    uint64_t v304 = 1;
    uint64_t v305 = 8;
    *(void *)&long long v675 = 0;
    do
    {
      sub_25B4BC19C((float32x2_t *)&v629[v305 - 8], (float32x2_t **)&v632, (void **)&v677, (uint64_t)&v674, 0.05);
      uint64_t v306 = &v629[v305];
      sub_25B4BC19C((float32x2_t *)&v629[v305], (float32x2_t **)&v632, (void **)&v677, (uint64_t)&v674, 0.05);
      ++v301;
      v304 += 2;
      v305 += 16;
    }
    while (v306 + 8 != v275);
    if (v302 == v303)
    {
      uint64_t v307 = 0;
    }
    else
    {
      uint64_t v307 = 0;
      do
      {
        sub_25B4BC19C(v302, (float32x2_t **)&v632, (void **)&v677, (uint64_t)&v674, 0.05);
        uint64_t v308 = v302 + 1;
        sub_25B4BC19C(v308, (float32x2_t **)&v632, (void **)&v677, (uint64_t)&v674, 0.05);
        ++v307;
        unint64_t v302 = v308 + 1;
      }
      while (v302 != v303);
    }
    unint64_t v312 = 2 * (v307 + v301);
    uint64_t v313 = (_DWORD *)v674;
    if (v312)
    {
      for (unint64_t j = 0; j < v312; j += 2)
        sub_25B4BC574((uint64_t)v641, v313[j], v313[j + 1]);
    }
    if (2 * v301)
    {
      int v315 = 0;
      unint64_t v316 = 0;
      unint64_t v611 = (char *)v677;
      do
      {
        long long v317 = &v313[v316];
        int v319 = *v317;
        int v318 = v317[1];
        if (*v317 != v318)
        {
          unint64_t v320 = (uint64_t **)&v611[8 * v316];
          uint64_t v321 = *v320;
          float32x2_t v322 = v320[1];
          int v673 = v315;
          float32x2_t v323 = sub_25B4BC7EC(&v635, v315, &v673);
          v323[5] = v321;
          v323[6] = v322;
          *((_DWORD *)v323 + 14) = v315;
          *((_DWORD *)v323 + 15) = 0;
          *((_DWORD *)v323 + 16) = v319;
          *((_DWORD *)v323 + 17) = v318;
        }
        v316 += 2;
        ++v315;
      }
      while (v316 < 2 * v301);
    }
    if (v307)
    {
      uint64_t v324 = 0;
      unsigned __int32 v325 = (uint64_t **)(v677 + v305);
      float32x2_t v326 = &v313[v304];
      uint64_t v327 = a1;
      do
      {
        int v328 = *(v326 - 1);
        int v329 = *v326;
        if (v328 != *v326)
        {
          int32x2_t v330 = *(v325 - 1);
          float32x2_t v331 = *v325;
          int v673 = v301 + v324;
          float32x2_t v332 = sub_25B4BC7EC(&v637, (int)v301 + (int)v324, &v673);
          v332[5] = v330;
          v332[6] = v331;
          *((_DWORD *)v332 + 14) = v301 + v324;
          *((_DWORD *)v332 + 15) = 1;
          *((_DWORD *)v332 + 16) = v328;
          *((_DWORD *)v332 + 17) = v329;
        }
        v326 += 2;
        ++v324;
        v325 += 2;
      }
      while (v307 != v324);
    }
    else
    {
      uint64_t v327 = a1;
      if (!v313)
      {
LABEL_360:
        if ((void)v677) {
          operator delete((void *)v677);
        }
        float32x2_t v333 = v635;
        if (v635 != v636)
        {
          do
          {
            sub_25B4BB7C4((uint64_t *)&v639, *((_DWORD *)v333 + 8), (uint64_t)(v333 + 4));
            float32x2_t v334 = (uint64_t *)v333[1];
            if (v334)
            {
              do
              {
                int32x2_t v335 = v334;
                float32x2_t v334 = (uint64_t *)*v334;
              }
              while (v334);
            }
            else
            {
              do
              {
                int32x2_t v335 = (uint64_t *)v333[2];
                BOOL v64 = *v335 == (void)v333;
                float32x2_t v333 = v335;
              }
              while (!v64);
            }
            float32x2_t v333 = v335;
          }
          while (v335 != v636);
        }
        float32x2_t v336 = v637;
        if (v637 != v638)
        {
          do
          {
            sub_25B4BB7C4((uint64_t *)&v639, *((_DWORD *)v336 + 8), (uint64_t)(v336 + 4));
            float32x2_t v337 = (uint64_t *)v336[1];
            if (v337)
            {
              do
              {
                float32x2_t v338 = v337;
                float32x2_t v337 = (uint64_t *)*v337;
              }
              while (v337);
            }
            else
            {
              do
              {
                float32x2_t v338 = (uint64_t *)v336[2];
                BOOL v64 = *v338 == (void)v336;
                float32x2_t v336 = v338;
              }
              while (!v64);
            }
            float32x2_t v336 = v338;
          }
          while (v338 != v638);
        }
        sub_25B4BB87C((uint64_t *)&v632);
        sub_25B4BBDFC((uint64_t)&v632);
        *(void *)(v327 + 32) = *(void *)(v327 + 24);
        *(void *)(v327 + 56) = *(void *)(v327 + 48);
        long long v677 = 0u;
        long long v678 = 0u;
        v679.i32[0] = 1065353216;
        long long v674 = 0u;
        long long v675 = 0u;
        long long v623 = 0u;
        int v676 = 1065353216;
        uint64_t v340 = (int *)*((void *)&v665 + 1);
        float32x2_t v339 = (int *)v665;
        while (v339 != v340)
        {
          uint64_t v341 = (float32x2_t *)sub_25B3F9CFC(&v666[1], *v339, v339[1]);
          int v342 = v341[2].i32[0];
          int v343 = v341[2].i32[1];
          if (sub_25B3FAB54(v677, *((unint64_t *)&v677 + 1), v342, v343)) {
            goto LABEL_378;
          }
          uint64_t v344 = v656[0];
          if (!v656[0]) {
            goto LABEL_378;
          }
          uint64_t v345 = v656;
          uint64_t v346 = (uint64_t *)v656[0];
          do
          {
            float v347 = v346;
            float v348 = v345;
            int v349 = *((_DWORD *)v346 + 8);
            if (v349 >= v342) {
              uint64_t v345 = v346;
            }
            else {
              ++v346;
            }
            uint64_t v346 = (uint64_t *)*v346;
          }
          while (v346);
          if (v345 == v656) {
            goto LABEL_378;
          }
          if (v349 < v342) {
            float v347 = v348;
          }
          if (*((_DWORD *)v347 + 8) > v342) {
            goto LABEL_378;
          }
          float v350 = v656;
          do
          {
            float v351 = (uint64_t *)v344;
            uint64_t v352 = v350;
            int v353 = *(_DWORD *)(v344 + 32);
            __int32 v354 = (uint64_t *)(v344 + 8);
            if (v353 >= v343)
            {
              __int32 v354 = v351;
              float v350 = v351;
            }
            uint64_t v344 = *v354;
          }
          while (v344);
          if (v350 == v656) {
            goto LABEL_378;
          }
          unint64_t v355 = v353 >= v343 ? v351 : v352;
          if (*((_DWORD *)v355 + 8) > v343) {
            goto LABEL_378;
          }
          *(_DWORD *)(v327 + 104) = v342;
          *(_DWORD *)(v327 + 108) = v343;
          if (v342 >= v343) {
            goto LABEL_378;
          }
          sub_25B4B99E8((uint64_t)&v677, v341[2].i32[0], v341[2].i32[1], *(double *)&v341[2]);
          unint64_t v356 = sub_25B40E348(v341 + 3, v341 + 7);
          uint64_t v358 = 13;
          if (!v356) {
            uint64_t v358 = 12;
          }
          int v359 = v341->i32[v358];
          uint64_t v360 = 21;
          if (!v357) {
            uint64_t v360 = 20;
          }
          float v361 = sub_25B4BACEC(&v643, v359, v341->i32[v360]);
          if (fabsf(v361) != INFINITY && v361 <= 1.0)
          {
LABEL_378:
            v339 += 2;
          }
          else
          {
            if (sub_25B58535C(v327 + 24, (uint64_t)&v632, v341 + 3, v608, a4, (uint64_t *)&v668))
            {
              uint64_t v364 = *(void *)(v327 + 24);
              uint64_t v363 = *(void *)(v327 + 32);
              while (v364 != v363)
              {
                int v365 = *(_DWORD *)(v364 + 8);
                int v366 = *(_DWORD *)(v364 + 12);
                if (!sub_25B3FAB54(v641[0], v641[1], v365, v366)
                  && !sub_25B3FAB54(v674, *((unint64_t *)&v674 + 1), v365, v366))
                {
                  unint64_t v367 = *(void *)(v327 + 56);
                  if (v367 >= *(void *)(v327 + 64))
                  {
                    unint64_t v369 = sub_25B586D0C((char **)(v327 + 48), v364);
                  }
                  else
                  {
                    *(void *)unint64_t v367 = *(void *)v364;
                    *(void *)(v367 + 8) = *(void *)(v364 + 8);
                    long long v368 = *(_OWORD *)(v364 + 16);
                    *(void *)(v367 + 32) = *(void *)(v364 + 32);
                    *(_OWORD *)(v367 + 16) = v368;
                    unint64_t v369 = (char *)(v367 + 40);
                  }
                  *(void *)(v327 + 56) = v369;
                  sub_25B4B99E8((uint64_t)&v674, *(_DWORD *)(v364 + 8), *(_DWORD *)(v364 + 12), *(double *)(v364 + 8));
                }
                v364 += 40;
              }
            }
            uint64_t v340 = (int *)*((void *)&v665 + 1);
            float32x2_t v339 = (int *)v665;
          }
        }
        sub_25B3FB178((uint64_t)&v674);
        sub_25B3FB178((uint64_t)&v677);
        uint64_t v370 = *(void *)(v327 + 48);
        if (*(void *)(v327 + 56) == v370)
        {
          uint64_t v310 = 0;
          unint64_t v311 = 0;
        }
        else
        {
          unint64_t v371 = 0;
          uint64_t v310 = 0;
          int v372 = 0;
          unint64_t v373 = 0;
          unint64_t v374 = 0;
          long long v623 = 0u;
          do
          {
            float v375 = (void *)(v370 + 40 * v374);
            uint64_t v377 = v375[2];
            unint64_t v376 = v375[3];
            uint64_t v378 = v375[4];
            unint64_t v379 = (char *)*((void *)&v623 + 1);
            if (*((void *)&v623 + 1) >= v371)
            {
              unint64_t v381 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v623 + 1) - v623) >> 3) + 1;
              if (v381 > 0x666666666666666) {
                sub_25B3FBC4C();
              }
              if (0x999999999999999ALL * ((uint64_t)(v371 - v623) >> 3) > v381) {
                unint64_t v381 = 0x999999999999999ALL * ((uint64_t)(v371 - v623) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v371 - v623) >> 3) >= 0x333333333333333) {
                unint64_t v382 = 0x666666666666666;
              }
              else {
                unint64_t v382 = v381;
              }
              if (v382) {
                unint64_t v382 = (unint64_t)sub_25B460930(v382);
              }
              else {
                uint64_t v383 = 0;
              }
              unint64_t v384 = v382 + 8 * ((uint64_t)(*((void *)&v623 + 1) - v623) >> 3);
              *(void *)unint64_t v384 = v377;
              *(void *)(v384 + 8) = v376;
              *(void *)(v384 + 16) = 0;
              *(_DWORD *)(v384 + 24) = 0;
              *(unsigned char *)(v384 + 28) = 2;
              *(void *)(v384 + 32) = v378;
              unint64_t v385 = v384;
              if (*((void *)&v623 + 1) != (void)v623)
              {
                do
                {
                  long long v386 = *(_OWORD *)(v379 - 40);
                  long long v387 = *(_OWORD *)(v379 - 24);
                  *(void *)(v385 - 8) = *((void *)v379 - 1);
                  *(_OWORD *)(v385 - 24) = v387;
                  *(_OWORD *)(v385 - 40) = v386;
                  v385 -= 40;
                  v379 -= 40;
                }
                while (v379 != (char *)v623);
                unint64_t v379 = (char *)v623;
              }
              unint64_t v371 = v382 + 40 * v383;
              uint64_t v380 = v384 + 40;
              *(void *)&long long v623 = v385;
              if (v379) {
                operator delete(v379);
              }
            }
            else
            {
              **((void **)&v623 + 1) = v377;
              *(_OWORD *)(*((void *)&v623 + 1) + 8) = v376;
              *(_DWORD *)(*((void *)&v623 + 1) + 24) = 0;
              *(unsigned char *)(*((void *)&v623 + 1) + 28) = 2;
              uint64_t v380 = *((void *)&v623 + 1) + 40;
              *(void *)(*((void *)&v623 + 1) + 32) = v378;
            }
            *(void *)&long long v388 = v623;
            *((void *)&v388 + 1) = v380;
            long long v623 = v388;
            if ((unint64_t)v372 >= v373)
            {
              uint64_t v389 = (v372 - v310) >> 2;
              unint64_t v390 = v389 + 1;
              if ((unint64_t)(v389 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v373 - (void)v310) >> 1 > v390) {
                unint64_t v390 = (uint64_t)(v373 - (void)v310) >> 1;
              }
              if (v373 - (unint64_t)v310 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v391 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v391 = v390;
              }
              if (v391) {
                unint64_t v391 = (unint64_t)sub_25B3FBC64(v391);
              }
              else {
                uint64_t v392 = 0;
              }
              int v393 = (char *)(v391 + 4 * v389);
              *(_DWORD *)int v393 = -1;
              unint64_t v311 = v393 + 4;
              while (v372 != v310)
              {
                int v394 = *((_DWORD *)v372 - 1);
                v372 -= 4;
                *((_DWORD *)v393 - 1) = v394;
                v393 -= 4;
              }
              unint64_t v373 = v391 + 4 * v392;
              if (v310) {
                operator delete(v310);
              }
              uint64_t v310 = v393;
            }
            else
            {
              *(_DWORD *)int v372 = -1;
              unint64_t v311 = v372 + 4;
            }
            ++v374;
            uint64_t v370 = *(void *)(v327 + 48);
            int v372 = v311;
          }
          while (v374 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v327 + 56) - v370) >> 3));
        }
        sub_25B4B7174((uint64_t)&v632);
        float32x2_t v187 = v603;
        float v274 = v629;
        goto LABEL_459;
      }
    }
    operator delete(v313);
    goto LABEL_360;
  }
  uint64_t v310 = 0;
  unint64_t v311 = 0;
  long long v623 = 0u;
LABEL_459:
  uint64_t v309 = (void *)v668;
  uint64_t v52 = v616;
LABEL_460:
  if (v309) {
    operator delete(v309);
  }
  if (v274) {
    operator delete(v274);
  }
  if (v670)
  {
    long long v671 = v670;
    operator delete(v670);
  }
  if (*((void *)&v623 + 1) == (void)v623 || v52 == v605)
  {
    *(_OWORD *)v630 = v623;
    float32x4_t v614 = v310;
    goto LABEL_525;
  }
  unint64_t v395 = (*((void *)&v623 + 1) - (void)v623) / 40;
  LOBYTE(v677) = 1;
  sub_25B443750(&v632, v395, (unsigned __int8 *)&v677);
  unint64_t v399 = 0;
  uint64_t v400 = (char *)v632;
  if (v395 <= 1) {
    unint64_t v395 = 1;
  }
  do
  {
    unint64_t v401 = (uint64_t *)(v623 + 40 * v399);
    uint64_t v402 = *v401;
    float32x2_t v403 = (float32x2_t)v401[1];
    char v404 = (uint64_t *)v605;
    while (1)
    {
      v396.i64[0] = *v404;
      v397.i64[0] = v404[1];
      v398.i64[0] = v402;
      if (sub_25B40E540(v396, v397, v398, v403)) {
        break;
      }
      v404 += 5;
      if (v404 == (uint64_t *)v616) {
        goto LABEL_475;
      }
    }
    *(void *)&v400[(v399 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v399);
LABEL_475:
    ++v399;
  }
  while (v399 != v395);
  float32x4_t v405 = v633;
  if (v633)
  {
    float v406 = 0;
    float32x4_t v614 = 0;
    float32x2_t v407 = 0;
    unint64_t v408 = 0;
    unint64_t v311 = 0;
    unint64_t v409 = 0;
    *(_OWORD *)v630 = 0u;
    do
    {
      if ((*(void *)((char *)v632 + ((v409 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v409))
      {
        float32x2_t v410 = (long long *)(v623 + 40 * v409);
        long long v411 = (char *)v630[1];
        if (v630[1] >= v406)
        {
          float v415 = v630[0];
          unint64_t v416 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v630[1] - (char *)v630[0]) >> 3) + 1;
          if (v416 > 0x666666666666666) {
            sub_25B3FBC4C();
          }
          if (0x999999999999999ALL * ((int64_t)((uint64_t)v406 - (unint64_t)v630[0]) >> 3) > v416) {
            unint64_t v416 = 0x999999999999999ALL * ((int64_t)((uint64_t)v406 - (unint64_t)v630[0]) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((int64_t)((uint64_t)v406 - (unint64_t)v630[0]) >> 3) >= 0x333333333333333) {
            unint64_t v417 = 0x666666666666666;
          }
          else {
            unint64_t v417 = v416;
          }
          if (v417) {
            unint64_t v417 = (unint64_t)sub_25B460930(v417);
          }
          else {
            uint64_t v418 = 0;
          }
          unint64_t v419 = v417 + 8 * (((char *)v630[1] - (char *)v630[0]) >> 3);
          long long v420 = *v410;
          long long v421 = v410[1];
          *(void *)(v419 + 32) = *((void *)v410 + 4);
          *(_OWORD *)unint64_t v419 = v420;
          *(_OWORD *)(v419 + 16) = v421;
          if (v630[1] == v630[0])
          {
            v425 = (void *)(v417 + 8 * (((char *)v630[1] - (char *)v630[0]) >> 3));
          }
          else
          {
            unint64_t v422 = v417 + 8 * (((char *)v630[1] - (char *)v630[0]) >> 3);
            do
            {
              long long v423 = *(_OWORD *)(v411 - 40);
              long long v424 = *(_OWORD *)(v411 - 24);
              v425 = (void *)(v422 - 40);
              *(void *)(v422 - 8) = *((void *)v411 - 1);
              *(_OWORD *)(v422 - 24) = v424;
              *(_OWORD *)(v422 - 40) = v423;
              v411 -= 40;
              v422 -= 40;
            }
            while (v411 != v630[0]);
          }
          float v406 = (void *)(v417 + 40 * v418);
          uint64_t v414 = v419 + 40;
          v630[0] = v425;
          if (v415) {
            operator delete(v415);
          }
        }
        else
        {
          long long v412 = *v410;
          long long v413 = v410[1];
          *((void *)v630[1] + 4) = *((void *)v410 + 4);
          *(_OWORD *)v630[1] = v412;
          *((_OWORD *)v630[1] + 1) = v413;
          uint64_t v414 = (uint64_t)v630[1] + 40;
        }
        *(void **)&long long v426 = v630[0];
        *((void *)&v426 + 1) = v414;
        *(_OWORD *)v630 = v426;
        if ((unint64_t)v407 >= v408)
        {
          uint64_t v427 = (v407 - v614) >> 2;
          unint64_t v428 = v427 + 1;
          if ((unint64_t)(v427 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v408 - (void)v614) >> 1 > v428) {
            unint64_t v428 = (uint64_t)(v408 - (void)v614) >> 1;
          }
          if (v408 - (unint64_t)v614 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v429 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v429 = v428;
          }
          if (v429) {
            unint64_t v429 = (unint64_t)sub_25B3FBC64(v429);
          }
          else {
            uint64_t v430 = 0;
          }
          unint64_t v431 = (char *)(v429 + 4 * v427);
          *(_DWORD *)unint64_t v431 = *(_DWORD *)&v310[4 * v409];
          unint64_t v311 = v431 + 4;
          if (v407 == v614)
          {
            long long v432 = v614;
          }
          else
          {
            long long v432 = v614;
            do
            {
              int v433 = *((_DWORD *)v407 - 1);
              v407 -= 4;
              *((_DWORD *)v431 - 1) = v433;
              v431 -= 4;
            }
            while (v407 != v614);
          }
          unint64_t v408 = v429 + 4 * v430;
          if (v432) {
            operator delete(v432);
          }
          float32x4_t v614 = v431;
        }
        else
        {
          *(_DWORD *)float32x2_t v407 = *(_DWORD *)&v310[4 * v409];
          unint64_t v311 = v407 + 4;
        }
        float32x4_t v405 = v633;
        float32x2_t v407 = v311;
      }
      ++v409;
    }
    while (v409 < (unint64_t)v405);
    if (!v310) {
      goto LABEL_520;
    }
  }
  else
  {
    unint64_t v311 = 0;
    float32x4_t v614 = 0;
    *(_OWORD *)v630 = 0u;
    if (!v310) {
      goto LABEL_520;
    }
  }
  operator delete(v310);
LABEL_520:
  uint64_t v52 = v616;
  float32x2_t v187 = v603;
  if ((void)v623) {
    operator delete((void *)v623);
  }
  if (v632) {
    operator delete(v632);
  }
LABEL_525:
  long long v677 = 0uLL;
  *(void *)&long long v678 = 0;
  long long v674 = 0uLL;
  *(void *)&long long v675 = 0;
  v632 = &v677;
  if (v52 != v605)
  {
    long long v434 = (long long *)v605;
    do
    {
      sub_25B58747C((void ***)&v632, v434);
      long long v434 = (long long *)((char *)v434 + 40);
    }
    while (v434 != (long long *)v52);
  }
  v632 = &v674;
  if (v601 != v187)
  {
    uint64_t v435 = v601;
    do
    {
      sub_25B3FBF08((uint64_t *)&v632, v435);
      v435 += 4;
    }
    while (v435 != v187);
  }
  v632 = &v677;
  if (v630[0] != v630[1])
  {
    unint64_t v436 = (long long *)v630[0];
    do
    {
      sub_25B58747C((void ***)&v632, v436);
      unint64_t v436 = (long long *)((char *)v436 + 40);
    }
    while (v436 != v630[1]);
  }
  v632 = &v674;
  if (v614 != v311)
  {
    unint64_t v437 = v614;
    do
    {
      sub_25B3FBF08((uint64_t *)&v632, v437);
      v437 += 4;
    }
    while (v437 != v311);
  }
  v620 = (char *)a4[1];
  uint64_t v438 = v677;
  if (*((void *)&v677 + 1) == (void)v677)
  {
    v439 = 0;
    float32x2_t v440 = 0;
    long long v441 = 0;
  }
  else
  {
    v439 = 0;
    float32x2_t v440 = 0;
    long long v441 = 0;
    unint64_t v442 = 0;
    do
    {
      uint64_t v443 = (long long *)(v438 + 40 * v442);
      uint64_t v444 = v674;
      if (v440 >= v441)
      {
        unint64_t v448 = 0xAAAAAAAAAAAAAAABLL * (((char *)v440 - (char *)v439) >> 4) + 1;
        if (v448 > 0x555555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * (((char *)v441 - (char *)v439) >> 4) > v448) {
          unint64_t v448 = 0x5555555555555556 * (((char *)v441 - (char *)v439) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v441 - (char *)v439) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v449 = 0x555555555555555;
        }
        else {
          unint64_t v449 = v448;
        }
        uint64_t v450 = (char *)sub_25B467D14(v449);
        unsigned int v452 = *(_DWORD *)(v444 + 4 * v442);
        uint64_t v453 = (float32x2_t *)&v450[16 * (((char *)v440 - (char *)v439) >> 4)];
        float32x2_t *v453 = 0;
        v453[1] = 0;
        v453[3].i32[0] = 0;
        v453[2] = 0;
        v453[3].i8[4] = -1;
        long long v454 = *v443;
        long long v455 = v443[1];
        v453[4] = (float32x2_t)v443[2];
        *(_OWORD *)v453->f32 = v454;
        *(_OWORD *)v453[2].f32 = v455;
        v453[5] = (float32x2_t)v452;
        if (v440 == v439)
        {
          float64x2_t v459 = (float32x2_t *)&v450[16 * (((char *)v440 - (char *)v439) >> 4)];
        }
        else
        {
          uint64_t v456 = &v450[16 * (((char *)v440 - (char *)v439) >> 4)];
          do
          {
            long long v457 = *(_OWORD *)v440[-6].f32;
            long long v458 = *(_OWORD *)v440[-2].f32;
            float64x2_t v459 = (float32x2_t *)(v456 - 48);
            *((_OWORD *)v456 - 2) = *(_OWORD *)v440[-4].f32;
            *((_OWORD *)v456 - 1) = v458;
            *((_OWORD *)v456 - 3) = v457;
            v440 -= 6;
            v456 -= 48;
          }
          while (v440 != v439);
        }
        long long v441 = (float32x2_t *)&v450[48 * v451];
        float32x2_t v440 = v453 + 6;
        if (v439) {
          operator delete(v439);
        }
        v439 = v459;
      }
      else
      {
        unsigned int v445 = *(_DWORD *)(v674 + 4 * v442);
        *float32x2_t v440 = 0;
        v440[1] = 0;
        v440[3].i32[0] = 0;
        v440[2] = 0;
        v440[3].i8[4] = -1;
        long long v446 = *v443;
        long long v447 = v443[1];
        v440[4] = (float32x2_t)v443[2];
        *(_OWORD *)v440->f32 = v446;
        *(_OWORD *)v440[2].f32 = v447;
        v440[5] = (float32x2_t)v445;
        v440 += 6;
      }
      ++v442;
      uint64_t v438 = v677;
    }
    while (v442 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v677 + 1) - v677) >> 3));
  }
  double v460 = *(float32x2_t **)(a1 + 112);
  v624 = *(long long **)(a1 + 120);
  if (v460 != (float32x2_t *)v624)
  {
    long long v461 = 0;
    float32x4_t v613 = 0;
    unint64_t v609 = 0;
    float32x4_t v617 = (float32x2_t *)(v620 - 16);
    while (1)
    {
      ++v460[5].i32[1];
      uint64_t v462 = v439;
      if (v439 != v440)
      {
        while (1)
        {
          sub_25B477E0C((uint64_t)&v632, v460, v462);
          BOOL v463 = *(float *)&v633 < 0.5 || *((float *)&v634 + 1) > 0.5;
          if (!v463 && *(float *)&v635 < 30.0) {
            break;
          }
          v462 += 6;
          if (v462 == v440) {
            goto LABEL_569;
          }
        }
        v462[5].i32[1] = v460[5].i32[1];
        goto LABEL_618;
      }
LABEL_569:
      uint64_t v465 = *a2;
      if (a2[1] == *a2)
      {
LABEL_577:
        uint64_t v469 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v466 = 0;
        unint64_t v467 = 0;
        while (1)
        {
          sub_25B477E0C((uint64_t)&v632, v460, &v465[v466]);
          uint64_t v465 = *a2;
          if (*(float *)&v633 >= 0.9 && *((float *)&v634 + 1) <= 0.2 && *(float *)&v635 < 10.0) {
            break;
          }
          ++v467;
          v466 += 5;
          if (0xCCCCCCCCCCCCCCCDLL * (a2[1] - v465) <= v467) {
            goto LABEL_577;
          }
        }
        uint64_t v469 = v467;
        if (v465[5 * v467 + 3].i8[4] != 3) {
          goto LABEL_618;
        }
      }
      int v470 = sub_25B586F3C((void *)a5, (float *)v460);
      char v471 = sub_25B587340(*a2, a2[1], -1, *v460, v460[1], *v617);
      float v472 = sub_25B3FCCE0(v460, v617, 0);
      if (!v470 || (v471 & 1) != 0 || v472 <= 30.0 || v472 >= 150.0)
      {
        uint64_t v473 = (int *)operator new(8uLL);
        *(void *)uint64_t v473 = -1;
        v621 = v461;
        v474 = operator new(8uLL);
        *(void *)v474 = -1;
        uint64_t v475 = operator new(8uLL);
        *(void *)uint64_t v475 = 0;
        uint64_t v476 = *a2;
        uint64_t v477 = a2[1];
        if ((int)(-858993459 * ((unint64_t)((char *)v477 - (char *)*a2) >> 3)) < 1) {
          goto LABEL_615;
        }
        uint64_t v478 = 0;
        do
        {
          if (v478 != v469)
          {
            sub_25B40E03C((float **)&v632, v460, &v476[5 * v478]);
            uint64_t v479 = v632;
            uint64_t v480 = (float *)((char *)v632 + 4);
            BOOL v481 = v632 == v633 || v480 == (float *)v633;
            unint64_t v482 = (float *)v632;
            if (!v481)
            {
              float v483 = *(float *)v632;
              unint64_t v482 = (float *)v632;
              uint64_t v484 = (float *)((char *)v632 + 4);
              do
              {
                float v485 = *v484++;
                float v486 = v485;
                if (v485 < v483)
                {
                  float v483 = v486;
                  unint64_t v482 = v480;
                }
                uint64_t v480 = v484;
              }
              while (v484 != (float *)v633);
            }
            if (*v482 < 0.2)
            {
              unint64_t v487 = (unint64_t)((char *)v482 - (unsigned char *)v632) >> 2;
              if ((v487 & 0x80000000) == 0) {
                int v488 = v487;
              }
              else {
                int v488 = v487 + 1;
              }
              int v489 = v488 >> 1;
              v473[v489] = v478;
              v474[v489] = v487 - (v488 & 0xFFFFFFFE);
              ++v475[v489];
            }
            if (v479) {
              operator delete(v479);
            }
            uint64_t v476 = *a2;
            uint64_t v477 = a2[1];
          }
          ++v478;
        }
        while (v478 < (int)(-858993459 * ((unint64_t)((char *)v477 - (char *)v476) >> 3)));
        if (*v475 == 1)
        {
          long long v461 = v621;
          if (v475[1] == 1)
          {
            int v490 = v473[1];
            if (v490 != -1)
            {
              int v491 = *v473;
              if (*v473 != -1 && v491 != v490)
              {
                unint64_t v492 = &v476[5 * v491];
                if (*v474) {
                  ++v492;
                }
                float32x2_t v493 = *v492;
                *double v460 = *v492;
                if (v474[1]) {
                  uint64_t v494 = &(*a2)[5 * v473[1] + 1];
                }
                else {
                  uint64_t v494 = &(*a2)[5 * v473[1]];
                }
                float32x2_t v495 = *v494;
                v460[1] = *v494;
                v460[5].i32[0] = v469;
                float32x2_t v496 = vsub_f32((float32x2_t)vext_s8((int8x8_t)v493, (int8x8_t)v495, 4uLL), (float32x2_t)vext_s8((int8x8_t)v495, (int8x8_t)v493, 4uLL));
                float32x2_t v497 = vsub_f32(v495, v493);
                int32x2_t v498 = (int32x2_t)vmul_f32(v497, v497);
                *(float *)v498.i32 = sqrtf(vaddv_f32((float32x2_t)v498));
                float32x2_t v499 = vdiv_f32(v496, (float32x2_t)vdup_lane_s32(v498, 0));
                int32x2_t v500 = (int32x2_t)vmul_f32(v499, v460[4]);
                v460[4] = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(0, vadd_f32((float32x2_t)v500, (float32x2_t)vdup_lane_s32(v500, 1))), 0), (int8x8_t)vneg_f32(v499), (int8x8_t)v499);
                if ((unint64_t)v613 >= v609)
                {
                  unint64_t v503 = 0xAAAAAAAAAAAAAAABLL * ((v613 - v621) >> 4) + 1;
                  if (v503 > 0x555555555555555) {
                    sub_25B3FBC4C();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v609 - (void)v621) >> 4) > v503) {
                    unint64_t v503 = 0x5555555555555556 * ((uint64_t)(v609 - (void)v621) >> 4);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v609 - (void)v621) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                    unint64_t v504 = 0x555555555555555;
                  }
                  else {
                    unint64_t v504 = v503;
                  }
                  if (v504) {
                    unint64_t v504 = (unint64_t)sub_25B467D14(v504);
                  }
                  else {
                    uint64_t v505 = 0;
                  }
                  float v506 = (_OWORD *)(v504 + 16 * ((v613 - v621) >> 4));
                  long long v507 = *(_OWORD *)v460->f32;
                  long long v508 = *(_OWORD *)v460[4].f32;
                  v506[1] = *(_OWORD *)v460[2].f32;
                  v506[2] = v508;
                  *float v506 = v507;
                  if (v613 == v621)
                  {
                    long long v461 = (char *)(v504 + 16 * ((v613 - v621) >> 4));
                    long long v510 = v621;
                  }
                  else
                  {
                    unint64_t v509 = v504 + 16 * ((v613 - v621) >> 4);
                    long long v510 = v621;
                    long long v511 = v613;
                    do
                    {
                      long long v512 = *((_OWORD *)v511 - 3);
                      long long v513 = *((_OWORD *)v511 - 1);
                      long long v461 = (char *)(v509 - 48);
                      *(_OWORD *)(v509 - 32) = *((_OWORD *)v511 - 2);
                      *(_OWORD *)(v509 - 16) = v513;
                      *(_OWORD *)(v509 - 48) = v512;
                      v511 -= 48;
                      v509 -= 48;
                    }
                    while (v511 != v621);
                  }
                  unint64_t v609 = v504 + 48 * v505;
                  float32x4_t v613 = (char *)(v506 + 3);
                  if (v510) {
                    operator delete(v510);
                  }
                }
                else
                {
                  long long v501 = *(_OWORD *)v460->f32;
                  long long v502 = *(_OWORD *)v460[4].f32;
                  *((_OWORD *)v613 + 1) = *(_OWORD *)v460[2].f32;
                  *((_OWORD *)v613 + 2) = v502;
                  *(_OWORD *)float32x4_t v613 = v501;
                  v613 += 48;
                }
              }
            }
          }
        }
        else
        {
LABEL_615:
          long long v461 = v621;
        }
        operator delete(v475);
        operator delete(v474);
        operator delete(v473);
      }
LABEL_618:
      v460 += 6;
      if (v460 == (float32x2_t *)v624)
      {
        uint64_t v514 = v461;
        long long v515 = v613;
        goto LABEL_637;
      }
    }
  }
  long long v461 = 0;
  long long v515 = 0;
  uint64_t v514 = 0;
LABEL_637:
  unint64_t v516 = v515;
  uint64_t v517 = v515 - v514;
  if (v517 < 1)
  {
    unint64_t v535 = v440;
    uint64_t v536 = (void *)a1;
    goto LABEL_674;
  }
  float32x2_t v518 = v461;
  uint64_t v519 = v517 / 48;
  uint64_t v520 = ((char *)v440 - (char *)v439) / 48;
  double v521 = &v439[6 * v520];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v441 - (char *)v440) >> 4)) >= v517 / 48)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v440 - (char *)v521) >> 4)) >= v519)
    {
      long long v537 = &v514[48 * v519];
      long long v539 = v440;
    }
    else
    {
      long long v537 = &v514[16 * (((char *)v440 - (char *)v521) >> 4)];
      int64_t v538 = v516 - v537;
      if (v516 != v537) {
        memmove(v440, &v514[16 * (((char *)v440 - (char *)v521) >> 4)], v516 - v537);
      }
      long long v539 = (float32x2_t *)((char *)v440 + v538);
      if ((char *)v440 - (char *)v521 < 1)
      {
        unint64_t v535 = (float32x2_t *)((char *)v440 + v538);
        uint64_t v536 = (void *)a1;
        long long v461 = v518;
        goto LABEL_674;
      }
    }
    uint64_t v540 = &v521[6 * v519];
    char v541 = &v539[-6 * v519];
    unint64_t v535 = v539;
    if (v541 < v440)
    {
      unint64_t v535 = v539;
      do
      {
        long long v542 = *(_OWORD *)v541->f32;
        long long v543 = *(_OWORD *)v541[4].f32;
        *(_OWORD *)v535[2].f32 = *(_OWORD *)v541[2].f32;
        *(_OWORD *)v535[4].f32 = v543;
        *(_OWORD *)v535->f32 = v542;
        v535 += 6;
        v541 += 6;
      }
      while (v541 < v440);
    }
    long long v461 = v518;
    if (v539 != v540) {
      memmove(v540, v521, (char *)v539 - (char *)v540);
    }
    uint64_t v536 = (void *)a1;
    if (v537 != v514) {
      memmove(v521, v514, v537 - v514);
    }
  }
  else
  {
    unint64_t v522 = v520 + v519;
    if ((unint64_t)(v520 + v519) > 0x555555555555555) {
      sub_25B3FBC4C();
    }
    if (0x5555555555555556 * (((char *)v441 - (char *)v439) >> 4) > v522) {
      unint64_t v522 = 0x5555555555555556 * (((char *)v441 - (char *)v439) >> 4);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v441 - (char *)v439) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v523 = 0x555555555555555;
    }
    else {
      unint64_t v523 = v522;
    }
    if (v523) {
      unint64_t v523 = (unint64_t)sub_25B467D14(v523);
    }
    int v524 = (_OWORD *)(v523 + 48 * v520);
    long long v525 = (char *)&v524[3 * v519];
    uint64_t v526 = 48 * v519;
    uint64_t v527 = v524;
    do
    {
      long long v528 = *(_OWORD *)v514;
      long long v529 = *((_OWORD *)v514 + 2);
      v527[1] = *((_OWORD *)v514 + 1);
      v527[2] = v529;
      *uint64_t v527 = v528;
      v527 += 3;
      v514 += 48;
      v526 -= 48;
    }
    while (v526);
    long long v461 = v518;
    if (v440 != v439)
    {
      uint64_t v530 = 6 * v520;
      float32x2_t v531 = v439 - 6;
      do
      {
        unint64_t v532 = v523 + v530 * 8;
        long long v533 = *(_OWORD *)v531[v530].f32;
        long long v534 = *(_OWORD *)v531[v530 + 4].f32;
        *(_OWORD *)(v532 - 32) = *(_OWORD *)v531[v530 + 2].f32;
        *(_OWORD *)(v532 - 16) = v534;
        *(_OWORD *)(v532 - 48) = v533;
        v530 -= 6;
      }
      while (v530 * 8);
      int v524 = (_OWORD *)v523;
    }
    if (v440 != v521) {
      memmove(v525, &v439[6 * v520], (char *)v440 - (char *)v521);
    }
    unint64_t v535 = (float32x2_t *)&v525[(char *)v440 - (char *)v521];
    uint64_t v536 = (void *)a1;
    if (v439) {
      operator delete(v439);
    }
    v439 = (float32x2_t *)v524;
  }
LABEL_674:
  if (v439 == v535)
  {
    unint64_t v546 = 0;
    long long v545 = 0;
    long long v544 = 0;
  }
  else
  {
    long long v544 = 0;
    long long v545 = 0;
    unint64_t v546 = 0;
    long long v547 = v439;
    do
    {
      if (v547[5].i32[1] <= 1000)
      {
        if ((unint64_t)v545 >= v546)
        {
          unint64_t v550 = 0xAAAAAAAAAAAAAAABLL * ((v545 - v544) >> 4) + 1;
          if (v550 > 0x555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v546 - (void)v544) >> 4) > v550) {
            unint64_t v550 = 0x5555555555555556 * ((uint64_t)(v546 - (void)v544) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v546 - (void)v544) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v551 = 0x555555555555555;
          }
          else {
            unint64_t v551 = v550;
          }
          if (v551) {
            unint64_t v551 = (unint64_t)sub_25B467D14(v551);
          }
          else {
            uint64_t v552 = 0;
          }
          long long v553 = (_OWORD *)(v551 + 16 * ((v545 - v544) >> 4));
          long long v554 = *(_OWORD *)v547->f32;
          long long v555 = *(_OWORD *)v547[4].f32;
          v553[1] = *(_OWORD *)v547[2].f32;
          v553[2] = v555;
          *long long v553 = v554;
          if (v545 == v544)
          {
            std::string v559 = (char *)(v551 + 16 * ((v545 - v544) >> 4));
          }
          else
          {
            unint64_t v556 = v551 + 16 * ((v545 - v544) >> 4);
            do
            {
              long long v557 = *((_OWORD *)v545 - 3);
              long long v558 = *((_OWORD *)v545 - 1);
              std::string v559 = (char *)(v556 - 48);
              *(_OWORD *)(v556 - 32) = *((_OWORD *)v545 - 2);
              *(_OWORD *)(v556 - 16) = v558;
              *(_OWORD *)(v556 - 48) = v557;
              v545 -= 48;
              v556 -= 48;
            }
            while (v545 != v544);
          }
          unint64_t v546 = v551 + 48 * v552;
          long long v545 = (char *)(v553 + 3);
          if (v544) {
            operator delete(v544);
          }
          long long v544 = v559;
          uint64_t v536 = (void *)a1;
        }
        else
        {
          long long v548 = *(_OWORD *)v547->f32;
          long long v549 = *(_OWORD *)v547[4].f32;
          *((_OWORD *)v545 + 1) = *(_OWORD *)v547[2].f32;
          *((_OWORD *)v545 + 2) = v549;
          *(_OWORD *)long long v545 = v548;
          v545 += 48;
        }
      }
      v547 += 6;
    }
    while (v547 != v535);
  }
  std::string v560 = (void *)v536[14];
  v536[14] = v544;
  v536[15] = v545;
  v536[16] = v546;
  if (v560) {
    operator delete(v560);
  }
  if (v461) {
    operator delete(v461);
  }
  if (v439) {
    operator delete(v439);
  }
  uint64_t v561 = (long long *)v536[14];
  long long v562 = (long long *)v536[15];
  for (uint64_t k = a7; v561 != v562; v561 += 3)
  {
    unint64_t v564 = k[1];
    unint64_t v565 = k[2];
    if (v564 >= v565)
    {
      unint64_t v569 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v564 - *k) >> 3);
      unint64_t v570 = v569 + 1;
      if (v569 + 1 > 0x666666666666666) {
        sub_25B3FBC4C();
      }
      unint64_t v571 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v565 - *k) >> 3);
      if (2 * v571 > v570) {
        unint64_t v570 = 2 * v571;
      }
      if (v571 >= 0x333333333333333) {
        unint64_t v572 = 0x666666666666666;
      }
      else {
        unint64_t v572 = v570;
      }
      if (v572) {
        unint64_t v572 = (unint64_t)sub_25B460930(v572);
      }
      else {
        uint64_t v573 = 0;
      }
      unint64_t v574 = v572 + 40 * v569;
      long long v575 = *v561;
      long long v576 = v561[1];
      *(void *)(v574 + 32) = *((void *)v561 + 4);
      *(_OWORD *)unint64_t v574 = v575;
      *(_OWORD *)(v574 + 16) = v576;
      long long v578 = (char *)*a7;
      long long v577 = (char *)a7[1];
      unint64_t v579 = v574;
      if (v577 == (char *)*a7)
      {
        long long v582 = a7;
      }
      else
      {
        do
        {
          long long v580 = *(_OWORD *)(v577 - 40);
          long long v581 = *(_OWORD *)(v577 - 24);
          *(void *)(v579 - 8) = *((void *)v577 - 1);
          *(_OWORD *)(v579 - 24) = v581;
          *(_OWORD *)(v579 - 40) = v580;
          v579 -= 40;
          v577 -= 40;
        }
        while (v577 != v578);
        long long v582 = a7;
        long long v577 = (char *)*a7;
      }
      unint64_t v568 = v574 + 40;
      unint64_t *v582 = v579;
      v582[1] = v574 + 40;
      v582[2] = v572 + 40 * v573;
      if (v577)
      {
        operator delete(v577);
        uint64_t k = a7;
      }
      else
      {
        uint64_t k = v582;
      }
    }
    else
    {
      long long v566 = *v561;
      long long v567 = v561[1];
      *(void *)(v564 + 32) = *((void *)v561 + 4);
      *(_OWORD *)unint64_t v564 = v566;
      *(_OWORD *)(v564 + 16) = v567;
      unint64_t v568 = v564 + 40;
    }
    k[1] = v568;
    long long v584 = *(_DWORD **)(a8 + 8);
    unint64_t v583 = *(void *)(a8 + 16);
    if ((unint64_t)v584 >= v583)
    {
      unint64_t v586 = *(_DWORD **)a8;
      uint64_t v587 = ((uint64_t)v584 - *(void *)a8) >> 2;
      unint64_t v588 = v587 + 1;
      if ((unint64_t)(v587 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      uint64_t v589 = v583 - (void)v586;
      if (v589 >> 1 > v588) {
        unint64_t v588 = v589 >> 1;
      }
      if ((unint64_t)v589 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v590 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v590 = v588;
      }
      if (v590)
      {
        unint64_t v590 = (unint64_t)sub_25B3FBC64(v590);
        unint64_t v586 = *(_DWORD **)a8;
        long long v584 = *(_DWORD **)(a8 + 8);
      }
      else
      {
        uint64_t v591 = 0;
      }
      long long v592 = (_DWORD *)(v590 + 4 * v587);
      *long long v592 = *((_DWORD *)v561 + 10);
      id v585 = v592 + 1;
      while (v584 != v586)
      {
        int v593 = *--v584;
        *--long long v592 = v593;
      }
      *(void *)a8 = v592;
      *(void *)(a8 + 8) = v585;
      *(void *)(a8 + 16) = v590 + 4 * v591;
      if (v586) {
        operator delete(v586);
      }
      uint64_t k = a7;
    }
    else
    {
      *long long v584 = *((_DWORD *)v561 + 10);
      id v585 = v584 + 1;
    }
    *(void *)(a8 + 8) = v585;
  }
  if ((void)v674)
  {
    *((void *)&v674 + 1) = v674;
    operator delete((void *)v674);
  }
  if ((void)v677)
  {
    *((void *)&v677 + 1) = v677;
    operator delete((void *)v677);
  }
  if (v614) {
    operator delete(v614);
  }
  if (v630[0]) {
    operator delete(v630[0]);
  }
  if (v601) {
    operator delete(v601);
  }
  if (v605) {
    operator delete(v605);
  }
}

void sub_25B58A704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36)
{
  sub_25B3FB178(v36 - 256);
  sub_25B3FB178(v36 - 208);
  sub_25B4B7174((uint64_t)&a36);
  if (STACK[0x2D0]) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (a33) {
    operator delete(a33);
  }
  float v38 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v38;
    operator delete(v38);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25B58AA88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 48);
  if (0xEEEEEEEEEEEEEEEFLL * ((v1 - v2) >> 3) < 2) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 1;
  while (1)
  {
    uint64_t v6 = v2 + v4;
    uint64_t v7 = *(void *)(v2 + v4 + 40);
    float v8 = *(float *)(v7 + 24);
    float v9 = *(float *)(v7 + 72);
    uint64_t v10 = *(void *)(v2 + v4 + 160);
    float v11 = *(float *)(v10 + 24);
    if (vabds_f32(v8, v9) < 0.01 && vabds_f32(v11, *(float *)(v10 + 72)) < 0.01 && vabds_f32(v8, v11) < 0.01) {
      break;
    }
    if (vabds_f32(v9, v11) < 0.01)
    {
      unint64_t v12 = (const float *)(v7 + 16);
      float32x2_t v13 = (float32x2_t)*(_OWORD *)vld2_f32(v12).val;
      uint64_t v14 = (const float *)(v7 + 64);
      float32x2_t v15 = (float32x2_t)*(_OWORD *)vld2_f32(v14).val;
      v32[0] = v13;
      v32[1] = v15;
      float32x2_t v16 = *(const float **)(v6 + 160);
      int32x2_t v17 = v16 + 4;
      float32x2_t v18 = (float32x2_t)*(_OWORD *)vld2_f32(v17).val;
      v16 += 16;
      float32x2_t v19 = (float32x2_t)*(_OWORD *)vld2_f32(v16).val;
      v31[0] = v18;
      v31[1] = v19;
      if (sub_25B3FCCE0(v32, v31, 0) > 179.0)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v4 + 120;
        *(_DWORD *)(*(void *)(v6 + 40) + 72) = *(_DWORD *)(*(void *)(v6 + 160) + 72);
        *(void *)(*(void *)(v6 + 40) + 64) = *(void *)(*(void *)(v6 + 160) + 64);
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v36 = &v33;
        do
        {
          sub_25B521880(&v36, v23 + v21);
          v21 += 120;
        }
        while (v22 != v21);
        uint64_t v24 = *(void *)(a1 + 48);
        uint64_t v25 = *(void *)(a1 + 40) + 120 * v5 + 120;
        uint64_t v36 = &v33;
        while (v25 != v24)
        {
          sub_25B521880(&v36, v25);
          v25 += 120;
        }
        sub_25B521750(a1, &v33);
        uint64_t v36 = &v33;
        int32x2_t v26 = (void ***)&v36;
        goto LABEL_23;
      }
      uint64_t v2 = *(void *)(a1 + 40);
      uint64_t v1 = *(void *)(a1 + 48);
    }
    ++v5;
    v4 += 120;
    if (0xEEEEEEEEEEEEEEEFLL * ((v1 - v2) >> 3) <= v5) {
      return 0;
    }
  }
  *(float *)(v7 + 72) = v8;
  *(void *)(*(void *)(v6 + 40) + 64) = *(void *)(*(void *)(v6 + 160) + 64);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v27 = *(void *)(a1 + 40);
  v32[0] = (float32x2_t)&v33;
  uint64_t v28 = v4 + 120;
  do
  {
    sub_25B521880(v32, v27);
    v27 += 120;
    v28 -= 120;
  }
  while (v28);
  uint64_t v29 = *(void *)(a1 + 48);
  uint64_t v30 = *(void *)(a1 + 40) + 120 * v5 + 120;
  v32[0] = (float32x2_t)&v33;
  while (v30 != v29)
  {
    sub_25B521880(v32, v30);
    v30 += 120;
  }
  sub_25B521750(a1, &v33);
  v32[0] = (float32x2_t)&v33;
  int32x2_t v26 = (void ***)v32;
LABEL_23:
  sub_25B55E2EC(v26);
  return 1;
}

void sub_25B58ACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a10 = (void **)&a14;
  sub_25B55E2EC(&a10);
  _Unwind_Resume(a1);
}

char *sub_25B58AD34(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      uint64_t v10 = (char *)*((void *)result + 1);
      float v11 = *(char **)result;
      if (v10 != v9)
      {
        unint64_t v12 = v10 - 48;
        float32x2_t v13 = v10 - 48;
        uint64_t v14 = v10 - 48;
        do
        {
          float32x2_t v15 = *(void (***)(char *))v14;
          v14 -= 48;
          (*v15)(v13);
          v12 -= 48;
          BOOL v16 = v13 == v9;
          float32x2_t v13 = v14;
        }
        while (!v16);
        float v11 = *(char **)v7;
      }
      *((void *)v7 + 1) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
    }
    if (a4 > 0x555555555555555) {
      sub_25B3FBC4C();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    if (v17 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x555555555555555;
    }
    else {
      unint64_t v19 = v18;
    }
    BOOL result = sub_25B521DB0(v7, v19);
    float32x2_t v20 = (char *)*((void *)v7 + 1);
    if (v6 != a3)
    {
      uint64_t v21 = *((void *)v7 + 1);
      do
      {
        *(void *)float32x2_t v20 = &unk_2708F2120;
        long long v22 = *(_OWORD *)(v6 + 16);
        *((_DWORD *)v20 + 8) = *(_DWORD *)(v6 + 32);
        *((_OWORD *)v20 + 1) = v22;
        v6 += 48;
        v20 += 48;
        v21 += 48;
      }
      while (v6 != a3);
    }
LABEL_28:
    *((void *)v7 + 1) = v20;
    return result;
  }
  uint64_t v23 = (char *)*((void *)result + 1);
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v9) >> 4);
  if (v24 < a4)
  {
    uint64_t v25 = a2 + 16 * ((v23 - v9) >> 4);
    if (v23 != v9)
    {
      int32x2_t v26 = v9 + 16;
      uint64_t v27 = 48 * v24;
      uint64_t v28 = (long long *)(a2 + 16);
      do
      {
        long long v29 = *v28;
        *((_DWORD *)v26 + 4) = *((_DWORD *)v28 + 4);
        *(_OWORD *)int32x2_t v26 = v29;
        v26 += 48;
        v28 += 3;
        v27 -= 48;
      }
      while (v27);
      float v9 = (char *)*((void *)result + 1);
    }
    uint64_t v30 = v9;
    if (v25 != a3)
    {
      unint64_t v31 = v9;
      uint64_t v30 = v9;
      do
      {
        *(void *)uint64_t v30 = &unk_2708F2120;
        long long v32 = *(_OWORD *)(v25 + 16);
        *((_DWORD *)v30 + 8) = *(_DWORD *)(v25 + 32);
        *((_OWORD *)v30 + 1) = v32;
        v25 += 48;
        v30 += 48;
        v31 += 48;
      }
      while (v25 != a3);
    }
    float32x2_t v20 = v30;
    goto LABEL_28;
  }
  if (a2 != a3)
  {
    do
    {
      long long v33 = *(_OWORD *)(v6 + 16);
      *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
      *((_OWORD *)v9 + 1) = v33;
      v6 += 48;
      v9 += 48;
    }
    while (v6 != a3);
    uint64_t v23 = (char *)*((void *)result + 1);
  }
  if (v23 != v9)
  {
    uint64_t v34 = v23 - 48;
    uint64_t v35 = v23 - 48;
    uint64_t v36 = v23 - 48;
    do
    {
      float32x2_t v37 = *(uint64_t (***)(char *))v36;
      v36 -= 48;
      BOOL result = (char *)(*v37)(v35);
      v34 -= 48;
      BOOL v16 = v35 == v9;
      uint64_t v35 = v36;
    }
    while (!v16);
  }
  *((void *)v7 + 1) = v9;
  return result;
}

uint64_t sub_25B58AFE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float32x4_t _Q2, double a8, double a9, int8x16_t a10)
{
  *(void *)BOOL result = &unk_2708F2160;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 11) = 0;
  unint64_t v10 = (unint64_t)(a4 - a3) >> 4;
  if ((int)v10 >= 1)
  {
    float32x4_t v11 = 0uLL;
    float v12 = 0.0;
    if (a3 != a4)
    {
      __asm { FMOV            V2.4S, #1.0 }
      do
      {
        a10.i32[0] = *(_DWORD *)(a3 + 8);
        a10 = (int8x16_t)vceqzq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a10.i8)));
        float32x4_t v11 = (float32x4_t)vbslq_s8(a10, (int8x16_t)v11, (int8x16_t)vaddq_f32(v11, _Q2));
        if (*(unsigned char *)(a3 + 12)) {
          float v12 = v12 + 1.0;
        }
        a3 += 16;
      }
      while (a3 != a4);
    }
    _Q2.f32[0] = (float)(int)v10;
    int16x8_t v17 = (int16x8_t)vcgtq_f32(vdivq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)(a2 + 24), (int32x4_t)vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 0xCuLL)), *(int32x4_t *)(a2 + 24)));
    *(int8x8_t *)v17.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v17), (int8x8_t)0x1000100010001);
    *(_DWORD *)(result + 8) = vmovn_s16(v17).u32[0];
    *(unsigned char *)(result + 12) = (float)(v12 / (float)(int)v10) > *(float *)(a2 + 40);
  }
  return result;
}

void *sub_25B58B0AC(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    BOOL result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

char *sub_25B58B110(char *__src, char *a2, char *a3)
{
  unsigned int v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      long long v28 = *(_OWORD *)__src;
      int64_t v10 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      unsigned int v3 = &__src[v10];
      *(_OWORD *)unsigned int v3 = v28;
    }
    else if (a2 + 16 == a3)
    {
      float32x4_t v11 = a3 - 16;
      long long v12 = *((_OWORD *)a3 - 1);
      unsigned int v3 = __src + 16;
      size_t v13 = a3 - 16 - __src;
      if (v11 != __src)
      {
        long long v29 = v12;
        memmove(__src + 16, __src, v13);
        long long v12 = v29;
      }
      *(_OWORD *)__long long src = v12;
    }
    else
    {
      uint64_t v5 = (a2 - __src) >> 4;
      if (v5 == (a3 - a2) >> 4)
      {
        uint64_t v6 = __src + 16;
        uint64_t v7 = a2 + 16;
        do
        {
          long long v8 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v6 - 1) = *((_OWORD *)v7 - 1);
          *((_OWORD *)v7 - 1) = v8;
          if (v6 == a2) {
            break;
          }
          v6 += 16;
          BOOL v9 = v7 == a3;
          v7 += 16;
        }
        while (!v9);
        return a2;
      }
      else
      {
        uint64_t v14 = (a3 - a2) >> 4;
        uint64_t v15 = (a2 - __src) >> 4;
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = v14;
          uint64_t v14 = v16 % v14;
        }
        while (v14);
        if (v15)
        {
          int16x8_t v17 = &__src[16 * v15];
          do
          {
            long long v18 = *((_OWORD *)v17 - 1);
            v17 -= 16;
            long long v19 = v18;
            float32x2_t v20 = &v17[16 * v5];
            uint64_t v21 = v17;
            do
            {
              long long v22 = v20;
              *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
              uint64_t v23 = &v20[16 * v5];
              BOOL v24 = __OFSUB__(v5, (a3 - v20) >> 4);
              uint64_t v26 = v5 - ((a3 - v20) >> 4);
              char v25 = (v26 < 0) ^ v24;
              float32x2_t v20 = &__src[16 * v26];
              if (v25) {
                float32x2_t v20 = v23;
              }
              uint64_t v21 = v22;
            }
            while (v20 != v17);
            *(_OWORD *)long long v22 = v19;
          }
          while (v17 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return v3;
}

void *sub_25B58B28C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_25B58B418(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25B58B2EC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B58B308(uint64_t a1, int a2, uint64_t a3, float a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(float *)(a1 + 32) = a4;
  uint64_t v6 = *(unsigned char **)a3;
  if (a1 != a3)
  {
    uint64_t v7 = *(unsigned char **)(a3 + 8);
    size_t v8 = v7 - v6;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
    if (v7 == v6)
    {
      int64_t v10 = 0;
      float32x4_t v11 = (void *)(a1 + 8);
    }
    else
    {
      if (v9 >= 0x1555555555555556) {
        sub_25B3FBC4C();
      }
      sub_25B58B418((void *)a1, v9);
      float32x4_t v11 = (void *)(a1 + 8);
      int64_t v10 = *(char **)(a1 + 8);
      memmove(v10, v6, v8);
    }
    *float32x4_t v11 = &v10[12 * v9];
    uint64_t v6 = *(unsigned char **)a3;
  }
  *(_DWORD *)(a1 + 24) = -1431655765 * ((*(void *)(a3 + 8) - (void)v6) >> 2);
  *(_DWORD *)(a1 + 36) = 0;
  return a1;
}

void sub_25B58B3FC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B58B418(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_25B3FBC4C();
  }
  BOOL result = (char *)sub_25B478C4C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void sub_25B58B468()
{
}

void sub_25B58B480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (float32x2_t **)(a4 + 8);
    size_t v8 = (float *)(a1 + 8);
    while (1)
    {
      sub_25B4D6A60((uint64_t)v17, (float32x2_t *)v6, v7, v8);
      if (v17[0]) {
        break;
      }
      sub_25B491958(v6, 0);
      uint64_t v16 = *(void *)(v6 + 8);
      if (v16)
      {
        v15.i32[0] = -1;
LABEL_12:
        *(_DWORD *)(v16 + 120) = v15.i32[0];
      }
LABEL_13:

      if (v19 < 0) {
        operator delete(__p);
      }
      v6 += 176;
      if (v6 == a3) {
        return;
      }
    }
    unint64_t v9 = (float32x2_t *)sub_25B490C80(a4, (unsigned __int8 **)&__p);
    *(float32x2_t *)&long long v10 = sub_25B40DF5C(*(float32x2_t *)(v6 + 16), *(double *)(v6 + 24), v9[2], v9[3]);
    long long v11 = v10;
    DWORD2(v11) = *(_DWORD *)(v6 + 64);
    long long v13 = v12;
    DWORD2(v13) = *(_DWORD *)(v6 + 68);
    *(void *)(v6 + 16) = v10;
    *(void *)(v6 + 24) = v12;
    DWORD2(v10) = DWORD2(v13);
    DWORD2(v12) = DWORD2(v11);
    *(_OWORD *)(v6 + 32) = v11;
    *(_OWORD *)(v6 + 48) = v13;
    uint64_t v14 = *(void *)(v6 + 8);
    src[0] = v10;
    src[1] = v13;
    src[2] = v12;
    src[3] = v11;
    if (v14) {
      objc_copyStruct((void *)(v14 + 272), src, 64, 1, 0);
    }
    sub_25B491958(v6, v20);
    float32x2_t v15 = v9[1];
    if (v15) {
      v15.i32[0] = *(_DWORD *)(*(void *)&v15 + 116);
    }
    uint64_t v16 = *(void *)(v6 + 8);
    if (!v16) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
}

void sub_25B58B5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B491BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25B58B5E0(std::string **a1, void *a2, uint64_t a3)
{
  uint64_t v49 = a3;
  id v6 = a2;
  for (unint64_t i = 0; objc_msgSend_count(v6, v4, v5, v49) > i; ++i)
  {
    std::operator+<char>();
    std::to_string(&v55, i);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v8 = &v55;
    }
    else {
      size_t v8 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    long long v10 = std::string::append(&v56, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v57, "\n", 1uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    int64_t v59 = v12->__r_.__value_.__r.__words[2];
    long long v58 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (v59 >= 0) {
      uint64_t v14 = (const std::string::value_type *)&v58;
    }
    else {
      uint64_t v14 = (const std::string::value_type *)v58;
    }
    if (v59 >= 0) {
      std::string::size_type v15 = HIBYTE(v59);
    }
    else {
      std::string::size_type v15 = *((void *)&v58 + 1);
    }
    std::string::append(*a1, v14, v15);
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    int16x8_t v17 = objc_msgSend_objectAtIndexedSubscript_(v6, v16, i);
    objc_msgSend_color(v17, v18, v19);
    std::to_string(&v52, v20);
    uint64_t v21 = std::string::insert(&v52, 0, "Kd ", 3uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = std::string::append(&v53, " ", 1uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = objc_msgSend_objectAtIndexedSubscript_(v6, v25, i);
    objc_msgSend_color(v26, v27, v28);
    std::to_string(&v51, v29);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v51;
    }
    else {
      uint64_t v30 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v51.__r_.__value_.__l.__size_;
    }
    long long v32 = std::string::append(&v54, (const std::string::value_type *)v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v55, " ", 1uLL);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    float32x2_t v37 = objc_msgSend_objectAtIndexedSubscript_(v6, v36, i);
    objc_msgSend_color(v37, v38, v39);
    std::to_string(&v50, v40);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &v50;
    }
    else {
      uint64_t v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v50.__r_.__value_.__l.__size_;
    }
    unint64_t v43 = std::string::append(&v56, (const std::string::value_type *)v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    uint64_t v45 = std::string::append(&v57, "\n", 1uLL);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    int64_t v59 = v45->__r_.__value_.__r.__words[2];
    long long v58 = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (v59 >= 0) {
      uint64_t v47 = (const std::string::value_type *)&v58;
    }
    else {
      uint64_t v47 = (const std::string::value_type *)v58;
    }
    if (v59 >= 0) {
      std::string::size_type v48 = HIBYTE(v59);
    }
    else {
      std::string::size_type v48 = *((void *)&v58 + 1);
    }
    std::string::append(*a1, v47, v48);
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }

    std::string::append(*a1, "illum 0\n", 8uLL);
  }
}

void sub_25B58B9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  if (*(char *)(v58 - 137) < 0) {
    operator delete(*(void **)(v58 - 160));
  }
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_25B58BB18(std::string **a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_count(v3, v4, v5))
  {
    std::operator+<char>();
    id v6 = std::string::append(&v50, "\n", 1uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t v52 = v6->__r_.__value_.__r.__words[2];
    long long v51 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v52 >= 0) {
      size_t v8 = (const std::string::value_type *)&v51;
    }
    else {
      size_t v8 = (const std::string::value_type *)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v9 = HIBYTE(v52);
    }
    else {
      std::string::size_type v9 = *((void *)&v51 + 1);
    }
    std::string::append(*a1, v8, v9);
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    long long v11 = objc_msgSend_objectAtIndexedSubscript_(v3, v10, 0);
    objc_msgSend_color(v11, v12, v13);
    std::to_string(&v45, v14);
    std::string::size_type v15 = std::string::insert(&v45, 0, "Kd ", 3uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int16x8_t v17 = std::string::append(&v46, " ", 1uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    float v20 = objc_msgSend_objectAtIndexedSubscript_(v3, v19, 0);
    objc_msgSend_color(v20, v21, v22);
    std::to_string(&v44, v23);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v24 = &v44;
    }
    else {
      long long v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = std::string::append(&v47, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = std::string::append(&v48, " ", 1uLL);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v31 = objc_msgSend_objectAtIndexedSubscript_(v3, v30, 0);
    objc_msgSend_color(v31, v32, v33);
    std::to_string(&v43, v34);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v35 = &v43;
    }
    else {
      long long v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
    }
    float32x2_t v37 = std::string::append(&v49, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    uint64_t v39 = std::string::append(&v50, "\n", 1uLL);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    int64_t v52 = v39->__r_.__value_.__r.__words[2];
    long long v51 = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (v52 >= 0) {
      uint64_t v41 = (const std::string::value_type *)&v51;
    }
    else {
      uint64_t v41 = (const std::string::value_type *)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v42 = HIBYTE(v52);
    }
    else {
      std::string::size_type v42 = *((void *)&v51 + 1);
    }
    std::string::append(*a1, v41, v42);
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }

    std::string::append(*a1, "illum 0\n", 8uLL);
  }
}

void sub_25B58BE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_25B58BFA8(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  id v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  id v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x261163CA0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_25B58C138(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x261163E40](v1);
  _Unwind_Resume(a1);
}

void *sub_25B58C170(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x261163CB0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x261163E40](a1 + 52);
  return a1;
}

void sub_25B58C23C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)MEMORY[0x263F08900];
  uint64_t v5 = objc_msgSend_dictionaryRepresentation(a1, (const char *)a2, a3);
  objc_msgSend_dataWithJSONObject_options_error_(v4, v6, (uint64_t)v5, 1, 0);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  if (*(char *)(a2 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, v7, a2);
  }
  else {
  size_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v7, *(void *)a2);
  }
  objc_msgSend_writeToFile_atomically_(v10, v9, (uint64_t)v8, 1);
}

void sub_25B58C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25B58C314(void *a1, std::string *a2)
{
  v536[19] = *MEMORY[0x263EF8340];
  id v493 = a1;
  uint64_t v512 = 0;
  sub_25B403500(&__p, "");
  int v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  __str = a2;
  if ((v3 & 0x80000000) == 0)
  {
    std::string __dst = *a2;
LABEL_4:
    int v4 = 0;
    int64_t size = v3;
    id v6 = a2;
    goto LABEL_5;
  }
  sub_25B4002F4(&__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  int v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  id v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  int64_t size = a2->__r_.__value_.__l.__size_;
  int v4 = 1;
LABEL_5:
  if (size >= 1)
  {
    uint64_t v7 = (char *)v6 + size;
    size_t v8 = v6;
    do
    {
      std::string::size_type v9 = (char *)memchr(v8, 47, size);
      if (!v9) {
        break;
      }
      if (*v9 == 47)
      {
        if (v9 != v7 && v9 - (char *)v6 != -1)
        {
          id v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
          std::string::size_type v11 = __str->__r_.__value_.__l.__size_;
          if (!v4)
          {
            id v10 = __str;
            std::string::size_type v11 = v3;
          }
          while (v11)
          {
            int v12 = v10->__r_.__value_.__s.__data_[--v11];
            if (v12 == 47)
            {
              uint64_t v13 = v11;
              goto LABEL_20;
            }
          }
          uint64_t v13 = -1;
LABEL_20:
          std::string::basic_string((std::string *)&v527, __str, 0, v13 + 1, (std::allocator<char> *)&v524);
          if (SHIBYTE(v511) < 0) {
            operator delete((void *)__p);
          }
          long long __p = v527;
          uint64_t v511 = v528;
          int v14 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
          BOOL v15 = v14 < 0;
          long long v16 = (std::string *)__str->__r_.__value_.__r.__words[0];
          if (v14 >= 0) {
            long long v16 = __str;
          }
          std::string::size_type v17 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          if (v15) {
            std::string::size_type v17 = __str->__r_.__value_.__l.__size_;
          }
          uint64_t v18 = v17;
          while (v18)
          {
            int v19 = v16->__r_.__value_.__s.__data_[--v18];
            if (v19 == 47) {
              goto LABEL_31;
            }
          }
          uint64_t v18 = -1;
LABEL_31:
          std::string::size_type v20 = v18 + 1;
          uint64_t v21 = 1;
          std::string::size_type v22 = v17;
          while (v22)
          {
            int v23 = v16->__r_.__value_.__s.__data_[--v22];
            if (v23 == 47)
            {
              uint64_t v21 = -(uint64_t)v22;
              break;
            }
          }
          std::string::basic_string((std::string *)&v527, __str, v20, v21 + v17, (std::allocator<char> *)&v524);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v527;
          __dst.__r_.__value_.__r.__words[2] = v528;
        }
        break;
      }
      size_t v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 1);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = __dst.__r_.__value_.__l.__size_;
  }
  char v25 = &v506;
  sub_25B47B994((uint64_t)&v506, v24 + 4);
  if ((v508 & 0x80u) != 0) {
    char v25 = v506;
  }
  if (v24)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v25, p_dst, v24);
  }
  strcpy((char *)v25 + v24, ".mtl");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v27 = __dst.__r_.__value_.__l.__size_;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &__dst;
  }
  else {
    uint64_t v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v27 >= 1)
  {
    long long v29 = (char *)v28 + v27;
    size_t v30 = v27;
    std::string::size_type v31 = v28;
    do
    {
      long long v32 = memchr(v31, 46, v30);
      if (!v32) {
        break;
      }
      if (*v32 == 46)
      {
        if (v32 != v29 && v32 - (unsigned char *)v28 != -1)
        {
          while (v27)
          {
            int v33 = v28->__r_.__value_.__s.__data_[--v27];
            if (v33 == 46)
            {
              uint64_t v34 = v27;
              goto LABEL_66;
            }
          }
          uint64_t v34 = -1;
LABEL_66:
          std::string::basic_string((std::string *)&v527, &__dst, 0, v34 + 1, (std::allocator<char> *)&v523);
          long long v35 = std::string::append((std::string *)&v527, "mtl", 3uLL);
          std::string::size_type v36 = (void *)v35->__r_.__value_.__r.__words[0];
          v524.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v524.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
          unsigned __int8 v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if ((char)v508 < 0) {
            operator delete(v506);
          }
          float v506 = v36;
          *(void *)long long v507 = v524.__r_.__value_.__r.__words[0];
          *(void *)&v507[7] = *(std::string::size_type *)((char *)v524.__r_.__value_.__r.__words + 7);
          unsigned __int8 v508 = v37;
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
        }
        break;
      }
      std::string::size_type v31 = (std::string *)(v32 + 1);
      size_t v30 = v29 - (unsigned char *)v31;
    }
    while (v29 - (unsigned char *)v31 >= 1);
  }
  if (v511 >= 0) {
    size_t v38 = HIBYTE(v511);
  }
  else {
    size_t v38 = *((void *)&__p + 1);
  }
  if ((v508 & 0x80u) == 0) {
    size_t v39 = v508;
  }
  else {
    size_t v39 = *(void *)v507;
  }
  long long v40 = v504;
  sub_25B47B994((uint64_t)v504, v39 + v38);
  if ((v505 & 0x80u) != 0) {
    long long v40 = (void **)v504[0];
  }
  if (v38)
  {
    if (v511 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    memmove(v40, p_p, v38);
  }
  std::string::size_type v42 = (char *)v40 + v38;
  if (v39)
  {
    if ((v508 & 0x80u) == 0) {
      std::string v43 = &v506;
    }
    else {
      std::string v43 = v506;
    }
    memmove(v42, v43, v39);
  }
  v42[v39] = 0;
  std::operator+<char>();
  std::string v44 = std::string::append((std::string *)&v527, "\n", 1uLL);
  long long v47 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v503.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v503.__r_.__value_.__l.__data_ = v47;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }
  std::string v48 = objc_msgSend_walls(v493, v45, v46);
  sub_25B403500(&v527, "Wall");
  sub_25B58FE90(v48, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  long long v51 = objc_msgSend_openings(v493, v49, v50);
  sub_25B403500(&v527, "Opening");
  sub_25B58FE90(v51, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  std::string v54 = objc_msgSend_windows(v493, v52, v53);
  sub_25B403500(&v527, "Window");
  sub_25B58FE90(v54, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  std::string v57 = objc_msgSend_doors(v493, v55, v56);
  sub_25B403500(&v527, "Door");
  sub_25B58FE90(v57, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  uint64_t v60 = objc_msgSend_opendoors(v493, v58, v59);
  sub_25B403500(&v527, "Opendoor");
  sub_25B58FE90(v60, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  uint64_t v494 = objc_msgSend_objects(v493, v61, v62);
  sub_25B403500(v501, "Objects");
  id v63 = v494;
  BOOL v64 = @"ultimate";
  if (objc_msgSend_count(v63, v65, v66))
  {
    unint64_t v69 = 0;
    id v496 = v63;
    while (objc_msgSend_count(v63, v67, v68) > v69)
    {
      std::operator+<char>();
      std::to_string(&v522, v69);
      if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v70 = &v522;
      }
      else {
        unint64_t v70 = (std::string *)v522.__r_.__value_.__r.__words[0];
      }
      if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v71 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v71 = v522.__r_.__value_.__l.__size_;
      }
      uint64_t v72 = std::string::append(&v523, (const std::string::value_type *)v70, v71);
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v524.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v524.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      float32x2_t v74 = std::string::append(&v524, "\n", 1uLL);
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      *(void *)&long long v528 = *((void *)&v74->__r_.__value_.__l + 2);
      long long v527 = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v528) & 0x80u) == 0) {
        float32x2_t v76 = (const std::string::value_type *)&v527;
      }
      else {
        float32x2_t v76 = (const std::string::value_type *)v527;
      }
      if ((SBYTE7(v528) & 0x80u) == 0) {
        std::string::size_type v77 = BYTE7(v528);
      }
      else {
        std::string::size_type v77 = *((void *)&v527 + 1);
      }
      std::string::append(&v503, v76, v77);
      if (SBYTE7(v528) < 0) {
        operator delete((void *)v527);
      }
      if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v524.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v522.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v523.__r_.__value_.__l.__data_);
      }
      objc_msgSend_objectAtIndexedSubscript_(v63, v78, v69);
      id v79 = (id)objc_claimAutoreleasedReturnValue();
      int32x2_t v80 = @"ultimate";
      char hasBoxesDict = objc_msgSend_hasBoxesDict_(v79, v81, @"ultimate");
      if (hasBoxesDict)
      {
        long long v533 = 0u;
        long long v534 = 0u;
        long long v531 = 0u;
        long long v532 = 0u;
        long long v529 = 0u;
        long long v530 = 0u;
        long long v527 = 0u;
        long long v528 = 0u;
        float32x2_t v85 = objc_msgSend_boxesDict(v79, v82, v83);
        float32x2_t v87 = objc_msgSend_objectForKeyedSubscript_(v85, v86, @"ultimate");
        sub_25B445344((uint64_t)&v527, v87);

        unint64_t v88 = v69;
        unint64_t v89 = 0;
        float32x2_t v90 = 0;
        float32x2_t v91 = 0;
        uint64_t v92 = 8;
        do
        {
          unint64_t v93 = v92--;
          if ((unint64_t)v90 >= v89)
          {
            uint64_t v94 = (v90 - v91) >> 4;
            unint64_t v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v89 - (void)v91) >> 3 > v95) {
              unint64_t v95 = (uint64_t)(v89 - (void)v91) >> 3;
            }
            if (v89 - (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v96 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v95;
            }
            if (v96) {
              unint64_t v96 = (unint64_t)sub_25B3FFAEC(v96);
            }
            else {
              uint64_t v97 = 0;
            }
            uint64_t v98 = (char *)(v96 + 16 * v94);
            *(_OWORD *)uint64_t v98 = *(&v527 + v92);
            float32x2_t v99 = v98 + 16;
            if (v90 != v91)
            {
              do
              {
                long long v100 = *((_OWORD *)v90 - 1);
                v90 -= 16;
                *((_OWORD *)v98 - 1) = v100;
                v98 -= 16;
              }
              while (v90 != v91);
              float32x2_t v90 = v91;
            }
            float32x2_t v91 = v98;
            unint64_t v89 = v96 + 16 * v97;
            if (v90) {
              operator delete(v90);
            }
            float32x2_t v90 = v99;
          }
          else
          {
            *(_OWORD *)float32x2_t v90 = *(&v527 + v92);
            v90 += 16;
          }
        }
        while (v93 > 1);

        id v63 = v496;
        unint64_t v69 = v88;

        if (hasBoxesDict)
        {
          memset(&v515, 0, sizeof(v515));
          sub_25B40EE6C(&v515, v91, (uint64_t)v90, (v90 - v91) >> 4);
          sub_25B403500(&v514, "");
          std::string::append(&v514, "# obj_start\n", 0xCuLL);
          std::string::size_type v101 = v515.__r_.__value_.__l.__size_;
          float v102 = (float *)v515.__r_.__value_.__r.__words[0];
          std::string::size_type v498 = v515.__r_.__value_.__r.__words[0];
          if (v515.__r_.__value_.__r.__words[0] == v515.__r_.__value_.__l.__size_)
          {
            memset(&v524, 0, sizeof(v524));
          }
          else
          {
            do
            {
              std::to_string(&v519, *v102);
              float32x2_t v103 = std::string::insert(&v519, 0, "v ", 2uLL);
              long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
              v520.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v104;
              v103->__r_.__value_.__l.__size_ = 0;
              v103->__r_.__value_.__r.__words[2] = 0;
              v103->__r_.__value_.__r.__words[0] = 0;
              float32x2_t v105 = std::string::append(&v520, " ", 1uLL);
              long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
              v521.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v106;
              v105->__r_.__value_.__l.__size_ = 0;
              v105->__r_.__value_.__r.__words[2] = 0;
              v105->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v518, v102[1]);
              if ((v518.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                float v107 = &v518;
              }
              else {
                float v107 = (std::string *)v518.__r_.__value_.__r.__words[0];
              }
              if ((v518.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v108 = HIBYTE(v518.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v108 = v518.__r_.__value_.__l.__size_;
              }
              int32x2_t v109 = std::string::append(&v521, (const std::string::value_type *)v107, v108);
              long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v522.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              uint64_t v111 = std::string::append(&v522, " ", 1uLL);
              long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v523.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v517, v102[2]);
              if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                __float2 v113 = &v517;
              }
              else {
                __float2 v113 = (std::string *)v517.__r_.__value_.__r.__words[0];
              }
              if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v114 = HIBYTE(v517.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v114 = v517.__r_.__value_.__l.__size_;
              }
              float v115 = std::string::append(&v523, (const std::string::value_type *)v113, v114);
              long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
              v524.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v524.__r_.__value_.__l.__data_ = v116;
              v115->__r_.__value_.__l.__size_ = 0;
              v115->__r_.__value_.__r.__words[2] = 0;
              v115->__r_.__value_.__r.__words[0] = 0;
              float v117 = std::string::append(&v524, " \n", 2uLL);
              long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
              *(void *)&long long v528 = *((void *)&v117->__r_.__value_.__l + 2);
              long long v527 = v118;
              v117->__r_.__value_.__l.__size_ = 0;
              v117->__r_.__value_.__r.__words[2] = 0;
              v117->__r_.__value_.__r.__words[0] = 0;
              if ((SBYTE7(v528) & 0x80u) == 0) {
                float v119 = (const std::string::value_type *)&v527;
              }
              else {
                float v119 = (const std::string::value_type *)v527;
              }
              if ((SBYTE7(v528) & 0x80u) == 0) {
                std::string::size_type v120 = BYTE7(v528);
              }
              else {
                std::string::size_type v120 = *((void *)&v527 + 1);
              }
              std::string::append(&v514, v119, v120);
              if (SBYTE7(v528) < 0) {
                operator delete((void *)v527);
              }
              if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v524.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v517.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v523.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v522.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v518.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v521.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v520.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v519.__r_.__value_.__l.__data_);
              }
              v102 += 4;
            }
            while (v102 != (float *)v101);
            memset(&v524, 0, sizeof(v524));
            if ((unint64_t)((uint64_t)(v101 - v498) >> 4) <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = (uint64_t)(v101 - v498) >> 4;
            }
            unint64_t v122 = v512 + 1;
            do
            {
              std::to_string(&v523, v122);
              int32x2_t v123 = (_OWORD *)v524.__r_.__value_.__l.__size_;
              if (v524.__r_.__value_.__l.__size_ >= v524.__r_.__value_.__r.__words[2])
              {
                unint64_t v125 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v524.__r_.__value_.__l.__size_ - v524.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v126 = v125 + 1;
                if (v125 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_25B3FBC4C();
                }
                if (0x5555555555555556
                   * ((uint64_t)(v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0]) >> 3) > v126)
                  unint64_t v126 = 0x5555555555555556
                       * ((uint64_t)(v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  unint64_t v127 = 0xAAAAAAAAAAAAAAALL;
                else {
                  unint64_t v127 = v126;
                }
                *(void *)&long long v529 = (char *)&v524.__r_.__value_.__l + 16;
                if (v127) {
                  unint64_t v127 = (unint64_t)sub_25B413D74(v127);
                }
                else {
                  uint64_t v128 = 0;
                }
                unint64_t v129 = v127 + 24 * v125;
                *(void *)&long long v527 = v127;
                *((void *)&v527 + 1) = v129;
                *((void *)&v528 + 1) = v127 + 24 * v128;
                long long v130 = *(_OWORD *)&v523.__r_.__value_.__l.__data_;
                *(void *)(v129 + 16) = *((void *)&v523.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v129 = v130;
                memset(&v523, 0, sizeof(v523));
                *(void *)&long long v528 = v129 + 24;
                sub_25B4A2F38((uint64_t *)&v524, &v527);
                std::string::size_type v131 = v524.__r_.__value_.__l.__size_;
                sub_25B4A2FBC((uint64_t)&v527);
                v524.__r_.__value_.__l.__size_ = v131;
                if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v523.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v124 = *(_OWORD *)&v523.__r_.__value_.__l.__data_;
                *(void *)(v524.__r_.__value_.__l.__size_ + 16) = *((void *)&v523.__r_.__value_.__l + 2);
                _OWORD *v123 = v124;
                v524.__r_.__value_.__l.__size_ = (std::string::size_type)v123 + 24;
              }
              ++v122;
              --v121;
            }
            while (v121);
          }
          sub_25B403500(&v516, "");
          std::operator+<char>();
          float v132 = std::string::append(&v517, " ", 1uLL);
          long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          int v134 = *(char *)(v524.__r_.__value_.__r.__words[0] + 47);
          if (v134 >= 0) {
            float32x2_t v135 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 24);
          }
          else {
            float32x2_t v135 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 24);
          }
          if (v134 >= 0) {
            std::string::size_type v136 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 47);
          }
          else {
            std::string::size_type v136 = *(void *)(v524.__r_.__value_.__r.__words[0] + 32);
          }
          double v137 = std::string::append(&v518, v135, v136);
          long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v138;
          v137->__r_.__value_.__l.__size_ = 0;
          v137->__r_.__value_.__r.__words[2] = 0;
          v137->__r_.__value_.__r.__words[0] = 0;
          float32x2_t v139 = std::string::append(&v519, " ", 1uLL);
          long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v140;
          v139->__r_.__value_.__l.__size_ = 0;
          v139->__r_.__value_.__r.__words[2] = 0;
          v139->__r_.__value_.__r.__words[0] = 0;
          int v141 = *(char *)(v524.__r_.__value_.__r.__words[0] + 71);
          if (v141 >= 0) {
            float32x2_t v142 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 48);
          }
          else {
            float32x2_t v142 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 48);
          }
          if (v141 >= 0) {
            std::string::size_type v143 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 71);
          }
          else {
            std::string::size_type v143 = *(void *)(v524.__r_.__value_.__r.__words[0] + 56);
          }
          float32x2_t v144 = std::string::append(&v520, v142, v143);
          long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          int32x2_t v146 = std::string::append(&v521, " ", 1uLL);
          long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          int v148 = *(char *)(v524.__r_.__value_.__r.__words[0] + 95);
          if (v148 >= 0) {
            float32x2_t v149 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          else {
            float32x2_t v149 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          if (v148 >= 0) {
            std::string::size_type v150 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 95);
          }
          else {
            std::string::size_type v150 = *(void *)(v524.__r_.__value_.__r.__words[0] + 80);
          }
          int32x2_t v151 = std::string::append(&v522, v149, v150);
          long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v152;
          v151->__r_.__value_.__l.__size_ = 0;
          v151->__r_.__value_.__r.__words[2] = 0;
          v151->__r_.__value_.__r.__words[0] = 0;
          int32x2_t v153 = std::string::append(&v523, "\n", 1uLL);
          long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v153->__r_.__value_.__l + 2);
          long long v527 = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            int32x2_t v155 = (const std::string::value_type *)&v527;
          }
          else {
            int32x2_t v155 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v156 = BYTE7(v528);
          }
          else {
            std::string::size_type v156 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v155, v156);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          int32x2_t v157 = std::string::append(&v517, " ", 1uLL);
          long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v158;
          v157->__r_.__value_.__l.__size_ = 0;
          v157->__r_.__value_.__r.__words[2] = 0;
          v157->__r_.__value_.__r.__words[0] = 0;
          int v159 = *(char *)(v524.__r_.__value_.__r.__words[0] + 119);
          if (v159 >= 0) {
            char v160 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 96);
          }
          else {
            char v160 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 96);
          }
          if (v159 >= 0) {
            std::string::size_type v161 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 119);
          }
          else {
            std::string::size_type v161 = *(void *)(v524.__r_.__value_.__r.__words[0] + 104);
          }
          int8x8_t v162 = std::string::append(&v518, v160, v161);
          long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v163;
          v162->__r_.__value_.__l.__size_ = 0;
          v162->__r_.__value_.__r.__words[2] = 0;
          v162->__r_.__value_.__r.__words[0] = 0;
          unint64_t v164 = std::string::append(&v519, " ", 1uLL);
          long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v165;
          v164->__r_.__value_.__l.__size_ = 0;
          v164->__r_.__value_.__r.__words[2] = 0;
          v164->__r_.__value_.__r.__words[0] = 0;
          int v166 = *(char *)(v524.__r_.__value_.__r.__words[0] + 143);
          if (v166 >= 0) {
            unint64_t v167 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          else {
            unint64_t v167 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          if (v166 >= 0) {
            std::string::size_type v168 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 143);
          }
          else {
            std::string::size_type v168 = *(void *)(v524.__r_.__value_.__r.__words[0] + 128);
          }
          float32x2_t v169 = std::string::append(&v520, v167, v168);
          long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v170;
          v169->__r_.__value_.__l.__size_ = 0;
          v169->__r_.__value_.__r.__words[2] = 0;
          v169->__r_.__value_.__r.__words[0] = 0;
          long long v171 = std::string::append(&v521, " ", 1uLL);
          long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v172;
          v171->__r_.__value_.__l.__size_ = 0;
          v171->__r_.__value_.__r.__words[2] = 0;
          v171->__r_.__value_.__r.__words[0] = 0;
          int v173 = *(char *)(v524.__r_.__value_.__r.__words[0] + 47);
          if (v173 >= 0) {
            uint64_t v174 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 24);
          }
          else {
            uint64_t v174 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 24);
          }
          if (v173 >= 0) {
            std::string::size_type v175 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 47);
          }
          else {
            std::string::size_type v175 = *(void *)(v524.__r_.__value_.__r.__words[0] + 32);
          }
          unint64_t v176 = std::string::append(&v522, v174, v175);
          long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v176->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v177;
          v176->__r_.__value_.__l.__size_ = 0;
          v176->__r_.__value_.__r.__words[2] = 0;
          v176->__r_.__value_.__r.__words[0] = 0;
          float32x2_t v178 = std::string::append(&v523, "\n", 1uLL);
          long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v178->__r_.__value_.__l + 2);
          long long v527 = v179;
          v178->__r_.__value_.__l.__size_ = 0;
          v178->__r_.__value_.__r.__words[2] = 0;
          v178->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            float v180 = (const std::string::value_type *)&v527;
          }
          else {
            float v180 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v181 = BYTE7(v528);
          }
          else {
            std::string::size_type v181 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v180, v181);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          float32x2_t v182 = std::string::append(&v517, " ", 1uLL);
          long long v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v183;
          v182->__r_.__value_.__l.__size_ = 0;
          v182->__r_.__value_.__r.__words[2] = 0;
          v182->__r_.__value_.__r.__words[0] = 0;
          int v184 = *(char *)(v524.__r_.__value_.__r.__words[0] + 95);
          if (v184 >= 0) {
            float32x2_t v185 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          else {
            float32x2_t v185 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          if (v184 >= 0) {
            std::string::size_type v186 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 95);
          }
          else {
            std::string::size_type v186 = *(void *)(v524.__r_.__value_.__r.__words[0] + 80);
          }
          float32x2_t v187 = std::string::append(&v518, v185, v186);
          long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v188;
          v187->__r_.__value_.__l.__size_ = 0;
          v187->__r_.__value_.__r.__words[2] = 0;
          v187->__r_.__value_.__r.__words[0] = 0;
          float v189 = std::string::append(&v519, " ", 1uLL);
          long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v190;
          v189->__r_.__value_.__l.__size_ = 0;
          v189->__r_.__value_.__r.__words[2] = 0;
          v189->__r_.__value_.__r.__words[0] = 0;
          int v191 = *(char *)(v524.__r_.__value_.__r.__words[0] + 191);
          if (v191 >= 0) {
            unint64_t v192 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          else {
            unint64_t v192 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          if (v191 >= 0) {
            std::string::size_type v193 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 191);
          }
          else {
            std::string::size_type v193 = *(void *)(v524.__r_.__value_.__r.__words[0] + 176);
          }
          uint64_t v194 = std::string::append(&v520, v192, v193);
          long long v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v195;
          v194->__r_.__value_.__l.__size_ = 0;
          v194->__r_.__value_.__r.__words[2] = 0;
          v194->__r_.__value_.__r.__words[0] = 0;
          uint64_t v196 = std::string::append(&v521, " ", 1uLL);
          long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v197;
          v196->__r_.__value_.__l.__size_ = 0;
          v196->__r_.__value_.__r.__words[2] = 0;
          v196->__r_.__value_.__r.__words[0] = 0;
          int v198 = *(char *)(v524.__r_.__value_.__r.__words[0] + 119);
          if (v198 >= 0) {
            float32x2_t v199 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 96);
          }
          else {
            float32x2_t v199 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 96);
          }
          if (v198 >= 0) {
            std::string::size_type v200 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 119);
          }
          else {
            std::string::size_type v200 = *(void *)(v524.__r_.__value_.__r.__words[0] + 104);
          }
          uint64_t v201 = std::string::append(&v522, v199, v200);
          long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v202;
          v201->__r_.__value_.__l.__size_ = 0;
          v201->__r_.__value_.__r.__words[2] = 0;
          v201->__r_.__value_.__r.__words[0] = 0;
          float32x2_t v203 = std::string::append(&v523, "\n", 1uLL);
          long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v203->__r_.__value_.__l + 2);
          long long v527 = v204;
          v203->__r_.__value_.__l.__size_ = 0;
          v203->__r_.__value_.__r.__words[2] = 0;
          v203->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            float v205 = (const std::string::value_type *)&v527;
          }
          else {
            float v205 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v206 = BYTE7(v528);
          }
          else {
            std::string::size_type v206 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v205, v206);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          float32x2_t v207 = std::string::append(&v517, " ", 1uLL);
          long long v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v208;
          v207->__r_.__value_.__l.__size_ = 0;
          v207->__r_.__value_.__r.__words[2] = 0;
          v207->__r_.__value_.__r.__words[0] = 0;
          int v209 = *(char *)(v524.__r_.__value_.__r.__words[0] + 143);
          if (v209 >= 0) {
            float32x2_t v210 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          else {
            float32x2_t v210 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          if (v209 >= 0) {
            std::string::size_type v211 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 143);
          }
          else {
            std::string::size_type v211 = *(void *)(v524.__r_.__value_.__r.__words[0] + 128);
          }
          int32x2_t v212 = std::string::append(&v518, v210, v211);
          long long v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v213;
          v212->__r_.__value_.__l.__size_ = 0;
          v212->__r_.__value_.__r.__words[2] = 0;
          v212->__r_.__value_.__r.__words[0] = 0;
          int8x8_t v214 = std::string::append(&v519, " ", 1uLL);
          long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v215;
          v214->__r_.__value_.__l.__size_ = 0;
          v214->__r_.__value_.__r.__words[2] = 0;
          v214->__r_.__value_.__r.__words[0] = 0;
          int v216 = *(char *)(v524.__r_.__value_.__r.__words[0] + 167);
          if (v216 >= 0) {
            long long v217 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          else {
            long long v217 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          if (v216 >= 0) {
            std::string::size_type v218 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 167);
          }
          else {
            std::string::size_type v218 = *(void *)(v524.__r_.__value_.__r.__words[0] + 152);
          }
          float32x2_t v219 = std::string::append(&v520, v217, v218);
          long long v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v220;
          v219->__r_.__value_.__l.__size_ = 0;
          v219->__r_.__value_.__r.__words[2] = 0;
          v219->__r_.__value_.__r.__words[0] = 0;
          unint64_t v221 = std::string::append(&v521, " ", 1uLL);
          long long v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v222;
          v221->__r_.__value_.__l.__size_ = 0;
          v221->__r_.__value_.__r.__words[2] = 0;
          v221->__r_.__value_.__r.__words[0] = 0;
          int v223 = *(char *)(v524.__r_.__value_.__r.__words[0] + 71);
          if (v223 >= 0) {
            unint64_t v224 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 48);
          }
          else {
            unint64_t v224 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 48);
          }
          if (v223 >= 0) {
            std::string::size_type v225 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 71);
          }
          else {
            std::string::size_type v225 = *(void *)(v524.__r_.__value_.__r.__words[0] + 56);
          }
          long long v226 = std::string::append(&v522, v224, v225);
          long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v227;
          v226->__r_.__value_.__l.__size_ = 0;
          v226->__r_.__value_.__r.__words[2] = 0;
          v226->__r_.__value_.__r.__words[0] = 0;
          long long v228 = std::string::append(&v523, "\n", 1uLL);
          long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v228->__r_.__value_.__l + 2);
          long long v527 = v229;
          v228->__r_.__value_.__l.__size_ = 0;
          v228->__r_.__value_.__r.__words[2] = 0;
          v228->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            float32x2_t v230 = (const std::string::value_type *)&v527;
          }
          else {
            float32x2_t v230 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v231 = BYTE7(v528);
          }
          else {
            std::string::size_type v231 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v230, v231);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          int8x8_t v232 = std::string::append(&v517, " ", 1uLL);
          long long v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v233;
          v232->__r_.__value_.__l.__size_ = 0;
          v232->__r_.__value_.__r.__words[2] = 0;
          v232->__r_.__value_.__r.__words[0] = 0;
          int v234 = *(char *)(v524.__r_.__value_.__r.__words[0] + 167);
          if (v234 >= 0) {
            unint64_t v235 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          else {
            unint64_t v235 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          if (v234 >= 0) {
            std::string::size_type v236 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 167);
          }
          else {
            std::string::size_type v236 = *(void *)(v524.__r_.__value_.__r.__words[0] + 152);
          }
          unint64_t v237 = std::string::append(&v518, v235, v236);
          long long v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v238;
          v237->__r_.__value_.__l.__size_ = 0;
          v237->__r_.__value_.__r.__words[2] = 0;
          v237->__r_.__value_.__r.__words[0] = 0;
          float32x2_t v239 = std::string::append(&v519, " ", 1uLL);
          long long v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v239->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v240;
          v239->__r_.__value_.__l.__size_ = 0;
          v239->__r_.__value_.__r.__words[2] = 0;
          v239->__r_.__value_.__r.__words[0] = 0;
          int v241 = *(char *)(v524.__r_.__value_.__r.__words[0] + 191);
          if (v241 >= 0) {
            int32x2_t v242 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          else {
            int32x2_t v242 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          if (v241 >= 0) {
            std::string::size_type v243 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 191);
          }
          else {
            std::string::size_type v243 = *(void *)(v524.__r_.__value_.__r.__words[0] + 176);
          }
          long long v244 = std::string::append(&v520, v242, v243);
          long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v245;
          v244->__r_.__value_.__l.__size_ = 0;
          v244->__r_.__value_.__r.__words[2] = 0;
          v244->__r_.__value_.__r.__words[0] = 0;
          int8x8_t v246 = std::string::append(&v521, " ", 1uLL);
          long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v247;
          v246->__r_.__value_.__l.__size_ = 0;
          v246->__r_.__value_.__r.__words[2] = 0;
          v246->__r_.__value_.__r.__words[0] = 0;
          int v248 = *(char *)(v524.__r_.__value_.__r.__words[0] + 95);
          if (v248 >= 0) {
            unint64_t v249 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          else {
            unint64_t v249 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 72);
          }
          if (v248 >= 0) {
            std::string::size_type v250 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 95);
          }
          else {
            std::string::size_type v250 = *(void *)(v524.__r_.__value_.__r.__words[0] + 80);
          }
          uint64_t v251 = std::string::append(&v522, v249, v250);
          long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v252;
          v251->__r_.__value_.__l.__size_ = 0;
          v251->__r_.__value_.__r.__words[2] = 0;
          v251->__r_.__value_.__r.__words[0] = 0;
          int32x2_t v253 = std::string::append(&v523, "\n", 1uLL);
          long long v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v253->__r_.__value_.__l + 2);
          long long v527 = v254;
          v253->__r_.__value_.__l.__size_ = 0;
          v253->__r_.__value_.__r.__words[2] = 0;
          v253->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            float32x2_t v255 = (const std::string::value_type *)&v527;
          }
          else {
            float32x2_t v255 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v256 = BYTE7(v528);
          }
          else {
            std::string::size_type v256 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v255, v256);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          long long v257 = std::string::append(&v517, " ", 1uLL);
          long long v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
          v518.__r_.__value_.__r.__words[2] = v257->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v518.__r_.__value_.__l.__data_ = v258;
          v257->__r_.__value_.__l.__size_ = 0;
          v257->__r_.__value_.__r.__words[2] = 0;
          v257->__r_.__value_.__r.__words[0] = 0;
          int v259 = *(char *)(v524.__r_.__value_.__r.__words[0] + 143);
          if (v259 >= 0) {
            long long v260 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          else {
            long long v260 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 120);
          }
          if (v259 >= 0) {
            std::string::size_type v261 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 143);
          }
          else {
            std::string::size_type v261 = *(void *)(v524.__r_.__value_.__r.__words[0] + 128);
          }
          float32x2_t v262 = std::string::append(&v518, v260, v261);
          long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
          v519.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v263;
          v262->__r_.__value_.__l.__size_ = 0;
          v262->__r_.__value_.__r.__words[2] = 0;
          v262->__r_.__value_.__r.__words[0] = 0;
          unint64_t v264 = std::string::append(&v519, " ", 1uLL);
          long long v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
          v520.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v265;
          v264->__r_.__value_.__l.__size_ = 0;
          v264->__r_.__value_.__r.__words[2] = 0;
          v264->__r_.__value_.__r.__words[0] = 0;
          int v266 = *(char *)(v524.__r_.__value_.__r.__words[0] + 167);
          if (v266 >= 0) {
            unint64_t v267 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          else {
            unint64_t v267 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 144);
          }
          if (v266 >= 0) {
            std::string::size_type v268 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 167);
          }
          else {
            std::string::size_type v268 = *(void *)(v524.__r_.__value_.__r.__words[0] + 152);
          }
          long long v269 = std::string::append(&v520, v267, v268);
          long long v270 = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
          v521.__r_.__value_.__r.__words[2] = v269->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v270;
          v269->__r_.__value_.__l.__size_ = 0;
          v269->__r_.__value_.__r.__words[2] = 0;
          v269->__r_.__value_.__r.__words[0] = 0;
          long long v271 = std::string::append(&v521, " ", 1uLL);
          long long v272 = *(_OWORD *)&v271->__r_.__value_.__l.__data_;
          v522.__r_.__value_.__r.__words[2] = v271->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v272;
          v271->__r_.__value_.__l.__size_ = 0;
          v271->__r_.__value_.__r.__words[2] = 0;
          v271->__r_.__value_.__r.__words[0] = 0;
          int v273 = *(char *)(v524.__r_.__value_.__r.__words[0] + 191);
          if (v273 >= 0) {
            float v274 = (const std::string::value_type *)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          else {
            float v274 = *(const std::string::value_type **)(v524.__r_.__value_.__r.__words[0] + 168);
          }
          if (v273 >= 0) {
            std::string::size_type v275 = *(unsigned __int8 *)(v524.__r_.__value_.__r.__words[0] + 191);
          }
          else {
            std::string::size_type v275 = *(void *)(v524.__r_.__value_.__r.__words[0] + 176);
          }
          unint64_t v276 = std::string::append(&v522, v274, v275);
          long long v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
          v523.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v277;
          v276->__r_.__value_.__l.__size_ = 0;
          v276->__r_.__value_.__r.__words[2] = 0;
          v276->__r_.__value_.__r.__words[0] = 0;
          uint64_t v278 = std::string::append(&v523, "\n", 1uLL);
          long long v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
          *(void *)&long long v528 = *((void *)&v278->__r_.__value_.__l + 2);
          long long v527 = v279;
          v278->__r_.__value_.__l.__size_ = 0;
          v278->__r_.__value_.__r.__words[2] = 0;
          v278->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v528) & 0x80u) == 0) {
            int32x2_t v280 = (const std::string::value_type *)&v527;
          }
          else {
            int32x2_t v280 = (const std::string::value_type *)v527;
          }
          if ((SBYTE7(v528) & 0x80u) == 0) {
            std::string::size_type v281 = BYTE7(v528);
          }
          else {
            std::string::size_type v281 = *((void *)&v527 + 1);
          }
          std::string::append(&v516, v280, v281);
          if (SBYTE7(v528) < 0) {
            operator delete((void *)v527);
          }
          if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v523.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v522.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v521.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v520.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v519.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v518.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v517.__r_.__value_.__l.__data_);
          }
          *(void *)&long long v527 = &v524;
          sub_25B41032C((void ***)&v527);
          if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v282 = &v516;
          }
          else {
            unint64_t v282 = (std::string *)v516.__r_.__value_.__r.__words[0];
          }
          if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v283 = HIBYTE(v516.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v283 = v516.__r_.__value_.__l.__size_;
          }
          std::string::append(&v514, (const std::string::value_type *)v282, v283);
          if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v516.__r_.__value_.__l.__data_);
          }
          v512 += (uint64_t)(v101 - v498) >> 4;
          std::string::append(&v514, "# obj_end\n\n", 0xBuLL);
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v284 = &v514;
          }
          else {
            unint64_t v284 = (std::string *)v514.__r_.__value_.__r.__words[0];
          }
          if ((v514.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v285 = HIBYTE(v514.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v285 = v514.__r_.__value_.__l.__size_;
          }
          std::string::append(&v503, (const std::string::value_type *)v284, v285);
          if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v514.__r_.__value_.__l.__data_);
          }
          if (v515.__r_.__value_.__r.__words[0]) {
            operator delete(v515.__r_.__value_.__l.__data_);
          }
          if (v91) {
            operator delete(v91);
          }
        }
      }
      else
      {
      }
      ++v69;
    }
  }

  if (v502 < 0) {
    operator delete(v501[0]);
  }

  int v491 = objc_msgSend_floors(v493, v286, v287);
  sub_25B403500(&v521, "Floor");
  id v497 = v491;
  if (objc_msgSend_count(v497, v288, v289))
  {
    for (unint64_t i = 0; ; unint64_t i = v495 + 1)
    {
      if (objc_msgSend_count(v497, v290, v291) <= i) {
        goto LABEL_573;
      }
      std::operator+<char>();
      std::to_string(&v522, i);
      if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v293 = &v522;
      }
      else {
        uint64_t v293 = (std::string *)v522.__r_.__value_.__r.__words[0];
      }
      if ((v522.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v294 = HIBYTE(v522.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v294 = v522.__r_.__value_.__l.__size_;
      }
      unint64_t v295 = std::string::append(&v523, (const std::string::value_type *)v293, v294);
      long long v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
      v524.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v524.__r_.__value_.__l.__data_ = v296;
      v295->__r_.__value_.__l.__size_ = 0;
      v295->__r_.__value_.__r.__words[2] = 0;
      v295->__r_.__value_.__r.__words[0] = 0;
      float32x2_t v297 = std::string::append(&v524, "\n", 1uLL);
      long long v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
      *(void *)&long long v528 = *((void *)&v297->__r_.__value_.__l + 2);
      long long v527 = v298;
      v297->__r_.__value_.__l.__size_ = 0;
      v297->__r_.__value_.__r.__words[2] = 0;
      v297->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v528) & 0x80u) == 0) {
        float64x2_t v299 = (const std::string::value_type *)&v527;
      }
      else {
        float64x2_t v299 = (const std::string::value_type *)v527;
      }
      if ((SBYTE7(v528) & 0x80u) == 0) {
        std::string::size_type v300 = BYTE7(v528);
      }
      else {
        std::string::size_type v300 = *((void *)&v527 + 1);
      }
      std::string::append(&v503, v299, v300);
      if (SBYTE7(v528) < 0) {
        operator delete((void *)v527);
      }
      if (SHIBYTE(v524.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v524.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v522.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v523.__r_.__value_.__l.__data_);
      }
      objc_msgSend_objectAtIndexedSubscript_(v497, v301, i);
      id v302 = (id)objc_claimAutoreleasedReturnValue();
      memset(&v524, 0, sizeof(v524));
      unint64_t v495 = i;
      if ((unint64_t)objc_msgSend_polygonSize(v302, v303, v304) <= 2) {
        break;
      }
      uint64_t v307 = 0;
      std::string::size_type v308 = 0;
      uint64_t v309 = 0;
      for (unint64_t j = 0; j < objc_msgSend_polygonSize(v302, v305, v306); ++j)
      {
        float32x4_t v315 = vaddq_f32(*(float32x4_t *)(objc_msgSend_polygon(v302, v311, v312) + 16 * j), (float32x4_t)xmmword_25B5F1750);
        if ((unint64_t)v309 >= v308)
        {
          float32x4_t v499 = v315;
          uint64_t v317 = v309 - v307;
          unint64_t v318 = v317 + 1;
          if ((unint64_t)(v317 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v308 - (void)v307) >> 3 > v318) {
            unint64_t v318 = (uint64_t)(v308 - (void)v307) >> 3;
          }
          if (v308 - (unint64_t)v307 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v319 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v319 = v318;
          }
          if (v319) {
            unint64_t v319 = (unint64_t)sub_25B3FFAEC(v319);
          }
          else {
            uint64_t v313 = 0;
          }
          unint64_t v320 = (float32x4_t *)(v319 + 16 * v317);
          *unint64_t v320 = v499;
          unint64_t v316 = v320 + 1;
          if (v309 != v307)
          {
            do
            {
              float32x4_t v321 = v309[-1];
              --v309;
              v320[-1] = v321;
              --v320;
            }
            while (v309 != v307);
            uint64_t v307 = (float32x4_t *)v524.__r_.__value_.__r.__words[0];
          }
          v524.__r_.__value_.__r.__words[0] = (std::string::size_type)v320;
          v524.__r_.__value_.__l.__size_ = (std::string::size_type)v316;
          v524.__r_.__value_.__r.__words[2] = v319 + 16 * (void)v313;
          if (v307) {
            operator delete(v307);
          }
          uint64_t v307 = v320;
        }
        else
        {
          *uint64_t v309 = v315;
          unint64_t v316 = v309 + 1;
        }
        v524.__r_.__value_.__l.__size_ = (std::string::size_type)v316;
        uint64_t v322 = objc_msgSend_polygon(v302, v313, v314);
        uint64_t v323 = v322;
        std::string::size_type v308 = v524.__r_.__value_.__r.__words[2];
        if ((unint64_t)v316 >= v524.__r_.__value_.__r.__words[2])
        {
          uint64_t v324 = v316 - v307;
          unint64_t v325 = v324 + 1;
          if ((unint64_t)(v324 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v524.__r_.__value_.__r.__words[2] - (void)v307) >> 3 > v325) {
            unint64_t v325 = (uint64_t)(v524.__r_.__value_.__r.__words[2] - (void)v307) >> 3;
          }
          if (v524.__r_.__value_.__r.__words[2] - (unint64_t)v307 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v326 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v326 = v325;
          }
          if (v326) {
            unint64_t v326 = (unint64_t)sub_25B3FFAEC(v326);
          }
          else {
            uint64_t v305 = 0;
          }
          uint64_t v327 = (float32x4_t *)(v326 + 16 * v324);
          *uint64_t v327 = *(float32x4_t *)(v323 + 16 * j);
          uint64_t v309 = v327 + 1;
          if (v316 != v307)
          {
            do
            {
              float32x4_t v328 = v316[-1];
              --v316;
              v327[-1] = v328;
              --v327;
            }
            while (v316 != v307);
            uint64_t v307 = (float32x4_t *)v524.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v308 = v326 + 16 * (void)v305;
          v524.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
          v524.__r_.__value_.__l.__size_ = (std::string::size_type)v309;
          v524.__r_.__value_.__r.__words[2] = v308;
          if (v307) {
            operator delete(v307);
          }
          uint64_t v307 = v327;
        }
        else
        {
          *unint64_t v316 = *(float32x4_t *)(v322 + 16 * j);
          uint64_t v309 = v316 + 1;
        }
        v524.__r_.__value_.__l.__size_ = (std::string::size_type)v309;
      }
LABEL_562:

      sub_25B590128((std::string *)&v527, (float **)&v524, &v512);
      if ((SBYTE7(v528) & 0x80u) == 0) {
        uint64_t v364 = (const std::string::value_type *)&v527;
      }
      else {
        uint64_t v364 = (const std::string::value_type *)v527;
      }
      if ((SBYTE7(v528) & 0x80u) == 0) {
        std::string::size_type v365 = BYTE7(v528);
      }
      else {
        std::string::size_type v365 = *((void *)&v527 + 1);
      }
      std::string::append(&v503, v364, v365);
      if (SBYTE7(v528) < 0) {
        operator delete((void *)v527);
      }
      if (v524.__r_.__value_.__r.__words[0]) {
        operator delete(v524.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v329 = 0;
    int32x2_t v330 = 0;
    uint64_t v331 = 0;
    while (1)
    {
      objc_msgSend_quad(v302, v305, v306);
      DWORD2(v527) = v334;
      DWORD2(v528) = v335;
      *(void *)&long long v527 = v336;
      *(void *)&long long v528 = v337;
      DWORD2(v529) = v338;
      DWORD2(v530) = v339;
      *(void *)&long long v529 = v340;
      *(void *)&long long v530 = v341;
      float32x4_t v342 = vaddq_f32(*((float32x4_t *)&v527 + v331), (float32x4_t)xmmword_25B5F1750);
      if ((unint64_t)v330 >= v329)
      {
        float32x4_t v500 = v342;
        std::string::size_type v344 = v524.__r_.__value_.__r.__words[0];
        uint64_t v345 = (uint64_t)((uint64_t)v330 - v524.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v346 = v345 + 1;
        if ((unint64_t)(v345 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v329 - v524.__r_.__value_.__r.__words[0]) >> 3 > v346) {
          unint64_t v346 = (uint64_t)(v329 - v524.__r_.__value_.__r.__words[0]) >> 3;
        }
        if (v329 - v524.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v347 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v347 = v346;
        }
        if (v347) {
          unint64_t v347 = (unint64_t)sub_25B3FFAEC(v347);
        }
        else {
          float32x2_t v332 = 0;
        }
        float v348 = (float32x4_t *)(v347 + 16 * v345);
        *float v348 = v500;
        int v343 = v348 + 1;
        if (v330 != (float32x4_t *)v344)
        {
          do
          {
            float32x4_t v349 = v330[-1];
            --v330;
            v348[-1] = v349;
            --v348;
          }
          while (v330 != (float32x4_t *)v344);
          int32x2_t v330 = (float32x4_t *)v524.__r_.__value_.__r.__words[0];
        }
        v524.__r_.__value_.__r.__words[0] = (std::string::size_type)v348;
        v524.__r_.__value_.__l.__size_ = (std::string::size_type)v343;
        v524.__r_.__value_.__r.__words[2] = v347 + 16 * (void)v332;
        if (v330) {
          operator delete(v330);
        }
      }
      else
      {
        *int32x2_t v330 = v342;
        int v343 = v330 + 1;
      }
      v524.__r_.__value_.__l.__size_ = (std::string::size_type)v343;
      objc_msgSend_quad(v302, v332, v333);
      DWORD2(v527) = v350;
      DWORD2(v528) = v351;
      *(void *)&long long v527 = v352;
      *(void *)&long long v528 = v353;
      DWORD2(v529) = v354;
      DWORD2(v530) = v355;
      *(void *)&long long v529 = v356;
      *(void *)&long long v530 = v357;
      unint64_t v329 = v524.__r_.__value_.__r.__words[2];
      if ((unint64_t)v343 >= v524.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v358 = v524.__r_.__value_.__r.__words[0];
        uint64_t v359 = (uint64_t)((uint64_t)v343 - v524.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v360 = v359 + 1;
        if ((unint64_t)(v359 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0]) >> 3 > v360) {
          unint64_t v360 = (uint64_t)(v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0]) >> 3;
        }
        if (v524.__r_.__value_.__r.__words[2] - v524.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v361 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v361 = v360;
        }
        if (v361) {
          unint64_t v361 = (unint64_t)sub_25B3FFAEC(v361);
        }
        else {
          uint64_t v305 = 0;
        }
        float v362 = (float32x4_t *)(v361 + 16 * v359);
        unint64_t v329 = v361 + 16 * (void)v305;
        *float v362 = (float32x4_t)*(&v527 + v331);
        int32x2_t v330 = v362 + 1;
        if (v343 == (float32x4_t *)v358)
        {
          v524.__r_.__value_.__r.__words[0] = v361 + 16 * v359;
          v524.__r_.__value_.__l.__size_ = (std::string::size_type)&v362[1];
          v524.__r_.__value_.__r.__words[2] = v361 + 16 * (void)v305;
        }
        else
        {
          do
          {
            float32x4_t v363 = v343[-1];
            --v343;
            v362[-1] = v363;
            --v362;
          }
          while (v343 != (float32x4_t *)v358);
          int v343 = (float32x4_t *)v524.__r_.__value_.__r.__words[0];
          v524.__r_.__value_.__r.__words[0] = (std::string::size_type)v362;
          v524.__r_.__value_.__l.__size_ = (std::string::size_type)v330;
          v524.__r_.__value_.__r.__words[2] = v361 + 16 * (void)v305;
          if (!v343) {
            goto LABEL_561;
          }
        }
        operator delete(v343);
      }
      else
      {
        float32x4_t *v343 = (float32x4_t)*(&v527 + v331);
        int32x2_t v330 = v343 + 1;
      }
LABEL_561:
      v524.__r_.__value_.__l.__size_ = (std::string::size_type)v330;
      if (++v331 == 4) {
        goto LABEL_562;
      }
    }
  }
LABEL_573:

  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }

  long long v368 = objc_msgSend_curvedWalls(v493, v366, v367);
  sub_25B403500(&v527, "CurvedWall");
  sub_25B590B9C(v368, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  unint64_t v371 = objc_msgSend_curvedWindows(v493, v369, v370);
  sub_25B403500(&v527, "CurvedWindow");
  sub_25B590B9C(v371, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  unint64_t v374 = objc_msgSend_curvedDoors(v493, v372, v373);
  sub_25B403500(&v527, "CurvedDoor");
  sub_25B590B9C(v374, (uint64_t)&v527, &v503, &v512);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  sub_25B58BFA8((uint64_t *)&v524);
  if (v525)
  {
    if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v375 = &v503;
    }
    else {
      float v375 = (std::string *)v503.__r_.__value_.__r.__words[0];
    }
    if ((v503.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v376 = HIBYTE(v503.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v376 = v503.__r_.__value_.__l.__size_;
    }
    sub_25B406B20(&v524, (uint64_t)v375, v376);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v524 + *(void *)(v524.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v524 + *(void *)(v524.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    }
  }
  else
  {
    uint64_t v377 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"Write to ", 9);
    int v378 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v378 >= 0) {
      uint64_t v379 = (uint64_t)__str;
    }
    else {
      uint64_t v379 = __str->__r_.__value_.__r.__words[0];
    }
    if (v378 >= 0) {
      uint64_t v380 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v380 = __str->__r_.__value_.__l.__size_;
    }
    unint64_t v381 = sub_25B406B20(v377, v379, v380);
    unint64_t v382 = sub_25B406B20(v381, (uint64_t)" failed", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v382 + *(void *)(*v382 - 24)));
    uint64_t v383 = std::locale::use_facet((const std::locale *)&v527, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v383->__vftable[2].~facet_0)(v383, 10);
    std::locale::~locale((std::locale *)&v527);
    std::ostream::put();
    std::ostream::flush();
  }
  id v384 = v493;
  sub_25B403500(&v515, "");
  v501[0] = &v515;
  long long v387 = objc_msgSend_walls(v384, v385, v386);
  sub_25B403500(&v527, "Wall");
  sub_25B58B5E0((std::string **)v501, v387, (uint64_t)&v527);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  unint64_t v390 = objc_msgSend_openings(v384, v388, v389);
  sub_25B403500(&v527, "Opening");
  sub_25B58B5E0((std::string **)v501, v390, (uint64_t)&v527);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  int v393 = objc_msgSend_windows(v384, v391, v392);
  sub_25B403500(&v527, "Window");
  sub_25B58B5E0((std::string **)v501, v393, (uint64_t)&v527);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  float32x4_t v396 = objc_msgSend_doors(v384, v394, v395);
  sub_25B403500(&v527, "Door");
  sub_25B58B5E0((std::string **)v501, v396, (uint64_t)&v527);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  unint64_t v399 = objc_msgSend_objects(v384, v397, v398);
  sub_25B403500(&v514, "Objects");
  id v402 = v399;
  for (unint64_t k = 0; objc_msgSend_count(v402, v400, v401) > k; ++k)
  {
    std::operator+<char>();
    std::to_string(&v521, k);
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v404 = &v521;
    }
    else {
      char v404 = (std::string *)v521.__r_.__value_.__r.__words[0];
    }
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v405 = HIBYTE(v521.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v405 = v521.__r_.__value_.__l.__size_;
    }
    float v406 = std::string::append(&v522, (const std::string::value_type *)v404, v405);
    long long v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
    v523.__r_.__value_.__r.__words[2] = v406->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v407;
    v406->__r_.__value_.__l.__size_ = 0;
    v406->__r_.__value_.__r.__words[2] = 0;
    v406->__r_.__value_.__r.__words[0] = 0;
    unint64_t v408 = std::string::append(&v523, "\n", 1uLL);
    long long v409 = *(_OWORD *)&v408->__r_.__value_.__l.__data_;
    *(void *)&long long v528 = *((void *)&v408->__r_.__value_.__l + 2);
    long long v527 = v409;
    v408->__r_.__value_.__l.__size_ = 0;
    v408->__r_.__value_.__r.__words[2] = 0;
    v408->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v528) & 0x80u) == 0) {
      float32x2_t v410 = (const std::string::value_type *)&v527;
    }
    else {
      float32x2_t v410 = (const std::string::value_type *)v527;
    }
    if ((SBYTE7(v528) & 0x80u) == 0) {
      std::string::size_type v411 = BYTE7(v528);
    }
    else {
      std::string::size_type v411 = *((void *)&v527 + 1);
    }
    std::string::append(&v515, v410, v411);
    if (SBYTE7(v528) < 0) {
      operator delete((void *)v527);
    }
    if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v523.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v522.__r_.__value_.__l.__data_);
    }
    std::to_string(&v518, 0.9);
    long long v412 = std::string::insert(&v518, 0, "Kd ", 3uLL);
    long long v413 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
    v519.__r_.__value_.__r.__words[2] = v412->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v413;
    v412->__r_.__value_.__l.__size_ = 0;
    v412->__r_.__value_.__r.__words[2] = 0;
    v412->__r_.__value_.__r.__words[0] = 0;
    uint64_t v414 = std::string::append(&v519, " ", 1uLL);
    long long v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
    v520.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v415;
    v414->__r_.__value_.__l.__size_ = 0;
    v414->__r_.__value_.__r.__words[2] = 0;
    v414->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v517, 0.1);
    if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v416 = &v517;
    }
    else {
      unint64_t v416 = (std::string *)v517.__r_.__value_.__r.__words[0];
    }
    if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v417 = HIBYTE(v517.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v417 = v517.__r_.__value_.__l.__size_;
    }
    uint64_t v418 = std::string::append(&v520, (const std::string::value_type *)v416, v417);
    long long v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
    v521.__r_.__value_.__r.__words[2] = v418->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v419;
    v418->__r_.__value_.__l.__size_ = 0;
    v418->__r_.__value_.__r.__words[2] = 0;
    v418->__r_.__value_.__r.__words[0] = 0;
    long long v420 = std::string::append(&v521, " ", 1uLL);
    long long v421 = *(_OWORD *)&v420->__r_.__value_.__l.__data_;
    v522.__r_.__value_.__r.__words[2] = v420->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v421;
    v420->__r_.__value_.__l.__size_ = 0;
    v420->__r_.__value_.__r.__words[2] = 0;
    v420->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v516, 0.1);
    if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v422 = &v516;
    }
    else {
      unint64_t v422 = (std::string *)v516.__r_.__value_.__r.__words[0];
    }
    if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v423 = HIBYTE(v516.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v423 = v516.__r_.__value_.__l.__size_;
    }
    long long v424 = std::string::append(&v522, (const std::string::value_type *)v422, v423);
    long long v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
    v523.__r_.__value_.__r.__words[2] = v424->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v425;
    v424->__r_.__value_.__l.__size_ = 0;
    v424->__r_.__value_.__r.__words[2] = 0;
    v424->__r_.__value_.__r.__words[0] = 0;
    long long v426 = std::string::append(&v523, "\n", 1uLL);
    long long v427 = *(_OWORD *)&v426->__r_.__value_.__l.__data_;
    *(void *)&long long v528 = *((void *)&v426->__r_.__value_.__l + 2);
    long long v527 = v427;
    v426->__r_.__value_.__l.__size_ = 0;
    v426->__r_.__value_.__r.__words[2] = 0;
    v426->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v528) & 0x80u) == 0) {
      unint64_t v428 = (const std::string::value_type *)&v527;
    }
    else {
      unint64_t v428 = (const std::string::value_type *)v527;
    }
    if ((SBYTE7(v528) & 0x80u) == 0) {
      std::string::size_type v429 = BYTE7(v528);
    }
    else {
      std::string::size_type v429 = *((void *)&v527 + 1);
    }
    std::string::append(&v515, v428, v429);
    if (SBYTE7(v528) < 0) {
      operator delete((void *)v527);
    }
    if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v523.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v516.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v522.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v517.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v520.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v519.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v518.__r_.__value_.__l.__data_);
    }
    std::string::append(&v515, "illum 0\n", 8uLL);
  }

  if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v514.__r_.__value_.__l.__data_);
  }

  long long v432 = objc_msgSend_floors(v384, v430, v431);
  sub_25B403500(&v527, "Floor");
  sub_25B58B5E0((std::string **)v501, v432, (uint64_t)&v527);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  long long v513 = &v515;
  uint64_t v435 = objc_msgSend_curvedWalls(v384, v433, v434);
  sub_25B403500(&v527, "CurvedWall");
  sub_25B58BB18(&v513, v435);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  uint64_t v438 = objc_msgSend_curvedWindows(v384, v436, v437);
  sub_25B403500(&v527, "CurvedWindow");
  sub_25B58BB18(&v513, v438);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  long long v441 = objc_msgSend_curvedDoors(v384, v439, v440);
  sub_25B403500(&v527, "CurvedDoor");
  sub_25B58BB18(&v513, v441);
  if (SBYTE7(v528) < 0) {
    operator delete((void *)v527);
  }

  uint64_t v444 = objc_msgSend_roomTypes(v384, v442, v443);
  sub_25B403500(&v514, "RoomType");
  id v447 = v444;
  for (unint64_t m = 0; objc_msgSend_count(v447, v445, v446) > m; ++m)
  {
    std::operator+<char>();
    std::to_string(&v521, m);
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v449 = &v521;
    }
    else {
      unint64_t v449 = (std::string *)v521.__r_.__value_.__r.__words[0];
    }
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v450 = HIBYTE(v521.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v450 = v521.__r_.__value_.__l.__size_;
    }
    uint64_t v451 = std::string::append(&v522, (const std::string::value_type *)v449, v450);
    long long v452 = *(_OWORD *)&v451->__r_.__value_.__l.__data_;
    v523.__r_.__value_.__r.__words[2] = v451->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v452;
    v451->__r_.__value_.__l.__size_ = 0;
    v451->__r_.__value_.__r.__words[2] = 0;
    v451->__r_.__value_.__r.__words[0] = 0;
    uint64_t v453 = std::string::append(&v523, "\n", 1uLL);
    long long v454 = *(_OWORD *)&v453->__r_.__value_.__l.__data_;
    *(void *)&long long v528 = *((void *)&v453->__r_.__value_.__l + 2);
    long long v527 = v454;
    v453->__r_.__value_.__l.__size_ = 0;
    v453->__r_.__value_.__r.__words[2] = 0;
    v453->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v528) & 0x80u) == 0) {
      long long v455 = (const std::string::value_type *)&v527;
    }
    else {
      long long v455 = (const std::string::value_type *)v527;
    }
    if ((SBYTE7(v528) & 0x80u) == 0) {
      std::string::size_type v456 = BYTE7(v528);
    }
    else {
      std::string::size_type v456 = *((void *)&v527 + 1);
    }
    std::string::append(&v515, v455, v456);
    if (SBYTE7(v528) < 0) {
      operator delete((void *)v527);
    }
    if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v523.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v522.__r_.__value_.__l.__data_);
    }
    std::to_string(&v522, 0.3);
    long long v457 = std::string::insert(&v522, 0, "d ", 2uLL);
    long long v458 = *(_OWORD *)&v457->__r_.__value_.__l.__data_;
    v523.__r_.__value_.__r.__words[2] = v457->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v458;
    v457->__r_.__value_.__l.__size_ = 0;
    v457->__r_.__value_.__r.__words[2] = 0;
    v457->__r_.__value_.__r.__words[0] = 0;
    float64x2_t v459 = std::string::append(&v523, "\n", 1uLL);
    long long v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
    *(void *)&long long v528 = *((void *)&v459->__r_.__value_.__l + 2);
    long long v527 = v460;
    v459->__r_.__value_.__l.__size_ = 0;
    v459->__r_.__value_.__r.__words[2] = 0;
    v459->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v528) & 0x80u) == 0) {
      long long v461 = (const std::string::value_type *)&v527;
    }
    else {
      long long v461 = (const std::string::value_type *)v527;
    }
    if ((SBYTE7(v528) & 0x80u) == 0) {
      std::string::size_type v462 = BYTE7(v528);
    }
    else {
      std::string::size_type v462 = *((void *)&v527 + 1);
    }
    std::string::append(&v515, v461, v462);
    if (SBYTE7(v528) < 0) {
      operator delete((void *)v527);
    }
    if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v523.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v522.__r_.__value_.__l.__data_);
    }
    std::to_string(&v518, 0.1);
    BOOL v463 = std::string::insert(&v518, 0, "Kd ", 3uLL);
    long long v464 = *(_OWORD *)&v463->__r_.__value_.__l.__data_;
    v519.__r_.__value_.__r.__words[2] = v463->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v519.__r_.__value_.__l.__data_ = v464;
    v463->__r_.__value_.__l.__size_ = 0;
    v463->__r_.__value_.__r.__words[2] = 0;
    v463->__r_.__value_.__r.__words[0] = 0;
    uint64_t v465 = std::string::append(&v519, " ", 1uLL);
    long long v466 = *(_OWORD *)&v465->__r_.__value_.__l.__data_;
    v520.__r_.__value_.__r.__words[2] = v465->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v520.__r_.__value_.__l.__data_ = v466;
    v465->__r_.__value_.__l.__size_ = 0;
    v465->__r_.__value_.__r.__words[2] = 0;
    v465->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v517, 0.8);
    if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v467 = &v517;
    }
    else {
      unint64_t v467 = (std::string *)v517.__r_.__value_.__r.__words[0];
    }
    if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v468 = HIBYTE(v517.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v468 = v517.__r_.__value_.__l.__size_;
    }
    uint64_t v469 = std::string::append(&v520, (const std::string::value_type *)v467, v468);
    long long v470 = *(_OWORD *)&v469->__r_.__value_.__l.__data_;
    v521.__r_.__value_.__r.__words[2] = v469->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v521.__r_.__value_.__l.__data_ = v470;
    v469->__r_.__value_.__l.__size_ = 0;
    v469->__r_.__value_.__r.__words[2] = 0;
    v469->__r_.__value_.__r.__words[0] = 0;
    char v471 = std::string::append(&v521, " ", 1uLL);
    long long v472 = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
    v522.__r_.__value_.__r.__words[2] = v471->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v472;
    v471->__r_.__value_.__l.__size_ = 0;
    v471->__r_.__value_.__r.__words[2] = 0;
    v471->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v516, 0.1);
    if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v473 = &v516;
    }
    else {
      uint64_t v473 = (std::string *)v516.__r_.__value_.__r.__words[0];
    }
    if ((v516.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v474 = HIBYTE(v516.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v474 = v516.__r_.__value_.__l.__size_;
    }
    uint64_t v475 = std::string::append(&v522, (const std::string::value_type *)v473, v474);
    long long v476 = *(_OWORD *)&v475->__r_.__value_.__l.__data_;
    v523.__r_.__value_.__r.__words[2] = v475->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v476;
    v475->__r_.__value_.__l.__size_ = 0;
    v475->__r_.__value_.__r.__words[2] = 0;
    v475->__r_.__value_.__r.__words[0] = 0;
    uint64_t v477 = std::string::append(&v523, "\n", 1uLL);
    long long v478 = *(_OWORD *)&v477->__r_.__value_.__l.__data_;
    *(void *)&long long v528 = *((void *)&v477->__r_.__value_.__l + 2);
    long long v527 = v478;
    v477->__r_.__value_.__l.__size_ = 0;
    v477->__r_.__value_.__r.__words[2] = 0;
    v477->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v528) & 0x80u) == 0) {
      uint64_t v479 = (const std::string::value_type *)&v527;
    }
    else {
      uint64_t v479 = (const std::string::value_type *)v527;
    }
    if ((SBYTE7(v528) & 0x80u) == 0) {
      std::string::size_type v480 = BYTE7(v528);
    }
    else {
      std::string::size_type v480 = *((void *)&v527 + 1);
    }
    std::string::append(&v515, v479, v480);
    if (SBYTE7(v528) < 0) {
      operator delete((void *)v527);
    }
    if (SHIBYTE(v523.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v523.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v516.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v522.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v517.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v520.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v520.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v519.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v519.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v518.__r_.__value_.__l.__data_);
    }
    std::string::append(&v515, "illum 0\n", 8uLL);
  }

  if (SHIBYTE(v514.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v514.__r_.__value_.__l.__data_);
  }

  sub_25B58BFA8((uint64_t *)&v527);
  if (v535)
  {
    if ((v515.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v481 = &v515;
    }
    else {
      BOOL v481 = (std::string *)v515.__r_.__value_.__r.__words[0];
    }
    if ((v515.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v482 = HIBYTE(v515.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v482 = v515.__r_.__value_.__l.__size_;
    }
    sub_25B406B20(&v527, (uint64_t)v481, v482);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v527 + *(void *)(v527 - 24)), *(_DWORD *)((char *)&v529 + *(void *)(v527 - 24)) | 4);
    }
  }
  else
  {
    float v483 = sub_25B406B20(MEMORY[0x263F8C0F8], (uint64_t)"Write to ", 9);
    if ((v505 & 0x80u) == 0) {
      uint64_t v484 = v504;
    }
    else {
      uint64_t v484 = (void **)v504[0];
    }
    if ((v505 & 0x80u) == 0) {
      uint64_t v485 = v505;
    }
    else {
      uint64_t v485 = (uint64_t)v504[1];
    }
    float v486 = sub_25B406B20(v483, (uint64_t)v484, v485);
    unint64_t v487 = sub_25B406B20(v486, (uint64_t)" failed", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v487 + *(void *)(*v487 - 24)));
    int v488 = std::locale::use_facet((const std::locale *)&v523, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v488->__vftable[2].~facet_0)(v488, 10);
    std::locale::~locale((std::locale *)&v523);
    std::ostream::put();
    std::ostream::flush();
  }
  *(void *)&long long v527 = *MEMORY[0x263F8C2B0];
  std::string::size_type v489 = v527;
  std::string::size_type v490 = *(void *)(MEMORY[0x263F8C2B0] + 24);
  *(void *)((char *)&v527 + *(void *)(v527 - 24)) = v490;
  MEMORY[0x261163CB0]((char *)&v527 + 8);
  std::ostream::~ostream();
  MEMORY[0x261163E40](v536);
  if (SHIBYTE(v515.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v515.__r_.__value_.__l.__data_);
  }

  v524.__r_.__value_.__r.__words[0] = v489;
  *(std::string::size_type *)((char *)v524.__r_.__value_.__r.__words + *(void *)(v489 - 24)) = v490;
  MEMORY[0x261163CB0](&v524.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x261163E40](&v526);
  if (SHIBYTE(v503.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v503.__r_.__value_.__l.__data_);
  }
  if ((char)v505 < 0) {
    operator delete(v504[0]);
  }
  if ((char)v508 < 0) {
    operator delete(v506);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v511) < 0) {
    operator delete((void *)__p);
  }
}

void sub_25B58F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a48 < 0) {
    operator delete(a43);
  }

  _Unwind_Resume(a1);
}

void sub_25B58FE90(void *a1, uint64_t a2, std::string *a3, uint64_t *a4)
{
  id v6 = a1;
  if (objc_msgSend_count(v6, v7, v8))
  {
    for (unint64_t i = 0; objc_msgSend_count(v6, v9, v10) > i; ++i)
    {
      std::operator+<char>();
      std::to_string(&v24, i);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v24;
      }
      else {
        int v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v24.__r_.__value_.__l.__size_;
      }
      int v14 = std::string::append(&v25, (const std::string::value_type *)v12, size);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      long long v16 = std::string::append(&v26, "\n", 1uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v28 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v28 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      if (v28 >= 0) {
        std::string::size_type v19 = HIBYTE(v28);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v6, v20, i);
      sub_25B591208((char **)__p, v21);

      sub_25B590128(&v26, (float **)__p, a4);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = &v26;
      }
      else {
        std::string::size_type v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v26.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v22, v23);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_25B590078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

std::string *sub_25B590128(std::string *a1, float **a2, uint64_t *a3)
{
  uint64_t v5 = (std::string *)sub_25B403500(a1, "");
  std::string::append(v5, "# obj_start\n", 0xCuLL);
  id v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    memset(&v93, 0, sizeof(v93));
  }
  else
  {
    do
    {
      std::to_string(&v88, *v6);
      uint64_t v8 = std::string::insert(&v88, 0, "v ", 2uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v89, " ", 1uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v6[1]);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v87;
      }
      else {
        int v12 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      int v14 = std::string::append(&v90, (const std::string::value_type *)v12, size);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      long long v16 = std::string::append(&v91, " ", 1uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, v6[2]);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = &v86;
      }
      else {
        uint64_t v18 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v19 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v19 = v86.__r_.__value_.__l.__size_;
      }
      std::string::size_type v20 = std::string::append(&v92, (const std::string::value_type *)v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v22 = std::string::append(&v93, " \n", 2uLL);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      int64_t v95 = v22->__r_.__value_.__r.__words[2];
      long long v94 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (v95 >= 0) {
        std::string v24 = (const std::string::value_type *)&v94;
      }
      else {
        std::string v24 = (const std::string::value_type *)v94;
      }
      if (v95 >= 0) {
        std::string::size_type v25 = HIBYTE(v95);
      }
      else {
        std::string::size_type v25 = *((void *)&v94 + 1);
      }
      std::string::append(a1, v24, v25);
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      v6 += 4;
    }
    while (v6 != v7);
    int64_t v27 = *a2;
    std::string v26 = a2[1];
    uint64_t v28 = *a3;
    memset(&v93, 0, sizeof(v93));
    if (v26 != v27)
    {
      unint64_t v29 = 0;
      uint64_t v30 = v28 + 1;
      do
      {
        std::to_string(&v92, v30 + v29);
        std::string::size_type v31 = (_OWORD *)v93.__r_.__value_.__l.__size_;
        if (v93.__r_.__value_.__l.__size_ >= v93.__r_.__value_.__r.__words[2])
        {
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556
             * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3) > v34)
            unint64_t v34 = 0x5555555555555556
                * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v93.__r_.__value_.__r.__words[2] - v93.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v35 = v34;
          }
          uint64_t v97 = &v93.__r_.__value_.__s.__data_[16];
          if (v35) {
            unint64_t v35 = (unint64_t)sub_25B413D74(v35);
          }
          else {
            uint64_t v36 = 0;
          }
          unint64_t v37 = v35 + 24 * v33;
          *(void *)&long long v94 = v35;
          *((void *)&v94 + 1) = v37;
          unint64_t v96 = v35 + 24 * v36;
          long long v38 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
          *(void *)(v37 + 16) = *((void *)&v92.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v37 = v38;
          memset(&v92, 0, sizeof(v92));
          int64_t v95 = v37 + 24;
          sub_25B4A2F38((uint64_t *)&v93, &v94);
          std::string::size_type v39 = v93.__r_.__value_.__l.__size_;
          sub_25B4A2FBC((uint64_t)&v94);
          v93.__r_.__value_.__l.__size_ = v39;
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
          *(void *)(v93.__r_.__value_.__l.__size_ + 16) = *((void *)&v92.__r_.__value_.__l + 2);
          *std::string::size_type v31 = v32;
          v93.__r_.__value_.__l.__size_ = (std::string::size_type)v31 + 24;
        }
        ++v29;
      }
      while (v29 < ((char *)a2[1] - (char *)*a2) >> 4);
    }
  }
  sub_25B403500(&v85, "");
  unint64_t v40 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 4;
  if ((v40 & 0x80000000) == 0) {
    int v41 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 4;
  }
  else {
    int v41 = v40 + 1;
  }
  uint64_t v83 = (v41 >> 1);
  if ((int)v40 >= 2)
  {
    int v42 = 0;
    int v43 = v41 >> 1;
    do
    {
      std::operator+<char>();
      std::string v44 = std::string::append(&v86, " ", 1uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v46 = v93.__r_.__value_.__r.__words[0] + 24 * ((v42 + 1) % (int)v40);
      int v47 = *(char *)(v46 + 23);
      if (v47 >= 0) {
        std::string v48 = (const std::string::value_type *)(v93.__r_.__value_.__r.__words[0]
      }
                                              + 24 * ((v42 + 1) % (int)v40));
      else {
        std::string v48 = *(const std::string::value_type **)v46;
      }
      if (v47 >= 0) {
        std::string::size_type v49 = *(unsigned __int8 *)(v46 + 23);
      }
      else {
        std::string::size_type v49 = *(void *)(v46 + 8);
      }
      uint64_t v50 = std::string::append(&v87, v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      int64_t v52 = std::string::append(&v88, " ", 1uLL);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v54 = v93.__r_.__value_.__r.__words[0] + 24 * ((v42 + 3) % (int)v40);
      int v55 = *(char *)(v54 + 23);
      if (v55 >= 0) {
        uint64_t v56 = (const std::string::value_type *)(v93.__r_.__value_.__r.__words[0]
      }
                                              + 24 * ((v42 + 3) % (int)v40));
      else {
        uint64_t v56 = *(const std::string::value_type **)v54;
      }
      if (v55 >= 0) {
        std::string::size_type v57 = *(unsigned __int8 *)(v54 + 23);
      }
      else {
        std::string::size_type v57 = *(void *)(v54 + 8);
      }
      uint64_t v58 = std::string::append(&v89, v56, v57);
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      uint64_t v60 = std::string::append(&v90, " ", 1uLL);
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v62 = v93.__r_.__value_.__r.__words[0] + 24 * ((v42 + 2) % (int)v40);
      int v63 = *(char *)(v62 + 23);
      if (v63 >= 0) {
        BOOL v64 = (const std::string::value_type *)(v93.__r_.__value_.__r.__words[0]
      }
                                              + 24 * ((v42 + 2) % (int)v40));
      else {
        BOOL v64 = *(const std::string::value_type **)v62;
      }
      if (v63 >= 0) {
        std::string::size_type v65 = *(unsigned __int8 *)(v62 + 23);
      }
      else {
        std::string::size_type v65 = *(void *)(v62 + 8);
      }
      uint64_t v66 = std::string::append(&v91, v64, v65);
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      uint64_t v68 = std::string::append(&v92, "\n", 1uLL);
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      int64_t v95 = v68->__r_.__value_.__r.__words[2];
      long long v94 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      if (v95 >= 0) {
        unint64_t v70 = (const std::string::value_type *)&v94;
      }
      else {
        unint64_t v70 = (const std::string::value_type *)v94;
      }
      if (v95 >= 0) {
        std::string::size_type v71 = HIBYTE(v95);
      }
      else {
        std::string::size_type v71 = *((void *)&v94 + 1);
      }
      std::string::append(&v85, v70, v71);
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      v42 += 2;
      --v43;
    }
    while (v43);
  }
  std::string::append(&v85, "f", 1uLL);
  if ((int)v40 >= 2)
  {
    uint64_t v72 = 0;
    uint64_t v73 = v83;
    do
    {
      std::operator+<char>();
      if (v95 >= 0) {
        float32x2_t v74 = (const std::string::value_type *)&v94;
      }
      else {
        float32x2_t v74 = (const std::string::value_type *)v94;
      }
      if (v95 >= 0) {
        std::string::size_type v75 = HIBYTE(v95);
      }
      else {
        std::string::size_type v75 = *((void *)&v94 + 1);
      }
      std::string::append(&v85, v74, v75);
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      v72 += 48;
      --v73;
    }
    while (v73);
  }
  std::string::append(&v85, "\n", 1uLL);
  std::string::append(&v85, "f", 1uLL);
  if ((int)v40 >= 2)
  {
    unint64_t v76 = v83 + 1;
    uint64_t v77 = 2 * v83 - 2;
    do
    {
      std::operator+<char>();
      if (v95 >= 0) {
        BOOL v78 = (const std::string::value_type *)&v94;
      }
      else {
        BOOL v78 = (const std::string::value_type *)v94;
      }
      if (v95 >= 0) {
        std::string::size_type v79 = HIBYTE(v95);
      }
      else {
        std::string::size_type v79 = *((void *)&v94 + 1);
      }
      std::string::append(&v85, v78, v79);
      if (SHIBYTE(v95) < 0) {
        operator delete((void *)v94);
      }
      --v76;
      v77 -= 2;
    }
    while (v76 > 1);
  }
  std::string::append(&v85, "\n", 1uLL);
  *(void *)&long long v94 = &v93;
  sub_25B41032C((void ***)&v94);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int32x2_t v80 = &v85;
  }
  else {
    int32x2_t v80 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = v85.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v80, v81);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  *a3 += ((char *)a2[1] - (char *)*a2) >> 4;
  return std::string::append(a1, "# obj_end\n\n", 0xBuLL);
}

void sub_25B590960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 + 23) < 0) {
    operator delete(*(void **)v56);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B590B9C(void *a1, uint64_t a2, std::string *a3, uint64_t *a4)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  id v111 = a1;
  if (objc_msgSend_count(v111, v6, v7))
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v135, "\n", 1uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)&long long v137 = *((void *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v137) & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((SBYTE7(v137) & 0x80u) == 0) {
      std::string::size_type v11 = BYTE7(v137);
    }
    else {
      std::string::size_type v11 = (std::string::size_type)__p[1];
    }
    std::string::append(a3, (const std::string::value_type *)v10, v11);
    if (SBYTE7(v137) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    long long v125 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    obunint64_t j = v111;
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v125, &v135, 16);
    if (v13)
    {
      uint64_t v113 = *(void *)v126;
      do
      {
        uint64_t v14 = 0;
        uint64_t v114 = v13;
        do
        {
          if (*(void *)v126 != v113) {
            objc_enumerationMutation(obj);
          }
          id v15 = *(id *)(*((void *)&v125 + 1) + 8 * v14);
          uint64_t v18 = objc_msgSend_array(MEMORY[0x263EFF980], v16, v17);
          objc_msgSend_endOrientation(v15, v19, v20);
          float v22 = v21;
          objc_msgSend_startOrientation(v15, v23, v24);
          int v28 = vcvtps_s32_f32((float)(v22 - v27) / 5.0);
          if (v28 <= 10) {
            int v29 = 10;
          }
          else {
            int v29 = v28;
          }
          objc_msgSend_endOrientation(v15, v25, v26);
          float v31 = v30;
          objc_msgSend_startOrientation(v15, v32, v33);
          uint64_t v115 = v14;
          int v34 = 0;
          float v124 = (float)(v31 - v35) / (float)v29;
          do
          {
            uint64_t v36 = objc_alloc_init(RS3DSurface);
            objc_msgSend_startOrientation(v15, v37, v38);
            float v40 = v39;
            objc_msgSend_startOrientation(v15, v41, v42);
            float v44 = v43;
            objc_msgSend_radius(v15, v45, v46);
            float v48 = v47;
            objc_msgSend_circleCenter(v15, v49, v50);
            long long v123 = v51;
            float v52 = (float)(v40 + (float)((float)v34 * v124)) * 3.14159265 / 180.0;
            float v53 = cosf(v52);
            objc_msgSend_radius(v15, v54, v55);
            float v57 = v56;
            float v58 = sinf(v52);
            objc_msgSend_circleCenter(v15, v59, v60);
            float v122 = v61;
            objc_msgSend_quad(v15, v62, v63);
            int v121 = v64;
            objc_msgSend_radius(v15, v65, v66);
            float v68 = v67;
            objc_msgSend_circleCenter(v15, v69, v70);
            long long v120 = v71;
            float v72 = (float)(v44 + (float)((float)++v34 * v124)) * 3.14159265 / 180.0;
            float v73 = cosf(v72);
            objc_msgSend_radius(v15, v74, v75);
            float v77 = v76;
            float v78 = sinf(v72);
            objc_msgSend_circleCenter(v15, v79, v80);
            float v119 = v81;
            objc_msgSend_quad(v15, v82, v83);
            int v118 = v84;
            objc_msgSend_quad(v15, v85, v86);
            int v117 = v87;
            objc_msgSend_quad(v15, v88, v89);
            int v116 = v90;
            unsigned __int8 v93 = objc_msgSend_type(v15, v91, v92);
            if (v36) {
              v36->type = v93;
            }
            id v94 = objc_alloc_init(MEMORY[0x263F08C38]);
            sub_25B4FD4F4((uint64_t)v36, v94);

            *((void *)&v96 + 1) = *((void *)&v123 + 1);
            *(float *)&long long v96 = *(float *)&v123 + (float)(v48 * v53);
            *((float *)&v96 + 1) = v122 + (float)(v57 * v58);
            long long v97 = v96;
            DWORD2(v97) = v121;
            *((void *)&v98 + 1) = *((void *)&v120 + 1);
            *(float *)&long long v98 = *(float *)&v120 + (float)(v68 * v73);
            *((float *)&v98 + 1) = v119 + (float)(v77 * v78);
            long long v99 = v98;
            DWORD2(v99) = v118;
            DWORD2(v98) = v117;
            DWORD2(v96) = v116;
            *(_OWORD *)long long __p = v97;
            long long v137 = v99;
            long long v138 = v98;
            long long v139 = v96;
            if (v36) {
              objc_copyStruct(&v36[1], __p, 64, 1, 0);
            }
            objc_msgSend_addObject_(v18, v95, (uint64_t)v36);
          }
          while (v29 != v34);

          id v100 = v18;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v134 = 0u;
          id v101 = v100;
          uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(v101, v102, (uint64_t)&v131, __p, 16);
          if (v103)
          {
            uint64_t v104 = *(void *)v132;
            do
            {
              for (uint64_t i = 0; i != v103; ++i)
              {
                if (*(void *)v132 != v104) {
                  objc_enumerationMutation(v101);
                }
                id v106 = *(id *)(*((void *)&v131 + 1) + 8 * i);
                sub_25B591208((char **)v130, v106);
                sub_25B590128(&v129, (float **)v130, a4);
                if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  float v107 = &v129;
                }
                else {
                  float v107 = (std::string *)v129.__r_.__value_.__r.__words[0];
                }
                if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v129.__r_.__value_.__l.__size_;
                }
                std::string::append(a3, (const std::string::value_type *)v107, size);
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v129.__r_.__value_.__l.__data_);
                }
                if (v130[0]) {
                  operator delete(v130[0]);
                }
              }
              uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(v101, v109, (uint64_t)&v131, __p, 16);
            }
            while (v103);
          }

          ++v14;
        }
        while (v115 + 1 != v114);
        uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v110, (uint64_t)&v125, &v135, 16);
      }
      while (v13);
    }
  }
}

void sub_25B591104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_25B591208(char **a1, void *a2)
{
  int v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v133 = v3;
  unint64_t v6 = objc_msgSend_polygonSize(v3, v4, v5);
  objc_msgSend_quad(v133, v7, v8);
  float32x4_t v124 = v9;
  objc_msgSend_quad(v133, v10, v11);
  float32x4_t v123 = v12;
  if (objc_msgSend_type(v133, v13, v14)) {
    v17.i32[0] = dword_25B5F1D18[objc_msgSend_type(v133, v15, v16) == 4];
  }
  else {
    int32x2_t v17 = 0;
  }
  uint64_t v18 = v133;
  unint64_t v19 = vsubq_f32(v124, v123).u64[0];
  v20.f32[0] = -*((float *)&v19 + 1);
  v20.i32[1] = v19;
  int32x2_t v21 = (int32x2_t)vmul_f32(v20, v20);
  v21.i32[0] = vadd_f32((float32x2_t)v21, (float32x2_t)vdup_lane_s32(v21, 1)).u32[0];
  float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  int32x2_t v23 = (int32x2_t)vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
  int32x2_t v24 = (int32x2_t)vmul_f32((float32x2_t)v23, (float32x2_t)v23);
  float32x2_t v25 = vmul_n_f32(v20, vmul_f32((float32x2_t)v23, vrsqrts_f32((float32x2_t)v21.u32[0], (float32x2_t)v24)).f32[0]);
  float32x2_t v26 = vneg_f32(v25);
  if (v133)
  {
    float v27 = v133[33];
    *(float *)v24.i32 = *(float *)v17.i32 + 0.16;
    double v28 = COERCE_DOUBLE(vdup_lane_s32(v24, 0));
    double v29 = COERCE_DOUBLE(vdup_lane_s32(v17, 0));
    BOOL v30 = v27 <= 0.0;
    *(float *)v17.i32 = *(float *)v17.i32 + (float)(v27 * 0.5);
    double v31 = COERCE_DOUBLE(vdup_lane_s32(v17, 0));
    if (v30) {
      double v32 = v29;
    }
    else {
      double v32 = v31;
    }
    if (v30) {
      double v31 = v28;
    }
  }
  else
  {
    *(float *)v23.i32 = *(float *)v17.i32 + 0.16;
    double v31 = COERCE_DOUBLE(vdup_lane_s32(v23, 0));
    double v32 = COERCE_DOUBLE(vdup_lane_s32(v17, 0));
  }
  float32x2_t v33 = vmul_f32(*(float32x2_t *)&v31, v26);
  float32x2_t v34 = vmul_f32(v25, *(float32x2_t *)&v32);
  if (v6 > 2)
  {
    float v35 = 0;
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    for (unint64_t i = objc_msgSend_polygonSize(v133, v15, v16); ; unint64_t i = objc_msgSend_polygonSize(v133, v58, v59))
    {
      BOOL v41 = v37 >= i;
      uint64_t v18 = v133;
      if (v41) {
        goto LABEL_82;
      }
      long long v125 = *(_OWORD *)(objc_msgSend_polygon(v133, v39, v40) + 16 * v37);
      uint64_t v44 = objc_msgSend_polygon(v133, v42, v43);
      *(float32x2_t *)&long long v47 = vadd_f32(v33, *(float32x2_t *)&v125);
      *((void *)&v47 + 1) = vextq_s8(*(int8x16_t *)(v44 + 16 * v37), *(int8x16_t *)(v44 + 16 * v37), 8uLL).u64[0];
      if (v36 >= v35)
      {
        long long v126 = v47;
        std::string::size_type v49 = *a1;
        uint64_t v50 = (v36 - *a1) >> 4;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((v35 - v49) >> 3 > v51) {
          unint64_t v51 = (v35 - v49) >> 3;
        }
        if ((unint64_t)(v35 - v49) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          unint64_t v52 = (unint64_t)sub_25B3FFAEC(v52);
        }
        else {
          long long v45 = 0;
        }
        float v53 = (char *)(v52 + 16 * v50);
        *(_OWORD *)float v53 = v126;
        float v48 = v53 + 16;
        if (v36 != v49)
        {
          do
          {
            long long v54 = *((_OWORD *)v36 - 1);
            v36 -= 16;
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 16;
          }
          while (v36 != v49);
          uint64_t v36 = *a1;
        }
        *a1 = v53;
        a1[1] = v48;
        a1[2] = (char *)(v52 + 16 * (void)v45);
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v36 = v47;
        float v48 = v36 + 16;
      }
      a1[1] = v48;
      long long v127 = *(_OWORD *)(objc_msgSend_polygon(v133, v45, v46) + 16 * v37);
      uint64_t v57 = objc_msgSend_polygon(v133, v55, v56);
      *(float32x2_t *)&long long v60 = vadd_f32(v34, *(float32x2_t *)&v127);
      *((void *)&v60 + 1) = vextq_s8(*(int8x16_t *)(v57 + 16 * v37), *(int8x16_t *)(v57 + 16 * v37), 8uLL).u64[0];
      float v35 = a1[2];
      if (v48 < v35)
      {
        *(_OWORD *)float v48 = v60;
        uint64_t v36 = v48 + 16;
        goto LABEL_46;
      }
      long long v128 = v60;
      float v61 = *a1;
      uint64_t v62 = (v48 - *a1) >> 4;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((v35 - v61) >> 3 > v63) {
        unint64_t v63 = (v35 - v61) >> 3;
      }
      int v64 = (char *)((unint64_t)(v35 - v61) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v63);
      if (v64) {
        int v64 = (char *)sub_25B3FFAEC((unint64_t)v64);
      }
      else {
        float v58 = 0;
      }
      std::string::size_type v65 = &v64[16 * v62];
      float v35 = &v64[16 * (void)v58];
      *(_OWORD *)std::string::size_type v65 = v128;
      uint64_t v36 = v65 + 16;
      if (v48 == v61) {
        break;
      }
      do
      {
        long long v66 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v65 - 1) = v66;
        v65 -= 16;
      }
      while (v48 != v61);
      float v48 = *a1;
      *a1 = v65;
      a1[1] = v36;
      a1[2] = v35;
      if (v48) {
        goto LABEL_45;
      }
LABEL_46:
      a1[1] = v36;
      ++v37;
    }
    *a1 = v65;
    a1[1] = v36;
    a1[2] = v35;
LABEL_45:
    operator delete(v48);
    goto LABEL_46;
  }
  unint64_t v67 = 0;
  float v68 = 0;
  for (uint64_t j = 0; j != 4; ++j)
  {
    objc_msgSend_quad(v18, v15, v16);
    int v143 = v70;
    int v145 = v71;
    uint64_t v142 = v72;
    uint64_t v144 = v73;
    int v147 = v74;
    int v149 = v75;
    uint64_t v146 = v76;
    uint64_t v148 = v77;
    long long v129 = *((_OWORD *)&v142 + j);
    objc_msgSend_quad(v133, v78, v79);
    *(float32x2_t *)&long long v90 = vadd_f32(v33, *(float32x2_t *)&v129);
    int v135 = v82;
    int v137 = v83;
    int v139 = v84;
    uint64_t v134 = v85;
    uint64_t v136 = v86;
    int v141 = v87;
    uint64_t v138 = v88;
    uint64_t v140 = v89;
    *((void *)&v90 + 1) = vextq_s8(*((int8x16_t *)&v134 + j), *((int8x16_t *)&v134 + j), 8uLL).u64[0];
    if ((unint64_t)v68 >= v67)
    {
      long long v130 = v90;
      uint64_t v92 = *a1;
      uint64_t v93 = (v68 - *a1) >> 4;
      unint64_t v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v67 - (void)v92) >> 3 > v94) {
        unint64_t v94 = (uint64_t)(v67 - (void)v92) >> 3;
      }
      if (v67 - (unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v95 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v95 = v94;
      }
      if (v95) {
        unint64_t v95 = (unint64_t)sub_25B3FFAEC(v95);
      }
      else {
        uint64_t v80 = 0;
      }
      long long v96 = (char *)(v95 + 16 * v93);
      *(_OWORD *)long long v96 = v130;
      std::string v91 = v96 + 16;
      if (v68 != v92)
      {
        do
        {
          long long v97 = *((_OWORD *)v68 - 1);
          v68 -= 16;
          *((_OWORD *)v96 - 1) = v97;
          v96 -= 16;
        }
        while (v68 != v92);
        float v68 = *a1;
      }
      *a1 = v96;
      a1[1] = v91;
      a1[2] = (char *)(v95 + 16 * (void)v80);
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *(_OWORD *)float v68 = v90;
      std::string v91 = v68 + 16;
    }
    a1[1] = v91;
    objc_msgSend_quad(v133, v80, v81);
    int v143 = v98;
    int v145 = v99;
    uint64_t v142 = v100;
    uint64_t v144 = v101;
    int v147 = v102;
    int v149 = v103;
    uint64_t v146 = v104;
    uint64_t v148 = v105;
    long long v131 = *((_OWORD *)&v142 + j);
    objc_msgSend_quad(v133, v106, v107);
    int v135 = v108;
    int v137 = v109;
    uint64_t v134 = v110;
    uint64_t v136 = v111;
    int v139 = v112;
    int v141 = v113;
    uint64_t v138 = v114;
    uint64_t v140 = v115;
    *(float32x2_t *)&long long v116 = vadd_f32(v34, *(float32x2_t *)&v131);
    *((void *)&v116 + 1) = vextq_s8(*((int8x16_t *)&v134 + j), *((int8x16_t *)&v134 + j), 8uLL).u64[0];
    unint64_t v67 = (unint64_t)a1[2];
    if ((unint64_t)v91 < v67)
    {
      *(_OWORD *)std::string v91 = v116;
      float v68 = v91 + 16;
      goto LABEL_81;
    }
    long long v132 = v116;
    int v117 = *a1;
    uint64_t v118 = (v91 - *a1) >> 4;
    unint64_t v119 = v118 + 1;
    if ((unint64_t)(v118 + 1) >> 60) {
      sub_25B3FBC4C();
    }
    if ((uint64_t)(v67 - (void)v117) >> 3 > v119) {
      unint64_t v119 = (uint64_t)(v67 - (void)v117) >> 3;
    }
    if (v67 - (unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v120 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v120 = v119;
    }
    if (v120) {
      unint64_t v120 = (unint64_t)sub_25B3FFAEC(v120);
    }
    else {
      id v15 = 0;
    }
    int v121 = (char *)(v120 + 16 * v118);
    unint64_t v67 = v120 + 16 * (void)v15;
    *(_OWORD *)int v121 = v132;
    float v68 = v121 + 16;
    if (v91 == v117)
    {
      *a1 = v121;
      a1[1] = v68;
      a1[2] = (char *)v67;
LABEL_80:
      operator delete(v91);
      goto LABEL_81;
    }
    do
    {
      long long v122 = *((_OWORD *)v91 - 1);
      v91 -= 16;
      *((_OWORD *)v121 - 1) = v122;
      v121 -= 16;
    }
    while (v91 != v117);
    std::string v91 = *a1;
    *a1 = v121;
    a1[1] = v68;
    a1[2] = (char *)v67;
    if (v91) {
      goto LABEL_80;
    }
LABEL_81:
    a1[1] = v68;
    uint64_t v18 = v133;
  }
LABEL_82:
}

void sub_25B5917F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_25B591958(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = v3;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v21, v25, 16);
  if (v9)
  {
    uint64_t v10 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v5);
        }
        float32x4_t v12 = *(unsigned char **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend_identifier(v12, v7, v8, (void)v21);
        int v15 = objc_msgSend_containsObject_(v4, v14, (uint64_t)v13);

        if (v15)
        {
          id v18 = objc_alloc_init(MEMORY[0x263F08C38]);
          sub_25B4FD4F4((uint64_t)v12, v18);

          if (v12) {
            v12[105] = 0;
          }
        }
        unint64_t v19 = objc_msgSend_identifier(v12, v16, v17);
        objc_msgSend_addObject_(v4, v20, (uint64_t)v19);
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v21, v25, 16);
    }
    while (v9);
  }
}

void sub_25B591AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B591B18(void *a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v8 = v5;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v21, v25, 16);
  if (v12)
  {
    uint64_t v13 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v8);
        }
        int v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v16 = objc_msgSend_parentIdentifier(v15, v10, v11, (void)v21);
        BOOL v17 = v16 == 0;

        if (!v17)
        {
          id v18 = objc_msgSend_parentIdentifier(v15, v10, v11);
          int isEqual = objc_msgSend_isEqual_(v18, v19, (uint64_t)v6);

          if (isEqual) {
            sub_25B4FD504((uint64_t)v15, v7);
          }
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v21, v25, 16);
    }
    while (v12);
  }
}

void sub_25B591C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

RSMarkerSignal *sub_25B592764(uint64_t a1, void *a2, void *a3)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  uint64_t v140 = a2;
  id v5 = a3;
  int v141 = v5;
  if (a1)
  {
    id v6 = v5;
    memset(v166, 0, sizeof(v166));
    if (v5)
    {
      id v7 = *((id *)v5 + 15);
      id v8 = (void *)v6[14];
    }
    else
    {
      id v7 = 0;
      id v8 = 0;
    }
    id v9 = v8;
    uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0);
    uint64_t v139 = objc_msgSend_objectForKey_(v7, v12, (uint64_t)v11);

    uint64_t v13 = v141;
    if (v141)
    {
      uint64_t v14 = v141[10];
      uint64_t v13 = (void *)v141[14];
    }
    else
    {
      uint64_t v14 = 0;
    }
    id v15 = v13;
    uint64_t v18 = objc_msgSend_count(v15, v16, v17);
    if (v139)
    {
      long long v22 = *(_OWORD *)(v139 + 48);
      long long v23 = *(_OWORD *)(v139 + 64);
      long long v24 = *(_OWORD *)(v139 + 80);
      v19.n128_u32[0] = *(_DWORD *)(v139 + 8);
      LODWORD(v20) = *(_DWORD *)(v139 + 12);
    }
    else
    {
      v19.n128_u64[0] = 0;
      *(void *)&long long v22 = 0;
      DWORD2(v22) = 0;
      *(void *)&long long v23 = 0;
      DWORD2(v23) = 0;
      *(void *)&long long v24 = 0;
      DWORD2(v24) = 0;
      double v20 = 0.0;
    }
    uint64_t v138 = a1;
    LODWORD(v172) = DWORD2(v22);
    int v174 = DWORD2(v23);
    int v176 = DWORD2(v24);
    long long v171 = (void *)v22;
    uint64_t v173 = v23;
    uint64_t v175 = v24;
    sub_25B478374(v14, v18, (uint64_t)&v171, (int)v19.n128_f32[0], (int)*(float *)&v20, (__n128 **)v166, v19, *(double *)&v22, *(double *)&v23, *(double *)&v24, v20, v21);

    long long __p = 0;
    float32x2_t v25 = 0;
    unint64_t v26 = 0;
    for (unint64_t i = 0; ; ++i)
    {
      double v28 = v141;
      if (v141) {
        double v28 = (void *)v141[14];
      }
      id v29 = v28;
      unint64_t v32 = objc_msgSend_count(v29, v30, v31);

      if (i >= v32) {
        break;
      }
      if ((unint64_t)v25 >= v26)
      {
        __n128 v153 = *(__n128 *)(v141[10] + (i << 6) + 48);
        uint64_t v34 = (v25 - (char *)__p) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v26 - (void)__p) >> 3 > v35) {
          unint64_t v35 = (uint64_t)(v26 - (void)__p) >> 3;
        }
        if (v26 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          unint64_t v36 = (unint64_t)sub_25B3FFAEC(v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = (__n128 *)(v36 + 16 * v34);
        *uint64_t v38 = v153;
        float32x2_t v33 = (char *)&v38[1];
        if (v25 == (char *)__p)
        {
          float v39 = __p;
        }
        else
        {
          float v39 = __p;
          do
          {
            __n128 v40 = *((__n128 *)v25 - 1);
            v25 -= 16;
            v38[-1] = v40;
            --v38;
          }
          while (v25 != (char *)__p);
        }
        unint64_t v26 = v36 + 16 * v37;
        if (v39) {
          operator delete(v39);
        }
        long long __p = v38;
      }
      else
      {
        *(_OWORD *)float32x2_t v25 = *(_OWORD *)(v141[10] + (i << 6) + 48);
        float32x2_t v33 = v25 + 16;
      }
      float32x2_t v25 = v33;
    }
    sub_25B49D378((void **)(a1 + 192), *(char **)(a1 + 200), (char *)__p, v25, (v25 - (char *)__p) >> 4);
    if (v141)
    {
      BOOL v41 = (const void *)v141[4];
      unint64_t v42 = (uint64_t)(v141[5] - (void)v41) >> 4;
    }
    else
    {
      BOOL v41 = 0;
      unint64_t v42 = 0;
    }
    memset(v165, 0, sizeof(v165));
    sub_25B40EE6C(v165, v41, (uint64_t)v41 + 16 * v42, v42);
    sub_25B4D48A4();
    uint64_t v43 = (double *)v166[0];
    unint64_t v149 = sub_25B4D4D94((uint64_t *)v165, *__p, *(float32x2_t *)v166[0]).n128_u64[0];
    unint64_t v154 = v44;
    long long v45 = (char **)(a1 + 168);
    long long v47 = *(unint64_t **)(a1 + 176);
    unint64_t v46 = *(void *)(a1 + 184);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v49 = ((char *)v47 - *v45) >> 4;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v51 = v46 - (void)*v45;
      if (v51 >> 3 > v50) {
        unint64_t v50 = v51 >> 3;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52) {
        unint64_t v52 = (unint64_t)sub_25B3FFAEC(v52);
      }
      else {
        uint64_t v53 = 0;
      }
      long long v54 = (unint64_t *)(v52 + 16 * v49);
      unint64_t v55 = v52 + 16 * v53;
      unint64_t *v54 = v149;
      v54[1] = v154;
      float v48 = v54 + 2;
      uint64_t v57 = *(char **)(a1 + 168);
      uint64_t v56 = *(char **)(a1 + 176);
      if (v56 != v57)
      {
        do
        {
          *((_OWORD *)v54 - 1) = *((_OWORD *)v56 - 1);
          v54 -= 2;
          v56 -= 16;
        }
        while (v56 != v57);
        uint64_t v56 = *v45;
      }
      *(void *)(a1 + 168) = v54;
      *(void *)(a1 + 176) = v48;
      *(void *)(a1 + 184) = v55;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      unint64_t *v47 = v149;
      v47[1] = v44;
      float v48 = v47 + 2;
    }
    *(void *)(a1 + 176) = v48;
    sub_25B4D48A4();
    sub_25B4D4908((float32x4_t **)v164, (uint64_t *)v165, *__p, *v43, 60.0);
    sub_25B4D48A4();
    sub_25B4D4908((float32x4_t **)v163, (uint64_t *)v165, *__p, *v43, 20.0);
    objc_msgSend_walls(v140, v58, v59);
    id v60 = (id)objc_claimAutoreleasedReturnValue();
    std::string::size_type v161 = 0;
    unint64_t v162 = 0;
    char v160 = 0;
    *(_OWORD *)unint64_t v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    obuint64_t j = v60;
    uint64_t v64 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v61, (uint64_t)v167, &v171, 16);
    if (v64)
    {
      std::string::size_type v65 = 0;
      unint64_t v66 = 0;
      unint64_t v67 = 0;
      uint64_t v68 = *(void *)v168;
      do
      {
        uint64_t v69 = 0;
        do
        {
          if (*(void *)v168 != v68) {
            objc_enumerationMutation(obj);
          }
          int v70 = (_DWORD *)*((void *)v167[1] + v69);
          objc_msgSend_quad(v70, v62, v63);
          uint64_t v155 = v71;
          objc_msgSend_quad(v70, v72, v73);
          uint64_t v150 = v74;
          objc_msgSend_confidence(v70, v75, v76);
          int v80 = v79;
          if (v70) {
            int v81 = v70[29];
          }
          else {
            LOBYTE(v81) = 0;
          }
          objc_msgSend_quad(v70, v77, v78);
          int v148 = v82;
          objc_msgSend_quad(v70, v83, v84);
          if (v70)
          {
            int v144 = v85;
            objc_copyStruct(&dest, v70 + 52, 16, 1, 0);
            uint64_t v145 = dest;
            int v85 = v144;
          }
          else
          {
            uint64_t v145 = 0;
          }
          int v86 = v85;
          if ((unint64_t)v67 >= v66)
          {
            unint64_t v87 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - v65) >> 3) + 1;
            if (v87 > 0x666666666666666)
            {
              unint64_t v162 = v66;
              char v160 = v65;
              sub_25B3FBC4C();
            }
            if (0x999999999999999ALL * ((uint64_t)(v66 - (void)v65) >> 3) > v87) {
              unint64_t v87 = 0x999999999999999ALL * ((uint64_t)(v66 - (void)v65) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (void)v65) >> 3) >= 0x333333333333333) {
              unint64_t v88 = 0x666666666666666;
            }
            else {
              unint64_t v88 = v87;
            }
            if (v88) {
              unint64_t v88 = (unint64_t)sub_25B460930(v88);
            }
            else {
              uint64_t v62 = 0;
            }
            unint64_t v89 = v88 + 8 * ((v67 - v65) >> 3);
            *(void *)unint64_t v89 = v155;
            *(void *)(v89 + 8) = v150;
            *(_DWORD *)(v89 + 16) = v86;
            *(_DWORD *)(v89 + 20) = v148;
            *(_DWORD *)(v89 + 24) = v80;
            *(unsigned char *)(v89 + 28) = v81;
            *(void *)(v89 + 32) = v145;
            if (v67 == v65)
            {
              uint64_t v93 = (char *)(v88 + 8 * ((v67 - v65) >> 3));
            }
            else
            {
              unint64_t v90 = v88 + 8 * ((v67 - v65) >> 3);
              do
              {
                long long v91 = *(_OWORD *)(v67 - 40);
                long long v92 = *(_OWORD *)(v67 - 24);
                uint64_t v93 = (char *)(v90 - 40);
                *(void *)(v90 - 8) = *((void *)v67 - 1);
                *(_OWORD *)(v90 - 24) = v92;
                *(_OWORD *)(v90 - 40) = v91;
                v67 -= 40;
                v90 -= 40;
              }
              while (v67 != v65);
            }
            unint64_t v66 = v88 + 40 * (void)v62;
            unint64_t v67 = (char *)(v89 + 40);
            if (v65) {
              operator delete(v65);
            }
            std::string::size_type v65 = v93;
          }
          else
          {
            *(void *)unint64_t v67 = v155;
            *((void *)v67 + 1) = v150;
            *((_DWORD *)v67 + 4) = v85;
            *((_DWORD *)v67 + 5) = v148;
            *((_DWORD *)v67 + 6) = v80;
            v67[28] = v81;
            *((void *)v67 + 4) = v145;
            v67 += 40;
          }
          ++v69;
        }
        while (v69 != v64);
        std::string::size_type v161 = v67;
        unint64_t v162 = v66;
        char v160 = v65;
        uint64_t v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)v167, &v171, 16);
        uint64_t v64 = v94;
      }
      while (v94);
    }

    objc_msgSend_openings(v140, v95, v96);
    id v97 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v159 = 0;
    long long dest = 0uLL;
    *(_OWORD *)unint64_t v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    id v98 = v97;
    uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v99, (uint64_t)v167, &v171, 16);
    if (v102)
    {
      int v103 = 0;
      uint64_t v104 = *(void *)v168;
      do
      {
        for (uint64_t j = 0; j != v102; ++j)
        {
          if (*(void *)v168 != v104) {
            objc_enumerationMutation(v98);
          }
          id v106 = (void *)*((void *)v167[1] + j);
          objc_msgSend_quad(v106, v100, v101);
          uint64_t v156 = v107;
          objc_msgSend_quad(v106, v108, v109);
          uint64_t v151 = v110;
          if ((unint64_t)v103 >= v159)
          {
            uint64_t v111 = (void *)dest;
            uint64_t v112 = (uint64_t)((uint64_t)v103 - dest) >> 4;
            unint64_t v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            uint64_t v114 = v159 - dest;
            if ((uint64_t)(v159 - dest) >> 3 > v113) {
              unint64_t v113 = v114 >> 3;
            }
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v115 = v113;
            }
            if (v115) {
              unint64_t v115 = (unint64_t)sub_25B3FFAEC(v115);
            }
            else {
              uint64_t v100 = 0;
            }
            long long v116 = (void *)(v115 + 16 * v112);
            *long long v116 = v156;
            v116[1] = v151;
            if (v103 == v111)
            {
              uint64_t v118 = v103;
              unint64_t v117 = v115 + 16 * v112;
            }
            else
            {
              unint64_t v117 = v115 + 16 * v112;
              do
              {
                *(_OWORD *)(v117 - 16) = *((_OWORD *)v103 - 1);
                v117 -= 16;
                v103 -= 2;
              }
              while (v103 != v111);
              uint64_t v118 = (void *)dest;
            }
            int v103 = v116 + 2;
            *(void *)&long long dest = v117;
            *((void *)&dest + 1) = v116 + 2;
            unint64_t v159 = v115 + 16 * (void)v100;
            if (v118) {
              operator delete(v118);
            }
          }
          else
          {
            *int v103 = v156;
            v103[1] = v110;
            v103 += 2;
          }
          *((void *)&dest + 1) = v103;
        }
        uint64_t v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(v98, v100, (uint64_t)v167, &v171, 16);
      }
      while (v102);
    }

    long long v171 = 0;
    long long v172 = 0;
    uint64_t v173 = 0;
    v167[0] = 0;
    v167[1] = 0;
    *(void *)&long long v168 = 0;
    sub_25B5875AC(v138 + 8, (float32x2_t **)&v160, (float32x2_t **)&dest, (void *)(v138 + 168), (uint64_t)v163, v164, (unint64_t *)&v171, (uint64_t)v167);
    int v121 = objc_msgSend_array(MEMORY[0x263EFF980], v119, v120);
    if (v140)
    {
      int v147 = v140[3];
      int v123 = v140[4];
    }
    else
    {
      int v147 = 0;
      int v123 = 0;
    }
    int v146 = v123;
    long long v125 = v171;
    float32x4_t v124 = v172;
    if (v171 != v172)
    {
      long long v126 = v171 + 4;
      do
      {
        long long v127 = v126 - 4;
        *(void *)&long long v122 = *(v126 - 4);
        long long v157 = v122;
        *(void *)&long long v122 = *(v126 - 3);
        long long v152 = v122;
        long long v128 = objc_alloc_init(RS3DMarker);
        long long v130 = v128;
        if (v128)
        {
          long long v132 = v152;
          long long v131 = v157;
          long long v133 = v157;
          DWORD2(v133) = v147;
          long long v134 = v152;
          DWORD2(v134) = v147;
          DWORD2(v132) = v146;
          DWORD2(v131) = v146;
          *(_OWORD *)&v128[1].super.isa = v133;
          *(_OWORD *)&v128[1]._normal[4] = v134;
          *(_OWORD *)&v128[2].super.isa = v132;
          *(_OWORD *)&v128[2]._normal[4] = v131;
          *(void *)&long long v133 = *v126;
          *(_OWORD *)&v128->_normal[4] = v133;
          v128->_score = 1.0;
        }
        objc_msgSend_addObject_(v121, v129, (uint64_t)v128);

        v126 += 5;
      }
      while (v127 + 5 != v124);
    }
    int v135 = objc_alloc_init(RSMarkerSignal);
    uint64_t v136 = v135;
    if (v135) {
      objc_storeStrong((id *)&v135->_markers, v121);
    }

    if (v167[0]) {
      operator delete(v167[0]);
    }
    if (v125) {
      operator delete(v125);
    }
    if ((void)dest) {
      operator delete((void *)dest);
    }
    if (v160) {
      operator delete(v160);
    }
    if (v163[0])
    {
      v163[1] = v163[0];
      operator delete(v163[0]);
    }
    if (v164[0])
    {
      v164[1] = v164[0];
      operator delete(v164[0]);
    }
    if (v165[0]) {
      operator delete(v165[0]);
    }
    operator delete(__p);

    if (v166[0]) {
      operator delete(v166[0]);
    }
  }
  else
  {
    uint64_t v136 = 0;
  }

  return v136;
}

void sub_25B593160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }

  if (a42) {
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

id sub_25B593370(uint64_t *a1, const char *a2, float a3, double a4)
{
  char v5 = (char)a2;
  id v7 = objc_msgSend_arrayWithCapacity_(MEMORY[0x263EFF980], a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 != v10)
  {
    *(float *)v8.i32 = a3 * 6.0;
    int32x4_t v11 = vdupq_lane_s32(v8, 0);
    *(double *)v12.i64 = a4;
    *(double *)&v12.i64[1] = a4;
    float32x4_t v29 = (float32x4_t)v11;
    float32x4_t v31 = v12;
    __asm { FMOV            V0.4S, #6.0 }
    float32x4_t v28 = _Q0;
    do
    {
      uint64_t v37 = *(void *)v9;
      uint64_t v36 = *(void *)(v9 + 8);
      int v18 = *(_DWORD *)(v9 + 16);
      __n128 v19 = objc_alloc_init(RS3DSurface);
      uint64_t v21 = (uint64_t)v19;
      v22.i64[0] = v37;
      v22.i64[1] = v36;
      int64x2_t v23 = (int64x2_t)vsubq_f32(vdivq_f32(vmulq_f32(v22, v28), v29), v31);
      int64x2_t v24 = vzip2q_s64(v23, (int64x2_t)0);
      v23.i32[2] = 0;
      int64x2_t v25 = v23;
      v25.i32[3] = v35;
      int64x2_t v26 = v24;
      v26.i32[3] = v34;
      v24.i32[3] = v33;
      v23.i32[3] = v32;
      src[0] = v25;
      src[1] = v26;
      src[2] = v24;
      src[3] = v23;
      if (v19)
      {
        objc_copyStruct(&v19[1], src, 64, 1, 0);
        *(_DWORD *)(v21 + 108) = v18;
        *(unsigned char *)(v21 + 104) = v5;
      }
      objc_msgSend_addObject_(v7, v20, v21, *(_OWORD *)&v28, *(_OWORD *)&v29);

      v9 += 24;
    }
    while (v9 != v10);
  }

  return v7;
}

void sub_25B593500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B593524(void *a1)
{
  sub_25B59355C(a1);

  JUMPOUT(0x261163EE0);
}

void *sub_25B59355C(void *a1)
{
  *a1 = &unk_2708F1F38;
  sub_25B5935B4(a1);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_25B5935B4(void *result)
{
  uint64_t v1 = (void *)result[1];
  if (v1 != (void *)result[2])
  {
    uint64_t v2 = result;
    do
    {
      BOOL result = (void *)*v1;
      if (*v1) {
        BOOL result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      *uint64_t v1 = 0;
      id v3 = (char *)v2[2];
      int64_t v4 = v3 - (char *)(v1 + 1);
      if (v3 != (char *)(v1 + 1)) {
        BOOL result = memmove(v1, v1 + 1, v3 - (char *)(v1 + 1));
      }
      v2[2] = (char *)v1 + v4;
    }
    while (v1 != (void *)((char *)v1 + v4));
  }
  return result;
}

void *sub_25B593648(void *a1)
{
  *a1 = &unk_2708F1F10;
  a1[2] = a1[1];
  uint64_t v2 = (void **)(a1 + 4);
  id v3 = (void (***)(void))a1[4];
  int64_t v4 = (void (***)(void))a1[5];
  if (v4 != v3)
  {
    char v5 = v4 - 22;
    id v6 = v4 - 22;
    id v7 = v4 - 22;
    do
    {
      int32x2_t v8 = *v7;
      v7 -= 22;
      (*v8)(v6);
      v5 -= 22;
      BOOL v9 = v6 == v3;
      id v6 = v7;
    }
    while (!v9);
  }
  a1[5] = v3;
  float32x4_t v12 = v2;
  sub_25B3F5F28(&v12);
  uint64_t v10 = (void *)a1[1];
  if (v10)
  {
    a1[2] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_25B593720(void *a1, int a2, uint64_t a3)
{
  id v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 >= v6)
  {
    BOOL v9 = (char *)a1[1];
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      sub_25B3FBC4C();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_25B3FA70C();
      }
      uint64_t v14 = (char *)operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    id v15 = &v14[4 * v10];
    *(_DWORD *)id v15 = a2;
    int32x2_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v16 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v16;
      v15 -= 4;
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = &v14[4 * v13];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)id v7 = a2;
    int32x2_t v8 = v7 + 4;
  }
  a1[2] = v8;
  unint64_t v17 = a1[5];
  if (v17 >= a1[6])
  {
    uint64_t result = sub_25B47C818(a1 + 4, a3, a3);
  }
  else
  {
    sub_25B47C6E4(a1[5], a3, a3);
    uint64_t result = v17 + 176;
    a1[5] = v17 + 176;
  }
  a1[5] = result;
  return result;
}

void sub_25B593844(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B59384C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_25B47C818(a3, *(void *)(a1 + 32) + 176, a2);
  a3[1] = result;
  return result;
}

void sub_25B593890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B3F5F28((void ***)va);
  _Unwind_Resume(a1);
}

void sub_25B5938A8(void *a1)
{
  sub_25B593648(a1);

  JUMPOUT(0x261163EE0);
}

void sub_25B5938E4(uint64_t a1, long long **a2)
{
  char v5 = (uint64_t *)(a1 + 208);
  int64_t v4 = *(void **)(a1 + 208);
  float v6 = *(float *)(a1 + 12);
  int v7 = *(_DWORD *)(a1 + 16);
  float v8 = *(float *)(a1 + 20);
  *(void *)(a1 + 192) = *(void *)(a1 + 184);
  *(void *)(a1 + 168) = *(void *)(a1 + 160);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  *(void *)(a1 + 144) = *(void *)(a1 + 136);
  *(void *)(a1 + 312) = *(void *)(a1 + 304);
  *(void *)(a1 + 336) = *(void *)(a1 + 328);
  BOOL v9 = *(void **)(a1 + 216);
  while (v4 != v9)
  {
    v4[1] = *v4;
    v4 += 3;
  }
  uint64_t v10 = *(void **)(a1 + 232);
  long long v229 = (uint64_t *)(a1 + 232);
  unint64_t v11 = *(void **)(a1 + 240);
  while (v10 != v11)
  {
    v10[1] = *v10;
    v10 += 3;
  }
  sub_25B413CCC(v229);
  sub_25B413CCC(v5);
  uint64_t v14 = *a2;
  unint64_t v13 = a2[1];
  if (v14 == v13)
  {
    id v15 = *(long long **)(a1 + 144);
  }
  else
  {
    id v15 = *(long long **)(a1 + 144);
    do
    {
      unint64_t v16 = *(void *)(a1 + 152);
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v17 = *(void *)(a1 + 136);
        uint64_t v18 = ((uint64_t)v15 - v17) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v19 = v16 - v17;
        uint64_t v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_25B3FFAEC(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        int64x2_t v23 = (long long *)(v21 + 16 * v18);
        long long v12 = *v14;
        *int64x2_t v23 = *v14;
        int64x2_t v25 = *(char **)(a1 + 136);
        int64x2_t v24 = *(char **)(a1 + 144);
        int64x2_t v26 = v23;
        if (v24 != v25)
        {
          do
          {
            long long v12 = *((_OWORD *)v24 - 1);
            *--int64x2_t v26 = v12;
            v24 -= 16;
          }
          while (v24 != v25);
          int64x2_t v24 = *(char **)(a1 + 136);
        }
        id v15 = v23 + 1;
        *(void *)(a1 + 136) = v26;
        *(void *)(a1 + 144) = v23 + 1;
        *(void *)(a1 + 152) = v21 + 16 * v22;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        long long v12 = *v14;
        *v15++ = *v14;
      }
      *(void *)(a1 + 144) = v15;
      ++v14;
    }
    while (v14 != v13);
  }
  float v27 = *(long long **)(a1 + 136);
  if (v27 == v15)
  {
    uint64_t v102 = 0;
    uint64_t v64 = 0;
  }
  else
  {
    long long v228 = v5;
    float32x2_t v230 = 0;
    float32x4_t v28 = 0;
    unint64_t v29 = 0;
    BOOL v30 = 0;
    float32x4_t v31 = 0;
    unint64_t v32 = 0;
    do
    {
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v34 = v31 - v30;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_348;
        }
        if ((uint64_t)(v32 - (void)v30) >> 2 > v35) {
          unint64_t v35 = (uint64_t)(v32 - (void)v30) >> 2;
        }
        if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        uint64_t v37 = v30;
        if (v36) {
          unint64_t v36 = (unint64_t)sub_25B3FCAD4(v36);
        }
        else {
          uint64_t v38 = 0;
        }
        BOOL v30 = (void *)(v36 + 8 * v34);
        *BOOL v30 = *(void *)v27;
        __int32 v33 = v30 + 1;
        while (v31 != v37)
        {
          uint64_t v39 = *--v31;
          *--BOOL v30 = v39;
        }
        __n128 v40 = v37;
        unint64_t v32 = v36 + 8 * v38;
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *float32x4_t v31 = *(void *)v27;
        __int32 v33 = v31 + 1;
      }
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v41 = v33 - v30;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61) {
LABEL_348:
        }
          sub_25B3FBC4C();
        if ((uint64_t)(v32 - (void)v30) >> 2 > v42) {
          unint64_t v42 = (uint64_t)(v32 - (void)v30) >> 2;
        }
        if (v32 - (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        unint64_t v44 = v30;
        if (v43) {
          unint64_t v43 = (unint64_t)sub_25B3FCAD4(v43);
        }
        else {
          uint64_t v45 = 0;
        }
        BOOL v30 = (void *)(v43 + 8 * v41);
        *BOOL v30 = *((void *)v27 + 1);
        float32x4_t v31 = v30 + 1;
        while (v33 != v44)
        {
          uint64_t v46 = *--v33;
          *--BOOL v30 = v46;
        }
        long long v47 = v44;
        unint64_t v32 = v43 + 8 * v45;
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *__int32 v33 = *((void *)v27 + 1);
        float32x4_t v31 = v33 + 1;
      }
      if ((unint64_t)v28 >= v29)
      {
        uint64_t v49 = v28 - v230;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v29 - (void)v230) >> 2 > v50) {
          unint64_t v50 = (uint64_t)(v29 - (void)v230) >> 2;
        }
        if (v29 - (unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51) {
          unint64_t v51 = (unint64_t)sub_25B3FCAD4(v51);
        }
        else {
          uint64_t v52 = 0;
        }
        uint64_t v53 = (void *)(v51 + 8 * v49);
        *uint64_t v53 = 0;
        float v48 = v53 + 1;
        while (v28 != v230)
        {
          uint64_t v54 = *--v28;
          *--uint64_t v53 = v54;
        }
        unint64_t v29 = v51 + 8 * v52;
        if (v230) {
          operator delete(v230);
        }
        float32x2_t v230 = v53;
      }
      else
      {
        void *v28 = 0;
        float v48 = v28 + 1;
      }
      if ((unint64_t)v48 >= v29)
      {
        uint64_t v55 = v48 - v230;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v29 - (void)v230) >> 2 > v56) {
          unint64_t v56 = (uint64_t)(v29 - (void)v230) >> 2;
        }
        if (v29 - (unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57) {
          unint64_t v57 = (unint64_t)sub_25B3FCAD4(v57);
        }
        else {
          uint64_t v58 = 0;
        }
        uint64_t v59 = (void *)(v57 + 8 * v55);
        *uint64_t v59 = 0;
        float32x4_t v28 = v59 + 1;
        while (v48 != v230)
        {
          uint64_t v60 = *--v48;
          *--uint64_t v59 = v60;
        }
        unint64_t v29 = v57 + 8 * v58;
        if (v230) {
          operator delete(v230);
        }
        float32x2_t v230 = v59;
      }
      else
      {
        *float v48 = 0;
        float32x4_t v28 = v48 + 1;
      }
      ++v27;
    }
    while (v27 != v15);
    if (v31 == v30)
    {
      uint64_t v102 = v30;
      uint64_t v64 = v230;
    }
    else
    {
      uint64_t v61 = 0;
      unint64_t v62 = 0;
      unint64_t v63 = v31 - v30;
      uint64_t v64 = v230;
      do
      {
        if (v230[v62])
        {
          ++v62;
          unint64_t v65 = v31 - v30;
        }
        else
        {
          v230[v62] = ++v61;
          *(void *)&long long v12 = v30[v62];
          unint64_t v67 = *(void **)(a1 + 168);
          unint64_t v66 = *(void *)(a1 + 176);
          *(_OWORD *)int8x8_t v232 = v12;
          if ((unint64_t)v67 >= v66)
          {
            uint64_t v69 = *(void *)(a1 + 160);
            uint64_t v70 = ((uint64_t)v67 - v69) >> 3;
            if ((unint64_t)(v70 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            uint64_t v71 = v66 - v69;
            uint64_t v72 = v71 >> 2;
            if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
              uint64_t v72 = v70 + 1;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v72;
            }
            if (v73) {
              unint64_t v73 = (unint64_t)sub_25B3FCAD4(v73);
            }
            else {
              uint64_t v74 = 0;
            }
            int v75 = (void *)(v73 + 8 * v70);
            *int v75 = v232[0];
            uint64_t v68 = v75 + 1;
            uint64_t v77 = *(char **)(a1 + 160);
            uint64_t v76 = *(char **)(a1 + 168);
            if (v76 != v77)
            {
              do
              {
                uint64_t v78 = *((void *)v76 - 1);
                v76 -= 8;
                *--int v75 = v78;
              }
              while (v76 != v77);
              uint64_t v76 = *(char **)(a1 + 160);
            }
            *(void *)(a1 + 160) = v75;
            *(void *)(a1 + 168) = v68;
            *(void *)(a1 + 176) = v73 + 8 * v74;
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            *unint64_t v67 = v12;
            uint64_t v68 = v67 + 1;
          }
          *(void *)(a1 + 168) = v68;
          int v80 = *(char **)(a1 + 192);
          unint64_t v79 = *(void *)(a1 + 200);
          if ((unint64_t)v80 >= v79)
          {
            int v82 = *(unsigned char **)(a1 + 184);
            uint64_t v83 = (v80 - v82) >> 2;
            unint64_t v84 = v83 + 1;
            if ((unint64_t)(v83 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            uint64_t v85 = v79 - (void)v82;
            if (v85 >> 1 > v84) {
              unint64_t v84 = v85 >> 1;
            }
            if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v84;
            }
            if (v86)
            {
              unint64_t v86 = (unint64_t)sub_25B3FBC64(v86);
              int v82 = *(unsigned char **)(a1 + 184);
              int v80 = *(char **)(a1 + 192);
            }
            else
            {
              uint64_t v87 = 0;
            }
            unint64_t v88 = (_DWORD *)(v86 + 4 * v83);
            *unint64_t v88 = v232[0];
            int v81 = (char *)(v88 + 1);
            while (v80 != v82)
            {
              int v89 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *--unint64_t v88 = v89;
            }
            unint64_t v79 = v86 + 4 * v87;
            *(void *)(a1 + 184) = v88;
            *(void *)(a1 + 192) = v81;
            *(void *)(a1 + 200) = v79;
            if (v82)
            {
              operator delete(v82);
              unint64_t v79 = *(void *)(a1 + 200);
            }
            long long v12 = *(_OWORD *)v232;
          }
          else
          {
            long long v12 = *(_OWORD *)v232;
            *(_DWORD *)int v80 = v232[0];
            int v81 = v80 + 4;
          }
          *(void *)(a1 + 192) = v81;
          int v90 = DWORD1(v12);
          if ((unint64_t)v81 >= v79)
          {
            long long v92 = *(char **)(a1 + 184);
            uint64_t v93 = (v81 - v92) >> 2;
            unint64_t v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            uint64_t v95 = v79 - (void)v92;
            if (v95 >> 1 > v94) {
              unint64_t v94 = v95 >> 1;
            }
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v94;
            }
            if (v96)
            {
              unint64_t v96 = (unint64_t)sub_25B3FBC64(v96);
              long long v92 = *(char **)(a1 + 184);
              int v81 = *(char **)(a1 + 192);
            }
            else
            {
              uint64_t v97 = 0;
            }
            id v98 = (_DWORD *)(v96 + 4 * v93);
            *id v98 = v90;
            long long v91 = v98 + 1;
            while (v81 != v92)
            {
              int v99 = *((_DWORD *)v81 - 1);
              v81 -= 4;
              *--id v98 = v99;
            }
            *(void *)(a1 + 184) = v98;
            *(void *)(a1 + 192) = v91;
            *(void *)(a1 + 200) = v96 + 4 * v97;
            if (v92) {
              operator delete(v92);
            }
          }
          else
          {
            *(_DWORD *)int v81 = DWORD1(v12);
            long long v91 = v81 + 4;
          }
          *(void *)(a1 + 192) = v91;
          unint64_t v100 = ++v62;
          if (v62 < v63)
          {
            do
            {
              float32x2_t v101 = vsub_f32((float32x2_t)v232[0], (float32x2_t)v30[v100]);
              if (sqrtf(vaddv_f32(vmul_f32(v101, v101))) < v6) {
                v230[v100] = v61;
              }
              ++v100;
            }
            while (v63 != v100);
          }
          unint64_t v65 = v31 - v30;
        }
      }
      while (v62 < v65);
      uint64_t v102 = v30;
    }
    char v5 = v228;
  }
  int v103 = *(void **)(a1 + 144);
  std::string::size_type v231 = v64;
  if (v103 != *(void **)(a1 + 136))
  {
    unint64_t v104 = 0;
    uint64_t v105 = v64 + 1;
    do
    {
      long long __p = 0;
      unint64_t v235 = 0;
      std::string::size_type v236 = 0;
      uint64_t v106 = *(v105 - 1);
      uint64_t v107 = operator new(8uLL);
      void *v107 = v106 - 1;
      long long __p = v107;
      std::string::size_type v236 = v107 + 1;
      uint64_t v108 = *v105;
      uint64_t v109 = sub_25B3FCAD4(2uLL);
      v109[1] = v108 - 1;
      *uint64_t v109 = *v107;
      long long __p = v109;
      std::string::size_type v236 = &v109[v110];
      operator delete(v107);
      unint64_t v235 = v109 + 2;
      unint64_t v111 = *(void *)(a1 + 216);
      if (v111 >= *(void *)(a1 + 224))
      {
        uint64_t v112 = sub_25B530A0C(v5, (uint64_t)&__p);
      }
      else
      {
        sub_25B594A18((uint64_t)v5, (uint64_t)&__p);
        uint64_t v112 = v111 + 24;
      }
      *(void *)(a1 + 216) = v112;
      operator delete(v109);
      ++v104;
      int v103 = *(void **)(a1 + 136);
      v105 += 2;
    }
    while (v104 < (uint64_t)(*(void *)(a1 + 144) - (void)v103) >> 4);
  }
  long long v233 = v102;
  *(void *)(a1 + 144) = v103;
  unint64_t v113 = *(uint64_t ***)(a1 + 208);
  for (unint64_t i = *(uint64_t ***)(a1 + 216); v113 != i; v113 += 3)
  {
    uint64_t v116 = **v113;
    uint64_t v115 = (*v113)[1];
    unint64_t v117 = *(void *)(a1 + 152);
    uint64_t v118 = *(void *)(a1 + 160);
    if ((unint64_t)v103 >= v117)
    {
      uint64_t v119 = *(void *)(a1 + 136);
      uint64_t v120 = ((uint64_t)v103 - v119) >> 4;
      if ((unint64_t)(v120 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      uint64_t v121 = v117 - v119;
      uint64_t v122 = v121 >> 3;
      if (v121 >> 3 <= (unint64_t)(v120 + 1)) {
        uint64_t v122 = v120 + 1;
      }
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v123 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v123 = v122;
      }
      if (v123) {
        unint64_t v123 = (unint64_t)sub_25B3FFAEC(v123);
      }
      else {
        uint64_t v124 = 0;
      }
      long long v125 = (void *)(v123 + 16 * v120);
      *long long v125 = *(void *)(v118 + 8 * v116);
      v125[1] = *(void *)(v118 + 8 * v115);
      long long v127 = *(char **)(a1 + 136);
      long long v126 = *(char **)(a1 + 144);
      long long v128 = v125;
      if (v126 != v127)
      {
        do
        {
          *((_OWORD *)v128 - 1) = *((_OWORD *)v126 - 1);
          v128 -= 2;
          v126 -= 16;
        }
        while (v126 != v127);
        long long v126 = *(char **)(a1 + 136);
      }
      int v103 = v125 + 2;
      *(void *)(a1 + 136) = v128;
      *(void *)(a1 + 144) = v125 + 2;
      *(void *)(a1 + 152) = v123 + 16 * v124;
      if (v126) {
        operator delete(v126);
      }
    }
    else
    {
      *int v103 = *(void *)(v118 + 8 * v116);
      v103[1] = *(void *)(v118 + 8 * v115);
      v103 += 2;
    }
    *(void *)(a1 + 144) = v103;
  }
  if (*(void *)(a1 + 168) != *(void *)(a1 + 160))
  {
    unint64_t v129 = 0;
    do
    {
      long long __p = 0;
      unint64_t v235 = 0;
      std::string::size_type v236 = 0;
      uint64_t v131 = *(void *)(a1 + 208);
      uint64_t v130 = *(void *)(a1 + 216);
      if (v130 != v131)
      {
        long long v132 = 0;
        unint64_t v133 = 0;
        long long v134 = 0;
        unint64_t v135 = 0;
        uint64_t v136 = v235;
        do
        {
          int v137 = *(void **)(v131 + 24 * v135);
          if (v129 == *v137 || v129 == v137[1])
          {
            if ((unint64_t)v134 >= v133)
            {
              uint64_t v138 = v134 - v132;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61)
              {
                unint64_t v235 = v136;
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v133 - (void)v132) >> 2 > v139) {
                unint64_t v139 = (uint64_t)(v133 - (void)v132) >> 2;
              }
              if (v133 - (unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v139;
              }
              if (v140) {
                unint64_t v140 = (unint64_t)sub_25B3FCAD4(v140);
              }
              else {
                uint64_t v141 = 0;
              }
              uint64_t v142 = (unint64_t *)(v140 + 8 * v138);
              *uint64_t v142 = v135;
              uint64_t v136 = v142 + 1;
              while (v134 != v132)
              {
                unint64_t v143 = *--v134;
                *--uint64_t v142 = v143;
              }
              unint64_t v133 = v140 + 8 * v141;
              long long __p = v142;
              std::string::size_type v236 = (void *)v133;
              if (v132) {
                operator delete(v132);
              }
              long long v132 = v142;
            }
            else
            {
              unint64_t *v134 = v135;
              uint64_t v136 = v134 + 1;
            }
            uint64_t v131 = *(void *)(a1 + 208);
            uint64_t v130 = *(void *)(a1 + 216);
            long long v134 = v136;
          }
          ++v135;
        }
        while (v135 < 0xAAAAAAAAAAAAAAABLL * ((v130 - v131) >> 3));
        unint64_t v235 = v136;
      }
      unint64_t v144 = *(void *)(a1 + 240);
      if (v144 >= *(void *)(a1 + 248))
      {
        uint64_t v145 = sub_25B530A0C(v229, (uint64_t)&__p);
      }
      else
      {
        sub_25B594A18((uint64_t)v229, (uint64_t)&__p);
        uint64_t v145 = v144 + 24;
      }
      *(void *)(a1 + 240) = v145;
      if (__p) {
        operator delete(__p);
      }
      ++v129;
    }
    while (v129 < (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
  }
  uint64_t v146 = *(void *)(a1 + 232);
  for (uint64_t j = *(void *)(a1 + 240); v146 != j; v146 += 24)
  {
    long long __p = 0;
    unint64_t v235 = 0;
    std::string::size_type v236 = 0;
    sub_25B46BD74(&__p, *(const void **)v146, *(void *)(v146 + 8), (uint64_t)(*(void *)(v146 + 8) - *(void *)v146) >> 3);
    int v148 = __p;
    if ((char *)v235 - (unsigned char *)__p == 16)
    {
      float v149 = sub_25B3FCCE0((float32x2_t *)(*(void *)(a1 + 136) + 16 * *(void *)__p), (float32x2_t *)(*(void *)(a1 + 136) + 16 * *((void *)__p + 1)), 0);
      if ((float)(180.0 - v149) >= v149) {
        float v150 = v149;
      }
      else {
        float v150 = 180.0 - v149;
      }
      long long v152 = *(float **)(a1 + 264);
      unint64_t v151 = *(void *)(a1 + 272);
      if ((unint64_t)v152 >= v151)
      {
        long long v163 = *(float **)(a1 + 256);
        uint64_t v164 = v152 - v163;
        unint64_t v165 = v164 + 1;
        if ((unint64_t)(v164 + 1) >> 62) {
          goto LABEL_354;
        }
        uint64_t v166 = v151 - (void)v163;
        if (v166 >> 1 > v165) {
          unint64_t v165 = v166 >> 1;
        }
        if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v167 = v165;
        }
        if (v167)
        {
          unint64_t v167 = (unint64_t)sub_25B3FBC64(v167);
          long long v163 = *(float **)(a1 + 256);
          long long v152 = *(float **)(a1 + 264);
        }
        else
        {
          uint64_t v168 = 0;
        }
        long long v183 = (float *)(v167 + 4 * v164);
        float *v183 = v150;
        __n128 v153 = v183 + 1;
        while (v152 != v163)
        {
          int v184 = *((_DWORD *)v152-- - 1);
          *((_DWORD *)v183-- - 1) = v184;
        }
        *(void *)(a1 + 256) = v183;
        *(void *)(a1 + 264) = v153;
        *(void *)(a1 + 272) = v167 + 4 * v168;
        if (v163) {
          operator delete(v163);
        }
      }
      else
      {
        *long long v152 = v150;
        __n128 v153 = v152 + 1;
      }
      *(void *)(a1 + 264) = v153;
      std::string::size_type v186 = *(float **)(a1 + 288);
      unint64_t v185 = *(void *)(a1 + 296);
      if ((unint64_t)v186 >= v185)
      {
        int v174 = *(float **)(a1 + 280);
        uint64_t v187 = v186 - v174;
        unint64_t v188 = v187 + 1;
        if ((unint64_t)(v187 + 1) >> 62) {
LABEL_354:
        }
          sub_25B3FBC4C();
        uint64_t v189 = v185 - (void)v174;
        if (v189 >> 1 > v188) {
          unint64_t v188 = v189 >> 1;
        }
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v188;
        }
        if (v178)
        {
          unint64_t v178 = (unint64_t)sub_25B3FBC64(v178);
          int v174 = *(float **)(a1 + 280);
          std::string::size_type v186 = *(float **)(a1 + 288);
        }
        else
        {
          uint64_t v179 = 0;
        }
        float v180 = (float *)(v178 + 4 * v187);
        *float v180 = v149;
        std::string::size_type v181 = v180 + 1;
        while (v186 != v174)
        {
          int v190 = *((_DWORD *)v186-- - 1);
          *((_DWORD *)v180-- - 1) = v190;
        }
        goto LABEL_282;
      }
      float *v186 = v149;
      uint64_t v173 = v186 + 1;
    }
    else
    {
      uint64_t v155 = *(char **)(a1 + 264);
      unint64_t v154 = *(void *)(a1 + 272);
      if ((unint64_t)v155 >= v154)
      {
        long long v157 = *(char **)(a1 + 256);
        uint64_t v158 = (v155 - v157) >> 2;
        unint64_t v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 62) {
          goto LABEL_355;
        }
        uint64_t v160 = v154 - (void)v157;
        if (v160 >> 1 > v159) {
          unint64_t v159 = v160 >> 1;
        }
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v159;
        }
        if (v161)
        {
          unint64_t v161 = (unint64_t)sub_25B3FBC64(v161);
          long long v157 = *(char **)(a1 + 256);
          uint64_t v155 = *(char **)(a1 + 264);
        }
        else
        {
          uint64_t v162 = 0;
        }
        long long v169 = (_DWORD *)(v161 + 4 * v158);
        *long long v169 = v7;
        uint64_t v156 = v169 + 1;
        while (v155 != v157)
        {
          int v170 = *((_DWORD *)v155 - 1);
          v155 -= 4;
          *--long long v169 = v170;
        }
        *(void *)(a1 + 256) = v169;
        *(void *)(a1 + 264) = v156;
        *(void *)(a1 + 272) = v161 + 4 * v162;
        if (v157) {
          operator delete(v157);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v155 = v7;
        uint64_t v156 = v155 + 4;
      }
      *(void *)(a1 + 264) = v156;
      long long v172 = *(char **)(a1 + 288);
      unint64_t v171 = *(void *)(a1 + 296);
      if ((unint64_t)v172 >= v171)
      {
        int v174 = *(float **)(a1 + 280);
        uint64_t v175 = (v172 - (char *)v174) >> 2;
        unint64_t v176 = v175 + 1;
        if ((unint64_t)(v175 + 1) >> 62) {
LABEL_355:
        }
          sub_25B3FBC4C();
        uint64_t v177 = v171 - (void)v174;
        if (v177 >> 1 > v176) {
          unint64_t v176 = v177 >> 1;
        }
        if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v178 = v176;
        }
        if (v178)
        {
          unint64_t v178 = (unint64_t)sub_25B3FBC64(v178);
          int v174 = *(float **)(a1 + 280);
          long long v172 = *(char **)(a1 + 288);
        }
        else
        {
          uint64_t v179 = 0;
        }
        float v180 = (float *)(v178 + 4 * v175);
        *(_DWORD *)float v180 = v7;
        std::string::size_type v181 = v180 + 1;
        while (v172 != (char *)v174)
        {
          int v182 = *((_DWORD *)v172 - 1);
          v172 -= 4;
          *((_DWORD *)v180-- - 1) = v182;
        }
LABEL_282:
        *(void *)(a1 + 280) = v180;
        *(void *)(a1 + 288) = v181;
        *(void *)(a1 + 296) = v178 + 4 * v179;
        if (v174) {
          operator delete(v174);
        }
        goto LABEL_284;
      }
      *(_DWORD *)long long v172 = v7;
      uint64_t v173 = (float *)(v172 + 4);
    }
    std::string::size_type v181 = v173;
LABEL_284:
    *(void *)(a1 + 288) = v181;
    if (v148) {
      operator delete(v148);
    }
  }
  uint64_t v192 = *(void *)(a1 + 136);
  uint64_t v191 = *(void *)(a1 + 144);
  if (v191 != v192)
  {
    unint64_t v193 = 0;
    do
    {
      float32x2_t v194 = vsub_f32(*(float32x2_t *)(v192 + 16 * v193), *(float32x2_t *)(v192 + 16 * v193 + 8));
      if (sqrtf(vaddv_f32(vmul_f32(v194, v194))) <= v8)
      {
        uint64_t v196 = *(unint64_t **)(a1 + 336);
        unint64_t v195 = *(void *)(a1 + 344);
        if ((unint64_t)v196 >= v195)
        {
          int v198 = *(unint64_t **)(a1 + 328);
          uint64_t v199 = v196 - v198;
          unint64_t v200 = v199 + 1;
          if ((unint64_t)(v199 + 1) >> 61) {
            goto LABEL_349;
          }
          uint64_t v201 = v195 - (void)v198;
          if (v201 >> 2 > v200) {
            unint64_t v200 = v201 >> 2;
          }
          if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v202 = v200;
          }
          if (v202)
          {
            unint64_t v202 = (unint64_t)sub_25B3FCAD4(v202);
            int v198 = *(unint64_t **)(a1 + 328);
            uint64_t v196 = *(unint64_t **)(a1 + 336);
          }
          else
          {
            uint64_t v203 = 0;
          }
          long long v204 = (unint64_t *)(v202 + 8 * v199);
          unint64_t *v204 = v193;
          long long v197 = v204 + 1;
          while (v196 != v198)
          {
            unint64_t v205 = *--v196;
            *--long long v204 = v205;
          }
          *(void *)(a1 + 328) = v204;
          *(void *)(a1 + 336) = v197;
          *(void *)(a1 + 344) = v202 + 8 * v203;
          if (v198) {
            operator delete(v198);
          }
        }
        else
        {
          *uint64_t v196 = v193;
          long long v197 = v196 + 1;
        }
        *(void *)(a1 + 336) = v197;
        std::string::size_type v206 = *(void **)(*(void *)(a1 + 208) + 24 * v193);
        long long v208 = *(char **)(a1 + 312);
        unint64_t v207 = *(void *)(a1 + 320);
        if ((unint64_t)v208 >= v207)
        {
          float32x2_t v210 = *(unsigned char **)(a1 + 304);
          uint64_t v211 = (v208 - v210) >> 3;
          unint64_t v212 = v211 + 1;
          if ((unint64_t)(v211 + 1) >> 61) {
            goto LABEL_349;
          }
          uint64_t v213 = v207 - (void)v210;
          if (v213 >> 2 > v212) {
            unint64_t v212 = v213 >> 2;
          }
          if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v214 = v212;
          }
          if (v214)
          {
            unint64_t v214 = (unint64_t)sub_25B3FCAD4(v214);
            float32x2_t v210 = *(unsigned char **)(a1 + 304);
            long long v208 = *(char **)(a1 + 312);
          }
          else
          {
            uint64_t v215 = 0;
          }
          int v216 = (void *)(v214 + 8 * v211);
          *int v216 = *v206;
          int v209 = (char *)(v216 + 1);
          while (v208 != v210)
          {
            uint64_t v217 = *((void *)v208 - 1);
            v208 -= 8;
            *--int v216 = v217;
          }
          unint64_t v207 = v214 + 8 * v215;
          *(void *)(a1 + 304) = v216;
          *(void *)(a1 + 312) = v209;
          *(void *)(a1 + 320) = v207;
          if (v210)
          {
            operator delete(v210);
            unint64_t v207 = *(void *)(a1 + 320);
          }
        }
        else
        {
          *(void *)long long v208 = *v206;
          int v209 = v208 + 8;
        }
        *(void *)(a1 + 312) = v209;
        uint64_t v218 = *(void *)(*(void *)(a1 + 208) + 24 * v193);
        if ((unint64_t)v209 >= v207)
        {
          long long v220 = *(char **)(a1 + 304);
          uint64_t v221 = (v209 - v220) >> 3;
          unint64_t v222 = v221 + 1;
          if ((unint64_t)(v221 + 1) >> 61) {
LABEL_349:
          }
            sub_25B3FBC4C();
          uint64_t v223 = v207 - (void)v220;
          if (v223 >> 2 > v222) {
            unint64_t v222 = v223 >> 2;
          }
          if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v224 = v222;
          }
          if (v224)
          {
            unint64_t v224 = (unint64_t)sub_25B3FCAD4(v224);
            long long v220 = *(char **)(a1 + 304);
            int v209 = *(char **)(a1 + 312);
          }
          else
          {
            uint64_t v225 = 0;
          }
          long long v226 = (void *)(v224 + 8 * v221);
          void *v226 = *(void *)(v218 + 8);
          float32x2_t v219 = v226 + 1;
          while (v209 != v220)
          {
            uint64_t v227 = *((void *)v209 - 1);
            v209 -= 8;
            *--long long v226 = v227;
          }
          *(void *)(a1 + 304) = v226;
          *(void *)(a1 + 312) = v219;
          *(void *)(a1 + 320) = v224 + 8 * v225;
          if (v220) {
            operator delete(v220);
          }
        }
        else
        {
          *(void *)int v209 = *(void *)(v218 + 8);
          float32x2_t v219 = v209 + 8;
        }
        *(void *)(a1 + 312) = v219;
        uint64_t v192 = *(void *)(a1 + 136);
        uint64_t v191 = *(void *)(a1 + 144);
      }
      ++v193;
    }
    while (v193 < (v191 - v192) >> 4);
  }
  if (v233) {
    operator delete(v233);
  }
  if (v231)
  {
    operator delete(v231);
  }
}

void sub_25B59490C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v18)
  {
    operator delete(v18);
    if (!v17) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v17)
  {
    goto LABEL_4;
  }
  operator delete(v17);
  goto LABEL_4;
}

void *sub_25B594A18(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_25B46BD74(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_25B594A64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_25B594A6C(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x2_t a4)
{
  if (a2 == a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  if ((unint64_t)(((char *)a2 - (char *)a1) >> 4) <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = ((char *)a2 - (char *)a1) >> 4;
  }
  float v8 = a1 + 1;
  uint64_t v9 = 0xFFFFFFFFLL;
  float v10 = 3.4028e38;
  do
  {
    if (a3 != v6)
    {
      float v11 = sub_25B40DB9C(a4, v8[-1], *v8, 0.00001);
      if (v11 >= v10)
      {
        uint64_t v9 = v9;
      }
      else
      {
        float v10 = v11;
        uint64_t v9 = v6;
      }
    }
    ++v6;
    v8 += 2;
  }
  while (v7 != v6);
  return v9;
}

void *sub_25B594B20(void *result, float32x2_t *a2, uint64_t a3, uint64_t a4, float a5)
{
  char v5 = (float32x2_t *)(result[17] + 16 * a3);
  float32x2_t v6 = vsub_f32(*a2, *v5);
  int32x2_t v7 = (int32x2_t)vmul_f32(v6, v6);
  float32x2_t v8 = vsub_f32(*a2, v5[1]);
  int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
  float32x2_t v10 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v9, v7), (float32x2_t)vzip2_s32(v9, v7)));
  *(_DWORD *)(a4 + 8) = v10.f32[1] >= v10.f32[0];
  float v11 = *(void **)(result[26] + 24 * a3);
  uint64_t v12 = result[29];
  *(unsigned char *)(a4 + 4) = *(void *)(v12 + 24 * v11[v10.f32[1] >= v10.f32[0]] + 8)
                     - *(void *)(v12 + 24 * v11[v10.f32[1] >= v10.f32[0]]) == 8;
  float v13 = vaddv_f32(vmul_f32(vsub_f32(*a2, *v5), vsub_f32(*a2, v5[1])));
  *(unsigned char *)(a4 + 5) = v13 > 0.00001;
  if (v10.f32[0] >= v10.f32[1]) {
    v10.f32[0] = v10.f32[1];
  }
  *(_DWORD *)a4 = v10.i32[0];
  uint64_t v14 = v11[1];
  uint64_t v15 = *(void *)(v12 + 24 * *v11 + 8) - *(void *)(v12 + 24 * *v11);
  uint64_t v16 = *(void *)(v12 + 24 * v14 + 8) - *(void *)(v12 + 24 * v14);
  float32x2_t v17 = *a2;
  if (v13 <= 0.00001 && v16 != 8 && v15 == 8)
  {
    float32x2_t v20 = vsub_f32(v17, *v5);
    float v21 = sqrtf(vaddv_f32(vmul_f32(v20, v20)));
    if (v21 < a5)
    {
      int v22 = 0;
      BOOL v23 = 1;
LABEL_23:
      *(unsigned char *)(a4 + 4) = v23;
      *(float *)a4 = v21;
      *(_DWORD *)(a4 + 8) = v22;
      return result;
    }
  }
  BOOL v23 = v16 == 8;
  if (v13 <= 0.00001 && v15 != 8 && v16 == 8)
  {
    float32x2_t v26 = vsub_f32(v17, v5[1]);
    float v21 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
    if (v21 < a5)
    {
      int v22 = 1;
      goto LABEL_23;
    }
  }
  return result;
}

BOOL sub_25B594C68(uint64_t a1)
{
  float v2 = *(float *)(a1 + 56);
  float v3 = *(float *)(a1 + 60);
  unint64_t v4 = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4;
  if (*(void *)(a1 + 144) == *(void *)(a1 + 136))
  {
    float32x2_t v6 = 0;
    char v5 = 0;
    double v31 = 0.0;
    float v11 = 10000.0;
  }
  else
  {
    char v5 = 0;
    float32x2_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v52 = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4;
    if (v4 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4;
    }
    float v10 = 0.0;
    float v11 = 10000.0;
    do
    {
      uint64_t v12 = *(void *)(a1 + 208) + 24 * v8;
      memset(__p, 0, sizeof(__p));
      sub_25B46BD74(__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
      float v13 = __p[0];
      uint64_t v14 = *(void *)(a1 + 256);
      float v15 = *(float *)(v14 + 4 * *(void *)__p[0]);
      float v16 = *(float *)(v14 + 4 * *((void *)__p[0] + 1));
      float32x2_t v17 = (float32x2_t *)(*(void *)(a1 + 136) + 16 * v8);
      float32x2_t v18 = *v17;
      float32x2_t v19 = v17[1];
      float v20 = vabds_f32(90.0, v15);
      float v21 = vabds_f32(90.0, v16);
      if (v20 > v3) {
        float v20 = v3;
      }
      if (v21 > v3) {
        float v21 = v3;
      }
      float v22 = v20 + v21;
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v23 = v6 - v5;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v7 - (void)v5) >> 1 > v24) {
          unint64_t v24 = (uint64_t)(v7 - (void)v5) >> 1;
        }
        if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)sub_25B3FBC64(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        float v27 = (float *)(v25 + 4 * v23);
        float *v27 = v22;
        float32x4_t v28 = v27 + 1;
        while (v6 != v5)
        {
          int v29 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v27-- - 1) = v29;
        }
        unint64_t v7 = v25 + 4 * v26;
        if (v5) {
          operator delete(v5);
        }
        char v5 = v27;
        float32x2_t v6 = v28;
      }
      else
      {
        *v6++ = v22;
      }
      float32x2_t v30 = vsub_f32(v18, v19);
      float v10 = v10 + sqrtf(vaddv_f32(vmul_f32(v30, v30)));
      if (v22 < v11) {
        float v11 = v22;
      }
      operator delete(v13);
      ++v8;
    }
    while (v8 != v9);
    double v31 = v10;
    unint64_t v4 = v52;
  }
  float v32 = v3 + v3;
  if (v11 < v32)
  {
    float v33 = v31 / ((double)v4 + 0.000001);
    if (v2 <= v33) {
      float v33 = v2;
    }
    float v34 = v11 + 4.0;
    if (v32 < (float)(v11 + 4.0)) {
      float v34 = v32;
    }
    unint64_t v35 = *(float32x2_t **)(a1 + 136);
    if (v6 == v5)
    {
      int v40 = -1;
    }
    else
    {
      uint64_t v36 = 0;
      if ((unint64_t)(v6 - v5) <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = v6 - v5;
      }
      uint64_t v38 = v35 + 1;
      float v39 = -1.0;
      int v40 = -1;
      do
      {
        if (v5[v36] < v34)
        {
          float32x2_t v41 = vsub_f32(v38[-1], *v38);
          float v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
          if (v42 > v39)
          {
            float v39 = v42;
            int v40 = v36;
          }
        }
        ++v36;
        v38 += 2;
      }
      while (v37 != v36);
    }
    float32x2_t v43 = vsub_f32(v35[2 * v40], v35[2 * v40 + 1]);
    if (sqrtf(vaddv_f32(vmul_f32(v43, v43))) <= v33)
    {
      float v44 = v11 + 10.0;
      if (v32 < (float)(v11 + 10.0)) {
        float v44 = v32;
      }
      if (v6 == v5)
      {
        int v40 = -1;
      }
      else
      {
        uint64_t v45 = 0;
        if ((unint64_t)(v6 - v5) <= 1) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = v6 - v5;
        }
        long long v47 = v35 + 1;
        float v48 = -1.0;
        int v40 = -1;
        do
        {
          if (v5[v45] < v44)
          {
            float32x2_t v49 = vsub_f32(v47[-1], *v47);
            float v50 = sqrtf(vaddv_f32(vmul_f32(v49, v49)));
            if (v50 > v48)
            {
              float v48 = v50;
              int v40 = v45;
            }
          }
          ++v45;
          v47 += 2;
        }
        while (v46 != v45);
      }
    }
    *(_OWORD *)(a1 + 376) = *(_OWORD *)v35[2 * v40].f32;
  }
  if (v5) {
    operator delete(v5);
  }
  return v11 < v32;
}

void sub_25B594FC4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_25B594FF0(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 84) + *(float *)(a1 + 76);
  float v3 = *(uint64_t **)(*(void *)(a1 + 208) + 24 * a2);
  uint64_t v4 = *(void *)(a1 + 280);
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  if (*(float *)(v4 + 4 * v5) < v2 || *(float *)(v4 + 4 * v6) < v2) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 232);
  uint64_t v11 = v9 + 24 * v5;
  float v10 = *(void **)v11;
  if (*(void *)(v11 + 8) - *(void *)v11 != 16) {
    return 0;
  }
  uint64_t v13 = v9 + 24 * v6;
  uint64_t v12 = *(void **)v13;
  if (*(void *)(v13 + 8) - *(void *)v13 != 16) {
    return 0;
  }
  float v14 = *(float *)(a1 + 28);
  float v15 = sub_25B3FCCE0((float32x2_t *)(*(void *)(a1 + 136) + 16 * v10[*v10 == a2]), (float32x2_t *)(*(void *)(a1 + 136) + 16 * v12[*v12 == a2]), 0);
  if ((float)(180.0 - v15) < v15) {
    float v15 = 180.0 - v15;
  }
  return v15 < v14;
}

uint64_t *sub_25B5950DC(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t i = v9;
  while (1)
  {
    unint64_t v9 = i;
    uint64_t v11 = a2 - i;
    unint64_t v12 = (uint64_t)(a2 - i) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v50 = *(_DWORD *)(a2 - 8);
          int v51 = *(_DWORD *)(i + 8);
          if (v50 < v51) {
            return result;
          }
          if (v50 <= v51)
          {
            float v53 = *(float *)(a2 - 4);
            float v52 = *(float *)(i + 12);
            if (v53 <= v52) {
              return result;
            }
          }
          else
          {
            float v52 = *(float *)(i + 12);
            float v53 = *(float *)(a2 - 4);
          }
          uint64_t v127 = *(void *)i;
          *(void *)unint64_t i = *(void *)(a2 - 16);
          *(void *)(a2 - 16) = v127;
          *(_DWORD *)(i + 8) = v50;
          *(_DWORD *)(a2 - 8) = v51;
          *(float *)(i + 12) = v53;
          *(float *)(a2 - 4) = v52;
          break;
        case 3uLL:
          return sub_25B595B8C((uint64_t *)i, (uint64_t *)(i + 16), (uint64_t *)(a2 - 16));
        case 4uLL:
          return sub_25B595D00(i, i + 16, i + 32, a2 - 16);
        case 5uLL:
          return sub_25B595E28(i, i + 16, i + 32, i + 48, a2 - 16);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (i == a2) {
        return result;
      }
      int64_t v75 = (v12 - 2) >> 1;
      int64_t v76 = v75;
      while (2)
      {
        int64_t v77 = v76;
        if (v75 >= v76)
        {
          uint64_t v78 = (2 * v76) | 1;
          unint64_t v79 = i + 16 * v78;
          if (2 * v77 + 2 < (uint64_t)v12)
          {
            int v80 = *(_DWORD *)(v79 + 8);
            int v81 = *(_DWORD *)(v79 + 24);
            if (v80 >= v81 && (v80 > v81 || *(float *)(v79 + 12) > *(float *)(v79 + 28)))
            {
              v79 += 16;
              uint64_t v78 = 2 * v77 + 2;
            }
          }
          unint64_t v82 = i + 16 * v77;
          int v83 = *(_DWORD *)(v79 + 8);
          int v84 = *(_DWORD *)(v82 + 8);
          if (v83 < v84)
          {
            float v85 = *(float *)(v82 + 12);
            float v86 = *(float *)(v79 + 12);
            goto LABEL_150;
          }
          if (v83 <= v84)
          {
            float v86 = *(float *)(v79 + 12);
            float v85 = *(float *)(v82 + 12);
            if (v86 <= v85)
            {
LABEL_150:
              uint64_t v87 = *(void *)v82;
              uint64_t result = *(uint64_t **)v79;
              *(void *)unint64_t v82 = *(void *)v79;
              *(_DWORD *)(v82 + 8) = v83;
              *(float *)(v82 + 12) = v86;
              if (v75 >= v78)
              {
                while (1)
                {
                  uint64_t v89 = 2 * v78;
                  uint64_t v78 = (2 * v78) | 1;
                  unint64_t v88 = i + 16 * v78;
                  uint64_t v90 = v89 + 2;
                  if (v90 < (uint64_t)v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v88 + 8);
                    int v91 = *(_DWORD *)(v88 + 24);
                    if ((int)result >= v91 && ((int)result > v91 || *(float *)(v88 + 12) > *(float *)(v88 + 28)))
                    {
                      v88 += 16;
                      uint64_t v78 = v90;
                    }
                  }
                  int v92 = *(_DWORD *)(v88 + 8);
                  if (v92 >= v84)
                  {
                    if (v92 > v84) {
                      break;
                    }
                    float v93 = *(float *)(v88 + 12);
                    if (v93 > v85) {
                      break;
                    }
                  }
                  else
                  {
                    float v93 = *(float *)(v88 + 12);
                  }
                  uint64_t result = *(uint64_t **)v88;
                  *(void *)unint64_t v79 = *(void *)v88;
                  *(_DWORD *)(v79 + 8) = v92;
                  *(float *)(v79 + 12) = v93;
                  unint64_t v79 = v88;
                  if (v75 < v78) {
                    goto LABEL_162;
                  }
                }
              }
              unint64_t v88 = v79;
LABEL_162:
              *(void *)unint64_t v88 = v87;
              *(_DWORD *)(v88 + 8) = v84;
              *(float *)(v88 + 12) = v85;
            }
          }
        }
        int64_t v76 = v77 - 1;
        if (v77) {
          continue;
        }
        break;
      }
      uint64_t v94 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v95 = 0;
        uint64_t v96 = *(void *)i;
        int v97 = *(_DWORD *)(i + 8);
        float v98 = *(float *)(i + 12);
        unint64_t v99 = i;
        do
        {
          unint64_t v100 = v99;
          v99 += 16 * v95 + 16;
          uint64_t v101 = 2 * v95;
          uint64_t v95 = (2 * v95) | 1;
          uint64_t v102 = v101 + 2;
          if (v102 < v94)
          {
            int v103 = *(_DWORD *)(v99 + 8);
            int v104 = *(_DWORD *)(v99 + 24);
            if (v103 >= v104 && (v103 > v104 || *(float *)(v99 + 12) > *(float *)(v99 + 28)))
            {
              v99 += 16;
              uint64_t v95 = v102;
            }
          }
          *(void *)unint64_t v100 = *(void *)v99;
          *(_DWORD *)(v100 + 8) = *(_DWORD *)(v99 + 8);
          *(_DWORD *)(v100 + 12) = *(_DWORD *)(v99 + 12);
        }
        while (v95 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
        if (v99 != a2 - 16)
        {
          *(void *)unint64_t v99 = *(void *)(a2 - 16);
          *(_DWORD *)(v99 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(v99 + 12) = *(_DWORD *)(a2 - 4);
          *(void *)(a2 - 16) = v96;
          *(_DWORD *)(a2 - 8) = v97;
          *(float *)(a2 - 4) = v98;
          uint64_t v105 = v99 - i + 16;
          if (v105 >= 17)
          {
            unint64_t v106 = ((unint64_t)v105 >> 4) - 2;
            unint64_t v107 = v106 >> 1;
            unint64_t v108 = i + 16 * (v106 >> 1);
            int v109 = *(_DWORD *)(v108 + 8);
            int v110 = *(_DWORD *)(v99 + 8);
            if (v109 >= v110)
            {
              if (v109 > v110)
              {
                float v98 = *(float *)(v99 + 12);
                float v111 = *(float *)(v108 + 12);
                goto LABEL_181;
              }
              float v111 = *(float *)(v108 + 12);
              float v98 = *(float *)(v99 + 12);
              if (v111 > v98)
              {
LABEL_181:
                uint64_t v112 = *(void *)v99;
                *(void *)unint64_t v99 = *(void *)v108;
                *(_DWORD *)(v99 + 8) = v109;
                *(float *)(v99 + 12) = v111;
                if (v106 >= 2)
                {
                  while (1)
                  {
                    unint64_t v113 = v107 - 1;
                    unint64_t v107 = (v107 - 1) >> 1;
                    unint64_t v99 = i + 16 * v107;
                    int v114 = *(_DWORD *)(v99 + 8);
                    if (v114 < v110) {
                      break;
                    }
                    float v115 = *(float *)(v99 + 12);
                    if (v114 <= v110 && v115 <= v98) {
                      break;
                    }
                    *(void *)unint64_t v108 = *(void *)v99;
                    *(_DWORD *)(v108 + 8) = v114;
                    *(float *)(v108 + 12) = v115;
                    unint64_t v108 = i + 16 * v107;
                    if (v113 <= 1) {
                      goto LABEL_183;
                    }
                  }
                }
                unint64_t v99 = v108;
LABEL_183:
                *(void *)unint64_t v99 = v112;
                *(_DWORD *)(v99 + 8) = v110;
LABEL_184:
                *(float *)(v99 + 12) = v98;
              }
            }
          }
          a2 -= 16;
          BOOL v64 = v94-- <= 2;
          if (v64) {
            return result;
          }
          continue;
        }
        break;
      }
      *(void *)unint64_t v99 = v96;
      *(_DWORD *)(v99 + 8) = v97;
      goto LABEL_184;
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = i + 16 * (v12 >> 1);
    if ((unint64_t)v11 >= 0x801)
    {
      sub_25B595B8C((uint64_t *)v9, (uint64_t *)(v9 + 16 * (v12 >> 1)), (uint64_t *)(a2 - 16));
      sub_25B595B8C((uint64_t *)(v9 + 16), (uint64_t *)(v14 - 16), (uint64_t *)(a2 - 32));
      sub_25B595B8C((uint64_t *)(v9 + 32), (uint64_t *)(v9 + 16 + 16 * v13), (uint64_t *)(a2 - 48));
      uint64_t result = sub_25B595B8C((uint64_t *)(v14 - 16), (uint64_t *)v14, (uint64_t *)(v9 + 16 + 16 * v13));
      uint64_t v15 = *(void *)v9;
      *(void *)unint64_t v9 = *(void *)v14;
      *(void *)unint64_t v14 = v15;
      LODWORD(v15) = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      int v16 = *(_DWORD *)(v9 + 12);
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v14 + 12);
      *(_DWORD *)(v14 + 12) = v16;
    }
    else
    {
      uint64_t result = sub_25B595B8C((uint64_t *)(v9 + 16 * (v12 >> 1)), (uint64_t *)v9, (uint64_t *)(a2 - 16));
    }
    --a3;
    if (a4)
    {
      int v17 = *(_DWORD *)(v9 + 8);
      goto LABEL_15;
    }
    int v18 = *(_DWORD *)(v9 - 8);
    int v17 = *(_DWORD *)(v9 + 8);
    if (v18 < v17)
    {
      float v19 = *(float *)(v9 + 12);
      goto LABEL_58;
    }
    if (v18 <= v17 && (float v19 = *(float *)(v9 + 12), *(float *)(v9 - 4) <= v19))
    {
LABEL_58:
      int v37 = *(_DWORD *)(a2 - 8);
      if (v17 < v37 || v17 <= v37 && v19 <= *(float *)(a2 - 4))
      {
        for (unint64_t i = v9 + 16; i < a2; i += 16)
        {
          int v39 = *(_DWORD *)(i + 8);
          if (v17 >= v39 && (v17 > v39 || v19 > *(float *)(i + 12))) {
            break;
          }
        }
      }
      else
      {
        for (unint64_t i = v9 + 16; ; i += 16)
        {
          int v38 = *(_DWORD *)(i + 8);
          if (v17 >= v38 && (v17 > v38 || v19 > *(float *)(i + 12))) {
            break;
          }
        }
      }
      uint64_t v40 = *(void *)v9;
      if (i < a2) {
        unint64_t v41 = a2 - 16;
      }
      else {
        unint64_t v41 = a2;
      }
      if (i < a2 && v17 >= v37)
      {
        unint64_t v42 = a2 - 24;
        do
        {
          if (v17 <= v37 && v19 <= *(float *)(v42 + 20)) {
            break;
          }
          int v43 = *(_DWORD *)v42;
          v42 -= 16;
          int v37 = v43;
        }
        while (v17 >= v43);
        unint64_t v41 = v42 + 8;
      }
      while (i < v41)
      {
        uint64_t v44 = *(void *)i;
        *(void *)unint64_t i = *(void *)v41;
        *(void *)unint64_t v41 = v44;
        LODWORD(v44) = *(_DWORD *)(i + 8);
        *(_DWORD *)(i + 8) = *(_DWORD *)(v41 + 8);
        *(_DWORD *)(v41 + 8) = v44;
        int v45 = *(_DWORD *)(i + 12);
        *(_DWORD *)(i + 12) = *(_DWORD *)(v41 + 12);
        i += 16;
        *(_DWORD *)(v41 + 12) = v45;
        while (1)
        {
          int v46 = *(_DWORD *)(i + 8);
          if (v17 >= v46 && (v17 > v46 || v19 > *(float *)(i + 12))) {
            break;
          }
          i += 16;
        }
        int v47 = *(_DWORD *)(v41 - 8);
        if (v17 >= v47)
        {
          unint64_t v48 = v41 - 24;
          do
          {
            if (v17 <= v47 && v19 <= *(float *)(v48 + 20)) {
              break;
            }
            int v49 = *(_DWORD *)v48;
            v48 -= 16;
            int v47 = v49;
          }
          while (v17 >= v49);
          unint64_t v41 = v48 + 8;
        }
        else
        {
          v41 -= 16;
        }
      }
      BOOL v4 = i - 16 >= v9;
      BOOL v5 = i - 16 == v9;
      if (i - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(i - 16);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(i - 8);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(i - 4);
      }
      a4 = 0;
      *(void *)(i - 16) = v40;
      *(_DWORD *)(i - 8) = v17;
      *(float *)(i - 4) = v19;
    }
    else
    {
LABEL_15:
      float v20 = *(float *)(v9 + 12);
      int v21 = *(_DWORD *)(v9 + 24);
      if (v21 >= v17)
      {
        unint64_t v23 = v9;
        do
        {
          if (v21 <= v17 && *(float *)(v23 + 28) <= v20) {
            break;
          }
          int v21 = *(_DWORD *)(v23 + 40);
          v23 += 16;
        }
        while (v21 >= v17);
        unint64_t v22 = v23 + 16;
        unint64_t j = a2 - 16;
        if (v23 != v9)
        {
          while (1)
          {
            int v25 = *(_DWORD *)(j + 8);
            if (v25 >= v17 && (v25 > v17 || *(float *)(j + 12) > v20)) {
              break;
            }
            j -= 16;
          }
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v22 = v9 + 16;
      }
      if (v22 < a2)
      {
        for (unint64_t j = a2 - 16; ; j -= 16)
        {
          int v26 = *(_DWORD *)(j + 8);
          if (v26 >= v17)
          {
            if (v26 > v17) {
              goto LABEL_38;
            }
            if (*(float *)(j + 12) > v20 || v22 >= j) {
              goto LABEL_38;
            }
          }
          else if (v22 >= j)
          {
            goto LABEL_38;
          }
        }
      }
      unint64_t j = a2;
LABEL_38:
      uint64_t v28 = *(void *)v9;
      unint64_t i = v22;
      if (v22 < j)
      {
        unint64_t i = v22;
        unint64_t v29 = j;
        do
        {
          uint64_t v30 = *(void *)i;
          *(void *)unint64_t i = *(void *)v29;
          *(void *)unint64_t v29 = v30;
          LODWORD(v30) = *(_DWORD *)(i + 8);
          *(_DWORD *)(i + 8) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + 8) = v30;
          int v31 = *(_DWORD *)(i + 12);
          *(_DWORD *)(i + 12) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = v31;
          float v32 = *(float *)(i + 24);
          if (SLODWORD(v32) >= v17)
          {
            float v33 = (float *)(i + 40);
            do
            {
              if (SLODWORD(v32) <= v17 && *(v33 - 3) <= v20) {
                break;
              }
              float v34 = *v33;
              v33 += 4;
              float v32 = v34;
            }
            while (SLODWORD(v34) >= v17);
            unint64_t i = (unint64_t)(v33 - 6);
          }
          else
          {
            i += 16;
          }
          do
          {
            do
            {
              v29 -= 16;
              int v35 = *(_DWORD *)(v29 + 8);
            }
            while (v35 < v17);
          }
          while (v35 <= v17 && *(float *)(v29 + 12) <= v20);
        }
        while (i < v29);
      }
      if (i - 16 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(i - 16);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(i - 8);
        *(_DWORD *)(v9 + 12) = *(_DWORD *)(i - 4);
      }
      *(void *)(i - 16) = v28;
      *(_DWORD *)(i - 8) = v17;
      *(float *)(i - 4) = v20;
      if (v22 < j) {
        goto LABEL_56;
      }
      BOOL v36 = sub_25B595FAC(v9, i - 16);
      uint64_t result = (uint64_t *)sub_25B595FAC(i, a2);
      if (result)
      {
        a2 = i - 16;
        if (v36) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v36)
      {
LABEL_56:
        uint64_t result = (uint64_t *)sub_25B5950DC(v9, i - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  uint64_t v54 = (void *)(i + 16);
  BOOL v56 = i == a2 || v54 == (void *)a2;
  if (a4)
  {
    if (!v56)
    {
      uint64_t v57 = 0;
      uint64_t v58 = (void *)i;
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = v54;
        int v60 = *((_DWORD *)v59 + 6);
        int v61 = *((_DWORD *)v59 + 2);
        if (v60 >= v61)
        {
          float v62 = *((float *)v59 + 7);
          float v63 = *((float *)v59 + 3);
          BOOL v64 = v60 <= v61 && v62 <= v63;
          if (!v64)
          {
            uint64_t v65 = v59[2];
            v59[2] = *v59;
            *((_DWORD *)v58 + 2) = v61;
            *((float *)v58 + 3) = v63;
            unint64_t v66 = i;
            if (v59 != (void *)i)
            {
              uint64_t v67 = v57;
              unint64_t v66 = (unint64_t)v59;
              while (1)
              {
                unint64_t v68 = v66 - 16;
                uint64_t v69 = i + v67;
                int v70 = *(_DWORD *)(i + v67 - 8);
                if (v60 < v70) {
                  break;
                }
                float v71 = *(float *)(v69 - 4);
                if (v60 <= v70 && v62 <= v71) {
                  goto LABEL_137;
                }
                uint64_t v73 = *(void *)(v69 - 16);
                uint64_t v74 = i + v67;
                *(void *)uint64_t v74 = v73;
                *(_DWORD *)(v74 + 8) = v70;
                *(float *)(v74 + 12) = v71;
                unint64_t v66 = v68;
                v67 -= 16;
                if (!v67)
                {
                  unint64_t v66 = i;
                  goto LABEL_137;
                }
              }
              unint64_t v66 = i + v67;
            }
LABEL_137:
            *(void *)unint64_t v66 = v65;
            *(_DWORD *)(v66 + 8) = v60;
            *(float *)(v66 + 12) = v62;
          }
        }
        uint64_t v54 = v58 + 2;
        v57 += 16;
      }
      while (v58 + 2 != (void *)a2);
    }
  }
  else if (!v56)
  {
    do
    {
      unint64_t v117 = v9;
      unint64_t v9 = (unint64_t)v54;
      int v118 = *(_DWORD *)(v117 + 24);
      int v119 = *(_DWORD *)(v117 + 8);
      if (v118 >= v119)
      {
        float v120 = *(float *)(v117 + 28);
        float v121 = *(float *)(v117 + 12);
        if (v118 > v119 || v120 > v121)
        {
          uint64_t v123 = *v54;
          *(void *)unint64_t v9 = *(void *)v117;
          *(_DWORD *)(v9 + 8) = v119;
          *(float *)(v9 + 12) = v121;
          int v124 = *(_DWORD *)(v117 - 8);
          if (v118 >= v124)
          {
            while (1)
            {
              float v126 = *(float *)(v117 - 4);
              if (v118 <= v124 && v120 <= v126) {
                break;
              }
              unint64_t v125 = v117 - 16;
              *(void *)unint64_t v117 = *(void *)(v117 - 16);
              *(_DWORD *)(v117 + 8) = *(_DWORD *)(v117 - 8);
              *(float *)(v117 + 12) = v126;
              int v124 = *(_DWORD *)(v117 - 24);
              v117 -= 16;
              if (v118 < v124) {
                goto LABEL_206;
              }
            }
          }
          unint64_t v125 = v117;
LABEL_206:
          *(void *)unint64_t v125 = v123;
          *(_DWORD *)(v125 + 8) = v118;
          *(float *)(v125 + 12) = v120;
        }
      }
      uint64_t v54 = (void *)(v9 + 16);
    }
    while (v9 + 16 != a2);
  }
  return result;
}

uint64_t *sub_25B595B8C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  int v4 = *((_DWORD *)result + 2);
  if (v3 < v4 || v3 <= v4 && *((float *)a2 + 3) <= *((float *)result + 3))
  {
    int v11 = *((_DWORD *)a3 + 2);
    if (v11 < v3) {
      return result;
    }
    if (v11 <= v3)
    {
      float v13 = *((float *)a3 + 3);
      float v12 = *((float *)a2 + 3);
      if (v13 <= v12) {
        return result;
      }
    }
    else
    {
      float v12 = *((float *)a2 + 3);
      float v13 = *((float *)a3 + 3);
    }
    uint64_t v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    *((_DWORD *)a2 + 2) = v11;
    *((_DWORD *)a3 + 2) = v3;
    *((float *)a2 + 3) = v13;
    *((float *)a3 + 3) = v12;
    int v18 = *((_DWORD *)a2 + 2);
    int v19 = *((_DWORD *)result + 2);
    if (v18 >= v19)
    {
      if (v18 <= v19)
      {
        float v21 = *((float *)a2 + 3);
        float v20 = *((float *)result + 3);
        if (v21 <= v20) {
          return result;
        }
      }
      else
      {
        float v20 = *((float *)result + 3);
        float v21 = *((float *)a2 + 3);
      }
      uint64_t v22 = *result;
      *uint64_t result = *a2;
      *a2 = v22;
      *((_DWORD *)result + 2) = v18;
      *((_DWORD *)a2 + 2) = v19;
      *((float *)result + 3) = v21;
      *((float *)a2 + 3) = v20;
    }
  }
  else
  {
    int v5 = *((_DWORD *)a3 + 2);
    if (v5 >= v3)
    {
      float v14 = *((float *)a3 + 3);
      if (v5 > v3 || (float v6 = *((float *)a2 + 3), v14 > v6))
      {
        uint64_t v15 = *result;
        *uint64_t result = *a3;
        *a3 = v15;
        *((_DWORD *)result + 2) = v5;
        *((_DWORD *)a3 + 2) = v4;
        int v16 = *((_DWORD *)result + 3);
        *((float *)result + 3) = v14;
        *((_DWORD *)a3 + 3) = v16;
        return result;
      }
    }
    else
    {
      float v6 = *((float *)a2 + 3);
    }
    uint64_t v7 = *result;
    *uint64_t result = *a2;
    *a2 = v7;
    *((_DWORD *)result + 2) = v3;
    *((_DWORD *)a2 + 2) = v4;
    float v8 = *((float *)result + 3);
    *((float *)result + 3) = v6;
    *((float *)a2 + 3) = v8;
    int v9 = *((_DWORD *)a3 + 2);
    if (v9 >= v4)
    {
      float v10 = *((float *)a3 + 3);
      if (v9 > v4 || v10 > v8)
      {
        *a2 = *a3;
        *a3 = v7;
        *((_DWORD *)a2 + 2) = v9;
        *((_DWORD *)a3 + 2) = v4;
        *((float *)a2 + 3) = v10;
        *((float *)a3 + 3) = v8;
      }
    }
  }
  return result;
}

uint64_t *sub_25B595D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_25B595B8C((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  int v9 = *(_DWORD *)(a4 + 8);
  int v10 = *(_DWORD *)(a3 + 8);
  if (v9 >= v10)
  {
    if (v9 <= v10)
    {
      float v12 = *(float *)(a4 + 12);
      float v11 = *(float *)(a3 + 12);
      if (v12 <= v11) {
        return result;
      }
    }
    else
    {
      float v11 = *(float *)(a3 + 12);
      float v12 = *(float *)(a4 + 12);
    }
    uint64_t v13 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v13;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a4 + 8) = v10;
    *(float *)(a3 + 12) = v12;
    *(float *)(a4 + 12) = v11;
    int v14 = *(_DWORD *)(a3 + 8);
    int v15 = *(_DWORD *)(a2 + 8);
    if (v14 >= v15)
    {
      if (v14 <= v15)
      {
        float v17 = *(float *)(a3 + 12);
        float v16 = *(float *)(a2 + 12);
        if (v17 <= v16) {
          return result;
        }
      }
      else
      {
        float v16 = *(float *)(a2 + 12);
        float v17 = *(float *)(a3 + 12);
      }
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      *(_DWORD *)(a2 + 8) = v14;
      *(_DWORD *)(a3 + 8) = v15;
      *(float *)(a2 + 12) = v17;
      *(float *)(a3 + 12) = v16;
      int v19 = *(_DWORD *)(a2 + 8);
      int v20 = *(_DWORD *)(a1 + 8);
      if (v19 >= v20)
      {
        if (v19 <= v20)
        {
          float v22 = *(float *)(a2 + 12);
          float v21 = *(float *)(a1 + 12);
          if (v22 <= v21) {
            return result;
          }
        }
        else
        {
          float v21 = *(float *)(a1 + 12);
          float v22 = *(float *)(a2 + 12);
        }
        uint64_t v23 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v23;
        *(_DWORD *)(a1 + 8) = v19;
        *(_DWORD *)(a2 + 8) = v20;
        *(float *)(a1 + 12) = v22;
        *(float *)(a2 + 12) = v21;
      }
    }
  }
  return result;
}

uint64_t *sub_25B595E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_25B595D00(a1, a2, a3, a4);
  int v11 = *(_DWORD *)(a5 + 8);
  int v12 = *(_DWORD *)(a4 + 8);
  if (v11 >= v12)
  {
    if (v11 <= v12)
    {
      float v14 = *(float *)(a5 + 12);
      float v13 = *(float *)(a4 + 12);
      if (v14 <= v13) {
        return result;
      }
    }
    else
    {
      float v13 = *(float *)(a4 + 12);
      float v14 = *(float *)(a5 + 12);
    }
    uint64_t v15 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v15;
    *(_DWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a5 + 8) = v12;
    *(float *)(a4 + 12) = v14;
    *(float *)(a5 + 12) = v13;
    int v16 = *(_DWORD *)(a4 + 8);
    int v17 = *(_DWORD *)(a3 + 8);
    if (v16 >= v17)
    {
      if (v16 <= v17)
      {
        float v19 = *(float *)(a4 + 12);
        float v18 = *(float *)(a3 + 12);
        if (v19 <= v18) {
          return result;
        }
      }
      else
      {
        float v18 = *(float *)(a3 + 12);
        float v19 = *(float *)(a4 + 12);
      }
      uint64_t v20 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v20;
      *(_DWORD *)(a3 + 8) = v16;
      *(_DWORD *)(a4 + 8) = v17;
      *(float *)(a3 + 12) = v19;
      *(float *)(a4 + 12) = v18;
      int v21 = *(_DWORD *)(a3 + 8);
      int v22 = *(_DWORD *)(a2 + 8);
      if (v21 >= v22)
      {
        if (v21 <= v22)
        {
          float v24 = *(float *)(a3 + 12);
          float v23 = *(float *)(a2 + 12);
          if (v24 <= v23) {
            return result;
          }
        }
        else
        {
          float v23 = *(float *)(a2 + 12);
          float v24 = *(float *)(a3 + 12);
        }
        uint64_t v25 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v25;
        *(_DWORD *)(a2 + 8) = v21;
        *(_DWORD *)(a3 + 8) = v22;
        *(float *)(a2 + 12) = v24;
        *(float *)(a3 + 12) = v23;
        int v26 = *(_DWORD *)(a2 + 8);
        int v27 = *(_DWORD *)(a1 + 8);
        if (v26 >= v27)
        {
          if (v26 <= v27)
          {
            float v29 = *(float *)(a2 + 12);
            float v28 = *(float *)(a1 + 12);
            if (v29 <= v28) {
              return result;
            }
          }
          else
          {
            float v28 = *(float *)(a1 + 12);
            float v29 = *(float *)(a2 + 12);
          }
          uint64_t v30 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v30;
          *(_DWORD *)(a1 + 8) = v26;
          *(_DWORD *)(a2 + 8) = v27;
          *(float *)(a1 + 12) = v29;
          *(float *)(a2 + 12) = v28;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B595FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 8);
      int v7 = *(_DWORD *)(a1 + 8);
      if (v6 < v7) {
        return result;
      }
      if (v6 <= v7)
      {
        float v9 = *(float *)(a2 - 4);
        float v8 = *(float *)(a1 + 12);
        if (v9 <= v8) {
          return result;
        }
      }
      else
      {
        float v8 = *(float *)(a1 + 12);
        float v9 = *(float *)(a2 - 4);
      }
      uint64_t v28 = *(void *)a1;
      *(void *)a1 = *(void *)(a2 - 16);
      *(void *)(a2 - 16) = v28;
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a2 - 8) = v7;
      *(float *)(a1 + 12) = v9;
      *(float *)(a2 - 4) = v8;
      return result;
    case 3:
      sub_25B595B8C((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_25B595D00(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_25B595E28(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      sub_25B595B8C((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    int v14 = *(_DWORD *)(v11 + 8);
    int v15 = *(_DWORD *)(v10 + 8);
    if (v14 >= v15)
    {
      float v16 = *(float *)(v11 + 12);
      float v17 = *(float *)(v10 + 12);
      if (v14 > v15 || v16 > v17)
      {
        uint64_t v19 = *(void *)v11;
        *(void *)uint64_t v11 = *(void *)v10;
        *(_DWORD *)(v11 + 8) = v15;
        *(float *)(v11 + 12) = v17;
        uint64_t v20 = a1;
        if (v10 != a1)
        {
          uint64_t v21 = v12;
          uint64_t v20 = v10;
          while (1)
          {
            uint64_t v22 = a1 + v21;
            uint64_t v23 = v20 - 16;
            int v24 = *(_DWORD *)(a1 + v21 + 24);
            if (v14 < v24) {
              break;
            }
            float v25 = *(float *)(v22 + 28);
            if (v14 <= v24 && v16 <= v25)
            {
              uint64_t v20 = a1 + v21 + 32;
              break;
            }
            *(void *)(v22 + 32) = *(void *)(v22 + 16);
            uint64_t v27 = a1 + v21;
            *(_DWORD *)(v27 + 40) = v24;
            *(float *)(v27 + 44) = v25;
            v21 -= 16;
            uint64_t v20 = v23;
            if (v21 == -32)
            {
              uint64_t v20 = a1;
              break;
            }
          }
        }
        *(void *)uint64_t v20 = v19;
        *(_DWORD *)(v20 + 8) = v14;
        *(float *)(v20 + 12) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

int8x8_t sub_25B5961C8(__int32 a1, int32x2_t a2, int8x8_t a3, float a4, int32x2_t a5)
{
  float32x2_t v5 = (float32x2_t)a2;
  a2.i32[0] = 0;
  a5.i32[0] = a1;
  float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(a5, a2), 0), (int8x8_t)v5, vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(a5, (int32x2_t)0x3F00000000000001), 0), a3, (int8x8_t)vmul_f32(vadd_f32(v5, (float32x2_t)a3), (float32x2_t)0x3F0000003F000000)));
  float32x2_t v22 = vsub_f32(v5, v6);
  float32x2_t v23 = vsub_f32((float32x2_t)a3, v6);
  __float2 v7 = __sincosf_stret(a4);
  v8.i32[1] = v22.i32[1];
  v8.f32[0] = -v22.f32[1];
  float32x2_t v9 = vmul_f32((float32x2_t)v7, v8);
  float32x2_t v10 = (float32x2_t)vrev64_s32((int32x2_t)v7);
  v11.i32[1] = v23.i32[1];
  v11.f32[0] = -v23.f32[1];
  float32x2_t v12 = vmla_n_f32(vmul_f32((float32x2_t)v7, v11), v10, v23.f32[0]);
  float32x2_t v13 = vadd_f32(v6, vmla_n_f32(v9, v10, v22.f32[0]));
  float32x2_t v14 = vadd_f32(v6, v12);
  float32x2_t v15 = vsub_f32(v5, v13);
  int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v17 = vsub_f32(v5, v14);
  int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
  int32x2_t v19 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v18), (float32x2_t)vzip2_s32(v16, v18)));
  if (vcgt_f32((float32x2_t)vdup_lane_s32(v19, 1), (float32x2_t)v19).u8[0]) {
    unsigned int v20 = -1;
  }
  else {
    unsigned int v20 = 0;
  }
  return vbsl_s8((int8x8_t)vdup_n_s32(v20), (int8x8_t)v13, (int8x8_t)v14);
}

uint64_t sub_25B5962C8(void *a1, float32x2_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  sub_25B44B224((uint64_t)v55);
  sub_25B44B288((uint64_t)&v52);
  DWORD2(v52) = *(_DWORD *)(a3 + 4);
  *(void *)&long long v52 = *(void *)(a4 + 8);
  HIDWORD(v52) = -1;
  uint64_t v53 = 3;
  float32x2_t v8 = operator new(8uLL);
  void *v8 = 0x3F80000000000000;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  BOOL v56 = 0;
  sub_25B3FCA58(&v56, v8, (uint64_t)(v8 + 1), 2uLL);
  uint64_t v59 = 1;
  float32x2_t v9 = operator new(8uLL);
  *float32x2_t v9 = 0x42C800003F800000;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v60 = 0;
  sub_25B3FCA58(&v60, v9, (uint64_t)(v9 + 1), 2uLL);
  v61[2] = 1;
  sub_25B44BF28(v54, (uint64_t)&v56, (uint64_t)&v62);
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    float32x2_t v11 = (void *)v61[i - 1];
    if (v11)
    {
      v61[i] = v11;
      operator delete(v11);
    }
  }
  operator delete(v9);
  operator delete(v8);
  sub_25B44DC28((uint64_t)v55, &v52);
  BOOL v56 = 0;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  float32x2_t v13 = *a2;
  float32x2_t v12 = a2[1];
  if (v13 != v12)
  {
    float32x2_t v14 = 0;
    float32x2_t v15 = vcvt_f32_f64(*(float64x2_t *)(a3 + 80));
    float32x2_t v16 = vcvt_f32_f64(*(float64x2_t *)(a3 + 48));
    do
    {
      float32x2_t v17 = vmul_f32(vadd_f32(*v13, v15), v16);
      float32x2_t v18 = vmul_f32(vadd_f32(v13[1], v15), v16);
      float v19 = -v17.f32[0];
      if (v17.f32[0] >= 0.0) {
        float v19 = v17.f32[0];
      }
      int v20 = (int)v19;
      float v21 = v19 - (float)(int)v19;
      if (v21 < 0.5) {
        int v22 = v20;
      }
      else {
        int v22 = v20 + 1;
      }
      int v23 = (v20 & 1) + v20;
      if (v21 != 0.5) {
        int v23 = v22;
      }
      if (v17.f32[0] < 0.0) {
        int v23 = -v23;
      }
      *(float *)&uint64_t v24 = (float)v23;
      float v25 = -v17.f32[1];
      if (v17.f32[1] >= 0.0) {
        float v25 = v17.f32[1];
      }
      int v26 = (int)v25;
      float v27 = v25 - (float)(int)v25;
      if (v27 < 0.5) {
        int v28 = v26;
      }
      else {
        int v28 = v26 + 1;
      }
      int v29 = (v26 & 1) + v26;
      if (v27 != 0.5) {
        int v29 = v28;
      }
      if (v17.f32[1] < 0.0) {
        int v29 = -v29;
      }
      *((float *)&v24 + 1) = (float)v29;
      float v30 = -v18.f32[0];
      if (v18.f32[0] >= 0.0) {
        float v30 = v18.f32[0];
      }
      int v31 = (int)v30;
      float v32 = v30 - (float)(int)v30;
      if (v32 < 0.5) {
        int v33 = v31;
      }
      else {
        int v33 = v31 + 1;
      }
      int v34 = (v31 & 1) + v31;
      if (v32 != 0.5) {
        int v34 = v33;
      }
      if (v18.f32[0] < 0.0) {
        int v34 = -v34;
      }
      *(float *)&uint64_t v35 = (float)v34;
      v18.f32[0] = -v18.f32[1];
      if (v18.f32[1] >= 0.0) {
        v18.f32[0] = v18.f32[1];
      }
      int v36 = (int)v18.f32[0];
      float v37 = v18.f32[0] - (float)(int)v18.f32[0];
      if (v37 < 0.5) {
        int v38 = v36;
      }
      else {
        int v38 = v36 + 1;
      }
      int v39 = (v36 & 1) + v36;
      if (v37 != 0.5) {
        int v39 = v38;
      }
      if (v18.f32[1] < 0.0) {
        int v39 = -v39;
      }
      *((float *)&v35 + 1) = (float)v39;
      if ((unint64_t)v14 >= v58)
      {
        uint64_t v50 = v35;
        uint64_t v51 = v24;
        unint64_t v41 = v56;
        uint64_t v42 = (v14 - v56) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v44 = v58 - (void)v56;
        if ((uint64_t)(v58 - (void)v56) >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45) {
          unint64_t v45 = (unint64_t)sub_25B3FFAEC(v45);
        }
        else {
          uint64_t v46 = 0;
        }
        int v47 = (void *)(v45 + 16 * v42);
        void *v47 = v51;
        v47[1] = v50;
        unint64_t v48 = (char *)v47;
        if (v14 != v41)
        {
          do
          {
            *((_OWORD *)v48 - 1) = *((_OWORD *)v14 - 1);
            v48 -= 16;
            v14 -= 16;
          }
          while (v14 != v41);
          float32x2_t v14 = v56;
        }
        uint64_t v40 = v47 + 2;
        BOOL v56 = v48;
        uint64_t v57 = v47 + 2;
        unint64_t v58 = v45 + 16 * v46;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)float32x2_t v14 = v24;
        *((void *)v14 + 1) = v35;
        uint64_t v40 = v14 + 16;
      }
      uint64_t v57 = v40;
      v13 += 2;
      float32x2_t v14 = (char *)v40;
    }
    while (v13 != v12);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_25B53C080(v55, (uint64_t *)&v56, *(void *)(a4 + 144), (uint64_t)a1);
  if (v56) {
    operator delete(v56);
  }
  sub_25B44B10C((void *)v54[16]);
  sub_25B44B168((void *)v54[11]);
  sub_25B44B168((void *)v54[7]);
  sub_25B44B10C((void *)v54[1]);
  return sub_25B44B088((uint64_t)v55);
}

void sub_25B5966D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v40 = *(void **)v37;
  if (*(void *)v37)
  {
    *(void *)(v37 + 8) = v40;
    operator delete(v40);
  }
  unint64_t v41 = *(void **)(v38 - 184);
  if (v41) {
    operator delete(v41);
  }
  sub_25B4820B0(&a13);
  sub_25B44B088((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_25B5967B0(_OWORD *a1, long long **a2, _OWORD *a3, uint64_t a4, long long **a5)
{
  __float2 v7 = *a2;
  float32x2_t v6 = a2[1];
  int64_t v8 = (char *)v6 - (char *)*a2;
  if ((unint64_t)v8 > 0x1F)
  {
    uint64_t v17 = (uint64_t)a1;
    a1[25] = *a3;
    long long v18 = a3[1];
    long long v19 = a3[2];
    long long v20 = a3[4];
    a1[28] = a3[3];
    a1[29] = v20;
    a1[26] = v18;
    a1[27] = v19;
    long long v21 = a3[5];
    long long v22 = a3[6];
    long long v23 = a3[7];
    *(_OWORD *)((char *)a1 + 524) = *(_OWORD *)((char *)a3 + 124);
    a1[31] = v22;
    a1[32] = v23;
    a1[30] = v21;
    uint64_t v489 = (uint64_t)(a1 + 34);
    uint64_t v492 = (uint64_t)(a1 + 25);
    sub_25B453C28((uint64_t)(a1 + 34), a4);
    *(void *)(v17 + 704) = *(void *)(v17 + 696);
    sub_25B5938E4(v17, a2);
    BOOL v24 = sub_25B594C68(v17);
    BOOL v25 = v24;
    if (*(unsigned char *)(v17 + 681))
    {
      if (!v24)
      {
LABEL_503:
        float v483 = *(long long **)(v17 + 136);
        *(void *)(v17 + 136) = *a5;
        *a5 = v483;
        uint64_t v484 = *(long long **)(v17 + 144);
        *(void *)(v17 + 144) = a5[1];
        a5[1] = v484;
        uint64_t v485 = *(long long **)(v17 + 152);
        *(void *)(v17 + 152) = a5[2];
        a5[2] = v485;
        return;
      }
    }
    else
    {
      sub_25B5962C8(v508, (float32x2_t **)(v17 + 136), v492, v489);
      int v26 = *(void **)(v17 + 696);
      if (v26)
      {
        *(void *)(v17 + 704) = v26;
        operator delete(v26);
      }
      *(_OWORD *)(v17 + 696) = *(_OWORD *)v508;
      *(void *)(v17 + 712) = v509;
      if (!v25) {
        goto LABEL_503;
      }
    }
    unint64_t v504 = 0;
    unsigned __int8 v505 = 0;
    unint64_t v506 = 0;
    uint64_t v28 = *(void *)(v17 + 136);
    uint64_t v27 = *(void *)(v17 + 144);
    uint64_t v500 = v17;
    if (v27 == v28) {
      goto LABEL_217;
    }
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = v30++;
      uint64_t v32 = v27 - v28;
      if (v30 < (v27 - v28) >> 4)
      {
        uint64_t v33 = v29;
        unint64_t v34 = v30;
        do
        {
          BOOL v35 = sub_25B594FF0(v17, v31);
          uint64_t v36 = v17;
          BOOL v37 = sub_25B594FF0(v17, v34);
          uint64_t v38 = *(void *)(v17 + 136);
          int v39 = (float32x2_t *)(v38 + 16 * v31);
          float32x2_t v40 = vsub_f32(*v39, v39[1]);
          float v41 = sqrtf(vaddv_f32(vmul_f32(v40, v40)));
          float v42 = *(float *)(v36 + 40);
          if (v41 >= v42)
          {
            unint64_t v43 = (float32x2_t *)(v38 + v33);
            uint64_t v44 = (float32x2_t *)(v38 + v33 + 16);
            float32x2_t v45 = vsub_f32(*v44, *(float32x2_t *)(v38 + v33 + 24));
            BOOL v46 = sqrtf(vaddv_f32(vmul_f32(v45, v45))) >= v42 && v37;
            if (v46 && v35)
            {
              float v47 = *(float *)(v500 + 36);
              if (vabdd_f64(90.0, sub_25B3FCCE0(v39, v44, 0)) < *(float *)(v500 + 32))
              {
                float32x2_t v49 = *v39;
                float32x2_t v50 = v39[1];
                int32x2_t v51 = (int32x2_t)vsub_f32(v50, *v39);
                float32x2_t v53 = v43[2];
                float32x2_t v52 = v43[3];
                float32x2_t v54 = vsub_f32(v52, v53);
                *(float *)v48.i32 = -*(float *)&v51.i32[1];
                float32x2_t v55 = (float32x2_t)vzip1_s32(v48, v51);
                int32x2_t v56 = (int32x2_t)vmul_f32(v54, v55);
                if (vaddv_f32((float32x2_t)v56) != 0.0)
                {
                  int32x2_t v57 = (int32x2_t)vmul_f32(vsub_f32(v49, v53), v55);
                  float32x2_t v58 = vmla_n_f32(v53, v54, vdiv_f32(vadd_f32((float32x2_t)v57, (float32x2_t)vdup_lane_s32(v57, 1)), vadd_f32((float32x2_t)v56, (float32x2_t)vdup_lane_s32(v56, 1))).f32[0]);
                  float v59 = sub_25B40DB9C(v58, v49, v50, 0.00001);
                  float v60 = sub_25B40DB9C(v58, v53, v52, 0.00001);
                  if (v59 >= v60) {
                    float v60 = v59;
                  }
                  if (v60 < v47)
                  {
                    int v61 = operator new(0x10uLL);
                    uint64_t v62 = v61 + 2;
                    void *v61 = v31;
                    v61[1] = v34;
                    *(void *)&long long v63 = v61;
                    *((void *)&v63 + 1) = v61 + 2;
                    BOOL v64 = v505;
                    if ((unint64_t)v505 >= v506)
                    {
                      long long v495 = v63;
                      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v505 - v504) >> 3);
                      unint64_t v67 = v66 + 1;
                      if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        sub_25B3FBC4C();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v506 - (void)v504) >> 3) > v67) {
                        unint64_t v67 = 0x5555555555555556 * ((uint64_t)(v506 - (void)v504) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v506 - (void)v504) >> 3) >= 0x555555555555555) {
                        unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v68 = v67;
                      }
                      *(void *)&long long v510 = &v506;
                      uint64_t v69 = (char *)sub_25B413D74(v68);
                      int v70 = &v69[24 * v66];
                      v508[0] = v69;
                      v508[1] = v70;
                      *((void *)&v509 + 1) = &v69[24 * v71];
                      *(_OWORD *)int v70 = v495;
                      *((void *)v70 + 2) = v62;
                      *(void *)&long long v509 = v70 + 24;
                      sub_25B43EA54(&v504, v508);
                      uint64_t v65 = v505;
                      sub_25B43EAC4((uint64_t)v508);
                    }
                    else
                    {
                      *(_OWORD *)unsigned __int8 v505 = v63;
                      *((void *)v64 + 2) = v62;
                      uint64_t v65 = (char *)v64 + 24;
                    }
                    unsigned __int8 v505 = v65;
                  }
                }
              }
            }
          }
          ++v34;
          uint64_t v17 = v500;
          uint64_t v28 = *(void *)(v500 + 136);
          uint64_t v27 = *(void *)(v500 + 144);
          uint64_t v32 = v27 - v28;
          v33 += 16;
        }
        while (v34 < (v27 - v28) >> 4);
      }
      v29 += 16;
    }
    while (v30 < v32 >> 4);
    if (v504 == v505) {
      goto LABEL_217;
    }
    long long v501 = 0;
    uint64_t v502 = 0;
    uint64_t v503 = 0;
    unint64_t v72 = (uint64_t)(*(void *)(v17 + 192) - *(void *)(v17 + 184)) >> 2;
    v508[0] = 0;
    sub_25B598D84(&v535, v72, v508);
    unint64_t v73 = (uint64_t)(*(void *)(v17 + 192) - *(void *)(v17 + 184)) >> 2;
    v508[0] = 0;
    sub_25B598D84(&v532, v73, v508);
    unint64_t v74 = (uint64_t)(*(void *)(v17 + 192) - *(void *)(v17 + 184)) >> 2;
    v508[0] = 0;
    sub_25B598D84(v529, v74, v508);
    int64_t v75 = *(float **)(v17 + 184);
    uint64_t v76 = *(void *)(v17 + 192) - (void)v75;
    if (v76)
    {
      unint64_t v77 = v76 >> 2;
      uint64_t v78 = (double *)v535;
      double v79 = *(float *)(v17 + 44);
      int v80 = v532;
      int v81 = *(double **)&v529[0];
      if (v77 <= 1) {
        unint64_t v77 = 1;
      }
      do
      {
        float v82 = *v75++;
        *uint64_t v78 = v82;
        *v80++ = v82 - v79;
        double v83 = *v78++;
        *v81++ = v83 + v79;
        --v77;
      }
      while (v77);
    }
    long long v527 = 0uLL;
    unint64_t v528 = 0;
    int v84 = v504;
    float v85 = v505;
    if (v504 != v505)
    {
      unint64_t v86 = 0;
      do
      {
        uint64_t v87 = *(void *)(v17 + 208);
        unint64_t v88 = *(uint64_t **)(v87 + 24 * **(void **)v84);
        uint64_t v90 = *v88;
        uint64_t v89 = v88[1];
        int v91 = *(uint64_t **)(v87 + 24 * *(void *)(*(void *)v84 + 8));
        uint64_t v92 = *v91;
        uint64_t v93 = v91[1];
        uint64_t v94 = operator new(0x20uLL);
        uint64_t v95 = v94 + 4;
        *uint64_t v94 = v90;
        v94[1] = v89;
        v94[2] = v92;
        v94[3] = v93;
        *(void *)&long long v96 = v94;
        *((void *)&v96 + 1) = v94 + 4;
        if (v86 >= v528)
        {
          long long v496 = v96;
          unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - v527) >> 3);
          unint64_t v98 = v97 + 1;
          if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v528 - v527) >> 3) > v98) {
            unint64_t v98 = 0x5555555555555556 * ((uint64_t)(v528 - v527) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v528 - v527) >> 3) >= 0x555555555555555) {
            unint64_t v99 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v99 = v98;
          }
          *(void *)&long long v510 = &v528;
          unint64_t v100 = (char *)sub_25B413D74(v99);
          uint64_t v17 = v500;
          uint64_t v101 = &v100[24 * v97];
          v508[0] = v100;
          v508[1] = v101;
          *((void *)&v509 + 1) = &v100[24 * v102];
          *(_OWORD *)uint64_t v101 = v496;
          *((void *)v101 + 2) = v95;
          *(void *)&long long v509 = v101 + 24;
          sub_25B43EA54(&v527, v508);
          unint64_t v86 = *((void *)&v527 + 1);
          sub_25B43EAC4((uint64_t)v508);
        }
        else
        {
          *(_OWORD *)unint64_t v86 = v96;
          *(void *)(v86 + 16) = v95;
          v86 += 24;
          uint64_t v17 = v500;
        }
        *((void *)&v527 + 1) = v86;
        v84 += 24;
      }
      while (v84 != v85);
    }
    int v103 = v532;
    v508[1] = 0;
    LODWORD(v508[0]) = (*(void *)&v533 - (void)v532) >> 3;
    HIDWORD(v508[0]) = 1;
    if (LODWORD(v508[0]))
    {
      size_t v104 = ((uint64_t)((*(void *)&v533 - (void)v532) << 29) >> 29) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v105 = malloc_type_malloc(v104, 0x100004000313F17uLL);
      unint64_t v106 = v105;
      v508[1] = v105;
      if (v103 && v105) {
        memcpy(v105, v103, v104);
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v112 = *(const void **)&v529[0];
    long long v531 = 0;
    LODWORD(v530) = (*((void *)&v529[0] + 1) - *(void *)&v529[0]) >> 3;
    HIDWORD(v530) = 1;
    if (v530)
    {
      size_t v113 = ((uint64_t)((*((void *)&v529[0] + 1) - *(void *)&v529[0]) << 29) >> 29) & 0xFFFFFFFFFFFFFFF8;
      int v114 = malloc_type_malloc(v113, 0x100004000313F17uLL);
      float v115 = v114;
      long long v531 = v114;
      if (v112 && v114) {
        memcpy(v114, v112, v113);
      }
    }
    else
    {
      float v115 = 0;
    }
    long long __p = &unk_2708F1FD8;
    sub_25B59EAEC((uint64_t)&v519, (int *)v508);
    sub_25B59EAEC((uint64_t)&v521, (int *)&v530);
    if (v115) {
      free(v115);
    }
    if (v106) {
      free(v106);
    }
    long long v523 = 0u;
    long long v524 = 0u;
    long long __p = &unk_2708F1FA0;
    std::string __dst = 0;
    int v526 = (unint64_t)((char *)v536 - (char *)v535) >> 3;
    long long v116 = v527;
    if (*((void *)&v527 + 1) == (void)v527)
    {
      int v119 = sub_25B5A0B1C(v527, *((uint64_t *)&v527 + 1), 0);
      float v120 = (char *)*((void *)&v523 + 1);
      if (*((char **)&v523 + 1) != v119)
      {
        float v121 = (char *)*((void *)&v523 + 1);
        do
        {
          uint64_t v123 = (void *)*((void *)v121 - 3);
          v121 -= 24;
          uint64_t v122 = v123;
          if (v123)
          {
            *((void *)v120 - 2) = v122;
            operator delete(v122);
          }
          float v120 = v121;
        }
        while (v121 != v119);
      }
      *((void *)&v523 + 1) = v119;
    }
    else
    {
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v527 + 1) - v527) >> 3);
      if (v117 > 0xAAAAAAAAAAAAAAALL) {
        sub_25B3FBC4C();
      }
      *(void *)&long long v523 = sub_25B413D74(v117);
      *((void *)&v523 + 1) = v523;
      *(void *)&long long v524 = v523 + 24 * v118;
      *((void *)&v523 + 1) = sub_25B5A0B84((uint64_t)&v524, v116, *((uint64_t *)&v116 + 1), (void *)v523);
    }
    int v124 = v535;
    int64_t v125 = (char *)v536 - (char *)v535;
    unint64_t v126 = (unint64_t)((char *)v536 - (char *)v535) >> 3;
    if (v126)
    {
      uint64_t v127 = malloc_type_malloc((v125 << 29 >> 29) & 0xFFFFFFFFFFFFFFF8, 0x100004000313F17uLL);
      long long v128 = v127;
      if (v124 && v127) {
        memcpy(v127, v124, (v125 << 29 >> 29) & 0xFFFFFFFFFFFFFFF8);
      }
      if ((int)v126 >= 1)
      {
        if (HIDWORD(v524) * DWORD2(v524) != v126)
        {
          if (__dst)
          {
            free(__dst);
            std::string __dst = 0;
          }
          *((void *)&v524 + 1) = v126 | 0x100000000;
          unint64_t v161 = malloc_type_malloc(v125 & 0x7FFFFFFF8, 0x100004000313F17uLL);
          std::string __dst = v161;
          if (v161)
          {
            if (!v128)
            {
LABEL_108:
              int v514 = -1;
              long long v511 = 0u;
              long long v512 = 0u;
              uint64_t v513 = 0;
              long long v515 = 0u;
              long long v516 = 0u;
              uint64_t v517 = 0x500000000;
              v508[0] = &unk_2708F2010;
              v508[1] = (void *)100;
              long long v509 = xmmword_25B5F17A0;
              long long v510 = xmmword_25B5F17B0;
              long long v531 = 0;
              LODWORD(v530) = (unint64_t)((char *)v536 - (char *)v535) >> 3;
              HIDWORD(v530) = 1;
              if (v530)
              {
                unint64_t v129 = malloc_type_malloc((((char *)v536 - (char *)v535) << 29 >> 29) & 0xFFFFFFFFFFFFFFF8, 0x100004000313F17uLL);
                long long v531 = v129;
                LODWORD(v130) = v530;
                if (v129)
                {
                  bzero(v129, 8 * HIDWORD(v530) * (int)v530);
                  LODWORD(v130) = v530;
                }
                if ((int)v130 >= 1)
                {
                  uint64_t v131 = v535;
                  long long v132 = v531;
                  uint64_t v130 = v130;
                  do
                  {
                    uint64_t v133 = (uint64_t)*v131++;
                    *v132++ = v133;
                    --v130;
                  }
                  while (v130);
                }
              }
              BOOL v134 = sub_25B598E08((uint64_t)v508, (uint64_t)&__p, &v530);
              unint64_t v135 = (uint64_t)(*(void *)(v500 + 192) - *(void *)(v500 + 184)) >> 2;
              int v507 = 0;
              sub_25B43E4C0((char **)&v501, v135, &v507);
              uint64_t v136 = v530;
              int v137 = v531;
              if ((int)v530 < 1)
              {
                if (!v531)
                {
LABEL_120:
                  v508[0] = &unk_2708F2010;
                  if (*((void *)&v516 + 1))
                  {
                    free(*((void **)&v516 + 1));
                    *((void *)&v516 + 1) = 0;
                  }
                  *(void *)&long long v516 = 0;
                  if (*((void *)&v515 + 1)) {
                    free(*((void **)&v515 + 1));
                  }
                  long long __p = &unk_2708F1FA0;
                  if (__dst)
                  {
                    free(__dst);
                    std::string __dst = 0;
                  }
                  *((void *)&v524 + 1) = 0;
                  v508[0] = &v523;
                  sub_25B413C78((void ***)v508);
                  long long __p = &unk_2708F1FD8;
                  if (v522)
                  {
                    free(v522);
                    std::string v522 = 0;
                  }
                  uint64_t v521 = 0;
                  if (v520) {
                    free(v520);
                  }
                  v508[0] = &v527;
                  sub_25B413C78((void ***)v508);
                  if (*(void *)&v529[0])
                  {
                    *((void *)&v529[0] + 1) = *(void *)&v529[0];
                    operator delete(*(void **)&v529[0]);
                  }
                  if (v532)
                  {
                    float32x2_t v533 = (float32x2_t)v532;
                    operator delete(v532);
                  }
                  if (v535)
                  {
                    uint64_t v536 = v535;
                    operator delete(v535);
                  }
                  uint64_t v142 = v501;
                  if (v134)
                  {
                    v508[0] = 0;
                    v508[1] = 0;
                    *(void *)&long long v509 = 0;
                    sub_25B3FCA58(v508, v501, v502, (v502 - (uint64_t)v501) >> 2);
                    uint64_t v17 = v500;
                    unint64_t v143 = *(uint64_t **)(v500 + 304);
                    unint64_t v144 = *(uint64_t **)(v500 + 312);
                    if (v143 != v144)
                    {
                      uint64_t v145 = *(void *)(v500 + 184);
                      uint64_t v146 = v508[0];
                      do
                      {
                        uint64_t v147 = *v143++;
                        v146[2 * v147] = *(_DWORD *)(v145 + 8 * v147);
                        *(_DWORD *)((char *)v146 + ((8 * v147) | 4)) = *(_DWORD *)(v145 + ((8 * v147) | 4));
                      }
                      while (v143 != v144);
                    }
                    uint64_t v149 = *(void *)(v500 + 208);
                    uint64_t v148 = *(void *)(v500 + 216);
                    std::string v519 = 0;
                    std::string v520 = 0;
                    long long __p = 0;
                    uint64_t v150 = v148 - v149;
                    if (v150)
                    {
                      unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * (v150 >> 3);
                      if (v151 >> 60) {
                        sub_25B3FBC4C();
                      }
                      long long v152 = (float32x2_t *)sub_25B3FFAEC(v151);
                      long long __p = v152;
                      std::string v520 = &v152[2 * v153];
                      bzero(v152, 16 * v151);
                      std::string v519 = &v152[2 * v151];
                      uint64_t v148 = *(void *)(v500 + 208);
                      if (*(void *)(v500 + 216) == v148)
                      {
                        uint64_t v160 = *(void *)(v500 + 208);
                      }
                      else
                      {
                        uint64_t v154 = 0;
                        unint64_t v155 = 0;
                        uint64_t v156 = v508[0];
                        long long v157 = v152 + 1;
                        do
                        {
                          uint64_t v158 = *(void **)(v148 + v154);
                          float32x2_t v159 = (float32x2_t)v156[v158[1]];
                          v157[-1] = (float32x2_t)v156[*v158];
                          *long long v157 = v159;
                          ++v155;
                          uint64_t v148 = *(void *)(v500 + 208);
                          uint64_t v160 = *(void *)(v500 + 216);
                          v157 += 2;
                          v154 += 24;
                        }
                        while (0xAAAAAAAAAAAAAAABLL * ((v160 - v148) >> 3) > v155);
                      }
                      uint64_t v162 = 16 * v151;
                      if (16 * v151)
                      {
                        uint64_t v163 = 0;
                        uint64_t v164 = v508[0];
                        if ((unint64_t)(v162 >> 4) <= 1) {
                          uint64_t v165 = 1;
                        }
                        else {
                          uint64_t v165 = v162 >> 4;
                        }
                        do
                        {
                          uint64_t v166 = *(void *)(v500 + 208);
                          float v167 = sub_25B3FCCE0((float32x2_t *)(*(void *)(v500 + 136) + 16 * v163), &v152[2 * v163], 0);
                          if ((float)(180.0 - v167) < v167) {
                            float v167 = 180.0 - v167;
                          }
                          uint64_t v168 = *(uint64_t **)(v166 + 24 * v163);
                          if (v167 <= *(float *)(v500 + 32))
                          {
                            uint64_t v172 = 0;
                            uint64_t v173 = *(void *)(v500 + 184);
                            int v174 = (float32x2_t *)(*(void *)(v500 + 136) + 16 * v163);
                            char v175 = 1;
                            do
                            {
                              char v176 = v175;
                              uint64_t v177 = v168[v172];
                              float32x2_t v178 = *(float32x2_t *)(v173 + 8 * v177);
                              float32x2_t v179 = vsub_f32(*v174, v174[1]);
                              float v180 = *(float *)(v500 + 48) * sqrtf(vaddv_f32(vmul_f32(v179, v179)));
                              float32x2_t v181 = vsub_f32(v178, *(float32x2_t *)&v164[2 * v177]);
                              float v182 = sqrtf(vaddv_f32(vmul_f32(v181, v181)));
                              if (v180 > *(float *)(v500 + 44)) {
                                float v180 = *(float *)(v500 + 44);
                              }
                              if (v182 > v180)
                              {
                                uint64_t v183 = 2 * v177;
                                v164[v183] = v178.i32[0];
                                *(_DWORD *)((char *)v164 + ((4 * v183) | 4)) = *(_DWORD *)(v173 + ((4 * v183) | 4));
                              }
                              char v175 = 0;
                              uint64_t v172 = 1;
                            }
                            while ((v176 & 1) != 0);
                          }
                          else
                          {
                            uint64_t v169 = *v168;
                            uint64_t v170 = *(void *)(v500 + 184);
                            v164[2 * *v168] = *(_DWORD *)(v170 + 8 * *v168);
                            *(_DWORD *)((char *)v164 + ((8 * v169) | 4)) = *(_DWORD *)(v170 + ((8 * v169) | 4));
                            uint64_t v171 = v168[1];
                            v164[2 * v171] = *(_DWORD *)(v170 + 8 * v171);
                            *(_DWORD *)((char *)v164 + ((8 * v171) | 4)) = *(_DWORD *)(v170 + ((8 * v171) | 4));
                          }
                          ++v163;
                        }
                        while (v163 != v165);
                        uint64_t v17 = v500;
                        uint64_t v148 = *(void *)(v500 + 208);
                        uint64_t v160 = *(void *)(v500 + 216);
                      }
                    }
                    else
                    {
                      long long v152 = 0;
                      uint64_t v160 = v148;
                    }
                    if (!*(unsigned char *)(v17 + 681))
                    {
                      uint64_t v535 = 0;
                      uint64_t v536 = 0;
                      unint64_t v537 = 0;
                      if (v160 != v148)
                      {
                        int v184 = 0;
                        unint64_t v185 = 0;
                        do
                        {
                          std::string::size_type v186 = *(void **)(v148 + 24 * v185);
                          float32x2_t v187 = *(float32x2_t *)((char *)v508[0] + 8 * *v186);
                          float32x2_t v188 = *(float32x2_t *)((char *)v508[0] + 8 * v186[1]);
                          if ((unint64_t)v184 >= v537)
                          {
                            int v190 = v535;
                            uint64_t v191 = ((char *)v184 - (char *)v535) >> 4;
                            unint64_t v192 = v191 + 1;
                            if ((unint64_t)(v191 + 1) >> 60) {
                              sub_25B3FBC4C();
                            }
                            uint64_t v193 = v537 - (void)v535;
                            if ((uint64_t)(v537 - (void)v535) >> 3 > v192) {
                              unint64_t v192 = v193 >> 3;
                            }
                            if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v194 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v194 = v192;
                            }
                            if (v194) {
                              unint64_t v194 = (unint64_t)sub_25B3FFAEC(v194);
                            }
                            else {
                              uint64_t v195 = 0;
                            }
                            uint64_t v196 = (float32x2_t *)(v194 + 16 * v191);
                            *uint64_t v196 = v187;
                            v196[1] = v188;
                            long long v197 = v196;
                            if (v184 != v190)
                            {
                              do
                              {
                                *(_OWORD *)v197[-2].f32 = *(_OWORD *)v184[-2].f32;
                                v197 -= 2;
                                v184 -= 2;
                              }
                              while (v184 != v190);
                              int v184 = v535;
                            }
                            uint64_t v189 = v196 + 2;
                            uint64_t v535 = v197;
                            uint64_t v536 = v196 + 2;
                            unint64_t v537 = v194 + 16 * v195;
                            if (v184) {
                              operator delete(v184);
                            }
                          }
                          else
                          {
                            *int v184 = v187;
                            v184[1] = v188;
                            uint64_t v189 = v184 + 2;
                          }
                          uint64_t v536 = v189;
                          ++v185;
                          uint64_t v148 = *(void *)(v500 + 208);
                          int v184 = v189;
                        }
                        while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v500 + 216) - v148) >> 3) > v185);
                      }
                      sub_25B5962C8(&v532, &v535, v492, v489);
                      long long v152 = (float32x2_t *)__p;
                      int v198 = (float *)v532;
                      uint64_t v17 = v500;
                      if (v519 != __p)
                      {
                        unint64_t v199 = 0;
                        unint64_t v200 = ((char *)v519 - (unsigned char *)__p) >> 4;
                        uint64_t v201 = *(void *)(v500 + 208);
                        uint64_t v202 = *(void *)(v500 + 696);
                        unint64_t v203 = (*(void *)(v500 + 704) - v202) >> 2;
                        if (v200 <= 1) {
                          unint64_t v200 = 1;
                        }
                        long long v204 = v508[0];
                        if (v203 >= (uint64_t)(*(void *)&v533 - (void)v532) >> 2) {
                          unint64_t v203 = (uint64_t)(*(void *)&v533 - (void)v532) >> 2;
                        }
                        do
                        {
                          if (v199 < v203)
                          {
                            float v205 = *(float *)(v202 + 4 * v199);
                            float v206 = v205 - v198[v199];
                            if (v205 < 0.000001) {
                              float v205 = 0.000001;
                            }
                            if ((float)(v206 / v205) >= *(float *)(v500 + 52))
                            {
                              uint64_t v207 = 0;
                              uint64_t v208 = *(void *)(v201 + 24 * v199);
                              uint64_t v209 = *(void *)(v500 + 184);
                              char v210 = 1;
                              do
                              {
                                char v211 = v210;
                                uint64_t v212 = *(void *)(v208 + 8 * v207);
                                v204[2 * v212] = *(_DWORD *)(v209 + 8 * v212);
                                *(_DWORD *)((char *)v204 + ((8 * v212) | 4)) = *(_DWORD *)(v209 + ((8 * v212) | 4));
                                uint64_t v207 = 1;
                                char v210 = 0;
                              }
                              while ((v211 & 1) != 0);
                            }
                          }
                          ++v199;
                        }
                        while (v199 != v200);
                      }
                      if (v198) {
                        operator delete(v198);
                      }
                      if (v535) {
                        operator delete(v535);
                      }
                      uint64_t v148 = *(void *)(v500 + 208);
                      uint64_t v160 = *(void *)(v500 + 216);
                    }
                    if (v160 != v148)
                    {
                      uint64_t v213 = 0;
                      unint64_t v214 = 0;
                      uint64_t v215 = v508[0];
                      int v216 = v152 + 1;
                      do
                      {
                        v216[-1].i32[0] = v215[2 * **(void **)(v148 + v213)];
                        v216[-1].i32[1] = v215[2 * **(void **)(v148 + v213) + 1];
                        v216->i32[0] = v215[2 * *(void *)(*(void *)(v148 + v213) + 8)];
                        v216->i32[1] = v215[2 * *(void *)(*(void *)(v148 + v213) + 8) + 1];
                        ++v214;
                        uint64_t v148 = *(void *)(v17 + 208);
                        v216 += 2;
                        v213 += 24;
                      }
                      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v17 + 216) - v148) >> 3) > v214);
                    }
                    sub_25B5938E4(v17, (long long **)&__p);
                    if (__p) {
                      operator delete(__p);
                    }
                    if (v508[0]) {
                      operator delete(v508[0]);
                    }
                    uint64_t v142 = v501;
                  }
                  else
                  {
                    uint64_t v17 = v500;
                  }
                  if (v142) {
                    operator delete(v142);
                  }
LABEL_217:
                  v508[0] = &v504;
                  sub_25B413C78((void ***)v508);
                  BOOL v217 = sub_25B594C68(v17);
                  uint64_t v218 = *(const void **)(v17 + 136);
                  uint64_t v219 = *(void *)(v17 + 144);
                  unint64_t v220 = (v219 - (uint64_t)v218) >> 4;
                  if (v217)
                  {
                    long long v532 = 0;
                    float32x2_t v533 = 0;
                    unint64_t v534 = 0;
                    if ((const void *)v219 != v218)
                    {
                      uint64_t v221 = 0;
                      unint64_t v222 = 0;
                      uint64_t v223 = (float32x2_t *)(v500 + 376);
                      if (v220 <= 1) {
                        uint64_t v224 = 1;
                      }
                      else {
                        uint64_t v224 = (v219 - (uint64_t)v218) >> 4;
                      }
                      float32x2_t v225 = (float32x2_t)vdup_n_s32(0x43340000u);
                      float32x2_t v226 = (float32x2_t)vdup_n_s32(0xC2B40000);
                      do
                      {
                        uint64_t v227 = *(void *)(v500 + 136);
                        float v228 = *(float *)(v500 + 72);
                        float v229 = *(float *)(v500 + 76);
                        float v230 = *(float *)(v500 + 80);
                        BOOL v231 = sub_25B594FF0(v500, v222);
                        int8x8_t v232 = (float32x2_t *)(*(void *)(v500 + 136) + 16 * v222);
                        float v233 = sub_25B3FCCE0(v232, v223, 1);
                        uint64_t v234 = v227 + 16 * v222;
                        if ((float)(180.0 - v233) < v233) {
                          float v233 = 180.0 - v233;
                        }
                        float v235 = fabsf(v233 + -90.0);
                        float v236 = fabsf(v233);
                        if (v236 >= v235) {
                          float v236 = v235;
                        }
                        if (v236 <= v229
                          || (float32x2_t v237 = vsub_f32(*v232, v232[1]), sqrtf(vaddv_f32(vmul_f32(v237, v237))) <= v228))
                        {
                          if (v236 <= v230)
                          {
                            if (v236 >= 0.00001 && v231)
                            {
LABEL_233:
                              float v239 = sub_25B3FCCE0((float32x2_t *)(v227 + 16 * v222), v223, 1);
                              if ((float)(180.0 - v239) < v239) {
                                float v239 = 180.0 - v239;
                              }
                              float v241 = fabsf(v239 + -90.0);
                              float v242 = fabsf(v239);
                              if (v242 >= v241) {
                                float v242 = v241;
                              }
                              std::string::size_type v243 = *(void **)(*(void *)(v500 + 208) + 24 * v222);
                              uint64_t v244 = *(void *)(v500 + 232);
                              unint64_t v245 = (uint64_t)(*(void *)(v244 + 24 * *v243 + 8) - *(void *)(v244 + 24 * *v243)) >> 3;
                              long long v247 = (void *)(v244 + 24 * v243[1]);
                              uint64_t v246 = v247[1];
                              BOOL v248 = v245 > (v246 - *v247) >> 3;
                              if (v245 < (v246 - *v247) >> 3) {
                                int v249 = 1;
                              }
                              else {
                                int v249 = 2;
                              }
                              if (v248) {
                                __int32 v250 = 0;
                              }
                              else {
                                __int32 v250 = v249;
                              }
                              float v251 = (float)(v242 * 3.1416) / 180.0;
                              int8x8_t v252 = sub_25B5961C8(v250, *(int32x2_t *)v234, *(int8x8_t *)(v234 + 8), v251, v240);
                              int8x8_t v254 = (int8x8_t)v253;
                              v508[0] = (void *)v252;
                              v508[1] = v253;
                              float v497 = sub_25B3FCCE0((float32x2_t *)v508, v223, 1);
                              int8x8_t v256 = sub_25B5961C8(v250, *(int32x2_t *)v234, *(int8x8_t *)(v234 + 8), -v251, v255);
                              int8x8_t v258 = (int8x8_t)v257;
                              long long __p = (void *)v256;
                              std::string v519 = v257;
                              v259.f32[0] = sub_25B3FCCE0((float32x2_t *)&__p, v223, 1);
                              v259.f32[1] = v497;
                              float32x2_t v260 = vsub_f32(v225, v259);
                              float32x2_t v261 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v259, v260), (int8x8_t)v260, (int8x8_t)v259);
                              float32x2_t v262 = vadd_f32(v261, v226);
                              int32x2_t v263 = (int32x2_t)vbsl_s8((int8x8_t)vcagt_f32(v262, v261), (int8x8_t)vabs_f32(v261), (int8x8_t)vabs_f32(v262));
                              if (vcgt_f32((float32x2_t)vdup_lane_s32(v263, 1), (float32x2_t)v263).u8[0]) {
                                unsigned int v264 = -1;
                              }
                              else {
                                unsigned int v264 = 0;
                              }
                              int8x8_t v265 = (int8x8_t)vdup_n_s32(v264);
                              int8x8_t v266 = vbsl_s8(v265, v258, v254);
                              int8x8_t v267 = vbsl_s8(v265, v256, v252);
                              if (!*(unsigned char *)(v500 + 681))
                              {
                                v508[0] = 0;
                                v508[1] = 0;
                                *(void *)&long long v509 = 0;
                                std::string::size_type v268 = operator new(0x10uLL);
                                *std::string::size_type v268 = v267;
                                v268[1] = v266;
                                v508[1] = v268 + 2;
                                *(void *)&long long v509 = v268 + 2;
                                v508[0] = v268;
                                sub_25B5962C8(&__p, (float32x2_t **)v508, v492, v489);
                                uint64_t v269 = *(void *)(v500 + 696);
                                long long v270 = (float32x2_t *)__p;
                                if (v222 < (*(void *)(v500 + 704) - v269) >> 2 && (char *)v519 - (unsigned char *)__p == 4)
                                {
                                  float v271 = *(float *)(v269 + 4 * v222);
                                  float v272 = v271 - *(float *)__p;
                                  if (v271 < 0.000001) {
                                    float v271 = 0.000001;
                                  }
                                  if ((float)(v272 / v271) < *(float *)(v500 + 52))
                                  {
                                    char v273 = 1;
                                    goto LABEL_272;
                                  }
                                  if ((unint64_t)v221 >= v534)
                                  {
                                    float32x2_t v289 = (float32x2_t)v532;
                                    uint64_t v290 = ((char *)v221 - (char *)v532) >> 4;
                                    unint64_t v291 = v290 + 1;
                                    if ((unint64_t)(v290 + 1) >> 60) {
                                      sub_25B3FBC4C();
                                    }
                                    uint64_t v292 = v534 - (void)v532;
                                    if ((uint64_t)(v534 - (void)v532) >> 3 > v291) {
                                      unint64_t v291 = v292 >> 3;
                                    }
                                    if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
                                      unint64_t v293 = 0xFFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v293 = v291;
                                    }
                                    if (v293) {
                                      unint64_t v293 = (unint64_t)sub_25B3FFAEC(v293);
                                    }
                                    else {
                                      uint64_t v294 = 0;
                                    }
                                    unint64_t v295 = (int8x8_t *)(v293 + 16 * v290);
                                    *(_OWORD *)v295->i8 = *(_OWORD *)v234;
                                    float32x2_t v296 = (float32x2_t)v295;
                                    if (v221 != (int8x8_t *)v289)
                                    {
                                      do
                                      {
                                        *(_OWORD *)(*(void *)&v296 - 16) = *(_OWORD *)v221[-2].i8;
                                        *(void *)&v296 -= 16;
                                        v221 -= 2;
                                      }
                                      while (v221 != (int8x8_t *)v289);
                                      uint64_t v221 = (int8x8_t *)v532;
                                    }
                                    unint64_t v288 = v295 + 2;
                                    long long v532 = (double *)v296;
                                    float32x2_t v533 = (float32x2_t)&v295[2];
                                    unint64_t v534 = v293 + 16 * v294;
                                    if (v221) {
                                      operator delete(v221);
                                    }
                                  }
                                  else
                                  {
                                    *(_OWORD *)v221->i8 = *(_OWORD *)v234;
                                    unint64_t v288 = v221 + 2;
                                  }
                                  char v273 = 0;
                                  float32x2_t v533 = (float32x2_t)v288;
                                  long long v270 = (float32x2_t *)__p;
                                  uint64_t v221 = v288;
                                  if (!__p)
                                  {
LABEL_273:
                                    if (v508[0]) {
                                      operator delete(v508[0]);
                                    }
                                    if ((v273 & 1) == 0) {
                                      goto LABEL_294;
                                    }
                                    goto LABEL_276;
                                  }
                                }
                                else
                                {
                                  char v273 = 1;
                                  if (!__p) {
                                    goto LABEL_273;
                                  }
                                }
LABEL_272:
                                std::string v519 = v270;
                                operator delete(v270);
                                goto LABEL_273;
                              }
LABEL_276:
                              if ((unint64_t)v221 >= v534)
                              {
                                float32x2_t v284 = (float32x2_t)v532;
                                uint64_t v285 = ((char *)v221 - (char *)v532) >> 4;
                                unint64_t v286 = v285 + 1;
                                if ((unint64_t)(v285 + 1) >> 60) {
                                  sub_25B3FBC4C();
                                }
                                uint64_t v287 = v534 - (void)v532;
                                if ((uint64_t)(v534 - (void)v532) >> 3 > v286) {
                                  unint64_t v286 = v287 >> 3;
                                }
                                if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF0) {
                                  unint64_t v279 = 0xFFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v279 = v286;
                                }
                                if (v279) {
                                  unint64_t v279 = (unint64_t)sub_25B3FFAEC(v279);
                                }
                                else {
                                  uint64_t v280 = 0;
                                }
                                std::string::size_type v281 = (int8x8_t *)(v279 + 16 * v285);
                                int8x8_t *v281 = v267;
                                v281[1] = v266;
                                float32x2_t v282 = (float32x2_t)v281;
                                if (v221 != (int8x8_t *)v284)
                                {
                                  do
                                  {
                                    *(_OWORD *)(*(void *)&v282 - 16) = *(_OWORD *)v221[-2].i8;
                                    *(void *)&v282 -= 16;
                                    v221 -= 2;
                                  }
                                  while (v221 != (int8x8_t *)v284);
                                  goto LABEL_290;
                                }
                                goto LABEL_291;
                              }
                              *uint64_t v221 = v267;
                              v221[1] = v266;
                              goto LABEL_278;
                            }
                          }
                          else
                          {
                            float32x2_t v238 = vsub_f32(*v232, v232[1]);
                            if (sqrtf(vaddv_f32(vmul_f32(v238, v238))) > v228 && v236 >= 0.00001 && v231) {
                              goto LABEL_233;
                            }
                          }
                        }
                        if ((unint64_t)v221 >= v534)
                        {
                          float32x2_t v275 = (float32x2_t)v532;
                          uint64_t v276 = ((char *)v221 - (char *)v532) >> 4;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 60) {
                            sub_25B3FBC4C();
                          }
                          uint64_t v278 = v534 - (void)v532;
                          if ((uint64_t)(v534 - (void)v532) >> 3 > v277) {
                            unint64_t v277 = v278 >> 3;
                          }
                          if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v279 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v279 = v277;
                          }
                          if (v279) {
                            unint64_t v279 = (unint64_t)sub_25B3FFAEC(v279);
                          }
                          else {
                            uint64_t v280 = 0;
                          }
                          std::string::size_type v281 = (int8x8_t *)(v279 + 16 * v276);
                          *(_OWORD *)v281->i8 = *(_OWORD *)v234;
                          float32x2_t v282 = (float32x2_t)v281;
                          if (v221 != (int8x8_t *)v275)
                          {
                            do
                            {
                              *(_OWORD *)(*(void *)&v282 - 16) = *(_OWORD *)v221[-2].i8;
                              *(void *)&v282 -= 16;
                              v221 -= 2;
                            }
                            while (v221 != (int8x8_t *)v275);
LABEL_290:
                            uint64_t v221 = (int8x8_t *)v532;
                          }
LABEL_291:
                          std::string::size_type v283 = v281 + 2;
                          long long v532 = (double *)v282;
                          float32x2_t v533 = (float32x2_t)&v281[2];
                          unint64_t v534 = v279 + 16 * v280;
                          if (v221) {
                            operator delete(v221);
                          }
                          goto LABEL_293;
                        }
                        *(_OWORD *)v221->i8 = *(_OWORD *)v234;
LABEL_278:
                        std::string::size_type v283 = v221 + 2;
LABEL_293:
                        float32x2_t v533 = (float32x2_t)v283;
                        uint64_t v221 = v283;
LABEL_294:
                        ++v222;
                      }
                      while (v222 != v224);
                    }
                    uint64_t v17 = v500;
                    uint64_t v297 = *(void *)(v500 + 240) - *(void *)(v500 + 232);
                    if (v297)
                    {
                      uint64_t v298 = 0;
                      uint64_t v299 = 0;
                      float v300 = *(float *)(v500 + 64);
                      float v301 = *(float *)(v500 + 68);
                      unint64_t v302 = v297 / 24;
                      if (v302 <= 1) {
                        unint64_t v302 = 1;
                      }
                      unint64_t v490 = v302;
                      float32x2_t v303 = (float32x2_t)v532;
                      while (1)
                      {
                        uint64_t v304 = *(void *)(v500 + 232) + v298;
                        v508[1] = 0;
                        *(void *)&long long v509 = 0;
                        v508[0] = 0;
                        sub_25B46BD74(v508, *(const void **)v304, *(void *)(v304 + 8), (uint64_t)(*(void *)(v304 + 8) - *(void *)v304) >> 3);
                        uint64_t v305 = v508[0];
                        if ((void *)((char *)v508[1] - (char *)v508[0]) == (void *)16) {
                          break;
                        }
                        if (v508[0]) {
                          goto LABEL_339;
                        }
LABEL_340:
                        ++v299;
                        v298 += 24;
                        if (v490 == v299)
                        {
                          uint64_t v332 = 0;
                          uint64_t v17 = v500;
                          float v333 = *(float *)(v500 + 12);
                          while (1)
                          {
                            int v334 = (uint64_t *)(*(void *)(v17 + 232) + 24 * v332);
                            int v335 = v334 + 1;
                            uint64_t v336 = v334[1] - *v334;
                            if ((unint64_t)v336 >= 0x10) {
                              break;
                            }
LABEL_463:
                            if (++v332 == v490) {
                              goto LABEL_464;
                            }
                          }
                          LODWORD(__p) = 0;
                          sub_25B40FF0C(v508, v336 >> 3, &__p);
                          uint64_t v337 = *v335;
                          uint64_t v338 = *v334;
                          if (*v335 != *v334)
                          {
                            unint64_t v339 = 0;
                            float32x2_t v340 = (float32x2_t)v532;
                            do
                            {
                              if (*((_DWORD *)v508[0] + v339) == 1)
                              {
                                unint64_t v341 = v339 + 1;
                                uint64_t v342 = v337 - v338;
                              }
                              else
                              {
                                unint64_t v341 = v339 + 1;
                                uint64_t v342 = v337 - v338;
                                if (v339 + 1 < (v337 - v338) >> 3)
                                {
                                  int v343 = (float32x2_t *)(*(void *)&v340 + 16 * *(void *)(v338 + 8 * v339));
                                  unint64_t v344 = v339 + 1;
                                  do
                                  {
                                    uint64_t v345 = (float32x2_t *)(*(void *)&v340 + 16 * *(void *)(v338 + 8 * v344));
                                    float32x2_t v346 = *v345;
                                    float32x2_t v347 = v345[1];
                                    float32x2_t v348 = *v343;
                                    float32x2_t v349 = v343[1];
                                    int v350 = (float *)operator new(0x10uLL);
                                    float32x2_t v351 = vsub_f32(v349, v347);
                                    float32x2_t v352 = vmul_f32(v351, v351);
                                    float32x2_t v353 = vsub_f32(v349, v346);
                                    int32x2_t v354 = (int32x2_t)vmul_f32(v353, v353);
                                    float32x2_t v355 = vsub_f32(v348, v347);
                                    int32x2_t v356 = (int32x2_t)vmul_f32(v355, v355);
                                    float32x2_t v357 = vsub_f32(v348, v346);
                                    int32x2_t v358 = (int32x2_t)vmul_f32(v357, v357);
                                    *(int32x2_t *)v359.f32 = vzip1_s32(v358, v356);
                                    v359.i64[1] = __PAIR64__(v352.u32[0], v354.u32[0]);
                                    *(int32x2_t *)v360.f32 = vzip2_s32(v358, v356);
                                    v360.i64[1] = __PAIR64__(v352.u32[1], vdup_lane_s32(v354, 1).u32[0]);
                                    float32x4_t v361 = vsqrtq_f32(vaddq_f32(v359, v360));
                                    *(float32x4_t *)int v350 = v361;
                                    uint64_t v362 = 1;
                                    float32x4_t v363 = v350;
                                    do
                                    {
                                      if (v350[v362] < v361.f32[0])
                                      {
                                        v361.f32[0] = v350[v362];
                                        float32x4_t v363 = &v350[v362];
                                      }
                                      ++v362;
                                    }
                                    while (v362 != 4);
                                    float v364 = *v363;
                                    operator delete(v350);
                                    if (v364 < v333)
                                    {
                                      std::string::size_type v365 = v508[0];
                                      *((_DWORD *)v508[0] + v339) = 1;
                                      v365[v344] = 1;
                                    }
                                    ++v344;
                                    uint64_t v337 = *v335;
                                    uint64_t v338 = *v334;
                                    uint64_t v342 = *v335 - *v334;
                                  }
                                  while (v344 < v342 >> 3);
                                }
                              }
                              unint64_t v339 = v341;
                            }
                            while (v341 < v342 >> 3);
                          }
                          uint64_t v493 = v332;
                          int v366 = (int *)v508[0];
                          if (v508[1] == v508[0])
                          {
                            uint64_t v367 = 0;
                            uint64_t v370 = 0;
                          }
                          else
                          {
                            uint64_t v367 = 0;
                            long long v368 = 0;
                            unint64_t v369 = 0;
                            uint64_t v370 = 0;
                            unint64_t v371 = 0;
                            unint64_t v498 = 0;
                            unint64_t v372 = 0;
                            do
                            {
                              uint64_t v373 = *v334;
                              if (v366[v372] < 1)
                              {
                                if ((unint64_t)v371 >= v498)
                                {
                                  uint64_t v378 = (v371 - v370) >> 3;
                                  unint64_t v379 = v378 + 1;
                                  if ((unint64_t)(v378 + 1) >> 61) {
LABEL_505:
                                  }
                                    sub_25B3FBC4C();
                                  if ((uint64_t)(v498 - (void)v370) >> 2 > v379) {
                                    unint64_t v379 = (uint64_t)(v498 - (void)v370) >> 2;
                                  }
                                  if (v498 - (unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v380 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v380 = v379;
                                  }
                                  if (v380) {
                                    unint64_t v380 = (unint64_t)sub_25B3FCAD4(v380);
                                  }
                                  else {
                                    uint64_t v381 = 0;
                                  }
                                  unint64_t v385 = (char *)(v380 + 8 * v378);
                                  *(void *)unint64_t v385 = *(void *)(v373 + 8 * v372);
                                  uint64_t v386 = v385 + 8;
                                  while (v371 != v370)
                                  {
                                    uint64_t v387 = *((void *)v371 - 1);
                                    v371 -= 8;
                                    *((void *)v385 - 1) = v387;
                                    v385 -= 8;
                                  }
                                  unint64_t v498 = v380 + 8 * v381;
                                  if (v370) {
                                    operator delete(v370);
                                  }
                                  uint64_t v370 = v385;
                                  unint64_t v371 = v386;
                                }
                                else
                                {
                                  *(void *)unint64_t v371 = *(void *)(v373 + 8 * v372);
                                  v371 += 8;
                                }
                              }
                              else if ((unint64_t)v368 >= v369)
                              {
                                uint64_t v374 = (v368 - v367) >> 3;
                                unint64_t v375 = v374 + 1;
                                if ((unint64_t)(v374 + 1) >> 61) {
                                  goto LABEL_505;
                                }
                                if ((uint64_t)(v369 - (void)v367) >> 2 > v375) {
                                  unint64_t v375 = (uint64_t)(v369 - (void)v367) >> 2;
                                }
                                if (v369 - (unint64_t)v367 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v376 = v375;
                                }
                                if (v376) {
                                  unint64_t v376 = (unint64_t)sub_25B3FCAD4(v376);
                                }
                                else {
                                  uint64_t v377 = 0;
                                }
                                unint64_t v382 = (char *)(v376 + 8 * v374);
                                *(void *)unint64_t v382 = *(void *)(v373 + 8 * v372);
                                uint64_t v383 = v382 + 8;
                                while (v368 != v367)
                                {
                                  uint64_t v384 = *((void *)v368 - 1);
                                  v368 -= 8;
                                  *((void *)v382 - 1) = v384;
                                  v382 -= 8;
                                }
                                unint64_t v369 = v376 + 8 * v377;
                                if (v367) {
                                  operator delete(v367);
                                }
                                uint64_t v367 = v382;
                                long long v368 = v383;
                              }
                              else
                              {
                                *(void *)long long v368 = *(void *)(v373 + 8 * v372);
                                v368 += 8;
                              }
                              ++v372;
                              int v366 = (int *)v508[0];
                            }
                            while (v372 < ((char *)v508[1] - (char *)v508[0]) >> 2);
                            if ((unint64_t)(v368 - v367) > 8)
                            {
                              float32x2_t v388 = (float32x2_t)v532;
                              uint64_t v389 = (float32x2_t *)&v532[2 * *(void *)v367];
                              unint64_t v390 = (float32x2_t *)&v532[2 * *((void *)v367 + 1)];
                              float32x2_t v391 = *v389;
                              float32x2_t v392 = vsub_f32(*v389, *v390);
                              int32x2_t v393 = (int32x2_t)vmul_f32(v392, v392);
                              float32x2_t v394 = vsub_f32(*v389, v390[1]);
                              int32x2_t v395 = (int32x2_t)vmul_f32(v394, v394);
                              float32x2_t v396 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v395, v393), (float32x2_t)vzip2_s32(v395, v393)));
                              if (v396.f32[0] >= v396.f32[1]) {
                                v396.f32[0] = v396.f32[1];
                              }
                              if (v396.f32[0] >= v333) {
                                float32x2_t v391 = v389[1];
                              }
                              uint64_t v332 = v493;
                              if (v370 != v371)
                              {
                                float32x4_t v397 = v370;
                                do
                                {
                                  uint64_t v398 = (float32x2_t *)(*(void *)&v388 + 16 * *(void *)v397);
                                  float32x2_t v399 = v398[1];
                                  float32x2_t v400 = vsub_f32(*v398, v391);
                                  int32x2_t v401 = (int32x2_t)vmul_f32(v400, v400);
                                  float32x2_t v402 = vsub_f32(v399, v391);
                                  int32x2_t v403 = (int32x2_t)vmul_f32(v402, v402);
                                  int32x2_t v404 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v401, v403), (float32x2_t)vzip2_s32(v401, v403)));
                                  unsigned __int8 v405 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v404, 1), (float32x2_t)v404)).u8[0];
                                  float32x2_t v406 = v391;
                                  if ((v405 & 1) == 0)
                                  {
                                    *uint64_t v398 = v391;
                                    float32x2_t v406 = v399;
                                  }
                                  v398[1] = v406;
                                  v397 += 8;
                                }
                                while (v397 != v371);
                              }
                              goto LABEL_457;
                            }
                            if (v370 != v371)
                            {
                              long long v407 = 0;
                              unint64_t v408 = 0;
                              long long v409 = 0;
                              float32x2_t v410 = v370;
                              do
                              {
                                uint64_t v411 = *(void *)v410;
                                long long v412 = *(void **)(*(void *)(v500 + 208) + 24 * *(void *)v410);
                                if (*v412 == v493) {
                                  long long v413 = (void *)(*(void *)(v500 + 232) + 24 * v412[1]);
                                }
                                else {
                                  long long v413 = (void *)(*(void *)(v500 + 232) + 24 * *v412);
                                }
                                uint64_t v414 = (v413[1] - *v413) >> 3;
                                float32x2_t v415 = vsub_f32(*(float32x2_t *)&v532[2 * v411], *(float32x2_t *)&v532[2 * v411 + 1]);
                                float v416 = sqrtf(vaddv_f32(vmul_f32(v415, v415)));
                                if (v408 >= (unint64_t)v409)
                                {
                                  uint64_t v417 = (uint64_t)(v408 - (void)v407) >> 4;
                                  unint64_t v418 = v417 + 1;
                                  if ((unint64_t)(v417 + 1) >> 60) {
                                    sub_25B3FBC4C();
                                  }
                                  if ((v409 - v407) >> 3 > v418) {
                                    unint64_t v418 = (v409 - v407) >> 3;
                                  }
                                  if ((unint64_t)(v409 - v407) >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v419 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v419 = v418;
                                  }
                                  if (v419)
                                  {
                                    if (v419 >> 60) {
                                      sub_25B3FA70C();
                                    }
                                    long long v420 = (char *)operator new(16 * v419);
                                  }
                                  else
                                  {
                                    long long v420 = 0;
                                  }
                                  long long v421 = &v420[16 * v417];
                                  *(void *)long long v421 = v411;
                                  *((_DWORD *)v421 + 2) = v414;
                                  *((float *)v421 + 3) = v416;
                                  if ((char *)v408 == v407)
                                  {
                                    std::string::size_type v423 = &v420[16 * v417];
                                  }
                                  else
                                  {
                                    unint64_t v422 = &v420[16 * v417];
                                    do
                                    {
                                      std::string::size_type v423 = v422 - 16;
                                      *((_OWORD *)v422 - 1) = *(_OWORD *)(v408 - 16);
                                      v408 -= 16;
                                      v422 -= 16;
                                    }
                                    while ((char *)v408 != v407);
                                  }
                                  long long v409 = &v420[16 * v419];
                                  unint64_t v408 = (unint64_t)(v421 + 16);
                                  if (v407) {
                                    operator delete(v407);
                                  }
                                  long long v407 = v423;
                                }
                                else
                                {
                                  *(void *)unint64_t v408 = v411;
                                  *(_DWORD *)(v408 + 8) = v414;
                                  *(float *)(v408 + 12) = v416;
                                  v408 += 16;
                                }
                                v410 += 8;
                              }
                              while (v410 != v371);
LABEL_435:
                              unint64_t v424 = (uint64_t)(v408 - (void)v407) >> 4;
                              unint64_t v425 = 126 - 2 * __clz(v424);
                              if ((char *)v408 == v407) {
                                uint64_t v426 = 0;
                              }
                              else {
                                uint64_t v426 = v425;
                              }
                              sub_25B5950DC((uint64_t *)v407, v408, v426, 1);
                              if (v408 - (unint64_t)v407 < 0x11)
                              {
LABEL_456:
                                operator delete(v407);
                                uint64_t v332 = v493;
LABEL_457:
                                uint64_t v17 = v500;
                                if (v370) {
                                  operator delete(v370);
                                }
                                if (v367) {
                                  operator delete(v367);
                                }
                                if (v508[0])
                                {
                                  v508[1] = v508[0];
                                  operator delete(v508[0]);
                                }
                                goto LABEL_463;
                              }
                              float32x2_t v427 = (float32x2_t)v532;
                              unint64_t v428 = (float32x2_t *)&v532[2 * *(void *)v407];
                              if (v424 <= 2) {
                                uint64_t v429 = 2;
                              }
                              else {
                                uint64_t v429 = v424;
                              }
                              uint64_t v430 = 1;
                              while (2)
                              {
                                uint64_t v431 = (float32x2_t *)(*(void *)&v427 + 16 * *(void *)&v407[16 * v430]);
                                float32x2_t v432 = *v428;
                                float32x2_t v433 = v428[1];
                                float32x2_t v434 = *v431;
                                float32x2_t v435 = v431[1];
                                unint64_t v436 = (char *)operator new(0x10uLL);
                                float32x2_t v437 = vsub_f32(v435, v433);
                                float32x2_t v438 = vmul_f32(v437, v437);
                                float32x2_t v439 = vsub_f32(v435, v432);
                                int32x2_t v440 = (int32x2_t)vmul_f32(v439, v439);
                                float32x2_t v441 = vsub_f32(v434, v433);
                                int32x2_t v442 = (int32x2_t)vmul_f32(v441, v441);
                                float32x2_t v443 = vsub_f32(v434, v432);
                                int32x2_t v444 = (int32x2_t)vmul_f32(v443, v443);
                                *(int32x2_t *)v445.f32 = vzip1_s32(v444, v442);
                                v445.i64[1] = __PAIR64__(v438.u32[0], v440.u32[0]);
                                *(int32x2_t *)v446.f32 = vzip2_s32(v444, v442);
                                v446.i64[1] = __PAIR64__(v438.u32[1], vdup_lane_s32(v440, 1).u32[0]);
                                float32x4_t v447 = vsqrtq_f32(vaddq_f32(v445, v446));
                                *(float32x4_t *)unint64_t v436 = v447;
                                uint64_t v448 = 4;
                                unint64_t v449 = v436;
                                do
                                {
                                  if (*(float *)&v436[v448] < v447.f32[0])
                                  {
                                    v447.i32[0] = *(_DWORD *)&v436[v448];
                                    unint64_t v449 = &v436[v448];
                                  }
                                  v448 += 4;
                                }
                                while (v448 != 16);
                                uint64_t v450 = (v449 - v436) << 30;
                                if (v450)
                                {
                                  if (v450 == 0x200000000)
                                  {
                                    uint64_t v452 = 0;
                                  }
                                  else
                                  {
                                    if (v450 == 0x100000000)
                                    {
                                      uint64_t v450 = 1;
                                      goto LABEL_451;
                                    }
                                    uint64_t v452 = 1;
                                  }
                                  operator delete(v436);
                                  float32x2_t v451 = v428[v452];
                                }
                                else
                                {
LABEL_451:
                                  operator delete(v436);
                                  float32x2_t v451 = v431[1];
                                  float32x2_t *v431 = v428[v450];
                                }
                                v431[1] = v451;
                                if (++v430 == v429) {
                                  goto LABEL_456;
                                }
                                continue;
                              }
                            }
                          }
                          long long v407 = 0;
                          unint64_t v408 = 0;
                          goto LABEL_435;
                        }
                      }
                      uint64_t v306 = *(void *)(v500 + 208) + 24 * *(void *)v508[0];
                      std::string v519 = 0;
                      std::string v520 = 0;
                      long long __p = 0;
                      sub_25B46BD74(&__p, *(const void **)v306, *(void *)(v306 + 8), (uint64_t)(*(void *)(v306 + 8) - *(void *)v306) >> 3);
                      uint64_t v307 = *(void *)(v500 + 208) + 24 * v305[1];
                      uint64_t v536 = 0;
                      unint64_t v537 = 0;
                      uint64_t v535 = 0;
                      sub_25B46BD74(&v535, *(const void **)v307, *(void *)(v307 + 8), (uint64_t)(*(void *)(v307 + 8) - *(void *)v307) >> 3);
                      v529[0] = *(_OWORD *)(*(void *)&v303 + 16 * *v305);
                      long long v527 = *(_OWORD *)(*(void *)&v303 + 16 * v305[1]);
                      float v308 = sub_25B3FCCE0((float32x2_t *)v529, (float32x2_t *)&v527, 0);
                      if ((float)(180.0 - v308) < v308) {
                        float v308 = 180.0 - v308;
                      }
                      if (v308 > v300)
                      {
                        int32x2_t v310 = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)v529 + 8), *(float32x2_t *)&v529[0]);
                        long long v311 = v527;
                        float32x2_t v312 = vsub_f32(*(float32x2_t *)((char *)&v527 + 8), *(float32x2_t *)&v527);
                        *(float *)v309.i32 = -*(float *)&v310.i32[1];
                        float32x2_t v313 = (float32x2_t)vzip1_s32(v309, v310);
                        int32x2_t v314 = (int32x2_t)vmul_f32(v312, v313);
                        if (vaddv_f32((float32x2_t)v314) != 0.0)
                        {
                          int32x2_t v315 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&v529[0], *(float32x2_t *)&v527), v313);
                          float32x2_t v316 = vmla_n_f32(*(float32x2_t *)&v527, v312, vdiv_f32(vadd_f32((float32x2_t)v315, (float32x2_t)vdup_lane_s32(v315, 1)), vadd_f32((float32x2_t)v314, (float32x2_t)vdup_lane_s32(v314, 1))).f32[0]);
                          uint64_t v317 = *(void *)__p;
                          float32x2_t v318 = vsub_f32(*(float32x2_t *)((char *)v529 + 8), v316);
                          float32x2_t v319 = vsub_f32(*(float32x2_t *)&v529[0], v316);
                          float v320 = sqrtf(vaddv_f32((float32x2_t)vbsl_s8((int8x8_t)vceqd_s64(v299, *(void *)__p), (int8x8_t)vmul_f32(v319, v319), (int8x8_t)vmul_f32(v318, v318))));
                          float32x4_t v321 = (uint64_t *)v535;
                          float32x2_t v322 = vsub_f32(*(float32x2_t *)((char *)&v527 + 8), v316);
                          float32x2_t v323 = vsub_f32(*(float32x2_t *)&v527, v316);
                          float v324 = sqrtf(vaddv_f32((float32x2_t)vbsl_s8((int8x8_t)vceqd_s64(v299, (uint64_t)*v535), (int8x8_t)vmul_f32(v323, v323), (int8x8_t)vmul_f32(v322, v322))));
                          if (v320 < v301 && v324 < v301)
                          {
                            float32x2_t v326 = *(float32x2_t *)((char *)v529 + 8);
                            uint64_t v327 = (float32x2_t *)(*(void *)&v303 + 16 * *v305);
                            BOOL v328 = v299 == v317;
                            if (v299 == v317) {
                              float32x2_t v329 = v316;
                            }
                            else {
                              float32x2_t v329 = *(float32x2_t *)&v529[0];
                            }
                            if (!v328) {
                              float32x2_t v326 = v316;
                            }
                            *uint64_t v327 = v329;
                            v327[1] = v326;
                            int8x8_t v330 = (int8x8_t)vceqd_s64(v299, *v321);
                            uint64_t v331 = (int8x8_t *)(*(void *)&v303 + 16 * v305[1]);
                            *uint64_t v331 = vbsl_s8(v330, (int8x8_t)v316, *(int8x8_t *)&v311);
                            v331[1] = vbsl_s8(v330, *(int8x8_t *)((char *)&v311 + 8), (int8x8_t)v316);
                          }
                        }
                      }
                      if (v535) {
                        operator delete(v535);
                      }
                      if (__p) {
                        operator delete(__p);
                      }
LABEL_339:
                      operator delete(v305);
                      goto LABEL_340;
                    }
LABEL_464:
                    sub_25B5938E4(v17, (long long **)&v532);
                    if (v532) {
                      operator delete(v532);
                    }
                    uint64_t v218 = *(const void **)(v17 + 136);
                    uint64_t v219 = *(void *)(v17 + 144);
                    unint64_t v220 = (v219 - (uint64_t)v218) >> 4;
                  }
                  float v453 = *(float *)(v17 + 88);
                  float v454 = *(float *)(v17 + 92);
                  float v455 = *(float *)(v17 + 96);
                  v508[0] = 0;
                  v508[1] = 0;
                  *(void *)&long long v509 = 0;
                  sub_25B40F7EC(v508, v218, v219, v220);
                  if (v220 == 1)
                  {
LABEL_501:
                    sub_25B5938E4(v17, (long long **)v508);
                    if (v508[0]) {
                      operator delete(v508[0]);
                    }
                    goto LABEL_503;
                  }
                  uint64_t v456 = 0;
                  int v491 = (char *)v508[0];
                  uint64_t v499 = 16;
                  while (1)
                  {
                    uint64_t v494 = v456 + 1;
                    if (v456 + 1 < v220) {
                      break;
                    }
LABEL_500:
                    ++v456;
                    v499 += 16;
                    if (v494 == v220 - 1) {
                      goto LABEL_501;
                    }
                  }
                  long long v457 = (float32x2_t *)(*(void *)(v17 + 136) + 16 * v456);
                  uint64_t v458 = v456 + 1;
                  int v488 = &v491[16 * v456];
                  uint64_t v459 = v499;
                  while (1)
                  {
                    uint64_t v460 = *(void *)(v17 + 136);
                    float v461 = sub_25B3FCCE0(v457, (float32x2_t *)(v460 + v459), 0);
                    if ((float)(180.0 - v461) < v461) {
                      float v461 = 180.0 - v461;
                    }
                    if (v461 < v454) {
                      goto LABEL_499;
                    }
                    int32x2_t v463 = (int32x2_t)vsub_f32(v457[1], *v457);
                    float32x2_t v464 = *(float32x2_t *)(v460 + v459);
                    float32x2_t v465 = vsub_f32(*(float32x2_t *)(v460 + v459 + 8), v464);
                    *(float *)v462.i32 = -*(float *)&v463.i32[1];
                    float32x2_t v466 = (float32x2_t)vzip1_s32(v462, v463);
                    int32x2_t v467 = (int32x2_t)vmul_f32(v465, v466);
                    if (vaddv_f32((float32x2_t)v467) == 0.0) {
                      goto LABEL_499;
                    }
                    int32x2_t v468 = (int32x2_t)vmul_f32(vsub_f32(*v457, v464), v466);
                    float32x2_t v469 = vmla_n_f32(v464, v465, vdiv_f32(vadd_f32((float32x2_t)v468, (float32x2_t)vdup_lane_s32(v468, 1)), vadd_f32((float32x2_t)v467, (float32x2_t)vdup_lane_s32(v467, 1))).f32[0]);
                    long long v532 = (double *)v469;
                    LODWORD(__p) = 0;
                    WORD2(__p) = 0;
                    LODWORD(v519) = 0;
                    LODWORD(v535) = 0;
                    WORD2(v535) = 0;
                    LODWORD(v536) = 0;
                    sub_25B594B20((void *)v17, (float32x2_t *)&v532, v456, (uint64_t)&__p, v453);
                    sub_25B594B20((void *)v17, (float32x2_t *)&v532, v458, (uint64_t)&v535, v453);
                    float v470 = *(float *)&__p;
                    float v471 = *(float *)&v535;
                    int v472 = BYTE4(__p);
                    int v473 = BYTE4(v535);
                    if (*(float *)&__p >= v453 || *(float *)&v535 >= v453 || !BYTE4(__p) || !BYTE4(v535)) {
                      goto LABEL_484;
                    }
                    uint64_t v474 = (int)v536;
                    uint64_t v475 = *(float32x2_t **)(v500 + 136);
                    long long v476 = *(float32x2_t **)(v500 + 144);
                    uint64_t v477 = (float32x2_t *)((char *)v475 + v459);
                    if (v536) {
                      uint64_t v477 = (float32x2_t *)((char *)v475 + v459 + 8);
                    }
                    if (v456 == (int)sub_25B594A6C(*(float32x2_t **)(v500 + 136), *(float32x2_t **)(v500 + 144), v458, *v477)&& (uint64_t v487 = (int)v519, v458 == (int)sub_25B594A6C(v475, v476, v456, v475[2 * v456 + (v519 != 0)])))
                    {
                      *(float32x2_t *)&v488[8 * v487] = v469;
                      long long v478 = (float32x2_t *)&v491[8 * v474 + v459];
                      uint64_t v17 = v500;
                    }
                    else
                    {
LABEL_484:
                      uint64_t v17 = v500;
                      if (BYTE5(__p) || v470 <= v455 || !v473 || v471 >= v453) {
                        goto LABEL_518;
                      }
                      uint64_t v479 = (int)v536;
                      std::string::size_type v480 = *(float32x2_t **)(v500 + 136);
                      BOOL v481 = (float32x2_t *)((char *)v480 + v459);
                      if (v536) {
                        BOOL v481 = (float32x2_t *)((char *)v480 + v459 + 8);
                      }
                      if (v456 == (int)sub_25B594A6C(v480, *(float32x2_t **)(v500 + 144), v458, *v481))
                      {
                        long long v478 = (float32x2_t *)&v491[16 * v458 + 8 * v479];
                      }
                      else
                      {
LABEL_518:
                        if (v470 >= v453) {
                          goto LABEL_499;
                        }
                        if (BYTE5(v535)) {
                          goto LABEL_499;
                        }
                        if (v471 <= v455) {
                          goto LABEL_499;
                        }
                        if (!v472) {
                          goto LABEL_499;
                        }
                        uint64_t v482 = (int)v519;
                        if (v458 != (int)sub_25B594A6C(*(float32x2_t **)(v500 + 136), *(float32x2_t **)(v500 + 144), v456, *(float32x2_t *)(*(void *)(v500 + 136)+ 16 * v456+ 8 * (v519 != 0))))goto LABEL_499; {
                        long long v478 = (float32x2_t *)&v488[8 * v482];
                        }
                      }
                    }
                    float32x2_t *v478 = v469;
LABEL_499:
                    ++v458;
                    v459 += 16;
                    if (v220 == v458) {
                      goto LABEL_500;
                    }
                  }
                }
              }
              else
              {
                uint64_t v138 = (float *)v501;
                unint64_t v139 = (double *)v531;
                do
                {
                  double v140 = *v139++;
                  float v141 = v140;
                  *v138++ = v141;
                  --v136;
                }
                while (v136);
              }
              free(v137);
              goto LABEL_120;
            }
            memcpy(v161, v128, 8 * SDWORD2(v524) * (uint64_t)SHIDWORD(v524));
LABEL_107:
            free(v128);
            goto LABEL_108;
          }
LABEL_106:
          if (!v128) {
            goto LABEL_108;
          }
          goto LABEL_107;
        }
        if (__dst && v128) {
          memcpy(__dst, v128, 8 * SDWORD2(v524) * (uint64_t)SHIDWORD(v524));
        }
LABEL_105:
        *((void *)&v524 + 1) = v126 | 0x100000000;
        goto LABEL_106;
      }
    }
    else
    {
      long long v128 = 0;
    }
    if (__dst)
    {
      free(__dst);
      std::string __dst = 0;
    }
    goto LABEL_105;
  }
  if (a5 != a2)
  {
    unint64_t v9 = v8 >> 4;
    uint64_t v10 = (uint64_t)a5[2];
    float32x2_t v11 = (char *)*a5;
    if (v8 >> 4 <= (unint64_t)((v10 - (uint64_t)*a5) >> 4))
    {
      unint64_t v107 = a5[1];
      float32x2_t v15 = (void **)(a5 + 1);
      unint64_t v108 = ((char *)v107 - v11) >> 4;
      if (v108 < v9)
      {
        int v109 = &v7[v108];
        if (v107 != (long long *)v11)
        {
          memmove(v11, *a2, (char *)v107 - v11);
          float32x2_t v11 = (char *)*v15;
        }
        int64_t v8 = (char *)v6 - (char *)v109;
        if (v6 == v109) {
          goto LABEL_73;
        }
        int v110 = v11;
        float v111 = v109;
        goto LABEL_72;
      }
    }
    else
    {
      if (v11)
      {
        a5[1] = (long long *)v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      uint64_t v13 = v10 >> 3;
      if (v10 >> 3 <= v9) {
        uint64_t v13 = v8 >> 4;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      sub_25B40F000(a5, v14);
      float32x2_t v16 = (char *)a5[1];
      float32x2_t v15 = (void **)(a5 + 1);
      float32x2_t v11 = v16;
    }
    if (v6 == v7)
    {
LABEL_73:
      *float32x2_t v15 = &v11[v8];
      return;
    }
    int v110 = v11;
    float v111 = v7;
LABEL_72:
    memmove(v110, v111, v8);
    goto LABEL_73;
  }
}

void sub_25B598AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,char a55)
{
  operator delete(v55);
  operator delete(v56);
  float v59 = *(void **)(v57 - 208);
  if (v59) {
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

void *sub_25B598D84(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40040C(a1, a2);
    float32x2_t v6 = (void *)a1[1];
    __float2 v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B598DEC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25B598E08(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  vDSP_Length v4 = *((int *)a3 + 1) * (uint64_t)*(int *)a3;
  if (v4)
  {
    float32x2_t v5 = (double *)malloc_type_malloc(8 * (int)v4, 0x100004000313F17uLL);
    float32x2_t v6 = v5;
    if (v5) {
      bzero(v5, 8 * (int)v4);
    }
  }
  else
  {
    float32x2_t v6 = 0;
  }
  __float2 v7 = (const double *)a3[1];
  if (v7)
  {
    if (v6)
    {
      uint64_t v8 = *(const double **)(a2 + 16);
      if (v8) {
        vDSP_vsubD(v8, 1, v7, 1, v6, 1, *((int *)a3 + 1) * (uint64_t)*(int *)a3);
      }
    }
  }
  if (v4)
  {
    unint64_t v9 = (double *)malloc_type_malloc(8 * v4, 0x100004000313F17uLL);
    uint64_t v10 = v9;
    if (v9)
    {
      bzero(v9, 8 * v4);
      if ((int)v4 >= 1 && v6 != 0)
      {
        uint64_t v12 = 0;
        do
        {
          if (v6[v12] < 0.0) {
            double v13 = 0.0;
          }
          else {
            double v13 = 1.0;
          }
          v10[v12++] = v13;
        }
        while (v4 != v12);
      }
    }
  }
  else
  {
    vDSP_Length v4 = 0;
    uint64_t v10 = 0;
  }
  __C = 0;
  vDSP_sveD(v10, 1, (double *)&__C, v4);
  int v14 = (int)*(double *)&__C;
  vDSP_Length v15 = *((int *)a3 + 1) * (uint64_t)*(int *)a3;
  if (v15 == (int)*(double *)&__C)
  {
    if (v14)
    {
      float32x2_t v16 = (double *)malloc_type_malloc(8 * v15, 0x100004000313F17uLL);
      uint64_t v17 = v16;
      if (v16) {
        bzero(v16, 8 * v15);
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v19 = (const double *)a3[1];
    if (v19)
    {
      long long v20 = *(const double **)(a2 + 32);
      if (v20)
      {
        if (v17) {
          vDSP_vsubD(v20, 1, v19, 1, v17, 1, *((int *)a3 + 1) * (uint64_t)*(int *)a3);
        }
      }
    }
    if (v14)
    {
      long long v21 = (double *)malloc_type_malloc(8 * v15, 0x100004000313F17uLL);
      long long v22 = v21;
      if (v21)
      {
        bzero(v21, 8 * v15);
        if (v14 >= 1 && v17 != 0)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (v17[i] > 0.0) {
              double v25 = 0.0;
            }
            else {
              double v25 = 1.0;
            }
            v22[i] = v25;
          }
        }
      }
    }
    else
    {
      long long v22 = 0;
    }
    __C = 0;
    vDSP_sveD(v22, 1, (double *)&__C, v15);
    BOOL v18 = *((_DWORD *)a3 + 1) * *(_DWORD *)a3 == (int)*(double *)&__C;
    if (v22) {
      free(v22);
    }
    if (v17) {
      free(v17);
    }
  }
  else
  {
    BOOL v18 = 0;
  }
  if (v10) {
    free(v10);
  }
  if (v6) {
    free(v6);
  }
  if (!v18) {
    return 0;
  }
  uint64_t v26 = *(unsigned int *)a3;
  *(_DWORD *)(a1 + 136) = v26;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  if (!v26)
  {
    uint64_t v28 = 0;
    unint64_t v534 = (unsigned int *)(a1 + 96);
LABEL_65:
    unint64_t v34 = *(void **)(a1 + 104);
    if (v34)
    {
      free(v34);
      *(void *)(a1 + 104) = 0;
    }
    *(_DWORD *)(a1 + 96) = v26;
    unint64_t v30 = (int *)(a1 + 100);
    goto LABEL_68;
  }
  uint64_t v27 = malloc_type_malloc(8 * (int)v26, 0x100004000313F17uLL);
  uint64_t v28 = v27;
  if (v27) {
    bzero(v27, 8 * (int)v26);
  }
  unint64_t v534 = (unsigned int *)(a1 + 96);
  if ((int)v26 < 1) {
    goto LABEL_65;
  }
  unint64_t v30 = (int *)(a1 + 100);
  int v29 = *(_DWORD *)(a1 + 100);
  int v31 = *(_DWORD *)(a1 + 96);
  uint64_t v32 = *(void **)(a1 + 104);
  if (v29 * v31 == v26)
  {
    if (v32 && v28) {
      memcpy(v32, v28, 8 * v31 * (uint64_t)v29);
    }
    unsigned int *v534 = v26;
LABEL_68:
    *unint64_t v30 = 1;
    goto LABEL_69;
  }
  if (v32)
  {
    free(v32);
    *(void *)(a1 + 104) = 0;
  }
  unsigned int *v534 = v26;
  *unint64_t v30 = 1;
  long long v529 = malloc_type_malloc(8 * v26, 0x100004000313F17uLL);
  *(void *)(a1 + 104) = v529;
  if (!v529)
  {
LABEL_69:
    if (!v28) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v28)
  {
    memcpy(v529, v28, 8 * (int)*v534 * (uint64_t)*v30);
LABEL_70:
    free(v28);
  }
LABEL_71:
  BOOL v35 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  uint64_t v36 = v35;
  if (v35) {
    *BOOL v35 = 0;
  }
  int v37 = *(_DWORD *)(a1 + 112);
  int v38 = *(_DWORD *)(a1 + 116);
  long long v544 = (double *)(a1 + 112);
  int v39 = *(void **)(a1 + 120);
  if (v38 * v37 == 1)
  {
    if (v39 && v36) {
      memcpy(v39, v36, 8 * v37 * (uint64_t)v38);
    }
    *(void *)long long v544 = 0x100000001;
    goto LABEL_83;
  }
  if (v39)
  {
    free(v39);
    *(void *)(a1 + 120) = 0;
  }
  *(void *)long long v544 = 0x100000001;
  float32x2_t v40 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  *(void *)(a1 + 120) = v40;
  if (!v40)
  {
LABEL_83:
    if (v36) {
      goto LABEL_84;
    }
    goto LABEL_85;
  }
  if (v36)
  {
    memcpy(v40, v36, 8 * *(int *)(a1 + 112) * (uint64_t)*(int *)(a1 + 116));
LABEL_84:
    free(v36);
  }
LABEL_85:
  int v41 = *(_DWORD *)(a1 + 136);
  unint64_t v599 = 0;
  int v597 = v41;
  signed int v598 = 0;
  uint64_t v596 = 0;
  unsigned int v594 = v41;
  unsigned int v595 = 0;
  sub_25B59EAEC((uint64_t)&v592, (int *)a3);
  sub_25B59EAEC((uint64_t)&v590, (int *)a3);
  double v536 = (*(double (**)(uint64_t, unint64_t *))(*(void *)a2 + 24))(a2, &v592);
  (*(void (**)(uint64_t, unint64_t *, double **))(*(void *)a2 + 32))(a2, &v592, &v590);
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v533 = a1 + 8;
  *(_OWORD *)(a1 + 76) = 0u;
  int64_t v538 = (void *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v581 = a1;
  while ((*(unsigned int (**)(uint64_t, void *, unint64_t *))(*(void *)a2 + 16))(a2, v538, &v592))
  {
    uint64_t v42 = v592;
    uint64_t v43 = HIDWORD(v592);
    int v44 = HIDWORD(v592) * v592;
    if (HIDWORD(v592) * v592)
    {
      float32x2_t v45 = (double *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
      BOOL v46 = v45;
      if (v45) {
        bzero(v45, 8 * v44);
      }
    }
    else
    {
      BOOL v46 = 0;
    }
    if (__A && __B && v46) {
      vDSP_vsubD(__B, 1, __A, 1, v46, 1, SHIDWORD(v592) * (uint64_t)(int)v592);
    }
    if (v44)
    {
      float v47 = (double *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
      int32x2_t v48 = v47;
      if (v47) {
        bzero(v47, 8 * v44);
      }
    }
    else
    {
      int32x2_t v48 = 0;
    }
    if (v46)
    {
      float32x2_t v49 = *(double **)(a2 + 16);
      if (v49)
      {
        if (v48 && (int)v42 >= 1)
        {
          uint64_t v50 = 0;
          uint64_t v51 = 8 * *(int *)(a2 + 12);
          uint64_t v52 = 8 * (int)v43;
          float32x2_t v53 = v46;
          float32x2_t v54 = v48;
          do
          {
            float32x2_t v55 = v53;
            int32x2_t v56 = v54;
            uint64_t v57 = v49;
            uint64_t v58 = v43;
            if ((int)v43 >= 1)
            {
              do
              {
                double v59 = *v55++;
                double v60 = v59;
                double v61 = *v57++;
                double v62 = v61;
                if (v60 < v61) {
                  double v60 = v62;
                }
                *v56++ = v60;
                --v58;
              }
              while (v58);
            }
            ++v50;
            float32x2_t v49 = (double *)((char *)v49 + v51);
            float32x2_t v54 = (double *)((char *)v54 + v52);
            float32x2_t v53 = (double *)((char *)v53 + v52);
          }
          while (v50 != v42);
        }
      }
    }
    if (!v44)
    {
      BOOL v64 = 0;
      if (!v48) {
        goto LABEL_124;
      }
LABEL_115:
      uint64_t v65 = *(double **)(a2 + 32);
      if (v65 && v64 && (int)v42 >= 1)
      {
        uint64_t v66 = 0;
        uint64_t v67 = 8 * *(int *)(a2 + 28);
        uint64_t v68 = 8 * (int)v43;
        uint64_t v69 = v48;
        int v70 = v64;
        do
        {
          uint64_t v71 = v69;
          unint64_t v72 = v70;
          unint64_t v73 = v65;
          uint64_t v74 = v43;
          if ((int)v43 >= 1)
          {
            do
            {
              double v75 = *v73++;
              double v76 = v75;
              double v77 = *v71++;
              double v78 = v77;
              if (v76 >= v77) {
                double v76 = v78;
              }
              *v72++ = v76;
              --v74;
            }
            while (v74);
          }
          ++v66;
          uint64_t v65 = (double *)((char *)v65 + v67);
          int v70 = (double *)((char *)v70 + v68);
          uint64_t v69 = (double *)((char *)v69 + v68);
        }
        while (v66 != v42);
      }
      goto LABEL_124;
    }
    long long v63 = (double *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
    BOOL v64 = v63;
    if (v63) {
      bzero(v63, 8 * v44);
    }
    if (v48) {
      goto LABEL_115;
    }
LABEL_124:
    if (v44)
    {
      double v79 = (double *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
      int v80 = v79;
      if (v79) {
        bzero(v79, 8 * v44);
      }
      if (!v64)
      {
LABEL_134:
        if (!v48) {
          goto LABEL_136;
        }
LABEL_135:
        free(v48);
        goto LABEL_136;
      }
    }
    else
    {
      int v80 = 0;
      if (!v64) {
        goto LABEL_134;
      }
    }
    if (__A && v80) {
      vDSP_vsubD(__A, 1, v64, 1, v80, 1, v44);
    }
    free(v64);
    if (v48) {
      goto LABEL_135;
    }
LABEL_136:
    if (v46) {
      free(v46);
    }
    if (v80) {
      vDSP_vabsD(v80, 1, v80, 1, v44);
    }
    __C = 0;
    vDSP_sveD(v80, 1, (double *)&__C, v44);
    int v81 = __C;
    *(void *)(a1 + 56) = __C;
    double v82 = *(double *)(a1 + 16);
    if (v80) {
      free(v80);
    }
    if (*(double *)&v81 < v82 || *(_DWORD *)(a1 + 88)) {
      break;
    }
    sub_25B59EAEC((uint64_t)v588, (int *)&v592);
    sub_25B59EAEC((uint64_t)v586, (int *)&v590);
    uint64_t v83 = *(int *)(a1 + 136);
    if (v83)
    {
      int v84 = (double *)malloc_type_malloc(8 * v83, 0x100004000313F17uLL);
      float v85 = v84;
      if (v84) {
        bzero(v84, 8 * v83);
      }
    }
    else
    {
      float v85 = 0;
    }
    uint64_t v86 = *(int *)(v581 + 100);
    if (v86 && (uint64_t v87 = malloc_type_malloc(8 * v86, 0x100004000313F17uLL)) != 0)
    {
      unint64_t v88 = v87;
      bzero(v87, 8 * v86);
    }
    else
    {
      unint64_t v88 = 0;
    }
    unint64_t v89 = v592;
    __C = 0;
    uint64_t v603 = 0;
    unint64_t v604 = 0;
    sub_25B59F044((uint64_t)&v613, (int *)&v590, -1.0);
    if ((int)v89 <= 0)
    {
      uint64_t v90 = v603;
    }
    else
    {
      uint64_t v90 = 0;
      for (uint64_t j = 0; j != v89; ++j)
      {
        double v92 = __B[j];
        if (v92 == 0.0)
        {
          if ((unint64_t)v90 >= v604)
          {
            uint64_t v95 = ((char *)v90 - (char *)__C) >> 4;
            if ((unint64_t)(v95 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            unint64_t v96 = (uint64_t)(v604 - (void)__C) >> 3;
            if (v96 <= v95 + 1) {
              unint64_t v96 = v95 + 1;
            }
            if (v604 - (unint64_t)__C >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v96;
            }
            if (v97) {
              unint64_t v97 = (unint64_t)sub_25B3FFAEC(v97);
            }
            else {
              uint64_t v98 = 0;
            }
            int v103 = (double *)(v97 + 16 * v95);
            *(void *)int v103 = j;
            v103[1] = 1.79769313e308;
            uint64_t v105 = __C;
            size_t v104 = v603;
            unint64_t v106 = v103;
            if (v603 != __C)
            {
              do
              {
                *((_OWORD *)v106 - 1) = *((_OWORD *)v104 - 1);
                v106 -= 2;
                v104 -= 2;
              }
              while (v104 != v105);
              size_t v104 = __C;
            }
            uint64_t v90 = v103 + 2;
            __C = v106;
            uint64_t v603 = v103 + 2;
            unint64_t v604 = v97 + 16 * v98;
            if (v104) {
              operator delete(v104);
            }
          }
          else
          {
            *(void *)uint64_t v90 = j;
            v90[1] = 1.79769313e308;
            v90 += 2;
          }
          uint64_t v603 = v90;
        }
        else
        {
          uint64_t v93 = (void *)(a2 + 32);
          if (v92 >= 0.0) {
            uint64_t v93 = (void *)(a2 + 16);
          }
          double v94 = (__A[j] - *(double *)(*v93 + 8 * j)) / v92;
          if ((unint64_t)v90 >= v604)
          {
            uint64_t v99 = ((char *)v90 - (char *)__C) >> 4;
            if ((unint64_t)(v99 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            unint64_t v100 = (uint64_t)(v604 - (void)__C) >> 3;
            if (v100 <= v99 + 1) {
              unint64_t v100 = v99 + 1;
            }
            if (v604 - (unint64_t)__C >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v101 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v101 = v100;
            }
            if (v101) {
              unint64_t v101 = (unint64_t)sub_25B3FFAEC(v101);
            }
            else {
              uint64_t v102 = 0;
            }
            unint64_t v107 = (double *)(v101 + 16 * v99);
            *(void *)unint64_t v107 = j;
            v107[1] = v94;
            int v109 = __C;
            unint64_t v108 = v603;
            int v110 = v107;
            if (v603 != __C)
            {
              do
              {
                *((_OWORD *)v110 - 1) = *((_OWORD *)v108 - 1);
                v110 -= 2;
                v108 -= 2;
              }
              while (v108 != v109);
              unint64_t v108 = __C;
            }
            uint64_t v90 = v107 + 2;
            __C = v110;
            uint64_t v603 = v107 + 2;
            unint64_t v604 = v101 + 16 * v102;
            if (v108) {
              operator delete(v108);
            }
          }
          else
          {
            *(void *)uint64_t v90 = j;
            v90[1] = v94;
            v90 += 2;
          }
          uint64_t v603 = v90;
          if (v94 == 0.0) {
            v614[j] = 0.0;
          }
        }
      }
    }
    sub_25B444638(&__p, ((char *)v90 - (char *)__C) >> 4);
    float v111 = (int *)__p;
    uint64_t v112 = (int *)v601;
    unint64_t v113 = ((char *)v601 - (unsigned char *)__p) >> 2;
    if (v601 != __p)
    {
      int v114 = __C;
      float v115 = __p;
      int64_t v116 = ((char *)v601 - (unsigned char *)__p) >> 2;
      do
      {
        int v117 = *(_DWORD *)v114;
        v114 += 2;
        *v115++ = v117;
        --v116;
      }
      while (v116);
    }
    vDSP_Length __M = (vDSP_Length)&__C;
    unint64_t v118 = 126 - 2 * __clz(v113);
    if (v112 == v111) {
      uint64_t v119 = 0;
    }
    else {
      uint64_t v119 = v118;
    }
    sub_25B59FDE0((uint64_t)v111, v112, (uint64_t **)&__M, v119, 1);
    unsigned int v539 = HIDWORD(v592);
    int v545 = v592;
    int v120 = HIDWORD(v592) * v592;
    if (HIDWORD(v592) * (int)v592 < 1)
    {
      if (!v85) {
        goto LABEL_214;
      }
      free(v85);
      float v85 = 0;
      goto LABEL_208;
    }
    if (v83 == v120)
    {
      if (v85 && __A)
      {
        memcpy(v85, __A, 8 * v83);
LABEL_208:
        unsigned int v539 = HIDWORD(v592);
        int v545 = v592;
      }
    }
    else
    {
      if (v85)
      {
        free(v85);
        unsigned int v539 = HIDWORD(v592);
        int v545 = v592;
        int v120 = HIDWORD(v592) * v592;
      }
      float v121 = (double *)malloc_type_malloc(8 * v120, 0x100004000313F17uLL);
      float v85 = v121;
      if (v121 && __A) {
        memcpy(v121, __A, 8 * v545 * (uint64_t)(int)v539);
      }
    }
LABEL_214:
    unsigned int v122 = *(_DWORD *)(v581 + 100);
    int v123 = *(_DWORD *)(v581 + 96) * v122;
    if (v123)
    {
      int v124 = (double *)malloc_type_malloc(8 * v123, 0x100004000313F17uLL);
      int64_t v125 = v124;
      if (v124) {
        bzero(v124, 8 * v123);
      }
    }
    else
    {
      int64_t v125 = 0;
    }
    unint64_t v126 = *(const double **)(v581 + 104);
    __long long src = v85;
    if (v126 && (v128 = *(int *)(v581 + 96), vDSP_Length v127 = *(int *)(v581 + 100), v127 * v128) && v125)
    {
      if (v123)
      {
        if (v128 == 1 || v127 == 1) {
          cblas_dcopy_NEWLAPACK();
        }
        else {
          vDSP_mtransD(v126, 1, v125, 1, v127, v128);
        }
      }
    }
    else if (!v125)
    {
      uint64_t v612 = 0;
      vDSP_Length __M = 0;
      goto LABEL_233;
    }
    if (v614)
    {
      uint64_t v612 = 0;
      vDSP_Length __M = __PAIR64__(v613.u32[1], v122);
      if (v613.i32[1] * v122)
      {
        size_t v129 = 8 * (int)(v613.i32[1] * v122);
        uint64_t v130 = (double *)malloc_type_malloc(v129, 0x100004000313F17uLL);
        uint64_t v612 = v130;
        if (v130)
        {
          bzero(v130, v129);
          cblas_dgemm_NEWLAPACK();
        }
      }
    }
    else
    {
      uint64_t v612 = 0;
      vDSP_Length __M = 0;
    }
    free(v125);
LABEL_233:
    unsigned int v131 = *(_DWORD *)(v581 + 100);
    vDSP_Length v132 = (int)v131;
    uint64_t v537 = v131;
    if (!v131)
    {
      BOOL v134 = 0;
LABEL_242:
      if (v88)
      {
        free(v88);
        unint64_t v88 = 0;
      }
      goto LABEL_244;
    }
    uint64_t v133 = malloc_type_malloc(8 * (int)v131, 0x100004000313F17uLL);
    BOOL v134 = v133;
    if (v133) {
      bzero(v133, 8 * v132);
    }
    if ((int)v132 < 1) {
      goto LABEL_242;
    }
    if (v86 == v132)
    {
      if (v88 && v134)
      {
        size_t v135 = 8 * v86;
        uint64_t v136 = v88;
        int v137 = v134;
LABEL_251:
        memcpy(v136, v137, v135);
LABEL_252:
        free(v134);
        goto LABEL_253;
      }
    }
    else
    {
      if (v88) {
        free(v88);
      }
      uint64_t v136 = malloc_type_malloc(8 * v537, 0x100004000313F17uLL);
      unint64_t v88 = v136;
      if (v136)
      {
        if (!v134) {
          goto LABEL_253;
        }
        int v137 = v134;
        size_t v135 = 8 * v132;
        goto LABEL_251;
      }
    }
LABEL_244:
    if (v134) {
      goto LABEL_252;
    }
LABEL_253:
    double v138 = sub_25B59F0CC((int *)&v613, (uint64_t)&v613);
    double v139 = *(double *)(v581 + 128);
    vDSP_Length v542 = v132;
    if (*(void *)(v581 + 120) && v612)
    {
      unsigned int v140 = *(_DWORD *)v544;
      char v610 = 0;
      *(double *)&vDSP_Length v609 = COERCE_DOUBLE(__PAIR64__(HIDWORD(__M), v140));
      if (HIDWORD(__M) * v140)
      {
        size_t v141 = 8 * (int)(HIDWORD(__M) * v140);
        uint64_t v142 = (double *)malloc_type_malloc(v141, 0x100004000313F17uLL);
        unint64_t v143 = v142;
        char v610 = v142;
        if (v142)
        {
          bzero(v142, v141);
          cblas_dgemm_NEWLAPACK();
        }
        vDSP_Length v132 = v542;
      }
      else
      {
        unint64_t v143 = 0;
      }
    }
    else
    {
      unint64_t v143 = 0;
      char v610 = 0;
      *(double *)&vDSP_Length v609 = 0.0;
    }
    double v144 = sub_25B59F0CC((int *)&__M, (uint64_t)&v609);
    if (v143) {
      free(v143);
    }
    if ((int)v89 < 1)
    {
      uint64_t v146 = 0;
    }
    else
    {
      unint64_t v145 = 0;
      do
      {
        LODWORD(v146) = v145;
        double v147 = __C[2 * *((int *)__p + v145++) + 1];
      }
      while (v147 <= 0.0 && v145 < v89);
      uint64_t v146 = v146;
    }
    double v149 = fmax(-(v144 - v139 * v138), 2.22044605e-16);
    uint64_t v150 = *((int *)__p + v146);
    double v151 = v138 / v149;
    double v152 = __C[2 * v150 + 1];
    double v153 = 0.0;
    if (v138 / v149 < v152 || (int)v146 >= (int)v89)
    {
      unint64_t v155 = (double *)v88;
      goto LABEL_416;
    }
    double v156 = -v138;
    uint64_t v540 = (int)v89;
    double v541 = v149 * 2.22044605e-16;
    uint64_t size = 8 * v132;
    uint64_t v157 = v146 + 1;
    double v158 = __C[2 * v150 + 1];
    uint64_t v159 = v150;
    unint64_t v155 = (double *)v88;
    do
    {
      double v153 = v158;
      uint64_t v160 = v157;
      uint64_t v161 = (int)v159;
      double v162 = v614[(int)v159];
      double v560 = v149;
      if (v162 <= 0.0)
      {
        if (v162 >= 0.0)
        {
          double v164 = __src[(int)v159];
          goto LABEL_283;
        }
        uint64_t v163 = *(void *)(a2 + 16);
      }
      else
      {
        uint64_t v163 = *(void *)(a2 + 32);
      }
      double v164 = *(double *)(v163 + 8 * (int)v159);
      __src[(int)v159] = v164;
LABEL_283:
      double v165 = __A[(int)v159];
      sub_25B59F044((uint64_t)&v609, (int *)&__M, v152);
      if (v132)
      {
        uint64_t v166 = (double *)malloc_type_malloc(size, 0x100004000313F17uLL);
        float v167 = v166;
        if (v166) {
          bzero(v166, size);
        }
        if (!v155)
        {
LABEL_294:
          if ((int)v132 <= 0) {
            unint64_t v155 = 0;
          }
          if (v167) {
            goto LABEL_300;
          }
          goto LABEL_301;
        }
      }
      else
      {
        float v167 = 0;
        if (!v155) {
          goto LABEL_294;
        }
      }
      if (v610 && v167) {
        vDSP_vaddD(v155, 1, v610, 1, v167, 1, v132);
      }
      if ((int)v132 <= 0)
      {
        free(v155);
        unint64_t v155 = 0;
        if (v167) {
          goto LABEL_300;
        }
      }
      else if (v167)
      {
        memcpy(v155, v167, size);
LABEL_300:
        free(v167);
      }
LABEL_301:
      if (v610) {
        free(v610);
      }
      unsigned int v168 = *(_DWORD *)(v581 + 100);
      uint64_t v169 = *(void *)(v581 + 104);
      if (v169)
      {
        uint64_t v170 = 0;
        if ((v159 & 0x80000000) == 0 && *(_DWORD *)(v581 + 96) > (int)v159) {
          uint64_t v170 = (const void *)(v169 + 8 * (int)(v168 * v159));
        }
      }
      else
      {
        uint64_t v170 = 0;
      }
      uint64_t v551 = v159;
      uint64_t v552 = v160;
      if (v168)
      {
        uint64_t v171 = malloc_type_malloc(8 * (int)v168, 0x100004000313F17uLL);
        uint64_t v172 = v171;
        if (v170 && v171) {
          memcpy(v171, v170, 8 * (int)v168);
        }
      }
      else
      {
        uint64_t v172 = 0;
      }
      int v173 = 0;
      int v174 = 0;
      double v175 = __B[(int)v159];
      double v176 = *(double *)(v581 + 128);
      char v177 = 1;
      float32x2_t v178 = 0;
      if (*(void *)(v581 + 120) && v155)
      {
        uint64_t v179 = *(int *)v544;
        if (!v179)
        {
          int v174 = 0;
LABEL_325:
          int v173 = 0;
          float32x2_t v178 = 0;
          goto LABEL_326;
        }
        float v180 = malloc_type_malloc(8 * v179, 0x100004000313F17uLL);
        int v174 = v180;
        if (!v180) {
          goto LABEL_325;
        }
        bzero(v180, 8 * v179);
        cblas_dgemm_NEWLAPACK();
        if (!v172)
        {
          char v177 = 0;
          goto LABEL_325;
        }
        float32x2_t v181 = (double *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
        float32x2_t v178 = v181;
        int v173 = 1;
        if (v181)
        {
          double *v181 = 0.0;
          cblas_dgemm_NEWLAPACK();
        }
        char v177 = 0;
      }
LABEL_326:
      *(double *)&vDSP_Length v609 = 0.0;
      long long v563 = v155;
      __N = v172;
      vDSP_sveD(v178, 1, (double *)&v609, (v173 * v173));
      double v549 = *(double *)&v609;
      if (v178) {
        free(v178);
      }
      if ((v177 & 1) == 0) {
        free(v174);
      }
      int v182 = 0;
      uint64_t v183 = 0;
      double v556 = *(double *)(v581 + 128);
      double v184 = __B[v161];
      unint64_t v185 = v612;
      char v186 = 1;
      int v187 = 0;
      float32x2_t v188 = 0;
      if (*(void *)(v581 + 120) && v612)
      {
        int v187 = HIDWORD(__M);
        int v189 = HIDWORD(__M) * *(_DWORD *)v544;
        if (!v189)
        {
          uint64_t v183 = 0;
LABEL_341:
          int v182 = 0;
          int v187 = 0;
          float32x2_t v188 = 0;
          goto LABEL_345;
        }
        size_t v190 = 8 * v189;
        uint64_t v191 = malloc_type_malloc(v190, 0x100004000313F17uLL);
        uint64_t v183 = v191;
        if (v191)
        {
          bzero(v191, v190);
          cblas_dgemm_NEWLAPACK();
          if (!v172)
          {
            char v186 = 0;
            goto LABEL_341;
          }
          if (!v187)
          {
            char v186 = 0;
            float32x2_t v188 = 0;
LABEL_344:
            int v182 = 1;
            goto LABEL_345;
          }
          unint64_t v192 = (double *)malloc_type_malloc(8 * v187, 0x100004000313F17uLL);
          float32x2_t v188 = v192;
          if (!v192)
          {
            char v186 = 0;
            goto LABEL_344;
          }
          bzero(v192, 8 * v187);
          int v182 = 1;
          cblas_dgemm_NEWLAPACK();
          char v186 = 0;
        }
        else
        {
          int v182 = 0;
          int v187 = 0;
          float32x2_t v188 = 0;
          char v186 = 1;
        }
      }
LABEL_345:
      double v546 = v176;
      double v547 = v175;
      double v548 = v156;
      double v193 = v152;
      double v194 = v165;
      double v195 = v164;
      *(double *)&vDSP_Length v609 = 0.0;
      std::string __dst = v183;
      vDSP_sveD(v188, 1, (double *)&v609, v187 * v182);
      double v196 = *(double *)&v609;
      double v197 = __B[v161];
      char v553 = v186;
      if (!v168 || (int v198 = malloc_type_malloc(8 * (int)v168, 0x100004000313F17uLL), (v199 = v198) == 0))
      {
        unint64_t v199 = 0;
        uint64_t v202 = 0;
        int v201 = 0;
        uint64_t v207 = 0;
        BOOL v550 = v172 == 0;
        BOOL v200 = 1;
LABEL_359:
        char v203 = 1;
        goto LABEL_363;
      }
      bzero(v198, 8 * (int)v168);
      BOOL v550 = v172 == 0;
      BOOL v200 = v199 == 0;
      if (v172 && v199) {
        cblas_dcopy_NEWLAPACK();
      }
      int v201 = 0;
      uint64_t v202 = 0;
      char v203 = 1;
      if (!*(void *)(v581 + 120) || !v199)
      {
        uint64_t v207 = 0;
        goto LABEL_363;
      }
      uint64_t v204 = *(int *)v544;
      if (!v204)
      {
        uint64_t v202 = 0;
LABEL_362:
        int v201 = 0;
        uint64_t v207 = 0;
        goto LABEL_363;
      }
      float v205 = malloc_type_malloc(8 * v204, 0x100004000313F17uLL);
      uint64_t v202 = v205;
      char v203 = (char)__N;
      if (!v205)
      {
        int v201 = 0;
        uint64_t v207 = 0;
        goto LABEL_359;
      }
      bzero(v205, 8 * v204);
      cblas_dgemm_NEWLAPACK();
      if (!__N) {
        goto LABEL_362;
      }
      float v206 = (double *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
      uint64_t v207 = v206;
      int v201 = 1;
      if (v206)
      {
        *float v206 = 0.0;
        cblas_dgemm_NEWLAPACK();
      }
      char v203 = 0;
LABEL_363:
      *(double *)&vDSP_Length v609 = 0.0;
      vDSP_sveD(v207, 1, (double *)&v609, (v201 * v201));
      double v208 = *(double *)&v609;
      if (v207) {
        free(v207);
      }
      if ((v203 & 1) == 0) {
        free(v202);
      }
      if (!v200) {
        free(v199);
      }
      if (v188) {
        free(v188);
      }
      if ((v553 & 1) == 0) {
        free(__dst);
      }
      double v209 = v560 + v184 * v196 * -2.0 + -(v556 * v184) * v184 + -(v197 * v197) * v208;
      double v210 = __B[v161];
      unint64_t v608 = 0;
      if (v541 >= v209) {
        double v149 = v541;
      }
      else {
        double v149 = v209;
      }
      uint64_t v607 = v168 | 0x100000000;
      if (!v168)
      {
        uint64_t v212 = 0;
        if (v550) {
          goto LABEL_385;
        }
LABEL_382:
        if (v168 && v212) {
          cblas_dcopy_NEWLAPACK();
        }
        goto LABEL_385;
      }
      char v211 = malloc_type_malloc(8 * (int)v168, 0x100004000313F17uLL);
      uint64_t v212 = v211;
      unint64_t v608 = v211;
      if (v211) {
        bzero(v211, 8 * (int)v168);
      }
      if (!v550) {
        goto LABEL_382;
      }
LABEL_385:
      sub_25B59F044((uint64_t)&v609, (int *)&v607, v210);
      unsigned int v213 = __M;
      unsigned int v214 = HIDWORD(__M);
      int v215 = HIDWORD(__M) * __M;
      if (HIDWORD(__M) * __M)
      {
        int v216 = (double *)malloc_type_malloc(8 * v215, 0x100004000313F17uLL);
        BOOL v217 = v216;
        if (v216) {
          bzero(v216, 8 * v215);
        }
        if (v185)
        {
          if (v610 && v217) {
            vDSP_vaddD(v185, 1, v610, 1, v217, 1, v215);
          }
          if (v215 < 1)
          {
LABEL_397:
            uint64_t v218 = __N;
            uint64_t v219 = v552;
            free(v185);
            uint64_t v612 = 0;
          }
          else
          {
            uint64_t v218 = __N;
            uint64_t v219 = v552;
            if (v217)
            {
              memcpy(v185, v217, 8 * (int)v213 * (uint64_t)(int)v214);
              vDSP_Length __M = __PAIR64__(v214, v213);
              unint64_t v155 = v563;
LABEL_400:
              free(v217);
              goto LABEL_401;
            }
          }
        }
        else
        {
          uint64_t v218 = __N;
          uint64_t v219 = v552;
        }
        vDSP_Length __M = __PAIR64__(v214, v213);
        unint64_t v155 = v563;
        if (!v217) {
          goto LABEL_401;
        }
        goto LABEL_400;
      }
      if (v185)
      {
        BOOL v217 = 0;
        goto LABEL_397;
      }
      uint64_t v218 = __N;
      uint64_t v219 = v552;
      unint64_t v155 = v563;
LABEL_401:
      vDSP_Length v132 = v542;
      uint64_t v159 = v551;
      if (v610)
      {
        free(v610);
        char v610 = 0;
      }
      *(double *)&vDSP_Length v609 = 0.0;
      if (v212) {
        free(v212);
      }
      v614[v161] = 0.0;
      double v158 = v153;
      double v152 = v193;
      if (v219 < v540)
      {
        double v158 = __C[2 * *((int *)__p + v219) + 1];
        double v152 = v158 - v153;
        uint64_t v159 = *((int *)__p + v219);
      }
      float v85 = __src;
      if (!v550) {
        free(v218);
      }
      double v156 = v548 + v547 * v547 + v193 * v560 + v547 * v546 * (v195 - v194) - v547 * v549;
      double v151 = -v156 / v149;
      uint64_t v157 = v219 + 1;
    }
    while (v151 >= v152 && v219 < v540);
    uint64_t v146 = v219;
LABEL_416:
    if (v151 < 0.0) {
      double v151 = 0.0;
    }
    if ((int)v146 < v545)
    {
      uint64_t v221 = __A;
      unint64_t v222 = v614;
      uint64_t v223 = v545 - v146;
      uint64_t v224 = (int *)((char *)__p + 4 * v146);
      do
      {
        uint64_t v225 = *v224++;
        v85[v225] = v221[v225] + (v153 + v151) * v222[v225];
        --v223;
      }
      while (v223);
    }
    sub_25B59F044((uint64_t)&v609, (int *)&__M, v151);
    if (!v537)
    {
      uint64_t v227 = 0;
      float v228 = 0;
      if (!v155) {
        goto LABEL_437;
      }
LABEL_432:
      free(v155);
      unint64_t v155 = 0;
      goto LABEL_435;
    }
    float32x2_t v226 = (double *)malloc_type_malloc(8 * v132, 0x100004000313F17uLL);
    uint64_t v227 = v226;
    if (v226) {
      bzero(v226, 8 * v132);
    }
    if (!v155)
    {
      if ((int)v132 <= 0) {
        unint64_t v155 = 0;
      }
      goto LABEL_435;
    }
    if (v610 && v227) {
      vDSP_vaddD(v155, 1, v610, 1, v227, 1, v132);
    }
    if ((int)v132 <= 0) {
      goto LABEL_432;
    }
    if (v227)
    {
      memcpy(v155, v227, 8 * v132);
      goto LABEL_436;
    }
LABEL_435:
    float v228 = v155;
    if (v227)
    {
LABEL_436:
      free(v227);
      float v228 = v155;
    }
LABEL_437:
    if (v610) {
      free(v610);
    }
    if (v612) {
      free(v612);
    }
    if (*(double *)&__p != 0.0)
    {
      v601 = (double *)__p;
      operator delete(__p);
    }
    if (v614) {
      free(v614);
    }
    if (__C)
    {
      uint64_t v603 = __C;
      operator delete(__C);
    }
    long long v557 = v228;
    if (v545 < 1)
    {
      BOOL v231 = 0;
LABEL_483:
      if ((int)(v539 * v545) < 1)
      {
        __dsta = 0;
      }
      else
      {
        __dsta = malloc_type_malloc(8 * (int)(v539 * v545), 0x100004000313F17uLL);
        if (__dsta)
        {
          if (__src) {
            memcpy(__dsta, __src, 8 * v545 * (uint64_t)(int)v539);
          }
        }
        else
        {
          __dsta = 0;
        }
      }
      goto LABEL_725;
    }
    float v229 = 0;
    unint64_t v230 = 0;
    BOOL v231 = 0;
    int8x8_t v232 = 0;
    uint64_t v233 = 0;
    double v234 = 1.0 / *(double *)(v581 + 128);
    do
    {
      double v235 = __src[v233];
      if (v235 != *(double *)(*(void *)(a2 + 32) + 8 * v233) && v235 != *(double *)(*(void *)(a2 + 16) + 8 * v233))
      {
        if ((unint64_t)v232 >= v230)
        {
          uint64_t v236 = (v232 - v231) >> 2;
          unint64_t v237 = v236 + 1;
          if ((unint64_t)(v236 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v230 - (void)v231) >> 1 > v237) {
            unint64_t v237 = (uint64_t)(v230 - (void)v231) >> 1;
          }
          if (v230 - (unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v238 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v238 = v237;
          }
          if (v238) {
            unint64_t v238 = (unint64_t)sub_25B3FBC64(v238);
          }
          else {
            uint64_t v239 = 0;
          }
          int32x2_t v240 = (char *)(v238 + 4 * v236);
          *(_DWORD *)int32x2_t v240 = v233;
          float v229 = v240 + 4;
          while (v232 != v231)
          {
            int v241 = *((_DWORD *)v232 - 1);
            v232 -= 4;
            *((_DWORD *)v240 - 1) = v241;
            v240 -= 4;
          }
          unint64_t v230 = v238 + 4 * v239;
          if (v231) {
            operator delete(v231);
          }
          BOOL v231 = v240;
          int8x8_t v232 = v229;
        }
        else
        {
          *(_DWORD *)int8x8_t v232 = v233;
          v232 += 4;
          float v229 = v232;
        }
      }
      ++v233;
    }
    while (v233 < v545);
    if (v231 == v232) {
      goto LABEL_483;
    }
    unint64_t v242 = (unint64_t)(v232 - v231) >> 2;
    unsigned int v243 = *(_DWORD *)(v581 + 100);
    uint64_t v603 = 0;
    __C = (double *)__PAIR64__(v242, v243);
    int v244 = v243 * v242;
    if (v244)
    {
      unint64_t v245 = (double *)malloc_type_malloc(8 * v244, 0x100004000313F17uLL);
      uint64_t v603 = v245;
      if (v245) {
        bzero(v245, 8 * HIDWORD(__C) * (int)__C);
      }
    }
    uint64_t v246 = ((unint64_t)(v232 - v231) >> 2);
    if ((int)v242 >= 1)
    {
      uint64_t v247 = 0;
      uint64_t v248 = *(unsigned int *)(v581 + 100);
      int v249 = v603;
      uint64_t v250 = 8 * SHIDWORD(__C);
      do
      {
        if ((int)v248 >= 1)
        {
          float v251 = (uint64_t *)(*(void *)(v581 + 104) + 8 * v248 * *(int *)&v231[4 * v247]);
          int8x8_t v252 = v249;
          uint64_t v253 = v248;
          do
          {
            uint64_t v254 = *v251++;
            *(void *)int8x8_t v252 = v254;
            int8x8_t v252 = (double *)((char *)v252 + v250);
            --v253;
          }
          while (v253);
        }
        ++v247;
        ++v249;
      }
      while (v247 != v246);
    }
    double v255 = *(double *)(v581 + 128);
    float32x4_t v614 = 0;
    int v256 = v539 * v545;
    int32x2_t v613 = (int32x2_t)__PAIR64__(v539, v545);
    if (v539)
    {
      long long v257 = (double *)malloc_type_malloc(8 * v256, 0x100004000313F17uLL);
      int8x8_t v258 = v257;
      float32x4_t v614 = v257;
      if (v257) {
        bzero(v257, 8 * v256);
      }
    }
    else
    {
      int8x8_t v258 = 0;
    }
    if (__src && __A && v258) {
      vDSP_vsubD(__A, 1, __src, 1, v258, 1, v256);
    }
    int64_t __Na = v232 - v231;
    sub_25B59F044((uint64_t)&__p, (int *)&v613, v255);
    vDSP_Length v259 = SHIDWORD(v590) * (uint64_t)(int)v590;
    if (v259)
    {
      float32x2_t v260 = (double *)malloc_type_malloc(8 * (int)v259, 0x100004000313F17uLL);
      float32x2_t v261 = v260;
      if (v260) {
        bzero(v260, 8 * (int)v259);
      }
    }
    else
    {
      float32x2_t v261 = 0;
    }
    if (__B && v601 && v261) {
      vDSP_vaddD(__B, 1, v601, 1, v261, 1, SHIDWORD(v590) * (uint64_t)(int)v590);
    }
    float32x2_t v262 = 0;
    char v263 = 1;
    unsigned int v264 = 0;
    if (*(void *)(v581 + 120) && v557)
    {
      uint64_t v265 = *(int *)v544;
      if (v265)
      {
        int8x8_t v266 = malloc_type_malloc(8 * v265, 0x100004000313F17uLL);
        float32x2_t v262 = v266;
        if (v266)
        {
          bzero(v266, 8 * v265);
          cblas_dgemm_NEWLAPACK();
          if (*(void *)(v581 + 104))
          {
            uint64_t v267 = *(int *)(v581 + 96);
            if (v267)
            {
              std::string::size_type v268 = (double *)malloc_type_malloc(8 * v267, 0x100004000313F17uLL);
              unsigned int v264 = v268;
              if (v268)
              {
                bzero(v268, 8 * v267);
                cblas_dgemm_NEWLAPACK();
              }
              char v263 = 0;
              goto LABEL_516;
            }
          }
          char v263 = 0;
        }
      }
      else
      {
        float32x2_t v262 = 0;
      }
      unsigned int v264 = 0;
    }
LABEL_516:
    if (v259 && (uint64_t v269 = (double *)malloc_type_malloc(8 * (int)v259, 0x100004000313F17uLL)) != 0)
    {
      unint64_t v568 = v269;
      bzero(v269, 8 * (int)v259);
      if (!v261) {
        goto LABEL_524;
      }
    }
    else
    {
      unint64_t v568 = 0;
      if (!v261) {
        goto LABEL_524;
      }
    }
    if (v264 && v568)
    {
      vDSP_vsubD(v264, 1, v261, 1, v568, 1, v259);
      goto LABEL_525;
    }
LABEL_524:
    if (v264) {
LABEL_525:
    }
      free(v264);
    if ((v263 & 1) == 0) {
      free(v262);
    }
    long long v270 = v568;
    if (v261) {
      free(v261);
    }
    if (v601)
    {
      free(v601);
      v601 = 0;
    }
    *(double *)&long long __p = 0.0;
    if (v614) {
      free(v614);
    }
    v601 = 0;
    long long __p = (void *)(v242 | 0x100000000);
    if (!v242) {
      goto LABEL_547;
    }
    float v271 = (double *)malloc_type_malloc((__Na << 30 >> 29) & 0xFFFFFFFFFFFFFFF8, 0x100004000313F17uLL);
    v601 = v271;
    if (v271)
    {
      bzero(v271, 8 * HIDWORD(__p) * (int)__p);
      float v272 = v601;
    }
    else
    {
      float v272 = 0;
    }
    if ((int)v242 >= 1)
    {
      char v273 = v231;
      uint64_t v274 = v246;
      do
      {
        uint64_t v275 = *(int *)v273;
        v273 += 4;
        *v272++ = v568[v275];
        --v274;
      }
      while (v274);
      float v272 = v601;
    }
    if (!v603 || v272 == 0)
    {
LABEL_547:
      int v277 = 0;
LABEL_548:
      uint64_t v278 = 0;
      goto LABEL_549;
    }
    int v277 = HIDWORD(__p);
    if (!(HIDWORD(__p) * __C)) {
      goto LABEL_548;
    }
    size_t v283 = 8 * HIDWORD(__p) * (int)__C;
    float32x2_t v284 = malloc_type_malloc(v283, 0x100004000313F17uLL);
    uint64_t v278 = v284;
    if (v284)
    {
      bzero(v284, v283);
      cblas_dgemm_NEWLAPACK();
    }
LABEL_549:
    if (*(void *)(v581 + 120))
    {
      if (v278)
      {
        unsigned int v564 = *(_DWORD *)v544;
        int v279 = *(_DWORD *)v544 * v277;
        if (v279)
        {
          size_t v280 = 8 * v279;
          std::string::size_type v281 = malloc_type_malloc(v280, 0x100004000313F17uLL);
          float32x2_t v282 = v281;
          if (v281)
          {
            bzero(v281, v280);
            cblas_dgemm_NEWLAPACK();
          }
        }
        else
        {
          float32x2_t v282 = 0;
        }
LABEL_561:
        free(v278);
      }
      else
      {
        float32x2_t v282 = 0;
        int v277 = 0;
        unsigned int v564 = 0;
      }
    }
    else
    {
      float32x2_t v282 = 0;
      int v277 = 0;
      unsigned int v564 = 0;
      if (v278) {
        goto LABEL_561;
      }
    }
    uint64_t v561 = v282;
    int v554 = v242;
    sub_25B59F044((uint64_t)&__M, (int *)&__C, v234);
    unsigned int v285 = __C;
    int v286 = __C * HIDWORD(__C);
    if (__C * HIDWORD(__C))
    {
      uint64_t v287 = (double *)malloc_type_malloc(8 * v286, 0x100004000313F17uLL);
      unint64_t v288 = v287;
      if (v287) {
        bzero(v287, 8 * v286);
      }
    }
    else
    {
      unint64_t v288 = 0;
    }
    if (v603 && v286 && HIDWORD(__C) * __C && v288)
    {
      if (__C == 1 || HIDWORD(__C) == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v603, 1, v288, 1, SHIDWORD(__C), (int)__C);
      }
    }
    float32x2_t v289 = v612;
    int __Nb = v277;
    if (!v612)
    {
      float32x4_t v614 = 0;
      int32x2_t v613 = 0;
      if (v288)
      {
        unsigned int v285 = 0;
        unint64_t v293 = 0;
        int v290 = 0;
        goto LABEL_583;
      }
      float v301 = 0;
      int v290 = 0;
      float32x2_t v303 = 0;
      BOOL v304 = 1;
LABEL_620:
      if (v614)
      {
        free(v614);
        float32x4_t v614 = 0;
      }
LABEL_622:
      v613.i32[0] = v290;
      v613.i32[1] = v290;
      goto LABEL_623;
    }
    if (!v288)
    {
      unsigned int v285 = 0;
      unint64_t v293 = 0;
      int v290 = 0;
      float32x4_t v614 = 0;
      int32x2_t v613 = 0;
      goto LABEL_584;
    }
    int v290 = __M;
    float32x4_t v614 = 0;
    int32x2_t v613 = (int32x2_t)__PAIR64__(v285, __M);
    if (__M * v285)
    {
      size_t v291 = 8 * (int)(__M * v285);
      uint64_t v292 = (double *)malloc_type_malloc(v291, 0x100004000313F17uLL);
      unint64_t v293 = v292;
      float32x4_t v614 = v292;
      if (v292)
      {
        bzero(v292, v291);
        cblas_dgemm_NEWLAPACK();
      }
    }
    else
    {
      unint64_t v293 = 0;
    }
LABEL_583:
    free(v288);
    float32x2_t v289 = v612;
    if (v612) {
LABEL_584:
    }
      free(v289);
    if (v290)
    {
      uint64_t v294 = (double *)malloc_type_malloc(8 * (v290 * v290), 0x100004000313F17uLL);
      unint64_t v288 = v294;
      if (v294)
      {
        bzero(v294, 8 * (v290 * v290));
        if (v290 >= 1)
        {
          uint64_t v295 = v290;
          float32x2_t v296 = v288;
          do
          {
            *float32x2_t v296 = 1.0;
            v296 += v290 + 1;
            --v295;
          }
          while (v295);
        }
      }
    }
    else
    {
      unint64_t v288 = 0;
    }
    if (*(void *)(v581 + 120)) {
      BOOL v297 = v293 == 0;
    }
    else {
      BOOL v297 = 1;
    }
    if (v297 || (int v298 = v285 * *(_DWORD *)v544) == 0)
    {
      float v301 = 0;
    }
    else
    {
      size_t v299 = 8 * v298;
      float v300 = (double *)malloc_type_malloc(v299, 0x100004000313F17uLL);
      float v301 = v300;
      if (v300)
      {
        bzero(v300, v299);
        cblas_dgemm_NEWLAPACK();
      }
      long long v270 = v568;
    }
    if (v290)
    {
      unint64_t v302 = (double *)malloc_type_malloc(8 * (v290 * v290), 0x100004000313F17uLL);
      float32x2_t v303 = v302;
      if (v302) {
        bzero(v302, 8 * (v290 * v290));
      }
    }
    else
    {
      float32x2_t v303 = 0;
    }
    BOOL v304 = v288 == 0;
    if (v288 && v301 && v303) {
      vDSP_vsubD(v301, 1, v288, 1, v303, 1, (v290 * v290));
    }
    if (!v290) {
      goto LABEL_620;
    }
    if (v613.i32[1] * v613.i32[0] == v290 * v290)
    {
      if (v614 && v303) {
        memcpy(v614, v303, 8 * v613.i32[0] * (uint64_t)v613.i32[1]);
      }
      goto LABEL_622;
    }
    if (v614)
    {
      free(v614);
      float32x4_t v614 = 0;
    }
    v613.i32[0] = v290;
    v613.i32[1] = v290;
    uint64_t v305 = (double *)malloc_type_malloc(8 * (v290 * v290), 0x100004000313F17uLL);
    float32x4_t v614 = v305;
    if (v305)
    {
      if (v303)
      {
        memcpy(v305, v303, 8 * v290 * (uint64_t)v290);
        int v306 = v539 * v545;
        goto LABEL_624;
      }
      int v306 = v539 * v545;
      if (!v301) {
        goto LABEL_627;
      }
LABEL_626:
      free(v301);
      goto LABEL_627;
    }
LABEL_623:
    int v306 = v539 * v545;
    if (v303) {
LABEL_624:
    }
      free(v303);
    if (v301) {
      goto LABEL_626;
    }
LABEL_627:
    if (!v304) {
      free(v288);
    }
    uint64_t v307 = v561;
    if ((int)(v564 * __Nb) >= 1)
    {
      sub_25B59F75C((uint64_t)&__M, (int *)&v613);
      float v308 = v612;
      if (v612)
      {
        if (!v561)
        {
          int v310 = 0;
          goto LABEL_655;
        }
        int v309 = __M;
        int v310 = __Nb;
        if (__M * __Nb)
        {
          size_t v311 = 8 * (int)__M * __Nb;
          float32x2_t v312 = malloc_type_malloc(v311, 0x100004000313F17uLL);
          float32x2_t v313 = v312;
          if (v312)
          {
            bzero(v312, v311);
            int v310 = __Nb;
            cblas_dgemm_NEWLAPACK();
          }
          else
          {
            int v310 = __Nb;
          }
LABEL_637:
          if (v310 * v309 < 1)
          {
            long long v270 = v568;
            if (v561) {
              free(v561);
            }
            goto LABEL_650;
          }
          if (v564 * __Nb == v310 * v309)
          {
            long long v270 = v568;
            if (v561)
            {
              if (v313)
              {
                uint64_t v314 = __Nb * (uint64_t)(int)v564;
                goto LABEL_649;
              }
LABEL_652:
              float v308 = v612;
              if (!v612)
              {
LABEL_656:
                int __Nb = v310;
                goto LABEL_657;
              }
LABEL_655:
              free(v308);
              goto LABEL_656;
            }
LABEL_650:
            uint64_t v307 = 0;
            if (!v313) {
              goto LABEL_652;
            }
          }
          else
          {
            if (v561) {
              free(v561);
            }
            uint64_t v307 = malloc_type_malloc(8 * (v310 * v309), 0x100004000313F17uLL);
            long long v270 = v568;
            if (!v307) {
              goto LABEL_650;
            }
            if (!v313) {
              goto LABEL_652;
            }
            uint64_t v314 = v309 * (uint64_t)v310;
LABEL_649:
            memcpy(v307, v313, 8 * v314);
          }
          free(v313);
          goto LABEL_652;
        }
      }
      else
      {
        int v309 = 0;
        int v310 = 0;
      }
      float32x2_t v313 = 0;
      goto LABEL_637;
    }
LABEL_657:
    sub_25B59F044((uint64_t)&v609, (int *)&__p, -v234);
    unint64_t v606 = 0;
    unint64_t v605 = __PAIR64__(__C, HIDWORD(__C));
    int v315 = __C * HIDWORD(__C);
    if (__C * HIDWORD(__C))
    {
      float32x2_t v316 = (double *)malloc_type_malloc(8 * v315, 0x100004000313F17uLL);
      uint64_t v317 = v316;
      unint64_t v606 = v316;
      if (v316) {
        bzero(v316, 8 * v315);
      }
    }
    else
    {
      uint64_t v317 = 0;
    }
    if (v603 && HIDWORD(__C) * __C && v317 && v315)
    {
      if (__C == 1 || HIDWORD(__C) == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v603, 1, v317, 1, SHIDWORD(__C), (int)__C);
      }
    }
    sub_25B59F044((uint64_t)&v607, (int *)&v605, v234 * v234);
    float32x2_t v318 = 0;
    if (v608 && v307)
    {
      if (v607 * __Nb)
      {
        size_t v319 = 8 * (int)v607 * __Nb;
        float v320 = (double *)malloc_type_malloc(v319, 0x100004000313F17uLL);
        float32x2_t v318 = v320;
        if (v320)
        {
          bzero(v320, v319);
          cblas_dgemm_NEWLAPACK();
        }
      }
      else
      {
        float32x2_t v318 = 0;
      }
    }
    int v321 = v609;
    uint64_t v612 = 0;
    vDSP_Length __M = v609;
    if (HIDWORD(v609) * v609)
    {
      size_t v322 = 8 * HIDWORD(v609) * (int)v609;
      float32x2_t v323 = (double *)malloc_type_malloc(v322, 0x100004000313F17uLL);
      float v324 = v323;
      uint64_t v612 = v323;
      if (v323) {
        bzero(v323, v322);
      }
    }
    else
    {
      float v324 = 0;
    }
    if (v610 && v318 && v324)
    {
      vDSP_vsubD(v318, 1, v610, 1, v324, 1, SHIDWORD(v609) * (uint64_t)(int)v609);
      goto LABEL_684;
    }
    if (v318) {
LABEL_684:
    }
      free(v318);
    if (v608)
    {
      free(v608);
      unint64_t v608 = 0;
    }
    uint64_t v607 = 0;
    if (v606) {
      free(v606);
    }
    if (v610) {
      free(v610);
    }
    unint64_t v325 = (unint64_t)(v229 - v231) >> 2;
    double v326 = 1.0;
    if (v321 == v325)
    {
      int v327 = v554;
      if ((int)v325 >= 1)
      {
        uint64_t v328 = ((unint64_t)(v229 - v231) >> 2);
        float32x2_t v329 = v324;
        int8x8_t v330 = v231;
        do
        {
          double v331 = *v329++;
          double v332 = v331;
          uint64_t v334 = *(int *)v330;
          v330 += 4;
          uint64_t v333 = v334;
          double v335 = __src[v334];
          if (v332 <= 0.0) {
            uint64_t v336 = *(void *)(a2 + 16);
          }
          else {
            uint64_t v336 = *(void *)(a2 + 32);
          }
          double v337 = (*(double *)(v336 + 8 * v333) - v335) / v332;
          if (v337 < v326) {
            double v326 = v337;
          }
          --v328;
        }
        while (v328);
      }
    }
    else
    {
      int v327 = v554;
    }
    sub_25B59F044((uint64_t)&v609, (int *)&__M, v326);
    if (v306 < 1)
    {
      uint64_t v338 = 0;
    }
    else
    {
      uint64_t v338 = malloc_type_malloc(8 * v306, 0x100004000313F17uLL);
      if (v338 && __src)
      {
        unint64_t v339 = v338;
        memcpy(v338, __src, 8 * v545 * (uint64_t)(int)v539);
        uint64_t v338 = v339;
      }
    }
    __dsta = v338;
    float32x2_t v340 = v610;
    if (v327 < 1)
    {
      if (v610) {
        goto LABEL_712;
      }
    }
    else
    {
      unint64_t v341 = v231;
      uint64_t v342 = v610;
      do
      {
        uint64_t v344 = *(int *)v341;
        v341 += 4;
        uint64_t v343 = v344;
        double v345 = *((double *)__dsta + v344);
        double v346 = *v342++;
        *((double *)__dsta + v343) = v345 + v346;
        --v246;
      }
      while (v246);
LABEL_712:
      free(v340);
    }
    if (v324) {
      free(v324);
    }
    if (v614) {
      free(v614);
    }
    if (v307) {
      free(v307);
    }
    if (v601) {
      free(v601);
    }
    if (v270) {
      free(v270);
    }
    if (v603) {
      free(v603);
    }
LABEL_725:
    if (v231) {
      operator delete(v231);
    }
    unint64_t v608 = 0;
    int v347 = v539 * v545;
    uint64_t v607 = __PAIR64__(v539, v545);
    if (v539 * v545)
    {
      float32x2_t v348 = (double *)malloc_type_malloc(8 * v347, 0x100004000313F17uLL);
      float32x2_t v349 = v348;
      unint64_t v608 = v348;
      if (v348) {
        bzero(v348, 8 * v347);
      }
    }
    else
    {
      float32x2_t v349 = 0;
    }
    if (__dsta && __A && v349) {
      vDSP_vsubD(__A, 1, (const double *)__dsta, 1, v349, 1, v347);
    }
    double v615 = 1.0;
    double v565 = (*(double (**)(uint64_t, unint64_t *))(*(void *)a2 + 24))(a2, &v592);
    sub_25B59EAEC((uint64_t)&v613, (int *)&v592);
    (*(void (**)(uint64_t, unint64_t *, int32x2_t *))(*(void *)a2 + 32))(a2, &v592, &v613);
    sub_25B59EAEC((uint64_t)&__M, (int *)&v607);
    sub_25B59EAEC((uint64_t)&v609, (int *)&v592);
    unint64_t v605 = *(void *)&v565;
    v629[0] = 1;
    vDSP_Length v350 = v613.i32[1] * (uint64_t)v613.i32[0];
    if (v350)
    {
      float32x2_t v351 = (double *)malloc_type_malloc(8 * (int)v350, 0x100004000313F17uLL);
      float32x2_t v352 = v351;
      if (v351) {
        bzero(v351, 8 * (int)v350);
      }
    }
    else
    {
      float32x2_t v352 = 0;
    }
    if (v614 && v352 && v612) {
      vDSP_vmulD(v614, 1, v612, 1, v352, 1, v613.i32[1] * (uint64_t)v613.i32[0]);
    }
    __C = 0;
    vDSP_sveD(v352, 1, (double *)&__C, v350);
    float32x2_t v353 = __C;
    if (v352) {
      free(v352);
    }
    double v354 = 1.0;
    if (*(double *)&v353 < 0.0)
    {
      unsigned __int8 v628 = 0;
      sub_25B59EAEC((uint64_t)&__C, (int *)&v609);
      int v355 = 0;
      unsigned int v356 = 0;
      double __Nc = *(double *)&v353 * 0.0001;
      double v584 = 0.0;
      *(double *)&uint64_t v357 = 1.0e15;
      double v582 = v565;
      double v627 = *(double *)&v353;
      double v626 = 0.0;
      *(double *)&uint64_t v358 = 2.0e15;
      double v562 = *(double *)&v353 * -0.01;
      double v624 = *(double *)&v353;
      double v625 = v565;
      int v359 = 1;
      while (1)
      {
        if ((_BYTE)v355)
        {
          double v360 = v584;
          if (v626 >= v584) {
            double v361 = v584;
          }
          else {
            double v361 = v626;
          }
          if (v584 >= v626) {
            double v362 = v584;
          }
          else {
            double v362 = v626;
          }
          double v363 = v615;
        }
        else
        {
          double v360 = v584;
          double v363 = v615;
          double v362 = v615 + (v615 - v584) * 4.0;
          double v361 = v584;
        }
        double v622 = v362;
        double v623 = v361;
        if (v363 < 1.0e-15) {
          double v363 = 1.0e-15;
        }
        if (v363 <= 1.0e15) {
          double v354 = v363;
        }
        else {
          double v354 = 1.0e15;
        }
        double v615 = v354;
        if ((_BYTE)v355)
        {
          if (v354 <= v361
            || (v354 < v362 ? (BOOL v364 = v356 > 0x12) : (BOOL v364 = 1),
                !v364 ? (BOOL v365 = v629[0] == 0) : (BOOL v365 = 1),
                v365 || v362 - v361 <= v362 * 1.0e-15))
          {
LABEL_775:
            double v615 = v360;
            double v354 = v360;
          }
        }
        else if (v356 > 0x12 || !v629[0])
        {
          goto LABEL_775;
        }
        sub_25B59F044((uint64_t)&__p, (int *)&__M, v354);
        unsigned int v366 = __C;
        unsigned int v367 = HIDWORD(__C);
        int v368 = HIDWORD(__C) * __C;
        if (HIDWORD(__C) * __C)
        {
          unint64_t v369 = (double *)malloc_type_malloc(8 * v368, 0x100004000313F17uLL);
          uint64_t v370 = v369;
          if (v369) {
            bzero(v369, 8 * v368);
          }
        }
        else
        {
          uint64_t v370 = 0;
        }
        if (v603 && v601 && v370) {
          vDSP_vaddD(v603, 1, v601, 1, v370, 1, SHIDWORD(__C) * (uint64_t)(int)__C);
        }
        if (v368 < 1)
        {
          if (v610)
          {
            free(v610);
            char v610 = 0;
          }
LABEL_791:
          *(double *)&vDSP_Length v609 = COERCE_DOUBLE(__PAIR64__(v367, v366));
LABEL_792:
          if (!v370) {
            goto LABEL_794;
          }
LABEL_793:
          free(v370);
          goto LABEL_794;
        }
        if (HIDWORD(v609) * v609 == v368)
        {
          if (v610 && v370) {
            memcpy(v610, v370, 8 * (int)v609 * (uint64_t)SHIDWORD(v609));
          }
          goto LABEL_791;
        }
        if (v610)
        {
          free(v610);
          char v610 = 0;
        }
        *(double *)&vDSP_Length v609 = COERCE_DOUBLE(__PAIR64__(v367, v366));
        uint64_t v386 = (double *)malloc_type_malloc(8 * v368, 0x100004000313F17uLL);
        char v610 = v386;
        if (!v386) {
          goto LABEL_792;
        }
        if (v370)
        {
          memcpy(v386, v370, 8 * (int)v609 * (uint64_t)SHIDWORD(v609));
          goto LABEL_793;
        }
LABEL_794:
        double v569 = *(double *)&v358;
        if (v601) {
          free(v601);
        }
        double v371 = (*(double (**)(uint64_t, vDSP_Length *))(*(void *)a2 + 24))(a2, &v609);
        unint64_t v605 = *(void *)&v371;
        (*(void (**)(uint64_t, vDSP_Length *, int32x2_t *))(*(void *)a2 + 32))(a2, &v609, &v613);
        vDSP_Length v372 = v613.i32[1] * (uint64_t)v613.i32[0];
        if (v372)
        {
          uint64_t v373 = (double *)malloc_type_malloc(8 * (int)v372, 0x100004000313F17uLL);
          uint64_t v374 = v373;
          if (v373) {
            bzero(v373, 8 * (int)v372);
          }
        }
        else
        {
          uint64_t v374 = 0;
        }
        if (v614 && v612 && v374) {
          vDSP_vmulD(v614, 1, v612, 1, v374, 1, v613.i32[1] * (uint64_t)v613.i32[0]);
        }
        double v375 = *(double *)&v357;
        *(double *)&long long __p = 0.0;
        vDSP_sveD(v374, 1, (double *)&__p, v372);
        unint64_t v376 = __p;
        if (v374) {
          free(v374);
        }
        BOOL v377 = v355 == 0;
        v621 = v376;
        double v378 = v565 + v354 * __Nc;
        BOOL v379 = v354 <= v361;
        if (v354 >= v362) {
          BOOL v379 = 1;
        }
        int v380 = v355 & v379;
        if (!v629[0]) {
          int v380 = 1;
        }
        BOOL v381 = *(double *)&v376 <= __Nc;
        BOOL v382 = *(double *)&v376 >= __Nc;
        if (v354 != 1.0e15) {
          BOOL v381 = 0;
        }
        BOOL v383 = fabs(*(double *)&v376) <= v562;
        if (v371 <= v378)
        {
          BOOL v383 = 0;
        }
        else
        {
          BOOL v381 = 0;
          BOOL v382 = 1;
        }
        if (v354 != 1.0e-15) {
          BOOL v382 = 0;
        }
        if (v362 - v361 > v362 * 1.0e-15) {
          BOOL v377 = 1;
        }
        if (v383 || !v377 || v356 > 0x12 || v382 || v381 || v380)
        {
          if (v603) {
            free(v603);
          }
          break;
        }
        BOOL v384 = *(double *)&v376 < __Nc;
        if (v371 > v378) {
          BOOL v384 = 1;
        }
        v359 &= v384;
        if (v359 == 1 && v371 > v378 && v371 <= v582)
        {
          *(double *)&long long __p = v371 - v354 * __Nc;
          double v619 = v625 - v626 * __Nc;
          double v620 = v582 - v360 * __Nc;
          double v617 = v627 - __Nc;
          double v618 = *(double *)&v376 - __Nc;
          double v616 = v624 - __Nc;
          sub_25B59F9A4(&v584, &v620, &v617, &v626, &v619, &v616, &v615, (double *)&__p, &v618, &v628, &v623, &v622, v629);
          double v582 = v620 + v584 * __Nc;
          double v627 = __Nc + v617;
          double v624 = __Nc + v616;
          double v625 = v619 + v626 * __Nc;
        }
        else
        {
          sub_25B59F9A4(&v584, &v582, &v627, &v626, &v625, &v624, &v615, (double *)&v605, (double *)&v621, &v628, &v623, &v622, v629);
        }
        int v355 = v628;
        if (v628)
        {
          double v385 = vabdd_f64(v626, v584);
          if (v385 >= v569 * 0.66) {
            double v615 = v584 + (v626 - v584) * 0.5;
          }
        }
        else
        {
          double v385 = v375;
          double v375 = v569;
        }
        *(double *)&uint64_t v358 = v375;
        ++v356;
        *(double *)&uint64_t v357 = v385;
      }
    }
    if (v610) {
      free(v610);
    }
    if (v612) {
      free(v612);
    }
    if (v614) {
      free(v614);
    }
    if (v608) {
      free(v608);
    }
    v601 = 0;
    long long __p = (void *)v592;
    if (HIDWORD(v592) * v592)
    {
      size_t v387 = 8 * HIDWORD(v592) * (int)v592;
      float32x2_t v388 = (double *)malloc_type_malloc(v387, 0x100004000313F17uLL);
      uint64_t v389 = v388;
      v601 = v388;
      if (v388) {
        bzero(v388, v387);
      }
    }
    else
    {
      uint64_t v389 = 0;
    }
    if (__A && __dsta && v389) {
      vDSP_vsubD((const double *)__dsta, 1, __A, 1, v389, 1, SHIDWORD(v592) * (uint64_t)(int)v592);
    }
    sub_25B59F044((uint64_t)&__C, (int *)&__p, v354);
    unsigned int v390 = v592;
    unsigned int v391 = HIDWORD(v592);
    int v392 = HIDWORD(v592) * v592;
    if (HIDWORD(v592) * v592)
    {
      int32x2_t v393 = (double *)malloc_type_malloc(8 * v392, 0x100004000313F17uLL);
      float32x2_t v394 = v393;
      if (v393) {
        bzero(v393, 8 * v392);
      }
    }
    else
    {
      float32x2_t v394 = 0;
    }
    if (__A && v603 && v394) {
      vDSP_vsubD(v603, 1, __A, 1, v394, 1, SHIDWORD(v592) * (uint64_t)(int)v592);
    }
    if (v392 < 1)
    {
      if (__A)
      {
        free(__A);
        __A = 0;
      }
LABEL_875:
      *(double *)&unint64_t v592 = COERCE_DOUBLE(__PAIR64__(v391, v390));
LABEL_876:
      if (v394) {
        goto LABEL_877;
      }
      goto LABEL_878;
    }
    if (HIDWORD(v592) * v592 == v392)
    {
      if (__A && v394) {
        memcpy(__A, v394, 8 * (int)v592 * (uint64_t)SHIDWORD(v592));
      }
      goto LABEL_875;
    }
    if (__A)
    {
      free(__A);
      __A = 0;
    }
    *(double *)&unint64_t v592 = COERCE_DOUBLE(__PAIR64__(v391, v390));
    long long v420 = (double *)malloc_type_malloc(8 * v392, 0x100004000313F17uLL);
    __A = v420;
    if (!v420) {
      goto LABEL_876;
    }
    if (v394)
    {
      memcpy(v420, v394, 8 * (int)v592 * (uint64_t)SHIDWORD(v592));
LABEL_877:
      free(v394);
    }
LABEL_878:
    if (v603)
    {
      free(v603);
      uint64_t v603 = 0;
    }
    __C = 0;
    if (v601) {
      free(v601);
    }
    uint64_t v395 = v592;
    if ((int)v592 >= 1)
    {
      float32x2_t v396 = __A;
      float32x4_t v397 = *(double **)(a2 + 16);
      uint64_t v398 = *(double **)(a2 + 32);
      do
      {
        double v399 = *v397;
        if (*v396 < *v397 || (double v399 = *v398, *v396 > *v398)) {
          *float32x2_t v396 = v399;
        }
        ++v398;
        ++v397;
        ++v396;
        --v395;
      }
      while (v395);
    }
    double v400 = (*(double (**)(uint64_t, unint64_t *))(*(void *)a2 + 24))(a2, &v592);
    (*(void (**)(uint64_t, unint64_t *, double **))(*(void *)a2 + 32))(a2, &v592, &v590);
    int v401 = HIDWORD(v590);
    uint64_t v603 = 0;
    __C = v590;
    vDSP_Length __Nd = (int)v590;
    int v402 = HIDWORD(v590) * v590;
    if (HIDWORD(v590) * v590)
    {
      int32x2_t v403 = (double *)malloc_type_malloc(8 * v402, 0x100004000313F17uLL);
      int32x2_t v404 = v403;
      uint64_t v603 = v403;
      if (v403) {
        bzero(v403, 8 * v402);
      }
    }
    else
    {
      int32x2_t v404 = 0;
    }
    if (__B && v587 && v404) {
      vDSP_vsubD(v587, 1, __B, 1, v404, 1, SHIDWORD(v590) * (uint64_t)(int)v590);
    }
    v601 = 0;
    long long __p = (void *)v592;
    int v570 = HIDWORD(v592);
    if (HIDWORD(v592) * v592)
    {
      size_t v405 = 8 * HIDWORD(v592) * (int)v592;
      float32x2_t v406 = (double *)malloc_type_malloc(v405, 0x100004000313F17uLL);
      long long v407 = v406;
      v601 = v406;
      if (v406) {
        bzero(v406, v405);
      }
    }
    else
    {
      long long v407 = 0;
    }
    if (__A && v589 && v407) {
      vDSP_vsubD(v589, 1, __A, 1, v407, 1, SHIDWORD(v592) * (uint64_t)(int)v592);
    }
    double v408 = sub_25B59F0CC((int *)&__p, (uint64_t)&__C);
    double v409 = sub_25B59F1D4((int *)&__C);
    double v410 = -v408;
    if (v408 >= 0.0) {
      double v410 = v408;
    }
    if (v410 <= v409 * 0.0000001) {
      goto LABEL_1170;
    }
    int v411 = v598;
    int v412 = *(_DWORD *)(v581 + 140);
    if (v598 >= v412)
    {
      if (v412 >= 2)
      {
        int v421 = 0;
        do
        {
          int v422 = v421 + 1;
          sub_25B59F29C((uint64_t)&v613, &v597, v421 + 1, v421 + 2);
          sub_25B59F51C((unsigned int *)&v597, v421, v421 + 1, (int *)&v613);
          if (v614) {
            free(v614);
          }
          sub_25B59F29C((uint64_t)&v613, (int *)&v594, v421 + 1, v421 + 2);
          sub_25B59F51C(&v594, v421, v421 + 1, (int *)&v613);
          if (v614) {
            free(v614);
          }
          ++v421;
        }
        while (v422 < *(_DWORD *)(v581 + 140) - 1);
        int v411 = v598;
      }
    }
    else
    {
      int v413 = v597;
      if (v597)
      {
        if (v598 >= 2 && v597 != 1)
        {
          uint64_t v414 = (double *)malloc_type_malloc(8 * v598 * (uint64_t)v597, 0x21B64F3FuLL);
          if (v599)
          {
            float32x2_t v415 = v414;
            if (v414)
            {
              vDSP_mtransD(v599, 1, v414, 1, v411, v413);
              cblas_dcopy_NEWLAPACK();
              free(v415);
            }
          }
        }
      }
      int v597 = v411;
      signed int v598 = v413;
      sub_25B59E99C((uint64_t)&v597, v411 + 1, *(_DWORD *)(v581 + 136));
      int v416 = v597;
      int v417 = v598;
      if (v597)
      {
        if (v597 != 1 && v598 >= 2)
        {
          unint64_t v418 = (double *)malloc_type_malloc(8 * v598 * (uint64_t)v597, 0x21B64F3FuLL);
          if (v599)
          {
            unint64_t v419 = v418;
            if (v418)
            {
              vDSP_mtransD(v599, 1, v418, 1, v417, v416);
              cblas_dcopy_NEWLAPACK();
              free(v419);
            }
          }
        }
        int v411 = v416;
      }
      else
      {
        int v411 = 0;
      }
      int v597 = v417;
      signed int v598 = v411;
      signed int v423 = v594;
      signed int v424 = v595;
      if (v594 >= 2 && v595 >= 2)
      {
        unint64_t v425 = (double *)malloc_type_malloc(8 * (int)v595 * (uint64_t)(int)v594, 0x21B64F3FuLL);
        if (v596)
        {
          uint64_t v426 = v425;
          if (v425)
          {
            vDSP_mtransD(v596, 1, v425, 1, v424, v423);
            cblas_dcopy_NEWLAPACK();
            free(v426);
          }
        }
      }
      unsigned int v594 = v424;
      unsigned int v595 = v423;
      sub_25B59E99C((uint64_t)&v594, v424 + 1, *(_DWORD *)(v581 + 136));
      signed int v427 = v594;
      signed int v428 = v595;
      if (v594 >= 2 && v595 >= 2)
      {
        uint64_t v429 = (double *)malloc_type_malloc(8 * (int)v595 * (uint64_t)(int)v594, 0x21B64F3FuLL);
        if (v596)
        {
          uint64_t v430 = v429;
          if (v429)
          {
            vDSP_mtransD(v596, 1, v429, 1, v428, v427);
            cblas_dcopy_NEWLAPACK();
            free(v430);
          }
        }
      }
      unsigned int v594 = v428;
      unsigned int v595 = v427;
    }
    sub_25B59F51C((unsigned int *)&v597, v411 - 1, v411, (int *)&__C);
    sub_25B59F51C(&v594, v595 - 1, v595, (int *)&__p);
    if (v402)
    {
      uint64_t v431 = (double *)malloc_type_malloc(8 * v402, 0x100004000313F17uLL);
      float32x2_t v432 = v431;
      if (v431) {
        bzero(v431, 8 * v402);
      }
    }
    else
    {
      float32x2_t v432 = 0;
    }
    if (v404)
    {
      if (v402 && v432)
      {
        if (__Nd == 1 || v401 == 1)
        {
          vDSP_Length v433 = v401;
          cblas_dcopy_NEWLAPACK();
        }
        else
        {
          vDSP_Length v433 = v401;
          vDSP_mtransD(v404, 1, v432, 1, v401, __Nd);
        }
LABEL_960:
        if (v401)
        {
          float32x2_t v437 = (double *)malloc_type_malloc(8 * (v401 * v401), 0x100004000313F17uLL);
          float32x2_t v435 = v437;
          if (v437)
          {
            bzero(v437, 8 * (v401 * v401));
            cblas_dgemm_NEWLAPACK();
          }
          BOOL v436 = 0;
        }
        else
        {
          BOOL v436 = 0;
          float32x2_t v435 = 0;
        }
        int v434 = v401;
      }
      else
      {
        vDSP_Length v433 = v401;
        float32x2_t v435 = 0;
        int v434 = 0;
        BOOL v436 = v432 == 0;
        if (v432) {
          goto LABEL_960;
        }
      }
    }
    else
    {
      vDSP_Length v433 = v401;
      int v434 = 0;
      float32x2_t v435 = 0;
      BOOL v436 = v432 == 0;
    }
    int32x2_t v613 = 0;
    BOOL v566 = v436;
    vDSP_sveD(v435, 1, (double *)&v613, (v434 * v434));
    double v438 = *(double *)&v613;
    if (!v402)
    {
      int32x2_t v440 = 0;
      if (!v404) {
        goto LABEL_977;
      }
LABEL_972:
      if (!v402 || !v440) {
        goto LABEL_977;
      }
      if (__Nd == 1 || v401 == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v404, 1, v440, 1, v433, __Nd);
      }
      goto LABEL_980;
    }
    float32x2_t v439 = (double *)malloc_type_malloc(8 * v402, 0x100004000313F17uLL);
    int32x2_t v440 = v439;
    if (v439) {
      bzero(v439, 8 * v402);
    }
    if (v404) {
      goto LABEL_972;
    }
LABEL_977:
    if (!v440)
    {
      int v401 = 0;
      int v441 = 0;
      int32x2_t v442 = 0;
      char v443 = 1;
      goto LABEL_988;
    }
LABEL_980:
    if (v407)
    {
      if (v570 * v401)
      {
        size_t v444 = 8 * v570 * v401;
        float32x4_t v445 = (double *)malloc_type_malloc(v444, 0x100004000313F17uLL);
        int32x2_t v442 = v445;
        if (v445)
        {
          bzero(v445, v444);
          int v441 = v570;
          cblas_dgemm_NEWLAPACK();
          char v443 = 0;
          goto LABEL_988;
        }
        char v443 = 0;
      }
      else
      {
        char v443 = 0;
        int32x2_t v442 = 0;
      }
      int v441 = v570;
    }
    else
    {
      char v443 = 0;
      int v401 = 0;
      int v441 = 0;
      int32x2_t v442 = 0;
    }
LABEL_988:
    int32x2_t v613 = 0;
    vDSP_sveD(v442, 1, (double *)&v613, v441 * v401);
    *(double *)(v581 + 128) = v438 / *(double *)&v613;
    if (v442) {
      free(v442);
    }
    if ((v443 & 1) == 0) {
      free(v440);
    }
    if (v435) {
      free(v435);
    }
    if (!v566) {
      free(v432);
    }
    int v446 = v597;
    int v447 = v598;
    unsigned int v448 = v595 + v598;
    int v449 = (v595 + v598) * v597;
    if (!v449)
    {
      float32x2_t v451 = 0;
LABEL_1006:
      uint64_t v455 = v581;
      uint64_t v456 = *(void **)(v581 + 104);
      if (v456)
      {
        free(v456);
        *(void *)(v581 + 104) = 0;
      }
LABEL_1008:
      *(_DWORD *)(v455 + 96) = v446;
      *(_DWORD *)(v455 + 100) = v448;
LABEL_1009:
      if (v451) {
        goto LABEL_1010;
      }
      goto LABEL_1011;
    }
    uint64_t v450 = malloc_type_malloc(8 * v449, 0x100004000313F17uLL);
    float32x2_t v451 = v450;
    if (v450) {
      bzero(v450, 8 * v449);
    }
    if (v449 < 1) {
      goto LABEL_1006;
    }
    int v452 = *(_DWORD *)(v581 + 96);
    int v453 = *(_DWORD *)(v581 + 100);
    float v454 = *(void **)(v581 + 104);
    if (v453 * v452 == v449)
    {
      if (v454 && v451) {
        memcpy(v454, v451, 8 * v452 * (uint64_t)v453);
      }
      uint64_t v455 = v581;
      goto LABEL_1008;
    }
    if (v454)
    {
      free(v454);
      *(void *)(v581 + 104) = 0;
    }
    *(_DWORD *)(v581 + 96) = v446;
    *(_DWORD *)(v581 + 100) = v448;
    int32x2_t v467 = malloc_type_malloc(8 * v449, 0x100004000313F17uLL);
    *(void *)(v581 + 104) = v467;
    if (!v467) {
      goto LABEL_1009;
    }
    if (v451)
    {
      memcpy(v467, v451, 8 * *(int *)(v581 + 96) * (uint64_t)*(int *)(v581 + 100));
LABEL_1010:
      free(v451);
      int v447 = v598;
    }
LABEL_1011:
    sub_25B59F51C(v534, 0, v447, &v597);
    int v457 = v598;
    int v458 = *(_DWORD *)(v581 + 100);
    sub_25B59F044((uint64_t)&v613, (int *)&v594, *(double *)(v581 + 128));
    sub_25B59F51C(v534, v457, v458, (int *)&v613);
    if (v614) {
      free(v614);
    }
    signed int v459 = v595;
    vDSP_Length v460 = (int)v594;
    int v461 = v594 * v595;
    if (v594 * v595)
    {
      int32x2_t v462 = (double *)malloc_type_malloc(8 * v461, 0x100004000313F17uLL);
      int32x2_t v463 = v462;
      if (v462) {
        bzero(v462, 8 * v461);
      }
    }
    else
    {
      int32x2_t v463 = 0;
    }
    __Ne = v596;
    if (v596 && v461 && v463)
    {
      if (v460 == 1 || v459 == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v596, 1, v463, 1, v459, v460);
      }
LABEL_1031:
      int v466 = (int)v599;
      if (v599)
      {
        int v465 = v598;
        float32x4_t v614 = 0;
        int32x2_t v613 = (int32x2_t)__PAIR64__(v598, v459);
        if (v598 * v459)
        {
          int v468 = v461;
          size_t v469 = 8 * v598 * v459;
          float v470 = (double *)malloc_type_malloc(v469, 0x100004000313F17uLL);
          float32x2_t v464 = v470;
          float32x4_t v614 = v470;
          if (v470)
          {
            bzero(v470, v469);
            cblas_dgemm_NEWLAPACK();
          }
          int v466 = v459;
          int v461 = v468;
        }
        else
        {
          float32x2_t v464 = 0;
          int v466 = v459;
        }
      }
      else
      {
        float32x2_t v464 = 0;
        int v465 = 0;
        float32x4_t v614 = 0;
        int32x2_t v613 = 0;
      }
      free(v463);
    }
    else
    {
      if (v463) {
        goto LABEL_1031;
      }
      float32x2_t v464 = 0;
      int v465 = 0;
      int v466 = 0;
      float32x4_t v614 = 0;
      int32x2_t v613 = 0;
    }
    int v567 = v461;
    sub_25B59EAEC((uint64_t)&__M, (int *)&v613);
    if (v466 >= 1)
    {
      uint64_t v471 = 0;
      int v472 = v612;
      uint64_t v473 = 8 * SHIDWORD(__M) + 8;
      unsigned int v474 = v465 - 1;
      do
      {
        if (v465 > (int)v471) {
          bzero(v472, 8 * v474 + 8);
        }
        ++v471;
        int v472 = (double *)((char *)v472 + v473);
        --v474;
      }
      while (v466 != v471);
    }
    if (!v464)
    {
      unint64_t v605 = 0;
      unint64_t v606 = 0;
LABEL_1078:
      unint64_t v608 = 0;
      uint64_t v607 = 0;
      goto LABEL_1079;
    }
    if (v466 == 1 && v465 == 1)
    {
      sub_25B59EAEC((uint64_t)&v605, (int *)&v613);
      goto LABEL_1058;
    }
    unint64_t v606 = 0;
    if (v465 >= v466) {
      uint64_t v475 = v466;
    }
    else {
      uint64_t v475 = v465;
    }
    LODWORD(v605) = 1;
    HIDWORD(v605) = v475;
    if (!v475) {
      goto LABEL_1078;
    }
    long long v476 = malloc_type_malloc(8 * (int)v475, 0x100004000313F17uLL);
    unint64_t v606 = v476;
    if (v476) {
      bzero(v476, 8 * HIDWORD(v605) * (int)v605);
    }
    if ((int)v475 >= 1)
    {
      int v477 = 0;
      int v478 = v475 + 1;
      uint64_t v479 = v606;
      do
      {
        *v479++ = *(void *)&v464[v477];
        v477 += v478;
        --v475;
      }
      while (v475);
    }
LABEL_1058:
    unsigned int v480 = v605;
    unsigned int v481 = HIDWORD(v605);
    if (v605 != 1)
    {
      if ((int)v605 >= 2 && HIDWORD(v605) == 1)
      {
        unsigned int v481 = 1;
        goto LABEL_1067;
      }
      goto LABEL_1078;
    }
    if (SHIDWORD(v605) <= 1)
    {
      if (HIDWORD(v605) == 1)
      {
        sub_25B59EAEC((uint64_t)&v607, (int *)&v605);
        goto LABEL_1079;
      }
      goto LABEL_1078;
    }
    unsigned int v480 = 1;
LABEL_1067:
    unint64_t v608 = 0;
    if (v480 <= v481) {
      uint64_t v483 = v481;
    }
    else {
      uint64_t v483 = v480;
    }
    LODWORD(v607) = v483;
    HIDWORD(v607) = v483;
    if (v483)
    {
      uint64_t v484 = malloc_type_malloc(8 * (v483 * v483), 0x100004000313F17uLL);
      unint64_t v608 = v484;
      if (v484) {
        bzero(v484, 8 * HIDWORD(v607) * (int)v607);
      }
      uint64_t v485 = (uint64_t *)v606;
      float v486 = v608;
      uint64_t v487 = 8 * SHIDWORD(v607) + 8;
      do
      {
        uint64_t v488 = *v485++;
        *float v486 = v488;
        float v486 = (void *)((char *)v486 + v487);
        --v483;
      }
      while (v483);
    }
LABEL_1079:
    sub_25B59F044((uint64_t)&v609, (int *)&v607, -1.0);
    if (v608)
    {
      free(v608);
      unint64_t v608 = 0;
    }
    uint64_t v607 = 0;
    if (v606) {
      free(v606);
    }
    int v489 = __M;
    unint64_t v608 = 0;
    LODWORD(v607) = __M + v466;
    HIDWORD(v607) = v465;
    int v490 = v465 * (__M + v466);
    if (v490)
    {
      size_t v491 = 8 * v490;
      uint64_t v492 = (char *)malloc_type_malloc(v491, 0x100004000313F17uLL);
      uint64_t v493 = v492;
      unint64_t v608 = v492;
      if (v492)
      {
        bzero(v492, v491);
        if (v610) {
          memcpy(v493, v610, 8 * v466 * (uint64_t)v465);
        }
        if (v612) {
          memcpy(&v493[8 * v465 * v466], v612, 8 * v489 * (uint64_t)v465);
        }
      }
    }
    else
    {
      uint64_t v493 = 0;
    }
    int v494 = HIDWORD(__M);
    int v555 = __M;
    unint64_t v606 = 0;
    LODWORD(v605) = __M + v466;
    HIDWORD(v605) = HIDWORD(__M);
    int v495 = HIDWORD(__M) * (__M + v466);
    if (v495)
    {
      size_t v496 = 8 * v495;
      float v497 = (char *)malloc_type_malloc(v496, 0x100004000313F17uLL);
      unint64_t v498 = v497;
      unint64_t v606 = v497;
      if (v497) {
        bzero(v497, v496);
      }
    }
    else
    {
      unint64_t v498 = 0;
    }
    int v499 = __M * HIDWORD(__M);
    if (__M * HIDWORD(__M))
    {
      uint64_t v500 = (double *)malloc_type_malloc(8 * v499, 0x100004000313F17uLL);
      long long v501 = v500;
      if (v500) {
        bzero(v500, 8 * v499);
      }
    }
    else
    {
      long long v501 = 0;
    }
    if (v612 && v499 && HIDWORD(__M) * __M && v501)
    {
      if (__M == 1 || HIDWORD(__M) == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v612, 1, v501, 1, SHIDWORD(__M), (int)__M);
      }
    }
    if (v498)
    {
      int v502 = v567;
      if (v501)
      {
        memcpy(v498, v501, 8 * v494 * (uint64_t)v466);
        goto LABEL_1110;
      }
    }
    else
    {
      int v502 = v567;
      if (v501) {
LABEL_1110:
      }
        free(v501);
    }
    if (v502)
    {
      uint64_t v503 = (double *)malloc_type_malloc(8 * v502, 0x100004000313F17uLL);
      unint64_t v504 = v503;
      if (v503) {
        bzero(v503, 8 * v502);
      }
    }
    else
    {
      unint64_t v504 = 0;
    }
    if (!__Ne) {
      goto LABEL_1122;
    }
    if (v502 && v504)
    {
      if (v460 == 1 || v459 == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(__Ne, 1, v504, 1, v459, v460);
      }
      goto LABEL_1125;
    }
    if (v504)
    {
LABEL_1125:
      if (v459)
      {
        unsigned __int8 v505 = (double *)malloc_type_malloc(8 * (v459 * v459), 0x100004000313F17uLL);
        unint64_t v506 = v505;
        if (v505)
        {
          bzero(v505, 8 * (v459 * v459));
          cblas_dgemm_NEWLAPACK();
        }
        double v584 = *(double *)(v581 + 128);
        int v507 = (double *)malloc_type_malloc(8 * (v459 * v459), 0x100004000313F17uLL);
        unsigned __int8 v508 = v507;
        if (v507)
        {
          bzero(v507, 8 * (v459 * v459));
          if (v506) {
            vDSP_vsmulD(v506, 1, &v584, v508, 1, (v459 * v459));
          }
          if (v498) {
            memcpy(&v498[8 * v494 * v466], v508, 8 * v555 * (uint64_t)v494);
          }
          free(v508);
        }
        if (v506) {
          free(v506);
        }
      }
    }
    else
    {
LABEL_1122:
      if (!v504) {
        goto LABEL_1137;
      }
    }
    free(v504);
LABEL_1137:
    id v585 = 0;
    int __N_4 = v613.i32[1];
    double v509 = COERCE_DOUBLE(vadd_s32((int32x2_t)__M, v613));
    double v584 = v509;
    signed __int32 v510 = vmul_lane_s32(*(int32x2_t *)&v509, *(int32x2_t *)&v509, 1).u32[0];
    if (v510)
    {
      int32x2_t v571 = *(int32x2_t *)&v509;
      long long v511 = malloc_type_malloc(8 * v510, 0x100004000313F17uLL);
      id v585 = v511;
      if (v511) {
        bzero(v511, 8 * vmul_lane_s32(v571, v571, 1).i32[0]);
      }
    }
    sub_25B59F51C((unsigned int *)&v584, 0, __N_4, (int *)&v607);
    sub_25B59F51C((unsigned int *)&v584, __N_4, SHIDWORD(v584), (int *)&v605);
    sub_25B59F75C((uint64_t)&v582, (int *)&v584);
    if (v544 == &v582) {
      goto LABEL_1156;
    }
    int v512 = LODWORD(v582);
    int v513 = HIDWORD(v582);
    int v514 = HIDWORD(v582) * LODWORD(v582);
    if (HIDWORD(v582) * LODWORD(v582) < 1)
    {
      std::string v518 = *(void **)(v581 + 120);
      if (v518)
      {
        free(v518);
        *(void *)(v581 + 120) = 0;
        int v512 = LODWORD(v582);
        int v513 = HIDWORD(v582);
      }
      *(_DWORD *)(v581 + 112) = v512;
      *(_DWORD *)(v581 + 116) = v513;
LABEL_1156:
      if (v583) {
        free(v583);
      }
      goto LABEL_1158;
    }
    int v515 = *(_DWORD *)(v581 + 112);
    int v516 = *(_DWORD *)(v581 + 116);
    uint64_t v517 = *(void **)(v581 + 120);
    if (v516 * v515 == v514)
    {
      if (v517 && v583)
      {
        memcpy(v517, v583, 8 * v515 * (uint64_t)v516);
        int v512 = LODWORD(v582);
        int v513 = HIDWORD(v582);
      }
      *(_DWORD *)(v581 + 112) = v512;
      *(_DWORD *)(v581 + 116) = v513;
      goto LABEL_1156;
    }
    if (v517)
    {
      free(v517);
      uint64_t v519 = v581;
      *(void *)(v581 + 120) = 0;
      int v512 = LODWORD(v582);
      int v513 = HIDWORD(v582);
      int v514 = HIDWORD(v582) * LODWORD(v582);
    }
    else
    {
      uint64_t v519 = v581;
    }
    *(_DWORD *)(v519 + 112) = v512;
    *(_DWORD *)(v519 + 116) = v513;
    std::string v520 = malloc_type_malloc(8 * v514, 0x100004000313F17uLL);
    *(void *)(v519 + 120) = v520;
    if (!v520) {
      goto LABEL_1156;
    }
    if (v583)
    {
      memcpy(v520, v583, 8 * *(int *)(v581 + 112) * (uint64_t)*(int *)(v581 + 116));
      goto LABEL_1156;
    }
LABEL_1158:
    if (v585) {
      free(v585);
    }
    if (v498) {
      free(v498);
    }
    if (v493) {
      free(v493);
    }
    if (v610) {
      free(v610);
    }
    if (v612) {
      free(v612);
    }
    if (v614) {
      free(v614);
    }
LABEL_1170:
    double v521 = vabdd_f64(v536, v400);
    *(double *)(v581 + 64) = v521;
    double v522 = *(double *)(v581 + 24);
    if (v521 >= v522)
    {
      ++*v538;
      *(double *)(v581 + 72) = sqrt(sub_25B59F1D4((int *)&v590));
      *(_DWORD *)(v581 + 88) = sub_25B59F8B0(v533, (uint64_t)v538);
    }
    if (v601) {
      free(v601);
    }
    if (v603) {
      free(v603);
    }
    if (__dsta) {
      free(__dsta);
    }
    if (v557) {
      free(v557);
    }
    a1 = v581;
    if (__src) {
      free(__src);
    }
    if (v587) {
      free(v587);
    }
    if (v589) {
      free(v589);
    }
    double v536 = v400;
    if (v521 < v522) {
      break;
    }
  }
  *(_DWORD *)(a1 + 88) = sub_25B59F8B0(v533, (uint64_t)v538);
  if (&v592 != a3)
  {
    int v523 = v592;
    int v524 = HIDWORD(v592);
    int v525 = HIDWORD(v592) * v592;
    if (HIDWORD(v592) * (int)v592 < 1)
    {
      unint64_t v528 = (void *)a3[1];
      if (v528)
      {
        free(v528);
        a3[1] = 0;
        int v523 = v592;
        int v524 = HIDWORD(v592);
      }
      *(_DWORD *)a3 = v523;
      *((_DWORD *)a3 + 1) = v524;
    }
    else
    {
      int v526 = *((_DWORD *)a3 + 1);
      long long v527 = (void *)a3[1];
      if (v526 * *(_DWORD *)a3 == v525)
      {
        if (v527 && __A)
        {
          memcpy(v527, __A, 8 * *(int *)a3 * (uint64_t)v526);
          int v523 = v592;
          int v524 = HIDWORD(v592);
        }
        *(_DWORD *)a3 = v523;
        *((_DWORD *)a3 + 1) = v524;
      }
      else
      {
        if (v527)
        {
          free(v527);
          unint64_t v530 = a3;
          a3[1] = 0;
          int v523 = v592;
          int v524 = HIDWORD(v592);
          int v525 = HIDWORD(v592) * v592;
        }
        else
        {
          unint64_t v530 = a3;
        }
        *(_DWORD *)unint64_t v530 = v523;
        *((_DWORD *)v530 + 1) = v524;
        long long v531 = malloc_type_malloc(8 * v525, 0x100004000313F17uLL);
        v530[1] = (unint64_t)v531;
        if (v531 && __A) {
          memcpy(v531, __A, 8 * *(int *)a3 * (uint64_t)*((int *)a3 + 1));
        }
      }
    }
  }
  BOOL v33 = (*(_DWORD *)(a1 + 88) - 2) < 3;
  if (__B) {
    free(__B);
  }
  if (__A) {
    free(__A);
  }
  if (v596) {
    free(v596);
  }
  if (v599) {
    free(v599);
  }
  return v33;
}

void sub_25B59D8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,void *a57,uint64_t a58,void *a59,uint64_t a60,void *a61,uint64_t a62,void *a63)
{
  free(v71);
  free(v72);
  if (v70) {
    free(v70);
  }
  if (a67) {
    free(a67);
  }
  if (STACK[0x240]) {
    free((void *)STACK[0x240]);
  }
  if (a70) {
    free(a70);
  }
  if (v73) {
    operator delete(v73);
  }
  if (a38)
  {
    free(a38);
    if (!a47)
    {
LABEL_17:
      if (a55) {
        free(a55);
      }
      if (a57) {
        free(a57);
      }
      if (a59) {
        free(a59);
      }
      if (a61) {
        free(a61);
      }
      if (a63) {
        free(a63);
      }
      if (a65) {
        free(a65);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!a47)
  {
    goto LABEL_17;
  }
  free(a47);
  goto LABEL_17;
}

void *sub_25B59E458(void *a1)
{
  *a1 = &unk_2708F2010;
  float v2 = (void *)a1[15];
  if (v2)
  {
    free(v2);
    a1[15] = 0;
  }
  a1[14] = 0;
  int v3 = (void *)a1[13];
  if (v3)
  {
    free(v3);
    a1[13] = 0;
  }
  a1[12] = 0;
  return a1;
}

uint64_t sub_25B59E4C0(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1FA0;
  float v2 = *(void **)(a1 + 72);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 64) = 0;
  float32x2_t v6 = (void **)(a1 + 40);
  sub_25B413C78(&v6);
  *(void *)a1 = &unk_2708F1FD8;
  int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 24) = 0;
  vDSP_Length v4 = *(void **)(a1 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 16) = 0;
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_25B59E570(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A5023B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A5023B0))
  {
    qword_26A502350 = 0;
    qword_26A502358 = 0;
    qword_26A502360 = 0;
    int v14 = operator new(0x10uLL);
    qword_26A502350 = (uint64_t)v14;
    *int v14 = xmmword_25B5F17C0;
    qword_26A502358 = (uint64_t)(v14 + 1);
    qword_26A502360 = (uint64_t)(v14 + 1);
    qword_26A502370 = 0;
    qword_26A502378 = 0;
    qword_26A502368 = 0;
    vDSP_Length v15 = operator new(0x20uLL);
    *vDSP_Length v15 = xmmword_25B5F2480;
    v15[1] = unk_25B5F2490;
    qword_26A502368 = (uint64_t)v15;
    qword_26A502370 = (uint64_t)(v15 + 2);
    qword_26A502378 = (uint64_t)(v15 + 2);
    qword_26A502380 = 0;
    qword_26A502388 = 0;
    qword_26A502390 = 0;
    float32x2_t v16 = operator new(0x30uLL);
    *float32x2_t v16 = xmmword_25B5F24A0;
    v16[1] = unk_25B5F24B0;
    v16[2] = xmmword_25B5F24C0;
    qword_26A502380 = (uint64_t)v16;
    qword_26A502388 = (uint64_t)(v16 + 3);
    qword_26A502390 = (uint64_t)(v16 + 3);
    qword_26A502398 = 0;
    qword_26A5023A0 = 0;
    unk_26A5023A8 = 0;
    uint64_t v17 = operator new(0x40uLL);
    qword_26A5023A0 = (uint64_t)(v17 + 4);
    unk_26A5023A8 = v17 + 4;
    *uint64_t v17 = xmmword_25B5F24D0;
    v17[1] = unk_25B5F24E0;
    v17[2] = xmmword_25B5F24F0;
    v17[3] = unk_25B5F2500;
    qword_26A502398 = (uint64_t)v17;
    __cxa_atexit((void (*)(void *))sub_25B59EB5C, &qword_26A502350, &dword_25B3F3000);
    __cxa_guard_release(&qword_26A5023B0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A502418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A502418))
  {
    qword_26A5023B8 = 0;
    qword_26A5023C0 = 0;
    qword_26A5023C8 = 0;
    BOOL v18 = operator new(0x10uLL);
    qword_26A5023B8 = (uint64_t)v18;
    *BOOL v18 = xmmword_25B5F17C0;
    qword_26A5023C0 = (uint64_t)(v18 + 1);
    qword_26A5023C8 = (uint64_t)(v18 + 1);
    qword_26A5023D8 = 0;
    qword_26A5023E0 = 0;
    qword_26A5023D0 = 0;
    long long v19 = operator new(0x20uLL);
    *long long v19 = xmmword_25B5F2510;
    v19[1] = unk_25B5F2520;
    qword_26A5023D0 = (uint64_t)v19;
    qword_26A5023D8 = (uint64_t)(v19 + 2);
    qword_26A5023E0 = (uint64_t)(v19 + 2);
    qword_26A5023E8 = 0;
    qword_26A5023F0 = 0;
    qword_26A5023F8 = 0;
    long long v20 = operator new(0x30uLL);
    _OWORD *v20 = xmmword_25B5F2530;
    v20[1] = unk_25B5F2540;
    v20[2] = xmmword_25B5F2550;
    qword_26A5023E8 = (uint64_t)v20;
    qword_26A5023F0 = (uint64_t)(v20 + 3);
    qword_26A5023F8 = (uint64_t)(v20 + 3);
    qword_26A502400 = 0;
    qword_26A502408 = 0;
    unk_26A502410 = 0;
    long long v21 = operator new(0x40uLL);
    qword_26A502408 = (uint64_t)(v21 + 4);
    unk_26A502410 = v21 + 4;
    _OWORD *v21 = xmmword_25B5F2560;
    v21[1] = unk_25B5F2570;
    v21[2] = xmmword_25B5F2580;
    _OWORD v21[3] = unk_25B5F2590;
    qword_26A502400 = (uint64_t)v21;
    __cxa_atexit((void (*)(void *))sub_25B59EB5C, &qword_26A5023B8, &dword_25B3F3000);
    __cxa_guard_release(&qword_26A502418);
  }
  sub_25B59E99C(a3, *a2, 1);
  if ((int)*a2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a3 + 8);
    uint64_t v8 = *((void *)a2 + 1);
    do
    {
      uint64_t v9 = 0;
      *(void *)(v7 + 8 * v6) = 0;
      double v10 = *(double *)(v8 + 8 * v6);
      do
      {
        *(double *)(v8 + 8 * v6) = v10 + *(double *)(qword_26A5023B8 + v9) * 0.0000022204;
        double v11 = *(double *)(qword_26A502350 + v9);
        double v12 = (*(double (**)(uint64_t, unsigned int *))(*(void *)a1 + 24))(a1, a2);
        uint64_t v7 = *(void *)(a3 + 8);
        *(double *)(v7 + 8 * v6) = *(double *)(v7 + 8 * v6) + v11 * v12;
        uint64_t v8 = *((void *)a2 + 1);
        *(double *)(v8 + 8 * v6) = v10;
        v9 += 8;
      }
      while (v9 != 16);
      uint64_t v13 = (int)*a2;
      *(double *)(v7 + 8 * v6) = *(double *)(v7 + 8 * v6) / 0.0000044408;
      ++v6;
    }
    while (v6 < v13);
  }
}

void sub_25B59E8C0(_Unwind_Exception *a1)
{
  int v3 = &qword_26A502400;
  vDSP_Length v4 = &qword_26A502400;
  while (1)
  {
    uint64_t v6 = (void *)*(v4 - 3);
    v4 -= 3;
    float32x2_t v5 = v6;
    if (v6)
    {
      *(v3 - 2) = (uint64_t)v5;
      operator delete(v5);
    }
    int v3 = v4;
    if (v4 == v1)
    {
      __cxa_guard_abort(&qword_26A502418);
      _Unwind_Resume(a1);
    }
  }
}

void sub_25B59E99C(uint64_t a1, unsigned int a2, int a3)
{
  int v6 = a3 * a2;
  if (a3 * a2 == *(_DWORD *)(a1 + 4) * *(_DWORD *)a1)
  {
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
  }
  else
  {
    sub_25B59EAEC((uint64_t)&v13, (int *)a1);
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      free(v7);
      *(void *)(a1 + 8) = 0;
    }
    uint64_t v8 = malloc_type_malloc(8 * (int)a2 * (uint64_t)a3, 0x858BD3C1uLL);
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = v14;
    if (v8 && v14)
    {
      bzero(v8, 8 * v6);
      if ((int)v13 >= (int)a2) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = v13;
      }
      if ((int)v10 >= 1)
      {
        uint64_t v11 = 0;
        for (uint64_t i = 0; i != v10; ++i)
        {
          cblas_dcopy_NEWLAPACK();
          v11 += 8 * a3;
        }
      }
      uint64_t v9 = v14;
    }
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a3;
    if (v9) {
      free(v9);
    }
  }
}

void sub_25B59EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B59EAEC(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = *a2;
  int v5 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v5;
  int v6 = malloc_type_malloc(8 * v5 * v4, 0x100004000313F17uLL);
  *(void *)(a1 + 8) = v6;
  if (v6)
  {
    uint64_t v7 = (const void *)*((void *)a2 + 1);
    if (v7) {
      memcpy(v6, v7, 8 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
    }
  }
  return a1;
}

uint64_t sub_25B59EB5C(uint64_t a1)
{
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    int v3 = *(void **)(a1 + i + 72);
    if (v3)
    {
      *(void *)(a1 + i + 80) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_25B59EBA4()
{
  return 1;
}

double sub_25B59EBB4(uint64_t a1, uint64_t a2)
{
  float v2 = *(uint64_t **)(a1 + 40);
  int v3 = *(uint64_t **)(a1 + 48);
  if (v2 == v3) {
    return 0.0;
  }
  double v5 = 0.0;
  do
  {
    uint64_t v6 = *v2;
    uint64_t v7 = *(void *)(a2 + 8);
    float64x2_t v8 = *(float64x2_t *)(v7 + 16 * *(void *)(*v2 + 8));
    float64x2_t v62 = *(float64x2_t *)(v7 + 16 * *(void *)*v2);
    float64x2_t v58 = v62;
    float64x2_t v63 = v8;
    float64x2_t v9 = *(float64x2_t *)(v7 + 16 * *(void *)(v6 + 24));
    float64x2_t v60 = *(float64x2_t *)(v7 + 16 * *(void *)(v6 + 16));
    float64x2_t v61 = v9;
    float64x2_t v54 = v9;
    float64x2_t v56 = v60;
    uint64_t v10 = (double *)operator new(8uLL);
    float64x2_t v11 = vsubq_f64(v58, v56);
    double *v10 = sqrt(vaddvq_f64(vmulq_f64(v11, v11)));
    double v12 = (double *)sub_25B3FCAD4(2uLL);
    uint64_t v14 = v13;
    float64x2_t v15 = vsubq_f64(v58, v54);
    float32x2_t v16 = &v12[v13];
    v12[1] = sqrt(vaddvq_f64(vmulq_f64(v15, v15)));
    *double v12 = *v10;
    operator delete(v10);
    float64x2_t v17 = vsubq_f64(v63, v60);
    double v18 = sqrt(vaddvq_f64(vmulq_f64(v17, v17)));
    if (v14 < 3)
    {
      uint64_t v20 = 3;
      if ((unint64_t)(((char *)v16 - (char *)v12) >> 2) > 3) {
        uint64_t v20 = ((char *)v16 - (char *)v12) >> 2;
      }
      if ((unint64_t)((char *)v16 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v21 = (unint64_t)sub_25B3FCAD4(v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = 0;
      float32x2_t v16 = (double *)(v21 + 8 * v22);
      *(double *)(v21 + 16) = v18;
      long long v19 = (double *)(v21 + 24);
      do
      {
        *(double *)(v21 + 16 + v23 * 8 - 8) = v12[v23 + 1];
        --v23;
      }
      while (v23 != -2);
      BOOL v24 = (double *)v21;
      operator delete(v12);
      double v12 = v24;
    }
    else
    {
      v12[2] = v18;
      long long v19 = v12 + 3;
    }
    float64x2_t v25 = vsubq_f64(v63, v61);
    double v26 = sqrt(vaddvq_f64(vmulq_f64(v25, v25)));
    if (v19 >= v16)
    {
      uint64_t v28 = v19 - v12;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if (((char *)v16 - (char *)v12) >> 2 > v29) {
        unint64_t v29 = ((char *)v16 - (char *)v12) >> 2;
      }
      if ((unint64_t)((char *)v16 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        unint64_t v30 = (unint64_t)sub_25B3FCAD4(v30);
      }
      uint64_t v27 = (double *)(v30 + 8 * v28);
      double *v27 = v26;
      int v31 = v27;
      if (v19 != v12)
      {
        int v31 = v27;
        do
        {
          uint64_t v32 = *((void *)v19-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        while (v19 != v12);
      }
      operator delete(v12);
      double v12 = v31;
    }
    else
    {
      *long long v19 = v26;
      uint64_t v27 = v19;
    }
    BOOL v33 = v12 == v27 + 1 || v12 == v27;
    unint64_t v34 = v12;
    if (!v33)
    {
      BOOL v35 = v12 + 1;
      double v36 = *v12;
      unint64_t v34 = v12;
      int v37 = v12 + 1;
      do
      {
        double v38 = *v37++;
        double v39 = v38;
        if (v38 < v36)
        {
          double v36 = v39;
          unint64_t v34 = v35;
        }
        BOOL v33 = v35 == v27;
        BOOL v35 = v37;
      }
      while (!v33);
    }
    unint64_t v40 = v34 - v12;
    float64x2_t v57 = *(&v62 + 1 - (v40 >> 1));
    float64x2_t v59 = *(&v62 + (v40 >> 1));
    unint64_t v41 = v40 & 1;
    float64x2_t v53 = *(&v60 + (v41 ^ 1));
    float64x2_t v55 = *(&v60 + v41);
    operator delete(v12);
    float64x2_t v42 = vsubq_f64(v59, v57);
    float64x2_t v43 = vsubq_f64(v55, v53);
    double v44 = vaddvq_f64(vmulq_f64(v42, v43));
    int64x2_t v45 = (int64x2_t)vmulq_f64(v42, v42);
    int64x2_t v46 = (int64x2_t)vmulq_f64(v43, v43);
    float64x2_t v47 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v45, v46), (float64x2_t)vzip2q_s64(v45, v46)));
    double v48 = v44 / fmax(vmulq_laneq_f64(v47, v47, 1).f64[0], 2.22507386e-308);
    if (v48 <= 1.0) {
      double v49 = v48;
    }
    else {
      double v49 = 1.0;
    }
    if (v48 >= -1.0) {
      double v50 = v49;
    }
    else {
      double v50 = -1.0;
    }
    double v51 = fabs(acos(v50) * 180.0 / 3.14159265 + -90.0);
    double v5 = v5 + v51 * sqrt(v51);
    v2 += 3;
  }
  while (v2 != v3);
  return v5;
}

void sub_25B59EF48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B59EF74(uint64_t a1)
{
  *(void *)a1 = &unk_2708F1FA0;
  float v2 = *(void **)(a1 + 72);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 64) = 0;
  double v5 = (void **)(a1 + 40);
  sub_25B413C78(&v5);
  *(void *)a1 = &unk_2708F1FD8;
  int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 24) = 0;
  int v4 = *(void **)(a1 + 16);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 16) = 0;
  }
  *(void *)(a1 + 8) = 0;

  JUMPOUT(0x261163EE0);
}

void sub_25B59F044(uint64_t a1, int *a2, double a3)
{
  double __B = a3;
  sub_25B59F940(a1, *a2, a2[1]);
  double v5 = (const double *)*((void *)a2 + 1);
  uint64_t v6 = *(double **)(a1 + 8);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    vDSP_vsmulD(v5, 1, &__B, v6, 1, a2[1] * (uint64_t)*a2);
  }
}

void sub_25B59F0AC(_Unwind_Exception *exception_object)
{
  int v3 = (void *)v1[1];
  if (v3)
  {
    free(v3);
    v1[1] = 0;
  }
  *uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

double sub_25B59F0CC(int *a1, uint64_t a2)
{
  vDSP_Length v4 = a1[1] * (uint64_t)*a1;
  if (v4)
  {
    double v5 = (double *)malloc_type_malloc(8 * (int)v4, 0x100004000313F17uLL);
    uint64_t v6 = v5;
    if (v5) {
      bzero(v5, 8 * (int)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  BOOL v7 = (const double *)*((void *)a1 + 1);
  if (v7)
  {
    if (v6)
    {
      float64x2_t v8 = *(const double **)(a2 + 8);
      if (v8) {
        vDSP_vmulD(v7, 1, v8, 1, v6, 1, a1[1] * (uint64_t)*a1);
      }
    }
  }
  double __C = 0.0;
  vDSP_sveD(v6, 1, &__C, v4);
  double v9 = __C;
  if (v6) {
    free(v6);
  }
  return v9;
}

void sub_25B59F1B4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

double sub_25B59F1D4(int *a1)
{
  sub_25B59EAEC((uint64_t)&v4, a1);
  uint64_t v1 = __C;
  if (__C)
  {
    vDSP_vabsD(__C, 1, __C, 1, v5 * (uint64_t)v4);
    uint64_t v1 = __C;
    if (__C)
    {
      vDSP_vmulD(__C, 1, __C, 1, __C, 1, v5 * (uint64_t)v4);
      uint64_t v1 = __C;
    }
  }
  double v7 = 0.0;
  vDSP_sveD(v1, 1, &v7, v5 * (uint64_t)v4);
  double v2 = v7;
  if (__C) {
    free(__C);
  }
  return v2;
}

void sub_25B59F284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B59F29C(uint64_t a1, int *a2, signed int a3, int a4)
{
  int v9 = *a2;
  signed int v8 = a2[1];
  if (*a2)
  {
    if (v9 != 1 && v8 >= 2)
    {
      float64x2_t v11 = (double *)malloc_type_malloc(8 * v8 * (uint64_t)v9, 0x21B64F3FuLL);
      double v12 = (const double *)*((void *)a2 + 1);
      if (v12 && v11)
      {
        vDSP_mtransD(v12, 1, v11, 1, a2[1], *a2);
        cblas_dcopy_NEWLAPACK();
        free(v11);
      }
      int v9 = *a2;
      signed int v8 = a2[1];
    }
  }
  *a2 = v8;
  a2[1] = v9;
  int v13 = a4 - a3;
  uint64_t v14 = *((void *)a2 + 1);
  if (!v14 || a3 < 0)
  {
    float64x2_t v15 = 0;
  }
  else if (v8 > a3)
  {
    float64x2_t v15 = (const void *)(v14 + 8 * v9 * a3);
  }
  else
  {
    float64x2_t v15 = 0;
  }
  int v16 = v9 * v13;
  if (v9 * v13)
  {
    float64x2_t v17 = (double *)malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
    double v18 = v17;
    if (v15 && v17) {
      memcpy(v17, v15, 8 * v16);
    }
  }
  else
  {
    double v18 = 0;
  }
  int v19 = *a2;
  unsigned int v20 = a2[1];
  if (*a2 && v19 != 1 && v20 >= 2)
  {
    unint64_t v21 = (double *)malloc_type_malloc(8 * (int)v20 * (uint64_t)v19, 0x21B64F3FuLL);
    uint64_t v22 = (const double *)*((void *)a2 + 1);
    if (v22 && v21)
    {
      vDSP_mtransD(v22, 1, v21, 1, a2[1], *a2);
      cblas_dcopy_NEWLAPACK();
      free(v21);
    }
    int v19 = *a2;
    unsigned int v20 = a2[1];
  }
  *a2 = v20;
  a2[1] = v19;
  sub_25B59F940(a1, v9, v13);
  if (v18)
  {
    if (v16 && *(void *)(a1 + 8) && *(_DWORD *)(a1 + 4) * *(_DWORD *)a1)
    {
      if (v13 == 1 || v9 == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(v18, 1, *(double **)(a1 + 8), 1, v9, v13);
      }
    }
    free(v18);
  }
}

void sub_25B59F4E8(_Unwind_Exception *a1)
{
  int v4 = (void *)v1[1];
  if (v4)
  {
    free(v4);
    v1[1] = 0;
  }
  *uint64_t v1 = 0;
  free(v2);
  _Unwind_Resume(a1);
}

void sub_25B59F51C(unsigned int *a1, int a2, int a3, int *a4)
{
  if (*((void *)a1 + 1)) {
    BOOL v4 = *((void *)a4 + 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return;
  }
  int v9 = *a1;
  unsigned int v10 = a1[1];
  if (*a1)
  {
    if (v9 != 1 && v10 >= 2)
    {
      double v12 = (double *)malloc_type_malloc(8 * (int)v10 * (uint64_t)v9, 0x21B64F3FuLL);
      int v13 = (const double *)*((void *)a1 + 1);
      if (v13 && v12)
      {
        vDSP_mtransD(v13, 1, v12, 1, (int)a1[1], (int)*a1);
        cblas_dcopy_NEWLAPACK();
        free(v12);
      }
      int v9 = *a1;
      unsigned int v10 = a1[1];
    }
  }
  *a1 = v10;
  a1[1] = v9;
  int v14 = *a4 * a4[1];
  if (v14)
  {
    float64x2_t v15 = (double *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
    int v16 = v15;
    if (v15) {
      bzero(v15, 8 * v14);
    }
  }
  else
  {
    int v16 = 0;
  }
  if (*((void *)a4 + 1))
  {
    vDSP_Length v18 = *a4;
    vDSP_Length v17 = a4[1];
    BOOL v19 = !v14 || v16 == 0;
    if (!v19 && v17 * v18 != 0)
    {
      if (v18 == 1 || v17 == 1) {
        cblas_dcopy_NEWLAPACK();
      }
      else {
        vDSP_mtransD(*((const double **)a4 + 1), 1, v16, 1, v17, v18);
      }
    }
  }
  uint64_t v21 = *((void *)a1 + 1);
  if (v21)
  {
    if (!v16) {
      goto LABEL_36;
    }
    memcpy((void *)(v21 + 8 * (int)(a1[1] * a2)), v16, 8 * (int)a1[1] * (uint64_t)(a3 - a2));
  }
  else if (!v16)
  {
    goto LABEL_36;
  }
  free(v16);
LABEL_36:
  int v22 = *a1;
  unsigned int v23 = a1[1];
  if (*a1 && v22 != 1 && v23 >= 2)
  {
    BOOL v24 = (double *)malloc_type_malloc(8 * (int)v23 * (uint64_t)v22, 0x21B64F3FuLL);
    float64x2_t v25 = (const double *)*((void *)a1 + 1);
    if (v25)
    {
      if (v24)
      {
        vDSP_mtransD(v25, 1, v24, 1, (int)a1[1], (int)*a1);
        cblas_dcopy_NEWLAPACK();
        free(v24);
      }
    }
    int v22 = *a1;
    unsigned int v23 = a1[1];
  }
  *a1 = v23;
  a1[1] = v22;
}

void sub_25B59F748(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void *sub_25B59F75C(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_25B59F940(a1, *a2, a2[1]);
  BOOL v4 = (const void *)*((void *)a2 + 1);
  BOOL result = *(void **)(v3 + 8);
  if (v4) {
    BOOL v6 = result == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    double v7 = memcpy(result, v4, 8 * *a2 * (uint64_t)a2[1]);
    MEMORY[0x270FA5388](v7);
    uint64_t v8 = dgetrf_NEWLAPACK();
    MEMORY[0x270FA5388](v8);
    return (void *)dgetri_NEWLAPACK();
  }
  return result;
}

void sub_25B59F890(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[1];
  if (v3)
  {
    free(v3);
    v1[1] = 0;
  }
  *uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B59F8B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    BOOL v2 = *(void *)a2 > *(void *)a1;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return 1;
  }
  double v3 = *(double *)(a1 + 8);
  if (v3 > 0.0 && *(double *)(a2 + 8) < v3) {
    return 2;
  }
  double v5 = *(double *)(a1 + 16);
  if (v5 > 0.0 && *(double *)(a2 + 16) < v5) {
    return 3;
  }
  double v7 = *(double *)(a1 + 24);
  if (v7 > 0.0 && *(double *)(a2 + 24) < v7) {
    return 4;
  }
  double v9 = *(double *)(a1 + 32);
  if (*(double *)(a2 + 32) <= v9 || v9 <= 0.0) {
    return 0;
  }
  else {
    return 5;
  }
}

uint64_t sub_25B59F940(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (a3 * a2)
  {
    BOOL v4 = malloc_type_malloc(8 * a3 * a2, 0x100004000313F17uLL);
    *(void *)(a1 + 8) = v4;
    if (v4) {
      bzero(v4, 8 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
    }
  }
  return a1;
}

double *sub_25B59F9A4(double *result, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, unsigned char *a10, double *a11, double *a12, _DWORD *a13)
{
  *a13 = 0;
  int v13 = *a10;
  double v14 = *a7;
  double v15 = *a4;
  double v16 = *result;
  if (*a4 >= *result) {
    double v17 = *result;
  }
  else {
    double v17 = *a4;
  }
  BOOL v18 = v14 <= v17;
  if (v16 >= v15) {
    double v19 = *result;
  }
  else {
    double v19 = *a4;
  }
  if (v14 >= v19) {
    BOOL v18 = 1;
  }
  int v20 = v13 & v18;
  double v21 = *a3;
  double v22 = v14 - v16;
  double v23 = *a12;
  double v24 = *a11;
  BOOL v25 = *a12 < *a11;
  if (*a3 * (v14 - v16) >= 0.0) {
    BOOL v25 = 1;
  }
  if (!(v20 | v25))
  {
    double v26 = *a9;
    double v27 = *a8;
    double v28 = *a2;
    if (*a8 > *a2)
    {
      int v29 = 1;
      *a13 = 1;
      double v30 = v28 - v27;
      double v31 = v26 + v21 + (v28 - v27) * 3.0 / v22;
      if (v21 >= v26) {
        uint64_t v32 = a3;
      }
      else {
        uint64_t v32 = a9;
      }
      double v33 = *v32;
      if (v31 >= *v32) {
        double v33 = v26 + v21 + (v28 - v27) * 3.0 / v22;
      }
      double v34 = v33 * sqrt(-v21 / v33 * (v26 / v33) + v31 / v33 * (v31 / v33));
      double v35 = -v34;
      if (v14 >= v16) {
        double v35 = v34;
      }
      double v36 = v16 + (v31 + v35 - v21) / (v26 + v35 + v35 - v21) * v22;
      double v37 = v16 + v21 / (v21 + v30 / v22) * 0.5 * v22;
      double v38 = vabdd_f64(v36, v16);
      double v39 = vabdd_f64(v37, v16);
      double v40 = (v37 - v36) * 0.5;
      if (v38 < v39) {
        double v40 = -0.0;
      }
      double v23 = v36 + v40;
      *a10 = 1;
      *a4 = v14;
      a2 = a5;
      a3 = a6;
      int v41 = 1;
      goto LABEL_66;
    }
    double v42 = fabs(v21);
    if (v21 / v42 * v26 >= 0.0)
    {
      if (fabs(v26) >= v42)
      {
        *a13 = 4;
        if (!v13)
        {
          int v41 = 0;
          if (v14 <= v16) {
            double v23 = v24;
          }
          int v29 = 0;
          goto LABEL_65;
        }
        int v41 = 0;
        double v55 = *a6;
        double v56 = v26 + *a6 + (v27 - *a5) * 3.0 / (v15 - v14);
        double v57 = *a9;
        if (*a6 >= v26) {
          double v57 = *a6;
        }
        if (v56 >= v57) {
          double v57 = v26 + *a6 + (v27 - *a5) * 3.0 / (v15 - v14);
        }
        double v58 = v57 * sqrt(-v55 / v57 * (v26 / v57) + v56 / v57 * (v56 / v57));
        double v59 = -v58;
        if (v14 <= v15) {
          double v59 = v58;
        }
        double v23 = v14 + (v56 + v59 - v26) / (v55 + v59 + v59 - v26) * (v15 - v14);
      }
      else
      {
        *a13 = 3;
        double v49 = v26 + v21 + (v28 - v27) * 3.0 / v22;
        if (v21 >= v26) {
          double v50 = a3;
        }
        else {
          double v50 = a9;
        }
        double v51 = *v50;
        if (v49 >= *v50) {
          double v51 = v49;
        }
        double v52 = v51 * sqrt(fmax(-v21 / v51 * (v26 / v51) + v49 / v51 * (v49 / v51), 0.0));
        double v53 = -v52;
        if (v14 <= v16) {
          double v53 = v52;
        }
        if (v53 == 0.0 || (double v54 = (v49 + v53 - v26) / (v53 + v21 - v26 + v53), v54 >= 0.0))
        {
          if (v14 <= v16) {
            double v23 = v24;
          }
        }
        else
        {
          double v23 = v14 + v54 * (v16 - v14);
        }
        double v60 = v14 + v26 / (v26 - v21) * (v16 - v14);
        double v61 = vabdd_f64(v14, v23);
        double v62 = vabdd_f64(v14, v60);
        if (!v13)
        {
          int v29 = 0;
          int v41 = 1;
          if (v61 <= v62) {
            double v23 = v60;
          }
          goto LABEL_65;
        }
        int v41 = 1;
        if (v61 >= v62) {
          double v23 = v60;
        }
      }
      int v29 = 1;
    }
    else
    {
      int v41 = 0;
      *a13 = 2;
      double v43 = v26 + v21 + (v28 - v27) * 3.0 / v22;
      if (v21 >= v26) {
        double v44 = a3;
      }
      else {
        double v44 = a9;
      }
      double v45 = *v44;
      if (v43 >= *v44) {
        double v45 = v26 + v21 + (v28 - v27) * 3.0 / v22;
      }
      double v46 = v45 * sqrt(-v21 / v45 * (v26 / v45) + v43 / v45 * (v43 / v45));
      double v47 = -v46;
      if (v14 <= v16) {
        double v47 = v46;
      }
      double v23 = v14 + (v43 + v47 - v26) / (v21 + v47 + v47 - v26) * (v16 - v14);
      double v48 = v14 + v26 / (v26 - v21) * (v16 - v14);
      if (vabdd_f64(v23, v14) <= vabdd_f64(v48, v14)) {
        double v23 = v48;
      }
      int v29 = 1;
      *a10 = 1;
      *a4 = v16;
      *a5 = *a2;
      *a6 = *a3;
      double v14 = *a7;
    }
LABEL_65:
    *BOOL result = v14;
LABEL_66:
    *a2 = *a8;
    *a3 = *a9;
    double v63 = *a12;
    if (v23 < *a12) {
      double v63 = v23;
    }
    if (*a11 >= v63) {
      double v63 = *a11;
    }
    *a7 = v63;
    if ((v29 & v41) != 0)
    {
      double v64 = *result + (*a4 - *result) * 0.66;
      BOOL v65 = v64 < v63;
      if (*a4 > *result) {
        BOOL v65 = v63 < v64;
      }
      if (!v65) {
        double v63 = *result + (*a4 - *result) * 0.66;
      }
      *a7 = v63;
    }
  }
  return result;
}

uint64_t sub_25B59FDE0(uint64_t result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  float64x2_t v11 = (int *)result;
  while (2)
  {
    double v12 = a2 - 1;
    int v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float64x2_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v46 = *v12;
                uint64_t v47 = *v13;
                if (*(double *)(**a3 + 16 * v46 + 8) < *(double *)(**a3 + 16 * v47 + 8))
                {
                  *int v13 = v46;
                  *double v12 = v47;
                }
                break;
              case 3uLL:
                uint64_t v48 = **a3;
                BOOL result = (uint64_t)sub_25B5A05F8(v13, v13 + 1, a2 - 1, v48);
                break;
              case 4uLL:
                BOOL result = (uint64_t)sub_25B5A0698(v13, v13 + 1, v13 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                BOOL result = (uint64_t)sub_25B5A0764(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            if (a5)
            {
              if (v13 != a2)
              {
                double v49 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = **a3;
                  double v52 = v13;
                  do
                  {
                    uint64_t v54 = *v52;
                    uint64_t v53 = v52[1];
                    double v52 = v49;
                    double v55 = *(double *)(v51 + 16 * v53 + 8);
                    if (v55 < *(double *)(v51 + 16 * v54 + 8))
                    {
                      uint64_t v56 = v50;
                      while (1)
                      {
                        *(int *)((char *)v13 + v56 + 4) = v54;
                        if (!v56) {
                          break;
                        }
                        uint64_t v54 = *(int *)((char *)v13 + v56 - 4);
                        v56 -= 4;
                        if (v55 >= *(double *)(v51 + 16 * v54 + 8))
                        {
                          double v57 = (int *)((char *)v13 + v56 + 4);
                          goto LABEL_76;
                        }
                      }
                      double v57 = v13;
LABEL_76:
                      *double v57 = v53;
                    }
                    double v49 = v52 + 1;
                    v50 += 4;
                  }
                  while (v52 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              uint64_t v93 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v94 = **a3;
                do
                {
                  uint64_t v96 = *v11;
                  uint64_t v95 = v11[1];
                  float64x2_t v11 = v93;
                  double v97 = *(double *)(v94 + 16 * v95 + 8);
                  if (v97 < *(double *)(v94 + 16 * v96 + 8))
                  {
                    do
                    {
                      *uint64_t v93 = v96;
                      uint64_t v96 = *(v93 - 2);
                      --v93;
                    }
                    while (v97 < *(double *)(v94 + 16 * v96 + 8));
                    *uint64_t v93 = v95;
                  }
                  uint64_t v93 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v58 = (v15 - 2) >> 1;
              double v59 = *a3;
              int64_t v60 = v58;
              do
              {
                int64_t v61 = v60;
                if (v58 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  double v63 = &v13[v62];
                  uint64_t v64 = 2 * v60 + 2;
                  uint64_t v65 = *v59;
                  if (v64 < (uint64_t)v15 && *(double *)(v65 + 16 * *v63 + 8) < *(double *)(v65 + 16 * v63[1] + 8))
                  {
                    ++v63;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  uint64_t v66 = &v13[v61];
                  uint64_t v67 = *v63;
                  uint64_t v68 = *v66;
                  double v69 = *(double *)(v65 + 16 * v68 + 8);
                  if (*(double *)(v65 + 16 * v67 + 8) >= v69)
                  {
                    do
                    {
                      int v70 = v63;
                      *uint64_t v66 = v67;
                      if (v58 < v62) {
                        break;
                      }
                      uint64_t v71 = 2 * v62;
                      uint64_t v62 = (2 * v62) | 1;
                      double v63 = &v13[v62];
                      uint64_t v72 = v71 + 2;
                      if (v72 < (uint64_t)v15
                        && *(double *)(v65 + 16 * *v63 + 8) < *(double *)(v65 + 16 * v63[1] + 8))
                      {
                        ++v63;
                        uint64_t v62 = v72;
                      }
                      uint64_t v67 = *v63;
                      uint64_t v66 = v70;
                    }
                    while (*(double *)(v65 + 16 * v67 + 8) >= v69);
                    *int v70 = v68;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v73 = (unint64_t)v14 >> 2;
              uint64_t v74 = *a3;
              do
              {
                uint64_t v75 = 0;
                int v76 = *v13;
                uint64_t v77 = v73 - 2;
                if (v73 < 2) {
                  uint64_t v77 = v73 - 1;
                }
                uint64_t v78 = v77 >> 1;
                double v79 = *a3;
                int v80 = v13;
                do
                {
                  int v81 = v80;
                  v80 += v75 + 1;
                  uint64_t v82 = 2 * v75;
                  BOOL result = (2 * v75) | 1;
                  uint64_t v75 = result;
                  uint64_t v83 = v82 + 2;
                  if (v83 < v73)
                  {
                    BOOL result = (uint64_t)(v80 + 1);
                    if (*(double *)(*v79 + 16 * *v80 + 8) < *(double *)(*v79 + 16 * v80[1] + 8))
                    {
                      ++v80;
                      uint64_t v75 = v83;
                    }
                  }
                  int *v81 = *v80;
                }
                while (v75 <= v78);
                if (v80 == --a2)
                {
                  int *v80 = v76;
                }
                else
                {
                  int *v80 = *a2;
                  *a2 = v76;
                  uint64_t v84 = (char *)v80 - (char *)v13 + 4;
                  if (v84 >= 5)
                  {
                    unint64_t v85 = (unint64_t)((v84 >> 2) - 2) >> 1;
                    uint64_t v86 = &v13[v85];
                    uint64_t v87 = *v86;
                    uint64_t v88 = *v80;
                    uint64_t v89 = *v74;
                    double v90 = *(double *)(*v74 + 16 * v88 + 8);
                    if (*(double *)(*v74 + 16 * v87 + 8) < v90)
                    {
                      do
                      {
                        int v91 = v86;
                        int *v80 = v87;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        uint64_t v86 = &v13[v85];
                        uint64_t v87 = *v86;
                        int v80 = v91;
                      }
                      while (*(double *)(v89 + 16 * v87 + 8) < v90);
                      *int v91 = v88;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          if ((unint64_t)v14 >= 0x201)
          {
            sub_25B5A05F8(v11, &v11[v15 >> 1], a2 - 1, v18);
            sub_25B5A05F8(v11 + 1, v17 - 1, a2 - 2, **a3);
            sub_25B5A05F8(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
            BOOL result = (uint64_t)sub_25B5A05F8(v17 - 1, v17, &v11[v16 + 1], **a3);
            int v19 = *v11;
            *float64x2_t v11 = *v17;
            *double v17 = v19;
          }
          else
          {
            BOOL result = (uint64_t)sub_25B5A05F8(&v11[v15 >> 1], v11, a2 - 1, v18);
          }
          --a4;
          int v20 = *v11;
          uint64_t v21 = **a3;
          if (a5) {
            break;
          }
          double v22 = *(double *)(v21 + 16 * v20 + 8);
          if (*(double *)(v21 + 16 * *(v11 - 1) + 8) < v22) {
            goto LABEL_13;
          }
          if (v22 >= *(double *)(v21 + 16 * *v12 + 8))
          {
            double v38 = v11 + 1;
            do
            {
              int v13 = v38;
              if (v38 >= a2) {
                break;
              }
              ++v38;
            }
            while (v22 >= *(double *)(v21 + 16 * *v13 + 8));
          }
          else
          {
            int v13 = v11;
            do
            {
              uint64_t v37 = v13[1];
              ++v13;
            }
            while (v22 >= *(double *)(v21 + 16 * v37 + 8));
          }
          double v39 = a2;
          if (v13 < a2)
          {
            double v39 = a2;
            do
              uint64_t v40 = *--v39;
            while (v22 < *(double *)(v21 + 16 * v40 + 8));
          }
          if (v13 < v39)
          {
            int v41 = *v13;
            int v42 = *v39;
            do
            {
              *int v13 = v42;
              *double v39 = v41;
              do
              {
                uint64_t v43 = v13[1];
                ++v13;
                int v41 = v43;
              }
              while (v22 >= *(double *)(v21 + 16 * v43 + 8));
              do
              {
                uint64_t v44 = *--v39;
                int v42 = v44;
              }
              while (v22 < *(double *)(v21 + 16 * v44 + 8));
            }
            while (v13 < v39);
          }
          double v45 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *float64x2_t v11 = *v45;
          }
          a5 = 0;
          *double v45 = v20;
        }
        double v22 = *(double *)(v21 + 16 * v20 + 8);
LABEL_13:
        double v23 = v11;
        do
        {
          double v24 = v23;
          uint64_t v26 = v23[1];
          ++v23;
          int v25 = v26;
        }
        while (*(double *)(v21 + 16 * v26 + 8) < v22);
        double v27 = a2;
        if (v24 == v11)
        {
          double v27 = a2;
          do
          {
            if (v23 >= v27) {
              break;
            }
            uint64_t v29 = *--v27;
          }
          while (*(double *)(v21 + 16 * v29 + 8) >= v22);
        }
        else
        {
          do
            uint64_t v28 = *--v27;
          while (*(double *)(v21 + 16 * v28 + 8) >= v22);
        }
        if (v23 < v27)
        {
          int v30 = *v27;
          int v31 = v25;
          uint64_t v32 = v23;
          double v33 = v27;
          do
          {
            *uint64_t v32 = v30;
            *double v33 = v31;
            do
            {
              double v24 = v32;
              uint64_t v34 = v32[1];
              ++v32;
              int v31 = v34;
            }
            while (*(double *)(v21 + 16 * v34 + 8) < v22);
            do
            {
              uint64_t v35 = *--v33;
              int v30 = v35;
            }
            while (*(double *)(v21 + 16 * v35 + 8) >= v22);
          }
          while (v32 < v33);
        }
        if (v24 != v11) {
          *float64x2_t v11 = *v24;
        }
        *double v24 = v20;
        if (v23 >= v27) {
          break;
        }
LABEL_32:
        BOOL result = sub_25B59FDE0(v11, v24, a3, a4, a5 & 1);
        a5 = 0;
        int v13 = v24 + 1;
      }
      BOOL v36 = sub_25B5A0858(v11, v24, a3);
      int v13 = v24 + 1;
      BOOL result = sub_25B5A0858(v24 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = v24;
    if (!v36) {
      continue;
    }
    return result;
  }
}

int *sub_25B5A05F8(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  double v6 = *(double *)(a4 + 16 * v4 + 8);
  double v7 = *(double *)(a4 + 16 * v5 + 8);
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + 16 * v8 + 8);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      uint64_t v10 = *a2;
      uint64_t v11 = *result;
      if (*(double *)(a4 + 16 * v10 + 8) < *(double *)(a4 + 16 * v11 + 8))
      {
        *BOOL result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *BOOL result = v4;
      *a2 = v5;
      uint64_t v12 = *a3;
      if (*(double *)(a4 + 16 * v12 + 8) >= v7) {
        return result;
      }
      *a2 = v12;
    }
    else
    {
      *BOOL result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *sub_25B5A0698(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = sub_25B5A05F8(a1, a2, a3, **a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(double *)(v13 + 16 * v11 + 8) < *(double *)(v13 + 16 * v12 + 8))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(double *)(v13 + 16 * v14 + 8) < *(double *)(v13 + 16 * v15 + 8))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(double *)(v13 + 16 * v16 + 8) < *(double *)(v13 + 16 * v17 + 8))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

int *sub_25B5A0764(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t **a6)
{
  BOOL result = sub_25B5A0698(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = **a6;
  if (*(double *)(v15 + 16 * v13 + 8) < *(double *)(v15 + 16 * v14 + 8))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*(double *)(v15 + 16 * v16 + 8) < *(double *)(v15 + 16 * v17 + 8))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      if (*(double *)(v15 + 16 * v18 + 8) < *(double *)(v15 + 16 * v19 + 8))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*(double *)(v15 + 16 * v20 + 8) < *(double *)(v15 + 16 * v21 + 8))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B5A0858(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(double *)(**a3 + 16 * v8 + 8) < *(double *)(**a3 + 16 * v9 + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_25B5A05F8(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_25B5A0698(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_25B5A0764(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_25B5A05F8(a1, a1 + 1, a1 + 2, **a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    double v17 = *(double *)(v13 + 16 * v15 + 8);
    if (v17 < *(double *)(v13 + 16 * v16 + 8))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(double *)(v13 + 16 * v16 + 8))
        {
          uint64_t v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      int *v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void sub_25B5A0A2C(void *a1)
{
  *a1 = &unk_2708F2010;
  BOOL v2 = (void *)a1[15];
  if (v2)
  {
    free(v2);
    a1[15] = 0;
  }
  a1[14] = 0;
  double v3 = (void *)a1[13];
  if (v3)
  {
    free(v3);
    a1[13] = 0;
  }
  a1[12] = 0;

  JUMPOUT(0x261163EE0);
}

void *sub_25B5A0AB4(void *a1)
{
  *a1 = &unk_2708F1FD8;
  BOOL v2 = (void *)a1[4];
  if (v2)
  {
    free(v2);
    a1[4] = 0;
  }
  a1[3] = 0;
  double v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  a1[1] = 0;
  return a1;
}

char *sub_25B5A0B1C(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        sub_25B469194(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_25B5A0B84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_25B46BD74(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_25B43E9EC((uint64_t)v8);
  return v4;
}

void sub_25B5A0C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25B5A0D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5A0DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5A0DDC(void *a1, void *a2, uint64_t *a3)
{
  __p[16] = *(void **)MEMORY[0x263EF8340];
  id v4 = a1;
  double v97 = a2;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  obuint64_t j = v4;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v101, v109, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v102;
    float32x2_t v10 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
    float32x2_t v11 = (float32x2_t)vdup_n_s32(0xBDCCCCCD);
    uint64_t v93 = *(void *)v102;
    do
    {
      uint64_t v12 = 0;
      uint64_t v96 = v8;
      do
      {
        if (*(void *)v102 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v101 + 1) + 8 * v12);
        objc_msgSend_quad((void *)v13, v6, v7);
        float32x4_t v100 = v14;
        objc_msgSend_quad((void *)v13, v15, v16);
        float32x4_t v99 = v17;
        objc_msgSend_quad((void *)v13, v18, v19);
        float32x2_t v98 = v20;
        objc_msgSend_quad((void *)v13, v21, v22);
        unint64_t v23 = vsubq_f32(v100, v99).u64[0];
        v24.f32[0] = -*((float *)&v23 + 1);
        v24.i32[1] = v23;
        int32x2_t v25 = (int32x2_t)vmul_f32(v24, v24);
        v25.i32[0] = vadd_f32((float32x2_t)v25, (float32x2_t)vdup_lane_s32(v25, 1)).u32[0];
        float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
        float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
        float32x2_t v28 = vmul_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
        float32x2_t v30 = vmul_f32(vadd_f32(v98, v29), (float32x2_t)0x3F0000003F000000);
        uint64_t v31 = *a3;
        uint64_t v32 = a3[1];
        BOOL v33 = sub_25B57AC18(*a3, v32, vmla_f32(v30, v10, v28));
        BOOL v34 = sub_25B57AC18(v31, v32, vmla_f32(v30, v11, v28));
        if (!v33 && v34)
        {
          if (v13)
          {
            long long v35 = *(_OWORD *)(v13 + 272);
            long long v37 = *(_OWORD *)(v13 + 304);
            long long v36 = *(_OWORD *)(v13 + 320);
            *(_OWORD *)(v13 + 272) = *(_OWORD *)(v13 + 288);
            *(_OWORD *)(v13 + 288) = v35;
            *(_OWORD *)(v13 + 304) = v36;
            *(_OWORD *)(v13 + 320) = v37;
            char v38 = *(unsigned char *)(v13 + 125);
            *(unsigned char *)(v13 + 125) = *(unsigned char *)(v13 + 127);
            *(unsigned char *)(v13 + 127) = v38;
            int v39 = *(_DWORD *)(v13 + 228);
            *(_DWORD *)(v13 + 228) = *(_DWORD *)(v13 + 236);
            uint64_t v6 = *(const char **)(v13 + 8);
            uint64_t v7 = *(void *)(v13 + 16);
            uint64_t v40 = v7 - (void)v6;
            *(_DWORD *)(v13 + 236) = v39;
            if ((unint64_t)(v7 - (void)v6) >= 0x20)
            {
              memset(__p, 0, 24);
              sub_25B40EE6C(__p, v6, v7, v40 >> 4);
              uint64_t v41 = ((unint64_t)v40 >> 4) - 2;
              int v42 = (char *)__p[0];
              uint64_t v43 = ((v40 << 28) - 0x100000000) >> 28;
              *(_OWORD *)(*(void *)(v13 + 8) + v43) = *((_OWORD *)__p[0] + (int)v41);
              *(_OWORD *)(*(void *)(v13 + 8) + 16 * (int)v41) = *(_OWORD *)&v42[v43];
              if ((int)((unint64_t)v40 >> 4) >= 3)
              {
                uint64_t v44 = 0;
                uint64_t v45 = (v40 >> 4 << 32) - 0x300000000;
                do
                {
                  *(_OWORD *)(*(void *)(v13 + 8) + 16 * v44++) = *(_OWORD *)&v42[v45 >> 28];
                  v45 -= 0x100000000;
                }
                while (v41 != v44);
              }
              if (*(void *)(v13 + 40) - *(void *)(v13 + 32) < 3uLL) {
                goto LABEL_19;
              }
              long long v105 = 0uLL;
              *(void *)&long long v106 = 0;
              sub_25B3FCA58(&v105, *(const void **)(v13 + 56), *(void *)(v13 + 64), (uint64_t)(*(void *)(v13 + 64) - *(void *)(v13 + 56)) >> 2);
              uint64_t v47 = *(const void **)(v13 + 32);
              uint64_t v46 = *(void *)(v13 + 40);
              size_t v48 = v46 - (void)v47;
              if (v46 - (uint64_t)v47 < 0) {
                sub_25B3FBC4C();
              }
              double v49 = operator new(v46 - (void)v47);
              memmove(v49, v47, v48);
              uint64_t v50 = *(unsigned char **)(v13 + 32);
              uint64_t v51 = *(void *)(v13 + 88) - *(void *)(v13 + 80);
              uint64_t v52 = (int)v51 - 3;
              uint64_t v53 = (v51 << 32) - 0x100000000;
              v50[v53 >> 32] = *((unsigned char *)v49 + v52);
              v50[v52] = *((unsigned char *)v49 + (v53 >> 32));
              uint64_t v54 = (char *)v105;
              double v55 = *(_DWORD **)(v13 + 56);
              v53 >>= 30;
              *(_DWORD *)((char *)v55 + v53) = *(_DWORD *)(v105 + 4 * v52);
              v55[v52] = *(_DWORD *)&v54[v53];
              if ((int)v51 > 3)
              {
                uint64_t v56 = (v51 - 4);
                uint64_t v57 = v52;
                uint64_t v58 = v56 << 32;
                do
                {
                  *v50++ = *((unsigned char *)v49 + (v58 >> 32));
                  *v55++ = *(_DWORD *)&v54[v58 >> 30];
                  v58 -= 0x100000000;
                  --v57;
                }
                while (v57);
              }
              operator delete(v49);
              operator delete(v54);
              if (v42) {
LABEL_19:
              }
                operator delete(v42);
            }
          }
          double v59 = objc_msgSend_identifier((void *)v13, v6, v7);
          uint64_t v62 = objc_msgSend_copy(v59, v60, v61);

          double v63 = objc_opt_new();
          sub_25B4FD4F4(v13, v63);

          if (v13) {
            *(unsigned char *)(v13 + 105) = 0;
          }
          if (!objc_msgSend_type((void *)v13, v64, v65))
          {
            uint64_t v68 = objc_msgSend_identifier((void *)v13, v66, v67);
            id v69 = v62;
            id v70 = v68;
            if (v97)
            {
              id v71 = v69;
              uint64_t v74 = objc_msgSend_array(MEMORY[0x263EFF980], v72, v73);
              uint64_t v75 = sub_25B4EA368(v71, v97[5]);
              objc_msgSend_addObjectsFromArray_(v74, v76, (uint64_t)v75);

              uint64_t v77 = sub_25B4EA368(v71, v97[4]);
              objc_msgSend_addObjectsFromArray_(v74, v78, (uint64_t)v77);

              double v79 = sub_25B4EA368(v71, v97[6]);
              objc_msgSend_addObjectsFromArray_(v74, v80, (uint64_t)v79);

              int v81 = sub_25B4EA368(v71, v97[7]);
              objc_msgSend_addObjectsFromArray_(v74, v82, (uint64_t)v81);

              uint64_t v83 = sub_25B4EA368(v71, v97[12]);
              objc_msgSend_addObjectsFromArray_(v74, v84, (uint64_t)v83);

              unint64_t v85 = sub_25B4EA368(v71, v97[13]);
              objc_msgSend_addObjectsFromArray_(v74, v86, (uint64_t)v85);

              long long v107 = 0u;
              long long v108 = 0u;
              long long v105 = 0u;
              long long v106 = 0u;
              id v87 = v74;
              uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v88, (uint64_t)&v105, __p, 16);
              if (v89)
              {
                uint64_t v90 = *(void *)v106;
                do
                {
                  for (uint64_t i = 0; i != v89; ++i)
                  {
                    if (*(void *)v106 != v90) {
                      objc_enumerationMutation(v87);
                    }
                    sub_25B4FD504(*(void *)(*((void *)&v105 + 1) + 8 * i), v70);
                  }
                  uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v92, (uint64_t)&v105, __p, 16);
                }
                while (v89);
              }
            }
          }

          uint64_t v9 = v93;
        }
        ++v12;
      }
      while (v12 != v96);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v101, v109, 16);
    }
    while (v8);
  }
}

void sub_25B5A13E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  _Unwind_Resume(a1);
}

id sub_25B5A14F4(float32x2_t *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  uint64_t v779 = *MEMORY[0x263EF8340];
  float32x2_t v10 = a2;
  id v672 = a3;
  unint64_t v669 = a4;
  id v671 = a6;
  long long v675 = v10;
  if (!a1)
  {
    id v670 = 0;
    goto LABEL_617;
  }
  id v670 = (id)objc_msgSend_copy(v10, v11, v12);
  uint64_t v15 = objc_msgSend_walls(v10, v13, v14);
  uint64_t v18 = objc_msgSend_count(v15, v16, v17);
  uint64_t v21 = objc_msgSend_curvedWalls(v10, v19, v20);
  uint64_t v24 = objc_msgSend_count(v21, v22, v23);

  uint64_t v687 = objc_msgSend_count(v672, v25, v26);
  v689 = (void *)(v24 + v18);
  if (!(v24 + v18 + v687)) {
    goto LABEL_617;
  }
  long long __p = 0;
  v760 = 0;
  unint64_t v762 = 0;
  long long v756 = 0u;
  long long v757 = 0u;
  long long v758 = 0u;
  long long v759 = 0u;
  float32x2_t v29 = objc_msgSend_walls(v675, v27, v28);
  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v756, v778, 16);
  if (v33)
  {
    uint64_t v34 = *(void *)v757;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v757 != v34) {
          objc_enumerationMutation(v29);
        }
        long long v36 = *(void **)(*((void *)&v756 + 1) + 8 * i);
        objc_msgSend_quad(v36, v31, v32);
        uint64_t v694 = v39;
        uint64_t v40 = (char *)__p;
        if ((unint64_t)__p >= v762)
        {
          int64_t v42 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
          if ((unint64_t)(v42 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v43 = (uint64_t)(v762 - (void)v760) >> 2;
          if (v43 <= v42 + 1) {
            unint64_t v43 = v42 + 1;
          }
          if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)sub_25B3FCAD4(v44);
          }
          else {
            long long v37 = 0;
          }
          uint64_t v45 = (void *)(v44 + 8 * v42);
          *uint64_t v45 = v694;
          uint64_t v41 = v45 + 1;
          uint64_t v46 = (char *)__p;
          uint64_t v47 = (char *)v760;
          if (__p != v760)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *--uint64_t v45 = v48;
            }
            while (v46 != v47);
            uint64_t v46 = (char *)v760;
          }
          v760 = v45;
          long long __p = v41;
          unint64_t v762 = v44 + 8 * (void)v37;
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(void *)long long __p = v39;
          uint64_t v41 = v40 + 8;
        }
        long long __p = v41;
        objc_msgSend_quad(v36, v37, v38);
        uint64_t v695 = v49;
        uint64_t v50 = (char *)__p;
        if ((unint64_t)__p >= v762)
        {
          int64_t v52 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v53 = (uint64_t)(v762 - (void)v760) >> 2;
          if (v53 <= v52 + 1) {
            unint64_t v53 = v52 + 1;
          }
          if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54) {
            unint64_t v54 = (unint64_t)sub_25B3FCAD4(v54);
          }
          else {
            uint64_t v31 = 0;
          }
          double v55 = (void *)(v54 + 8 * v52);
          *double v55 = v695;
          uint64_t v51 = v55 + 1;
          uint64_t v56 = (char *)__p;
          uint64_t v57 = (char *)v760;
          if (__p != v760)
          {
            do
            {
              uint64_t v58 = *((void *)v56 - 1);
              v56 -= 8;
              *--double v55 = v58;
            }
            while (v56 != v57);
            uint64_t v56 = (char *)v760;
          }
          v760 = v55;
          long long __p = v51;
          unint64_t v762 = v54 + 8 * (void)v31;
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *(void *)long long __p = v49;
          uint64_t v51 = v50 + 8;
        }
        long long __p = v51;
      }
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v31, (uint64_t)&v756, v778, 16);
    }
    while (v33);
  }

  long long v755 = 0u;
  long long v753 = 0u;
  long long v754 = 0u;
  long long v752 = 0u;
  uint64_t v61 = objc_msgSend_curvedWalls(v675, v59, v60);
  uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(v61, v62, (uint64_t)&v752, v777, 16);
  if (v65)
  {
    uint64_t v66 = *(void *)v753;
    do
    {
      for (uint64_t j = 0; j != v65; ++j)
      {
        if (*(void *)v753 != v66) {
          objc_enumerationMutation(v61);
        }
        uint64_t v68 = *(void **)(*((void *)&v752 + 1) + 8 * j);
        objc_msgSend_quad(v68, v63, v64);
        uint64_t v696 = v71;
        uint64_t v72 = (char *)__p;
        if ((unint64_t)__p >= v762)
        {
          int64_t v74 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
          if ((unint64_t)(v74 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v75 = (uint64_t)(v762 - (void)v760) >> 2;
          if (v75 <= v74 + 1) {
            unint64_t v75 = v74 + 1;
          }
          if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v75;
          }
          if (v76) {
            unint64_t v76 = (unint64_t)sub_25B3FCAD4(v76);
          }
          else {
            id v69 = 0;
          }
          uint64_t v77 = (void *)(v76 + 8 * v74);
          *uint64_t v77 = v696;
          uint64_t v73 = v77 + 1;
          uint64_t v78 = (char *)__p;
          double v79 = (char *)v760;
          if (__p != v760)
          {
            do
            {
              uint64_t v80 = *((void *)v78 - 1);
              v78 -= 8;
              *--uint64_t v77 = v80;
            }
            while (v78 != v79);
            uint64_t v78 = (char *)v760;
          }
          v760 = v77;
          long long __p = v73;
          unint64_t v762 = v76 + 8 * (void)v69;
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          *(void *)long long __p = v71;
          uint64_t v73 = v72 + 8;
        }
        long long __p = v73;
        objc_msgSend_quad(v68, v69, v70);
        uint64_t v697 = v81;
        uint64_t v82 = (char *)__p;
        if ((unint64_t)__p >= v762)
        {
          int64_t v84 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
          if ((unint64_t)(v84 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v85 = (uint64_t)(v762 - (void)v760) >> 2;
          if (v85 <= v84 + 1) {
            unint64_t v85 = v84 + 1;
          }
          if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v85;
          }
          if (v86) {
            unint64_t v86 = (unint64_t)sub_25B3FCAD4(v86);
          }
          else {
            double v63 = 0;
          }
          id v87 = (void *)(v86 + 8 * v84);
          *id v87 = v697;
          uint64_t v83 = v87 + 1;
          uint64_t v88 = (char *)__p;
          uint64_t v89 = (char *)v760;
          if (__p != v760)
          {
            do
            {
              uint64_t v90 = *((void *)v88 - 1);
              v88 -= 8;
              *--id v87 = v90;
            }
            while (v88 != v89);
            uint64_t v88 = (char *)v760;
          }
          v760 = v87;
          long long __p = v83;
          unint64_t v762 = v86 + 8 * (void)v63;
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          *(void *)long long __p = v81;
          uint64_t v83 = v82 + 8;
        }
        long long __p = v83;
      }
      uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(v61, v63, (uint64_t)&v752, v777, 16);
    }
    while (v65);
  }

  long long v750 = 0u;
  long long v751 = 0u;
  long long v748 = 0u;
  long long v749 = 0u;
  uint64_t v93 = objc_msgSend_curvedWalls(v675, v91, v92);
  uint64_t v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v748, v776, 16);
  if (v97)
  {
    uint64_t v98 = *(void *)v749;
    do
    {
      for (uint64_t k = 0; k != v97; ++k)
      {
        if (*(void *)v749 != v98) {
          objc_enumerationMutation(v93);
        }
        float32x4_t v100 = *(void **)(*((void *)&v748 + 1) + 8 * k);
        objc_msgSend_startOrientation(v100, v95, v96);
        float v102 = v101;
        objc_msgSend_endOrientation(v100, v103, v104);
        float v106 = (float)(v105 * 3.1416) / 180.0;
        for (float m = (float)((float)(v102 * 3.1416) / 180.0) + 0.05236; m < v106; float m = m + 0.05236)
        {
          float v108 = cosf(m);
          objc_msgSend_radius(v100, v109, v110);
          float v112 = v111;
          float v113 = sinf(m);
          objc_msgSend_radius(v100, v114, v115);
          float v117 = v116;
          objc_msgSend_circleCenter(v100, v118, v119);
          v120.f32[0] = v108 * v112;
          v120.f32[1] = v113 * v117;
          float32x2_t v122 = vadd_f32(v120, v121);
          int v123 = (float32x2_t *)__p;
          if ((unint64_t)__p >= v762)
          {
            int64_t v125 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
            if ((unint64_t)(v125 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v126 = (uint64_t)(v762 - (void)v760) >> 2;
            if (v126 <= v125 + 1) {
              unint64_t v126 = v125 + 1;
            }
            if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v127 = v126;
            }
            if (v127) {
              unint64_t v127 = (unint64_t)sub_25B3FCAD4(v127);
            }
            else {
              uint64_t v95 = 0;
            }
            vDSP_Length v128 = (float32x2_t *)(v127 + 8 * v125);
            float32x2_t *v128 = v122;
            int v124 = v128 + 1;
            size_t v129 = (char *)__p;
            uint64_t v130 = (char *)v760;
            if (__p != v760)
            {
              do
              {
                float32x2_t v131 = *(float32x2_t *)(v129 - 8);
                v129 -= 8;
                v128[-1] = v131;
                --v128;
              }
              while (v129 != v130);
              size_t v129 = (char *)v760;
            }
            v760 = v128;
            long long __p = v124;
            unint64_t v762 = v127 + 8 * (void)v95;
            if (v129) {
              operator delete(v129);
            }
          }
          else
          {
            *(float32x2_t *)long long __p = v122;
            int v124 = v123 + 1;
          }
          long long __p = v124;
        }
      }
      uint64_t v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v95, (uint64_t)&v748, v776, 16);
    }
    while (v97);
  }

  long long v746 = 0u;
  long long v747 = 0u;
  long long v744 = 0u;
  long long v745 = 0u;
  id v132 = v672;
  uint64_t v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v132, v133, (uint64_t)&v744, v775, 16);
  if (v136)
  {
    uint64_t v137 = *(void *)v745;
    do
    {
      for (uint64_t n = 0; n != v136; ++n)
      {
        if (*(void *)v745 != v137) {
          objc_enumerationMutation(v132);
        }
        double v139 = *(void **)(*((void *)&v744 + 1) + 8 * n);
        unsigned int v140 = objc_msgSend_boxesDict(v139, v134, v135);
        uint64_t v142 = objc_msgSend_objectForKey_(v140, v141, @"rawdetection");
        BOOL v143 = v142 == 0;

        if (!v143)
        {
          memset(v774, 0, sizeof(v774));
          long long v773 = 0u;
          long long v772 = 0u;
          long long v771 = 0u;
          long long v770 = 0u;
          double v144 = objc_msgSend_boxesDict(v139, v134, v135);
          uint64_t v146 = objc_msgSend_objectForKeyedSubscript_(v144, v145, @"rawdetection");
          sub_25B445344((uint64_t)&v770, v146);

          uint64_t v147 = v770;
          uint64_t v148 = (char *)__p;
          if ((unint64_t)__p >= v762)
          {
            int64_t v150 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
            if ((unint64_t)(v150 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v151 = (uint64_t)(v762 - (void)v760) >> 2;
            if (v151 <= v150 + 1) {
              unint64_t v151 = v150 + 1;
            }
            if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v152 = v151;
            }
            if (v152) {
              unint64_t v152 = (unint64_t)sub_25B3FCAD4(v152);
            }
            else {
              BOOL v134 = 0;
            }
            double v153 = (void *)(v152 + 8 * v150);
            *double v153 = v147;
            double v149 = v153 + 1;
            uint64_t v154 = (char *)__p;
            unint64_t v155 = (char *)v760;
            if (__p != v760)
            {
              do
              {
                uint64_t v156 = *((void *)v154 - 1);
                v154 -= 8;
                *--double v153 = v156;
              }
              while (v154 != v155);
              uint64_t v154 = (char *)v760;
            }
            v760 = v153;
            long long __p = v149;
            unint64_t v762 = v152 + 8 * (void)v134;
            if (v154) {
              operator delete(v154);
            }
          }
          else
          {
            *(void *)long long __p = v770;
            double v149 = v148 + 8;
          }
          long long __p = v149;
          uint64_t v157 = v771;
          if ((unint64_t)v149 >= v762)
          {
            uint64_t v159 = ((char *)v149 - (unsigned char *)v760) >> 3;
            if ((unint64_t)(v159 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v160 = (uint64_t)(v762 - (void)v760) >> 2;
            if (v160 <= v159 + 1) {
              unint64_t v160 = v159 + 1;
            }
            if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v161 = v160;
            }
            if (v161) {
              unint64_t v161 = (unint64_t)sub_25B3FCAD4(v161);
            }
            else {
              BOOL v134 = 0;
            }
            double v162 = (void *)(v161 + 8 * v159);
            *double v162 = v157;
            double v158 = v162 + 1;
            uint64_t v163 = (char *)__p;
            double v164 = (char *)v760;
            if (__p != v760)
            {
              do
              {
                uint64_t v165 = *((void *)v163 - 1);
                v163 -= 8;
                *--double v162 = v165;
              }
              while (v163 != v164);
              uint64_t v163 = (char *)v760;
            }
            v760 = v162;
            long long __p = v158;
            unint64_t v762 = v161 + 8 * (void)v134;
            if (v163) {
              operator delete(v163);
            }
          }
          else
          {
            void *v149 = v771;
            double v158 = v149 + 1;
          }
          long long __p = v158;
          uint64_t v166 = v772;
          if ((unint64_t)v158 >= v762)
          {
            uint64_t v168 = ((char *)v158 - (unsigned char *)v760) >> 3;
            if ((unint64_t)(v168 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v169 = (uint64_t)(v762 - (void)v760) >> 2;
            if (v169 <= v168 + 1) {
              unint64_t v169 = v168 + 1;
            }
            if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v170 = v169;
            }
            if (v170) {
              unint64_t v170 = (unint64_t)sub_25B3FCAD4(v170);
            }
            else {
              BOOL v134 = 0;
            }
            uint64_t v171 = (void *)(v170 + 8 * v168);
            *uint64_t v171 = v166;
            float v167 = v171 + 1;
            uint64_t v172 = (char *)__p;
            int v173 = (char *)v760;
            if (__p != v760)
            {
              do
              {
                uint64_t v174 = *((void *)v172 - 1);
                v172 -= 8;
                *--uint64_t v171 = v174;
              }
              while (v172 != v173);
              uint64_t v172 = (char *)v760;
            }
            v760 = v171;
            long long __p = v167;
            unint64_t v762 = v170 + 8 * (void)v134;
            if (v172) {
              operator delete(v172);
            }
          }
          else
          {
            void *v158 = v772;
            float v167 = v158 + 1;
          }
          long long __p = v167;
          uint64_t v175 = v773;
          if ((unint64_t)v167 >= v762)
          {
            uint64_t v177 = ((char *)v167 - (unsigned char *)v760) >> 3;
            if ((unint64_t)(v177 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            unint64_t v178 = (uint64_t)(v762 - (void)v760) >> 2;
            if (v178 <= v177 + 1) {
              unint64_t v178 = v177 + 1;
            }
            if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v179 = v178;
            }
            if (v179) {
              unint64_t v179 = (unint64_t)sub_25B3FCAD4(v179);
            }
            else {
              BOOL v134 = 0;
            }
            float v180 = (void *)(v179 + 8 * v177);
            *float v180 = v175;
            double v176 = v180 + 1;
            float32x2_t v181 = (char *)__p;
            int v182 = (char *)v760;
            if (__p != v760)
            {
              do
              {
                uint64_t v183 = *((void *)v181 - 1);
                v181 -= 8;
                *--float v180 = v183;
              }
              while (v181 != v182);
              float32x2_t v181 = (char *)v760;
            }
            v760 = v180;
            long long __p = v176;
            unint64_t v762 = v179 + 8 * (void)v134;
            if (v181) {
              operator delete(v181);
            }
          }
          else
          {
            *float v167 = v773;
            double v176 = v167 + 1;
          }
          long long __p = v176;
        }
      }
      uint64_t v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v132, v134, (uint64_t)&v744, v775, 16);
    }
    while (v136);
  }

  if ((unint64_t)v689 <= 3 && (a5 & 1) == 0)
  {
    int v190 = a1[5].u8[0];
    if (v669 && !a1[5].i8[0])
    {
      id v191 = v669[14];
      BOOL v194 = objc_msgSend_count(v191, v192, v193) == 0;

      if (!v194)
      {
        float32x2_t v195 = *(float32x2_t *)((char *)v669[10] + 48);
        if (!a1[5].i8[0]) {
          a1[5].i8[0] = 1;
        }
        a1[4] = v195;
LABEL_190:
        double v196 = (char *)__p;
        if ((unint64_t)__p >= v762)
        {
          int64_t v198 = ((unsigned char *)__p - (unsigned char *)v760) >> 3;
          if ((unint64_t)(v198 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          unint64_t v199 = (uint64_t)(v762 - (void)v760) >> 2;
          if (v199 <= v198 + 1) {
            unint64_t v199 = v198 + 1;
          }
          if (v762 - (unint64_t)v760 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v200 = v199;
          }
          if (v200) {
            unint64_t v200 = (unint64_t)sub_25B3FCAD4(v200);
          }
          else {
            double v184 = 0;
          }
          int v201 = (double *)(v200 + 8 * v198);
          unint64_t v202 = v200 + 8 * (void)v184;
          double v186 = *(double *)&a1[4];
          *int v201 = v186;
          double v197 = v201 + 1;
          char v203 = (double *)__p;
          uint64_t v204 = (double *)v760;
          if (__p != v760)
          {
            do
            {
              double v205 = *--v203;
              double v186 = v205;
              *--int v201 = v205;
            }
            while (v203 != v204);
            char v203 = (double *)v760;
          }
          v760 = v201;
          long long __p = v197;
          unint64_t v762 = v202;
          if (v203) {
            operator delete(v203);
          }
        }
        else
        {
          double v186 = *(double *)&a1[4];
          *(double *)long long __p = v186;
          double v197 = v196 + 8;
        }
        long long __p = v197;
        goto LABEL_207;
      }
      int v190 = a1[5].u8[0];
    }
    if (!v190) {
      goto LABEL_207;
    }
    goto LABEL_190;
  }
LABEL_207:
  LOBYTE(v770) = 0;
  LOBYTE(v774[0]) = 0;
  if (!v671) {
    goto LABEL_224;
  }
  float v206 = objc_msgSend_floors(v671, v184, v185);
  BOOL v209 = objc_msgSend_count(v206, v207, v208) == 0;

  if (v209) {
    goto LABEL_224;
  }
  uint64_t v212 = objc_msgSend_floors(v671, v210, v211);
  unsigned int v214 = objc_msgSend_objectAtIndexedSubscript_(v212, v213, 0);
  BOOL v217 = objc_msgSend_identifier(v214, v215, v216);
  uint64_t v220 = objc_msgSend_copy(v217, v218, v219);
  uint64_t v221 = (void *)a1[6];
  a1[6] = (float32x2_t)v220;

  uint64_t v224 = objc_msgSend_floors(v671, v222, v223);
  float32x2_t v226 = objc_msgSend_objectAtIndexedSubscript_(v224, v225, 0);
  objc_msgSend_quad(v226, v227, v228);
  DWORD2(v770) = v229;
  DWORD2(v771) = v230;
  DWORD2(v772) = v231;
  *(void *)&long long v770 = v232;
  *(void *)&long long v771 = v233;
  DWORD2(v773) = v234;
  *(void *)&long long v772 = v235;
  *(void *)&long long v773 = v236;
  if (!LOBYTE(v774[0])) {
    LOBYTE(v774[0]) = 1;
  }

  if (!LOBYTE(v774[0])) {
    sub_25B4704D8();
  }
  src[1] = 0;
  src[0] = 0;
  *(void *)&long long v732 = 0;
  sub_25B40EE6C(src, &v770, (uint64_t)v774, 4uLL);
  unint64_t v237 = src[0];
  if ((void *)((char *)src[1] - (char *)src[0]) == (void *)64)
  {
    float32x4_t v238 = vsubq_f32(*((float32x4_t *)src[0] + 1), *(float32x4_t *)src[0]);
    int32x2_t v239 = (int32x2_t)vmulq_f32(v238, v238).u64[0];
    *(float *)v239.i32 = sqrtf(vaddv_f32((float32x2_t)v239));
    if (*(float *)v239.i32 >= 0.000001)
    {
      float32x2_t v240 = vdiv_f32(*(float32x2_t *)v238.f32, (float32x2_t)vdup_lane_s32(v239, 0));
      if (!a1[2].i8[0]) {
        a1[2].i8[0] = 1;
      }
      a1[1] = v240;
    }
    else if (a1[2].i8[0])
    {
      a1[2].i8[0] = 0;
    }
LABEL_223:
    operator delete(v237);
    goto LABEL_224;
  }
  if (a1[2].i8[0]) {
    a1[2].i8[0] = 0;
  }
  if (v237) {
    goto LABEL_223;
  }
LABEL_224:
  if (v689) {
    unint64_t v241 = (unint64_t)v689;
  }
  else {
    unint64_t v241 = 2 * v687;
  }
  sub_25B4CF17C((float32x2_t **)v743, a1 + 1, (float32x2_t **)&v760, v241, v186, v187, v188, v189);
  unsigned int v243 = v743[0];
  if ((void *)((char *)v743[1] - (char *)v743[0]) == (void *)32)
  {
    for (iuint64_t i = 0; ii != 4; ++ii)
    {
      if (v675) {
        int v245 = v675[4];
      }
      else {
        int v245 = 0;
      }
      *(void *)&long long v242 = v243[ii];
      DWORD2(v242) = v245;
      *(&v739 + ii) = v242;
    }
    uint64_t v246 = objc_alloc_init(RS3DSurface);
    uint64_t v247 = (uint64_t)v246;
    *(_OWORD *)long long src = v739;
    long long v732 = v740;
    long long v733 = v741;
    *(_OWORD *)v734 = v742;
    uint64_t v666 = (uint64_t)v246;
    if (v246)
    {
      objc_copyStruct(&v246[1], src, 64, 1, 0);
      *(unsigned char *)(v247 + 104) = 5;
      sub_25B4FD4F4(v247, *(void **)&a1[6]);
      *(unsigned char *)(v247 + 105) = 1;
      *(_DWORD *)(v247 + 108) = 1065353216;
    }
    else
    {
      sub_25B4FD4F4(0, *(void **)&a1[6]);
    }
    unint64_t v250 = 0x263EFF000;
    if (a5)
    {
      int64x2_t v763 = 0uLL;
      unint64_t v764 = 0;
      long long v735 = 0u;
      long long v736 = 0u;
      long long v737 = 0u;
      long long v738 = 0u;
      float v251 = objc_msgSend_curvedWalls(v675, v248, v249);
      uint64_t v255 = objc_msgSend_countByEnumeratingWithState_objects_count_(v251, v252, (uint64_t)&v735, v769, 16);
      if (v255)
      {
        uint64_t v256 = *(void *)v736;
        do
        {
          for (uint64_t jj = 0; jj != v255; ++jj)
          {
            if (*(void *)v736 != v256) {
              objc_enumerationMutation(v251);
            }
            int8x8_t v258 = *(void **)(*((void *)&v735 + 1) + 8 * jj);
            vDSP_Length v259 = objc_msgSend_identifier(v258, v253, v254, v666);
            objc_msgSend_UUIDString(v259, v260, v261);
            id v262 = objc_claimAutoreleasedReturnValue();
            uint64_t v265 = (char *)objc_msgSend_UTF8String(v262, v263, v264);
            sub_25B403500(&v730, v265);
            objc_msgSend_quad(v258, v266, v267);
            double v698 = v268;
            objc_msgSend_quad(v258, v269, v270);
            sub_25B3FFD2C((uint64_t)src, &v730, 1, v698, v271);
            if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v730.__r_.__value_.__l.__data_);
            }

            uint64_t v272 = v763.i64[1];
            if (v763.i64[1] >= v764)
            {
              uint64_t v273 = sub_25B3FFE64(&v763, (long long *)src);
            }
            else
            {
              sub_25B3FFDC4((char *)v763.i64[1], (long long *)src);
              uint64_t v273 = v272 + 80;
            }
            v763.i64[1] = v273;
            if (v734[0])
            {
              v734[1] = v734[0];
              operator delete(v734[0]);
            }
            if (SBYTE7(v732) < 0) {
              operator delete(src[0]);
            }
          }
          uint64_t v255 = objc_msgSend_countByEnumeratingWithState_objects_count_(v251, v253, (uint64_t)&v735, v769, 16);
        }
        while (v255);
      }

      long long v728 = 0u;
      long long v729 = 0u;
      long long v726 = 0u;
      long long v727 = 0u;
      uint64_t v276 = objc_msgSend_walls(v675, v274, v275);
      uint64_t v280 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v277, (uint64_t)&v726, v768, 16);
      if (v280)
      {
        uint64_t v281 = *(void *)v727;
        do
        {
          for (kuint64_t k = 0; kk != v280; ++kk)
          {
            if (*(void *)v727 != v281) {
              objc_enumerationMutation(v276);
            }
            size_t v283 = *(void **)(*((void *)&v726 + 1) + 8 * kk);
            float32x2_t v284 = objc_msgSend_identifier(v283, v278, v279, v666);
            objc_msgSend_UUIDString(v284, v285, v286);
            id v287 = objc_claimAutoreleasedReturnValue();
            int v290 = (char *)objc_msgSend_UTF8String(v287, v288, v289);
            sub_25B403500(&v725, v290);
            objc_msgSend_quad(v283, v291, v292);
            double v699 = v293;
            objc_msgSend_quad(v283, v294, v295);
            sub_25B3FFD2C((uint64_t)src, &v725, 0, v699, v296);
            if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v725.__r_.__value_.__l.__data_);
            }

            uint64_t v297 = v763.i64[1];
            if (v763.i64[1] >= v764)
            {
              uint64_t v298 = sub_25B3FFE64(&v763, (long long *)src);
            }
            else
            {
              sub_25B3FFDC4((char *)v763.i64[1], (long long *)src);
              uint64_t v298 = v297 + 80;
            }
            v763.i64[1] = v298;
            if (v734[0])
            {
              v734[1] = v734[0];
              operator delete(v734[0]);
            }
            if (SBYTE7(v732) < 0) {
              operator delete(src[0]);
            }
          }
          uint64_t v280 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v278, (uint64_t)&v726, v768, 16);
        }
        while (v280);
      }

      memset(v722, 0, sizeof(v722));
      sub_25B4C8378(&v723, v763.i64, 1, v722);
      src[0] = v722;
      sub_25B400058((void ***)src);
      uint64_t v300 = v723;
      uint64_t v299 = v724;
      uint64_t v301 = v724 - v723;
      size_t v302 = 0xCCCCCCCCCCCCCCCDLL * ((v724 - v723) >> 3);
      if (v302 >= 4)
      {
        if (!LOBYTE(v774[0]))
        {
          long long v770 = v739;
          long long v771 = v740;
          long long v772 = v741;
          long long v773 = v742;
          LOBYTE(v774[0]) = 1;
        }
        sub_25B400BE4(src, 4uLL);
        uint64_t v303 = 0;
        uint64_t v304 = v723;
        uint64_t v305 = (size_t *)src[0];
        size_t v306 = v302;
        size_t v307 = v302;
        do
        {
          long long v308 = *(&v770 + v303);
          if (v303)
          {
            unint64_t v309 = (v307 + 1) % v302;
            size_t v307 = v302;
            if ((v309 + 3 - v303) % v302 != v306)
            {
              float v310 = 3.4028e38;
              size_t v307 = v302;
              do
              {
                float32x2_t v311 = vsub_f32(*(float32x2_t *)&v308, *(float32x2_t *)(v304 + 40 * v309));
                float v312 = sqrtf(vaddv_f32(vmul_f32(v311, v311)));
                if (v312 < v310)
                {
                  float v310 = v312;
                  size_t v307 = v309;
                }
                if (v309 + 1 == v302) {
                  unint64_t v309 = 0;
                }
                else {
                  ++v309;
                }
              }
              while ((v309 + 3 - v303) % v302 != v306);
            }
            v305[v303] = v307;
          }
          else
          {
            size_t v307 = v302;
            if (v299 != v300)
            {
              size_t v313 = 0;
              float v314 = 3.4028e38;
              int v315 = (float32x2_t *)v304;
              size_t v307 = v302;
              do
              {
                float32x2_t v316 = *v315;
                v315 += 5;
                float32x2_t v317 = vsub_f32(*(float32x2_t *)&v308, v316);
                float v318 = sqrtf(vaddv_f32(vmul_f32(v317, v317)));
                if (v318 < v314)
                {
                  float v314 = v318;
                  size_t v307 = v313;
                }
                ++v313;
              }
              while (v302 != v313);
            }
            size_t *v305 = v307;
            size_t v306 = v307;
          }
          ++v303;
        }
        while (v303 != 4);
        if (v301 < 0) {
          sub_25B3FBC4C();
        }
        unint64_t v319 = (unint64_t)operator new(v302);
        bzero((void *)v319, v302);
        uint64_t v322 = 0;
        float32x2_t v323 = src[0];
        do
        {
          unint64_t v324 = v323[v322];
          uint64_t v325 = v322 + 1;
          uint64_t v326 = v323[(v322 + 1) & 3];
          while (v324 != v326)
          {
            *(unsigned char *)(v319 + v324) = v322;
            unint64_t v324 = (v324 + 1) % v302;
          }
          ++v322;
        }
        while (v325 != 4);
        int v327 = (char *)(v319 + v302);
        if (v323)
        {
          src[1] = v323;
          operator delete(v323);
        }
        int v328 = *(unsigned __int8 *)v319;
        if (v328 == *(unsigned __int8 *)(v302 + v319 - 1))
        {
          uint64_t v329 = 1;
          while (v328 == *(unsigned __int8 *)(v319 + v329))
          {
            if (v302 == ++v329) {
              goto LABEL_333;
            }
          }
          if ((int)v329 >= 1)
          {
            uint64_t v342 = (char *)v319;
            uint64_t v343 = v329;
            uint64_t v344 = v723 + 40 * v329;
            if (v344 != v724) {
              sub_25B5A4554(v723, v344, v724);
            }
            double v345 = &v342[v343];
            unint64_t v319 = (unint64_t)v342;
            sub_25B5A45F4(v342, v345, v327);
          }
        }
LABEL_333:
        long long v720 = 0u;
        long long v721 = 0u;
        long long v718 = 0u;
        long long v719 = 0u;
        double v346 = objc_msgSend_curvedWalls(v675, v320, v321, v666);
        uint64_t v350 = objc_msgSend_countByEnumeratingWithState_objects_count_(v346, v347, (uint64_t)&v718, v767, 16);
        if (!v350) {
          goto LABEL_445;
        }
        uint64_t v681 = *(void *)v719;
        int v673 = v346;
        long long v674 = v327;
        while (1)
        {
          float32x4_t v690 = 0;
          uint64_t v700 = v350;
          do
          {
            __long long src = v319;
            if (*(void *)v719 != v681) {
              objc_enumerationMutation(v346);
            }
            long long v683 = *(void **)(*((void *)&v718 + 1) + 8 * (void)v690);
            float32x2_t v351 = objc_msgSend_identifier(v683, v348, v349);
            objc_msgSend_UUIDString(v351, v352, v353);
            id v354 = objc_claimAutoreleasedReturnValue();
            uint64_t v357 = (char *)objc_msgSend_UTF8String(v354, v355, v356);

            uint64_t v358 = v723;
            if (v724 == v723)
            {
LABEL_349:
              unint64_t v319 = __src;
              goto LABEL_350;
            }
            unint64_t v359 = 0;
            uint64_t v360 = __src - (void)v327 + 1;
            double v361 = &v327[~__src];
            uint64_t v362 = 40;
            uint64_t v363 = 8;
            while (1)
            {
              sub_25B403500(src, v357);
              if ((void *)(v358 + v363 + 8) == sub_25B495914(v358 + v363, src))
              {
                BOOL v367 = 0;
              }
              else
              {
                uint64_t v364 = v723;
                uint64_t v365 = v724;
                sub_25B403500(&v715, v357);
                unint64_t v366 = v364 + 40 * ((v359 + 1) % (0xCCCCCCCCCCCCCCCDLL * ((v365 - v364) >> 3)));
                BOOL v367 = v366 + 16 != (void)sub_25B495914(v366 + 8, &v715);
                if (SHIBYTE(v717) < 0) {
                  operator delete(v715);
                }
                uint64_t v350 = v700;
              }
              if (SBYTE7(v732) < 0) {
                operator delete(src[0]);
              }
              if (v367) {
                break;
              }
              ++v359;
              uint64_t v358 = v723;
              v363 += 40;
              ++v360;
              --v361;
              v362 += 40;
              if (v359 >= 0xCCCCCCCCCCCCCCCDLL * ((v724 - v723) >> 3)) {
                goto LABEL_349;
              }
            }
            objc_msgSend_startOrientation(v683, v348, v349);
            float v369 = v368;
            unint64_t v319 = __src;
            objc_msgSend_endOrientation(v683, v370, v371);
            float v373 = v372;
            float v374 = (float)(v369 * 3.1416) / 180.0;
            float v679 = cosf(v374);
            objc_msgSend_radius(v683, v375, v376);
            float v677 = v377;
            float v378 = sinf(v374);
            objc_msgSend_radius(v683, v379, v380);
            float v382 = v381;
            objc_msgSend_circleCenter(v683, v383, v384);
            float32x2_t v386 = v385;
            float v676 = v374;
            float v387 = (float)(v373 * 3.1416) / 180.0;
            float v388 = cosf(v387);
            objc_msgSend_radius(v683, v389, v390);
            float v392 = v391;
            float v393 = sinf(v387);
            objc_msgSend_radius(v683, v394, v395);
            float v397 = v396;
            objc_msgSend_circleCenter(v683, v398, v399);
            v400.f32[0] = v679 * v677;
            v400.f32[1] = v378 * v382;
            v401.f32[0] = v388 * v392;
            v401.f32[1] = v393 * v397;
            float32x2_t v403 = vadd_f32(v401, v402);
            float32x2_t v404 = *(float32x2_t *)(v723 + 40 * v359);
            float32x2_t v405 = vsub_f32(vadd_f32(v400, v386), v404);
            int32x2_t v406 = (int32x2_t)vmul_f32(v405, v405);
            float32x2_t v407 = vsub_f32(v403, v404);
            int32x2_t v408 = (int32x2_t)vmul_f32(v407, v407);
            int32x2_t v409 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v406, v408), (float32x2_t)vzip2_s32(v406, v408)));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(v409, 1), (float32x2_t)v409).u32[0])
            {
              float v410 = v387 + -0.017453;
              float v411 = v676 + 0.05236;
              if ((float)(v676 + 0.05236) >= v410) {
                goto LABEL_350;
              }
              v680 = v327;
              int v412 = 0;
              int v413 = 0;
              unint64_t v414 = 0;
              do
              {
                if ((unint64_t)v413 >= v414)
                {
                  uint64_t v416 = v413 - v412;
                  unint64_t v417 = v416 + 1;
                  if ((unint64_t)(v416 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v414 - (void)v412) >> 1 > v417) {
                    unint64_t v417 = (uint64_t)(v414 - (void)v412) >> 1;
                  }
                  if (v414 - (unint64_t)v412 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v418 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v418 = v417;
                  }
                  if (v418) {
                    unint64_t v418 = (unint64_t)sub_25B3FBC64(v418);
                  }
                  else {
                    float32x2_t v348 = 0;
                  }
                  unint64_t v419 = (float *)(v418 + 4 * v416);
                  *unint64_t v419 = v411;
                  float32x2_t v415 = v419 + 1;
                  while (v413 != v412)
                  {
                    int v420 = *((_DWORD *)v413-- - 1);
                    *((_DWORD *)v419-- - 1) = v420;
                  }
                  unint64_t v414 = v418 + 4 * (void)v348;
                  if (v412) {
                    operator delete(v412);
                  }
                  int v412 = v419;
                  unint64_t v319 = __src;
                }
                else
                {
                  *int v413 = v411;
                  float32x2_t v415 = v413 + 1;
                }
                float v411 = v411 + 0.05236;
                int v413 = v415;
              }
              while (v411 < v410);
            }
            else
            {
              float v421 = v387 + -0.05236;
              if (v421 <= (float)(v676 + 0.017453)) {
                goto LABEL_350;
              }
              v680 = v327;
              int v412 = 0;
              int v422 = 0;
              unint64_t v423 = 0;
              do
              {
                if ((unint64_t)v422 >= v423)
                {
                  uint64_t v424 = v422 - v412;
                  unint64_t v425 = v424 + 1;
                  if ((unint64_t)(v424 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v423 - (void)v412) >> 1 > v425) {
                    unint64_t v425 = (uint64_t)(v423 - (void)v412) >> 1;
                  }
                  if (v423 - (unint64_t)v412 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v426 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v426 = v425;
                  }
                  if (v426) {
                    unint64_t v426 = (unint64_t)sub_25B3FBC64(v426);
                  }
                  else {
                    float32x2_t v348 = 0;
                  }
                  signed int v427 = (float *)(v426 + 4 * v424);
                  *signed int v427 = v421;
                  float32x2_t v415 = v427 + 1;
                  while (v422 != v412)
                  {
                    int v428 = *((_DWORD *)v422-- - 1);
                    *((_DWORD *)v427-- - 1) = v428;
                  }
                  unint64_t v423 = v426 + 4 * (void)v348;
                  if (v412) {
                    operator delete(v412);
                  }
                  int v412 = v427;
                  unint64_t v319 = __src;
                }
                else
                {
                  *int v422 = v421;
                  float32x2_t v415 = v422 + 1;
                }
                float v421 = v421 + -0.05236;
                int v422 = v415;
              }
              while (v421 > (float)(v676 + 0.017453));
            }
            uint64_t v429 = (char *)v415 - (char *)v412;
            if (v415 != v412)
            {
              uint64_t v430 = (unsigned __int8 *)(v319 + v359);
              unint64_t v431 = v429 >> 2;
              float32x2_t v432 = v680;
              if (v674 - v680 < (unint64_t)(v429 >> 2))
              {
                long long v678 = (const char *)(v319 + v359 + 1);
                uint64_t v433 = (uint64_t)&v680[v431 - v319];
                if (v433 < 0) {
                  sub_25B3FBC4C();
                }
                if (2 * (uint64_t)&v674[-v319] > (unint64_t)v433) {
                  uint64_t v433 = 2 * (void)&v674[-v319];
                }
                if ((unint64_t)&v674[-v319] >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v434 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v434 = v433;
                }
                if (v434)
                {
                  size_t v435 = v434;
                  BOOL v436 = operator new(v434);
                  size_t v434 = v435;
                }
                else
                {
                  BOOL v436 = 0;
                }
                uint64_t v444 = 0;
                float32x4_t v445 = &v436[v359 + 1 + v431];
                do
                  v436[v359 + 1 + v444++] = *v430;
                while (v431 != v444);
                long long v674 = &v436[v434];
                do
                {
                  v436[v359] = *(unsigned char *)(v319 + v359);
                  --v359;
                }
                while (v359 != -1);
                float32x2_t v348 = (char *)v678;
                int64_t v446 = v680 - v678;
                double v346 = v673;
                if (v680 != v678)
                {
                  memmove(v445, v678, v680 - v678);
                  float32x4_t v445 = (char *)&v678[(void)v436 - v319 + v431];
                }
                int v327 = &v445[v446];
                if (v319)
                {
                  operator delete((void *)v319);
                  goto LABEL_436;
                }
                unint64_t v319 = (unint64_t)v436;
                float32x2_t v437 = &v445[v446];
LABEL_435:
                int v327 = v437;
                BOOL v436 = (unsigned char *)v319;
LABEL_436:
                if (v415 != v412)
                {
                  int v447 = v412;
                  do
                  {
                    float v448 = cosf(*v447);
                    objc_msgSend_radius(v683, v449, v450);
                    float v452 = v451;
                    float v453 = sinf(*v447);
                    objc_msgSend_radius(v683, v454, v455);
                    float v457 = v456;
                    objc_msgSend_circleCenter(v683, v458, v459);
                    float32x2_t v461 = v460;
                    sub_25B403500(v713, v357);
                    v462.f32[0] = v448 * v452;
                    v462.f32[1] = v453 * v457;
                    sub_25B4C9C30((uint64_t)src, v713, 0, COERCE_DOUBLE(vadd_f32(v462, v461)));
                    if (v714 < 0) {
                      operator delete(v713[0]);
                    }
                    sub_25B5766FC(&v723, v362 + v723, (unint64_t)src);
                    sub_25B400248((char *)v732);
                    ++v447;
                    v362 += 40;
                  }
                  while (v447 != v415);
                }
                goto LABEL_441;
              }
              float32x2_t v348 = (char *)(v319 + v359 + 1);
              float32x2_t v437 = v680;
              if (v431 <= v680 - v348)
              {
LABEL_410:
                uint64_t v439 = (uint64_t)v437;
                if (&v437[-v431] < v432)
                {
                  if (v431 <= (unint64_t)v361) {
                    unint64_t v440 = (unint64_t)v361;
                  }
                  else {
                    unint64_t v440 = v431;
                  }
                  int v441 = (char *)(v440 + v359);
                  do
                  {
                    v441[v319 + 1] = v441[v319 + 1 - v431];
                    ++v441;
                  }
                  while (&v432[v431 + ~v319] != v441);
                  uint64_t v439 = (uint64_t)&v441[v319 + 1];
                }
                if (v437 != &v348[v431]) {
                  memmove(&v348[v431], v348, v437 - &v348[v431]);
                }
                uint64_t v442 = 0;
                if (v431 >= (unint64_t)v361) {
                  unint64_t v443 = (unint64_t)v361;
                }
                else {
                  unint64_t v443 = v431;
                }
                do
                  *(unsigned char *)(v319 + v359 + v442++ + 1) = *v430;
                while (v443 != v442);
                float32x2_t v437 = (char *)v439;
              }
              else
              {
                float32x2_t v437 = (char *)(v431 + v319 + v359 + 1);
                unint64_t v438 = v431 + v360;
                do
                {
                  *v432++ = *v430;
                  --v438;
                }
                while (v438);
                if (v680 != v348)
                {
                  float32x2_t v432 = v680;
                  goto LABEL_410;
                }
              }
              double v346 = v673;
              goto LABEL_435;
            }
            BOOL v436 = (unsigned char *)v319;
            double v346 = v673;
            int v327 = v680;
LABEL_441:
            if (v412) {
              operator delete(v412);
            }
            unint64_t v319 = (unint64_t)v436;
            uint64_t v350 = v700;
LABEL_350:
            float32x4_t v690 = (char *)v690 + 1;
          }
          while (v690 != (void *)v350);
          uint64_t v463 = objc_msgSend_countByEnumeratingWithState_objects_count_(v346, v348, (uint64_t)&v718, v767, 16);
          uint64_t v350 = v463;
          if (!v463)
          {
LABEL_445:
            __srca = (char *)v319;

            uint64_t v466 = v723;
            uint64_t v684 = v724;
            if (v723 == v724)
            {
              v688 = 0;
              float32x4_t v691 = 0;
              int v468 = 0;
              uint64_t v509 = v723;
            }
            else
            {
              v688 = 0;
              float32x4_t v691 = 0;
              int32x2_t v467 = 0;
              unint64_t v701 = 0;
              int v468 = 0;
              size_t v469 = 0;
              float v470 = 0;
              uint64_t v471 = 0;
              unint64_t v472 = 0;
              do
              {
                sub_25B4C9CE4((uint64_t)src, v466);
                if (v675) {
                  int v473 = v675[4];
                }
                else {
                  int v473 = 0;
                }
                long long v474 = *(_OWORD *)src;
                DWORD2(v474) = v473;
                if ((unint64_t)v467 >= v701)
                {
                  long long v682 = v474;
                  uint64_t v475 = (v467 - v691) >> 4;
                  unint64_t v476 = v475 + 1;
                  if ((unint64_t)(v475 + 1) >> 60) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v701 - (void)v691) >> 3 > v476) {
                    unint64_t v476 = (uint64_t)(v701 - (void)v691) >> 3;
                  }
                  if (v701 - (unint64_t)v691 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v477 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v477 = v476;
                  }
                  if (v477)
                  {
                    unint64_t v477 = (unint64_t)sub_25B3FFAEC(v477);
                    uint64_t v479 = v468;
                  }
                  else
                  {
                    uint64_t v479 = v468;
                    uint64_t v478 = 0;
                  }
                  unsigned int v480 = (char *)(v477 + 16 * v475);
                  *(_OWORD *)unsigned int v480 = v682;
                  unsigned int v481 = v480 + 16;
                  if (v467 == v691)
                  {
                    uint64_t v482 = v691;
                  }
                  else
                  {
                    uint64_t v482 = v691;
                    do
                    {
                      long long v483 = *((_OWORD *)v467 - 1);
                      v467 -= 16;
                      *((_OWORD *)v480 - 1) = v483;
                      v480 -= 16;
                    }
                    while (v467 != v691);
                  }
                  unint64_t v701 = v477 + 16 * v478;
                  if (v482) {
                    operator delete(v482);
                  }
                  float32x4_t v691 = v480;
                  int32x2_t v467 = v481;
                  int v468 = v479;
                }
                else
                {
                  *(_OWORD *)int32x2_t v467 = v474;
                  v467 += 16;
                }
                if (v469 >= v470)
                {
                  uint64_t v484 = v468;
                  uint64_t v485 = v469 - v468;
                  unint64_t v486 = v485 + 1;
                  unint64_t v685 = (unint64_t)v484;
                  if (v485 + 1 < 0) {
                    sub_25B3FBC4C();
                  }
                  unint64_t v487 = v470 - v484;
                  if (2 * v487 > v486) {
                    unint64_t v486 = 2 * v487;
                  }
                  if (v487 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v488 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v488 = v486;
                  }
                  if (v488) {
                    int v489 = (char *)operator new(v488);
                  }
                  else {
                    int v489 = 0;
                  }
                  int v468 = &v489[v485];
                  *int v468 = 0;
                  int v490 = v468 + 1;
                  if (v469 != (char *)v685)
                  {
                    size_t v491 = &v469[~v685];
                    do
                    {
                      char v492 = *--v469;
                      (v491--)[(void)v489] = v492;
                    }
                    while (v469 != (char *)v685);
                    int v468 = v489;
                  }
                  float v470 = &v489[v488];
                  if (v685) {
                    operator delete((void *)v685);
                  }
                  size_t v469 = v490;
                }
                else
                {
                  *v469++ = 0;
                }
                uint64_t v493 = (long long *)src[1];
                float v494 = 0.1;
                if (src[1] != &v732)
                {
                  while (1)
                  {
                    uint64_t v495 = *((unsigned __int8 *)v493 + 55);
                    if ((v495 & 0x80u) != 0) {
                      uint64_t v495 = *((void *)v493 + 5);
                    }
                    if (v495) {
                      break;
                    }
                    size_t v496 = (long long *)*((void *)v493 + 1);
                    if (v496)
                    {
                      do
                      {
                        float v497 = v496;
                        size_t v496 = *(long long **)v496;
                      }
                      while (v496);
                    }
                    else
                    {
                      do
                      {
                        float v497 = (long long *)*((void *)v493 + 2);
                        BOOL v498 = *(void *)v497 == (void)v493;
                        uint64_t v493 = v497;
                      }
                      while (!v498);
                    }
                    uint64_t v493 = v497;
                    if (v497 == &v732)
                    {
                      float v494 = 0.1;
                      goto LABEL_498;
                    }
                  }
                  float v494 = 1.0;
                }
LABEL_498:
                if ((unint64_t)v471 >= v472)
                {
                  uint64_t v500 = (v471 - v688) >> 2;
                  unint64_t v501 = v500 + 1;
                  if ((unint64_t)(v500 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v472 - (void)v688) >> 1 > v501) {
                    unint64_t v501 = (uint64_t)(v472 - (void)v688) >> 1;
                  }
                  if (v472 - (unint64_t)v688 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v502 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v502 = v501;
                  }
                  uint64_t v503 = v470;
                  if (v502)
                  {
                    unint64_t v502 = (unint64_t)sub_25B3FBC64(v502);
                    unsigned __int8 v505 = v468;
                  }
                  else
                  {
                    unsigned __int8 v505 = v468;
                    uint64_t v504 = 0;
                  }
                  unint64_t v506 = (char *)(v502 + 4 * v500);
                  *(float *)unint64_t v506 = v494;
                  int v499 = v506 + 4;
                  if (v471 == v688)
                  {
                    int v507 = v688;
                  }
                  else
                  {
                    int v507 = v688;
                    do
                    {
                      int v508 = *((_DWORD *)v471 - 1);
                      v471 -= 4;
                      *((_DWORD *)v506 - 1) = v508;
                      v506 -= 4;
                    }
                    while (v471 != v688);
                  }
                  unint64_t v472 = v502 + 4 * v504;
                  if (v507) {
                    operator delete(v507);
                  }
                  v688 = v506;
                  int v468 = v505;
                  float v470 = v503;
                }
                else
                {
                  *(float *)uint64_t v471 = v494;
                  int v499 = v471 + 4;
                }
                sub_25B400248((char *)v732);
                v466 += 40;
                uint64_t v471 = v499;
              }
              while (v466 != v684);
              uint64_t v466 = v723;
              uint64_t v509 = v724;
            }
            long long v686 = v468;
            if (v666)
            {
              uint64_t v510 = (v509 - v466) >> 3;
              unint64_t v511 = 0xCCCCCCCCCCCCCCCDLL * v510;
              sub_25B4D3D18((char *)(v666 + 8), v691, (uint64_t)&v691[0xCCCCCCCCCCCCCCD0 * v510], 0xCCCCCCCCCCCCCCCDLL * v510);
              sub_25B4E4D24((void *)(v666 + 32), v468, &v468[v511], v511);
              sub_25B3FE7A8((char *)(v666 + 56), v688, (uint64_t)&v688[4 * v511], v511);
              int v512 = *(char **)(v666 + 80);
              unint64_t v513 = *(void *)(v666 + 96);
              if (v513 - (unint64_t)v512 >= v511)
              {
                uint64_t v517 = *(unsigned char **)(v666 + 88);
                uint64_t v518 = v517 - v512;
                if (v517 - v512 >= v511)
                {
                  if (v509 != v466) {
                    memmove(*(void **)(v666 + 80), __srca, v511);
                  }
                  std::string v520 = &v512[v511];
                }
                else
                {
                  float32x2_t v464 = __srca;
                  if (v517 != v512)
                  {
                    memmove(*(void **)(v666 + 80), __srca, v517 - v512);
                    int v512 = *(char **)(v666 + 88);
                  }
                  size_t v519 = v511 - v518;
                  if (v518 != v511) {
                    memmove(v512, &__srca[v518], v519);
                  }
                  std::string v520 = &v512[v519];
                }
                *(void *)(v666 + 88) = v520;
              }
              else
              {
                if (v512)
                {
                  *(void *)(v666 + 88) = v512;
                  operator delete(v512);
                  unint64_t v513 = 0;
                  *(void *)(v666 + 80) = 0;
                  *(void *)(v666 + 88) = 0;
                  *(void *)(v666 + 96) = 0;
                }
                if (v509 - v466 < 0) {
                  sub_25B3FBC4C();
                }
                uint64_t v514 = 2 * v513;
                if (2 * v513 <= v511) {
                  uint64_t v514 = v511;
                }
                if (v513 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v515 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v515 = v514;
                }
                sub_25B46E9EC((void *)(v666 + 80), v515);
                int v516 = *(char **)(v666 + 88);
                memmove(v516, __srca, v511);
                *(void *)(v666 + 88) = &v516[v511];
              }
            }
            v716 = 0;
            uint64_t v717 = 0;
            v715 = &v716;
            uint64_t v521 = v723;
            if (v724 != v723)
            {
              unint64_t v522 = 0;
              unint64_t v523 = 0xCCCCCCCCCCCCCCCDLL * ((v724 - v723) >> 3);
              uint64_t v524 = 8;
              do
              {
                ++v522;
                sub_25B5A4730((uint64_t)src, *(void **)(v521 + v524), (void *)(v521 + v524 + 8), *(void **)(v521 + 40 * (v522 % v523) + 8), (void *)(v521 + 40 * (v522 % v523) + 16), (uint64_t **)&v715, (uint64_t *)&v716);
                uint64_t v521 = v723;
                unint64_t v523 = 0xCCCCCCCCCCCCCCCDLL * ((v724 - v723) >> 3);
                v524 += 40;
              }
              while (v523 > v522);
            }
            long long v702 = objc_msgSend_array(MEMORY[0x263EFF980], v464, v465);
            long long v711 = 0u;
            long long v712 = 0u;
            long long v709 = 0u;
            long long v710 = 0u;
            long long v527 = objc_msgSend_walls(v675, v525, v526);
            uint64_t v531 = objc_msgSend_countByEnumeratingWithState_objects_count_(v527, v528, (uint64_t)&v709, v766, 16);
            if (v531)
            {
              uint64_t v532 = *(void *)v710;
              do
              {
                for (mfloat m = 0; mm != v531; ++mm)
                {
                  if (*(void *)v710 != v532) {
                    objc_enumerationMutation(v527);
                  }
                  unint64_t v534 = *(void **)(*((void *)&v709 + 1) + 8 * mm);
                  objc_msgSend_quad(v534, v529, v530);
                  float32x2_t v708 = v535;
                  objc_msgSend_quad(v534, v536, v537);
                  float32x2_t v707 = v538;
                  double v541 = objc_msgSend_identifier(v534, v539, v540);
                  objc_msgSend_UUIDString(v541, v542, v543);
                  id v544 = objc_claimAutoreleasedReturnValue();
                  double v547 = (char *)objc_msgSend_UTF8String(v544, v545, v546);
                  sub_25B403500(src, v547);
                  if (&v716 != sub_25B495914((uint64_t)&v715, src))
                  {
                    if (SBYTE7(v732) < 0) {
                      operator delete(src[0]);
                    }

LABEL_557:
                    objc_msgSend_addObject_(v702, v529, (uint64_t)v534);
                    continue;
                  }
                  char v548 = sub_25B5ED788(&v708, &v707, (uint64_t)&v723);
                  if (SBYTE7(v732) < 0) {
                    operator delete(src[0]);
                  }

                  if ((v548 & 1) == 0) {
                    goto LABEL_557;
                  }
                }
                uint64_t v531 = objc_msgSend_countByEnumeratingWithState_objects_count_(v527, v529, (uint64_t)&v709, v766, 16);
              }
              while (v531);
            }

            sub_25B4E664C((uint64_t)v670, v702);
            uint64_t v551 = objc_msgSend_array(MEMORY[0x263EFF980], v549, v550);
            long long v705 = 0u;
            long long v706 = 0u;
            long long v703 = 0u;
            long long v704 = 0u;
            int v554 = objc_msgSend_curvedWalls(v675, v552, v553);
            uint64_t v558 = objc_msgSend_countByEnumeratingWithState_objects_count_(v554, v555, (uint64_t)&v703, v765, 16);
            if (!v558) {
              goto LABEL_575;
            }
            uint64_t v559 = *(void *)v704;
            while (2)
            {
              uint64_t v560 = 0;
LABEL_563:
              if (*(void *)v704 != v559) {
                objc_enumerationMutation(v554);
              }
              uint64_t v561 = *(void **)(*((void *)&v703 + 1) + 8 * v560);
              objc_msgSend_quad(v561, v556, v557);
              float32x2_t v708 = v562;
              objc_msgSend_quad(v561, v563, v564);
              float32x2_t v707 = v565;
              unint64_t v568 = objc_msgSend_identifier(v561, v566, v567);
              objc_msgSend_UUIDString(v568, v569, v570);
              id v571 = objc_claimAutoreleasedReturnValue();
              unint64_t v574 = (char *)objc_msgSend_UTF8String(v571, v572, v573);
              sub_25B403500(src, v574);
              if (&v716 != sub_25B495914((uint64_t)&v715, src))
              {
                if (SBYTE7(v732) < 0) {
                  operator delete(src[0]);
                }

                goto LABEL_572;
              }
              char v575 = sub_25B5ED788(&v708, &v707, (uint64_t)&v723);
              if (SBYTE7(v732) < 0) {
                operator delete(src[0]);
              }

              if ((v575 & 1) == 0) {
LABEL_572:
              }
                objc_msgSend_addObject_(v551, v556, (uint64_t)v561);
              if (v558 == ++v560)
              {
                uint64_t v558 = objc_msgSend_countByEnumeratingWithState_objects_count_(v554, v556, (uint64_t)&v703, v765, 16);
                if (!v558)
                {
LABEL_575:

                  sub_25B4E667C((uint64_t)v670, v551);
                  sub_25B400248(v716);
                  if (v688) {
                    operator delete(v688);
                  }
                  if (v686) {
                    operator delete(v686);
                  }
                  if (v691) {
                    operator delete(v691);
                  }
                  if (__srca)
                  {
                    unint64_t v341 = __srca;
LABEL_583:
                    operator delete(v341);
                  }
                  goto LABEL_584;
                }
                continue;
              }
              goto LABEL_563;
            }
          }
        }
      }
      LOBYTE(v715) = 0;
      sub_25B565E80(src, 4uLL, &v715);
      v708.i32[0] = 1036831949;
      sub_25B400C5C(&v715, 4uLL, &v708);
      int8x8_t v330 = 0;
      double v331 = 0;
      unint64_t v332 = 0;
      for (nuint64_t n = 0; nn != 4; ++nn)
      {
        if ((unint64_t)v331 >= v332)
        {
          uint64_t v335 = (v331 - v330) >> 4;
          unint64_t v336 = v335 + 1;
          if ((unint64_t)(v335 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v332 - (void)v330) >> 3 > v336) {
            unint64_t v336 = (uint64_t)(v332 - (void)v330) >> 3;
          }
          if (v332 - (unint64_t)v330 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v337 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v337 = v336;
          }
          if (v337) {
            unint64_t v337 = (unint64_t)sub_25B3FFAEC(v337);
          }
          else {
            uint64_t v338 = 0;
          }
          unint64_t v339 = (char *)(v337 + 16 * v335);
          *(_OWORD *)unint64_t v339 = *(&v739 + nn);
          uint64_t v334 = v339 + 16;
          while (v331 != v330)
          {
            long long v340 = *((_OWORD *)v331 - 1);
            v331 -= 16;
            *((_OWORD *)v339 - 1) = v340;
            v339 -= 16;
          }
          unint64_t v332 = v337 + 16 * v338;
          if (v330) {
            operator delete(v330);
          }
          int8x8_t v330 = v339;
        }
        else
        {
          *(_OWORD *)double v331 = *(&v739 + nn);
          uint64_t v334 = v331 + 16;
        }
        double v331 = v334;
      }
      sub_25B4FD368(v666, v330, (char *)src[0], (char *)v715, 4uLL);
      if (v330) {
        operator delete(v330);
      }
      if (v715)
      {
        v716 = (char *)v715;
        operator delete(v715);
      }
      unint64_t v341 = src[0];
      if (src[0])
      {
        src[1] = src[0];
        goto LABEL_583;
      }
LABEL_584:
      src[0] = &v723;
      sub_25B4000E4((void ***)src);
      src[0] = &v763;
      sub_25B40016C((void ***)src);
      unint64_t v250 = 0x263EFF000uLL;
    }
    long long v576 = objc_msgSend_array(*(void **)(v250 + 2432), v248, v249, v666);
    objc_msgSend_addObject_(v576, v577, (uint64_t)v667);
    sub_25B4E66AC((uint64_t)v670, v576);
    long long v580 = objc_msgSend_walls(v670, v578, v579);
    unint64_t v583 = objc_msgSend_count(v580, v581, v582);
    unint64_t v586 = objc_msgSend_walls(v675, v584, v585);
    if (v583 >= objc_msgSend_count(v586, v587, v588))
    {
      int v593 = objc_msgSend_curvedWalls(v670, v589, v590);
      unint64_t v596 = objc_msgSend_count(v593, v594, v595);
      unint64_t v599 = objc_msgSend_curvedWalls(v675, v597, v598);
      LODWORD(v596) = v596 < objc_msgSend_count(v599, v600, v601);

      if (!v596)
      {
LABEL_589:
        if (a5)
        {
          id v602 = v670;
          unint64_t v605 = objc_msgSend_floors(v602, v603, v604);
          BOOL v608 = objc_msgSend_count(v605, v606, v607) == 0;

          if (!v608)
          {
            int64x2_t v763 = 0uLL;
            unint64_t v764 = 0;
            unint64_t v611 = objc_msgSend_floors(v602, v609, v610);
            int32x2_t v613 = objc_msgSend_objectAtIndexedSubscript_(v611, v612, 0);

            double v616 = objc_msgSend_floors(v602, v614, v615);
            double v618 = objc_msgSend_objectAtIndexedSubscript_(v616, v617, 0);
            BOOL v621 = (unint64_t)objc_msgSend_polygonSize(v618, v619, v620) < 3;

            double v624 = 0;
            unint64_t v625 = 0;
            if (v621)
            {
              do
              {
                objc_msgSend_quad(v613, v622, v623);
                LODWORD(src[1]) = v626;
                DWORD2(v732) = v627;
                src[0] = v628;
                *(void *)&long long v732 = v629;
                DWORD2(v733) = v630;
                LODWORD(v734[1]) = v631;
                *(void *)&long long v733 = v632;
                v734[0] = v633;
                v634 = src[2 * v625];
                if ((unint64_t)v624 >= v764)
                {
                  uint64_t v636 = v763.i64[0];
                  uint64_t v637 = ((uint64_t)v624 - v763.i64[0]) >> 3;
                  unint64_t v638 = v637 + 1;
                  if ((unint64_t)(v637 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v639 = v764 - v763.i64[0];
                  if ((uint64_t)(v764 - v763.i64[0]) >> 2 > v638) {
                    unint64_t v638 = v639 >> 2;
                  }
                  if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v640 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v640 = v638;
                  }
                  if (v640) {
                    unint64_t v640 = (unint64_t)sub_25B3FCAD4(v640);
                  }
                  else {
                    double v622 = 0;
                  }
                  long long v641 = (void *)(v640 + 8 * v637);
                  *long long v641 = v634;
                  uint64_t v635 = (uint64_t)(v641 + 1);
                  if (v624 != (void *)v636)
                  {
                    do
                    {
                      uint64_t v642 = *--v624;
                      *--long long v641 = v642;
                    }
                    while (v624 != (void *)v636);
                    double v624 = (void *)v763.i64[0];
                  }
                  v763.i64[0] = (uint64_t)v641;
                  v763.i64[1] = v635;
                  unint64_t v764 = v640 + 8 * (void)v622;
                  if (v624) {
                    operator delete(v624);
                  }
                }
                else
                {
                  void *v624 = v634;
                  uint64_t v635 = (uint64_t)(v624 + 1);
                }
                v763.i64[1] = v635;
                ++v625;
                double v624 = (void *)v635;
              }
              while (v625 != 4);
            }
            else
            {
              while (v625 < objc_msgSend_polygonSize(v613, v622, v623))
              {
                uint64_t v657 = *(void *)(objc_msgSend_polygon(v613, v622, v623) + 16 * v625);
                if ((unint64_t)v624 >= v764)
                {
                  uint64_t v659 = v763.i64[0];
                  uint64_t v660 = ((uint64_t)v624 - v763.i64[0]) >> 3;
                  unint64_t v661 = v660 + 1;
                  if ((unint64_t)(v660 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v662 = v764 - v763.i64[0];
                  if ((uint64_t)(v764 - v763.i64[0]) >> 2 > v661) {
                    unint64_t v661 = v662 >> 2;
                  }
                  if ((unint64_t)v662 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v663 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v663 = v661;
                  }
                  if (v663) {
                    unint64_t v663 = (unint64_t)sub_25B3FCAD4(v663);
                  }
                  else {
                    double v622 = 0;
                  }
                  int v664 = (void *)(v663 + 8 * v660);
                  *int v664 = v657;
                  uint64_t v658 = (uint64_t)(v664 + 1);
                  if (v624 != (void *)v659)
                  {
                    do
                    {
                      uint64_t v665 = *--v624;
                      *--int v664 = v665;
                    }
                    while (v624 != (void *)v659);
                    double v624 = (void *)v763.i64[0];
                  }
                  v763.i64[0] = (uint64_t)v664;
                  v763.i64[1] = v658;
                  unint64_t v764 = v663 + 8 * (void)v622;
                  if (v624) {
                    operator delete(v624);
                  }
                }
                else
                {
                  void *v624 = v657;
                  uint64_t v658 = (uint64_t)(v624 + 1);
                }
                v763.i64[1] = v658;
                ++v625;
                double v624 = (void *)v658;
              }
            }
            long long v643 = objc_msgSend_walls(v602, v622, v623);
            sub_25B5A0DDC(v643, v602, v763.i64);

            long long v646 = objc_msgSend_openings(v602, v644, v645);
            sub_25B5A0DDC(v646, v602, v763.i64);

            long long v649 = objc_msgSend_windows(v602, v647, v648);
            sub_25B5A0DDC(v649, v602, v763.i64);

            uint64_t v652 = objc_msgSend_doors(v602, v650, v651);
            sub_25B5A0DDC(v652, v602, v763.i64);

            long long v655 = objc_msgSend_opendoors(v602, v653, v654);
            sub_25B5A0DDC(v655, v602, v763.i64);

            if (v763.i64[0]) {
              operator delete((void *)v763.i64[0]);
            }
          }
        }
        unsigned int v243 = v743[0];
        goto LABEL_613;
      }
    }
    else
    {
    }
    sub_25B4E9AA0((id *)v670, v591, v592);
    goto LABEL_589;
  }
LABEL_613:
  if (v243) {
    operator delete(v243);
  }
  if (v760)
  {
    long long __p = v760;
    operator delete(v760);
  }
LABEL_617:

  return v670;
}

void sub_25B5A3EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v69);
  a54 = &a69;
  sub_25B4000E4((void ***)&a54);
  a69 = (uint64_t)&STACK[0x478];
  sub_25B40016C((void ***)&a69);

  if (STACK[0x348]) {
    operator delete((void *)STACK[0x348]);
  }
  uint64_t v71 = (void *)STACK[0x460];
  if (STACK[0x460])
  {
    STACK[0x468] = (unint64_t)v71;
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

void sub_25B5A4554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2;
  while (1)
  {
    sub_25B5A4A58(a1, v4);
    a1 += 40;
    v4 += 40;
    if (v4 == a3) {
      break;
    }
    if (a1 == v6) {
      uint64_t v6 = v4;
    }
  }
  if (a1 != v6)
  {
    uint64_t v7 = v6;
    do
    {
      while (1)
      {
        sub_25B5A4A58(a1, v6);
        a1 += 40;
        v6 += 40;
        if (v6 == a3) {
          break;
        }
        if (a1 == v7) {
          uint64_t v7 = v6;
        }
      }
      uint64_t v6 = v7;
    }
    while (a1 != v7);
  }
}

char *sub_25B5A45F4(char *__src, char *a2, char *a3)
{
  if (__src != a2 && a2 != a3)
  {
    double v3 = __src;
    uint64_t v4 = __src + 1;
    if (__src + 1 == a2)
    {
      char v10 = *__src;
      int64_t v11 = a3 - a2;
      __long long src = (char *)memmove(__src, a2, a3 - a2);
      v3[v11] = v10;
    }
    else
    {
      uint64_t v5 = a2 + 1;
      if (a2 + 1 == a3)
      {
        char v12 = *(a3 - 1);
        if (a3 - 1 != __src) {
          __long long src = (char *)memmove(__src + 1, __src, a3 - 1 - __src);
        }
        char *v3 = v12;
      }
      else
      {
        uint64_t v6 = a2 - __src;
        uint64_t v7 = a3 - a2;
        if (a2 - __src == a3 - a2)
        {
          do
          {
            char v8 = *(v4 - 1);
            *(v4 - 1) = *(v5 - 1);
            *(v5 - 1) = v8;
            if (v4 == a2) {
              break;
            }
            ++v4;
          }
          while (v5++ != a3);
        }
        else
        {
          uint64_t v13 = a2 - __src;
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = v7;
            uint64_t v7 = v14 % v7;
          }
          while (v7);
          if (v13)
          {
            uint64_t v15 = &__src[v13];
            do
            {
              char v17 = *--v15;
              char v16 = v17;
              uint64_t v18 = &v15[v6];
              uint64_t v19 = v15;
              do
              {
                uint64_t v20 = v18;
                *uint64_t v19 = *v18;
                uint64_t v21 = a3 - v18;
                BOOL v22 = __OFSUB__(v6, v21);
                uint64_t v24 = v6 - v21;
                char v23 = (v24 < 0) ^ v22;
                uint64_t v18 = &__src[v24];
                if (v23) {
                  uint64_t v18 = &v20[v6];
                }
                uint64_t v19 = v20;
              }
              while (v18 != v15);
              char *v20 = v16;
            }
            while (v15 != __src);
          }
        }
      }
    }
  }
  return __src;
}

uint64_t sub_25B5A4730(uint64_t result, void *a2, void *a3, void *a4, void *a5, uint64_t **a6, uint64_t *a7)
{
  int64_t v11 = (void *)result;
  if (a2 != a3)
  {
    char v12 = a4;
    if (a4 != a5)
    {
      uint64_t v13 = a2;
      do
      {
        BOOL result = sub_25B4954C0(v13 + 4, v12 + 4);
        if ((result & 0x80) != 0)
        {
          uint64_t v20 = (void *)v13[1];
          if (v20)
          {
            do
            {
              uint64_t v13 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = v13;
              uint64_t v13 = (void *)v13[2];
            }
            while ((void *)*v13 != v21);
          }
        }
        else
        {
          BOOL result = sub_25B4954C0(v12 + 4, v13 + 4);
          if ((result & 0x80) == 0)
          {
            BOOL result = (uint64_t)sub_25B5A48A0(a6, a7, v13 + 4, (uint64_t)(v13 + 4));
            uint64_t v14 = *(uint64_t **)(result + 8);
            if (v14)
            {
              do
              {
                a7 = v14;
                uint64_t v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                a7 = *(uint64_t **)(result + 16);
                BOOL v15 = *a7 == result;
                BOOL result = (uint64_t)a7;
              }
              while (!v15);
            }
            char v16 = (void *)v13[1];
            if (v16)
            {
              do
              {
                uint64_t v13 = v16;
                char v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                char v17 = v13;
                uint64_t v13 = (void *)v13[2];
              }
              while ((void *)*v13 != v17);
            }
          }
          uint64_t v18 = (void *)v12[1];
          if (v18)
          {
            do
            {
              char v12 = v18;
              uint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v19 = v12;
              char v12 = (void *)v12[2];
            }
            while ((void *)*v12 != v19);
          }
        }
      }
      while (v13 != a3 && v12 != a5);
    }
  }
  *int64_t v11 = a3;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  return result;
}

uint64_t *sub_25B5A48A0(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  char v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2 && (sub_25B4954C0(a3, a2 + 4) & 0x80) == 0)
  {
    if ((sub_25B4954C0(v6 + 4, a3) & 0x80) == 0)
    {
      uint64_t v21 = v6;
      BOOL v22 = v6;
      uint64_t v9 = &v21;
      char v10 = v6;
      if (!v6) {
        goto LABEL_23;
      }
      return v10;
    }
    uint64_t v14 = v6[1];
    if (v14)
    {
      BOOL v15 = (uint64_t *)v6[1];
      do
      {
        uint64_t v9 = (uint64_t **)v15;
        BOOL v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      uint64_t v19 = (uint64_t **)v6;
      do
      {
        uint64_t v9 = (uint64_t **)v19[2];
        BOOL v17 = *v9 == (uint64_t *)v19;
        uint64_t v19 = v9;
      }
      while (!v17);
    }
    if (v9 == v8 || (sub_25B4954C0(a3, v9 + 4) & 0x80) != 0)
    {
      if (v14)
      {
        BOOL v22 = (uint64_t *)v9;
      }
      else
      {
        BOOL v22 = v6;
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v9 = (uint64_t **)sub_25B4953D4((uint64_t)a1, &v22, a3);
    goto LABEL_22;
  }
  uint64_t v11 = *v6;
  if (*a1 == v6)
  {
    uint64_t v13 = v6;
  }
  else
  {
    if (v11)
    {
      char v12 = (uint64_t *)*v6;
      do
      {
        uint64_t v13 = v12;
        char v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      char v16 = v6;
      do
      {
        uint64_t v13 = (uint64_t *)v16[2];
        BOOL v17 = *v13 == (void)v16;
        char v16 = v13;
      }
      while (v17);
    }
    if ((sub_25B4954C0(v13 + 4, a3) & 0x80) == 0) {
      goto LABEL_19;
    }
  }
  if (!v11)
  {
    BOOL v22 = v6;
    uint64_t v9 = (uint64_t **)v6;
    goto LABEL_25;
  }
  BOOL v22 = v13;
  uint64_t v9 = (uint64_t **)(v13 + 1);
LABEL_22:
  char v10 = *v9;
  if (!*v9)
  {
LABEL_23:
    uint64_t v6 = v22;
LABEL_25:
    sub_25B4CA328((uint64_t)&v20, (uint64_t)a1, a4);
    char v10 = v20;
    sub_25B3FA740(a1, (uint64_t)v6, v9, v20);
  }
  return v10;
}

void sub_25B5A4A58(uint64_t a1, uint64_t a2)
{
  sub_25B4C9CE4((uint64_t)v8, a1);
  sub_25B576A98((uint64_t)v6, a1, a2);
  sub_25B400248(v7);
  sub_25B576A98((uint64_t)v4, a2, (uint64_t)v8);
  sub_25B400248(v5);
  sub_25B400248(v9);
}

void sub_25B5A4AC8(_Unwind_Exception *a1)
{
  sub_25B400248(*(char **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_25B5A4ADC(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init(MEMORY[0x263F08C38]);
    double v3 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v2;

    if (*(unsigned char *)(a1 + 40)) {
      *(unsigned char *)(a1 + 40) = 0;
    }
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
  }
}

void sub_25B5A4CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B5A4CC4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  double v6 = 0.0;
  double v7 = 0.0;
  if (v4) {
    double v7 = v4[3];
  }
  if (v5) {
    double v6 = v5[3];
  }
  if (v7 >= v6)
  {
    double v9 = 0.0;
    double v10 = 0.0;
    if (v4) {
      double v10 = v4[3];
    }
    if (v5) {
      double v9 = v5[3];
    }
    uint64_t v8 = v10 > v9;
  }
  else
  {
    uint64_t v8 = -1;
  }

  return v8;
}

uint64_t sub_25B5A4D44(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  objc_msgSend_timestamp(a2, v5, v6);
  double v8 = v7;
  objc_msgSend_timestamp(v4, v9, v10);
  if (v8 < v11) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = v8 > v11;
  }

  return v12;
}

void sub_25B5A4D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B5A4DB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B5A4E04(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v109 = (uint64_t)(a2 - 16);
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)&a2[-v10];
          uint64_t v12 = (uint64_t)&a2[-v10] >> 4;
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 2) <= *(_DWORD *)(a1 + 8)) {
                  return;
                }
                uint64_t v44 = a1;
                uint64_t v45 = (uint64_t)(a2 - 16);
                break;
              case 3:
                sub_25B5A5758(a1, a1 + 16, v109);
                return;
              case 4:
                sub_25B5A5818(a1, a1 + 16, a1 + 32, v109);
                return;
              case 5:
                sub_25B5A5818(a1, a1 + 16, a1 + 32, a1 + 48);
                if (*((_DWORD *)a2 - 2) <= *(_DWORD *)(a1 + 56)) {
                  return;
                }
                sub_25B5A56F4(a1 + 48, v109);
                if (*(_DWORD *)(a1 + 56) <= *(_DWORD *)(a1 + 40)) {
                  return;
                }
                sub_25B5A56F4(a1 + 32, a1 + 48);
                if (*(_DWORD *)(a1 + 40) <= *(_DWORD *)(a1 + 24)) {
                  return;
                }
                sub_25B5A56F4(a1 + 16, a1 + 32);
                if (*(_DWORD *)(a1 + 24) <= *(_DWORD *)(a1 + 8)) {
                  return;
                }
                uint64_t v44 = a1;
                uint64_t v45 = a1 + 16;
                break;
              default:
                JUMPOUT(0);
            }
            sub_25B5A56F4(v44, v45);
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v46 = (char *)(a1 + 16);
            BOOL v48 = (char *)a1 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                uint64_t v50 = (char *)a1;
                do
                {
                  int v51 = *((_DWORD *)v50 + 6);
                  int v52 = *((_DWORD *)v50 + 2);
                  uint64_t v50 = v46;
                  if (v51 > v52)
                  {
                    uint64_t v53 = *(void *)v46;
                    *(void *)uint64_t v46 = 0;
                    uint64_t v54 = v49;
                    while (1)
                    {
                      uint64_t v55 = a1 + v54;
                      uint64_t v56 = *(void *)(a1 + v54);
                      *(void *)uint64_t v55 = 0;
                      uint64_t v57 = *(void **)(a1 + v54 + 16);
                      *(void *)(v55 + 16) = v56;

                      *(_DWORD *)(v55 + 24) = *(_DWORD *)(v55 + 8);
                      if (!v54) {
                        break;
                      }
                      v54 -= 16;
                      if (v51 <= *(_DWORD *)(v55 - 8))
                      {
                        uint64_t v58 = a1 + v54 + 16;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v58 = a1;
LABEL_86:
                    double v59 = *(void **)v58;
                    *(void *)uint64_t v58 = v53;

                    *(_DWORD *)(v58 + 8) = v51;
                  }
                  uint64_t v46 = v50 + 16;
                  v49 += 16;
                }
                while (v50 + 16 != a2);
              }
            }
            else if (!v48)
            {
              do
              {
                float v102 = v46;
                int v103 = *(_DWORD *)(a1 + 24);
                if (v103 > *(_DWORD *)(a1 + 8))
                {
                  uint64_t v104 = *(void *)v46;
                  *(void *)uint64_t v46 = 0;
                  do
                  {
                    uint64_t v105 = a1;
                    float v106 = *(void **)a1;
                    *(void *)a1 = 0;
                    long long v107 = *(void **)(a1 + 16);
                    *(void *)(a1 + 16) = v106;

                    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
                    a1 -= 16;
                  }
                  while (v103 > *(_DWORD *)(v105 - 8));
                  float v108 = *(void **)(a1 + 16);
                  *(void *)(a1 + 16) = v104;

                  *(_DWORD *)(a1 + 24) = v103;
                }
                uint64_t v46 = v102 + 16;
                a1 = (uint64_t)v102;
              }
              while (v102 + 16 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((char *)a1 != a2)
            {
              int64_t v60 = (unint64_t)(v12 - 2) >> 1;
              int64_t v61 = v60;
              do
              {
                int64_t v62 = v61;
                if (v60 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  uint64_t v64 = a1 + 16 * v63;
                  if (2 * v62 + 2 < v12)
                  {
                    int v65 = *(_DWORD *)(v64 + 8);
                    int v66 = *(_DWORD *)(v64 + 24);
                    v64 += 16 * (v65 > v66);
                    if (v65 > v66) {
                      uint64_t v63 = 2 * v62 + 2;
                    }
                  }
                  int v67 = *(_DWORD *)(a1 + 16 * v62 + 8);
                  if (*(_DWORD *)(v64 + 8) <= v67)
                  {
                    uint64_t v68 = a1 + 16 * v62;
                    uint64_t v110 = *(void **)v68;
                    *(void *)uint64_t v68 = 0;
                    do
                    {
                      uint64_t v69 = v68;
                      uint64_t v68 = v64;
                      uint64_t v70 = *(void *)v64;
                      *(void *)uint64_t v68 = 0;
                      uint64_t v71 = *(void **)v69;
                      *(void *)uint64_t v69 = v70;

                      *(_DWORD *)(v69 + 8) = *(_DWORD *)(v68 + 8);
                      if (v60 < v63) {
                        break;
                      }
                      uint64_t v72 = (2 * v63) | 1;
                      uint64_t v64 = a1 + 16 * v72;
                      if (2 * v63 + 2 < v12)
                      {
                        int v73 = *(_DWORD *)(v64 + 8);
                        int v74 = *(_DWORD *)(v64 + 24);
                        v64 += 16 * (v73 > v74);
                        if (v73 > v74) {
                          uint64_t v72 = 2 * v63 + 2;
                        }
                      }
                      uint64_t v63 = v72;
                    }
                    while (*(_DWORD *)(v64 + 8) <= v67);
                    unint64_t v75 = *(void **)v68;
                    *(void *)uint64_t v68 = v110;

                    *(_DWORD *)(v68 + 8) = v67;
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              uint64_t v76 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v77 = 0;
                uint64_t v78 = *(void **)a1;
                *(void *)a1 = 0;
                int v79 = *(_DWORD *)(a1 + 8);
                uint64_t v80 = a1;
                do
                {
                  unint64_t v81 = v80 + 16 * (v77 + 1);
                  uint64_t v82 = (2 * v77) | 1;
                  uint64_t v83 = 2 * v77 + 2;
                  if (v83 < v76)
                  {
                    int v84 = *(_DWORD *)(v81 + 8);
                    int v85 = *(_DWORD *)(v81 + 24);
                    v81 += 16 * (v84 > v85);
                    if (v84 > v85) {
                      uint64_t v82 = v83;
                    }
                  }
                  unint64_t v86 = *(void **)v81;
                  *(void *)unint64_t v81 = 0;
                  id v87 = *(void **)v80;
                  *(void *)uint64_t v80 = v86;

                  *(_DWORD *)(v80 + 8) = *(_DWORD *)(v81 + 8);
                  uint64_t v80 = v81;
                  uint64_t v77 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                uint64_t v88 = a2 - 16;
                if ((char *)v81 == a2 - 16)
                {
                  float32x4_t v100 = *(void **)v81;
                  *(void *)unint64_t v81 = v78;

                  *(_DWORD *)(v81 + 8) = v79;
                }
                else
                {
                  uint64_t v89 = *((void *)a2 - 2);
                  *((void *)a2 - 2) = 0;
                  uint64_t v90 = *(void **)v81;
                  *(void *)unint64_t v81 = v89;

                  *(_DWORD *)(v81 + 8) = *((_DWORD *)a2 - 2);
                  int v91 = (void *)*((void *)a2 - 2);
                  *((void *)a2 - 2) = v78;

                  *((_DWORD *)a2 - 2) = v79;
                  uint64_t v92 = v81 - a1 + 16;
                  if (v92 >= 17)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                    int v94 = *(_DWORD *)(v81 + 8);
                    if (*(_DWORD *)(a1 + 16 * v93 + 8) > v94)
                    {
                      uint64_t v95 = *(void **)v81;
                      *(void *)unint64_t v81 = 0;
                      do
                      {
                        unint64_t v96 = v81;
                        unint64_t v81 = a1 + 16 * v93;
                        uint64_t v97 = *(void **)v81;
                        *(void *)unint64_t v81 = 0;
                        uint64_t v98 = *(void **)v96;
                        *(void *)unint64_t v96 = v97;

                        *(_DWORD *)(v96 + 8) = *(_DWORD *)(v81 + 8);
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                      }
                      while (*(_DWORD *)(a1 + 16 * v93 + 8) > v94);
                      float32x4_t v99 = *(void **)v81;
                      *(void *)unint64_t v81 = v95;

                      *(_DWORD *)(v81 + 8) = v94;
                    }
                  }
                }
                a2 = v88;
              }
              while (v76-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = a1 + 16 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x801)
          {
            sub_25B5A5758(v14, a1, v109);
          }
          else
          {
            sub_25B5A5758(a1, v14, v109);
            sub_25B5A5758(a1 + 16, v14 - 16, (uint64_t)(a2 - 32));
            sub_25B5A5758(a1 + 32, a1 + 16 + 16 * v13, (uint64_t)(a2 - 48));
            sub_25B5A5758(v14 - 16, v14, a1 + 16 + 16 * v13);
            sub_25B5A56F4(a1, v14);
          }
          --a3;
          if (a4) {
            break;
          }
          int v15 = *(_DWORD *)(a1 + 8);
          if (*(_DWORD *)(a1 - 8) > v15) {
            goto LABEL_12;
          }
          uint64_t v31 = *(void **)a1;
          *(void *)a1 = 0;
          if (v15 <= *((_DWORD *)a2 - 2))
          {
            unint64_t v34 = a1 + 16;
            do
            {
              unint64_t v10 = v34;
              if (v34 >= (unint64_t)a2) {
                break;
              }
              int v35 = *(_DWORD *)(v34 + 8);
              v34 += 16;
            }
            while (v15 <= v35);
          }
          else
          {
            uint64_t v32 = a1;
            do
            {
              unint64_t v10 = v32 + 16;
              int v33 = *(_DWORD *)(v32 + 24);
              v32 += 16;
            }
            while (v15 <= v33);
          }
          unint64_t v36 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              unint64_t v36 = (unint64_t)(v37 - 16);
              int v38 = *((_DWORD *)v37 - 2);
              v37 -= 16;
            }
            while (v15 > v38);
          }
          while (v10 < v36)
          {
            sub_25B5A56F4(v10, v36);
            do
            {
              int v39 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v15 <= v39);
            do
            {
              int v40 = *(_DWORD *)(v36 - 8);
              v36 -= 16;
            }
            while (v15 > v40);
          }
          if (v10 - 16 != a1)
          {
            uint64_t v41 = *(void *)(v10 - 16);
            *(void *)(v10 - 16) = 0;
            int64_t v42 = *(void **)a1;
            *(void *)a1 = v41;

            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
          }
          unint64_t v43 = *(void **)(v10 - 16);
          *(void *)(v10 - 16) = v31;

          a4 = 0;
          *(_DWORD *)(v10 - 8) = v15;
        }
        int v15 = *(_DWORD *)(a1 + 8);
LABEL_12:
        char v16 = *(void **)a1;
        *(void *)a1 = 0;
        unint64_t v17 = a1;
        do
        {
          unint64_t v18 = v17;
          v17 += 16;
        }
        while (*(_DWORD *)(v18 + 24) > v15);
        uint64_t v19 = a2;
        if (v18 == a1)
        {
          BOOL v22 = a2;
          while (v17 < (unint64_t)v22)
          {
            unint64_t v20 = (unint64_t)(v22 - 16);
            int v23 = *((_DWORD *)v22 - 2);
            v22 -= 16;
            if (v23 > v15) {
              goto LABEL_22;
            }
          }
          unint64_t v20 = (unint64_t)v22;
        }
        else
        {
          do
          {
            unint64_t v20 = (unint64_t)(v19 - 16);
            int v21 = *((_DWORD *)v19 - 2);
            v19 -= 16;
          }
          while (v21 <= v15);
        }
LABEL_22:
        unint64_t v10 = v17;
        if (v17 < v20)
        {
          unint64_t v24 = v20;
          do
          {
            sub_25B5A56F4(v10, v24);
            do
            {
              int v25 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v25 > v15);
            do
            {
              int v26 = *(_DWORD *)(v24 - 8);
              v24 -= 16;
            }
            while (v26 <= v15);
          }
          while (v10 < v24);
        }
        if (v10 - 16 != a1)
        {
          uint64_t v27 = *(void *)(v10 - 16);
          *(void *)(v10 - 16) = 0;
          uint64_t v28 = *(void **)a1;
          *(void *)a1 = v27;

          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
        }
        float32x2_t v29 = *(void **)(v10 - 16);
        *(void *)(v10 - 16) = v16;

        *(_DWORD *)(v10 - 8) = v15;
        if (v17 >= v20) {
          break;
        }
LABEL_33:
        sub_25B5A4E04(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_25B5A58C0((char *)a1, (char *)(v10 - 16));
      if (sub_25B5A58C0((char *)v10, a2)) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = (char *)(v10 - 16);
    if (!v30) {
      continue;
    }
    break;
  }
}

void sub_25B5A5674(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B5A56F4(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  char v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;

  double v7 = *(void **)a2;
  *(void *)a2 = v4;

  int v8 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v8;
}

void sub_25B5A5758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a3 + 8);
  if (v6 <= *(_DWORD *)(a1 + 8))
  {
    if (v7 <= v6) {
      return;
    }
    sub_25B5A56F4(a2, a3);
    if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(v5 + 8)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 <= v6)
    {
      sub_25B5A56F4(a1, a2);
      if (*(_DWORD *)(a3 + 8) <= *(_DWORD *)(a2 + 8)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }

  sub_25B5A56F4(a1, v8);
}

void sub_25B5A5818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25B5A5758(a1, a2, a3);
  if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
  {
    sub_25B5A56F4(a3, a4);
    if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
    {
      sub_25B5A56F4(a2, a3);
      if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
      {
        sub_25B5A56F4(a1, a2);
      }
    }
  }
}

BOOL sub_25B5A58C0(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 2) > *((_DWORD *)a1 + 2))
      {
        uint64_t v6 = (uint64_t)(a2 - 16);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_25B5A5758((uint64_t)a1, (uint64_t)(a1 + 16), (uint64_t)(a2 - 16));
      return 1;
    case 4:
      sub_25B5A5818((uint64_t)a1, (uint64_t)(a1 + 16), (uint64_t)(a1 + 32), (uint64_t)(a2 - 16));
      return 1;
    case 5:
      sub_25B5A5818((uint64_t)a1, (uint64_t)(a1 + 16), (uint64_t)(a1 + 32), (uint64_t)(a1 + 48));
      if (*((_DWORD *)a2 - 2) > *((_DWORD *)a1 + 14))
      {
        sub_25B5A56F4((uint64_t)(a1 + 48), (uint64_t)(a2 - 16));
        if (*((_DWORD *)a1 + 14) > *((_DWORD *)a1 + 10))
        {
          sub_25B5A56F4((uint64_t)(a1 + 32), (uint64_t)(a1 + 48));
          if (*((_DWORD *)a1 + 10) > *((_DWORD *)a1 + 6))
          {
            sub_25B5A56F4((uint64_t)(a1 + 16), (uint64_t)(a1 + 32));
            if (*((_DWORD *)a1 + 6) > *((_DWORD *)a1 + 2))
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = (uint64_t)(a1 + 16);
LABEL_4:
              sub_25B5A56F4(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 32;
      sub_25B5A5758((uint64_t)a1, (uint64_t)(a1 + 16), (uint64_t)(a1 + 32));
      double v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    int v12 = *((_DWORD *)v9 + 2);
    if (v12 > *((_DWORD *)v8 + 2))
    {
      uint64_t v13 = *(void *)v9;
      *(void *)double v9 = 0;
      uint64_t v14 = v10;
      while (1)
      {
        int v15 = &a1[v14];
        uint64_t v16 = *(void *)&a1[v14 + 32];
        *((void *)v15 + 4) = 0;
        unint64_t v17 = *(void **)&a1[v14 + 48];
        *((void *)v15 + 6) = v16;

        *((_DWORD *)v15 + 14) = *((_DWORD *)v15 + 10);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (v12 <= *((_DWORD *)v15 + 6))
        {
          uint64_t v18 = (uint64_t)&a1[v14 + 48];
          goto LABEL_14;
        }
      }
      uint64_t v18 = (uint64_t)a1;
LABEL_14:
      uint64_t v19 = *(void **)v18;
      *(void *)uint64_t v18 = v13;

      *(_DWORD *)(v18 + 8) = v12;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_25B5A5D4C(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_25B3FB178(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B5A5DD0(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_25B3FACCC(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

id sub_25B5A5E54(float *a1, void *a2, void *a3)
{
  v240[16] = *(void **)MEMORY[0x263EF8340];
  id v4 = a2;
  unint64_t v192 = v4;
  uint64_t v193 = a1;
  if (!a1)
  {
LABEL_51:
    int v35 = 0;
    goto LABEL_250;
  }
  if (!v4 || !objc_msgSend_count(v4, v5, v6))
  {
    if (a3)
    {
      int v33 = (void *)MEMORY[0x263F087E8];
      uint64_t v234 = *MEMORY[0x263EFFC48];
      uint64_t v235 = @"Insufficient input!";
      float32x2_t v195 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v5, (uint64_t)&v235, &v234, 1);
      objc_msgSend_errorWithDomain_code_userInfo_(v33, v34, @"com.apple.RoomScanCoreError", -1002);
      int v35 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_250;
    }
    goto LABEL_51;
  }
  long long v236 = 0u;
  long long v237 = 0u;
  long long v238 = 0u;
  long long v239 = 0u;
  obuint64_t j = v192;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v236, v240, 16);
  if (v8)
  {
    double v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = *(void *)v237;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v237 != v12) {
          objc_enumerationMutation(obj);
        }
        __n128 v204 = sub_25B5BED4C((void *)*(void *)(*((void *)&v236 + 1) + 8 * i));
        if ((unint64_t)v10 >= v11)
        {
          uint64_t v15 = v10 - v9;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v11 - (void)v9) >> 3 > v16) {
            unint64_t v16 = (uint64_t)(v11 - (void)v9) >> 3;
          }
          if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_25B3FFAEC(v17);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v18 = (__n128 *)(v17 + 16 * v15);
          *uint64_t v18 = v204;
          uint64_t v19 = v18 + 1;
          while (v10 != v9)
          {
            __n128 v20 = v10[-1];
            --v10;
            v18[-1] = v20;
            --v18;
          }
          unint64_t v11 = v17 + 16 * (void)v14;
          if (v9) {
            operator delete(v9);
          }
          double v9 = v18;
          uint64_t v10 = v19;
        }
        else
        {
          *v10++ = v204;
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v236, v240, 16);
    }
    while (v8);

    BOOL v21 = v9 == v10;
    if (v9 == v10)
    {
      BOOL v22 = 0;
      unint64_t v23 = 0;
    }
    else
    {
      BOOL v22 = 0;
      unint64_t v23 = 0;
      unint64_t v24 = 0;
      int v25 = v9;
      do
      {
        if (v23 >= v24)
        {
          __n128 v205 = *v25;
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v22) >> 2) + 1;
          if (v26 > 0x1555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v24 - (void)v22) >> 2) > v26) {
            unint64_t v26 = 0x5555555555555556 * ((uint64_t)(v24 - (void)v22) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v22) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v27 = 0x1555555555555555;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27) {
            unint64_t v27 = (unint64_t)sub_25B478C4C(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          unint64_t v29 = v27 + 4 * ((uint64_t)(v23 - (void)v22) >> 2);
          *(void *)unint64_t v29 = v205.n128_u64[0];
          *(_DWORD *)(v29 + 8) = -1;
          BOOL v30 = (_DWORD *)v29;
          while ((void *)v23 != v22)
          {
            uint64_t v31 = *(void *)(v23 - 12);
            v23 -= 12;
            int v32 = *(_DWORD *)(v23 + 8);
            *(void *)(v30 - 3) = v31;
            v30 -= 3;
            v30[2] = v32;
          }
          unint64_t v24 = v27 + 12 * v28;
          unint64_t v23 = v29 + 12;
          if (v22) {
            operator delete(v22);
          }
          BOOL v22 = v30;
        }
        else
        {
          *(void *)unint64_t v23 = v25->n128_u64[0];
          *(_DWORD *)(v23 + 8) = -1;
          v23 += 12;
        }
        ++v25;
      }
      while (v25 != v10);
    }
  }
  else
  {

    uint64_t v10 = 0;
    double v9 = 0;
    BOOL v22 = 0;
    unint64_t v23 = 0;
    BOOL v21 = 1;
  }
  float v36 = v193[54];
  uint64_t v219 = 0;
  uint64_t v220 = 0;
  long long __p = 0;
  unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v22) >> 2);
  sub_25B58B28C(&__p, v22, v23, v37);
  sub_25B58B308((uint64_t)&v226, 1, (uint64_t)&__p, v36 * 0.5);
  if (__p)
  {
    uint64_t v219 = __p;
    operator delete(__p);
  }
  sub_25B573834((uint64_t)&v226);
  int v38 = DWORD1(v228);
  int v215 = 0;
  uint64_t v216 = 0;
  uint64_t v217 = 0;
  sub_25B58B28C(&v215, (const void *)v226, *((uint64_t *)&v226 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v226 + 1) - v226) >> 2));
  if (v38 == 1)
  {
    uint64_t v212 = 0;
    std::string __dst = 0;
    uint64_t v214 = 0;
  }
  else
  {
    long long v223 = 0u;
    *(_OWORD *)unint64_t v222 = 0u;
    LODWORD(v224) = 1065353216;
    if ((void *)v23 == v22)
    {
      int64_t v61 = 0;
      uint64_t v212 = 0;
      std::string __dst = 0;
      uint64_t v214 = 0;
    }
    else
    {
      BOOL v199 = v21;
      uint64_t v39 = 0;
      int v40 = v215;
      if (v37 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v37;
      }
      do
      {
        LODWORD(v209) = v40[3 * v39 + 2];
        int64_t v42 = sub_25B3FA294((uint64_t)v222, (int)v209, &v209);
        unint64_t v43 = v42;
        uint64_t v45 = (char *)v42[4];
        unint64_t v44 = v42[5];
        if ((unint64_t)v45 >= v44)
        {
          uint64_t v47 = (char *)v42[3];
          uint64_t v48 = (v45 - v47) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v50 = v44 - (void)v47;
          if (v50 >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          BOOL v60 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v60) {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            unint64_t v51 = (unint64_t)sub_25B3FBC64(v51);
            uint64_t v47 = (char *)v43[3];
            uint64_t v45 = (char *)v43[4];
          }
          else
          {
            uint64_t v52 = 0;
          }
          uint64_t v53 = (_DWORD *)(v51 + 4 * v48);
          *uint64_t v53 = v39;
          uint64_t v46 = v53 + 1;
          while (v45 != v47)
          {
            int v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *--uint64_t v53 = v54;
          }
          v43[3] = v53;
          v43[4] = v46;
          v43[5] = v51 + 4 * v52;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v45 = v39;
          uint64_t v46 = v45 + 4;
        }
        v43[4] = v46;
        ++v39;
      }
      while (v39 != v41);
      uint64_t v55 = (void *)v223;
      std::string __dst = 0;
      uint64_t v214 = 0;
      uint64_t v212 = 0;
      if ((void)v223)
      {
        unint64_t v56 = (int)(float)(v193[56] * (float)(unint64_t)(v10 - v9));
        do
        {
          uint64_t v57 = (char *)v55[3];
          uint64_t v58 = (char *)v55[4];
          unint64_t v59 = (v58 - v57) >> 2;
          BOOL v60 = v58 - v57 != 4 && v59 >= v56;
          if (!v60) {
            sub_25B4B8F1C(&v212, (char *)__dst, v57, v58, v59);
          }
          uint64_t v55 = (void *)*v55;
        }
        while (v55);
        int64_t v61 = (void *)v223;
      }
      else
      {
        int64_t v61 = 0;
      }
      BOOL v21 = v199;
    }
    sub_25B3FAE18(v61);
    int64_t v62 = v222[0];
    v222[0] = 0;
    if (v62) {
      operator delete(v62);
    }
  }
  if (v215) {
    operator delete(v215);
  }
  if ((void)v226)
  {
    *((void *)&v226 + 1) = v226;
    operator delete((void *)v226);
  }
  if (v22) {
    operator delete(v22);
  }
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  if (!v21)
  {
    unint64_t v65 = 0;
    int v66 = v9;
    do
    {
      unsigned __int32 v67 = v66->n128_u32[2];
      if (v64 >= v65)
      {
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)v63) >> 2) + 1;
        if (v68 > 0x1555555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v65 - (void)v63) >> 2) > v68) {
          unint64_t v68 = 0x5555555555555556 * ((uint64_t)(v65 - (void)v63) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v63) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v69 = 0x1555555555555555;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69) {
          unint64_t v69 = (unint64_t)sub_25B478C4C(v69);
        }
        else {
          uint64_t v70 = 0;
        }
        unint64_t v71 = v69 + 4 * ((uint64_t)(v64 - (void)v63) >> 2);
        *(_DWORD *)unint64_t v71 = v67;
        *(void *)(v71 + 4) = 0xFFFFFFFF00000000;
        uint64_t v72 = (_DWORD *)v71;
        while ((void *)v64 != v63)
        {
          uint64_t v73 = *(void *)(v64 - 12);
          v64 -= 12;
          int v74 = *(_DWORD *)(v64 + 8);
          *(void *)(v72 - 3) = v73;
          v72 -= 3;
          std::locale v72[2] = v74;
        }
        unint64_t v65 = v69 + 12 * v70;
        unint64_t v64 = v71 + 12;
        if (v63) {
          operator delete(v63);
        }
        uint64_t v63 = v72;
      }
      else
      {
        *(_DWORD *)unint64_t v64 = v67;
        *(void *)(v64 + 4) = 0xFFFFFFFF00000000;
        v64 += 12;
      }
      ++v66;
    }
    while (v66 != v10);
  }
  float v75 = v193[55];
  uint64_t v219 = 0;
  uint64_t v220 = 0;
  long long __p = 0;
  unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (void)v63) >> 2);
  sub_25B58B28C(&__p, v63, v64, v76);
  sub_25B58B308((uint64_t)&v226, 1, (uint64_t)&__p, v75 * 0.5);
  if (__p)
  {
    uint64_t v219 = __p;
    operator delete(__p);
  }
  sub_25B573834((uint64_t)&v226);
  int v77 = DWORD1(v228);
  int v215 = 0;
  uint64_t v216 = 0;
  uint64_t v217 = 0;
  sub_25B58B28C(&v215, (const void *)v226, *((uint64_t *)&v226 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v226 + 1) - v226) >> 2));
  if (v77 == 1)
  {
    BOOL v209 = 0;
    double v210 = 0;
    uint64_t v211 = 0;
  }
  else
  {
    long long v223 = 0u;
    *(_OWORD *)unint64_t v222 = 0u;
    LODWORD(v224) = 1065353216;
    if ((void *)v64 == v63)
    {
      float32x4_t v100 = 0;
      BOOL v209 = 0;
      double v210 = 0;
      uint64_t v211 = 0;
    }
    else
    {
      uint64_t v78 = 0;
      int v79 = v215;
      if (v76 <= 1) {
        uint64_t v80 = 1;
      }
      else {
        uint64_t v80 = v76;
      }
      do
      {
        int v208 = v79[3 * v78 + 2];
        unint64_t v81 = sub_25B3FA294((uint64_t)v222, v208, &v208);
        uint64_t v82 = v81;
        int v84 = (char *)v81[4];
        unint64_t v83 = v81[5];
        if ((unint64_t)v84 >= v83)
        {
          unint64_t v86 = (char *)v81[3];
          uint64_t v87 = (v84 - v86) >> 2;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v89 = v83 - (void)v86;
          if (v89 >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          BOOL v60 = (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v60) {
            unint64_t v90 = v88;
          }
          if (v90)
          {
            unint64_t v90 = (unint64_t)sub_25B3FBC64(v90);
            unint64_t v86 = (char *)v82[3];
            int v84 = (char *)v82[4];
          }
          else
          {
            uint64_t v91 = 0;
          }
          uint64_t v92 = (_DWORD *)(v90 + 4 * v87);
          *uint64_t v92 = v78;
          int v85 = v92 + 1;
          while (v84 != v86)
          {
            int v93 = *((_DWORD *)v84 - 1);
            v84 -= 4;
            *--uint64_t v92 = v93;
          }
          v82[3] = v92;
          v82[4] = v85;
          v82[5] = v90 + 4 * v91;
          if (v86) {
            operator delete(v86);
          }
        }
        else
        {
          *(_DWORD *)int v84 = v78;
          int v85 = v84 + 4;
        }
        v82[4] = v85;
        ++v78;
      }
      while (v78 != v80);
      int v94 = (void *)v223;
      double v210 = 0;
      uint64_t v211 = 0;
      BOOL v209 = 0;
      if ((void)v223)
      {
        unint64_t v95 = (int)(float)(v193[56] * (float)(unint64_t)(v10 - v9));
        do
        {
          unint64_t v96 = (char *)v94[3];
          uint64_t v97 = (char *)v94[4];
          unint64_t v98 = (v97 - v96) >> 2;
          if (v97 - v96 == 4 || v98 < v95) {
            sub_25B4B8F1C(&v209, (char *)v210, v96, v97, v98);
          }
          int v94 = (void *)*v94;
        }
        while (v94);
        float32x4_t v100 = (void *)v223;
      }
      else
      {
        float32x4_t v100 = 0;
      }
    }
    sub_25B3FAE18(v100);
    float v101 = v222[0];
    v222[0] = 0;
    if (v101) {
      operator delete(v101);
    }
  }
  if (v215) {
    operator delete(v215);
  }
  if ((void)v226)
  {
    *((void *)&v226 + 1) = v226;
    operator delete((void *)v226);
  }
  if (v63) {
    operator delete(v63);
  }
  id v196 = objc_alloc_init(MEMORY[0x263F089C8]);
  int v103 = (int *)v212;
  uint64_t v104 = (int *)__dst;
  while (v103 != v104)
    objc_msgSend_addIndex_(v196, v102, *v103++);
  float v106 = (int *)v209;
  uint64_t v105 = (int *)v210;
  if (v209 != v210)
  {
    do
      objc_msgSend_addIndex_(v196, v102, *v106++);
    while (v106 != v105);
    float v106 = (int *)v209;
  }
  if (v106)
  {
    double v210 = v106;
    operator delete(v106);
  }
  if (v212)
  {
    std::string __dst = v212;
    operator delete(v212);
  }
  if (v9) {
    operator delete(v9);
  }

  id v107 = objc_alloc(MEMORY[0x263EFF980]);
  id v191 = objc_msgSend_initWithArray_(v107, v108, (uint64_t)obj);
  if (objc_msgSend_count(v196, v109, v110))
  {
    if (a3)
    {
      float v113 = (void *)MEMORY[0x263F087E8];
      uint64_t v232 = *MEMORY[0x263EFFC48];
      uint64_t v233 = @"Outlier Room is found!";
      int v114 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v111, (uint64_t)&v233, &v232, 1);
      objc_msgSend_errorWithDomain_code_userInfo_(v113, v115, @"com.apple.RoomScanCoreError", -1001, v114);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend_removeObjectsAtIndexes_(v191, v111, (uint64_t)v196);
  }
  if (v191 && objc_msgSend_count(v191, v111, v112))
  {
    id v190 = v191;
    float v117 = objc_msgSend_sortedArrayUsingComparator_(v190, v116, (uint64_t)&unk_2708F2068);
    long long v228 = 0u;
    long long v229 = 0u;
    long long v226 = 0u;
    long long v227 = 0u;
    id v197 = v117;
    uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v118, (uint64_t)&v226, v240, 16);
    if (v121)
    {
      float32x2_t v122 = 0;
      unint64_t v123 = 0;
      unint64_t v124 = 0;
      uint64_t v198 = *(void *)v227;
      do
      {
        int64_t v125 = 0;
        unint64_t v200 = (char *)v121;
        do
        {
          if (*(void *)v227 != v198) {
            objc_enumerationMutation(v197);
          }
          unint64_t v126 = *(void **)(*((void *)&v226 + 1) + 8 * (void)v125);
          *(_OWORD *)unint64_t v222 = 0u;
          long long v223 = 0u;
          long long v224 = 0u;
          long long v225 = 0u;
          unint64_t v127 = objc_msgSend_walls(v126, v119, v120);
          uint64_t v131 = objc_msgSend_countByEnumeratingWithState_objects_count_(v127, v128, (uint64_t)v222, &v236, 16);
          obja = v125;
          if (v131)
          {
            uint64_t v132 = *(void *)v223;
            do
            {
              for (uint64_t j = 0; j != v131; ++j)
              {
                if (*(void *)v223 != v132) {
                  objc_enumerationMutation(v127);
                }
                BOOL v134 = (void *)*((void *)v222[1] + j);
                objc_msgSend_quad(v134, v129, v130);
                float v207 = v135;
                objc_msgSend_quad(v134, v136, v137);
                float v139 = fminf(v207, v138);
                if (v123 >= v124)
                {
                  unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v122) >> 2) + 1;
                  if (v140 > 0x1555555555555555) {
                    sub_25B3FBC4C();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v124 - (void)v122) >> 2) > v140) {
                    unint64_t v140 = 0x5555555555555556 * ((uint64_t)(v124 - (void)v122) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (void)v122) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v141 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v141 = v140;
                  }
                  if (v141) {
                    unint64_t v141 = (unint64_t)sub_25B478C4C(v141);
                  }
                  else {
                    size_t v129 = 0;
                  }
                  unint64_t v142 = v141 + 4 * ((uint64_t)(v123 - (void)v122) >> 2);
                  *(float *)unint64_t v142 = v139;
                  *(void *)(v142 + 4) = 0xFFFFFFFF00000000;
                  BOOL v143 = (_DWORD *)v142;
                  while ((void *)v123 != v122)
                  {
                    uint64_t v144 = *(void *)(v123 - 12);
                    v123 -= 12;
                    int v145 = *(_DWORD *)(v123 + 8);
                    *(void *)(v143 - 3) = v144;
                    v143 -= 3;
                    v143[2] = v145;
                  }
                  unint64_t v124 = v141 + 12 * (void)v129;
                  unint64_t v123 = v142 + 12;
                  if (v122) {
                    operator delete(v122);
                  }
                  float32x2_t v122 = v143;
                }
                else
                {
                  *(float *)unint64_t v123 = v139;
                  *(void *)(v123 + 4) = 0xFFFFFFFF00000000;
                  v123 += 12;
                }
              }
              uint64_t v131 = objc_msgSend_countByEnumeratingWithState_objects_count_(v127, v129, (uint64_t)v222, &v236, 16);
            }
            while (v131);
          }

          int64_t v125 = obja + 1;
        }
        while (obja + 1 != v200);
        uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v119, (uint64_t)&v226, v240, 16);
      }
      while (v121);

      if ((void *)v123 == v122)
      {
        uint64_t v168 = 0;
      }
      else
      {
        uint64_t v216 = 0;
        uint64_t v217 = 0;
        int v215 = 0;
        sub_25B58B28C(&v215, v122, v123, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v122) >> 2));
        sub_25B58B308((uint64_t)&__p, 1, (uint64_t)&v215, 1.75);
        if (v215)
        {
          uint64_t v216 = v215;
          operator delete(v215);
        }
        sub_25B573834((uint64_t)&__p);
        int v206 = v221;
        uint64_t v212 = 0;
        std::string __dst = 0;
        uint64_t v214 = 0;
        sub_25B58B28C(&v212, __p, (uint64_t)v219, 0xAAAAAAAAAAAAAAABLL * ((v219 - (unsigned char *)__p) >> 2));
        unint64_t v148 = objc_msgSend_count(v197, v146, v147);
        int v208 = 0;
        sub_25B40FF0C(&v209, v148, &v208);
        id objb = (id)v148;
        if (v148)
        {
          uint64_t v150 = 0;
          int v151 = 0;
          unint64_t v152 = v212;
          do
          {
            unint64_t v153 = 0;
            int v154 = 0;
            float v155 = 0.0;
            while (1)
            {
              uint64_t v156 = objc_msgSend_objectAtIndexedSubscript_(v197, v149, v150);
              uint64_t v159 = objc_msgSend_walls(v156, v157, v158);
              BOOL v162 = objc_msgSend_count(v159, v160, v161) > v153;

              if (!v162) {
                break;
              }
              int v163 = v152[3 * v151 + 2];
              BOOL v164 = __OFSUB__(v163, 1);
              int v165 = v163 - 1;
              if (v165 < 0 == v164)
              {
                float v155 = v155 + (float)v165;
                ++v151;
                ++v154;
              }
              ++v153;
            }
            if (v154 > 0) {
              float v155 = v155 / (float)v154;
            }
            *((_DWORD *)v209 + v150++) = llroundf(v155);
          }
          while ((id)v150 != objb);
        }
        uint64_t v168 = objc_msgSend_arrayWithCapacity_(MEMORY[0x263EFF980], v149, v206);
        if (v206 >= 1)
        {
          do
          {
            unint64_t v169 = objc_msgSend_array(MEMORY[0x263EFF980], v166, v167);
            objc_msgSend_addObject_(v168, v170, (uint64_t)v169);

            --v206;
          }
          while (v206);
        }
        if (objb)
        {
          for (uint64_t k = 0; (id)k != objb; ++k)
          {
            uint64_t v172 = objc_msgSend_objectAtIndexedSubscript_(v197, v166, k);
            uint64_t v174 = objc_msgSend_objectAtIndexedSubscript_(v168, v173, *((int *)v209 + k));
            objc_msgSend_addObject_(v174, v175, (uint64_t)v172);
          }
        }
        if (v209)
        {
          double v210 = v209;
          operator delete(v209);
        }
        if (v212) {
          operator delete(v212);
        }
        if (__p)
        {
          uint64_t v219 = __p;
          operator delete(__p);
        }
      }
      if (v122) {
        operator delete(v122);
      }
    }
    else
    {

      uint64_t v168 = 0;
    }

    int v178 = objc_msgSend_count(v168, v176, v177);
    int v180 = v178;
    if (v178)
    {
      LODWORD(v236) = 2139095039;
      sub_25B400C5C(v240, v178, &v236);
      int v35 = objc_opt_new();
      if (v180 >= 1)
      {
        unint64_t v182 = v180 + 1;
        do
        {
          uint64_t v183 = objc_msgSend_objectAtIndexedSubscript_(v168, v181, (v182 - 2));
          double v184 = sub_25B5A72B8((uint64_t)v193, v183, (const char *)(v182 - 2), v240, a3);
          objc_msgSend_appendFloorPlan_(v35, v185, (uint64_t)v184);

          --v182;
        }
        while (v182 > 1);
      }
      if (v240[0])
      {
        v240[1] = v240[0];
        operator delete(v240[0]);
      }
    }
    else
    {
      if (a3)
      {
        double v186 = (void *)MEMORY[0x263F087E8];
        uint64_t v230 = *MEMORY[0x263EFFC48];
        int v231 = @"Insufficient input!";
        double v187 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v179, (uint64_t)&v231, &v230, 1);
        objc_msgSend_errorWithDomain_code_userInfo_(v186, v188, @"com.apple.RoomScanCoreError", -1002, v187);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      int v35 = 0;
    }
  }
  else
  {
    int v35 = 0;
  }

LABEL_250:

  return v35;
}

void sub_25B5A6F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a32) {
    operator delete(a32);
  }
  if (v37) {
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void **sub_25B5A72B8(uint64_t a1, void *a2, const char *a3, void *a4, void *a5)
{
  uint64_t v1431 = *MEMORY[0x263EF8340];
  obunint64_t j = a2;
  unint64_t v7 = objc_msgSend_count(obj, v5, v6);
  sub_25B443228(&v1361, v7);
  for (unint64_t i = 0; objc_msgSend_count(obj, v8, v9) > i; ++i)
  {
    uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(obj, v11, i);
    float v13 = sub_25B5AE844(a1, v12);
    *((float *)v1361 + i) = v13;
  }
  id obja = obj;
  uint64_t v14 = (float *)v1361;
  uint64_t v15 = v1362;
  if (v1361 == v1362)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      __float2 v19 = __sincosf_stret(*v14 * 4.0);
      if (v17 >= v18)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v16) >> 2) + 1;
        if (v20 > 0x1555555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v18 - (void)v16) >> 2) > v20) {
          unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v18 - (void)v16) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v16) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v21 = 0x1555555555555555;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)sub_25B478C4C(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = v21 + 4 * ((uint64_t)(v17 - (void)v16) >> 2);
        *(__float2 *)unint64_t v23 = v19;
        *(_DWORD *)(v23 + 8) = -1;
        unint64_t v24 = (_DWORD *)v23;
        while ((void *)v17 != v16)
        {
          uint64_t v25 = *(void *)(v17 - 12);
          v17 -= 12;
          int v26 = *(_DWORD *)(v17 + 8);
          *(void *)(v24 - 3) = v25;
          v24 -= 3;
          v24[2] = v26;
        }
        unint64_t v18 = v21 + 12 * v22;
        unint64_t v17 = v23 + 12;
        if (v16) {
          operator delete(v16);
        }
        unint64_t v16 = v24;
      }
      else
      {
        *(__float2 *)unint64_t v17 = v19;
        *(_DWORD *)(v17 + 8) = -1;
        v17 += 12;
      }
      ++v14;
    }
    while (v14 != v15);
  }
  float v27 = *(float *)(a1 + 228);
  *(void *)&long long v1424 = 0;
  __p[0] = 0;
  __p[1] = 0;
  sub_25B58B28C(__p, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v16) >> 2));
  float v28 = (float)(v27 * 4.0) / 180.0 * 3.14159265;
  sub_25B58B308((uint64_t)buf, 1, (uint64_t)__p, v28);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_25B573834((uint64_t)buf);
  int v29 = DWORD1(v1395);
  long long v1419 = 0uLL;
  *(void *)&long long v1420 = 0;
  sub_25B58B28C(&v1419, *(const void **)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2));
  std::string __dst = 0;
  v1410 = 0;
  v1412 = 0;
  if (v29 == 1)
  {
    id v1292 = objc_alloc_init(MEMORY[0x263F088D0]);
  }
  else
  {
    memset(v1413, 0, 32);
    *(_DWORD *)&v1413[32] = 1065353216;
    uint64_t v32 = v1419;
    if (*((void *)&v1419 + 1) != (void)v1419)
    {
      uint64_t v33 = 0;
      if ((unint64_t)((*((void *)&v1419 + 1) - (void)v1419) / 12) <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = (*((void *)&v1419 + 1) - (void)v1419) / 12;
      }
      do
      {
        LODWORD(v1406) = *(_DWORD *)(v32 + 12 * v33 + 8);
        int v35 = sub_25B3FA294((uint64_t)v1413, v1406, &v1406);
        float v36 = v35;
        int v38 = (char *)v35[4];
        unint64_t v37 = v35[5];
        if ((unint64_t)v38 >= v37)
        {
          int v40 = (char *)v35[3];
          uint64_t v41 = (v38 - v40) >> 2;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v43 = v37 - (void)v40;
          if (v43 >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            unint64_t v44 = (unint64_t)sub_25B3FBC64(v44);
            int v40 = (char *)v36[3];
            int v38 = (char *)v36[4];
          }
          else
          {
            BOOL v30 = 0;
          }
          uint64_t v45 = (_DWORD *)(v44 + 4 * v41);
          *uint64_t v45 = v33;
          uint64_t v39 = v45 + 1;
          while (v38 != v40)
          {
            int v46 = *((_DWORD *)v38 - 1);
            v38 -= 4;
            *--uint64_t v45 = v46;
          }
          v36[3] = v45;
          v36[4] = v39;
          v36[5] = v44 + 4 * (void)v30;
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(_DWORD *)int v38 = v33;
          uint64_t v39 = v38 + 4;
        }
        v36[4] = v39;
        ++v33;
      }
      while (v33 != v34);
    }
    uint64_t v47 = objc_msgSend_count(obja, v30, v31);
    uint64_t v50 = *(void **)&v1413[16];
    if (*(void *)&v1413[16])
    {
      unint64_t v51 = (int)(float)(*(float *)(a1 + 232) * (float)(unint64_t)v47);
      do
      {
        unint64_t v49 = (char *)v50[3];
        uint64_t v52 = (char *)v50[4];
        unint64_t v53 = (v52 - v49) >> 2;
        if (v52 - v49 == 4 || v53 < v51) {
          sub_25B4B8F1C(&v1410, (char *)__dst, v49, v52, v53);
        }
        uint64_t v50 = (void *)*v50;
      }
      while (v50);
    }
    if (__dst == v1410)
    {
      id v1292 = objc_alloc_init(MEMORY[0x263F088D0]);
    }
    else
    {
      unint64_t v55 = objc_msgSend_count(obja, v48, (uint64_t)v49);
      sub_25B5B6918(&v1406, v55);
      for (unint64_t j = 0; objc_msgSend_count(obja, v56, v57) > j; ++j)
      {
        BOOL v60 = objc_msgSend_objectAtIndexedSubscript_(obja, v59, j);
        uint64_t v63 = objc_msgSend_floors(v60, v61, v62);

        if (objc_msgSend_count(v63, v64, v65))
        {
          v1351 = v63;
          unsigned __int32 v67 = objc_msgSend_objectAtIndexedSubscript_(v63, v66, 0);
          if (objc_msgSend_polygonSize(v67, v68, v69))
          {
            uint64_t v72 = v1406;
            unint64_t v73 = objc_msgSend_polygonSize(v67, v70, v71);
            sub_25B443B1C((void **)(v72 + 24 * j), v73);
            uint64_t v78 = objc_msgSend_polygon(v67, v74, v75);
            for (unint64_t k = 0; objc_msgSend_polygonSize(v67, v76, v77) > k; ++k)
            {
              uint64_t v80 = (void **)(v1406 + 24 * j);
              uint64_t v81 = *(void *)(v78 + 16 * k);
              unint64_t v83 = v80 + 1;
              uint64_t v82 = v80[1];
              unint64_t v84 = (unint64_t)v80[2];
              if ((unint64_t)v82 >= v84)
              {
                uint64_t v86 = ((char *)v82 - (unsigned char *)*v80) >> 3;
                if ((unint64_t)(v86 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v87 = v84 - (void)*v80;
                uint64_t v88 = v87 >> 2;
                if (v87 >> 2 <= (unint64_t)(v86 + 1)) {
                  uint64_t v88 = v86 + 1;
                }
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v89) {
                  unint64_t v89 = (unint64_t)sub_25B3FCAD4(v89);
                }
                else {
                  unint64_t v76 = 0;
                }
                unint64_t v90 = (void *)(v89 + 8 * v86);
                *unint64_t v90 = v81;
                int v85 = v90 + 1;
                uint64_t v91 = (char *)*v83;
                uint64_t v92 = (char *)*v80;
                if (*v83 != *v80)
                {
                  do
                  {
                    uint64_t v93 = *((void *)v91 - 1);
                    v91 -= 8;
                    *--unint64_t v90 = v93;
                  }
                  while (v91 != v92);
                  uint64_t v91 = (char *)*v80;
                }
                const char *v80 = v90;
                *unint64_t v83 = v85;
                v80[2] = (void *)(v89 + 8 * (void)v76);
                if (v91) {
                  operator delete(v91);
                }
              }
              else
              {
                *uint64_t v82 = v81;
                int v85 = v82 + 1;
              }
              *unint64_t v83 = v85;
            }
          }

          uint64_t v63 = v1351;
        }
      }
      id v1292 = objc_alloc_init(MEMORY[0x263F089C8]);
      unint64_t v96 = (int *)v1410;
      uint64_t v97 = (int *)__dst;
      if (v1410 != __dst)
      {
        uint64_t v1352 = v1419;
        uint64_t v1331 = v1419 + 8;
        do
        {
          uint64_t v98 = *v96;
          if (*(void *)(v1406 + 24 * (int)v98 + 8) != *(void *)(v1406 + 24 * (int)v98))
          {
            uint64_t v99 = 0;
            unint64_t v100 = 0;
            int v101 = *(_DWORD *)(v1352 + 12 * (int)v98 + 8);
            float v102 = 0.0;
            int v103 = (_DWORD *)v1331;
            while (objc_msgSend_count(obja, v94, v95) > v100)
            {
              if (v98 != v100
                && *(void *)(v1406 + v99 + 8) != *(void *)(v1406 + v99)
                && *v103 != v101)
              {
                LODWORD(v104) = 1036831949;
                sub_25B57B8E8((unint64_t *)&v1390, *(float32x2_t **)(v1406 + 24 * (int)v98), *(float32x2_t **)(v1406 + 24 * (int)v98 + 8), (float32x2_t **)(v1406 + v99), v104);
                float v105 = *((void *)&v1390 + 1)
                     ? (float)(unint64_t)v1390 / (float)*((unint64_t *)&v1390 + 1)
                     : 0.0;
                if (v105 >= v102) {
                  float v102 = v105;
                }
              }
              ++v100;
              v103 += 3;
              v99 += 24;
            }
            if (v102 > *(float *)(a1 + 236)) {
              objc_msgSend_addIndex_(v1292, v94, v98);
            }
          }
          ++v96;
        }
        while (v96 != v97);
      }
      *(void *)&long long v1390 = &v1406;
      sub_25B413BE8((void ***)&v1390);
    }
    sub_25B3FAE18(*(void **)&v1413[16]);
    float v106 = *(void **)v1413;
    *(void *)v1413 = 0;
    if (v106) {
      operator delete(v106);
    }
  }
  if (v1410)
  {
    std::string __dst = v1410;
    operator delete(v1410);
  }
  if ((void)v1419) {
    operator delete((void *)v1419);
  }
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v16) {
    operator delete(v16);
  }

  id v107 = sub_25B5AEE38(obja, v1292, a5);

  id objb = v107;
  if ((unint64_t)objc_msgSend_count(objb, v108, v109) < 2) {
    goto LABEL_190;
  }
  unint64_t v112 = objc_msgSend_count(objb, v110, v111);
  *(_DWORD *)buf = 0;
  sub_25B400C5C(v1413, v112, buf);
  for (unint64_t m = 0; objc_msgSend_count(objb, v113, v114) > m; ++m)
  {
    float v117 = objc_msgSend_objectAtIndexedSubscript_(objb, v116, m);
    float v118 = sub_25B5AE844(a1, v117);
    *(float *)(*(void *)v1413 + 4 * m) = v118;
  }
  uint64_t v119 = *(float **)v1413;
  uint64_t v120 = *(float **)&v1413[8];
  if (*(void *)v1413 == *(void *)&v1413[8])
  {
    uint64_t v121 = 0;
    unint64_t v122 = 0;
  }
  else
  {
    uint64_t v121 = 0;
    unint64_t v122 = 0;
    unint64_t v123 = 0;
    do
    {
      __float2 v124 = __sincosf_stret(*v119 * 4.0);
      if (v122 >= v123)
      {
        unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - (void)v121) >> 2) + 1;
        if (v125 > 0x1555555555555555) {
          sub_25B3FBC4C();
        }
        if (0x5555555555555556 * ((uint64_t)(v123 - (void)v121) >> 2) > v125) {
          unint64_t v125 = 0x5555555555555556 * ((uint64_t)(v123 - (void)v121) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v121) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v126 = 0x1555555555555555;
        }
        else {
          unint64_t v126 = v125;
        }
        if (v126) {
          unint64_t v126 = (unint64_t)sub_25B478C4C(v126);
        }
        else {
          uint64_t v127 = 0;
        }
        unint64_t v128 = v126 + 4 * ((uint64_t)(v122 - (void)v121) >> 2);
        *(__float2 *)unint64_t v128 = v124;
        *(_DWORD *)(v128 + 8) = -1;
        size_t v129 = (_DWORD *)v128;
        while ((void *)v122 != v121)
        {
          uint64_t v130 = *(void *)(v122 - 12);
          v122 -= 12;
          int v131 = *(_DWORD *)(v122 + 8);
          *(void *)(v129 - 3) = v130;
          v129 -= 3;
          v129[2] = v131;
        }
        unint64_t v123 = v126 + 12 * v127;
        unint64_t v122 = v128 + 12;
        if (v121) {
          operator delete(v121);
        }
        uint64_t v121 = v129;
      }
      else
      {
        *(__float2 *)unint64_t v122 = v124;
        *(_DWORD *)(v122 + 8) = -1;
        v122 += 12;
      }
      ++v119;
    }
    while (v119 != v120);
  }
  float v132 = *(float *)(a1 + 208);
  *(void *)&long long v1424 = 0;
  __p[0] = 0;
  __p[1] = 0;
  sub_25B58B28C(__p, v121, v122, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - (void)v121) >> 2));
  float v133 = v132 * 4.0 / 180.0 * 3.14159265 * 0.5;
  sub_25B58B308((uint64_t)buf, 1, (uint64_t)__p, v133);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_25B573834((uint64_t)buf);
  unint64_t v134 = SDWORD1(v1395);
  long long v1419 = 0uLL;
  *(void *)&long long v1420 = 0;
  sub_25B58B28C(&v1419, *(const void **)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2));
  if (v134)
  {
    *(void *)&long long v1406 = 0;
    sub_25B5BECC8(&v1410, v134, &v1406);
    LODWORD(v1390) = 0;
    sub_25B400C5C(&v1406, v134, &v1390);
    float v135 = (_DWORD *)v1419;
    if (*((void *)&v1419 + 1) != (void)v1419)
    {
      unint64_t v136 = 0;
      unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1419 + 1) - v1419) >> 2);
      float v138 = (int *)(v1419 + 8);
      do
      {
        unsigned int v139 = *v138 - 1;
        if (*v138 >= 1)
        {
          *((float32x2_t *)v1410 + v139) = vadd_f32(*(float32x2_t *)(v138 - 2), *(float32x2_t *)((char *)v1410 + 8 * v139));
          *(float *)(v1406 + 4 * v139) = *(float *)(v1406 + 4 * v139) + 1.0;
        }
        ++v136;
        v138 += 3;
      }
      while (v137 > v136);
    }
    uint64_t v140 = v1406 + 4;
    _ZF = (void)v1406 == *((void *)&v1406 + 1) || v140 == *((void *)&v1406 + 1);
    uint64_t v142 = v1406;
    if (!_ZF)
    {
      float v143 = *(float *)v1406;
      uint64_t v142 = v1406;
      uint64_t v144 = (float *)(v1406 + 4);
      do
      {
        float v145 = *v144++;
        float v146 = v145;
        if (v143 < v145)
        {
          float v143 = v146;
          uint64_t v142 = v140;
        }
        uint64_t v140 = (uint64_t)v144;
      }
      while (v144 != *((float **)&v1406 + 1));
    }
    unint64_t v147 = v142 - v1406;
    unint64_t v148 = (const float *)(v1406 + ((v142 - (uint64_t)v1406) << 30 >> 30));
    float32x2_t v149 = vld1_dup_f32(v148);
    float32x2_t v150 = vdiv_f32(*(float32x2_t *)((char *)v1410 + ((v142 - (uint64_t)v1406) << 30 >> 29)), v149);
    float v153 = atan2f(v150.f32[0], v150.f32[1]);
    if (v153 >= 0.0)
    {
      float v155 = v153;
    }
    else
    {
      float v154 = v153 + 6.28318531;
      float v155 = v154;
    }
    unint64_t v156 = objc_msgSend_count(objb, v151, v152);
    src.i32[0] = 0;
    sub_25B400C5C(&v1390, v156, &src);
    unint64_t v159 = 0;
    unint64_t v160 = v147 >> 2;
    float v161 = v155 * 0.25;
    while (objc_msgSend_count(objb, v157, v158) > v159)
    {
      int v162 = v135[3 * v159 + 2];
      _VF = __OFSUB__(v162, 1);
      int v164 = v162 - 1;
      if (v164 < 0 == _VF && v164 == v160)
      {
        uint64_t v165 = 0;
        float v166 = *(float *)(*(void *)v1413 + 4 * v159);
        float v167 = 3.4028e38;
        do
        {
          float v168 = v161 + *(float *)&dword_25B5F25A0[v165];
          if (vabds_f32(v166, v168) < fabsf(v167)) {
            float v167 = v166 - v168;
          }
          ++v165;
        }
        while (v165 != 3);
        *(float *)(v1390 + 4 * v159) = v167;
      }
      ++v159;
    }
    for (unint64_t n = 0; objc_msgSend_count(objb, v157, v158) > n; ++n)
    {
      objc_msgSend_objectAtIndexedSubscript_(objb, v170, n);
      uint64_t v171 = (_DWORD *)objc_claimAutoreleasedReturnValue();
      uint64_t v174 = v171;
      if (v171)
      {
        uint64_t v177 = objc_msgSend_walls(v171, v172, v173);
        if (v177)
        {
          int v178 = objc_msgSend_walls(v174, v175, v176);
          BOOL v181 = objc_msgSend_count(v178, v179, v180) == 0;

          if (!v181)
          {
            __n128 v1353 = sub_25B5BED4C(v174);
            float32x4_t v182 = vnegq_f32((float32x4_t)v1353);
            v182.i32[2] = 0;
            float32x4_t src = v182;
            objc_copyStruct(v174 + 32, &src, 16, 1, 0);
            v174[5] = 0;
            sub_25B4EBF6C((uint64_t)v174);
            float32x4_t src = 0u;
            objc_copyStruct(v174 + 32, &src, 16, 1, 0);
            v174[5] = *(_DWORD *)(v1390 + 4 * n);
            sub_25B4EBF6C((uint64_t)v174);
            __n128 v183 = v1353;
            v183.n128_u32[2] = 0;
            float32x4_t src = (float32x4_t)v183;
            objc_copyStruct(v174 + 32, &src, 16, 1, 0);
            v174[5] = 0;
            sub_25B4EBF6C((uint64_t)v174);
            float32x4_t src = 0u;
            objc_copyStruct(v174 + 32, &src, 16, 1, 0);
          }
        }
      }
    }
    if ((void)v1390)
    {
      *((void *)&v1390 + 1) = v1390;
      operator delete((void *)v1390);
    }
    if ((void)v1406)
    {
      *((void *)&v1406 + 1) = v1406;
      operator delete((void *)v1406);
    }
    if (v1410)
    {
      std::string __dst = v1410;
      operator delete(v1410);
    }
    if (!v135) {
      goto LABEL_184;
    }
  }
  else
  {
    float v135 = (_DWORD *)v1419;
    if (!(void)v1419) {
      goto LABEL_184;
    }
  }
  operator delete(v135);
LABEL_184:
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v121) {
    operator delete(v121);
  }
  if (*(void *)v1413)
  {
    *(void *)&v1413[8] = *(void *)v1413;
    operator delete(*(void **)v1413);
  }
LABEL_190:

  id objc = objb;
  id v1288 = objc_alloc_init(MEMORY[0x263F089C8]);
  int v186 = objc_msgSend_count(objc, v184, v185);
  if (v186 >= 2)
  {
    unsigned int v1307 = v186;
    id v191 = objc_msgSend_array(MEMORY[0x263EFF980], v187, v188);
    for (iunint64_t i = 0; objc_msgSend_count(objc, v189, v190) > ii; ++ii)
    {
      BOOL v194 = objc_msgSend_objectAtIndexedSubscript_(objc, v193, ii);
      long long v1425 = 0u;
      long long v1426 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v1424 = 0u;
      id v197 = objc_msgSend_walls(v194, v195, v196);
      uint64_t v200 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v198, (uint64_t)__p, buf, 16);
      if (v200)
      {
        uint64_t v201 = *(void *)v1424;
        do
        {
          for (uint64_t jj = 0; jj != v200; ++jj)
          {
            if (*(void *)v1424 != v201) {
              objc_enumerationMutation(v197);
            }
            uint64_t v203 = *((void *)__p[1] + jj);
            if (v203) {
              *(void *)(v203 + 160) = ii;
            }
          }
          uint64_t v200 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v199, (uint64_t)__p, buf, 16);
        }
        while (v200);
      }

      int v206 = objc_msgSend_walls(v194, v204, v205);
      objc_msgSend_addObjectsFromArray_(v191, v207, (uint64_t)v206);
    }
    sub_25B5BD26C(&v1410, v191);
    v1321 = 0;
    unint64_t v1332 = 0;
    double v210 = 0;
    unint64_t v211 = 0;
    long long v1419 = 0u;
    long long v1420 = 0u;
    LODWORD(v1421) = 1065353216;
    while (objc_msgSend_count(v191, v208, v209) > v211)
    {
      int v215 = objc_msgSend_objectAtIndexedSubscript_(v191, v212, v211);
      uint64_t v216 = v211;
      if (v215)
      {
        while (objc_msgSend_count(v191, v213, v214) > (unint64_t)++v216)
        {
          uint64_t v220 = objc_msgSend_objectAtIndexedSubscript_(v191, v217, v216);
          if (v220)
          {
            int v221 = objc_msgSend_identifier(v215, v218, v219);
            long long v224 = objc_msgSend_identifier(v220, v222, v223);
            char isEqual = objc_msgSend_isEqual_(v221, v225, (uint64_t)v224);

            if ((isEqual & 1) == 0 && v215[20] != v220[20])
            {
              long long v227 = (float32x2_t *)((char *)v1410 + 48 * v211);
              long long v228 = (float32x2_t *)((char *)v1410 + 48 * v216);
              sub_25B4D56B4((uint64_t)v1413, v227, v228, (float *)(a1 + 8));
              if (*(_DWORD *)v1413 == -1)
              {
                if (sub_25B40E2B8(*v227, v227[1], *v228, v228[1]))
                {
                  if ((unint64_t)v210 >= v1332)
                  {
                    uint64_t v244 = v210 - v1321;
                    unint64_t v245 = v244 + 1;
                    if ((unint64_t)(v244 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v1332 - (void)v1321) >> 2 > v245) {
                      unint64_t v245 = (uint64_t)(v1332 - (void)v1321) >> 2;
                    }
                    if (v1332 - (unint64_t)v1321 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v246 = v245;
                    }
                    if (v246) {
                      unint64_t v246 = (unint64_t)sub_25B3FCAD4(v246);
                    }
                    else {
                      uint64_t v247 = 0;
                    }
                    uint64_t v248 = (unint64_t *)(v246 + 8 * v244);
                    *uint64_t v248 = v211 | (v216 << 32);
                    uint64_t v249 = v248 + 1;
                    if (v210 == v1321)
                    {
                      unint64_t v250 = v1321;
                    }
                    else
                    {
                      unint64_t v250 = v1321;
                      do
                      {
                        unint64_t v251 = *--v210;
                        *--uint64_t v248 = v251;
                      }
                      while (v210 != v1321);
                    }
                    unint64_t v1332 = v246 + 8 * v247;
                    if (v250) {
                      operator delete(v250);
                    }
                    v1321 = v248;
                    double v210 = v249;
                  }
                  else
                  {
                    *v210++ = v211 | (v216 << 32);
                  }
                }
              }
              else
              {
                long long v229 = sub_25B5BCE70((uint64_t *)&v1419, *(int *)v1413, v1413);
                uint64_t v230 = v229;
                uint64_t v232 = (unint64_t *)v229[4];
                unint64_t v231 = v229[5];
                if ((unint64_t)v232 >= v231)
                {
                  uint64_t v234 = v229[3];
                  uint64_t v235 = ((uint64_t)v232 - v234) >> 3;
                  if ((unint64_t)(v235 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v236 = v231 - v234;
                  uint64_t v237 = v236 >> 2;
                  if (v236 >> 2 <= (unint64_t)(v235 + 1)) {
                    uint64_t v237 = v235 + 1;
                  }
                  if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v238 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v238 = v237;
                  }
                  if (v238) {
                    unint64_t v238 = (unint64_t)sub_25B3FCAD4(v238);
                  }
                  else {
                    uint64_t v239 = 0;
                  }
                  float32x2_t v240 = (unint64_t *)(v238 + 8 * v235);
                  *float32x2_t v240 = v211 | (v216 << 32);
                  uint64_t v233 = v240 + 1;
                  long long v242 = (char *)v230[3];
                  unint64_t v241 = (char *)v230[4];
                  if (v241 != v242)
                  {
                    do
                    {
                      unint64_t v243 = *((void *)v241 - 1);
                      v241 -= 8;
                      *--float32x2_t v240 = v243;
                    }
                    while (v241 != v242);
                    unint64_t v241 = (char *)v230[3];
                  }
                  v230[3] = v240;
                  v230[4] = v233;
                  v230[5] = v238 + 8 * v239;
                  if (v241) {
                    operator delete(v241);
                  }
                }
                else
                {
                  *uint64_t v232 = v211 | (v216 << 32);
                  uint64_t v233 = v232 + 1;
                }
                v230[4] = v233;
              }
              if (*((void *)&v1414 + 1))
              {
                *(void *)&long long v1415 = *((void *)&v1414 + 1);
                operator delete(*((void **)&v1414 + 1));
              }
              if (*(void *)&v1413[56])
              {
                *(void *)&v1413[64] = *(void *)&v1413[56];
                operator delete(*(void **)&v1413[56]);
              }
            }
          }
        }
      }

      ++v211;
    }
    if (v210 != v1321)
    {
      sub_25B5B6918(v1413, v1307);
      uint64_t v253 = 0;
      unint64_t v1354 = v1307;
      do
      {
        objc_msgSend_objectAtIndexedSubscript_(objc, v252, v253);
        id v254 = (id)objc_claimAutoreleasedReturnValue();
        long long v257 = v254;
        unint64_t v258 = 0;
        *(void *)&long long v1407 = 0;
        long long v1406 = 0uLL;
        if (v254)
        {
          vDSP_Length v259 = objc_msgSend_floors(v254, v255, v256);
          id v262 = v259;
          if (v259 && objc_msgSend_count(v259, v260, v261))
          {
            uint64_t v264 = objc_msgSend_objectAtIndexedSubscript_(v262, v263, 0);
            v1333 = v264;
            if (objc_msgSend_polygonSize(v264, v265, v266))
            {
              unint64_t v269 = objc_msgSend_polygonSize(v264, v267, v268);
              sub_25B443B1C((void **)&v1406, v269);
              log = v262;
              v1308 = v257;
              uint64_t v274 = objc_msgSend_polygon(v264, v270, v271);
              unint64_t v275 = 0;
              unint64_t v258 = v1407;
              uint64_t v276 = (char *)*((void *)&v1406 + 1);
              int v277 = (char *)v1406;
              while (objc_msgSend_polygonSize(v264, v272, v273) > v275)
              {
                uint64_t v278 = *(void *)(v274 + 16 * v275);
                if ((unint64_t)v276 >= v258)
                {
                  uint64_t v280 = (v276 - v277) >> 3;
                  unint64_t v281 = v280 + 1;
                  if ((unint64_t)(v280 + 1) >> 61)
                  {
                    *(void *)&long long v1407 = v258;
                    *((void *)&v1406 + 1) = v276;
                    *(void *)&long long v1406 = v277;
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v258 - (void)v277) >> 2 > v281) {
                    unint64_t v281 = (uint64_t)(v258 - (void)v277) >> 2;
                  }
                  if (v258 - (unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v282 = v281;
                  }
                  if (v282) {
                    unint64_t v282 = (unint64_t)sub_25B3FCAD4(v282);
                  }
                  else {
                    uint64_t v272 = 0;
                  }
                  size_t v283 = (char *)(v282 + 8 * v280);
                  *(void *)size_t v283 = v278;
                  uint64_t v279 = v283 + 8;
                  while (v276 != v277)
                  {
                    uint64_t v284 = *((void *)v276 - 1);
                    v276 -= 8;
                    *((void *)v283 - 1) = v284;
                    v283 -= 8;
                  }
                  unint64_t v258 = v282 + 8 * (void)v272;
                  if (v277) {
                    operator delete(v277);
                  }
                  int v277 = v283;
                  uint64_t v264 = v1333;
                }
                else
                {
                  *(void *)uint64_t v276 = v278;
                  uint64_t v279 = v276 + 8;
                }
                ++v275;
                uint64_t v276 = v279;
              }
              *(void *)&long long v1407 = v258;
              *((void *)&v1406 + 1) = v276;
              *(void *)&long long v1406 = v277;
              long long v257 = v1308;
              id v262 = log;
            }
            else
            {
              unint64_t v258 = 0;
            }
          }
          else
          {
            unint64_t v258 = 0;
          }
        }
        uint64_t v285 = *(void *)v1413;
        uint64_t v286 = *(void *)v1413 + 24 * v253;
        id v287 = *(void **)v286;
        if (*(void *)v286)
        {
          *(void *)(*(void *)v1413 + 24 * v253 + 8) = v287;
          operator delete(v287);
          *(void *)uint64_t v286 = 0;
          *(void *)(v286 + 8) = 0;
          *(void *)(v286 + 16) = 0;
        }
        *(_OWORD *)uint64_t v286 = v1406;
        *(void *)(v285 + 24 * v253 + 16) = v258;

        ++v253;
      }
      while (v253 != v1354);
      uint64_t v288 = 0;
      for (kunint64_t k = 0; kk != v1354; ++kk)
      {
        int v290 = objc_msgSend_objectAtIndexedSubscript_(objc, v252, kk);
        double v293 = objc_msgSend_walls(v290, v291, v292);
        int v296 = objc_msgSend_count(v293, v294, v295);

        if (v296)
        {
          sub_25B443228(&v1406, v1354);
          sub_25B443228(&v1390, v1354);
          uint64_t v298 = (int *)v1321;
          do
          {
            uint64_t v299 = objc_msgSend_objectAtIndexedSubscript_(v191, v297, *v298);
            if (v299) {
              uint64_t v300 = v299[20];
            }
            else {
              uint64_t v300 = 0;
            }
            BOOL v301 = v300 == kk;

            if (v301)
            {
              uint64_t v303 = objc_msgSend_objectAtIndexedSubscript_(v191, v302, v298[1]);
              if (v303) {
                uint64_t v304 = v303[20];
              }
              else {
                LODWORD(v304) = 0;
              }

              if ((sub_25B5BEB88(*v298, v304, (uint64_t)&v1419, v191) & 1) == 0) {
                *(float *)(v1406 + 4 * (int)v304) = *(float *)(v1406 + 4 * (int)v304) + 1.0;
              }
            }
            uint64_t v305 = objc_msgSend_objectAtIndexedSubscript_(v191, v302, v298[1]);
            if (v305) {
              uint64_t v306 = v305[20];
            }
            else {
              uint64_t v306 = 0;
            }
            BOOL v307 = v306 == kk;

            if (v307)
            {
              unint64_t v309 = objc_msgSend_objectAtIndexedSubscript_(v191, v297, *v298);
              if (v309) {
                uint64_t v310 = v309[20];
              }
              else {
                LODWORD(v310) = 0;
              }

              if ((sub_25B5BEB88(v298[1], v310, (uint64_t)&v1419, v191) & 1) == 0) {
                *(float *)(v1406 + 4 * (int)v310) = *(float *)(v1406 + 4 * (int)v310) + 1.0;
              }
            }
            v298 += 2;
          }
          while (v298 != (int *)v210);
          float32x2_t v311 = (float *)v1406;
          float v312 = (float)v296;
          double v313 = 0.0;
          unint64_t v314 = v1354;
          do
          {
            float v315 = *v311++;
            float v316 = v315 / v312;
            if (*(float *)&v313 < (float)(v315 / v312)) {
              *(float *)&double v313 = v316;
            }
            --v314;
          }
          while (v314);
          if (*(float *)&v313 > *(float *)(a1 + 240))
          {
            float32x2_t v317 = (uint64_t *)v1420;
            if ((void)v1420)
            {
              float v318 = 0.0;
              do
              {
                if (*((_DWORD *)v317 + 4) != 3)
                {
                  float v320 = (unsigned int *)v317[3];
                  unint64_t v319 = (unsigned int *)v317[4];
                  while (v320 != v319)
                  {
                    unint64_t v322 = *v320;
                    unint64_t v321 = v320[1];
                    if ((v322 & 0x80000000) == 0 && objc_msgSend_count(v191, v297, v308) > v322)
                    {
                      float32x2_t v323 = objc_msgSend_objectAtIndexedSubscript_(v191, v297, v322);
                      uint64_t v324 = v323 ? v323[20] : 0;
                      BOOL v325 = v324 == kk;

                      if (v325) {
                        float v318 = v318 + 1.0;
                      }
                    }
                    if ((v321 & 0x80000000) == 0 && objc_msgSend_count(v191, v297, v308) > v321)
                    {
                      uint64_t v326 = objc_msgSend_objectAtIndexedSubscript_(v191, v297, v321);
                      uint64_t v327 = v326 ? v326[20] : 0;
                      BOOL v328 = v327 == kk;

                      if (v328) {
                        float v318 = v318 + 1.0;
                      }
                    }
                    v320 += 2;
                  }
                }
                float32x2_t v317 = (uint64_t *)*v317;
              }
              while (v317);
            }
            else
            {
              float v318 = 0.0;
            }
            if ((float)(v318 / v312) <= *(float *)(a1 + 248)
              && *(void *)(*(void *)v1413 + 24 * kk + 8) != *(void *)(*(void *)v1413 + 24 * kk))
            {
              uint64_t v329 = 0;
              float v330 = 0.0;
              do
              {
                if (v288 != v329 && *(void *)(*(void *)v1413 + v329 + 8) != *(void *)(*(void *)v1413 + v329))
                {
                  LODWORD(v313) = 1036831949;
                  sub_25B57B8E8((unint64_t *)&src, *(float32x2_t **)(*(void *)v1413 + 24 * kk), *(float32x2_t **)(*(void *)v1413 + 24 * kk + 8), (float32x2_t **)(*(void *)v1413 + v329), v313);
                  if (src.i64[1]) {
                    *(float *)&double v313 = (float)src.u64[0] / (float)src.u64[1];
                  }
                  else {
                    double v313 = 0.0;
                  }
                  if (v330 < *(float *)&v313) {
                    float v330 = *(float *)&v313;
                  }
                }
                v329 += 24;
              }
              while (24 * v1354 != v329);
              if (v330 > *(float *)(a1 + 244)) {
                objc_msgSend_addIndex_(v1288, v297, kk);
              }
            }
          }
          if ((void)v1390)
          {
            *((void *)&v1390 + 1) = v1390;
            operator delete((void *)v1390);
          }
          if ((void)v1406)
          {
            *((void *)&v1406 + 1) = v1406;
            operator delete((void *)v1406);
          }
        }

        v288 += 24;
      }
      *(void *)&long long v1406 = v1413;
      sub_25B413BE8((void ***)&v1406);
    }
    sub_25B3FAE18((void *)v1420);
    double v331 = (void *)v1419;
    *(void *)&long long v1419 = 0;
    if (v331) {
      operator delete(v331);
    }
    if (v1321) {
      operator delete(v1321);
    }
    if (v1410) {
      operator delete(v1410);
    }
  }
  unint64_t v332 = sub_25B5AEE38(objc, v1288, a5);

  sub_25B5AEF9C(a1, v332);
  sub_25B5B16BC(a1, v332);
  id v1315 = v332;
  int v333 = 0;
  *(float *)v334.i32 = *(float *)(a1 + 656) * 0.5;
  float32x2_t v335 = (float32x2_t)vdup_lane_s32(v334, 0);
  do
  {
    int v1295 = v333;
    float v336 = expf((float)v333 * -0.25);
    sub_25B5BD26C(__p, *(void **)(a1 + 256));
    sub_25B5BD26C((void **)&v1419, *(void **)(a1 + 264));
    unint64_t v339 = 0;
    float loga = v336 * -0.4;
    while (objc_msgSend_count(v1315, v337, v338) > v339)
    {
      objc_msgSend_objectAtIndexedSubscript_(v1315, v340, v339);
      v1309 = (float *)objc_claimAutoreleasedReturnValue();
      uint64_t v342 = *(uint64_t **)(a1 + 344);
      if (v342)
      {
        uint64_t v343 = 0;
        uint64_t v344 = 0;
        objd = 0;
        unint64_t v1355 = 0;
        double v345 = 0;
        double v346 = 0;
        do
        {
          float32x2_t v348 = (int *)v342[3];
          int v347 = (int *)v342[4];
          v1322 = v347;
          while (v348 != v347)
          {
            uint64_t v349 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v341, *v348);
            if (v349) {
              uint64_t v350 = v349[20];
            }
            else {
              uint64_t v350 = 0;
            }

            float32x2_t v352 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v351, v348[1]);
            if (v352) {
              uint64_t v353 = v352[20];
            }
            else {
              uint64_t v353 = 0;
            }

            if (v350 == v339 || v353 == v339)
            {
              if (v350 == v339) {
                id v354 = v348;
              }
              else {
                id v354 = v348 + 1;
              }
              if (v350 == v339) {
                int v355 = v348 + 1;
              }
              else {
                int v355 = v348;
              }
              uint64_t v356 = (float32x2_t *)((char *)__p[0] + 48 * *v354);
              uint64_t v357 = (char *)__p[0] + 48 * *v355;
              uint64_t v358 = *(void **)v357;
              unint64_t v359 = (void *)*((void *)v357 + 1);
              float32x2_t v361 = *v356;
              float32x2_t v360 = v356[1];
              *(float32x2_t *)v1413 = v361;
              *(float32x2_t *)&v1413[8] = v360;
              v1410 = v358;
              std::string __dst = v359;
              float32x2_t v362 = vmul_f32(vadd_f32(v361, v360), (float32x2_t)0x3F0000003F000000);
              float32x2_t v1334 = v362;
              switch(*((_DWORD *)v342 + 4))
              {
                case 3:
                  break;
                case 4:
                  float32x2_t v363 = vmla_f32(vmul_f32(vmla_f32(vmul_f32((float32x2_t)v359, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, (float32x2_t)v358), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v362);
                  float32x2_t v364 = vsub_f32(v360, v361);
                  float v365 = vaddv_f32(vmul_f32(vsub_f32(v363, v361), v364));
                  float v366 = vaddv_f32(vmul_f32(v364, v364));
                  if (v366 < 0.000001) {
                    float v366 = 0.000001;
                  }
                  float32x2_t v367 = vsub_f32(vmla_n_f32(v361, v364, v365 / v366), v363);
                  int32x2_t v368 = (int32x2_t)vmul_f32(v367, v367);
                  float32x2_t v369 = 0;
                  if (sqrtf(vaddv_f32((float32x2_t)v368)) >= 0.000001)
                  {
                    unsigned __int32 v370 = vadd_f32((float32x2_t)v368, (float32x2_t)vdup_lane_s32(v368, 1)).u32[0];
                    float32x2_t v371 = vrsqrte_f32((float32x2_t)v370);
                    float32x2_t v372 = vmul_f32(v371, vrsqrts_f32((float32x2_t)v370, vmul_f32(v371, v371)));
                    float32x2_t v369 = vmul_n_f32(v367, vmul_f32(v372, vrsqrts_f32((float32x2_t)v370, vmul_f32(v372, v372))).f32[0]);
                  }
                  float32x2_t v373 = vmla_f32(v363, v369, v335);
                  goto LABEL_406;
                case 5:
                  sub_25B40E03C((float **)buf, (float32x2_t *)v1413, (float32x2_t *)&v1410);
                  float v374 = *(float *)(a1 + 72);
                  if (**(float **)buf < v374) {
                    goto LABEL_392;
                  }
                  if (*(float *)(*(void *)buf + 4) >= v374)
                  {
                    float32x2_t v375 = v360;
                    if (*(float *)(*(void *)buf + 8) >= v374)
                    {
                      uint64_t v358 = v359;
                      float32x2_t v375 = v360;
                      if (*(float *)(*(void *)buf + 12) >= v374)
                      {
                        operator delete(*(void **)buf);
                        break;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v358 = v359;
LABEL_392:
                    float32x2_t v375 = v361;
                  }
                  float32x2_t v1334 = v375;
                  float32x2_t v376 = vmla_f32(vmul_f32((float32x2_t)v358, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v375);
                  float32x2_t v377 = vsub_f32(v360, v361);
                  float v378 = vaddv_f32(vmul_f32(vsub_f32(v376, v361), v377));
                  float v379 = vaddv_f32(vmul_f32(v377, v377));
                  if (v379 < 0.000001) {
                    float v379 = 0.000001;
                  }
                  float32x2_t v380 = vsub_f32(vmla_n_f32(v361, v377, v378 / v379), v376);
                  int32x2_t v381 = (int32x2_t)vmul_f32(v380, v380);
                  float32x2_t v382 = 0;
                  if (sqrtf(vaddv_f32((float32x2_t)v381)) >= 0.000001)
                  {
                    unsigned __int32 v383 = vadd_f32((float32x2_t)v381, (float32x2_t)vdup_lane_s32(v381, 1)).u32[0];
                    float32x2_t v384 = vrsqrte_f32((float32x2_t)v383);
                    float32x2_t v385 = vmul_f32(v384, vrsqrts_f32((float32x2_t)v383, vmul_f32(v384, v384)));
                    float32x2_t v382 = vmul_n_f32(v380, vmul_f32(v385, vrsqrts_f32((float32x2_t)v383, vmul_f32(v385, v385))).f32[0]);
                  }
                  float32x2_t v373 = vmla_f32(v376, v382, v335);
                  operator delete(*(void **)buf);
LABEL_406:
                  if ((unint64_t)v344 >= v1355)
                  {
                    uint64_t v409 = v344 - v343;
                    unint64_t v410 = v409 + 1;
                    if ((unint64_t)(v409 + 1) >> 62) {
                      goto LABEL_808;
                    }
                    if ((uint64_t)(v1355 - (void)v343) >> 1 > v410) {
                      unint64_t v410 = (uint64_t)(v1355 - (void)v343) >> 1;
                    }
                    if (v1355 - (unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v411 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v411 = v410;
                    }
                    if (v411) {
                      unint64_t v411 = (unint64_t)sub_25B3FBC64(v411);
                    }
                    else {
                      unint64_t v341 = 0;
                    }
                    int v412 = (float *)(v411 + 4 * v409);
                    *int v412 = 0.0;
                    int32x2_t v408 = v412 + 1;
                    while (v344 != v343)
                    {
                      int v413 = *((_DWORD *)v344-- - 1);
                      *((_DWORD *)v412-- - 1) = v413;
                    }
                    unint64_t v1355 = v411 + 4 * (void)v341;
                    if (v343) {
                      operator delete(v343);
                    }
                    uint64_t v343 = v412;
                  }
                  else
                  {
                    float *v344 = 0.0;
                    int32x2_t v408 = v344 + 1;
                  }
                  float32x2_t v414 = vsub_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)0x800000003F800000, v1334.f32[0]), (float32x2_t)0x3F80000000000000, v1334, 1), v373);
                  if (v346 >= objd)
                  {
                    uint64_t v416 = v346 - v345;
                    unint64_t v417 = v416 + 1;
                    if ((unint64_t)(v416 + 1) >> 61) {
                      goto LABEL_809;
                    }
                    if (((char *)objd - (char *)v345) >> 2 > v417) {
                      unint64_t v417 = ((char *)objd - (char *)v345) >> 2;
                    }
                    if ((unint64_t)((char *)objd - (char *)v345) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v418 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v418 = v417;
                    }
                    if (v418) {
                      unint64_t v418 = (unint64_t)sub_25B3FCAD4(v418);
                    }
                    else {
                      unint64_t v341 = 0;
                    }
                    unint64_t v419 = (float32x2_t *)(v418 + 8 * v416);
                    *unint64_t v419 = v414;
                    float32x2_t v415 = v419 + 1;
                    while (v346 != v345)
                    {
                      float32x2_t v420 = v346[-1];
                      --v346;
                      v419[-1] = v420;
                      --v419;
                    }
                    objd = (float32x2_t *)(v418 + 8 * (void)v341);
                    if (v345) {
                      operator delete(v345);
                    }
                    double v345 = v419;
                  }
                  else
                  {
                    *double v346 = v414;
                    float32x2_t v415 = v346 + 1;
                  }
                  if (*((_DWORD *)v342 + 4) != 4)
                  {
                    uint64_t v344 = v408;
LABEL_461:
                    double v346 = v415;
                    break;
                  }
                  if ((unint64_t)v408 >= v1355)
                  {
                    uint64_t v421 = v408 - v343;
                    unint64_t v422 = v421 + 1;
                    if ((unint64_t)(v421 + 1) >> 62) {
LABEL_808:
                    }
                      sub_25B3FBC4C();
                    if ((uint64_t)(v1355 - (void)v343) >> 1 > v422) {
                      unint64_t v422 = (uint64_t)(v1355 - (void)v343) >> 1;
                    }
                    if (v1355 - (unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v423 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v423 = v422;
                    }
                    if (v423) {
                      unint64_t v423 = (unint64_t)sub_25B3FBC64(v423);
                    }
                    else {
                      unint64_t v341 = 0;
                    }
                    uint64_t v424 = (float *)(v423 + 4 * v421);
                    float *v424 = 0.0;
                    uint64_t v344 = v424 + 1;
                    while (v408 != v343)
                    {
                      int v425 = *((_DWORD *)v408-- - 1);
                      *((_DWORD *)v424-- - 1) = v425;
                    }
                    unint64_t v1355 = v423 + 4 * (void)v341;
                    if (v343) {
                      operator delete(v343);
                    }
                    uint64_t v343 = v424;
                  }
                  else
                  {
                    *int32x2_t v408 = 0.0;
                    uint64_t v344 = v408 + 1;
                  }
                  if (v415 < objd)
                  {
                    *v415++ = v414;
                    goto LABEL_461;
                  }
                  uint64_t v426 = v415 - v345;
                  unint64_t v427 = v426 + 1;
                  if ((unint64_t)(v426 + 1) >> 61) {
LABEL_809:
                  }
                    sub_25B3FBC4C();
                  if (((char *)objd - (char *)v345) >> 2 > v427) {
                    unint64_t v427 = ((char *)objd - (char *)v345) >> 2;
                  }
                  if ((unint64_t)((char *)objd - (char *)v345) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v428 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v428 = v427;
                  }
                  if (v428) {
                    unint64_t v428 = (unint64_t)sub_25B3FCAD4(v428);
                  }
                  else {
                    unint64_t v341 = 0;
                  }
                  uint64_t v429 = (float32x2_t *)(v428 + 8 * v426);
                  float32x2_t *v429 = v414;
                  double v346 = v429 + 1;
                  while (v415 != v345)
                  {
                    float32x2_t v430 = v415[-1];
                    --v415;
                    v429[-1] = v430;
                    --v429;
                  }
                  objd = (float32x2_t *)(v428 + 8 * (void)v341);
                  if (v345) {
                    operator delete(v345);
                  }
                  double v345 = v429;
                  break;
                case 6:
                  float32x2_t v386 = vsub_f32((float32x2_t)v359, (float32x2_t)v358);
                  float v387 = vaddv_f32(vmul_f32(vsub_f32(v361, (float32x2_t)v358), v386));
                  float v388 = vaddv_f32(vmul_f32(v386, v386));
                  if (v388 < 0.000001) {
                    float v388 = 0.000001;
                  }
                  float32x2_t v389 = vmla_n_f32((float32x2_t)v358, v386, v387 / v388);
                  float32x2_t v390 = vsub_f32(v389, (float32x2_t)v358);
                  float32x2_t v391 = vsub_f32(v389, (float32x2_t)v359);
                  float32x2_t v392 = v389;
                  if (vaddv_f32(vmul_f32(v390, v391)) > 0.00001)
                  {
                    int32x2_t v393 = (int32x2_t)vmul_f32(v390, v390);
                    int32x2_t v394 = (int32x2_t)vmul_f32(v391, v391);
                    int32x2_t v395 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v393, v394), (float32x2_t)vzip2_s32(v393, v394)));
                    float32x2_t v392 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v395, 1), (float32x2_t)v395)), 0), (int8x8_t)v359, (int8x8_t)v358);
                  }
                  float32x2_t v396 = vmla_n_f32((float32x2_t)v358, v386, vaddv_f32(vmul_f32(vsub_f32(v360, (float32x2_t)v358), v386)) / v388);
                  float32x2_t v397 = vsub_f32(v396, (float32x2_t)v358);
                  float32x2_t v398 = vsub_f32(v396, (float32x2_t)v359);
                  float32x2_t v399 = v396;
                  if (vaddv_f32(vmul_f32(v397, v398)) > 0.00001)
                  {
                    int32x2_t v400 = (int32x2_t)vmul_f32(v397, v397);
                    int32x2_t v401 = (int32x2_t)vmul_f32(v398, v398);
                    float32x2_t v398 = (float32x2_t)vzip1_s32(v400, v401);
                    int32x2_t v402 = (int32x2_t)vsqrt_f32(vadd_f32(v398, (float32x2_t)vzip2_s32(v400, v401)));
                    float32x2_t v399 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v402, 1), (float32x2_t)v402)), 0), (int8x8_t)v359, (int8x8_t)v358);
                  }
                  float32x2_t v403 = vsub_f32(v389, v392);
                  float32x2_t v404 = vmul_f32(v403, v403);
                  v404.f32[0] = sqrtf(vaddv_f32(v404));
                  v398.i32[0] = *(_DWORD *)(a1 + 72);
                  float32x2_t v405 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v398, v404)), 0), (int8x8_t)v389, (int8x8_t)v392), v389);
                  float32x2_t v406 = vsub_f32(v396, v399);
                  float32x2_t v407 = vmul_f32(v406, v406);
                  v407.f32[0] = sqrtf(vaddv_f32(v407));
                  float32x2_t v373 = vadd_f32(vadd_f32(vmul_f32(vadd_f32(v389, v396), (float32x2_t)0x3F0000003F000000), v405), vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v398, v407)), 0), (int8x8_t)v396, (int8x8_t)v399), v396));
                  goto LABEL_406;
                default:
                  float32x2_t v373 = v362;
                  goto LABEL_406;
              }
            }
            v348 += 2;
            int v347 = v1322;
          }
          uint64_t v342 = (uint64_t *)*v342;
        }
        while (v342);
      }
      else
      {
        uint64_t v343 = 0;
        uint64_t v344 = 0;
        objd = 0;
        unint64_t v1355 = 0;
        double v345 = 0;
        double v346 = 0;
      }
      unint64_t v431 = *(uint64_t **)(a1 + 384);
      if (!v431) {
        goto LABEL_584;
      }
      do
      {
        uint64_t v433 = (int *)v431[3];
        float32x2_t v432 = (int *)v431[4];
        v1323 = v432;
        while (v433 != v432)
        {
          size_t v434 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 264), v341, *v433);
          if (v434) {
            uint64_t v435 = v434[20];
          }
          else {
            uint64_t v435 = 0;
          }

          float32x2_t v437 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 264), v436, v433[1]);
          if (v437) {
            uint64_t v438 = v437[20];
          }
          else {
            uint64_t v438 = 0;
          }

          if (v435 == v339 || v438 == v339)
          {
            if (v435 == v339) {
              uint64_t v439 = v433;
            }
            else {
              uint64_t v439 = v433 + 1;
            }
            unint64_t v440 = (float32x2_t *)(v1419 + 48 * *v439);
            float32x2_t v442 = *v440;
            float32x2_t v441 = v440[1];
            float32x2_t v443 = vmul_f32(vadd_f32(*v440, v441), (float32x2_t)0x3F0000003F000000);
            float32x2_t v1335 = v443;
            float32x2_t v444 = v443;
            if (*((_DWORD *)v431 + 4) == 4)
            {
              if (v435 == v339) {
                float32x4_t v445 = v433 + 1;
              }
              else {
                float32x4_t v445 = v433;
              }
              float32x2_t v446 = vmla_f32(vmul_f32(vmla_f32(vmul_f32(*(float32x2_t *)(v1419 + 48 * *v445 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(v1419 + 48 * *v445)), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v443);
              float32x2_t v447 = vsub_f32(v441, v442);
              float v448 = vaddv_f32(vmul_f32(vsub_f32(v446, v442), v447));
              float v449 = vaddv_f32(vmul_f32(v447, v447));
              if (v449 < 0.000001) {
                float v449 = 0.000001;
              }
              float32x2_t v450 = vmla_n_f32(v442, v447, v448 / v449);
              float32x2_t v451 = vsub_f32(v450, v442);
              float32x2_t v452 = vsub_f32(v450, v441);
              if (vaddv_f32(vmul_f32(v451, v452)) > 0.00001)
              {
                int32x2_t v453 = (int32x2_t)vmul_f32(v451, v451);
                int32x2_t v454 = (int32x2_t)vmul_f32(v452, v452);
                int32x2_t v455 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v453, v454), (float32x2_t)vzip2_s32(v453, v454)));
                float32x2_t v450 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v455, 1), (float32x2_t)v455)), 0), (int8x8_t)v441, (int8x8_t)v442);
              }
              float32x2_t v456 = vsub_f32(v450, v446);
              int32x2_t v457 = (int32x2_t)vmul_f32(v456, v456);
              float32x2_t v458 = 0;
              if (sqrtf(vaddv_f32((float32x2_t)v457)) >= 0.000001)
              {
                unsigned __int32 v459 = vadd_f32((float32x2_t)v457, (float32x2_t)vdup_lane_s32(v457, 1)).u32[0];
                float32x2_t v460 = vrsqrte_f32((float32x2_t)v459);
                float32x2_t v461 = vmul_f32(v460, vrsqrts_f32((float32x2_t)v459, vmul_f32(v460, v460)));
                float32x2_t v458 = vmul_n_f32(v456, vmul_f32(v461, vrsqrts_f32((float32x2_t)v459, vmul_f32(v461, v461))).f32[0]);
              }
              float32x2_t v444 = vmla_f32(v446, v458, v335);
            }
            if ((unint64_t)v344 >= v1355)
            {
              uint64_t v463 = v344 - v343;
              unint64_t v464 = v463 + 1;
              if ((unint64_t)(v463 + 1) >> 62) {
                goto LABEL_807;
              }
              if ((uint64_t)(v1355 - (void)v343) >> 1 > v464) {
                unint64_t v464 = (uint64_t)(v1355 - (void)v343) >> 1;
              }
              if (v1355 - (unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v465 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v465 = v464;
              }
              if (v465) {
                unint64_t v465 = (unint64_t)sub_25B3FBC64(v465);
              }
              else {
                unint64_t v341 = 0;
              }
              uint64_t v466 = (float *)(v465 + 4 * v463);
              *uint64_t v466 = 0.0;
              float32x2_t v462 = v466 + 1;
              while (v344 != v343)
              {
                int v467 = *((_DWORD *)v344-- - 1);
                *((_DWORD *)v466-- - 1) = v467;
              }
              unint64_t v1355 = v465 + 4 * (void)v341;
              if (v343) {
                operator delete(v343);
              }
              uint64_t v343 = v466;
            }
            else
            {
              float *v344 = 0.0;
              float32x2_t v462 = v344 + 1;
            }
            float32x2_t v468 = vsub_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)0x800000003F800000, v1335.f32[0]), (float32x2_t)0x3F80000000000000, v1335, 1), v444);
            if (v346 >= objd)
            {
              uint64_t v470 = v346 - v345;
              unint64_t v471 = v470 + 1;
              if ((unint64_t)(v470 + 1) >> 61) {
                goto LABEL_806;
              }
              if (((char *)objd - (char *)v345) >> 2 > v471) {
                unint64_t v471 = ((char *)objd - (char *)v345) >> 2;
              }
              if ((unint64_t)((char *)objd - (char *)v345) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v472 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v472 = v471;
              }
              if (v472) {
                unint64_t v472 = (unint64_t)sub_25B3FCAD4(v472);
              }
              else {
                unint64_t v341 = 0;
              }
              int v473 = (float32x2_t *)(v472 + 8 * v470);
              *int v473 = v468;
              size_t v469 = v473 + 1;
              while (v346 != v345)
              {
                float32x2_t v474 = v346[-1];
                --v346;
                v473[-1] = v474;
                --v473;
              }
              objd = (float32x2_t *)(v472 + 8 * (void)v341);
              if (v345) {
                operator delete(v345);
              }
              double v345 = v473;
            }
            else
            {
              *double v346 = v468;
              size_t v469 = v346 + 1;
            }
            if (*((_DWORD *)v431 + 4) != 4)
            {
              uint64_t v344 = v462;
LABEL_564:
              double v346 = v469;
              goto LABEL_580;
            }
            if ((unint64_t)v462 >= v1355)
            {
              uint64_t v475 = v462 - v343;
              unint64_t v476 = v475 + 1;
              if ((unint64_t)(v475 + 1) >> 62) {
LABEL_807:
              }
                sub_25B3FBC4C();
              if ((uint64_t)(v1355 - (void)v343) >> 1 > v476) {
                unint64_t v476 = (uint64_t)(v1355 - (void)v343) >> 1;
              }
              if (v1355 - (unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v477 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v477 = v476;
              }
              if (v477) {
                unint64_t v477 = (unint64_t)sub_25B3FBC64(v477);
              }
              else {
                unint64_t v341 = 0;
              }
              uint64_t v478 = (float *)(v477 + 4 * v475);
              float *v478 = 0.0;
              uint64_t v344 = v478 + 1;
              while (v462 != v343)
              {
                int v479 = *((_DWORD *)v462-- - 1);
                *((_DWORD *)v478-- - 1) = v479;
              }
              unint64_t v1355 = v477 + 4 * (void)v341;
              if (v343) {
                operator delete(v343);
              }
              uint64_t v343 = v478;
            }
            else
            {
              *float32x2_t v462 = 0.0;
              uint64_t v344 = v462 + 1;
            }
            if (v469 < objd)
            {
              *v469++ = v468;
              goto LABEL_564;
            }
            uint64_t v480 = v469 - v345;
            unint64_t v481 = v480 + 1;
            if ((unint64_t)(v480 + 1) >> 61) {
LABEL_806:
            }
              sub_25B3FBC4C();
            if (((char *)objd - (char *)v345) >> 2 > v481) {
              unint64_t v481 = ((char *)objd - (char *)v345) >> 2;
            }
            if ((unint64_t)((char *)objd - (char *)v345) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v482 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v482 = v481;
            }
            if (v482) {
              unint64_t v482 = (unint64_t)sub_25B3FCAD4(v482);
            }
            else {
              unint64_t v341 = 0;
            }
            long long v483 = (float32x2_t *)(v482 + 8 * v480);
            *long long v483 = v468;
            double v346 = v483 + 1;
            while (v469 != v345)
            {
              float32x2_t v484 = v469[-1];
              --v469;
              v483[-1] = v484;
              --v483;
            }
            objd = (float32x2_t *)(v482 + 8 * (void)v341);
            if (v345) {
              operator delete(v345);
            }
            double v345 = v483;
          }
LABEL_580:
          v433 += 2;
          float32x2_t v432 = v1323;
        }
        unint64_t v431 = (uint64_t *)*v431;
      }
      while (v431);
LABEL_584:
      if (v344 == v343)
      {
        float v491 = 0.0;
        float32x2_t v493 = 0;
      }
      else
      {
        float v485 = 0.0;
        unint64_t v486 = v343;
        do
        {
          float v487 = *v486++;
          float v485 = v485 + v487;
        }
        while (v486 != v344);
        int32x2_t v488 = 0;
        if (v345 != v346)
        {
          int v489 = v345;
          do
          {
            float32x2_t v490 = *v489++;
            int32x2_t v488 = (int32x2_t)vadd_f32((float32x2_t)v488, v490);
          }
          while (v489 != v346);
        }
        float v491 = (float)(v485 * loga) / (float)(unint64_t)(v344 - v343);
        float32x2_t v492 = vmul_n_f32((float32x2_t)v488, loga);
        *(float *)v488.i32 = (float)(unint64_t)(v346 - v345);
        float32x2_t v493 = vdiv_f32(v492, (float32x2_t)vdup_lane_s32(v488, 0));
      }
      float32x2_t v1356 = v493;
      if (v345) {
        operator delete(v345);
      }
      if (v343) {
        operator delete(v343);
      }
      if (v1309)
      {
        v1309[5] = v491;
        *(_OWORD *)buf = (unint64_t)v1356;
        objc_copyStruct(v1309 + 32, buf, 16, 1, 0);
      }

      ++v339;
    }
    id v494 = v1315;
    memset(v1413, 0, 64);
    id obje = v494;
    uint64_t v496 = objc_msgSend_countByEnumeratingWithState_objects_count_(obje, v495, (uint64_t)v1413, buf, 16);
    if (v496)
    {
      uint64_t v497 = **(void **)&v1413[16];
      do
      {
        for (munint64_t m = 0; mm != v496; ++mm)
        {
          if (**(void **)&v1413[16] != v497) {
            objc_enumerationMutation(obje);
          }
          sub_25B4EBF6C(*(void *)(*(void *)&v1413[8] + 8 * mm));
        }
        uint64_t v496 = objc_msgSend_countByEnumeratingWithState_objects_count_(obje, v499, (uint64_t)v1413, buf, 16);
      }
      while (v496);
    }

    if ((void)v1419) {
      operator delete((void *)v1419);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    int v333 = v1295 + 1;
  }
  while (v1295 != 9);

  sub_25B5B38D8((void *)a1, obje);
  objc_msgSend_array(MEMORY[0x263EFF980], v500, v501);
  id v1294 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v502 = *(void *)(a1 + 624);
  uint64_t v503 = *(void *)(a1 + 616);
  sub_25B5B7BC4(&v1390, 0xCCCCCCCCCCCCCCCDLL * ((v502 - v503) >> 3));
  uint64_t v504 = *(void *)(a1 + 448);
  uint64_t v505 = *(void *)(a1 + 456);
  if (v504 != v505)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v502 - v503) >> 3) <= 1) {
      unint64_t v506 = 1;
    }
    else {
      unint64_t v506 = 0xCCCCCCCCCCCCCCCDLL * ((v502 - v503) >> 3);
    }
    do
    {
      if (v502 != v503)
      {
        uint64_t v507 = 0;
        uint64_t v508 = 0;
        unint64_t v509 = v506;
        do
        {
          uint64_t v510 = (void *)(*(void *)(a1 + 616) + v507);
          if (sub_25B3FAE64(v510, *(_DWORD *)v504) || sub_25B3FAE64(v510, *(_DWORD *)(v504 + 4))) {
            sub_25B5B7C90((char **)(v1390 + v508), (uint64_t *)v504);
          }
          v508 += 24;
          v507 += 40;
          --v509;
        }
        while (v509);
      }
      v504 += 12;
    }
    while (v504 != v505);
  }
  unint64_t v511 = (char *)*((void *)&v1390 + 1);
  v1289 = (char *)*((void *)&v1390 + 1);
  int v512 = (char *)v1390;
  while (2)
  {
    if (v512 != v511)
    {
      *(_OWORD *)long long __p = 0u;
      long long v1424 = 0u;
      LODWORD(v1425) = 1065353216;
      unint64_t v513 = *(int **)v512;
      uint64_t v514 = (int *)*((void *)v512 + 1);
      if (*(int **)v512 == v514)
      {
        size_t v515 = 0;
        unint64_t v516 = 0;
        float32x4_t src = 0uLL;
        *(void *)&long long v1384 = 0;
      }
      else
      {
        do
        {
          sub_25B3FAF64((uint64_t)__p, *v513, *v513);
          sub_25B3FAF64((uint64_t)__p, v513[1], v513[1]);
          v513 += 3;
        }
        while (v513 != v514);
        size_t v515 = (uint64_t *)v1424;
        float32x4_t src = 0uLL;
        *(void *)&long long v1384 = 0;
        unint64_t v516 = 0;
        if ((void)v1424)
        {
          uint64_t v517 = (void *)v1424;
          do
          {
            ++v516;
            uint64_t v517 = (void *)*v517;
          }
          while (v517);
        }
      }
      v1296 = v512;
      sub_25B5B7DF0((char *)&src, v515, v516);
      id logb = v1294;
      size_t v519 = (int *)src.i64[1];
      std::string v520 = (int *)src.i64[0];
      if (src.i64[1] - src.i64[0] < 8uLL) {
        goto LABEL_749;
      }
      long long v1419 = 0uLL;
      *(void *)&long long v1420 = 0;
      memset(buf, 0, sizeof(buf));
      LODWORD(v1395) = 1065353216;
      memset(v1413, 0, 32);
      *(_DWORD *)&v1413[32] = 1065353216;
      if (src.i64[0] == src.i64[1])
      {
        uint64_t v558 = 0;
        unint64_t v557 = 0;
        uint64_t v521 = 0;
      }
      else
      {
        uint64_t v521 = 0;
        v1316 = 0;
        unint64_t v522 = 0;
        do
        {
          int v523 = *v520;
          uint64_t v524 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v518, *v520);
          float32x2_t v525 = (float32x2_t)sub_25B477C40(v524).n128_u64[0];
          float32x2_t v527 = v526;
          objc_msgSend_quad(v524, v528, v529);
          int v1359 = v530;
          objc_msgSend_quad(v524, v531, v532);
          int v1344 = v533;
          unint64_t v534 = (float *)operator new(0x18uLL);
          v1412 = (char *)(v534 + 6);
          *(float32x2_t *)unint64_t v534 = v525;
          v534[2] = (float)v523;
          v534[3] = 0.0;
          *((_DWORD *)v534 + 4) = v1359;
          *((_DWORD *)v534 + 5) = v1344;
          v1410 = v534;
          std::string __dst = v534 + 6;
          float32x2_t v535 = (float *)operator new(0x18uLL);
          *(void *)&long long v1407 = v535 + 6;
          *(float32x2_t *)float32x2_t v535 = v527;
          v535[2] = (float)v523;
          v535[3] = 1.0;
          *((_DWORD *)v535 + 4) = v1359;
          *((_DWORD *)v535 + 5) = v1344;
          *(void *)&long long v1406 = v535;
          *((void *)&v1406 + 1) = v535 + 6;
          double v536 = (void *)*((void *)&v1419 + 1);
          if (*((void *)&v1419 + 1) >= (unint64_t)v1420)
          {
            uint64_t v537 = (void *)sub_25B52B488(&v1419, (uint64_t)&v1410);
          }
          else
          {
            **((void **)&v1419 + 1) = 0;
            v536[1] = 0;
            v536[2] = 0;
            sub_25B3FCA58(v536, v534, (uint64_t)(v534 + 6), 6uLL);
            uint64_t v537 = v536 + 3;
          }
          *((void *)&v1419 + 1) = v537;
          if ((unint64_t)v537 >= (unint64_t)v1420)
          {
            uint64_t v538 = sub_25B52B488(&v1419, (uint64_t)&v1406);
          }
          else
          {
            *uint64_t v537 = 0;
            v537[1] = 0;
            v537[2] = 0;
            sub_25B3FCA58(v537, v535, (uint64_t)(v535 + 6), 6uLL);
            uint64_t v538 = (uint64_t)(v537 + 3);
          }
          *((void *)&v1419 + 1) = v538;
          uint32x2_t v539 = (uint32x2_t)vceq_f32(v525, v527);
          if ((vpmin_u32(v539, v539).u32[0] & 0x80000000) != 0) {
            goto LABEL_661;
          }
          float32x2_t v540 = vsub_f32((float32x2_t)vext_s8((int8x8_t)v527, (int8x8_t)v525, 4uLL), (float32x2_t)vext_s8((int8x8_t)v525, (int8x8_t)v527, 4uLL));
          int32x2_t v541 = (int32x2_t)vmul_f32(v540, v540);
          v541.i32[0] = vadd_f32((float32x2_t)v541, (float32x2_t)vdup_lane_s32(v541, 1)).u32[0];
          float32x2_t v542 = vrsqrte_f32((float32x2_t)v541.u32[0]);
          float32x2_t v543 = vmul_f32(v542, vrsqrts_f32((float32x2_t)v541.u32[0], vmul_f32(v542, v542)));
          float32x2_t v544 = vmul_n_f32(v540, vmul_f32(v543, vrsqrts_f32((float32x2_t)v541.u32[0], vmul_f32(v543, v543))).f32[0]);
          int32x2_t v545 = (int32x2_t)vneg_f32(v544);
          int32x2_t v546 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v544.f32[0] < 0.0), 0x1FuLL)), (int8x8_t)v545, (int8x8_t)v544);
          *(float *)v545.i32 = -*(float *)&v546.i32[1];
          int32x2_t v547 = vzip1_s32(v545, v546);
          if ((unint64_t)v521 >= v522)
          {
            uint64_t v549 = v521 - v1316;
            unint64_t v550 = v549 + 1;
            if ((unint64_t)(v549 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v522 - (void)v1316) >> 2 > v550) {
              unint64_t v550 = (uint64_t)(v522 - (void)v1316) >> 2;
            }
            if (v522 - (unint64_t)v1316 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v551 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v551 = v550;
            }
            if (v551) {
              unint64_t v551 = (unint64_t)sub_25B3FCAD4(v551);
            }
            else {
              uint64_t v552 = 0;
            }
            uint64_t v553 = (int32x2_t *)(v551 + 8 * v549);
            *uint64_t v553 = v547;
            char v548 = v553 + 1;
            if (v521 == v1316)
            {
              int v554 = v1316;
            }
            else
            {
              int v554 = v1316;
              do
              {
                int32x2_t v555 = v521[-1];
                --v521;
                v553[-1] = v555;
                --v553;
              }
              while (v521 != v1316);
            }
            unint64_t v522 = v551 + 8 * v552;
            if (v554) {
              operator delete(v554);
            }
            v1316 = v553;
          }
          else
          {
            *uint64_t v521 = v547;
            char v548 = v521 + 1;
          }
          float32x2_t v535 = (float *)v1406;
          uint64_t v521 = v548;
          if ((void)v1406) {
LABEL_661:
          }
            operator delete(v535);
          if (v1410) {
            operator delete(v1410);
          }

          ++v520;
        }
        while (v520 != v519);
        uint64_t v558 = (float **)*((void *)&v1419 + 1);
        unint64_t v557 = v1419;
        if (v521 != v1316)
        {
          float32x2_t v559 = 0;
          *(void *)&long long v1406 = 0;
          float32x2_t v560 = 0;
          if ((void)v1419 != *((void *)&v1419 + 1))
          {
            uint64_t v561 = (float32x2_t **)v1419;
            do
            {
              float32x2_t v562 = *v561;
              v561 += 3;
              int32x2_t v556 = (int32x2_t)*v562;
              float32x2_t v560 = vadd_f32(v560, *v562);
              *(float32x2_t *)&long long v1406 = v560;
            }
            while (v561 != *((float32x2_t ***)&v1419 + 1));
          }
          unint64_t v563 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1419 + 1) - v1419) >> 3);
          *(float *)v556.i32 = (float)v563;
          *(float32x2_t *)&long long v1406 = vdiv_f32(v560, (float32x2_t)vdup_lane_s32(v556, 0));
          v1379.i64[0] = 0;
          uint64_t v564 = (float32x2_t *)v1316;
          do
          {
            float32x2_t v565 = *v564++;
            v566.i32[1] = v565.i32[1];
            float32x2_t v559 = vadd_f32(v565, v559);
            *(float32x2_t *)v1379.uint64_t i8 = v559;
          }
          while (v564 != (float32x2_t *)v521);
          *(float *)v566.i32 = (float)(unint64_t)(v521 - v1316);
          float32x2_t v567 = vdiv_f32(v559, (float32x2_t)vdup_lane_s32(v566, 0));
          int32x2_t v568 = (int32x2_t)vmul_f32(v567, v567);
          v568.i32[0] = vadd_f32((float32x2_t)v568, (float32x2_t)vdup_lane_s32(v568, 1)).u32[0];
          float32x2_t v569 = vrsqrte_f32((float32x2_t)v568.u32[0]);
          float32x2_t v570 = vmul_f32(v569, vrsqrts_f32((float32x2_t)v568.u32[0], vmul_f32(v569, v569)));
          *(float32x2_t *)v1379.uint64_t i8 = vmul_n_f32(v567, vmul_f32(v570, vrsqrts_f32((float32x2_t)v568.u32[0], vmul_f32(v570, v570))).f32[0]);
          v1410 = &v1406;
          std::string __dst = &v1379;
          unint64_t v571 = 126 - 2 * __clz(v563);
          if ((void)v1419 == *((void *)&v1419 + 1)) {
            uint64_t v572 = 0;
          }
          else {
            uint64_t v572 = v571;
          }
          sub_25B5BA5F0(v1419, *((unint64_t *)&v1419 + 1), (float32x2_t **)&v1410, v572, 1);
LABEL_680:
          uint64_t v575 = v1419;
          if (*((void *)&v1419 + 1) != (void)v1419)
          {
            long long v576 = 0;
            long long v577 = 0;
            unint64_t v1336 = 0;
            unint64_t v578 = 0;
            float v580 = *(float *)(*(void *)v1419 + 16);
            float v579 = *(float *)(*(void *)v1419 + 20);
            unint64_t v581 = **(void **)v1419;
            while (1)
            {
              unint64_t v1357 = v578;
              std::string __dst = 0;
              v1410 = 0;
              v1412 = 0;
              sub_25B3FCA58(&v1410, *(const void **)(v575 + 24 * v578), *(void *)(v575 + 24 * v578 + 8), (uint64_t)(*(void *)(v575 + 24 * v578 + 8) - *(void *)(v575 + 24 * v578)) >> 2);
              float v583 = *((float *)v1410 + 4);
              float v582 = *((float *)v1410 + 5);
              int v585 = *((_DWORD *)v1410 + 2);
              int v584 = *((_DWORD *)v1410 + 3);
              if ((unint64_t)v577 >= v1336)
              {
                uint64_t v586 = ((char *)v577 - (char *)v576) >> 3;
                unint64_t v587 = v586 + 1;
                if ((unint64_t)(v586 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v1336 - (void)v576) >> 2 > v587) {
                  unint64_t v587 = (uint64_t)(v1336 - (void)v576) >> 2;
                }
                if (v1336 - (unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v588 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v588 = v587;
                }
                if (v588) {
                  unint64_t v588 = (unint64_t)sub_25B3FCAD4(v588);
                }
                else {
                  uint64_t v589 = 0;
                }
                uint64_t v590 = (_DWORD *)(v588 + 8 * v586);
                *uint64_t v590 = v585;
                v590[1] = v584;
                uint64_t v591 = v590;
                while (v577 != v576)
                {
                  uint64_t v592 = *((void *)v577 - 1);
                  v577 -= 2;
                  *((void *)v591 - 1) = v592;
                  v591 -= 2;
                }
                unint64_t v1336 = v588 + 8 * v589;
                long long v577 = (float *)(v590 + 2);
                if (v576) {
                  operator delete(v576);
                }
                long long v576 = (float *)v591;
              }
              else
              {
                *(_DWORD *)long long v577 = v585;
                *((_DWORD *)v577 + 1) = v584;
                v577 += 2;
              }
              int v593 = (unint64_t *)v1410;
              int v594 = (int)*((float *)v1410 + 2);
              uint64_t v595 = sub_25B3FAE64(buf, v594);
              unint64_t v596 = sub_25B3FAE64(v1413, v594);
              if (v595)
              {
                if (!v596)
                {
                  sub_25B473798(buf, v594);
                  int v597 = v1413;
LABEL_704:
                  sub_25B3FAF64((uint64_t)v597, v594, v594);
                }
              }
              else if (!v596)
              {
                int v597 = buf;
                goto LABEL_704;
              }
              float v579 = fmaxf(v579, v582);
              float v580 = fminf(v580, v583);
              if (*(void *)&buf[24] || !*(void *)&v1413[24]) {
                goto LABEL_742;
              }
              v1324 = v593;
              id v599 = objc_alloc_init(MEMORY[0x263EFF980]);
              unint64_t v600 = *(uint64_t ***)&v1413[16];
              if (*(void *)&v1413[16])
              {
                float v601 = 0.0;
                int v602 = -1;
                do
                {
                  uint64_t v603 = *((int *)v600 + 4);
                  uint64_t v604 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v598, v603);
                  if (v604 && *(float *)(*(void *)(a1 + 304) + 4 * v603) >= v601)
                  {
                    float v601 = *(float *)(*(void *)(a1 + 304) + 4 * v603);
                    int v602 = v603;
                  }

                  unint64_t v600 = (uint64_t **)*v600;
                }
                while (v600);
              }
              else
              {
                int v602 = -1;
              }
              *(_OWORD *)v1310 = *(_OWORD *)(*(void *)(a1 + 280) + 16 * v602);
              unint64_t v605 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v598, v602);
              BOOL v608 = (float *)objc_msgSend_copy(v605, v606, v607);

              vDSP_Length v609 = objc_opt_new();
              sub_25B4FD4F4((uint64_t)v608, v609);

              unint64_t v612 = *v1324;
              int32x2_t v613 = *(uint64_t ***)&v1413[16];
              if (*(void *)&v1413[16])
              {
                do
                {
                  if (v608) {
                    float v614 = v608[33];
                  }
                  else {
                    float v614 = 0.0;
                  }
                  uint64_t v615 = *((int *)v613 + 4);
                  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v610, v615);
                  double v616 = (float *)objc_claimAutoreleasedReturnValue();
                  if (v616)
                  {
                    float v617 = v616[33];
                    if (v608) {
                      goto LABEL_720;
                    }
                  }
                  else
                  {
                    float v617 = 0.0;
                    if (v608)
                    {
LABEL_720:
                      if (v614 >= v617) {
                        float v617 = v614;
                      }
                      v608[33] = v617;
                    }
                  }

                  uint64_t v620 = objc_msgSend_identifier(v608, v618, v619);
                  BOOL v621 = *(void **)(a1 + 640);
                  uint64_t v623 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v622, v615);
                  int v626 = objc_msgSend_identifier(v623, v624, v625);
                  objc_msgSend_setObject_forKeyedSubscript_(v621, v627, (uint64_t)v620, v626);

                  uint64_t v629 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v628, v615);
                  objc_msgSend_addObject_(v599, v630, (uint64_t)v629);

                  int32x2_t v613 = (uint64_t **)*v613;
                }
                while (v613);
              }
              int v631 = *(void **)(a1 + 648);
              uint64_t v632 = objc_msgSend_identifier(v608, v610, v611);
              objc_msgSend_setObject_forKeyedSubscript_(v631, v633, (uint64_t)v599, v632);

              v634.n128_u64[0] = v581;
              v635.n128_u64[0] = v612;
              sub_25B5B8AD4(v608, v634, v635, v580, v579);
              *(double *)v636.i64 = sub_25B5BC1AC(v608);
              float32x4_t v637 = vmulq_f32(*(float32x4_t *)v1310, v636);
              __n128 v638 = (__n128)vaddq_f32(v637, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v637.f32, 1));
              __n128 v639 = (__n128)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v637, 2), (float32x4_t)v638);
              if (v639.n128_f32[0] < 0.0)
              {
                v639.n128_u64[0] = v612;
                v638.n128_u64[0] = v581;
                sub_25B5B8AD4(v608, v639, v638, v580, v579);
              }
              sub_25B5B8C6C(v608);
              objc_msgSend_addObject_(logb, v640, (uint64_t)v608);
              for (nunint64_t n = v576; nn != v577; nn += 2)
              {
                uint64_t v643 = (int)*nn;
                long long v644 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v641, v643);
                sub_25B5B8B80(a1, v644, v580, v579);

                long long v646 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), v645, v643);
                sub_25B5B8C6C(v646);
              }
              if (*(void *)&v1413[24])
              {
                long long v647 = *(void **)&v1413[16];
                if (*(void *)&v1413[16])
                {
                  do
                  {
                    uint64_t v648 = (void *)*v647;
                    operator delete(v647);
                    long long v647 = v648;
                  }
                  while (v648);
                }
                *(void *)&v1413[16] = 0;
                uint64_t v649 = *(void *)&v1413[8];
                if (*(void *)&v1413[8])
                {
                  uint64_t v650 = 0;
                  do
                    *(void *)(*(void *)v1413 + 8 * v650++) = 0;
                  while (v649 != v650);
                }
                *(void *)&v1413[24] = 0;
              }
              if (-1 - 0x5555555555555555 * ((uint64_t)(*((void *)&v1419 + 1) - v1419) >> 3) > v1357)
              {
                uint64_t v651 = *(void *)(v1419 + 24 * v1357 + 24);
                unint64_t v581 = *(void *)v651;
                float v580 = *(float *)(v651 + 16);
                float v579 = *(float *)(v651 + 20);
              }

              long long v577 = v576;
              int v593 = v1324;
              if (v1324) {
LABEL_742:
              }
                operator delete(v593);
              unint64_t v578 = v1357 + 1;
              uint64_t v575 = v1419;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1419 + 1) - v1419) >> 3) <= v1357 + 1)
              {
                if (v576) {
                  operator delete(v576);
                }
                break;
              }
            }
          }
          if (v1316) {
            operator delete(v1316);
          }
          sub_25B3FB178((uint64_t)v1413);
          sub_25B3FB178((uint64_t)buf);
          *(void *)buf = &v1419;
          sub_25B413C78((void ***)buf);
          std::string v520 = (int *)src.i64[0];
LABEL_749:

          if (v520) {
            operator delete(v520);
          }
          sub_25B3FB178((uint64_t)__p);
          int v512 = v1296 + 24;
          unint64_t v511 = v1289;
          continue;
        }
      }
      unint64_t v573 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v558 - v557) >> 3));
      if (v558 == (float **)v557) {
        uint64_t v574 = 0;
      }
      else {
        uint64_t v574 = v573;
      }
      sub_25B5BB530(v557, v558, v574, 1);
      v1316 = v521;
      goto LABEL_680;
    }
    break;
  }
  *(void *)buf = &v1390;
  sub_25B413BE8((void ***)buf);

  uint64_t v654 = objc_msgSend_array(MEMORY[0x263EFF980], v652, v653);
  id v655 = obje;
  id v1358 = v654;
  *(_OWORD *)long long __p = 0u;
  long long v1424 = 0u;
  long long v1425 = 0u;
  long long v1426 = 0u;
  id v1325 = v655;
  uint64_t v659 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1325, v656, (uint64_t)__p, buf, 16);
  if (v659)
  {
    uint64_t v1337 = *(void *)v1424;
    do
    {
      for (uint64_t i1 = 0; i1 != v659; ++i1)
      {
        if (*(void *)v1424 != v1337) {
          objc_enumerationMutation(v1325);
        }
        unint64_t v661 = (void *)*((void *)__p[1] + i1);
        long long v1419 = 0u;
        long long v1420 = 0u;
        long long v1421 = 0u;
        long long v1422 = 0u;
        uint64_t v662 = objc_msgSend_walls(v661, v657, v658);
        uint64_t v666 = objc_msgSend_countByEnumeratingWithState_objects_count_(v662, v663, (uint64_t)&v1419, v1413, 16);
        if (v666)
        {
          uint64_t v667 = *(void *)v1420;
          do
          {
            for (uint64_t i2 = 0; i2 != v666; ++i2)
            {
              if (*(void *)v1420 != v667) {
                objc_enumerationMutation(v662);
              }
              unint64_t v669 = *(unsigned char **)(*((void *)&v1419 + 1) + 8 * i2);
              if (!v669 || (v669[106] & 1) == 0 && (v669[107] & 1) == 0)
              {
                id v670 = objc_msgSend_copy(*(void **)(*((void *)&v1419 + 1) + 8 * i2), v664, v665);
                objc_msgSend_addObject_(v1358, v671, (uint64_t)v670);

                id v672 = objc_alloc_init(MEMORY[0x263EFF980]);
                objc_msgSend_addObject_(v672, v673, (uint64_t)v669);
                long long v674 = *(void **)(a1 + 648);
                float v677 = objc_msgSend_identifier(v669, v675, v676);
                objc_msgSend_setObject_forKeyedSubscript_(v674, v678, (uint64_t)v672, v677);
              }
            }
            uint64_t v666 = objc_msgSend_countByEnumeratingWithState_objects_count_(v662, v664, (uint64_t)&v1419, v1413, 16);
          }
          while (v666);
        }
      }
      uint64_t v659 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1325, v657, (uint64_t)__p, buf, 16);
    }
    while (v659);
  }

  *(void *)&long long v1365 = a1;
  id v679 = v1294;
  id v680 = v1358;
  long long v1419 = 0uLL;
  *(void *)&long long v1420 = 0;
  std::string __dst = 0;
  v1410 = 0;
  v1412 = 0;
  *(void *)&long long v1367 = &v1419;
  *((void *)&v1367 + 1) = &v1410;
  sub_25B5B9FCC(&v1367, v679);
  sub_25B5B9FCC(&v1367, v680);
  uint64_t v681 = v1410;
  if (*((void *)&v1419 + 1) == (void)v1419 || __dst == v1410) {
    goto LABEL_840;
  }
  float v682 = *(float *)(v1365 + 164);
  *(void *)&long long v1407 = 0;
  long long v1406 = 0uLL;
  sub_25B58B28C(&v1406, (const void *)v1419, *((uint64_t *)&v1419 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1419 + 1) - v1419) >> 2));
  sub_25B58B308((uint64_t)buf, 1, (uint64_t)&v1406, v682);
  if ((void)v1406)
  {
    *((void *)&v1406 + 1) = v1406;
    operator delete((void *)v1406);
  }
  sub_25B573834((uint64_t)buf);
  float v683 = *(float *)(v1365 + 160);
  *(void *)&long long v1391 = 0;
  long long v1390 = 0uLL;
  sub_25B58B28C(&v1390, v1410, (uint64_t)__dst, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)v1410) >> 2));
  sub_25B58B308((uint64_t)v1413, 1, (uint64_t)&v1390, v683);
  if ((void)v1390)
  {
    *((void *)&v1390 + 1) = v1390;
    operator delete((void *)v1390);
  }
  sub_25B573834((uint64_t)v1413);
  unint64_t v684 = SDWORD1(v1395);
  float32x4_t src = 0uLL;
  *(void *)&long long v1384 = 0;
  sub_25B58B28C(&src, *(const void **)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2));
  unint64_t v685 = *(int *)&v1413[36];
  int64x2_t v1379 = 0uLL;
  *(void *)&long long v1380 = 0;
  sub_25B58B28C(&v1379, *(const void **)v1413, *(uint64_t *)&v1413[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1413[8] - *(void *)v1413) >> 2));
  uint64_t v686 = v684;
  if (v684 && v685)
  {
    __p[0] = 0;
    sub_25B5BA2F0(&v1375, v685, __p);
    uint64_t v687 = v685;
    if (v1379.i64[1] != v1379.i64[0])
    {
      unint64_t v688 = (v1379.i64[1] - v1379.i64[0]) / 12;
      uint64_t v689 = v1375.i64[0];
      if (v688 <= 1) {
        unint64_t v688 = 1;
      }
      float32x4_t v690 = (int *)(v1379.i64[0] + 8);
      __asm { FMOV            V0.2S, #1.0 }
      do
      {
        if (*v690 >= 1)
        {
          v693.i32[1] = HIDWORD(_D0);
          v693.i32[0] = *(v690 - 2);
          *(float32x2_t *)(v689 + 8 * (*v690 - 1)) = vadd_f32(*(float32x2_t *)(v689+ 8 * (*v690 - 1)), v693);
        }
        v690 += 3;
        --v688;
      }
      while (v688);
    }
    if ((int)v685 >= 1)
    {
      uint64_t v694 = (float *)v1375.i64[0];
      uint64_t v695 = v685;
      do
      {
        *uint64_t v694 = *v694 / v694[1];
        v694 += 2;
        --v695;
      }
      while (v695);
    }
    __p[0] = 0;
    sub_25B5BA2F0(&v1371, v684, __p);
    if (src.i64[1] != src.i64[0])
    {
      unint64_t v696 = (src.i64[1] - src.i64[0]) / 12;
      uint64_t v697 = v1371;
      if (v696 <= 1) {
        unint64_t v696 = 1;
      }
      double v698 = (int *)(src.i64[0] + 8);
      __asm { FMOV            V0.2S, #1.0 }
      do
      {
        if (*v698 >= 1)
        {
          v700.i32[1] = HIDWORD(_D0);
          v700.i32[0] = *(v698 - 2);
          *(float32x2_t *)(v697 + 8 * (*v698 - 1)) = vadd_f32(*(float32x2_t *)(v697+ 8 * (*v698 - 1)), v700);
        }
        v698 += 3;
        --v696;
      }
      while (v696);
    }
    if ((int)v684 <= 0)
    {
      LODWORD(v1363) = 0;
      long long v703 = (_DWORD *)v1371;
    }
    else
    {
      unint64_t v701 = (float *)v1371;
      uint64_t v702 = v684;
      do
      {
        *unint64_t v701 = *v701 / v701[1];
        v701 += 2;
        --v702;
      }
      while (v702);
      LODWORD(v1363) = 0;
      long long v703 = (_DWORD *)v1371;
      if ((int)v684 >= 2)
      {
        float v704 = *(float *)(v1365 + 184);
        long long v705 = (float *)(v1371 + 4);
        float v706 = 0.0;
        float v707 = 0.0;
        do
        {
          float v708 = *v705;
          if (*v705 > (float)(v706 * v704))
          {
            float v709 = (float)(v708 * *(v705 - 1)) + (float)(v707 * v706);
            float v706 = v706 + v708;
            float v707 = v709 / v706;
            *(float *)&long long v1363 = v707;
          }
          v705 += 2;
          --v686;
        }
        while (v686);
        goto LABEL_812;
      }
    }
    LODWORD(v1363) = *v703;
LABEL_812:
    if ((unint64_t)(a3 + 1) >= (uint64_t)(a4[1] - *a4) >> 2) {
      float v710 = 3.4028e38;
    }
    else {
      float v710 = *(float *)(*a4 + 4 * (void)(a3 + 1));
    }
    if ((int)v685 < 1)
    {
      float v712 = -3.4028e38;
    }
    else
    {
      long long v711 = (float *)v1375.i64[0];
      float v712 = -3.4028e38;
      do
      {
        float v713 = *v711;
        v711 += 2;
        float v714 = v713;
        if (v713 > v712 && v714 <= v710) {
          float v712 = v714;
        }
        --v687;
      }
      while (v687);
    }
    if (v712 <= (float)(v710 - *(float *)(v1365 + 192))) {
      float v712 = v710 - *(float *)(v1365 + 196);
    }
    __p[0] = &v1365;
    __p[1] = &v1375;
    *(void *)&long long v1424 = &v1363;
    *((void *)&v1424 + 1) = &v1379;
    *(float *)&long long v1425 = v712;
    sub_25B5BA38C((uint64_t)__p, v679, 0);
    int v718 = objc_msgSend_count(v679, v716, v717);
    sub_25B5BA38C((uint64_t)__p, v680, v718);
    *(_DWORD *)(*a4 + 4 * (void)a3) = v1363;
    if ((void)v1371)
    {
      *((void *)&v1371 + 1) = v1371;
      operator delete((void *)v1371);
    }
    if (v1375.i64[0])
    {
      v1375.i64[1] = v1375.i64[0];
      operator delete((void *)v1375.i64[0]);
    }
  }
  if (v1379.i64[0])
  {
    v1379.i64[1] = v1379.i64[0];
    operator delete((void *)v1379.i64[0]);
  }
  if (src.i64[0]) {
    operator delete((void *)src.i64[0]);
  }
  if (*(void *)v1413)
  {
    *(void *)&v1413[8] = *(void *)v1413;
    operator delete(*(void **)v1413);
  }
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v681 = v1410;
LABEL_840:
  if (v681)
  {
    std::string __dst = v681;
    operator delete(v681);
  }
  if ((void)v1419)
  {
    *((void *)&v1419 + 1) = v1419;
    operator delete((void *)v1419);
  }
  v1311 = v680;

  *(void *)&long long v1367 = a1;
  id v719 = v1325;
  id logc = v679;
  *(void *)&long long v1365 = logc;
  *(void *)&long long v1371 = &v1367;
  *((void *)&v1371 + 1) = &v1365;
  long long v1406 = 0u;
  long long v1407 = 0u;
  long long v1408 = 0u;
  long long v1409 = 0u;
  id v1317 = v719;
  uint64_t v723 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1317, v720, (uint64_t)&v1406, buf, 16);
  if (v723)
  {
    id v1326 = *(id *)v1407;
    do
    {
      uint64_t v724 = 0;
      uint64_t v1338 = v723;
      do
      {
        if (*(id *)v1407 != v1326) {
          objc_enumerationMutation(v1317);
        }
        std::string v725 = *(void **)(*((void *)&v1406 + 1) + 8 * v724);
        long long v1390 = 0u;
        long long v1391 = 0u;
        long long v1392 = 0u;
        long long v1393 = 0u;
        long long v726 = objc_msgSend_doors(v725, v721, v722);
        uint64_t v728 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v727, (uint64_t)&v1390, v1413, 16);
        if (v728)
        {
          uint64_t v729 = *(void *)v1391;
          do
          {
            for (uint64_t i3 = 0; i3 != v728; ++i3)
            {
              if (*(void *)v1391 != v729) {
                objc_enumerationMutation(v726);
              }
              sub_25B5B960C((uint64_t **)&v1371, *(void **)(*((void *)&v1390 + 1) + 8 * i3), @"door", v725);
            }
            uint64_t v728 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v731, (uint64_t)&v1390, v1413, 16);
          }
          while (v728);
        }

        long long v1385 = 0u;
        long long v1386 = 0u;
        float32x4_t src = 0u;
        long long v1384 = 0u;
        v734 = objc_msgSend_opendoors(v725, v732, v733);
        uint64_t v736 = objc_msgSend_countByEnumeratingWithState_objects_count_(v734, v735, (uint64_t)&src, __p, 16);
        if (v736)
        {
          uint64_t v737 = *(void *)v1384;
          do
          {
            for (uint64_t i4 = 0; i4 != v736; ++i4)
            {
              if (*(void *)v1384 != v737) {
                objc_enumerationMutation(v734);
              }
              sub_25B5B960C((uint64_t **)&v1371, *(void **)(src.i64[1] + 8 * i4), @"opendoor", v725);
            }
            uint64_t v736 = objc_msgSend_countByEnumeratingWithState_objects_count_(v734, v739, (uint64_t)&src, __p, 16);
          }
          while (v736);
        }

        long long v1381 = 0u;
        long long v1382 = 0u;
        int64x2_t v1379 = 0u;
        long long v1380 = 0u;
        long long v742 = objc_msgSend_openings(v725, v740, v741);
        uint64_t v744 = objc_msgSend_countByEnumeratingWithState_objects_count_(v742, v743, (uint64_t)&v1379, &v1419, 16);
        if (v744)
        {
          uint64_t v745 = *(void *)v1380;
          do
          {
            for (uint64_t i5 = 0; i5 != v744; ++i5)
            {
              if (*(void *)v1380 != v745) {
                objc_enumerationMutation(v742);
              }
              sub_25B5B960C((uint64_t **)&v1371, *(void **)(v1379.i64[1] + 8 * i5), @"opening", v725);
            }
            uint64_t v744 = objc_msgSend_countByEnumeratingWithState_objects_count_(v742, v747, (uint64_t)&v1379, &v1419, 16);
          }
          while (v744);
        }

        long long v1377 = 0u;
        long long v1378 = 0u;
        int64x2_t v1375 = 0u;
        long long v1376 = 0u;
        long long v750 = objc_msgSend_windows(v725, v748, v749);
        uint64_t v752 = objc_msgSend_countByEnumeratingWithState_objects_count_(v750, v751, (uint64_t)&v1375, &v1410, 16);
        if (v752)
        {
          uint64_t v753 = *(void *)v1376;
          do
          {
            for (uint64_t i6 = 0; i6 != v752; ++i6)
            {
              if (*(void *)v1376 != v753) {
                objc_enumerationMutation(v750);
              }
              sub_25B5B960C((uint64_t **)&v1371, *(void **)(v1375.i64[1] + 8 * i6), @"window", v725);
            }
            uint64_t v752 = objc_msgSend_countByEnumeratingWithState_objects_count_(v750, v755, (uint64_t)&v1375, &v1410, 16);
          }
          while (v752);
        }

        ++v724;
      }
      while (v724 != v1338);
      uint64_t v723 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1317, v721, (uint64_t)&v1406, buf, 16);
    }
    while (v723);
  }

  objc_msgSend_array(MEMORY[0x263EFF980], v756, v757);
  id v1277 = (id)objc_claimAutoreleasedReturnValue();
  sub_25B5B6C54(a1, v1277, *(void **)(a1 + 264), a1 + 368);

  objc_msgSend_array(MEMORY[0x263EFF980], v758, v759);
  id v1278 = (id)objc_claimAutoreleasedReturnValue();
  sub_25B5B6C54(a1, v1278, *(void **)(a1 + 272), a1 + 408);

  id v760 = v1317;
  id v761 = v1277;
  id v762 = v1278;
  float32x4_t src = 0u;
  long long v1384 = 0u;
  long long v1385 = 0u;
  long long v1386 = 0u;
  id v1297 = v760;
  uint64_t v766 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1297, v763, (uint64_t)&src, buf, 16);
  if (v766)
  {
    uint64_t v1339 = *(void *)v1384;
    do
    {
      for (uint64_t i7 = 0; i7 != v766; ++i7)
      {
        if (*(void *)v1384 != v1339) {
          objc_enumerationMutation(v1297);
        }
        v768 = *(void **)(src.i64[1] + 8 * i7);
        int64x2_t v1379 = 0u;
        long long v1380 = 0u;
        long long v1381 = 0u;
        long long v1382 = 0u;
        v769 = objc_msgSend_doors(v768, v764, v765);
        uint64_t v773 = objc_msgSend_countByEnumeratingWithState_objects_count_(v769, v770, (uint64_t)&v1379, v1413, 16);
        if (v773)
        {
          uint64_t v774 = *(void *)v1380;
          do
          {
            for (uint64_t i8 = 0; i8 != v773; ++i8)
            {
              if (*(void *)v1380 != v774) {
                objc_enumerationMutation(v769);
              }
              v776 = *(unsigned char **)(v1379.i64[1] + 8 * i8);
              if (!v776 || (v776[106] & 1) == 0)
              {
                v777 = objc_msgSend_copy(v776, v771, v772);
                objc_msgSend_addObject_(v761, v778, (uint64_t)v777);
              }
            }
            uint64_t v773 = objc_msgSend_countByEnumeratingWithState_objects_count_(v769, v771, (uint64_t)&v1379, v1413, 16);
          }
          while (v773);
        }

        long long v1377 = 0u;
        long long v1378 = 0u;
        int64x2_t v1375 = 0u;
        long long v1376 = 0u;
        v781 = objc_msgSend_opendoors(v768, v779, v780);
        uint64_t v785 = objc_msgSend_countByEnumeratingWithState_objects_count_(v781, v782, (uint64_t)&v1375, __p, 16);
        if (v785)
        {
          uint64_t v786 = *(void *)v1376;
          do
          {
            for (uint64_t i9 = 0; i9 != v785; ++i9)
            {
              if (*(void *)v1376 != v786) {
                objc_enumerationMutation(v781);
              }
              v788 = *(unsigned char **)(v1375.i64[1] + 8 * i9);
              if (!v788 || (v788[106] & 1) == 0)
              {
                v789 = objc_msgSend_copy(v788, v783, v784);
                objc_msgSend_addObject_(v761, v790, (uint64_t)v789);
              }
            }
            uint64_t v785 = objc_msgSend_countByEnumeratingWithState_objects_count_(v781, v783, (uint64_t)&v1375, __p, 16);
          }
          while (v785);
        }

        long long v1373 = 0u;
        long long v1374 = 0u;
        long long v1371 = 0u;
        long long v1372 = 0u;
        v793 = objc_msgSend_openings(v768, v791, v792);
        uint64_t v797 = objc_msgSend_countByEnumeratingWithState_objects_count_(v793, v794, (uint64_t)&v1371, &v1419, 16);
        if (v797)
        {
          uint64_t v798 = *(void *)v1372;
          do
          {
            for (uint64_t i10 = 0; i10 != v797; ++i10)
            {
              if (*(void *)v1372 != v798) {
                objc_enumerationMutation(v793);
              }
              v800 = *(unsigned char **)(*((void *)&v1371 + 1) + 8 * i10);
              if (!v800 || (v800[106] & 1) == 0)
              {
                v801 = objc_msgSend_copy(v800, v795, v796);
                objc_msgSend_addObject_(v761, v802, (uint64_t)v801);
              }
            }
            uint64_t v797 = objc_msgSend_countByEnumeratingWithState_objects_count_(v793, v795, (uint64_t)&v1371, &v1419, 16);
          }
          while (v797);
        }

        long long v1369 = 0u;
        long long v1370 = 0u;
        long long v1367 = 0u;
        long long v1368 = 0u;
        v805 = objc_msgSend_windows(v768, v803, v804);
        uint64_t v809 = objc_msgSend_countByEnumeratingWithState_objects_count_(v805, v806, (uint64_t)&v1367, &v1410, 16);
        if (v809)
        {
          uint64_t v810 = *(void *)v1368;
          do
          {
            for (uint64_t i11 = 0; i11 != v809; ++i11)
            {
              if (*(void *)v1368 != v810) {
                objc_enumerationMutation(v805);
              }
              v812 = *(unsigned char **)(*((void *)&v1367 + 1) + 8 * i11);
              if (!v812 || (v812[106] & 1) == 0)
              {
                v813 = objc_msgSend_copy(v812, v807, v808);
                objc_msgSend_addObject_(v762, v814, (uint64_t)v813);
              }
            }
            uint64_t v809 = objc_msgSend_countByEnumeratingWithState_objects_count_(v805, v807, (uint64_t)&v1367, &v1410, 16);
          }
          while (v809);
        }
      }
      uint64_t v766 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1297, v764, (uint64_t)&src, buf, 16);
    }
    while (v766);
  }

  memset(v1366, 0, sizeof(v1366));
  long long v1365 = 0u;
  id v815 = v761;
  uint64_t v819 = objc_msgSend_countByEnumeratingWithState_objects_count_(v815, v816, (uint64_t)&v1365, &v1406, 16);
  if (v819)
  {
    uint64_t v820 = **(void **)&v1366[0];
    do
    {
      for (uint64_t i12 = 0; i12 != v819; ++i12)
      {
        if (**(void **)&v1366[0] != v820) {
          objc_enumerationMutation(v815);
        }
        v822 = *(void **)(*((void *)&v1365 + 1) + 8 * i12);
        v823 = *(void **)(a1 + 640);
        v824 = objc_msgSend_parentIdentifier(v822, v817, v818);
        v826 = objc_msgSend_objectForKeyedSubscript_(v823, v825, (uint64_t)v824);

        if (v826)
        {
          v829 = objc_msgSend_copy(v826, v827, v828);
          sub_25B4FD504((uint64_t)v822, v829);
        }
      }
      uint64_t v819 = objc_msgSend_countByEnumeratingWithState_objects_count_(v815, v817, (uint64_t)&v1365, &v1406, 16);
    }
    while (v819);
  }

  long long v1363 = 0u;
  memset(v1364, 0, sizeof(v1364));
  id v830 = v762;
  uint64_t v834 = objc_msgSend_countByEnumeratingWithState_objects_count_(v830, v831, (uint64_t)&v1363, &v1390, 16);
  if (v834)
  {
    uint64_t v835 = **(void **)&v1364[0];
    do
    {
      for (uint64_t i13 = 0; i13 != v834; ++i13)
      {
        if (**(void **)&v1364[0] != v835) {
          objc_enumerationMutation(v830);
        }
        v837 = *(void **)(*((void *)&v1363 + 1) + 8 * i13);
        v838 = *(void **)(a1 + 640);
        v839 = objc_msgSend_parentIdentifier(v837, v832, v833);
        v841 = objc_msgSend_objectForKeyedSubscript_(v838, v840, (uint64_t)v839);

        if (v841)
        {
          v844 = objc_msgSend_copy(v841, v842, v843);
          sub_25B4FD504((uint64_t)v837, v844);
        }
      }
      uint64_t v834 = objc_msgSend_countByEnumeratingWithState_objects_count_(v830, v832, (uint64_t)&v1363, &v1390, 16);
    }
    while (v834);
  }

  id v1279 = v1297;
  id v845 = logc;
  id v1274 = v1311;
  id v1269 = v815;
  id v1270 = v830;
  float32x4_t src = 0u;
  long long v1384 = 0u;
  long long v1385 = 0u;
  long long v1386 = 0u;
  id v1318 = v845;
  uint64_t v848 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1318, v846, (uint64_t)&src, &v1419, 16);
  if (v848)
  {
    uint64_t v849 = *(void *)v1384;
    do
    {
      for (uint64_t i14 = 0; i14 != v848; ++i14)
      {
        if (*(void *)v1384 != v849) {
          objc_enumerationMutation(v1318);
        }
        v851 = *(void **)(src.i64[1] + 8 * i14);
        if (v851)
        {
          v851[2] = v851[1];
          v851[11] = v851[10];
          v851[5] = v851[4];
          v851[8] = v851[7];
        }
      }
      uint64_t v848 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1318, v847, (uint64_t)&src, &v1419, 16);
    }
    while (v848);
  }

  v852 = objc_opt_new();
  long long v1381 = 0u;
  long long v1382 = 0u;
  int64x2_t v1379 = 0u;
  long long v1380 = 0u;
  id v853 = v1279;
  uint64_t v856 = objc_msgSend_countByEnumeratingWithState_objects_count_(v853, v854, (uint64_t)&v1379, &v1410, 16);
  if (v856)
  {
    uint64_t v857 = *(void *)v1380;
    do
    {
      for (uint64_t i15 = 0; i15 != v856; ++i15)
      {
        if (*(void *)v1380 != v857) {
          objc_enumerationMutation(v853);
        }
        objc_msgSend_appendFloorPlan_(v852, v855, *(void *)(v1379.i64[1] + 8 * i15));
      }
      uint64_t v856 = objc_msgSend_countByEnumeratingWithState_objects_count_(v853, v855, (uint64_t)&v1379, &v1410, 16);
    }
    while (v856);
  }

  id v1281 = v852;
  id v1280 = v853;
  id v1268 = v1318;
  id v1272 = v1274;
  self;
  id v859 = v1268;
  id v860 = v1272;
  v1276 = v859;
  self;
  buf[0] = 0;
  buf[4] = 0;
  *(void *)v1413 = buf;
  sub_25B5B6A60((float **)v1413, v859);
  sub_25B5B6A60((float **)v1413, v860);
  v1275 = v860;

  float v863 = *(float *)buf;
  if ((*(void *)buf & 0xFF00000000) != 0)
  {
    logd = objc_msgSend_objects(v1281, v861, v862);
    long long v1408 = 0u;
    long long v1409 = 0u;
    long long v1406 = 0u;
    long long v1407 = 0u;
    id v1283 = v1280;
    id v1290 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v1283, v864, (uint64_t)&v1406, buf, 16);
    if (!v1290) {
      goto LABEL_1017;
    }
    uint64_t v867 = 0;
    float v868 = v863;
    uint64_t v1286 = *(void *)v1407;
    while (1)
    {
      id v1298 = 0;
      do
      {
        if (*(void *)v1407 != v1286) {
          objc_enumerationMutation(v1283);
        }
        v869 = *(float **)(*((void *)&v1406 + 1) + 8 * (void)v1298);
        if (v869) {
          float v870 = v869[4];
        }
        else {
          float v870 = 0.0;
        }
        v871 = objc_msgSend_objects(v869, v865, v866);
        unint64_t v872 = v867;
        uint64_t v875 = objc_msgSend_count(v871, v873, v874);

        unint64_t v878 = v875 + v872;
        if (v875 + v872 > objc_msgSend_count(logd, v876, v877))
        {
          exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x261163BE0](exception, "Inconsistent object counts between aggregated_floorplan and source_floorplans.");
          __cxa_throw(exception, (struct type_info *)&unk_2708F23B0, MEMORY[0x263F8C070]);
        }
        if (v872 >= v878)
        {
          uint64_t v866 = v872;
          goto LABEL_1013;
        }
        float v879 = v868 - v870;
        uint64_t v866 = v872;
        do
        {
          uint64_t v1312 = v866;
          v880 = objc_msgSend_objectAtIndexedSubscript_(logd, v865, v866);
          v883 = objc_msgSend_type(v880, v881, v882);
          char v885 = objc_msgSend_isEqual_(v883, v884, @"Stairs");

          if (v885) {
            goto LABEL_1010;
          }
          int64x2_t v1375 = 0uLL;
          *(void *)&long long v1376 = 0;
          long long v1390 = 0u;
          long long v1391 = 0u;
          long long v1392 = 0u;
          long long v1393 = 0u;
          v888 = objc_msgSend_boxesDict(v880, v886, v887);
          uint64_t v892 = objc_msgSend_countByEnumeratingWithState_objects_count_(v888, v889, (uint64_t)&v1390, v1413, 16);
          if (!v892) {
            goto LABEL_1006;
          }
          uint64_t v893 = *(void *)v1391;
          id v1327 = v880;
          v1340 = v888;
          do
          {
            uint64_t v894 = 0;
            do
            {
              if (*(void *)v1391 != v893) {
                objc_enumerationMutation(v888);
              }
              v895 = *(void **)(*((void *)&v1390 + 1) + 8 * v894);
              long long v1429 = 0u;
              long long v1430 = 0u;
              long long v1427 = 0u;
              long long v1428 = 0u;
              long long v1425 = 0u;
              long long v1426 = 0u;
              *(_OWORD *)long long __p = 0u;
              long long v1424 = 0u;
              v896 = objc_msgSend_boxesDict(v880, v890, v891);
              v898 = objc_msgSend_objectForKeyedSubscript_(v896, v897, (uint64_t)v895);
              sub_25B445344((uint64_t)__p, v898);

              for (uint64_t i16 = 1; i16 != 17; i16 += 2)
                *(float *)&__p[i16] = v879 + *(float *)&__p[i16];
              id v900 = v895;
              id v901 = v900;
              v902 = (_OWORD *)v1375.i64[1];
              if (v1375.i64[1] < (unint64_t)v1376)
              {
                *(void *)v1375.i64[1] = v900;
                v902[5] = v1427;
                v902[6] = v1428;
                v902[7] = v1429;
                v902[8] = v1430;
                v902[1] = *(_OWORD *)__p;
                v902[2] = v1424;
                v902[3] = v1425;
                v902[4] = v1426;
                v903 = v902 + 9;
                goto LABEL_999;
              }
              unint64_t v904 = v878;
              v905 = (_OWORD *)v1375.i64[0];
              unint64_t v906 = 0x8E38E38E38E38E39 * ((v1375.i64[1] - v1375.i64[0]) >> 4);
              unint64_t v907 = v906 + 1;
              if (v906 + 1 > 0x1C71C71C71C71C7) {
                sub_25B3FBC4C();
              }
              if (0x1C71C71C71C71C72 * ((uint64_t)(v1376 - v1375.i64[0]) >> 4) > v907) {
                unint64_t v907 = 0x1C71C71C71C71C72 * ((uint64_t)(v1376 - v1375.i64[0]) >> 4);
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v1376 - v1375.i64[0]) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v908 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v908 = v907;
              }
              if (v908)
              {
                if (v908 > 0x1C71C71C71C71C7) {
                  sub_25B3FA70C();
                }
                v909 = (char *)operator new(144 * v908);
              }
              else
              {
                v909 = 0;
              }
              v910 = &v909[144 * v906];
              *(void *)v910 = v901;
              long long v911 = v1428;
              *((_OWORD *)v910 + 5) = v1427;
              *((_OWORD *)v910 + 6) = v911;
              long long v912 = v1430;
              *((_OWORD *)v910 + 7) = v1429;
              *((_OWORD *)v910 + 8) = v912;
              long long v913 = v1424;
              *((_OWORD *)v910 + 1) = *(_OWORD *)__p;
              *((_OWORD *)v910 + 2) = v913;
              long long v914 = v1426;
              *((_OWORD *)v910 + 3) = v1425;
              *((_OWORD *)v910 + 4) = v914;
              if (v902 == v905)
              {
                v903 = v910 + 144;
                v1375.i64[0] = (uint64_t)&v909[144 * v906];
                v1375.i64[1] = (uint64_t)(v910 + 144);
                *(void *)&long long v1376 = &v909[144 * v908];
                unint64_t v878 = v904;
                v880 = v1327;
                v888 = v1340;
                if (v905) {
                  goto LABEL_998;
                }
              }
              else
              {
                v915 = &v909[144 * v906];
                v916 = v902;
                unint64_t v878 = v904;
                do
                {
                  uint64_t v917 = *((void *)v916 - 18);
                  v916 -= 9;
                  *(void *)v916 = 0;
                  *((void *)v915 - 18) = v917;
                  v915 -= 144;
                  long long v918 = v916[1];
                  long long v919 = v916[2];
                  long long v920 = v916[4];
                  *((_OWORD *)v915 + 3) = v916[3];
                  *((_OWORD *)v915 + 4) = v920;
                  *((_OWORD *)v915 + 1) = v918;
                  *((_OWORD *)v915 + 2) = v919;
                  long long v921 = v916[5];
                  long long v922 = v916[6];
                  long long v923 = v916[8];
                  *((_OWORD *)v915 + 7) = v916[7];
                  *((_OWORD *)v915 + 8) = v923;
                  *((_OWORD *)v915 + 5) = v921;
                  *((_OWORD *)v915 + 6) = v922;
                }
                while (v916 != v905);
                v903 = v910 + 144;
                v1375.i64[0] = (uint64_t)v915;
                v1375.i64[1] = (uint64_t)(v910 + 144);
                *(void *)&long long v1376 = &v909[144 * v908];
                v888 = v1340;
                if (v902 == v905)
                {
                  v880 = v1327;
                  if (v905) {
                    goto LABEL_998;
                  }
                }
                else
                {
                  v880 = v1327;
                  do
                  {
                    v924 = (void *)*((void *)v902 - 18);
                    v902 -= 9;
                  }
                  while (v902 != v905);
                  if (v905) {
LABEL_998:
                  }
                    operator delete(v905);
                }
              }
LABEL_999:
              v1375.i64[1] = (uint64_t)v903;
              ++v894;
            }
            while (v894 != v892);
            uint64_t v925 = objc_msgSend_countByEnumeratingWithState_objects_count_(v888, v890, (uint64_t)&v1390, v1413, 16);
            uint64_t v892 = v925;
          }
          while (v925);
LABEL_1006:

          v927 = (void **)v1375.i64[1];
          for (i17 = (void **)v1375.i64[0]; i17 != v927; i17 = (void **)&v928[8])
          {
            v929 = *i17;
            v928 = (__n128 *)(i17 + 2);
            sub_25B477B80((uint64_t)v880, v928, v929);
          }
          __p[0] = &v1375;
          sub_25B5B69E0((void ***)__p);
LABEL_1010:

          uint64_t v866 = v1312 + 1;
        }
        while (v1312 + 1 < v878);
LABEL_1013:
        id v1298 = (char *)v1298 + 1;
        uint64_t v867 = v866;
      }
      while (v1298 != v1290);
      uint64_t v930 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1283, v865, (uint64_t)&v1406, buf, 16);
      id v1290 = (id)v930;
      if (!v930)
      {
LABEL_1017:

        goto LABEL_1022;
      }
    }
  }
  if (qword_26A5020B0 != -1) {
    dispatch_once(&qword_26A5020B0, &unk_2708F1218);
  }
  logd = (id)qword_26A5020A8;
  if (os_log_type_enabled(logd, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_25B3F3000, logd, OS_LOG_TYPE_DEBUG, "Unable to get merged floor height; abort object height adjustment.",
      buf,
      2u);
  }
LABEL_1022:

  objc_msgSend_array(MEMORY[0x263EFF980], v931, v932);
  id v1328 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObjectsFromArray_(v1328, v933, (uint64_t)v1276);
  objc_msgSend_addObjectsFromArray_(v1328, v934, (uint64_t)v860);
  id v935 = v1281;
  id v936 = v1328;
  id v1341 = v1269;
  id v1273 = v1270;
  self;
  v1299 = (_DWORD *)objc_opt_new();
  v937 = v936;
  sub_25B4E664C((uint64_t)v1299, v936);
  v940 = objc_msgSend_array(MEMORY[0x263EFF980], v938, v939);
  v943 = objc_msgSend_array(MEMORY[0x263EFF980], v941, v942);
  v946 = objc_msgSend_array(MEMORY[0x263EFF980], v944, v945);
  long long v1408 = 0u;
  long long v1409 = 0u;
  long long v1406 = 0u;
  long long v1407 = 0u;
  id v1313 = v1341;
  uint64_t v948 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1313, v947, (uint64_t)&v1406, __p, 16);
  if (!v948) {
    goto LABEL_1035;
  }
  uint64_t v949 = *(void *)v1407;
  do
  {
    for (uint64_t i18 = 0; i18 != v948; ++i18)
    {
      if (*(void *)v1407 != v949) {
        objc_enumerationMutation(v1313);
      }
      id v951 = *(id *)(*((void *)&v1406 + 1) + 8 * i18);
      int v954 = objc_msgSend_type(v951, v952, v953);
      v955 = v940;
      if (v954 == 2) {
        goto LABEL_1032;
      }
      if (v954 == 3)
      {
        v955 = v946;
LABEL_1032:
        objc_msgSend_addObject_(v955, (const char *)v955, (uint64_t)v951);
        goto LABEL_1033;
      }
      v955 = v943;
      if (v954 == 4) {
        goto LABEL_1032;
      }
LABEL_1033:
    }
    uint64_t v948 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1313, v956, (uint64_t)&v1406, __p, 16);
  }
  while (v948);
LABEL_1035:

  sub_25B477C30((uint64_t)v1299, v940);
  sub_25B4E666C((uint64_t)v1299, v946);
  sub_25B477C10((uint64_t)v1299, v943);
  sub_25B4E665C((uint64_t)v1299, v1273);
  v959 = objc_msgSend_curvedWalls(v935, v957, v958);
  sub_25B4E667C((uint64_t)v1299, v959);

  v962 = objc_msgSend_curvedDoors(v935, v960, v961);
  sub_25B4E668C((uint64_t)v1299, v962);

  v965 = objc_msgSend_curvedWindows(v935, v963, v964);
  sub_25B4E669C((uint64_t)v1299, v965);

  v968 = objc_msgSend_roomTypes(v935, v966, v967);
  sub_25B4E66BC((uint64_t)v1299, v968);

  v971 = v1299;
  if (v1299)
  {
    sub_25B4D4150((uint64_t)buf);
    memset(&v1413[8], 0, 64);
    long long v1414 = 0u;
    long long v1415 = 0u;
    v1417 = 0;
    *(void *)v1413 = &unk_2708F21F8;
    uint64_t v1416 = 0;
    __int16 v1418 = 257;
    sub_25B479810((uint64_t)buf, v1299, 0, (uint64_t)v1413);
    *(void *)v1413 = &unk_2708F21F8;
    if (v1417) {
      sub_25B404120(v1417);
    }
    sub_25B4797CC(v1405);
    v972 = v1404;
    v1404 = 0;
    v971 = v1299;
    if (v972) {
      operator delete(v972);
    }
    sub_25B4D433C((uint64_t)buf);
  }
  v973 = objc_msgSend_walls(v971, v969, v970);
  v976 = objc_msgSend_openings(v971, v974, v975);
  v979 = objc_msgSend_objects(v935, v977, v978);
  v980 = sub_25B4EA510(v973, v976, v979);
  sub_25B477C20((uint64_t)v1299, v980);

  objc_msgSend_walls(v1299, v981, v982);
  id v983 = (id)objc_claimAutoreleasedReturnValue();
  memset(v1413, 0, 64);
  id v984 = v983;
  uint64_t v987 = objc_msgSend_countByEnumeratingWithState_objects_count_(v984, v985, (uint64_t)v1413, buf, 16);
  if (v987)
  {
    uint64_t v988 = **(void **)&v1413[16];
    do
    {
      for (uint64_t i19 = 0; i19 != v987; ++i19)
      {
        if (**(void **)&v1413[16] != v988) {
          objc_enumerationMutation(v984);
        }
        uint64_t v990 = *(void *)(*(void *)&v1413[8] + 8 * i19);
        if (v990 && *(float *)(v990 + 132) < *(float *)(a1 + 144)) {
          *(_DWORD *)(v990 + 132) = 0;
        }
      }
      uint64_t v987 = objc_msgSend_countByEnumeratingWithState_objects_count_(v984, v986, (uint64_t)v1413, buf, 16);
    }
    while (v987);
  }

  sub_25B4E6BB0((uint64_t)v1299, v991, v992);
  id v993 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (v1299)
  {
    int v994 = v1299[3];
    int v995 = v1299[4];
  }
  else
  {
    int v995 = 0;
    int v994 = 0;
  }
  int v1282 = v994;
  id v996 = v1280;
  id v1284 = v993;
  int64x2_t v1375 = 0uLL;
  *(void *)&long long v1376 = 0;
  long long v1390 = 0u;
  long long v1391 = 0u;
  long long v1392 = 0u;
  long long v1393 = 0u;
  id v997 = v996;
  id v1291 = v997;
  uint64_t v999 = objc_msgSend_countByEnumeratingWithState_objects_count_(v997, v998, (uint64_t)&v1390, &v1406, 16);
  if (v999)
  {
    uint64_t loge = *(void *)v1391;
    do
    {
      id v1319 = (id)v999;
      for (i20 = 0; i20 != v1319; i20 = (char *)i20 + 1)
      {
        if (*(void *)v1391 != loge) {
          objc_enumerationMutation(v1291);
        }
        id v1329 = *(id *)(*((void *)&v1390 + 1) + 8 * (void)i20);
        v1005 = objc_msgSend_roomTypes(v1329, v1001, v1002);
        for (unint64_t i21 = 0; objc_msgSend_count(v1005, v1003, v1004) > i21; ++i21)
        {
          v1008 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1007, i21);
          v1011 = objc_msgSend_label(v1008, v1009, v1010);
          BOOL v1012 = v1011 == 0;

          if (v1012)
          {
            if (qword_26A5020B0 != -1) {
              dispatch_once(&qword_26A5020B0, &unk_2708F1218);
            }
            v1044 = (id)qword_26A5020A8;
            if (os_log_type_enabled(v1044, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_25B3F3000, v1044, OS_LOG_TYPE_ERROR, "Invalid label in RSRoomType, skipping", buf, 2u);
            }
            goto LABEL_1070;
          }
          v1014 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1013, i21);
          v1017 = objc_msgSend_polygon(v1014, v1015, v1016);
          if (!objc_msgSend_count(v1017, v1018, v1019))
          {

LABEL_1072:
            if (qword_26A5020B0 != -1) {
              dispatch_once(&qword_26A5020B0, &unk_2708F1218);
            }
            v1044 = (id)qword_26A5020A8;
            if (os_log_type_enabled(v1044, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_25B3F3000, v1044, OS_LOG_TYPE_ERROR, "Invalid polygon in RSRoomType, skipping", buf, 2u);
            }
LABEL_1070:

            continue;
          }
          v1021 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1020, i21);
          v1024 = objc_msgSend_polygon(v1021, v1022, v1023);
          BOOL v1027 = objc_msgSend_points(v1024, v1025, v1026) == 0;

          if (v1027) {
            goto LABEL_1072;
          }
          for (unint64_t i22 = 0; ; ++i22)
          {
            v1030 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1028, i21);
            v1033 = objc_msgSend_polygon(v1030, v1031, v1032);
            BOOL v1036 = objc_msgSend_count(v1033, v1034, v1035) > i22;

            if (!v1036) {
              break;
            }
            v1038 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1037, i21);
            v1041 = objc_msgSend_polygon(v1038, v1039, v1040);
            objc_msgSend_points(v1041, v1042, v1043);
          }
          v1045 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1037, i21);
          objc_msgSend_polygonCenter(v1045, v1046, v1047);
          v1049 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1048, i21);
          objc_msgSend_polygonCenter(v1049, v1050, v1051);

          uint64_t v1053 = objc_msgSend_objectAtIndexedSubscript_(v1005, v1052, i21);
          uint64_t v1054 = v1053;
          v1055 = (void *)v1375.i64[1];
          if (v1375.i64[1] >= (unint64_t)v1376)
          {
            v1057 = (void *)v1375.i64[0];
            uint64_t v1058 = (v1375.i64[1] - v1375.i64[0]) >> 3;
            unint64_t v1059 = v1058 + 1;
            if ((unint64_t)(v1058 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            uint64_t v1060 = v1376 - v1375.i64[0];
            if ((uint64_t)(v1376 - v1375.i64[0]) >> 2 > v1059) {
              unint64_t v1059 = v1060 >> 2;
            }
            if ((unint64_t)v1060 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v1061 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1061 = v1059;
            }
            if (v1061)
            {
              if (v1061 >> 61) {
                sub_25B3FA70C();
              }
              v1062 = (char *)operator new(8 * v1061);
            }
            else
            {
              v1062 = 0;
            }
            v1063 = (uint64_t *)&v1062[8 * v1058];
            uint64_t *v1063 = v1054;
            v1056 = v1063 + 1;
            if (v1055 == v1057)
            {
              int64x2_t v1065 = vdupq_n_s64((unint64_t)v1055);
            }
            else
            {
              do
              {
                uint64_t v1064 = *--v1055;
                void *v1055 = 0;
                *--v1063 = v1064;
              }
              while (v1055 != v1057);
              int64x2_t v1065 = v1375;
            }
            v1375.i64[0] = (uint64_t)v1063;
            v1375.i64[1] = (uint64_t)v1056;
            *(void *)&long long v1376 = &v1062[8 * v1061];
            v1067 = (char *)v1065.i64[1];
            v1066 = (char *)v1065.i64[0];
            while (v1067 != v1066)
            {
              v1068 = (void *)*((void *)v1067 - 1);
              v1067 -= 8;
            }
            if (v1066) {
              operator delete(v1066);
            }
          }
          else
          {
            *(void *)v1375.i64[1] = v1053;
            v1056 = v1055 + 1;
          }
          v1375.i64[1] = (uint64_t)v1056;
        }
      }
      id v997 = v1291;
      uint64_t v999 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1291, v1069, (uint64_t)&v1390, &v1406, 16);
    }
    while (v999);
  }

  unint64_t v1070 = v1375.i64[1] - v1375.i64[0];
  int64_t v1330 = (int)((v1375.i64[1] - v1375.i64[0]) >> 3);
  sub_25B5B6918(&v1371, v1330);
  uint64_t v1342 = (v1070 >> 3);
  id v1320 = (id)(v1070 >> 3);
  if ((int)(v1070 >> 3) >= 1)
  {
    uint64_t v1073 = 0;
    do
    {
      v1074 = objc_msgSend_polygon(*(void **)(v1375.i64[0] + 8 * v1073), v1071, v1072);
      uint64_t v1075 = v1371;
      unint64_t v1078 = objc_msgSend_count(v1074, v1076, v1077);
      sub_25B443B1C((void **)(v1075 + 24 * v1073), v1078);
      uint64_t v1083 = objc_msgSend_points(v1074, v1079, v1080);
      for (unint64_t i23 = 0; objc_msgSend_count(v1074, v1081, v1082) > i23; ++i23)
      {
        v1085 = (void **)(v1371 + 24 * v1073);
        uint64_t v1086 = *(void *)(v1083 + 8 * i23);
        v1088 = v1085 + 1;
        v1087 = v1085[1];
        unint64_t v1089 = (unint64_t)v1085[2];
        if ((unint64_t)v1087 >= v1089)
        {
          uint64_t v1091 = ((char *)v1087 - (unsigned char *)*v1085) >> 3;
          if ((unint64_t)(v1091 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          uint64_t v1092 = v1089 - (void)*v1085;
          uint64_t v1093 = v1092 >> 2;
          if (v1092 >> 2 <= (unint64_t)(v1091 + 1)) {
            uint64_t v1093 = v1091 + 1;
          }
          if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v1094 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v1094 = v1093;
          }
          if (v1094) {
            unint64_t v1094 = (unint64_t)sub_25B3FCAD4(v1094);
          }
          else {
            v1081 = 0;
          }
          v1095 = (void *)(v1094 + 8 * v1091);
          void *v1095 = v1086;
          v1090 = v1095 + 1;
          v1096 = (char *)*v1088;
          v1097 = (char *)*v1085;
          if (*v1088 != *v1085)
          {
            do
            {
              uint64_t v1098 = *((void *)v1096 - 1);
              v1096 -= 8;
              *--v1095 = v1098;
            }
            while (v1096 != v1097);
            v1096 = (char *)*v1085;
          }
          *v1085 = v1095;
          *v1088 = v1090;
          v1085[2] = (void *)(v1094 + 8 * (void)v1081);
          if (v1096) {
            operator delete(v1096);
          }
        }
        else
        {
          void *v1087 = v1086;
          v1090 = v1087 + 1;
        }
        *v1088 = v1090;
      }

      ++v1073;
    }
    while (v1073 != v1342);
  }
  sub_25B413B44(&v1367, v1330);
  if ((int)v1320 <= 0)
  {
    long long v1365 = 0uLL;
    *(void *)&v1366[0] = 0;
    float32x4_t src = 0u;
    long long v1384 = 0u;
    LODWORD(v1385) = 1065353216;
  }
  else
  {
    uint64_t v1101 = 0;
    uint64_t v1102 = 1;
    do
    {
      uint64_t v1103 = v1101 + 1;
      if (v1101 + 1 < v1330)
      {
        uint64_t v1104 = v1102;
        do
        {
          v1105 = objc_msgSend_label(*(void **)(v1375.i64[0] + 8 * v1101), v1099, v1100);
          v1108 = objc_msgSend_label(*(void **)(v1375.i64[0] + 8 * v1104), v1106, v1107);
          char v1110 = objc_msgSend_isEqual_(v1105, v1109, (uint64_t)v1108);

          if (v1110)
          {
            LODWORD(v1111) = 1036831949;
            sub_25B57B8E8((unint64_t *)buf, *(float32x2_t **)(v1371 + 24 * v1101), *(float32x2_t **)(v1371 + 24 * v1101 + 8), (float32x2_t **)(v1371 + 24 * v1104), v1111);
            float v1112 = (float)*(unint64_t *)buf / (float)*(unint64_t *)&buf[16];
            if ((float)((float)*(unint64_t *)buf / (float)*(unint64_t *)&buf[8]) >= v1112) {
              float v1112 = (float)*(unint64_t *)buf / (float)*(unint64_t *)&buf[8];
            }
            if (v1112 >= *(float *)(a1 + 188))
            {
              uint64_t v1113 = v1367 + 24 * v1101;
              v1115 = (_DWORD **)(v1113 + 8);
              v1114 = *(_DWORD **)(v1113 + 8);
              unint64_t v1116 = *(void *)(v1113 + 16);
              if ((unint64_t)v1114 >= v1116)
              {
                v1118 = *(_DWORD **)v1113;
                uint64_t v1119 = ((uint64_t)v1114 - *(void *)v1113) >> 2;
                unint64_t v1120 = v1119 + 1;
                if ((unint64_t)(v1119 + 1) >> 62) {
                  goto LABEL_1346;
                }
                uint64_t v1121 = v1116 - (void)v1118;
                if (v1121 >> 1 > v1120) {
                  unint64_t v1120 = v1121 >> 1;
                }
                if ((unint64_t)v1121 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v1122 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v1122 = v1120;
                }
                if (v1122)
                {
                  unint64_t v1122 = (unint64_t)sub_25B3FBC64(v1122);
                  v1114 = *v1115;
                  v1118 = *(_DWORD **)v1113;
                }
                else
                {
                  v1099 = 0;
                }
                v1123 = (_DWORD *)(v1122 + 4 * v1119);
                _DWORD *v1123 = v1104;
                v1117 = v1123 + 1;
                while (v1114 != v1118)
                {
                  int v1124 = *--v1114;
                  *--v1123 = v1124;
                }
                *(void *)uint64_t v1113 = v1123;
                *v1115 = v1117;
                *(void *)(v1113 + 16) = v1122 + 4 * (void)v1099;
                if (v1118) {
                  operator delete(v1118);
                }
              }
              else
              {
                _DWORD *v1114 = v1104;
                v1117 = v1114 + 1;
              }
              *v1115 = v1117;
              uint64_t v1125 = v1367 + 24 * v1104;
              v1127 = (_DWORD **)(v1125 + 8);
              v1126 = *(_DWORD **)(v1125 + 8);
              unint64_t v1128 = *(void *)(v1125 + 16);
              if ((unint64_t)v1126 >= v1128)
              {
                v1130 = *(_DWORD **)v1125;
                uint64_t v1131 = ((uint64_t)v1126 - *(void *)v1125) >> 2;
                unint64_t v1132 = v1131 + 1;
                if ((unint64_t)(v1131 + 1) >> 62) {
LABEL_1346:
                }
                  sub_25B3FBC4C();
                uint64_t v1133 = v1128 - (void)v1130;
                if (v1133 >> 1 > v1132) {
                  unint64_t v1132 = v1133 >> 1;
                }
                if ((unint64_t)v1133 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v1134 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v1134 = v1132;
                }
                if (v1134)
                {
                  unint64_t v1134 = (unint64_t)sub_25B3FBC64(v1134);
                  v1126 = *v1127;
                  v1130 = *(_DWORD **)v1125;
                }
                else
                {
                  v1099 = 0;
                }
                v1135 = (_DWORD *)(v1134 + 4 * v1131);
                _DWORD *v1135 = v1101;
                v1129 = v1135 + 1;
                while (v1126 != v1130)
                {
                  int v1136 = *--v1126;
                  *--v1135 = v1136;
                }
                *(void *)uint64_t v1125 = v1135;
                *v1127 = v1129;
                *(void *)(v1125 + 16) = v1134 + 4 * (void)v1099;
                if (v1130) {
                  operator delete(v1130);
                }
              }
              else
              {
                _DWORD *v1126 = v1101;
                v1129 = v1126 + 1;
              }
              *v1127 = v1129;
            }
          }
          ++v1104;
        }
        while (v1104 != v1342);
      }
      ++v1102;
      ++v1101;
    }
    while (v1103 != v1342);
    int v1137 = 0;
    long long v1365 = 0uLL;
    *(void *)&v1366[0] = 0;
    float32x4_t src = 0u;
    long long v1384 = 0u;
    LODWORD(v1385) = 1065353216;
    LODWORD(__p[0]) = 0;
    int v1138 = (int)v1320;
    do
    {
      if (!sub_25B3FAE64(&src, v1137))
      {
        long long v1395 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_25B4B91FC(buf, __p);
        sub_25B3FAF64((uint64_t)&src, v1137, v1137);
        uint64_t v1139 = *((void *)&v1395 + 1);
        if (*((void *)&v1395 + 1))
        {
          unint64_t v1140 = 0;
          v1141 = 0;
          v1142 = 0;
          do
          {
            int v1143 = *(_DWORD *)(*(void *)(*(void *)&buf[8] + (((unint64_t)v1395 >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * (v1395 & 0x3FF));
            *((void *)&v1395 + 1) = v1139 - 1;
            *(void *)&long long v1395 = v1395 + 1;
            if ((unint64_t)v1395 >= 0x800)
            {
              operator delete(**(void ***)&buf[8]);
              *(void *)&buf[8] += 8;
              *(void *)&long long v1395 = v1395 - 1024;
            }
            if ((unint64_t)v1141 >= v1140)
            {
              uint64_t v1144 = (v1141 - v1142) >> 2;
              unint64_t v1145 = v1144 + 1;
              if ((unint64_t)(v1144 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v1140 - (void)v1142) >> 1 > v1145) {
                unint64_t v1145 = (uint64_t)(v1140 - (void)v1142) >> 1;
              }
              if (v1140 - (unint64_t)v1142 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v1146 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v1146 = v1145;
              }
              if (v1146) {
                unint64_t v1146 = (unint64_t)sub_25B3FBC64(v1146);
              }
              else {
                uint64_t v1147 = 0;
              }
              v1148 = (char *)(v1146 + 4 * v1144);
              *(_DWORD *)v1148 = v1143;
              v1149 = v1148 + 4;
              while (v1141 != v1142)
              {
                int v1150 = *((_DWORD *)v1141 - 1);
                v1141 -= 4;
                *((_DWORD *)v1148 - 1) = v1150;
                v1148 -= 4;
              }
              unint64_t v1140 = v1146 + 4 * v1147;
              if (v1142) {
                operator delete(v1142);
              }
              v1142 = v1148;
              v1141 = v1149;
            }
            else
            {
              *(_DWORD *)v1141 = v1143;
              v1141 += 4;
            }
            uint64_t v1151 = v1367 + 24 * v1143;
            v1152 = *(_DWORD **)v1151;
            v1153 = *(_DWORD **)(v1151 + 8);
            while (v1152 != v1153)
            {
              *(_DWORD *)v1413 = *v1152;
              int v1154 = *(_DWORD *)v1413;
              if (!sub_25B3FAE64(&src, *(int *)v1413))
              {
                sub_25B4B91FC(buf, v1413);
                sub_25B3FAF64((uint64_t)&src, v1154, v1154);
              }
              ++v1152;
            }
            uint64_t v1139 = *((void *)&v1395 + 1);
          }
          while (*((void *)&v1395 + 1));
        }
        else
        {
          v1141 = 0;
          v1142 = 0;
        }
        v1155 = (void *)*((void *)&v1365 + 1);
        if (*((void *)&v1365 + 1) >= *(void *)&v1366[0])
        {
          unint64_t v1157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v1365 + 1) - v1365) >> 3);
          unint64_t v1158 = v1157 + 1;
          if (v1157 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)&v1366[0] - v1365) >> 3) > v1158) {
            unint64_t v1158 = 0x5555555555555556 * ((uint64_t)(*(void *)&v1366[0] - v1365) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1366[0] - v1365) >> 3) >= 0x555555555555555) {
            unint64_t v1159 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v1159 = v1158;
          }
          *(void *)&v1413[32] = v1366;
          if (v1159) {
            unint64_t v1159 = (unint64_t)sub_25B413D74(v1159);
          }
          else {
            uint64_t v1160 = 0;
          }
          v1161 = (void *)(v1159 + 24 * v1157);
          *(void *)v1413 = v1159;
          *(void *)&v1413[8] = v1161;
          *(void *)&v1413[16] = v1161;
          *(void *)&v1413[24] = v1159 + 24 * v1160;
          void *v1161 = 0;
          v1161[1] = 0;
          v1161[2] = 0;
          sub_25B3FC724(v1161, v1142, (uint64_t)v1141, (v1141 - v1142) >> 2);
          *(void *)&v1413[16] += 24;
          sub_25B43EA54(&v1365, v1413);
          v1156 = (void *)*((void *)&v1365 + 1);
          sub_25B43EAC4((uint64_t)v1413);
        }
        else
        {
          **((void **)&v1365 + 1) = 0;
          v1155[1] = 0;
          v1155[2] = 0;
          sub_25B3FC724(v1155, v1142, (uint64_t)v1141, (v1141 - v1142) >> 2);
          v1156 = v1155 + 3;
        }
        *((void *)&v1365 + 1) = v1156;
        sub_25B4B9C40((uint64_t)buf);
        if (v1142) {
          operator delete(v1142);
        }
        int v1137 = (int)__p[0];
        int v1138 = (int)v1320;
      }
      LODWORD(__p[0]) = ++v1137;
    }
    while (v1137 < v1138);
  }
  objc_msgSend_removeAllObjects(v1284, v1099, v1100);
  v1287 = (int **)*((void *)&v1365 + 1);
  if ((void)v1365 != *((void *)&v1365 + 1))
  {
    int32x2_t v1271 = vdup_n_s32(0x7F7FFFFFu);
    v1164 = &v1413[48];
    v1267 = &v1413[56];
    __asm { FMOV            V0.2S, #-5.0 }
    uint64_t v1265 = _D0;
    float32x2_t v1166 = (float32x2_t)vdup_n_s32(0x3CA3D70Au);
    uint64_t v1266 = 0x3F80000000000000;
    __asm { FMOV            V15.2S, #1.0 }
    v1168 = (int **)v1365;
    __asm { FMOV            V10.2S, #5.0 }
    do
    {
      logf = v1168;
      v1171 = v1168;
      v1170 = *v1168;
      uint64_t v1172 = v1171[1] - v1170;
      if (v1172)
      {
        if (v1172 != 1)
        {
          objc_msgSend_label(*(void **)(v1375.i64[0] + 8 * *v1170), v1162, v1163, v1265, v1266, v1267);
          objc_claimAutoreleasedReturnValue();
          long long v1363 = 0uLL;
          *(void *)&v1364[0] = 0;
          v1178 = *logf;
          v1179 = logf[1];
          float32x2_t v1180 = (float32x2_t)0x80000000800000;
          if (*logf == v1179)
          {
            v1192 = 0;
            v1181 = 0;
            BOOL v1193 = 1;
          }
          else
          {
            v1181 = 0;
            do
            {
              int v1182 = *v1178;
              uint64_t v1183 = v1371;
              v1184 = (const void **)(v1371 + 24 * *v1178);
              if ((unint64_t)v1181 >= *(void *)&v1364[0])
              {
                unint64_t v1186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v1181 - v1363) >> 3);
                unint64_t v1187 = v1186 + 1;
                if (v1186 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_25B3FBC4C();
                }
                if (0x5555555555555556 * ((uint64_t)(*(void *)&v1364[0] - v1363) >> 3) > v1187) {
                  unint64_t v1187 = 0x5555555555555556 * ((uint64_t)(*(void *)&v1364[0] - v1363) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v1364[0] - v1363) >> 3) >= 0x555555555555555) {
                  unint64_t v1188 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v1188 = v1187;
                }
                *(void *)&long long v1395 = v1364;
                if (v1188) {
                  unint64_t v1188 = (unint64_t)sub_25B413D74(v1188);
                }
                else {
                  uint64_t v1189 = 0;
                }
                v1190 = (void *)(v1188 + 24 * v1186);
                *(void *)buf = v1188;
                *(void *)&buf[8] = v1190;
                *(void *)&uint8_t buf[16] = v1190;
                *(void *)&buf[24] = v1188 + 24 * v1189;
                void *v1190 = 0;
                v1190[1] = 0;
                v1190[2] = 0;
                uint64_t v1191 = *(void *)(v1183 + 24 * v1182 + 8);
                sub_25B400390(v1190, *v1184, v1191, (v1191 - (uint64_t)*v1184) >> 3);
                *(void *)&buf[16] += 24;
                sub_25B43EA54(&v1363, buf);
                v1181 = (float32x2_t **)*((void *)&v1363 + 1);
                sub_25B43EAC4((uint64_t)buf);
              }
              else
              {
                *v1181 = 0;
                v1181[1] = 0;
                v1181[2] = 0;
                uint64_t v1185 = *(void *)(v1183 + 24 * v1182 + 8);
                sub_25B400390(v1181, *v1184, v1185, (v1185 - (uint64_t)*v1184) >> 3);
                v1181 += 3;
              }
              *((void *)&v1363 + 1) = v1181;
              ++v1178;
            }
            while (v1178 != v1179);
            v1192 = (float32x2_t **)v1363;
            BOOL v1193 = (void)v1363 == (void)v1181;
            if ((float32x2_t **)v1363 != v1181)
            {
              float32x2_t v1180 = (float32x2_t)0x80000000800000;
              float32x2_t v1194 = (float32x2_t)v1271;
              v1195 = (float32x2_t **)v1363;
              do
              {
                for (i24 = *v1195; i24 != v1195[1]; ++i24)
                {
                  float32x2_t v1197 = *i24;
                  float32x2_t v1194 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v1194, v1197), (int8x8_t)v1197, (int8x8_t)v1194);
                  float32x2_t v1180 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v1197, v1180), (int8x8_t)v1197, (int8x8_t)v1180);
                }
                v1195 += 3;
              }
              while (v1195 != v1181);
LABEL_1249:
              float32x2_t v1198 = vsub_f32(v1180, v1194);
              int v1389 = (int)(float)(v1198.f32[0] / 0.02) + 10;
              int v1388 = (int)(float)(v1198.f32[1] / 0.02) + 10;
              int64x2_t v1379 = 0uLL;
              *(void *)&long long v1380 = 0;
              if (!v1193)
              {
                do
                {
                  memset(v1413, 0, 24);
                  sub_25B443B1C((void **)v1413, v1192[1] - *v1192);
                  v1199 = v1164;
                  v1200 = *v1192;
                  v1201 = v1192[1];
                  while (v1200 != v1201)
                  {
                    float32x2_t v1202 = vadd_f32(vdiv_f32(vsub_f32(*v1200, v1194), v1166), _D10);
                    float v1203 = -v1202.f32[0];
                    if (v1202.f32[0] >= 0.0) {
                      float v1203 = v1202.f32[0];
                    }
                    int v1204 = (int)v1203;
                    float v1205 = v1203 - (float)(int)v1203;
                    if (v1205 < 0.5) {
                      int v1206 = v1204;
                    }
                    else {
                      int v1206 = v1204 + 1;
                    }
                    int v1207 = (v1204 & 1) + v1204;
                    if (v1205 != 0.5) {
                      int v1207 = v1206;
                    }
                    if (v1202.f32[0] < 0.0) {
                      int v1207 = -v1207;
                    }
                    LODWORD(v1208) = v1207;
                    float v1209 = -v1202.f32[1];
                    if (v1202.f32[1] >= 0.0) {
                      float v1209 = v1202.f32[1];
                    }
                    int v1210 = (int)v1209;
                    float v1211 = v1209 - (float)(int)v1209;
                    if (v1211 < 0.5) {
                      int v1212 = v1210;
                    }
                    else {
                      int v1212 = v1210 + 1;
                    }
                    int v1213 = (v1210 & 1) + v1210;
                    if (v1211 != 0.5) {
                      int v1213 = v1212;
                    }
                    if (v1202.f32[1] < 0.0) {
                      int v1213 = -v1213;
                    }
                    HIDWORD(v1208) = v1213;
                    v1214 = *(char **)&v1413[8];
                    if (*(void *)&v1413[8] >= *(void *)&v1413[16])
                    {
                      uint64_t v1343 = v1208;
                      v1216 = *(char **)v1413;
                      uint64_t v1217 = (uint64_t)(*(void *)&v1413[8] - *(void *)v1413) >> 3;
                      unint64_t v1218 = v1217 + 1;
                      if ((unint64_t)(v1217 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      uint64_t v1219 = *(void *)&v1413[16] - *(void *)v1413;
                      if ((uint64_t)(*(void *)&v1413[16] - *(void *)v1413) >> 2 > v1218) {
                        unint64_t v1218 = v1219 >> 2;
                      }
                      if ((unint64_t)v1219 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v1220 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v1220 = v1218;
                      }
                      if (v1220) {
                        unint64_t v1220 = (unint64_t)sub_25B3FCAD4(v1220);
                      }
                      else {
                        uint64_t v1221 = 0;
                      }
                      v1222 = (void *)(v1220 + 8 * v1217);
                      void *v1222 = v1343;
                      v1215 = v1222 + 1;
                      if (v1214 != v1216)
                      {
                        do
                        {
                          uint64_t v1223 = *((void *)v1214 - 1);
                          v1214 -= 8;
                          *--v1222 = v1223;
                        }
                        while (v1214 != v1216);
                        v1214 = *(char **)v1413;
                      }
                      *(void *)v1413 = v1222;
                      *(void *)&v1413[16] = v1220 + 8 * v1221;
                      if (v1214) {
                        operator delete(v1214);
                      }
                    }
                    else
                    {
                      **(void **)&v1413[8] = v1208;
                      v1215 = v1214 + 8;
                    }
                    *(void *)&v1413[8] = v1215;
                    ++v1200;
                  }
                  v1224 = (void *)v1379.i64[1];
                  if (v1379.i64[1] >= (unint64_t)v1380)
                  {
                    unint64_t v1227 = 0xAAAAAAAAAAAAAAABLL * ((v1379.i64[1] - v1379.i64[0]) >> 3);
                    unint64_t v1228 = v1227 + 1;
                    if (v1227 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_25B3FBC4C();
                    }
                    v1164 = v1199;
                    if (0x5555555555555556 * ((uint64_t)(v1380 - v1379.i64[0]) >> 3) > v1228) {
                      unint64_t v1228 = 0x5555555555555556 * ((uint64_t)(v1380 - v1379.i64[0]) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1380 - v1379.i64[0]) >> 3) >= 0x555555555555555) {
                      unint64_t v1229 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v1229 = v1228;
                    }
                    *(void *)&long long v1395 = &v1380;
                    if (v1229)
                    {
                      if (v1229 > 0xAAAAAAAAAAAAAAALL) {
                        sub_25B3FA70C();
                      }
                      v1230 = (char *)operator new(24 * v1229);
                    }
                    else
                    {
                      v1230 = 0;
                    }
                    v1231 = &v1230[24 * v1227];
                    *(void *)buf = v1230;
                    *(void *)&buf[8] = v1231;
                    *(void *)&uint8_t buf[16] = v1231;
                    *(void *)&buf[24] = &v1230[24 * v1229];
                    *((void *)v1231 + 1) = 0;
                    *((void *)v1231 + 2) = 0;
                    *(void *)v1231 = 0;
                    sub_25B57FA14(v1231, *(const void **)v1413, *(uint64_t *)&v1413[8], (uint64_t)(*(void *)&v1413[8] - *(void *)v1413) >> 3);
                    uint64_t v1232 = *(void *)&buf[8];
                    uint64_t v1226 = *(void *)&buf[16] + 24;
                    *(void *)&buf[16] += 24;
                    v1233 = (void *)v1379.i64[1];
                    v1234 = (void *)v1379.i64[0];
                    if (v1379.i64[1] == v1379.i64[0])
                    {
                      int64x2_t v1236 = vdupq_n_s64(v1379.u64[1]);
                    }
                    else
                    {
                      do
                      {
                        *(void *)(v1232 - 24) = 0;
                        *(void *)(v1232 - 16) = 0;
                        v1232 -= 24;
                        *(void *)(v1232 + 16) = 0;
                        long long v1235 = *(_OWORD *)(v1233 - 3);
                        v1233 -= 3;
                        *(_OWORD *)uint64_t v1232 = v1235;
                        *(void *)(v1232 + 16) = v1233[2];
                        void *v1233 = 0;
                        v1233[1] = 0;
                        v1233[2] = 0;
                      }
                      while (v1233 != v1234);
                      int64x2_t v1236 = v1379;
                      uint64_t v1226 = *(void *)&buf[16];
                    }
                    v1379.i64[0] = v1232;
                    v1379.i64[1] = v1226;
                    *(int64x2_t *)&buf[8] = v1236;
                    uint64_t v1237 = v1380;
                    *(void *)&long long v1380 = *(void *)&buf[24];
                    *(void *)&buf[24] = v1237;
                    *(void *)buf = v1236.i64[0];
                    sub_25B43EAC4((uint64_t)buf);
                    v1225 = *(void **)v1413;
                  }
                  else
                  {
                    *(void *)v1379.i64[1] = 0;
                    v1224[1] = 0;
                    v1224[2] = 0;
                    v1225 = *(void **)v1413;
                    sub_25B57FA14(v1224, *(const void **)v1413, *(uint64_t *)&v1413[8], (uint64_t)(*(void *)&v1413[8] - *(void *)v1413) >> 3);
                    v1164 = v1199;
                    uint64_t v1226 = (uint64_t)(v1224 + 3);
                  }
                  v1379.i64[1] = v1226;
                  if (v1225) {
                    operator delete(v1225);
                  }
                  v1192 += 3;
                }
                while (v1192 != v1181);
              }
              sub_25B50CC50(buf, &v1389, &v1388);
              sub_25B496124((uint64_t)__p, 0, buf);
              char v1387 = 1;
              v1244 = (int32x2_t **)v1379.i64[1];
              for (i25 = (int32x2_t **)v1379.i64[0]; i25 != v1244; i25 += 3)
                sub_25B40B8E4(__p, *i25, i25[1], &v1387, v1238, v1239, v1240, v1241, v1242);
              long long v1395 = 0u;
              memset(buf, 0, sizeof(buf));
              sub_25B4641DC((uint64_t)&v1396, (uint64_t)__p);
              int v1403 = 0;
              long long v1401 = 0u;
              long long v1402 = 0u;
              long long v1400 = 0u;
              *(_OWORD *)buf = v1397;
              *(_OWORD *)&uint8_t buf[16] = v1398;
              long long v1395 = v1399;
              sub_25B57C228((uint64_t)&v1410, buf);
            }
          }
          float32x2_t v1194 = (float32x2_t)v1271;
          goto LABEL_1249;
        }
        uint64_t v1173 = objc_msgSend_copy(*(void **)(v1375.i64[0] + 8 * *v1170), v1162, v1163, v1265, v1266, v1267);
        v1174 = (void *)v1173;
        if (v1173)
        {
          *(_DWORD *)(v1173 + 8) = v995;
          *(_DWORD *)(v1173 + 12) = v1282;
        }
        v1175 = (float32x2_t **)(v1371 + 24 * **logf);
        sub_25B57BC60(*v1175, v1175[1]);
        if (v1174) {
          v1174[7] = v1177;
        }
        objc_msgSend_addObject_(v1284, v1176, (uint64_t)v1174);
      }
      v1168 = logf + 3;
    }
    while (logf + 3 != v1287);
  }
  sub_25B3FB178((uint64_t)&src);
  *(void *)buf = &v1365;
  sub_25B413BE8((void ***)buf);
  *(void *)buf = &v1367;
  sub_25B413BE8((void ***)buf);
  *(void *)buf = &v1371;
  sub_25B413BE8((void ***)buf);
  *(void *)buf = &v1375;
  sub_25B3F6050((void ***)buf);

  sub_25B4E66BC((uint64_t)v1299, v1284);
  sub_25B573E24(*(float32x2_t **)(a1 + 664), v1291, v1299);
  id v1245 = v1291;
  v1246 = v1299;
  sub_25B4E89C0(v1246, a3, v1247);
  memset(v1413, 0, 64);
  id v1248 = v1245;
  uint64_t v1251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1248, v1249, (uint64_t)v1413, buf, 16);
  if (v1251)
  {
    uint64_t v1252 = **(void **)&v1413[16];
    do
    {
      for (uint64_t i26 = 0; i26 != v1251; ++i26)
      {
        if (**(void **)&v1413[16] != v1252) {
          objc_enumerationMutation(v1248);
        }
        sub_25B4E89C0(*(void **)(*(void *)&v1413[8] + 8 * i26), a3, v1250);
      }
      uint64_t v1251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1248, v1254, (uint64_t)v1413, buf, 16);
    }
    while (v1251);
  }

  id v1255 = v1248;
  v1256 = v1246;
  memset(v1413, 0, 64);
  id v1257 = v1255;
  uint64_t v1259 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1257, v1258, (uint64_t)v1413, buf, 16);
  if (v1259)
  {
    uint64_t v1260 = **(void **)&v1413[16];
    do
    {
      for (uint64_t i27 = 0; i27 != v1259; ++i27)
      {
        if (**(void **)&v1413[16] != v1260) {
          objc_enumerationMutation(v1257);
        }
        sub_25B4E97D4(*(void ***)(*(void *)&v1413[8] + 8 * i27));
      }
      uint64_t v1259 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1257, v1262, (uint64_t)v1413, buf, 16);
    }
    while (v1259);
  }

  sub_25B4E97D4(v1256);
  if (v1361)
  {
    v1362 = (float *)v1361;
    operator delete(v1361);
  }

  return v1256;
}

void sub_25B5AD740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

float sub_25B5AE844(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v5 = objc_msgSend_walls(v2, v3, v4);
  uint64_t v8 = objc_msgSend_count(v5, v6, v7);

  if (!v8)
  {
    float v39 = 0.0;
    goto LABEL_77;
  }
  id v63 = v2;
  unint64_t v11 = objc_msgSend_walls(v2, v9, v10);
  sub_25B5BD26C((void **)&v78, v11);

  uint64_t v12 = v78;
  float v13 = v79;
  if (v78 != v79)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      float32x2_t v20 = vsub_f32(*v12, v12[1]);
      float v21 = sqrtf(vaddv_f32(vmul_f32(v20, v20)));
      if (v21 >= *(float *)(a1 + 200))
      {
        float v22 = atanf((float)-COERCE_FLOAT(*(_OWORD *)v12[4].f32) / COERCE_FLOAT(HIDWORD(*(void *)&v12[4])));
        if (v22 < 0.0)
        {
          float v23 = v22 + 1.57079633;
          float v22 = v23;
        }
        __float2 v24 = __sincosf_stret(v22 * 4.0);
        if (v15 >= v16)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v14) >> 2) + 1;
          if (v25 > 0x1555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v16 - (void)v14) >> 2) > v25) {
            unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v16 - (void)v14) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v14) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v26 = 0x1555555555555555;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            unint64_t v26 = (unint64_t)sub_25B478C4C(v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = v26 + 4 * ((uint64_t)(v15 - (void)v14) >> 2);
          *(__float2 *)unint64_t v28 = v24;
          *(_DWORD *)(v28 + 8) = -1;
          int v29 = (_DWORD *)v28;
          while ((void *)v15 != v14)
          {
            uint64_t v30 = *(void *)(v15 - 12);
            v15 -= 12;
            int v31 = *(_DWORD *)(v15 + 8);
            *(void *)(v29 - 3) = v30;
            v29 -= 3;
            v29[2] = v31;
          }
          unint64_t v16 = v26 + 12 * v27;
          unint64_t v15 = v28 + 12;
          if (v14) {
            operator delete(v14);
          }
          uint64_t v14 = v29;
        }
        else
        {
          *(__float2 *)unint64_t v15 = v24;
          *(_DWORD *)(v15 + 8) = -1;
          v15 += 12;
        }
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v33 = v18 - v17;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v19 - (void)v17) >> 1 > v34) {
            unint64_t v34 = (uint64_t)(v19 - (void)v17) >> 1;
          }
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            unint64_t v35 = (unint64_t)sub_25B3FBC64(v35);
          }
          else {
            uint64_t v36 = 0;
          }
          unint64_t v37 = (float *)(v35 + 4 * v33);
          *unint64_t v37 = v21;
          uint64_t v32 = v37 + 1;
          while (v18 != v17)
          {
            int v38 = *((_DWORD *)v18-- - 1);
            *((_DWORD *)v37-- - 1) = v38;
          }
          unint64_t v19 = v35 + 4 * v36;
          if (v17) {
            operator delete(v17);
          }
          unint64_t v17 = v37;
          goto LABEL_42;
        }
        *v18++ = v21;
      }
      uint64_t v32 = v18;
LABEL_42:
      v12 += 6;
      unint64_t v18 = v32;
      if (v12 == v13) {
        goto LABEL_46;
      }
    }
  }
  uint64_t v14 = 0;
  unint64_t v17 = 0;
  unint64_t v15 = 0;
LABEL_46:
  float v40 = *(float *)(a1 + 204);
  unint64_t v73 = 0;
  uint64_t v74 = 0;
  long long __p = 0;
  sub_25B58B28C(&__p, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v14) >> 2));
  float v41 = v40 * 4.0 / 180.0 * 3.14159265 * 0.5;
  sub_25B58B308((uint64_t)&v75, 1, (uint64_t)&__p, v41);
  if (__p)
  {
    unint64_t v73 = __p;
    operator delete(__p);
  }
  sub_25B573834((uint64_t)&v75);
  unint64_t v42 = v77;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  sub_25B58B28C(&v69, v75, (uint64_t)v76, 0xAAAAAAAAAAAAAAABLL * ((v76 - (unsigned char *)v75) >> 2));
  if (v42)
  {
    int v66 = 0;
    sub_25B5BECC8(v68, v42, &v66);
    int v65 = 0;
    sub_25B400C5C(&v66, v42, &v65);
    uint64_t v43 = v69;
    if (v70 != v69)
    {
      unint64_t v44 = 0;
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v70 - v69);
      int v46 = v69 + 2;
      do
      {
        unsigned int v47 = *v46 - 1;
        if (*v46 >= 1)
        {
          *((float32x2_t *)v68[0] + v47) = vmla_n_f32(*(float32x2_t *)((char *)v68[0] + 8 * v47), *(float32x2_t *)(v46 - 2), v17[v44]);
          v66[v47] = v17[v44] + v66[v47];
        }
        ++v44;
        v46 += 3;
      }
      while (v45 > v44);
    }
    uint64_t v48 = v66;
    unint64_t v49 = v66 + 1;
    BOOL v50 = v66 == v67 || v49 == v67;
    unint64_t v51 = v66;
    if (!v50)
    {
      float v52 = *v66;
      unint64_t v51 = v66;
      unint64_t v53 = v66 + 1;
      do
      {
        float v54 = *v53++;
        float v55 = v54;
        if (v52 < v54)
        {
          float v52 = v55;
          unint64_t v51 = v49;
        }
        unint64_t v49 = v53;
      }
      while (v53 != v67);
    }
    unint64_t v56 = (float *)((char *)v66 + (((char *)v51 - (char *)v66) << 30 >> 30));
    float32x2_t v57 = vld1_dup_f32(v56);
    float32x2_t v58 = vdiv_f32(*(float32x2_t *)((char *)v68[0] + (((char *)v51 - (char *)v66) << 30 >> 29)), v57);
    float v59 = atan2f(v58.f32[0], v58.f32[1]);
    if (v59 >= 0.0)
    {
      float v61 = v59;
    }
    else
    {
      float v60 = v59 + 6.28318531;
      float v61 = v60;
    }
    unsigned __int32 v67 = v48;
    operator delete(v48);
    if (v68[0])
    {
      v68[1] = v68[0];
      operator delete(v68[0]);
    }
    float v39 = v61 * 0.25;
    if (!v43) {
      goto LABEL_69;
    }
  }
  else
  {
    float v39 = 0.0;
    uint64_t v43 = v69;
    if (!v69) {
      goto LABEL_69;
    }
  }
  operator delete(v43);
LABEL_69:
  if (v75)
  {
    unint64_t v76 = v75;
    operator delete(v75);
  }
  if (v17) {
    operator delete(v17);
  }
  if (v14) {
    operator delete(v14);
  }
  id v2 = v63;
  if (v78) {
    operator delete(v78);
  }
LABEL_77:

  return v39;
}

void sub_25B5AED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a24) {
    operator delete(a24);
  }
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a29) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

id sub_25B5AEE38(void *a1, void *a2, void *a3)
{
  v18[1] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = objc_alloc(MEMORY[0x263EFF980]);
  uint64_t v9 = objc_msgSend_initWithArray_(v7, v8, (uint64_t)v5);
  if (objc_msgSend_count(v6, v10, v11))
  {
    if (a3)
    {
      float v13 = (void *)MEMORY[0x263F087E8];
      uint64_t v17 = *MEMORY[0x263EFFC48];
      v18[0] = @"Outlier Room is found!";
      uint64_t v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v12, (uint64_t)v18, &v17, 1);
      objc_msgSend_errorWithDomain_code_userInfo_(v13, v15, @"com.apple.RoomScanCoreError", -1001, v14);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend_removeObjectsAtIndexes_(v9, v12, (uint64_t)v6);
  }

  return v9;
}

void sub_25B5AEF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5AEF9C(uint64_t a1, void *a2)
{
  uint64_t v625 = *MEMORY[0x263EF8340];
  id v555 = a2;
  sub_25B5BCE18(a1 + 328);
  sub_25B5BCE18(a1 + 368);
  sub_25B5BCE18(a1 + 408);
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  *(void *)(a1 + 312) = *(void *)(a1 + 304);
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  if (*(void *)(a1 + 496))
  {
    uint64_t v3 = *(void **)(a1 + 488);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    *(void *)(a1 + 488) = 0;
    uint64_t v5 = *(void *)(a1 + 480);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)(a1 + 472) + 8 * i) = 0;
    }
    *(void *)(a1 + 496) = 0;
  }
  sub_25B5BCE18(a1 + 512);
  if (*(void *)(a1 + 600))
  {
    id v7 = *(void **)(a1 + 592);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        id v7 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 592) = 0;
    uint64_t v9 = *(void *)(a1 + 584);
    if (v9)
    {
      for (uint64_t j = 0; j != v9; ++j)
        *(void *)(*(void *)(a1 + 576) + 8 * j) = 0;
    }
    *(void *)(a1 + 600) = 0;
  }
  uint64_t v11 = *(void *)(a1 + 624);
  uint64_t v12 = *(void *)(a1 + 616);
  while (v11 != v12)
    uint64_t v11 = sub_25B3FB178(v11 - 40);
  *(void *)(a1 + 624) = v12;
  uint64_t v13 = *(void *)(a1 + 560);
  uint64_t v14 = *(void *)(a1 + 552);
  while (v13 != v14)
    uint64_t v13 = sub_25B3FACCC(v13 - 40);
  *(void *)(a1 + 560) = v14;
  *(_DWORD *)(a1 + 656) = 0;
  id v15 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  unint64_t v16 = *(void **)(a1 + 640);
  *(void *)(a1 + 640) = v15;

  id v17 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  unint64_t v18 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = v17;

  id v19 = v555;
  float v22 = objc_msgSend_array(MEMORY[0x263EFF980], v20, v21);
  uint64_t v563 = a1;
  long long v619 = 0u;
  long long v618 = 0u;
  long long v617 = 0u;
  *(_OWORD *)double v616 = 0u;
  obuint64_t j = v19;
  uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)v616, v620, 16);
  if (v26)
  {
    uint64_t v27 = *(void *)v617;
    do
    {
      for (uint64_t k = 0; k != v26; ++k)
      {
        if (*(void *)v617 != v27) {
          objc_enumerationMutation(obj);
        }
        int v29 = objc_msgSend_walls(*((void **)v616[1] + k), v24, v25, v555);
        objc_msgSend_addObjectsFromArray_(v22, v30, (uint64_t)v29);
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v24, (uint64_t)v616, v620, 16);
    }
    while (v26);
  }

  int v31 = (void *)a1;
  uint64_t v32 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = v22;

  long long v581 = 0u;
  long long v582 = 0u;
  long long v579 = 0u;
  long long v580 = 0u;
  id v33 = *(id *)(a1 + 256);
  uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v579, v608, 16);
  if (v35)
  {
    uint64_t v36 = *(void *)v580;
    do
    {
      for (uint64_t m = 0; m != v35; ++m)
      {
        if (*(void *)v580 != v36) {
          objc_enumerationMutation(v33);
        }
        int v38 = *(void **)(*((void *)&v579 + 1) + 8 * m);
        *(double *)&long long v39 = sub_25B5BC1AC(v38);
        long long v568 = v39;
        float v40 = v31;
        float v41 = (_OWORD *)v31[36];
        unint64_t v42 = v40[37];
        if ((unint64_t)v41 >= v42)
        {
          uint64_t v44 = v40[35];
          uint64_t v45 = ((uint64_t)v41 - v44) >> 4;
          if ((unint64_t)(v45 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v46 = v42 - v44;
          uint64_t v47 = v46 >> 3;
          if (v46 >> 3 <= (unint64_t)(v45 + 1)) {
            uint64_t v47 = v45 + 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            unint64_t v48 = (unint64_t)sub_25B3FFAEC(v48);
          }
          else {
            uint64_t v49 = 0;
          }
          BOOL v50 = (_OWORD *)(v48 + 16 * v45);
          *BOOL v50 = v568;
          uint64_t v43 = v50 + 1;
          float v52 = *(char **)(v563 + 280);
          unint64_t v51 = *(char **)(v563 + 288);
          if (v51 == v52)
          {
            float v54 = (void *)v563;
          }
          else
          {
            do
            {
              long long v53 = *((_OWORD *)v51 - 1);
              v51 -= 16;
              *--BOOL v50 = v53;
            }
            while (v51 != v52);
            float v54 = (void *)v563;
            unint64_t v51 = *(char **)(v563 + 280);
          }
          v54[35] = v50;
          v54[36] = v43;
          v54[37] = v48 + 16 * v49;
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *float v41 = v39;
          uint64_t v43 = v41 + 1;
        }
        *(void *)(v563 + 288) = v43;
        float32x2_t v56 = (float32x2_t)sub_25B477C40(v38).n128_u64[0];
        float32x2_t v58 = vsub_f32(v56, v57);
        float v59 = sqrtf(vaddv_f32(vmul_f32(v58, v58)));
        float v61 = *(float **)(v563 + 312);
        unint64_t v60 = *(void *)(v563 + 320);
        int v31 = (void *)v563;
        if ((unint64_t)v61 >= v60)
        {
          id v63 = *(float **)(v563 + 304);
          uint64_t v64 = v61 - v63;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          uint64_t v66 = v60 - (void)v63;
          if (v66 >> 1 > v65) {
            unint64_t v65 = v66 >> 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            unint64_t v67 = (unint64_t)sub_25B3FBC64(v67);
            id v63 = *(float **)(v563 + 304);
            float v61 = *(float **)(v563 + 312);
          }
          else
          {
            float v55 = 0;
          }
          unint64_t v68 = (float *)(v67 + 4 * v64);
          *unint64_t v68 = v59;
          uint64_t v62 = v68 + 1;
          if (v61 == v63)
          {
            int v31 = (void *)v563;
          }
          else
          {
            int v31 = (void *)v563;
            do
            {
              int v69 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v68-- - 1) = v69;
            }
            while (v61 != v63);
          }
          v31[38] = v68;
          v31[39] = v62;
          v31[40] = v67 + 4 * (void)v55;
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          float *v61 = v59;
          uint64_t v62 = v61 + 1;
        }
        v31[39] = v62;
      }
      uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v55, (uint64_t)&v579, v608, 16);
    }
    while (v35);
  }

  long long v577 = 0u;
  long long v578 = 0u;
  long long v575 = 0u;
  long long v576 = 0u;
  id v559 = *(id *)(v563 + 256);
  uint64_t v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v559, v70, (uint64_t)&v575, v607, 16);
  if (v71)
  {
    uint64_t v561 = *(void *)v576;
    do
    {
      uint64_t v72 = 0;
      uint64_t v556 = v71;
      do
      {
        if (*(void *)v576 != v561) {
          objc_enumerationMutation(v559);
        }
        unint64_t v73 = *(id *)(*((void *)&v575 + 1) + 8 * v72);
        unint64_t v78 = objc_msgSend_polygonSize(v73, v74, v75);
        float v79 = 1.0;
        if (v78 >= 3)
        {
          objc_msgSend_quad(v73, v76, v77);
          float32x4_t v569 = v80;
          objc_msgSend_quad(v73, v81, v82);
          float32x4_t v84 = vsubq_f32(v83, v569);
          float32x4_t v85 = vmulq_f32(v84, v84);
          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).f32[0]) >= 0.00001)
          {
            float32x2_t v557 = *(float32x2_t *)v85.f32;
            float32x4_t v558 = v83;
            float32x2_t v564 = *(float32x2_t *)v84.f32;
            v616[1] = 0;
            v616[0] = 0;
            *(void *)&long long v617 = 0;
            sub_25B443B1C(v616, v78);
            uint64_t v88 = 0;
            *(float *)&unsigned int v89 = vaddv_f32(v557);
            v90.i64[0] = 0x3F0000003F000000;
            v90.i64[1] = 0x3F0000003F000000;
            float32x4_t v570 = vmulq_f32(vaddq_f32(v569, v558), v90);
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v89);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v89, vmul_f32(v91, v91)));
            float32x2_t v93 = vmul_n_f32(v564, vmul_f32(v92, vrsqrts_f32((float32x2_t)v89, vmul_f32(v92, v92))).f32[0]);
            do
            {
              float32x4_t v94 = vsubq_f32(*(float32x4_t *)(objc_msgSend_polygon(v73, v86, v87, v555) + 16 * v88), v570);
              int32x2_t v95 = (int32x2_t)vmul_f32(v93, *(float32x2_t *)v94.f32);
              LODWORD(v96) = vadd_f32((float32x2_t)v95, (float32x2_t)vdup_lane_s32(v95, 1)).u32[0];
              HIDWORD(v96) = v94.i32[2];
              uint64_t v97 = (char *)v616[1];
              if (v616[1] >= (void *)v617)
              {
                uint64_t v565 = v96;
                uint64_t v99 = (char *)v616[0];
                int64_t v100 = ((char *)v616[1] - (char *)v616[0]) >> 3;
                unint64_t v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v102 = v617 - (unint64_t)v616[0];
                if ((uint64_t)(v617 - (unint64_t)v616[0]) >> 2 > v101) {
                  unint64_t v101 = v102 >> 2;
                }
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v103 = v101;
                }
                if (v103) {
                  unint64_t v103 = (unint64_t)sub_25B3FCAD4(v103);
                }
                else {
                  uint64_t v86 = 0;
                }
                double v104 = (void *)(v103 + 8 * v100);
                void *v104 = v565;
                uint64_t v98 = v104 + 1;
                if (v97 != v99)
                {
                  do
                  {
                    uint64_t v105 = *((void *)v97 - 1);
                    v97 -= 8;
                    *--double v104 = v105;
                  }
                  while (v97 != v99);
                  uint64_t v97 = (char *)v616[0];
                }
                v616[0] = v104;
                *(void *)&long long v617 = v103 + 8 * (void)v86;
                if (v97) {
                  operator delete(v97);
                }
              }
              else
              {
                *(void *)v616[1] = v96;
                uint64_t v98 = v97 + 8;
              }
              v616[1] = v98;
              ++v88;
            }
            while (v88 != v78);
            float v614 = 0;
            long long __p = 0;
            unint64_t v615 = 0;
            sub_25B443B1C(&__p, 4uLL);
            for (uint64_t n = 0; n != 4; ++n)
            {
              objc_msgSend_quad(v73, v106, v107);
              DWORD2(v620[0]) = v109;
              DWORD2(v620[1]) = v110;
              int v622 = v111;
              *(void *)&v620[0] = v112;
              *(void *)&v620[1] = v113;
              int v624 = v114;
              uint64_t v621 = v115;
              uint64_t v623 = v116;
              float32x4_t v117 = vsubq_f32((float32x4_t)v620[n], v570);
              int32x2_t v118 = (int32x2_t)vmul_f32(v93, *(float32x2_t *)v117.f32);
              LODWORD(v119) = vadd_f32((float32x2_t)v118, (float32x2_t)vdup_lane_s32(v118, 1)).u32[0];
              HIDWORD(v119) = v117.i32[2];
              uint64_t v120 = v614;
              if ((unint64_t)v614 >= v615)
              {
                uint64_t v566 = v119;
                unint64_t v122 = __p;
                uint64_t v123 = ((char *)v614 - (unsigned char *)__p) >> 3;
                unint64_t v124 = v123 + 1;
                if ((unint64_t)(v123 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v125 = v615 - (void)__p;
                if ((uint64_t)(v615 - (void)__p) >> 2 > v124) {
                  unint64_t v124 = v125 >> 2;
                }
                if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v126 = v124;
                }
                if (v126) {
                  unint64_t v126 = (unint64_t)sub_25B3FCAD4(v126);
                }
                else {
                  float v106 = 0;
                }
                uint64_t v127 = (void *)(v126 + 8 * v123);
                v117.i32[1] = HIDWORD(v566);
                *uint64_t v127 = v566;
                uint64_t v121 = v127 + 1;
                if (v120 != v122)
                {
                  do
                  {
                    uint64_t v128 = *--v120;
                    v117.i32[1] = HIDWORD(v128);
                    *--uint64_t v127 = v128;
                  }
                  while (v120 != v122);
                  uint64_t v120 = __p;
                }
                long long __p = v127;
                unint64_t v615 = v126 + 8 * (void)v106;
                if (v120) {
                  operator delete(v120);
                }
              }
              else
              {
                *float v614 = v119;
                uint64_t v121 = v120 + 1;
              }
              float v614 = v121;
            }
            size_t v129 = v616[0];
            v117.i32[0] = 1008981770;
            sub_25B57B8E8((unint64_t *)v620, (float32x2_t *)v616[0], (float32x2_t *)v616[1], (float32x2_t **)&__p, *(double *)v117.i64);
            long long v130 = v620[0];
            uint64_t v131 = *(void *)&v620[1];
            if (__p) {
              operator delete(__p);
            }
            if (v129) {
              operator delete(v129);
            }
            float v79 = (float)(unint64_t)v130 / (float)(unint64_t)(*((void *)&v130 + 1) - v130 + v131);
            uint64_t v71 = v556;
          }
        }

        if (v79 > *(float *)(v563 + 168) && v73 != 0)
        {
          v73[2] = v73[1];
          v73[11] = v73[10];
          v73[5] = v73[4];
          v73[8] = v73[7];
        }
        ++v72;
      }
      while (v72 != v71);
      uint64_t v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v559, v132, (uint64_t)&v575, v607, 16);
    }
    while (v71);
  }

  id v134 = obj;
  unint64_t v137 = objc_msgSend_array(MEMORY[0x263EFF980], v135, v136);
  long long v619 = 0u;
  long long v618 = 0u;
  long long v617 = 0u;
  *(_OWORD *)double v616 = 0u;
  id v138 = v134;
  uint64_t v142 = objc_msgSend_countByEnumeratingWithState_objects_count_(v138, v139, (uint64_t)v616, v620, 16);
  if (v142)
  {
    uint64_t v143 = *(void *)v617;
    do
    {
      for (iuint64_t i = 0; ii != v142; ++ii)
      {
        if (*(void *)v617 != v143) {
          objc_enumerationMutation(v138);
        }
        float v145 = (void *)*((void *)v616[1] + ii);
        float v146 = objc_msgSend_doors(v145, v140, v141, v555);
        objc_msgSend_addObjectsFromArray_(v137, v147, (uint64_t)v146);

        float32x2_t v150 = objc_msgSend_opendoors(v145, v148, v149);
        objc_msgSend_addObjectsFromArray_(v137, v151, (uint64_t)v150);

        float v154 = objc_msgSend_openings(v145, v152, v153);
        objc_msgSend_addObjectsFromArray_(v137, v155, (uint64_t)v154);
      }
      uint64_t v142 = objc_msgSend_countByEnumeratingWithState_objects_count_(v138, v140, (uint64_t)v616, v620, 16);
    }
    while (v142);
  }

  unint64_t v156 = *(void **)(v563 + 264);
  *(void *)(v563 + 264) = v137;

  unint64_t v157 = (unint64_t)v138;
  unint64_t v160 = objc_msgSend_array(MEMORY[0x263EFF980], v158, v159);
  long long v619 = 0u;
  long long v618 = 0u;
  long long v617 = 0u;
  *(_OWORD *)double v616 = 0u;
  id v161 = (id)v157;
  uint64_t v165 = objc_msgSend_countByEnumeratingWithState_objects_count_(v161, v162, (uint64_t)v616, v620, 16);
  if (v165)
  {
    uint64_t v166 = *(void *)v617;
    do
    {
      for (uint64_t jj = 0; jj != v165; ++jj)
      {
        if (*(void *)v617 != v166) {
          objc_enumerationMutation(v161);
        }
        float v168 = objc_msgSend_windows(*((void **)v616[1] + jj), v163, v164, v555);
        objc_msgSend_addObjectsFromArray_(v160, v169, (uint64_t)v168);
      }
      uint64_t v165 = objc_msgSend_countByEnumeratingWithState_objects_count_(v161, v163, (uint64_t)v616, v620, 16);
    }
    while (v165);
  }

  unint64_t v170 = *(void **)(v563 + 272);
  *(void *)(v563 + 272) = v160;

  id v171 = v161;
  long long v603 = 0u;
  long long v604 = 0u;
  long long v605 = 0u;
  long long v606 = 0u;
  id v567 = v171;
  uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v567, v172, (uint64_t)&v603, v620, 16);
  if (v173)
  {
    unint64_t v157 = 0;
    uint64_t v176 = 0;
    uint64_t v571 = *(void *)v604;
    do
    {
      uint64_t v177 = v173;
      for (kuint64_t k = 0; kk != v177; ++kk)
      {
        if (*(void *)v604 != v571) {
          objc_enumerationMutation(v567);
        }
        unint64_t v179 = *(void **)(*((void *)&v603 + 1) + 8 * kk);
        long long v599 = 0u;
        long long v600 = 0u;
        long long v601 = 0u;
        long long v602 = 0u;
        uint64_t v180 = objc_msgSend_walls(v179, v174, v175, v555);
        uint64_t v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v181, (uint64_t)&v599, v616, 16);
        if (v183)
        {
          uint64_t v184 = 0;
          uint64_t v185 = *(void *)v600;
          do
          {
            for (muint64_t m = 0; mm != v183; ++mm)
            {
              if (*(void *)v600 != v185) {
                objc_enumerationMutation(v180);
              }
              uint64_t v187 = *(void *)(*((void *)&v599 + 1) + 8 * mm);
              if (v187)
              {
                *(void *)(v187 + 160) = v176;
                *(void *)(v187 + 168) = v184 + mm;
                *(void *)(v187 + 176) = v157 + mm;
                *(_DWORD *)(v187 + 112) = v176;
                *(_WORD *)(v187 + 106) = 0;
              }
            }
            uint64_t v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v182, (uint64_t)&v599, v616, 16);
            v157 += mm;
            v184 += mm;
          }
          while (v183);
        }

        long long v597 = 0u;
        long long v598 = 0u;
        long long v595 = 0u;
        long long v596 = 0u;
        uint64_t v190 = objc_msgSend_windows(v179, v188, v189);
        uint64_t v193 = objc_msgSend_countByEnumeratingWithState_objects_count_(v190, v191, (uint64_t)&v595, &__p, 16);
        if (v193)
        {
          uint64_t v194 = 0;
          uint64_t v195 = *(void *)v596;
          do
          {
            for (nuint64_t n = 0; nn != v193; ++nn)
            {
              if (*(void *)v596 != v195) {
                objc_enumerationMutation(v190);
              }
              uint64_t v197 = *(void *)(*((void *)&v595 + 1) + 8 * nn);
              if (v197)
              {
                *(void *)(v197 + 160) = v176;
                *(void *)(v197 + 168) = v194 + nn;
                *(_DWORD *)(v197 + 112) = v176;
                *(_WORD *)(v197 + 106) = 0;
              }
            }
            uint64_t v193 = objc_msgSend_countByEnumeratingWithState_objects_count_(v190, v192, (uint64_t)&v595, &__p, 16);
            v194 += nn;
          }
          while (v193);
        }

        long long v593 = 0u;
        long long v594 = 0u;
        long long v591 = 0u;
        long long v592 = 0u;
        uint64_t v200 = objc_msgSend_doors(v179, v198, v199);
        uint64_t v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v200, v201, (uint64_t)&v591, v612, 16);
        if (v203)
        {
          uint64_t v204 = 0;
          uint64_t v205 = *(void *)v592;
          do
          {
            for (uint64_t i1 = 0; i1 != v203; ++i1)
            {
              if (*(void *)v592 != v205) {
                objc_enumerationMutation(v200);
              }
              uint64_t v207 = *(void *)(*((void *)&v591 + 1) + 8 * i1);
              if (v207)
              {
                *(void *)(v207 + 160) = v176;
                *(void *)(v207 + 168) = v204 + i1;
                *(_DWORD *)(v207 + 112) = v176;
                *(_WORD *)(v207 + 106) = 0;
              }
            }
            uint64_t v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v200, v202, (uint64_t)&v591, v612, 16);
            v204 += i1;
          }
          while (v203);
        }

        double v210 = objc_msgSend_doors(v179, v208, v209);
        uint64_t v213 = objc_msgSend_count(v210, v211, v212);

        long long v589 = 0u;
        long long v590 = 0u;
        long long v587 = 0u;
        long long v588 = 0u;
        uint64_t v216 = objc_msgSend_opendoors(v179, v214, v215);
        uint64_t v219 = objc_msgSend_countByEnumeratingWithState_objects_count_(v216, v217, (uint64_t)&v587, &v610, 16);
        if (v219)
        {
          uint64_t v220 = *(void *)v588;
          do
          {
            for (uint64_t i2 = 0; i2 != v219; ++i2)
            {
              if (*(void *)v588 != v220) {
                objc_enumerationMutation(v216);
              }
              uint64_t v222 = *(void *)(*((void *)&v587 + 1) + 8 * i2);
              if (v222)
              {
                *(void *)(v222 + 160) = v176;
                *(void *)(v222 + 168) = v213 + i2;
                *(_DWORD *)(v222 + 112) = v176;
                *(_WORD *)(v222 + 106) = 0;
              }
            }
            uint64_t v219 = objc_msgSend_countByEnumeratingWithState_objects_count_(v216, v218, (uint64_t)&v587, &v610, 16);
            v213 += i2;
          }
          while (v219);
        }

        long long v225 = objc_msgSend_doors(v179, v223, v224);
        uint64_t v228 = objc_msgSend_count(v225, v226, v227);
        unint64_t v231 = objc_msgSend_opendoors(v179, v229, v230);
        uint64_t v234 = objc_msgSend_count(v231, v232, v233);

        long long v585 = 0u;
        long long v586 = 0u;
        long long v583 = 0u;
        long long v584 = 0u;
        uint64_t v237 = objc_msgSend_openings(v179, v235, v236);
        uint64_t v240 = objc_msgSend_countByEnumeratingWithState_objects_count_(v237, v238, (uint64_t)&v583, v609, 16);
        if (v240)
        {
          uint64_t v241 = v234 + v228;
          uint64_t v242 = *(void *)v584;
          do
          {
            for (uint64_t i3 = 0; i3 != v240; ++i3)
            {
              if (*(void *)v584 != v242) {
                objc_enumerationMutation(v237);
              }
              uint64_t v244 = *(void *)(*((void *)&v583 + 1) + 8 * i3);
              if (v244)
              {
                *(void *)(v244 + 160) = v176;
                *(void *)(v244 + 168) = v241 + i3;
                *(_DWORD *)(v244 + 112) = v176;
                *(_WORD *)(v244 + 106) = 0;
              }
            }
            uint64_t v240 = objc_msgSend_countByEnumeratingWithState_objects_count_(v237, v239, (uint64_t)&v583, v609, 16);
            v241 += i3;
          }
          while (v240);
        }

        ++v176;
      }
      uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v567, v174, (uint64_t)&v603, v620, 16);
    }
    while (v173);
  }

  unint64_t v245 = objc_alloc_init(RSMultiRoomFloorEstimation);
  unint64_t v246 = *(void **)(v563 + 664);
  *(void *)(v563 + 664) = v245;

  unint64_t v249 = objc_msgSend_count(v567, v247, v248);
  unint64_t v250 = v249;
  memset(v620, 0, 24);
  v616[0] = v620;
  LOBYTE(v616[1]) = 0;
  if (v249)
  {
    if (v249 >= 0x666666666666667) {
      sub_25B3FBC4C();
    }
    unint64_t v251 = (char *)operator new(40 * v249);
    unint64_t v252 = (unint64_t)&v251[40 * v250];
    *(void *)&v620[0] = v251;
    *(void *)&v620[1] = v252;
    uint64_t v253 = v251;
    do
    {
      *(_OWORD *)uint64_t v253 = 0uLL;
      *((_OWORD *)v253 + 1) = 0uLL;
      *((_DWORD *)v253 + 8) = 1065353216;
      v253 += 40;
    }
    while (v253 != (char *)v252);
    *((void *)&v620[0] + 1) = &v251[40 * v250];
  }
  else
  {
    unint64_t v252 = 0;
    unint64_t v251 = 0;
  }
  float32x2_t v562 = (void **)(v563 + 552);
  uint64_t v254 = *(void *)(v563 + 552);
  if (v254)
  {
    uint64_t v255 = *(void *)(v563 + 560);
    uint64_t v256 = *(void **)(v563 + 552);
    if (v255 != v254)
    {
      do
        uint64_t v255 = sub_25B3FACCC(v255 - 40);
      while (v255 != v254);
      uint64_t v256 = *v562;
    }
    *(void *)(v563 + 560) = v254;
    operator delete(v256);
    float32x2_t *v562 = 0;
    *(void *)(v563 + 560) = 0;
    *(void *)(v563 + 568) = 0;
    unint64_t v251 = *(char **)&v620[0];
    int64x2_t v257 = *(int64x2_t *)((char *)v620 + 8);
  }
  else
  {
    int64x2_t v257 = vdupq_n_s64(v252);
  }
  *(void *)(v563 + 552) = v251;
  *(int64x2_t *)(v563 + 560) = v257;
  memset(v620, 0, 24);
  v616[0] = v620;
  sub_25B5A5DD0((void ***)v616);
  for (unint64_t i4 = 0; objc_msgSend_count(v567, v258, v259, v555) > i4; ++i4)
  {
    char v263 = objc_msgSend_objectAtIndexedSubscript_(v567, v261, i4);
    BOOL v264 = v263 == 0;

    if (!v264)
    {
      objc_msgSend_objectAtIndexedSubscript_(v567, v258, i4);
      id v267 = (id)objc_claimAutoreleasedReturnValue();
      unint64_t v157 = 0;
      memset(v620, 0, sizeof(v620));
      LODWORD(v621) = 1065353216;
      while (1)
      {
        uint64_t v268 = objc_msgSend_walls(v267, v265, v266);
        BOOL v271 = objc_msgSend_count(v268, v269, v270) > v157;

        if (!v271) {
          break;
        }
        v616[0] = (void *)v157;
        uint64_t v274 = sub_25B5BD6B0((uint64_t)v620, (int *)v616);
        unint64_t v275 = *(void **)v274;
        if (*(void *)v274)
        {
          *((void *)v274 + 1) = v275;
          operator delete(v275);
          *(void *)uint64_t v274 = 0;
          *((void *)v274 + 1) = 0;
          *((void *)v274 + 2) = 0;
        }
        *(void *)uint64_t v274 = 0;
        *((void *)v274 + 1) = 0;
        *((void *)v274 + 2) = 0;
        v616[0] = (void *)(v157 | 0x100000000);
        uint64_t v276 = sub_25B5BD6B0((uint64_t)v620, (int *)v616);
        int v277 = *(void **)v276;
        if (*(void *)v276)
        {
          *((void *)v276 + 1) = v277;
          operator delete(v277);
          *(void *)uint64_t v276 = 0;
          *((void *)v276 + 1) = 0;
          *((void *)v276 + 2) = 0;
        }
        *(void *)uint64_t v276 = 0;
        *((void *)v276 + 1) = 0;
        ++v157;
        *((void *)v276 + 2) = 0;
      }
      for (unint64_t i5 = 0; ; ++i5)
      {
        uint64_t v279 = objc_msgSend_walls(v267, v272, v273);
        BOOL v282 = objc_msgSend_count(v279, v280, v281) > i5;

        if (!v282) {
          break;
        }
        uint64_t v285 = objc_msgSend_walls(v267, v283, v284);
        id v287 = objc_msgSend_objectAtIndexedSubscript_(v285, v286, i5);

        if (v287)
        {
          long long __p = (void *)sub_25B477C40(v287).n128_u64[0];
          float v614 = v290;
          unint64_t v157 = i5 | 0x100000000;
          uint64_t v291 = i5;
          while (1)
          {
            uint64_t v292 = objc_msgSend_walls(v267, v288, v289);
            BOOL v295 = objc_msgSend_count(v292, v293, v294) > (unint64_t)++v291;

            if (!v295) {
              break;
            }
            uint64_t v298 = objc_msgSend_walls(v267, v296, v297);
            uint64_t v300 = objc_msgSend_objectAtIndexedSubscript_(v298, v299, v291);

            if (v300)
            {
              float32x2_t v301 = (float32x2_t)sub_25B477C40(v300).n128_u64[0];
              float32x2_t v303 = v302;
              v612[0] = v301;
              v612[1] = v302;
              sub_25B40E03C((float **)v616, (float32x2_t *)&__p, v612);
              if (v616[0] == v616[1])
              {
                uint64_t v305 = (float *)v616[0];
              }
              else
              {
                uint64_t v304 = (float *)((char *)v616[0] + 4);
                uint64_t v305 = (float *)v616[0];
                if ((char *)v616[0] + 4 != v616[1])
                {
                  float v306 = *(float *)v616[0];
                  uint64_t v305 = (float *)v616[0];
                  BOOL v307 = (float *)((char *)v616[0] + 4);
                  do
                  {
                    float v308 = *v307++;
                    float v309 = v308;
                    if (v308 < v306)
                    {
                      float v306 = v309;
                      uint64_t v305 = v304;
                    }
                    uint64_t v304 = v307;
                  }
                  while (v307 != v616[1]);
                }
              }
              switch(((char *)v305 - (char *)v616[0]) >> 2)
              {
                case 0:
                  uint32x2_t v310 = (uint32x2_t)vceq_f32((float32x2_t)__p, v301);
                  if ((vpmin_u32(v310, v310).u32[0] & 0x80000000) == 0) {
                    goto LABEL_238;
                  }
                  int v610 = i5;
                  int v611 = 0;
                  float32x2_t v311 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  float v312 = v311;
                  unint64_t v314 = (uint64_t *)*((void *)v311 + 1);
                  unint64_t v313 = *((void *)v311 + 2);
                  if ((unint64_t)v314 >= v313)
                  {
                    uint64_t v375 = ((uint64_t)v314 - *(void *)v311) >> 3;
                    if ((unint64_t)(v375 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v376 = v313 - *(void *)v311;
                    uint64_t v377 = v376 >> 2;
                    if (v376 >> 2 <= (unint64_t)(v375 + 1)) {
                      uint64_t v377 = v375 + 1;
                    }
                    if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v378 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v378 = v377;
                    }
                    if (v378) {
                      unint64_t v378 = (unint64_t)sub_25B3FCAD4(v378);
                    }
                    else {
                      uint64_t v379 = 0;
                    }
                    float32x2_t v450 = (uint64_t *)(v378 + 8 * v375);
                    uint64_t *v450 = v291;
                    float v315 = v450 + 1;
                    float32x2_t v452 = *(char **)v312;
                    float32x2_t v451 = (char *)*((void *)v312 + 1);
                    if (v451 != *(char **)v312)
                    {
                      do
                      {
                        uint64_t v453 = *((void *)v451 - 1);
                        v451 -= 8;
                        *--float32x2_t v450 = v453;
                      }
                      while (v451 != v452);
                      float32x2_t v451 = *(char **)v312;
                    }
                    *(void *)float v312 = v450;
                    *((void *)v312 + 1) = v315;
                    *((void *)v312 + 2) = v378 + 8 * v379;
                    if (v451) {
                      operator delete(v451);
                    }
                  }
                  else
                  {
                    uint64_t *v314 = v291;
                    float v315 = v314 + 1;
                  }
                  *((void *)v312 + 1) = v315;
                  int v610 = v291;
                  int v611 = 0;
                  int32x2_t v454 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  unint64_t v419 = v454;
                  float32x2_t v456 = (unint64_t *)*((void *)v454 + 1);
                  unint64_t v455 = *((void *)v454 + 2);
                  if ((unint64_t)v456 < v455) {
                    goto LABEL_399;
                  }
                  uint64_t v457 = ((uint64_t)v456 - *(void *)v454) >> 3;
                  if ((unint64_t)(v457 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v458 = v455 - *(void *)v454;
                  uint64_t v459 = v458 >> 2;
                  if (v458 >> 2 <= (unint64_t)(v457 + 1)) {
                    uint64_t v459 = v457 + 1;
                  }
                  if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v425 = v459;
                  }
                  if (v425) {
                    unint64_t v425 = (unint64_t)sub_25B3FCAD4(v425);
                  }
                  else {
                    uint64_t v426 = 0;
                  }
                  unint64_t v427 = (unint64_t *)(v425 + 8 * v457);
                  *unint64_t v427 = i5;
                  unint64_t v428 = v427 + 1;
                  int v473 = *(char **)v419;
                  uint64_t v429 = (char *)*((void *)v419 + 1);
                  if (v429 == *(char **)v419) {
                    goto LABEL_424;
                  }
                  do
                  {
                    unint64_t v474 = *((void *)v429 - 1);
                    v429 -= 8;
                    *--unint64_t v427 = v474;
                  }
                  while (v429 != v473);
                  goto LABEL_423;
                case 1:
                  uint32x2_t v328 = (uint32x2_t)vceq_f32((float32x2_t)__p, v303);
                  if ((vpmin_u32(v328, v328).u32[0] & 0x80000000) == 0) {
                    goto LABEL_238;
                  }
                  int v610 = i5;
                  int v611 = 0;
                  float32x2_t v360 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  float32x2_t v361 = v360;
                  float32x2_t v363 = (uint64_t *)*((void *)v360 + 1);
                  unint64_t v362 = *((void *)v360 + 2);
                  if ((unint64_t)v363 >= v362)
                  {
                    uint64_t v380 = ((uint64_t)v363 - *(void *)v360) >> 3;
                    if ((unint64_t)(v380 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v381 = v362 - *(void *)v360;
                    uint64_t v382 = v381 >> 2;
                    if (v381 >> 2 <= (unint64_t)(v380 + 1)) {
                      uint64_t v382 = v380 + 1;
                    }
                    if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v383 = v382;
                    }
                    if (v383) {
                      unint64_t v383 = (unint64_t)sub_25B3FCAD4(v383);
                    }
                    else {
                      uint64_t v384 = 0;
                    }
                    float32x2_t v460 = (uint64_t *)(v383 + 8 * v380);
                    *float32x2_t v460 = v291 | 0x100000000;
                    float32x2_t v364 = v460 + 1;
                    float32x2_t v462 = *(char **)v361;
                    float32x2_t v461 = (char *)*((void *)v361 + 1);
                    if (v461 != *(char **)v361)
                    {
                      do
                      {
                        uint64_t v463 = *((void *)v461 - 1);
                        v461 -= 8;
                        *--float32x2_t v460 = v463;
                      }
                      while (v461 != v462);
                      float32x2_t v461 = *(char **)v361;
                    }
                    *(void *)float32x2_t v361 = v460;
                    *((void *)v361 + 1) = v364;
                    *((void *)v361 + 2) = v383 + 8 * v384;
                    if (v461) {
                      operator delete(v461);
                    }
                  }
                  else
                  {
                    *float32x2_t v363 = v291 | 0x100000000;
                    float32x2_t v364 = v363 + 1;
                  }
                  *((void *)v361 + 1) = v364;
                  int v610 = v291;
                  int v611 = 1;
                  unint64_t v464 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  unint64_t v419 = v464;
                  float32x2_t v456 = (unint64_t *)*((void *)v464 + 1);
                  unint64_t v465 = *((void *)v464 + 2);
                  if ((unint64_t)v456 < v465)
                  {
LABEL_399:
                    *float32x2_t v456 = i5;
                    unint64_t v428 = v456 + 1;
                    goto LABEL_426;
                  }
                  uint64_t v466 = ((uint64_t)v456 - *(void *)v464) >> 3;
                  if ((unint64_t)(v466 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v467 = v465 - *(void *)v464;
                  uint64_t v468 = v467 >> 2;
                  if (v467 >> 2 <= (unint64_t)(v466 + 1)) {
                    uint64_t v468 = v466 + 1;
                  }
                  if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v425 = v468;
                  }
                  if (v425) {
                    unint64_t v425 = (unint64_t)sub_25B3FCAD4(v425);
                  }
                  else {
                    uint64_t v426 = 0;
                  }
                  unint64_t v427 = (unint64_t *)(v425 + 8 * v466);
                  *unint64_t v427 = i5;
                  unint64_t v428 = v427 + 1;
                  uint64_t v475 = *(char **)v419;
                  uint64_t v429 = (char *)*((void *)v419 + 1);
                  if (v429 == *(char **)v419) {
                    goto LABEL_424;
                  }
                  do
                  {
                    unint64_t v476 = *((void *)v429 - 1);
                    v429 -= 8;
                    *--unint64_t v427 = v476;
                  }
                  while (v429 != v475);
                  goto LABEL_423;
                case 2:
                  uint32x2_t v316 = (uint32x2_t)vceq_f32((float32x2_t)v614, v301);
                  if ((vpmin_u32(v316, v316).u32[0] & 0x80000000) == 0) {
                    goto LABEL_238;
                  }
                  int v610 = i5;
                  int v611 = 1;
                  float32x2_t v317 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  float v318 = v317;
                  float v320 = (uint64_t *)*((void *)v317 + 1);
                  unint64_t v319 = *((void *)v317 + 2);
                  if ((unint64_t)v320 >= v319)
                  {
                    uint64_t v365 = ((uint64_t)v320 - *(void *)v317) >> 3;
                    if ((unint64_t)(v365 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v366 = v319 - *(void *)v317;
                    uint64_t v367 = v366 >> 2;
                    if (v366 >> 2 <= (unint64_t)(v365 + 1)) {
                      uint64_t v367 = v365 + 1;
                    }
                    if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v368 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v368 = v367;
                    }
                    if (v368) {
                      unint64_t v368 = (unint64_t)sub_25B3FCAD4(v368);
                    }
                    else {
                      uint64_t v369 = 0;
                    }
                    float32x2_t v432 = (uint64_t *)(v368 + 8 * v365);
                    uint64_t *v432 = v291;
                    unint64_t v321 = v432 + 1;
                    size_t v434 = *(char **)v318;
                    uint64_t v433 = (char *)*((void *)v318 + 1);
                    if (v433 != *(char **)v318)
                    {
                      do
                      {
                        uint64_t v435 = *((void *)v433 - 1);
                        v433 -= 8;
                        *--float32x2_t v432 = v435;
                      }
                      while (v433 != v434);
                      uint64_t v433 = *(char **)v318;
                    }
                    *(void *)float v318 = v432;
                    *((void *)v318 + 1) = v321;
                    *((void *)v318 + 2) = v368 + 8 * v369;
                    if (v433) {
                      operator delete(v433);
                    }
                  }
                  else
                  {
                    *float v320 = v291;
                    unint64_t v321 = v320 + 1;
                  }
                  *((void *)v318 + 1) = v321;
                  int v610 = v291;
                  int v611 = 0;
                  BOOL v436 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  unint64_t v419 = v436;
                  uint64_t v421 = (unint64_t *)*((void *)v436 + 1);
                  unint64_t v437 = *((void *)v436 + 2);
                  if ((unint64_t)v421 < v437) {
                    goto LABEL_368;
                  }
                  uint64_t v438 = ((uint64_t)v421 - *(void *)v436) >> 3;
                  if ((unint64_t)(v438 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v439 = v437 - *(void *)v436;
                  uint64_t v440 = v439 >> 2;
                  if (v439 >> 2 <= (unint64_t)(v438 + 1)) {
                    uint64_t v440 = v438 + 1;
                  }
                  if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v425 = v440;
                  }
                  if (v425) {
                    unint64_t v425 = (unint64_t)sub_25B3FCAD4(v425);
                  }
                  else {
                    uint64_t v426 = 0;
                  }
                  unint64_t v427 = (unint64_t *)(v425 + 8 * v438);
                  *unint64_t v427 = v157;
                  unint64_t v428 = v427 + 1;
                  size_t v469 = *(char **)v419;
                  uint64_t v429 = (char *)*((void *)v419 + 1);
                  if (v429 == *(char **)v419) {
                    goto LABEL_424;
                  }
                  do
                  {
                    unint64_t v470 = *((void *)v429 - 1);
                    v429 -= 8;
                    *--unint64_t v427 = v470;
                  }
                  while (v429 != v469);
                  goto LABEL_423;
                case 3:
                  uint32x2_t v322 = (uint32x2_t)vceq_f32((float32x2_t)v614, v303);
                  if ((vpmin_u32(v322, v322).u32[0] & 0x80000000) == 0) {
                    goto LABEL_238;
                  }
                  int v610 = i5;
                  int v611 = 1;
                  float32x2_t v323 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  uint64_t v324 = v323;
                  uint64_t v326 = (uint64_t *)*((void *)v323 + 1);
                  unint64_t v325 = *((void *)v323 + 2);
                  if ((unint64_t)v326 >= v325)
                  {
                    uint64_t v370 = ((uint64_t)v326 - *(void *)v323) >> 3;
                    if ((unint64_t)(v370 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v371 = v325 - *(void *)v323;
                    uint64_t v372 = v371 >> 2;
                    if (v371 >> 2 <= (unint64_t)(v370 + 1)) {
                      uint64_t v372 = v370 + 1;
                    }
                    if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v373 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v373 = v372;
                    }
                    if (v373) {
                      unint64_t v373 = (unint64_t)sub_25B3FCAD4(v373);
                    }
                    else {
                      uint64_t v374 = 0;
                    }
                    float32x2_t v441 = (uint64_t *)(v373 + 8 * v370);
                    *float32x2_t v441 = v291 | 0x100000000;
                    uint64_t v327 = v441 + 1;
                    float32x2_t v443 = *(char **)v324;
                    float32x2_t v442 = (char *)*((void *)v324 + 1);
                    if (v442 != *(char **)v324)
                    {
                      do
                      {
                        uint64_t v444 = *((void *)v442 - 1);
                        v442 -= 8;
                        *--float32x2_t v441 = v444;
                      }
                      while (v442 != v443);
                      float32x2_t v442 = *(char **)v324;
                    }
                    *(void *)uint64_t v324 = v441;
                    *((void *)v324 + 1) = v327;
                    *((void *)v324 + 2) = v373 + 8 * v374;
                    if (v442) {
                      operator delete(v442);
                    }
                  }
                  else
                  {
                    *uint64_t v326 = v291 | 0x100000000;
                    uint64_t v327 = v326 + 1;
                  }
                  *((void *)v324 + 1) = v327;
                  int v610 = v291;
                  int v611 = 1;
                  float32x4_t v445 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  unint64_t v419 = v445;
                  uint64_t v421 = (unint64_t *)*((void *)v445 + 1);
                  unint64_t v446 = *((void *)v445 + 2);
                  if ((unint64_t)v421 < v446) {
                    goto LABEL_368;
                  }
                  uint64_t v447 = ((uint64_t)v421 - *(void *)v445) >> 3;
                  if ((unint64_t)(v447 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v448 = v446 - *(void *)v445;
                  uint64_t v449 = v448 >> 2;
                  if (v448 >> 2 <= (unint64_t)(v447 + 1)) {
                    uint64_t v449 = v447 + 1;
                  }
                  if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v425 = v449;
                  }
                  if (v425) {
                    unint64_t v425 = (unint64_t)sub_25B3FCAD4(v425);
                  }
                  else {
                    uint64_t v426 = 0;
                  }
                  unint64_t v427 = (unint64_t *)(v425 + 8 * v447);
                  *unint64_t v427 = v157;
                  unint64_t v428 = v427 + 1;
                  unint64_t v471 = *(char **)v419;
                  uint64_t v429 = (char *)*((void *)v419 + 1);
                  if (v429 == *(char **)v419) {
                    goto LABEL_424;
                  }
                  do
                  {
                    unint64_t v472 = *((void *)v429 - 1);
                    v429 -= 8;
                    *--unint64_t v427 = v472;
                  }
                  while (v429 != v471);
                  goto LABEL_423;
                default:
LABEL_238:
                  float32x2_t v329 = vsub_f32(v303, v301);
                  float v330 = vaddv_f32(vmul_f32(vsub_f32((float32x2_t)__p, v301), v329));
                  float v331 = vaddv_f32(vmul_f32(v329, v329));
                  if (v331 < 0.000001) {
                    float v331 = 0.000001;
                  }
                  float32x2_t v332 = vmla_n_f32(v301, v329, v330 / v331);
                  float32x2_t v333 = vsub_f32(v332, v301);
                  float32x2_t v334 = vsub_f32(v332, v303);
                  if (vaddv_f32(vmul_f32(v333, v334)) > 0.00001)
                  {
                    int32x2_t v335 = (int32x2_t)vmul_f32(v333, v333);
                    int32x2_t v336 = (int32x2_t)vmul_f32(v334, v334);
                    int32x2_t v337 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v335, v336), (float32x2_t)vzip2_s32(v335, v336)));
                    float32x2_t v332 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v337, 1), (float32x2_t)v337)), 0), (int8x8_t)v303, (int8x8_t)v301);
                  }
                  uint64_t v338 = v614;
                  float32x2_t v339 = vmla_n_f32(v301, v329, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v614, v301), v329)) / v331);
                  float32x2_t v340 = vsub_f32(v339, v301);
                  float32x2_t v341 = vsub_f32(v339, v303);
                  if (vaddv_f32(vmul_f32(v340, v341)) > 0.00001)
                  {
                    int32x2_t v342 = (int32x2_t)vmul_f32(v340, v340);
                    int32x2_t v343 = (int32x2_t)vmul_f32(v341, v341);
                    int32x2_t v344 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v342, v343), (float32x2_t)vzip2_s32(v342, v343)));
                    float32x2_t v339 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32(v344, 1), (float32x2_t)v344)), 0), (int8x8_t)v303, (int8x8_t)v301);
                  }
                  uint32x2_t v345 = (uint32x2_t)vceq_f32((float32x2_t)__p, v332);
                  unsigned __int32 v346 = vpmin_u32(v345, v345).u32[0];
                  if ((v346 & 0x80000000) == 0)
                  {
                    uint32x2_t v347 = (uint32x2_t)vceq_f32((float32x2_t)v614, v339);
                    if ((vpmin_u32(v347, v347).u32[0] & 0x80000000) == 0) {
                      goto LABEL_427;
                    }
                  }
                  int v610 = v291;
                  int v611 = 2;
                  float32x2_t v348 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  uint64_t v349 = *(void **)v348;
                  if (*(void *)v348)
                  {
                    *((void *)v348 + 1) = v349;
                    operator delete(v349);
                    *(void *)float32x2_t v348 = 0;
                    *((void *)v348 + 1) = 0;
                    *((void *)v348 + 2) = 0;
                  }
                  *(void *)float32x2_t v348 = 0;
                  *((void *)v348 + 1) = 0;
                  *((void *)v348 + 2) = 0;
                  if ((v346 & 0x80000000) != 0)
                  {
                    int v610 = i5;
                    int v611 = 0;
                    uint64_t v350 = sub_25B5BD6B0((uint64_t)v620, &v610);
                    float32x2_t v351 = v350;
                    uint64_t v353 = (uint64_t *)*((void *)v350 + 1);
                    unint64_t v352 = *((void *)v350 + 2);
                    if ((unint64_t)v353 >= v352)
                    {
                      uint64_t v355 = ((uint64_t)v353 - *(void *)v350) >> 3;
                      if ((unint64_t)(v355 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      uint64_t v356 = v352 - *(void *)v350;
                      uint64_t v357 = v356 >> 2;
                      if (v356 >> 2 <= (unint64_t)(v355 + 1)) {
                        uint64_t v357 = v355 + 1;
                      }
                      if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v358 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v358 = v357;
                      }
                      if (v358) {
                        unint64_t v358 = (unint64_t)sub_25B3FCAD4(v358);
                      }
                      else {
                        uint64_t v359 = 0;
                      }
                      float32x2_t v385 = (uint64_t *)(v358 + 8 * v355);
                      *float32x2_t v385 = v291 | 0x200000000;
                      id v354 = v385 + 1;
                      float v387 = *(char **)v351;
                      float32x2_t v386 = (char *)*((void *)v351 + 1);
                      if (v386 != *(char **)v351)
                      {
                        do
                        {
                          uint64_t v388 = *((void *)v386 - 1);
                          v386 -= 8;
                          *--float32x2_t v385 = v388;
                        }
                        while (v386 != v387);
                        float32x2_t v386 = *(char **)v351;
                      }
                      *(void *)float32x2_t v351 = v385;
                      *((void *)v351 + 1) = v354;
                      *((void *)v351 + 2) = v358 + 8 * v359;
                      if (v386) {
                        operator delete(v386);
                      }
                    }
                    else
                    {
                      *uint64_t v353 = v291 | 0x200000000;
                      id v354 = v353 + 1;
                    }
                    *((void *)v351 + 1) = v354;
                    int v610 = v291;
                    int v611 = 2;
                    float32x2_t v389 = sub_25B5BD6B0((uint64_t)v620, &v610);
                    float32x2_t v390 = v389;
                    float32x2_t v392 = (unint64_t *)*((void *)v389 + 1);
                    unint64_t v391 = *((void *)v389 + 2);
                    if ((unint64_t)v392 >= v391)
                    {
                      uint64_t v394 = ((uint64_t)v392 - *(void *)v389) >> 3;
                      if ((unint64_t)(v394 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      uint64_t v395 = v391 - *(void *)v389;
                      uint64_t v396 = v395 >> 2;
                      if (v395 >> 2 <= (unint64_t)(v394 + 1)) {
                        uint64_t v396 = v394 + 1;
                      }
                      if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v397 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v397 = v396;
                      }
                      if (v397) {
                        unint64_t v397 = (unint64_t)sub_25B3FCAD4(v397);
                      }
                      else {
                        uint64_t v398 = 0;
                      }
                      float32x2_t v399 = (unint64_t *)(v397 + 8 * v394);
                      unint64_t *v399 = i5;
                      int32x2_t v393 = v399 + 1;
                      int32x2_t v401 = *(char **)v390;
                      int32x2_t v400 = (char *)*((void *)v390 + 1);
                      if (v400 != *(char **)v390)
                      {
                        do
                        {
                          unint64_t v402 = *((void *)v400 - 1);
                          v400 -= 8;
                          *--float32x2_t v399 = v402;
                        }
                        while (v400 != v401);
                        int32x2_t v400 = *(char **)v390;
                      }
                      *(void *)float32x2_t v390 = v399;
                      *((void *)v390 + 1) = v393;
                      *((void *)v390 + 2) = v397 + 8 * v398;
                      if (v400) {
                        operator delete(v400);
                      }
                    }
                    else
                    {
                      unint64_t *v392 = i5;
                      int32x2_t v393 = v392 + 1;
                    }
                    *((void *)v390 + 1) = v393;
                    uint64_t v338 = v614;
                  }
                  uint32x2_t v403 = (uint32x2_t)vceq_f32((float32x2_t)v338, v339);
                  if ((vpmin_u32(v403, v403).u32[0] & 0x80000000) == 0) {
                    goto LABEL_427;
                  }
                  int v610 = i5;
                  int v611 = 1;
                  float32x2_t v404 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  float32x2_t v405 = v404;
                  float32x2_t v407 = (uint64_t *)*((void *)v404 + 1);
                  unint64_t v406 = *((void *)v404 + 2);
                  if ((unint64_t)v407 >= v406)
                  {
                    uint64_t v409 = ((uint64_t)v407 - *(void *)v404) >> 3;
                    if ((unint64_t)(v409 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v410 = v406 - *(void *)v404;
                    uint64_t v411 = v410 >> 2;
                    if (v410 >> 2 <= (unint64_t)(v409 + 1)) {
                      uint64_t v411 = v409 + 1;
                    }
                    if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v412 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v412 = v411;
                    }
                    if (v412) {
                      unint64_t v412 = (unint64_t)sub_25B3FCAD4(v412);
                    }
                    else {
                      uint64_t v413 = 0;
                    }
                    float32x2_t v414 = (uint64_t *)(v412 + 8 * v409);
                    uint64_t *v414 = v291 | 0x200000000;
                    int32x2_t v408 = v414 + 1;
                    uint64_t v416 = *(char **)v405;
                    float32x2_t v415 = (char *)*((void *)v405 + 1);
                    if (v415 != *(char **)v405)
                    {
                      do
                      {
                        uint64_t v417 = *((void *)v415 - 1);
                        v415 -= 8;
                        *--float32x2_t v414 = v417;
                      }
                      while (v415 != v416);
                      float32x2_t v415 = *(char **)v405;
                    }
                    *(void *)float32x2_t v405 = v414;
                    *((void *)v405 + 1) = v408;
                    *((void *)v405 + 2) = v412 + 8 * v413;
                    if (v415) {
                      operator delete(v415);
                    }
                  }
                  else
                  {
                    *float32x2_t v407 = v291 | 0x200000000;
                    int32x2_t v408 = v407 + 1;
                  }
                  *((void *)v405 + 1) = v408;
                  int v610 = v291;
                  int v611 = 2;
                  unint64_t v418 = sub_25B5BD6B0((uint64_t)v620, &v610);
                  unint64_t v419 = v418;
                  uint64_t v421 = (unint64_t *)*((void *)v418 + 1);
                  unint64_t v420 = *((void *)v418 + 2);
                  if ((unint64_t)v421 < v420)
                  {
LABEL_368:
                    *uint64_t v421 = v157;
                    unint64_t v428 = v421 + 1;
                  }
                  else
                  {
                    uint64_t v422 = ((uint64_t)v421 - *(void *)v418) >> 3;
                    if ((unint64_t)(v422 + 1) >> 61) {
                      sub_25B3FBC4C();
                    }
                    uint64_t v423 = v420 - *(void *)v418;
                    uint64_t v424 = v423 >> 2;
                    if (v423 >> 2 <= (unint64_t)(v422 + 1)) {
                      uint64_t v424 = v422 + 1;
                    }
                    if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v425 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v425 = v424;
                    }
                    if (v425) {
                      unint64_t v425 = (unint64_t)sub_25B3FCAD4(v425);
                    }
                    else {
                      uint64_t v426 = 0;
                    }
                    unint64_t v427 = (unint64_t *)(v425 + 8 * v422);
                    *unint64_t v427 = v157;
                    unint64_t v428 = v427 + 1;
                    float32x2_t v430 = *(char **)v419;
                    uint64_t v429 = (char *)*((void *)v419 + 1);
                    if (v429 != *(char **)v419)
                    {
                      do
                      {
                        unint64_t v431 = *((void *)v429 - 1);
                        v429 -= 8;
                        *--unint64_t v427 = v431;
                      }
                      while (v429 != v430);
LABEL_423:
                      uint64_t v429 = *(char **)v419;
                    }
LABEL_424:
                    *(void *)unint64_t v419 = v427;
                    *((void *)v419 + 1) = v428;
                    *((void *)v419 + 2) = v425 + 8 * v426;
                    if (v429) {
                      operator delete(v429);
                    }
                  }
LABEL_426:
                  *((void *)v419 + 1) = v428;
LABEL_427:
                  if (v616[0]) {
                    operator delete(v616[0]);
                  }
                  break;
              }
            }
          }
        }
      }
      uint64_t v477 = (uint64_t)*v562 + 40 * i4;
      sub_25B5BCE18(v477);
      uint64_t v478 = *(void *)&v620[0];
      *(void *)&v620[0] = 0;
      int v479 = *(void **)v477;
      *(void *)uint64_t v477 = v478;
      if (v479) {
        operator delete(v479);
      }
      uint64_t v480 = *((void *)&v620[0] + 1);
      uint64_t v481 = *(void *)&v620[1];
      *(void *)(v477 + 16) = *(void *)&v620[1];
      *(void *)(v477 + 8) = v480;
      *((void *)&v620[0] + 1) = 0;
      uint64_t v482 = *((void *)&v620[1] + 1);
      *(void *)(v477 + 24) = *((void *)&v620[1] + 1);
      *(_DWORD *)(v477 + 32) = v621;
      if (v482)
      {
        unint64_t v483 = *(void *)(v481 + 8);
        unint64_t v484 = *(void *)(v477 + 8);
        if ((v484 & (v484 - 1)) != 0)
        {
          if (v483 >= v484) {
            v483 %= v484;
          }
        }
        else
        {
          v483 &= v484 - 1;
        }
        float v485 = 0;
        *(void *)(*(void *)v477 + 8 * v483) = v477 + 16;
        v620[1] = 0uLL;
      }
      else
      {
        float v485 = *(void **)&v620[1];
      }
      sub_25B3FAE18(v485);
      unint64_t v486 = *(void **)&v620[0];
      *(void *)&v620[0] = 0;
      if (v486) {
        operator delete(v486);
      }
    }
  }
  for (unint64_t i6 = 0; objc_msgSend_count(v567, v261, v262) > i6; ++i6)
  {
    int v489 = objc_msgSend_objectAtIndexedSubscript_(v567, v488, i6);
    BOOL v490 = v489 == 0;

    if (!v490)
    {
      float v491 = objc_msgSend_objectAtIndexedSubscript_(v567, v261, i6);
      uint64_t v492 = (uint64_t)*v562 + 40 * i6;
      *(_OWORD *)uint64_t v572 = 0u;
      *(_OWORD *)unint64_t v573 = 0u;
      float v574 = *(float *)(v492 + 32);
      sub_25B3FA4B0((uint64_t)v572, *(void *)(v492 + 8));
      for (uint64_t i7 = *(uint64_t **)(v492 + 16); i7; uint64_t i7 = (uint64_t *)*i7)
      {
        int v494 = *((_DWORD *)i7 + 4);
        int v495 = *((_DWORD *)i7 + 5);
        unint64_t v496 = v495 ^ v494;
        unint64_t v497 = (unint64_t)v572[1];
        if (v572[1])
        {
          uint8x8_t v498 = (uint8x8_t)vcnt_s8((int8x8_t)v572[1]);
          v498.i16[0] = vaddlv_u8(v498);
          if (v498.u32[0] > 1uLL)
          {
            unint64_t v157 = v495 ^ v494;
            if (v572[1] <= (void *)v496) {
              unint64_t v157 = v496 % (unint64_t)v572[1];
            }
          }
          else
          {
            unint64_t v157 = ((unint64_t)v572[1] - 1) & v496;
          }
          int v499 = (uint64_t **)*((void *)v572[0] + v157);
          if (v499)
          {
            for (uint64_t i8 = *v499; i8; uint64_t i8 = (uint64_t *)*i8)
            {
              unint64_t v501 = i8[1];
              if (v501 == v496)
              {
                if (*((_DWORD *)i8 + 4) == v494 && *((_DWORD *)i8 + 5) == v495) {
                  goto LABEL_495;
                }
              }
              else
              {
                if (v498.u32[0] > 1uLL)
                {
                  if ((void *)v501 >= v572[1]) {
                    v501 %= (unint64_t)v572[1];
                  }
                }
                else
                {
                  v501 &= (unint64_t)v572[1] - 1;
                }
                if (v501 != v157) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v503 = operator new(0x30uLL);
        *uint64_t v503 = 0;
        v503[1] = v496;
        uint64_t v504 = i7[2];
        v503[3] = 0;
        v503[2] = v504;
        v503[4] = 0;
        v503[5] = 0;
        uint64_t v505 = (char *)i7[3];
        unint64_t v506 = (char *)i7[4];
        uint64_t v507 = v506 - v505;
        if (v506 != v505)
        {
          if (v507 < 0) {
            sub_25B3FBC4C();
          }
          uint64_t v508 = sub_25B3FCAD4(v507 >> 3);
          v503[3] = v508;
          v503[4] = v508;
          v503[5] = &v508[v509];
          do
          {
            uint64_t v510 = *(void *)v505;
            v505 += 8;
            *v508++ = v510;
          }
          while (v505 != v506);
          v503[4] = v508;
        }
        float v511 = (float)((unint64_t)v573[1] + 1);
        if (!v497 || (float)(v574 * (float)v497) < v511)
        {
          BOOL v512 = (v497 & (v497 - 1)) != 0;
          if (v497 < 3) {
            BOOL v512 = 1;
          }
          unint64_t v513 = v512 | (2 * v497);
          unint64_t v514 = vcvtps_u32_f32(v511 / v574);
          if (v513 <= v514) {
            size_t v515 = v514;
          }
          else {
            size_t v515 = v513;
          }
          sub_25B3FA4B0((uint64_t)v572, v515);
          unint64_t v497 = (unint64_t)v572[1];
          if (((unint64_t)v572[1] & ((unint64_t)v572[1] - 1)) != 0)
          {
            if (v572[1] <= (void *)v496) {
              unint64_t v157 = v496 % (unint64_t)v572[1];
            }
            else {
              unint64_t v157 = v496;
            }
          }
          else
          {
            unint64_t v157 = ((unint64_t)v572[1] - 1) & v496;
          }
        }
        unint64_t v516 = v572[0];
        uint64_t v517 = (void *)*((void *)v572[0] + v157);
        if (v517)
        {
          *uint64_t v503 = *v517;
        }
        else
        {
          *uint64_t v503 = v573[0];
          v573[0] = v503;
          v516[v157] = v573;
          if (!*v503) {
            goto LABEL_494;
          }
          unint64_t v518 = *(void *)(*v503 + 8);
          if ((v497 & (v497 - 1)) != 0)
          {
            if (v518 >= v497) {
              v518 %= v497;
            }
          }
          else
          {
            v518 &= v497 - 1;
          }
          uint64_t v517 = (char *)v572[0] + 8 * v518;
        }
        *uint64_t v517 = v503;
LABEL_494:
        ++v573[1];
LABEL_495:
        ;
      }
      id v519 = v491;
      uint64_t v524 = objc_msgSend_walls(v519, v520, v521);
      if (v524)
      {
        float32x2_t v525 = objc_msgSend_walls(v519, v522, v523);
        BOOL v528 = objc_msgSend_count(v525, v526, v527) == 0;

        if (!v528)
        {
          uint64_t v531 = objc_msgSend_walls(v519, v529, v530);
          sub_25B5BD26C((void **)v620, v531);

          unint64_t v534 = 0;
          float32x2_t v535 = *(void **)&v620[0];
          for (uint64_t i9 = (float32x2_t *)(*(void *)&v620[0] + 8); ; i9 += 6)
          {
            uint64_t v537 = objc_msgSend_walls(v519, v532, v533);
            BOOL v540 = objc_msgSend_count(v537, v538, v539) > v534;

            if (!v540) {
              break;
            }
            float32x2_t v543 = i9[-1];
            float32x2_t v544 = *i9;
            int32x2_t v545 = objc_msgSend_walls(v519, v541, v542);
            objc_msgSend_objectAtIndexedSubscript_(v545, v546, v534);
            int32x2_t v547 = (unsigned char *)objc_claimAutoreleasedReturnValue();
            if (v547) {
              v547[107] = 0;
            }

            float32x2_t v548 = vsub_f32(v543, v544);
            if (sqrtf(vaddv_f32(vmul_f32(v548, v548))) <= *(float *)(v563 + 212))
            {
              if (!sub_25B5BD5EC(v572, v534, 0)
                || !sub_25B5BD5EC(v572, v534, 1)
                || (v616[0] = (void *)v534,
                    uint64_t v549 = sub_25B5BD6B0((uint64_t)v572, (int *)v616),
                    *((void *)v549 + 1) == *(void *)v549)
                || (long long __p = (void *)(v534 | 0x100000000),
                    unint64_t v550 = sub_25B5BD6B0((uint64_t)v572, (int *)&__p),
                    *((void *)v550 + 1) == *(void *)v550))
              {
                unint64_t v551 = objc_msgSend_walls(v519, v532, v533);
                objc_msgSend_objectAtIndexedSubscript_(v551, v552, v534);
                uint64_t v553 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                if (v553) {
                  v553[107] = 1;
                }
              }
            }
            ++v534;
          }
          if (v535) {
            operator delete(v535);
          }
        }
      }

      sub_25B3FAE18((void *)v573[0]);
      int v554 = v572[0];
      v572[0] = 0;
      if (v554) {
        operator delete(v554);
      }
    }
  }
}

void sub_25B5B1274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_25B5B16BC(uint64_t a1, void *a2)
{
  uint64_t v544 = *MEMORY[0x263EF8340];
  id v483 = a2;
  sub_25B5BD26C(&v513, *(void **)(a1 + 256));
  uint64_t v507 = a1;
  if (objc_msgSend_count(*(void **)(a1 + 256), v3, v4))
  {
    unint64_t v7 = 0;
    uint64_t v8 = (float *)(a1 + 8);
    uint64_t v9 = (uint64_t *)(a1 + 328);
    do
    {
      uint64_t v12 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v5, v7);
      for (unint64_t i = 0; objc_msgSend_count(*(void **)(v507 + 256), v10, v11) > i; ++i)
      {
        if (i <= v7) {
          continue;
        }
        uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v10, i);
        id v17 = objc_msgSend_identifier(v12, v15, v16);
        float32x2_t v20 = objc_msgSend_identifier(v14, v18, v19);
        char isEqual = objc_msgSend_isEqual_(v17, v21, (uint64_t)v20);

        if ((isEqual & 1) == 0)
        {
          if (v12)
          {
            uint64_t v23 = v12[20];
            if (v14) {
              goto LABEL_9;
            }
LABEL_36:
            uint64_t v24 = 0;
          }
          else
          {
            uint64_t v23 = 0;
            if (!v14) {
              goto LABEL_36;
            }
LABEL_9:
            uint64_t v24 = v14[20];
          }
          if (v23 != v24)
          {
            sub_25B4D56B4((uint64_t)&v537, (float32x2_t *)v513 + 6 * v7, (float32x2_t *)v513 + 6 * i, v8);
            if (v537 != -1)
            {
              uint64_t v25 = sub_25B5BCE70(v9, v537, &v537);
              uint64_t v26 = v25;
              unint64_t v28 = (unint64_t *)v25[4];
              unint64_t v27 = v25[5];
              if ((unint64_t)v28 >= v27)
              {
                uint64_t v30 = v9;
                uint64_t v31 = v25[3];
                uint64_t v32 = ((uint64_t)v28 - v31) >> 3;
                if ((unint64_t)(v32 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v33 = v27 - v31;
                uint64_t v34 = v33 >> 2;
                if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
                  uint64_t v34 = v32 + 1;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v34;
                }
                if (v35) {
                  unint64_t v35 = (unint64_t)sub_25B3FCAD4(v35);
                }
                else {
                  uint64_t v36 = 0;
                }
                unint64_t v37 = (unint64_t *)(v35 + 8 * v32);
                *unint64_t v37 = v7 | (i << 32);
                int v29 = v37 + 1;
                long long v39 = (char *)v26[3];
                int v38 = (char *)v26[4];
                uint64_t v9 = v30;
                if (v38 != v39)
                {
                  do
                  {
                    unint64_t v40 = *((void *)v38 - 1);
                    v38 -= 8;
                    *--unint64_t v37 = v40;
                  }
                  while (v38 != v39);
                  int v38 = (char *)v26[3];
                }
                v26[3] = v37;
                v26[4] = v29;
                v26[5] = v35 + 8 * v36;
                if (v38) {
                  operator delete(v38);
                }
              }
              else
              {
                unint64_t *v28 = v7 | (i << 32);
                int v29 = v28 + 1;
              }
              v26[4] = v29;
            }
            if (*((void *)&v542 + 1))
            {
              *(void *)&long long v543 = *((void *)&v542 + 1);
              operator delete(*((void **)&v542 + 1));
            }
            if ((void)v541)
            {
              *((void *)&v541 + 1) = v541;
              operator delete((void *)v541);
            }
          }
        }
      }
      ++v7;
    }
    while (objc_msgSend_count(*(void **)(v507 + 256), v41, v42) > v7);
  }
  uint64_t v43 = v507;
  if (objc_msgSend_count(*(void **)(v507 + 264), v5, v6))
  {
    sub_25B5BD26C(v531, *(void **)(v507 + 264));
    if (objc_msgSend_count(*(void **)(v507 + 264), v46, v47))
    {
      unint64_t v48 = 0;
      int32x2_t v49 = vdup_n_s32(0x49742400u);
      do
      {
        float v52 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v43 + 264), v44, v48);
        uint64_t v53 = v48;
        unint64_t v501 = v48;
        while (objc_msgSend_count(*(void **)(v43 + 264), v50, v51) > (unint64_t)++v53)
        {
          float v55 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v43 + 264), v54, v53);
          float32x2_t v58 = objc_msgSend_identifier(v52, v56, v57);
          float v61 = objc_msgSend_identifier(v55, v59, v60);
          char v63 = objc_msgSend_isEqual_(v58, v62, (uint64_t)v61);

          if (v63) {
            goto LABEL_111;
          }
          if (v52)
          {
            uint64_t v64 = v52[20];
            if (v55) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v64 = 0;
            if (v55)
            {
LABEL_46:
              uint64_t v65 = v55[20];
              goto LABEL_47;
            }
          }
          uint64_t v65 = 0;
LABEL_47:
          if (v64 != v65)
          {
            uint64_t v66 = (float32x2_t *)((char *)v531[0] + 48 * v48);
            *(_OWORD *)uint64_t v538 = xmmword_25B5F1380;
            *(int32x2_t *)&v538[16] = v49;
            unint64_t v539 = -3175874560;
            unint64_t v67 = (float32x2_t *)((char *)v531[0] + 48 * v53);
            __int16 v540 = 0;
            long long v541 = 0u;
            long long v542 = 0u;
            long long v543 = 0u;
            sub_25B477FD8((uint64_t)v532, v66, v67);
            BOOL v68 = 0;
            float32x2_t v69 = vsub_f32(*v66, v66[1]);
            float v70 = sqrtf(vaddv_f32(vmul_f32(v69, v69)));
            float32x2_t v71 = vsub_f32(*v67, v67[1]);
            float v72 = sqrtf(vaddv_f32(vmul_f32(v71, v71)));
            if (v72 < v70) {
              float v70 = v72;
            }
            unint64_t v73 = (float *)(v507 + 20);
            if (v70 >= *(float *)(v507 + 24)) {
              unint64_t v73 = (float *)(v507 + 16);
            }
            float v74 = *(float *)&v532[8];
            float v75 = v533;
            float v76 = v534;
            if (v533 < *(float *)(v507 + 8) && v534 < *v73) {
              BOOL v68 = *(float *)&v532[8] >= *(float *)(v507 + 12);
            }
            uint64_t v77 = *(void *)v532;
            uint64_t v78 = *(void *)&v532[12];
            unsigned int v79 = v535;
            char v80 = v536;
            sub_25B40E03C((float **)v532, v66, v67);
            uint64_t v81 = *(float **)v532;
            if (*(void *)v532 != *(void *)&v532[8])
            {
              uint64_t v82 = *(void *)v532 + 4;
              uint64_t v81 = *(float **)v532;
              if (*(void *)v532 + 4 != *(void *)&v532[8])
              {
                float v83 = **(float **)v532;
                uint64_t v81 = *(float **)v532;
                float32x4_t v84 = (float *)(*(void *)v532 + 4);
                do
                {
                  float v85 = *v84++;
                  float v86 = v85;
                  if (v85 < v83)
                  {
                    float v83 = v86;
                    uint64_t v81 = (float *)v82;
                  }
                  uint64_t v82 = (uint64_t)v84;
                }
                while (v84 != *(float **)&v532[8]);
              }
            }
            float32x2_t v87 = vsub_f32(v66[1], *v66);
            int32x2_t v88 = (int32x2_t)vmul_f32(v87, v87);
            float32x2_t v89 = vsub_f32(v67[1], *v67);
            int32x2_t v90 = (int32x2_t)vmul_f32(v89, v89);
            int32x2_t v91 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v88, v90), (float32x2_t)vzip2_s32(v88, v90)));
            *(float *)v90.i32 = fabsf(vsub_f32((float32x2_t)v91, (float32x2_t)vdup_lane_s32(v91, 1)).f32[0]);
            float v92 = *(float *)(v507 + 32);
            BOOL v94 = *(float *)v90.i32 < *(float *)(v507 + 80) && v76 < v92 && v75 < *(float *)(v507 + 36);
            if (v94
              && ((v95 = *(float *)(v507 + 88), *(float *)&v77 > v95) ? (BOOL v96 = *((float *)&v77 + 1) <= v95) : (BOOL v96 = 1),
                  !v96 ? (BOOL v97 = *v81 < *(float *)(v507 + 84)) : (BOOL v97 = 0),
                  v97))
            {
              int v101 = 4;
              LODWORD(v537) = 4;
              char v100 = 1;
            }
            else
            {
              BOOL v99 = v76 < v92 && v74 > *(float *)(v507 + 92) && v75 < *(float *)(v507 + 96);
              char v100 = 0;
              if (v99) {
                int v101 = 6;
              }
              else {
                int v101 = -1;
              }
              LODWORD(v537) = v101;
            }
            BYTE12(v537) = v100;
            *(void *)uint64_t v538 = v77;
            *(void *)&v538[12] = v78;
            *(float *)&v538[8] = v74;
            *(float *)&v538[20] = v75;
            unint64_t v539 = __PAIR64__(v79, LODWORD(v76));
            LOBYTE(v540) = v68;
            HIBYTE(v540) = v80;
            if (*(void *)v532)
            {
              operator delete(*(void **)v532);
              int v101 = v537;
            }
            unint64_t v48 = v501;
            if (v101 != -1)
            {
              uint64_t v102 = sub_25B5BCE70((uint64_t *)(v507 + 368), v101, &v537);
              unint64_t v103 = v102;
              uint64_t v105 = (uint64_t *)v102[4];
              unint64_t v104 = v102[5];
              if ((unint64_t)v105 >= v104)
              {
                uint64_t v107 = v102[3];
                uint64_t v108 = ((uint64_t)v105 - v107) >> 3;
                if ((unint64_t)(v108 + 1) >> 61) {
                  sub_25B3FBC4C();
                }
                uint64_t v109 = v104 - v107;
                uint64_t v110 = v109 >> 2;
                if (v109 >> 2 <= (unint64_t)(v108 + 1)) {
                  uint64_t v110 = v108 + 1;
                }
                if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v111 = v110;
                }
                if (v111) {
                  unint64_t v111 = (unint64_t)sub_25B3FCAD4(v111);
                }
                else {
                  uint64_t v112 = 0;
                }
                uint64_t v113 = (uint64_t *)(v111 + 8 * v108);
                *uint64_t v113 = v501 | (v53 << 32);
                float v106 = v113 + 1;
                uint64_t v115 = (char *)v103[3];
                int v114 = (char *)v103[4];
                if (v114 != v115)
                {
                  do
                  {
                    uint64_t v116 = *((void *)v114 - 1);
                    v114 -= 8;
                    *--uint64_t v113 = v116;
                  }
                  while (v114 != v115);
                  int v114 = (char *)v103[3];
                }
                v103[3] = v113;
                v103[4] = v106;
                v103[5] = v111 + 8 * v112;
                if (v114) {
                  operator delete(v114);
                }
              }
              else
              {
                uint64_t *v105 = v501 | (v53 << 32);
                float v106 = v105 + 1;
              }
              v103[4] = v106;
            }
            if (*((void *)&v542 + 1))
            {
              *(void *)&long long v543 = *((void *)&v542 + 1);
              operator delete(*((void **)&v542 + 1));
            }
            if ((void)v541)
            {
              *((void *)&v541 + 1) = v541;
              operator delete((void *)v541);
            }
          }
LABEL_111:

          uint64_t v43 = v507;
        }

        uint64_t v43 = v507;
        ++v48;
      }
      while (objc_msgSend_count(*(void **)(v507 + 264), v117, v118) > v48);
    }
    if (v531[0]) {
      operator delete(v531[0]);
    }
  }
  if (objc_msgSend_count(*(void **)(v43 + 272), v44, v45))
  {
    sub_25B5BD26C(v531, *(void **)(v43 + 272));
    if (objc_msgSend_count(*(void **)(v43 + 272), v119, v120))
    {
      unint64_t v122 = 0;
      unint64_t v486 = (uint64_t *)(v43 + 408);
      int32x2_t v123 = vdup_n_s32(0x49742400u);
      do
      {
        unint64_t v126 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v43 + 272), v121, v122);
        uint64_t v127 = v122;
        unint64_t v496 = v122;
        uint64_t v502 = v126;
        while (objc_msgSend_count(*(void **)(v43 + 272), v124, v125) > (unint64_t)++v127)
        {
          size_t v129 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v43 + 272), v128, v127);
          float v132 = objc_msgSend_identifier(v126, v130, v131);
          float v135 = objc_msgSend_identifier(v129, v133, v134);
          char v137 = objc_msgSend_isEqual_(v132, v136, (uint64_t)v135);

          if (v137) {
            goto LABEL_183;
          }
          if (v126)
          {
            uint64_t v138 = v126[20];
            if (v129) {
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v138 = 0;
            if (v129)
            {
LABEL_125:
              uint64_t v139 = v129[20];
              goto LABEL_126;
            }
          }
          uint64_t v139 = 0;
LABEL_126:
          if (v138 != v139)
          {
            uint64_t v140 = (char *)v531[0];
            uint64_t v141 = (float32x2_t *)((char *)v531[0] + 48 * v122);
            *(_OWORD *)uint64_t v538 = xmmword_25B5F1380;
            *(int32x2_t *)&v538[16] = v123;
            unint64_t v539 = -3175874560;
            uint64_t v142 = (float32x2_t *)((char *)v531[0] + 48 * v127);
            __int16 v540 = 0;
            long long v541 = 0u;
            long long v542 = 0u;
            long long v543 = 0u;
            sub_25B477FD8((uint64_t)v532, v141, v142);
            BOOL v143 = 0;
            float32x2_t v144 = vsub_f32(*v141, v141[1]);
            float v145 = sqrtf(vaddv_f32(vmul_f32(v144, v144)));
            float32x2_t v146 = vsub_f32(*v142, v142[1]);
            float v147 = sqrtf(vaddv_f32(vmul_f32(v146, v146)));
            if (v147 < v145) {
              float v145 = v147;
            }
            unint64_t v148 = (float *)(v507 + 20);
            if (v145 >= *(float *)(v507 + 24)) {
              unint64_t v148 = (float *)(v507 + 16);
            }
            float v149 = *(float *)&v532[8];
            float v150 = v533;
            float v151 = v534;
            if (v533 < *(float *)(v507 + 8) && v534 < *v148) {
              BOOL v143 = *(float *)&v532[8] >= *(float *)(v507 + 12);
            }
            uint64_t v152 = *(void *)v532;
            uint64_t v153 = *(void *)&v532[12];
            unsigned int v154 = v535;
            char v155 = v536;
            sub_25B40E03C((float **)v532, v141, v142);
            float32x2_t v156 = vsub_f32(v141[1], *v141);
            int32x2_t v157 = (int32x2_t)vmul_f32(v156, v156);
            float32x2_t v158 = vsub_f32(v142[1], *v142);
            int32x2_t v159 = (int32x2_t)vmul_f32(v158, v158);
            int32x2_t v160 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v157, v159), (float32x2_t)vzip2_s32(v157, v159)));
            float v161 = fabsf(vsub_f32((float32x2_t)v160, (float32x2_t)vdup_lane_s32(v160, 1)).f32[0]);
            float v162 = *(float *)(v507 + 112);
            float v163 = *(float *)(v507 + 120);
            BOOL v165 = v161 < *(float *)(v507 + 100) && v151 < v162 && v150 < v163;
            if (v165 && (float v168 = *(float *)(v507 + 108), *(float *)&v152 > v168) && *((float *)&v152 + 1) > v168)
            {
              int v167 = 4;
              LODWORD(v537) = 4;
              char v166 = 1;
            }
            else
            {
              if (v151 >= v162 || v149 <= *(float *)(v507 + 116) || v150 >= v163)
              {
                char v166 = 0;
                int v167 = -1;
              }
              else
              {
                char v166 = 0;
                int v167 = 6;
              }
              LODWORD(v537) = v167;
            }
            BYTE12(v537) = v166;
            *(void *)uint64_t v538 = v152;
            *(void *)&v538[12] = v153;
            *(float *)&v538[8] = v149;
            *(float *)&v538[20] = v150;
            unint64_t v539 = __PAIR64__(v154, LODWORD(v151));
            LOBYTE(v540) = v143;
            HIBYTE(v540) = v155;
            if (*(void *)v532)
            {
              operator delete(*(void **)v532);
              int v167 = v537;
            }
            unint64_t v126 = v502;
            unint64_t v122 = v496;
            if (v167 != -1)
            {
              unint64_t v169 = (float *)&v140[48 * v496];
              float v170 = v169[4];
              float v171 = v169[5];
              uint64_t v172 = (float *)&v140[48 * v127];
              float v173 = v172[4];
              float v174 = v172[5];
              if (v174 >= v171) {
                float v175 = v171;
              }
              else {
                float v175 = v172[5];
              }
              if (v170 >= v173) {
                float v176 = v170;
              }
              else {
                float v176 = v172[4];
              }
              float v177 = v175 - v176;
              float v178 = v177 / (float)(v171 - v170);
              if (v178 < (float)(v177 / (float)(v174 - v173))) {
                float v178 = v177 / (float)(v174 - v173);
              }
              if (v178 >= *(float *)(v507 + 124))
              {
                unint64_t v179 = sub_25B5BCE70(v486, v167, &v537);
                uint64_t v180 = v179;
                float32x4_t v182 = (uint64_t *)v179[4];
                unint64_t v181 = v179[5];
                if ((unint64_t)v182 >= v181)
                {
                  uint64_t v184 = v179[3];
                  uint64_t v185 = ((uint64_t)v182 - v184) >> 3;
                  if ((unint64_t)(v185 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v186 = v181 - v184;
                  uint64_t v187 = v186 >> 2;
                  if (v186 >> 2 <= (unint64_t)(v185 + 1)) {
                    uint64_t v187 = v185 + 1;
                  }
                  if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v188 = v187;
                  }
                  if (v188) {
                    unint64_t v188 = (unint64_t)sub_25B3FCAD4(v188);
                  }
                  else {
                    uint64_t v189 = 0;
                  }
                  uint64_t v190 = (uint64_t *)(v188 + 8 * v185);
                  *uint64_t v190 = v496 | (v127 << 32);
                  uint64_t v183 = v190 + 1;
                  unint64_t v192 = (char *)v180[3];
                  id v191 = (char *)v180[4];
                  if (v191 != v192)
                  {
                    do
                    {
                      uint64_t v193 = *((void *)v191 - 1);
                      v191 -= 8;
                      *--uint64_t v190 = v193;
                    }
                    while (v191 != v192);
                    id v191 = (char *)v180[3];
                  }
                  v180[3] = v190;
                  v180[4] = v183;
                  v180[5] = v188 + 8 * v189;
                  if (v191) {
                    operator delete(v191);
                  }
                }
                else
                {
                  *float32x4_t v182 = v496 | (v127 << 32);
                  uint64_t v183 = v182 + 1;
                }
                v180[4] = v183;
              }
            }
            if (*((void *)&v542 + 1))
            {
              *(void *)&long long v543 = *((void *)&v542 + 1);
              operator delete(*((void **)&v542 + 1));
            }
            if ((void)v541)
            {
              *((void *)&v541 + 1) = v541;
              operator delete((void *)v541);
            }
          }
LABEL_183:

          uint64_t v43 = v507;
        }

        uint64_t v43 = v507;
        ++v122;
      }
      while (objc_msgSend_count(*(void **)(v507 + 272), v194, v195) > v122);
    }
    if (v531[0]) {
      operator delete(v531[0]);
    }
  }
  id v487 = v483;
  unint64_t v198 = 0;
  uint64_t v199 = (void *)(v43 + 512);
  while (objc_msgSend_count(*(void **)(v507 + 256), v196, v197) > v198)
  {
    *(void *)&long long v537 = v198;
    unint64_t v202 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
    uint64_t v203 = *(void **)v202;
    if (*(void *)v202)
    {
      *((void *)v202 + 1) = v203;
      operator delete(v203);
      *(void *)unint64_t v202 = 0;
      *((void *)v202 + 1) = 0;
      *((void *)v202 + 2) = 0;
    }
    *(void *)unint64_t v202 = 0;
    *((void *)v202 + 1) = 0;
    *((void *)v202 + 2) = 0;
    *(void *)&long long v537 = v198 | 0x100000000;
    uint64_t v204 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
    uint64_t v205 = *(void **)v204;
    if (*(void *)v204)
    {
      *((void *)v204 + 1) = v205;
      operator delete(v205);
      *(void *)uint64_t v204 = 0;
      *((void *)v204 + 1) = 0;
      *((void *)v204 + 2) = 0;
    }
    *(void *)uint64_t v204 = 0;
    *((void *)v204 + 1) = 0;
    ++v198;
    *((void *)v204 + 2) = 0;
  }
  unint64_t v206 = 0;
  uint64_t v503 = v199;
  while (objc_msgSend_count(*(void **)(v507 + 256), v200, v201) > v206)
  {
    uint64_t v208 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v207, v206);
    unint64_t v211 = (void *)v208;
    if (v208)
    {
      unint64_t v213 = *(void *)(v208 + 160);
      uint64_t v212 = *(void *)(v208 + 168);
      if (v213 < objc_msgSend_count(v487, v209, v210))
      {
        uint64_t v214 = (void *)(*(void *)(v507 + 552) + 40 * v213);
        unint64_t v497 = v211;
        if (sub_25B5BD5EC(v214, v212, 0))
        {
          *(void *)&long long v537 = v212;
          uint64_t v215 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
          if (*((void *)v215 + 1) != *(void *)v215)
          {
            uint64_t v217 = objc_msgSend_objectAtIndexedSubscript_(v487, v216, v213);
            unint64_t v484 = v213;
            obuint64_t j = v214;
            int v492 = v212;
            uint64_t v220 = objc_msgSend_walls(v217, v218, v219);

            *(void *)&long long v537 = v212;
            int v221 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
            uint64_t v224 = *(int **)v221;
            long long v225 = (int *)*((void *)v221 + 1);
            while (v224 != v225)
            {
              unint64_t v226 = *v224;
              if (objc_msgSend_count(v220, v222, v223) > v226)
              {
                uint64_t v227 = objc_msgSend_objectAtIndexedSubscript_(v220, v222, *v224);
                uint64_t v228 = (void *)v227;
                if (v227) {
                  uint64_t v229 = *(void *)(v227 + 176);
                }
                else {
                  LODWORD(v229) = 0;
                }
                *(void *)&long long v537 = v206;
                uint64_t v230 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
                unint64_t v231 = v230;
                unsigned int v232 = v224[1];
                uint64_t v234 = (unint64_t *)*((void *)v230 + 1);
                unint64_t v233 = *((void *)v230 + 2);
                if ((unint64_t)v234 >= v233)
                {
                  uint64_t v236 = ((uint64_t)v234 - *(void *)v230) >> 3;
                  if ((unint64_t)(v236 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v237 = v233 - *(void *)v230;
                  uint64_t v238 = v237 >> 2;
                  if (v237 >> 2 <= (unint64_t)(v236 + 1)) {
                    uint64_t v238 = v236 + 1;
                  }
                  if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v239 = v238;
                  }
                  if (v239) {
                    unint64_t v239 = (unint64_t)sub_25B3FCAD4(v239);
                  }
                  else {
                    uint64_t v240 = 0;
                  }
                  uint64_t v241 = (unint64_t *)(v239 + 8 * v236);
                  *uint64_t v241 = v229 | ((unint64_t)v232 << 32);
                  uint64_t v235 = v241 + 1;
                  unint64_t v243 = *(char **)v231;
                  uint64_t v242 = (char *)*((void *)v231 + 1);
                  if (v242 == *(char **)v231)
                  {
                    uint64_t v199 = v503;
                  }
                  else
                  {
                    uint64_t v199 = v503;
                    do
                    {
                      unint64_t v244 = *((void *)v242 - 1);
                      v242 -= 8;
                      *--uint64_t v241 = v244;
                    }
                    while (v242 != v243);
                    uint64_t v242 = *(char **)v231;
                  }
                  *(void *)unint64_t v231 = v241;
                  *((void *)v231 + 1) = v235;
                  *((void *)v231 + 2) = v239 + 8 * v240;
                  if (v242) {
                    operator delete(v242);
                  }
                }
                else
                {
                  *uint64_t v234 = v229 | ((unint64_t)v232 << 32);
                  uint64_t v235 = v234 + 1;
                }
                *((void *)v231 + 1) = v235;
              }
              v224 += 2;
            }

            LODWORD(v212) = v492;
            uint64_t v214 = obj;
            unint64_t v213 = v484;
          }
        }
        if (sub_25B5BD5EC(v214, v212, 1))
        {
          *(void *)&long long v537 = v212 | 0x100000000;
          unint64_t v245 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
          unint64_t v211 = v497;
          if (*((void *)v245 + 1) != *(void *)v245)
          {
            uint64_t v247 = objc_msgSend_objectAtIndexedSubscript_(v487, v246, v213);
            unint64_t v485 = v213;
            id obja = v214;
            int v493 = v212;
            unint64_t v250 = objc_msgSend_walls(v247, v248, v249);

            *(void *)&long long v537 = v212 | 0x100000000;
            unint64_t v251 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
            uint64_t v254 = *(int **)v251;
            uint64_t v255 = (int *)*((void *)v251 + 1);
            while (v254 != v255)
            {
              unint64_t v256 = *v254;
              if (objc_msgSend_count(v250, v252, v253) > v256)
              {
                uint64_t v257 = objc_msgSend_objectAtIndexedSubscript_(v250, v252, *v254);
                unint64_t v258 = (void *)v257;
                if (v257) {
                  uint64_t v259 = *(void *)(v257 + 176);
                }
                else {
                  LODWORD(v259) = 0;
                }
                *(void *)&long long v537 = v206 | 0x100000000;
                float32x2_t v260 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
                uint64_t v261 = v260;
                unsigned int v262 = v254[1];
                BOOL v264 = (unint64_t *)*((void *)v260 + 1);
                unint64_t v263 = *((void *)v260 + 2);
                if ((unint64_t)v264 >= v263)
                {
                  uint64_t v266 = ((uint64_t)v264 - *(void *)v260) >> 3;
                  if ((unint64_t)(v266 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v267 = v263 - *(void *)v260;
                  uint64_t v268 = v267 >> 2;
                  if (v267 >> 2 <= (unint64_t)(v266 + 1)) {
                    uint64_t v268 = v266 + 1;
                  }
                  if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v269 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v269 = v268;
                  }
                  if (v269) {
                    unint64_t v269 = (unint64_t)sub_25B3FCAD4(v269);
                  }
                  else {
                    uint64_t v270 = 0;
                  }
                  BOOL v271 = (unint64_t *)(v269 + 8 * v266);
                  unint64_t *v271 = v259 | ((unint64_t)v262 << 32);
                  uint64_t v265 = v271 + 1;
                  uint64_t v273 = *(char **)v261;
                  uint64_t v272 = (char *)*((void *)v261 + 1);
                  if (v272 == *(char **)v261)
                  {
                    uint64_t v199 = v503;
                  }
                  else
                  {
                    uint64_t v199 = v503;
                    do
                    {
                      unint64_t v274 = *((void *)v272 - 1);
                      v272 -= 8;
                      *--BOOL v271 = v274;
                    }
                    while (v272 != v273);
                    uint64_t v272 = *(char **)v261;
                  }
                  *(void *)uint64_t v261 = v271;
                  *((void *)v261 + 1) = v265;
                  *((void *)v261 + 2) = v269 + 8 * v270;
                  if (v272) {
                    operator delete(v272);
                  }
                }
                else
                {
                  *BOOL v264 = v259 | ((unint64_t)v262 << 32);
                  uint64_t v265 = v264 + 1;
                }
                *((void *)v261 + 1) = v265;
              }
              v254 += 2;
            }

            unint64_t v211 = v497;
            LODWORD(v212) = v493;
            uint64_t v214 = obja;
            unint64_t v213 = v485;
          }
        }
        else
        {
          unint64_t v211 = v497;
        }
        if (sub_25B5BD5EC(v214, v212, 2))
        {
          *(void *)&long long v537 = v212 | 0x200000000;
          unint64_t v275 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
          if (*((void *)v275 + 1) != *(void *)v275)
          {
            *(void *)&long long v537 = v206 | 0x200000000;
            int v277 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
            uint64_t v278 = *(void **)v277;
            if (*(void *)v277)
            {
              *((void *)v277 + 1) = v278;
              operator delete(v278);
              *(void *)int v277 = 0;
              *((void *)v277 + 1) = 0;
              *((void *)v277 + 2) = 0;
            }
            *(void *)int v277 = 0;
            *((void *)v277 + 1) = 0;
            *((void *)v277 + 2) = 0;
            uint64_t v279 = objc_msgSend_objectAtIndexedSubscript_(v487, v276, v213);
            BOOL v282 = objc_msgSend_walls(v279, v280, v281);

            *(void *)&long long v537 = v212 | 0x200000000;
            size_t v283 = sub_25B5BD6B0((uint64_t)v214, (int *)&v537);
            uint64_t v286 = *(int **)v283;
            id v287 = (int *)*((void *)v283 + 1);
            while (v286 != v287)
            {
              unint64_t v288 = *v286;
              if (objc_msgSend_count(v282, v284, v285) > v288)
              {
                uint64_t v289 = objc_msgSend_objectAtIndexedSubscript_(v282, v284, *v286);
                int v290 = (void *)v289;
                if (v289) {
                  uint64_t v291 = *(void *)(v289 + 176);
                }
                else {
                  LODWORD(v291) = 0;
                }
                *(void *)&long long v537 = v206 | 0x200000000;
                uint64_t v292 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
                double v293 = v292;
                unsigned int v294 = v286[1];
                int v296 = (unint64_t *)*((void *)v292 + 1);
                unint64_t v295 = *((void *)v292 + 2);
                if ((unint64_t)v296 >= v295)
                {
                  uint64_t v298 = ((uint64_t)v296 - *(void *)v292) >> 3;
                  if ((unint64_t)(v298 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v299 = v295 - *(void *)v292;
                  uint64_t v300 = v299 >> 2;
                  if (v299 >> 2 <= (unint64_t)(v298 + 1)) {
                    uint64_t v300 = v298 + 1;
                  }
                  if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v301 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v301 = v300;
                  }
                  if (v301) {
                    unint64_t v301 = (unint64_t)sub_25B3FCAD4(v301);
                  }
                  else {
                    uint64_t v302 = 0;
                  }
                  float32x2_t v303 = (unint64_t *)(v301 + 8 * v298);
                  unint64_t *v303 = v291 | ((unint64_t)v294 << 32);
                  uint64_t v297 = v303 + 1;
                  uint64_t v305 = *(char **)v293;
                  uint64_t v304 = (char *)*((void *)v293 + 1);
                  if (v304 == *(char **)v293)
                  {
                    uint64_t v199 = v503;
                  }
                  else
                  {
                    uint64_t v199 = v503;
                    do
                    {
                      unint64_t v306 = *((void *)v304 - 1);
                      v304 -= 8;
                      *--float32x2_t v303 = v306;
                    }
                    while (v304 != v305);
                    uint64_t v304 = *(char **)v293;
                  }
                  *(void *)double v293 = v303;
                  *((void *)v293 + 1) = v297;
                  *((void *)v293 + 2) = v301 + 8 * v302;
                  if (v304) {
                    operator delete(v304);
                  }
                }
                else
                {
                  *int v296 = v291 | ((unint64_t)v294 << 32);
                  uint64_t v297 = v296 + 1;
                }
                *((void *)v293 + 1) = v297;
              }
              v286 += 2;
            }

            unint64_t v211 = v497;
          }
        }
      }
    }

    ++v206;
  }

  uint64_t v307 = v507;
  id objb = *(id *)(v507 + 256);
  unint64_t v310 = 0;
  float32x2_t v311 = (void *)(v507 + 576);
  float v312 = (float32x2_t *)v513;
  while (objc_msgSend_count(objb, v308, v309) > v310)
  {
    unint64_t v313 = &v312[6 * v310];
    float32x2_t v314 = vsub_f32(*v313, v313[1]);
    if (sqrtf(vaddv_f32(vmul_f32(v314, v314))) < *(float *)(v307 + 148)
      && sub_25B5BD5EC(v199, v310, 0)
      && sub_25B5BD5EC(v199, v310, 1))
    {
      *(void *)&long long v537 = v310;
      float v315 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
      if (*((void *)v315 + 1) != *(void *)v315)
      {
        *(_DWORD *)uint64_t v532 = v310;
        *(_DWORD *)&v532[4] = 1;
        uint32x2_t v316 = sub_25B5BD6B0((uint64_t)v199, (int *)v532);
        if (*((void *)v316 + 1) != *(void *)v316)
        {
          *(void *)&long long v537 = v310;
          float32x2_t v317 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
          float v318 = *(int **)v317;
          uint8x8_t v498 = (int *)*((void *)v317 + 1);
          if (*(int **)v317 != v498)
          {
            unint64_t v494 = v310;
            do
            {
              uint64_t v504 = v318;
              int v319 = *v318;
              *(_DWORD *)uint64_t v532 = *v318;
              *(void *)&long long v537 = v310 | 0x100000000;
              float v320 = sub_25B5BD6B0((uint64_t)v199, (int *)&v537);
              unint64_t v321 = *(_DWORD **)v320;
              uint32x2_t v322 = (_DWORD *)*((void *)v320 + 1);
              if (*(_DWORD **)v320 != v322)
              {
                do
                {
                  LODWORD(v531[0]) = *v321;
                  int v323 = (int)v531[0];
                  sub_25B477FD8((uint64_t)&v537, v313, &v312[6 * v319]);
                  float v324 = *(float *)&v538[8];
                  sub_25B477FD8((uint64_t)&v537, v313, &v312[6 * v323]);
                  float v325 = *(float *)&v538[8];
                  sub_25B477FD8((uint64_t)&v537, &v312[6 * v319], &v312[6 * v323]);
                  float v326 = *(float *)(v507 + 152);
                  if (vabdd_f64(90.0, v324) <= v326 && vabdd_f64(90.0, v325) <= v326 && *(float *)&v538[8] <= v326)
                  {
                    float32x2_t v328 = vsub_f32(v312[6 * v319], v312[6 * v319 + 1]);
                    int32x2_t v329 = (int32x2_t)vmul_f32(v328, v328);
                    float32x2_t v330 = vsub_f32(v312[6 * v323], v312[6 * v323 + 1]);
                    int32x2_t v331 = (int32x2_t)vmul_f32(v330, v330);
                    int32x2_t v332 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v329, v331), (float32x2_t)vzip2_s32(v329, v331)));
                    if (vmvn_s8((int8x8_t)vcge_f32((float32x2_t)v332, (float32x2_t)vdup_lane_s32(v332, 1))).u8[0])
                    {
                      float32x2_t v333 = sub_25B5BE978((uint64_t)v311, v319, v532);
                    }
                    else
                    {
                      float32x2_t v333 = sub_25B5BE978((uint64_t)v311, v323, v531);
                      int v323 = v319;
                    }
                    *((_DWORD *)v333 + 5) = v323;
                  }
                  v321 += 2;
                }
                while (v321 != v322);
              }
              float v318 = v504 + 2;
              uint64_t v307 = v507;
              unint64_t v310 = v494;
            }
            while (v504 + 2 != v498);
          }
        }
      }
    }
    ++v310;
  }

  for (uint64_t j = *(uint64_t **)(v507 + 344); j; uint64_t j = (uint64_t *)*j)
  {
    int32x2_t v335 = (_DWORD *)j[3];
    int32x2_t v336 = (_DWORD *)j[4];
    while (v335 != v336)
    {
      int v337 = v335[1];
      LODWORD(v537) = *v335;
      DWORD1(v537) = v337;
      int v338 = *((_DWORD *)j + 4);
      DWORD2(v537) = v338;
      if (!sub_25B3FAE64(v311, v537) && !sub_25B3FAE64(v311, v337)
        || (v338 != 3 ? (BOOL v339 = v338 == 6) : (BOOL v339 = 1), !v339))
      {
        sub_25B5B7C90((char **)(v507 + 448), (uint64_t *)&v537);
      }
      v335 += 2;
    }
  }
  sub_25B5BCE18(v507 + 328);
  int32x2_t v342 = *(unsigned int **)(v507 + 448);
  for (uint64_t k = *(unsigned int **)(v507 + 456); v342 != k; v342 += 3)
  {
    int32x2_t v344 = sub_25B5BCE70((uint64_t *)(v507 + 328), v342[2], v342 + 2);
    uint32x2_t v345 = v344;
    uint64_t v346 = *v342;
    uint64_t v347 = v342[1];
    uint64_t v349 = (uint64_t *)v344[4];
    unint64_t v348 = v344[5];
    if ((unint64_t)v349 >= v348)
    {
      uint64_t v351 = v344[3];
      uint64_t v352 = ((uint64_t)v349 - v351) >> 3;
      if ((unint64_t)(v352 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v353 = v348 - v351;
      uint64_t v354 = v353 >> 2;
      if (v353 >> 2 <= (unint64_t)(v352 + 1)) {
        uint64_t v354 = v352 + 1;
      }
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v355 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v355 = v354;
      }
      if (v355) {
        unint64_t v355 = (unint64_t)sub_25B3FCAD4(v355);
      }
      else {
        float32x2_t v340 = 0;
      }
      uint64_t v356 = (uint64_t *)(v355 + 8 * v352);
      uint64_t *v356 = v346 | (v347 << 32);
      uint64_t v350 = v356 + 1;
      unint64_t v358 = (char *)v345[3];
      uint64_t v357 = (char *)v345[4];
      if (v357 != v358)
      {
        do
        {
          uint64_t v359 = *((void *)v357 - 1);
          v357 -= 8;
          *--uint64_t v356 = v359;
        }
        while (v357 != v358);
        uint64_t v357 = (char *)v345[3];
      }
      v345[3] = v356;
      v345[4] = v350;
      v345[5] = v355 + 8 * (void)v340;
      if (v357) {
        operator delete(v357);
      }
    }
    else
    {
      *uint64_t v349 = v346 | (v347 << 32);
      uint64_t v350 = v349 + 1;
    }
    v345[4] = v350;
  }
  float32x2_t v360 = (void *)v507;
  unint64_t v361 = objc_msgSend_count(*(void **)(v507 + 256), v340, v341);
  sub_25B5B7830((uint64_t *)&v537, (int **)(v507 + 448), v361);
  unint64_t v362 = (void **)(v507 + 616);
  uint64_t v363 = *(void *)(v507 + 616);
  if (v363)
  {
    uint64_t v364 = *(void *)(v507 + 624);
    uint64_t v365 = *(void **)(v507 + 616);
    if (v364 != v363)
    {
      do
        uint64_t v364 = sub_25B3FB178(v364 - 40);
      while (v364 != v363);
      uint64_t v365 = *v362;
    }
    float32x2_t v360 = (void *)v507;
    *(void *)(v507 + 624) = v363;
    operator delete(v365);
    *unint64_t v362 = 0;
    *(void *)(v507 + 624) = 0;
    *(void *)(v507 + 632) = 0;
  }
  *(_OWORD *)unint64_t v362 = v537;
  v360[79] = *(void *)v538;
  *(void *)uint64_t v538 = 0;
  long long v537 = 0uLL;
  *(void *)uint64_t v532 = &v537;
  sub_25B5A5D4C((void ***)v532);
  uint64_t v366 = v360[78];
  uint64_t v367 = v360[77];
  sub_25B5B7BC4(&v511, 0xCCCCCCCCCCCCCCCDLL * ((v366 - v367) >> 3));
  uint64_t v369 = v360[56];
  uint64_t v370 = v360[57];
  if (v369 == v370)
  {
    long long v508 = 0u;
    long long v509 = 0u;
    int v510 = 1065353216;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v366 - v367) >> 3) <= 1) {
      unint64_t v371 = 1;
    }
    else {
      unint64_t v371 = 0xCCCCCCCCCCCCCCCDLL * ((v366 - v367) >> 3);
    }
    do
    {
      if (v366 != v367)
      {
        uint64_t v372 = 0;
        uint64_t v373 = 0;
        unint64_t v374 = v371;
        do
        {
          uint64_t v375 = (char *)*v362 + v372;
          if (sub_25B3FAE64(v375, *(_DWORD *)v369) || sub_25B3FAE64(v375, *(_DWORD *)(v369 + 4))) {
            sub_25B5B7C90((char **)(v511 + v373), (uint64_t *)v369);
          }
          v373 += 24;
          v372 += 40;
          --v374;
        }
        while (v374);
      }
      v369 += 12;
    }
    while (v369 != v370);
    uint64_t v376 = *(int **)(v507 + 448);
    uint64_t v377 = *(int **)(v507 + 456);
    long long v508 = 0u;
    long long v509 = 0u;
    int v510 = 1065353216;
    while (v376 != v377)
    {
      if (v376[2] != 3)
      {
        unint64_t v378 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v368, *v376);
        *(double *)v379.i64 = sub_25B5BC1AC(v378);
        float32x4_t v505 = v379;

        uint64_t v381 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v380, v376[1]);
        *(double *)v382.i64 = sub_25B5BC1AC(v381);
        float32x4_t v499 = v382;

        float32x4_t v383 = vmulq_f32(v505, v499);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v383, 2), vaddq_f32(v383, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v383.f32, 1))).f32[0] <= 0.0)
        {
          sub_25B3FAF64((uint64_t)&v508, *v376, *v376);
          sub_25B3FAF64((uint64_t)&v508, v376[1], v376[1]);
        }
      }
      v376 += 3;
    }
  }
  uint64_t v385 = v511;
  uint64_t v384 = v512;
  uint64_t v386 = v507;
  if (v512 == v511) {
    goto LABEL_417;
  }
  unint64_t v387 = 0;
  do
  {
    uint64_t v388 = (int **)(v385 + 24 * v387);
    float32x2_t v389 = *v388;
    float32x2_t v390 = v388[1];
    if (*v388 == v390) {
      goto LABEL_416;
    }
    unint64_t v391 = v513;
    do
    {
      uint64_t v393 = *v389;
      uint64_t v392 = v389[1];
      *(_OWORD *)uint64_t v532 = v391[3 * (int)v393];
      *(_OWORD *)uint64_t v531 = v391[3 * (int)v392];
      sub_25B477FD8((uint64_t)&v537, (float32x2_t *)v532, (float32x2_t *)v531);
      float v394 = *(float *)&v538[4];
      if (!sub_25B3FAE64(&v508, v393)) {
        goto LABEL_389;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v395, v393);
      uint64_t v396 = (float *)objc_claimAutoreleasedReturnValue();
      if (!v396)
      {
        float32x2_t v399 = *(void **)(v507 + 256);
LABEL_383:
        objc_msgSend_objectAtIndexedSubscript_(v399, v397, v393);
        float32x2_t v415 = (float *)objc_claimAutoreleasedReturnValue();
        if (v415) {
          v415[33] = v394;
        }

        objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v416, v393);
        float32x2_t v414 = (float *)objc_claimAutoreleasedReturnValue();
        float v412 = 1.0;
        goto LABEL_386;
      }
      BOOL v398 = v396[33] > 0.0001;

      float32x2_t v399 = *(void **)(v507 + 256);
      if (!v398) {
        goto LABEL_383;
      }
      objc_msgSend_objectAtIndexedSubscript_(v399, v397, v393);
      int32x2_t v400 = (float *)objc_claimAutoreleasedReturnValue();
      if (v400) {
        float v401 = v400[34];
      }
      else {
        float v401 = 0.0;
      }

      uint64_t v403 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v402, v393);
      float32x2_t v405 = (void *)v403;
      if (v403) {
        float v406 = *(float *)(v403 + 132);
      }
      else {
        float v406 = 0.0;
      }
      uint64_t v407 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v404, v393);
      uint64_t v409 = (void *)v407;
      if (v407) {
        float v410 = *(float *)(v407 + 136);
      }
      else {
        float v410 = 0.0;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v408, v393);
      uint64_t v411 = (float *)objc_claimAutoreleasedReturnValue();
      float v412 = v401 + 1.0;
      if (v411) {
        v411[33] = (float)(v394 + (float)(v406 * v410)) / v412;
      }

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v413, v393);
      float32x2_t v414 = (float *)objc_claimAutoreleasedReturnValue();
LABEL_386:
      if (v414) {
        v414[34] = v412;
      }

LABEL_389:
      if (!sub_25B3FAE64(&v508, v392)) {
        goto LABEL_408;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v417, v392);
      unint64_t v418 = (float *)objc_claimAutoreleasedReturnValue();
      if (!v418)
      {
        uint64_t v421 = *(void **)(v507 + 256);
LABEL_402:
        objc_msgSend_objectAtIndexedSubscript_(v421, v419, v392);
        unint64_t v437 = (float *)objc_claimAutoreleasedReturnValue();
        if (v437) {
          v437[33] = v394;
        }

        objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v438, v392);
        BOOL v436 = (float *)objc_claimAutoreleasedReturnValue();
        float v434 = 1.0;
        goto LABEL_405;
      }
      BOOL v420 = v418[33] > 0.0001;

      uint64_t v421 = *(void **)(v507 + 256);
      if (!v420) {
        goto LABEL_402;
      }
      objc_msgSend_objectAtIndexedSubscript_(v421, v419, v392);
      uint64_t v422 = (float *)objc_claimAutoreleasedReturnValue();
      if (v422) {
        float v423 = v422[34];
      }
      else {
        float v423 = 0.0;
      }

      uint64_t v425 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v424, v392);
      unint64_t v427 = (void *)v425;
      if (v425) {
        float v428 = *(float *)(v425 + 132);
      }
      else {
        float v428 = 0.0;
      }
      uint64_t v429 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v426, v392);
      unint64_t v431 = (void *)v429;
      if (v429) {
        float v432 = *(float *)(v429 + 136);
      }
      else {
        float v432 = 0.0;
      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v430, v392);
      uint64_t v433 = (float *)objc_claimAutoreleasedReturnValue();
      float v434 = v423 + 1.0;
      if (v433) {
        v433[33] = (float)(v394 + (float)(v428 * v432)) / v434;
      }

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(v507 + 256), v435, v392);
      BOOL v436 = (float *)objc_claimAutoreleasedReturnValue();
LABEL_405:
      if (v436) {
        v436[34] = v434;
      }

LABEL_408:
      v389 += 3;
    }
    while (v389 != v390);
    uint64_t v385 = v511;
    uint64_t v384 = v512;
    uint64_t v386 = v507;
LABEL_416:
    ++v387;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v384 - v385) >> 3) > v387);
LABEL_417:
  id v439 = v487;
  long long v526 = 0u;
  long long v527 = 0u;
  long long v528 = 0u;
  long long v529 = 0u;
  id objc = v439;
  uint64_t v443 = objc_msgSend_countByEnumeratingWithState_objects_count_(objc, v440, (uint64_t)&v526, &v537, 16);
  if (!v443)
  {

    goto LABEL_477;
  }
  unint64_t v444 = 0;
  float32x4_t v445 = 0;
  unint64_t v446 = 0;
  uint64_t v495 = *(void *)v527;
  do
  {
    uint64_t v447 = 0;
    uint64_t v500 = v443;
    do
    {
      if (*(void *)v527 != v495) {
        objc_enumerationMutation(objc);
      }
      uint64_t v448 = *(void **)(*((void *)&v526 + 1) + 8 * v447);
      long long v522 = 0u;
      long long v523 = 0u;
      long long v524 = 0u;
      long long v525 = 0u;
      uint64_t v449 = objc_msgSend_walls(v448, v441, v442);
      uint64_t v452 = objc_msgSend_countByEnumeratingWithState_objects_count_(v449, v450, (uint64_t)&v522, v532, 16);
      uint64_t v506 = v447;
      if (v452)
      {
        uint64_t v453 = *(void *)v523;
        do
        {
          for (uint64_t m = 0; m != v452; ++m)
          {
            if (*(void *)v523 != v453) {
              objc_enumerationMutation(v449);
            }
            uint64_t v455 = *(void *)(*((void *)&v522 + 1) + 8 * m);
            if (v455)
            {
              float v456 = *(float *)(v455 + 132);
              if (v456 > 0.0001 && v456 < *(float *)(v386 + 140))
              {
                if ((unint64_t)v445 >= v444)
                {
                  uint64_t v457 = v445 - v446;
                  unint64_t v458 = v457 + 1;
                  if ((unint64_t)(v457 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v444 - (void)v446) >> 1 > v458) {
                    unint64_t v458 = (uint64_t)(v444 - (void)v446) >> 1;
                  }
                  if (v444 - (unint64_t)v446 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v459 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v459 = v458;
                  }
                  if (v459) {
                    unint64_t v459 = (unint64_t)sub_25B3FBC64(v459);
                  }
                  else {
                    float32x2_t v451 = 0;
                  }
                  float32x2_t v460 = (float *)(v459 + 4 * v457);
                  *float32x2_t v460 = v456;
                  float32x2_t v461 = v460 + 1;
                  while (v445 != v446)
                  {
                    int v462 = *((_DWORD *)v445-- - 1);
                    *((_DWORD *)v460-- - 1) = v462;
                  }
                  unint64_t v444 = v459 + 4 * (void)v451;
                  if (v446) {
                    operator delete(v446);
                  }
                  float32x4_t v445 = v461;
                  unint64_t v446 = v460;
                  uint64_t v386 = v507;
                }
                else
                {
                  *v445++ = v456;
                }
              }
            }
          }
          uint64_t v452 = objc_msgSend_countByEnumeratingWithState_objects_count_(v449, v451, (uint64_t)&v522, v532, 16);
        }
        while (v452);
      }

      uint64_t v447 = v506 + 1;
      uint64_t v386 = v507;
    }
    while (v506 + 1 != v500);
    uint64_t v443 = objc_msgSend_countByEnumeratingWithState_objects_count_(objc, v441, (uint64_t)&v526, &v537, 16);
  }
  while (v443);

  if (v445 == v446)
  {
    unint64_t v446 = v445;
    if (!v445) {
      goto LABEL_477;
    }
    goto LABEL_476;
  }
  double v463 = 0.0;
  unint64_t v464 = v446;
  do
  {
    float v465 = *v464++;
    double v463 = v463 + v465;
  }
  while (v464 != v445);
  float v466 = v463 / (double)(unint64_t)(v445 - v446);
  *(float *)(v507 + 656) = v466;
  long long v518 = 0u;
  long long v519 = 0u;
  long long v520 = 0u;
  long long v521 = 0u;
  id v467 = objc;
  uint64_t v471 = objc_msgSend_countByEnumeratingWithState_objects_count_(v467, v468, (uint64_t)&v518, v531, 16);
  if (v471)
  {
    uint64_t v472 = *(void *)v519;
    do
    {
      for (uint64_t n = 0; n != v471; ++n)
      {
        if (*(void *)v519 != v472) {
          objc_enumerationMutation(v467);
        }
        unint64_t v474 = *(void **)(*((void *)&v518 + 1) + 8 * n);
        long long v514 = 0u;
        long long v515 = 0u;
        long long v516 = 0u;
        long long v517 = 0u;
        uint64_t v475 = objc_msgSend_walls(v474, v469, v470);
        uint64_t v478 = objc_msgSend_countByEnumeratingWithState_objects_count_(v475, v476, (uint64_t)&v514, v530, 16);
        if (v478)
        {
          uint64_t v479 = *(void *)v515;
          do
          {
            for (iunint64_t i = 0; ii != v478; ++ii)
            {
              if (*(void *)v515 != v479) {
                objc_enumerationMutation(v475);
              }
              uint64_t v481 = *(void *)(*((void *)&v514 + 1) + 8 * ii);
              if (v481)
              {
                float v482 = *(float *)(v481 + 132);
                if (v482 > 0.0001 && v482 < *(float *)(v507 + 140)) {
                  *(_DWORD *)(v481 + 132) = *(_DWORD *)(v507 + 656);
                }
              }
            }
            uint64_t v478 = objc_msgSend_countByEnumeratingWithState_objects_count_(v475, v477, (uint64_t)&v514, v530, 16);
          }
          while (v478);
        }
      }
      uint64_t v471 = objc_msgSend_countByEnumeratingWithState_objects_count_(v467, v469, (uint64_t)&v518, v531, 16);
    }
    while (v471);
  }

  if (v446) {
LABEL_476:
  }
    operator delete(v446);
LABEL_477:

  sub_25B3FB178((uint64_t)&v508);
  *(void *)&long long v537 = &v511;
  sub_25B413BE8((void ***)&v537);
  if (v513) {
    operator delete(v513);
  }
}

void sub_25B5B3538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (v32) {
    operator delete(v32);
  }

  sub_25B3FB178((uint64_t)&a23);
  a23 = (uint64_t)&a29;
  sub_25B413BE8((void ***)&a23);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25B5B38D8(void *a1, void *a2)
{
  uint64_t v572 = *MEMORY[0x263EF8340];
  id v498 = a2;
  uint64_t v3 = a1[78];
  uint64_t v4 = a1[77];
  sub_25B5B7BC4(&v546, 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3));
  uint64_t v530 = (uint64_t)a1;
  uint64_t v5 = a1[56];
  uint64_t v6 = a1[57];
  if (v5 != v6)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3) <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3);
    }
    do
    {
      if (v3 != v4)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        unint64_t v10 = v7;
        do
        {
          uint64_t v11 = (void *)(*(void *)(v530 + 616) + v8);
          if (sub_25B3FAE64(v11, *(_DWORD *)v5) || sub_25B3FAE64(v11, *(_DWORD *)(v5 + 4))) {
            sub_25B5B7C90((char **)&v546[v9], (uint64_t *)v5);
          }
          v9 += 3;
          v8 += 40;
          --v10;
        }
        while (v10);
      }
      v5 += 12;
    }
    while (v5 != v6);
  }
  sub_25B5BD26C(&v542, *(void **)(v530 + 256));
  uint64_t v12 = v546;
  uint64_t v13 = v547;
  if (v546 != v547)
  {
    float32x4_t v499 = (float *)(v530 + 8);
    unint64_t v513 = (float *)(v530 + 472);
    unint64_t v501 = v547;
    while (1)
    {
      v541[0] = 0;
      v541[1] = 0;
      __int16 v540 = v541;
      uint64_t v14 = *v12;
      id v15 = v12[1];
      if (*v12 == v15)
      {
        int v16 = -1;
        id v17 = v541;
      }
      else
      {
        do
        {
          sub_25B3FBE5C((uint64_t *)&v540, *v14, *v14);
          sub_25B3FBE5C((uint64_t *)&v540, v14[1], v14[1]);
          v14 += 3;
        }
        while (v14 != v15);
        int v16 = *(v14 - 1);
        id v17 = v540;
      }
      sub_25B56CB74(&v538, v17, v541);
      unint64_t v18 = (int *)v538;
      uint64_t v19 = v539;
      if ((char *)v539 - (unsigned char *)v538 != 8) {
        break;
      }
      if (v16 != 6)
      {
        if (v16 == 5)
        {
          sub_25B5BE178(v530, (uint64_t)v542, (const char *)*(unsigned int *)v538, (const char *)*((unsigned int *)v538 + 1));
        }
        else if (v16 == 4)
        {
          sub_25B5BDFF4(v530, (uint64_t)v542, (const char *)*(unsigned int *)v538, (const char *)*((unsigned int *)v538 + 1));
        }
        goto LABEL_463;
      }
      uint64_t v43 = (const char *)*(int *)v538;
      uint64_t v42 = (const char *)*((int *)v538 + 1);
      uint64_t v44 = v542;
      sub_25B4D56B4((uint64_t)&v558, (float32x2_t *)v542 + 6 * (int)v43, (float32x2_t *)v542 + 6 * (int)v42, v499);
      uint64_t v45 = *(void *)(v530 + 448);
      uint64_t v46 = *(void *)(v530 + 456) - v45;
      if (v46)
      {
        unint64_t v47 = v46 / 12;
        if (v47 <= 1) {
          unint64_t v47 = 1;
        }
        unint64_t v48 = (int *)(v45 + 4);
        do
        {
          int v50 = *(v48 - 1);
          int v49 = *v48;
          _ZF = v50 == v43 && v49 == v42;
          if (_ZF || (v50 == v42 ? (BOOL v52 = v49 == v43) : (BOOL v52 = 0), v52))
          {
            int v53 = v558;
            *unint64_t v48 = v49;
            v48[1] = v53;
          }
          v48 += 3;
          --v47;
        }
        while (v47);
      }
      switch((int)v558)
      {
        case -1:
        case 6:
          float v54 = v12;
          int64_t v55 = v543 - v44;
          if (v543 == v44)
          {
            uint64_t v57 = 0;
          }
          else
          {
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (v55 >> 4);
            if (v56 >= 0x555555555555556) {
              sub_25B3FBC4C();
            }
            uint64_t v57 = (__n128 *)sub_25B467D14(v56);
            memmove(v57, v44, v55);
          }
          *(__n128 *)int v554 = v57[3 * (int)v43];
          __n128 __p = v57[3 * (int)v42];
          uint64_t v266 = v554[0];
          uint64_t v265 = v554[1];
          __n128 v267 = __p;
          sub_25B4D56B4((uint64_t)&v565, (float32x2_t *)v554, (float32x2_t *)&__p, v499);
          uint64_t v12 = v54;
          v270.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v266, (float32x2_t)v265);
          v270.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)v270.n128_u64[0], (float32x2_t)v270.n128_u64[0]);
          float32x2_t v268 = vsub_f32((float32x2_t)v267.n128_u64[0], *(float32x2_t *)&v267.n128_i8[8]);
          int32x2_t v269 = (int32x2_t)vmul_f32(v268, v268);
          v270.n128_u64[0] = (unint64_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v270.n128_u64[0], v269), (float32x2_t)vzip2_s32((int32x2_t)v270.n128_u64[0], v269)));
          if (*(float *)&v566 <= *((float *)&v566 + 1)) {
            BOOL v271 = v43;
          }
          else {
            BOOL v271 = v42;
          }
          __n128 v276 = v57[3 * (void)v271 + 2];
          float32x2_t v272 = vmla_n_f32(vmul_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v267.n128_i8[8], (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, (float32x2_t)v267.n128_u64[0]), (float32x2_t)v270.n128_u64[0], 1), vmla_f32(vmul_f32((float32x2_t)v265, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, (float32x2_t)v266), v270.n128_f32[0]);
          int32x2_t v273 = vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)v270.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v270.n128_u64[0], 1)), 0);
          float32x2_t v274 = vdiv_f32(v272, (float32x2_t)v273);
          *(float *)v273.i32 = -v276.n128_f32[1];
          v270.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)vzip1_s32(v273, (int32x2_t)v276.n128_u64[0]), v274);
          v276.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v266, v274);
          float32x2_t v275 = vsub_f32((float32x2_t)v270.n128_u64[0], v274);
          v270.n128_f32[0] = vaddv_f32(vmul_f32((float32x2_t)v276.n128_u64[0], v275));
          v276.n128_f32[0] = vaddv_f32(vmul_f32(v275, v275));
          if (v276.n128_f32[0] >= 0.000001) {
            float v277 = v276.n128_f32[0];
          }
          else {
            float v277 = 0.000001;
          }
          v270.n128_u64[0] = (unint64_t)vmla_n_f32(v274, v275, v270.n128_f32[0] / v277);
          v276.n128_u64[0] = (unint64_t)vmla_n_f32(v274, v275, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v265, v274), v275)) / v277);
          sub_25B5BDEFC(v530, v43, v270, v276);
          v278.n128_u64[0] = (unint64_t)vmla_n_f32(v274, v275, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v267.n128_i8[8], v274), v275))/ v277);
          v279.n128_u64[0] = (unint64_t)vmla_n_f32(v274, v275, vaddv_f32(vmul_f32(vsub_f32((float32x2_t)v267.n128_u64[0], v274), v275))/ v277);
          sub_25B5BDEFC(v530, v42, v279, v278);
          if (v570)
          {
            uint64_t v571 = v570;
            operator delete(v570);
          }
          if (v568)
          {
            float32x4_t v569 = v568;
            operator delete(v568);
          }
          operator delete(v57);
          break;
        case 4:
          sub_25B5BDFF4(v530, (uint64_t)v44, v43, v42);
          break;
        case 5:
          sub_25B5BE178(v530, (uint64_t)v44, v43, v42);
          break;
        default:
          break;
      }
      if (v563)
      {
        float32x2_t v564 = v563;
        operator delete(v563);
      }
      BOOL v264 = v561;
      if (v561)
      {
        float32x2_t v562 = v561;
        goto LABEL_462;
      }
LABEL_463:
      if (v538)
      {
        unint64_t v539 = (int *)v538;
        operator delete(v538);
      }
      sub_25B3FA930(v541[0]);
      v12 += 3;
      if (v12 == v13) {
        goto LABEL_466;
      }
    }
    if ((unint64_t)((char *)v539 - (unsigned char *)v538) < 9) {
      goto LABEL_463;
    }
    uint64_t v504 = v12;
    if (v538 == v539)
    {
      float32x2_t v20 = 0;
      uint64_t v23 = 0;
      uint64_t v35 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      float32x2_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        long long v26 = *((_OWORD *)v542 + 3 * *v18 + 2);
        if ((unint64_t)v21 >= v22)
        {
          *(_OWORD *)uint64_t v531 = *((_OWORD *)v542 + 3 * *v18 + 2);
          uint64_t v27 = (v21 - v20) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v22 - (void)v20) >> 1 > v28) {
            unint64_t v28 = (uint64_t)(v22 - (void)v20) >> 1;
          }
          if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)sub_25B3FBC64(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          uint64_t v31 = (char *)(v29 + 4 * v27);
          *(_DWORD *)uint64_t v31 = v531[0];
          uint64_t v32 = v31 + 4;
          while (v21 != v20)
          {
            int v33 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v31 - 1) = v33;
            v31 -= 4;
          }
          unint64_t v22 = v29 + 4 * v30;
          if (v20) {
            operator delete(v20);
          }
          float32x2_t v20 = v31;
          uint64_t v21 = v32;
          DWORD1(v26) = HIDWORD(v531[0]);
        }
        else
        {
          *(_DWORD *)uint64_t v21 = v26;
          v21 += 4;
        }
        int v34 = DWORD1(v26);
        if ((unint64_t)v24 >= v25)
        {
          uint64_t v36 = (v24 - v23) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v25 - (void)v23) >> 1 > v37) {
            unint64_t v37 = (uint64_t)(v25 - (void)v23) >> 1;
          }
          if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            unint64_t v38 = (unint64_t)sub_25B3FBC64(v38);
          }
          else {
            uint64_t v39 = 0;
          }
          unint64_t v40 = (char *)(v38 + 4 * v36);
          *(_DWORD *)unint64_t v40 = v34;
          uint64_t v35 = (uint64_t)(v40 + 4);
          while (v24 != v23)
          {
            int v41 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          unint64_t v25 = v38 + 4 * v39;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v23 = v40;
        }
        else
        {
          *(_DWORD *)uint64_t v24 = DWORD1(v26);
          uint64_t v35 = (uint64_t)(v24 + 4);
        }
        ++v18;
        uint64_t v24 = (char *)v35;
      }
      while (v18 != v19);
    }
    __n128 __p = 0uLL;
    uint64_t v557 = 0;
    sub_25B3FCA58(&__p, v20, (uint64_t)v21, (v21 - v20) >> 2);
    v565.n128_u64[0] = (unint64_t)&unk_2708F20D8;
    id v567 = &v565;
    long long v520 = v20;
    uint64_t v506 = v23;
    uint64_t v12 = v504;
    float v58 = sub_25B5BE43C((float **)&__p, (uint64_t)&v565);
    float v60 = v59;
    sub_25B5460E8(&v565);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    unint64_t v551 = 0;
    uint64_t v552 = 0;
    uint64_t v553 = 0;
    sub_25B3FCA58(&v551, v23, v35, (v35 - (uint64_t)v23) >> 2);
    *(void *)&long long v558 = &unk_2708F20D8;
    *((void *)&v559 + 1) = &v558;
    float v61 = sub_25B5BE43C((float **)&v551, (uint64_t)&v558);
    float v63 = v62;
    sub_25B5460E8(&v558);
    if (v551)
    {
      uint64_t v552 = v551;
      operator delete(v551);
    }
    uint64_t v549 = 0;
    uint64_t v550 = 0;
    float32x2_t v548 = &v549;
    uint64_t v64 = (int *)v538;
    uint64_t v65 = v539;
    if (v538 != v539)
    {
      float v66 = atanf((float)((float)(v61 + v63) * 0.5) / (float)((float)(v58 + v60) * 0.5));
      unint64_t v67 = (float32x4_t *)v542;
      do
      {
        int v68 = *v64;
        float32x4_t v69 = v67[3 * *v64 + 2];
        float v70 = (float)((float)(v66 - atanf(vdivq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1), v69).f32[0]))
                    * 180.0)
            / 3.14159265;
        if (fabsf(v70) <= *(float *)(v530 + 156)) {
          sub_25B3FBE5C((uint64_t *)&v548, v68, v68);
        }
        ++v64;
      }
      while (v64 != v65);
    }
    float32x2_t v71 = *v504;
    long long v526 = v504[1];
    if (*v504 == v526)
    {
      uint64_t v511 = 0;
      uint64_t v223 = 0;
      unint64_t v263 = 0;
      float v72 = 0;
      goto LABEL_434;
    }
    unint64_t v508 = 0;
    float v72 = 0;
    unint64_t v73 = 0;
    unint64_t v522 = 0;
    long long v524 = 0;
    float v74 = 0;
    long long v517 = 0;
    unint64_t v519 = 0;
    long long v515 = 0;
    float v75 = 0;
    float v76 = 0;
    uint64_t v511 = 0;
LABEL_94:
    uint64_t v532 = v72;
    int v78 = *v71;
    int v77 = v71[1];
    unsigned int v79 = v542;
    __n128 v80 = *((__n128 *)v542 + 3 * *v71);
    __n128 v81 = *((__n128 *)v542 + 3 * v77);
    __n128 v544 = v81;
    __n128 v545 = v80;
    float32x2_t v20 = (char *)v78;
    int v82 = v77;
    switch(v71[2])
    {
      case 3:
        float32x2_t v83 = *(float32x2_t *)((char *)v542 + 48 * v78 + 32);
        if ((unint64_t)v74 >= v519)
        {
          uint64_t v101 = v74 - v524;
          unint64_t v102 = v101 + 1;
          float32x2_t v20 = v520;
          float v72 = v532;
          if ((unint64_t)(v101 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          int v103 = v82;
          if ((uint64_t)(v519 - (void)v524) >> 2 > v102) {
            unint64_t v102 = (uint64_t)(v519 - (void)v524) >> 2;
          }
          if (v519 - (unint64_t)v524 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v104 = v102;
          }
          if (v104) {
            unint64_t v104 = (unint64_t)sub_25B3FCAD4(v104);
          }
          else {
            uint64_t v105 = 0;
          }
          float v85 = (float32x2_t *)(v104 + 8 * v101);
          *float v85 = v83;
          float32x4_t v84 = v85 + 1;
          if (v74 == v524)
          {
            uint64_t v121 = v524;
          }
          else
          {
            uint64_t v121 = v524;
            do
            {
              float32x2_t v122 = v74[-1];
              --v74;
              v85[-1] = v122;
              --v85;
            }
            while (v74 != v524);
          }
          unint64_t v519 = v104 + 8 * v105;
          if (v121) {
            operator delete(v121);
          }
          int v82 = v103;
          uint64_t v23 = v506;
        }
        else
        {
          *float v74 = v83;
          float32x4_t v84 = v74 + 1;
          float32x2_t v20 = v520;
          float v72 = v532;
          float v85 = v524;
        }
        float32x2_t v123 = *(float32x2_t *)((char *)v542 + 48 * v82 + 32);
        long long v524 = v85;
        if ((unint64_t)v84 >= v519)
        {
          uint64_t v124 = v84 - v85;
          unint64_t v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v519 - (void)v85) >> 2 > v125) {
            unint64_t v125 = (uint64_t)(v519 - (void)v85) >> 2;
          }
          if (v519 - (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v126 = v125;
          }
          if (v126) {
            unint64_t v126 = (unint64_t)sub_25B3FCAD4(v126);
          }
          else {
            uint64_t v127 = 0;
          }
          uint64_t v128 = (float32x2_t *)(v126 + 8 * v124);
          float32x2_t *v128 = v123;
          float v74 = v128 + 1;
          if (v84 == v524)
          {
            size_t v129 = v524;
          }
          else
          {
            size_t v129 = v524;
            do
            {
              float32x2_t v130 = v84[-1];
              --v84;
              v128[-1] = v130;
              --v128;
            }
            while (v84 != v524);
          }
          unint64_t v519 = v126 + 8 * v127;
          if (v129) {
            operator delete(v129);
          }
          long long v524 = v128;
        }
        else
        {
          float32x2_t *v84 = v123;
          float v74 = v84 + 1;
        }
        float32x2_t v131 = vmul_f32(vadd_f32((float32x2_t)v545.n128_u64[0], *(float32x2_t *)&v545.n128_i8[8]), (float32x2_t)0x3F0000003F000000);
        if (v75 >= v517)
        {
          uint64_t v134 = v75 - v515;
          unint64_t v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if (((char *)v517 - (char *)v515) >> 2 > v135) {
            unint64_t v135 = ((char *)v517 - (char *)v515) >> 2;
          }
          if ((unint64_t)((char *)v517 - (char *)v515) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v136 = v135;
          }
          if (v136) {
            unint64_t v136 = (unint64_t)sub_25B3FCAD4(v136);
          }
          else {
            uint64_t v137 = 0;
          }
          uint64_t v138 = (float32x2_t *)(v136 + 8 * v134);
          float32x2_t *v138 = v131;
          float v132 = v138 + 1;
          if (v75 == v515)
          {
            uint64_t v139 = v515;
          }
          else
          {
            uint64_t v139 = v515;
            do
            {
              float32x2_t v140 = v75[-1];
              --v75;
              v138[-1] = v140;
              --v138;
            }
            while (v75 != v515);
          }
          long long v517 = (float32x2_t *)(v136 + 8 * v137);
          if (v139) {
            operator delete(v139);
          }
          float v133 = v138;
        }
        else
        {
          *float v75 = v131;
          float v132 = v75 + 1;
          float v133 = v515;
        }
        float32x2_t v141 = vmul_f32(vadd_f32((float32x2_t)v544.n128_u64[0], *(float32x2_t *)&v544.n128_i8[8]), (float32x2_t)0x3F0000003F000000);
        if (v132 >= v517)
        {
          uint64_t v142 = v132 - v133;
          unint64_t v143 = v142 + 1;
          if ((unint64_t)(v142 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if (((char *)v517 - (char *)v133) >> 2 > v143) {
            unint64_t v143 = ((char *)v517 - (char *)v133) >> 2;
          }
          if ((unint64_t)((char *)v517 - (char *)v133) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v143;
          }
          if (v144)
          {
            unint64_t v144 = (unint64_t)sub_25B3FCAD4(v144);
            float32x2_t v146 = v133;
          }
          else
          {
            float32x2_t v146 = v133;
            uint64_t v145 = 0;
          }
          float v147 = (float32x2_t *)(v144 + 8 * v142);
          *float v147 = v141;
          float v75 = v147 + 1;
          while (v132 != v146)
          {
            float32x2_t v148 = v132[-1];
            --v132;
            v147[-1] = v148;
            --v147;
          }
          long long v517 = (float32x2_t *)(v144 + 8 * v145);
          if (v146) {
            operator delete(v146);
          }
          long long v515 = v147;
        }
        else
        {
          long long v515 = v133;
          float32x2_t *v132 = v141;
          float v75 = v132 + 1;
        }
        goto LABEL_271;
      case 4:
        BOOL v94 = v549;
        if (!v549) {
          goto LABEL_119;
        }
        float v95 = v549;
        while (2)
        {
          int v96 = *((_DWORD *)v95 + 7);
          if (v78 < v96) {
            goto LABEL_112;
          }
          if (v96 < v78)
          {
            ++v95;
LABEL_112:
            float v95 = (void *)*v95;
            if (!v95)
            {
              BOOL v97 = v73;
              uint64_t v98 = v76;
              BOOL v99 = v511;
              goto LABEL_114;
            }
            continue;
          }
          break;
        }
        float32x2_t v116 = *(float32x2_t *)((char *)v542 + 48 * v78 + 32);
        if ((unint64_t)v76 >= v508)
        {
          uint64_t v165 = v76 - v511;
          unint64_t v166 = v165 + 1;
          if ((unint64_t)(v165 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v508 - (void)v511) >> 2 > v166) {
            unint64_t v166 = (uint64_t)(v508 - (void)v511) >> 2;
          }
          if (v508 - (unint64_t)v511 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v167 = v166;
          }
          if (v167) {
            unint64_t v167 = (unint64_t)sub_25B3FCAD4(v167);
          }
          else {
            uint64_t v168 = 0;
          }
          unint64_t v181 = (float32x2_t *)(v167 + 8 * v165);
          float32x2_t *v181 = v116;
          uint64_t v98 = v181 + 1;
          if (v76 != v511)
          {
            do
            {
              float32x2_t v182 = v76[-1];
              --v76;
              v181[-1] = v182;
              --v181;
            }
            while (v76 != v511);
            float v76 = v511;
          }
          uint64_t v511 = v181;
          unint64_t v508 = v167 + 8 * v168;
          if (v76) {
            operator delete(v76);
          }
          int v82 = v77;
        }
        else
        {
          *float v76 = v116;
          uint64_t v98 = v76 + 1;
        }
        float32x2_t v183 = vmul_f32(vadd_f32((float32x2_t)v545.n128_u64[0], *(float32x2_t *)&v545.n128_i8[8]), (float32x2_t)0x3F0000003F000000);
        if ((unint64_t)v73 >= v522)
        {
          uint64_t v184 = v73 - v532;
          unint64_t v185 = v184 + 1;
          if ((unint64_t)(v184 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v522 - (void)v532) >> 2 > v185) {
            unint64_t v185 = (uint64_t)(v522 - (void)v532) >> 2;
          }
          if (v522 - (unint64_t)v532 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v186 = v185;
          }
          if (v186) {
            unint64_t v186 = (unint64_t)sub_25B3FCAD4(v186);
          }
          else {
            uint64_t v187 = 0;
          }
          unint64_t v188 = (float32x2_t *)(v186 + 8 * v184);
          *unint64_t v188 = v183;
          BOOL v97 = v188 + 1;
          if (v73 == v532)
          {
            uint64_t v189 = v532;
          }
          else
          {
            uint64_t v189 = v532;
            do
            {
              float32x2_t v190 = v73[-1];
              --v73;
              v188[-1] = v190;
              --v188;
            }
            while (v73 != v532);
          }
          unint64_t v522 = v186 + 8 * v187;
          if (v189) {
            operator delete(v189);
          }
          uint64_t v532 = v188;
          int v82 = v77;
          BOOL v99 = v511;
        }
        else
        {
          *unint64_t v73 = v183;
          BOOL v97 = v73 + 1;
          BOOL v99 = v511;
        }
        BOOL v94 = v549;
        if (!v549) {
          goto LABEL_118;
        }
LABEL_114:
        while (2)
        {
          int v100 = *((_DWORD *)v94 + 7);
          if (v77 < v100) {
            goto LABEL_117;
          }
          if (v100 < v77)
          {
            ++v94;
LABEL_117:
            BOOL v94 = (void *)*v94;
            if (!v94)
            {
LABEL_118:
              uint64_t v511 = v99;
              unint64_t v73 = v97;
              float v76 = v98;
LABEL_119:
              float32x2_t v20 = v520;
              goto LABEL_120;
            }
            continue;
          }
          break;
        }
        float32x2_t v159 = *(float32x2_t *)((char *)v542 + 48 * v82 + 32);
        if ((unint64_t)v98 >= v508)
        {
          uint64_t v169 = v98 - v99;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v508 - (void)v99) >> 2 > v170) {
            unint64_t v170 = (uint64_t)(v508 - (void)v99) >> 2;
          }
          if (v508 - (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v171 = v170;
          }
          if (v171) {
            unint64_t v171 = (unint64_t)sub_25B3FCAD4(v171);
          }
          else {
            uint64_t v172 = 0;
          }
          uint64_t v199 = (float32x2_t *)(v171 + 8 * v169);
          float32x2_t *v199 = v159;
          float v76 = v199 + 1;
          if (v98 != v99)
          {
            do
            {
              float32x2_t v200 = v98[-1];
              --v98;
              v199[-1] = v200;
              --v199;
            }
            while (v98 != v99);
            uint64_t v98 = v99;
          }
          BOOL v99 = v199;
          unint64_t v508 = v171 + 8 * v172;
          if (v98) {
            operator delete(v98);
          }
        }
        else
        {
          *uint64_t v98 = v159;
          float v76 = v98 + 1;
        }
        float32x2_t v20 = v520;
        uint64_t v511 = v99;
        float32x2_t v201 = vmul_f32(vadd_f32((float32x2_t)v544.n128_u64[0], *(float32x2_t *)&v544.n128_i8[8]), (float32x2_t)0x3F0000003F000000);
        if ((unint64_t)v97 >= v522)
        {
          uint64_t v202 = v97 - v532;
          unint64_t v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v522 - (void)v532) >> 2 > v203) {
            unint64_t v203 = (uint64_t)(v522 - (void)v532) >> 2;
          }
          if (v522 - (unint64_t)v532 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v204 = v203;
          }
          if (v204) {
            unint64_t v204 = (unint64_t)sub_25B3FCAD4(v204);
          }
          else {
            uint64_t v205 = 0;
          }
          unint64_t v206 = (float32x2_t *)(v204 + 8 * v202);
          *unint64_t v206 = v201;
          unint64_t v73 = v206 + 1;
          if (v97 == v532)
          {
            uint64_t v207 = v532;
          }
          else
          {
            uint64_t v207 = v532;
            do
            {
              float32x2_t v208 = v97[-1];
              --v97;
              v206[-1] = v208;
              --v206;
            }
            while (v97 != v532);
          }
          unint64_t v522 = v204 + 8 * v205;
          if (v207) {
            operator delete(v207);
          }
          uint64_t v532 = v206;
          goto LABEL_119;
        }
        *BOOL v97 = v201;
        unint64_t v73 = v97 + 1;
LABEL_120:
        v554[0] = (void *)v78;
        sub_25B5BE584(v513, (int *)v554);
        v554[0] = (void *)(v78 | 0x100000000);
        sub_25B5BE584(v513, (int *)v554);
        v554[0] = (void *)v77;
        float v72 = v532;
        sub_25B5BE584(v513, (int *)v554);
        v554[0] = (void *)(v77 | 0x100000000);
        sub_25B5BE584(v513, (int *)v554);
        goto LABEL_271;
      case 5:
        __n128 v86 = v545;
        __n128 v87 = v544;
        sub_25B40E03C((float **)v554, (float32x2_t *)&v545, (float32x2_t *)&v544);
        float v88 = *(float *)(v530 + 72);
        float32x2_t v89 = (float32x2_t)v87.n128_u64[0];
        float32x2_t v90 = (float32x2_t)v86.n128_u64[0];
        if (*(float *)v554[0] >= v88)
        {
          if (*((float *)v554[0] + 1) >= v88)
          {
            float32x2_t v89 = (float32x2_t)v87.n128_u64[0];
            float32x2_t v90 = *(float32x2_t *)&v86.n128_i8[8];
            if (*((float *)v554[0] + 2) >= v88)
            {
              float32x2_t v89 = *(float32x2_t *)&v87.n128_i8[8];
              float32x2_t v90 = *(float32x2_t *)&v86.n128_i8[8];
            }
          }
          else
          {
            float32x2_t v89 = *(float32x2_t *)&v87.n128_i8[8];
            float32x2_t v90 = (float32x2_t)v86.n128_u64[0];
          }
        }
        operator delete(v554[0]);
        float32x2_t v106 = vabd_f32(v90, (float32x2_t)v86.n128_u64[0]);
        if (fmaxf(v106.f32[0], v106.f32[1]) <= 0.000001) {
          v554[0] = (void *)v78;
        }
        else {
          v554[0] = (void *)(v78 | 0x100000000);
        }
        sub_25B5BE584(v513, (int *)v554);
        float32x2_t v107 = vabd_f32(v89, (float32x2_t)v87.n128_u64[0]);
        if (fmaxf(v107.f32[0], v107.f32[1]) <= 0.000001) {
          v554[0] = (void *)v77;
        }
        else {
          v554[0] = (void *)(v77 | 0x100000000);
        }
        sub_25B5BE584(v513, (int *)v554);
        int v108 = v77;
        unint64_t i = v549;
        if (!v549)
        {
          float v72 = v532;
          goto LABEL_254;
        }
        uint64_t v110 = v549;
        while (1)
        {
          int v111 = *((_DWORD *)v110 + 7);
          if (v78 >= v111)
          {
            if (v111 >= v78)
            {
              float32x2_t v117 = vsub_f32((float32x2_t)v86.n128_u64[0], *(float32x2_t *)&v86.n128_i8[8]);
              if (sqrtf(vaddv_f32(vmul_f32(v117, v117))) > *(float *)(v530 + 44))
              {
                float32x2_t v118 = (float32x2_t)v79[6 * v78 + 4];
                float v72 = v532;
                if ((unint64_t)v76 >= v508)
                {
                  uint64_t v177 = v76 - v511;
                  unint64_t v178 = v177 + 1;
                  if ((unint64_t)(v177 + 1) >> 61) {
                    sub_25B3FBC4C();
                  }
                  if ((uint64_t)(v508 - (void)v511) >> 2 > v178) {
                    unint64_t v178 = (uint64_t)(v508 - (void)v511) >> 2;
                  }
                  if (v508 - (unint64_t)v511 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v179 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v179 = v178;
                  }
                  if (v179) {
                    unint64_t v179 = (unint64_t)sub_25B3FCAD4(v179);
                  }
                  else {
                    uint64_t v180 = 0;
                  }
                  unint64_t v211 = (float32x2_t *)(v179 + 8 * v177);
                  *unint64_t v211 = v118;
                  uint64_t v119 = v211 + 1;
                  if (v76 != v511)
                  {
                    do
                    {
                      float32x2_t v212 = v76[-1];
                      --v76;
                      v211[-1] = v212;
                      --v211;
                    }
                    while (v76 != v511);
                    float v76 = v511;
                  }
                  uint64_t v511 = v211;
                  unint64_t v508 = v179 + 8 * v180;
                  if (v76) {
                    operator delete(v76);
                  }
                  int v108 = v77;
                }
                else
                {
                  *float v76 = v118;
                  uint64_t v119 = v76 + 1;
                }
                for (unint64_t i = v549; ; unint64_t i = (void *)*i)
                {
LABEL_162:
                  if (!i) {
                    goto LABEL_253;
                  }
                  int v120 = *((_DWORD *)i + 7);
                  if (v77 >= v120)
                  {
                    if (v120 >= v77)
                    {
                      float32x2_t v160 = vsub_f32((float32x2_t)v544.n128_u64[0], *(float32x2_t *)&v544.n128_i8[8]);
                      if (sqrtf(vaddv_f32(vmul_f32(v160, v160))) <= *(float *)(v530 + 44)) {
                        goto LABEL_253;
                      }
                      float32x2_t v161 = *(float32x2_t *)((char *)v542 + 48 * v108 + 32);
                      if ((unint64_t)v119 >= v508)
                      {
                        uint64_t v195 = v119 - v511;
                        unint64_t v196 = v195 + 1;
                        if ((unint64_t)(v195 + 1) >> 61) {
                          sub_25B3FBC4C();
                        }
                        if ((uint64_t)(v508 - (void)v511) >> 2 > v196) {
                          unint64_t v196 = (uint64_t)(v508 - (void)v511) >> 2;
                        }
                        if (v508 - (unint64_t)v511 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v197 = v196;
                        }
                        if (v197) {
                          unint64_t v197 = (unint64_t)sub_25B3FCAD4(v197);
                        }
                        else {
                          uint64_t v198 = 0;
                        }
                        uint64_t v215 = (float32x2_t *)(v197 + 8 * v195);
                        *uint64_t v215 = v161;
                        float v76 = v215 + 1;
                        if (v119 != v511)
                        {
                          do
                          {
                            float32x2_t v216 = v119[-1];
                            --v119;
                            v215[-1] = v216;
                            --v215;
                          }
                          while (v119 != v511);
                          uint64_t v119 = v511;
                        }
                        uint64_t v511 = v215;
                        unint64_t v508 = v197 + 8 * v198;
                        if (v119) {
                          operator delete(v119);
                        }
                      }
                      else
                      {
                        *v119++ = v161;
LABEL_253:
                        float v76 = v119;
                      }
LABEL_254:
                      float32x2_t v151 = vmla_f32(vmul_f32(v89, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v90);
                      float32x2_t v20 = v520;
                      if ((unint64_t)v73 < v522) {
                        goto LABEL_255;
                      }
                      uint64_t v162 = v73 - v72;
                      unint64_t v163 = v162 + 1;
                      if ((unint64_t)(v162 + 1) >> 61) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v522 - (void)v72) >> 2 > v163) {
                        unint64_t v163 = (uint64_t)(v522 - (void)v72) >> 2;
                      }
                      if (v522 - (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v154 = v163;
                      }
                      if (v154) {
                        unint64_t v154 = (unint64_t)sub_25B3FCAD4(v154);
                      }
                      else {
                        uint64_t v155 = 0;
                      }
                      float32x2_t v156 = (float32x2_t *)(v154 + 8 * v162);
                      float32x2_t *v156 = v151;
                      int32x2_t v157 = v156 + 1;
                      while (v73 != v72)
                      {
                        float32x2_t v164 = v73[-1];
                        --v73;
                        v156[-1] = v164;
                        --v156;
                      }
                      goto LABEL_268;
                    }
                    ++i;
                  }
                }
              }
LABEL_161:
              uint64_t v119 = v76;
              float v72 = v532;
              goto LABEL_162;
            }
            ++v110;
          }
          uint64_t v110 = (void *)*v110;
          if (!v110) {
            goto LABEL_161;
          }
        }
      case 6:
        int32x2_t v91 = v549;
        if (!v549)
        {
          float v72 = v532;
          goto LABEL_235;
        }
        float v92 = v549;
        break;
      default:
        float v72 = v532;
        goto LABEL_271;
    }
    while (1)
    {
      int v93 = *((_DWORD *)v92 + 7);
      if (v78 >= v93)
      {
        if (v93 >= v78)
        {
          float32x2_t v112 = vsub_f32((float32x2_t)v545.n128_u64[0], *(float32x2_t *)&v545.n128_i8[8]);
          if (sqrtf(vaddv_f32(vmul_f32(v112, v112))) <= *(float *)(v530 + 44))
          {
LABEL_150:
            int v114 = v76;
            float v72 = v532;
            goto LABEL_151;
          }
          float32x2_t v113 = *(float32x2_t *)((char *)v542 + 48 * v78 + 32);
          float v72 = v532;
          if ((unint64_t)v76 >= v508)
          {
            uint64_t v173 = v76 - v511;
            unint64_t v174 = v173 + 1;
            if ((unint64_t)(v173 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v508 - (void)v511) >> 2 > v174) {
              unint64_t v174 = (uint64_t)(v508 - (void)v511) >> 2;
            }
            if (v508 - (unint64_t)v511 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v175 = v174;
            }
            if (v175) {
              unint64_t v175 = (unint64_t)sub_25B3FCAD4(v175);
            }
            else {
              uint64_t v176 = 0;
            }
            uint64_t v209 = (float32x2_t *)(v175 + 8 * v173);
            *uint64_t v209 = v113;
            int v114 = v209 + 1;
            if (v76 != v511)
            {
              do
              {
                float32x2_t v210 = v76[-1];
                --v76;
                v209[-1] = v210;
                --v209;
              }
              while (v76 != v511);
              float v76 = v511;
            }
            uint64_t v511 = v209;
            unint64_t v508 = v175 + 8 * v176;
            if (v76) {
              operator delete(v76);
            }
            int v82 = v77;
          }
          else
          {
            *float v76 = v113;
            int v114 = v76 + 1;
          }
          int32x2_t v91 = v549;
LABEL_151:
          while (2)
          {
            if (!v91) {
              goto LABEL_234;
            }
            int v115 = *((_DWORD *)v91 + 7);
            if (v77 < v115)
            {
LABEL_155:
              int32x2_t v91 = (void *)*v91;
              continue;
            }
            break;
          }
          if (v115 < v77)
          {
            ++v91;
            goto LABEL_155;
          }
          float32x2_t v149 = vsub_f32((float32x2_t)v544.n128_u64[0], *(float32x2_t *)&v544.n128_i8[8]);
          if (sqrtf(vaddv_f32(vmul_f32(v149, v149))) <= *(float *)(v530 + 44))
          {
LABEL_234:
            float v76 = v114;
            goto LABEL_235;
          }
          float32x2_t v150 = *(float32x2_t *)((char *)v542 + 48 * v82 + 32);
          if ((unint64_t)v114 < v508)
          {
            *v114++ = v150;
            goto LABEL_234;
          }
          uint64_t v191 = v114 - v511;
          unint64_t v192 = v191 + 1;
          if ((unint64_t)(v191 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v508 - (void)v511) >> 2 > v192) {
            unint64_t v192 = (uint64_t)(v508 - (void)v511) >> 2;
          }
          if (v508 - (unint64_t)v511 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v193 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v193 = v192;
          }
          if (v193) {
            unint64_t v193 = (unint64_t)sub_25B3FCAD4(v193);
          }
          else {
            uint64_t v194 = 0;
          }
          unint64_t v213 = (float32x2_t *)(v193 + 8 * v191);
          float32x2_t *v213 = v150;
          float v76 = v213 + 1;
          if (v114 != v511)
          {
            do
            {
              float32x2_t v214 = v114[-1];
              --v114;
              v213[-1] = v214;
              --v213;
            }
            while (v114 != v511);
            int v114 = v511;
          }
          uint64_t v511 = v213;
          unint64_t v508 = v193 + 8 * v194;
          if (v114) {
            operator delete(v114);
          }
LABEL_235:
          float32x2_t v151 = vmla_f32(vmul_f32(vmul_f32(vadd_f32((float32x2_t)v544.n128_u64[0], *(float32x2_t *)&v544.n128_i8[8]), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, vmul_f32(vadd_f32((float32x2_t)v545.n128_u64[0], *(float32x2_t *)&v545.n128_i8[8]), (float32x2_t)0x3F0000003F000000));
          float32x2_t v20 = v520;
          if ((unint64_t)v73 < v522)
          {
LABEL_255:
            *v73++ = v151;
          }
          else
          {
            uint64_t v152 = v73 - v72;
            unint64_t v153 = v152 + 1;
            if ((unint64_t)(v152 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v522 - (void)v72) >> 2 > v153) {
              unint64_t v153 = (uint64_t)(v522 - (void)v72) >> 2;
            }
            if (v522 - (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v154 = v153;
            }
            if (v154) {
              unint64_t v154 = (unint64_t)sub_25B3FCAD4(v154);
            }
            else {
              uint64_t v155 = 0;
            }
            float32x2_t v156 = (float32x2_t *)(v154 + 8 * v152);
            float32x2_t *v156 = v151;
            int32x2_t v157 = v156 + 1;
            while (v73 != v72)
            {
              float32x2_t v158 = v73[-1];
              --v73;
              v156[-1] = v158;
              --v156;
            }
LABEL_268:
            unint64_t v522 = v154 + 8 * v155;
            if (v72) {
              operator delete(v72);
            }
            float v72 = v156;
            unint64_t v73 = v157;
          }
LABEL_271:
          v71 += 3;
          if (v71 == v526)
          {
            if (v76 == v511 || v73 == v72)
            {
              if (v75 == v515)
              {
                uint64_t v12 = v504;
              }
              else
              {
                int32x2_t v241 = 0;
                int32x2_t v242 = 0;
                uint64_t v12 = v504;
                if (v74 != v524)
                {
                  float32x2_t v243 = 0;
                  unint64_t v244 = v524;
                  do
                  {
                    float32x2_t v245 = *v244++;
                    v246.i32[1] = v245.i32[1];
                    float32x2_t v243 = vadd_f32(v243, v245);
                  }
                  while (v244 != v74);
                  *(float *)v246.i32 = (float)(unint64_t)(v74 - v524);
                  float32x2_t v247 = vdiv_f32(v243, (float32x2_t)vdup_lane_s32(v246, 0));
                  int32x2_t v248 = (int32x2_t)vmul_f32(v247, v247);
                  v248.i32[0] = vadd_f32((float32x2_t)v248, (float32x2_t)vdup_lane_s32(v248, 1)).u32[0];
                  float32x2_t v249 = vrsqrte_f32((float32x2_t)v248.u32[0]);
                  float32x2_t v250 = vmul_f32(v249, vrsqrts_f32((float32x2_t)v248.u32[0], vmul_f32(v249, v249)));
                  int32x2_t v242 = (int32x2_t)vmul_n_f32(v247, vmul_f32(v250, vrsqrts_f32((float32x2_t)v248.u32[0], vmul_f32(v250, v250))).f32[0]);
                }
                unint64_t v251 = v515;
                do
                {
                  float32x2_t v252 = *v251++;
                  v253.i32[1] = v252.i32[1];
                  int32x2_t v241 = (int32x2_t)vadd_f32((float32x2_t)v241, v252);
                }
                while (v251 != v75);
                uint64_t v254 = (int *)v538;
                uint64_t v255 = v539;
                if (v538 != v539)
                {
                  *(float *)v253.i32 = (float)(unint64_t)(v75 - v515);
                  float32x2_t v256 = vdiv_f32((float32x2_t)v241, (float32x2_t)vdup_lane_s32(v253, 0));
                  *(float *)v241.i32 = -*(float *)&v242.i32[1];
                  uint64_t v257 = (char *)v542;
                  float32x2_t v258 = vsub_f32(vadd_f32((float32x2_t)vzip1_s32(v241, v242), v256), v256);
                  float v259 = vaddv_f32(vmul_f32(v258, v258));
                  if (v259 >= 0.000001) {
                    float v260 = v259;
                  }
                  else {
                    float v260 = 0.000001;
                  }
                  uint64_t v223 = v515;
                  do
                  {
                    uint64_t v261 = (const char *)*v254;
                    unsigned int v262 = (float32x2_t *)&v257[48 * (int)v261];
                    v81.n128_u64[0] = (unint64_t)vmla_n_f32(v256, v258, vaddv_f32(vmul_f32(vsub_f32(*v262, v256), v258)) / v260);
                    v80.n128_u64[0] = (unint64_t)vmla_n_f32(v256, v258, vaddv_f32(vmul_f32(vsub_f32(v262[1], v256), v258)) / v260);
                    sub_25B5BDEFC(v530, v261, v81, v80);
                    ++v254;
                  }
                  while (v254 != v255);
                  goto LABEL_433;
                }
              }
              unint64_t v263 = v524;
              uint64_t v223 = v515;
            }
            else
            {
              uint64_t v217 = v76 - v511;
              float32x2_t v218 = 0;
              uint64_t v219 = v511;
              do
              {
                float32x2_t v220 = *v219++;
                float32x2_t v218 = vadd_f32(v218, v220);
              }
              while (v219 != v76);
              int32x2_t v221 = 0;
              uint64_t v222 = v72;
              uint64_t v12 = v504;
              uint64_t v223 = v515;
              do
              {
                float32x2_t v224 = *v222++;
                v225.i32[1] = v224.i32[1];
                int32x2_t v221 = (int32x2_t)vadd_f32((float32x2_t)v221, v224);
              }
              while (v222 != v73);
              unint64_t v226 = (int *)v538;
              uint64_t v227 = v539;
              if (v538 != v539)
              {
                *(float *)v225.i32 = (float)(unint64_t)(v73 - v72);
                float32x2_t v228 = vdiv_f32((float32x2_t)v221, (float32x2_t)vdup_lane_s32(v225, 0));
                *(float *)v221.i32 = (float)(unint64_t)v217;
                float32x2_t v229 = vdiv_f32(v218, (float32x2_t)vdup_lane_s32(v221, 0));
                int32x2_t v230 = (int32x2_t)vmul_f32(v229, v229);
                v230.i32[0] = vadd_f32((float32x2_t)v230, (float32x2_t)vdup_lane_s32(v230, 1)).u32[0];
                float32x2_t v231 = vrsqrte_f32((float32x2_t)v230.u32[0]);
                float32x2_t v232 = vmul_f32(v231, vrsqrts_f32((float32x2_t)v230.u32[0], vmul_f32(v231, v231)));
                int32x2_t v233 = (int32x2_t)vmul_f32(v232, vrsqrts_f32((float32x2_t)v230.u32[0], vmul_f32(v232, v232)));
                int32x2_t v234 = (int32x2_t)vmul_n_f32(v229, *(float *)v233.i32);
                *(float *)v233.i32 = -*(float *)&v234.i32[1];
                uint64_t v235 = (char *)v542;
                float32x2_t v236 = vsub_f32(vadd_f32(v228, (float32x2_t)vzip1_s32(v233, v234)), v228);
                float v237 = vaddv_f32(vmul_f32(v236, v236));
                if (v237 >= 0.000001) {
                  float v238 = v237;
                }
                else {
                  float v238 = 0.000001;
                }
                do
                {
                  unint64_t v239 = (const char *)*v226;
                  uint64_t v240 = (float32x2_t *)&v235[48 * (int)v239];
                  v81.n128_u64[0] = (unint64_t)vmla_n_f32(v228, v236, vaddv_f32(vmul_f32(vsub_f32(*v240, v228), v236)) / v238);
                  v80.n128_u64[0] = (unint64_t)vmla_n_f32(v228, v236, vaddv_f32(vmul_f32(vsub_f32(v240[1], v228), v236)) / v238);
                  sub_25B5BDEFC(v530, v239, v81, v80);
                  ++v226;
                }
                while (v226 != v227);
              }
LABEL_433:
              unint64_t v263 = v524;
            }
LABEL_434:
            sub_25B3FA930(v549);
            if (v23) {
              operator delete(v23);
            }
            if (v20) {
              operator delete(v20);
            }
            if (v223) {
              operator delete(v223);
            }
            uint64_t v13 = v501;
            if (v263) {
              operator delete(v263);
            }
            if (v72) {
              operator delete(v72);
            }
            BOOL v264 = v511;
            if (!v511) {
              goto LABEL_463;
            }
LABEL_462:
            operator delete(v264);
            goto LABEL_463;
          }
          goto LABEL_94;
        }
        ++v92;
      }
      float v92 = (void *)*v92;
      if (!v92) {
        goto LABEL_150;
      }
    }
  }
LABEL_466:
  if (v542) {
    operator delete(v542);
  }
  v565.n128_u64[0] = (unint64_t)&v546;
  sub_25B413BE8((void ***)&v565);
  sub_25B5BCE18(v530 + 328);
  uint64_t v280 = *(unsigned int **)(v530 + 448);
  for (uint64_t j = *(unsigned int **)(v530 + 456); v280 != j; v280 += 3)
  {
    BOOL v282 = sub_25B5BCE70((uint64_t *)(v530 + 328), v280[2], v280 + 2);
    size_t v283 = v282;
    uint64_t v284 = *v280;
    uint64_t v285 = v280[1];
    id v287 = (uint64_t *)v282[4];
    unint64_t v286 = v282[5];
    if ((unint64_t)v287 >= v286)
    {
      uint64_t v289 = v282[3];
      uint64_t v290 = ((uint64_t)v287 - v289) >> 3;
      if ((unint64_t)(v290 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      uint64_t v291 = v286 - v289;
      uint64_t v292 = v291 >> 2;
      if (v291 >> 2 <= (unint64_t)(v290 + 1)) {
        uint64_t v292 = v290 + 1;
      }
      if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v293 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v293 = v292;
      }
      if (v293) {
        unint64_t v293 = (unint64_t)sub_25B3FCAD4(v293);
      }
      else {
        uint64_t v294 = 0;
      }
      unint64_t v295 = (uint64_t *)(v293 + 8 * v290);
      *unint64_t v295 = v284 | (v285 << 32);
      unint64_t v288 = v295 + 1;
      uint64_t v297 = (char *)v283[3];
      int v296 = (char *)v283[4];
      if (v296 != v297)
      {
        do
        {
          uint64_t v298 = *((void *)v296 - 1);
          v296 -= 8;
          *--unint64_t v295 = v298;
        }
        while (v296 != v297);
        int v296 = (char *)v283[3];
      }
      v283[3] = v295;
      v283[4] = v288;
      v283[5] = v293 + 8 * v294;
      if (v296) {
        operator delete(v296);
      }
    }
    else
    {
      *id v287 = v284 | (v285 << 32);
      unint64_t v288 = v287 + 1;
    }
    v283[4] = v288;
  }
  id v533 = v498;
  unint64_t v301 = 0;
  long long v527 = (void *)(v530 + 472);
  while (objc_msgSend_count(*(void **)(v530 + 256), v299, v300, v498) > (unint64_t)v301)
  {
    uint64_t v303 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v530 + 256), v302, (uint64_t)v301);
    unint64_t v306 = (void *)v303;
    if (v303)
    {
      unint64_t v308 = *(void *)(v303 + 160);
      uint64_t v307 = *(void *)(v303 + 168);
    }
    else
    {
      unint64_t v308 = 0;
      LODWORD(v307) = 0;
    }
    if (v308 < objc_msgSend_count(v533, v304, v305)
      && (!sub_25B5BD5EC(v527, (int)v301, 0) || !sub_25B5BD5EC(v527, (int)v301, 1)))
    {
      uint64_t v309 = *(void *)(v530 + 552);
      float32x2_t v310 = (float32x2_t)sub_25B477C40(v306).n128_u64[0];
      float32x2_t v312 = v311;
      unint64_t v313 = (void *)(v309 + 40 * v308);
      if (sub_25B5BD5EC(v313, v307, 0))
      {
        v565.n128_u64[0] = v307;
        float32x2_t v314 = sub_25B5BD6B0(v309 + 40 * v308, (int *)&v565);
        if (*((void *)v314 + 1) != *(void *)v314)
        {
          uint32x2_t v316 = objc_msgSend_objectAtIndexedSubscript_(v533, v315, v308);
          int v319 = objc_msgSend_walls(v316, v317, v318);

          v565.n128_u64[0] = v307;
          float v320 = sub_25B5BD6B0(v309 + 40 * v308, (int *)&v565);
          float v324 = *(int **)v320;
          int v323 = (int *)*((void *)v320 + 1);
          while (v324 != v323)
          {
            unint64_t v325 = *v324;
            if (objc_msgSend_count(v319, v321, v322) > v325)
            {
              float v326 = objc_msgSend_objectAtIndexedSubscript_(v319, v321, *v324);
              uint64_t v327 = v326;
              if (v326) {
                float32x2_t v328 = (const char *)v326[22];
              }
              else {
                float32x2_t v328 = 0;
              }
              __n128 v329 = sub_25B477C40(v326);
              float32x2_t v331 = (float32x2_t)v329.n128_u64[0];
              unint64_t v332 = v330.n128_u64[0];
              int v333 = v324[1];
              if (v333 == 1)
              {
                v330.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v330.n128_u64[0], (float32x2_t)v329.n128_u64[0]);
                v329.n128_f32[0] = vaddv_f32(vmul_f32(vsub_f32(v310, (float32x2_t)v329.n128_u64[0]), (float32x2_t)v330.n128_u64[0]));
                float v338 = vaddv_f32(vmul_f32((float32x2_t)v330.n128_u64[0], (float32x2_t)v330.n128_u64[0]));
                if (v338 < 0.000001) {
                  float v338 = 0.000001;
                }
                float32x2_t v339 = vmla_n_f32(v331, (float32x2_t)v330.n128_u64[0], v329.n128_f32[0] / v338);
                v329.n128_u64[0] = (unint64_t)v339;
                v330.n128_u64[0] = (unint64_t)v312;
                sub_25B5BDEFC(v530, v301, v329, v330);
                v340.n128_u64[0] = (unint64_t)v331;
                v341.n128_u64[0] = (unint64_t)v339;
                sub_25B5BDEFC(v530, v328, v340, v341);
              }
              else if (!v333)
              {
                v330.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v330.n128_u64[0], (float32x2_t)v329.n128_u64[0]);
                v329.n128_f32[0] = vaddv_f32(vmul_f32(vsub_f32(v310, (float32x2_t)v329.n128_u64[0]), (float32x2_t)v330.n128_u64[0]));
                float v334 = vaddv_f32(vmul_f32((float32x2_t)v330.n128_u64[0], (float32x2_t)v330.n128_u64[0]));
                if (v334 < 0.000001) {
                  float v334 = 0.000001;
                }
                float32x2_t v335 = vmla_n_f32(v331, (float32x2_t)v330.n128_u64[0], v329.n128_f32[0] / v334);
                v329.n128_u64[0] = (unint64_t)v335;
                v330.n128_u64[0] = (unint64_t)v312;
                sub_25B5BDEFC(v530, v301, v329, v330);
                v336.n128_u64[0] = (unint64_t)v335;
                v337.n128_u64[0] = v332;
                sub_25B5BDEFC(v530, v328, v336, v337);
              }
            }
            v324 += 2;
          }
        }
      }
      if (sub_25B5BD5EC(v313, v307, 1))
      {
        v565.n128_u64[0] = v307 | 0x100000000;
        int32x2_t v342 = sub_25B5BD6B0((uint64_t)v313, (int *)&v565);
        if (*((void *)v342 + 1) != *(void *)v342)
        {
          int32x2_t v344 = objc_msgSend_objectAtIndexedSubscript_(v533, v343, v308);
          uint64_t v347 = objc_msgSend_walls(v344, v345, v346);

          v565.n128_u64[0] = v307 | 0x100000000;
          unint64_t v348 = sub_25B5BD6B0((uint64_t)v313, (int *)&v565);
          uint64_t v352 = *(int **)v348;
          uint64_t v351 = (int *)*((void *)v348 + 1);
          while (v352 != v351)
          {
            unint64_t v353 = *v352;
            if (objc_msgSend_count(v347, v349, v350) > v353)
            {
              uint64_t v354 = objc_msgSend_objectAtIndexedSubscript_(v347, v349, *v352);
              unint64_t v355 = v354;
              if (v354) {
                uint64_t v356 = (const char *)v354[22];
              }
              else {
                uint64_t v356 = 0;
              }
              __n128 v357 = sub_25B477C40(v354);
              float32x2_t v359 = (float32x2_t)v357.n128_u64[0];
              unint64_t v360 = v358.n128_u64[0];
              int v361 = v352[1];
              if (v361 == 1)
              {
                v358.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v358.n128_u64[0], (float32x2_t)v357.n128_u64[0]);
                v357.n128_f32[0] = vaddv_f32(vmul_f32(vsub_f32(v312, (float32x2_t)v357.n128_u64[0]), (float32x2_t)v358.n128_u64[0]));
                float v366 = vaddv_f32(vmul_f32((float32x2_t)v358.n128_u64[0], (float32x2_t)v358.n128_u64[0]));
                if (v366 < 0.000001) {
                  float v366 = 0.000001;
                }
                float32x2_t v367 = vmla_n_f32(v359, (float32x2_t)v358.n128_u64[0], v357.n128_f32[0] / v366);
                v357.n128_u64[0] = (unint64_t)v310;
                v358.n128_u64[0] = (unint64_t)v367;
                sub_25B5BDEFC(v530, v301, v357, v358);
                v368.n128_u64[0] = (unint64_t)v359;
                v369.n128_u64[0] = (unint64_t)v367;
                sub_25B5BDEFC(v530, v356, v368, v369);
              }
              else if (!v361)
              {
                v358.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v358.n128_u64[0], (float32x2_t)v357.n128_u64[0]);
                v357.n128_f32[0] = vaddv_f32(vmul_f32(vsub_f32(v312, (float32x2_t)v357.n128_u64[0]), (float32x2_t)v358.n128_u64[0]));
                float v362 = vaddv_f32(vmul_f32((float32x2_t)v358.n128_u64[0], (float32x2_t)v358.n128_u64[0]));
                if (v362 < 0.000001) {
                  float v362 = 0.000001;
                }
                float32x2_t v363 = vmla_n_f32(v359, (float32x2_t)v358.n128_u64[0], v357.n128_f32[0] / v362);
                v357.n128_u64[0] = (unint64_t)v310;
                v358.n128_u64[0] = (unint64_t)v363;
                sub_25B5BDEFC(v530, v301, v357, v358);
                v364.n128_u64[0] = (unint64_t)v363;
                v365.n128_u64[0] = v360;
                sub_25B5BDEFC(v530, v356, v364, v365);
              }
            }
            v352 += 2;
          }
        }
      }
    }

    ++v301;
  }

  id v502 = v533;
  uint64_t v370 = *(void *)(v530 + 624);
  uint64_t v371 = *(void *)(v530 + 616);
  sub_25B5B7BC4(&v546, 0xCCCCCCCCCCCCCCCDLL * ((v370 - v371) >> 3));
  uint64_t v372 = *(void *)(v530 + 448);
  uint64_t v373 = *(void *)(v530 + 456);
  if (v372 != v373)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v370 - v371) >> 3) <= 1) {
      unint64_t v374 = 1;
    }
    else {
      unint64_t v374 = 0xCCCCCCCCCCCCCCCDLL * ((v370 - v371) >> 3);
    }
    do
    {
      if (v370 != v371)
      {
        uint64_t v375 = 0;
        uint64_t v376 = 0;
        unint64_t v377 = v374;
        do
        {
          unint64_t v378 = (void *)(*(void *)(v530 + 616) + v375);
          if (sub_25B3FAE64(v378, *(_DWORD *)v372) || sub_25B3FAE64(v378, *(_DWORD *)(v372 + 4))) {
            sub_25B5B7C90((char **)&v546[v376], (uint64_t *)v372);
          }
          v376 += 3;
          v375 += 40;
          --v377;
        }
        while (v377);
      }
      v372 += 12;
    }
    while (v372 != v373);
  }
  long long v558 = 0u;
  long long v559 = 0u;
  int v560 = 1065353216;
  uint64_t v379 = *(void *)(v530 + 624) - *(void *)(v530 + 616);
  uint64_t v380 = v502;
  if (v379)
  {
    uint64_t v381 = 0;
    unint64_t v382 = v379 / 40;
    long long v514 = (void *)(v530 + 512);
    if (v382 <= 1) {
      uint64_t v383 = 1;
    }
    else {
      uint64_t v383 = v382;
    }
    __asm { FMOV            V0.2S, #1.0 }
    int v507 = HIDWORD(_D0);
    uint64_t v500 = v383;
    while (1)
    {
      uint64_t v388 = *(void *)(v530 + 616);
      sub_25B5BD26C((void **)&__p, *(void **)(v530 + 256));
      float32x2_t v389 = (uint64_t *)&v546[3 * v381];
      uint64_t v390 = *v389;
      uint64_t v391 = v389[1];
      while (1)
      {
        if (v390 == v391) {
          goto LABEL_733;
        }
        if (*(_DWORD *)(v390 + 8) != 3) {
          break;
        }
        v390 += 12;
      }
      uint64_t v503 = v381;
      uint64_t v392 = *(int **)(v388 + 40 * v381 + 16);
      if (v392)
      {
        unint64_t v393 = 0;
        float v394 = 0;
        long long v516 = 0;
        long long v518 = 0;
        unint64_t v395 = 0;
        uint64_t v396 = 0;
        do
        {
          unint64_t v397 = (uint64_t *)(__p.n128_u64[0] + 48 * v392[4]);
          uint64_t v399 = *v397;
          uint64_t v398 = v397[1];
          if ((unint64_t)v396 >= v395)
          {
            unint64_t v401 = 0xAAAAAAAAAAAAAAABLL * ((v396 - v516) >> 2) + 1;
            if (v401 > 0x1555555555555555) {
              goto LABEL_739;
            }
            if (0x5555555555555556 * ((uint64_t)(v395 - (void)v516) >> 2) > v401) {
              unint64_t v401 = 0x5555555555555556 * ((uint64_t)(v395 - (void)v516) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (void)v516) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v402 = 0x1555555555555555;
            }
            else {
              unint64_t v402 = v401;
            }
            if (v402) {
              unint64_t v402 = (unint64_t)sub_25B478C4C(v402);
            }
            else {
              uint64_t v403 = 0;
            }
            unint64_t v404 = v402 + 4 * ((v396 - v516) >> 2);
            *(void *)unint64_t v404 = v399;
            *(_DWORD *)(v404 + 8) = -1;
            if (v396 == v516)
            {
              long long v516 = (char *)(v402 + 4 * ((v396 - v516) >> 2));
            }
            else
            {
              float32x2_t v405 = (char *)(v402 + 4 * ((v396 - v516) >> 2));
              do
              {
                uint64_t v406 = *(void *)(v396 - 12);
                v396 -= 12;
                int v407 = *((_DWORD *)v396 + 2);
                *(void *)(v405 - 12) = v406;
                v405 -= 12;
                *((_DWORD *)v405 + 2) = v407;
              }
              while (v396 != v516);
              uint64_t v396 = v516;
              long long v516 = v405;
            }
            unint64_t v395 = v402 + 12 * v403;
            int32x2_t v400 = (char *)(v404 + 12);
            if (v396) {
              operator delete(v396);
            }
          }
          else
          {
            *(void *)uint64_t v396 = v399;
            *((_DWORD *)v396 + 2) = -1;
            int32x2_t v400 = v396 + 12;
          }
          if ((unint64_t)v400 >= v395)
          {
            unint64_t v408 = 0xAAAAAAAAAAAAAAABLL * ((v400 - v516) >> 2) + 1;
            if (v408 > 0x1555555555555555) {
LABEL_739:
            }
              sub_25B3FBC4C();
            if (0x5555555555555556 * ((uint64_t)(v395 - (void)v516) >> 2) > v408) {
              unint64_t v408 = 0x5555555555555556 * ((uint64_t)(v395 - (void)v516) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (void)v516) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v409 = 0x1555555555555555;
            }
            else {
              unint64_t v409 = v408;
            }
            if (v409) {
              unint64_t v409 = (unint64_t)sub_25B478C4C(v409);
            }
            else {
              uint64_t v410 = 0;
            }
            unint64_t v411 = v409 + 4 * ((v400 - v516) >> 2);
            *(void *)unint64_t v411 = v398;
            *(_DWORD *)(v411 + 8) = -1;
            float v412 = (char *)v411;
            if (v400 == v516)
            {
              uint64_t v413 = v516;
            }
            else
            {
              uint64_t v413 = v516;
              do
              {
                uint64_t v414 = *(void *)(v400 - 12);
                v400 -= 12;
                int v415 = *((_DWORD *)v400 + 2);
                *(void *)(v412 - 12) = v414;
                v412 -= 12;
                *((_DWORD *)v412 + 2) = v415;
              }
              while (v400 != v516);
            }
            unint64_t v395 = v409 + 12 * v410;
            uint64_t v396 = (char *)(v411 + 12);
            if (v413) {
              operator delete(v413);
            }
            long long v516 = v412;
          }
          else
          {
            *(void *)int32x2_t v400 = v398;
            *((_DWORD *)v400 + 2) = -1;
            uint64_t v396 = v400 + 12;
          }
          HIDWORD(v416) = 0;
          *(float *)&uint64_t v416 = (float)v392[4];
          if ((unint64_t)v394 >= v393)
          {
            uint64_t v534 = v416;
            uint64_t v418 = v394 - v518;
            unint64_t v419 = v418 + 1;
            if ((unint64_t)(v418 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v393 - (void)v518) >> 2 > v419) {
              unint64_t v419 = (uint64_t)(v393 - (void)v518) >> 2;
            }
            if (v393 - (unint64_t)v518 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v420 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v420 = v419;
            }
            if (v420) {
              unint64_t v420 = (unint64_t)sub_25B3FCAD4(v420);
            }
            else {
              uint64_t v421 = 0;
            }
            uint64_t v422 = (void *)(v420 + 8 * v418);
            *uint64_t v422 = v534;
            uint64_t v417 = v422 + 1;
            if (v394 != v518)
            {
              do
              {
                uint64_t v423 = *--v394;
                *--uint64_t v422 = v423;
              }
              while (v394 != v518);
              float v394 = v518;
            }
            long long v518 = v422;
            unint64_t v393 = v420 + 8 * v421;
            if (v394) {
              operator delete(v394);
            }
          }
          else
          {
            void *v394 = v416;
            uint64_t v417 = v394 + 1;
          }
          HIDWORD(v424) = v507;
          *(float *)&uint64_t v424 = (float)v392[4];
          if ((unint64_t)v417 >= v393)
          {
            uint64_t v535 = v424;
            uint64_t v425 = v417 - v518;
            unint64_t v426 = v425 + 1;
            if ((unint64_t)(v425 + 1) >> 61) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v393 - (void)v518) >> 2 > v426) {
              unint64_t v426 = (uint64_t)(v393 - (void)v518) >> 2;
            }
            if (v393 - (unint64_t)v518 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v427 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v427 = v426;
            }
            if (v427) {
              unint64_t v427 = (unint64_t)sub_25B3FCAD4(v427);
            }
            else {
              uint64_t v428 = 0;
            }
            uint64_t v429 = (void *)(v427 + 8 * v425);
            void *v429 = v535;
            float v394 = v429 + 1;
            if (v417 == v518)
            {
              float32x2_t v430 = v518;
            }
            else
            {
              float32x2_t v430 = v518;
              do
              {
                uint64_t v431 = *--v417;
                *--uint64_t v429 = v431;
              }
              while (v417 != v518);
            }
            unint64_t v393 = v427 + 8 * v428;
            if (v430) {
              operator delete(v430);
            }
            long long v518 = v429;
          }
          else
          {
            *uint64_t v417 = v424;
            float v394 = v417 + 1;
          }
          uint64_t v392 = *(int **)v392;
        }
        while (v392);
      }
      else
      {
        long long v516 = 0;
        long long v518 = 0;
        uint64_t v396 = 0;
      }
      float v432 = *(float *)(v530 + 128);
      uint64_t v552 = 0;
      uint64_t v553 = 0;
      unint64_t v551 = 0;
      sub_25B58B28C(&v551, v516, (uint64_t)v396, 0xAAAAAAAAAAAAAAABLL * ((v396 - v516) >> 2));
      uint64_t v433 = (char *)v518;
      sub_25B58B308((uint64_t)v554, 1, (uint64_t)&v551, v432 * 0.6);
      if (v551)
      {
        uint64_t v552 = v551;
        operator delete(v551);
      }
      sub_25B573834((uint64_t)v554);
      int v434 = v555;
      float32x2_t v548 = 0;
      uint64_t v549 = 0;
      uint64_t v550 = 0;
      sub_25B58B28C(&v548, v554[0], (uint64_t)v554[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v554[1] - (char *)v554[0]) >> 2));
      if (v434 >= 1) {
        break;
      }
LABEL_725:
      if (v548) {
        operator delete(v548);
      }
      uint64_t v380 = v502;
      uint64_t v381 = v503;
      uint64_t v383 = v500;
      if (v554[0])
      {
        v554[1] = v554[0];
        operator delete(v554[0]);
      }
      if (v433) {
        operator delete(v433);
      }
      if (v516) {
        operator delete(v516);
      }
LABEL_733:
      if (__p.n128_u64[0]) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (++v381 == v383) {
        goto LABEL_736;
      }
    }
    int v435 = 0;
    int v505 = v434;
    while (1)
    {
      unint64_t v437 = (char *)v548;
      BOOL v436 = (char *)v549;
      int v512 = v435;
      if (v549 == v548) {
        break;
      }
      unint64_t v438 = 0;
      id v439 = 0;
      uint64_t v440 = 0;
      unint64_t v441 = 0;
      do
      {
        if (*(_DWORD *)&v437[12 * v441 + 8] - 1 == v435)
        {
          if ((unint64_t)v439 >= v438)
          {
            uint64_t v442 = (v439 - v440) >> 2;
            unint64_t v443 = v442 + 1;
            if ((unint64_t)(v442 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v438 - (void)v440) >> 1 > v443) {
              unint64_t v443 = (uint64_t)(v438 - (void)v440) >> 1;
            }
            if (v438 - (unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v444 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v444 = v443;
            }
            if (v444) {
              unint64_t v444 = (unint64_t)sub_25B3FBC64(v444);
            }
            else {
              uint64_t v445 = 0;
            }
            unint64_t v446 = (char *)(v444 + 4 * v442);
            *(_DWORD *)unint64_t v446 = v441;
            uint64_t v447 = v446 + 4;
            while (v439 != v440)
            {
              int v448 = *((_DWORD *)v439 - 1);
              v439 -= 4;
              *((_DWORD *)v446 - 1) = v448;
              v446 -= 4;
            }
            unint64_t v438 = v444 + 4 * v445;
            if (v440)
            {
              operator delete(v440);
              unint64_t v437 = (char *)v548;
              BOOL v436 = (char *)v549;
            }
            id v439 = v447;
            uint64_t v440 = v446;
            uint64_t v433 = (char *)v518;
            int v435 = v512;
          }
          else
          {
            *(_DWORD *)id v439 = v441;
            v439 += 4;
          }
        }
        ++v441;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v436 - v437) >> 2) > v441);
      if (v439 == v440)
      {
        int v434 = v505;
LABEL_721:
        sub_25B5BD26C((void **)&v565, *(void **)(v530 + 256));
        if (__p.n128_u64[0]) {
          operator delete((void *)__p.n128_u64[0]);
        }
        __n128 __p = v565;
        uint64_t v557 = v566;
        if (!v440) {
          goto LABEL_717;
        }
LABEL_716:
        operator delete(v440);
        goto LABEL_717;
      }
      unint64_t v449 = 0;
      float32x2_t v450 = 0;
      long long v521 = 0;
      float32x2_t v451 = v440;
      uint64_t v452 = (void *)(v530 + 512);
      do
      {
        int32x2_t v536 = vcvt_s32_f32(*(float32x2_t *)&v433[8 * *(int *)v451]);
        if (sub_25B5BD5EC(v514, v536.i32[0], v536.i32[1]))
        {
          v565.n128_u64[0] = (unint64_t)v536;
          uint64_t v453 = sub_25B5BD6B0((uint64_t)v514, (int *)&v565);
          if (*((void *)v453 + 1) != *(void *)v453)
          {
            float32x2_t v454 = *(float32x2_t *)&v516[12 * *(int *)v451];
            if ((unint64_t)v450 >= v449)
            {
              uint64_t v455 = v450 - v521;
              unint64_t v456 = v455 + 1;
              if ((unint64_t)(v455 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v449 - (void)v521) >> 2 > v456) {
                unint64_t v456 = (uint64_t)(v449 - (void)v521) >> 2;
              }
              if (v449 - (unint64_t)v521 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v457 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v457 = v456;
              }
              if (v457) {
                unint64_t v457 = (unint64_t)sub_25B3FCAD4(v457);
              }
              else {
                uint64_t v458 = 0;
              }
              unint64_t v459 = (float32x2_t *)(v457 + 8 * v455);
              float32x2_t *v459 = v454;
              float32x2_t v460 = v459 + 1;
              if (v450 != v521)
              {
                do
                {
                  float32x2_t v461 = v450[-1];
                  --v450;
                  v459[-1] = v461;
                  --v459;
                }
                while (v450 != v521);
                float32x2_t v450 = v521;
              }
              long long v521 = v459;
              unint64_t v449 = v457 + 8 * v458;
              if (v450) {
                operator delete(v450);
              }
              float32x2_t v450 = v460;
            }
            else
            {
              *v450++ = v454;
            }
          }
        }
        v451 += 4;
      }
      while (v451 != v439);
      int v462 = v450;
      if (v450 != v521)
      {
        float32x2_t v463 = 0;
        unint64_t v464 = v521;
        do
        {
          float32x2_t v465 = *v464++;
          v466.i32[1] = v465.i32[1];
          float32x2_t v463 = vadd_f32(v463, v465);
        }
        while (v464 != v450);
        int v462 = v521;
        if (v440 != v439)
        {
          *(float *)v466.i32 = (float)(unint64_t)(v450 - v521);
          float32x2_t v467 = vdiv_f32(v463, (float32x2_t)vdup_lane_s32(v466, 0));
          long long v525 = (char *)__p.n128_u64[0];
          unint64_t v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
          uint64_t v468 = v440;
          do
          {
            int32x2_t v469 = vcvt_s32_f32(*(float32x2_t *)&v433[8 * *(int *)v468]);
            uint64_t v470 = (const char *)v469.u32[0];
            int32x2_t v528 = v469;
            int v471 = v469.i32[1];
            if (!sub_25B5BD5EC(v452, v469.i32[0], v469.i32[1])
              || (v565.n128_u64[0] = (unint64_t)v528,
                  uint64_t v472 = sub_25B5BD6B0((uint64_t)v452, (int *)&v565),
                  *((void *)v472 + 1) == *(void *)v472))
            {
              v565.n128_u64[0] = (unint64_t)v528;
              *sub_25B5BD8D4((float *)&v558, (int *)&v565) = 1;
              sub_25B5BDCD0(v530, v470, v471, *(double *)&v467);
            }
            else
            {
              if (!sub_25B5BDE40(v558, *((unint64_t *)&v558 + 1), (int)v470, v471))
              {
                v565.n128_u64[0] = (unint64_t)v528;
                *sub_25B5BD8D4((float *)&v558, (int *)&v565) = 1;
                sub_25B5BDCD0(v530, v470, v471, *(double *)&v467);
              }
              v565.n128_u64[0] = (unint64_t)v528;
              int v473 = sub_25B5BD6B0((uint64_t)v514, (int *)&v565);
              uint64_t v475 = *(int **)v473;
              unint64_t v474 = (int *)*((void *)v473 + 1);
              if (*(int **)v473 != v474)
              {
                int v510 = 0;
                long long v523 = (float32x2_t *)&v525[48 * (int)v470];
                do
                {
                  if (v475[1] <= 1)
                  {
                    unint64_t v476 = *v475;
                    if (v537 > v476)
                    {
                      uint64_t v477 = &v525[48 * (int)v476];
                      long long v529 = *((_OWORD *)v477 + 2);
                      sub_25B477FD8((uint64_t)&v565, v523, (float32x2_t *)v477);
                      float v478 = *(float *)&v567;
                      int v479 = *v475;
                      uint64_t v480 = v475[1];
                      float32x2_t v481 = *(float32x2_t *)&v477[8 * v480];
                      if (!sub_25B3FAE64((void *)(v530 + 576), *v475)
                        && !sub_25B5BDE40(v558, *((unint64_t *)&v558 + 1), v479, v480))
                      {
                        v565.n128_u64[0] = __PAIR64__(v480, v479);
                        *sub_25B5BD8D4((float *)&v558, (int *)&v565) = 1;
                        int v482 = v475[1];
                        id v483 = (const char *)*v475;
                        int v484 = 1 - v482;
                        float32x2_t v485 = *(float32x2_t *)&v525[48 * (int)v483 + 8 * (1 - v482)];
                        sub_25B5BDCD0(v530, v483, v482, *(double *)&v467);
                        int32x2_t v486 = (int32x2_t)vmul_f32(*(float32x2_t *)&v529, vsub_f32(v467, v481));
                        float v487 = *(float *)(v530 + 136);
                        int v488 = (fabsf(v478 + -90.0) < *(float *)(v530 + 132)) | v510;
                        float v489 = fabsf(vaddv_f32((float32x2_t)v486));
                        int v510 = (v489 <= v487) & v488;
                        if (v489 > v487)
                        {
                          int v509 = v488;
                          if (v488)
                          {
                            double v490 = COERCE_DOUBLE(vmla_n_f32(v485, *(float32x2_t *)&v529, vadd_f32((float32x2_t)v486, (float32x2_t)vdup_lane_s32(v486, 1)).f32[0]));
                            float v491 = (const char *)*v475;
                            if (!sub_25B5BDE40(v558, *((unint64_t *)&v558 + 1), *v475, v484))
                            {
                              sub_25B5BDCD0(v530, v491, v484, v490);
                              LODWORD(v491) = *v475;
                            }
                            if (sub_25B5BD5EC(v514, (int)v491, v484))
                            {
                              v565.n128_u64[0] = __PAIR64__(v484, v491);
                              int v492 = sub_25B5BD6B0((uint64_t)v514, (int *)&v565);
                              if (*((void *)v492 + 1) == *(void *)v492)
                              {
                                int v510 = 1;
                              }
                              else
                              {
                                v565.n128_u32[0] = *v475;
                                v565.n128_u32[1] = v484;
                                int v493 = sub_25B5BD6B0((uint64_t)v514, (int *)&v565);
                                unint64_t v494 = *(int **)v493;
                                uint64_t v495 = (int *)*((void *)v493 + 1);
                                while (v494 != v495)
                                {
                                  int v496 = v494[1];
                                  if (v496 != 2)
                                  {
                                    unint64_t v497 = (const char *)*v494;
                                    if (!sub_25B5BDE40(v558, *((unint64_t *)&v558 + 1), *v494, v494[1])) {
                                      sub_25B5BDCD0(v530, v497, v496, v490);
                                    }
                                  }
                                  v494 += 2;
                                }
                                int v510 = v509;
                                uint64_t v433 = (char *)v518;
                              }
                            }
                            else
                            {
                              int v510 = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                  v475 += 2;
                }
                while (v475 != v474);
              }
            }
            v468 += 4;
            uint64_t v452 = (void *)(v530 + 512);
          }
          while (v468 != v439);
          int v462 = v521;
        }
      }
      if (v462) {
        operator delete(v462);
      }
      int v434 = v505;
      if (v450 != v521) {
        goto LABEL_721;
      }
      if (v440) {
        goto LABEL_716;
      }
LABEL_717:
      int v435 = v512 + 1;
      if (v512 + 1 == v434) {
        goto LABEL_725;
      }
    }
    uint64_t v440 = 0;
    goto LABEL_721;
  }
LABEL_736:
  sub_25B3FB178((uint64_t)&v558);
  v565.n128_u64[0] = (unint64_t)&v546;
  sub_25B413BE8((void ***)&v565);
}

void sub_25B5B6438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  sub_25B3FA930((void *)a52);
  if (v52)
  {
    operator delete(v52);
    if (!a24)
    {
LABEL_3:
      if (!a21) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!a24)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  if (!a21)
  {
LABEL_5:
    if (a26)
    {
      operator delete(a26);
      if (!v53)
      {
LABEL_7:
        if (!a19) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
    else if (!v53)
    {
      goto LABEL_7;
    }
    operator delete(v53);
    if (!a19)
    {
LABEL_9:
      if (__p) {
        operator delete(__p);
      }
      sub_25B3FA930(a38);
      if (a40) {
        operator delete(a40);
      }
      a51 = &a48;
      sub_25B413BE8((void ***)&a51);

      _Unwind_Resume(a1);
    }
LABEL_8:
    operator delete(a19);
    goto LABEL_9;
  }
LABEL_4:
  operator delete(a21);
  goto LABEL_5;
}

void *sub_25B5B6918(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_25B3FBC4C();
    }
    uint64_t v4 = (char *)sub_25B413D74(a2);
    *a1 = v4;
    a1[2] = &v4[24 * v5];
    size_t v6 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_25B5B69CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_25B5B69E0(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        size_t v6 = (void *)*((void *)v4 - 18);
        v4 -= 144;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_25B5B6A60(float **a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = a2;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v17, v21, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v18;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v3);
        }
        unint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8 * v9);
        if (*((unsigned char *)*a1 + 4))
        {
          float v11 = **a1;
          objc_msgSend_quad(v10, v5, v6);
          if (vabds_f32(v11, v12) > 0.01)
          {
            if (qword_26A5020B0 != -1) {
              dispatch_once(&qword_26A5020B0, &unk_2708F1218);
            }
            uint64_t v13 = (id)qword_26A5020A8;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)int v16 = 0;
              _os_log_debug_impl(&dword_25B3F3000, v13, OS_LOG_TYPE_DEBUG, "Inconsistent floor height from merged and external walls.", v16, 2u);
            }
          }
        }
        else
        {
          objc_msgSend_quad(v10, v5, v6);
          uint64_t v14 = *a1;
          *(_DWORD *)uint64_t v14 = v15;
          *((unsigned char *)v14 + 4) = 1;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v17, v21, 16);
    }
    while (v7);
  }
}

void sub_25B5B6C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5B6C54(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v136 = a2;
  id v137 = a3;
  uint64_t v152 = 0;
  unint64_t v153 = 0;
  unint64_t v154 = 0;
  uint64_t v8 = *(uint64_t **)(a4 + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    do
    {
      unint64_t v10 = (int *)v8[3];
      float v11 = (int *)v8[4];
      while (v10 != v11)
      {
        int v12 = *v10;
        int v13 = v10[1];
        int v14 = *((_DWORD *)v8 + 4);
        if ((unint64_t)v9 >= v154)
        {
          uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)v152) >> 2);
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) > 0x1555555555555555) {
            sub_25B3FBC4C();
          }
          if (0x5555555555555556 * ((uint64_t)(v154 - (void)v152) >> 2) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v154 - (void)v152) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (void)v152) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x1555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          sub_25B5B77B4(&v155, v17, v15, (uint64_t)&v154);
          long long v18 = (_DWORD *)v156;
          *(_DWORD *)long long v156 = v12;
          v18[1] = v13;
          void v18[2] = v14;
          uint64_t v9 = (char *)(v18 + 3);
          *(void *)&long long v156 = v18 + 3;
          long long v20 = (char *)v152;
          long long v19 = v153;
          uint64_t v21 = (_DWORD *)*((void *)&v155 + 1);
          if (v153 == v152)
          {
            uint64_t v24 = v153;
          }
          else
          {
            do
            {
              uint64_t v22 = *(void *)(v19 - 12);
              v19 -= 12;
              int v23 = *((_DWORD *)v19 + 2);
              *(void *)(v21 - 3) = v22;
              v21 -= 3;
              v21[2] = v23;
            }
            while (v19 != v20);
            uint64_t v24 = (char *)v152;
            long long v19 = v153;
            uint64_t v9 = (char *)v156;
          }
          uint64_t v152 = v21;
          unint64_t v153 = v9;
          unint64_t v25 = v154;
          unint64_t v154 = *((void *)&v156 + 1);
          *(void *)&long long v155 = v24;
          *(void *)&long long v156 = v19;
          *((void *)&v156 + 1) = v25;
          *((void *)&v155 + 1) = v24;
          if (v19 != v24) {
            *(void *)&long long v156 = &v19[-12 - 12 * ((v19 - v24 - 12) / 0xCuLL)];
          }
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v9 = v12;
          *((_DWORD *)v9 + 1) = v13;
          *((_DWORD *)v9 + 2) = v14;
          v9 += 12;
        }
        unint64_t v153 = v9;
        v10 += 2;
      }
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  unint64_t v26 = objc_msgSend_count(v137, v6, v7);
  sub_25B5B7830(&v150, (int **)&v152, v26);
  uint64_t v28 = v150;
  uint64_t v27 = v151;
  unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v151 - v150) >> 3);
  sub_25B5B7BC4(&v148, v29);
  uint64_t v30 = (char *)v152;
  uint64_t v31 = v153;
  if (v152 != v153)
  {
    if (v29 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v29;
    }
    do
    {
      if (v27 != v28)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = v32;
        do
        {
          uint64_t v36 = (void *)(v150 + v33);
          if (sub_25B3FAE64((void *)(v150 + v33), *(_DWORD *)v30) || sub_25B3FAE64(v36, *((_DWORD *)v30 + 1))) {
            sub_25B5B7C90((char **)&v148[v34], (uint64_t *)v30);
          }
          v34 += 3;
          v33 += 40;
          --v35;
        }
        while (v35);
      }
      v30 += 12;
    }
    while (v30 != v31);
  }
  unint64_t v37 = v148;
  for (unint64_t i = v149; v37 != i; v37 += 3)
  {
    long long v155 = 0u;
    long long v156 = 0u;
    int v157 = 1065353216;
    unint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    if (*v37 == v39)
    {
      unint64_t v40 = 0;
      int v41 = 0;
      int v50 = 0;
      unint64_t v51 = 0;
      v146[0] = 0;
      v146[1] = 0;
      uint64_t v147 = 0;
    }
    else
    {
      unint64_t v40 = 0;
      int v41 = 0;
      uint64_t v42 = 0;
      do
      {
        sub_25B3FAF64((uint64_t)&v155, *v38, *v38);
        sub_25B3FAF64((uint64_t)&v155, v38[1], v38[1]);
        if (v41 >= v42)
        {
          uint64_t v43 = (v41 - v40) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((v42 - v40) >> 1 > v44) {
            unint64_t v44 = (v42 - v40) >> 1;
          }
          if ((unint64_t)(v42 - v40) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            if (v45 >> 62) {
              sub_25B3FA70C();
            }
            uint64_t v46 = (char *)operator new(4 * v45);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v47 = &v46[4 * v43];
          *(_DWORD *)unint64_t v47 = v38[2];
          unint64_t v48 = v47 + 4;
          while (v41 != v40)
          {
            int v49 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v47 - 1) = v49;
            v47 -= 4;
          }
          uint64_t v42 = &v46[4 * v45];
          if (v40) {
            operator delete(v40);
          }
          unint64_t v40 = v47;
          int v41 = v48;
        }
        else
        {
          *(_DWORD *)int v41 = v38[2];
          v41 += 4;
        }
        v38 += 3;
      }
      while (v38 != v39);
      int v50 = (uint64_t *)v156;
      v146[0] = 0;
      v146[1] = 0;
      uint64_t v147 = 0;
      unint64_t v51 = 0;
      if ((void)v156)
      {
        BOOL v52 = (void *)v156;
        do
        {
          ++v51;
          BOOL v52 = (void *)*v52;
        }
        while (v52);
      }
    }
    sub_25B5B7DF0((char *)v146, v50, v51);
    id v140 = v136;
    id v145 = v137;
    if (v41 != v40)
    {
      uint64_t v138 = v37;
      int64_t v139 = v41 - v40;
      __n128 __p = 0;
      unint64_t v54 = 0;
      int64_t v55 = 0;
      unint64_t v56 = 0;
      float32x2_t v164 = 0;
      uint64_t v165 = 0;
      unint64_t v166 = 0;
      uint64_t v57 = (int *)v146[1];
      float v58 = (int *)v146[0];
      do
      {
        float v59 = objc_msgSend_objectAtIndexedSubscript_(v145, v53, *v58, i);
        unint64_t v60 = sub_25B477C40(v59).n128_u64[0];
        uint64_t v62 = v61;
        objc_msgSend_quad(v59, v63, v64);
        __int32 v144 = v65;
        objc_msgSend_quad(v59, v66, v67);
        __int32 v143 = v68;
        float32x4_t v69 = (float32x2_t *)operator new(0x10uLL);
        uint64_t v162 = v69 + 2;
        unint64_t v163 = v69 + 2;
        *float32x4_t v69 = (float32x2_t)v60;
        v69[1].i32[0] = v143;
        v69[1].i32[1] = v144;
        float32x2_t v161 = v69;
        float v70 = operator new(0x10uLL);
        float32x2_t v159 = (char *)(v70 + 4);
        float32x2_t v160 = (char *)(v70 + 4);
        *(void *)float v70 = v62;
        v70[2] = v143;
        v70[3] = v144;
        float32x2_t v158 = v70;
        unsigned __int8 v73 = objc_msgSend_type(v59, v71, v72);
        unsigned __int8 v74 = v73;
        if (v56 >= v55)
        {
          float v75 = &v56[-v54];
          uint64_t v76 = (uint64_t)&v56[-v54 + 1];
          if (v76 < 0) {
            sub_25B3FBC4C();
          }
          if (2 * (uint64_t)&v55[-v54] > (unint64_t)v76) {
            uint64_t v76 = 2 * (void)&v55[-v54];
          }
          if ((unint64_t)&v55[-v54] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v77 = v76;
          }
          if (v77) {
            int v78 = (unsigned __int8 *)operator new(v77);
          }
          else {
            int v78 = 0;
          }
          unsigned int v79 = &v75[(void)v78];
          __n128 v80 = &v75[(void)v78];
          unsigned __int8 *v80 = v74;
          __n128 v81 = v80 + 1;
          if (v56 == (unsigned __int8 *)v54)
          {
            __n128 __p = v79;
          }
          else
          {
            int v82 = &v56[~v54];
            do
            {
              unsigned __int8 v83 = *--v56;
              (v82--)[(void)v78] = v83;
            }
            while (v56 != (unsigned __int8 *)v54);
            __n128 __p = v78;
          }
          int64_t v55 = &v78[v77];
          if (v54) {
            operator delete((void *)v54);
          }
          unint64_t v54 = (unint64_t)__p;
          unint64_t v56 = v81;
        }
        else
        {
          *v56++ = v73;
        }
        float32x4_t v84 = v165;
        if ((unint64_t)v165 >= v166)
        {
          unint64_t v85 = sub_25B52B488(&v164, (uint64_t)&v161);
        }
        else
        {
          *uint64_t v165 = 0;
          v84[1] = 0;
          v84[2] = 0;
          sub_25B3FCA58(v84, v161, (uint64_t)v162, ((char *)v162 - (char *)v161) >> 2);
          unint64_t v85 = (unint64_t)(v84 + 3);
        }
        uint64_t v165 = (float **)v85;
        if (v85 >= v166)
        {
          __n128 v87 = (float **)sub_25B52B488(&v164, (uint64_t)&v158);
          __n128 v86 = v158;
        }
        else
        {
          *(void *)unint64_t v85 = 0;
          *(void *)(v85 + 8) = 0;
          *(void *)(v85 + 16) = 0;
          __n128 v86 = v158;
          sub_25B3FCA58((void *)v85, v158, (uint64_t)v159, (v159 - (unsigned char *)v158) >> 2);
          __n128 v87 = (float **)(v85 + 24);
        }
        uint64_t v165 = v87;
        if (v86) {
          operator delete(v86);
        }
        if (v161) {
          operator delete(v161);
        }

        ++v58;
      }
      while (v58 != v57);
      int v88 = *__p;
      if (v88 != 1 && __p != v56)
      {
        float32x2_t v89 = __p + 1;
        int v90 = *__p;
        while (v88 != 4)
        {
          if (v88 == 2) {
            int v90 = 2;
          }
          if (v89 == v56)
          {
            int v88 = v90;
            break;
          }
          int v91 = *v89++;
          int v88 = v91;
        }
      }
      unint64_t v92 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v165 - v164));
      if (v165 == v164) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = v92;
      }
      sub_25B5B7E58((unint64_t)v164, v165, v93, 1);
      float v95 = objc_msgSend_objectAtIndexedSubscript_(v145, v94, *(int *)v146[0]);
      uint64_t v98 = (unsigned char *)objc_msgSend_copy(v95, v96, v97);

      if (v98) {
        v98[104] = v88;
      }
      BOOL v99 = objc_opt_new();
      sub_25B4FD4F4((uint64_t)v98, v99);

      if (v139 == 4 && *(_DWORD *)v40 == 4)
      {
        float32x2_t v161 = 0;
        uint64_t v162 = 0;
        unint64_t v163 = 0;
        sub_25B443B1C((void **)&v161, 0xAAAAAAAAAAAAAAABLL * (v165 - v164));
        unint64_t v102 = v164;
        int v103 = v165;
        if (v164 != v165)
        {
          unint64_t v104 = v162;
          do
          {
            float32x2_t v105 = *(float32x2_t *)*v102;
            if (v104 >= v163)
            {
              float32x2_t v107 = v161;
              uint64_t v108 = v104 - v161;
              unint64_t v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 61) {
                sub_25B3FBC4C();
              }
              uint64_t v110 = (char *)v163 - (char *)v161;
              if (((char *)v163 - (char *)v161) >> 2 > v109) {
                unint64_t v109 = v110 >> 2;
              }
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v109;
              }
              if (v111) {
                unint64_t v111 = (unint64_t)sub_25B3FCAD4(v111);
              }
              else {
                uint64_t v112 = 0;
              }
              float32x2_t v113 = (float32x2_t *)(v111 + 8 * v108);
              *float32x2_t v113 = v105;
              uint64_t v106 = (uint64_t)&v113[1];
              if (v104 != v107)
              {
                do
                {
                  float32x2_t v114 = v104[-1];
                  --v104;
                  v113[-1] = v114;
                  --v113;
                }
                while (v104 != v107);
                unint64_t v104 = v161;
              }
              float32x2_t v161 = v113;
              uint64_t v162 = (float32x2_t *)v106;
              unint64_t v163 = (float32x2_t *)(v111 + 8 * v112);
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              float32x2_t *v104 = v105;
              uint64_t v106 = (uint64_t)&v104[1];
            }
            uint64_t v162 = (float32x2_t *)v106;
            v102 += 3;
            unint64_t v104 = (float32x2_t *)v106;
          }
          while (v102 != v103);
          unint64_t v102 = v164;
        }
        float v115 = (*v102)[2];
        float32x2_t v116 = v102[3];
        float v117 = v116[2];
        float32x2_t v118 = vmul_f32(vadd_f32(*v161, v161[1]), (float32x2_t)0x3F0000003F000000);
        float32x2_t v119 = vmul_f32(vadd_f32(v161[2], v161[3]), (float32x2_t)0x3F0000003F000000);
        float v120 = (float)((*v102)[3] + v116[3]) * 0.5;
        if (v117 >= v115) {
          float v121 = (*v102)[2];
        }
        else {
          float v121 = v116[2];
        }
        float v122 = (float)(v115 + v117) * 0.5;
        if (v88 == 1) {
          float v123 = v122;
        }
        else {
          float v123 = v121;
        }
        operator delete(v161);
      }
      else
      {
        uint64_t v124 = v164;
        float32x2_t v118 = *(float32x2_t *)*v164;
        float32x2_t v119 = *(float32x2_t *)v124[3 * (int)(-1 - 1431655765 * ((unint64_t)((char *)v165 - (char *)v124) >> 3))];
        if (v165 == v164)
        {
          float v123 = 3.4028e38;
          float v120 = -3.4028e38;
        }
        else
        {
          float v120 = -3.4028e38;
          float v123 = 3.4028e38;
          do
          {
            unint64_t v125 = *v124;
            v124 += 3;
            float v126 = v125[2];
            float v127 = v125[3];
            if (v126 < v123) {
              float v123 = v126;
            }
            if (v120 < v127) {
              float v120 = v127;
            }
          }
          while (v124 != v165);
        }
      }
      v100.n128_u64[0] = (unint64_t)v118;
      v101.n128_u64[0] = (unint64_t)v119;
      sub_25B5B8AD4(v98, v100, v101, v123, v120);
      size_t v129 = (int *)v146[0];
      float32x2_t v130 = (int *)v146[1];
      while (v129 != v130)
      {
        uint64_t v131 = *v129;
        float v132 = objc_msgSend_objectAtIndexedSubscript_(v145, v128, v131);
        sub_25B5B8B80(a1, v132, v123, v120);

        uint64_t v134 = objc_msgSend_objectAtIndexedSubscript_(v145, v133, v131);
        sub_25B5B8C6C(v134);

        ++v129;
      }
      objc_msgSend_addObject_(v140, v128, (uint64_t)v98);

      operator delete(__p);
      float32x2_t v161 = (float32x2_t *)&v164;
      sub_25B413C78((void ***)&v161);
      unint64_t v37 = v138;
    }

    if (v146[0]) {
      operator delete(v146[0]);
    }
    if (v40) {
      operator delete(v40);
    }
    sub_25B3FB178((uint64_t)&v155);
  }
  *(void *)&long long v155 = &v148;
  sub_25B413BE8((void ***)&v155);
  *(void *)&long long v155 = &v150;
  sub_25B5A5D4C((void ***)&v155);
  if (v152)
  {
    unint64_t v153 = (char *)v152;
    operator delete(v152);
  }
}

void sub_25B5B7648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char *a35)
{
  a35 = &a29;
  sub_25B5A5D4C((void ***)&a35);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_25B5B77B4(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_25B3FA70C();
    }
    uint64_t v7 = (char *)operator new(12 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[12 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[12 * a2];
  return a1;
}

void sub_25B5B7830(uint64_t *a1, int **a2, unint64_t a3)
{
  int v32 = -1;
  sub_25B40FF0C(&__p, a3, &v32);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  *(void *)&v30[0] = &v33;
  BYTE8(v30[0]) = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_25B3FBC4C();
    }
    uint64_t v6 = sub_25B413D74(a3);
    uint64_t v33 = v6;
    uint64_t v34 = v6;
    uint64_t v35 = &v6[3 * v7];
    uint64_t v8 = &v6[3 * a3];
    uint64_t v9 = 24 * a3;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      std::locale v6[2] = 0;
      sub_25B3FC724(v6, __p, v37.i64[0], (v37.i64[0] - (uint64_t)__p) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    uint64_t v34 = v8;
  }
  if (__p)
  {
    v37.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v10 = *a2;
  float v11 = a2[1];
  if (*a2 != v11)
  {
    uint64_t v12 = (uint64_t)v33;
    do
    {
      int v13 = *v10;
      uint64_t v14 = v10[1];
      v10 += 3;
      *(_DWORD *)(*(void *)(v12 + 24 * v13) + 4 * v14) = 0;
    }
    while (v10 != v11);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = 0;
      do
      {
        memset(v30, 0, sizeof(v30));
        int v31 = 1065353216;
        if (!*(_DWORD *)(v33[3 * v15] + 4 * v16))
        {
          sub_25B3FAF64((uint64_t)v30, v15, v15);
          sub_25B3FAF64((uint64_t)v30, v16, v16);
          sub_25B5B940C(v15, v16, (uint64_t *)&v33, v30, a3);
          unint64_t v18 = a1[1];
          unint64_t v17 = a1[2];
          if (v18 >= v17)
          {
            unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - *a1) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x666666666666666) {
              sub_25B3FBC4C();
            }
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - *a1) >> 3);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x333333333333333) {
              unint64_t v23 = 0x666666666666666;
            }
            else {
              unint64_t v23 = v21;
            }
            uint64_t v39 = a1 + 2;
            if (v23)
            {
              if (v23 > 0x666666666666666) {
                sub_25B3FA70C();
              }
              uint64_t v24 = (char *)operator new(40 * v23);
            }
            else
            {
              uint64_t v24 = 0;
            }
            __n128 __p = v24;
            v37.i64[0] = (uint64_t)&v24[40 * v20];
            v37.i64[1] = v37.i64[0];
            unint64_t v38 = &v24[40 * v23];
            sub_25B3FB278(v37.i64[0], (uint64_t)v30);
            uint64_t v25 = v37.i64[0];
            uint64_t v19 = v37.i64[1] + 40;
            v37.i64[1] += 40;
            uint64_t v27 = (uint64_t *)*a1;
            unint64_t v26 = (uint64_t *)a1[1];
            if (v26 == (uint64_t *)*a1)
            {
              int64x2_t v28 = vdupq_n_s64((unint64_t)v26);
            }
            else
            {
              do
              {
                v26 -= 5;
                uint64_t v25 = sub_25B4F996C(v25 - 40, v26);
              }
              while (v26 != v27);
              int64x2_t v28 = *(int64x2_t *)a1;
              uint64_t v19 = v37.i64[1];
            }
            *a1 = v25;
            a1[1] = v19;
            int64x2_t v37 = v28;
            unint64_t v29 = (char *)a1[2];
            a1[2] = (uint64_t)v38;
            unint64_t v38 = v29;
            __n128 __p = (void *)v28.i64[0];
            sub_25B5B95BC((uint64_t)&__p);
          }
          else
          {
            sub_25B3FB278(a1[1], (uint64_t)v30);
            uint64_t v19 = v18 + 40;
            a1[1] = v18 + 40;
          }
          a1[1] = v19;
        }
        sub_25B3FB178((uint64_t)v30);
        ++v16;
      }
      while (v16 < a3);
      ++v15;
    }
    while (v15 < a3);
  }
  __n128 __p = &v33;
  sub_25B413BE8((void ***)&__p);
}

void sub_25B5B7B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_25B5B7BC4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_25B3FBC4C();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_25B5B7C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_25B5B7C90(char **a1, uint64_t *a2)
{
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = (unint64_t)a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 2);
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0x1555555555555555) {
      sub_25B3FBC4C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    sub_25B5B77B4(&v21, v11, v8, (uint64_t)(a1 + 2));
    uint64_t v12 = v23;
    uint64_t v13 = *a2;
    *((_DWORD *)v23 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v12 = v13;
    uint64_t v14 = v22;
    uint64_t v7 = v23 + 12;
    v23 += 12;
    unint64_t v16 = *a1;
    unint64_t v15 = a1[1];
    if (v15 == *a1)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      do
      {
        uint64_t v17 = *(void *)(v15 - 12);
        v15 -= 12;
        int v18 = *((_DWORD *)v15 + 2);
        *(void *)(v14 - 12) = v17;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v18;
      }
      while (v15 != v16);
      uint64_t v19 = *a1;
      unint64_t v15 = a1[1];
      uint64_t v7 = v23;
    }
    *a1 = v14;
    a1[1] = v7;
    unint64_t v20 = a1[2];
    a1[2] = v24;
    unint64_t v23 = v15;
    uint64_t v24 = v20;
    unint64_t v21 = v19;
    unint64_t v22 = v19;
    if (v15 != v19) {
      unint64_t v23 = &v19[(v15 - v19 - 12) % 0xCuLL];
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v5 = v6;
    uint64_t v7 = (char *)(v5 + 12);
  }
  a1[1] = v7;
}

char *sub_25B5B7DF0(char *result, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = result;
    BOOL result = sub_25B3FCA18(result, a3);
    for (unint64_t i = (_DWORD *)*((void *)v4 + 1); a2; a2 = (uint64_t *)*a2)
      *i++ = *((_DWORD *)a2 + 4);
    *((void *)v4 + 1) = i;
  }
  return result;
}

void sub_25B5B7E3C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5B7E58(unint64_t a1, float **a2, uint64_t a3, char a4)
{
void sub_25B5B8AD4(void *a1, __n128 a2, __n128 a3, float a4, float a5)
{
  BOOL v5 = a1;
  __n128 v7 = a2;
  __n128 v6 = a3;
  __n128 v8 = a2;
  v8.n128_f32[2] = a5;
  __n128 v9 = a3;
  v9.n128_f32[2] = a5;
  v6.n128_f32[2] = a4;
  v7.n128_f32[2] = a4;
  src[0] = v8;
  src[1] = v9;
  src[2] = v6;
  src[3] = v7;
  unint64_t v14 = v5;
  if (v5) {
    objc_copyStruct(v5 + 272, src, 64, 1, 0);
  }
}

void sub_25B5B8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  _Unwind_Resume(a1);
}

void sub_25B5B8B80(uint64_t a1, void *a2, float a3, float a4)
{
  BOOL v5 = a2;
  if (a1)
  {
    uint64_t v19 = v5;
    objc_msgSend_quad(v5, v6, v7);
    long long v16 = v8;
    objc_msgSend_quad(v19, v9, v10);
    long long v11 = v16;
    long long v12 = v16;
    *((float *)&v12 + 2) = a4;
    long long v14 = v13;
    *((float *)&v14 + 2) = a4;
    *((float *)&v13 + 2) = a3;
    *((float *)&v11 + 2) = a3;
    src[0] = v12;
    src[1] = v14;
    src[2] = v13;
    src[3] = v11;
    BOOL v5 = v19;
    if (v19)
    {
      objc_copyStruct(v19 + 34, src, 64, 1, 0);
      BOOL v5 = v19;
      unint64_t v15 = v19[2] - v19[1];
      if (v15 >= 0x30)
      {
        *(float *)(v19[2] - 8) = a3;
        *(float *)(v15 + v19[1] - 24) = a3;
      }
    }
  }
}

void sub_25B5B8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_25B5B8C6C(void *a1)
{
  uint64_t v1 = a1;
  if (v1) {
    v1[106] = 1;
  }
}

float **sub_25B5B8CA0(float **result, uint64_t a2, float **a3)
{
  id v3 = *(float **)a2;
  float v4 = **(float **)a2;
  BOOL v5 = *result;
  float v6 = **result;
  BOOL v7 = v4 < v6;
  if (v4 == v6)
  {
    float v8 = v3[1];
    float v9 = v5[1];
    BOOL v7 = v8 < v9;
    if (v8 == v9) {
      BOOL v7 = v3[2] < v5[2];
    }
  }
  if (!v7)
  {
    unint64_t v17 = *a3;
    float v18 = **a3;
    BOOL v19 = v18 < v4;
    if (v18 == v4)
    {
      float v20 = v17[1];
      float v21 = v3[1];
      BOOL v19 = v20 < v21;
      if (v20 == v21) {
        BOOL v19 = v17[2] < v3[2];
      }
    }
    if (!v19) {
      return result;
    }
    *(void *)a2 = v17;
    *a3 = v3;
    BOOL v22 = *(float **)(a2 + 8);
    *(void *)(a2 + 8) = a3[1];
    a3[1] = v22;
    float v24 = (uint64_t *)(a2 + 16);
    float v23 = *(float **)(a2 + 16);
    *(void *)(a2 + 16) = a3[2];
    a3[2] = v23;
    long long v25 = *(float **)a2;
    float v26 = **(float **)a2;
    float v27 = *result;
    float v28 = **result;
    BOOL v29 = v26 < v28;
    if (v26 == v28)
    {
      float v30 = v25[1];
      float v31 = v27[1];
      BOOL v29 = v30 < v31;
      if (v30 == v31) {
        BOOL v29 = v25[2] < v27[2];
      }
    }
    if (!v29) {
      return result;
    }
    *BOOL result = v25;
    *(void *)a2 = v27;
    float v32 = result[1];
    result[1] = *(float **)(a2 + 8);
    *(void *)(a2 + 8) = v32;
    long long v16 = (uint64_t *)(result + 2);
LABEL_30:
    uint64_t v43 = *v16;
    *long long v16 = *v24;
    *float v24 = v43;
    return result;
  }
  uint64_t v10 = *a3;
  float v11 = **a3;
  BOOL v12 = v11 < v4;
  if (v11 == v4)
  {
    float v13 = v10[1];
    float v14 = v3[1];
    BOOL v12 = v13 < v14;
    if (v13 == v14) {
      BOOL v12 = v10[2] < v3[2];
    }
  }
  if (v12)
  {
    *BOOL result = v10;
    *a3 = v5;
    unint64_t v15 = result[1];
    result[1] = a3[1];
    a3[1] = v15;
    long long v16 = (uint64_t *)(result + 2);
LABEL_29:
    float v24 = (uint64_t *)(a3 + 2);
    goto LABEL_30;
  }
  *BOOL result = v3;
  *(void *)a2 = v5;
  uint64_t v33 = result[1];
  result[1] = *(float **)(a2 + 8);
  *(void *)(a2 + 8) = v33;
  long long v16 = (uint64_t *)(a2 + 16);
  uint64_t v34 = result[2];
  result[2] = *(float **)(a2 + 16);
  *(void *)(a2 + 16) = v34;
  float v35 = *a3;
  float v36 = **a3;
  float v37 = *(float **)a2;
  float v38 = **(float **)a2;
  BOOL v39 = v36 < v38;
  if (v36 == v38)
  {
    float v40 = v35[1];
    float v41 = v37[1];
    BOOL v39 = v40 < v41;
    if (v40 == v41) {
      BOOL v39 = v35[2] < v37[2];
    }
  }
  if (v39)
  {
    *(void *)a2 = v35;
    *a3 = v37;
    float v42 = *(float **)(a2 + 8);
    *(void *)(a2 + 8) = a3[1];
    a3[1] = v42;
    goto LABEL_29;
  }
  return result;
}

float **sub_25B5B8E70(float **a1, uint64_t a2, float **a3, uint64_t a4)
{
  BOOL result = sub_25B5B8CA0(a1, a2, a3);
  float v9 = *(float **)a4;
  float v10 = **(float **)a4;
  float v11 = *a3;
  float v12 = **a3;
  BOOL v13 = v10 < v12;
  if (v10 == v12)
  {
    float v14 = v9[1];
    float v15 = v11[1];
    BOOL v13 = v14 < v15;
    if (v14 == v15) {
      BOOL v13 = v9[2] < v11[2];
    }
  }
  if (v13)
  {
    *a3 = v9;
    *(void *)a4 = v11;
    long long v16 = a3[1];
    a3[1] = *(float **)(a4 + 8);
    *(void *)(a4 + 8) = v16;
    unint64_t v17 = a3[2];
    a3[2] = *(float **)(a4 + 16);
    *(void *)(a4 + 16) = v17;
    float v18 = *a3;
    float v19 = **a3;
    float v20 = *(float **)a2;
    float v21 = **(float **)a2;
    BOOL v22 = v19 < v21;
    if (v19 == v21)
    {
      float v23 = v18[1];
      float v24 = v20[1];
      BOOL v22 = v23 < v24;
      if (v23 == v24) {
        BOOL v22 = v18[2] < v20[2];
      }
    }
    if (v22)
    {
      *(void *)a2 = v18;
      *a3 = v20;
      long long v25 = *(float **)(a2 + 8);
      *(void *)(a2 + 8) = a3[1];
      a3[1] = v25;
      float v26 = *(float **)(a2 + 16);
      *(void *)(a2 + 16) = a3[2];
      a3[2] = v26;
      float v27 = *(float **)a2;
      float v28 = **(float **)a2;
      BOOL v29 = *a1;
      float v30 = **a1;
      BOOL v31 = v28 < v30;
      if (v28 == v30)
      {
        float v32 = v27[1];
        float v33 = v29[1];
        BOOL v31 = v32 < v33;
        if (v32 == v33) {
          BOOL v31 = v27[2] < v29[2];
        }
      }
      if (v31)
      {
        *a1 = v27;
        *(void *)a2 = v29;
        uint64_t v34 = a1[1];
        a1[1] = *(float **)(a2 + 8);
        *(void *)(a2 + 8) = v34;
        float v35 = a1[2];
        a1[2] = *(float **)(a2 + 16);
        *(void *)(a2 + 16) = v35;
      }
    }
  }
  return result;
}

float **sub_25B5B8FC8(float **a1, uint64_t a2, float **a3, uint64_t a4, uint64_t a5)
{
  BOOL result = sub_25B5B8E70(a1, a2, a3, a4);
  float v11 = *(float **)a5;
  float v12 = **(float **)a5;
  BOOL v13 = *(float **)a4;
  float v14 = **(float **)a4;
  BOOL v15 = v12 < v14;
  if (v12 == v14)
  {
    float v16 = v11[1];
    float v17 = v13[1];
    BOOL v15 = v16 < v17;
    if (v16 == v17) {
      BOOL v15 = v11[2] < v13[2];
    }
  }
  if (v15)
  {
    *(void *)a4 = v11;
    *(void *)a5 = v13;
    uint64_t v18 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v18;
    uint64_t v19 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v19;
    float v20 = *(float **)a4;
    float v21 = **(float **)a4;
    BOOL v22 = *a3;
    float v23 = **a3;
    BOOL v24 = v21 < v23;
    if (v21 == v23)
    {
      float v25 = v20[1];
      float v26 = v22[1];
      BOOL v24 = v25 < v26;
      if (v25 == v26) {
        BOOL v24 = v20[2] < v22[2];
      }
    }
    if (v24)
    {
      *a3 = v20;
      *(void *)a4 = v22;
      float v27 = a3[1];
      a3[1] = *(float **)(a4 + 8);
      *(void *)(a4 + 8) = v27;
      float v28 = a3[2];
      a3[2] = *(float **)(a4 + 16);
      *(void *)(a4 + 16) = v28;
      BOOL v29 = *a3;
      float v30 = **a3;
      BOOL v31 = *(float **)a2;
      float v32 = **(float **)a2;
      BOOL v33 = v30 < v32;
      if (v30 == v32)
      {
        float v34 = v29[1];
        float v35 = v31[1];
        BOOL v33 = v34 < v35;
        if (v34 == v35) {
          BOOL v33 = v29[2] < v31[2];
        }
      }
      if (v33)
      {
        *(void *)a2 = v29;
        *a3 = v31;
        float v36 = *(float **)(a2 + 8);
        *(void *)(a2 + 8) = a3[1];
        a3[1] = v36;
        float v37 = *(float **)(a2 + 16);
        *(void *)(a2 + 16) = a3[2];
        a3[2] = v37;
        float v38 = *(float **)a2;
        float v39 = **(float **)a2;
        float v40 = *a1;
        float v41 = **a1;
        BOOL v42 = v39 < v41;
        if (v39 == v41)
        {
          float v43 = v38[1];
          float v44 = v40[1];
          BOOL v42 = v43 < v44;
          if (v43 == v44) {
            BOOL v42 = v38[2] < v40[2];
          }
        }
        if (v42)
        {
          *a1 = v38;
          *(void *)a2 = v40;
          unint64_t v45 = a1[1];
          a1[1] = *(float **)(a2 + 8);
          *(void *)(a2 + 8) = v45;
          uint64_t v46 = a1[2];
          a1[2] = *(float **)(a2 + 16);
          *(void *)(a2 + 16) = v46;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B5B918C(float **a1, float **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(a2 - 3);
      BOOL v7 = *a1;
      float v8 = **a1;
      BOOL v9 = *v6 < v8;
      if (*v6 == v8)
      {
        float v10 = v6[1];
        float v11 = v7[1];
        BOOL v9 = v10 < v11;
        if (v10 == v11) {
          BOOL v9 = v6[2] < v7[2];
        }
      }
      if (v9)
      {
        *a1 = v6;
        *(a2 - 3) = v7;
        float v12 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v12;
        BOOL v13 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return result;
    case 3uLL:
      sub_25B5B8CA0(a1, (uint64_t)(a1 + 3), a2 - 3);
      return 1;
    case 4uLL:
      sub_25B5B8E70(a1, (uint64_t)(a1 + 3), a1 + 6, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      sub_25B5B8FC8(a1, (uint64_t)(a1 + 3), a1 + 6, (uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
      return 1;
    default:
      float v14 = a1 + 6;
      sub_25B5B8CA0(a1, (uint64_t)(a1 + 3), a1 + 6);
      BOOL v15 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    uint64_t v18 = *v15;
    float v19 = **v15;
    float v20 = *v14;
    float v21 = **v14;
    BOOL v22 = v19 < v21;
    if (v19 == v21)
    {
      float v23 = v18[1];
      float v24 = v20[1];
      BOOL v22 = v23 < v24;
      if (v23 == v24) {
        BOOL v22 = v18[2] < v20[2];
      }
    }
    if (v22)
    {
      long long v25 = *(_OWORD *)(v15 + 1);
      *BOOL v15 = 0;
      v15[1] = 0;
      uint64_t v26 = v16;
      v15[2] = 0;
      while (1)
      {
        float v27 = (char *)a1 + v26;
        *(_OWORD *)(v27 + 72) = *(_OWORD *)((char *)a1 + v26 + 48);
        *((void *)v27 + 11) = *(float **)((char *)a1 + v26 + 64);
        *((void *)v27 + 7) = 0;
        *((void *)v27 + 8) = 0;
        *((void *)v27 + 6) = 0;
        if (v26 == -48) {
          break;
        }
        float v28 = (float *)*((void *)v27 + 3);
        BOOL v29 = *v18 < *v28;
        if (*v18 == *v28)
        {
          float v30 = v18[1];
          float v31 = v28[1];
          BOOL v29 = v30 < v31;
          if (v30 == v31) {
            BOOL v29 = v18[2] < v28[2];
          }
        }
        if (!v29)
        {
          uint64_t v32 = (uint64_t)a1 + v26 + 48;
          goto LABEL_24;
        }
        v26 -= 24;
      }
      uint64_t v32 = (uint64_t)a1;
LABEL_24:
      BOOL v33 = *(void **)v32;
      if (*(void *)v32)
      {
        *(void *)(v32 + 8) = v33;
        long long v34 = v25;
        operator delete(v33);
        long long v25 = v34;
      }
      *(void *)uint64_t v32 = v18;
      *(_OWORD *)(v32 + 8) = v25;
      if (++v17 == 8) {
        return v15 + 3 == a2;
      }
    }
    float v14 = v15;
    v16 += 24;
    v15 += 3;
    if (v15 == a2) {
      return 1;
    }
  }
}

uint64_t sub_25B5B940C(uint64_t result, uint64_t a2, uint64_t *a3, void *a4, unint64_t a5)
{
  uint64_t v9 = result;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  *(_DWORD *)(*(void *)(*a3 + 24 * (int)result) + 4 * (int)a2) = 1;
  uint64_t v12 = (int)result;
  uint64_t v13 = (int)a2;
  do
  {
    uint64_t v14 = *a3;
    if (!*(_DWORD *)(*(void *)(*a3 + 24 * (int)v12) + 4 * v10))
    {
      if (!sub_25B3FAE64(a4, v10)) {
        sub_25B3FAF64((uint64_t)a4, v10, v10);
      }
      BOOL result = sub_25B5B940C(v9, v10, a3, a4, a5);
      uint64_t v14 = *a3;
    }
    if (!*(_DWORD *)(*(void *)(v14 + v11) + 4 * v12))
    {
      if (!sub_25B3FAE64(a4, v10)) {
        sub_25B3FAF64((uint64_t)a4, v10, v10);
      }
      BOOL result = sub_25B5B940C(v10, v9, a3, a4, a5);
      uint64_t v14 = *a3;
    }
    if (!*(_DWORD *)(*(void *)(v14 + 24 * (int)v13) + 4 * v10))
    {
      if (!sub_25B3FAE64(a4, v10)) {
        sub_25B3FAF64((uint64_t)a4, v10, v10);
      }
      BOOL result = sub_25B5B940C(a2, v10, a3, a4, a5);
      uint64_t v14 = *a3;
    }
    if (!*(_DWORD *)(*(void *)(v14 + v11) + 4 * v13))
    {
      if (!sub_25B3FAE64(a4, v10)) {
        sub_25B3FAF64((uint64_t)a4, v10, v10);
      }
      BOOL result = sub_25B5B940C(v10, a2, a3, a4, a5);
    }
    v11 += 24;
    ++v10;
  }
  while (v10 < a5);
  return result;
}

uint64_t sub_25B5B95BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    sub_25B3FB178(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_25B5B960C(uint64_t **a1, void *a2, void *a3, void *a4)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  BOOL v7 = a2;
  id v66 = a3;
  id v67 = a4;
  float v68 = v7;
  unint64_t v10 = objc_msgSend_parentIdentifier(v7, v8, v9);

  if (v10)
  {
    uint64_t v13 = **a1;
    uint64_t v14 = objc_msgSend_parentIdentifier(v68, v11, v12);
    id v15 = v67;
    id v18 = v14;
    if (v13)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      float v19 = objc_msgSend_walls(v15, v16, v17);
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v73, buf, 16);
      if (v23)
      {
        uint64_t v24 = *(void *)v74;
        while (2)
        {
          for (uint64_t i = 0; i != v23; ++i)
          {
            if (*(void *)v74 != v24) {
              objc_enumerationMutation(v19);
            }
            uint64_t v26 = *(void **)(*((void *)&v73 + 1) + 8 * i);
            float v27 = objc_msgSend_identifier(v26, v21, v22);
            char isEqual = objc_msgSend_isEqual_(v27, v28, (uint64_t)v18);

            if (isEqual)
            {
              float v65 = v26;
              goto LABEL_13;
            }
          }
          uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v21, (uint64_t)&v73, buf, 16);
          if (v23) {
            continue;
          }
          break;
        }
      }
      float v65 = 0;
LABEL_13:
    }
    else
    {
      float v65 = 0;
    }

    if (!v65)
    {
      if (qword_26A5020B0 != -1) {
        dispatch_once(&qword_26A5020B0, &unk_2708F1218);
      }
      float v35 = (id)qword_26A5020A8;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        long long v57 = objc_msgSend_identifier(v68, v55, v56);
        float v60 = objc_msgSend_parentIdentifier(v68, v58, v59);
        *(_DWORD *)buf = 138412802;
        id v79 = v66;
        __int16 v80 = 2112;
        __n128 v81 = v57;
        __int16 v82 = 2112;
        unsigned __int8 v83 = v60;
        _os_log_error_impl(&dword_25B3F3000, v35, OS_LOG_TYPE_ERROR, "%@ (ID=%@) (ParentID=%@) can't find a matching parent wall!!!", buf, 0x20u);
      }
      goto LABEL_44;
    }
    sub_25B5B9C50(**a1, v68, v65);
    float v30 = *(void **)(**a1 + 640);
    BOOL v33 = objc_msgSend_identifier(v65, v31, v32);
    float v35 = objc_msgSend_objectForKeyedSubscript_(v30, v34, (uint64_t)v33);

    if (!v35)
    {
LABEL_44:

      unint64_t v51 = v65;
      goto LABEL_45;
    }
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v36 = (id)*a1[1];
    uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v69, v77, 16);
    if (v38)
    {
      float v39 = 0;
      uint64_t v40 = *(void *)v70;
      do
      {
        for (uint64_t j = 0; j != v38; ++j)
        {
          if (*(void *)v70 != v40) {
            objc_enumerationMutation(v36);
          }
          id v42 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          unint64_t v45 = objc_msgSend_identifier(v42, v43, v44);
          int v47 = objc_msgSend_isEqual_(v45, v46, (uint64_t)v35);

          if (v47)
          {
            BOOL v48 = (float *)v42;

            float v39 = v48;
          }
        }
        uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v49, (uint64_t)&v69, v77, 16);
      }
      while (v38);

      if (v39)
      {
        sub_25B5B9C50(**a1, v68, v39);
        float v50 = v39[33];
        if (v50 > 0.0 && v68) {
          v68[33] = v50;
        }
LABEL_43:

        goto LABEL_44;
      }
    }
    else
    {
    }
    if (qword_26A5020B0 != -1) {
      dispatch_once(&qword_26A5020B0, &unk_2708F1218);
    }
    BOOL v61 = (id)qword_26A5020A8;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = objc_msgSend_identifier(v65, v62, v63);
      *(_DWORD *)buf = 138412802;
      id v79 = v66;
      __int16 v80 = 2112;
      __n128 v81 = v64;
      __int16 v82 = 2112;
      unsigned __int8 v83 = v35;
      _os_log_error_impl(&dword_25B3F3000, v61, OS_LOG_TYPE_ERROR, "instance %@ parent wall (ID=%@) has associated merged wall UUID (=%@) but can't find it in mergedWalls", buf, 0x20u);
    }
    float v39 = 0;
    goto LABEL_43;
  }
  if (qword_26A5020B0 != -1) {
    dispatch_once(&qword_26A5020B0, &unk_2708F1218);
  }
  unint64_t v51 = (id)qword_26A5020A8;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    float v54 = objc_msgSend_identifier(v68, v52, v53);
    *(_DWORD *)buf = 138412546;
    id v79 = v66;
    __int16 v80 = 2112;
    __n128 v81 = v54;
    _os_log_error_impl(&dword_25B3F3000, v51, OS_LOG_TYPE_ERROR, "%@ (ID=%@) has nil parentIdentifier!!!", buf, 0x16u);
  }
LABEL_45:
}

void sub_25B5B9B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_25B5B9C50(uint64_t a1, void *a2, void *a3)
{
  BOOL v88 = a2;
  id v5 = a3;
  float v8 = v5;
  if (a1)
  {
    objc_msgSend_quad(v5, v6, v7);
    float32x4_t v86 = v9;
    objc_msgSend_quad(v8, v10, v11);
    float32x4_t v83 = v12;
    objc_msgSend_quad(v8, v13, v14);
    float32x4_t v81 = v15;
    objc_msgSend_quad(v8, v16, v17);
    float32x4_t v79 = v18;
    objc_msgSend_quad(v88, v19, v20);
    float32x4_t v77 = v21;
    objc_msgSend_quad(v88, v22, v23);
    float32x4_t v75 = v24;
    objc_msgSend_dimensions(v88, v25, v26);
    float v73 = v27;
    objc_msgSend_dimensions(v88, v28, v29);
    float32x4_t v72 = v30;
    int v33 = objc_msgSend_type(v88, v31, v32);
    float32x4_t v36 = vsubq_f32(v86, v83);
    int32x4_t v37 = (int32x4_t)vmulq_f32(v36, v36);
    v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
    float32x2_t v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
    float32x2_t v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
    float32x4_t v40 = vmulq_n_f32(v36, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]);
    float32x4_t v71 = (float32x4_t)xmmword_25B5F10E0;
    float32x4_t v41 = vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
    float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
    int32x4_t v43 = (int32x4_t)vmulq_f32(v41, v41);
    v43.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), *(float32x2_t *)v43.i8)).u32[0];
    float32x2_t v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    float32x2_t v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    float32x4_t v46 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    float32x4_t v48 = vmulq_f32(vaddq_f32(v81, v79), v47);
    float32x4_t v49 = vmulq_f32(vaddq_f32(v77, v75), v47);
    float32x4_t v82 = v40;
    float32x4_t v84 = v48;
    float32x4_t v50 = vmulq_f32(v46, vsubq_f32(v49, v48));
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1);
    float32x4_t v52 = vmlsq_lane_f32(v49, v46, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, v51)), 0);
    v51.f32[0] = 0.5 * v73;
    float32x4_t v78 = v51;
    float32x4_t v80 = v52;
    float v76 = vmuls_lane_f32(0.5, v72, 2);
    float32x4_t v87 = vmlaq_n_f32(vmlaq_n_f32(v52, v40, 0.5 * v73), (float32x4_t)xmmword_25B5F13A0, v76);
    if (v33 == 2
      || objc_msgSend_type(v88, v34, v35, 0, 1065353216) == 4
      || objc_msgSend_type(v88, v34, v35) == 3)
    {
      objc_msgSend_quad(v8, v34, v35, *(_OWORD *)&v71);
      float32x4_t v74 = v53;
      objc_msgSend_quad(v8, v54, v55);
      v57.i64[0] = v87.i64[0];
      v57.i64[1] = __PAIR64__(v87.u32[3], vmlaq_n_f32(v84, (float32x4_t)xmmword_25B5F13B0, fabsf(COERCE_FLOAT(*(_DWORD *)((unsigned char *)vsubq_f32(v74, v56).f32 + 8)))).u32[2]);
      float32x4_t v87 = v57;
    }
    objc_msgSend_quad(v8, v34, v35);
    float32x4_t v85 = v58;
    objc_msgSend_quad(v8, v59, v60);
    int8x16_t v62 = (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(v80, vnegq_f32(v82), v78.f32[0]), v71, v76);
    int8x16_t v63 = (int8x16_t)v85;
    float32x4_t v64 = vsubq_f32(v85, v80);
    float32x4_t v65 = vmulq_f32(v64, v64);
    v65.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v65.f32));
    v63.i32[2] = v62.i32[2];
    int8x16_t v66 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v78, v65), 0), v63, v62);
    float32x4_t v67 = vsubq_f32(v61, v80);
    if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v67, v67))) < v78.f32[0])
    {
      float32x4_t v68 = v61;
      v68.i32[2] = v87.i32[2];
      float32x4_t v87 = v68;
    }
    if (*(float *)&v66.i32[2] > v85.f32[2]) {
      v66.i32[2] = v85.i32[2];
    }
    float32x4_t v69 = v87;
    if (v87.f32[2] < v61.f32[2]) {
      v69.i32[2] = v61.i32[2];
    }
    float32x4_t v70 = v69;
    v70.i32[2] = v66.i32[2];
    src[0] = v66;
    src[1] = v70;
    v66.i32[2] = v69.i32[2];
    src[2] = v69;
    src[3] = v66;
    if (v88) {
      objc_copyStruct(v88 + 272, src, 64, 1, 0);
    }
  }
}

void sub_25B5B9F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5B9FCC(void *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  obuint64_t j = a2;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v43, v47, 16);
  if (v6)
  {
    uint64_t v7 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v44 != v7) {
          objc_enumerationMutation(obj);
        }
        float32x4_t v9 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        objc_msgSend_quad(v9, v4, v5);
        int v13 = v12;
        uint64_t v14 = *a1;
        uint64_t v16 = *(_DWORD **)(*a1 + 8);
        unint64_t v15 = *(void *)(*a1 + 16);
        if ((unint64_t)v16 >= v15)
        {
          float32x4_t v18 = *(_DWORD **)v14;
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(void *)v14) >> 2);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x1555555555555555) {
            goto LABEL_41;
          }
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 2);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v22 = 0x1555555555555555;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v22 = (unint64_t)sub_25B478C4C(v22);
            float32x4_t v18 = *(_DWORD **)v14;
            uint64_t v16 = *(_DWORD **)(v14 + 8);
          }
          else
          {
            unint64_t v10 = 0;
          }
          unint64_t v23 = v22 + 12 * v19;
          *(_DWORD *)unint64_t v23 = v13;
          *(void *)(v23 + 4) = 0xFFFFFFFF00000000;
          unint64_t v24 = v23;
          if (v16 != v18)
          {
            do
            {
              uint64_t v25 = *(void *)(v16 - 3);
              v16 -= 3;
              int v26 = v16[2];
              *(void *)(v24 - 12) = v25;
              v24 -= 12;
              *(_DWORD *)(v24 + 8) = v26;
            }
            while (v16 != v18);
            float32x4_t v18 = *(_DWORD **)v14;
          }
          uint64_t v17 = (_DWORD *)(v23 + 12);
          *(void *)uint64_t v14 = v24;
          *(void *)(v14 + 8) = v23 + 12;
          *(void *)(v14 + 16) = v22 + 12 * (void)v10;
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *uint64_t v16 = v12;
          *(void *)(v16 + 1) = 0xFFFFFFFF00000000;
          uint64_t v17 = v16 + 3;
        }
        *(void *)(v14 + 8) = v17;
        objc_msgSend_quad(v9, v10, v11);
        int v28 = v27;
        uint64_t v29 = a1[1];
        float v31 = *(_DWORD **)(v29 + 8);
        unint64_t v30 = *(void *)(v29 + 16);
        if ((unint64_t)v31 >= v30)
        {
          int v33 = *(_DWORD **)v29;
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(void *)v29) >> 2);
          unint64_t v35 = v34 + 1;
          if (v34 + 1 > 0x1555555555555555) {
LABEL_41:
          }
            sub_25B3FBC4C();
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)v33) >> 2);
          if (2 * v36 > v35) {
            unint64_t v35 = 2 * v36;
          }
          if (v36 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v37 = 0x1555555555555555;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v37 = (unint64_t)sub_25B478C4C(v37);
            int v33 = *(_DWORD **)v29;
            float v31 = *(_DWORD **)(v29 + 8);
          }
          else
          {
            uint64_t v4 = 0;
          }
          unint64_t v38 = v37 + 12 * v34;
          *(_DWORD *)unint64_t v38 = v28;
          *(void *)(v38 + 4) = 0xFFFFFFFF00000000;
          unint64_t v39 = v38;
          if (v31 != v33)
          {
            do
            {
              uint64_t v40 = *(void *)(v31 - 3);
              v31 -= 3;
              int v41 = v31[2];
              *(void *)(v39 - 12) = v40;
              v39 -= 12;
              *(_DWORD *)(v39 + 8) = v41;
            }
            while (v31 != v33);
            int v33 = *(_DWORD **)v29;
          }
          uint64_t v32 = (_DWORD *)(v38 + 12);
          *(void *)uint64_t v29 = v39;
          *(void *)(v29 + 8) = v38 + 12;
          *(void *)(v29 + 16) = v37 + 12 * (void)v4;
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *float v31 = v27;
          *(void *)(v31 + 1) = 0xFFFFFFFF00000000;
          uint64_t v32 = v31 + 3;
        }
        *(void *)(v29 + 8) = v32;
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v43, v47, 16);
    }
    while (v6);
  }
}

void sub_25B5BA2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *sub_25B5BA2F0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v6 = sub_25B3FCAD4(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v7];
    float v8 = &v6[a2];
    uint64_t v9 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v9 -= 8;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_25B5BA370(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5BA38C(uint64_t a1, void *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v7 = a2;
  unint64_t v8 = 0;
  uint64_t v9 = a3;
  while (objc_msgSend_count(v7, v5, v6) > v8)
  {
    int v10 = *(_DWORD *)(**(void **)(a1 + 24) + 12 * (v8 + v9) + 8);
    BOOL v11 = __OFSUB__(v10, 1);
    int v12 = v10 - 1;
    if (v12 < 0 == v11)
    {
      uint64_t v13 = 8 * v12;
      if (*(float *)(a1 + 32) >= *(float *)(**(void **)(a1 + 8) + v13)) {
        float v14 = *(float *)(**(void **)(a1 + 8) + v13);
      }
      else {
        float v14 = *(float *)(a1 + 32);
      }
      uint64_t v15 = **(void **)a1;
      uint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(v7, v5, v8);
      sub_25B5B8B80(v15, v16, **(float **)(a1 + 16), v14);

      uint64_t v17 = *(void **)(**(void **)a1 + 648);
      unint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(v7, v18, v8);
      unint64_t v22 = objc_msgSend_identifier(v19, v20, v21);
      unint64_t v24 = objc_msgSend_objectForKeyedSubscript_(v17, v23, (uint64_t)v22);

      if (v24)
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        id v25 = v24;
        uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v31, v35, 16);
        if (v27)
        {
          uint64_t v28 = *(void *)v32;
          do
          {
            for (uint64_t i = 0; i != v27; ++i)
            {
              if (*(void *)v32 != v28) {
                objc_enumerationMutation(v25);
              }
              sub_25B5B8B80(**(void **)a1, *(void **)(*((void *)&v31 + 1) + 8 * i), **(float **)(a1 + 16), v14);
            }
            uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v30, (uint64_t)&v31, v35, 16);
          }
          while (v27);
        }
      }
    }
    ++v8;
  }
}

void sub_25B5BA594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5BA5F0(unint64_t a1, unint64_t a2, float32x2_t **a3, uint64_t a4, char a5)
{
void sub_25B5BB530(unint64_t a1, float **a2, uint64_t a3, char a4)
{
double sub_25B5BC1AC(void *a1)
{
  id v1 = a1;
  objc_msgSend_quad(v1, v2, v3);
  float32x4_t v14 = v4;
  objc_msgSend_quad(v1, v5, v6);
  float32x4_t v8 = vsubq_f32(v14, v7);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  float32x4_t v12 = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  int32x4_t v15 = (int32x4_t)vmlaq_f32(vmulq_f32(v12, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));

  *(void *)&double result = vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL).u64[0];
  return result;
}

void sub_25B5BC25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B5BC270(float **a1, float **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(a2 - 3);
      float32x4_t v7 = *a1;
      float v8 = **a1;
      BOOL v9 = *v6 < v8;
      if (*v6 == v8)
      {
        float v10 = v6[1];
        float v11 = v7[1];
        BOOL v9 = v10 < v11;
        if (v10 == v11) {
          BOOL v9 = v6[2] < v7[2];
        }
      }
      if (v9)
      {
        *a1 = v6;
        *(a2 - 3) = v7;
        float32x4_t v12 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v12;
        unint64_t v13 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return result;
    case 3uLL:
      sub_25B5B8CA0(a1, (uint64_t)(a1 + 3), a2 - 3);
      return 1;
    case 4uLL:
      sub_25B5B8E70(a1, (uint64_t)(a1 + 3), a1 + 6, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      sub_25B5B8FC8(a1, (uint64_t)(a1 + 3), a1 + 6, (uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
      return 1;
    default:
      float32x4_t v14 = a1 + 6;
      sub_25B5B8CA0(a1, (uint64_t)(a1 + 3), a1 + 6);
      int32x4_t v15 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    long long v18 = *v15;
    float v19 = **v15;
    uint64_t v20 = *v14;
    float v21 = **v14;
    BOOL v22 = v19 < v21;
    if (v19 == v21)
    {
      float v23 = v18[1];
      float v24 = v20[1];
      BOOL v22 = v23 < v24;
      if (v23 == v24) {
        BOOL v22 = v18[2] < v20[2];
      }
    }
    if (v22)
    {
      long long v25 = *(_OWORD *)(v15 + 1);
      *int32x4_t v15 = 0;
      v15[1] = 0;
      uint64_t v26 = v16;
      v15[2] = 0;
      while (1)
      {
        float v27 = (char *)a1 + v26;
        *(_OWORD *)(v27 + 72) = *(_OWORD *)((char *)a1 + v26 + 48);
        *((void *)v27 + 11) = *(float **)((char *)a1 + v26 + 64);
        *((void *)v27 + 7) = 0;
        *((void *)v27 + 8) = 0;
        *((void *)v27 + 6) = 0;
        if (v26 == -48) {
          break;
        }
        BOOL v28 = (float *)*((void *)v27 + 3);
        BOOL v29 = *v18 < *v28;
        if (*v18 == *v28)
        {
          float v30 = v18[1];
          float v31 = v28[1];
          BOOL v29 = v30 < v31;
          if (v30 == v31) {
            BOOL v29 = v18[2] < v28[2];
          }
        }
        if (!v29)
        {
          uint64_t v32 = (uint64_t)a1 + v26 + 48;
          goto LABEL_24;
        }
        v26 -= 24;
      }
      uint64_t v32 = (uint64_t)a1;
LABEL_24:
      int32x2_t v33 = *(void **)v32;
      if (*(void *)v32)
      {
        *(void *)(v32 + 8) = v33;
        long long v34 = v25;
        operator delete(v33);
        long long v25 = v34;
      }
      *(void *)uint64_t v32 = v18;
      *(_OWORD *)(v32 + 8) = v25;
      if (++v17 == 8) {
        return v15 + 3 == a2;
      }
    }
    float32x4_t v14 = v15;
    v16 += 24;
    v15 += 3;
    if (v15 == a2) {
      return 1;
    }
  }
}

uint64_t sub_25B5BC4F0(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t **a4)
{
  float32x2_t v4 = **a4;
  BOOL v5 = *(float32x2_t **)a2;
  float32x2_t v6 = *a4[1];
  int32x2_t v7 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a2, v4), v6);
  float v8 = *(float32x2_t **)result;
  int32x2_t v9 = (int32x2_t)vmul_f32(v6, vsub_f32(**(float32x2_t **)result, v4));
  float32x2_t v10 = vadd_f32((float32x2_t)vzip1_s32(v7, v9), (float32x2_t)vzip2_s32(v7, v9));
  BOOL v11 = v10.f32[0] < v10.f32[1];
  if (v10.f32[0] == v10.f32[1]) {
    BOOL v11 = v5[1].f32[0] < v8[1].f32[0];
  }
  if (v11)
  {
    float32x4_t v12 = *(float32x2_t **)a3;
    float32x2_t v13 = vmul_f32(v6, vsub_f32(**(float32x2_t **)a3, v4));
    float32x2_t v14 = vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
    if (vceq_f32(v14, v10).u8[0])
    {
      if (v12[1].f32[0] >= v5[1].f32[0])
      {
LABEL_7:
        *(void *)BOOL result = v5;
        *(void *)a2 = v8;
        uint64_t v15 = *(void *)(result + 8);
        *(void *)(result + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v15;
        uint64_t v16 = (uint64_t *)(a2 + 16);
        uint64_t v17 = *(void *)(result + 16);
        *(void *)(result + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v17;
        long long v18 = *(float32x2_t **)a3;
        float v19 = a4[1];
        float32x2_t v20 = **a4;
        int32x2_t v21 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a3, v20), *v19);
        BOOL v22 = *(float32x2_t **)a2;
        int32x2_t v23 = (int32x2_t)vmul_f32(*v19, vsub_f32(**(float32x2_t **)a2, v20));
        float32x2_t v24 = vadd_f32((float32x2_t)vzip1_s32(v21, v23), (float32x2_t)vzip2_s32(v21, v23));
        BOOL v25 = v24.f32[0] < v24.f32[1];
        if (v24.f32[0] == v24.f32[1]) {
          BOOL v25 = v18[1].f32[0] < v22[1].f32[0];
        }
        if (!v25) {
          return result;
        }
        *(void *)a2 = v18;
        *(void *)a3 = v22;
        uint64_t v26 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v26;
        goto LABEL_17;
      }
    }
    else if ((vcgt_f32(v10, v14).u32[0] & 1) == 0)
    {
      goto LABEL_7;
    }
    *(void *)BOOL result = v12;
    *(void *)a3 = v8;
    uint64_t v30 = *(void *)(result + 8);
    *(void *)(result + 8) = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v30;
    uint64_t v16 = (uint64_t *)(result + 16);
LABEL_17:
    float v31 = (uint64_t *)(a3 + 16);
LABEL_24:
    uint64_t v43 = *v16;
    *uint64_t v16 = *v31;
    *float v31 = v43;
    return result;
  }
  float v27 = *(float32x2_t **)a3;
  float32x2_t v28 = vmul_f32(v6, vsub_f32(**(float32x2_t **)a3, v4));
  float32x2_t v29 = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1));
  if (vceq_f32(v29, v10).u8[0])
  {
    if (v27[1].f32[0] >= v5[1].f32[0]) {
      return result;
    }
  }
  else if ((vcgt_f32(v10, v29).u32[0] & 1) == 0)
  {
    return result;
  }
  *(void *)a2 = v27;
  *(void *)a3 = v5;
  uint64_t v32 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v32;
  float v31 = (uint64_t *)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v33;
  long long v34 = *(float32x2_t **)a2;
  float v35 = a4[1];
  float32x2_t v36 = **a4;
  int32x2_t v37 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a2, v36), *v35);
  float v38 = *(float32x2_t **)result;
  int32x2_t v39 = (int32x2_t)vmul_f32(*v35, vsub_f32(**(float32x2_t **)result, v36));
  float32x2_t v40 = vadd_f32((float32x2_t)vzip1_s32(v37, v39), (float32x2_t)vzip2_s32(v37, v39));
  BOOL v41 = v40.f32[0] < v40.f32[1];
  if (v40.f32[0] == v40.f32[1]) {
    BOOL v41 = v34[1].f32[0] < v38[1].f32[0];
  }
  if (v41)
  {
    *(void *)BOOL result = v34;
    *(void *)a2 = v38;
    uint64_t v42 = *(void *)(result + 8);
    *(void *)(result + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v42;
    uint64_t v16 = (uint64_t *)(result + 16);
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_25B5BC738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t **a5)
{
  uint64_t result = sub_25B5BC4F0(a1, a2, a3, a5);
  float32x2_t v11 = **a5;
  float32x4_t v12 = *(float32x2_t **)a4;
  float32x2_t v13 = *a5[1];
  int32x2_t v14 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a4, v11), v13);
  uint64_t v15 = *(float32x2_t **)a3;
  int32x2_t v16 = (int32x2_t)vmul_f32(v13, vsub_f32(**(float32x2_t **)a3, v11));
  float32x2_t v17 = vadd_f32((float32x2_t)vzip1_s32(v14, v16), (float32x2_t)vzip2_s32(v14, v16));
  BOOL v18 = v17.f32[0] < v17.f32[1];
  if (v17.f32[0] == v17.f32[1]) {
    BOOL v18 = v12[1].f32[0] < v15[1].f32[0];
  }
  if (v18)
  {
    *(void *)a3 = v12;
    *(void *)a4 = v15;
    uint64_t v19 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v19;
    uint64_t v20 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v20;
    int32x2_t v21 = *(float32x2_t **)a3;
    BOOL v22 = a5[1];
    float32x2_t v23 = **a5;
    int32x2_t v24 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a3, v23), *v22);
    BOOL v25 = *(float32x2_t **)a2;
    int32x2_t v26 = (int32x2_t)vmul_f32(*v22, vsub_f32(**(float32x2_t **)a2, v23));
    float32x2_t v27 = vadd_f32((float32x2_t)vzip1_s32(v24, v26), (float32x2_t)vzip2_s32(v24, v26));
    BOOL v28 = v27.f32[0] < v27.f32[1];
    if (v27.f32[0] == v27.f32[1]) {
      BOOL v28 = v21[1].f32[0] < v25[1].f32[0];
    }
    if (v28)
    {
      *(void *)a2 = v21;
      *(void *)a3 = v25;
      uint64_t v29 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v29;
      uint64_t v30 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v30;
      float v31 = *(float32x2_t **)a2;
      uint64_t v32 = a5[1];
      float32x2_t v33 = **a5;
      int32x2_t v34 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a2, v33), *v32);
      float v35 = *(float32x2_t **)a1;
      int32x2_t v36 = (int32x2_t)vmul_f32(*v32, vsub_f32(**(float32x2_t **)a1, v33));
      float32x2_t v37 = vadd_f32((float32x2_t)vzip1_s32(v34, v36), (float32x2_t)vzip2_s32(v34, v36));
      BOOL v38 = v37.f32[0] < v37.f32[1];
      if (v37.f32[0] == v37.f32[1]) {
        BOOL v38 = v31[1].f32[0] < v35[1].f32[0];
      }
      if (v38)
      {
        *(void *)a1 = v31;
        *(void *)a2 = v35;
        uint64_t v39 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v39;
        uint64_t v40 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v40;
      }
    }
  }
  return result;
}

uint64_t sub_25B5BC8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t **a6)
{
  uint64_t result = sub_25B5BC738(a1, a2, a3, a4, a6);
  float32x2_t v13 = **a6;
  int32x2_t v14 = *(float32x2_t **)a5;
  float32x2_t v15 = *a6[1];
  int32x2_t v16 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a5, v13), v15);
  float32x2_t v17 = *(float32x2_t **)a4;
  int32x2_t v18 = (int32x2_t)vmul_f32(v15, vsub_f32(**(float32x2_t **)a4, v13));
  float32x2_t v19 = vadd_f32((float32x2_t)vzip1_s32(v16, v18), (float32x2_t)vzip2_s32(v16, v18));
  BOOL v20 = v19.f32[0] < v19.f32[1];
  if (v19.f32[0] == v19.f32[1]) {
    BOOL v20 = v14[1].f32[0] < v17[1].f32[0];
  }
  if (v20)
  {
    *(void *)a4 = v14;
    *(void *)a5 = v17;
    uint64_t v21 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v21;
    uint64_t v22 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v22;
    float32x2_t v23 = *(float32x2_t **)a4;
    int32x2_t v24 = a6[1];
    float32x2_t v25 = **a6;
    int32x2_t v26 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a4, v25), *v24);
    float32x2_t v27 = *(float32x2_t **)a3;
    int32x2_t v28 = (int32x2_t)vmul_f32(*v24, vsub_f32(**(float32x2_t **)a3, v25));
    float32x2_t v29 = vadd_f32((float32x2_t)vzip1_s32(v26, v28), (float32x2_t)vzip2_s32(v26, v28));
    BOOL v30 = v29.f32[0] < v29.f32[1];
    if (v29.f32[0] == v29.f32[1]) {
      BOOL v30 = v23[1].f32[0] < v27[1].f32[0];
    }
    if (v30)
    {
      *(void *)a3 = v23;
      *(void *)a4 = v27;
      uint64_t v31 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v31;
      uint64_t v32 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v32;
      float32x2_t v33 = *(float32x2_t **)a3;
      int32x2_t v34 = a6[1];
      float32x2_t v35 = **a6;
      int32x2_t v36 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a3, v35), *v34);
      float32x2_t v37 = *(float32x2_t **)a2;
      int32x2_t v38 = (int32x2_t)vmul_f32(*v34, vsub_f32(**(float32x2_t **)a2, v35));
      float32x2_t v39 = vadd_f32((float32x2_t)vzip1_s32(v36, v38), (float32x2_t)vzip2_s32(v36, v38));
      BOOL v40 = v39.f32[0] < v39.f32[1];
      if (v39.f32[0] == v39.f32[1]) {
        BOOL v40 = v33[1].f32[0] < v37[1].f32[0];
      }
      if (v40)
      {
        *(void *)a2 = v33;
        *(void *)a3 = v37;
        uint64_t v41 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v41;
        uint64_t v42 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v42;
        uint64_t v43 = *(float32x2_t **)a2;
        long long v44 = a6[1];
        float32x2_t v45 = **a6;
        int32x2_t v46 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)a2, v45), *v44);
        float32x4_t v47 = *(float32x2_t **)a1;
        int32x2_t v48 = (int32x2_t)vmul_f32(*v44, vsub_f32(**(float32x2_t **)a1, v45));
        float32x2_t v49 = vadd_f32((float32x2_t)vzip1_s32(v46, v48), (float32x2_t)vzip2_s32(v46, v48));
        BOOL v50 = v49.f32[0] < v49.f32[1];
        if (v49.f32[0] == v49.f32[1]) {
          BOOL v50 = v43[1].f32[0] < v47[1].f32[0];
        }
        if (v50)
        {
          *(void *)a1 = v43;
          *(void *)a2 = v47;
          uint64_t v51 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v51;
          uint64_t v52 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v52;
        }
      }
    }
  }
  return result;
}

BOOL sub_25B5BCB30(uint64_t a1, uint64_t a2, float32x2_t **a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v8 = *(float32x2_t **)(a2 - 24);
      int32x2_t v9 = a3[1];
      float32x2_t v10 = **a3;
      int32x2_t v11 = (int32x2_t)vmul_f32(vsub_f32(*v8, v10), *v9);
      float32x4_t v12 = *(float32x2_t **)a1;
      int32x2_t v13 = (int32x2_t)vmul_f32(*v9, vsub_f32(**(float32x2_t **)a1, v10));
      float32x2_t v14 = vadd_f32((float32x2_t)vzip1_s32(v11, v13), (float32x2_t)vzip2_s32(v11, v13));
      BOOL v15 = v14.f32[0] < v14.f32[1];
      if (v14.f32[0] == v14.f32[1]) {
        BOOL v15 = v8[1].f32[0] < v12[1].f32[0];
      }
      if (v15)
      {
        *(void *)a1 = v8;
        *(void *)(a2 - 24) = v12;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v16;
        uint64_t v17 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v17;
      }
      return result;
    case 3uLL:
      sub_25B5BC4F0(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_25B5BC738(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_25B5BC8F4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      int32x2_t v18 = (float32x2_t **)(a1 + 48);
      sub_25B5BC4F0(a1, a1 + 24, a1 + 48, a3);
      uint64_t v19 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v20 = 0;
      int v21 = 0;
      break;
  }
  while (1)
  {
    uint64_t v22 = a3[1];
    float32x2_t v23 = **a3;
    int32x2_t v24 = *(float32x2_t **)v19;
    int32x2_t v25 = (int32x2_t)vmul_f32(vsub_f32(**(float32x2_t **)v19, v23), *v22);
    int32x2_t v26 = (int32x2_t)vmul_f32(*v22, vsub_f32(**v18, v23));
    float32x2_t v27 = vadd_f32((float32x2_t)vzip1_s32(v25, v26), (float32x2_t)vzip2_s32(v25, v26));
    BOOL v28 = v27.f32[0] < v27.f32[1];
    if (v27.f32[0] == v27.f32[1]) {
      BOOL v28 = v24[1].f32[0] < (*v18)[1].f32[0];
    }
    if (v28)
    {
      long long v29 = *(_OWORD *)(v19 + 8);
      *(void *)uint64_t v19 = 0;
      *(void *)(v19 + 8) = 0;
      uint64_t v30 = v20;
      *(void *)(v19 + 16) = 0;
      while (1)
      {
        uint64_t v31 = a1 + v30;
        *(_OWORD *)(v31 + 72) = *(_OWORD *)(a1 + v30 + 48);
        *(void *)(v31 + 88) = *(void *)(a1 + v30 + 64);
        *(void *)(v31 + 56) = 0;
        *(void *)(v31 + 64) = 0;
        *(void *)(v31 + 48) = 0;
        if (v30 == -48) {
          break;
        }
        uint64_t v32 = a3[1];
        float32x2_t v33 = **a3;
        int32x2_t v34 = (int32x2_t)vmul_f32(vsub_f32(*v24, v33), *v32);
        float32x2_t v35 = *(float32x2_t **)(v31 + 24);
        int32x2_t v36 = (int32x2_t)vmul_f32(*v32, vsub_f32(*v35, v33));
        float32x2_t v37 = vadd_f32((float32x2_t)vzip1_s32(v34, v36), (float32x2_t)vzip2_s32(v34, v36));
        BOOL v38 = v37.f32[0] < v37.f32[1];
        if (v37.f32[0] == v37.f32[1]) {
          BOOL v38 = v24[1].f32[0] < v35[1].f32[0];
        }
        if (!v38)
        {
          uint64_t v39 = a1 + v30 + 48;
          goto LABEL_21;
        }
        v30 -= 24;
      }
      uint64_t v39 = a1;
LABEL_21:
      BOOL v40 = *(void **)v39;
      if (*(void *)v39)
      {
        *(void *)(v39 + 8) = v40;
        long long v41 = v29;
        operator delete(v40);
        long long v29 = v41;
      }
      *(void *)uint64_t v39 = v24;
      *(_OWORD *)(v39 + 8) = v29;
      if (++v21 == 8) {
        return v19 + 24 == a2;
      }
    }
    int32x2_t v18 = (float32x2_t **)v19;
    v20 += 24;
    v19 += 24;
    if (v19 == a2) {
      return 1;
    }
  }
}

void sub_25B5BCE18(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_25B3FAE18(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_25B5BCE70(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int32x2_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      float32x2_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          float32x2_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  float32x4_t v12 = a1 + 2;
  float32x2_t v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          uint64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            BOOL v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *uint64_t v22 = *v28;
                  void *v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  BOOL v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                uint64_t v22 = v28;
                BOOL v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        int32x2_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  uint64_t v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    void *v10 = *v31;
LABEL_72:
    *uint64_t v31 = v10;
    goto LABEL_73;
  }
  void *v10 = *v12;
  *float32x4_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_25B5BD254(_Unwind_Exception *a1)
{
  sub_25B3FA6AC(1, v1);
  _Unwind_Resume(a1);
}

void sub_25B5BD26C(void **a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v4 = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v46, v51, 16);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)v47;
    obuint64_t j = v4;
    do
    {
      uint64_t v9 = 0;
      float32x2_t v10 = (float32x2_t *)*a1;
      do
      {
        if (*(void *)v47 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v46 + 1) + 8 * v9);
        float32x2_t v45 = (float32x2_t)sub_25B477C40((void *)v11).n128_u64[0];
        int8x8_t v13 = v12;
        objc_msgSend_quad((void *)v11, v14, v15);
        __int32 v44 = v16;
        objc_msgSend_quad((void *)v11, v17, v18);
        float32x2_t v21 = vsub_f32((float32x2_t)vext_s8(v13, (int8x8_t)v45, 4uLL), (float32x2_t)vext_s8((int8x8_t)v45, v13, 4uLL));
        int32x2_t v22 = (int32x2_t)vmul_f32(v21, v21);
        v22.i32[0] = vadd_f32((float32x2_t)v22, (float32x2_t)vdup_lane_s32(v22, 1)).u32[0];
        float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
        float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
        float32x2_t v25 = vmul_n_f32(v21, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
        unsigned int v26 = v25.f32[0] < 0.0;
        if (v11)
        {
          float32x2_t v40 = v25;
          uint64_t v41 = *((void *)&v20 + 1);
          objc_copyStruct(&dest, (const void *)(v11 + 208), 16, 1, 0);
          float32x2_t v42 = (float32x2_t)dest;
          float32x2_t v25 = v40;
          *((void *)&v20 + 1) = v41;
        }
        else
        {
          float32x2_t v42 = 0;
        }
        __int32 v27 = v44;
        __int32 v28 = DWORD2(v20);
        *(int8x8_t *)&long long v20 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v26), 0x1FuLL)), (int8x8_t)vneg_f32(v25), (int8x8_t)v25);
        *((float *)&v20 + 2) = -(float)(COERCE_FLOAT(vmul_f32(v45, *(float32x2_t *)&v20).i32[1])
                                      + (float)(*(float *)&v20 * v45.f32[0]));
        unint64_t v29 = (float32x2_t *)a1[2];
        if (v7 >= v29)
        {
          long long v43 = v20;
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v10) >> 4) + 1;
          if (v30 > 0x555555555555555) {
            sub_25B3FBC4C();
          }
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v10) >> 4);
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v32 = 0x555555555555555;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32) {
            unint64_t v32 = (unint64_t)sub_25B467D14(v32);
          }
          else {
            uint64_t v19 = 0;
          }
          unint64_t v33 = v32 + 16 * (((char *)v7 - (char *)v10) >> 4);
          *(float32x2_t *)unint64_t v33 = v45;
          *(int8x8_t *)(v33 + 8) = v13;
          *(_DWORD *)(v33 + 16) = v28;
          *(_DWORD *)(v33 + 20) = v27;
          *(float32x2_t *)(v33 + 24) = v42;
          *(_OWORD *)(v33 + 32) = v43;
          if (v7 == v10)
          {
            float32x2_t v37 = (float32x2_t *)(v32 + 16 * (((char *)v7 - (char *)v10) >> 4));
          }
          else
          {
            unint64_t v34 = v32 + 16 * (((char *)v7 - (char *)v10) >> 4);
            do
            {
              long long v35 = *(_OWORD *)v7[-6].f32;
              long long v36 = *(_OWORD *)v7[-2].f32;
              float32x2_t v37 = (float32x2_t *)(v34 - 48);
              *(_OWORD *)(v34 - 32) = *(_OWORD *)v7[-4].f32;
              *(_OWORD *)(v34 - 16) = v36;
              *(_OWORD *)(v34 - 48) = v35;
              v7 -= 6;
              v34 -= 48;
            }
            while (v7 != v10);
          }
          unint64_t v7 = (float32x2_t *)(v33 + 48);
          *a1 = v37;
          a1[1] = (void *)(v33 + 48);
          a1[2] = (void *)(v32 + 48 * (void)v19);
          if (v10) {
            operator delete(v10);
          }
          float32x2_t v10 = v37;
        }
        else
        {
          float32x2_t *v7 = v45;
          v7[1] = (float32x2_t)v13;
          v7[2].i32[0] = v28;
          v7[2].i32[1] = v44;
          v7[3] = v42;
          *(_OWORD *)v7[4].f32 = v20;
          v7 += 6;
        }
        a1[1] = v7;
        ++v9;
      }
      while (v9 != v6);
      id v4 = obj;
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v19, (uint64_t)&v46, v51, 16);
      uint64_t v6 = v38;
    }
    while (v38);
  }
}

void sub_25B5BD58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B5BD5EC(void *a1, int a2, int a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (v3)
  {
    unint64_t v4 = a3 ^ a2;
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      uint64_t v6 = a3 ^ a2;
      if (*(void *)&v3 <= v4) {
        uint64_t v6 = v4 % *(void *)&v3;
      }
    }
    else
    {
      uint64_t v6 = (*(void *)&v3 - 1) & v4;
    }
    uint64_t i = *(uint64_t **)(*a1 + 8 * v6);
    if (i)
    {
      for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == v4)
        {
          if (*((_DWORD *)i + 4) == a2 && *((_DWORD *)i + 5) == a3) {
            return i != 0;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v8 >= *(void *)&v3) {
              v8 %= *(void *)&v3;
            }
          }
          else
          {
            v8 &= *(void *)&v3 - 1;
          }
          if (v8 != v6) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  else
  {
LABEL_22:
    uint64_t i = 0;
  }
  return i != 0;
}

char *sub_25B5BD6B0(uint64_t a1, int *a2)
{
  int v5 = *a2;
  int v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      uint64_t v2 = v6 ^ v5;
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
    float32x2_t v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v5 && *((_DWORD *)v11 + 5) == v6) {
              return (char *)(v11 + 3);
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  v11[2] = *(void *)a2;
  v11[3] = 0;
  v11[4] = 0;
  v11[5] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_25B3FA4B0(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
      else {
        uint64_t v2 = v7;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  float32x2_t v21 = *(void **)(*(void *)a1 + 8 * v2);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_42:
    void *v21 = v11;
    goto LABEL_43;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v2) = a1 + 16;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    float32x2_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return (char *)(v11 + 3);
}

void sub_25B5BD8BC(_Unwind_Exception *a1)
{
  sub_25B3FA6AC(1, v1);
  _Unwind_Resume(a1);
}

char *sub_25B5BD8D4(float *a1, int *a2)
{
  int v5 = *a2;
  int v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      uint64_t v2 = v6 ^ v5;
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
    float32x2_t v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v5 && *((_DWORD *)v11 + 5) == v6) {
              return (char *)(v11 + 3);
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  v11[2] = *(void *)a2;
  *((unsigned char *)v11 + 24) = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v16 = 0;
    }
    unint64_t v17 = (2 * v8) | !v16;
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          float32x2_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          float32x2_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            unint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_59;
                  }
                  *float32x2_t v23 = *v29;
                  void *v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  unint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_59:
                float32x2_t v23 = v29;
                unint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
      else {
        uint64_t v2 = v7;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
  }
  unint64_t v31 = *(void **)a1;
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v2);
  if (v32)
  {
    *uint64_t v11 = *v32;
LABEL_76:
    *unint64_t v32 = v11;
    goto LABEL_77;
  }
  *uint64_t v11 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (*v11)
  {
    unint64_t v33 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    unint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
  return (char *)(v11 + 3);
}

void sub_25B5BDCBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B5BDCD0(uint64_t a1, const char *a2, int a3, double a4)
{
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), a2, (int)a2);
  int v5 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = 0;
  unint64_t v32 = v5;
  do
  {
    objc_msgSend_quad(v5, v6, v7);
    DWORD2(src) = v9;
    DWORD2(v35) = v10;
    DWORD2(v36) = v11;
    *(void *)&long long src = v12;
    *(void *)&long long v35 = v13;
    DWORD2(v37) = v14;
    *(void *)&long long v36 = v15;
    *(void *)&long long v37 = v16;
    v33[v8] = *(long long *)((char *)&src + v8 * 16);
    ++v8;
    int v5 = v32;
  }
  while (v8 != 4);
  objc_msgSend_quad(v32, v6, v7);
  if (a3)
  {
    int8x16_t v29 = v20;
    objc_msgSend_quad(v32, v17, v18);
    *(double *)&long long v21 = a4;
    *((void *)&v21 + 1) = vextq_s8(v29, v29, 8uLL).u64[0];
    unint64_t v23 = vextq_s8(v22, v22, 8uLL).u64[0];
    *(double *)&long long v24 = a4;
    *((void *)&v24 + 1) = v23;
    long long v25 = v33[0];
    long long v26 = v33[3];
  }
  else
  {
    int8x16_t v30 = v19;
    objc_msgSend_quad(v32, v17, v18);
    *(double *)&long long v26 = a4;
    *(double *)&long long v25 = a4;
    *((void *)&v25 + 1) = vextq_s8(v30, v30, 8uLL).u64[0];
    *((void *)&v26 + 1) = vextq_s8(v27, v27, 8uLL).u64[0];
    long long v21 = v33[1];
    long long v24 = v33[2];
  }
  long long src = v25;
  long long v35 = v21;
  long long v36 = v24;
  long long v37 = v26;
  uint64_t v28 = v32;
  if (v32)
  {
    objc_copyStruct(v32 + 272, &src, 64, 1, 0);
    uint64_t v28 = v32;
  }
}

void sub_25B5BDE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B5BDE40(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (a2)
  {
    unint64_t v4 = a4 ^ a3;
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      uint64_t v6 = a4 ^ a3;
      if (v4 >= a2) {
        uint64_t v6 = v4 % a2;
      }
    }
    else
    {
      uint64_t v6 = (a2 - 1) & v4;
    }
    uint64_t i = *(uint64_t **)(a1 + 8 * v6);
    if (i)
    {
      for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == v4)
        {
          if (*((_DWORD *)i + 4) == a3 && *((_DWORD *)i + 5) == a4) {
            return i != 0;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v8 >= a2) {
              v8 %= a2;
            }
          }
          else
          {
            v8 &= a2 - 1;
          }
          if (v8 != v6) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  else
  {
LABEL_22:
    uint64_t i = 0;
  }
  return i != 0;
}

void sub_25B5BDEFC(uint64_t a1, const char *a2, __n128 a3, __n128 a4)
{
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 256), a2, (int)a2);
  long long v25 = (char *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_quad(v25, v4, v5);
  int8x16_t v22 = v6;
  objc_msgSend_quad(v25, v7, v8);
  int8x16_t v21 = v9;
  objc_msgSend_quad(v25, v10, v11);
  unsigned __int32 v20 = v12;
  objc_msgSend_quad(v25, v13, v14);
  __n128 v15 = a3;
  *(void *)&long long v16 = a3.n128_u64[0];
  *((void *)&v16 + 1) = vextq_s8(v22, v22, 8uLL).u64[0];
  __n128 v17 = a4;
  *(void *)&long long v18 = a4.n128_u64[0];
  *((void *)&v18 + 1) = vextq_s8(v21, v21, 8uLL).u64[0];
  v17.n128_u32[2] = v20;
  v15.n128_u32[2] = v19;
  src[0] = v16;
  src[1] = v18;
  src[2] = v17;
  src[3] = v15;
  if (v25) {
    objc_copyStruct(v25 + 272, src, 64, 1, 0);
  }
}

void sub_25B5BDFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_25B5BDFF4(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  long long v7 = *(_OWORD *)(a2 + 48 * (int)a3);
  long long v21 = *(_OWORD *)(a2 + 48 * (int)a4);
  long long v22 = v7;
  long long v8 = v7;
  long long v9 = v21;
  sub_25B40E03C(&v20, (float32x2_t *)&v22, (float32x2_t *)&v21);
  uint64_t v11 = v20;
  v12.n128_u32[0] = *(_DWORD *)(a1 + 72);
  if (*v20 >= v12.n128_f32[0] && v20[3] >= v12.n128_f32[0])
  {
    float32x2_t v14 = vmla_f32(vmul_f32(*(float32x2_t *)((char *)&v9 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v8);
    float32x2_t v13 = vmla_f32(vmul_f32(*(float32x2_t *)&v9, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)((char *)&v8 + 8));
    v12.n128_u64[0] = (unint64_t)v14;
    v10.n128_u64[0] = (unint64_t)v13;
    sub_25B5BDEFC(a1, a3, v12, v10);
  }
  else
  {
    float32x2_t v13 = vmla_f32(vmul_f32(*(float32x2_t *)&v9, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v8);
    float32x2_t v14 = vmla_f32(vmul_f32(*(float32x2_t *)((char *)&v9 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)((char *)&v8 + 8));
    v12.n128_u64[0] = (unint64_t)v13;
    v10.n128_u64[0] = (unint64_t)v14;
    sub_25B5BDEFC(a1, a3, v12, v10);
  }
  v15.n128_u64[0] = (unint64_t)v13;
  v16.n128_u64[0] = (unint64_t)v14;
  sub_25B5BDEFC(a1, a4, v15, v16);
  __n128 v17 = (float *)(a1 + 472);
  int v18 = (int)a3;
  int v19 = 0;
  sub_25B5BE584(v17, &v18);
  int v18 = (int)a3;
  int v19 = 1;
  sub_25B5BE584(v17, &v18);
  int v18 = (int)a4;
  int v19 = 0;
  sub_25B5BE584(v17, &v18);
  int v18 = (int)a4;
  int v19 = 1;
  sub_25B5BE584(v17, &v18);

  operator delete(v11);
}

void sub_25B5BE154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25B5BE178(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  long long v7 = *(_OWORD *)(a2 + 48 * (int)a3);
  long long v31 = *(_OWORD *)(a2 + 48 * (int)a4);
  long long v32 = v7;
  long long v8 = v7;
  float32x2_t v29 = *(float32x2_t *)((char *)&v31 + 8);
  float32x2_t v9 = (float32x2_t)v31;
  uint64_t v30 = v31;
  float32x2_t v10 = vmla_f32(vmul_f32(vmla_f32(vmul_f32(*(float32x2_t *)((char *)&v31 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v31), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, vmla_f32(vmul_f32(*(float32x2_t *)((char *)&v7 + 8), (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v7));
  sub_25B40E03C(&v28, (float32x2_t *)&v32, (float32x2_t *)&v31);
  uint64_t v11 = v28;
  float v12 = *(float *)(a1 + 72);
  if (*v28 >= v12)
  {
    float32x2_t v13 = &v29;
    float32x2_t v14 = (float32x2_t)v8;
    if (v28[1] >= v12)
    {
      if (v28[2] < v12) {
        float32x2_t v13 = (float32x2_t *)&v30;
      }
      float32x2_t v14 = *(float32x2_t *)((char *)&v8 + 8);
    }
  }
  else
  {
    float32x2_t v13 = (float32x2_t *)&v30;
    float32x2_t v14 = (float32x2_t)v8;
  }
  float32x2_t v15 = vmla_f32(vmul_f32(*v13, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v14);
  float32x2_t v16 = vsub_f32(v15, v10);
  float v17 = vaddv_f32(vmul_f32(v16, v16));
  if (v17 < 0.000001) {
    float v17 = 0.000001;
  }
  float32x2_t v18 = vmla_n_f32(v10, v16, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v8 + 8), v10), v16)) / v17);
  float32x2_t v19 = vmla_n_f32(v10, v16, vaddv_f32(vmul_f32(vsub_f32(v29, v10), v16)) / v17);
  if (*v28 >= v12)
  {
    float32x2_t v22 = vmla_n_f32(v10, v16, vaddv_f32(vmul_f32(vsub_f32(v9, v10), v16)) / v17);
    if (v28[1] >= v12)
    {
      float32x2_t v23 = vmla_n_f32(v10, v16, vaddv_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v8, v10), v16)) / v17);
      if (v28[2] >= v12)
      {
        int v26 = (int)a3;
        int v27 = 1;
        sub_25B5BE584((float *)(a1 + 472), &v26);
        int v26 = (int)a4;
        int v27 = 1;
        sub_25B5BE584((float *)(a1 + 472), &v26);
        float32x2_t v19 = v15;
      }
      else
      {
        int v26 = (int)a3;
        int v27 = 1;
        sub_25B5BE584((float *)(a1 + 472), &v26);
        int v26 = (int)a4;
        int v27 = 0;
        sub_25B5BE584((float *)(a1 + 472), &v26);
        float32x2_t v22 = v15;
      }
      float32x2_t v18 = v15;
      float32x2_t v15 = v23;
    }
    else
    {
      int v26 = (int)a3;
      int v27 = 0;
      sub_25B5BE584((float *)(a1 + 472), &v26);
      int v26 = (int)a4;
      int v27 = 1;
      sub_25B5BE584((float *)(a1 + 472), &v26);
      float32x2_t v19 = v15;
    }
  }
  else
  {
    int v26 = (int)a3;
    int v27 = 0;
    sub_25B5BE584((float *)(a1 + 472), &v26);
    int v26 = (int)a4;
    int v27 = 0;
    sub_25B5BE584((float *)(a1 + 472), &v26);
    float32x2_t v22 = v15;
  }
  v20.n128_u64[0] = (unint64_t)v15;
  v21.n128_u64[0] = (unint64_t)v18;
  sub_25B5BDEFC(a1, a3, v20, v21);
  v24.n128_u64[0] = (unint64_t)v22;
  v25.n128_u64[0] = (unint64_t)v19;
  sub_25B5BDEFC(a1, a4, v24, v25);

  operator delete(v11);
}

void sub_25B5BE408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_25B5BE43C(float **a1, uint64_t a2)
{
  v15[4] = *MEMORY[0x263EF8340];
  int8x8_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (char *)v2 - (char *)*a1;
  if (v2 == *a1) {
    return 0.0;
  }
  sub_25B546220((uint64_t)v15, a2);
  unint64_t v7 = (unint64_t)(v4 >> 2) >> 1;
  long long v8 = &v3[v7];
  if (v8 != v2) {
    sub_25B5462B8(v3, v8, v2, (uint64_t)v15);
  }
  sub_25B5460E8(v15);
  float32x2_t v9 = *a1;
  float32x2_t v10 = &(*a1)[v7];
  float v11 = *v10;
  if ((v4 & 4) == 0)
  {
    float v12 = a1[1];
    sub_25B546220((uint64_t)v14, a2);
    if (v10 - 1 != v12) {
      sub_25B5462B8(v9, v10 - 1, v12, (uint64_t)v14);
    }
    sub_25B5460E8(v14);
  }
  return v11;
}

void sub_25B5BE55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25B5460E8(va);
  _Unwind_Resume(a1);
}

void sub_25B5BE584(float *a1, int *a2)
{
  int v5 = *a2;
  int v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      uint64_t v2 = v6 ^ v5;
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
    float32x2_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v5 && *((_DWORD *)i + 5) == v6) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  float32x2_t v14 = operator new(0x18uLL);
  *float32x2_t v14 = 0;
  v14[1] = v7;
  v14[2] = *(void *)a2;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v17 = 0;
    }
    unint64_t v18 = (2 * v8) | !v17;
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            sub_25B3FA70C();
          }
          __n128 v21 = operator new(8 * *(void *)&prime);
          float32x2_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          __n128 v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            uint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *__n128 v24 = *v30;
                  *uint64_t v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  uint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_59:
                __n128 v24 = v30;
                uint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        long long v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        uint64_t v2 = v7 % v8;
      }
      else {
        uint64_t v2 = v7;
      }
    }
    else
    {
      uint64_t v2 = (v8 - 1) & v7;
    }
  }
  long long v32 = *(void **)a1;
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v2);
  if (v33)
  {
    *float32x2_t v14 = *v33;
LABEL_76:
    *unint64_t v33 = v14;
    goto LABEL_77;
  }
  *float32x2_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v2] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8) {
        v34 %= v8;
      }
    }
    else
    {
      v34 &= v8 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((void *)a1 + 3);
}

void sub_25B5BE964(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_25B5BE978(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float32x2_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          float32x2_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  float32x2_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_25B3FA4B0(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25B5BEB74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25B5BEB88(int a1, int a2, uint64_t a3, void *a4)
{
  id v9 = a4;
  float32x2_t v10 = *(uint64_t **)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = a2;
    do
    {
      if (*((_DWORD *)v10 + 4) != 3)
      {
        float v12 = (unsigned int *)v10[3];
        float v13 = (unsigned int *)v10[4];
        while (v12 != v13)
        {
          unint64_t v14 = *v12;
          unint64_t v15 = v12[1];
          if (v14 == a1 && (v15 & 0x80000000) == 0 && objc_msgSend_count(v9, v7, v8) > v15)
          {
            unint64_t v16 = objc_msgSend_objectAtIndexedSubscript_(v9, v7, v15);
            uint64_t v17 = v16 ? v16[20] : 0;

            if (v17 == v11) {
              goto LABEL_24;
            }
          }
          if ((v14 & 0x80000000) == 0 && v15 == a1 && objc_msgSend_count(v9, v7, v8) > v14)
          {
            uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v9, v7, v14);
            uint64_t v19 = v18 ? v18[20] : 0;

            if (v19 == v11)
            {
LABEL_24:
              uint64_t v20 = 1;
              goto LABEL_25;
            }
          }
          v12 += 2;
        }
      }
      float32x2_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  uint64_t v20 = 0;
LABEL_25:

  return v20;
}

void sub_25B5BECB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_25B5BECC8(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_25B40040C(a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25B5BED30(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_25B5BED4C(void *a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v4 = objc_msgSend_walls(v1, v2, v3);
  uint64_t v7 = objc_msgSend_count(v4, v5, v6);

  float32x4_t v10 = 0uLL;
  if (v7)
  {
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    long long v35 = 0uLL;
    long long v36 = 0uLL;
    uint64_t v11 = objc_msgSend_walls(v1, v8, v9);
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v35, v39, 16);
    if (v15)
    {
      uint64_t v16 = *(void *)v36;
      float32x4_t v33 = 0u;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v36 != v16) {
            objc_enumerationMutation(v11);
          }
          uint64_t v18 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          objc_msgSend_quad(v18, v13, v14);
          float32x4_t v32 = v19;
          objc_msgSend_quad(v18, v20, v21);
          v23.i64[0] = 0x3F0000003F000000;
          v23.i64[1] = 0x3F0000003F000000;
          float32x4_t v33 = vaddq_f32(v33, vmulq_f32(vaddq_f32(v32, v22), v23));
        }
        uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v13, (uint64_t)&v35, v39, 16);
      }
      while (v15);
    }
    else
    {
      float32x4_t v33 = 0u;
    }

    uint8x8_t v26 = objc_msgSend_walls(v1, v24, v25);
    uint64_t v29 = objc_msgSend_count(v26, v27, v28);

    *(float *)v30.i32 = (float)(unint64_t)v29;
    float32x4_t v10 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(v30, 0));
  }
  float32x4_t v34 = v10;

  return (__n128)v34;
}

void sub_25B5BEEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_25B5BEF30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  float v5 = 0.0;
  float v6 = 0.0;
  if (a2) {
    float v6 = *(float *)(a2 + 16);
  }
  if (v4) {
    float v5 = v4[4];
  }
  if (v6 >= v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = -1;
  }
  if (v6 > v5) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }

  return v8;
}

__n128 sub_25B5BEF80(void *a1)
{
  id v1 = a1;
  objc_msgSend_quad(v1, v2, v3);
  long long v8 = v4;
  objc_msgSend_quad(v1, v5, v6);

  return (__n128)v8;
}

void sub_25B5BEFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_25B5BEFDC(int a1, double a2, double a3, double a4, double a5)
{
  if (a1)
  {
    float v5 = *((float *)&a3 + 1);
    float v6 = *((float *)&a2 + 1);
    LODWORD(v7) = vsub_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a3).u32[0];
    float v8 = *((float *)&a4 + 1);
    float v9 = *((float *)&a4 + 1) - *((float *)&a3 + 1);
    LODWORD(v10) = vsub_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a3).u32[0];
    float v11 = *((float *)&a5 + 1);
    float v12 = *((float *)&a5 + 1) - *((float *)&a3 + 1);
  }
  else
  {
    float v8 = *((float *)&a4 + 1);
    float v6 = *((float *)&a2 + 1);
    if (fabsf(vsub_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a2).f32[0]) < 0.00001
      && vabds_f32(*((float *)&a4 + 1), *((float *)&a2 + 1)) < 0.00001)
    {
      return 0;
    }
    float v11 = *((float *)&a5 + 1);
    if (fabsf(vsub_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a2).f32[0]) < 0.00001
      && vabds_f32(*((float *)&a5 + 1), *((float *)&a2 + 1)) < 0.00001)
    {
      return 0;
    }
    LODWORD(v7) = vsub_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a3).u32[0];
    float v5 = *((float *)&a3 + 1);
    if (fabsf(v7) < 0.00001 && vabds_f32(*((float *)&a4 + 1), *((float *)&a3 + 1)) < 0.00001) {
      return 0;
    }
    float v9 = *((float *)&a4 + 1) - *((float *)&a3 + 1);
    LODWORD(v10) = vsub_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a3).u32[0];
    float v12 = *((float *)&a5 + 1) - *((float *)&a3 + 1);
    if (fabsf(v10) < 0.00001 && vabds_f32(*((float *)&a5 + 1), *((float *)&a3 + 1)) < 0.00001) {
      return 0;
    }
  }
  BOOL result = 0;
  float v14 = (float)((float)(v5 - v6) * v7) - (float)((float)(*(float *)&a3 - *(float *)&a2) * v9);
  if (fabsf(v14) >= 0.00001)
  {
    float v15 = (float)((float)(v5 - v6) * v10) - (float)((float)(*(float *)&a3 - *(float *)&a2) * v12);
    if (fabsf(v15) >= 0.00001)
    {
      float v16 = v11 - v8;
      float v17 = *(float *)&a5 - *(float *)&a4;
      float v18 = (float)(v16 * (float)(*(float *)&a2 - *(float *)&a5)) - (float)(v17 * (float)(v6 - v11));
      if (fabsf(v18) >= 0.00001)
      {
        float v19 = (float)(v16 * (float)(*(float *)&a3 - *(float *)&a5)) - (float)(v17 * (float)(v5 - v11));
        if (fabsf(v19) >= 0.00001) {
          return !((v14 > 0.0) ^ (v15 <= 0.0) | (v18 > 0.0) ^ (v19 <= 0.0));
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B5BF144(double a1, double a2, double a3, double a4, double a5)
{
  unint64_t v5 = 0;
  BOOL v6 = 0;
  char v7 = 0;
  double v23 = a1;
  *(double *)__n128 v24 = a2;
  *(double *)&v24[1] = a3;
  *(double *)&v24[2] = a4;
  float v8 = *((float *)&a5 + 1);
  float v9 = (double *)v24;
  HIDWORD(v10) = HIDWORD(a5);
  LODWORD(v10) = 2139095039;
  double v19 = a5;
  double v20 = v10;
  while (1)
  {
    if (v5 == 3) {
      float v11 = &v23;
    }
    else {
      float v11 = v9;
    }
    double v21 = *v11;
    double v22 = *(v9 - 1);
    if (!sub_25B5BEFDC(1, a5, v20, v22, *v11))
    {
      a5 = v19;
      goto LABEL_9;
    }
    a5 = v19;
    if (fabsf(vmlas_n_f32(-(float)(vsub_f32(*(float32x2_t *)&v19, *(float32x2_t *)&v22).f32[0] * (float)(*((float *)&v21 + 1) - v8)), v8 - *((float *)&v22 + 1), vsub_f32(*(float32x2_t *)&v21, *(float32x2_t *)&v19).f32[0])) < 0.00001)break; {
    ++v7;
    }
LABEL_9:
    BOOL v6 = v5 > 2;
    ++v9;
    if (++v5 == 4) {
      return v7 & 1;
    }
  }
  float v13 = fminf(*(float *)&v22, *(float *)&v21);
  BOOL v14 = *(float *)&v19 > fmaxf(*(float *)&v22, *(float *)&v21) || *(float *)&v19 < v13;
  float v15 = fmaxf(*((float *)&v22 + 1), *((float *)&v21 + 1));
  float v16 = fminf(*((float *)&v22 + 1), *((float *)&v21 + 1));
  if (v14 || v8 > v15 || v8 < v16)
  {
    if (!v6) {
      return 0;
    }
    return v7 & 1;
  }
  if (v6) {
    return v7 & 1;
  }
  return 1;
}

void sub_25B5BF284(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, void **a4)
{
  if (a1 != a2)
  {
    BOOL v6 = a1;
    float32x4_t v7 = vsubq_f32(a3[3], *a3);
    *(float *)&unsigned int v8 = vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v7, v7));
    float32x2_t v9 = vrsqrte_f32((float32x2_t)v8);
    float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
    *(float32x2_t *)v7.f32 = vmul_n_f32(*(float32x2_t *)v7.f32, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
    float32x4_t v11 = v7;
    v11.i32[2] = 0;
    int32x4_t v12 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, (float32x4_t)xmmword_25B5F1390), (float32x4_t)xmmword_25B5F10E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
    float32x4_t v17 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
    int8x16_t v13 = (int8x16_t)vuzp2q_s32(v12, (int32x4_t)v7);
    v14.i64[0] = v7.u32[0];
    v14.i64[1] = v17.i64[0];
    v17.i32[0] = 0;
    v17.i32[1] = 1.0;
    v7.i64[0] = 0x3F0000003F000000;
    v7.i64[1] = 0x3F0000003F000000;
    float32x4_t v15 = (float32x4_t)vextq_s8(v13, (int8x16_t)v12, 8uLL);
    v15.i32[1] = 0;
    float32x4_t v16 = vmulq_f32(vaddq_f32(*a3, a3[6]), v7);
    v17.i32[2] = v12.i32[1];
    float v18 = (float32x4_t *)a4[1];
    float32x4_t v33 = v17;
    float32x4_t v34 = v14;
    float32x4_t v31 = v16;
    float32x4_t v32 = v15;
    do
    {
      float32x4_t v19 = vsubq_f32(*v6, v16);
      float32x4_t v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v19.f32[0]), v15, *(float32x2_t *)v19.f32, 1), v17, v19, 2);
      unint64_t v21 = (unint64_t)a4[2];
      if ((unint64_t)v18 >= v21)
      {
        uint64_t v22 = ((char *)v18 - (unsigned char *)*a4) >> 4;
        if ((unint64_t)(v22 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v23 = v21 - (void)*a4;
        uint64_t v24 = v23 >> 3;
        if (v23 >> 3 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25)
        {
          float32x4_t v35 = v20;
          unint64_t v25 = (unint64_t)sub_25B3FFAEC(v25);
          float32x4_t v20 = v35;
        }
        else
        {
          uint64_t v26 = 0;
        }
        unint64_t v27 = (float32x4_t *)(v25 + 16 * v22);
        float32x4_t *v27 = v20;
        float v18 = v27 + 1;
        uint64_t v29 = (float32x4_t *)*a4;
        uint64_t v28 = (float32x4_t *)a4[1];
        if (v28 != *a4)
        {
          do
          {
            float32x4_t v30 = v28[-1];
            --v28;
            v27[-1] = v30;
            --v27;
          }
          while (v28 != v29);
          uint64_t v28 = (float32x4_t *)*a4;
        }
        *a4 = v27;
        a4[1] = v18;
        a4[2] = (void *)(v25 + 16 * v26);
        if (v28) {
          operator delete(v28);
        }
        float32x4_t v17 = v33;
        float32x4_t v14 = v34;
        float32x4_t v16 = v31;
        float32x4_t v15 = v32;
      }
      else
      {
        *v18++ = v20;
      }
      a4[1] = v18;
      ++v6;
    }
    while (v6 != a2);
  }
}

void sub_25B5BF450(float32x2_t *a1, float32x2_t *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t a7, float32x4_t a8, int32x2_t a9)
{
  float v96 = a8.f32[0];
  float32x2_t v10 = a6;
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (a1 == a2)
  {
    int8x16_t v13 = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    int32x4_t v12 = a1;
    unint64_t v92 = a3;
    float v93 = a4;
    float32x2_t v94 = a5;
    int8x16_t v13 = 0;
    float32x4_t v14 = 0;
    unint64_t v15 = 0;
    float32x2_t v16 = (float32x2_t)vdup_lane_s32(a9, 0);
    do
    {
      float32x2_t v17 = vmul_n_f32(vadd_f32(v16, *v12), v96);
      if ((unint64_t)v14 >= v15)
      {
        uint64_t v18 = v14 - v13;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v15 - (void)v13) >> 2 > v19) {
          unint64_t v19 = (uint64_t)(v15 - (void)v13) >> 2;
        }
        if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)sub_25B3FCAD4(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (float32x2_t *)(v20 + 8 * v18);
        *uint64_t v22 = v17;
        uint64_t v23 = v22 + 1;
        while (v14 != v13)
        {
          float32x2_t v24 = v14[-1];
          --v14;
          v22[-1] = v24;
          --v22;
        }
        unint64_t v15 = v20 + 8 * v21;
        if (v13) {
          operator delete(v13);
        }
        int8x16_t v13 = v22;
        float32x4_t v14 = v23;
      }
      else
      {
        *v14++ = v17;
      }
      ++v12;
    }
    while (v12 != a2);
    if (v13 == v14)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      int32x2_t v28 = vdup_n_s32(0x1BFu);
      uint64_t v29 = (unint64_t *)v13;
      do
      {
        a8.i64[0] = *v29;
        a8 = vrndaq_f32(a8);
        int32x2_t v30 = vmin_s32(vmax_s32(vcvt_s32_f32(*(float32x2_t *)a8.f32), 0), v28);
        if ((unint64_t)v26 >= v27)
        {
          uint64_t v31 = v26 - v25;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v27 - (void)v25) >> 2 > v32) {
            unint64_t v32 = (uint64_t)(v27 - (void)v25) >> 2;
          }
          if (v27 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)sub_25B3FCAD4(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          float32x4_t v35 = (int32x2_t *)(v33 + 8 * v31);
          *float32x4_t v35 = v30;
          long long v36 = v35 + 1;
          while (v26 != v25)
          {
            int32x2_t v37 = v26[-1];
            --v26;
            v35[-1] = v37;
            --v35;
          }
          unint64_t v27 = v33 + 8 * v34;
          if (v25) {
            operator delete(v25);
          }
          unint64_t v25 = v35;
          uint64_t v26 = v36;
        }
        else
        {
          *v26++ = v30;
        }
        ++v29;
      }
      while (v29 != (unint64_t *)v14);
    }
    a5 = v94;
    float32x2_t v10 = a6;
    a3 = v92;
    a4 = v93;
  }
  unint64_t v38 = v26 - v25;
  uint64_t v39 = *a3;
  uint64_t v40 = (uint64_t)(a3[1] - *a3) >> 2;
  *(void *)&long long v104 = v38;
  *((void *)&v104 + 1) = v40;
  uint64_t v41 = *a4;
  uint64_t v42 = *a5;
  uint64_t v43 = (uint64_t)(a5[1] - *a5) >> 4;
  *(void *)&long long v105 = (uint64_t)(a4[1] - *a4) >> 3;
  *((void *)&v105 + 1) = v43;
  uint64_t v44 = 8;
  float32x2_t v45 = (unsigned int *)&v104;
  do
  {
    if (*(void *)((char *)&v104 + v44) < v38)
    {
      unint64_t v38 = *(void *)((char *)&v104 + v44);
      float32x2_t v45 = (unsigned int *)((char *)&v104 + v44);
    }
    v44 += 8;
  }
  while (v44 != 32);
  uint64_t v46 = *v45;
  long long v47 = operator new(0x62000uLL);
  bzero(v47, 0x62000uLL);
  if ((int)v46 >= 1)
  {
    uint64_t v49 = 0;
    char v50 = 0;
    uint64_t v51 = *v10;
    do
    {
      unsigned int v52 = *(void *)&v25[v49] + 448 * (447 - HIDWORD(*(void *)&v25[v49]));
      if (v52 >> 12 <= 0x30)
      {
        _H6 = *((short float *)v47 + (int)v52) + COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0));
        *((short float *)v47 + (int)v52) = _H6;
        long long v104 = 0uLL;
        long long v105 = 0uLL;
        uint16x4_t v54 = *(uint16x4_t *)(v41 + 8 * v49);
        uint64_t v106 = 0;
        int8x16_t v55 = (int8x16_t)vmovl_u16(v54);
        uint32x4_t v56 = vaddw_u16((uint32x4_t)vextq_s8(v55, v55, 8uLL), v54);
        __int16 v103 = v56.i16[2];
        __int16 v102 = v56.i16[0];
        if (v56.i16[0] + v56.i16[2])
        {
          float v57 = 1.0 / (float)(unsigned __int16)(v102 + v103);
          if (v54.i16[3])
          {
            for (uint64_t i = 0; i != 33; ++i)
              *((float *)&v104 + byte_25B5F1F81[i]) = (float)((float)(v57 * (float)v54.u16[3]) / 30.0)
                                                                     + *((float *)&v104
                                                                       + byte_25B5F1F81[i]);
          }
          for (uint64_t j = 0; j != 3; ++j)
          {
            uint16x4_t v101 = v54;
            if (*(_WORD *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3))))
            {
              v48.i32[0] = *(_DWORD *)(v39 + 4 * v49);
              uint8x8_t v48 = (uint8x8_t)vmovl_u8(v48).u64[0];
              uint8x8_t v100 = v48;
              __int16 v60 = *(_WORD *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF9 | (2 * (j & 3)));
              if (v60 <= 0x20u)
              {
                uint64_t v61 = byte_25B5F1F81[v60];
                *(_DWORD *)&buf[4 * j] = v61;
                *((_DWORD *)&v104 + v61) = 0;
              }
            }
          }
          uint64_t v62 = 0;
          v48.i32[0] = *(_DWORD *)(v39 + 4 * v49);
          uint8x8_t v48 = (uint8x8_t)vmovl_u8(v48).u64[0];
          do
          {
            uint16x4_t v98 = v54;
            unsigned int v63 = *(unsigned __int16 *)((unint64_t)&v98 & 0xFFFFFFFFFFFFFFF9 | (2 * (v62 & 3)));
            uint8x8_t v99 = v48;
            if (v63
              && *(_WORD *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF9 | (2 * (v62 & 3))) <= 0x20u)
            {
              *((float *)&v104 + *(int *)&buf[4 * v62]) = *((float *)&v104 + *(int *)&buf[4 * v62])
                                                        + (float)((float)v63 * v57);
            }
            ++v62;
          }
          while (v62 != 3);
        }
        uint64_t v64 = 0;
        __asm
        {
          FCVT            D7, H6
          FCVT            S6, H6
        }
        BOOL v71 = (__int16 *)(a7 + 2 * (int)v52);
        double v72 = (_D7 + -1.0) / _D7;
        do
        {
          _H16 = *v71;
          __asm { FCVT            D16, H16 }
          _D16 = v72 * _D16;
          __asm
          {
            FCVT            H16, D16
            FCVT            S16, H16
          }
          *(float *)&_D16 = (float)(*(float *)((char *)&v104 + v64) / _S6) + *(float *)&_D16;
          __asm { FCVT            H16, S16 }
          *BOOL v71 = LOWORD(_D16);
          v64 += 4;
          v71 += 200704;
        }
        while (v64 != 40);
        uint64_t v76 = 0;
        long long v77 = *(_OWORD *)(v42 + 16 * v49);
        float32x4_t v78 = (__int16 *)(a7 + 4014080 + 2 * (int)v52);
        do
        {
          long long v97 = v77;
          float v79 = *(float *)((unint64_t)&v97 & 0xFFFFFFFFFFFFFFF3 | (4 * (v76 & 3)));
          _H17 = *v78;
          __asm { FCVT            S17, H17 }
          _S17 = (float)((float)(_S6 + -1.0) / _S6) * _S17;
          __asm { FCVT            H17, S17 }
          if (v79 < 0.0 || v79 > 1.0)
          {
            char v50 = 1;
          }
          else
          {
            __asm { FCVT            S17, H17 }
            _S17 = (float)(v79 / _S6) + _S17;
            __asm { FCVT            H17, S17 }
          }
          *float32x4_t v78 = _H17;
          ++v76;
          v78 += 200704;
        }
        while (v76 != 3);
        uint64_t v87 = (int)v52 + 2609152;
        __asm { FCMP            H7, #0 }
        if (_ZF) {
          goto LABEL_78;
        }
        __asm { FCVT            S7, H7 }
        if (*(float *)(v51 + 4 * v49) < _S7) {
LABEL_78:
        }
          _S7 = *(float *)(v51 + 4 * v49);
        __asm { FCVT            H6, S7 }
        *(_WORD *)(a7 + 2 * v87) = _H6;
      }
      ++v49;
    }
    while (v49 != v46);
    if (v50)
    {
      if (qword_26A5020D0 != -1) {
        dispatch_once(&qword_26A5020D0, &unk_2708F1258);
      }
      int v91 = (id)qword_26A5020C8;
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_25B3F3000, v91, OS_LOG_TYPE_DEBUG, "Bad color value(s) encountered.", buf, 2u);
      }
    }
  }
  operator delete(v47);
  if (v25) {
    operator delete(v25);
  }
  if (v13) {
    operator delete(v13);
  }
}

void sub_25B5BFA64(_Unwind_Exception *exception_object)
{
}

void sub_25B5BFAA4(float32x4_t **a1, int32x2_t *a2, int32x2_t *a3, float32x4_t a4, float32x4_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    unsigned int v8 = 0;
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    float32x4_t v28 = vmulq_f32(vaddq_f32(a4, a5), v9);
    float32x2_t v10 = vsub_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a4.f32);
    int32x2_t v11 = (int32x2_t)vmul_f32(v10, v10);
    v11.i32[0] = vadd_f32((float32x2_t)v11, (float32x2_t)vdup_lane_s32(v11, 1)).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
    float32x2_t v14 = vmul_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    do
    {
      *(float32x2_t *)v15.f32 = vmul_n_f32(v14, COERCE_FLOAT(*v6));
      *(int32x2_t *)&v15.u32[2] = vdup_lane_s32(*v6, 1);
      float32x4_t v16 = vaddq_f32(v28, v15);
      unint64_t v17 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v17)
      {
        float32x4_t v27 = v16;
        unint64_t v19 = *a1;
        uint64_t v20 = v8 - *a1;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v22 = v17 - (void)v19;
        if (v22 >> 3 > v21) {
          unint64_t v21 = v22 >> 3;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)sub_25B3FFAEC(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        unint64_t v25 = (float32x4_t *)(v23 + 16 * v20);
        *unint64_t v25 = v27;
        uint64_t v18 = v25 + 1;
        if (v8 != v19)
        {
          do
          {
            float32x4_t v26 = v8[-1];
            --v8;
            v25[-1] = v26;
            --v25;
          }
          while (v8 != v19);
          unsigned int v8 = *a1;
        }
        *a1 = v25;
        a1[1] = v18;
        a1[2] = (float32x4_t *)(v23 + 16 * v24);
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        float32x4_t *v8 = v16;
        uint64_t v18 = v8 + 1;
      }
      a1[1] = v18;
      ++v6;
      unsigned int v8 = v18;
    }
    while (v6 != a3);
  }
}

void sub_25B5BFC28(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

float sub_25B5BFC48(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3 = vsub_f32(a1, a2);
  int32x2_t v4 = (int32x2_t)vmul_f32(v3, v3);
  v4.i32[0] = vadd_f32((float32x2_t)v4, (float32x2_t)vdup_lane_s32(v4, 1)).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  float32x2_t v7 = vmul_n_f32(v3, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  float32x2_t v8 = vsub_f32(a3, a2);
  int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)v9, (float32x2_t)vdup_lane_s32(v9, 1)).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  float32x2_t v18 = vmul_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
  float32x2_t v19 = v7;
  float v12 = vaddv_f32(vmul_f32(v7, v18));
  float v13 = 1.0;
  if (v12 <= 1.0) {
    float v13 = v12;
  }
  if (v12 >= -1.0) {
    float v14 = v13;
  }
  else {
    float v14 = -1.0;
  }
  float v15 = acosf(v14);
  if (vmlas_n_f32((float)-v19.f32[1] * v18.f32[0], v18.f32[1], v19.f32[0]) < 0.0) {
    float v15 = -v15;
  }
  __float2 v16 = __sincosf_stret(v15);
  return v16.__sinval / v16.__cosval;
}

void sub_25B5BFE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25B5BFFC0(_Unwind_Exception *a1)
{
  float32x2_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_25B5C0080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5C0118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25B5C0130(float *a1, uint64_t *a2, uint64_t *a3, __n128 a4)
{
  v4.i32[0] = a4.n128_u32[0];
  float32x2_t v5 = a2;
  uint64_t v6 = (uint64_t)a1;
  uint64_t v1114 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  int32x2_t v9 = &off_25B5F1000;
  if (*a2 == v8)
  {
    uint64_t v63 = *a2;
    goto LABEL_94;
  }
  unsigned __int32 v1052 = a4.n128_u32[0];
  float v10 = a1[2];
  float v11 = a1[3];
  float v12 = a1[5];
  unsigned __int32 v13 = 1076677837;
  uint64_t v1057 = a2[1];
  float v1059 = v12;
  do
  {
    uint64_t v15 = *(void *)(v7 + 40);
    uint64_t v14 = *(void *)(v7 + 48);
    if (v14 == v15)
    {
      uint64_t v22 = 0;
      BOOL v57 = *(float *)(v7 + 88) >= v11 || v10 <= 0.0;
      if (v57 && v12 <= 0.0) {
        goto LABEL_79;
      }
      goto LABEL_77;
    }
    float32x4_t v16 = vsubq_f32(*(float32x4_t *)(*(void *)(v15 + 40) + 16), *(float32x4_t *)(*(void *)(v14 - 80) + 64));
    a4 = (__n128)vmulq_f32(v16, v16);
    a4.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)a4.n128_u64[0]));
    BOOL v17 = *(float *)(v7 + 88) < v11 && a4.n128_f32[0] < v10;
    if (!v17 && a4.n128_f32[0] >= v12) {
      goto LABEL_79;
    }
    uint64_t v19 = *v5;
    uint64_t v20 = v5[1];
    if (v19 == v20)
    {
      uint64_t v22 = 0;
      float32x2_t v5 = a2;
      goto LABEL_77;
    }
    unsigned __int32 v21 = v13;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    float32x2_t v25 = *(float32x2_t *)(*(void *)(v15 + 40) + 16);
    float32x2_t v26 = *(float32x2_t *)(*(void *)(v14 - 80) + 64);
    do
    {
      if (*(_DWORD *)(v19 + 92) != *(_DWORD *)(v7 + 92))
      {
        uint64_t v27 = *(void *)(v19 + 40);
        uint64_t v28 = *(void *)(v19 + 48);
        if (v27 != v28)
        {
          uint64_t v29 = v23;
          do
          {
            int32x2_t v30 = *(int8x16_t **)(v27 + 40);
            int8x16_t v1087 = v30[4];
            int8x16_t v1069 = v30[1];
            *(float *)&uint64_t v31 = sub_25B40DB9C(*(float32x2_t *)v1069.i8, v25, v26, 0.00001);
            v1076.i64[0] = v31;
            a4.n128_f32[0] = sub_25B40DB9C(*(float32x2_t *)v1087.i8, v25, v26, 0.00001);
            if (a4.n128_f32[0] >= v1076.f32[0]) {
              float v32 = v1076.f32[0];
            }
            else {
              float v32 = a4.n128_f32[0];
            }
            if (v32 <= a1[4])
            {
              a4 = (__n128)vdupq_laneq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)a4, v1076), 0), v1069, v1087), 2);
              a4.n128_u32[1] = *(_DWORD *)(v27 + 64);
              a4.n128_f32[2] = v32;
              if ((unint64_t)v29 >= v24)
              {
                __n128 v1088 = a4;
                uint64_t v33 = v29 - v22;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v24 - (void)v22) >> 3 > v34) {
                  unint64_t v34 = (uint64_t)(v24 - (void)v22) >> 3;
                }
                if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v34;
                }
                if (v35) {
                  unint64_t v35 = (unint64_t)sub_25B3FFAEC(v35);
                }
                else {
                  uint64_t v36 = 0;
                }
                int32x2_t v37 = (__n128 *)(v35 + 16 * v33);
                a4 = v1088;
                *int32x2_t v37 = v1088;
                unint64_t v23 = v37 + 1;
                while (v29 != v22)
                {
                  __n128 v38 = v29[-1];
                  --v29;
                  a4 = v38;
                  v37[-1] = v38;
                  --v37;
                }
                unint64_t v24 = v35 + 16 * v36;
                if (v22) {
                  operator delete(v22);
                }
                uint64_t v22 = v37;
                goto LABEL_39;
              }
              *v29++ = a4;
            }
            unint64_t v23 = v29;
LABEL_39:
            v27 += 120;
            uint64_t v29 = v23;
          }
          while (v27 != v28);
        }
      }
      v19 += 96;
    }
    while (v19 != v20);
    unsigned __int32 v13 = v21;
    if (v23 == v22)
    {
      float32x2_t v5 = a2;
      uint64_t v6 = (uint64_t)a1;
      uint64_t v8 = v1057;
      float v12 = v1059;
LABEL_77:
      a4.n128_u32[0] = v13;
      float v58 = sub_25B5C58D0(*v5, v5[1], a4);
      sub_25B5211EC((void *)v7, v58);
      if (!v22) {
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v22);
      goto LABEL_79;
    }
    uint64_t v1089 = (char *)v23 - (char *)v22;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = v22;
    float32x2_t v5 = a2;
    float v12 = v1059;
    do
    {
      __n128 v44 = *v43;
      if (COERCE_FLOAT(HIDWORD(v43->n128_u64[0])) <= 0.3 || v44.n128_f32[2] >= 0.1)
      {
        float32x2_t v45 = v40;
      }
      else if ((unint64_t)v42 >= v41)
      {
        uint64_t v46 = v42 - v39;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v41 - (void)v39) >> 3 > v47) {
          unint64_t v47 = (uint64_t)(v41 - (void)v39) >> 3;
        }
        if (v41 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48)
        {
          unint64_t v48 = (unint64_t)sub_25B3FFAEC(v48);
          __n128 v44 = *v43;
        }
        else
        {
          uint64_t v49 = 0;
        }
        char v50 = (__n128 *)(v48 + 16 * v46);
        *char v50 = v44;
        float32x2_t v45 = v50 + 1;
        while (v40 != v39)
        {
          __n128 v51 = v40[-1];
          --v40;
          __n128 v44 = v51;
          v50[-1] = v51;
          --v50;
        }
        unint64_t v41 = v48 + 16 * v49;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v39 = v50;
        uint64_t v42 = v45;
      }
      else
      {
        *v42++ = v44;
        float32x2_t v45 = v42;
      }
      ++v43;
      uint64_t v40 = v45;
    }
    while (v43 != v23);
    uint64_t v52 = (char *)v42 - (char *)v39;
    if (v42 != v39)
    {
      unint64_t v53 = v52 >> 4;
      if (v52 <= 2048)
      {
        sub_25B5C8E68(v39, v42, v52 >> 4, 0, 0, v44);
        uint64_t v6 = (uint64_t)a1;
      }
      else
      {
        uint16x4_t v54 = (__n128 *)sub_25B58B0AC(v52 >> 4);
        sub_25B5C8E68(v39, v42, v53, v54, v55, v56);
        uint64_t v6 = (uint64_t)a1;
        if (v54) {
          operator delete(v54);
        }
      }
      sub_25B5211EC((void *)v7, v39->n128_f32[0]);
      goto LABEL_90;
    }
    if (v1089 <= 2048)
    {
      sub_25B5C9090(v22, v23, v1089 >> 4, 0, 0, v44);
    }
    else
    {
      BOOL v59 = (__n128 *)sub_25B58B0AC(v1089 >> 4);
      sub_25B5C9090(v22, v23, v1089 >> 4, v59, v60, v61);
      if (v59) {
        operator delete(v59);
      }
    }
    __n128 v62 = *v22;
    uint64_t v6 = (uint64_t)a1;
    if (COERCE_FLOAT(HIDWORD(v22->n128_u64[0])) < a1[15])
    {
      v62.n128_u32[0] = v13;
      v62.n128_f32[0] = sub_25B5C58D0(*a2, a2[1], v62);
    }
    sub_25B5211EC((void *)v7, v62.n128_f32[0]);
    if (v39) {
LABEL_90:
    }
      operator delete(v39);
    uint64_t v8 = v1057;
    if (v22) {
      goto LABEL_78;
    }
LABEL_79:
    v7 += 96;
  }
  while (v7 != v8);
  uint64_t v63 = *v5;
  uint64_t v7 = v5[1];
  v4.i32[0] = v1052;
  int32x2_t v9 = &off_25B5F1000;
LABEL_94:
  unsigned __int32 v64 = (unsigned __int32)v9[901];
  a4.n128_u32[0] = v64;
  v65.n128_f32[0] = sub_25B5C58D0(v63, v7, a4);
  unsigned __int32 v69 = v65.n128_u32[0];
  uint64_t v70 = *v5;
  uint64_t v1077 = v5[1];
  if (*v5 == v1077) {
    goto LABEL_200;
  }
  while (2)
  {
    while (2)
    {
      uint64_t v71 = *(void *)(v70 + 40);
      if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v70 + 48) - v71) >> 3) >= 2)
      {
        uint64_t v72 = 120;
        unint64_t v73 = 1;
        while (1)
        {
          sub_25B5C5E38((uint64_t)v1106, a1, v71 + v72 - 120, v65.n128_f64[0], *(double *)&v66, v67, v68);
          sub_25B5C5E38((uint64_t)&v1105, a1, v71 + v72, v74, v75, v76, v77);
          if (!(LOBYTE(v1106[1]) | BYTE8(v1105))) {
            break;
          }
          ++v73;
          uint64_t v71 = *(void *)(v70 + 40);
          v72 += 120;
          if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v70 + 48) - v71) >> 3) <= v73) {
            goto LABEL_99;
          }
        }
        uint64_t v78 = v71 + 120 * (v73 - 1);
        float32x2_t v81 = *(float32x4_t **)(v78 + 40);
        uint64_t v79 = v78 + 40;
        float32x4_t v80 = v81;
        float v82 = v81[1].f32[2];
        float v83 = v81[4].f32[2];
        uint64_t v84 = v71 + 120 * v73;
        uint64_t v87 = *(float32x4_t **)(v84 + 40);
        uint64_t v85 = v84 + 40;
        float v86 = v87;
        float v88 = v87[1].f32[2];
        float v89 = v87[4].f32[2];
        float32x4_t v90 = vsubq_f32(v80[1], v80[4]);
        double v91 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v90, v90)));
        if (v91 >= 0.1)
        {
          float32x4_t v94 = vsubq_f32(v86[1], v86[4]);
          double v93 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v94, v94)));
        }
        else
        {
          float32x4_t v92 = vsubq_f32(v86[1], v86[4]);
          double v93 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v92, v92)));
          if (v93 > 0.1)
          {
LABEL_114:
            v80[1].f32[2] = v88;
            *(float *)(*(void *)v79 + 72) = v88;
            *(void *)(*(void *)v79 + 64) = *(void *)(*(void *)v85 + 64);
            uint64_t v95 = v71 + 120 * v73;
            uint64_t v97 = *(void *)(v95 + 96);
            uint64_t v96 = *(void *)(v95 + 104);
            if (v97 != v96)
            {
              uint64_t v98 = v71 + 120 * (v73 - 1);
              unint64_t v101 = *(void *)(v98 + 104);
              uint8x8_t v100 = (unint64_t *)(v98 + 104);
              unint64_t v99 = v101;
              __int16 v102 = v100 - 1;
              __int16 v103 = v100 + 1;
              uint64_t v1090 = *(void *)(v95 + 104);
              do
              {
                uint64_t v1103 = &unk_2708F2160;
                int v104 = *(_DWORD *)(v97 + 11);
                v1104[0] = *(_DWORD *)(v97 + 8);
                *(_DWORD *)((char *)v1104 + 3) = v104;
                if (v99 >= *v103)
                {
                  uint64_t v106 = (uint64_t)(v99 - *v102) >> 4;
                  if ((unint64_t)(v106 + 1) >> 60) {
                    sub_25B3FBC4C();
                  }
                  uint64_t v107 = *v103 - *v102;
                  uint64_t v108 = v107 >> 3;
                  if (v107 >> 3 <= (unint64_t)(v106 + 1)) {
                    uint64_t v108 = v106 + 1;
                  }
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v109 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v109 = v108;
                  }
                  *(void *)&__p[32] = v100 + 1;
                  if (v109) {
                    unint64_t v109 = (unint64_t)sub_25B3FFAEC(v109);
                  }
                  else {
                    uint64_t v110 = 0;
                  }
                  unint64_t v111 = v109 + 16 * v106;
                  *(void *)unint64_t v111 = &unk_2708F2160;
                  int v112 = v1104[0];
                  *(_DWORD *)(v111 + 11) = *(_DWORD *)((char *)v1104 + 3);
                  *(_DWORD *)(v111 + 8) = v112;
                  unint64_t v113 = *v100;
                  unint64_t v114 = *v102;
                  if (*v100 == *v102)
                  {
                    unint64_t v118 = *v100;
                    unint64_t v116 = v109 + 16 * v106;
                  }
                  else
                  {
                    unint64_t v115 = v111 - 16;
                    unint64_t v116 = v109 + 16 * v106;
                    do
                    {
                      *(void *)(v116 - 16) = &unk_2708F2160;
                      v116 -= 16;
                      int v117 = *(_DWORD *)(v113 - 8);
                      *(_DWORD *)(v116 + 11) = *(_DWORD *)(v113 - 5);
                      *(_DWORD *)(v116 + 8) = v117;
                      v115 -= 16;
                      v113 -= 16;
                    }
                    while (v113 != v114);
                    unint64_t v118 = *v102;
                    unint64_t v113 = *v100;
                  }
                  unint64_t v99 = v111 + 16;
                  *__int16 v102 = v116;
                  *(void *)&__p[8] = v118;
                  *uint8x8_t v100 = v111 + 16;
                  *(void *)&__p[16] = v113;
                  unint64_t v119 = *v103;
                  *__int16 v103 = v109 + 16 * v110;
                  *(void *)&__p[24] = v119;
                  *(void *)__n128 __p = v118;
                  sub_25B4391F0((uint64_t)__p);
                  uint64_t v96 = v1090;
                }
                else
                {
                  *(void *)unint64_t v99 = &unk_2708F2160;
                  int v105 = v1104[0];
                  *(_DWORD *)(v99 + 11) = *(_DWORD *)((char *)v1104 + 3);
                  *(_DWORD *)(v99 + 8) = v105;
                  v99 += 16;
                }
                *uint8x8_t v100 = v99;
                v97 += 16;
              }
              while (v97 != v96);
            }
            uint64_t v120 = 0;
            memset(__p, 0, 24);
            uint64_t v121 = *(void *)(v70 + 40);
            uint64_t v1103 = __p;
            do
            {
              sub_25B521880(&v1103, v121 + v120);
              v120 += 120;
            }
            while (v72 != v120);
            uint64_t v122 = *(void *)(v70 + 48);
            uint64_t v123 = *(void *)(v70 + 40) + 120 * v73 + 120;
            uint64_t v1103 = __p;
            while (v123 != v122)
            {
              sub_25B521880(&v1103, v123);
              v123 += 120;
            }
            sub_25B521750(v70, (uint64_t *)__p);
            uint64_t v1103 = __p;
            sub_25B55E2EC((void ***)&v1103);
            continue;
          }
        }
        if (v91 <= 0.1 || v93 >= 0.1)
        {
          if (v82 < v83) {
            float v82 = v83;
          }
          if (v88 < v89) {
            float v88 = v89;
          }
          if (v82 >= v88) {
            float v88 = v82;
          }
        }
        else
        {
          float v88 = v82;
        }
        goto LABEL_114;
      }
      break;
    }
LABEL_99:
    v70 += 96;
    if (v70 != v1077) {
      continue;
    }
    break;
  }
  uint64_t v125 = *a2;
  uint64_t v124 = a2[1];
  uint64_t v6 = (uint64_t)a1;
  if (*a2 != v124)
  {
    uint64_t v1091 = a2[1];
    do
    {
      *(void *)&long long v1105 = &unk_2708F2160;
      DWORD2(v1105) = 0;
      *(_DWORD *)((char *)&v1105 + 11) = 0;
      memset(__p, 0, 24);
      uint64_t v127 = *(void *)(v125 + 40);
      uint64_t v126 = *(void *)(v125 + 48);
      if (v127 != v126)
      {
        int v128 = 0;
        int v129 = 0;
        int32x4_t v130 = 0uLL;
        uint64_t v131 = *(void *)(v125 + 40);
        do
        {
          for (uint64_t i = *(void *)(v131 + 96); i != *(void *)(v131 + 104); i += 16)
          {
            ++v129;
            v128 += *(unsigned __int8 *)(i + 12);
            v66.i32[0] = *(_DWORD *)(i + 8);
            uint16x4_t v66 = (uint16x4_t)vmovl_u8((uint8x8_t)v66).u64[0];
            int32x4_t v130 = (int32x4_t)vaddw_u16((uint32x4_t)v130, v66);
          }
          v131 += 120;
        }
        while (v131 != v126);
        if (v129)
        {
          float32x4_t v133 = vcvtq_f32_s32(v130);
          *(float *)v130.i32 = (float)v129;
          float32x4_t v134 = vsubq_f32(*(float32x4_t *)(*(void *)(v127 + 40) + 16), *(float32x4_t *)(*(void *)(v126 - 80) + 64));
          float v135 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v134, v134)));
          *(int16x4_t *)v133.f32 = vmovn_s32(vcgtq_f32(vdivq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.i8, 0)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)(v6 + 24), (int32x4_t)vextq_s8(*(int8x16_t *)(v6 + 24), *(int8x16_t *)(v6 + 24), 0xCuLL)), *(int32x4_t *)(v6 + 24))));
          BYTE10(v1105) = v133.i8[4] & 1;
          BYTE8(v1105) = v133.i8[0] & 1;
          BYTE9(v1105) = v133.i8[2] & 1;
          BOOL v136 = (v133.i8[6] & 1) != 0 && v135 <= *(float *)(v6 + 44);
          BYTE11(v1105) = v136;
          BOOL v137 = (float)((float)v128 / *(float *)v130.i32) > *(float *)(v6 + 40) && v135 <= *(float *)(v6 + 44);
          BYTE12(v1105) = v137;
        }
      }
      v1106[0] = __p;
      sub_25B43925C((void ***)v1106);
      if (!BYTE8(v1105))
      {
        uint64_t v139 = *(void *)(v125 + 40);
        uint64_t v138 = *(void *)(v125 + 48);
        if (0xEEEEEEEEEEEEEEEFLL * ((v138 - v139) >> 3) >= 3)
        {
          float v140 = -3.4028e38;
          if (v139 != v138)
          {
            uint64_t v141 = *(void *)(v125 + 40);
            do
            {
              uint64_t v142 = *(void *)(v141 + 40);
              float v143 = *(float *)(v142 + 24);
              if (v143 < *(float *)(v142 + 72)) {
                float v143 = *(float *)(v142 + 72);
              }
              if (v140 < v143) {
                float v140 = v143;
              }
              v141 += 120;
            }
            while (v141 != v138);
          }
          *(void *)(*(void *)(v139 + 40) + 64) = *(void *)(*(void *)(v138 - 80) + 64);
          uint64_t v144 = *(void *)(v125 + 40);
          *(float *)(*(void *)(v144 + 40) + 24) = v140;
          *(float *)(*(void *)(v144 + 40) + 72) = v140;
          memset(v1106, 0, 24);
          uint64_t v145 = *(void *)(v125 + 40);
          uint64_t v146 = *(void *)(v125 + 48);
          if (v145 == v146)
          {
            float v147 = 0;
          }
          else
          {
            float v147 = 0;
            do
            {
              uint64_t v149 = *(void *)(v145 + 96);
              uint64_t v148 = *(void *)(v145 + 104);
              while (v149 != v148)
              {
                if (v147 >= v1106[2])
                {
                  uint64_t v151 = (v147 - (char *)v1106[0]) >> 4;
                  if ((unint64_t)(v151 + 1) >> 60) {
                    sub_25B3FBC4C();
                  }
                  unint64_t v152 = ((char *)v1106[2] - (char *)v1106[0]) >> 3;
                  if (v152 <= v151 + 1) {
                    unint64_t v152 = v151 + 1;
                  }
                  if ((void *)((char *)v1106[2] - (char *)v1106[0]) >= (void *)0x7FFFFFFFFFFFFFF0) {
                    unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v153 = v152;
                  }
                  *(void *)&__p[32] = &v1106[2];
                  if (v153) {
                    unint64_t v153 = (unint64_t)sub_25B3FFAEC(v153);
                  }
                  else {
                    uint64_t v154 = 0;
                  }
                  unint64_t v155 = v153 + 16 * v151;
                  *(void *)unint64_t v155 = &unk_2708F2160;
                  int v156 = *(_DWORD *)(v149 + 8);
                  *(_DWORD *)(v155 + 11) = *(_DWORD *)(v149 + 11);
                  *(_DWORD *)(v155 + 8) = v156;
                  uint64_t v157 = (char *)v1106[0];
                  float32x2_t v158 = (char *)v1106[1];
                  if (v1106[1] == v1106[0])
                  {
                    int64x2_t v162 = vdupq_n_s64((unint64_t)v1106[1]);
                    int64_t v160 = (_DWORD *)(v153 + 16 * v151);
                  }
                  else
                  {
                    unint64_t v159 = v155 - 16;
                    int64_t v160 = (_DWORD *)(v153 + 16 * v151);
                    do
                    {
                      *((void *)v160 - 2) = &unk_2708F2160;
                      v160 -= 4;
                      int v161 = *((_DWORD *)v158 - 2);
                      *(_DWORD *)((char *)v160 + 11) = *(_DWORD *)(v158 - 5);
                      v160[2] = v161;
                      v159 -= 16;
                      v158 -= 16;
                    }
                    while (v158 != v157);
                    int64x2_t v162 = *(int64x2_t *)v1106;
                  }
                  float v147 = (char *)(v155 + 16);
                  v1106[0] = v160;
                  v1106[1] = (void *)(v155 + 16);
                  *(int64x2_t *)&__p[8] = v162;
                  uint64_t v163 = v1106[2];
                  v1106[2] = (void *)(v153 + 16 * v154);
                  *(void *)&__p[24] = v163;
                  *(void *)__n128 __p = v162.i64[0];
                  sub_25B4391F0((uint64_t)__p);
                }
                else
                {
                  *(void *)float v147 = &unk_2708F2160;
                  int v150 = *(_DWORD *)(v149 + 8);
                  *(_DWORD *)(v147 + 11) = *(_DWORD *)(v149 + 11);
                  *((_DWORD *)v147 + 2) = v150;
                  v147 += 16;
                }
                v1106[1] = v147;
                v149 += 16;
              }
              v145 += 120;
            }
            while (v145 != v146);
            uint64_t v145 = *(void *)(v125 + 40);
          }
          uint64_t v165 = *(void (****)(void, uint64_t))(v145 + 96);
          int64_t v164 = *(void (****)(void, uint64_t))(v145 + 104);
          uint64_t v166 = v145;
          if (v164 != v165)
          {
            float v167 = v164 - 2;
            BOOL v168 = v164 - 2;
            float v169 = v164 - 2;
            do
            {
              float v170 = *v169;
              v169 -= 2;
              (*v170)(v168, v166);
              v167 -= 2;
              BOOL v204 = v168 == v165;
              BOOL v168 = v169;
            }
            while (!v204);
            float v147 = (char *)v1106[1];
            uint64_t v166 = *(void *)(v125 + 40);
          }
          *(void *)(v145 + 104) = v165;
          uint64_t v171 = (char *)v1106[0];
          *(void *)__n128 __p = v166 + 96;
          if (v1106[0] != v147)
          {
            do
            {
              sub_25B43931C((unint64_t **)__p, (uint64_t)v171);
              v171 += 16;
            }
            while (v171 != v147);
            uint64_t v166 = *(void *)(v125 + 40);
          }
          memset(__p, 0, 24);
          *(void *)&__p[8] = sub_25B5219EC(__p, v166);
          sub_25B521750(v125, (uint64_t *)__p);
          uint64_t v1103 = __p;
          sub_25B55E2EC((void ***)&v1103);
          *(void *)__n128 __p = v1106;
          sub_25B43925C((void ***)__p);
          uint64_t v6 = (uint64_t)a1;
          uint64_t v124 = v1091;
        }
      }
      v125 += 96;
    }
    while (v125 != v124);
  }
LABEL_200:
  memset(__p, 0, 24);
  unint64_t v172 = a2;
  do
    v65.n128_u32[0] = v69;
  while ((sub_25B5C8738(v6, a2, (uint64_t)__p, 0, v65, *(double *)&v66, v67, v68) & 1) != 0);
  v65.n128_u32[0] = v69;
  sub_25B5C8738(v6, a2, (uint64_t)__p, 1, v65, *(double *)&v66, v67, v68);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  v173.n128_u32[0] = v64;
  v174.n128_f32[0] = sub_25B5C58D0(*a2, a2[1], v173);
  uint64_t v178 = *a2;
  uint64_t v1092 = a2[1];
  if (*a2 != v1092)
  {
    float v179 = v174.n128_f32[0];
    v174.n128_u32[0] = -1110651699;
    float v180 = a1;
    do
    {
      uint64_t v182 = *(void *)(v178 + 40);
      uint64_t v181 = *(void *)(v178 + 48);
      if (v181 != v182)
      {
        unint64_t v183 = 0;
        do
        {
          uint64_t v184 = v182 + 120 * v183;
          uint64_t v186 = *(void *)(v184 + 40);
          uint64_t v185 = v184 + 40;
          v174.n128_u32[0] = *(_DWORD *)(v186 + 24);
          LODWORD(v175) = *(_DWORD *)(v186 + 72);
          if (*(float *)&v175 < v174.n128_f32[0]) {
            v174.n128_f32[0] = *(float *)&v175;
          }
          if (v174.n128_f32[0] <= (float)(v179 + -0.1))
          {
            v174.n128_u32[0] = *(_DWORD *)(v182 + 120 * v183 + 64);
            *(float *)&double v175 = v180[14];
            if (v174.n128_f32[0] <= *(float *)&v175)
            {
              sub_25B5C5E38((uint64_t)&v1105, v180, v182 + 120 * v183, v174.n128_f64[0], v175, v176, v177);
              float v180 = a1;
              if (BYTE10(v1105))
              {
                sub_25B5C5B40((uint64_t)__p, a1, v178, v183, *a2, a2[1]);
                memset(v1106, 0, 24);
                unint64_t v188 = *(__n128 **)__p;
                int32x2_t v189 = *(__n128 **)&__p[8];
                if (*(void *)__p != *(void *)&__p[8])
                {
                  int32x2_t v190 = 0;
                  do
                  {
                    if (v190 >= v1106[2])
                    {
                      BOOL v192 = (char *)v1106[0];
                      uint64_t v193 = (v190 - (char *)v1106[0]) >> 4;
                      unint64_t v194 = v193 + 1;
                      if ((unint64_t)(v193 + 1) >> 60) {
                        sub_25B3FBC4C();
                      }
                      int64_t v195 = (char *)v1106[2] - (char *)v1106[0];
                      if (((char *)v1106[2] - (char *)v1106[0]) >> 3 > v194) {
                        unint64_t v194 = v195 >> 3;
                      }
                      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v196 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v196 = v194;
                      }
                      if (v196) {
                        unint64_t v196 = (unint64_t)sub_25B3FFAEC(v196);
                      }
                      else {
                        uint64_t v197 = 0;
                      }
                      int32x2_t v198 = (__n128 *)(v196 + 16 * v193);
                      __n128 v187 = *v188;
                      *int32x2_t v198 = *v188;
                      float v191 = v198 + 1;
                      if (v190 != v192)
                      {
                        do
                        {
                          __n128 v199 = *((__n128 *)v190 - 1);
                          v190 -= 16;
                          __n128 v187 = v199;
                          v198[-1] = v199;
                          --v198;
                        }
                        while (v190 != v192);
                        int32x2_t v190 = (char *)v1106[0];
                      }
                      v1106[0] = v198;
                      v1106[1] = v191;
                      v1106[2] = (void *)(v196 + 16 * v197);
                      if (v190) {
                        operator delete(v190);
                      }
                    }
                    else
                    {
                      __n128 v187 = *v188;
                      *(__n128 *)int32x2_t v190 = *v188;
                      float v191 = (__n128 *)(v190 + 16);
                    }
                    v1106[1] = v191;
                    v188 += 3;
                    int32x2_t v190 = (char *)v191;
                  }
                  while (v188 != v189);
                }
                v187.n128_f32[0] = v179;
                v174.n128_f32[0] = sub_25B5C77AC((__n128 **)v1106, v187);
                *(_DWORD *)(*(void *)v185 + 24) = v174.n128_u32[0];
                *(_DWORD *)(*(void *)v185 + 72) = v174.n128_u32[0];
                float v180 = a1;
                if (v1106[0]) {
                  operator delete(v1106[0]);
                }
                if (*(void *)__p) {
                  operator delete(*(void **)__p);
                }
              }
              uint64_t v182 = *(void *)(v178 + 40);
              uint64_t v181 = *(void *)(v178 + 48);
            }
          }
          ++v183;
        }
        while (v183 < 0xEEEEEEEEEEEEEEEFLL * ((v181 - v182) >> 3));
      }
      v178 += 96;
    }
    while (v178 != v1092);
    unint64_t v172 = a2;
    uint64_t v201 = *a2;
    uint64_t v200 = a2[1];
    if (*a2 != v200)
    {
      while (1)
      {
        uint64_t v202 = *(void *)(v201 + 40);
        if (*(void *)(v201 + 48) != v202) {
          break;
        }
LABEL_297:
        v201 += 96;
        if (v201 == v200) {
          goto LABEL_298;
        }
      }
      unint64_t v203 = 0;
      while (2)
      {
        sub_25B5C5E38((uint64_t)v1106, a1, v202 + 120 * v203, v174.n128_f64[0], v175, v176, v177);
        if (BYTE3(v1106[1])) {
          BOOL v204 = BYTE1(v1106[1]) == 0;
        }
        else {
          BOOL v204 = 1;
        }
        unint64_t v172 = a2;
        if (v204) {
          goto LABEL_269;
        }
        uint64_t v205 = v202 + 120 * v203;
        uint64_t v207 = *(void *)(v205 + 40);
        long long v206 = (uint64_t *)(v205 + 40);
        float v208 = *(float *)(v207 + 24);
        float v209 = *(float *)(v207 + 72);
        sub_25B5C6F98((char **)__p, v201, v203);
        float32x2_t v210 = *(void **)__p;
        if (*(void *)&__p[8] == *(void *)__p) {
          goto LABEL_264;
        }
        if (v208 >= v209) {
          float v211 = v208;
        }
        else {
          float v211 = v209;
        }
        uint64_t v212 = *(void *)__p + 8;
        v174.n128_f32[0] = v211 + 0.1;
        if (*(void *)__p + 8 == *(void *)&__p[8])
        {
          uint64_t v221 = *(void *)__p;
          if (v174.n128_f32[0] >= COERCE_FLOAT(**(void **)__p)) {
            goto LABEL_268;
          }
        }
        else
        {
          float32x2_t v213 = **(float32x2_t **)__p;
          uint64_t v214 = *(void *)__p + 8;
          long long v215 = *(void **)__p;
          long long v216 = (float32x2_t *)(*(void *)__p + 8);
          do
          {
            float32x2_t v217 = *v216++;
            double v176 = *(double *)&v217;
            unsigned __int8 v218 = vcgt_f32(v213, v217).u8[0];
            BOOL v219 = (v218 & 1) == 0;
            if (v218) {
              unsigned int v220 = -1;
            }
            else {
              unsigned int v220 = 0;
            }
            *(int32x2_t *)v177.uint64_t i8 = vdup_n_s32(v220);
            float32x2_t v213 = (float32x2_t)vbsl_s8(*(int8x8_t *)v177.i8, *(int8x8_t *)&v176, (int8x8_t)v213);
            if (!v219) {
              long long v215 = (void *)v214;
            }
            uint64_t v214 = (uint64_t)v216;
          }
          while (v216 != *(float32x2_t **)&__p[8]);
          double v175 = *(double *)v215;
          BOOL v17 = v174.n128_f32[0] < COERCE_FLOAT(*v215);
          uint64_t v221 = *(void *)__p;
          if (!v17)
          {
LABEL_264:
            if (!*(void *)__p) {
              goto LABEL_269;
            }
LABEL_268:
            operator delete(*(void **)__p);
LABEL_269:
            if (BYTE4(v1106[1]) && !LOBYTE(v1106[1]))
            {
              uint64_t v223 = v202 + 120 * v203;
              uint64_t v225 = *(void *)(v223 + 40);
              float32x2_t v224 = (uint64_t *)(v223 + 40);
              float v226 = *(float *)(v225 + 24);
              float v227 = *(float *)(v225 + 72);
              sub_25B5C6F98((char **)__p, v201, v203);
              float32x2_t v210 = *(void **)__p;
              if (*(void *)&__p[8] != *(void *)__p)
              {
                if (v227 >= v226) {
                  v174.n128_f32[0] = v226;
                }
                else {
                  v174.n128_f32[0] = v227;
                }
                uint64_t v228 = *(void *)__p + 8;
                float32x2_t v229 = **(float32x2_t **)__p;
                if (*(void *)__p + 8 == *(void *)&__p[8])
                {
                  uint64_t v237 = *(void *)__p;
                  if (v174.n128_f32[0] > (float)(v229.f32[0] + 0.1)) {
                    goto LABEL_291;
                  }
                  goto LABEL_295;
                }
                uint64_t v230 = *(void *)__p + 8;
                float32x2_t v231 = *(void **)__p;
                float32x2_t v232 = (float32x2_t *)(*(void *)__p + 8);
                do
                {
                  float32x2_t v233 = *v232++;
                  double v176 = *(double *)&v233;
                  unsigned __int8 v234 = vcgt_f32(v233, v229).u8[0];
                  BOOL v235 = (v234 & 1) == 0;
                  if (v234) {
                    unsigned int v236 = -1;
                  }
                  else {
                    unsigned int v236 = 0;
                  }
                  *(int32x2_t *)v177.uint64_t i8 = vdup_n_s32(v236);
                  float32x2_t v229 = (float32x2_t)vbsl_s8(*(int8x8_t *)v177.i8, *(int8x8_t *)&v176, (int8x8_t)v229);
                  if (!v235) {
                    float32x2_t v231 = (void *)v230;
                  }
                  uint64_t v230 = (uint64_t)v232;
                }
                while (v232 != *(float32x2_t **)&__p[8]);
                double v175 = *(double *)v231;
                *(float *)&double v175 = COERCE_FLOAT(*v231) + 0.1;
                uint64_t v237 = *(void *)__p;
                if (v174.n128_f32[0] > *(float *)&v175)
                {
                  do
                  {
                    if (*(float *)(v237 + 4) < *(float *)(v228 + 4)) {
                      uint64_t v237 = v228;
                    }
                    v228 += 8;
                  }
                  while (v228 != *(void *)&__p[8]);
LABEL_291:
                  uint64_t v222 = *(void *)(*(void *)__p + ((v237 - *(void *)__p) << 29 >> 29));
                  if (*((float *)&v222 + 1) >= 0.5)
                  {
                    *(_DWORD *)(*v224 + 24) = v222;
                    uint64_t v238 = *v224;
                    goto LABEL_294;
                  }
                  goto LABEL_295;
                }
              }
              if (*(void *)__p) {
                goto LABEL_295;
              }
            }
LABEL_296:
            ++v203;
            uint64_t v202 = *(void *)(v201 + 40);
            if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v201 + 48) - v202) >> 3) <= v203) {
              goto LABEL_297;
            }
            continue;
          }
          do
          {
            if (*(float *)(v221 + 4) < *(float *)(v212 + 4)) {
              uint64_t v221 = v212;
            }
            v212 += 8;
          }
          while (v212 != *(void *)&__p[8]);
        }
        break;
      }
      uint64_t v222 = *(void *)(*(void *)__p + ((v221 - *(void *)__p) << 29 >> 29));
      if (*((float *)&v222 + 1) < 0.5) {
        goto LABEL_268;
      }
      *(_DWORD *)(*v206 + 24) = v222;
      uint64_t v238 = *v206;
LABEL_294:
      *(_DWORD *)(v238 + 72) = v222;
LABEL_295:
      operator delete(v210);
      goto LABEL_296;
    }
  }
LABEL_298:
  memset(__p, 0, 24);
  unint64_t v239 = a1;
  do
    v174.n128_u32[0] = v4.i32[0];
  while ((sub_25B5C7128((uint64_t)a1, v172, (uint64_t)__p, 0, v174, v175, v176, v177) & 1) != 0);
  v174.n128_u32[0] = v4.i32[0];
  sub_25B5C7128((uint64_t)a1, v172, (uint64_t)__p, 1, v174, v175, v176, v177);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  uint64_t v245 = *v172;
  uint64_t v244 = v172[1];
  if (*v172 == v244)
  {
    uint64_t v1058 = a1 + 16;
    goto LABEL_456;
  }
  do
  {
    uint64_t v246 = *(void *)(v245 + 40);
    if (*(void *)(v245 + 48) != v246)
    {
      unint64_t v247 = 0;
      do
      {
        sub_25B5C5E38((uint64_t)v1106, a1, v246 + 120 * v247, *(double *)v240.i64, *(double *)v241.i64, *(double *)v242.i64, v243);
        uint64_t v248 = v246 + 120 * v247;
        uint64_t v250 = *(void *)(v248 + 40);
        uint64_t v249 = v248 + 40;
        v241.i32[0] = *(_DWORD *)(v250 + 72);
        v240.f32[0] = vabds_f32(*(float *)(v250 + 24), *(float *)v241.i32);
        unint64_t v172 = a2;
        if (v240.f32[0] < 0.05 && BYTE5(v1106[1]) && BYTE1(v1106[1]))
        {
          sub_25B5C5B40((uint64_t)__p, a1, v245, v247, *a2, a2[1]);
          unint64_t v251 = *(void **)__p;
          unint64_t v172 = a2;
          if (*(void *)&__p[8] != *(void *)__p)
          {
            uint64_t v252 = *(void *)__p + 48;
            int32x2_t v253 = *(__int32 **)__p;
            if (*(void *)__p + 48 != *(void *)&__p[8])
            {
              float32x4_t v240 = **(float32x4_t **)__p;
              int32x2_t v253 = *(__int32 **)__p;
              uint64_t v254 = (float32x4_t *)(*(void *)__p + 48);
              do
              {
                float32x4_t v255 = *v254;
                v254 += 3;
                int8x16_t v241 = (int8x16_t)v255;
                unsigned __int8 v256 = vmovn_s32(vcgtq_f32(v240, v255)).u8[0];
                BOOL v257 = (v256 & 1) == 0;
                if (v256) {
                  unsigned int v258 = -1;
                }
                else {
                  unsigned int v258 = 0;
                }
                int8x16_t v242 = (int8x16_t)vdupq_n_s32(v258);
                float32x4_t v240 = (float32x4_t)vbslq_s8(v242, v241, (int8x16_t)v240);
                if (!v257) {
                  int32x2_t v253 = (__int32 *)v252;
                }
                uint64_t v252 = (uint64_t)v254;
              }
              while (v254 != *(float32x4_t **)&__p[8]);
            }
            v240.i32[0] = *v253;
            v241.i32[0] = *(_DWORD *)(*(void *)v249 + 24);
            if (*(float *)v241.i32 < *(float *)v253)
            {
              *(_DWORD *)(*(void *)v249 + 24) = v240.i32[0];
              *(_DWORD *)(*(void *)v249 + 72) = v240.i32[0];
            }
          }
          if (v251) {
            operator delete(v251);
          }
        }
        ++v247;
        uint64_t v246 = *(void *)(v245 + 40);
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v245 + 48) - v246) >> 3) > v247);
    }
    v245 += 96;
  }
  while (v245 != v244);
  uint64_t v260 = *v172;
  uint64_t v259 = v172[1];
  unint64_t v239 = a1;
  float v261 = a1[16];
  uint64_t v1058 = a1 + 16;
  if (*v172 == v259) {
    goto LABEL_456;
  }
  while (2)
  {
    uint64_t v263 = *(void *)(v260 + 40);
    uint64_t v262 = *(void *)(v260 + 48);
    if ((int)(-286331153 * ((unint64_t)(v262 - v263) >> 3)) < 2) {
      goto LABEL_376;
    }
    uint64_t v264 = 0;
    uint64_t v265 = 120;
    uint64_t v266 = 184;
    while (2)
    {
      uint64_t v267 = v263 + v266;
      uint64_t v268 = *(void *)(v263 + v266 - 144);
      float v269 = *(float *)(v268 + 24);
      v240.i32[0] = *(_DWORD *)(v268 + 72);
      uint64_t v270 = *(void *)(v263 + v266 - 24);
      v241.i32[0] = *(_DWORD *)(v270 + 24);
      float v271 = *(float *)(v270 + 72);
      *(float *)v243.i32 = vabds_f32(v269, v240.f32[0]);
      *(float *)v242.i32 = vabds_f32(*(float *)v241.i32, v271);
      if (*(float *)v243.i32 >= v261 || *(float *)v242.i32 <= v261 || vabds_f32(v269, v271) >= v261)
      {
        BOOL v273 = 0;
      }
      else
      {
        if (v271 >= v240.f32[0]) {
          float v272 = v240.f32[0];
        }
        else {
          float v272 = *(float *)(v270 + 72);
        }
        if (v272 >= v269) {
          float v272 = v269;
        }
        if ((float)(v261 + *(float *)v241.i32) >= v272)
        {
          if (v240.f32[0] >= v271) {
            float v276 = v240.f32[0];
          }
          else {
            float v276 = *(float *)(v270 + 72);
          }
          if (v269 >= v276) {
            float v276 = v269;
          }
          BOOL v273 = *(float *)v241.i32 > (float)(v261 + v276);
        }
        else
        {
          BOOL v273 = 1;
        }
      }
      if (*(float *)v243.i32 <= v261
        || *(float *)v242.i32 >= v261
        || (*(float *)v242.i32 = vabds_f32(v269, v271), *(float *)v242.i32 >= v261))
      {
        BOOL v274 = 0;
        goto LABEL_348;
      }
      *(float *)v242.i32 = v261 + v240.f32[0];
      if (v271 >= *(float *)v241.i32) {
        v243.i32[0] = v241.i32[0];
      }
      else {
        *(float *)v243.i32 = v271;
      }
      if (*(float *)v243.i32 >= v269) {
        *(float *)v243.i32 = v269;
      }
      if (*(float *)v242.i32 >= *(float *)v243.i32)
      {
        if (*(float *)v241.i32 < v271) {
          *(float *)v241.i32 = v271;
        }
        if (v269 >= *(float *)v241.i32) {
          *(float *)v241.i32 = v269;
        }
        *(float *)v241.i32 = v261 + *(float *)v241.i32;
        BOOL v274 = v240.f32[0] > *(float *)v241.i32;
LABEL_348:
        if (v273 || v274) {
          goto LABEL_349;
        }
LABEL_356:
        ++v264;
        v266 += 120;
        v265 += 120;
        if (v264 >= (int)(-286331153 * ((unint64_t)(v262 - v263) >> 3) - 1)) {
          goto LABEL_376;
        }
        continue;
      }
      break;
    }
    BOOL v274 = 1;
LABEL_349:
    if (v273)
    {
      sub_25B5C5E38((uint64_t)__p, a1, v267 - 64, *(double *)v240.i64, *(double *)v241.i64, *(double *)v242.i64, v243);
      if (__p[8])
      {
        v240.i32[0] = *(_DWORD *)(v263 + v266);
        if (v240.f32[0] > 0.5)
        {
LABEL_355:
          uint64_t v263 = *(void *)(v260 + 40);
          uint64_t v262 = *(void *)(v260 + 48);
          goto LABEL_356;
        }
      }
    }
    if (v274)
    {
      sub_25B5C5E38((uint64_t)__p, a1, v267 - 184, *(double *)v240.i64, *(double *)v241.i64, *(double *)v242.i64, v243);
      uint64_t v275 = v263 + v266;
      if (!__p[8] || *(float *)(v275 - 120) <= 0.5) {
        goto LABEL_370;
      }
      goto LABEL_355;
    }
    uint64_t v275 = v263 + v266;
LABEL_370:
    uint64_t v277 = v275 - 144;
    *(float *)(*(void *)v277 + 24) = v269;
    *(float *)(*(void *)v277 + 72) = v271;
    *(void *)(*(void *)v277 + 64) = *(void *)(*(void *)(v275 - 24) + 64);
    memset(__p, 0, 24);
    uint64_t v278 = *(void *)(v260 + 40);
    v1106[0] = __p;
    do
    {
      sub_25B521880((void **)v1106, v278);
      v278 += 120;
      v265 -= 120;
    }
    while (v265);
    unsigned int v279 = v264 + 2;
    uint64_t v280 = *(void *)(v260 + 48);
    uint64_t v281 = *(void *)(v260 + 40) + 120 * v279;
    v1106[0] = __p;
    while (v281 != v280)
    {
      sub_25B521880((void **)v1106, v281);
      v281 += 120;
    }
    sub_25B521750(v260, (uint64_t *)__p);
    v1106[0] = __p;
    sub_25B55E2EC((void ***)v1106);
LABEL_376:
    v260 += 96;
    if (v260 != v259) {
      continue;
    }
    break;
  }
  uint64_t v283 = *a2;
  uint64_t v282 = a2[1];
  if (*a2 == v282) {
    goto LABEL_455;
  }
  float v284 = *v1058;
  do
  {
    uint64_t v285 = *(void *)(v283 + 40);
    uint64_t v286 = -1 - 286331153 * ((unint64_t)(*(void *)(v283 + 48) - v285) >> 3);
    if ((int)v286 >= 1)
    {
      uint64_t v287 = 0;
      uint64_t v288 = *(void *)(v285 + 40);
      float v289 = *(float *)(v288 + 24);
      float v290 = *(float *)(v288 + 72);
      uint64_t v291 = (uint64_t *)(v285 + 160);
      uint64_t v292 = 120;
      while (1)
      {
        uint64_t v293 = *v291;
        float v294 = *(float *)(*v291 + 24);
        float v295 = *(float *)(*v291 + 72);
        if ((float)(v289 - v290) > v284 && (float)(v295 - v294) > v284)
        {
          if (v295 >= v289) {
            float v297 = v289;
          }
          else {
            float v297 = *(float *)(*v291 + 72);
          }
          if (v290 < v294) {
            float v290 = *(float *)(*v291 + 24);
          }
          if (v297 > v290) {
            break;
          }
        }
        ++v287;
        v291 += 15;
        v292 += 120;
        float v290 = v295;
        float v289 = v294;
        uint64_t v288 = v293;
        if (v286 == v287) {
          goto LABEL_402;
        }
      }
      uint64_t v298 = v285 + 120 * v287;
      if (v289 < v295) {
        float v289 = *(float *)(*v291 + 72);
      }
      *(float *)(v288 + 24) = v289;
      *(float *)(*(void *)(v298 + 40) + 72) = v289;
      *(void *)(*(void *)(v298 + 40) + 64) = *(void *)(*v291 + 64);
      memset(__p, 0, 24);
      uint64_t v299 = *(void *)(v283 + 40);
      v1106[0] = __p;
      if (v299 != v299 + 120 * v287 + 120)
      {
        do
        {
          sub_25B521880((void **)v1106, v299);
          v299 += 120;
          v292 -= 120;
        }
        while (v292);
        uint64_t v299 = *(void *)(v283 + 40);
      }
      uint64_t v300 = v299 + 120 * v287 + 240;
      uint64_t v301 = *(void *)(v283 + 48);
      v1106[0] = __p;
      while (v300 != v301)
      {
        sub_25B521880((void **)v1106, v300);
        v300 += 120;
      }
      sub_25B521750(v283, (uint64_t *)__p);
      v1106[0] = __p;
      sub_25B55E2EC((void ***)v1106);
    }
LABEL_402:
    v283 += 96;
  }
  while (v283 != v282);
  uint64_t v303 = *a2;
  uint64_t v302 = a2[1];
  if (*a2 == v302) {
    goto LABEL_455;
  }
  do
  {
    do
    {
      uint64_t v304 = *(void *)(v303 + 40);
      unint64_t v305 = 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v303 + 48) - v304) >> 3);
      if (v305 < 2) {
        break;
      }
      unint64_t v306 = *(float32x4_t **)(v304 + 40);
      float v307 = v306[1].f32[2];
      unint64_t v308 = (float32x4_t **)(v304 + 160);
      unint64_t v309 = 1;
      uint64_t v310 = 120;
      BOOL v311 = 1;
      while (1)
      {
        float32x2_t v312 = v306;
        float v313 = v307;
        float v314 = v306[4].f32[2];
        unint64_t v306 = *v308;
        float v307 = (*v308)[1].f32[2];
        if (vabds_f32(v313, v314) < 0.001 && vabds_f32(v307, v306[4].f32[2]) < 0.001 && vabds_f32(v313, v307) < *v1058) {
          break;
        }
        ++v309;
        v308 += 15;
        v310 += 120;
        BOOL v311 = v305 > v309;
        if (v305 == v309) {
          goto LABEL_410;
        }
      }
      unint64_t v315 = v309 - 1;
      float32x4_t v316 = vsubq_f32(v312[1], v312[4]);
      float v317 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v316, v316)));
      float32x4_t v318 = vsubq_f32(v306[1], v306[4]);
      float v319 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v318, v318)));
      if (v317 < v319)
      {
        uint64_t v320 = v304 + 120 * v309;
        uint64_t v321 = v304 + 120 * v315;
        *(_DWORD *)(v321 + 16) = *(_DWORD *)(v320 + 16);
        *(unsigned char *)(v321 + 20) = *(unsigned char *)(v320 + 20);
        *(_DWORD *)(v321 + 8) = *(_DWORD *)(v320 + 8);
        *(unsigned char *)(v321 + 12) = *(unsigned char *)(v320 + 12);
        *(_DWORD *)(v321 + 24) = *(_DWORD *)(v320 + 24);
        *(unsigned char *)(v321 + 28) = *(unsigned char *)(v320 + 28);
      }
      uint64_t v322 = (void *)(v304 + 120 * v315);
      float v323 = (float)((float)(v307 * v319) + (float)(v313 * v317)) / (float)(v317 + v319);
      uint64_t v324 = v322[5];
      v322 += 5;
      *(float *)(v324 + 24) = v323;
      *(float *)(*v322 + 72) = v323;
      *(void *)(*v322 + 64) = (*v308)[4].i64[0];
      memset(__p, 0, 24);
      uint64_t v325 = *(void *)(v303 + 40);
      v1106[0] = __p;
      do
      {
        sub_25B521880((void **)v1106, v325);
        v325 += 120;
        v310 -= 120;
      }
      while (v310);
      unsigned int v326 = v309 + 1;
      uint64_t v327 = *(void *)(v303 + 48);
      uint64_t v328 = *(void *)(v303 + 40) + 120 * v326;
      v1106[0] = __p;
      while (v328 != v327)
      {
        sub_25B521880((void **)v1106, v328);
        v328 += 120;
      }
      sub_25B521750(v303, (uint64_t *)__p);
      v1106[0] = __p;
      sub_25B55E2EC((void ***)v1106);
    }
    while (v311);
LABEL_410:
    v303 += 96;
  }
  while (v303 != v302);
  uint64_t v330 = *a2;
  uint64_t v329 = a2[1];
  if (*a2 == v329)
  {
LABEL_455:
    unint64_t v239 = a1;
    goto LABEL_456;
  }
LABEL_423:
  while (2)
  {
    uint64_t v332 = *(void *)(v330 + 40);
    uint64_t v331 = *(void *)(v330 + 48);
    unint64_t v333 = (v331 - v332) / 120;
    if (v333 >= 2 && v331 != v332)
    {
      uint64_t v335 = 0;
      __n128 v336 = (float32x4_t **)(v332 + 40);
      uint64_t v337 = v332 + 40 + 120 * v333 - 240;
      do
      {
        float32x4_t v338 = (*v336)[1];
        float32x4_t v339 = (*v336)[4];
        float32x4_t v340 = vsubq_f32(v338, v339);
        float v341 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v340, v340)));
        if (v341 <= 0.15)
        {
          float v342 = fabsf(v340.f32[2]);
          float v343 = *v1058;
          if (v335)
          {
            if (v333 - 1 == v335)
            {
              float32x4_t v344 = *(float32x4_t *)(*(void *)v337 + 16);
              float32x4_t v345 = *(float32x4_t *)(*(void *)v337 + 64);
              float32x4_t v346 = vsubq_f32(v344, v345);
              float v347 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v346, v346)));
              BOOL v348 = v347 <= v341;
              float v349 = v341 + v341;
              if (v342 <= v343) {
                BOOL v348 = 1;
              }
              if (v347 >= v349 || !v348)
              {
                float v361 = vsubq_f32(v345, v344).f32[0];
                float v362 = v344.f32[2]
                     + (float)((float)((float)(v345.f32[2] - v344.f32[2]) * vsubq_f32(v339, v344).f32[0]) / v361);
                if (fabsf(v361) < 0.000001) {
                  float v362 = (float)(v344.f32[2] + v345.f32[2]) * 0.5;
                }
                *(_DWORD *)(*(void *)v337 + 24) = v344.i32[2];
                *(float *)(*(void *)v337 + 72) = v362;
                *(void *)(*(void *)v337 + 64) = (*v336)[4].i64[0];
                memset(__p, 0, 24);
                uint64_t v363 = *(void *)(v330 + 40);
                uint64_t v364 = *(void *)(v330 + 48) - v363;
                v1106[0] = __p;
                if (v364 != 120)
                {
                  uint64_t v365 = 120 * (v364 / 120) - 120;
                  do
                  {
                    sub_25B521880((void **)v1106, v363);
                    v363 += 120;
                    v365 -= 120;
                  }
                  while (v365);
                }
                goto LABEL_454;
              }
            }
          }
          else
          {
            uint64_t v350 = *(float32x4_t **)(v332 + 160);
            float32x4_t v351 = v350[1];
            float32x4_t v352 = v350[4];
            float32x4_t v353 = vsubq_f32(v351, v352);
            float v354 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v353, v353)));
            BOOL v355 = v354 <= v341;
            float v356 = v341 + v341;
            if (v342 <= v343) {
              BOOL v355 = 1;
            }
            if (v354 >= v356 || !v355)
            {
              float v357 = vsubq_f32(v352, v351).f32[0];
              float v358 = v351.f32[2]
                   + (float)((float)((float)(v352.f32[2] - v351.f32[2]) * vsubq_f32(v338, v351).f32[0]) / v357);
              if (fabsf(v357) < 0.000001) {
                float v358 = (float)(v351.f32[2] + v352.f32[2]) * 0.5;
              }
              v350[1].f32[2] = v358;
              *(_DWORD *)(*(void *)(v332 + 160) + 72) = v352.i32[2];
              *(void *)(*(void *)(v332 + 160) + 16) = (*v336)[1].i64[0];
              memset(__p, 0, 24);
              uint64_t v359 = *(void *)(v330 + 48);
              uint64_t v360 = *(void *)(v330 + 40) + 120;
              v1106[0] = __p;
              while (v360 != v359)
              {
                sub_25B521880((void **)v1106, v360);
                v360 += 120;
              }
LABEL_454:
              sub_25B521750(v330, (uint64_t *)__p);
              v1106[0] = __p;
              sub_25B55E2EC((void ***)v1106);
              goto LABEL_423;
            }
          }
        }
        ++v335;
        v336 += 15;
      }
      while (v333 != v335);
    }
    v330 += 96;
    if (v330 != v329) {
      continue;
    }
    break;
  }
  uint64_t v841 = *a2;
  uint64_t v1048 = a2[1];
  unint64_t v239 = a1;
  if (*a2 == v1048)
  {
LABEL_456:
    float v366 = 0;
    float32x2_t v367 = 0;
    __n128 v368 = 0;
    float v369 = v239[18];
    goto LABEL_457;
  }
  while (2)
  {
    uint64_t v842 = *(void *)(v841 + 40);
    if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v841 + 48) - v842) >> 3) >= 2)
    {
      uint64_t v843 = 224;
      unint64_t v844 = 1;
      uint64_t v1066 = v841;
      while (1)
      {
        uint64_t v845 = v842 + v843;
        uint64_t v846 = *(void *)(v842 + v843 - 184);
        v847 = (void **)(v842 + v843 - 224);
        uint64_t v848 = (void **)(v842 + v843 - 104);
        float v849 = *(float *)(v846 + 24);
        float v850 = *(float *)(v846 + 72);
        uint64_t v851 = *(void *)(v842 + v843 - 64);
        float v852 = *(float *)(v851 + 24);
        float v853 = *(float *)(v851 + 72);
        *(void *)__n128 __p = &unk_2708F2140;
        __p[8] = 0;
        __p[12] = 0;
        __p[16] = 0;
        __p[20] = 0;
        __p[24] = 0;
        __p[28] = 0;
        __p[32] = 0;
        __p[36] = 0;
        memset(v1111, 0, sizeof(v1111));
        int v1112 = 0;
        memset(v1113, 0, sizeof(v1113));
        v1106[0] = &unk_2708F2140;
        LOBYTE(v1106[1]) = 0;
        BYTE4(v1106[1]) = 0;
        LOBYTE(v1106[2]) = 0;
        BYTE4(v1106[2]) = 0;
        LOBYTE(v1106[3]) = 0;
        BYTE4(v1106[3]) = 0;
        LOBYTE(v1106[4]) = 0;
        BYTE4(v1106[4]) = 0;
        memset(v1107, 0, sizeof(v1107));
        int v1108 = 0;
        double v854 = vabds_f32(v849, v850);
        memset(v1109, 0, 48);
        if (v854 < 0.001 && vabds_f32(v852, v853) > 0.1 && vabds_f32(v850, v852) < a1[17]) {
          break;
        }
        if (v854 > 0.1 && vabds_f32(v852, v853) < 0.001 && vabds_f32(v850, v852) < a1[17])
        {
          uint64_t v857 = v842 + v843;
          long long v858 = *(_OWORD *)(v842 + v843 - 216);
          *(_OWORD *)&__p[21] = *(_OWORD *)(v842 + v843 - 203);
          *(_OWORD *)&__p[8] = v858;
          if (v847 == (void **)__p)
          {
            int v1112 = *(_DWORD *)(v857 - 160);
          }
          else
          {
            sub_25B58AD34(v1111, *(void *)(v845 - 184), *(void *)(v857 - 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v857 - 176) - *(void *)(v845 - 184)) >> 4));
            int v1112 = *(_DWORD *)(v842 + v843 - 160);
            sub_25B3FE7A8(v1113, *(char **)(v842 + v843 - 152), *(void *)(v842 + v843 - 144), (uint64_t)(*(void *)(v842 + v843 - 144) - *(void *)(v842 + v843 - 152)) >> 2);
            sub_25B43AB10(&v1113[24], *(void *)(v842 + v843 - 128), *(void *)(v842 + v843 - 120), (uint64_t)(*(void *)(v842 + v843 - 120) - *(void *)(v842 + v843 - 128)) >> 4);
          }
          long long v861 = *(_OWORD *)(v842 + v843 - 96);
          *(_OWORD *)((char *)&v1106[2] + 5) = *(_OWORD *)(v842 + v843 - 83);
          *(_OWORD *)&v1106[1] = v861;
          unint64_t v859 = v844;
          if (v848 != v1106)
          {
            sub_25B58AD34(v1107, *(void *)(v845 - 64), *(void *)(v842 + v843 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v842 + v843 - 56) - *(void *)(v845 - 64)) >> 4));
            int v1108 = *(_DWORD *)(v842 + v843 - 40);
            sub_25B3FE7A8(v1109, *(char **)(v842 + v843 - 32), *(void *)(v842 + v843 - 24), (uint64_t)(*(void *)(v842 + v843 - 24) - *(void *)(v842 + v843 - 32)) >> 2);
            unint64_t v859 = v844;
LABEL_1152:
            sub_25B43AB10(&v1109[24], *(void *)(v842 + 120 * v859 + 96), *(void *)(v842 + 120 * v859 + 104), (uint64_t)(*(void *)(v842 + 120 * v859 + 104) - *(void *)(v842 + 120 * v859 + 96)) >> 4);
LABEL_1154:
            long long v862 = *(_OWORD *)(*(void *)v1111 + 16);
            float v863 = COERCE_FLOAT(*(void *)(*(void *)v1107 + 24));
            float32x2_t v864 = vmla_n_f32(*(float32x2_t *)(*(void *)v1111 + 16), vsub_f32(*(float32x2_t *)(*(void *)v1111 + 64), *(float32x2_t *)&v862), (float)(v863 - COERCE_FLOAT(*(void *)(*(void *)v1111 + 24)))/ (float)(COERCE_FLOAT(*(void *)(*(void *)v1111 + 72))- COERCE_FLOAT(*(void *)(*(void *)v1111 + 24))));
            uint64_t v841 = v1066;
            if (vaddv_f32(vmul_f32(vsub_f32(v864, *(float32x2_t *)&v862), vsub_f32(v864, *(float32x2_t *)(*(void *)v1111 + 64)))) <= 0.0|| vaddv_f32(vmul_f32(vsub_f32(v864, *(float32x2_t *)(*(void *)v1107 + 16)), vsub_f32(v864, *(float32x2_t *)(*(void *)v1107 + 64)))) <= 0.0)
            {
              *(float32x2_t *)(*(void *)(v845 - 184) + 64) = v864;
              *(float *)(*(void *)(v845 - 184) + 72) = v863;
              *(float32x2_t *)(*(void *)(v845 - 64) + 16) = v864;
              *(float *)(*(void *)(v845 - 64) + 24) = v863;
            }
            goto LABEL_1157;
          }
LABEL_1153:
          int v1108 = *(_DWORD *)(v842 + 120 * v859 + 64);
          goto LABEL_1154;
        }
LABEL_1157:
        sub_25B521E50((uint64_t)v1106);
        sub_25B521E50((uint64_t)__p);
        ++v844;
        uint64_t v842 = *(void *)(v841 + 40);
        v843 += 120;
        if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v841 + 48) - v842) >> 3) <= v844) {
          goto LABEL_1158;
        }
      }
      uint64_t v855 = v842 + v843;
      long long v856 = *(_OWORD *)(v842 + v843 - 96);
      *(_OWORD *)&__p[21] = *(_OWORD *)(v842 + v843 - 83);
      *(_OWORD *)&__p[8] = v856;
      if (v848 == (void **)__p)
      {
        int v1112 = *(_DWORD *)(v855 - 40);
      }
      else
      {
        sub_25B58AD34(v1111, *(void *)(v845 - 64), *(void *)(v855 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v855 - 56) - *(void *)(v845 - 64)) >> 4));
        int v1112 = *(_DWORD *)(v842 + v843 - 40);
        sub_25B3FE7A8(v1113, *(char **)(v842 + v843 - 32), *(void *)(v842 + v843 - 24), (uint64_t)(*(void *)(v842 + v843 - 24) - *(void *)(v842 + v843 - 32)) >> 2);
        sub_25B43AB10(&v1113[24], *(void *)(v842 + v843 - 8), *(void *)(v842 + v843), (uint64_t)(*(void *)(v842 + v843) - *(void *)(v842 + v843 - 8)) >> 4);
      }
      unint64_t v859 = v844 - 1;
      long long v860 = *(_OWORD *)(v842 + v843 - 216);
      *(_OWORD *)((char *)&v1106[2] + 5) = *(_OWORD *)(v842 + v843 - 203);
      *(_OWORD *)&v1106[1] = v860;
      if (v847 != v1106)
      {
        sub_25B58AD34(v1107, *(void *)(v845 - 184), *(void *)(v842 + v843 - 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v842 + v843 - 176) - *(void *)(v845 - 184)) >> 4));
        int v1108 = *(_DWORD *)(v842 + v843 - 160);
        sub_25B3FE7A8(v1109, *(char **)(v842 + v843 - 152), *(void *)(v842 + v843 - 144), (uint64_t)(*(void *)(v842 + v843 - 144) - *(void *)(v842 + v843 - 152)) >> 2);
        goto LABEL_1152;
      }
      goto LABEL_1153;
    }
LABEL_1158:
    v841 += 96;
    if (v841 != v1048) {
      continue;
    }
    break;
  }
  uint64_t v865 = *a2;
  float v369 = a1[18];
  uint64_t v1100 = a2[1];
  if (*a2 == v1100)
  {
    float v366 = 0;
LABEL_1474:
    float32x2_t v367 = 0;
    __n128 v368 = 0;
    goto LABEL_457;
  }
  float v366 = 0;
  uint64_t v866 = 0;
  unint64_t v867 = 0;
  float v868 = 0;
  do
  {
    uint64_t v869 = *(void *)(v865 + 40);
    uint64_t v870 = *(void *)(v865 + 48);
    while (v869 != v870)
    {
      if (*(float *)(v869 + 64) >= 0.1)
      {
        uint64_t v871 = *(void *)(v869 + 40);
        int v872 = *(_DWORD *)(v871 + 24);
        int v873 = *(_DWORD *)(v871 + 72);
        if ((unint64_t)v868 >= v867)
        {
          uint64_t v875 = v868 - v366;
          unint64_t v876 = v875 + 1;
          if ((unint64_t)(v875 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v867 - (void)v366) >> 1 > v876) {
            unint64_t v876 = (uint64_t)(v867 - (void)v366) >> 1;
          }
          if (v867 - (unint64_t)v366 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v877 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v877 = v876;
          }
          if (v877)
          {
            unint64_t v877 = (unint64_t)sub_25B3FBC64(v877);
            float v868 = v866;
          }
          else
          {
            uint64_t v878 = 0;
          }
          float v879 = (float *)(v877 + 4 * v875);
          *(_DWORD *)float v879 = v872;
          uint64_t v874 = v879 + 1;
          while (v868 != v366)
          {
            int v880 = *((_DWORD *)v868-- - 1);
            *((_DWORD *)v879-- - 1) = v880;
          }
          unint64_t v867 = v877 + 4 * v878;
          if (v366) {
            operator delete(v366);
          }
          float v366 = v879;
        }
        else
        {
          *(_DWORD *)float v868 = v872;
          uint64_t v874 = v868 + 1;
        }
        if ((unint64_t)v874 >= v867)
        {
          uint64_t v881 = v874 - v366;
          unint64_t v882 = v881 + 1;
          if ((unint64_t)(v881 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v867 - (void)v366) >> 1 > v882) {
            unint64_t v882 = (uint64_t)(v867 - (void)v366) >> 1;
          }
          if (v867 - (unint64_t)v366 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v883 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v883 = v882;
          }
          if (v883) {
            unint64_t v883 = (unint64_t)sub_25B3FBC64(v883);
          }
          else {
            uint64_t v884 = 0;
          }
          char v885 = (float *)(v883 + 4 * v881);
          *(_DWORD *)char v885 = v873;
          uint64_t v866 = v885 + 1;
          while (v874 != v366)
          {
            int v886 = *((_DWORD *)v874-- - 1);
            *((_DWORD *)v885-- - 1) = v886;
          }
          unint64_t v867 = v883 + 4 * v884;
          if (v366) {
            operator delete(v366);
          }
          float v366 = v885;
          float v868 = v866;
        }
        else
        {
          *(_DWORD *)uint64_t v874 = v873;
          uint64_t v866 = v874 + 1;
          float v868 = v874 + 1;
        }
      }
      v869 += 120;
    }
    v865 += 96;
  }
  while (v865 != v1100);
  if (v366 == v868) {
    goto LABEL_1474;
  }
  float32x2_t v367 = 0;
  __n128 v368 = 0;
  unint64_t v887 = 0;
  v888 = v366;
  do
  {
    float v889 = *v888;
    if (v367 == v368)
    {
LABEL_1206:
      if ((unint64_t)v368 >= v887)
      {
        uint64_t v891 = ((char *)v368 - (char *)v367) >> 3;
        unint64_t v892 = v891 + 1;
        if ((unint64_t)(v891 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        if ((uint64_t)(v887 - (void)v367) >> 2 > v892) {
          unint64_t v892 = (uint64_t)(v887 - (void)v367) >> 2;
        }
        if (v887 - (unint64_t)v367 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v893 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v893 = v892;
        }
        if (v893) {
          unint64_t v893 = (unint64_t)sub_25B3FCAD4(v893);
        }
        else {
          uint64_t v894 = 0;
        }
        unint64_t v897 = v893 + 8 * v891;
        *(float *)unint64_t v897 = v889;
        *(_DWORD *)(v897 + 4) = 1;
        v898 = (char *)v897;
        while (v368 != v367)
        {
          uint64_t v899 = *((void *)v368 - 1);
          v368 -= 2;
          *((void *)v898 - 1) = v899;
          v898 -= 8;
        }
        unint64_t v887 = v893 + 8 * v894;
        __n128 v368 = (float *)(v897 + 8);
        if (v367) {
          operator delete(v367);
        }
        float32x2_t v367 = (float *)v898;
      }
      else
      {
        *__n128 v368 = v889;
        *((_DWORD *)v368 + 1) = 1;
        v368 += 2;
      }
    }
    else
    {
      v890 = v367;
      while (vabds_f32(*v890, v889) > v369)
      {
        v890 += 2;
        if (v890 == v368) {
          goto LABEL_1206;
        }
      }
      int v895 = *((_DWORD *)v890 + 1);
      float v896 = v889 + (float)(*v890 * (float)v895++);
      float *v890 = v896 / (float)v895;
      *((_DWORD *)v890 + 1) = v895;
    }
    ++v888;
  }
  while (v888 != v868);
LABEL_457:
  if ((char *)v368 - (char *)v367 < 1025)
  {
LABEL_461:
    sub_25B5C6B7C((char *)v367, (char *)v368, ((char *)v368 - (char *)v367) >> 3, 0, 0);
  }
  else
  {
    uint64_t v370 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v371 = ((char *)v368 - (char *)v367) >> 3;
    while (1)
    {
      uint64_t v372 = operator new(8 * v371, v370);
      if (v372) {
        break;
      }
      BOOL v57 = v371 > 1;
      v371 >>= 1;
      if (!v57) {
        goto LABEL_461;
      }
    }
    unint64_t v377 = v372;
    sub_25B5C6B7C((char *)v367, (char *)v368, ((char *)v368 - (char *)v367) >> 3, v372, v371);
    operator delete(v377);
  }
  unint64_t v378 = a2;
  uint64_t v379 = 0;
  uint64_t v380 = 0;
  if (v367 != v368)
  {
    unint64_t v381 = 0;
    for (uint64_t j = v367; j != v368; j += 2)
    {
      if (v379 == v380)
      {
        int v384 = *((_DWORD *)j + 1);
LABEL_474:
        float v387 = *j;
        if ((unint64_t)v380 >= v381)
        {
          uint64_t v388 = (v380 - v379) >> 3;
          unint64_t v389 = v388 + 1;
          if ((unint64_t)(v388 + 1) >> 61) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v381 - (void)v379) >> 2 > v389) {
            unint64_t v389 = (uint64_t)(v381 - (void)v379) >> 2;
          }
          if (v381 - (unint64_t)v379 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v390 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v390 = v389;
          }
          if (v390) {
            unint64_t v390 = (unint64_t)sub_25B3FCAD4(v390);
          }
          else {
            uint64_t v391 = 0;
          }
          unint64_t v395 = (_DWORD *)(v390 + 8 * v388);
          *(float *)unint64_t v395 = v387;
          v395[1] = v384;
          uint64_t v396 = v395;
          if (v380 == v379)
          {
            unint64_t v378 = a2;
          }
          else
          {
            unint64_t v378 = a2;
            do
            {
              uint64_t v397 = *((void *)v380 - 1);
              v380 -= 8;
              *((void *)v396 - 1) = v397;
              v396 -= 2;
            }
            while (v380 != v379);
          }
          unint64_t v381 = v390 + 8 * v391;
          uint64_t v380 = (char *)(v395 + 2);
          if (v379) {
            operator delete(v379);
          }
          uint64_t v379 = (char *)v396;
          continue;
        }
        *(float *)uint64_t v380 = v387;
        *((_DWORD *)v380 + 1) = v384;
        v380 += 8;
      }
      else
      {
        float v383 = *j;
        int v384 = *((_DWORD *)j + 1);
        uint64_t v385 = v379;
        while (1)
        {
          v375.f32[0] = vabds_f32(v383, *(float *)v385);
          if (v375.f32[0] <= v369 && v384 <= 5) {
            break;
          }
          v385 += 8;
          if (v385 == v380) {
            goto LABEL_474;
          }
        }
        int v392 = *((_DWORD *)v385 + 1);
        if (v384 > 2 || v392 <= 2)
        {
          v375.f32[0] = (float)v392;
          v376.f32[0] = (float)v384;
          float v393 = (float)(v383 * (float)v384) + (float)(*(float *)v385 * (float)v392);
          int v394 = v392 + v384;
          *(float *)uint64_t v385 = v393 / (float)v394;
          *((_DWORD *)v385 + 1) = v394;
        }
      }
      unint64_t v378 = a2;
    }
  }
  uint64_t v398 = *v378;
  uint64_t v399 = v378[1];
  if (*v378 != v399)
  {
    do
    {
      uint64_t v400 = *(void *)(v398 + 40);
      uint64_t v401 = *(void *)(v398 + 48);
      while (v400 != v401)
      {
        uint64_t v402 = 0;
        char v403 = 1;
        do
        {
          char v404 = v403;
          uint64_t v405 = *(void *)(v400 + 40) + 48 * v402;
          if (v379 == v380)
          {
            v373.n128_u64[0] = 0;
            float v406 = 10.0;
          }
          else
          {
            v375.i32[0] = *(_DWORD *)(v405 + 24);
            float v406 = 10.0;
            v373.n128_u64[0] = 0;
            int v407 = (float *)v379;
            do
            {
              float v408 = *v407;
              v407 += 2;
              v376.f32[0] = v408;
              float v409 = vabds_f32(v375.f32[0], v408);
              if (v409 < v406)
              {
                float v406 = v409;
                v373.n128_f32[0] = v376.f32[0];
              }
            }
            while (v407 != (float *)v380);
          }
          if (v406 < v369) {
            *(_DWORD *)(v405 + 24) = v373.n128_u32[0];
          }
          char v403 = 0;
          uint64_t v402 = 1;
        }
        while ((v404 & 1) != 0);
        v400 += 120;
      }
      v398 += 96;
    }
    while (v398 != v399);
  }
  if (v379) {
    operator delete(v379);
  }
  if (v367) {
    operator delete(v367);
  }
  if (v366) {
    operator delete(v366);
  }
  uint64_t v410 = *v378;
  uint64_t v1049 = v378[1];
  if (*v378 == v1049) {
    goto LABEL_1380;
  }
  do
  {
    uint64_t v412 = *(void *)(v410 + 40);
    uint64_t v411 = *(void *)(v410 + 48);
    uint64_t v1070 = v410;
    uint64_t v1053 = v411;
    if (v412 == v411) {
      goto LABEL_608;
    }
    do
    {
      uint64_t v413 = *(float32x2_t **)(v412 + 40);
      float v414 = v413[3].f32[0];
      float v415 = v413[9].f32[0];
      v375.f32[0] = vabds_f32(v414, v415);
      if (v375.f32[0] < 0.1) {
        goto LABEL_607;
      }
      float v416 = v415 >= v414 ? v413[3].f32[0] : v413[9].f32[0];
      float v417 = v414 >= v415 ? v413[3].f32[0] : v413[9].f32[0];
      int v1060 = v414 >= v415;
      uint64_t v418 = *a2;
      uint64_t v419 = a2[1];
      if (*a2 == v419) {
        goto LABEL_607;
      }
      unint64_t v420 = 0;
      uint64_t v421 = 0;
      unint64_t v422 = 0;
      float32x2_t v4 = v413[2];
      float32x2_t v423 = v413[8];
      do
      {
        if (*(_DWORD *)(v418 + 92) == *(_DWORD *)(v410 + 92)) {
          goto LABEL_549;
        }
        int32x4_t v1078 = *(int32x4_t *)(*(void *)(*(void *)(v418 + 40) + 40) + 16);
        int32x4_t v1093 = *(int32x4_t *)(*(void *)(*(void *)(v418 + 48) - 80) + 64);
        uint64_t v424 = operator new(8uLL);
        void *v424 = vzip2q_s32(v1078, v1093).u64[0];
        uint64_t v425 = (float *)operator new(0x10uLL);
        unint64_t v426 = v425;
        float32x2_t v427 = vsub_f32(v4, *(float32x2_t *)v1078.i8);
        float v428 = sqrtf(vaddv_f32(vmul_f32(v427, v427)));
        float32x2_t v429 = vsub_f32(v423, *(float32x2_t *)v1093.i8);
        float32x2_t v430 = vsub_f32(v423, *(float32x2_t *)v1078.i8);
        int32x2_t v431 = (int32x2_t)vmul_f32(v430, v430);
        float32x2_t v432 = vsub_f32(v4, *(float32x2_t *)v1093.i8);
        int32x2_t v433 = (int32x2_t)vmul_f32(v432, v432);
        float *v425 = v428;
        *(float32x2_t *)(v425 + 1) = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v433, v431), (float32x2_t)vzip2_s32(v433, v431)));
        v425[3] = sqrtf(vaddv_f32(vmul_f32(v429, v429)));
        uint64_t v434 = 1;
        float v435 = v428;
        BOOL v436 = v425;
        do
        {
          if (v425[v434] < v435)
          {
            float v435 = v425[v434];
            BOOL v436 = &v425[v434];
          }
          ++v434;
        }
        while (v434 != 4);
        float v437 = *v436;
        uint64_t v438 = 1;
        id v439 = v425;
        do
        {
          if (v425[v438] < v428)
          {
            float v428 = v425[v438];
            id v439 = &v425[v438];
          }
          ++v438;
        }
        while (v438 != 4);
        if (v437 < 0.1)
        {
          unint64_t v440 = (unint64_t)((char *)v439 - (char *)v425) >> 2;
          int v441 = (v440 & 0x80000000) == 0 ? v440 : (int)v440 + 1;
          if (v1060 == v441 >> 1)
          {
            int v442 = *((_DWORD *)v424 + (int)(v440 - (v441 & 0xFFFFFFFE)));
            if ((unint64_t)v421 >= v422)
            {
              uint64_t v444 = v421 - v420;
              unint64_t v445 = v444 + 1;
              if ((unint64_t)(v444 + 1) >> 62) {
                sub_25B3FBC4C();
              }
              if ((uint64_t)(v422 - (void)v420) >> 1 > v445) {
                unint64_t v445 = (uint64_t)(v422 - (void)v420) >> 1;
              }
              if (v422 - (unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v446 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v446 = v445;
              }
              if (v446) {
                unint64_t v446 = (unint64_t)sub_25B3FBC64(v446);
              }
              else {
                uint64_t v447 = 0;
              }
              int v448 = (float *)(v446 + 4 * v444);
              *(_DWORD *)int v448 = v442;
              unint64_t v443 = v448 + 1;
              while (v421 != v420)
              {
                int v449 = *((_DWORD *)v421-- - 1);
                *((_DWORD *)v448-- - 1) = v449;
              }
              unint64_t v422 = v446 + 4 * v447;
              if (v420) {
                operator delete(v420);
              }
              unint64_t v420 = v448;
              uint64_t v410 = v1070;
              goto LABEL_548;
            }
            *(_DWORD *)v421++ = v442;
          }
        }
        unint64_t v443 = v421;
LABEL_548:
        operator delete(v426);
        operator delete(v424);
        uint64_t v421 = v443;
LABEL_549:
        v418 += 96;
      }
      while (v418 != v419);
      if (v421 != v420)
      {
        float32x2_t v450 = v420 + 1;
        float32x2_t v451 = v420;
        if (v420 + 1 != v421)
        {
          float v452 = *v420;
          float32x2_t v451 = v420;
          uint64_t v453 = v420 + 1;
          do
          {
            float v454 = *v453++;
            float v455 = v454;
            if (v454 < v452)
            {
              float v452 = v455;
              float32x2_t v451 = v450;
            }
            float32x2_t v450 = v453;
          }
          while (v453 != v421);
        }
        unint64_t v456 = 0;
        unint64_t v457 = 0;
        unint64_t v458 = 0;
        v4.f32[0] = *v451;
        unint64_t v459 = v420;
        do
        {
          float v460 = vabds_f32(*v459, v417);
          if ((unint64_t)v457 >= v458)
          {
            uint64_t v461 = v457 - v456;
            unint64_t v462 = v461 + 1;
            if ((unint64_t)(v461 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v458 - (void)v456) >> 1 > v462) {
              unint64_t v462 = (uint64_t)(v458 - (void)v456) >> 1;
            }
            if (v458 - (unint64_t)v456 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v463 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v463 = v462;
            }
            if (v463) {
              unint64_t v463 = (unint64_t)sub_25B3FBC64(v463);
            }
            else {
              uint64_t v464 = 0;
            }
            float32x2_t v465 = (float *)(v463 + 4 * v461);
            *float32x2_t v465 = v460;
            int32x2_t v466 = v465 + 1;
            while (v457 != v456)
            {
              int v467 = *((_DWORD *)v457-- - 1);
              *((_DWORD *)v465-- - 1) = v467;
            }
            unint64_t v458 = v463 + 4 * v464;
            if (v456) {
              operator delete(v456);
            }
            unint64_t v456 = v465;
            unint64_t v457 = v466;
            uint64_t v410 = v1070;
          }
          else
          {
            *v457++ = v460;
          }
          ++v459;
        }
        while (v459 != v421);
        uint64_t v468 = v456 + 1;
        BOOL v469 = v456 == v457 || v468 == v457;
        uint64_t v470 = v456;
        if (!v469)
        {
          float v471 = *v456;
          uint64_t v470 = v456;
          uint64_t v472 = v456 + 1;
          do
          {
            float v473 = *v472++;
            float v474 = v473;
            if (v471 < v473)
            {
              float v471 = v474;
              uint64_t v470 = v468;
            }
            uint64_t v468 = v472;
          }
          while (v472 != v457);
        }
        if (v4.f32[0] > (float)(v416 + 0.1) && *v470 < 0.1 && (float)(v417 - v416) <= 0.3)
        {
          *(float *)(*(void *)(v412 + 40) + 24) = v417;
          *(float *)(*(void *)(v412 + 40) + 72) = v417;
        }
        if (v456) {
          operator delete(v456);
        }
      }
      uint64_t v411 = v1053;
      if (v420) {
        operator delete(v420);
      }
LABEL_607:
      v412 += 120;
    }
    while (v412 != v411);
LABEL_608:
    v410 += 96;
  }
  while (v410 != v1049);
  unint64_t v378 = a2;
  uint64_t v475 = *a2;
  uint64_t v410 = a2[1];
  uint64_t v1071 = v410;
  if (*a2 == v410) {
    goto LABEL_1381;
  }
  while (2)
  {
    uint64_t v477 = *(void *)(v475 + 40);
    uint64_t v476 = *(void *)(v475 + 48);
    if (0xEEEEEEEEEEEEEEEFLL * ((v476 - v477) >> 3) >= 2 && v476 != v477)
    {
      unint64_t v479 = 0;
      while (1)
      {
        uint64_t v480 = v477 + 120 * v479;
        uint64_t v482 = *(void *)(v480 + 40);
        float32x2_t v481 = (float32x4_t **)(v480 + 40);
        v374.i32[0] = *(_DWORD *)(v482 + 72);
        v373.n128_f32[0] = vabds_f32(*(float *)(v482 + 24), v374.f32[0]);
        if (v373.n128_f32[0] <= 0.1) {
          break;
        }
LABEL_690:
        ++v479;
        uint64_t v477 = *(void *)(v475 + 40);
        if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v475 + 48) - v477) >> 3) <= v479) {
          goto LABEL_691;
        }
      }
      sub_25B5C5E38((uint64_t)__p, a1, v477 + 120 * v479, v373.n128_f64[0], *(double *)v374.i64, *(double *)v375.i64, (int8x16_t)v376);
      v373.n128_u32[0] = *(_DWORD *)(v477 + 120 * v479 + 64);
      if (v373.n128_f32[0] > 0.5 && __p[8] != 0)
      {
LABEL_689:
        uint64_t v410 = v1071;
        goto LABEL_690;
      }
      uint64_t v484 = *(void *)(v475 + 40);
      if (v479)
      {
        uint64_t v485 = v484 + 120 * v479;
        int32x2_t v486 = *(float32x4_t **)(v485 - 80);
        v373.n128_u32[0] = *(_DWORD *)(v485 - 56);
        float32x4_t v1079 = v486[4];
        uint64_t v1094 = v373.n128_u64[0];
        float32x4_t v1061 = v486[1];
        float v487 = (__n128 *)operator new(0x10uLL);
        v375.i64[0] = v1094;
        float32x4_t v488 = vsubq_f32(v1061, v1079);
        __n128 v373 = (__n128)vmulq_f32(v488, v488);
        v373.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0]));
        float32x4_t v374 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1079, 2);
        v374.i32[1] = v1094;
        v374.i32[2] = v373.n128_u32[0];
        *float v487 = (__n128)v374;
        float v489 = v487 + 1;
        uint64_t v484 = *(void *)(v475 + 40);
      }
      else
      {
        float v487 = 0;
        float v489 = 0;
      }
      if (v479 == -1 - 286331153 * ((unint64_t)(*(void *)(v475 + 48) - v484) >> 3))
      {
        double v490 = v487;
        float v491 = v489;
      }
      else
      {
        uint64_t v492 = (char *)v489 - (char *)v487;
        uint64_t v493 = v489 - v487;
        if ((unint64_t)(v493 + 1) >> 60) {
          sub_25B3FBC4C();
        }
        uint64_t v494 = v484 + 120 * (v479 + 1);
        uint64_t v495 = *(float32x4_t **)(v494 + 40);
        float32x4_t v1080 = v495[1];
        int32x4_t v496 = vdupq_laneq_s32((int32x4_t)v1080, 2);
        v496.i32[1] = *(_DWORD *)(v494 + 64);
        *(int32x4_t *)v1095 = v496;
        float32x4_t v1062 = v495[4];
        uint64_t v497 = v492 >> 3;
        if (v492 >> 3 <= (unint64_t)(v493 + 1)) {
          uint64_t v497 = v493 + 1;
        }
        if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v498 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v498 = v497;
        }
        if (v498) {
          unint64_t v498 = (unint64_t)sub_25B3FFAEC(v498);
        }
        float32x4_t v499 = vsubq_f32(v1080, v1062);
        __n128 v373 = (__n128)vmulq_f32(v499, v499);
        v373.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0]));
        float32x4_t v374 = *(float32x4_t *)v1095;
        v374.i32[2] = v373.n128_u32[0];
        double v490 = (__n128 *)(v498 + 16 * v493);
        *double v490 = (__n128)v374;
        float v491 = v490 + 1;
        while (v489 != v487)
        {
          __n128 v500 = v489[-1];
          --v489;
          __n128 v373 = v500;
          v490[-1] = v500;
          --v490;
        }
        if (v487) {
          operator delete(v487);
        }
      }
      uint64_t v501 = (char *)v491 - (char *)v490;
      if (v491 != v490)
      {
        v4.i32[0] = (*v481)[1].i32[2];
        float v502 = (*v481)[4].f32[2];
        unint64_t v503 = v501 >> 4;
        if (v501 <= 2048)
        {
          sub_25B5C6428(v490, v491, v501 >> 4, 0, 0, v373);
        }
        else
        {
          uint64_t v504 = (__n128 *)sub_25B58B0AC(v501 >> 4);
          sub_25B5C6428(v490, v491, v503, v504, v505, v506);
          if (v504) {
            operator delete(v504);
          }
        }
        int v507 = v490 + 1;
        __n128 v373 = *v490;
        if (&v490[1] == v491)
        {
          uint64_t v541 = 0;
          uint64_t v533 = 0;
          v374.i32[0] = (__int32)*v490;
        }
        else
        {
          float32x4_t v508 = *(float32x4_t *)v490;
          int v509 = v490 + 1;
          int v510 = v490;
          uint64_t v511 = (float32x4_t *)&v490[1];
          do
          {
            float32x4_t v512 = *v511++;
            int8x16_t v513 = (int8x16_t)v512;
            unsigned __int8 v514 = vmovn_s32(vcgtq_f32(v508, v512)).u8[0];
            if (v514) {
              unsigned int v515 = -1;
            }
            else {
              unsigned int v515 = 0;
            }
            float32x4_t v508 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v515), v513, (int8x16_t)v508);
            if (v514) {
              int v510 = v509;
            }
            int v509 = (__n128 *)v511;
          }
          while (v511 != (float32x4_t *)v491);
          uint64_t v516 = (char *)v510 - (char *)v490;
          float32x4_t v517 = *(float32x4_t *)v490;
          long long v518 = v490 + 1;
          unint64_t v519 = v490;
          long long v520 = (float32x4_t *)&v490[1];
          do
          {
            float32x4_t v521 = *v520++;
            int8x16_t v522 = (int8x16_t)v521;
            unsigned __int8 v523 = vmovn_s32(vcgtq_f32(v517, v521)).u8[0];
            if (v523) {
              unsigned int v524 = -1;
            }
            else {
              unsigned int v524 = 0;
            }
            float32x4_t v517 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v524), v522, (int8x16_t)v517);
            if (v523) {
              unint64_t v519 = v518;
            }
            long long v518 = (__n128 *)v520;
          }
          while (v520 != (float32x4_t *)v491);
          float32x4_t v374 = *(float32x4_t *)v519;
          float32x4_t v525 = *(float32x4_t *)v490;
          long long v526 = v490 + 1;
          long long v527 = v490;
          int32x2_t v528 = (float32x4_t *)&v490[1];
          do
          {
            float32x4_t v529 = *v528++;
            int8x16_t v530 = (int8x16_t)v529;
            unsigned __int8 v531 = vmovn_s32(vcgtq_f32(v529, v525)).u8[0];
            if (v531) {
              unsigned int v532 = -1;
            }
            else {
              unsigned int v532 = 0;
            }
            float32x4_t v525 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v532), v530, (int8x16_t)v525);
            if (v531) {
              long long v527 = v526;
            }
            long long v526 = (__n128 *)v528;
          }
          while (v528 != (float32x4_t *)v491);
          uint64_t v533 = v516 >> 4;
          uint64_t v534 = (char *)v527 - (char *)v490;
          uint64_t v535 = v490;
          int32x2_t v536 = (float32x4_t *)&v490[1];
          do
          {
            float32x4_t v537 = *v536++;
            float32x4_t v375 = v537;
            unsigned __int8 v538 = vmovn_s32(vcgtq_f32(v537, (float32x4_t)v373)).u8[0];
            BOOL v539 = (v538 & 1) == 0;
            if (v538) {
              unsigned int v540 = -1;
            }
            else {
              unsigned int v540 = 0;
            }
            float32x4_t v376 = (float32x4_t)vdupq_n_s32(v540);
            __n128 v373 = (__n128)vbslq_s8((int8x16_t)v376, (int8x16_t)v375, (int8x16_t)v373);
            if (!v539) {
              uint64_t v535 = v507;
            }
            int v507 = (__n128 *)v536;
          }
          while (v536 != (float32x4_t *)v491);
          uint64_t v541 = v534 >> 4;
          v373.n128_u32[0] = v535->n128_u32[0];
        }
        if (v4.f32[0] >= v502) {
          float v542 = v4.f32[0];
        }
        else {
          float v542 = v502;
        }
        if (v542 < (float)(v374.f32[0] + -1.0))
        {
          long long v543 = *v481;
          float32x4_t v544 = vsubq_f32((*v481)[1], (*v481)[4]);
          v544.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v544, v544)));
          if (v490[v533].n128_f32[2] <= (float)(v544.f32[0] + v544.f32[0])) {
            goto LABEL_693;
          }
          goto LABEL_688;
        }
        if (v502 >= v4.f32[0]) {
          float v545 = v4.f32[0];
        }
        else {
          float v545 = v502;
        }
        v375.f32[0] = v373.n128_f32[0] + 1.0;
        if (v545 > (float)(v373.n128_f32[0] + 1.0))
        {
          int32x2_t v546 = &v490[v541];
          long long v543 = *v481;
          float32x4_t v547 = vsubq_f32((*v481)[1], (*v481)[4]);
          v547.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v547, v547)));
          if (v546->n128_f32[2] >= (float)(v547.f32[0] + v547.f32[0]))
          {
LABEL_693:
            v543[1].i32[2] = v373.n128_u32[0];
            (*v481)[4].i32[2] = v373.n128_u32[0];
            operator delete(v490);
            uint64_t v410 = v1071;
            goto LABEL_691;
          }
          goto LABEL_688;
        }
      }
      if (!v490) {
        goto LABEL_689;
      }
LABEL_688:
      operator delete(v490);
      goto LABEL_689;
    }
LABEL_691:
    v475 += 96;
    if (v475 != v410) {
      continue;
    }
    break;
  }
  unint64_t v378 = a2;
  uint64_t v548 = *a2;
  uint64_t v1063 = a2[1];
  if (*a2 == v1063)
  {
    uint64_t v1071 = *a2;
    uint64_t v410 = *a2;
    goto LABEL_1381;
  }
  while (2)
  {
    uint64_t v550 = *(void *)(v548 + 40);
    uint64_t v549 = *(void *)(v548 + 48);
    unint64_t v551 = 0xEEEEEEEEEEEEEEEFLL * ((v549 - v550) >> 3);
    if (v551 >= 2 && v549 != v550)
    {
      unint64_t v553 = 0;
      while (2)
      {
        if (v553 && (uint64_t)v553 < (int)v551 - 1) {
          goto LABEL_809;
        }
        uint64_t v554 = v550 + 120 * v553;
        uint64_t v556 = *(void *)(v554 + 40);
        int v555 = (float32x4_t **)(v554 + 40);
        v374.i32[0] = *(_DWORD *)(v556 + 72);
        v373.n128_f32[0] = vabds_f32(*(float *)(v556 + 24), v374.f32[0]);
        if (v373.n128_f32[0] > 0.1) {
          goto LABEL_809;
        }
        sub_25B5C5E38((uint64_t)__p, a1, v550 + 120 * v553, v373.n128_f64[0], *(double *)v374.i64, *(double *)v375.i64, (int8x16_t)v376);
        BOOL v557 = *(float *)(v550 + 120 * v553 + 64) <= 0.5 || __p[8] == 0;
        unint64_t v378 = a2;
        if (v557
          || (float32x4_t v374 = (*v555)[4],
              float32x4_t v558 = vsubq_f32((*v555)[1], v374),
              __n128 v373 = (__n128)vmulq_f32(v558, v558),
              sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) <= 0.5))
        {
          if (v553) {
            goto LABEL_711;
          }
          long long v585 = *v555;
          float v586 = *(float *)(*(void *)(*(void *)(v548 + 40) + 160) + 24);
          if ((float)((*v555)[4].f32[2] + 0.1) <= v586)
          {
            uint64_t v1073 = v555;
            uint64_t v587 = *a2;
            uint64_t v588 = a2[1];
            if (*a2 == v588)
            {
              v585[1].f32[2] = v586;
              unint64_t v378 = a2;
              (*v555)[4].f32[2] = v586;
              goto LABEL_711;
            }
            float32x2_t v564 = 0;
            long long v589 = 0;
            unint64_t v590 = 0;
            long long v591 = 0;
            do
            {
              if (*(_DWORD *)(v587 + 92) != *(_DWORD *)(v548 + 92))
              {
                long long v592 = *(float32x4_t **)(*(void *)(v587 + 48) - 80);
                float32x4_t v375 = v585[1];
                float32x4_t v593 = *(float32x4_t *)(*(void *)(*(void *)(v587 + 40) + 40) + 16);
                float32x4_t v374 = vsubq_f32(v375, v593);
                v374.i64[0] = vmulq_f32(v374, v374).u64[0];
                float32x4_t v376 = v592[4];
                if (sqrtf(vaddv_f32(*(float32x2_t *)v374.f32)) < 0.1)
                {
                  float32x4_t v1082 = v592[4];
                  *(float32x4_t *)v1097 = v585[1];
                  int v594 = *(void *)(*(void *)(*(void *)(v587 + 40) + 40) + 24);
                  if ((unint64_t)v591 >= v590)
                  {
                    uint64_t v595 = (v591 - v564) >> 2;
                    unint64_t v596 = v595 + 1;
                    if ((unint64_t)(v595 + 1) >> 62) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v590 - (void)v564) >> 1 > v596) {
                      unint64_t v596 = (uint64_t)(v590 - (void)v564) >> 1;
                    }
                    if (v590 - (unint64_t)v564 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v597 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v597 = v596;
                    }
                    if (v597)
                    {
                      unint64_t v597 = (unint64_t)sub_25B3FBC64(v597);
                      long long v591 = v589;
                    }
                    else
                    {
                      uint64_t v598 = 0;
                    }
                    long long v599 = (char *)(v597 + 4 * v595);
                    *(_DWORD *)long long v599 = v594;
                    long long v589 = v599 + 4;
                    while (v591 != v564)
                    {
                      int v600 = *((_DWORD *)v591 - 1);
                      v591 -= 4;
                      *((_DWORD *)v599 - 1) = v600;
                      v599 -= 4;
                    }
                    unint64_t v590 = v597 + 4 * v598;
                    if (v564) {
                      operator delete(v564);
                    }
                    float32x2_t v564 = v599;
                    long long v591 = v589;
                  }
                  else
                  {
                    *(_DWORD *)long long v591 = v593.i32[2];
                    v591 += 4;
                    long long v589 = v591;
                  }
                  float32x4_t v376 = v1082;
                  float32x4_t v375 = *(float32x4_t *)v1097;
                }
                float32x4_t v601 = vsubq_f32(v375, v376);
                __n128 v373 = (__n128)vmulq_f32(v601, v601);
                if (sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) < 0.1)
                {
                  __int32 v602 = v592[4].i32[2];
                  if ((unint64_t)v591 >= v590)
                  {
                    uint64_t v603 = (v591 - v564) >> 2;
                    unint64_t v604 = v603 + 1;
                    if ((unint64_t)(v603 + 1) >> 62) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v590 - (void)v564) >> 1 > v604) {
                      unint64_t v604 = (uint64_t)(v590 - (void)v564) >> 1;
                    }
                    if (v590 - (unint64_t)v564 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v605 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v605 = v604;
                    }
                    if (v605)
                    {
                      unint64_t v605 = (unint64_t)sub_25B3FBC64(v605);
                      long long v591 = v589;
                    }
                    else
                    {
                      uint64_t v606 = 0;
                    }
                    uint64_t v607 = (char *)(v605 + 4 * v603);
                    *(_DWORD *)uint64_t v607 = v602;
                    long long v589 = v607 + 4;
                    while (v591 != v564)
                    {
                      int v608 = *((_DWORD *)v591 - 1);
                      v591 -= 4;
                      *((_DWORD *)v607 - 1) = v608;
                      v607 -= 4;
                    }
                    unint64_t v590 = v605 + 4 * v606;
                    if (v564) {
                      operator delete(v564);
                    }
                    float32x2_t v564 = v607;
                    long long v591 = v589;
                  }
                  else
                  {
                    *(_DWORD *)long long v591 = v602;
                    v591 += 4;
                    long long v589 = v591;
                  }
                }
              }
              v587 += 96;
            }
            while (v587 != v588);
            if (v591 != v564)
            {
              unint64_t v378 = a2;
              goto LABEL_806;
            }
            __int32 v610 = *(_DWORD *)(*(void *)(*(void *)(v548 + 40) + 160) + 24);
            unint64_t v378 = a2;
            int v555 = v1073;
            (*v1073)[1].i32[2] = v610;
            (*v1073)[4].i32[2] = v610;
            if (v564) {
              operator delete(v564);
            }
LABEL_711:
            uint64_t v559 = *(void *)(v548 + 40);
            unint64_t v560 = 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v548 + 48) - v559) >> 3);
            if (v553 == v560 - 1)
            {
              uint64_t v561 = *v555;
              if (v560 < 2
                || (float)(v561[1].f32[2] + 0.1) <= *(float *)(*(void *)(v559
                                                                         + 8 * ((*(void *)(v548 + 48) - v559) >> 3)
                                                                         - 200)
                                                             + 72))
              {
                uint64_t v1072 = v555;
                uint64_t v562 = *v378;
                uint64_t v563 = v378[1];
                if (v562 == v563)
                {
                  float32x2_t v564 = 0;
                  unint64_t v378 = a2;
                }
                else
                {
                  float32x2_t v564 = 0;
                  __n128 v565 = 0;
                  unint64_t v566 = 0;
                  id v567 = 0;
                  do
                  {
                    if (*(_DWORD *)(v562 + 92) != *(_DWORD *)(v548 + 92))
                    {
                      long long v568 = *(float32x4_t **)(*(void *)(v562 + 48) - 80);
                      float32x4_t v375 = v561[4];
                      float32x4_t v569 = *(float32x4_t *)(*(void *)(*(void *)(v562 + 40) + 40) + 16);
                      float32x4_t v374 = vsubq_f32(v375, v569);
                      v374.i64[0] = vmulq_f32(v374, v374).u64[0];
                      float32x4_t v376 = v568[4];
                      if (sqrtf(vaddv_f32(*(float32x2_t *)v374.f32)) < 0.1)
                      {
                        float32x4_t v1081 = v568[4];
                        *(float32x4_t *)v1096 = v561[4];
                        int v570 = *(void *)(*(void *)(*(void *)(v562 + 40) + 40) + 24);
                        if ((unint64_t)v567 >= v566)
                        {
                          uint64_t v571 = (v567 - v564) >> 2;
                          unint64_t v572 = v571 + 1;
                          if ((unint64_t)(v571 + 1) >> 62) {
                            sub_25B3FBC4C();
                          }
                          if ((uint64_t)(v566 - (void)v564) >> 1 > v572) {
                            unint64_t v572 = (uint64_t)(v566 - (void)v564) >> 1;
                          }
                          if (v566 - (unint64_t)v564 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v573 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v573 = v572;
                          }
                          if (v573)
                          {
                            unint64_t v573 = (unint64_t)sub_25B3FBC64(v573);
                            id v567 = v565;
                          }
                          else
                          {
                            uint64_t v574 = 0;
                          }
                          long long v575 = (char *)(v573 + 4 * v571);
                          *(_DWORD *)long long v575 = v570;
                          __n128 v565 = v575 + 4;
                          while (v567 != v564)
                          {
                            int v576 = *((_DWORD *)v567 - 1);
                            v567 -= 4;
                            *((_DWORD *)v575 - 1) = v576;
                            v575 -= 4;
                          }
                          unint64_t v566 = v573 + 4 * v574;
                          if (v564) {
                            operator delete(v564);
                          }
                          float32x2_t v564 = v575;
                          id v567 = v565;
                        }
                        else
                        {
                          *(_DWORD *)id v567 = v569.i32[2];
                          v567 += 4;
                          __n128 v565 = v567;
                        }
                        float32x4_t v376 = v1081;
                        float32x4_t v375 = *(float32x4_t *)v1096;
                      }
                      float32x4_t v577 = vsubq_f32(v375, v376);
                      __n128 v373 = (__n128)vmulq_f32(v577, v577);
                      if (sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) < 0.1)
                      {
                        __int32 v578 = v568[4].i32[2];
                        if ((unint64_t)v567 >= v566)
                        {
                          uint64_t v579 = (v567 - v564) >> 2;
                          unint64_t v580 = v579 + 1;
                          if ((unint64_t)(v579 + 1) >> 62) {
                            sub_25B3FBC4C();
                          }
                          if ((uint64_t)(v566 - (void)v564) >> 1 > v580) {
                            unint64_t v580 = (uint64_t)(v566 - (void)v564) >> 1;
                          }
                          if (v566 - (unint64_t)v564 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v581 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v581 = v580;
                          }
                          if (v581)
                          {
                            unint64_t v581 = (unint64_t)sub_25B3FBC64(v581);
                            id v567 = v565;
                          }
                          else
                          {
                            uint64_t v582 = 0;
                          }
                          long long v583 = (char *)(v581 + 4 * v579);
                          *(_DWORD *)long long v583 = v578;
                          __n128 v565 = v583 + 4;
                          while (v567 != v564)
                          {
                            int v584 = *((_DWORD *)v567 - 1);
                            v567 -= 4;
                            *((_DWORD *)v583 - 1) = v584;
                            v583 -= 4;
                          }
                          unint64_t v566 = v581 + 4 * v582;
                          if (v564) {
                            operator delete(v564);
                          }
                          float32x2_t v564 = v583;
                          id v567 = v565;
                        }
                        else
                        {
                          *(_DWORD *)id v567 = v578;
                          v567 += 4;
                          __n128 v565 = v567;
                        }
                      }
                    }
                    v562 += 96;
                  }
                  while (v562 != v563);
                  if (v567 != v564)
                  {
                    unint64_t v378 = a2;
                    goto LABEL_806;
                  }
                  uint64_t v559 = *(void *)(v548 + 40);
                  unint64_t v560 = 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v548 + 48) - v559) >> 3);
                  unint64_t v378 = a2;
                }
                if (v560 >= 2)
                {
                  __int32 v609 = *(_DWORD *)(*(void *)(v559 + 120 * v560 - 200) + 72);
                  (*v1072)[1].i32[2] = v609;
                  (*v1072)[4].i32[2] = v609;
                }
LABEL_806:
                if (v564) {
                  operator delete(v564);
                }
              }
            }
          }
        }
        uint64_t v550 = *(void *)(v548 + 40);
        uint64_t v549 = *(void *)(v548 + 48);
LABEL_809:
        ++v553;
        unint64_t v551 = 0xEEEEEEEEEEEEEEEFLL * ((v549 - v550) >> 3);
        if (v551 <= v553) {
          break;
        }
        continue;
      }
    }
    v548 += 96;
    if (v548 != v1063) {
      continue;
    }
    break;
  }
  int v611 = (void *)*v378;
  uint64_t v1071 = v378[1];
  if (*v378 == v1071)
  {
    uint64_t v410 = v378[1];
    goto LABEL_1381;
  }
  while (2)
  {
    uint64_t v614 = v611[5];
    unint64_t v613 = v611[6];
    unint64_t v612 = v611 + 5;
    unint64_t v615 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v613 - v614) >> 3);
    if (v615 < 3) {
      goto LABEL_912;
    }
    if ((int)v615 < 3)
    {
      double v616 = 0;
      long long v617 = 0;
      goto LABEL_893;
    }
    double v616 = 0;
    long long v617 = 0;
    unint64_t v618 = 0;
    long long v619 = 0;
    uint64_t v620 = (v615 - 1);
    uint64_t v621 = 1;
    while (2)
    {
      uint64_t v622 = v621 - 1;
      uint64_t v623 = *v612;
      uint64_t v624 = v621 + 1;
      v4.i32[0] &= 0xFFFFFF00;
      uint64_t v625 = *v612 + 120 * v621;
      unsigned __int8 v628 = *(float32x4_t **)(v625 + 40);
      uint64_t v626 = v625 + 40;
      int v627 = v628;
      float v629 = v628[1].f32[2];
      float v630 = v628[4].f32[2];
      if (vabds_f32(v629, v630) < 0.05 && (uint64_t v631 = v623 + 120 * v621, *(unsigned char *)(v631 + 12)))
      {
        float v632 = *(float *)(v631 + 8);
        float v633 = *v1058;
        uint64_t v634 = *(void *)(v623 + 120 * v622 + 40);
        float v635 = *(float *)(v634 + 24);
        float v636 = *(float *)(v634 + 72);
        uint64_t v637 = *(void *)(v623 + 120 * v624 + 40);
        float v638 = *(float *)(v637 + 24);
        if (v635 < v636) {
          float v635 = v636;
        }
        float v639 = vabds_f32(v632, v635);
        if (v638 < *(float *)(v637 + 72)) {
          float v638 = *(float *)(v637 + 72);
        }
        BOOL v640 = v639 < v633;
        if (vabds_f32(v632, v638) < v633) {
          BOOL v640 = 1;
        }
        if (v632 <= (float)(v629 + (float)(*v1058 * 0.5))) {
          BOOL v640 = 0;
        }
        if (v639 >= v633) {
          v4.f32[0] = v638;
        }
        else {
          v4.f32[0] = v635;
        }
        int v641 = 0;
      }
      else
      {
        BOOL v640 = 0;
        int v641 = 1;
      }
      float32x4_t v642 = vsubq_f32(v627[1], v627[4]);
      if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v642, v642))) > 0.7 && !v640) {
        goto LABEL_890;
      }
      uint64_t v644 = *(void *)(v623 + 120 * v622 + 40);
      float v645 = *(float *)(v644 + 24);
      float v646 = *(float *)(v644 + 72);
      uint64_t v647 = v623 + 120 * v624;
      uint64_t v649 = *(void *)(v647 + 40);
      uint64_t v648 = (void *)(v647 + 40);
      float v650 = *(float *)(v649 + 24);
      float v651 = *(float *)(v649 + 72);
      *(void *)__n128 __p = &unk_2708F2120;
      *(_DWORD *)&__p[32] = 0;
      BOOL v652 = vabds_f32(v646, v629) < 0.001;
      float v653 = *v1058;
      BOOL v654 = v645 > (float)(v646 + *v1058) && v652;
      if (v654)
      {
        unsigned int v655 = 0;
        goto LABEL_843;
      }
      if (v646 <= (float)(v629 + v653)) {
        goto LABEL_890;
      }
      unsigned int v655 = 1;
LABEL_843:
      uint64_t v656 = v644 + 48 * v655;
      long long v657 = *(_OWORD *)(v656 + 16);
      *(_DWORD *)&__p[32] = *(_DWORD *)(v656 + 32);
      *(_OWORD *)&__p[16] = v657;
      v1106[0] = &unk_2708F2120;
      LODWORD(v1106[4]) = 0;
      BOOL v658 = vabds_f32(v650, v630) < 0.001;
      if (v650 >= (float)(v651 + v653)) {
        BOOL v658 = 0;
      }
      if (v658)
      {
        unsigned int v659 = 1;
        goto LABEL_849;
      }
      if (v650 <= (float)(v630 + v653)) {
        goto LABEL_890;
      }
      unsigned int v659 = 0;
LABEL_849:
      uint64_t v660 = *v648 + 48 * v659;
      long long v661 = *(_OWORD *)(v660 + 16);
      LODWORD(v1106[4]) = *(_DWORD *)(v660 + 32);
      *(_OWORD *)&v1106[2] = v661;
      if (v640)
      {
        float v662 = v4.f32[0];
        if (v641) {
          sub_25B4704D8();
        }
      }
      else
      {
        float v662 = *(float *)&__p[24];
        if (*(float *)&__p[24] < *(float *)&v1106[3]) {
          float v662 = *(float *)&v1106[3];
        }
      }
      *(float *)(*(void *)v626 + 24) = v662;
      *(float *)(*(void *)v626 + 72) = v662;
      *(void *)(*(void *)v626 + 16) = *(void *)&__p[16];
      *(void **)(*(void *)v626 + 64) = v1106[2];
      if (!v658)
      {
LABEL_857:
        if (!v654) {
          goto LABEL_890;
        }
        goto LABEL_858;
      }
      if ((unint64_t)v619 < v618)
      {
        *(_DWORD *)long long v619 = v624;
        v619 += 4;
        long long v617 = v619;
        goto LABEL_857;
      }
      uint64_t v663 = (v619 - v616) >> 2;
      unint64_t v664 = v663 + 1;
      if ((unint64_t)(v663 + 1) >> 62) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v618 - (void)v616) >> 1 > v664) {
        unint64_t v664 = (uint64_t)(v618 - (void)v616) >> 1;
      }
      if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v665 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v665 = v664;
      }
      if (v665)
      {
        unint64_t v665 = (unint64_t)sub_25B3FBC64(v665);
        long long v619 = v617;
      }
      else
      {
        uint64_t v666 = 0;
      }
      id v671 = (char *)(v665 + 4 * v663);
      *(_DWORD *)id v671 = v624;
      long long v617 = v671 + 4;
      for (uint64_t k = v616; v619 != v616; v671 -= 4)
      {
        int v673 = *((_DWORD *)v619 - 1);
        v619 -= 4;
        *((_DWORD *)v671 - 1) = v673;
      }
      unint64_t v618 = v665 + 4 * v666;
      if (v616)
      {
        unint64_t v674 = v618;
        operator delete(k);
        unint64_t v618 = v674;
      }
      double v616 = v671;
      long long v619 = v617;
      if (v654)
      {
LABEL_858:
        if ((unint64_t)v619 >= v618)
        {
          uint64_t v667 = (v619 - v616) >> 2;
          unint64_t v668 = v667 + 1;
          if ((unint64_t)(v667 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v618 - (void)v616) >> 1 > v668) {
            unint64_t v668 = (uint64_t)(v618 - (void)v616) >> 1;
          }
          if (v618 - (unint64_t)v616 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v669 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v669 = v668;
          }
          if (v669)
          {
            unint64_t v669 = (unint64_t)sub_25B3FBC64(v669);
            long long v619 = v617;
          }
          else
          {
            uint64_t v670 = 0;
          }
          long long v675 = (char *)(v669 + 4 * v667);
          *(_DWORD *)long long v675 = v622;
          long long v617 = v675 + 4;
          while (v619 != v616)
          {
            int v676 = *((_DWORD *)v619 - 1);
            v619 -= 4;
            *((_DWORD *)v675 - 1) = v676;
            v675 -= 4;
          }
          unint64_t v618 = v669 + 4 * v670;
          if (v616)
          {
            unint64_t v677 = v618;
            operator delete(v616);
            unint64_t v618 = v677;
          }
          double v616 = v675;
          long long v619 = v617;
        }
        else
        {
          *(_DWORD *)long long v619 = v622;
          v619 += 4;
          long long v617 = v619;
        }
      }
LABEL_890:
      uint64_t v621 = v624;
      if (v624 != v620) {
        continue;
      }
      break;
    }
    uint64_t v614 = v611[5];
    unint64_t v613 = v611[6];
LABEL_893:
    memset(__p, 0, 24);
    v1106[0] = __p;
    if (v614 != v613)
    {
      do
      {
        sub_25B521880((void **)v1106, v614);
        v614 += 120;
      }
      while (v614 != v613);
      unint64_t v613 = v611[5];
      uint64_t v678 = v611[6];
      if (v678 != v613)
      {
        uint64_t v679 = v678 - 120;
        id v680 = (void (***)(void))(v678 - 120);
        uint64_t v681 = (void (***)(void))(v678 - 120);
        do
        {
          float v682 = *v681;
          v681 -= 15;
          (*v682)(v680);
          v679 -= 120;
          BOOL v204 = v680 == (void (***)(void))v613;
          id v680 = v681;
        }
        while (!v204);
      }
    }
    v611[6] = v613;
    uint64_t v684 = *(void *)__p;
    uint64_t v683 = *(void *)&__p[8];
    if (*(void *)&__p[8] != *(void *)__p)
    {
      unint64_t v685 = 0;
      do
      {
        uint64_t v686 = v616;
        if (v616 == v617)
        {
LABEL_904:
          uint64_t v687 = v684 + 120 * v685;
          if (v613 >= v611[7])
          {
            unint64_t v613 = sub_25B5219EC(v611 + 5, v687);
          }
          else
          {
            sub_25B5218E4(v613, v687);
            v613 += 120;
            v611[6] = v613;
          }
          v611[6] = v613;
          uint64_t v684 = *(void *)__p;
          uint64_t v683 = *(void *)&__p[8];
        }
        else
        {
          while (v685 != *(_DWORD *)v686)
          {
            v686 += 4;
            if (v686 == v617) {
              goto LABEL_904;
            }
          }
        }
        ++v685;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((v683 - v684) >> 3) > v685);
    }
    v1106[0] = __p;
    sub_25B55E2EC((void ***)v1106);
    if (v616) {
      operator delete(v616);
    }
    unint64_t v378 = a2;
LABEL_912:
    v611 += 12;
    if (v611 != (void *)v1071) {
      continue;
    }
    break;
  }
  uint64_t v410 = *v378;
  uint64_t v1050 = v378[1];
  if (*v378 == v1050) {
    goto LABEL_1380;
  }
  float v688 = 0.5;
  do
  {
    uint64_t v690 = *(void *)(v410 + 40);
    uint64_t v689 = *(void *)(v410 + 48);
    unint64_t v691 = 0xEEEEEEEEEEEEEEEFLL * ((v689 - v690) >> 3);
    if (v691 >= 2 && v689 != v690)
    {
      unint64_t v693 = 0;
      uint64_t v1074 = v410;
      while (1)
      {
        if (!v693 || (uint64_t)v693 >= (int)v691 - 1)
        {
          uint64_t v694 = v690 + 120 * v693;
          uint64_t v697 = *(float32x4_t **)(v694 + 40);
          unint64_t v696 = (float32x4_t **)(v694 + 40);
          uint64_t v695 = v697;
          float v698 = v697[1].f32[2];
          float v699 = v697[4].f32[2];
          v374.f32[0] = *v1058;
          if (vabds_f32(v698, v699) <= *v1058)
          {
            float32x4_t v701 = v695[4];
            float32x4_t v700 = vsubq_f32(v695[1], v701);
            __n128 v373 = (__n128)vmulq_f32(v700, v700);
            v373.n128_f32[0] = sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0]));
            v701.i32[0] = *(_DWORD *)(v690 + 120 * v693 + 64);
            if (v373.n128_f32[0] <= 0.7 || v701.f32[0] <= 0.5)
            {
              if (v693) {
                goto LABEL_1002;
              }
              float v703 = *(float *)(*(void *)(v690 + 160) + 24);
              v701.f32[0] = v703 - v699;
              if ((float)(v703 - v699) >= v374.f32[0] && v701.f32[0] <= 0.5) {
                break;
              }
            }
          }
        }
LABEL_1079:
        ++v693;
        unint64_t v691 = 0xEEEEEEEEEEEEEEEFLL * ((v689 - v690) >> 3);
        if (v691 <= v693) {
          goto LABEL_1080;
        }
      }
      uint64_t v705 = *v378;
      uint64_t v706 = v378[1];
      if (v705 == v706)
      {
        float v707 = 0;
        BOOL v746 = 0;
        unint64_t v378 = a2;
        if (v373.n128_f32[0] >= 0.5) {
          goto LABEL_997;
        }
        goto LABEL_998;
      }
      float v707 = 0;
      float v708 = 0;
      unint64_t v1083 = 0;
      while (1)
      {
        if (*(_DWORD *)(v705 + 92) == *(_DWORD *)(v410 + 92)) {
          goto LABEL_985;
        }
        uint64_t v709 = *(void *)(v705 + 40);
        uint64_t v710 = *(void *)(v705 + 48);
        if (v710 == v709) {
          goto LABEL_985;
        }
        long long v711 = *(float32x4_t **)(v709 + 40);
        float v712 = *(float32x4_t **)(v710 - 80);
        float32x4_t v1098 = v695[1];
        float32x4_t v1064 = v711[1];
        float32x4_t v1054 = v712[4];
        sub_25B5C5E38((uint64_t)__p, a1, v709, *(double *)v712[4].i64, *(double *)v374.i64, *(double *)v701.i64, (int8x16_t)v376);
        sub_25B5C5E38((uint64_t)v1106, a1, *(void *)(v705 + 48) - 120, v713, v714, v715, v716);
        float32x4_t v701 = v1098;
        float32x4_t v717 = vsubq_f32(v1098, v1064);
        float v718 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v717, v717)));
        float v719 = a1[4];
        if (v718 >= v719 || __p[8] == 0)
        {
          uint64_t v410 = v1074;
        }
        else
        {
          __int32 v721 = v711[1].i32[2];
          if ((unint64_t)v708 >= v1083)
          {
            uint64_t v723 = v708 - v707;
            unint64_t v724 = v723 + 1;
            if ((unint64_t)(v723 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v1083 - (void)v707) >> 1 > v724) {
              unint64_t v724 = (uint64_t)(v1083 - (void)v707) >> 1;
            }
            if (v1083 - (unint64_t)v707 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v725 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v725 = v724;
            }
            if (v725) {
              unint64_t v725 = (unint64_t)sub_25B3FBC64(v725);
            }
            else {
              uint64_t v726 = 0;
            }
            long long v727 = (float *)(v725 + 4 * v723);
            *(_DWORD *)long long v727 = v721;
            uint64_t v722 = v727 + 1;
            while (v708 != v707)
            {
              int v728 = *((_DWORD *)v708-- - 1);
              *((_DWORD *)v727-- - 1) = v728;
            }
            unint64_t v1083 = v725 + 4 * v726;
            if (v707) {
              operator delete(v707);
            }
            float v707 = v727;
          }
          else
          {
            *(_DWORD *)float v708 = v721;
            uint64_t v722 = v708 + 1;
          }
          uint64_t v410 = v1074;
          float v719 = a1[4];
          float v708 = v722;
          float32x4_t v701 = v1098;
        }
        float32x4_t v374 = vsubq_f32(v701, v1054);
        v374.i64[0] = vmulq_f32(v374, v374).u64[0];
        v374.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v374.f32));
        if (v374.f32[0] < v719 && LOBYTE(v1106[1]) != 0)
        {
          __int32 v730 = v712[4].i32[2];
          if ((unint64_t)v708 >= v1083)
          {
            uint64_t v732 = v708 - v707;
            unint64_t v733 = v732 + 1;
            if ((unint64_t)(v732 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v1083 - (void)v707) >> 1 > v733) {
              unint64_t v733 = (uint64_t)(v1083 - (void)v707) >> 1;
            }
            if (v1083 - (unint64_t)v707 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v734 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v734 = v733;
            }
            if (v734) {
              unint64_t v734 = (unint64_t)sub_25B3FBC64(v734);
            }
            else {
              uint64_t v735 = 0;
            }
            uint64_t v736 = (float *)(v734 + 4 * v732);
            *(_DWORD *)uint64_t v736 = v730;
            v731 = v736 + 1;
            while (v708 != v707)
            {
              int v737 = *((_DWORD *)v708-- - 1);
              *((_DWORD *)v736-- - 1) = v737;
            }
            unint64_t v1083 = v734 + 4 * v735;
            if (v707) {
              operator delete(v707);
            }
            float v707 = v736;
            uint64_t v410 = v1074;
            goto LABEL_984;
          }
          *(_DWORD *)v708++ = v730;
        }
        v731 = v708;
LABEL_984:
        float v708 = v731;
LABEL_985:
        v705 += 96;
        if (v705 == v706)
        {
          uint64_t v695 = *v696;
          float32x4_t v374 = (*v696)[4];
          float32x4_t v738 = vsubq_f32((*v696)[1], v374);
          __n128 v373 = (__n128)vmulq_f32(v738, v738);
          BOOL v739 = sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) < 0.5;
          if (v708 == v707)
          {
            BOOL v746 = 0;
            unint64_t v378 = a2;
          }
          else
          {
            long long v740 = v707 + 1;
            uint64_t v741 = v707;
            unint64_t v378 = a2;
            if (v707 + 1 != v708)
            {
              float v742 = *v707;
              uint64_t v741 = v707;
              v743 = v707 + 1;
              do
              {
                float v744 = *v743++;
                float v745 = v744;
                if (v744 < v742)
                {
                  float v742 = v745;
                  uint64_t v741 = v740;
                }
                long long v740 = v743;
              }
              while (v743 != v708);
            }
            BOOL v746 = (float)(*v741 - v698) > *v1058;
          }
          if (!v739)
          {
LABEL_997:
            if (v746) {
              goto LABEL_998;
            }
LABEL_999:
            if (v707) {
              operator delete(v707);
            }
            uint64_t v690 = *(void *)(v410 + 40);
            uint64_t v689 = *(void *)(v410 + 48);
LABEL_1002:
            unint64_t v747 = 0xEEEEEEEEEEEEEEEFLL * ((v689 - v690) >> 3);
            if ((int)v747 < 2 || v693 != v747 - 1) {
              goto LABEL_1079;
            }
            float v749 = *(float *)(*(void *)(v690 + 120 * (v747 - 2) + 40) + 72);
            if ((float)(v749 - v698) < *v1058 || (float)(v749 - v698) > 0.5) {
              goto LABEL_1079;
            }
            v1055 = *v696;
            uint64_t v751 = *v378;
            uint64_t v752 = v378[1];
            if (v751 == v752)
            {
              uint64_t v753 = 0;
              long long v754 = 0;
LABEL_1065:
              unint64_t v378 = a2;
              if (v754 == v753)
              {
                BOOL v792 = 0;
              }
              else
              {
                uint64_t v786 = v753 + 1;
                v787 = v753;
                if (v753 + 1 != v754)
                {
                  float v788 = *v753;
                  v787 = v753;
                  v789 = v753 + 1;
                  do
                  {
                    float v790 = *v789++;
                    float v791 = v790;
                    if (v790 < v788)
                    {
                      float v788 = v791;
                      v787 = v786;
                    }
                    uint64_t v786 = v789;
                  }
                  while (v789 != v754);
                }
                BOOL v792 = (float)(*v787 - v699) > *v1058;
              }
              float32x4_t v374 = v1055[4];
              float32x4_t v793 = vsubq_f32(v1055[1], v374);
              __n128 v373 = (__n128)vmulq_f32(v793, v793);
              if (sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) < 0.5 || v792)
              {
                v1055[1].f32[2] = v749;
                (*v696)[4].f32[2] = v749;
              }
              if (v753) {
                operator delete(v753);
              }
              uint64_t v690 = *(void *)(v410 + 40);
              uint64_t v689 = *(void *)(v410 + 48);
              goto LABEL_1079;
            }
            uint64_t v753 = 0;
            long long v754 = 0;
            unint64_t v755 = 0;
            while (2)
            {
              if (*(_DWORD *)(v751 + 92) != *(_DWORD *)(v1074 + 92))
              {
                uint64_t v756 = *(void *)(v751 + 40);
                uint64_t v757 = *(void *)(v751 + 48);
                if (v757 != v756)
                {
                  long long v758 = v753;
                  uint64_t v759 = *(float32x4_t **)(v756 + 40);
                  id v760 = *(float32x4_t **)(v757 - 80);
                  float32x4_t v1084 = v759[1];
                  float32x4_t v1099 = v1055[4];
                  float32x4_t v1065 = v760[4];
                  sub_25B5C5E38((uint64_t)__p, a1, v756, *(double *)v760[4].i64, *(double *)v1099.i64, *(double *)v701.i64, (int8x16_t)v376);
                  sub_25B5C5E38((uint64_t)v1106, a1, *(void *)(v751 + 48) - 120, v761, v762, v763, v764);
                  float32x4_t v701 = v1099;
                  float32x4_t v765 = vsubq_f32(v1099, v1084);
                  float v766 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v765, v765)));
                  float v767 = a1[4];
                  if (v766 < v767 && __p[8] != 0)
                  {
                    __int32 v769 = v759[1].i32[2];
                    if ((unint64_t)v754 >= v755)
                    {
                      uint64_t v771 = v754 - v753;
                      unint64_t v772 = v771 + 1;
                      if ((unint64_t)(v771 + 1) >> 62) {
                        sub_25B3FBC4C();
                      }
                      if ((uint64_t)(v755 - (void)v753) >> 1 > v772) {
                        unint64_t v772 = (uint64_t)(v755 - (void)v753) >> 1;
                      }
                      if (v755 - (unint64_t)v753 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v773 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v773 = v772;
                      }
                      if (v773) {
                        unint64_t v773 = (unint64_t)sub_25B3FBC64(v773);
                      }
                      else {
                        uint64_t v774 = 0;
                      }
                      uint64_t v753 = (float *)(v773 + 4 * v771);
                      *(_DWORD *)uint64_t v753 = v769;
                      long long v770 = v753 + 1;
                      while (v754 != v758)
                      {
                        int v775 = *((_DWORD *)v754-- - 1);
                        *((_DWORD *)v753-- - 1) = v775;
                      }
                      unint64_t v755 = v773 + 4 * v774;
                      if (v758) {
                        operator delete(v758);
                      }
                    }
                    else
                    {
                      *(_DWORD *)long long v754 = v769;
                      long long v770 = v754 + 1;
                    }
                    float v767 = a1[4];
                    long long v754 = v770;
                    float32x4_t v701 = v1099;
                  }
                  float32x4_t v776 = vsubq_f32(v701, v1065);
                  if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v776, v776))) >= v767 || LOBYTE(v1106[1]) == 0)
                  {
LABEL_1045:
                    uint64_t v779 = v754;
                  }
                  else
                  {
                    __int32 v778 = v760[4].i32[2];
                    if ((unint64_t)v754 < v755)
                    {
                      *(_DWORD *)v754++ = v778;
                      goto LABEL_1045;
                    }
                    uint64_t v780 = v754 - v753;
                    unint64_t v781 = v780 + 1;
                    if ((unint64_t)(v780 + 1) >> 62) {
                      sub_25B3FBC4C();
                    }
                    if ((uint64_t)(v755 - (void)v753) >> 1 > v781) {
                      unint64_t v781 = (uint64_t)(v755 - (void)v753) >> 1;
                    }
                    if (v755 - (unint64_t)v753 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v782 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v782 = v781;
                    }
                    if (v782) {
                      unint64_t v782 = (unint64_t)sub_25B3FBC64(v782);
                    }
                    else {
                      uint64_t v783 = 0;
                    }
                    uint64_t v784 = (float *)(v782 + 4 * v780);
                    *(_DWORD *)uint64_t v784 = v778;
                    uint64_t v779 = v784 + 1;
                    while (v754 != v753)
                    {
                      int v785 = *((_DWORD *)v754-- - 1);
                      *((_DWORD *)v784-- - 1) = v785;
                    }
                    unint64_t v755 = v782 + 4 * v783;
                    if (v753) {
                      operator delete(v753);
                    }
                    uint64_t v753 = v784;
                  }
                  long long v754 = v779;
                }
              }
              v751 += 96;
              if (v751 == v752)
              {
                v1055 = *v696;
                uint64_t v410 = v1074;
                goto LABEL_1065;
              }
              continue;
            }
          }
LABEL_998:
          v695[1].f32[2] = v703;
          (*v696)[4].f32[2] = v703;
          goto LABEL_999;
        }
      }
    }
LABEL_1080:
    v410 += 96;
  }
  while (v410 != v1050);
  uint64_t v410 = *v378;
  uint64_t v794 = v378[1];
  if (*v378 == v794) {
    goto LABEL_1380;
  }
  while (2)
  {
    uint64_t v795 = *(void *)(v410 + 40);
    uint64_t v796 = *(void *)(v410 + 48);
    unint64_t v797 = (v796 - v795) / 120;
    if (v797 < 3 || v796 == v795) {
      goto LABEL_1118;
    }
    uint64_t v799 = 0;
    while (2)
    {
      if (!v799 || v799 >= (int)v797 - 1)
      {
        uint64_t v804 = v799 + 1;
        goto LABEL_1117;
      }
      uint64_t v800 = v795 + 120 * v799;
      v803 = *(float32x4_t **)(v800 + 40);
      v801 = (void *)(v800 + 40);
      v802 = v803;
      uint64_t v804 = v799 + 1;
      float v805 = v803[1].f32[2];
      float v806 = v803[4].f32[2];
      float v807 = *v1058;
      if (vabds_f32(v805, v806) > *v1058
        || ((float32x4_t v808 = vsubq_f32(v802[1], v802[4]),
             float v809 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v808, v808))),
             v809 > 0.5)
          ? (BOOL v810 = *(float *)(v795 + 120 * v799 + 64) <= 0.5)
          : (BOOL v810 = 1),
            !v810))
      {
LABEL_1117:
        uint64_t v799 = v804;
        if (v804 == v797) {
          goto LABEL_1118;
        }
        continue;
      }
      break;
    }
    unsigned int v811 = v799 - 1;
    uint64_t v812 = v795 + 120 * v811;
    id v815 = *(float32x4_t **)(v812 + 40);
    uint64_t v814 = v812 + 40;
    v813 = v815;
    float v816 = v815[4].f32[2];
    v817 = (float32x4_t *)v801[15];
    float v818 = v817[1].f32[2];
    float v819 = v817[4].f32[2];
    float v820 = vabds_f32(v815[1].f32[2], v816);
    float v821 = vabds_f32(v818, v819);
    if (v820 <= v807 || v821 >= v807) {
      goto LABEL_1107;
    }
    if (v805 >= v806) {
      float v823 = v805;
    }
    else {
      float v823 = v806;
    }
    if (v819 >= v818) {
      float v819 = v817[1].f32[2];
    }
    if (v823 >= v819
      || (float32x4_t v824 = vsubq_f32(v813[1], v813[4]), sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v824, v824))) <= v809))
    {
LABEL_1107:
      if (v820 < v807 && v821 > v807)
      {
        if (v806 < v805) {
          float v805 = v806;
        }
        if (v818 <= v805)
        {
          float32x4_t v826 = vsubq_f32(v817[1], v817[4]);
          __n128 v373 = (__n128)vmulq_f32(v826, v826);
          if (sqrtf(vaddv_f32((float32x2_t)v373.n128_u64[0])) > v809)
          {
            v802[1].f32[2] = v816;
            *(float *)(*v801 + 72) = v816;
            *(void *)(*v801 + 16) = *(void *)(*(void *)v814 + 16);
            uint64_t v833 = v410;
            uint64_t v834 = (uint64_t *)(v410 + 48);
            uint64_t v835 = sub_25B5C6354(*(void *)(v410 + 40) + 120 * v811 + 120, *(void *)(v410 + 48), *(void *)(v410 + 40) + 120 * v811);
            uint64_t v827 = v835;
            uint64_t v836 = *v834;
            if (*v834 != v835)
            {
              uint64_t v837 = v836 - 120;
              v838 = (void (***)(void))(v836 - 120);
              v839 = (void (***)(void))(v836 - 120);
              unint64_t v378 = a2;
              do
              {
                v840 = *v839;
                v839 -= 15;
                (*v840)(v838);
                v837 -= 120;
                BOOL v204 = v838 == (void (***)(void))v827;
                v838 = v839;
              }
              while (!v204);
              goto LABEL_1131;
            }
LABEL_1130:
            unint64_t v378 = a2;
            goto LABEL_1131;
          }
        }
      }
      goto LABEL_1117;
    }
    v802[1].f32[2] = v818;
    *(float *)(*v801 + 72) = v818;
    *(void *)(*v801 + 64) = *(void *)(v801[15] + 64);
    uint64_t v833 = v410;
    uint64_t v827 = sub_25B5C6354(*(void *)(v410 + 40) + 120 * v804 + 120, *(void *)(v410 + 48), *(void *)(v410 + 40) + 120 * v804);
    uint64_t v828 = *(void *)(v410 + 48);
    if (v828 == v827) {
      goto LABEL_1130;
    }
    uint64_t v829 = v828 - 120;
    id v830 = (void (***)(void))(v828 - 120);
    v831 = (void (***)(void))(v828 - 120);
    unint64_t v378 = a2;
    do
    {
      v832 = *v831;
      v831 -= 15;
      (*v832)(v830);
      v829 -= 120;
      BOOL v204 = v830 == (void (***)(void))v827;
      id v830 = v831;
    }
    while (!v204);
LABEL_1131:
    uint64_t v410 = v833;
    *(void *)(v833 + 48) = v827;
LABEL_1118:
    v410 += 96;
    if (v410 != v794) {
      continue;
    }
    break;
  }
  uint64_t v901 = *v378;
  uint64_t v900 = v378[1];
  if (*v378 == v900) {
    goto LABEL_1472;
  }
  do
  {
    while (sub_25B5C55A0(v901))
      ;
    v901 += 96;
  }
  while (v901 != v900);
  uint64_t v410 = *v378;
  uint64_t v902 = v378[1];
  if (*v378 == v902) {
    goto LABEL_1380;
  }
  do
  {
    uint64_t v904 = *(void *)(v410 + 40);
    uint64_t v903 = *(void *)(v410 + 48);
    uint64_t v905 = v410;
    if (v903 != v904)
    {
      unint64_t v906 = 0;
      do
      {
        uint64_t v907 = v904 + 120 * v906;
        uint64_t v909 = *(void *)(v907 + 40);
        uint64_t v908 = v907 + 40;
        if (vabds_f32(*(float *)(v909 + 24), *(float *)(v909 + 72)) < 0.05)
        {
          sub_25B5C5B40((uint64_t)__p, a1, v905, v906, *v378, v378[1]);
          LODWORD(v688) &= 0xFFFFFF00;
          v910 = *(void **)__p;
          if (*(void *)__p == *(void *)&__p[8])
          {
            unint64_t v378 = a2;
          }
          else
          {
            float v911 = *(float *)(*(void *)v908 + 24);
            unint64_t v378 = a2;
            uint64_t v912 = *a2;
            float v913 = vabds_f32(v911, *(float *)(*(void *)v908 + 72));
            char v914 = 1;
            uint64_t v915 = *(void *)__p;
            while (vabds_f32(*(float *)v915, v911) >= 0.1)
            {
              unint64_t v916 = *(unsigned int *)(v915 + 36);
              if ((v916 & 0x80000000) == 0
                && 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) > v916
                && (uint64_t v917 = *(void *)(v912 + 96 * *(int *)(v915 + 32) + 40),
                    0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v912 + 96 * *(int *)(v915 + 32) + 48) - v917) >> 3) > v916)
                && v913 < 0.05
                && (uint64_t v918 = *(void *)(v917 + 120 * v916 + 40),
                    float v919 = *(float *)(v918 + 24),
                    vabds_f32(v919, *(float *)(v918 + 72)) < 0.05)
                && *(unsigned char *)(v904 + 120 * v906 + 20)
                && vabds_f32(*(float *)(v904 + 120 * v906 + 16), v919) < 0.1)
              {
                char v914 = 0;
                v915 += 48;
                float v688 = *(float *)(v918 + 24);
                if (v915 == *(void *)&__p[8]) {
                  goto LABEL_1250;
                }
              }
              else
              {
                v915 += 48;
                if (v915 == *(void *)&__p[8])
                {
                  float v919 = v688;
                  if (v914) {
                    break;
                  }
LABEL_1250:
                  *(float *)(*(void *)v908 + 24) = v919;
                  *(float *)(*(void *)v908 + 72) = v919;
                  float v688 = v919;
                  break;
                }
              }
            }
          }
          if (v910) {
            operator delete(v910);
          }
          uint64_t v904 = *(void *)(v905 + 40);
          uint64_t v903 = *(void *)(v905 + 48);
        }
        ++v906;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((v903 - v904) >> 3) > v906);
    }
    uint64_t v410 = v905 + 96;
  }
  while (v905 + 96 != v902);
  uint64_t v920 = *v378;
  uint64_t v900 = v378[1];
  long long v921 = a1;
  if (*v378 == v900) {
    goto LABEL_1472;
  }
  do
  {
    while (sub_25B5C55A0(v920))
      ;
    v920 += 96;
  }
  while (v920 != v900);
  uint64_t v925 = *v378;
  uint64_t v410 = v378[1];
  uint64_t v1071 = v410;
  if (*v378 == v410) {
    goto LABEL_1381;
  }
  while (2)
  {
    uint64_t v926 = *(void *)(v925 + 40);
    if (*(void *)(v925 + 48) != v926)
    {
      unint64_t v927 = 0;
      uint64_t v1056 = v925;
      while (1)
      {
        sub_25B5C5E38((uint64_t)v1106, v921, v926 + 120 * v927, v373.n128_f64[0], *(double *)v922.i64, *(double *)v923.i64, v924);
        if (BYTE6(v1106[1])) {
          BOOL v928 = LOBYTE(v1106[1]) == 0;
        }
        else {
          BOOL v928 = 0;
        }
        long long v921 = a1;
        uint64_t v410 = v1071;
        if (!v928) {
          goto LABEL_1338;
        }
        uint64_t v929 = v926 + 120 * v927;
        uint64_t v931 = *(void *)(v929 + 40);
        uint64_t v930 = v929 + 40;
        v922.i32[0] = *(_DWORD *)(v931 + 72);
        v373.n128_f32[0] = vabds_f32(*(float *)(v931 + 24), v922.f32[0]);
        if (v373.n128_f32[0] >= 0.05) {
          goto LABEL_1338;
        }
        sub_25B5C5B40((uint64_t)__p, a1, v925, v927, *a2, a2[1]);
        v933 = *(__n128 **)__p;
        uint64_t v932 = *(__n128 **)&__p[8];
        if (*(void *)__p == *(void *)&__p[8])
        {
          uint64_t v410 = v1071;
          if (!*(void *)__p) {
            goto LABEL_1338;
          }
          goto LABEL_1337;
        }
        v934 = 0;
        unint64_t v935 = 0;
        id v936 = 0;
        unint64_t v937 = 0;
        v938 = 0;
        uint64_t v939 = 0;
        uint64_t v1085 = v930;
        do
        {
          __n128 v373 = *v933;
          *(__n128 *)uint64_t v1101 = *v933;
          v373.n128_f32[0] = fabsf(COERCE_FLOAT(HIDWORD(*(unsigned long long *)v933)) + -1.0);
          if (v373.n128_f32[0] >= 0.00001)
          {
            if (v933[1].n128_u8[8])
            {
              v373.n128_u32[0] = *(_DWORD *)(*(void *)v930 + 24);
              v922.i64[0] = v933->n128_u64[0];
              if (*(float *)v1101 < v373.n128_f32[0])
              {
                if ((unint64_t)v934 >= v935)
                {
                  unint64_t v1067 = v937;
                  uint64_t v945 = v934 - v936;
                  unint64_t v946 = v945 + 1;
                  if ((unint64_t)(v945 + 1) >> 62) {
                    sub_25B3FBC4C();
                  }
                  unint64_t v947 = v935 - (void)v936;
                  unint64_t v948 = (uint64_t)(v935 - (void)v936) >> 1;
                  if (v948 > v946) {
                    unint64_t v946 = v948;
                  }
                  if (v947 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v949 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v949 = v946;
                  }
                  if (v949) {
                    unint64_t v949 = (unint64_t)sub_25B3FBC64(v949);
                  }
                  else {
                    uint64_t v950 = 0;
                  }
                  v955 = (float *)(v949 + 4 * v945);
                  __n128 v373 = *(__n128 *)v1101;
                  float *v955 = *(float *)v1101;
                  v956 = v955 + 1;
                  while (v934 != v936)
                  {
                    unsigned __int32 v957 = *((_DWORD *)v934-- - 1);
                    v373.n128_u32[0] = v957;
                    *((_DWORD *)v955-- - 1) = v957;
                  }
                  unint64_t v935 = v949 + 4 * v950;
                  if (v936)
                  {
                    unint64_t v958 = v949 + 4 * v950;
                    operator delete(v936);
                    unint64_t v935 = v958;
                    uint64_t v930 = v1085;
                  }
                  v934 = v956;
                  id v936 = v955;
                  unint64_t v937 = v1067;
                }
                else
                {
                  __n128 v373 = *v933;
                  *v934++ = *(float *)v1101;
                }
              }
            }
          }
          else if (v933[1].n128_u8[8])
          {
            v373.n128_u32[0] = *(_DWORD *)(*(void *)v930 + 24);
            v922.i64[0] = v933->n128_u64[0];
            if (*(float *)v1101 < v373.n128_f32[0])
            {
              if ((unint64_t)v938 >= v937)
              {
                uint64_t v940 = v938 - v939;
                unint64_t v941 = v940 + 1;
                if ((unint64_t)(v940 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                unint64_t v942 = v935;
                if ((uint64_t)(v937 - (void)v939) >> 1 > v941) {
                  unint64_t v941 = (uint64_t)(v937 - (void)v939) >> 1;
                }
                if (v937 - (unint64_t)v939 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v943 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v943 = v941;
                }
                if (v943) {
                  unint64_t v943 = (unint64_t)sub_25B3FBC64(v943);
                }
                else {
                  uint64_t v944 = 0;
                }
                id v951 = (float *)(v943 + 4 * v940);
                __n128 v373 = *(__n128 *)v1101;
                *id v951 = *(float *)v1101;
                v952 = v951 + 1;
                while (v938 != v939)
                {
                  unsigned __int32 v953 = *((_DWORD *)v938-- - 1);
                  v373.n128_u32[0] = v953;
                  *((_DWORD *)v951-- - 1) = v953;
                }
                unint64_t v937 = v943 + 4 * v944;
                if (v939)
                {
                  unint64_t v954 = v943 + 4 * v944;
                  operator delete(v939);
                  unint64_t v937 = v954;
                }
                v938 = v952;
                uint64_t v939 = v951;
                unint64_t v935 = v942;
                uint64_t v930 = v1085;
              }
              else
              {
                __n128 v373 = *v933;
                *v938++ = *(float *)v1101;
              }
            }
          }
          v933 += 3;
        }
        while (v933 != v932);
        if (v938 != v939) {
          break;
        }
        uint64_t v410 = v1071;
        if (v934 != v936)
        {
          uint64_t v964 = v936 + 1;
          if (v936 + 1 == v934)
          {
            uint64_t v961 = v936;
          }
          else
          {
            float v965 = *v936;
            uint64_t v961 = v936;
            v966 = v936 + 1;
            do
            {
              float v967 = *v966++;
              v922.f32[0] = v967;
              if (v965 < v967)
              {
                float v965 = v922.f32[0];
                uint64_t v961 = v964;
              }
              uint64_t v964 = v966;
            }
            while (v966 != v934);
          }
          uint64_t v939 = v938;
LABEL_1331:
          uint64_t v925 = v1056;
          goto LABEL_1332;
        }
        id v936 = v934;
        uint64_t v925 = v1056;
        if (v934) {
          goto LABEL_1333;
        }
LABEL_1334:
        if (v938) {
          operator delete(v938);
        }
        v933 = *(__n128 **)__p;
        long long v921 = a1;
        if (!*(void *)__p) {
          goto LABEL_1338;
        }
LABEL_1337:
        operator delete(v933);
LABEL_1338:
        ++v927;
        uint64_t v926 = *(void *)(v925 + 40);
        if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v925 + 48) - v926) >> 3) <= v927) {
          goto LABEL_1339;
        }
      }
      v959 = v939 + 1;
      uint64_t v410 = v1071;
      if (v939 + 1 == v938)
      {
        uint64_t v961 = v939;
        goto LABEL_1331;
      }
      float v960 = *v939;
      uint64_t v961 = v939;
      v962 = v939 + 1;
      uint64_t v925 = v1056;
      do
      {
        float v963 = *v962++;
        v922.f32[0] = v963;
        if (v960 < v963)
        {
          float v960 = v922.f32[0];
          uint64_t v961 = v959;
        }
        v959 = v962;
      }
      while (v962 != v938);
LABEL_1332:
      v373.n128_f32[0] = *v961;
      *(float *)(*(void *)v930 + 24) = *v961;
      *(_DWORD *)(*(void *)v930 + 72) = v373.n128_u32[0];
      v938 = v939;
      if (!v936) {
        goto LABEL_1334;
      }
LABEL_1333:
      operator delete(v936);
      goto LABEL_1334;
    }
LABEL_1339:
    v925 += 96;
    if (v925 != v410) {
      continue;
    }
    break;
  }
  unint64_t v378 = a2;
  uint64_t v410 = *a2;
  uint64_t v968 = a2[1];
  if (*a2 == v968)
  {
LABEL_1380:
    uint64_t v1071 = v410;
    goto LABEL_1381;
  }
  do
  {
    uint64_t v970 = *(void *)(v410 + 40);
    uint64_t v969 = *(void *)(v410 + 48);
    uint64_t v971 = v410;
    if (v969 - v970 != 120 && v969 != v970)
    {
      unint64_t v973 = 0;
      do
      {
        sub_25B5C5E38((uint64_t)&v1105, a1, v970 + 120 * v973, v373.n128_f64[0], *(double *)v922.i64, *(double *)v923.i64, v924);
        unint64_t v378 = a2;
        if (BYTE14(v1105))
        {
          sub_25B5C5B40((uint64_t)__p, a1, v971, v973, *a2, a2[1]);
          memset(v1106, 0, 24);
          uint64_t v974 = *(void *)__p;
          uint64_t v975 = *(void *)&__p[8];
          if (*(void *)__p == *(void *)&__p[8])
          {
            v979 = 0;
            v976 = 0;
            uint64_t v978 = 0;
            __n128 v373 = (__n128)vdupq_n_s64(*(unint64_t *)__p);
          }
          else
          {
            v976 = 0;
            do
            {
              if (!*(unsigned char *)(v974 + 30))
              {
                if (v976 >= v1106[2])
                {
                  v976 = sub_25B5C61D0((char **)v1106, v974);
                }
                else
                {
                  *(_OWORD *)v976 = *(_OWORD *)v974;
                  *((void *)v976 + 2) = &unk_2708F2160;
                  int v977 = *(_DWORD *)(v974 + 24);
                  *(_DWORD *)(v976 + 27) = *(_DWORD *)(v974 + 27);
                  *((_DWORD *)v976 + 6) = v977;
                  *((void *)v976 + 4) = *(void *)(v974 + 32);
                  v976 += 48;
                }
                v1106[1] = v976;
              }
              v974 += 48;
            }
            while (v974 != v975);
            __n128 v373 = *(__n128 *)__p;
            uint64_t v978 = (char *)v1106[0];
            v979 = v1106[2];
          }
          *(void *)__n128 __p = v978;
          *(void *)&__p[8] = v976;
          *(__n128 *)v1106 = v373;
          v980 = *(void **)&__p[16];
          *(void *)&__p[16] = v979;
          v1106[2] = v980;
          if (v978 != v976)
          {
            v981 = (float32x4_t *)(v978 + 48);
            uint64_t v982 = (__int32 *)v978;
            if (v978 + 48 != v976)
            {
              float32x4_t v922 = *(float32x4_t *)v978;
              uint64_t v982 = (__int32 *)v978;
              id v983 = (float32x4_t *)(v978 + 48);
              do
              {
                float32x4_t v984 = *v983;
                v983 += 3;
                int8x16_t v923 = (int8x16_t)v984;
                unsigned __int8 v985 = vmovn_s32(vcgtq_f32(v922, v984)).u8[0];
                BOOL v986 = (v985 & 1) == 0;
                if (v985) {
                  unsigned int v987 = -1;
                }
                else {
                  unsigned int v987 = 0;
                }
                int8x16_t v924 = (int8x16_t)vdupq_n_s32(v987);
                float32x4_t v922 = (float32x4_t)vbslq_s8(v924, v923, (int8x16_t)v922);
                if (!v986) {
                  uint64_t v982 = (__int32 *)v981;
                }
                v981 = v983;
              }
              while (v983 != (float32x4_t *)v976);
            }
            v922.i32[0] = *v982;
            uint64_t v988 = v970 + 120 * v973;
            uint64_t v991 = *(void *)(v988 + 40);
            uint64_t v989 = v988 + 40;
            uint64_t v990 = v991;
            v923.i32[0] = *(_DWORD *)(v991 + 24);
            float v992 = *(float *)(v991 + 72);
            *(float *)v924.i32 = fmaxf(*(float *)v923.i32, v992);
            if (*(float *)v924.i32 < (float)(v922.f32[0] + *v1058))
            {
              *(float *)v923.i32 = vabds_f32(*(float *)v923.i32, v992);
              if (*(float *)v923.i32 >= 0.05) {
                v922.f32[0] = *(float *)v924.i32;
              }
              *(_DWORD *)(v990 + 24) = v922.i32[0];
              *(_DWORD *)(*(void *)v989 + 72) = v922.i32[0];
            }
          }
          if (v373.n128_u64[0])
          {
            v1106[1] = (void *)v373.n128_u64[0];
            operator delete((void *)v373.n128_u64[0]);
            uint64_t v978 = *(char **)__p;
          }
          if (v978)
          {
            *(void *)&__p[8] = v978;
            operator delete(v978);
          }
        }
        ++v973;
        uint64_t v970 = *(void *)(v971 + 40);
      }
      while (v973 < 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v971 + 48) - v970) >> 3));
    }
    uint64_t v410 = v971 + 96;
  }
  while (v971 + 96 != v968);
  uint64_t v993 = *v378;
  uint64_t v900 = v378[1];
  if (*v378 != v900)
  {
    do
    {
      while (sub_25B5C55A0(v993))
        ;
      v993 += 96;
    }
    while (v993 != v900);
    uint64_t v410 = *v378;
    uint64_t v1071 = v378[1];
    goto LABEL_1381;
  }
LABEL_1472:
  uint64_t v1071 = v900;
  uint64_t v410 = v900;
LABEL_1381:
  if (*a3 == a3[1]) {
    goto LABEL_1469;
  }
  v373.n128_u32[0] = v64;
  float v994 = sub_25B5C58D0(v410, v1071, v373);
  uint64_t v995 = *v378;
  uint64_t v996 = v378[1];
  if (*v378 == v996) {
    return;
  }
  float v997 = v994;
  do
  {
    uint64_t v998 = *(void *)(v995 + 40);
    uint64_t v999 = *(void *)(v995 + 48);
    while (v998 != v999)
    {
      uint64_t v1000 = *(void *)(v998 + 40);
      float v1001 = *(float *)(v1000 + 24);
      if (vabds_f32(v1001, *(float *)(v1000 + 72)) >= 0.05)
      {
        if (*(unsigned char *)(v998 + 36)) {
          *(unsigned char *)(v998 + 36) = 0;
        }
      }
      else
      {
        uint64_t v1002 = *a3;
        uint64_t v1003 = a3[1];
        if (*a3 != v1003)
        {
          float v1004 = v1001 + 0.2;
          do
          {
            uint64_t v1005 = 0;
            uint64_t v1006 = v1002;
            do
            {
              if (*(float *)(v1006 + 8) < *(float *)(v1002 + v1005 + 24)) {
                uint64_t v1006 = v1002 + v1005 + 16;
              }
              v1005 += 16;
            }
            while (v1005 != 112);
            float v1007 = *(float *)(v1006 + 8);
            if (v1007 >= v1004)
            {
              for (uint64_t m = 0; m != 64; m += 16)
              {
                long long v1009 = *(_OWORD *)(v1002 + m);
                *((void *)&v1009 + 1) = *(void *)(v1002 + m + 16);
                *(_OWORD *)v1106 = v1009;
                uint64_t v1010 = *(void *)(v998 + 40);
                long long v1011 = *(_OWORD *)(v1010 + 16);
                *((void *)&v1011 + 1) = *(void *)(v1010 + 64);
                long long v1105 = v1011;
                sub_25B477E0C((uint64_t)__p, (float32x2_t *)v1106, (float32x2_t *)&v1105);
                if (*(float *)&__p[4] > 0.5 && *(float *)&__p[12] < 0.5 && *(float *)&__p[24] < 20.0)
                {
                  *(float *)(v998 + 32) = v1007;
                  *(unsigned char *)(v998 + 36) = 1;
                }
              }
            }
            v1002 += 128;
          }
          while (v1002 != v1003);
        }
      }
      v998 += 120;
    }
    v995 += 96;
  }
  while (v995 != v996);
  v1014 = a2;
  uint64_t v1015 = *a2;
  uint64_t v1086 = a2[1];
  uint64_t v1016 = a1;
  if (*a2 == v1086) {
    return;
  }
  while (2)
  {
    uint64_t v1018 = *(void *)(v1015 + 40);
    uint64_t v1017 = *(void *)(v1015 + 48);
    if (v1017 != v1018)
    {
      uint64_t v1019 = 0;
      uint64_t v1102 = v1015;
      while (1)
      {
        uint64_t v1020 = v1018 + 120 * v1019;
        uint64_t v1022 = *(void *)(v1020 + 40);
        uint64_t v1021 = v1020 + 40;
        if (vabds_f32(*(float *)(v1022 + 24), *(float *)(v1022 + 72)) < 0.05)
        {
          uint64_t v1023 = v1018 + 120 * v1019;
          if (*(unsigned char *)(v1023 + 36)) {
            break;
          }
        }
LABEL_1463:
        if (++v1019 >= 0xEEEEEEEEEEEEEEEFLL * ((v1017 - v1018) >> 3)) {
          goto LABEL_1464;
        }
      }
      sub_25B5C5B40((uint64_t)__p, v1016, v1015, v1019, *v1014, v1014[1]);
      uint64_t v1024 = v1023 + 32;
      uint64_t v1025 = *(void *)__p;
      uint64_t v1026 = *(void *)&__p[8];
      if (*(void *)__p == *(void *)&__p[8])
      {
        v1029 = 0;
        uint64_t v1016 = a1;
      }
      else
      {
        unint64_t v1027 = 0;
        v1028 = 0;
        v1029 = 0;
        v1030 = 0;
        v1014 = a2;
        do
        {
          if (!*(unsigned char *)(*(void *)(*v1014 + 96 * *(int *)(v1025 + 32) + 40) + 120 * *(int *)(v1025 + 36) + 36))
          {
            if (!*(unsigned char *)(v1024 + 4)) {
              sub_25B4704D8();
            }
            float v1031 = *(float *)v1025;
            float v1032 = *(float *)(*(void *)v1021 + 24);
            if (v1032 < (float)(*(float *)v1024 + -0.2)) {
              float v1032 = *(float *)v1024 + -0.2;
            }
            if (v1031 >= v1032)
            {
              if ((unint64_t)v1030 >= v1027)
              {
                uint64_t v1033 = v1030 - v1029;
                unint64_t v1034 = v1033 + 1;
                if ((unint64_t)(v1033 + 1) >> 62) {
                  sub_25B3FBC4C();
                }
                if ((uint64_t)(v1027 - (void)v1029) >> 1 > v1034) {
                  unint64_t v1034 = (uint64_t)(v1027 - (void)v1029) >> 1;
                }
                if (v1027 - (unint64_t)v1029 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v1035 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v1035 = v1034;
                }
                if (v1035)
                {
                  unint64_t v1035 = (unint64_t)sub_25B3FBC64(v1035);
                  v1030 = v1028;
                }
                else
                {
                  uint64_t v1036 = 0;
                }
                v1037 = (float *)(v1035 + 4 * v1033);
                float *v1037 = v1031;
                v1028 = v1037 + 1;
                while (v1030 != v1029)
                {
                  int v1038 = *((_DWORD *)v1030-- - 1);
                  *((_DWORD *)v1037-- - 1) = v1038;
                }
                unint64_t v1027 = v1035 + 4 * v1036;
                if (v1029) {
                  operator delete(v1029);
                }
                v1029 = v1037;
                v1030 = v1028;
                v1014 = a2;
              }
              else
              {
                *v1030++ = v1031;
                v1028 = v1030;
              }
            }
          }
          v1025 += 48;
        }
        while (v1025 != v1026);
        if (v1029 != v1030)
        {
          v1039 = v1029 + 1;
          uint64_t v1016 = a1;
          if (v1029 + 1 == v1030)
          {
            v1041 = v1029;
          }
          else
          {
            float v1040 = *v1029;
            v1041 = v1029;
            v1042 = v1029 + 1;
            do
            {
              float v1043 = *v1042++;
              float v1044 = v1043;
              if (v1043 < v1040)
              {
                float v1040 = v1044;
                v1041 = v1039;
              }
              v1039 = v1042;
            }
            while (v1042 != v1030);
          }
          uint64_t v1015 = v1102;
LABEL_1454:
          float v1045 = *v1041;
          if (vabds_f32(*v1041, v997) < 0.1) {
            float v1045 = v997;
          }
          *(float *)(*(void *)v1021 + 24) = v1045;
          *(float *)(*(void *)v1021 + 72) = v1045;
          if (*(unsigned char *)(v1024 + 4)) {
            *(unsigned char *)(v1024 + 4) = 0;
          }
          if (v1029) {
            operator delete(v1029);
          }
          if (*(void *)__p) {
            operator delete(*(void **)__p);
          }
          uint64_t v1018 = *(void *)(v1015 + 40);
          uint64_t v1017 = *(void *)(v1015 + 48);
          goto LABEL_1463;
        }
        uint64_t v1016 = a1;
        uint64_t v1015 = v1102;
      }
      if (!*(unsigned char *)(v1024 + 4)) {
        sub_25B4704D8();
      }
      v1041 = (float *)v1024;
      v1014 = a2;
      goto LABEL_1454;
    }
LABEL_1464:
    v1015 += 96;
    if (v1015 != v1086) {
      continue;
    }
    break;
  }
  uint64_t v1047 = *v1014;
  uint64_t v1046 = v1014[1];
  if (*v1014 != v1046)
  {
    do
    {
      while (sub_25B5C55A0(v1047))
        ;
      v1047 += 96;
    }
    while (v1047 != v1046);
    uint64_t v410 = *a2;
    uint64_t v1071 = a2[1];
LABEL_1469:
    while (v410 != v1071)
    {
      sub_25B565F00((void *)v410);
      v410 += 96;
    }
  }
}

void sub_25B5C5290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v54)
  {
    operator delete(v54);
    if (!v53) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v53)
  {
    goto LABEL_5;
  }
  operator delete(v53);
  goto LABEL_5;
}

BOOL sub_25B5C55A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 48) - v1) >> 3);
  if (v2 < 2)
  {
    return 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 40);
    float v5 = *(float *)(v4 + 24);
    unint64_t v6 = 1;
    uint64_t v7 = 160;
    BOOL v8 = 1;
    while (1)
    {
      float v9 = v5;
      float v10 = *(float *)(v4 + 72);
      uint64_t v4 = *(void *)(v1 + v7);
      float v5 = *(float *)(v4 + 24);
      if (vabds_f32(v9, v10) < 0.01 && vabds_f32(v5, *(float *)(v4 + 72)) < 0.01 && vabds_f32(v9, v5) < 0.01) {
        break;
      }
      ++v6;
      v7 += 120;
      BOOL v8 = v2 > v6;
      if (v2 == v6) {
        return 0;
      }
    }
    uint64_t v12 = v1 + 120 * v6;
    *(float *)(*(void *)(v12 - 80) + 72) = v9;
    *(void *)(*(void *)(v12 - 80) + 64) = *(void *)(*(void *)(v1 + v7) + 64);
    uint64_t v13 = *(void *)(v12 + 96);
    uint64_t v14 = *(void *)(v12 + 104);
    if (v13 != v14)
    {
      uint64_t v15 = v1 + 120 * (v6 - 1);
      unint64_t v18 = *(void *)(v15 + 104);
      float32x4_t v16 = (uint64_t *)(v15 + 104);
      unint64_t v17 = v18;
      uint64_t v19 = v16 - 1;
      uint64_t v20 = (unint64_t *)(v16 + 1);
      do
      {
        if (v17 >= *v20)
        {
          uint64_t v22 = (uint64_t)(v17 - *v19) >> 4;
          if ((unint64_t)(v22 + 1) >> 60) {
            sub_25B3FBC4C();
          }
          uint64_t v23 = *v20 - *v19;
          uint64_t v24 = v23 >> 3;
          if (v23 >> 3 <= (unint64_t)(v22 + 1)) {
            uint64_t v24 = v22 + 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          __n128 v44 = v16 + 1;
          if (v25) {
            unint64_t v25 = (unint64_t)sub_25B3FFAEC(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 16 * v22;
          *(void *)unint64_t v27 = &unk_2708F2160;
          int v28 = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v27 + 11) = *(_DWORD *)(v13 + 11);
          *(_DWORD *)(v27 + 8) = v28;
          uint64_t v29 = *v16;
          uint64_t v30 = *v19;
          if (*v16 == *v19)
          {
            uint64_t v34 = *v16;
            unint64_t v32 = v25 + 16 * v22;
          }
          else
          {
            unint64_t v31 = v27 - 16;
            unint64_t v32 = v25 + 16 * v22;
            do
            {
              *(void *)(v32 - 16) = &unk_2708F2160;
              v32 -= 16;
              int v33 = *(_DWORD *)(v29 - 8);
              *(_DWORD *)(v32 + 11) = *(_DWORD *)(v29 - 5);
              *(_DWORD *)(v32 + 8) = v33;
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            uint64_t v34 = *v19;
            uint64_t v29 = *v16;
          }
          unint64_t v17 = v27 + 16;
          *uint64_t v19 = v32;
          uint64_t v41 = v34;
          *float32x4_t v16 = v27 + 16;
          uint64_t v42 = v29;
          unint64_t v35 = *v20;
          unint64_t *v20 = v25 + 16 * v26;
          unint64_t v43 = v35;
          uint64_t v40 = v34;
          sub_25B4391F0((uint64_t)&v40);
        }
        else
        {
          *(void *)unint64_t v17 = &unk_2708F2160;
          int v21 = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v17 + 11) = *(_DWORD *)(v13 + 11);
          *(_DWORD *)(v17 + 8) = v21;
          v17 += 16;
        }
        *float32x4_t v16 = v17;
        v13 += 16;
      }
      while (v13 != v14);
    }
    uint64_t v36 = v7 - 40;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v37 = *(void *)(a1 + 40);
    float32x2_t v45 = &v40;
    do
    {
      sub_25B521880(&v45, v37);
      v37 += 120;
      v36 -= 120;
    }
    while (v36);
    uint64_t v38 = *(void *)(a1 + 48);
    uint64_t v39 = *(void *)(a1 + 40) + 120 * v6 + 120;
    float32x2_t v45 = &v40;
    while (v39 != v38)
    {
      sub_25B521880(&v45, v39);
      v39 += 120;
    }
    sub_25B521750(a1, &v40);
    float32x2_t v45 = &v40;
    sub_25B55E2EC((void ***)&v45);
  }
  return v8;
}

void sub_25B5C58AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  sub_25B55E2EC(&a15);
  _Unwind_Resume(a1);
}

float sub_25B5C58D0(uint64_t a1, uint64_t a2, __n128 a3)
{
  float v3 = a3.n128_f32[0];
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    float v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      sub_25B521234(&v34, *(void *)(v4 + 40), *(void *)(v4 + 48), a3);
      BOOL v8 = v35;
      float v9 = v34;
      for (__n128 __p = v34; v9 != v8; v9 += 2)
      {
        a3.n128_u64[0] = *(void *)v9;
        if ((unint64_t)v6 >= v7)
        {
          __n128 v33 = a3;
          uint64_t v11 = v6 - v5;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v7 - (void)v5) >> 1 > v12) {
            unint64_t v12 = (uint64_t)(v7 - (void)v5) >> 1;
          }
          if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            unint64_t v13 = (unint64_t)sub_25B3FBC64(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = (float *)(v13 + 4 * v11);
          a3 = v33;
          *uint64_t v15 = v33.n128_f32[0];
          float v10 = v15 + 1;
          while (v6 != v5)
          {
            unsigned __int32 v16 = *((_DWORD *)v6-- - 1);
            a3.n128_u32[0] = v16;
            *((_DWORD *)v15-- - 1) = v16;
          }
          unint64_t v7 = v13 + 4 * v14;
          if (v5) {
            operator delete(v5);
          }
          float v5 = v15;
        }
        else
        {
          float *v6 = a3.n128_f32[0];
          float v10 = v6 + 1;
        }
        int v17 = v9[1];
        if ((unint64_t)v10 >= v7)
        {
          uint64_t v18 = v10 - v5;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            sub_25B3FBC4C();
          }
          if ((uint64_t)(v7 - (void)v5) >> 1 > v19) {
            unint64_t v19 = (uint64_t)(v7 - (void)v5) >> 1;
          }
          if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            unint64_t v20 = (unint64_t)sub_25B3FBC64(v20);
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (float *)(v20 + 4 * v18);
          *(_DWORD *)uint64_t v22 = v17;
          unint64_t v6 = v22 + 1;
          while (v10 != v5)
          {
            unsigned __int32 v23 = *((_DWORD *)v10-- - 1);
            a3.n128_u32[0] = v23;
            *((_DWORD *)v22-- - 1) = v23;
          }
          unint64_t v7 = v20 + 4 * v21;
          if (v5) {
            operator delete(v5);
          }
          float v5 = v22;
        }
        else
        {
          *(_DWORD *)float v10 = v17;
          unint64_t v6 = v10 + 1;
        }
      }
      if (__p) {
        operator delete(__p);
      }
      v4 += 96;
    }
    while (v4 != a2);
    if (v6 != v5)
    {
      uint64_t v24 = v5 + 1;
      unint64_t v25 = v5;
      if (v5 + 1 != v6)
      {
        float v26 = *v5;
        unint64_t v25 = v5;
        unint64_t v27 = v5 + 1;
        do
        {
          float v28 = *v27++;
          float v29 = v28;
          if (v26 < v28)
          {
            float v26 = v29;
            unint64_t v25 = v24;
          }
          uint64_t v24 = v27;
        }
        while (v27 != v6);
      }
      float v3 = *v25;
    }
    if (v5) {
      operator delete(v5);
    }
  }
  return v3;
}

void sub_25B5C5B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5C5B40(uint64_t a1, float *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a5 != a6)
  {
    uint64_t v6 = a5;
    unint64_t v32 = 0;
    BOOL v8 = *(float32x2_t **)(*(void *)(a3 + 40) + 120 * (int)a4 + 40);
    float32x2_t v9 = v8[2];
    float32x2_t v10 = v8[8];
    uint64_t v11 = a4;
    do
    {
      uint64_t v13 = *(void *)(v6 + 40);
      uint64_t v12 = *(void *)(v6 + 48);
      if (v12 != v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          int v16 = *(_DWORD *)(v6 + 92);
          int v17 = *(_DWORD *)(a3 + 92);
          if (v11 != v15 || v16 != v17)
          {
            uint64_t v18 = v13 + v14;
            unint64_t v19 = *(int8x16_t **)(v13 + v14 + 40);
            int8x16_t v31 = v19[4];
            int8x16_t v29 = v19[1];
            *(float *)&uint64_t v20 = sub_25B40DB9C(*(float32x2_t *)v29.i8, v9, v10, 0.00001);
            v30.i64[0] = v20;
            v21.f32[0] = sub_25B40DB9C(*(float32x2_t *)v31.i8, v9, v10, 0.00001);
            *(float *)&double v22 = v21.f32[0] >= v30.f32[0] ? v30.f32[0] : v21.f32[0];
            if (*(float *)&v22 <= a2[4])
            {
              HIDWORD(v23) = v29.i32[1];
              uint64_t v36 = &unk_2708F2160;
              v37[0] = 0;
              *(_DWORD *)((char *)v37 + 3) = 0;
              v21.i32[0] = vdupq_laneq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v21, v30), 0), v29, v31), 2).u32[0];
              v21.i32[1] = *(_DWORD *)(v18 + 64);
              if (v16 == v17) {
                *(float *)&double v23 = 1.0;
              }
              else {
                *(float *)&double v23 = 0.0;
              }
              v21.i64[1] = __PAIR64__(LODWORD(v23), LODWORD(v22));
              float32x4_t v35 = v21;
              sub_25B5C5E38((uint64_t)v33, a2, v18, *(double *)v21.i64, v22, v23, v31);
              v37[0] = v34[0];
              *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)v34 + 3);
              LODWORD(v38) = *(_DWORD *)(v6 + 92);
              HIDWORD(v38) = v15;
              if ((unint64_t)v32 >= *(void *)(a1 + 16))
              {
                unint64_t v25 = sub_25B5C61D0((char **)a1, (uint64_t)&v35);
              }
              else
              {
                *(float32x4_t *)unint64_t v32 = v35;
                *((void *)v32 + 2) = &unk_2708F2160;
                int v24 = v37[0];
                *(_DWORD *)(v32 + 27) = *(_DWORD *)((char *)v37 + 3);
                *((_DWORD *)v32 + 6) = v24;
                *((void *)v32 + 4) = v38;
                unint64_t v25 = v32 + 48;
              }
              unint64_t v32 = v25;
              *(void *)(a1 + 8) = v25;
              uint64_t v13 = *(void *)(v6 + 40);
              uint64_t v12 = *(void *)(v6 + 48);
            }
          }
          ++v15;
          v14 += 120;
        }
        while (0xEEEEEEEEEEEEEEEFLL * ((v12 - v13) >> 3) > v15);
      }
      v6 += 96;
    }
    while (v6 != a6);
  }
}

void sub_25B5C5E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_25B5C5E38(uint64_t a1, float *a2, uint64_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  *(void *)a1 = &unk_2708F2160;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 11) = 0;
  uint64_t v8 = *(void *)(a3 + 96);
  uint64_t v7 = *(void *)(a3 + 104);
  unint64_t v9 = (unint64_t)(v7 - v8) >> 4;
  if ((int)v9 >= 1)
  {
    float v13 = 0.0;
    v14.i32[0] = 0;
    float v15 = 0.0;
    float v16 = 0.0;
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
    float v20 = 0.0;
    if (v8 != v7)
    {
      float32x4_t v14 = 0uLL;
      __asm { FMOV            V1.4S, #1.0 }
      uint64_t v26 = *(void *)(a3 + 96);
      do
      {
        if (*(unsigned char *)(v26 + 10)) {
          float v20 = v20 + 1.0;
        }
        if (*(unsigned char *)(v26 + 8)) {
          float v19 = v19 + 1.0;
        }
        if (*(unsigned char *)(v26 + 9)) {
          float v18 = v18 + 1.0;
        }
        a7.i32[0] = *(_DWORD *)(v26 + 11);
        a7 = (int8x16_t)vceqzq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.i8)));
        float32x4_t v14 = (float32x4_t)vbslq_s8(a7, (int8x16_t)v14, (int8x16_t)vaddq_f32(v14, _Q1));
        v26 += 16;
      }
      while (v26 != v7);
      float v17 = v14.f32[3];
      float v16 = v14.f32[2];
      float v15 = v14.f32[1];
    }
    float v56 = v14.f32[0];
    float v27 = (float)(int)v9;
    if (v8 == v7)
    {
      float v28 = 0;
    }
    else
    {
      float v28 = 0;
      int8x16_t v29 = 0;
      unint64_t v30 = 0;
      int8x16_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        if (*(unsigned char *)(v8 + 16 * v32 + 11))
        {
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v33 = v31 - v28;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62) {
              sub_25B3FBC4C();
            }
            if ((uint64_t)(v30 - (void)v28) >> 1 > v34) {
              unint64_t v34 = (uint64_t)(v30 - (void)v28) >> 1;
            }
            if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35)
            {
              unint64_t v35 = (unint64_t)sub_25B3FBC64(v35);
              int8x16_t v31 = v29;
            }
            else
            {
              uint64_t v36 = 0;
            }
            uint64_t v37 = (int *)(v35 + 4 * v33);
            *uint64_t v37 = v32;
            int8x16_t v29 = v37 + 1;
            while (v31 != v28)
            {
              int v38 = *--v31;
              *--uint64_t v37 = v38;
            }
            unint64_t v30 = v35 + 4 * v36;
            if (v28) {
              operator delete(v28);
            }
            float v28 = v37;
          }
          else
          {
            *int8x16_t v31 = v32;
            int8x16_t v29 = v31 + 1;
          }
          uint64_t v8 = *(void *)(a3 + 96);
          uint64_t v7 = *(void *)(a3 + 104);
          int8x16_t v31 = v29;
        }
        ++v32;
      }
      while (v32 < (v7 - v8) >> 4);
      if (v31 != v28)
      {
        uint64_t v40 = v28 + 1;
        int v39 = *v28;
        int v41 = *v28;
        if (v28 + 1 != v31)
        {
          uint64_t v42 = v28 + 1;
          unint64_t v43 = v28;
          __n128 v44 = v28 + 1;
          do
          {
            int v46 = *v44++;
            int v45 = v46;
            BOOL v47 = v41 < v46;
            if (v41 <= v46) {
              int v41 = v45;
            }
            if (v47) {
              unint64_t v43 = v42;
            }
            uint64_t v42 = v44;
          }
          while (v44 != v31);
          int v41 = *v43;
          unint64_t v48 = v28;
          uint64_t v49 = v28 + 1;
          do
          {
            int v51 = *v49++;
            int v50 = v51;
            if (v51 < v39)
            {
              int v39 = v50;
              unint64_t v48 = v40;
            }
            uint64_t v40 = v49;
          }
          while (v49 != v31);
          int v39 = *v48;
        }
        float v13 = (float)(v41 - v39 + 1) / v27;
      }
    }
    float v52 = v56 / v27;
    if ((float)(v56 / v27) < v13) {
      float v52 = v13;
    }
    float v53 = a2[7];
    *(unsigned char *)(a1 + 10) = (float)(v20 / v27) > a2[6];
    *(unsigned char *)(a1 + 8) = (float)(v19 / v27) > v53;
    float v54 = a2[9];
    *(unsigned char *)(a1 + 9) = (float)(v18 / v27) > a2[8];
    *(unsigned char *)(a1 + 11) = v52 > v54;
    *(unsigned char *)(a1 + 12) = (float)(v15 / v27) > a2[10];
    float v55 = a2[13];
    *(unsigned char *)(a1 + 13) = (float)(v16 / v27) > a2[12];
    *(unsigned char *)(a1 + 14) = (float)(v17 / v27) > v55;
    if (v28)
    {
      operator delete(v28);
    }
  }
}

void sub_25B5C61B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_25B5C61D0(char **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  float v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_25B3FBC4C();
  }
  if (0x5555555555555556 * ((a1[2] - v2) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - v2) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v5 = 0x555555555555555;
  }
  if (v5 > 0x555555555555555) {
    sub_25B3FA70C();
  }
  uint64_t v8 = 3 * v5;
  unint64_t v9 = (char *)operator new(48 * v5);
  float32x2_t v10 = &v9[48 * v4];
  *(_OWORD *)float32x2_t v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = &unk_2708F2160;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v10 + 27) = *(_DWORD *)(a2 + 27);
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  uint64_t v11 = v10 + 48;
  if (v3 != v2)
  {
    uint64_t v12 = 0;
    do
    {
      float v13 = &v10[v12];
      *((_OWORD *)v13 - 3) = *(_OWORD *)&v3[v12 - 48];
      *((void *)v13 - 4) = &unk_2708F2160;
      int v14 = *(_DWORD *)&v3[v12 - 24];
      *(_DWORD *)(v13 - 21) = *(_DWORD *)&v3[v12 - 21];
      *((_DWORD *)v13 - 6) = v14;
      *((void *)v13 - 2) = *(void *)&v3[v12 - 16];
      v12 -= 48;
    }
    while (&v3[v12] != v2);
    v10 += v12;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[16 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v11;
}

uint64_t sub_25B5C6354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      long long v9 = *(_OWORD *)(a1 + v6 + 8);
      *(_OWORD *)(v7 + 21) = *(_OWORD *)(a1 + v6 + 21);
      *(_OWORD *)(v7 + 8) = v9;
      if (a1 != a3)
      {
        sub_25B58AD34((char *)(v7 + 40), *(void *)(v8 + 40), *(void *)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 4));
        *(_DWORD *)(v7 + 64) = *(_DWORD *)(v8 + 64);
        sub_25B3FE7A8((char *)(v7 + 72), *(char **)(v8 + 72), *(void *)(v8 + 80), (uint64_t)(*(void *)(v8 + 80) - *(void *)(v8 + 72)) >> 2);
        sub_25B43AB10((char *)(v7 + 96), *(void *)(v8 + 96), *(void *)(v8 + 104), (uint64_t)(*(void *)(v8 + 104) - *(void *)(v8 + 96)) >> 4);
      }
      v6 += 120;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

__n128 sub_25B5C6428(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (float *)a1;
    if (a3 == 2)
    {
      result.n128_u32[0] = a2[-1].n128_u32[2];
      if (result.n128_f32[0] > a1->n128_f32[2])
      {
        BOOL result = *a1;
        *a1 = a2[-1];
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      float v18 = a4;
      unint64_t v19 = a3 >> 1;
      float v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v22 = sub_25B5C6650(a1, v20, v21, a4, result);
        double v23 = &v18[v19];
        result.n128_u64[0] = sub_25B5C6650((__n128 *)&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, v22).n128_u64[0];
        int v24 = &v18[a3];
        unint64_t v25 = v23;
        while (v25 != v24)
        {
          if (v25->n128_f32[2] <= v18->n128_f32[2])
          {
            __n128 v27 = *v18++;
            BOOL result = v27;
          }
          else
          {
            __n128 v26 = *v25++;
            BOOL result = v26;
          }
          *(__n128 *)uint64_t v7 = result;
          v7 += 4;
          if (v18 == v23)
          {
            if (v25 != v24)
            {
              unint64_t v28 = 0;
              do
              {
                BOOL result = v25[v28 / 0x10];
                *(__n128 *)&v7[v28 / 4] = result;
                v28 += 16;
              }
              while (&v25[v28 / 0x10] != v24);
            }
            return result;
          }
        }
        if (v18 != v23)
        {
          unint64_t v29 = 0;
          do
          {
            BOOL result = v18[v29 / 0x10];
            *(__n128 *)&v7[v29 / 4] = result;
            v29 += 16;
          }
          while (&v18[v29 / 0x10] != v23);
        }
      }
      else
      {
        sub_25B5C6428(a1, v20, v21, a4, a5);
        sub_25B5C6428(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        sub_25B5C6834(v7, &v7[4 * (a3 >> 1)], (float *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v18, a5);
      }
    }
    else if (a1 != a2)
    {
      long long v9 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = a1;
        do
        {
          result.n128_u32[0] = v11[1].n128_u32[2];
          float v12 = v11->n128_f32[2];
          uint64_t v11 = v9;
          if (result.n128_f32[0] > v12)
          {
            BOOL result = *v9;
            LODWORD(v13) = v9->n128_u64[1];
            uint64_t v14 = v10;
            while (1)
            {
              *(__n128 *)((char *)a1 + v14 + 16) = *(__n128 *)((char *)a1 + v14);
              if (!v14) {
                break;
              }
              float v15 = *(float *)((char *)&a1->n128_f32[-2] + v14);
              v14 -= 16;
              if (v13 <= v15)
              {
                float v16 = (__n128 *)((char *)a1 + v14 + 16);
                goto LABEL_15;
              }
            }
            float v16 = a1;
LABEL_15:
            *float v16 = result;
          }
          long long v9 = v11 + 1;
          v10 += 16;
        }
        while (&v11[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_25B5C6650(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      BOOL result = *v7;
      *unint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = a2[-1].n128_f32[2];
      float v10 = a1->n128_f32[2];
      if (v9 <= v10) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a2 - 1;
      }
      *a4 = *v11;
      unint64_t v5 = a4 + 1;
      if (v9 <= v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = &a1[a3 >> 1];
      sub_25B5C6428(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_25B5C6428(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        if (v20->n128_f32[2] <= v7->n128_f32[2])
        {
          __n128 v22 = *v7++;
          BOOL result = v22;
        }
        else
        {
          __n128 v21 = *v20++;
          BOOL result = v21;
        }
        *v5++ = result;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              BOOL result = v20[v23];
              v5[v23++] = result;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          BOOL result = v7[v24];
          v5[v24++] = result;
        }
        while (&v7[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      float v12 = a1 + 1;
      BOOL result = *a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          float v15 = v7;
          float v16 = v14;
          uint64_t v7 = v12;
          float v17 = ++v14;
          if (v15[1].n128_f32[2] > v16->n128_f32[2])
          {
            v16[1] = *v16;
            float v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                float v17 = (__n128 *)((char *)a4 + v18);
                if (v15[1].n128_f32[2] <= *(float *)((char *)&a4->n128_f32[-2] + v18)) {
                  break;
                }
                *float v17 = v17[-1];
                v18 -= 16;
                if (!v18)
                {
                  float v17 = a4;
                  break;
                }
              }
            }
          }
          float v12 = v7 + 1;
          BOOL result = *v7;
          *float v17 = *v7;
          v13 += 16;
        }
        while (&v7[1] != a2);
      }
    }
  }
  return result;
}

float *sub_25B5C6834(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (a2[2] <= v11[2])
      {
        v11 += 4;
        if (!--a4) {
          return result;
        }
      }
      __n128 v44 = a3;
      __long long src = a6;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          long long v42 = *(_OWORD *)v11;
          *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v42;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = a4 + 1;
        }
        uint64_t v21 = v22 >> 1;
        float v15 = &v11[4 * (v22 >> 1)];
        uint64_t v14 = a2;
        if (a2 != a3)
        {
          unint64_t v23 = ((char *)a3 - (char *)a2) >> 4;
          uint64_t v14 = a2;
          do
          {
            unint64_t v24 = v23 >> 1;
            unint64_t v25 = &v14[4 * (v23 >> 1)];
            float v26 = v25[2];
            __n128 v27 = v25 + 4;
            v23 += ~(v23 >> 1);
            if (v26 > v15[2]) {
              uint64_t v14 = v27;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        uint64_t v13 = ((char *)v14 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v9 + 1;
        }
        uint64_t v13 = v12 >> 1;
        uint64_t v14 = &a2[4 * (v12 >> 1)];
        float v15 = a2;
        if (a2 != v11)
        {
          unint64_t v16 = ((char *)a2 - (char *)v11) >> 4;
          float v15 = v11;
          do
          {
            unint64_t v17 = v16 >> 1;
            uint64_t v18 = &v15[4 * (v16 >> 1)];
            float v19 = v18[2];
            float v20 = v18 + 4;
            v16 += ~(v16 >> 1);
            if (v14[2] > v19) {
              unint64_t v16 = v17;
            }
            else {
              float v15 = v20;
            }
          }
          while (v16);
        }
        uint64_t v21 = ((char *)v15 - (char *)v11) >> 4;
      }
      a4 -= v21;
      v9 -= v13;
      unint64_t v28 = sub_25B58B110((char *)v15, (char *)a2, (char *)v14);
      unint64_t v29 = v28;
      if (v21 + v13 >= a4 + v9)
      {
        BOOL result = (float *)sub_25B5C6834(v28, v14, v44, a4, v9, __src, a7);
        a2 = v15;
        a6 = __src;
        uint64_t v9 = v13;
        a4 = v21;
        a3 = (float *)v29;
        if (!v13) {
          return result;
        }
      }
      else
      {
        unint64_t v30 = v15;
        a6 = __src;
        BOOL result = (float *)sub_25B5C6834(v11, v30, v28, v21, v13, __src, a7);
        uint64_t v11 = (float *)v29;
        a2 = v14;
        a3 = v44;
        if (!v9) {
          return result;
        }
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v37 = 0;
        do
        {
          *(_OWORD *)&a6[v37 * 4] = *(_OWORD *)&v11[v37];
          v37 += 4;
        }
        while (&v11[v37] != a2);
        int v38 = &a6[v37 * 4];
        if (v38 != a6)
        {
          while (a2 != a3)
          {
            if (a2[2] <= *((float *)a6 + 2))
            {
              long long v41 = *(_OWORD *)a6;
              a6 += 16;
              long long v40 = v41;
            }
            else
            {
              long long v39 = *(_OWORD *)a2;
              a2 += 4;
              long long v40 = v39;
            }
            *(_OWORD *)uint64_t v11 = v40;
            v11 += 4;
            if (a6 == v38) {
              return result;
            }
          }
          return (float *)memmove(v11, a6, v38 - a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v31 = 0;
      do
      {
        *(_OWORD *)&a6[v31 * 4] = *(_OWORD *)&a2[v31];
        v31 += 4;
      }
      while (&a2[v31] != a3);
      unint64_t v32 = (float *)&a6[v31 * 4];
      if (v32 != (float *)a6)
      {
        uint64_t v33 = a3 - 4;
        while (a2 != v11)
        {
          float v34 = *(v32 - 2);
          float v35 = *(a2 - 2);
          if (v34 <= v35) {
            uint64_t v36 = v32;
          }
          else {
            uint64_t v36 = a2;
          }
          if (v34 <= v35) {
            v32 -= 4;
          }
          else {
            a2 -= 4;
          }
          *(_OWORD *)uint64_t v33 = *((_OWORD *)v36 - 1);
          v33 -= 4;
          if (v32 == (float *)a6) {
            return result;
          }
        }
        unint64_t v43 = 0;
        do
        {
          *(_OWORD *)&v33[v43] = *(_OWORD *)&v32[v43 - 4];
          v43 -= 4;
        }
        while (&v32[v43] != (float *)a6);
      }
    }
  }
  return result;
}

char *sub_25B5C6B7C(char *result, char *a2, unint64_t a3, void *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 1) > *((_DWORD *)result + 1))
      {
        uint64_t v7 = *(void *)result;
        *(void *)BOOL result = *((void *)a2 - 1);
        *((void *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      float v20 = a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = (uint64_t)&result[8 * (a3 >> 1)];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_25B5C6DAC((uint64_t)result, v22, v23, a4);
        unint64_t v24 = &v20[v21];
        BOOL result = (char *)sub_25B5C6DAC((uint64_t)&v6[8 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v24);
        unint64_t v25 = &v20[a3];
        float v26 = v24;
        while (v26 != v25)
        {
          int v27 = *((_DWORD *)v26 + 1);
          int v28 = *((_DWORD *)v20 + 1);
          BOOL v29 = v27 <= v28;
          BOOL v30 = v27 > v28;
          unsigned int v31 = v29;
          if (v29) {
            unint64_t v32 = v20;
          }
          else {
            unint64_t v32 = v26;
          }
          v20 += v31;
          v26 += v30;
          *(void *)uint64_t v6 = *v32;
          v6 += 8;
          if (v20 == v24)
          {
            if (v26 != v25)
            {
              uint64_t v33 = 0;
              do
              {
                *(void *)&v6[v33 * 8] = v26[v33];
                ++v33;
              }
              while (&v26[v33] != v25);
            }
            return result;
          }
        }
        if (v20 != v24)
        {
          uint64_t v34 = 0;
          do
          {
            *(void *)&v6[v34 * 8] = v20[v34];
            ++v34;
          }
          while (&v20[v34] != v24);
        }
      }
      else
      {
        sub_25B5C6B7C(result, v22, v23, a4, a5);
        sub_25B5C6B7C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_25B435734(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (result != a2)
    {
      uint64_t v9 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result;
        do
        {
          int v12 = *((_DWORD *)v11 + 3);
          int v13 = *((_DWORD *)v11 + 1);
          uint64_t v11 = v9;
          if (v12 > v13)
          {
            uint64_t v14 = *(void *)v9;
            uint64_t v15 = HIDWORD(*(void *)v11);
            uint64_t v16 = v10;
            while (1)
            {
              *(void *)&result[v16 + 8] = *(void *)&result[v16];
              if (!v16) {
                break;
              }
              int v17 = *(_DWORD *)&result[v16 - 4];
              v16 -= 8;
              if (v17 >= (int)v15)
              {
                uint64_t v18 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            uint64_t v18 = result;
LABEL_15:
            *(void *)uint64_t v18 = v14;
          }
          uint64_t v9 = v11 + 8;
          v10 += 8;
        }
        while (v11 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_25B5C6DAC(uint64_t result, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      *unint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      int v8 = *(_DWORD *)(a2 - 4);
      int v9 = *(_DWORD *)(result + 4);
      BOOL v10 = v8 <= v9;
      if (v8 <= v9) {
        uint64_t v11 = (void *)result;
      }
      else {
        uint64_t v11 = (void *)(a2 - 8);
      }
      *a4 = *v11;
      unint64_t v4 = a4 + 1;
      if (v10) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = result + 8 * (a3 >> 1);
      sub_25B5C6B7C(result, v19, a3 >> 1, a4, a3 >> 1);
      BOOL result = sub_25B5C6B7C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v20 = v6 + 8 * (a3 >> 1);
      while (v20 != a2)
      {
        BOOL v21 = *(_DWORD *)(v20 + 4) <= *(_DWORD *)(v6 + 4);
        if (*(_DWORD *)(v20 + 4) <= *(_DWORD *)(v6 + 4)) {
          uint64_t v22 = (void *)v6;
        }
        else {
          uint64_t v22 = (void *)v20;
        }
        v20 += 8 * (*(_DWORD *)(v20 + 4) > *(_DWORD *)(v6 + 4));
        v6 += 8 * v21;
        *v4++ = *v22;
        if (v6 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              v4[v23] = *(void *)(v20 + v23 * 8);
              ++v23;
            }
            while (v20 + v23 * 8 != a2);
          }
          return result;
        }
      }
      if (v6 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          v4[v24] = *(void *)(v6 + v24 * 8);
          ++v24;
        }
        while (v6 + v24 * 8 != v19);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 8;
      *a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          uint64_t v15 = v6;
          uint64_t v16 = v14;
          uint64_t v6 = v12;
          int v17 = ++v14;
          if (*(_DWORD *)(v15 + 12) > *((_DWORD *)v16 + 1))
          {
            v16[1] = *v16;
            int v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                int v17 = (void *)((char *)a4 + v18);
                if (*(_DWORD *)(v15 + 12) <= *(_DWORD *)((char *)a4 + v18 - 4)) {
                  break;
                }
                *int v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  int v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t v12 = v6 + 8;
          *int v17 = *(void *)v6;
          v13 += 8;
        }
        while (v6 + 8 != a2);
      }
    }
  }
  return result;
}

void sub_25B5C6F98(char **a1, uint64_t a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 <= 0)
  {
    int v9 = 0;
    BOOL v10 = 0;
    uint64_t v6 = *(void *)(a2 + 40);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 40);
    uint64_t v7 = v6 + 120 * (a3 - 1);
    LODWORD(v8) = *(_DWORD *)(*(void *)(v7 + 40) + 72);
    HIDWORD(v8) = *(_DWORD *)(v7 + 64);
    uint64_t v21 = v8;
    int v9 = (char *)operator new(8uLL);
    *(void *)int v9 = v21;
    BOOL v10 = v9 + 8;
    *a1 = v9;
    a1[1] = v9 + 8;
    a1[2] = v9 + 8;
  }
  if ((int)(-286331153 * ((unint64_t)(*(void *)(a2 + 48) - v6) >> 3) - 1) > a3)
  {
    uint64_t v11 = v10 - v9;
    uint64_t v12 = (v10 - v9) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_25B3FBC4C();
    }
    uint64_t v14 = v6 + 120 * a3;
    LODWORD(v15) = *(_DWORD *)(*(void *)(v14 + 160) + 24);
    HIDWORD(v15) = *(_DWORD *)(v14 + 184);
    uint64_t v22 = v15;
    if (v11 >> 2 > v13) {
      unint64_t v13 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)sub_25B3FCAD4(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (char *)(v16 + 8 * v12);
    *(void *)uint64_t v18 = v22;
    unint64_t v19 = v18 + 8;
    if (v10 != v9)
    {
      do
      {
        uint64_t v20 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v18 - 1) = v20;
        v18 -= 8;
      }
      while (v10 != v9);
      int v9 = *a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = (char *)(v16 + 8 * v17);
    if (v9) {
      operator delete(v9);
    }
    a1[1] = v19;
  }
}

void sub_25B5C710C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25B5C7128(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8 = *a2;
  uint64_t v84 = a2[1];
  if (*a2 != v84)
  {
    unsigned __int32 v9 = a5.n128_u32[0];
    uint64_t v11 = a2;
    char v85 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v8 + 40);
      uint64_t v13 = *(void *)(v8 + 48);
      if (v13 != v14) {
        break;
      }
LABEL_126:
      v8 += 96;
      if (v8 == v84) {
        return v85 & 1;
      }
    }
    uint64_t v15 = 0;
    uint64_t v89 = v8;
    while (1)
    {
      unint64_t v16 = *(unint64_t **)a3;
      uint64_t v17 = *(unint64_t **)(a3 + 8);
      if (*(unint64_t **)a3 != v17)
      {
        do
        {
          a5.n128_u64[0] = *v16;
          BOOL v18 = *v16 == *(_DWORD *)(v8 + 92) && v15 == HIDWORD(*v16);
          if (v18) {
            goto LABEL_125;
          }
          ++v16;
        }
        while (v16 != v17);
      }
      sub_25B5C5E38((uint64_t)v99, (float *)a1, v14 + 120 * v15, a5.n128_f64[0], a6, a7, a8);
      if (v99[11] && v99[9] != 0) {
        break;
      }
LABEL_124:
      uint64_t v14 = *(void *)(v8 + 40);
      uint64_t v13 = *(void *)(v8 + 48);
LABEL_125:
      if (0xEEEEEEEEEEEEEEEFLL * ((v13 - v14) >> 3) <= ++v15) {
        goto LABEL_126;
      }
    }
    sub_25B5C5B40((uint64_t)&v97, (float *)a1, v8, v15, *v11, v11[1]);
    sub_25B5C5B40((uint64_t)&v95, (float *)a1, v8, 0, *v11, v11[1]);
    sub_25B5C5B40((uint64_t)&v93, (float *)a1, v8, -1 - 286331153 * ((*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3), *v11, v11[1]);
    uint64_t v20 = v14 + 120 * v15;
    uint64_t v22 = *(void *)(v20 + 40);
    uint64_t v21 = v20 + 40;
    a5.n128_u32[0] = *(_DWORD *)(v22 + 24);
    LODWORD(a6) = *(_DWORD *)(v22 + 72);
    a7 = vabds_f32(a5.n128_f32[0], *(float *)&a6);
    if (a7 < 0.3)
    {
      uint64_t v23 = (int *)v95;
      if (v95 == v96)
      {
        int v24 = 0;
      }
      else
      {
        int v24 = 0;
        float v25 = *(float *)&a6 >= a5.n128_f32[0] ? a5.n128_f32[0] : *(float *)&a6;
        a7 = v25;
        *(float *)a8.i32 = a5.n128_f32[0] >= *(float *)&a6 ? a5.n128_f32[0] : *(float *)&a6;
        do
        {
          int v26 = v23[9];
          uint64_t v27 = *(void *)(*v11 + 96 * v23[8] + 40);
          long long v28 = *(_OWORD *)v23;
          v23 += 12;
          float v29 = *((float *)&v28 + 1);
          uint64_t v30 = v27 + 120 * v26;
          BOOL v31 = *(float *)&v28 + -0.3 < a7;
          uint64_t v32 = *(void *)(v30 + 40);
          float v33 = *(float *)(v32 + 24);
          if (v33 < *(float *)(v32 + 72)) {
            float v33 = *(float *)(v32 + 72);
          }
          int v34 = v29 > 0.5 && v31;
          if (v33 <= *(float *)a8.i32) {
            int v34 = 0;
          }
          v24 += v34;
        }
        while (v23 != v96);
      }
      float v35 = v93;
      if (v93 != v94)
      {
        if (*(float *)&a6 >= a5.n128_f32[0]) {
          float v36 = a5.n128_f32[0];
        }
        else {
          float v36 = *(float *)&a6;
        }
        a7 = v36;
        if (a5.n128_f32[0] < *(float *)&a6) {
          a5.n128_f32[0] = *(float *)&a6;
        }
        uint64_t v37 = (int *)v93;
        do
        {
          int v38 = v37[9];
          uint64_t v39 = *(void *)(*v11 + 96 * v37[8] + 40);
          long long v40 = *(_OWORD *)v37;
          v37 += 12;
          HIDWORD(a6) = DWORD1(v40);
          *(double *)a8.i64 = *(float *)&v40 + -0.3;
          LODWORD(a6) = DWORD1(v40);
          uint64_t v41 = v39 + 120 * v38;
          BOOL v42 = *(double *)a8.i64 < a7;
          uint64_t v43 = *(void *)(v41 + 40);
          a8.i32[0] = *(_DWORD *)(v43 + 24);
          if (*(float *)a8.i32 < *(float *)(v43 + 72)) {
            a8.i32[0] = *(_DWORD *)(v43 + 72);
          }
          int v44 = *(float *)&a6 > 0.5 && v42;
          if (*(float *)a8.i32 <= a5.n128_f32[0]) {
            int v44 = 0;
          }
          v24 += v44;
        }
        while (v37 != v94);
      }
      if (v24)
      {
        if (!v93) {
          goto LABEL_120;
        }
        goto LABEL_119;
      }
    }
    __n128 __p = 0;
    double v91 = 0;
    unint64_t v92 = 0;
    int v45 = (__n128 *)v97;
    int v46 = v98;
    if (v97 == v98)
    {
      __n128 v61 = 0;
      BOOL v47 = 0;
    }
    else
    {
      BOOL v47 = 0;
      do
      {
        float v48 = *(float *)(*(void *)v21 + 72);
        if (*(float *)(*(void *)v21 + 24) >= v48) {
          float v48 = *(float *)(*(void *)v21 + 24);
        }
        uint64_t v49 = *(void *)(a3 + 8);
        if (*(void *)a3 == v49)
        {
          char v51 = 0;
        }
        else
        {
          uint64_t v50 = *(void *)a3 + 8;
          do
          {
            a7 = COERCE_DOUBLE(vceq_s32(*(int32x2_t *)(v50 - 8), (int32x2_t)v45[2].n128_u64[0]));
            char v51 = LOBYTE(a7) & BYTE4(a7);
            if (LODWORD(a7) & HIDWORD(a7)) {
              break;
            }
            BOOL v18 = v50 == v49;
            v50 += 8;
          }
          while (!v18);
        }
        a5 = *v45;
        LODWORD(a7) = *(_DWORD *)(a1 + 64);
        *(float *)&a6 = v48 + *(float *)&a7;
        if (COERCE_FLOAT(*v45) > *(float *)&a6 && v51 & 1 | (v45[1].n128_u8[11] == 0) | (v45[1].n128_u8[9] == 0))
        {
          if ((unint64_t)v47 >= v92)
          {
            float v53 = (__n128 *)__p;
            uint64_t v54 = ((char *)v47 - (unsigned char *)__p) >> 4;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            uint64_t v56 = v92 - (void)__p;
            if ((uint64_t)(v92 - (void)__p) >> 3 > v55) {
              unint64_t v55 = v56 >> 3;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              unint64_t v57 = (unint64_t)sub_25B3FFAEC(v57);
              a5 = *v45;
            }
            else
            {
              uint64_t v58 = 0;
            }
            BOOL v59 = (__n128 *)(v57 + 16 * v54);
            *BOOL v59 = a5;
            float v52 = v59 + 1;
            if (v47 != v53)
            {
              do
              {
                __n128 v60 = v47[-1];
                --v47;
                a5 = v60;
                v59[-1] = v60;
                --v59;
              }
              while (v47 != v53);
              BOOL v47 = (__n128 *)__p;
            }
            __n128 __p = v59;
            double v91 = v52;
            unint64_t v92 = v57 + 16 * v58;
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            __n128 *v47 = a5;
            float v52 = v47 + 1;
          }
          double v91 = v52;
          BOOL v47 = v52;
        }
        v45 += 3;
      }
      while (v45 != v46);
      __n128 v61 = (__n128 *)__p;
    }
    if (v47 == v61 && (a4 & 1) == 0)
    {
      uint64_t v11 = a2;
      uint64_t v8 = v89;
      goto LABEL_116;
    }
    uint64_t v11 = a2;
    a5.n128_u32[0] = v9;
    v62.n128_f32[0] = sub_25B5C58D0(*a2, a2[1], a5);
    uint64_t v8 = v89;
    float v63 = sub_25B5C77AC((__n128 **)&__p, v62);
    uint64_t v64 = v14 + 120 * v15;
    if (*(unsigned char *)(v64 + 20))
    {
      __n128 v65 = (float *)(v64 + 16);
    }
    else
    {
      uint64_t v66 = v14 + 120 * v15;
      if (!*(unsigned char *)(v66 + 12)) {
        goto LABEL_92;
      }
      __n128 v65 = (float *)(v66 + 8);
    }
    float v63 = *v65;
LABEL_92:
    *(float *)(*(void *)v21 + 24) = v63;
    *(float *)(*(void *)v21 + 72) = v63;
    unsigned int v67 = *(_DWORD *)(v89 + 92);
    int8x16_t v68 = *(unint64_t **)a3;
    unsigned __int32 v69 = *(unint64_t **)(a3 + 8);
    uint64_t v70 = *(unint64_t **)a3;
    if (*(unint64_t **)a3 == v69)
    {
LABEL_98:
      a5.n128_u64[0] = __PAIR64__(v15, v67);
      unint64_t v72 = *(void *)(a3 + 16);
      if ((unint64_t)v69 >= v72)
      {
        unint64_t v86 = a5.n128_u64[0];
        uint64_t v74 = v69 - v68;
        if ((unint64_t)(v74 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v75 = v72 - (void)v68;
        uint64_t v76 = v75 >> 2;
        if (v75 >> 2 <= (unint64_t)(v74 + 1)) {
          uint64_t v76 = v74 + 1;
        }
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v76;
        }
        if (v77) {
          unint64_t v77 = (unint64_t)sub_25B3FCAD4(v77);
        }
        else {
          uint64_t v78 = 0;
        }
        uint64_t v79 = (unint64_t *)(v77 + 8 * v74);
        a5.n128_u64[0] = v86;
        *uint64_t v79 = v86;
        unint64_t v73 = v79 + 1;
        float32x2_t v81 = *(unint64_t **)a3;
        float32x4_t v80 = *(unint64_t **)(a3 + 8);
        if (v80 != *(unint64_t **)a3)
        {
          do
          {
            unint64_t v82 = *--v80;
            a5.n128_u64[0] = v82;
            *--uint64_t v79 = v82;
          }
          while (v80 != v81);
          float32x4_t v80 = *(unint64_t **)a3;
        }
        *(void *)a3 = v79;
        *(void *)(a3 + 8) = v73;
        *(void *)(a3 + 16) = v77 + 8 * v78;
        if (v80) {
          operator delete(v80);
        }
      }
      else
      {
        *unsigned __int32 v69 = a5.n128_u64[0];
        unint64_t v73 = v69 + 1;
      }
      *(void *)(a3 + 8) = v73;
      char v85 = 1;
      __n128 v61 = (__n128 *)__p;
    }
    else
    {
      while (1)
      {
        a5.n128_u64[0] = *v70;
        if (*v70 == v67 && v15 == HIDWORD(*v70)) {
          break;
        }
        if (++v70 == v69) {
          goto LABEL_98;
        }
      }
      char v85 = 1;
    }
LABEL_116:
    if (v61)
    {
      double v91 = v61;
      operator delete(v61);
    }
    float v35 = v93;
    if (!v93) {
      goto LABEL_120;
    }
LABEL_119:
    operator delete(v35);
LABEL_120:
    if (v95) {
      operator delete(v95);
    }
    if (v97) {
      operator delete(v97);
    }
    goto LABEL_124;
  }
  char v85 = 0;
  return v85 & 1;
}

void sub_25B5C7748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (v25) {
    operator delete(v25);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

float sub_25B5C77AC(__n128 **a1, __n128 a2)
{
  float v2 = a2.n128_f32[0];
  unint64_t v4 = *a1;
  float v3 = a1[1];
  if (v3 == *a1) {
    return v2;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unsigned __int32 v9 = 0;
  do
  {
    __n128 v10 = *v4;
    a2.n128_f64[0] = fabsf(COERCE_FLOAT(HIDWORD(*(unsigned long long *)v4)) + -1.0);
    if (a2.n128_f64[0] >= 0.000001
      || (a2.n128_u32[0] = v4->n128_u64[1], v10.n128_f32[2] >= 0.1)
      || (__n128 v49 = *v4, a2.n128_u32[0] = HIDWORD(v4->n128_u64[0]), v10.n128_f32[1] <= 0.3))
    {
      uint64_t v11 = v7;
    }
    else if ((unint64_t)v9 >= v8)
    {
      uint64_t v12 = ((char *)v9 - (char *)v6) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v8 - (void)v6) >> 3 > v13) {
        unint64_t v13 = (uint64_t)(v8 - (void)v6) >> 3;
      }
      if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)sub_25B3FFAEC(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (__n128 *)(v14 + 16 * v12);
      a2 = v49;
      *unint64_t v16 = v49;
      uint64_t v11 = v16 + 1;
      while (v7 != (__n128 *)v6)
      {
        __n128 v17 = v7[-1];
        --v7;
        a2 = v17;
        v16[-1] = v17;
        --v16;
      }
      unint64_t v8 = v14 + 16 * v15;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = (float32x4_t *)v16;
      unsigned __int32 v9 = v11;
    }
    else
    {
      a2 = *v4;
      *v9++ = v49;
      uint64_t v11 = v9;
    }
    ++v4;
    uint64_t v7 = v11;
  }
  while (v4 != v3);
  if (v9 != (__n128 *)v6)
  {
    BOOL v18 = v6 + 1;
    unint64_t v19 = (float *)v6;
    if (&v6[1] != (float32x4_t *)v9)
    {
      float32x4_t v20 = *v6;
      unint64_t v19 = (float *)v6;
      uint64_t v21 = v6 + 1;
      do
      {
        float32x4_t v22 = *v21++;
        int8x16_t v23 = (int8x16_t)v22;
        unsigned __int8 v24 = vmovn_s32(vcgtq_f32(v22, v20)).u8[0];
        if (v24) {
          unsigned int v25 = -1;
        }
        else {
          unsigned int v25 = 0;
        }
        float32x4_t v20 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v25), v23, (int8x16_t)v20);
        if (v24) {
          unint64_t v19 = (float *)v18;
        }
        BOOL v18 = v21;
      }
      while (v21 != (float32x4_t *)v9);
    }
    float v2 = *v19;
    goto LABEL_74;
  }
  int v26 = *a1;
  uint64_t v27 = a1[1];
  if (*a1 == v27)
  {
    long long v28 = 0;
    int v44 = *a1;
    goto LABEL_65;
  }
  long long v28 = 0;
  float v29 = 0;
  unint64_t v30 = 0;
  BOOL v31 = 0;
  do
  {
    a2.n128_f32[0] = COERCE_FLOAT(v26->n128_u64[1]);
    if (a2.n128_f32[0] >= 0.1 || (__n128 v50 = *v26, a2.n128_u32[0] = HIDWORD(v26->n128_u64[0]), a2.n128_f32[0] <= 0.3))
    {
      uint64_t v32 = v29;
    }
    else if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = v31 - v28;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v30 - (void)v28) >> 3 > v34) {
        unint64_t v34 = (uint64_t)(v30 - (void)v28) >> 3;
      }
      if (v30 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)sub_25B3FFAEC(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = (__n128 *)(v35 + 16 * v33);
      a2 = v50;
      *uint64_t v37 = v50;
      uint64_t v32 = v37 + 1;
      while (v29 != v28)
      {
        __n128 v38 = v29[-1];
        --v29;
        a2 = v38;
        v37[-1] = v38;
        --v37;
      }
      unint64_t v30 = v35 + 16 * v36;
      if (v28) {
        operator delete(v28);
      }
      long long v28 = v37;
      BOOL v31 = v32;
    }
    else
    {
      a2 = *v26;
      *v31++ = v50;
      uint64_t v32 = v31;
    }
    ++v26;
    float v29 = v32;
  }
  while (v26 != v27);
  uint64_t v39 = (char *)v31 - (char *)v28;
  if (v31 == v28)
  {
    int v44 = *a1;
    int v26 = a1[1];
LABEL_65:
    if ((char *)v26 - (char *)v44 <= 2048)
    {
      sub_25B5C7DE0(v44, v26, v26 - v44, 0, 0, a2);
    }
    else
    {
      int v45 = (__n128 *)sub_25B58B0AC(v26 - v44);
      sub_25B5C7DE0(v44, v26, v26 - v44, v45, v46, v47);
      if (v45) {
        operator delete(v45);
      }
    }
    float v2 = (*a1)->n128_f32[0];
    if (!v28) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  unint64_t v40 = v39 >> 4;
  if (v39 <= 2048)
  {
    sub_25B5C7BB0(v28, v31, v39 >> 4, 0, 0, a2);
  }
  else
  {
    uint64_t v41 = (__n128 *)sub_25B58B0AC(v39 >> 4);
    sub_25B5C7BB0(v28, v31, v40, v41, v42, v43);
    if (v41) {
      operator delete(v41);
    }
  }
  float v2 = v28->n128_f32[0];
LABEL_73:
  operator delete(v28);
LABEL_74:
  if (v6) {
    operator delete(v6);
  }
  return v2;
}

void sub_25B5C7B7C(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_25B5C7BB0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (float *)a1;
    if (a3 == 2)
    {
      result.n128_u32[0] = a2[-1].n128_u32[1];
      if (result.n128_f32[0] > a1->n128_f32[1])
      {
        BOOL result = *a1;
        *a1 = a2[-1];
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      BOOL v18 = (float *)a4;
      unint64_t v19 = a3 >> 1;
      float32x4_t v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v22 = sub_25B5C854C(a1, v20, v21, a4, result);
        int8x16_t v23 = (__n128 *)&v18[4 * v19];
        result.n128_u64[0] = sub_25B5C854C((__n128 *)&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, v22).n128_u64[0];
        unsigned __int8 v24 = &v18[4 * a3];
        unsigned int v25 = v23;
        while (v25 != (__n128 *)v24)
        {
          float v26 = v25->n128_f32[1];
          float v27 = v18[1];
          if (v26 > v27) {
            long long v28 = v25;
          }
          else {
            long long v28 = (__n128 *)v18;
          }
          v18 += 4 * (v26 <= v27);
          v25 += v26 > v27;
          BOOL result = *v28;
          *(__n128 *)uint64_t v7 = *v28;
          v7 += 4;
          if (v18 == (float *)v23)
          {
            if (v25 != (__n128 *)v24)
            {
              unint64_t v29 = 0;
              do
              {
                BOOL result = v25[v29 / 0x10];
                *(__n128 *)&v7[v29 / 4] = result;
                v29 += 16;
              }
              while (&v25[v29 / 0x10] != (__n128 *)v24);
            }
            return result;
          }
        }
        if (v18 != (float *)v23)
        {
          uint64_t v30 = 0;
          do
          {
            BOOL result = *(__n128 *)&v18[v30];
            *(__n128 *)&v7[v30] = result;
            v30 += 4;
          }
          while (&v18[v30] != (float *)v23);
        }
      }
      else
      {
        sub_25B5C7BB0(a1, v20, v21, a4, a5);
        sub_25B5C7BB0(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        sub_25B5C81FC(v7, &v7[4 * (a3 >> 1)], (float *)a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (a1 != a2)
    {
      unsigned __int32 v9 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = a1;
        do
        {
          result.n128_u32[0] = v11[1].n128_u32[1];
          float v12 = v11->n128_f32[1];
          uint64_t v11 = v9;
          if (result.n128_f32[0] > v12)
          {
            BOOL result = *v9;
            LODWORD(v13) = HIDWORD(v9->n128_u64[0]);
            uint64_t v14 = v10;
            while (1)
            {
              *(__n128 *)((char *)a1 + v14 + 16) = *(__n128 *)((char *)a1 + v14);
              if (!v14) {
                break;
              }
              float v15 = *(float *)((char *)&a1->n128_f32[-3] + v14);
              v14 -= 16;
              if (v13 <= v15)
              {
                unint64_t v16 = (__n128 *)((char *)a1 + v14 + 16);
                goto LABEL_15;
              }
            }
            unint64_t v16 = a1;
LABEL_15:
            *unint64_t v16 = result;
          }
          unsigned __int32 v9 = v11 + 1;
          v10 += 16;
        }
        while (&v11[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_25B5C7DE0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (float *)a1;
    if (a3 == 2)
    {
      result.n128_u32[0] = a2[-1].n128_u32[1];
      if (result.n128_f32[0] > a1->n128_f32[1])
      {
        BOOL result = *a1;
        *a1 = a2[-1];
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      BOOL v18 = (float *)a4;
      unint64_t v19 = a3 >> 1;
      float32x4_t v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v22 = sub_25B5C8010(a1, v20, v21, a4, result);
        int8x16_t v23 = (__n128 *)&v18[4 * v19];
        result.n128_u64[0] = sub_25B5C8010((__n128 *)&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, v22).n128_u64[0];
        unsigned __int8 v24 = &v18[4 * a3];
        unsigned int v25 = v23;
        while (v25 != (__n128 *)v24)
        {
          float v26 = v25->n128_f32[1];
          float v27 = v18[1];
          if (v26 > v27) {
            long long v28 = v25;
          }
          else {
            long long v28 = (__n128 *)v18;
          }
          v18 += 4 * (v26 <= v27);
          v25 += v26 > v27;
          BOOL result = *v28;
          *(__n128 *)uint64_t v7 = *v28;
          v7 += 4;
          if (v18 == (float *)v23)
          {
            if (v25 != (__n128 *)v24)
            {
              unint64_t v29 = 0;
              do
              {
                BOOL result = v25[v29 / 0x10];
                *(__n128 *)&v7[v29 / 4] = result;
                v29 += 16;
              }
              while (&v25[v29 / 0x10] != (__n128 *)v24);
            }
            return result;
          }
        }
        if (v18 != (float *)v23)
        {
          uint64_t v30 = 0;
          do
          {
            BOOL result = *(__n128 *)&v18[v30];
            *(__n128 *)&v7[v30] = result;
            v30 += 4;
          }
          while (&v18[v30] != (float *)v23);
        }
      }
      else
      {
        sub_25B5C7DE0(a1, v20, v21, a4, a5);
        sub_25B5C7DE0(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        sub_25B5C81FC(v7, &v7[4 * (a3 >> 1)], (float *)a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (a1 != a2)
    {
      unsigned __int32 v9 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = a1;
        do
        {
          result.n128_u32[0] = v11[1].n128_u32[1];
          float v12 = v11->n128_f32[1];
          uint64_t v11 = v9;
          if (result.n128_f32[0] > v12)
          {
            BOOL result = *v9;
            LODWORD(v13) = HIDWORD(v9->n128_u64[0]);
            uint64_t v14 = v10;
            while (1)
            {
              *(__n128 *)((char *)a1 + v14 + 16) = *(__n128 *)((char *)a1 + v14);
              if (!v14) {
                break;
              }
              float v15 = *(float *)((char *)&a1->n128_f32[-3] + v14);
              v14 -= 16;
              if (v13 <= v15)
              {
                unint64_t v16 = (__n128 *)((char *)a1 + v14 + 16);
                goto LABEL_15;
              }
            }
            unint64_t v16 = a1;
LABEL_15:
            *unint64_t v16 = result;
          }
          unsigned __int32 v9 = v11 + 1;
          v10 += 16;
        }
        while (&v11[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_25B5C8010(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      BOOL result = *v7;
      *unint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = a2[-1].n128_f32[1];
      float v10 = a1->n128_f32[1];
      if (v9 <= v10) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a2 - 1;
      }
      *a4 = *v11;
      unint64_t v5 = a4 + 1;
      if (v9 <= v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = &a1[a3 >> 1];
      sub_25B5C7DE0(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_25B5C7DE0(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float32x4_t v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        float v21 = v20->n128_f32[1];
        float v22 = v7->n128_f32[1];
        if (v21 <= v22) {
          int8x16_t v23 = v7;
        }
        else {
          int8x16_t v23 = v20;
        }
        v20 += v21 > v22;
        v7 += v21 <= v22;
        BOOL result = *v23;
        *v5++ = *v23;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v24 = 0;
            do
            {
              BOOL result = v20[v24];
              v5[v24++] = result;
            }
            while (&v20[v24] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v25 = 0;
        do
        {
          BOOL result = v7[v25];
          v5[v25++] = result;
        }
        while (&v7[v25] != v19);
      }
    }
    else if (a1 != a2)
    {
      float v12 = a1 + 1;
      BOOL result = *a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          float v15 = v7;
          unint64_t v16 = v14;
          uint64_t v7 = v12;
          __n128 v17 = ++v14;
          if (v15[1].n128_f32[1] > v16->n128_f32[1])
          {
            v16[1] = *v16;
            __n128 v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                __n128 v17 = (__n128 *)((char *)a4 + v18);
                if (v15[1].n128_f32[1] <= *(float *)((char *)&a4->n128_f32[-3] + v18)) {
                  break;
                }
                *__n128 v17 = v17[-1];
                v18 -= 16;
                if (!v18)
                {
                  __n128 v17 = a4;
                  break;
                }
              }
            }
          }
          float v12 = v7 + 1;
          BOOL result = *v7;
          *__n128 v17 = *v7;
          v13 += 16;
        }
        while (&v7[1] != a2);
      }
    }
  }
  return result;
}

float *sub_25B5C81FC(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (a2[1] <= v11[1])
      {
        v11 += 4;
        if (!--a4) {
          return result;
        }
      }
      int v44 = a3;
      __long long src = a6;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          long long v42 = *(_OWORD *)v11;
          *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v42;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = a4 + 1;
        }
        uint64_t v21 = v22 >> 1;
        float v15 = &v11[4 * (v22 >> 1)];
        uint64_t v14 = a2;
        if (a2 != a3)
        {
          unint64_t v23 = ((char *)a3 - (char *)a2) >> 4;
          uint64_t v14 = a2;
          do
          {
            unint64_t v24 = v23 >> 1;
            uint64_t v25 = &v14[4 * (v23 >> 1)];
            float v26 = v25[1];
            float v27 = v25 + 4;
            v23 += ~(v23 >> 1);
            if (v26 > v15[1]) {
              uint64_t v14 = v27;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        uint64_t v13 = ((char *)v14 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v9 + 1;
        }
        uint64_t v13 = v12 >> 1;
        uint64_t v14 = &a2[4 * (v12 >> 1)];
        float v15 = a2;
        if (a2 != v11)
        {
          unint64_t v16 = ((char *)a2 - (char *)v11) >> 4;
          float v15 = v11;
          do
          {
            unint64_t v17 = v16 >> 1;
            uint64_t v18 = &v15[4 * (v16 >> 1)];
            float v19 = v18[1];
            float32x4_t v20 = v18 + 4;
            v16 += ~(v16 >> 1);
            if (v14[1] > v19) {
              unint64_t v16 = v17;
            }
            else {
              float v15 = v20;
            }
          }
          while (v16);
        }
        uint64_t v21 = ((char *)v15 - (char *)v11) >> 4;
      }
      a4 -= v21;
      v9 -= v13;
      long long v28 = sub_25B58B110((char *)v15, (char *)a2, (char *)v14);
      unint64_t v29 = v28;
      if (v21 + v13 >= a4 + v9)
      {
        BOOL result = (float *)sub_25B5C81FC(v28, v14, v44, a4, v9, __src, a7);
        a2 = v15;
        a6 = __src;
        uint64_t v9 = v13;
        a4 = v21;
        a3 = (float *)v29;
        if (!v13) {
          return result;
        }
      }
      else
      {
        uint64_t v30 = v15;
        a6 = __src;
        BOOL result = (float *)sub_25B5C81FC(v11, v30, v28, v21, v13, __src, a7);
        uint64_t v11 = (float *)v29;
        a2 = v14;
        a3 = v44;
        if (!v9) {
          return result;
        }
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v37 = 0;
        do
        {
          *(_OWORD *)&a6[v37] = *(_OWORD *)&v11[v37];
          v37 += 4;
        }
        while (&v11[v37] != a2);
        __n128 v38 = &a6[v37];
        if (v38 != a6)
        {
          while (a2 != a3)
          {
            float v39 = a2[1];
            float v40 = a6[1];
            if (v39 <= v40) {
              uint64_t v41 = a6;
            }
            else {
              uint64_t v41 = a2;
            }
            a2 += 4 * (v39 > v40);
            a6 += 4 * (v39 <= v40);
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v41;
            v11 += 4;
            if (a6 == v38) {
              return result;
            }
          }
          return (float *)memmove(v11, a6, (char *)v38 - (char *)a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v31 = 0;
      do
      {
        *(_OWORD *)&a6[v31] = *(_OWORD *)&a2[v31];
        v31 += 4;
      }
      while (&a2[v31] != a3);
      uint64_t v32 = &a6[v31];
      if (v32 != a6)
      {
        uint64_t v33 = a3 - 4;
        while (a2 != v11)
        {
          float v34 = *(v32 - 3);
          float v35 = *(a2 - 3);
          if (v34 <= v35) {
            uint64_t v36 = v32;
          }
          else {
            uint64_t v36 = a2;
          }
          if (v34 <= v35) {
            v32 -= 4;
          }
          else {
            a2 -= 4;
          }
          *(_OWORD *)uint64_t v33 = *((_OWORD *)v36 - 1);
          v33 -= 4;
          if (v32 == a6) {
            return result;
          }
        }
        unint64_t v43 = 0;
        do
        {
          *(_OWORD *)&v33[v43] = *(_OWORD *)&v32[v43 - 4];
          v43 -= 4;
        }
        while (&v32[v43] != a6);
      }
    }
  }
  return result;
}

__n128 sub_25B5C854C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      BOOL result = *v7;
      *unint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = a2[-1].n128_f32[1];
      float v10 = a1->n128_f32[1];
      if (v9 <= v10) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a2 - 1;
      }
      *a4 = *v11;
      unint64_t v5 = a4 + 1;
      if (v9 <= v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      float v19 = &a1[a3 >> 1];
      sub_25B5C7BB0(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_25B5C7BB0(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float32x4_t v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        float v21 = v20->n128_f32[1];
        float v22 = v7->n128_f32[1];
        if (v21 <= v22) {
          unint64_t v23 = v7;
        }
        else {
          unint64_t v23 = v20;
        }
        v20 += v21 > v22;
        v7 += v21 <= v22;
        BOOL result = *v23;
        *v5++ = *v23;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v24 = 0;
            do
            {
              BOOL result = v20[v24];
              v5[v24++] = result;
            }
            while (&v20[v24] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v25 = 0;
        do
        {
          BOOL result = v7[v25];
          v5[v25++] = result;
        }
        while (&v7[v25] != v19);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      BOOL result = *a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          float v15 = v7;
          unint64_t v16 = v14;
          uint64_t v7 = v12;
          unint64_t v17 = ++v14;
          if (v15[1].n128_f32[1] > v16->n128_f32[1])
          {
            v16[1] = *v16;
            unint64_t v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                unint64_t v17 = (__n128 *)((char *)a4 + v18);
                if (v15[1].n128_f32[1] <= *(float *)((char *)&a4->n128_f32[-3] + v18)) {
                  break;
                }
                *unint64_t v17 = v17[-1];
                v18 -= 16;
                if (!v18)
                {
                  unint64_t v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t v12 = v7 + 1;
          BOOL result = *v7;
          *unint64_t v17 = *v7;
          v13 += 16;
        }
        while (&v7[1] != a2);
      }
    }
  }
  return result;
}

uint64_t sub_25B5C8738(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8 = *a2;
  uint64_t v94 = a2[1];
  if (*a2 != v94)
  {
    char v9 = a4;
    unsigned __int32 v10 = a5.n128_u32[0];
    uint64_t v12 = a1;
    char v96 = 0;
    float v13 = a5.n128_f32[0] + -0.1;
    float v14 = 0.5;
    float v90 = a5.n128_f32[0] + -0.1;
    unsigned __int32 v91 = a5.n128_u32[0];
    while (1)
    {
      uint64_t v16 = *(void *)(v8 + 40);
      uint64_t v15 = *(void *)(v8 + 48);
      if (v15 != v16) {
        break;
      }
LABEL_124:
      v8 += 96;
      if (v8 == v94) {
        return v96 & 1;
      }
    }
    unsigned int v17 = 0;
    unint64_t v18 = 0;
    uint64_t v100 = v8;
    while (1)
    {
      uint64_t v19 = v17;
      float32x4_t v20 = *(unint64_t **)a3;
      float v21 = *(unint64_t **)(a3 + 8);
      if (*(unint64_t **)a3 != v21)
      {
        do
        {
          a5.n128_u64[0] = *v20;
          BOOL v22 = *v20 == *(_DWORD *)(v8 + 92) && v18 == HIDWORD(*v20);
          if (v22) {
            goto LABEL_123;
          }
          ++v20;
        }
        while (v20 != v21);
      }
      uint64_t v23 = v16 + 120 * v18;
      uint64_t v25 = *(void *)(v23 + 40);
      uint64_t v24 = v23 + 40;
      a5.n128_u32[0] = *(_DWORD *)(v25 + 24);
      LODWORD(a6) = *(_DWORD *)(v25 + 72);
      if (*(float *)&a6 < a5.n128_f32[0]) {
        a5.n128_f32[0] = *(float *)&a6;
      }
      if (a5.n128_f32[0] <= v13) {
        break;
      }
LABEL_123:
      ++v18;
      unsigned int v17 = v19 + 1;
      if (0xEEEEEEEEEEEEEEEFLL * ((v15 - v16) >> 3) <= v18) {
        goto LABEL_124;
      }
    }
    uint64_t v102 = v19;
    sub_25B5C5E38((uint64_t)v112, (float *)v12, v16 + 120 * v18, a5.n128_f64[0], a6, a7, a8);
    uint64_t v99 = v16;
    if (v112[8])
    {
      a5.n128_f64[0] = *(float *)(v16 + 120 * v18 + 64);
      uint64_t v16 = *(void *)(v8 + 40);
      if (a5.n128_f64[0] > 0.3)
      {
LABEL_121:
        LODWORD(v19) = v102;
LABEL_122:
        uint64_t v15 = *(void *)(v8 + 48);
        goto LABEL_123;
      }
      float v26 = *(float32x2_t **)(v16 + 120 * (int)v18 + 40);
      uint64_t v27 = *a2;
      uint64_t v28 = a2[1];
      if (vabds_f32(v26[3].f32[0], v26[9].f32[0]) < 0.05)
      {
        uint64_t v19 = v102;
        if (v27 != v28)
        {
          uint64_t v95 = *(void *)(v8 + 40);
          float32x2_t v29 = v26[8];
          long long v104 = *(_OWORD *)v26[2].f32;
          LODWORD(v30) = v26[3];
          uint64_t v93 = *a2;
          uint64_t v31 = *a2;
          uint64_t v98 = a2[1];
          while (1)
          {
            uint64_t v32 = *(void *)(v31 + 40);
            uint64_t v33 = *(void *)(v31 + 48) - v32;
            if (v33) {
              break;
            }
LABEL_32:
            v31 += 96;
            uint64_t v28 = v98;
            if (v31 == v98)
            {
              char v9 = a4;
              float v13 = v90;
              unsigned __int32 v10 = v91;
              uint64_t v8 = v100;
              uint64_t v12 = a1;
              float v14 = 0.5;
              uint64_t v27 = v93;
              goto LABEL_35;
            }
          }
          unint64_t v34 = 0;
          int v35 = *(_DWORD *)(v31 + 92);
          int v36 = *(_DWORD *)(v100 + 92);
          unint64_t v37 = 0xEEEEEEEEEEEEEEEFLL * (v33 >> 3);
          uint64_t v38 = v32 + 40;
          while (1)
          {
            if (v19 != v34 || v35 != v36)
            {
              float v39 = *(float *)(*(void *)v38 + 24);
              float v40 = *(float *)(*(void *)v38 + 72);
              if (vabds_f32(v39, v40) >= 0.05)
              {
                long long v103 = *(_OWORD *)v26[8].f32;
                float v41 = sub_25B40DB9C(v26[2], *(float32x2_t *)&v104, v29, 0.00001);
                float v42 = sub_25B40DB9C(*(float32x2_t *)&v103, *(float32x2_t *)&v104, v29, 0.00001);
                uint64_t v19 = v102;
                if (v42 >= v41) {
                  float v42 = v41;
                }
                if (v42 <= *(float *)(a1 + 16))
                {
                  float v43 = v40 >= v39 ? v39 : v40;
                  a5.n128_f64[0] = vabds_f32(v30, v43);
                  if (a5.n128_f64[0] < 0.3) {
                    break;
                  }
                }
              }
            }
            ++v34;
            v38 += 120;
            if (v37 <= v34) {
              goto LABEL_32;
            }
          }
          char v9 = a4;
          float v13 = v90;
          unsigned __int32 v10 = v91;
          uint64_t v8 = v100;
          uint64_t v12 = a1;
          float v14 = 0.5;
          uint64_t v16 = v95;
          goto LABEL_122;
        }
      }
    }
    else
    {
      uint64_t v27 = *a2;
      uint64_t v28 = a2[1];
    }
LABEL_35:
    sub_25B5C5B40((uint64_t)&v110, (float *)v12, v8, v18, v27, v28);
    __n128 __p = 0;
    uint64_t v108 = 0;
    unint64_t v109 = 0;
    int v45 = (__n128 *)v110;
    int v44 = v111;
    if (v110 == v111)
    {
      __n128 v60 = 0;
      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v46 = 0;
      do
      {
        float v47 = *(float *)(*(void *)v24 + 72);
        if (*(float *)(*(void *)v24 + 24) >= v47) {
          float v47 = *(float *)(*(void *)v24 + 24);
        }
        uint64_t v48 = *(void *)(a3 + 8);
        if (*(void *)a3 == v48)
        {
          char v50 = 0;
        }
        else
        {
          uint64_t v49 = *(void *)a3 + 8;
          do
          {
            a7 = COERCE_DOUBLE(vceq_s32(*(int32x2_t *)(v49 - 8), (int32x2_t)v45[2].n128_u64[0]));
            char v50 = LOBYTE(a7) & BYTE4(a7);
            if (LODWORD(a7) & HIDWORD(a7)) {
              break;
            }
            BOOL v22 = v49 == v48;
            v49 += 8;
          }
          while (!v22);
        }
        a5 = *v45;
        LODWORD(a7) = *(_DWORD *)(v12 + 64);
        if (COERCE_FLOAT(*v45) > (float)(v47 - *(float *)&a7)
          && ((v45[1].n128_u8[8] != 0) | v50 & 1 || a5.n128_f32[1] > v14))
        {
          if ((unint64_t)v46 >= v109)
          {
            float v52 = (__n128 *)__p;
            uint64_t v53 = ((char *)v46 - (unsigned char *)__p) >> 4;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 60) {
              sub_25B3FBC4C();
            }
            uint64_t v55 = v109 - (void)__p;
            if ((uint64_t)(v109 - (void)__p) >> 3 > v54) {
              unint64_t v54 = v55 >> 3;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              unint64_t v56 = (unint64_t)sub_25B3FFAEC(v56);
              a5 = *v45;
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v58 = (__n128 *)(v56 + 16 * v53);
            __n128 *v58 = a5;
            char v51 = v58 + 1;
            if (v46 != v52)
            {
              do
              {
                __n128 v59 = v46[-1];
                --v46;
                a5 = v59;
                v58[-1] = v59;
                --v58;
              }
              while (v46 != v52);
              uint64_t v46 = (__n128 *)__p;
            }
            __n128 __p = v58;
            uint64_t v108 = v51;
            unint64_t v109 = v56 + 16 * v57;
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *uint64_t v46 = a5;
            char v51 = v46 + 1;
          }
          uint64_t v108 = v51;
          uint64_t v46 = v51;
        }
        v45 += 3;
      }
      while (v45 != v44);
      __n128 v60 = (__n128 *)__p;
    }
    uint64_t v8 = v100;
    if (v46 == v60 && (v9 & 1) == 0)
    {
LABEL_116:
      if (v60)
      {
        uint64_t v108 = v60;
        operator delete(v60);
      }
      if (v110) {
        operator delete(v110);
      }
      uint64_t v16 = *(void *)(v100 + 40);
      goto LABEL_121;
    }
    if (*(void *)(v100 + 48) - *(void *)(v100 + 40) == 120 && *(float *)(v99 + 120 * v18 + 64) > v14)
    {
      a5.n128_u32[0] = *(_DWORD *)(v100 + 92);
      a5.n128_u32[1] = v18;
      __n128 v62 = *(void **)(a3 + 8);
      unint64_t v61 = *(void *)(a3 + 16);
      if ((unint64_t)v62 >= v61)
      {
        unint64_t v105 = a5.n128_u64[0];
        uint64_t v71 = ((uint64_t)v62 - *(void *)a3) >> 3;
        if ((unint64_t)(v71 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v72 = v61 - *(void *)a3;
        uint64_t v73 = v72 >> 2;
        if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
          uint64_t v73 = v71 + 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74) {
          unint64_t v74 = (unint64_t)sub_25B3FCAD4(v74);
        }
        else {
          uint64_t v75 = 0;
        }
        float32x2_t v81 = (unint64_t *)(v74 + 8 * v71);
        a5.n128_u32[1] = HIDWORD(v105);
        unint64_t *v81 = v105;
        float v63 = v81 + 1;
        float v83 = *(unint64_t **)a3;
        unint64_t v82 = *(unint64_t **)(a3 + 8);
        if (v82 != *(unint64_t **)a3)
        {
          do
          {
            unint64_t v84 = *--v82;
            a5.n128_u32[1] = HIDWORD(v84);
            *--float32x2_t v81 = v84;
          }
          while (v82 != v83);
          unint64_t v82 = *(unint64_t **)a3;
        }
        *(void *)a3 = v81;
        *(void *)(a3 + 8) = v63;
        *(void *)(a3 + 16) = v74 + 8 * v75;
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        *__n128 v62 = a5.n128_u64[0];
        float v63 = v62 + 1;
      }
    }
    else
    {
      a5.n128_u32[0] = v10;
      float v64 = sub_25B5C77AC((__n128 **)&__p, a5);
      *(float *)(*(void *)v24 + 24) = v64;
      *(float *)(*(void *)v24 + 72) = v64;
      unsigned int v65 = *(_DWORD *)(v100 + 92);
      uint64_t v66 = *(unint64_t **)a3;
      unsigned int v67 = *(unint64_t **)(a3 + 8);
      int8x16_t v68 = *(unint64_t **)a3;
      if (*(unint64_t **)a3 != v67)
      {
        while (1)
        {
          a5.n128_u64[0] = *v68;
          if (*v68 == v65 && v18 == HIDWORD(*v68)) {
            break;
          }
          if (++v68 == v67) {
            goto LABEL_81;
          }
        }
        char v96 = 1;
        goto LABEL_115;
      }
LABEL_81:
      a5.n128_u64[0] = __PAIR64__(v18, v65);
      unint64_t v70 = *(void *)(a3 + 16);
      if ((unint64_t)v67 >= v70)
      {
        unint64_t v106 = a5.n128_u64[0];
        uint64_t v76 = v67 - v66;
        if ((unint64_t)(v76 + 1) >> 61) {
          sub_25B3FBC4C();
        }
        uint64_t v77 = v70 - (void)v66;
        uint64_t v78 = v77 >> 2;
        if (v77 >> 2 <= (unint64_t)(v76 + 1)) {
          uint64_t v78 = v76 + 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79) {
          unint64_t v79 = (unint64_t)sub_25B3FCAD4(v79);
        }
        else {
          uint64_t v80 = 0;
        }
        char v85 = (unint64_t *)(v79 + 8 * v76);
        a5.n128_u32[1] = HIDWORD(v106);
        *char v85 = v106;
        float v63 = v85 + 1;
        uint64_t v87 = *(unint64_t **)a3;
        unint64_t v86 = *(unint64_t **)(a3 + 8);
        if (v86 != *(unint64_t **)a3)
        {
          do
          {
            unint64_t v88 = *--v86;
            a5.n128_u32[1] = HIDWORD(v88);
            *--char v85 = v88;
          }
          while (v86 != v87);
          unint64_t v86 = *(unint64_t **)a3;
        }
        *(void *)a3 = v85;
        *(void *)(a3 + 8) = v63;
        *(void *)(a3 + 16) = v79 + 8 * v80;
        if (v86) {
          operator delete(v86);
        }
      }
      else
      {
        *unsigned int v67 = a5.n128_u64[0];
        float v63 = v67 + 1;
      }
      char v96 = 1;
    }
    *(void *)(a3 + 8) = v63;
    __n128 v60 = (__n128 *)__p;
LABEL_115:
    uint64_t v12 = a1;
    goto LABEL_116;
  }
  char v96 = 0;
  return v96 & 1;
}

void sub_25B5C8E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (v29) {
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_25B5C8E68(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (float *)a1;
    if (a3 == 2)
    {
      result.n128_u32[0] = a2[-1].n128_u32[1];
      if (result.n128_f32[0] > a1->n128_f32[1])
      {
        BOOL result = *a1;
        *a1 = a2[-1];
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v18 = a4;
      unint64_t v19 = a3 >> 1;
      float32x4_t v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v22 = sub_25B5C97E4(a1, v20, v21, a4, result);
        uint64_t v23 = &v18[v19];
        result.n128_u64[0] = sub_25B5C97E4((__n128 *)&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, v22).n128_u64[0];
        uint64_t v24 = &v18[a3];
        uint64_t v25 = v23;
        while (v25 != v24)
        {
          if (v25->n128_f32[1] <= v18->n128_f32[1])
          {
            __n128 v27 = *v18++;
            BOOL result = v27;
          }
          else
          {
            __n128 v26 = *v25++;
            BOOL result = v26;
          }
          *(__n128 *)uint64_t v7 = result;
          v7 += 4;
          if (v18 == v23)
          {
            if (v25 != v24)
            {
              unint64_t v28 = 0;
              do
              {
                BOOL result = v25[v28 / 0x10];
                *(__n128 *)&v7[v28 / 4] = result;
                v28 += 16;
              }
              while (&v25[v28 / 0x10] != v24);
            }
            return result;
          }
        }
        if (v18 != v23)
        {
          unint64_t v29 = 0;
          do
          {
            BOOL result = v18[v29 / 0x10];
            *(__n128 *)&v7[v29 / 4] = result;
            v29 += 16;
          }
          while (&v18[v29 / 0x10] != v23);
        }
      }
      else
      {
        sub_25B5C8E68(a1, v20, v21, a4, a5);
        sub_25B5C8E68(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        sub_25B5C949C(v7, &v7[4 * (a3 >> 1)], (float *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v18, a5);
      }
    }
    else if (a1 != a2)
    {
      char v9 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = a1;
        do
        {
          result.n128_u32[0] = v11[1].n128_u32[1];
          float v12 = v11->n128_f32[1];
          uint64_t v11 = v9;
          if (result.n128_f32[0] > v12)
          {
            BOOL result = *v9;
            LODWORD(v13) = HIDWORD(v9->n128_u64[0]);
            uint64_t v14 = v10;
            while (1)
            {
              *(__n128 *)((char *)a1 + v14 + 16) = *(__n128 *)((char *)a1 + v14);
              if (!v14) {
                break;
              }
              float v15 = *(float *)((char *)&a1->n128_f32[-3] + v14);
              v14 -= 16;
              if (v13 <= v15)
              {
                uint64_t v16 = (__n128 *)((char *)a1 + v14 + 16);
                goto LABEL_15;
              }
            }
            uint64_t v16 = a1;
LABEL_15:
            *uint64_t v16 = result;
          }
          char v9 = v11 + 1;
          v10 += 16;
        }
        while (&v11[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_25B5C9090(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = (float *)a1;
    if (a3 == 2)
    {
      result.n128_u32[0] = a2[-1].n128_u32[1];
      if (result.n128_f32[0] > a1->n128_f32[1])
      {
        BOOL result = *a1;
        *a1 = a2[-1];
        a2[-1] = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v18 = a4;
      unint64_t v19 = a3 >> 1;
      float32x4_t v20 = &a1[a3 >> 1];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v22 = sub_25B5C92B8(a1, v20, v21, a4, result);
        uint64_t v23 = &v18[v19];
        result.n128_u64[0] = sub_25B5C92B8((__n128 *)&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23, v22).n128_u64[0];
        uint64_t v24 = &v18[a3];
        uint64_t v25 = v23;
        while (v25 != v24)
        {
          if (v25->n128_f32[1] <= v18->n128_f32[1])
          {
            __n128 v27 = *v18++;
            BOOL result = v27;
          }
          else
          {
            __n128 v26 = *v25++;
            BOOL result = v26;
          }
          *(__n128 *)uint64_t v7 = result;
          v7 += 4;
          if (v18 == v23)
          {
            if (v25 != v24)
            {
              unint64_t v28 = 0;
              do
              {
                BOOL result = v25[v28 / 0x10];
                *(__n128 *)&v7[v28 / 4] = result;
                v28 += 16;
              }
              while (&v25[v28 / 0x10] != v24);
            }
            return result;
          }
        }
        if (v18 != v23)
        {
          unint64_t v29 = 0;
          do
          {
            BOOL result = v18[v29 / 0x10];
            *(__n128 *)&v7[v29 / 4] = result;
            v29 += 16;
          }
          while (&v18[v29 / 0x10] != v23);
        }
      }
      else
      {
        sub_25B5C9090(a1, v20, v21, a4, a5);
        sub_25B5C9090(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        sub_25B5C949C(v7, &v7[4 * (a3 >> 1)], (float *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v18, a5);
      }
    }
    else if (a1 != a2)
    {
      char v9 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = a1;
        do
        {
          result.n128_u32[0] = v11[1].n128_u32[1];
          float v12 = v11->n128_f32[1];
          uint64_t v11 = v9;
          if (result.n128_f32[0] > v12)
          {
            BOOL result = *v9;
            LODWORD(v13) = HIDWORD(v9->n128_u64[0]);
            uint64_t v14 = v10;
            while (1)
            {
              *(__n128 *)((char *)a1 + v14 + 16) = *(__n128 *)((char *)a1 + v14);
              if (!v14) {
                break;
              }
              float v15 = *(float *)((char *)&a1->n128_f32[-3] + v14);
              v14 -= 16;
              if (v13 <= v15)
              {
                uint64_t v16 = (__n128 *)((char *)a1 + v14 + 16);
                goto LABEL_15;
              }
            }
            uint64_t v16 = a1;
LABEL_15:
            *uint64_t v16 = result;
          }
          char v9 = v11 + 1;
          v10 += 16;
        }
        while (&v11[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_25B5C92B8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      BOOL result = *v7;
      *unint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = a2[-1].n128_f32[1];
      float v10 = a1->n128_f32[1];
      if (v9 <= v10) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a2 - 1;
      }
      *a4 = *v11;
      unint64_t v5 = a4 + 1;
      if (v9 <= v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v19 = &a1[a3 >> 1];
      sub_25B5C9090(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_25B5C9090(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float32x4_t v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        if (v20->n128_f32[1] <= v7->n128_f32[1])
        {
          __n128 v22 = *v7++;
          BOOL result = v22;
        }
        else
        {
          __n128 v21 = *v20++;
          BOOL result = v21;
        }
        *v5++ = result;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              BOOL result = v20[v23];
              v5[v23++] = result;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          BOOL result = v7[v24];
          v5[v24++] = result;
        }
        while (&v7[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      float v12 = a1 + 1;
      BOOL result = *a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          float v15 = v7;
          uint64_t v16 = v14;
          uint64_t v7 = v12;
          unsigned int v17 = ++v14;
          if (v15[1].n128_f32[1] > v16->n128_f32[1])
          {
            v16[1] = *v16;
            unsigned int v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                unsigned int v17 = (__n128 *)((char *)a4 + v18);
                if (v15[1].n128_f32[1] <= *(float *)((char *)&a4->n128_f32[-3] + v18)) {
                  break;
                }
                *unsigned int v17 = v17[-1];
                v18 -= 16;
                if (!v18)
                {
                  unsigned int v17 = a4;
                  break;
                }
              }
            }
          }
          float v12 = v7 + 1;
          BOOL result = *v7;
          *unsigned int v17 = *v7;
          v13 += 16;
        }
        while (&v7[1] != a2);
      }
    }
  }
  return result;
}

float *sub_25B5C949C(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      while (a2[1] <= v11[1])
      {
        v11 += 4;
        if (!--a4) {
          return result;
        }
      }
      int v44 = a3;
      __long long src = a6;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          long long v42 = *(_OWORD *)v11;
          *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v42;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = a4 + 1;
        }
        uint64_t v21 = v22 >> 1;
        float v15 = &v11[4 * (v22 >> 1)];
        uint64_t v14 = a2;
        if (a2 != a3)
        {
          unint64_t v23 = ((char *)a3 - (char *)a2) >> 4;
          uint64_t v14 = a2;
          do
          {
            unint64_t v24 = v23 >> 1;
            uint64_t v25 = &v14[4 * (v23 >> 1)];
            float v26 = v25[1];
            __n128 v27 = v25 + 4;
            v23 += ~(v23 >> 1);
            if (v26 > v15[1]) {
              uint64_t v14 = v27;
            }
            else {
              unint64_t v23 = v24;
            }
          }
          while (v23);
        }
        uint64_t v13 = ((char *)v14 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v9 + 1;
        }
        uint64_t v13 = v12 >> 1;
        uint64_t v14 = &a2[4 * (v12 >> 1)];
        float v15 = a2;
        if (a2 != v11)
        {
          unint64_t v16 = ((char *)a2 - (char *)v11) >> 4;
          float v15 = v11;
          do
          {
            unint64_t v17 = v16 >> 1;
            uint64_t v18 = &v15[4 * (v16 >> 1)];
            float v19 = v18[1];
            float32x4_t v20 = v18 + 4;
            v16 += ~(v16 >> 1);
            if (v14[1] > v19) {
              unint64_t v16 = v17;
            }
            else {
              float v15 = v20;
            }
          }
          while (v16);
        }
        uint64_t v21 = ((char *)v15 - (char *)v11) >> 4;
      }
      a4 -= v21;
      v9 -= v13;
      unint64_t v28 = sub_25B58B110((char *)v15, (char *)a2, (char *)v14);
      unint64_t v29 = v28;
      if (v21 + v13 >= a4 + v9)
      {
        BOOL result = (float *)sub_25B5C949C(v28, v14, v44, a4, v9, __src, a7);
        a2 = v15;
        a6 = __src;
        uint64_t v9 = v13;
        a4 = v21;
        a3 = (float *)v29;
        if (!v13) {
          return result;
        }
      }
      else
      {
        float v30 = v15;
        a6 = __src;
        BOOL result = (float *)sub_25B5C949C(v11, v30, v28, v21, v13, __src, a7);
        uint64_t v11 = (float *)v29;
        a2 = v14;
        a3 = v44;
        if (!v9) {
          return result;
        }
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v37 = 0;
        do
        {
          *(_OWORD *)&a6[v37 * 4] = *(_OWORD *)&v11[v37];
          v37 += 4;
        }
        while (&v11[v37] != a2);
        uint64_t v38 = &a6[v37 * 4];
        if (v38 != a6)
        {
          while (a2 != a3)
          {
            if (a2[1] <= *((float *)a6 + 1))
            {
              long long v41 = *(_OWORD *)a6;
              a6 += 16;
              long long v40 = v41;
            }
            else
            {
              long long v39 = *(_OWORD *)a2;
              a2 += 4;
              long long v40 = v39;
            }
            *(_OWORD *)uint64_t v11 = v40;
            v11 += 4;
            if (a6 == v38) {
              return result;
            }
          }
          return (float *)memmove(v11, a6, v38 - a6);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v31 = 0;
      do
      {
        *(_OWORD *)&a6[v31 * 4] = *(_OWORD *)&a2[v31];
        v31 += 4;
      }
      while (&a2[v31] != a3);
      uint64_t v32 = (float *)&a6[v31 * 4];
      if (v32 != (float *)a6)
      {
        uint64_t v33 = a3 - 4;
        while (a2 != v11)
        {
          float v34 = *(v32 - 3);
          float v35 = *(a2 - 3);
          if (v34 <= v35) {
            int v36 = v32;
          }
          else {
            int v36 = a2;
          }
          if (v34 <= v35) {
            v32 -= 4;
          }
          else {
            a2 -= 4;
          }
          *(_OWORD *)uint64_t v33 = *((_OWORD *)v36 - 1);
          v33 -= 4;
          if (v32 == (float *)a6) {
            return result;
          }
        }
        unint64_t v43 = 0;
        do
        {
          *(_OWORD *)&v33[v43] = *(_OWORD *)&v32[v43 - 4];
          v43 -= 4;
        }
        while (&v32[v43] != (float *)a6);
      }
    }
  }
  return result;
}

__n128 sub_25B5C97E4(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    unint64_t v5 = a4;
    uint64_t v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      BOOL result = *v7;
      *unint64_t v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      float v9 = a2[-1].n128_f32[1];
      float v10 = a1->n128_f32[1];
      if (v9 <= v10) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a2 - 1;
      }
      *a4 = *v11;
      unint64_t v5 = a4 + 1;
      if (v9 <= v10) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      float v19 = &a1[a3 >> 1];
      sub_25B5C8E68(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_25B5C8E68(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      float32x4_t v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        if (v20->n128_f32[1] <= v7->n128_f32[1])
        {
          __n128 v22 = *v7++;
          BOOL result = v22;
        }
        else
        {
          __n128 v21 = *v20++;
          BOOL result = v21;
        }
        *v5++ = result;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v23 = 0;
            do
            {
              BOOL result = v20[v23];
              v5[v23++] = result;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v24 = 0;
        do
        {
          BOOL result = v7[v24];
          v5[v24++] = result;
        }
        while (&v7[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      BOOL result = *a1;
      *a4 = *a1;
      if (&a1[1] != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          float v15 = v7;
          unint64_t v16 = v14;
          uint64_t v7 = v12;
          unint64_t v17 = ++v14;
          if (v15[1].n128_f32[1] > v16->n128_f32[1])
          {
            v16[1] = *v16;
            unint64_t v17 = a4;
            if (v16 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                unint64_t v17 = (__n128 *)((char *)a4 + v18);
                if (v15[1].n128_f32[1] <= *(float *)((char *)&a4->n128_f32[-3] + v18)) {
                  break;
                }
                *unint64_t v17 = v17[-1];
                v18 -= 16;
                if (!v18)
                {
                  unint64_t v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t v12 = v7 + 1;
          BOOL result = *v7;
          *unint64_t v17 = *v7;
          v13 += 16;
        }
        while (&v7[1] != a2);
      }
    }
  }
  return result;
}

id sub_25B5C99C8(void *a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (qword_26A502428 != -1) {
    dispatch_once(&qword_26A502428, &unk_2708F2170);
  }
  id v9 = (id)qword_26A502420;
  if (!v9) {
    goto LABEL_12;
  }
  if (qword_26A5020B0 != -1) {
    dispatch_once(&qword_26A5020B0, &unk_2708F1218);
  }
  float v10 = (id)qword_26A5020A8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v21 = 138543362;
    id v22 = v9;
    _os_log_impl(&dword_25B3F3000, v10, OS_LOG_TYPE_INFO, "_RSResourcePath: overriddenBasePath=\"%{public}@\"", (uint8_t *)&v21, 0xCu);
  }

  uint64_t v12 = objc_msgSend_stringByAppendingPathComponent_(v9, v11, (uint64_t)v5);
  float v15 = v12;
  if (v6)
  {
    uint64_t v16 = objc_msgSend_stringByAppendingPathExtension_(v12, v13, (uint64_t)v6);

    float v15 = (void *)v16;
  }
  unint64_t v17 = objc_msgSend_defaultManager(MEMORY[0x263F08850], v13, v14);
  char v19 = objc_msgSend_fileExistsAtPath_(v17, v18, (uint64_t)v15);

  if ((v19 & 1) == 0)
  {

LABEL_12:
    if (!v7
      || (objc_msgSend_pathForResource_ofType_(v7, v8, (uint64_t)v5, v6),
          (float v15 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if (qword_26A502430 != -1) {
        dispatch_once(&qword_26A502430, &unk_2708F2190);
      }
      float v15 = 0;
    }
  }

  return v15;
}

uint64_t sub_25B5C9BDC()
{
  return os_variant_has_internal_content();
}

void sub_25B5C9BE8()
{
  if (os_variant_has_internal_content())
  {
    float v2 = objc_msgSend_processInfo(MEMORY[0x263F08AB0], v0, v1);
    id v5 = objc_msgSend_environment(v2, v3, v4);
    uint64_t v7 = objc_msgSend_objectForKey_(v5, v6, @"_RS_OVERRIDDEN_RESOURCE_BASE_PATH");
    uint64_t v8 = (void *)qword_26A502420;
    qword_26A502420 = v7;

    uint64_t v9 = sub_25B5C9D88((void *)qword_26A502420);
    float v10 = (void *)qword_26A502420;
    qword_26A502420 = v9;

    if (!v9)
    {
      CFPropertyListRef v11 = CFPreferencesCopyAppValue(@"_RSOverriddenResourceBasePath", (CFStringRef)*MEMORY[0x263EFFE60]);
      if (v11)
      {
        uint64_t v12 = (void *)v11;
        CFTypeID v13 = CFGetTypeID(v11);
        if (v13 == CFStringGetTypeID())
        {
          uint64_t v14 = sub_25B5C9D88(v12);
          float v15 = (void *)qword_26A502420;
          qword_26A502420 = v14;

          if (v14) {
            return;
          }
        }
        else
        {
          CFRelease(v12);
        }
      }
      CFPropertyListRef v16 = CFPreferencesCopyAppValue(@"_RSOverriddenResourceBasePath", @"com.apple.RoomScanCore");
      if (v16)
      {
        cf = (void *)v16;
        CFTypeID v17 = CFGetTypeID(v16);
        if (v17 == CFStringGetTypeID())
        {
          uint64_t v18 = sub_25B5C9D88(cf);
          char v19 = (void *)qword_26A502420;
          qword_26A502420 = v18;
        }
        else
        {
          CFRelease(cf);
        }
      }
    }
  }
}

id sub_25B5C9D88(void *a1)
{
  id v1 = a1;
  uint64_t v4 = v1;
  if (v1
    && objc_msgSend_length(v1, v2, v3)
    && ((unsigned __int8 v16 = 0,
         objc_msgSend_defaultManager(MEMORY[0x263F08850], v5, v6),
         uint64_t v7 = objc_claimAutoreleasedReturnValue(),
         int isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v7, v8, (uint64_t)v4, &v16),
         int v10 = v16,
         v7,
         isDirectory)
      ? (BOOL v13 = v10 == 0)
      : (BOOL v13 = 1),
        !v13))
  {
    uint64_t v14 = objc_msgSend_copy(v4, v11, v12);
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_25B5CA038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_RSFrame;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

id RSFrameToDictionary(void *a1)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  id v198 = a1;
  objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v1, v2);
  id v199 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = NSNumber;
  objc_msgSend_timestamp(v198, v4, v5);
  uint64_t v8 = objc_msgSend_numberWithDouble_(v3, v6, v7);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v9, (uint64_t)v8, @"timestamp");

  objc_msgSend_camera(v198, v10, v11);
  id v197 = (id)objc_claimAutoreleasedReturnValue();
  int32x2_t v189 = objc_msgSend_dictionary(MEMORY[0x263EFF9A0], v12, v13);
  objc_msgSend_pose(v197, v14, v15);
  long long v191 = v17;
  long long v193 = v16;
  long long v190 = v18;
  long long v195 = v19;
  uint64_t v209 = objc_msgSend_numberWithFloat_(NSNumber, v20, v21, *(double *)&v19);
  __n128 v187 = (void *)v209;
  uint64_t v210 = objc_msgSend_numberWithFloat_(NSNumber, v22, v23, *(double *)&v193);
  uint64_t v185 = (void *)v210;
  unint64_t v183 = objc_msgSend_numberWithFloat_(NSNumber, v24, v25, *(double *)&v191);
  uint64_t v211 = (uint64_t)v183;
  uint64_t v182 = objc_msgSend_numberWithFloat_(NSNumber, v26, v27, *(double *)&v190);
  uint64_t v212 = v182;
  uint64_t v181 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v28, (uint64_t)&v209, 4);
  float32x2_t v213 = v181;
  HIDWORD(v29) = DWORD1(v195);
  LODWORD(v29) = DWORD1(v195);
  float v180 = objc_msgSend_numberWithFloat_(NSNumber, v30, v31, v29);
  uint64_t v205 = v180;
  HIDWORD(v32) = DWORD1(v193);
  LODWORD(v32) = DWORD1(v193);
  float v179 = objc_msgSend_numberWithFloat_(NSNumber, v33, v34, v32);
  long long v206 = v179;
  HIDWORD(v35) = DWORD1(v191);
  LODWORD(v35) = DWORD1(v191);
  uint64_t v178 = objc_msgSend_numberWithFloat_(NSNumber, v36, v37, v35);
  uint64_t v207 = v178;
  HIDWORD(v38) = DWORD1(v190);
  LODWORD(v38) = DWORD1(v190);
  int8x16_t v177 = objc_msgSend_numberWithFloat_(NSNumber, v39, v40, v38);
  float v208 = v177;
  double v176 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v41, (uint64_t)&v205, 4);
  uint64_t v214 = v176;
  double v175 = objc_msgSend_numberWithFloat_(NSNumber, v42, v43, COERCE_DOUBLE(__PAIR64__(DWORD1(v195), DWORD2(v195))));
  uint64_t v201 = v175;
  __n128 v174 = objc_msgSend_numberWithFloat_(NSNumber, v44, v45, COERCE_DOUBLE(__PAIR64__(DWORD1(v193), DWORD2(v193))));
  uint64_t v202 = v174;
  uint64_t v48 = objc_msgSend_numberWithFloat_(NSNumber, v46, v47, COERCE_DOUBLE(__PAIR64__(DWORD1(v191), DWORD2(v191))));
  unint64_t v203 = v48;
  char v51 = objc_msgSend_numberWithFloat_(NSNumber, v49, v50, COERCE_DOUBLE(__PAIR64__(DWORD1(v190), DWORD2(v190))));
  BOOL v204 = v51;
  uint64_t v53 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v52, (uint64_t)&v201, 4);
  long long v215 = v53;
  unint64_t v56 = objc_msgSend_numberWithFloat_(NSNumber, v54, v55, COERCE_DOUBLE(__PAIR64__(DWORD1(v195), HIDWORD(v195))));
  v200[0] = v56;
  __n128 v59 = objc_msgSend_numberWithFloat_(NSNumber, v57, v58, COERCE_DOUBLE(__PAIR64__(DWORD1(v193), HIDWORD(v193))));
  v200[1] = v59;
  __n128 v62 = objc_msgSend_numberWithFloat_(NSNumber, v60, v61, COERCE_DOUBLE(__PAIR64__(DWORD1(v191), HIDWORD(v191))));
  v200[2] = v62;
  unsigned int v65 = objc_msgSend_numberWithFloat_(NSNumber, v63, v64, COERCE_DOUBLE(__PAIR64__(DWORD1(v190), HIDWORD(v190))));
  v200[3] = v65;
  unsigned int v67 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v66, (uint64_t)v200, 4);
  long long v216 = v67;
  unsigned __int32 v69 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v68, (uint64_t)&v213, 4);

  objc_msgSend_setObject_forKeyedSubscript_(v189, v70, (uint64_t)v69, @"pose");
  objc_msgSend_intrinsics(v197, v71, v72);
  long long v192 = v74;
  long long v194 = v73;
  long long v196 = v75;
  uint64_t v209 = objc_msgSend_numberWithFloat_(NSNumber, v76, v77, *(double *)&v75);
  *(void *)&long long v190 = v209;
  uint64_t v210 = objc_msgSend_numberWithFloat_(NSNumber, v78, v79, *(double *)&v194);
  unint64_t v188 = (void *)v210;
  uint64_t v211 = objc_msgSend_numberWithFloat_(NSNumber, v80, v81, *(double *)&v192);
  uint64_t v186 = (void *)v211;
  uint64_t v184 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v82, (uint64_t)&v209, 3);
  float32x2_t v213 = v184;
  HIDWORD(v83) = DWORD1(v196);
  LODWORD(v83) = DWORD1(v196);
  unint64_t v86 = objc_msgSend_numberWithFloat_(NSNumber, v84, v85, v83);
  uint64_t v205 = v86;
  HIDWORD(v87) = DWORD1(v194);
  LODWORD(v87) = DWORD1(v194);
  float v90 = objc_msgSend_numberWithFloat_(NSNumber, v88, v89, v87);
  long long v206 = v90;
  HIDWORD(v91) = DWORD1(v192);
  LODWORD(v91) = DWORD1(v192);
  uint64_t v94 = objc_msgSend_numberWithFloat_(NSNumber, v92, v93, v91);
  uint64_t v207 = v94;
  char v96 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v95, (uint64_t)&v205, 3);
  uint64_t v214 = v96;
  uint64_t v99 = objc_msgSend_numberWithFloat_(NSNumber, v97, v98, COERCE_DOUBLE(__PAIR64__(DWORD1(v196), DWORD2(v196))));
  uint64_t v201 = v99;
  uint64_t v102 = objc_msgSend_numberWithFloat_(NSNumber, v100, v101, COERCE_DOUBLE(__PAIR64__(DWORD1(v194), DWORD2(v194))));
  uint64_t v202 = v102;
  unint64_t v105 = objc_msgSend_numberWithFloat_(NSNumber, v103, v104, COERCE_DOUBLE(__PAIR64__(DWORD1(v192), DWORD2(v192))));
  unint64_t v203 = v105;
  uint64_t v107 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v106, (uint64_t)&v201, 3);
  long long v215 = v107;
  unint64_t v109 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v108, (uint64_t)&v213, 3);

  objc_msgSend_setObject_forKeyedSubscript_(v189, v110, (uint64_t)v109, @"intrinsic");
  unint64_t v111 = NSNumber;
  objc_msgSend_imageResolution(v197, v112, v113);
  unint64_t v116 = objc_msgSend_numberWithDouble_(v111, v114, v115);
  float32x2_t v213 = v116;
  int v117 = NSNumber;
  objc_msgSend_imageResolution(v197, v118, v119);
  uint64_t v123 = objc_msgSend_numberWithDouble_(v117, v120, v121, v122);
  uint64_t v214 = v123;
  uint64_t v125 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v124, (uint64_t)&v213, 2);
  objc_msgSend_setObject_forKeyedSubscript_(v189, v126, (uint64_t)v125, @"image_resolution");

  int v129 = objc_msgSend_copy(v189, v127, v128);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v130, (uint64_t)v129, @"camera");

  uint64_t v131 = NSNumber;
  float32x4_t v134 = (__CVBuffer *)objc_msgSend_depthBuffer(v198, v132, v133);
  size_t Width = CVPixelBufferGetWidth(v134);
  BOOL v137 = objc_msgSend_numberWithUnsignedLong_(v131, v136, Width);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v138, (uint64_t)v137, @"depth_buffer_width");

  uint64_t v139 = NSNumber;
  uint64_t v142 = (__CVBuffer *)objc_msgSend_depthBuffer(v198, v140, v141);
  size_t Height = CVPixelBufferGetHeight(v142);
  uint64_t v145 = objc_msgSend_numberWithUnsignedLong_(v139, v144, Height);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v146, (uint64_t)v145, @"depth_buffer_height");

  uint64_t v149 = (__CVBuffer *)objc_msgSend_depthBuffer(v198, v147, v148);
  int v150 = sub_25B5CAAF0(v149);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v151, (uint64_t)v150, @"depth_buffer");

  unint64_t v152 = NSNumber;
  unint64_t v155 = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v198, v153, v154);
  size_t v156 = CVPixelBufferGetWidth(v155);
  float32x2_t v158 = objc_msgSend_numberWithUnsignedLong_(v152, v157, v156);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v159, (uint64_t)v158, @"semantic_label_buffer_width");

  int64_t v160 = NSNumber;
  uint64_t v163 = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v198, v161, v162);
  size_t v164 = CVPixelBufferGetHeight(v163);
  uint64_t v166 = objc_msgSend_numberWithUnsignedLong_(v160, v165, v164);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v167, (uint64_t)v166, @"semantic_label_buffer_height");

  float v170 = (__CVBuffer *)objc_msgSend_semanticLabelBuffer(v198, v168, v169);
  uint64_t v171 = sub_25B5CAAF0(v170);
  objc_msgSend_setObject_forKeyedSubscript_(v199, v172, (uint64_t)v171, @"semantic_label_buffer");

  return v199;
}

void sub_25B5CA868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

id sub_25B5CAAF0(__CVBuffer *a1)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  size_t DataSize = CVPixelBufferGetDataSize(a1);
  if (BaseAddress && DataSize)
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v3, (uint64_t)BaseAddress);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }

  return v5;
}

_RSFrame *RSFrameFromDictionary(void *a1)
{
  id v147 = a1;
  id v1 = [_RSFrame alloc];
  id v2 = v147;
  if (v1)
  {
    v155.receiver = v1;
    v155.super_class = (Class)_RSFrame;
    int v150 = (CVPixelBufferRef *)objc_msgSendSuper2(&v155, sel_init);
    uint64_t v4 = (_RSFrame *)v150;
    if (!v150)
    {
LABEL_38:
      uint64_t v4 = v150;
      id v1 = v4;
      goto LABEL_39;
    }
    id v5 = objc_msgSend_objectForKeyedSubscript_(v2, v3, @"timestamp");
    objc_msgSend_doubleValue(v5, v6, v7);
    v150[1] = v8;

    int v10 = objc_msgSend_objectForKeyedSubscript_(v2, v9, @"vio_tracking_state");

    if (v10)
    {
      uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v2, v11, @"vio_tracking_state");
      v150[10] = (CVPixelBufferRef)(int)objc_msgSend_intValue(v12, v13, v14);
    }
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v2, v11, @"camera");

    if (!v15)
    {
LABEL_30:
      double v87 = objc_msgSend_objectForKeyedSubscript_(v2, v16, @"depth_buffer_width");
      size_t v90 = objc_msgSend_unsignedIntegerValue(v87, v88, v89);

      unint64_t v92 = objc_msgSend_objectForKeyedSubscript_(v2, v91, @"depth_buffer_height");
      size_t v95 = objc_msgSend_unsignedIntegerValue(v92, v93, v94);

      uint64_t v97 = objc_msgSend_objectForKeyedSubscript_(v2, v96, @"depth_buffer");

      uint64_t v99 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (v97)
      {
        uint64_t v100 = v150 + 6;
        if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v90, v95, 0x66646570u, 0, v150 + 6))
        {
LABEL_35:
          id v1 = 0;
          goto LABEL_39;
        }
        uint64_t v102 = objc_msgSend_objectForKeyedSubscript_(v2, v101, @"depth_buffer");
        CVPixelBufferLockBaseAddress(*v100, 0);
        BaseAddress = CVPixelBufferGetBaseAddress(*v100);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*v100);
        id v105 = v102;
        uint64_t v108 = (const void *)objc_msgSend_bytes(v105, v106, v107);
        memcpy(BaseAddress, v108, BytesPerRow * v95);
        CVPixelBufferUnlockBaseAddress(*v100, 0);
      }
      objc_msgSend_objectForKeyedSubscript_(v2, v98, @"depth_confidence_buffer");

      v150[7] = 0;
      uint64_t v110 = objc_msgSend_objectForKeyedSubscript_(v2, v109, @"semantic_label_buffer_width");
      size_t v113 = objc_msgSend_unsignedIntegerValue(v110, v111, v112);

      uint64_t v115 = objc_msgSend_objectForKeyedSubscript_(v2, v114, @"semantic_label_buffer_height");
      size_t v118 = objc_msgSend_unsignedIntegerValue(v115, v116, v117);

      uint64_t v120 = objc_msgSend_objectForKeyedSubscript_(v2, v119, @"semantic_label_buffer");

      if (v120)
      {
        double v122 = v150 + 8;
        if (CVPixelBufferCreate(*v99, v113, v118, 0x4C303038u, 0, v150 + 8)) {
          goto LABEL_35;
        }
        uint64_t v124 = objc_msgSend_objectForKeyedSubscript_(v2, v123, @"semantic_label_buffer");
        CVPixelBufferLockBaseAddress(*v122, 0);
        uint64_t v125 = CVPixelBufferGetBaseAddress(*v122);
        size_t v126 = CVPixelBufferGetBytesPerRow(*v122);
        id v127 = v124;
        int32x4_t v130 = (const void *)objc_msgSend_bytes(v127, v128, v129);
        memcpy(v125, v130, v126 * v118);
        CVPixelBufferUnlockBaseAddress(*v122, 0);
      }
      objc_msgSend_objectForKeyedSubscript_(v2, v121, @"semantic_confidence_buffer");

      v150[9] = 0;
      v150[3] = 0;
      goto LABEL_38;
    }
    objc_msgSend_objectForKeyedSubscript_(v2, v16, @"camera");
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    long long v18 = [_RSCamera alloc];
    id v148 = v17;
    if (!v18
      || (v156.receiver = v18,
          v156.super_class = (Class)_RSCamera,
          (float32x4_t v20 = (double *)objc_msgSendSuper2(&v156, sel_init)) == 0))
    {
      id v22 = 0;
LABEL_29:

      CVPixelBufferRef v86 = v150[2];
      v150[2] = (CVPixelBufferRef)v22;

      goto LABEL_30;
    }
    objc_msgSend_objectForKeyedSubscript_(v148, v19, @"intrinsic");
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = (double *)v21;
    }
    else {
      id v22 = 0;
    }

    if (!v22)
    {
LABEL_28:

      goto LABEL_29;
    }
    uint64_t v23 = v22;
    if (objc_msgSend_count(v23, v24, v25) != 3) {
      goto LABEL_25;
    }
    uint64_t v27 = v23;
    float v143 = v23;
    unint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(v23, v26, 0, v17);
    float v30 = objc_msgSend_objectAtIndexedSubscript_(v27, v29, 1);
    uint64_t v33 = objc_msgSend_objectAtIndexedSubscript_(v27, v31, 2);
    for (uint64_t i = 0; i != 3; ++i)
    {
      double v35 = objc_msgSend_objectAtIndexedSubscript_(v28, v32, i);
      objc_msgSend_floatValue(v35, v36, v37);
      *(void *)&long long v153 = v38;
      uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(v30, v39, i);
      objc_msgSend_floatValue(v40, v41, v42);
      int v151 = v43;
      uint64_t v45 = objc_msgSend_objectAtIndexedSubscript_(v33, v44, i);
      objc_msgSend_floatValue(v45, v46, v47);
      long long v48 = v153;
      DWORD1(v48) = v151;
      DWORD2(v48) = v49;
      *(_OWORD *)&v20[2 * i + 4] = v48;
    }
    objc_msgSend_objectForKeyedSubscript_(v148, v50, @"pose");
    id v51 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v22 = (double *)v51;
    }
    else {
      id v22 = 0;
    }

    if (!v22) {
      goto LABEL_28;
    }
    uint64_t v23 = v22;
    if (objc_msgSend_count(v23, v52, v53) == 4)
    {
      uint64_t v144 = v23;
      uint64_t v146 = objc_msgSend_objectAtIndexedSubscript_(v23, v54, 0);
      uint64_t v145 = objc_msgSend_objectAtIndexedSubscript_(v23, v55, 1);
      unint64_t v56 = v23;
      uint64_t v58 = objc_msgSend_objectAtIndexedSubscript_(v23, v57, 2);
      uint64_t v61 = objc_msgSend_objectAtIndexedSubscript_(v56, v59, 3);
      for (uint64_t j = 0; j != 4; ++j)
      {
        float v63 = objc_msgSend_objectAtIndexedSubscript_(v146, v60, j);
        objc_msgSend_floatValue(v63, v64, v65);
        unsigned int v154 = v66;
        int8x16_t v68 = objc_msgSend_objectAtIndexedSubscript_(v145, v67, j);
        objc_msgSend_floatValue(v68, v69, v70);
        unsigned int v152 = v71;
        long long v73 = objc_msgSend_objectAtIndexedSubscript_(v58, v72, j);
        objc_msgSend_floatValue(v73, v74, v75);
        unsigned int v149 = v76;
        uint64_t v78 = objc_msgSend_objectAtIndexedSubscript_(v61, v77, j);
        objc_msgSend_floatValue(v78, v79, v80);
        *(void *)&long long v81 = __PAIR64__(v152, v154);
        *((void *)&v81 + 1) = __PAIR64__(v82, v149);
        *(_OWORD *)&v20[2 * j + 18] = v81;
      }
      objc_msgSend_objectForKeyedSubscript_(v148, v83, @"image_resolution");
      id v84 = (id)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v85 = (double *)v84;
      }
      else {
        uint64_t v85 = 0;
      }

      if (v85 && objc_msgSend_count(v85, v132, v133) == 2)
      {
        float v135 = objc_msgSend_objectAtIndexedSubscript_(v85, v134, 0);
        objc_msgSend_floatValue(v135, v136, v137);
        v20[2] = v138;

        objc_msgSend_objectAtIndexedSubscript_(v85, v139, 1);
        uint64_t v23 = (double *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_floatValue(v23, v140, v141);
        v20[3] = v142;
        goto LABEL_27;
      }
      uint64_t v23 = v85;
    }
    else
    {
LABEL_25:
    }
    uint64_t v85 = v20;
    float32x4_t v20 = 0;
LABEL_27:
    id v22 = v20;

    float32x4_t v20 = v85;
    goto LABEL_28;
  }
  uint64_t v4 = 0;
LABEL_39:

  return v1;
}

void sub_25B5CB328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

id sub_25B5CB680(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v293 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v263 = a1;
  int8x16_t v241 = v8;
  int8x16_t v242 = v7;
  float32x4_t v240 = v9;
  if (!a1)
  {
    id v254 = 0;
    goto LABEL_155;
  }
  int v10 = v9;
  id v11 = v7;
  id v246 = v8;
  id v264 = v10;
  uint64_t v244 = v11;
  uint64_t v14 = objc_msgSend_copy(v11, v12, v13, v240, v8, v7);
  *(_DWORD *)(a1 + 60) = 1065353216;
  long long v285 = 0u;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v288 = 0u;
  int8x16_t v243 = v14;
  id v17 = objc_msgSend_walls(v14, v15, v16);
  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v285, &src, 16);
  if (v21)
  {
    uint64_t v22 = *(void *)v286;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v286 != v22) {
          objc_enumerationMutation(v17);
        }
        uint64_t v24 = *(void **)(*((void *)&v285 + 1) + 8 * i);
        float v25 = *(float *)(v263 + 60);
        objc_msgSend_quad(v24, v19, v20);
        if (v25 > v26)
        {
          objc_msgSend_quad(v24, v19, v20);
          *(_DWORD *)(v263 + 60) = v27;
        }
      }
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v19, (uint64_t)&v285, &src, 16);
    }
    while (v21);
  }

  float v30 = objc_msgSend_openings(v244, v28, v29);
  if (!objc_msgSend_count(v30, v31, v32))
  {

LABEL_64:
    uint64_t v139 = v243;
    goto LABEL_153;
  }
  if (v264) {
    uint64_t v33 = (void *)*((void *)v264 + 14);
  }
  else {
    uint64_t v33 = 0;
  }
  id v34 = v33;
  BOOL v37 = objc_msgSend_count(v34, v35, v36) == 0;

  if (v37) {
    goto LABEL_64;
  }
  uint64_t v40 = objc_msgSend_openings(v243, v38, v39);
  int32x2_t v253 = objc_msgSend_mutableCopy(v40, v41, v42);

  id v254 = v243;
  uint64_t v252 = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  __n128 __p = 0;
  while (1)
  {
    uint64_t v47 = objc_msgSend_openings(v254, v43, v44);
    BOOL v50 = v46 < objc_msgSend_count(v47, v48, v49);

    if (!v50) {
      break;
    }
    uint64_t v53 = objc_msgSend_openings(v254, v51, v52);
    uint64_t v55 = objc_msgSend_objectAtIndexedSubscript_(v53, v54, v46);

    uint64_t v58 = objc_msgSend_identifier((void *)v55, v56, v57);
    objc_msgSend_UUIDString(v58, v59, v60);
    id v61 = objc_claimAutoreleasedReturnValue();
    uint64_t v64 = (char *)objc_msgSend_UTF8String(v61, v62, v63);
    sub_25B403500(&v285, v64);

    uint64_t v65 = sub_25B4035B0((void *)(v263 + 16), (unsigned __int8 *)&v285);
    if (v65)
    {
      int8x16_t v68 = v65;
      if (COERCE_FLOAT(*((void *)v65 + 15)) > 0.5)
      {
        objc_msgSend_quad((void *)v55, v66, v67);
        HIDWORD(v69) = 0;
        HIDWORD(v70) = 0;
        *(void *)&long long v72 = v71;
        *((void *)&v72 + 1) = *((unsigned int *)v68 + 14);
        *(void *)&long long v74 = v73;
        *((void *)&v74 + 1) = *((unsigned int *)v68 + 18);
        long long src = v72;
        long long v290 = v74;
        long long v291 = v69;
        long long v292 = v70;
        if (!v55) {
          goto LABEL_49;
        }
LABEL_48:
        objc_copyStruct((void *)(v55 + 272), &src, 64, 1, 0);
        goto LABEL_49;
      }
      if (COERCE_FLOAT(*((_OWORD *)v65 + 7)) <= 0.0)
      {
        uint64_t v75 = (float *)(v263 + 32);
        while (1)
        {
          uint64_t v75 = *(float **)v75;
          if (!v75) {
            break;
          }
          if (v75[30] > 0.5)
          {
            unsigned int v76 = v75 + 14;
            goto LABEL_27;
          }
        }
        unsigned int v76 = (float *)(v263 + 68);
LABEL_27:
        float v259 = *v76;
        if (*v76 > *(float *)(v263 + 60))
        {
          objc_msgSend_quad((void *)v55, v66, v67);
          HIDWORD(v86) = 0;
          HIDWORD(v87) = 0;
          *(void *)&long long v89 = v88;
          *((void *)&v89 + 1) = LODWORD(v259);
          *(void *)&long long v91 = v90;
          *((void *)&v91 + 1) = LODWORD(v259);
          long long src = v89;
          long long v290 = v91;
          long long v291 = v86;
          long long v292 = v87;
          if (!v55) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
      }
    }
    if ((unint64_t)v252 >= v45)
    {
      uint64_t v77 = v252 - __p;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        sub_25B3FBC4C();
      }
      if ((uint64_t)(v45 - (void)__p) >> 2 > v78) {
        unint64_t v78 = (uint64_t)(v45 - (void)__p) >> 2;
      }
      if (v45 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v78;
      }
      if (v79) {
        unint64_t v79 = (unint64_t)sub_25B3FCAD4(v79);
      }
      else {
        uint64_t v80 = 0;
      }
      long long v81 = (unint64_t *)(v79 + 8 * v77);
      unint64_t *v81 = v46;
      unsigned int v82 = v81 + 1;
      if (v252 == __p)
      {
        double v83 = __p;
      }
      else
      {
        double v83 = __p;
        id v84 = v252;
        do
        {
          unint64_t v85 = *--v84;
          *--long long v81 = v85;
        }
        while (v84 != __p);
      }
      unint64_t v45 = v79 + 8 * v80;
      if (v83) {
        operator delete(v83);
      }
      __n128 __p = v81;
      uint64_t v252 = v82;
    }
    else
    {
      *v252++ = v46;
    }
LABEL_49:
    if (SBYTE7(v286) < 0) {
      operator delete((void *)v285);
    }

    ++v46;
  }

  uint64_t v249 = (char *)v252 - (char *)__p;
  if (v252 == __p)
  {
    uint64_t v139 = 0;
  }
  else
  {
    for (unint64_t j = 0; j < objc_msgSend_count(v253, v92, v93); unint64_t j = v96 + 1)
    {
      uint64_t v96 = j;
      objc_msgSend_objectAtIndexedSubscript_(v253, v95, j);
      id v97 = (id)objc_claimAutoreleasedReturnValue();
      id v98 = v254;
      uint64_t v103 = objc_msgSend_copy(v97, v99, v100);
      for (unint64_t k = 0; ; ++k)
      {
        id v105 = objc_msgSend_walls(v98, v101, v102);
        BOOL v108 = objc_msgSend_count(v105, v106, v107) > k;

        if (!v108) {
          break;
        }
        unint64_t v111 = objc_msgSend_parentIdentifier(v97, v109, v110);
        unint64_t v114 = objc_msgSend_walls(v98, v112, v113);
        unint64_t v116 = objc_msgSend_objectAtIndexedSubscript_(v114, v115, k);
        uint64_t v119 = objc_msgSend_identifier(v116, v117, v118);
        int isEqual = objc_msgSend_isEqual_(v111, v120, (uint64_t)v119);

        if (isEqual)
        {
          objc_msgSend_quad(v97, v101, v102);
          *(_OWORD *)id obja = v122;
          uint64_t v125 = objc_msgSend_walls(v98, v123, v124);
          id v127 = objc_msgSend_objectAtIndexedSubscript_(v125, v126, k);
          objc_msgSend_quad(v127, v128, v129);
          float32x4_t v260 = v130;

          if (vmovn_s32(vcgtq_f32(*(float32x4_t *)obja, v260)).i32[1])
          {
            objc_msgSend_quad(v97, v101, v102);
            HIDWORD(v131) = 0;
            HIDWORD(v132) = 0;
            *(float *)&unsigned int v133 = v260.f32[2] - *(double *)(v263 + 88);
            *(void *)&long long v135 = v134;
            *((void *)&v135 + 1) = v133;
            *(void *)&long long v137 = v136;
            *((void *)&v137 + 1) = v133;
            long long src = v135;
            long long v290 = v137;
            long long v291 = v131;
            long long v292 = v132;
            if (v103) {
              objc_copyStruct((void *)(v103 + 272), &src, 64, 1, 0);
            }
          }
        }
      }

      objc_msgSend_replaceObjectAtIndex_withObject_(v253, v138, v96, v103);
    }
    uint64_t v140 = 0;
    uint64_t v141 = v249 >> 3;
    if ((unint64_t)(v249 >> 3) <= 1) {
      uint64_t v141 = 1;
    }
    uint64_t v245 = v141;
    do
    {
      float v142 = v264;
      uint64_t v250 = objc_msgSend_objectAtIndexedSubscript_(v253, v95, __p[v140]);
      objc_msgSend_quad(v250, v143, v144);
      v268.i32[2] = v145;
      int v270 = v146;
      float32x2_t v261 = (float32x2_t)v147;
      v268.i64[0] = v147;
      float32x2_t dest = v148;
      float32x2_t v269 = v148;
      int v272 = v149;
      int v274 = v150;
      uint64_t v271 = v151;
      uint64_t v273 = v152;
      uint64_t v265 = 0;
      uint64_t v266 = 0;
      unint64_t v267 = 0;
      if (!*(unsigned char *)(v263 + 56)) {
        goto LABEL_77;
      }
      long long v153 = v264 ? (void *)*((void *)v264 + 15) : 0;
      id v154 = v153;
      BOOL v157 = objc_msgSend_count(v154, v155, v156) == 0;

      float v142 = v264;
      if (v157) {
        goto LABEL_77;
      }
      if (v264)
      {
        id v158 = *((id *)v264 + 15);
        unint64_t v159 = (void *)*((void *)v264 + 14);
      }
      else
      {
        id v158 = 0;
        unint64_t v159 = 0;
      }
      id v160 = v159;
      uint64_t v162 = objc_msgSend_objectAtIndexedSubscript_(v160, v161, 0);
      uint64_t v164 = objc_msgSend_objectForKey_(v158, v163, (uint64_t)v162);

      if (v164)
      {
        long long v171 = *(_OWORD *)(v164 + 112);
        long long v166 = *(_OWORD *)(v164 + 128);
        long long v167 = *(_OWORD *)(v164 + 144);
        long long v168 = *(_OWORD *)(v164 + 80);
        long long v172 = *(_OWORD *)(v164 + 96);
        long long src = v172;
        long long v290 = v171;
        long long v291 = v166;
        long long v292 = v167;
        long long v169 = *(_OWORD *)(v164 + 48);
        long long v170 = *(_OWORD *)(v164 + 64);
        LODWORD(v171) = *(_DWORD *)(v164 + 8);
        LODWORD(v172) = *(_DWORD *)(v164 + 12);
      }
      else
      {
        __n128 v165 = 0uLL;
        long long v291 = 0u;
        long long v292 = 0u;
        *(void *)&long long v171 = 0;
        *(void *)&long long v169 = 0;
        DWORD2(v169) = 0;
        *(void *)&long long v170 = 0;
        DWORD2(v170) = 0;
        *(void *)&long long v168 = 0;
        DWORD2(v168) = 0;
        *(void *)&long long v172 = 0;
        long long src = 0u;
        long long v290 = 0u;
      }
      DWORD2(v285) = DWORD2(v169);
      DWORD2(v286) = DWORD2(v170);
      DWORD2(v287) = DWORD2(v168);
      *(void *)&long long v285 = v169;
      *(void *)&long long v286 = v170;
      *(void *)&long long v287 = v168;
      int v173 = (int)*(float *)&v171;
      LODWORD(v171) = 20.0;
      char v174 = sub_25B401218((float32x2_t *)&v268, (uint64_t)&src, (uint64_t)&v285, v173, (int)*(float *)&v172, *(double *)&v171, *(double *)&v168, *(double *)&v169, *(double *)&v170, *(double *)&v172, v165);

      float v142 = v264;
      if (v174)
      {
LABEL_77:
        id v175 = v246;
        unint64_t v247 = v142;
        if (v142) {
          double v176 = (void *)v142[15];
        }
        else {
          double v176 = 0;
        }
        id objb = v176;
        float v179 = objc_msgSend_allKeys(objb, v177, v178);
        uint64_t v248 = objc_msgSend_sortedArrayUsingComparator_(v179, v180, (uint64_t)&unk_2708F11F8);

        if (!v142
          || (id v183 = *((id *)v264 + 15),
              BOOL v186 = objc_msgSend_count(v183, v184, v185) == 0,
              v183,
              v186))
        {
          float v226 = 0;
          for (unint64_t m = 0; objc_msgSend_count(v175, v181, v182) > m; ++m)
          {
            uint64_t v230 = (float32x2_t *)(objc_msgSend_points(v175, v228, v229) + 16 * m);
            if (v230[1].f32[0] >= (float)(*(float *)(v263 + 60) + (float)(*(float *)(v263 + 64) * 0.5))
              && sub_25B40DB9C(*v230, v261, dest, 0.00001) < 0.2)
            {
              if ((unint64_t)v226 >= v267)
              {
                float32x2_t v232 = (char *)v265;
                uint64_t v233 = (v226 - (unsigned char *)v265) >> 4;
                unint64_t v234 = v233 + 1;
                if ((unint64_t)(v233 + 1) >> 60) {
                  sub_25B3FBC4C();
                }
                uint64_t v235 = v267 - (void)v265;
                if ((uint64_t)(v267 - (void)v265) >> 3 > v234) {
                  unint64_t v234 = v235 >> 3;
                }
                if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v236 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v236 = v234;
                }
                if (v236) {
                  unint64_t v236 = (unint64_t)sub_25B3FFAEC(v236);
                }
                else {
                  uint64_t v181 = 0;
                }
                uint64_t v237 = (char *)(v236 + 16 * v233);
                *(_OWORD *)uint64_t v237 = *(_OWORD *)v230->f32;
                float32x2_t v231 = v237 + 16;
                if (v226 != v232)
                {
                  do
                  {
                    long long v238 = *((_OWORD *)v226 - 1);
                    v226 -= 16;
                    *((_OWORD *)v237 - 1) = v238;
                    v237 -= 16;
                  }
                  while (v226 != v232);
                  float v226 = (char *)v265;
                }
                uint64_t v265 = v237;
                uint64_t v266 = v231;
                unint64_t v267 = v236 + 16 * (void)v181;
                if (v226) {
                  operator delete(v226);
                }
              }
              else
              {
                *(_OWORD *)float v226 = *(_OWORD *)v230->f32;
                float32x2_t v231 = v226 + 16;
              }
              uint64_t v266 = v231;
              float v226 = v231;
            }
          }
        }
        else
        {
          long long v287 = 0u;
          long long v288 = 0u;
          long long v285 = 0u;
          long long v286 = 0u;
          obunint64_t j = v248;
          uint64_t v188 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v187, (uint64_t)&v285, &src, 16);
          if (v188)
          {
            int32x2_t v189 = 0;
            uint64_t v262 = *(void *)v286;
            do
            {
              uint64_t v190 = 0;
              do
              {
                if (*(void *)v286 != v262) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v191 = *(void *)(*((void *)&v285 + 1) + 8 * v190);
                id v192 = *((id *)v264 + 15);
                uint64_t v194 = objc_msgSend_objectForKey_(v192, v193, v191);

                if (v194)
                {
                  long long v201 = *(_OWORD *)(v194 + 112);
                  long long v196 = *(_OWORD *)(v194 + 128);
                  long long v197 = *(_OWORD *)(v194 + 144);
                  long long v198 = *(_OWORD *)(v194 + 80);
                  long long v202 = *(_OWORD *)(v194 + 96);
                  long long v281 = v202;
                  long long v282 = v201;
                  long long v283 = v196;
                  long long v284 = v197;
                  long long v199 = *(_OWORD *)(v194 + 48);
                  long long v200 = *(_OWORD *)(v194 + 64);
                  LODWORD(v201) = *(_DWORD *)(v194 + 8);
                  LODWORD(v202) = *(_DWORD *)(v194 + 12);
                }
                else
                {
                  __n128 v195 = 0uLL;
                  long long v283 = 0u;
                  long long v284 = 0u;
                  *(void *)&long long v201 = 0;
                  *(void *)&long long v199 = 0;
                  DWORD2(v199) = 0;
                  *(void *)&long long v200 = 0;
                  DWORD2(v200) = 0;
                  *(void *)&long long v198 = 0;
                  DWORD2(v198) = 0;
                  *(void *)&long long v202 = 0;
                  long long v281 = 0u;
                  long long v282 = 0u;
                }
                int v276 = DWORD2(v199);
                int v278 = DWORD2(v200);
                int v280 = DWORD2(v198);
                uint64_t v275 = v199;
                uint64_t v277 = v200;
                uint64_t v279 = v198;
                int v203 = (int)*(float *)&v201;
                LODWORD(v201) = 1110704128;
                if (sub_25B401218((float32x2_t *)&v268, (uint64_t)&v281, (uint64_t)&v275, v203, (int)*(float *)&v202, *(double *)&v201, *(double *)&v198, *(double *)&v199, *(double *)&v200, *(double *)&v202, v195))
                {
                  if (v194) {
                    unint64_t v206 = *(void *)(v194 + 16);
                  }
                  else {
                    unint64_t v206 = 0;
                  }
                  float32x2_t v207 = *(float32x2_t *)v268.f32;
                  float32x2_t v208 = v269;
                  if (v194)
                  {
LABEL_92:
                    unint64_t v209 = *(void *)(v194 + 24);
                    goto LABEL_93;
                  }
                  while (1)
                  {
                    unint64_t v209 = 0;
LABEL_93:
                    if (v206 >= v209) {
                      break;
                    }
                    uint64_t v210 = objc_msgSend_points(v175, v204, v205);
                    objc_msgSend_semanticLabels(v175, v211, v212);
                    objc_msgSend_semanticVotes(v175, v213, v214);
                    long long v215 = (float32x2_t *)(v210 + 16 * v206);
                    if (sub_25B40DB9C(*v215, v207, v208, 0.00001) < 0.2)
                    {
                      if ((unint64_t)v189 >= v267)
                      {
                        uint64_t v217 = (char *)v265;
                        uint64_t v218 = (v189 - (unsigned char *)v265) >> 4;
                        unint64_t v219 = v218 + 1;
                        if ((unint64_t)(v218 + 1) >> 60) {
                          sub_25B3FBC4C();
                        }
                        uint64_t v220 = v267 - (void)v265;
                        if ((uint64_t)(v267 - (void)v265) >> 3 > v219) {
                          unint64_t v219 = v220 >> 3;
                        }
                        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v221 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v221 = v219;
                        }
                        if (v221) {
                          unint64_t v221 = (unint64_t)sub_25B3FFAEC(v221);
                        }
                        else {
                          BOOL v204 = 0;
                        }
                        uint64_t v222 = (char *)(v221 + 16 * v218);
                        *(_OWORD *)uint64_t v222 = *(_OWORD *)v215->f32;
                        long long v216 = v222 + 16;
                        if (v189 != v217)
                        {
                          do
                          {
                            long long v223 = *((_OWORD *)v189 - 1);
                            v189 -= 16;
                            *((_OWORD *)v222 - 1) = v223;
                            v222 -= 16;
                          }
                          while (v189 != v217);
                          int32x2_t v189 = (char *)v265;
                        }
                        uint64_t v265 = v222;
                        uint64_t v266 = v216;
                        unint64_t v267 = v221 + 16 * (void)v204;
                        if (v189) {
                          operator delete(v189);
                        }
                      }
                      else
                      {
                        *(_OWORD *)int32x2_t v189 = *(_OWORD *)v215->f32;
                        long long v216 = v189 + 16;
                      }
                      uint64_t v266 = v216;
                      int32x2_t v189 = v216;
                    }
                    ++v206;
                    if (v194) {
                      goto LABEL_92;
                    }
                  }
                }

                ++v190;
              }
              while (v190 != v188);
              uint64_t v225 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v224, (uint64_t)&v285, &src, 16);
              uint64_t v188 = v225;
            }
            while (v225);
          }
        }
        sub_25B4013A8(v263 + 8, &v268, (float32x2_t **)&v265);
      }

      ++v140;
    }
    while (v140 != v245);
    uint64_t v139 = v254;
    sub_25B4E666C((uint64_t)v254, v253);
  }
  if (__p) {
    operator delete(__p);
  }

  if (v252 != __p)
  {
LABEL_153:
    id v254 = v139;
    uint64_t v139 = 0;
  }

LABEL_155:

  return v254;
}