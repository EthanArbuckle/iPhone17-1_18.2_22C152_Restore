unint64_t sub_250D859C4()
{
  char *v0;

  return sub_250D859CC(*v0);
}

unint64_t sub_250D859CC(char a1)
{
  unint64_t result = 0x49676E696E726F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x797469746E617571;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0x6962616C69617661;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleAggregate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.RoutingKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineComparison.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_250D85CA0()
{
  uint64_t v1 = 0x6962616C69617661;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E696C65736162;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7461676572676761;
  }
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleBaseline.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unint64_t sub_250D85DD4()
{
  unint64_t result = 0x7257656C6464696DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x7070617257727169;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.Route(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleBaselineComparison.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.init(gregorianDayRange:daySummaries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D860D0(a1, a3, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  uint64_t result = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for SleepingSampleDaySummaryCollection()
{
  uint64_t result = qword_26B207820;
  if (!qword_26B207820) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250D86068(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D860D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D86138(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummaryCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    int v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8CEA0();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    uint64_t v13 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SleepingSampleSummaryDemoDatasetManager()
{
  return self;
}

uint64_t type metadata accessor for SleepingSampleChangeNotificationSettingsProvider()
{
  return self;
}

uint64_t sub_250D863A8()
{
  return sub_250E24D90();
}

uint64_t sub_250D86408()
{
  return sub_250E24D80();
}

unint64_t sub_250D86458()
{
  unint64_t result = qword_26B208040;
  if (!qword_26B208040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208040);
  }
  return result;
}

id SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter()
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = objc_msgSend(self, sel_sharedBehavior);
  if (!v1) {
    __break(1u);
  }
  int v2 = v1;
  unsigned int v3 = objc_msgSend(v1, sel_isAppleInternalInstall);

  if (!v3) {
    return 0;
  }
  id v4 = *(id *)(v0 + 16);
  int v5 = (void *)sub_250E24C30();
  v12[0] = 0;
  id v6 = objc_msgSend(v4, sel_hk_safeNumberIfExistsForKeyPath_error_, v5, v12);

  if (!v6)
  {
    id v9 = v12[0];
    uint64_t v10 = (void *)sub_250E24560();

    swift_willThrow();
    return 0;
  }
  id v7 = v12[0];
  id v8 = objc_msgSend(v6, sel_integerValue);

  return v8;
}

uint64_t static GregorianDayRange.previousWeek(through:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v18 = a3;
  uint64_t v4 = sub_250E248B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_250E24710();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E24B20();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  sub_250E24AC0();
  static GregorianDayRange.previousWeek(through:gregorianCalendar:)((uint64_t)v15, a2, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  uint64_t v37;
  char *v38;

  sub_250D88890();
  id v7 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v33 - v11;
  sub_250D8CEA0();
  v37 = v13;
  MEMORY[0x270FA5388](v13);
  v38 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_250E24B20();
  v16 = *(void **)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v21 = (char *)&v33 - v20;
  sub_250E24A80();
  sub_250E24AA0();
  v35 = (void (*)(char *, uint64_t))v16[1];
  v36 = v16 + 1;
  v35(v19, v15);
  sub_250D94AB4((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  unint64_t result = sub_250E24BB0();
  if (result)
  {
    v23 = &v12[*(int *)(v7 + 48)];
    v33 = a3;
    v34 = a2;
    v24 = (void (*)(char *, char *, uint64_t))v16[4];
    v24(v12, v21, v15);
    v25 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v25(v23, a1, v15);
    v26 = &v10[*(int *)(v7 + 48)];
    v25(v10, (uint64_t)v12, v15);
    v25(v26, (uint64_t)v23, v15);
    v27 = (uint64_t)v38;
    v24(v38, v10, v15);
    v28 = v35;
    v35(v26, v15);
    v29 = &v10[*(int *)(v7 + 48)];
    v24(v10, v12, v15);
    v24(v29, v23, v15);
    v24((char *)(v27 + *(int *)(v37 + 36)), v29, v15);
    v28(v10, v15);
    v30 = v33;
    sub_250D89B98(v27, v33);
    v31 = v30 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
    v32 = sub_250E248B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v31, v34, v32);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleQueryRange.init(morningIndexRange:baselineWindowDays:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D86C40(a1, a3);
  uint64_t result = type metadata accessor for SleepingSampleQueryRange();
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_250D86C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id static HKKeyValueDomain.makeSleepingSampleChangeNotificationStateDomain(for:)(void *a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = a1;
  uint64_t v4 = (void *)sub_250E24C30();
  id v5 = objc_msgSend(v2, sel_initWithCategory_domainName_healthStore_, 0, v4, v3);

  return v5;
}

uint64_t assignWithTake for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  id v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

id sub_250D86E18()
{
  swift_getObjCClassMetadata();
  uint64_t v0 = sub_250D86E58();

  return v0;
}

void *sub_250D86E58()
{
  return &unk_2701EF1E8;
}

uint64_t assignWithCopy for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  id v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250D86F7C@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = v4 + *a1;
  swift_beginAccess();
  return sub_250D8A474(v8, a4, a2, a3);
}

void sub_250D8704C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  SleepingSampleDaySummaryQuery.queue_populateConfiguration(_:)(v4);
}

uint64_t sub_250D870B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleDaySummary.init(from:)(a1, a2);
}

uint64_t static Logger.balance.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_250E24950();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B207A58);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__allocating_init()()
{
  sub_250E24C60();
  id v0 = objc_allocWithZone(MEMORY[0x263EFFA40]);
  id v1 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v2;
  }
  else
  {
    sub_250E250E0();
    sub_250E24CE0();
    sub_250E24C60();
    sub_250E24CE0();
    swift_bridgeObjectRelease();
    sub_250E24CE0();
    uint64_t result = sub_250E25220();
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GregorianDayRange.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v4 = sub_250E248B0();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SleepingSampleSummaryDemoDatasetManager.isDemoDatasetEnabled.getter()
{
  if (SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter()) {
    return 1;
  }
  uint64_t result = (uint64_t)objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    id v2 = (void *)result;
    id v0 = objc_msgSend((id)result, sel_runningInStoreDemoModeF201);

    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

BOOL SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter()
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = *(id *)(v0 + 16);
  id v2 = (void *)sub_250E24C30();
  v9[0] = 0;
  id v3 = objc_msgSend(v1, sel_hk_safeNumberIfExistsForKeyPath_error_, v2, v9);

  if (v3)
  {
    id v4 = v9[0];
    id v5 = objc_msgSend(v3, sel_integerValue);

    return (uint64_t)v5 > 0;
  }
  else
  {
    id v7 = v9[0];
    uint64_t v8 = (void *)sub_250E24560();

    swift_willThrow();
    return 0;
  }
}

uint64_t sub_250D875A0(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8 = sub_250E24750();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E24DC0();
  sub_250E24740();
  id v13 = a1;
  SleepingSampleDaySummaryQuery.client_deliverSleepingSampleDaySummaries(_:clearPending:isFinalBatch:queryUUID:)(v12, a4, a5, (uint64_t)v11);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t SleepingSampleDaySummaryQuery.client_deliverSleepingSampleDaySummaries(_:clearPending:isFinalBatch:queryUUID:)(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v28 = a2;
  int v29 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v26 = *MEMORY[0x263F8EED0] & *v4;
  uint64_t v31 = sub_250E24960();
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E24980();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E24750();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  id v27 = objc_msgSend(v4, sel_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = *(void *)(v26 + 80);
  *(void *)(v18 + 24) = *(void *)(v19 + 88);
  *(void *)(v18 + 32) = a1;
  *(unsigned char *)(v18 + 40) = v28;
  *(void *)(v18 + 48) = v4;
  *(unsigned char *)(v18 + 56) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  *(void *)(v18 + v17) = ObjectType;
  aBlock[4] = sub_250D8AD80;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_250D8A9AC;
  aBlock[3] = &block_descriptor_6_0;
  v20 = _Block_copy(aBlock);
  v21 = v4;
  sub_250E24970();
  uint64_t v35 = MEMORY[0x263F8EE78];
  sub_250D94B8C(&qword_26B2078B8, MEMORY[0x263F8F030]);
  sub_250D8A4F4(0, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
  sub_250D87AFC();
  uint64_t v22 = v31;
  sub_250E25050();
  v23 = v27;
  MEMORY[0x253389B40](0, v11, v8, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  return swift_release();
}

unint64_t sub_250D87AFC()
{
  unint64_t result = qword_26B2078D8;
  if (!qword_26B2078D8)
  {
    sub_250DD06B4(255, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2078D8);
  }
  return result;
}

uint64_t destroy for SleepingSampleDaySummaryCollection(uint64_t a1)
{
  uint64_t v2 = sub_250E24B20();
  id v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250D8CEA0();
  v3(a1 + *(int *)(v4 + 36), v2);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v6 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_250D87C74(void *a1)
{
  return SleepingSampleAggregate.Availability.encode(to:)(a1);
}

uint64_t sub_250D87C8C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return SleepingSampleAggregate.Availability.init(from:)(a1, a2);
}

uint64_t sub_250D87CA4(void *a1)
{
  return SleepingSampleAggregate.encode(to:)(a1);
}

uint64_t sub_250D87CBC(void *a1)
{
  return SleepingSampleBaselineComparison.encode(to:)(a1);
}

uint64_t sub_250D87CD4(void *a1)
{
  return SleepingSampleBaseline.encode(to:)(a1);
}

uint64_t sub_250D87CEC(void *a1)
{
  return SleepingSampleBaselineAvailability.encode(to:)(a1);
}

uint64_t sub_250D87D04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAggregate.init(from:)(a1, a2);
}

uint64_t SleepingSampleQueryRange.baselineWindowDays.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for SleepingSampleQueryRange() + 20));
}

uint64_t SleepingSampleQueryRange.latestBaselineMorningIndex.getter()
{
  uint64_t v1 = sub_250E24B20();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - v11;
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  SleepingSampleQueryRange.expandedBaselineRange(forTarget:)((char *)(v0 + *(int *)(v13 + 36)), (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v7, &v12[*(int *)(v10 + 44)], v1);
  sub_250D88758((uint64_t)v12, (unint64_t *)&qword_26B2081D0, v8);
  sub_250E24A80();
  sub_250E24AA0();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v5, v1);
  return ((uint64_t (*)(char *, uint64_t))v14)(v7, v1);
}

uint64_t SleepingSampleQueryRange.earliestBaselineMorningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  SleepingSampleQueryRange.expandedBaselineRange(forTarget:)(v1, (uint64_t)&v9 - v5);
  uint64_t v7 = sub_250E24B20();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, v6, v7);
  return sub_250D88758((uint64_t)v6, (unint64_t *)&qword_26B2081D0, v3);
}

uint64_t SleepingSampleQueryRange.expandedBaselineRange(forTarget:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  sub_250D88890();
  uint64_t v60 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  v59 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v53 = (char *)&v49 - v8;
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v9);
  v55 = (char *)&v49 - v10;
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v52 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = sub_250E24B20();
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v57 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v50 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v18);
  v21 = (char *)&v49 - v20;
  sub_250D94AFC((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  char v22 = sub_250E24BA0();
  v23 = (void (*)(char *, char *, uint64_t))v15[2];
  v58 = a1;
  v23(v21, a1, v14);
  uint64_t v51 = v3;
  sub_250D88810(v3, (uint64_t)v13);
  if (v22) {
    char v24 = sub_250E24BB0();
  }
  else {
    char v24 = 0;
  }
  sub_250D88758((uint64_t)v13, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v52 = (void (*)(char *, uint64_t))v15[1];
  v52(v21, v14);
  uint64_t v25 = v57;
  if (v24)
  {
    type metadata accessor for SleepingSampleQueryRange();
    uint64_t v26 = v50;
    sub_250E24AB0();
    id v27 = v26;
    sub_250E24A90();
    uint64_t result = sub_250E24BB0();
    int v29 = v59;
    if (result)
    {
      uint64_t v30 = v60;
      uint64_t v31 = *(int *)(v60 + 48);
      uint64_t v32 = v53;
      v58 = (char *)(v15 + 1);
      uint64_t v33 = v23;
      uint64_t v34 = &v53[v31];
      uint64_t v35 = v27;
      v36 = (void (*)(char *, char *, uint64_t))v15[4];
      v36(v53, v35, v14);
      uint64_t v51 = (uint64_t)v34;
      v36(v34, v25, v14);
      v37 = &v29[*(int *)(v30 + 48)];
      v33(v29, v32, v14);
      v33(v37, v34, v14);
      uint64_t v38 = (uint64_t)v55;
      v36(v55, v29, v14);
      v39 = v52;
      v52(v37, v14);
      v40 = &v29[*(int *)(v30 + 48)];
      v36(v29, v32, v14);
      v36(v40, (char *)v51, v14);
      uint64_t v41 = v38 + *(int *)(v54 + 36);
      v42 = v40;
LABEL_9:
      v36((char *)v41, v42, v14);
      v39(v29, v14);
      return sub_250D888F8(v38, v56, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    }
    __break(1u);
  }
  else
  {
    v43 = v58;
    uint64_t result = sub_250E24BB0();
    int v29 = v59;
    if (result)
    {
      uint64_t v44 = v60;
      v45 = v53;
      v46 = &v53[*(int *)(v60 + 48)];
      v23(v53, v43, v14);
      v57 = v46;
      v23(v46, v43, v14);
      v47 = &v29[*(int *)(v44 + 48)];
      v23(v29, v45, v14);
      v23(v47, v46, v14);
      v36 = (void (*)(char *, char *, uint64_t))v15[4];
      uint64_t v38 = (uint64_t)v55;
      v36(v55, v29, v14);
      v39 = v52;
      v52(v47, v14);
      v48 = &v29[*(int *)(v60 + 48)];
      v36(v29, v45, v14);
      v36(v48, v57, v14);
      uint64_t v41 = v38 + *(int *)(v54 + 36);
      v42 = v48;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SleepingSampleQueryRange()
{
  uint64_t result = qword_26B2070C8;
  if (!qword_26B2070C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250D88698(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D886F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D88758(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8C96C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250D887B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8CA08(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250D88810(uint64_t a1, uint64_t a2)
{
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_250D88890()
{
  if (!qword_26B2080E0)
  {
    sub_250E24B20();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B2080E0);
    }
  }
}

uint64_t sub_250D888F8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8C96C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D88964(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8CA90(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t SleepingSampleDaySummary.latestSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = sub_250E24710();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v36 = (char *)&v35 - v7;
  sub_250D88F14(0);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v35 - v14;
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], v12);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v35 - v17;
  sub_250D937E8((uint64_t)v15);
  uint64_t v19 = sub_250E243F0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
  {
    sub_250D948E0((uint64_t)v15, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v21(v18, 1, 1, v3);
  }
  else
  {
    sub_250E243B0();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v21(v18, 0, 1, v3);
  }
  uint64_t v22 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_250D94790(v2 + *(int *)(v22 + 24), (uint64_t)v11, &qword_26B207DD8, MEMORY[0x263F07490]);
  sub_250D94D0C((uint64_t)v18, v23);
  char v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v25 = v24(v11, 1, v3);
  int v26 = v24((char *)v23, 1, v3);
  if (v25 != 1)
  {
    int v29 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
    uint64_t v27 = v38;
    if (v26 == 1)
    {
      v29(v38, v11, v3);
    }
    else
    {
      uint64_t v30 = v36;
      v29((uint64_t)v36, v11, v3);
      uint64_t v31 = v37;
      v29((uint64_t)v37, (char *)v23, v3);
      sub_250D94C64((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
      if (sub_250E24BA0()) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = v30;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v27, v32, v3);
      uint64_t v33 = *(void (**)(char *, uint64_t))(v4 + 8);
      v33(v31, v3);
      v33(v30, v3);
    }
    goto LABEL_14;
  }
  uint64_t v27 = v38;
  if (v26 != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v38, v23, v3);
LABEL_14:
    uint64_t v28 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v27, v28, 1, v3);
  }
  uint64_t v28 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v27, v28, 1, v3);
}

void sub_250D88EB4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_250D88F14(uint64_t a1)
{
}

uint64_t sub_250D88FAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250D8A4F4(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

Swift::Void __swiftcall SleepingSampleDaySummaryQuery.queue_populateConfiguration(_:)(HKQueryServerConfiguration *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D8A4F4(0, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v20 - v6;
  sub_250D8A4F4(0, &qword_26B207F60, MEMORY[0x263F07920], v4);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v20 - v9;
  v21.receiver = v1;
  v21.super_class = ObjectType;
  [(HKQueryServerConfiguration *)&v21 queue_populateConfiguration:a1];
  type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = &v1[qword_26B20BBA8];
    uint64_t v14 = sub_250E248B0();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    uint64_t v16 = v12 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
    swift_beginAccess();
    uint64_t v17 = a1;
    sub_250D8A658((uint64_t)v10, v16, &qword_26B207F60, MEMORY[0x263F07920]);
    swift_endAccess();
    sub_250D88810((uint64_t)&v1[qword_26B20BB98], (uint64_t)v7);
    sub_250D8CEA0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 0, 1, v18);
    uint64_t v19 = v12 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
    swift_beginAccess();
    sub_250D8A658((uint64_t)v7, v19, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
    swift_endAccess();
  }
}

void SleepingSampleDaySummaryQueryConfiguration.init(coder:)(void *a1)
{
  sub_250D88890();
  uint64_t v65 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  v61 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v57 = (char *)v53 - v6;
  sub_250D8CEA0();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v58 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D8A4F4(0, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v59 = (uint64_t)v53 - v13;
  sub_250D8A4F4(0, &qword_26B207F60, MEMORY[0x263F07920], v11);
  MEMORY[0x270FA5388](v14 - 8);
  v63 = (char *)v53 - v15;
  uint64_t v16 = sub_250E24B20();
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  objc_super v21 = (char *)v53 - v20;
  uint64_t v22 = &v1[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar];
  uint64_t v23 = sub_250E248B0();
  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v62(v22, 1, 1, v23);
  char v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v60 = v9 + 56;
  v24(&v1[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange], 1, 1, v8);
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v71.receiver = v1;
  v71.super_class = Configuration;
  id v26 = objc_msgSendSuper2(&v71, sel_initWithCoder_, a1);
  if (!v26)
  {

    return;
  }
  id v27 = v26;
  v55 = v24;
  uint64_t v56 = v8;
  v66 = (char *)v26;
  uint64_t v28 = (void *)sub_250E24C30();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v28);

  sub_250E24AD0();
  int v29 = (void *)sub_250E24C30();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v29);

  v64 = v19;
  sub_250E24AD0();
  sub_250D8A4F4(0, &qword_26B206E10, (uint64_t (*)(uint64_t))sub_250DF400C, MEMORY[0x263F8E0F8]);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_250E264E0;
  *(void *)(v30 + 32) = sub_250D98B48(0, (unint64_t *)&qword_26B206D90);
  sub_250E24F80();
  swift_bridgeObjectRelease();
  if (!v70)
  {
    id v51 = v66;

    sub_250E02010((uint64_t)v69, (unint64_t *)&qword_269B03870);
LABEL_9:
    v52 = *(void (**)(char *, uint64_t))(v67 + 8);
    v52(v64, v16);
    v52(v21, v16);

    return;
  }
  id v31 = v66;
  if ((swift_dynamicCast() & 1) == 0)
  {
    id v51 = v31;

    goto LABEL_9;
  }
  v53[1] = v27;
  id v54 = v68;
  uint64_t v32 = (uint64_t)v63;
  sub_250E24870();
  v62((char *)v32, 0, 1, v23);
  uint64_t v33 = v31;
  uint64_t v34 = (uint64_t)v31 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_250D8A658(v32, v34, &qword_26B207F60, MEMORY[0x263F07920]);
  swift_endAccess();
  sub_250D94B8C((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  uint64_t v35 = v64;
  LOBYTE(v34) = sub_250E24BB0();

  if (v34)
  {
    uint64_t v36 = v65;
    v37 = v57;
    uint64_t v38 = &v57[*(int *)(v65 + 48)];
    uint64_t v39 = v67;
    v40 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v40(v57, v21, v16);
    v63 = v38;
    v40(v38, v35, v16);
    uint64_t v41 = *(int *)(v36 + 48);
    v42 = v61;
    v43 = &v61[v41];
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v44(v61, v37, v16);
    v44(v43, v38, v16);
    uint64_t v45 = (uint64_t)v58;
    v40(v58, v42, v16);
    v46 = *(void (**)(char *, uint64_t))(v39 + 8);
    v46(v43, v16);
    v47 = &v42[*(int *)(v65 + 48)];
    v40(v42, v37, v16);
    v40(v47, v63, v16);
    uint64_t v48 = v56;
    v40((char *)(v45 + *(int *)(v56 + 36)), v47, v16);
    v46(v42, v16);
    uint64_t v49 = v59;
    sub_250D89B98(v45, v59);
    v55((char *)v49, 0, 1, v48);
    v50 = &v66[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_250D8A658(v49, (uint64_t)v50, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

uint64_t GregorianDayRange.init(dayIndexRange:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D89B98(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v6 = sub_250E248B0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a2, v6);
}

uint64_t sub_250D89B98(uint64_t a1, uint64_t a2)
{
  sub_250D8CEA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_250D89BFC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v40 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D8A4F4(0, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v39 = (uint64_t)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v37 - v11;
  uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x263F07920];
  sub_250D8A4F4(0, &qword_26B207F60, MEMORY[0x263F07920], v7);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v37 - v15;
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v42.receiver = v2;
  v42.super_class = Configuration;
  objc_msgSendSuper2(&v42, sel_encodeWithCoder_, a1);
  uint64_t v18 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_250D8A474(v18, (uint64_t)v16, &qword_26B207F60, v13);
  uint64_t v19 = sub_250E248B0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19) != 1)
  {
    uint64_t v21 = sub_250E24850();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
  }
  uint64_t v22 = (void *)sub_250E24C30();
  objc_msgSend(a1, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  uint64_t v23 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_250D8A474(v23, (uint64_t)v12, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
  sub_250D8CEA0();
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  id v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v37[1] = v26 + 48;
  uint64_t v38 = v27;
  unsigned int v28 = v27((uint64_t)v12, 1, v24);
  id v41 = a1;
  if (v28 == 1)
  {
    __break(1u);
  }
  else
  {
    int v29 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v30 = v40;
    v29(v40, v12, v4);
    sub_250D8A0DC((uint64_t)v12);
    uint64_t v31 = sub_250E24AE0();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v5 + 8);
    v32(v30, v4);
    uint64_t v33 = (void *)sub_250E24C30();
    objc_msgSend(v41, sel_encodeInteger_forKey_, v31, v33);

    uint64_t v34 = v39;
    sub_250D8A474(v23, v39, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
    if (v38(v34, 1, v25) != 1)
    {
      v29(v30, (char *)(v34 + *(int *)(v25 + 36)), v4);
      sub_250D8A0DC(v34);
      uint64_t v35 = sub_250E24AE0();
      v32(v30, v4);
      uint64_t v36 = (void *)sub_250E24C30();
      objc_msgSend(v41, sel_encodeInteger_forKey_, v35, v36);

      return;
    }
  }
  __break(1u);
}

uint64_t sub_250D8A0DC(uint64_t a1)
{
  sub_250D8CEA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_250D8A138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D8A4F4(0, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v20[-v7];
  sub_250D8A4F4(0, &qword_26B207F60, MEMORY[0x263F07920], v5);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v20[-v10];
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v23.receiver = v2;
  v23.super_class = Configuration;
  objc_msgSendSuper2(&v23, sel_copyWithZone_, a1);
  sub_250E25030();
  swift_unknownObjectRelease();
  sub_250D8B520((uint64_t)v24, (uint64_t)v22);
  if (!swift_dynamicCast()) {
    return sub_250DE78B0(v24, (_OWORD *)a2);
  }
  uint64_t v13 = v21;
  uint64_t v14 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x263F07920];
  sub_250D8A474(v14, (uint64_t)v11, &qword_26B207F60, MEMORY[0x263F07920]);
  uint64_t v16 = v13 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_250D8A658((uint64_t)v11, v16, &qword_26B207F60, v15);
  swift_endAccess();
  uint64_t v17 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_250D8A474(v17, (uint64_t)v8, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
  uint64_t v18 = v13 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_250D8A658((uint64_t)v8, v18, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0);
  swift_endAccess();
  *(void *)(a2 + 24) = Configuration;
  *(void *)a2 = v13;
  return (_OWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t sub_250D8A3F4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250DF3FA8(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D8A474(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250D8A4F4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_250D8A4F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250D8A558(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250DD06B4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D8A5D8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250DF3FA8(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D8A658(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250D8A4F4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D8A6D8()
{
  static SleepingSampleDaySummaryQuery.configurationClass()();

  return swift_getObjCClassFromMetadata();
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQueryConfiguration()
{
  uint64_t result = qword_26B207F10;
  if (!qword_26B207F10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static SleepingSampleDaySummaryQuery.configurationClass()()
{
  return type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
}

uint64_t sub_250D8A830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250D8A858(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250D8A858(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x617461446F6ELL && a2 == 0xE600000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000250E2CC50 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_250D8A9AC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_250D8A9F0()
{
  uint64_t v1 = *(void *)(sub_250E24750() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v6 = *(uint64_t (**)(void, void, void))(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v5);
  uint64_t v10 = *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_250D8AAA4(v0 + v2, v6, v7, v8, v9, v10);
}

uint64_t sub_250D8AAA4(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a4;
  uint64_t v11 = sub_250E24750();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_250E24950();
  __swift_project_value_buffer(v15, (uint64_t)qword_26B207A58);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v16 = sub_250E24930();
  os_log_type_t v17 = sub_250E24F40();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    v29[0] = a5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v30 = a2;
    uint64_t v21 = v20;
    uint64_t v32 = v20;
    uint64_t v33 = a6;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_getMetatypeMetadata();
    v29[1] = a3;
    uint64_t v22 = sub_250E24C80();
    uint64_t v33 = sub_250D8B44C(v22, v23, &v32);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v24 = sub_250E24720();
    uint64_t v33 = sub_250D8B44C(v24, v25, &v32);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl(&dword_250D84000, v16, v17, "[%{public}s] Calling results with final results %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    uint64_t v26 = v21;
    a2 = v30;
    MEMORY[0x25338A890](v26, -1, -1);
    uint64_t v27 = v19;
    a5 = v29[0];
    MEMORY[0x25338A890](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  return a2(v31, a5, 0);
}

void sub_250D8AD80()
{
  uint64_t v1 = *(void *)(sub_250E24750() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  unint64_t v5 = *(void **)(v0 + 48);
  char v6 = *(unsigned char *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_250D8AE1C(v3, v4, v5, v6, v0 + v2, v7);
}

void sub_250D8AE1C(uint64_t a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a6;
  uint64_t v47 = a5;
  uint64_t v10 = *MEMORY[0x263F8EED0] & *a3;
  uint64_t v11 = sub_250E24750();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  os_log_type_t v17 = (char *)&v46 - v16;
  uint64_t v54 = a1;
  uint64_t v18 = *(void *)(v10 + 80);
  uint64_t v49 = v18;
  uint64_t v50 = *(void *)(v10 + 88);
  uint64_t v19 = *(void *)(v50 + 24);
  long long v20 = *(_OWORD *)(v50 + 8);
  v51[1] = v18;
  long long v52 = v20;
  uint64_t v53 = v19;
  sub_250E24A00();
  uint64_t v21 = sub_250E24E30();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = sub_250D8B738((void (*)(char *, char *))sub_250D8BB38, (uint64_t)v48, v21, v18, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v23);
  uint64_t v25 = v24;
  if (a2)
  {
    uint64_t v26 = (void *)((char *)a3 + qword_26B207E40);
    swift_beginAccess();
    *uint64_t v26 = v25;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = v24;
    swift_beginAccess();
    sub_250E24E30();
    swift_getWitnessTable();
    sub_250E24E20();
    swift_endAccess();
  }
  if (a4)
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_250E24950();
    __swift_project_value_buffer(v27, (uint64_t)qword_26B207A58);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v47, v11);
    unsigned int v28 = sub_250E24930();
    os_log_type_t v29 = sub_250E24F40();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v51[0] = v31;
      *(_DWORD *)uint64_t v30 = 136446466;
      uint64_t v54 = v46;
      swift_getMetatypeMetadata();
      uint64_t v46 = v11;
      uint64_t v32 = sub_250E24C80();
      uint64_t v54 = sub_250D8B44C(v32, v33, v51);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v34 = sub_250E24720();
      uint64_t v54 = sub_250D8B44C(v34, v35, v51);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v46);
      _os_log_impl(&dword_250D84000, v28, v29, "[%{public}s] Delivering results %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v31, -1, -1);
      MEMORY[0x25338A890](v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    }

    sub_250D8BB64(v47);
  }
  else
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v36 = sub_250E24950();
    __swift_project_value_buffer(v36, (uint64_t)qword_26B207A58);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v47, v11);
    v37 = sub_250E24930();
    os_log_type_t v38 = sub_250E24F40();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = v11;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v51[0] = v41;
      *(_DWORD *)uint64_t v40 = 136446466;
      uint64_t v54 = v46;
      swift_getMetatypeMetadata();
      uint64_t v42 = sub_250E24C80();
      uint64_t v54 = sub_250D8B44C(v42, v43, v51);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v44 = sub_250E24720();
      uint64_t v54 = sub_250D8B44C(v44, v45, v51);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v39);
      _os_log_impl(&dword_250D84000, v37, v38, "[%{public}s] Deferring result delivery %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v41, -1, -1);
      MEMORY[0x25338A890](v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
  }
}

uint64_t sub_250D8B44C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_250D8B57C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_250D8B520((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_250D8B520((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_250D8B520(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_250D8B57C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_250E24FD0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_250DE46B0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_250E25150();
  if (!v8)
  {
    sub_250E25210();
    __break(1u);
LABEL_17:
    uint64_t result = sub_250E25280();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_250D8B738(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  os_log_type_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x270FA5388](v15);
  os_log_type_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_250E24EE0();
  if (!v18) {
    return sub_250E24DF0();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_250E251D0();
  uint64_t v32 = sub_250E251E0();
  sub_250E25180();
  uint64_t v36 = v8;
  uint64_t result = sub_250E24ED0();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    unint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))sub_250E24F00();
      uint64_t v22 = v12;
      uint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_250E251C0();
      sub_250E24EF0();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_250D8BB38()
{
  return sub_250E249F0();
}

void sub_250D8BB64(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v50 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v4 = sub_250E24750();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = sub_250E24990();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v13 = objc_msgSend(v2, sel_queue);
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F8F0E0], v10);
  char v14 = sub_250E249A0();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v15 = (void *)((char *)v2 + qword_26B207E40);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(v50 + 80);
  swift_bridgeObjectRetain();
  uint64_t *v15 = sub_250E24DF0();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)((char *)v2 + qword_26B207E30);
  if (v18)
  {
    uint64_t v45 = *(void *)((char *)v2 + qword_26B207E30 + 8);
    uint64_t v46 = v18;
    swift_retain();
    uint64_t v48 = (char *)sub_250E24730();
    int v47 = *((unsigned __int8 *)v2 + qword_26B20BBB0);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v44 = v16;
    v19(v9, a1, v4);
    unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v21 = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = v4;
    unint64_t v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v17;
    *(void *)(v24 + 24) = *(void *)(v50 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v24 + v20, v9, v43);
    uint64_t v25 = (uint64_t *)(v24 + v21);
    uint64_t v27 = v45;
    uint64_t v26 = v46;
    *uint64_t v25 = v46;
    v25[1] = v27;
    *(void *)(v24 + v22) = v2;
    *(void *)(v24 + v23) = v44;
    *(void *)(v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
    aBlock[4] = sub_250D8A9F0;
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_250D8A9AC;
    aBlock[3] = &block_descriptor_26;
    uint64_t v28 = _Block_copy(aBlock);
    uint64_t v29 = v26;
    sub_250D8C3AC(v26);
    uint64_t v30 = v2;
    swift_release();
    uint64_t v31 = v48;
    objc_msgSend(v30, sel_queue_dispatchToClientForUUID_shouldDeactivate_block_, v48, (v47 & 1) == 0, v28);
    _Block_release(v28);

    sub_250D8C39C(v29);
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_26B207980 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v32 = sub_250E24950();
  __swift_project_value_buffer(v32, (uint64_t)qword_26B207A58);
  unint64_t v33 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v48, a1, v4);
  uint64_t v34 = sub_250E24930();
  uint64_t v35 = v5;
  os_log_type_t v36 = sub_250E24F30();
  if (os_log_type_enabled(v34, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v52 = v38;
    *(_DWORD *)uint64_t v37 = 136446466;
    aBlock[0] = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v39 = sub_250E24C80();
    aBlock[0] = sub_250D8B44C(v39, v40, &v52);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v41 = sub_250E24720();
    aBlock[0] = sub_250D8B44C(v41, v42, &v52);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v4);
    _os_log_impl(&dword_250D84000, v34, v36, "[%{public}s] Missing results handler! %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v38, -1, -1);
    MEMORY[0x25338A890](v37, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v4);
  }
}

id SleepingSampleDaySummaryQuery.init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  id v5 = sub_250D8C1B8(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

id sub_250D8C1B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v12 = (uint64_t *)&v6[qword_26B207E30];
  uint64_t *v12 = 0;
  v12[1] = 0;
  uint64_t v13 = qword_26B207E40;
  char v14 = v6;
  *(void *)&v6[v13] = sub_250E24DF0();
  uint64_t v15 = &v14[qword_26B20BBA0];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  sub_250D88810(a1, (uint64_t)&v14[qword_26B20BB98]);
  uint64_t v16 = &v14[qword_26B20BBA8];
  uint64_t v17 = sub_250E248B0();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v14[qword_26B20BBB0] = a3;
  uint64_t v19 = *v12;
  uint64_t *v12 = a4;
  v12[1] = a5;
  swift_retain();
  sub_250D8C39C(v19);

  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  unint64_t v20 = (void *)sub_250E24DB0();
  v24.receiver = v14;
  v24.super_class = ObjectType;
  id v21 = objc_msgSendSuper2(&v24, sel_initWithQueryDescriptors_, v20);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_250D8A0DC(a1);
  return v21;
}

uint64_t sub_250D8C39C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_250D8C3AC(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_250D8C3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250D8C3E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250D8C3E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x617461446F6ELL && a2 == 0xE600000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000250E2CC50 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000250E2CEC0 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000250E2CEE0 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t GregorianDayRange.dayIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250D8C620(v1, a1, (uint64_t (*)(void))sub_250D8CEA0);
}

uint64_t sub_250D8C620(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D8C688(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8CA08(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D8C6F4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8CA90(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t initializeWithCopy for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t destroy for SleepingSampleQueryRange(uint64_t a1)
{
  uint64_t v2 = sub_250E24B20();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v3(a1 + *(int *)(v4 + 36), v2);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v6 = sub_250E248B0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void sub_250D8C96C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = sub_250D94AFC((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D8CA08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = sub_250D94A28((unint64_t *)&qword_26B208148);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D8CA90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = sub_250D94BD4((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t initializeWithCopy for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_250D8CC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for GregorianDayRange()
{
  uint64_t result = qword_26B208138;
  if (!qword_26B208138) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t destroy for GregorianDayRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_250D8CEA0();
  v5(a1 + *(int *)(v6 + 36), v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = sub_250E248B0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

void sub_250D8CEA0()
{
  if (!qword_26B2081C0)
  {
    sub_250E24B20();
    sub_250DA37BC((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    unint64_t v0 = sub_250E24BD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2081C0);
    }
  }
}

uint64_t sub_250D8CF34(void *a1)
{
  return SleepingSampleDaySummary.encode(to:)(a1);
}

uint64_t SleepingSampleDaySummary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250D8DF08(0, &qword_26B206DD8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D8DF6C();
  sub_250E25510();
  LOBYTE(v14) = 0;
  sub_250E24B20();
  sub_250D94C64(&qword_26B206D70, MEMORY[0x263F090E8]);
  sub_250E253B0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SleepingSampleDaySummary();
    LOBYTE(v14) = 1;
    sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    sub_250D8F560(&qword_26B206D88, &qword_26B206D70);
    sub_250E253B0();
    LOBYTE(v14) = 2;
    sub_250E24710();
    sub_250D94C64(&qword_26B206C68, MEMORY[0x263F07490]);
    sub_250E25370();
    uint64_t v11 = (uint64_t *)(v3 + *(int *)(v10 + 28));
    uint64_t v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 8);
    uint64_t v14 = v12;
    char v15 = (char)v11;
    char v16 = 3;
    sub_250D8E094();
    sub_250E25370();
    LOBYTE(v14) = 4;
    type metadata accessor for SleepingSampleBaselineComparison();
    sub_250D94C64(&qword_26B206CB0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250E253B0();
    LOBYTE(v14) = 5;
    sub_250E253B0();
    LOBYTE(v14) = 6;
    sub_250E253B0();
    LOBYTE(v14) = 7;
    sub_250E253B0();
    LOBYTE(v14) = 8;
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleDaySummary.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v53 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v3 = MEMORY[0x270FA5388](v53);
  uint64_t v48 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v46 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)&v46 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  id v51 = (char *)&v46 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v52 = (char *)&v46 - v11;
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v54 = (char *)&v46 - v13;
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v55 = v14;
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)&v46 - v15;
  uint64_t v17 = sub_250E24B20();
  uint64_t v59 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  v58 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8DF08(0, &qword_26B207938, MEMORY[0x263F8E040]);
  uint64_t v56 = *(void *)(v19 - 8);
  uint64_t v57 = v19;
  MEMORY[0x270FA5388](v19);
  id v21 = (char *)&v46 - v20;
  uint64_t v22 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)&v25[*(int *)(v23 + 24)];
  uint64_t v27 = sub_250E24710();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  uint64_t v64 = v26;
  v28(v26, 1, 1, v27);
  uint64_t v60 = (int *)v22;
  v61 = a1;
  uint64_t v29 = *(int *)(v22 + 28);
  v63 = v25;
  uint64_t v30 = &v25[v29];
  *(void *)uint64_t v30 = 0;
  v30[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D8DF6C();
  uint64_t v31 = v62;
  sub_250E25500();
  if (v31)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    return sub_250D948E0(v64, &qword_26B207DD8, MEMORY[0x263F07490]);
  }
  else
  {
    LOBYTE(v65) = 0;
    sub_250D94C64(&qword_26B2075E8, MEMORY[0x263F090E8]);
    sub_250E25330();
    unint64_t v33 = v21;
    uint64_t v34 = v63;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v63, v58, v17);
    LOBYTE(v65) = 1;
    sub_250D8F560((unint64_t *)&unk_26B2078E0, &qword_26B2075E8);
    v62 = v33;
    sub_250E25330();
    sub_250D8DFC0((uint64_t)v16, (uint64_t)&v34[v60[5]]);
    LOBYTE(v65) = 2;
    sub_250D94C64(&qword_26B2077E0, MEMORY[0x263F07490]);
    uint64_t v35 = (uint64_t)v54;
    sub_250E252F0();
    sub_250D8E0E8(v35, v64);
    char v67 = 3;
    sub_250D8E040();
    sub_250E252F0();
    char v36 = v66;
    *(void *)uint64_t v30 = v65;
    v30[8] = v36;
    LOBYTE(v65) = 4;
    sub_250D94C64(&qword_26B207810, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v37 = (uint64_t)v52;
    sub_250E25330();
    sub_250D8DEA0(v37, (uint64_t)&v34[v60[8]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 5;
    uint64_t v38 = (uint64_t)v51;
    sub_250E25330();
    uint64_t v39 = v60;
    sub_250D8DEA0(v38, (uint64_t)&v34[v60[9]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 6;
    uint64_t v40 = (uint64_t)v50;
    sub_250E25330();
    sub_250D8DEA0(v40, (uint64_t)&v34[v39[10]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 7;
    uint64_t v41 = (uint64_t)v49;
    unint64_t v42 = v62;
    sub_250E25330();
    sub_250D8DEA0(v41, (uint64_t)&v63[v39[11]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 8;
    uint64_t v43 = (uint64_t)v48;
    sub_250E25330();
    uint64_t v44 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v57);
    uint64_t v45 = (uint64_t)v63;
    sub_250D8DEA0(v43, (uint64_t)&v63[v39[12]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250D94878(v45, v47, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
    __swift_destroy_boxed_opaque_existential_1(v44);
    return sub_250D94CAC(v45, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  }
}

uint64_t sub_250D8DEA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250D8DF08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250D8DF6C();
    unint64_t v7 = a3(a1, &type metadata for SleepingSampleDaySummary.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_250D8DF6C()
{
  unint64_t result = qword_26B208028;
  if (!qword_26B208028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208028);
  }
  return result;
}

uint64_t sub_250D8DFC0(uint64_t a1, uint64_t a2)
{
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_250D8E040()
{
  unint64_t result = qword_26B207808;
  if (!qword_26B207808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207808);
  }
  return result;
}

unint64_t sub_250D8E094()
{
  unint64_t result = qword_26B206C98;
  if (!qword_26B206C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B206C98);
  }
  return result;
}

uint64_t sub_250D8E0E8(uint64_t a1, uint64_t a2)
{
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_250D8E17C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaselineAvailability.init(from:)(a1, a2);
}

uint64_t SleepingSampleBaselineAvailability.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250D8F3D8(0, &qword_26B207958, (uint64_t (*)(void))sub_250D8F60C, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v72 = v4;
  uint64_t v70 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  v78 = (char *)&v61 - v5;
  sub_250D8F3D8(0, &qword_26B207960, (uint64_t (*)(void))sub_250DFF0EC, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys, v3);
  uint64_t v73 = v6;
  uint64_t v69 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v77 = (char *)&v61 - v7;
  sub_250D8F3D8(0, &qword_26B207950, (uint64_t (*)(void))sub_250DFF140, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys, v3);
  uint64_t v71 = v8;
  uint64_t v68 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v75 = (char *)&v61 - v9;
  sub_250D8F3D8(0, &qword_26B207948, (uint64_t (*)(void))sub_250D8F660, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.CodingKeys, v3);
  uint64_t v76 = v10;
  uint64_t v74 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v61 - v11;
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v61 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (uint64_t *)((char *)&v61 - v21);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v61 - v23;
  uint64_t v25 = a1[3];
  v79 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_250D8F660();
  uint64_t v26 = v80;
  sub_250E25500();
  if (v26) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  }
  v62 = v22;
  v63 = v24;
  uint64_t v27 = v75;
  uint64_t v28 = v76;
  uint64_t v65 = v19;
  uint64_t v66 = 0;
  uint64_t v64 = (uint64_t)v16;
  uint64_t v30 = v77;
  uint64_t v29 = v78;
  uint64_t v80 = v13;
  uint64_t v31 = sub_250E25340();
  uint64_t v32 = (char *)v31;
  if (*(void *)(v31 + 16) != 1)
  {
    uint64_t v35 = sub_250E25130();
    swift_allocError();
    uint64_t v37 = v36;
    sub_250DA9C54();
    uint64_t *v37 = v80;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCB0], v35);
    swift_willThrow();
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v31 + 32))
  {
    char v81 = 0;
    sub_250DFF140();
    uint64_t v39 = v66;
    sub_250E252C0();
    if (v39) {
      goto LABEL_8;
    }
    uint64_t v40 = v71;
    uint64_t v44 = sub_250E25320();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v27, v40);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v12, v28);
    uint64_t v45 = v62;
    uint64_t *v62 = v44;
    swift_storeEnumTagMultiPayload();
    uint64_t v60 = (uint64_t)v45;
LABEL_14:
    uint64_t v57 = (uint64_t)v79;
    uint64_t v58 = v67;
    uint64_t v59 = (uint64_t)v63;
    goto LABEL_15;
  }
  if (*(unsigned char *)(v31 + 32) != 1)
  {
    char v88 = 2;
    sub_250D8F60C();
    uint64_t v41 = v29;
    uint64_t v42 = v66;
    sub_250E252C0();
    if (v42) {
      goto LABEL_8;
    }
    sub_250D97944();
    char v87 = 0;
    sub_250D8F4D0((unint64_t *)&unk_26B2078E0, &qword_26B2075E8);
    uint64_t v43 = v72;
    sub_250E25330();
    char v86 = 1;
    uint64_t v52 = sub_250E25320();
    sub_250D96CC4();
    v77 = (char *)*(int *)(v53 + 48);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v41, v43);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v12, v28);
    uint64_t v54 = v64;
    *(void *)&v77[v64] = v52;
    swift_storeEnumTagMultiPayload();
    uint64_t v60 = v54;
    goto LABEL_14;
  }
  char v85 = 1;
  sub_250DFF0EC();
  uint64_t v33 = v66;
  sub_250E252C0();
  if (v33)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v12, v28);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  }
  sub_250D97944();
  char v84 = 0;
  sub_250D8F4D0((unint64_t *)&unk_26B2078E0, &qword_26B2075E8);
  uint64_t v34 = v73;
  sub_250E25330();
  char v83 = 1;
  uint64_t v46 = sub_250E25320();
  v78 = v32;
  sub_250DA9D04();
  uint64_t v48 = v47;
  uint64_t v49 = (uint64_t)v65;
  *(void *)&v65[*(int *)(v47 + 48)] = v46;
  char v82 = 2;
  uint64_t v50 = sub_250E25320();
  uint64_t v51 = v74;
  uint64_t v55 = *(int *)(v48 + 64);
  uint64_t v56 = v50;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v30, v34);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v28);
  *(void *)(v49 + v55) = v56;
  swift_storeEnumTagMultiPayload();
  uint64_t v57 = (uint64_t)v79;
  uint64_t v58 = v67;
  uint64_t v59 = (uint64_t)v63;
  uint64_t v60 = v49;
LABEL_15:
  sub_250D8EC28(v60, v59, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  sub_250D8EC28(v59, v58, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return __swift_destroy_boxed_opaque_existential_1(v57);
}

uint64_t sub_250D8EC28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SleepingSampleBaselineAvailability.encode(to:)(void *a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250D8F3D8(0, &qword_26B206DF8, (uint64_t (*)(void))sub_250D8F60C, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v47 = v3;
  uint64_t v40 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v45 = (char *)&v38 - v4;
  sub_250D8F3D8(0, (unint64_t *)&unk_26B206E00, (uint64_t (*)(void))sub_250DFF0EC, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys, v2);
  uint64_t v46 = v5;
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v38 - v6;
  sub_250D97944();
  uint64_t v48 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v42 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v44 = (uint64_t)&v38 - v10;
  sub_250D8F3D8(0, &qword_26B206DF0, (uint64_t (*)(void))sub_250DFF140, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys, v2);
  uint64_t v12 = v11;
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F3D8(0, &qword_26B206DE8, (uint64_t (*)(void))sub_250D8F660, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.CodingKeys, v2);
  uint64_t v52 = v18;
  uint64_t v49 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v38 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D8F660();
  uint64_t v51 = v20;
  sub_250E25510();
  sub_250D8F770(v53, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v30 = v41;
    char v54 = 0;
    sub_250DFF140();
    uint64_t v26 = v51;
    uint64_t v27 = v52;
    sub_250E25350();
    sub_250E253A0();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v26, v27);
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_250DA9D04();
    uint64_t v53 = *(void *)&v17[*(int *)(v22 + 48)];
    uint64_t v23 = *(void *)&v17[*(int *)(v22 + 64)];
    uint64_t v24 = v44;
    sub_250D8EC28((uint64_t)v17, v44, (uint64_t (*)(void))sub_250D97944);
    char v58 = 1;
    sub_250DFF0EC();
    uint64_t v25 = v43;
    uint64_t v26 = v51;
    uint64_t v27 = v52;
    sub_250E25350();
    char v57 = 0;
    sub_250D8F4D0(&qword_26B206D88, &qword_26B206D70);
    uint64_t v28 = v46;
    uint64_t v29 = v50;
    sub_250E253B0();
    if (!v29)
    {
      uint64_t v50 = v23;
      char v56 = 1;
      sub_250E253A0();
      char v55 = 2;
      sub_250E253A0();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v28);
    sub_250D8F6B4(v24, (uint64_t (*)(void))sub_250D97944);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v26, v27);
  }
  sub_250D96CC4();
  uint64_t v32 = v42;
  sub_250D8EC28((uint64_t)v17, v42, (uint64_t (*)(void))sub_250D97944);
  char v61 = 2;
  sub_250D8F60C();
  uint64_t v33 = v45;
  uint64_t v35 = v51;
  uint64_t v34 = v52;
  sub_250E25350();
  char v60 = 0;
  sub_250D8F4D0(&qword_26B206D88, &qword_26B206D70);
  uint64_t v36 = v47;
  uint64_t v37 = v50;
  sub_250E253B0();
  if (!v37)
  {
    char v59 = 1;
    sub_250E253A0();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v36);
  sub_250D8F6B4(v32, (uint64_t (*)(void))sub_250D97944);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v35, v34);
}

void sub_250D8F3D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_250D8F440(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D97944();
    sub_250D94950(a2, MEMORY[0x263F090E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D8F4D0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D97944();
    sub_250D94B44(a2, MEMORY[0x263F090E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D8F560(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D98A24(255, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    sub_250D94C64(a2, MEMORY[0x263F090E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250D8F60C()
{
  unint64_t result = qword_26B208090;
  if (!qword_26B208090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208090);
  }
  return result;
}

unint64_t sub_250D8F660()
{
  unint64_t result = qword_26B208060;
  if (!qword_26B208060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208060);
  }
  return result;
}

uint64_t sub_250D8F6B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D8F714(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_250D8CA90(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250D8F770(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D8F7D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaseline.init(from:)(a1, a2);
}

uint64_t SleepingSampleBaseline.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v49 = v3;
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v43 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v35 - v6;
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v8 = v7;
  uint64_t v45 = *((void *)v7 - 1);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)&v35 - v12;
  sub_250D903F4(0, &qword_26B2078F8, MEMORY[0x263F8E040]);
  uint64_t v50 = v13;
  uint64_t v46 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = type metadata accessor for SleepingSampleBaseline();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D90510();
  uint64_t v51 = v15;
  uint64_t v19 = (uint64_t)v52;
  sub_250E25500();
  if (v19) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v20 = v47;
  uint64_t v40 = v11;
  uint64_t v41 = v16;
  uint64_t v52 = a1;
  uint64_t v21 = v49;
  char v56 = 0;
  uint64_t v22 = sub_250D904B4(&qword_26B2078C0);
  uint64_t v23 = v48;
  sub_250E25330();
  uint64_t v38 = v22;
  uint64_t v39 = v18;
  uint64_t v24 = v8;
  uint64_t v25 = *(void (**)(char *, char *))(v45 + 32);
  uint64_t v48 = v24;
  v25(v18, v23);
  char v55 = 1;
  sub_250D90458(&qword_26B2078C8);
  uint64_t v26 = v20;
  sub_250E25330();
  uint64_t v27 = &v39[*(int *)(v41 + 20)];
  uint64_t v28 = v44 + 32;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  uint64_t v37 = (void (*)(char *, char *, char *))v25;
  v36(v27, v26, v21);
  char v54 = 2;
  uint64_t v29 = v40;
  uint64_t v30 = v48;
  uint64_t v47 = 0;
  sub_250E25330();
  uint64_t v38 = v28;
  uint64_t v31 = v41;
  v37(&v39[*(int *)(v41 + 24)], v29, v30);
  char v53 = 3;
  uint64_t v32 = v43;
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v51, v50);
  uint64_t v33 = (uint64_t)v39;
  v36(&v39[*(int *)(v31 + 28)], v32, v21);
  sub_250D8FFA4(v33, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return sub_250D8FE0C(v33);
}

uint64_t sub_250D8FE0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for SleepingSampleBaseline(uint64_t a1, int *a2)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v5 = v4;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + a2[5];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v9 = v8;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v8 - 8), v7, v8);
  v6(a1 + a2[6], v5);
  uint64_t v10 = a1 + a2[7];

  return v12(v10, v9);
}

uint64_t sub_250D8FFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v15 = a1 + v9;
  uint64_t v10 = a2 + v9;
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v13(v15, v10, v11);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v13(a1 + a3[7], a2 + a3[7], v12);
  return a1;
}

uint64_t SleepingSampleBaseline.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250D903F4(0, &qword_26B206D98, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D90510();
  sub_250E25510();
  char v19 = 0;
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  sub_250D904B4(&qword_26B206D60);
  sub_250E253B0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SleepingSampleBaseline();
    v15[2] = v3;
    v15[3] = v10;
    char v18 = 1;
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v12 = v11;
    uint64_t v13 = sub_250D90458(&qword_26B206D68);
    sub_250E253B0();
    v15[0] = v13;
    v15[1] = v12;
    char v17 = 2;
    sub_250E253B0();
    char v16 = 3;
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_250D903F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250D90510();
    unint64_t v7 = a3(a1, &type metadata for SleepingSampleBaseline.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250D90458(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D98938(255, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D904B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D98938(255, &qword_26B208150, (unint64_t *)&qword_26B208158);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250D90510()
{
  unint64_t result = qword_26B207F68;
  if (!qword_26B207F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F68);
  }
  return result;
}

uint64_t sub_250D90564@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaselineComparison.init(from:)(a1, a2);
}

uint64_t SleepingSampleBaselineComparison.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v25 = (char *)&v23 - v4;
  uint64_t v28 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v28);
  uint64_t v27 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D90E24(0, &qword_26B207940, (uint64_t (*)(void))sub_250D90E8C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v31 = v7;
  uint64_t v26 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 24)];
  uint64_t v15 = type metadata accessor for SleepingSampleBaseline();
  char v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v33 = v14;
  v16(v14, 1, 1, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D90E8C();
  uint64_t v32 = v9;
  uint64_t v17 = (uint64_t)v34;
  sub_250E25500();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_250DA6B34(v33);
  }
  else
  {
    uint64_t v18 = (uint64_t)v27;
    uint64_t v23 = v10;
    uint64_t v19 = v26;
    uint64_t v34 = a1;
    char v37 = 0;
    sub_250D91C3C(&qword_26B207800, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregate);
    uint64_t v20 = (uint64_t)v30;
    sub_250E25330();
    sub_250D90B0C(v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
    char v36 = 1;
    sub_250D91C3C(&qword_26B207818, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_250E25330();
    sub_250D90B0C(v18, (uint64_t)&v13[*(int *)(v23 + 20)], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    char v35 = 2;
    sub_250D91C3C(&qword_26B2077F0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    uint64_t v21 = (uint64_t)v25;
    sub_250E252F0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v32, v31);
    sub_250D93768(v21, v33);
    sub_250D90EE0((uint64_t)v13, v24, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    return sub_250D91F38((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  }
}

uint64_t sub_250D90B0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SleepingSampleBaselineComparison.encode(to:)(void *a1)
{
  sub_250D90E24(0, &qword_26B206DE0, (uint64_t (*)(void))sub_250D90E8C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D90E8C();
  sub_250E25510();
  char v12 = 0;
  type metadata accessor for SleepingSampleAggregate();
  sub_250D91C3C(&qword_26B206C90, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregate);
  sub_250E253B0();
  if (!v1)
  {
    type metadata accessor for SleepingSampleBaselineComparison();
    char v11 = 1;
    type metadata accessor for SleepingSampleBaselineAvailability();
    sub_250D91C3C(&qword_26B206CB8, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_250E253B0();
    char v10 = 2;
    type metadata accessor for SleepingSampleBaseline();
    sub_250D91C3C(&qword_26B206C80, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    sub_250E25370();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_250D90E24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250D90E8C()
{
  unint64_t result = qword_26B208048;
  if (!qword_26B208048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208048);
  }
  return result;
}

uint64_t sub_250D90EE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D90F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t SleepingSampleAggregate.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250D93658(0, &qword_26B206DA0, (uint64_t (*)(void))sub_250D927A8, (uint64_t)&type metadata for SleepingSampleAggregate.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D927A8();
  sub_250E25510();
  char v19 = 0;
  sub_250E24B20();
  sub_250D91C84(&qword_26B206D70, MEMORY[0x263F090E8]);
  sub_250E253B0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SleepingSampleAggregate();
    char v18 = 1;
    sub_250E248B0();
    sub_250D91C84(&qword_26B206C78, MEMORY[0x263F07920]);
    sub_250E253B0();
    char v17 = 2;
    sub_250D922D0(0);
    sub_250D91C84(&qword_26B206D60, sub_250D922D0);
    sub_250E25370();
    char v16 = 3;
    sub_250E243F0();
    sub_250D91C84(&qword_26B206C58, MEMORY[0x263F062D0]);
    sub_250E25370();
    char v15 = 4;
    sub_250E24710();
    sub_250D91C84(&qword_26B206C68, MEMORY[0x263F07490]);
    sub_250E25370();
    char v14 = *(unsigned char *)(v3 + *(int *)(v10 + 36));
    char v13 = 5;
    sub_250D928EC();
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleAggregate.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v33 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E248B0();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  MEMORY[0x270FA5388](v9);
  char v36 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_250E24B20();
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v37 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D93658(0, &qword_26B207900, (uint64_t (*)(void))sub_250D927A8, (uint64_t)&type metadata for SleepingSampleAggregate.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v41 = v13;
  uint64_t v35 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v29 - v14;
  char v16 = (int *)type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v16);
  char v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D927A8();
  uint64_t v40 = v15;
  uint64_t v19 = (uint64_t)v42;
  sub_250E25500();
  if (v19) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v20 = v36;
  uint64_t v21 = (uint64_t)v18;
  uint64_t v23 = v38;
  uint64_t v22 = v39;
  uint64_t v42 = a1;
  char v49 = 0;
  sub_250D91C84(&qword_26B2075E8, MEMORY[0x263F090E8]);
  uint64_t v24 = v37;
  sub_250E25330();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v21, v24, v11);
  char v48 = 1;
  sub_250D91C84(&qword_26B2077E8, MEMORY[0x263F07920]);
  sub_250E25330();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v21 + v16[5], v20, v22);
  sub_250D922D0(0);
  char v47 = 2;
  sub_250D91C84(&qword_26B2078C0, sub_250D922D0);
  uint64_t v25 = (uint64_t)v33;
  char v37 = 0;
  sub_250E252F0();
  sub_250D91DE4(v25, v21 + v16[6], (uint64_t (*)(void))sub_250D91EB4);
  sub_250E243F0();
  char v46 = 3;
  sub_250D91C84(&qword_26B2077D0, MEMORY[0x263F062D0]);
  uint64_t v26 = (uint64_t)v32;
  sub_250E252F0();
  sub_250D91DE4(v26, v21 + v16[7], (uint64_t (*)(void))sub_250D927FC);
  sub_250E24710();
  char v45 = 4;
  sub_250D91C84(&qword_26B2077E0, MEMORY[0x263F07490]);
  uint64_t v27 = (uint64_t)v31;
  sub_250E252F0();
  sub_250D91DE4(v27, v21 + v16[8], (uint64_t (*)(void))sub_250D94D70);
  char v43 = 5;
  sub_250D92898();
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v41);
  *(unsigned char *)(v21 + v16[9]) = v44;
  sub_250D92830(v21, v30, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return sub_250D91FF8(v21, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t sub_250D91C3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D91C84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D91CCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D91D14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D91D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D91DE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D91E4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250D91EB4()
{
  if (!qword_26B2081C8)
  {
    sub_250D9B884(255, &qword_26B208150, (unint64_t *)&qword_26B208158, 0x263F0A630, MEMORY[0x263F08F88]);
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2081C8);
    }
  }
}

uint64_t sub_250D91F38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D91F98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D91FF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for SleepingSampleAggregate(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  sub_250D922D0(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t v12 = sub_250E243F0();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = a1 + a2[8];
  uint64_t v15 = sub_250E24710();
  uint64_t v18 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    return v17(v14, v15);
  }
  return result;
}

void sub_250D922D0(uint64_t a1)
{
}

uint64_t initializeWithCopy for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v12, v13, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_250E243F0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_250D927FC(0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = sub_250E24710();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_250D94D70(0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

void sub_250D9267C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D926E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D92744(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_250D927A8()
{
  unint64_t result = qword_26B207F80;
  if (!qword_26B207F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F80);
  }
  return result;
}

void sub_250D927FC(uint64_t a1)
{
}

uint64_t sub_250D92830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_250D92898()
{
  unint64_t result = qword_26B2077F8;
  if (!qword_26B2077F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2077F8);
  }
  return result;
}

unint64_t sub_250D928EC()
{
  unint64_t result = qword_26B206C88;
  if (!qword_26B206C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B206C88);
  }
  return result;
}

uint64_t SleepingSampleAggregate.Availability.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  char v48 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250D93658(0, &qword_26B207918, (uint64_t (*)(void))sub_250D936C0, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v52 = v4;
  uint64_t v45 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v47 = (char *)&v36 - v5;
  sub_250D93658(0, &qword_26B207928, (uint64_t (*)(void))sub_250DC2B64, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys, v3);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)&v36 - v7;
  sub_250D93658(0, &qword_26B207930, (uint64_t (*)(void))sub_250DC2BB8, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys, v3);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  MEMORY[0x270FA5388](v8);
  char v46 = (char *)&v36 - v9;
  sub_250D93658(0, &qword_26B207920, (uint64_t (*)(void))sub_250DC2C0C, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys, v3);
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v50 = (char *)&v36 - v11;
  sub_250D93658(0, &qword_26B207910, (uint64_t (*)(void))sub_250DC2C60, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys, v3);
  uint64_t v13 = v12;
  uint64_t v38 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - v14;
  sub_250D93658(0, &qword_26B207908, (uint64_t (*)(void))sub_250D93714, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.CodingKeys, v3);
  uint64_t v17 = v16;
  uint64_t v49 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v36 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D93714();
  uint64_t v20 = v53;
  sub_250E25500();
  if (!v20)
  {
    char v53 = v15;
    uint64_t v37 = v13;
    uint64_t v21 = v50;
    uint64_t v22 = v51;
    uint64_t v23 = v52;
    uint64_t v24 = v19;
    uint64_t v25 = sub_250E25340();
    if (*(void *)(v25 + 16) == 1)
    {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 32);
      uint64_t v36 = v26;
      switch(v26)
      {
        case 1:
          char v55 = 1;
          sub_250DC2C0C();
          sub_250E252C0();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v40);
          break;
        case 2:
          char v56 = 2;
          sub_250DC2BB8();
          uint64_t v33 = v46;
          sub_250E252C0();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v42);
          break;
        case 3:
          char v57 = 3;
          sub_250DC2B64();
          uint64_t v27 = v22;
          sub_250E252C0();
          uint64_t v29 = v43;
          uint64_t v28 = v44;
          goto LABEL_9;
        case 4:
          char v58 = 4;
          sub_250D936C0();
          uint64_t v34 = v47;
          sub_250E252C0();
          (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v23);
          break;
        default:
          char v54 = 0;
          sub_250DC2C60();
          uint64_t v27 = v53;
          sub_250E252C0();
          uint64_t v28 = v37;
          uint64_t v29 = v38;
LABEL_9:
          (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
          break;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v17);
      unsigned char *v48 = v36;
    }
    else
    {
      uint64_t v30 = sub_250E25130();
      swift_allocError();
      uint64_t v32 = v31;
      sub_250DA9C54();
      *uint64_t v32 = &type metadata for SleepingSampleAggregate.Availability;
      sub_250E252D0();
      sub_250E25110();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x263F8DCB0], v30);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v17);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SleepingSampleAggregate.Availability.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250D93658(0, &qword_26B206DB8, (uint64_t (*)(void))sub_250D936C0, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v26 - v6;
  sub_250D93658(0, &qword_26B206DC8, (uint64_t (*)(void))sub_250DC2B64, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys, v4);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v35 = (char *)&v26 - v8;
  sub_250D93658(0, &qword_26B206DD0, (uint64_t (*)(void))sub_250DC2BB8, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys, v4);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v32 = (char *)&v26 - v10;
  sub_250D93658(0, &qword_26B206DC0, (uint64_t (*)(void))sub_250DC2C0C, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys, v4);
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v29 = (char *)&v26 - v12;
  sub_250D93658(0, &qword_26B206DB0, (uint64_t (*)(void))sub_250DC2C60, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys, v4);
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v28 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v26 - v14;
  sub_250D93658(0, &qword_26B206DA8, (uint64_t (*)(void))sub_250D93714, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.CodingKeys, v4);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v21 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250D93714();
  sub_250E25510();
  switch(v21)
  {
    case 1:
      char v42 = 1;
      sub_250DC2C0C();
      uint64_t v22 = v29;
      sub_250E25350();
      uint64_t v24 = v30;
      uint64_t v23 = v31;
      goto LABEL_7;
    case 2:
      char v43 = 2;
      sub_250DC2BB8();
      uint64_t v22 = v32;
      sub_250E25350();
      uint64_t v24 = v33;
      uint64_t v23 = v34;
      goto LABEL_7;
    case 3:
      char v44 = 3;
      sub_250DC2B64();
      uint64_t v22 = v35;
      sub_250E25350();
      uint64_t v24 = v36;
      uint64_t v23 = v37;
      goto LABEL_7;
    case 4:
      char v45 = 4;
      sub_250D936C0();
      uint64_t v22 = v38;
      sub_250E25350();
      uint64_t v24 = v39;
      uint64_t v23 = v40;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
      break;
    default:
      char v41 = 0;
      sub_250DC2C60();
      sub_250E25350();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v28);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

void sub_250D93658(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250D936C0()
{
  unint64_t result = qword_26B207FC8;
  if (!qword_26B207FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FC8);
  }
  return result;
}

unint64_t sub_250D93714()
{
  unint64_t result = qword_26B207F98;
  if (!qword_26B207F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F98);
  }
  return result;
}

uint64_t sub_250D93768(uint64_t a1, uint64_t a2)
{
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_250D937E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v114 = a1;
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v105 - v3;
  uint64_t v142 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v142);
  uint64_t v141 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_250E243F0();
  uint64_t v115 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  v127 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v126 = (char *)&v105 - v10;
  MEMORY[0x270FA5388](v9);
  v150 = (char *)&v105 - v11;
  uint64_t v12 = sub_250E24710();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v125 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v117 = (char *)&v105 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v124 = (char *)&v105 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v116 = (char *)&v105 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v107 = (char *)&v105 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v106 = (char *)&v105 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v105 = (char *)&v105 - v27;
  MEMORY[0x270FA5388](v26);
  v109 = (char *)&v105 - v28;
  uint64_t v113 = type metadata accessor for SleepingSampleBaselineComparison();
  v145 = *(char **)(v113 - 8);
  uint64_t v29 = (uint64_t)v145;
  MEMORY[0x270FA5388](v113);
  uint64_t v140 = (uint64_t)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], v1);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v123 = (uint64_t)&v105 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  v122 = (char *)&v105 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v121 = (uint64_t)&v105 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  v120 = (char *)&v105 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v108 = (uint64_t)&v105 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v112 = (uint64_t)&v105 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  char v46 = (char *)&v105 - v45;
  MEMORY[0x270FA5388](v44);
  char v48 = (char *)&v105 - v47;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v148 = v13 + 56;
  v49((char *)&v105 - v47, 1, 1, v12);
  v147 = v46;
  uint64_t v151 = v12;
  v138 = v49;
  v49(v46, 1, 1, v12);
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v50 = *(void *)(v29 + 72);
  unint64_t v51 = (v145[80] + 32) & ~(unint64_t)v145[80];
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_250E27DE0;
  uint64_t v111 = v52;
  uint64_t v53 = v52 + v51;
  char v54 = (int *)type metadata accessor for SleepingSampleDaySummary();
  char v55 = v146;
  sub_250D94878((uint64_t)v146 + v54[8], v53, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878((uint64_t)v55 + v54[9], v53 + v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878((uint64_t)v55 + v54[10], v53 + 2 * v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v139 = v50;
  sub_250D94878((uint64_t)v55 + v54[11], v53 + 3 * v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878((uint64_t)v55 + v54[12], v53 + 4 * v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  char v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48);
  v118 = (void (**)(char *, char *, uint64_t))(v115 + 32);
  v137 = (void (**)(char *, char *, uint64_t))(v115 + 16);
  v146 = (void *)(v148 - 8);
  v129 = (void (**)(char *, uint64_t, uint64_t))(v148 - 24);
  v143 = (void (**)(char *, char *, uint64_t))(v148 - 40);
  v144 = (void (**)(char *, uint64_t))(v148 - 48);
  uint64_t v57 = 5;
  uint64_t v110 = v53;
  uint64_t v58 = v53;
  v128 = v4;
  v145 = v48;
  v119 = (unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48);
  v136 = (void (**)(char *, uint64_t))(v115 + 8);
  uint64_t v149 = v6;
  do
  {
    uint64_t v59 = v140;
    sub_250D94878(v58, v140, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v60 = v141;
    sub_250D94878(v59, v141, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
    sub_250D94CAC(v59, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250D94790(v60 + *(int *)(v142 + 28), (uint64_t)v4, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    sub_250D94CAC(v60, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
    if ((*v56)(v4, 1, v6) == 1)
    {
      sub_250D948E0((uint64_t)v4, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    }
    else
    {
      char v61 = v150;
      (*v118)(v150, v4, v6);
      uint64_t v62 = v121;
      sub_250D94790((uint64_t)v48, v121, &qword_26B207DD8, MEMORY[0x263F07490]);
      v63 = *v137;
      uint64_t v64 = v126;
      (*v137)(v126, v61, v6);
      uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*v146;
      int v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v146)(v62, 1, v151);
      v133 = v65;
      v134 = v63;
      if (v66 == 1)
      {
        uint64_t v67 = v116;
        sub_250E243E0();
        v130 = *v136;
        v130(v64, v6);
        sub_250D948E0(v62, &qword_26B207DD8, MEMORY[0x263F07490]);
      }
      else
      {
        v130 = *v136;
        v130(v64, v6);
        uint64_t v67 = v116;
        (*v129)(v116, v62, v151);
      }
      uint64_t v68 = v124;
      uint64_t v69 = v150;
      sub_250E243E0();
      uint64_t v70 = sub_250D94C64((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
      uint64_t v71 = v151;
      uint64_t v131 = v70;
      char v72 = sub_250E24B90();
      uint64_t v73 = *v143;
      if (v72) {
        uint64_t v74 = v68;
      }
      else {
        uint64_t v74 = v67;
      }
      uint64_t v75 = (uint64_t)v120;
      v132 = *v143;
      v73(v120, v74, v71);
      uint64_t v76 = *v144;
      (*v144)(v68, v71);
      v76(v67, v71);
      v77 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
      uint64_t v78 = (uint64_t)v145;
      sub_250D948E0((uint64_t)v145, &qword_26B207DD8, MEMORY[0x263F07490]);
      v138((char *)v75, 0, 1, v71);
      sub_250D94D0C(v75, v78);
      uint64_t v79 = v123;
      sub_250D94790((uint64_t)v147, v123, &qword_26B207DD8, v77);
      uint64_t v80 = v127;
      v134(v127, v69, v149);
      int v81 = v133(v79, 1, v71);
      uint64_t v135 = v57;
      if (v81 == 1)
      {
        uint64_t v82 = v151;
        char v83 = v117;
        sub_250E243B0();
        char v84 = v130;
        v130(v80, v149);
        sub_250D948E0(v79, &qword_26B207DD8, MEMORY[0x263F07490]);
      }
      else
      {
        char v84 = v130;
        v130(v80, v149);
        uint64_t v82 = v151;
        char v83 = v117;
        (*v129)(v117, v79, v151);
      }
      char v85 = v125;
      char v86 = v150;
      sub_250E243B0();
      if (sub_250E24BA0()) {
        char v87 = v85;
      }
      else {
        char v87 = v83;
      }
      uint64_t v88 = (uint64_t)v122;
      v132(v122, v87, v82);
      v76(v85, v82);
      v76(v83, v82);
      uint64_t v6 = v149;
      v84(v86, v149);
      uint64_t v89 = (uint64_t)v147;
      sub_250D948E0((uint64_t)v147, &qword_26B207DD8, MEMORY[0x263F07490]);
      v138((char *)v88, 0, 1, v82);
      sub_250D94D0C(v88, v89);
      uint64_t v4 = v128;
      char v48 = v145;
      char v56 = v119;
      uint64_t v57 = v135;
    }
    v58 += v139;
    --v57;
  }
  while (v57);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v90 = v112;
  sub_250D94790((uint64_t)v48, v112, &qword_26B207DD8, MEMORY[0x263F07490]);
  v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*v146;
  int v92 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v146)(v90, 1, v151);
  uint64_t v93 = v114;
  if (v92 == 1)
  {
    uint64_t v94 = (uint64_t)v147;
  }
  else
  {
    v95 = *v129;
    v96 = v109;
    uint64_t v97 = v151;
    (*v129)(v109, v90, v151);
    uint64_t v94 = (uint64_t)v147;
    uint64_t v90 = v108;
    sub_250D94790((uint64_t)v147, v108, &qword_26B207DD8, MEMORY[0x263F07490]);
    if (v91(v90, 1, v97) != 1)
    {
      v99 = v105;
      uint64_t v100 = v151;
      v95(v105, v90, v151);
      v101 = *v143;
      (*v143)(v106, v96, v100);
      v101(v107, v99, v100);
      sub_250E243C0();
      v102 = *v144;
      (*v144)(v99, v100);
      v102(v96, v100);
      uint64_t v98 = 0;
      uint64_t v90 = (uint64_t)v145;
      goto LABEL_24;
    }
    (*v144)(v96, v151);
    char v48 = v145;
  }
  sub_250D948E0(v94, &qword_26B207DD8, MEMORY[0x263F07490]);
  uint64_t v98 = 1;
  uint64_t v94 = (uint64_t)v48;
LABEL_24:
  v103 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_250D948E0(v94, &qword_26B207DD8, MEMORY[0x263F07490]);
  sub_250D948E0(v90, &qword_26B207DD8, v103);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56))(v93, v98, 1, v6);
}

uint64_t sub_250D94790(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250D96C60(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250D94810(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D94878(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D948E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250D96C60(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250D94950(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94998(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D949E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94A28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250E24B20();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94A6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94AB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94AFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94B44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94B8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94BD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94C1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94C64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250D94CAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250D94D0C(uint64_t a1, uint64_t a2)
{
  sub_250D94D70(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_250D94D70(uint64_t a1)
{
}

uint64_t initializeWithCopy for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v203 = v11;
  uint64_t v218 = v6;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v213 = a3;
  uint64_t v214 = a2;
  uint64_t v12 = a3[6];
  uint64_t v216 = a1;
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_250E24710();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v217 = v15;
  v215 = *(unsigned int (**)(const void *, uint64_t))(v16 + 48);
  uint64_t v200 = v16;
  if (v215(v14, 1))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v217);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = v216 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = v216 + v19;
  uint64_t v23 = a2 + v19;
  v7(v216 + v19, a2 + v19, v6);
  uint64_t v24 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = sub_250E248B0();
  v208 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
  uint64_t v209 = v28;
  v208(v26, v27);
  v221 = (int *)v24;
  uint64_t v29 = *(int *)(v24 + 24);
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (const void *)(v23 + v29);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  v206 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
  uint64_t v212 = v32;
  if (v206(v31, 1, v32))
  {
    sub_250D91EB4();
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v30, v31, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  }
  uint64_t v36 = v221[7];
  uint64_t v37 = (void *)(v22 + v36);
  uint64_t v38 = (const void *)(v23 + v36);
  uint64_t v39 = sub_250E243F0();
  uint64_t v40 = *(void *)(v39 - 8);
  v205 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v207 = v39;
  uint64_t v201 = v40;
  if (v205(v38, 1, v39))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = v221[8];
  uint64_t v43 = (void *)(v22 + v42);
  uint64_t v44 = (const void *)(v23 + v42);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v23 + v42, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 16))(v43, v44, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v43, 0, 1, v217);
  }
  *(unsigned char *)(v22 + v221[9]) = *(unsigned char *)(v23 + v221[9]);
  uint64_t v220 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v46 = *(int *)(v220 + 20);
  uint64_t v47 = (char *)(v22 + v46);
  char v48 = (char *)(v23 + v46);
  uint64_t v219 = type metadata accessor for SleepingSampleBaselineAvailability();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    v7((uint64_t)&v47[*(int *)(v203 + 36)], (uint64_t)&v48[*(int *)(v203 + 36)], v6);
    sub_250D96CC4();
    *(void *)&v47[*(int *)(v51 + 48)] = *(void *)&v48[*(int *)(v51 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    v7((uint64_t)&v47[*(int *)(v203 + 36)], (uint64_t)&v48[*(int *)(v203 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v47[*(int *)(v50 + 48)] = *(void *)&v48[*(int *)(v50 + 48)];
    *(void *)&v47[*(int *)(v50 + 64)] = *(void *)&v48[*(int *)(v50 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v47, v48, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v52 = *(int *)(v220 + 24);
  uint64_t v53 = (char *)(v22 + v52);
  char v54 = (char *)(v23 + v52);
  char v55 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v56 = *((void *)v55 - 1);
  v204 = *(unsigned int (**)(char *, uint64_t, int *))(v56 + 48);
  v202 = v7;
  uint64_t v211 = v34;
  v210 = v55;
  uint64_t v199 = v56;
  if (v204(v54, 1, v55))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    uint64_t v58 = v212;
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v59(v53, v54, v212);
    uint64_t v60 = v55[5];
    v197 = &v54[v60];
    v198 = &v53[v60];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v62 = v61;
    v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v63(v198, v197, v61);
    v59(&v53[v55[6]], &v54[v55[6]], v212);
    uint64_t v64 = v62;
    uint64_t v7 = v202;
    v63(&v53[v55[7]], &v54[v55[7]], v64);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
  }
  uint64_t v65 = v213[9];
  uint64_t v66 = v216 + v65;
  uint64_t v67 = v214 + v65;
  v7(v216 + v65, v214 + v65, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v66 + v221[5], v67 + v221[5], v209);
  uint64_t v68 = v221[6];
  uint64_t v69 = (void *)(v66 + v68);
  uint64_t v70 = (const void *)(v67 + v68);
  if (v206((const void *)(v67 + v68), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v69, v70, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v69, 0, 1, v58);
  }
  uint64_t v72 = v221[7];
  uint64_t v73 = (void *)(v66 + v72);
  uint64_t v74 = (const void *)(v67 + v72);
  if (v205((const void *)(v67 + v72), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v73, v74, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v73, 0, 1, v207);
  }
  uint64_t v76 = v221[8];
  v77 = (void *)(v66 + v76);
  uint64_t v78 = (const void *)(v67 + v76);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v67 + v76, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 16))(v77, v78, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v77, 0, 1, v217);
  }
  *(unsigned char *)(v66 + v221[9]) = *(unsigned char *)(v67 + v221[9]);
  uint64_t v80 = *(int *)(v220 + 20);
  int v81 = (char *)(v66 + v80);
  uint64_t v82 = (char *)(v67 + v80);
  int v83 = swift_getEnumCaseMultiPayload();
  if (v83 == 2)
  {
    v7((uint64_t)v81, (uint64_t)v82, v218);
    v7((uint64_t)&v81[*(int *)(v203 + 36)], (uint64_t)&v82[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v81[*(int *)(v85 + 48)] = *(void *)&v82[*(int *)(v85 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v83 == 1)
  {
    v7((uint64_t)v81, (uint64_t)v82, v218);
    v7((uint64_t)&v81[*(int *)(v203 + 36)], (uint64_t)&v82[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v81[*(int *)(v84 + 48)] = *(void *)&v82[*(int *)(v84 + 48)];
    *(void *)&v81[*(int *)(v84 + 64)] = *(void *)&v82[*(int *)(v84 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v81, v82, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v86 = *(int *)(v220 + 24);
  char v87 = (char *)(v66 + v86);
  uint64_t v88 = (char *)(v67 + v86);
  if (v204(v88, 1, v55))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    uint64_t v90 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v90(v87, v88, v212);
    uint64_t v91 = v210[5];
    int v92 = &v87[v91];
    uint64_t v93 = &v88[v91];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v95 = v94;
    v96 = *(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16);
    uint64_t v97 = v92;
    uint64_t v7 = v202;
    v96(v97, v93, v95);
    v90(&v87[v210[6]], &v88[v210[6]], v212);
    v96(&v87[v210[7]], &v88[v210[7]], v95);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v87, 0, 1, v210);
  }
  uint64_t v98 = v213[10];
  uint64_t v99 = v216 + v98;
  uint64_t v100 = v214 + v98;
  v7(v216 + v98, v214 + v98, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v99 + v221[5], v100 + v221[5], v209);
  uint64_t v101 = v221[6];
  v102 = (void *)(v99 + v101);
  v103 = (const void *)(v100 + v101);
  if (v206((const void *)(v100 + v101), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v102, v103, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v102, 0, 1, v58);
  }
  uint64_t v105 = v221[7];
  v106 = (void *)(v99 + v105);
  v107 = (const void *)(v100 + v105);
  if (v205((const void *)(v100 + v105), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 16))(v106, v107, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v106, 0, 1, v207);
  }
  uint64_t v109 = v221[8];
  uint64_t v110 = (void *)(v99 + v109);
  uint64_t v111 = (const void *)(v100 + v109);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v100 + v109, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 16))(v110, v111, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v110, 0, 1, v217);
  }
  *(unsigned char *)(v99 + v221[9]) = *(unsigned char *)(v100 + v221[9]);
  uint64_t v113 = *(int *)(v220 + 20);
  uint64_t v114 = (char *)(v99 + v113);
  uint64_t v115 = (char *)(v100 + v113);
  int v116 = swift_getEnumCaseMultiPayload();
  if (v116 == 2)
  {
    v7((uint64_t)v114, (uint64_t)v115, v218);
    v7((uint64_t)&v114[*(int *)(v203 + 36)], (uint64_t)&v115[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v114[*(int *)(v118 + 48)] = *(void *)&v115[*(int *)(v118 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v116 == 1)
  {
    v7((uint64_t)v114, (uint64_t)v115, v218);
    v7((uint64_t)&v114[*(int *)(v203 + 36)], (uint64_t)&v115[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v114[*(int *)(v117 + 48)] = *(void *)&v115[*(int *)(v117 + 48)];
    *(void *)&v114[*(int *)(v117 + 64)] = *(void *)&v115[*(int *)(v117 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v114, v115, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v119 = *(int *)(v220 + 24);
  v120 = (char *)(v99 + v119);
  uint64_t v121 = (char *)(v100 + v119);
  if (v204(v121, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v120, v121, *(void *)(*(void *)(v122 - 8) + 64));
  }
  else
  {
    uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v123(v120, v121, v212);
    uint64_t v124 = v210[5];
    v125 = &v120[v124];
    v126 = &v121[v124];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v128 = v127;
    v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16);
    v130 = v125;
    uint64_t v7 = v202;
    v129(v130, v126, v128);
    v123(&v120[v210[6]], &v121[v210[6]], v212);
    v129(&v120[v210[7]], &v121[v210[7]], v128);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v120, 0, 1, v210);
  }
  uint64_t v131 = v213[11];
  uint64_t v132 = v216 + v131;
  uint64_t v133 = v214 + v131;
  v7(v216 + v131, v214 + v131, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v132 + v221[5], v133 + v221[5], v209);
  uint64_t v134 = v221[6];
  uint64_t v135 = (void *)(v132 + v134);
  v136 = (const void *)(v133 + v134);
  if (v206((const void *)(v133 + v134), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v135, v136, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v135, 0, 1, v58);
  }
  uint64_t v138 = v221[7];
  uint64_t v139 = (void *)(v132 + v138);
  uint64_t v140 = (const void *)(v133 + v138);
  if (v205((const void *)(v133 + v138), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v139, v140, *(void *)(*(void *)(v141 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 16))(v139, v140, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v139, 0, 1, v207);
  }
  uint64_t v142 = v221[8];
  v143 = (void *)(v132 + v142);
  v144 = (const void *)(v133 + v142);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v133 + v142, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v143, v144, *(void *)(*(void *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 16))(v143, v144, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v143, 0, 1, v217);
  }
  *(unsigned char *)(v132 + v221[9]) = *(unsigned char *)(v133 + v221[9]);
  uint64_t v146 = *(int *)(v220 + 20);
  v147 = (char *)(v132 + v146);
  uint64_t v148 = (char *)(v133 + v146);
  int v149 = swift_getEnumCaseMultiPayload();
  if (v149 == 2)
  {
    v7((uint64_t)v147, (uint64_t)v148, v218);
    v7((uint64_t)&v147[*(int *)(v203 + 36)], (uint64_t)&v148[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v147[*(int *)(v151 + 48)] = *(void *)&v148[*(int *)(v151 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v149 == 1)
  {
    v7((uint64_t)v147, (uint64_t)v148, v218);
    v7((uint64_t)&v147[*(int *)(v203 + 36)], (uint64_t)&v148[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v147[*(int *)(v150 + 48)] = *(void *)&v148[*(int *)(v150 + 48)];
    *(void *)&v147[*(int *)(v150 + 64)] = *(void *)&v148[*(int *)(v150 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v147, v148, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v152 = *(int *)(v220 + 24);
  v153 = (char *)(v132 + v152);
  v154 = (char *)(v133 + v152);
  if (v204(v154, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64));
  }
  else
  {
    v156 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v156(v153, v154, v212);
    uint64_t v157 = v210[5];
    v158 = &v153[v157];
    v159 = &v154[v157];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v161 = v160;
    v162 = *(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 16);
    v163 = v158;
    uint64_t v7 = v202;
    v162(v163, v159, v161);
    v156(&v153[v210[6]], &v154[v210[6]], v212);
    v162(&v153[v210[7]], &v154[v210[7]], v161);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v153, 0, 1, v210);
  }
  uint64_t v164 = v213[12];
  uint64_t v165 = v216 + v164;
  uint64_t v166 = v214 + v164;
  v7(v216 + v164, v214 + v164, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v165 + v221[5], v166 + v221[5], v209);
  uint64_t v167 = v221[6];
  v168 = (void *)(v165 + v167);
  v169 = (const void *)(v166 + v167);
  if (v206((const void *)(v166 + v167), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v168, v169, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v168, 0, 1, v58);
  }
  uint64_t v171 = v221[7];
  v172 = (void *)(v165 + v171);
  v173 = (const void *)(v166 + v171);
  if (v205((const void *)(v166 + v171), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v172, v173, *(void *)(*(void *)(v174 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 16))(v172, v173, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v172, 0, 1, v207);
  }
  uint64_t v175 = v221[8];
  v176 = (void *)(v165 + v175);
  v177 = (const void *)(v166 + v175);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v166 + v175, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v176, v177, *(void *)(*(void *)(v178 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 16))(v176, v177, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v176, 0, 1, v217);
  }
  *(unsigned char *)(v165 + v221[9]) = *(unsigned char *)(v166 + v221[9]);
  uint64_t v179 = *(int *)(v220 + 20);
  v180 = (char *)(v165 + v179);
  v181 = (char *)(v166 + v179);
  int v182 = swift_getEnumCaseMultiPayload();
  if (v182 == 2)
  {
    v202((uint64_t)v180, (uint64_t)v181, v218);
    v202((uint64_t)&v180[*(int *)(v203 + 36)], (uint64_t)&v181[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v180[*(int *)(v184 + 48)] = *(void *)&v181[*(int *)(v184 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v182 == 1)
  {
    v202((uint64_t)v180, (uint64_t)v181, v218);
    v202((uint64_t)&v180[*(int *)(v203 + 36)], (uint64_t)&v181[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v180[*(int *)(v183 + 48)] = *(void *)&v181[*(int *)(v183 + 48)];
    *(void *)&v180[*(int *)(v183 + 64)] = *(void *)&v181[*(int *)(v183 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v180, v181, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v185 = *(int *)(v220 + 24);
  v186 = (char *)(v165 + v185);
  v187 = (char *)(v166 + v185);
  if (v204(v187, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
  }
  else
  {
    v189 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
    v189(v186, v187, v212);
    uint64_t v190 = v210[5];
    v191 = &v186[v190];
    v192 = &v187[v190];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v194 = v193;
    v195 = *(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 16);
    v195(v191, v192, v193);
    v189(&v186[v210[6]], &v187[v210[6]], v212);
    v195(&v186[v210[7]], &v187[v210[7]], v194);
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v186, 0, 1, v210);
  }
  return v216;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaseline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DA5C44);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaseline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DA5D6C);
}

void sub_250D96C60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D96CC4()
{
  if (!qword_26B2080F8)
  {
    sub_250D97944();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B2080F8);
    }
  }
}

uint64_t type metadata accessor for SleepingSampleBaselineComparison()
{
  uint64_t result = qword_26B207EC8;
  if (!qword_26B207EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t destroy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1, v3);
  uint64_t v5 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v6 = a1 + v5[5];
  uint64_t v7 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + v5[6];
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  }
  uint64_t v12 = a1 + v5[7];
  uint64_t v13 = sub_250E243F0();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v15 = a1 + v5[8];
  uint64_t v16 = sub_250E24710();
  uint64_t v17 = *(void *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  uint64_t v18 = a1 + *(int *)(a2 + 20);
  type metadata accessor for SleepingSampleBaselineAvailability();
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v4(v18, v3);
    sub_250D97944();
    v4(v18 + *(int *)(v19 + 36), v3);
  }
  uint64_t v20 = a1 + *(int *)(a2 + 24);
  uint64_t v21 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v21 - 1) + 48))(v20, 1, v21);
  if (!result)
  {
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v23(v20, v10);
    uint64_t v24 = v20 + v21[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v26 = v25;
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v29)((void *)(v25 - 8), v24, v25);
    v23(v20 + v21[6], v10);
    uint64_t v27 = v20 + v21[7];
    return v29(v27, v26);
  }
  return result;
}

uint64_t initializeWithCopy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v52(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v16 = v15;
  uint64_t v54 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v14, 1, v15))
  {
    sub_250D91EB4();
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v13, v14, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v13, 0, 1, v16);
  }
  uint64_t v18 = v7[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_250E243F0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = v7[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = sub_250E24710();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for SleepingSampleBaselineAvailability();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v52((uint64_t)v31, (uint64_t)v32, v6);
    sub_250D97944();
    v52((uint64_t)&v31[*(int *)(v37 + 36)], (uint64_t)&v32[*(int *)(v37 + 36)], v6);
    sub_250D96CC4();
    *(void *)&v31[*(int *)(v38 + 48)] = *(void *)&v32[*(int *)(v38 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v52((uint64_t)v31, (uint64_t)v32, v6);
    sub_250D97944();
    v52((uint64_t)&v31[*(int *)(v35 + 36)], (uint64_t)&v32[*(int *)(v35 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v31[*(int *)(v36 + 48)] = *(void *)&v32[*(int *)(v36 + 48)];
    *(void *)&v31[*(int *)(v36 + 64)] = *(void *)&v32[*(int *)(v36 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  uint64_t v39 = *(int *)(a3 + 24);
  uint64_t v40 = (char *)(a1 + v39);
  uint64_t v41 = (char *)(a2 + v39);
  uint64_t v42 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v43 = *((void *)v42 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    char v55 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v55(v40, v41, v16);
    uint64_t v45 = v42[5];
    uint64_t v51 = &v41[v45];
    uint64_t v53 = &v40[v45];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v47 = v46;
    uint64_t v48 = v16;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    v49(v53, v51, v46);
    v55(&v40[v42[6]], &v41[v42[6]], v48);
    v49(&v40[v42[7]], &v41[v42[7]], v47);
    (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  }
  return a1;
}

uint64_t type metadata accessor for SleepingSampleAggregate()
{
  uint64_t result = qword_26B207DF8;
  if (!qword_26B207DF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for SleepingSampleBaselineAvailability()
{
  uint64_t result = qword_26B207EF8;
  if (!qword_26B207EF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for SleepingSampleBaseline()
{
  uint64_t result = qword_26B207DE0;
  if (!qword_26B207DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250D97944()
{
  if (!qword_26B2081D0)
  {
    sub_250E24B20();
    sub_250D91C3C((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    unint64_t v0 = sub_250E24F20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2081D0);
    }
  }
}

void sub_250D979D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_250E24FB0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_250D97A2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250D97A90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for SleepingSampleDaySummary(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  v5(v6, v4);
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v86 = v7;
  uint64_t v100 = v4;
  v5(v6 + *(int *)(v7 + 36), v4);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = sub_250E24710();
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (!v98(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v8, v9);
  }
  char v87 = a2;
  uint64_t v10 = a1 + a2[8];
  v5(v10, v4);
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v12 = v10 + v11[5];
  uint64_t v13 = sub_250E248B0();
  uint64_t v95 = *(void (**)(uint64_t))(*(void *)(v13 - 8) + 8);
  uint64_t v96 = v13;
  v95(v12);
  uint64_t v14 = v10 + v11[6];
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v16 = v15;
  uint64_t v89 = *(void *)(v15 - 8);
  uint64_t v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (!v94(v14, 1, v15)) {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v14, v16);
  }
  uint64_t v17 = v10 + v11[7];
  uint64_t v18 = sub_250E243F0();
  uint64_t v83 = *(void *)(v18 - 8);
  int v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  if (!v92(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v17, v18);
  }
  uint64_t v99 = v18;
  uint64_t v19 = v10 + v11[8];
  if (!v98(v19, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v19, v9);
  }
  uint64_t v20 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v21 = v10 + *(int *)(v20 + 20);
  type metadata accessor for SleepingSampleBaselineAvailability();
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v21, v4);
    v5(v21 + *(int *)(v86 + 36), v4);
  }
  uint64_t v93 = v20;
  uint64_t v22 = v10 + *(int *)(v20 + 24);
  uint64_t v23 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v23 - 1) + 48);
  uint64_t v82 = v5;
  uint64_t v90 = v16;
  uint64_t v84 = v9;
  uint64_t v24 = v87;
  if (!v91(v22, 1, v23))
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v25(v22, v16);
    uint64_t v26 = a1;
    uint64_t v27 = v22 + v23[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v29 = v28;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
    uint64_t v31 = v27;
    a1 = v26;
    v30(v31, v29);
    v25(v22 + v23[6], v16);
    uint64_t v32 = v29;
    uint64_t v9 = v84;
    v30(v22 + v23[7], v32);
    uint64_t v24 = v87;
    uint64_t v5 = v82;
  }
  uint64_t v88 = a1;
  uint64_t v33 = a1 + v24[9];
  v5(v33, v100);
  ((void (*)(uint64_t, uint64_t))v95)(v33 + v11[5], v96);
  uint64_t v34 = v33 + v11[6];
  if (!v94(v34, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v34, v16);
  }
  uint64_t v35 = v33 + v11[7];
  if (!v92(v35, 1, v99)) {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v35, v99);
  }
  uint64_t v36 = v33 + v11[8];
  if (!v98(v36, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v36, v9);
  }
  uint64_t v37 = v33 + *(int *)(v20 + 20);
  uint64_t v97 = v23;
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v37, v100);
    v5(v37 + *(int *)(v86 + 36), v100);
  }
  uint64_t v38 = v33 + *(int *)(v20 + 24);
  if (!v91(v38, 1, v23))
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v39(v38, v16);
    uint64_t v40 = v38 + v23[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v42 = v41;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8);
    uint64_t v44 = v40;
    uint64_t v9 = v84;
    v43(v44, v42);
    v39(v38 + v23[6], v90);
    uint64_t v24 = v87;
    uint64_t v5 = v82;
    v43(v38 + v23[7], v42);
    uint64_t v16 = v90;
  }
  uint64_t v45 = v88 + v24[10];
  v5(v45, v100);
  ((void (*)(uint64_t, uint64_t))v95)(v45 + v11[5], v96);
  uint64_t v46 = v45 + v11[6];
  if (!v94(v46, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v46, v16);
  }
  uint64_t v47 = v45 + v11[7];
  if (!v92(v47, 1, v99)) {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v47, v99);
  }
  uint64_t v48 = v45 + v11[8];
  if (!v98(v48, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v48, v9);
  }
  uint64_t v49 = v45 + *(int *)(v20 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v49, v100);
    v5(v49 + *(int *)(v86 + 36), v100);
  }
  uint64_t v50 = v45 + *(int *)(v20 + 24);
  uint64_t v51 = v24;
  if (!v91(v50, 1, v23))
  {
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v52(v50, v16);
    uint64_t v53 = v50 + v23[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v55 = v54;
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8);
    uint64_t v57 = v53;
    uint64_t v9 = v84;
    v56(v57, v55);
    v52(v50 + v23[6], v90);
    uint64_t v51 = v87;
    uint64_t v5 = v82;
    v56(v50 + v23[7], v55);
    uint64_t v16 = v90;
  }
  uint64_t v58 = v88 + v51[11];
  v5(v58, v100);
  ((void (*)(uint64_t, uint64_t))v95)(v58 + v11[5], v96);
  uint64_t v59 = v58 + v11[6];
  if (!v94(v59, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v59, v16);
  }
  uint64_t v60 = v58 + v11[7];
  if (!v92(v60, 1, v99)) {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v60, v99);
  }
  uint64_t v61 = v51;
  uint64_t v62 = v58 + v11[8];
  if (!v98(v62, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v62, v9);
  }
  uint64_t v63 = v58 + *(int *)(v93 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v63, v100);
    v5(v63 + *(int *)(v86 + 36), v100);
  }
  uint64_t v64 = v58 + *(int *)(v93 + 24);
  if (!v91(v64, 1, v97))
  {
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v65(v64, v16);
    uint64_t v66 = v64 + v97[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v68 = v67;
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8);
    v69(v66, v67);
    v65(v64 + v97[6], v90);
    uint64_t v61 = v87;
    uint64_t v5 = v82;
    v69(v64 + v97[7], v68);
    uint64_t v16 = v90;
  }
  uint64_t v70 = v88 + v61[12];
  v5(v70, v100);
  ((void (*)(uint64_t, uint64_t))v95)(v70 + v11[5], v96);
  uint64_t v71 = v70 + v11[6];
  if (!v94(v71, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v71, v16);
  }
  uint64_t v72 = v70 + v11[7];
  if (!v92(v72, 1, v99)) {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v72, v99);
  }
  uint64_t v73 = v70 + v11[8];
  if (!v98(v73, 1, v84)) {
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v73, v84);
  }
  uint64_t v74 = v70 + *(int *)(v93 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v74, v100);
    v5(v74 + *(int *)(v86 + 36), v100);
  }
  uint64_t v75 = v70 + *(int *)(v93 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, int *))v91)(v75, 1, v97);
  if (!result)
  {
    v77 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v77(v75, v90);
    uint64_t v78 = v75 + v97[5];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v80 = v79;
    uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v101)((void *)(v79 - 8), v78, v79);
    v77(v75 + v97[6], v90);
    uint64_t v81 = v75 + v97[7];
    return v101(v81, v80);
  }
  return result;
}

void sub_250D98938(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_250D98B48(255, a3);
    unint64_t v4 = sub_250E249D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_250D98A24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = sub_250D94C64((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for SleepingSampleDaySummary()
{
  uint64_t result = qword_26B207988;
  if (!qword_26B207988) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_250D98B48(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_250D98C18()
{
  if (*v0) {
    return 0x746E756F63;
  }
  else {
    return 0x64657A796C616E61;
  }
}

unint64_t sub_250D98C5C()
{
  return sub_250D98C64(*v0);
}

unint64_t sub_250D98C64(char a1)
{
  unint64_t result = 0x49676E696E726F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656E696C65736162;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x437265696C74756FLL;
      break;
    case 4:
      unint64_t result = 0x7461527472616568;
      break;
    case 5:
      unint64_t result = 0x79784F646F6F6C62;
      break;
    case 6:
      unint64_t result = 0x7461726970736572;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x656C7341656D6974;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleDaySummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleBaselineAvailability.AvailableCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrainingLoadBand(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13HealthBalance34SleepingSampleBaselineAvailabilityO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_250D99138()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C62616C69617661;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x617461446F6ELL;
  }
}

unsigned char *_s13HealthBalance23SleepingSampleAggregateV12AvailabilityOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unint64_t sub_250D99268()
{
  return sub_250D99270(*v0);
}

unint64_t sub_250D99270(char a1)
{
  unint64_t result = 0x617461446F6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x6C62616C69617661;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WarmupProgress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t SleepingSampleQueryRange.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250D8CC2C(v1, a1);
}

uint64_t destroy for SleepingSampleAnalysisFeatureStatus(uint64_t a1)
{
  sub_250D99470();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

void sub_250D99470()
{
  if (!qword_26B207A10)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    sub_250D99B64();
    sub_250DE67A4(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
    sub_250DE67A4(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
    sub_250DE67A4(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
    unint64_t v0 = sub_250E24A50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B207A10);
    }
  }
}

uint64_t dispatch thunk of SleepingSampleDaySummaryProtocol.latestSampleEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DD9874);
}

uint64_t getEnumTagSinglePayload for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DD2260);
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQuery()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

BOOL sub_250D995F4()
{
  return SleepingSampleDaySummaryQuery.queue_shouldDeactivateAfterInitialResults()();
}

Swift::Bool __swiftcall SleepingSampleDaySummaryQuery.queue_shouldDeactivateAfterInitialResults()()
{
  return (*(unsigned char *)(v0 + qword_26B20BBB0) & 1) == 0;
}

uint64_t static HealthBalanceUtilities.pluginIdentifier.getter()
{
  return 0x614268746C616548;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQueryConfiguration.morningIndexRange.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t sub_250D996C8@<X0>(uint64_t a1@<X8>)
{
  return sub_250D86F7C(&OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, a1);
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQueryConfiguration.gregorianCalendar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t sub_250D99724@<X0>(uint64_t a1@<X8>)
{
  return sub_250D86F7C(&OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar, &qword_26B207F60, MEMORY[0x263F07920], a1);
}

uint64_t SleepingSampleSummaryDemoDatasetManager.init(settingsProvider:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatus()
{
  uint64_t result = qword_26B2079F8;
  if (!qword_26B2079F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SleepingSampleAnalysisFeatureStatus.init(featureStatusByFeatureIdentifier:)()
{
  type metadata accessor for HKFeatureIdentifier(0);
  sub_250D99B64();
  sub_250D998AC(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
  sub_250D998AC(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
  sub_250D998AC(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);

  return sub_250E24A60();
}

uint64_t sub_250D998AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SleepingSampleAggregateDaySummary()
{
  uint64_t result = qword_26B207970;
  if (!qword_26B207970) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchFeatureCapabilities()
{
  return &type metadata for WatchFeatureCapabilities;
}

uint64_t static SleepingSampleQueryRange.defaultBaselineWindowDays.getter()
{
  return 49;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t objectdestroyTm(void (*a1)(void))
{
  swift_release();

  a1(*(void *)(v1 + 40));

  return MEMORY[0x270FA0238](v1, 48, 7);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void sub_250D99A14(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey()
{
  return &type metadata for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey;
}

unint64_t HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.rawValue.getter()
{
  unint64_t result = 0x64657A796C616E61;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 4:
      unint64_t result = 0xD000000000000027;
      break;
    case 5:
      unint64_t result = 0xD00000000000001DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_250D99B64()
{
  unint64_t result = qword_26B207A20;
  if (!qword_26B207A20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B207A20);
  }
  return result;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCount.getter()
{
  uint64_t result = (uint64_t)SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  if (v1) {
    return 2;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  unint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

unsigned char *sub_250D99C3C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

id HKTableFormatter.init(_:gregorianCalendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleAggregateDaySummary();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  BOOL v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v9 = (void *)sub_250E24DB0();
  id v10 = objc_msgSend(v8, sel_initWithColumnTitles_, v9);

  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v13 = *(void *)(v5 + 72);
    id v14 = v10;
    do
    {
      sub_250D9BA8C(v12, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregateDaySummary);
      sub_250D99DF8((uint64_t)v7);
      sub_250D9BAF4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregateDaySummary);
      v12 += v13;
      --v11;
    }
    while (v11);
  }
  uint64_t v15 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
  swift_bridgeObjectRelease();
  return v10;
}

void sub_250D99DF8(uint64_t a1)
{
  uint64_t v124 = sub_250E255B0();
  uint64_t v123 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v122 = (uint64_t)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D9B884(0, &qword_269B037D8, &qword_269B037E0, 0x263F08D20, MEMORY[0x263F061F0]);
  uint64_t v121 = v3;
  uint64_t v120 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v119 = (uint64_t)&v115 - v4;
  sub_250D9B884(0, &qword_269B037E8, &qword_269B037E0, 0x263F08D20, MEMORY[0x263F06210]);
  uint64_t v118 = v5;
  uint64_t v117 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v116 = (char *)&v115 - v6;
  uint64_t v142 = sub_250E24610();
  uint64_t v135 = *(void *)(v142 - 8);
  MEMORY[0x270FA5388](v142);
  uint64_t v141 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D9B940(0, &qword_269B037F0, (uint64_t (*)(void))sub_250D9B8EC, MEMORY[0x263F8D538], MEMORY[0x263F06DA8]);
  uint64_t v131 = v8;
  uint64_t v134 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v140 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v133 = (char *)&v115 - v11;
  sub_250D91EB4();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v137 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v136 = (char *)&v115 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v132 = (uint64_t)&v115 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v130 = (uint64_t)&v115 - v20;
  MEMORY[0x270FA5388](v19);
  v129 = (char *)&v115 - v21;
  uint64_t v22 = sub_250E245E0();
  uint64_t v146 = *(void *)(v22 - 8);
  uint64_t v147 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v145 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_250E247F0();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v139 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D9B940(0, (unint64_t *)&qword_269B03800, (uint64_t (*)(void))sub_250D9B9A8, MEMORY[0x263F8D6C8], MEMORY[0x263F068B8]);
  uint64_t v27 = *(int **)(v26 - 8);
  uint64_t v143 = v26;
  v144 = v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v127 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v128 = (char *)&v115 - v30;
  uint64_t v148 = (void *)sub_250E24670();
  uint64_t v31 = *(v148 - 1);
  MEMORY[0x270FA5388](v148);
  uint64_t v33 = (char *)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_250E24710();
  uint64_t v34 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v36 = (char *)&v115 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_250E246A0();
  uint64_t v37 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  uint64_t v39 = (char *)&v115 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D99A14(0, (unint64_t *)&qword_269B03D40, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_250E26080;
  sub_250E24660();
  uint64_t v41 = a1;
  sub_250E24B10();
  sub_250E24650();
  uint64_t v42 = sub_250E24700();
  uint64_t v44 = v43;
  uint64_t v45 = v33;
  uint64_t v46 = (uint64_t)v129;
  (*(void (**)(char *, void *))(v31 + 8))(v45, v148);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v126);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v125);
  *(void *)(v40 + 32) = v42;
  *(void *)(v40 + 40) = v44;
  uint64_t v148 = (void *)v40;
  uint64_t v150 = sub_250E24AE0();
  sub_250E247D0();
  sub_250D9B9A8();
  uint64_t v47 = v127;
  sub_250E24520();
  uint64_t v48 = v145;
  sub_250E245D0();
  uint64_t v49 = v128;
  uint64_t v50 = v143;
  MEMORY[0x253389100](v48, v143);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v48, v147);
  uint64_t v51 = (void (*)(char *, uint64_t))*((void *)v144 + 1);
  v51(v47, v50);
  sub_250D9B9FC();
  sub_250E25020();
  v51(v49, v50);
  uint64_t v52 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  uint64_t v53 = v52[5];
  uint64_t v147 = v41;
  uint64_t v54 = v41 + v53;
  uint64_t v146 = type metadata accessor for SleepingSampleAggregate();
  sub_250D9BA8C(v54 + *(int *)(v146 + 24), v46, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D9B884(0, &qword_26B208150, (unint64_t *)&qword_26B208158, 0x263F0A630, MEMORY[0x263F08F88]);
  uint64_t v56 = v55;
  uint64_t v57 = *(void *)(v55 - 8);
  uint64_t v145 = *(char **)(v57 + 48);
  int v58 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v145)(v46, 1, v55);
  uint64_t v143 = v57;
  v144 = v52;
  if (v58 == 1)
  {
    sub_250D9BAF4(v46, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v59 = 0xA600000000000000;
    uint64_t v60 = 0x9380E29380E2;
    uint64_t v61 = v131;
  }
  else
  {
    uint64_t v62 = (void *)sub_250E249B0();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v46, v56);
    id v63 = objc_msgSend(self, sel__countPerMinuteUnit);
    objc_msgSend(v62, sel_doubleValueForUnit_, v63);
    uint64_t v149 = v64;
    sub_250E247D0();
    sub_250D9B8EC();
    uint64_t v65 = v140;
    sub_250E24580();
    uint64_t v66 = v141;
    sub_250E245F0();
    uint64_t v67 = v133;
    uint64_t v61 = v131;
    MEMORY[0x253389160](v66, v131);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v66, v142);
    uint64_t v68 = *(void (**)(char *, uint64_t))(v134 + 8);
    v68(v65, v61);
    sub_250D9BC80();
    sub_250E24B30();
    v68(v67, v61);

    uint64_t v52 = v144;
    uint64_t v60 = v150;
    unint64_t v59 = v151;
  }
  uint64_t v69 = v148;
  v148[8] = v60;
  v69[9] = v59;
  uint64_t v70 = v130;
  sub_250D9BA8C(v147 + v52[6] + *(int *)(v146 + 24), v130, (uint64_t (*)(void))sub_250D91EB4);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v70, 1, v56) == 1)
  {
    sub_250D9BAF4(v70, (uint64_t (*)(void))sub_250D91EB4);
    object = (void *)0xA600000000000000;
    uint64_t countAndFlagsBits = 0x9380E29380E2;
  }
  else
  {
    uint64_t v73 = (void *)sub_250E249B0();
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v70, v56);
    LOBYTE(v150) = 2;
    id v74 = objc_msgSend(self, sel_percentUnit);
    Swift::String v75 = HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v150, (HKUnit)v74);
    uint64_t countAndFlagsBits = v75._countAndFlagsBits;
    object = v75._object;

    uint64_t v52 = v144;
  }
  uint64_t v76 = v141;
  uint64_t v77 = v142;
  uint64_t v78 = v140;
  uint64_t v80 = v147;
  uint64_t v79 = v148;
  v148[10] = countAndFlagsBits;
  v79[11] = object;
  uint64_t v81 = v132;
  sub_250D9BA8C(v80 + v52[7] + *(int *)(v146 + 24), v132, (uint64_t (*)(void))sub_250D91EB4);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v81, 1, v56) == 1)
  {
    sub_250D9BAF4(v81, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v82 = 0xA600000000000000;
    uint64_t v83 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v84 = (void *)sub_250E249B0();
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v81, v56);
    id v85 = objc_msgSend(self, sel__countPerMinuteUnit);
    objc_msgSend(v84, sel_doubleValueForUnit_, v85);
    uint64_t v149 = v86;
    sub_250E247D0();
    sub_250D9B8EC();
    sub_250E24580();
    uint64_t v150 = 1;
    sub_250D9BBD8();
    sub_250D9BC38(&qword_269B03830, (void (*)(uint64_t))sub_250D9BBD8);
    sub_250E24600();
    char v87 = v78;
    uint64_t v88 = v133;
    MEMORY[0x253389160](v76, v61);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v76, v77);
    uint64_t v89 = *(void (**)(char *, uint64_t))(v134 + 8);
    v89(v87, v61);
    sub_250D9BC80();
    sub_250E24B30();
    v89(v88, v61);

    uint64_t v52 = v144;
    uint64_t v83 = v150;
    unint64_t v82 = v151;
  }
  uint64_t v90 = (uint64_t)v136;
  uint64_t v91 = v148;
  v148[12] = v83;
  v91[13] = v82;
  sub_250D9BA8C(v147 + v52[8] + *(int *)(v146 + 24), v90, (uint64_t (*)(void))sub_250D91EB4);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v90, 1, v56) == 1)
  {
    sub_250D9BAF4(v90, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v92 = 0xA600000000000000;
    uint64_t v93 = 0x9380E29380E2;
    uint64_t v94 = (uint64_t)v137;
    uint64_t v95 = v143;
  }
  else
  {
    uint64_t v96 = (void *)sub_250E249B0();
    uint64_t v95 = v143;
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v90, v56);
    id v97 = objc_msgSend(self, sel__changeInDegreeFahrenheitUnit);
    id v98 = v96;
    id v99 = v97;
    uint64_t v100 = v116;
    Measurement<>.init(wristTemperatureForFormatting:unit:)(v98, v99);
    uint64_t v101 = v119;
    static FormatStyle<>.wristTemperature(unit:)((uint64_t)v99, v119);
    sub_250D9BB54();
    uint64_t v102 = v118;
    uint64_t v103 = v121;
    sub_250E243A0();
    uint64_t v104 = v103;
    uint64_t v52 = v144;
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v101, v104);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v100, v102);

    uint64_t v93 = v150;
    unint64_t v92 = v151;
    uint64_t v94 = (uint64_t)v137;
  }
  uint64_t v105 = v148;
  v148[14] = v93;
  v105[15] = v92;
  sub_250D9BA8C(v147 + v52[9] + *(int *)(v146 + 24), v94, (uint64_t (*)(void))sub_250D91EB4);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v145)(v94, 1, v56) == 1)
  {
    sub_250D9BAF4(v94, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v106 = 0xA600000000000000;
    uint64_t v107 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v108 = (void *)sub_250E249B0();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v56);
    id v109 = objc_msgSend(self, sel_secondUnit);
    id v110 = v108;
    sub_250E23660(v110);

    uint64_t v111 = v122;
    static FormatStyle<>.sleepDuration.getter(v122);
    sub_250D9BC38(&qword_269B03818, MEMORY[0x263F07F20]);
    uint64_t v112 = v124;
    sub_250E255C0();
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v111, v112);

    uint64_t v107 = v150;
    unint64_t v106 = v151;
  }
  uint64_t v113 = v148;
  v148[16] = v107;
  v113[17] = v106;
  uint64_t v114 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  objc_msgSend(v138, sel_appendRow_, v114);
}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1)
{
}

void type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(uint64_t a1)
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void *sub_250D9B098@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_250D9B0A8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_250D9B0B4()
{
  return sub_250E254F0();
}

uint64_t sub_250D9B0FC()
{
  return sub_250E254C0();
}

uint64_t sub_250D9B128()
{
  return sub_250E254F0();
}

BOOL sub_250D9B16C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_250D9B180(uint64_t a1, uint64_t a2)
{
  return sub_250D9B658(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_250D9B1A8(uint64_t a1, id *a2)
{
  uint64_t result = sub_250E24C40();
  *a2 = 0;
  return result;
}

uint64_t sub_250D9B220(uint64_t a1, id *a2)
{
  char v3 = sub_250E24C50();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_250D9B2A0@<X0>(uint64_t *a1@<X8>)
{
  sub_250E24C60();
  uint64_t v2 = sub_250E24C30();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_250D9B2E4(uint64_t a1, uint64_t a2)
{
  return sub_250D9B658(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_250D9B308()
{
  uint64_t v0 = sub_250E24C60();
  uint64_t v2 = v1;
  if (v0 == sub_250E24C60() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_250E25400();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_250D9B394(uint64_t a1)
{
  uint64_t v2 = sub_250D9BC38(&qword_269B037C8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  uint64_t v3 = sub_250D9BC38(&qword_269B037D0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_250D9B450()
{
  return sub_250D9BC38(&qword_269B03790, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_250D9B498()
{
  return sub_250D9BC38(&qword_269B03798, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_250D9B4E0()
{
  return sub_250D9BC38(&qword_269B037A0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_250D9B528@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_250E24C30();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_250D9B570@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_250E24C60();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_250D9B59C(uint64_t a1)
{
  uint64_t v2 = sub_250D9BC38(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
  uint64_t v3 = sub_250D9BC38(&qword_269B037C0, type metadata accessor for HKFeatureIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_250D9B658(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_250E24C60();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_250D9B69C()
{
  sub_250E24C60();
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250D9B6F0()
{
  sub_250E24C60();
  sub_250E254B0();
  sub_250E24CC0();
  uint64_t v0 = sub_250E254F0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_250D9B764()
{
  return sub_250D9BC38(&qword_269B037A8, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_250D9B7AC()
{
  return sub_250D9BC38(&qword_269B037B0, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_250D9B7F4()
{
  return sub_250D9BC38(&qword_269B037B8, type metadata accessor for HKWorkoutActivityType);
}

uint64_t sub_250D9B83C()
{
  return sub_250D9BC38(&qword_26B207A40, type metadata accessor for HKFeatureIdentifier);
}

void sub_250D9B884(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_250D98B48(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_250D9B8EC()
{
  unint64_t result = qword_269B037F8;
  if (!qword_269B037F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B037F8);
  }
  return result;
}

void sub_250D9B940(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250D9B9A8()
{
  unint64_t result = qword_269B03808;
  if (!qword_269B03808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03808);
  }
  return result;
}

unint64_t sub_250D9B9FC()
{
  unint64_t result = qword_269B03810;
  if (!qword_269B03810)
  {
    sub_250D9B940(255, (unint64_t *)&qword_269B03800, (uint64_t (*)(void))sub_250D9B9A8, MEMORY[0x263F8D6C8], MEMORY[0x263F068B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03810);
  }
  return result;
}

uint64_t sub_250D9BA8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250D9BAF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_250D9BB54()
{
  unint64_t result = qword_269B03820;
  if (!qword_269B03820)
  {
    sub_250D9B884(255, &qword_269B037D8, &qword_269B037E0, 0x263F08D20, MEMORY[0x263F061F0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03820);
  }
  return result;
}

void sub_250D9BBD8()
{
  if (!qword_269B03828)
  {
    unint64_t v0 = sub_250E25290();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03828);
    }
  }
}

uint64_t sub_250D9BC38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250D9BC80()
{
  unint64_t result = qword_269B03838;
  if (!qword_269B03838)
  {
    sub_250D9B940(255, &qword_269B037F0, (uint64_t (*)(void))sub_250D9B8EC, MEMORY[0x263F8D538], MEMORY[0x263F06DA8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03838);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

HealthBalance::BalanceURLBuilder::Route_optional __swiftcall BalanceURLBuilder.Route.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t BalanceURLBuilder.Route.rawValue.getter()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x5265636E616C6162;
      break;
    case 2:
      unint64_t result = 0x7961446E65766573;
      break;
    case 3:
      unint64_t result = 0x654D796144656E6FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250D9BE50(unsigned __int8 *a1, char *a2)
{
  return sub_250DB0E88(*a1, *a2);
}

uint64_t sub_250D9BE5C()
{
  return sub_250DE8200();
}

uint64_t sub_250D9BE64()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250D9BF4C()
{
  return sub_250DE8B70();
}

HealthBalance::BalanceURLBuilder::Route_optional sub_250D9BF54(Swift::String *a1)
{
  return BalanceURLBuilder.Route.init(rawValue:)(*a1);
}

void sub_250D9BF60(uint64_t a1@<X8>)
{
  unint64_t v2 = 0x8000000250E2C410;
  unint64_t v3 = 0xD000000000000011;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB000000006D6F6FLL;
      unint64_t v3 = 0x5265636E616C6162;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7961446E65766573;
      *(void *)(a1 + 8) = 0xEF7363697274654DLL;
      break;
    case 3:
      strcpy((char *)a1, "oneDayMetrics");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

HealthBalance::BalanceURLBuilder::Source_optional __swiftcall BalanceURLBuilder.Source.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 10;
  if (v3 < 0xA) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

unint64_t BalanceURLBuilder.Source.rawValue.getter()
{
  unint64_t result = 0x7974697669746361;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7373656E746966;
      break;
    case 2:
      unint64_t result = 0x704168746C616568;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x747465536F6E616ELL;
      break;
    case 5:
      unint64_t result = 0x65656C536F6E616ELL;
      break;
    case 6:
      unint64_t result = 0x7070416863746177;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0x746567646977;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250D9C1C8(unsigned __int8 *a1, char *a2)
{
  return sub_250DB0B64(*a1, *a2);
}

uint64_t sub_250D9C1D4()
{
  return sub_250E254F0();
}

uint64_t sub_250D9C21C()
{
  return sub_250DE87B4();
}

uint64_t sub_250D9C224()
{
  return sub_250E254F0();
}

HealthBalance::BalanceURLBuilder::Source_optional sub_250D9C268(Swift::String *a1)
{
  return BalanceURLBuilder.Source.init(rawValue:)(*a1);
}

unint64_t sub_250D9C274@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = BalanceURLBuilder.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t BalanceURLBuilder.RoutingKey.rawValue.getter()
{
  unint64_t result = 0x6574756F72;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656372756F73;
      break;
    case 2:
      unint64_t result = 0x6144746567726174;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x6163696669746F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

HealthBalance::BalanceURLBuilder::RoutingKey_optional __swiftcall BalanceURLBuilder.RoutingKey.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 6;
  if (v3 < 6) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

uint64_t sub_250D9C3D4(unsigned __int8 *a1, char *a2)
{
  return sub_250DB1054(*a1, *a2);
}

uint64_t sub_250D9C3E0()
{
  return sub_250DE8300();
}

uint64_t sub_250D9C3E8()
{
  return sub_250DE8938();
}

uint64_t sub_250D9C3F0()
{
  return sub_250DE8A4C();
}

HealthBalance::BalanceURLBuilder::RoutingKey_optional sub_250D9C3F8(Swift::String *a1)
{
  return BalanceURLBuilder.RoutingKey.init(rawValue:)(*a1);
}

unint64_t sub_250D9C404@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = BalanceURLBuilder.RoutingKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

HealthBalance::BalanceURLBuilder __swiftcall BalanceURLBuilder.init()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_sharedBehavior);
  if (v2)
  {
    unint64_t v3 = v2;
    unsigned __int8 v4 = objc_msgSend(v2, sel_isAppleWatch);

    *uint64_t v1 = v4;
  }
  else
  {
    __break(1u);
  }
  return (HealthBalance::BalanceURLBuilder)v2;
}

uint64_t BalanceURLBuilder.url(route:source:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v23 = 0xD000000000000011;
  sub_250DA2964(0, &qword_269B03840, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_250E244F0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *a1;
  char v15 = *a2;
  char v16 = *v3;
  sub_250E244E0();
  if (v16)
  {
    unint64_t v17 = 0xD00000000000001BLL;
    unint64_t v18 = 0x8000000250E2C9C0;
  }
  else
  {
    sub_250E24C60();
    unint64_t v17 = 0xD000000000000029;
    unint64_t v18 = 0x8000000250E2C930;
  }
  sub_250E244D0();
  MEMORY[0x253389050](v17, v18);
  unint64_t v24 = 47;
  unint64_t v25 = 0xE100000000000000;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E244A0();
  LOBYTE(v24) = v15;
  sub_250D9CAF0((unsigned __int8 *)&v24);
  sub_250E24470();
  uint64_t v19 = sub_250E24620();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v19) == 1)
  {
    sub_250DA12E0((uint64_t)v9, &qword_269B03840, MEMORY[0x263F06EA8]);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    sub_250E250E0();
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD00000000000001FLL;
    unint64_t v25 = 0x8000000250E2C960;
    if (v14 == 4)
    {
      unint64_t v23 = 7104878;
    }
    else
    {
      switch(v14)
      {
        case 1:
          unint64_t v23 = 0x5265636E616C6162;
          break;
        case 2:
          unint64_t v23 = 0x7961446E65766573;
          break;
        case 3:
          unint64_t v23 = 0x654D796144656E6FLL;
          break;
        default:
          break;
      }
    }
    sub_250E24CE0();
    swift_bridgeObjectRelease();
    sub_250E24CE0();
    sub_250E24CE0();
    swift_bridgeObjectRelease();
    sub_250E25220();
    __break(1u);
    JUMPOUT(0x250D9CAA8);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a3, v9, v19);
}

uint64_t sub_250D9CAF0(unsigned __int8 *a1)
{
  uint64_t v35 = sub_250E24430();
  uint64_t v3 = *(void *)(v35 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v35);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v29 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v37 = (char *)&v29 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v32 = *a1;
  uint64_t v13 = sub_250E24440();
  unint64_t v14 = MEMORY[0x263F8EE78];
  if (v13)
  {
    char v15 = (char *)v13;
    uint64_t v39 = *(char **)(v13 + 16);
    unint64_t v40 = MEMORY[0x263F8EE78];
    if (v39)
    {
      uint64_t v30 = v6;
      uint64_t v31 = v1;
      uint64_t v6 = 0;
      uint64_t v38 = v3 + 16;
      uint64_t v36 = (void (**)(char *, char *, unint64_t))(v3 + 32);
      unint64_t v14 = v35;
      while (1)
      {
        if ((unint64_t)v6 >= *((void *)v15 + 2))
        {
          __break(1u);
LABEL_25:
          unint64_t v14 = sub_250DCF298(0, *(void *)(v14 + 16) + 1, 1, v14);
LABEL_20:
          unint64_t v25 = *(void *)(v14 + 16);
          unint64_t v24 = *(void *)(v14 + 24);
          if (v25 >= v24 >> 1) {
            unint64_t v14 = sub_250DCF298(v24 > 1, v25 + 1, 1, v14);
          }
          *(void *)(v14 + 16) = v25 + 1;
          unint64_t v26 = v14
              + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
              + *(void *)(v3 + 72) * v25;
          uint64_t v27 = v35;
          (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v26, v6, v35);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v27);
          return sub_250E24450();
        }
        unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v17 = *(void *)(v3 + 72);
        (*(void (**)(char *, char *, unint64_t))(v3 + 16))(v12, &v15[v16 + v17 * (void)v6], v14);
        if (sub_250E24410() == 0x656372756F73 && v18 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = sub_250E25400();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            uint64_t v34 = *v36;
            v34(v37, v12, v14);
            unint64_t v20 = v40;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_250DBA204(0, *(void *)(v20 + 16) + 1, 1);
              unint64_t v20 = v40;
            }
            unint64_t v22 = *(void *)(v20 + 16);
            unint64_t v21 = *(void *)(v20 + 24);
            if (v22 >= v21 >> 1)
            {
              sub_250DBA204(v21 > 1, v22 + 1, 1);
              unint64_t v20 = v40;
            }
            *(void *)(v20 + 16) = v22 + 1;
            unint64_t v23 = v20 + v16 + v22 * v17;
            unint64_t v14 = v35;
            v34((char *)v23, v37, v35);
            unint64_t v40 = v20;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, unint64_t))(v3 + 8))(v12, v14);
LABEL_6:
        if (v39 == ++v6)
        {
          unint64_t v14 = v40;
          uint64_t v6 = v30;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  char v15 = v33;
  switch(v32)
  {
    case 10:
      return sub_250E24450();
    default:
      sub_250E24400();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v15, v35);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_20;
      }
      goto LABEL_25;
  }
  return sub_250E24450();
}

uint64_t BalanceURLBuilder.queryString(for:)(uint64_t *a1)
{
  id v2 = v1;
  sub_250DA2964(0, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v23 - v5;
  uint64_t v7 = sub_250E244F0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v2) = *v2;
  sub_250E244E0();
  if (v2)
  {
    unint64_t v11 = 0xD00000000000001BLL;
    unint64_t v12 = 0x8000000250E2C9C0;
  }
  else
  {
    sub_250E24C60();
    unint64_t v11 = 0xD000000000000029;
    unint64_t v12 = 0x8000000250E2C930;
  }
  sub_250E244D0();
  MEMORY[0x253389050](v11, v12);
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  swift_bridgeObjectRetain();
  sub_250D9D300(v13, v14);
  uint64_t v15 = type metadata accessor for SleepingSampleChangeNotification();
  unint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
  uint64_t v17 = sub_250E24B20();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v6, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v6, 0, 1, v17);
  sub_250D9D740((uint64_t)v6);
  char v19 = (char *)a1 + *(int *)(v15 + 24);
  uint64_t v20 = *(void *)v19;
  if (v19[8] == 1)
  {
    sub_250D9DF94(v20 != 0);
  }
  else
  {
    sub_250D9DF94(0);
    uint64_t v23 = v20;
    char v24 = 0;
    sub_250D9E3F0(&v23);
  }
  uint64_t v21 = sub_250E244B0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v21;
}

uint64_t sub_250D9D300(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_250E24430();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (uint64_t)&v33 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v41 = (char *)&v33 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = sub_250E24440();
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v38 = v5;
  if (v17)
  {
    uint64_t v19 = v17;
    uint64_t v43 = *(void *)(v17 + 16);
    unint64_t v44 = MEMORY[0x263F8EE78];
    if (v43)
    {
      uint64_t v33 = a1;
      uint64_t v34 = a2;
      uint64_t v35 = v12;
      uint64_t v36 = v9;
      uint64_t v37 = v2;
      unint64_t v18 = 0;
      uint64_t v42 = v6 + 16;
      unint64_t v40 = (void (**)(char *, char *, uint64_t))(v6 + 32);
      while (1)
      {
        if (v18 >= *(void *)(v19 + 16))
        {
          __break(1u);
LABEL_25:
          unint64_t v18 = sub_250DCF298(0, *(void *)(v18 + 16) + 1, 1, v18);
LABEL_20:
          unint64_t v29 = *(void *)(v18 + 16);
          unint64_t v28 = *(void *)(v18 + 24);
          if (v29 >= v28 >> 1) {
            unint64_t v18 = sub_250DCF298(v28 > 1, v29 + 1, 1, v18);
          }
          *(void *)(v18 + 16) = v29 + 1;
          unint64_t v30 = v18
              + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
              + *(void *)(v6 + 72) * v29;
          uint64_t v31 = v38;
          (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v30, v9, v38);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v31);
          return sub_250E24450();
        }
        unint64_t v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        uint64_t v9 = *(char **)(v6 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v16, v19 + v20 + (void)v9 * v18, v5);
        if (sub_250E24410() == 0x6163696669746F6ELL && v21 == 0xEE0044496E6F6974)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v12 = sub_250E25400();
          swift_bridgeObjectRelease();
          if ((v12 & 1) == 0)
          {
            unint64_t v22 = *v40;
            (*v40)(v41, v16, v5);
            unint64_t v23 = v44;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v39 = v22;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_250DBA204(0, *(void *)(v23 + 16) + 1, 1);
              unint64_t v23 = v44;
            }
            unint64_t v26 = *(void *)(v23 + 16);
            unint64_t v25 = *(void *)(v23 + 24);
            uint64_t v12 = v26 + 1;
            if (v26 >= v25 >> 1)
            {
              sub_250DBA204(v25 > 1, v26 + 1, 1);
              unint64_t v23 = v44;
            }
            *(void *)(v23 + 16) = v12;
            unint64_t v27 = v23 + v20 + v26 * (void)v9;
            uint64_t v5 = v38;
            v39((char *)v27, v41, v38);
            unint64_t v44 = v23;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
LABEL_6:
        if (v43 == ++v18)
        {
          unint64_t v18 = v44;
          uint64_t v9 = v36;
          a2 = v34;
          uint64_t v12 = v35;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (a2)
  {
    sub_250E24400();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  return sub_250E24450();
}

uint64_t sub_250D9D740(uint64_t a1)
{
  uint64_t v3 = sub_250E245E0();
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v54 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_250E247F0();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2A8C();
  uint64_t v57 = v7;
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v52 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v48 - v10;
  sub_250DA2964(0, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v62 = (uint64_t)&v48 - v12;
  uint64_t v13 = sub_250E24B20();
  unint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250E24430();
  uint64_t v65 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v56 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  id v63 = (char *)&v48 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v67 = (char *)&v48 - v23;
  MEMORY[0x270FA5388](v22);
  unint64_t v25 = (char *)&v48 - v24;
  uint64_t v26 = sub_250E24440();
  unint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v64 = v17;
  if (v26)
  {
    uint64_t v28 = v26;
    unint64_t v71 = MEMORY[0x263F8EE78];
    uint64_t v69 = *(void *)(v26 + 16);
    if (v69)
    {
      uint64_t v48 = v16;
      unint64_t v49 = v14;
      uint64_t v50 = v13;
      uint64_t v60 = v1;
      uint64_t v61 = a1;
      unint64_t v14 = 0;
      uint64_t v13 = v65;
      uint64_t v68 = v65 + 16;
      uint64_t v66 = (void (**)(char *, char *, uint64_t))(v65 + 32);
      unint64_t v16 = (char *)(v65 + 8);
      while (1)
      {
        if (v14 >= *(void *)(v28 + 16))
        {
          __break(1u);
LABEL_26:
          unint64_t v27 = sub_250DCF298(0, *(void *)(v27 + 16) + 1, 1, v27);
LABEL_21:
          unint64_t v45 = *(void *)(v27 + 16);
          unint64_t v44 = *(void *)(v27 + 24);
          a1 = v61;
          if (v45 >= v44 >> 1) {
            unint64_t v27 = sub_250DCF298(v44 > 1, v45 + 1, 1, v27);
          }
          *(void *)(v27 + 16) = v45 + 1;
          uint64_t v46 = v65;
          (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))(v27+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v45, v25, v17);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v63, v17);
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
          goto LABEL_24;
        }
        unint64_t v29 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        uint64_t v30 = *(void *)(v13 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v25, v28 + v29 + v30 * v14, v17);
        if (sub_250E24410() == 0x6144746567726174 && v31 == 0xE900000000000079)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v27 = sub_250E25400();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            uint64_t v32 = *v66;
            (*v66)(v67, v25, v17);
            unint64_t v33 = v71;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_250DBA204(0, *(void *)(v33 + 16) + 1, 1);
              unint64_t v33 = v71;
            }
            unint64_t v35 = *(void *)(v33 + 16);
            unint64_t v34 = *(void *)(v33 + 24);
            unint64_t v27 = v35 + 1;
            if (v35 >= v34 >> 1)
            {
              sub_250DBA204(v34 > 1, v35 + 1, 1);
              unint64_t v33 = v71;
            }
            *(void *)(v33 + 16) = v27;
            unint64_t v36 = v33 + v29 + v35 * v30;
            uint64_t v17 = v64;
            v32((char *)v36, v67, v64);
            unint64_t v71 = v33;
            uint64_t v13 = v65;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))v16)(v25, v17);
LABEL_6:
        if (v69 == ++v14)
        {
          unint64_t v27 = v71;
          uint64_t v1 = v60;
          a1 = v61;
          uint64_t v13 = v50;
          unint64_t v14 = v49;
          unint64_t v16 = v48;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v37 = v62;
  sub_250DA2AE8(a1, v62, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v37, 1, v13) != 1)
  {
    uint64_t v60 = v1;
    uint64_t v61 = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v16, v37, v13);
    uint64_t v70 = sub_250E24AE0();
    sub_250E247D0();
    sub_250D9B9A8();
    uint64_t v38 = v52;
    sub_250E24520();
    uint64_t v39 = v54;
    sub_250E245D0();
    unint64_t v40 = v53;
    uint64_t v41 = v57;
    MEMORY[0x253389100](v39, v57);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v55 + 8);
    v42(v38, v41);
    sub_250D9B9FC();
    sub_250E25020();
    v42(v40, v41);
    uint64_t v43 = v63;
    uint64_t v17 = v64;
    sub_250E24400();
    swift_bridgeObjectRelease();
    unint64_t v25 = v56;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v56, v43, v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  sub_250DA12E0(v37, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8]);
LABEL_24:
  sub_250E24450();
  return sub_250DA12E0(a1, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8]);
}

uint64_t sub_250D9DF94(int a1)
{
  int v35 = a1;
  uint64_t v2 = sub_250E24430();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v39 = (char *)&v31 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = sub_250E24440();
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v36 = v2;
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v43 = *(void *)(v14 + 16);
    unint64_t v44 = MEMORY[0x263F8EE78];
    if (v43)
    {
      uint64_t v32 = v9;
      unint64_t v33 = v6;
      uint64_t v34 = v1;
      unint64_t v15 = 0;
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(v3 + 32);
      uint64_t v9 = (char *)(v3 + 8);
      uint64_t v41 = "daySummaryDescription";
      uint64_t v42 = v3 + 16;
      unint64_t v40 = 0x8000000250E2C540;
      while (1)
      {
        if (v15 >= *(void *)(v16 + 16))
        {
          __break(1u);
LABEL_25:
          unint64_t v15 = sub_250DCF298(0, *(void *)(v15 + 16) + 1, 1, v15);
LABEL_20:
          unint64_t v27 = *(void *)(v15 + 16);
          unint64_t v26 = *(void *)(v15 + 24);
          if (v27 >= v26 >> 1) {
            unint64_t v15 = sub_250DCF298(v26 > 1, v27 + 1, 1, v15);
          }
          *(void *)(v15 + 16) = v27 + 1;
          unint64_t v28 = v15
              + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
              + *(void *)(v3 + 72) * v27;
          uint64_t v29 = v36;
          (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v28, v6, v36);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v29);
          return sub_250E24450();
        }
        unint64_t v17 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v6 = *(char **)(v3 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, v16 + v17 + (void)v6 * v15, v2);
        if (sub_250E24410() == 0xD000000000000013 && v18 == v40)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = sub_250E25400();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = *v38;
            (*v38)(v39, v13, v2);
            unint64_t v21 = v44;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v37 = v20;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_250DBA204(0, *(void *)(v21 + 16) + 1, 1);
              unint64_t v21 = v44;
            }
            unint64_t v24 = *(void *)(v21 + 16);
            unint64_t v23 = *(void *)(v21 + 24);
            if (v24 >= v23 >> 1)
            {
              sub_250DBA204(v23 > 1, v24 + 1, 1);
              unint64_t v21 = v44;
            }
            *(void *)(v21 + 16) = v24 + 1;
            unint64_t v25 = v21 + v17 + v24 * (void)v6;
            uint64_t v2 = v36;
            v37((char *)v25, v39, v36);
            unint64_t v44 = v21;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))v9)(v13, v2);
LABEL_6:
        if (v43 == ++v15)
        {
          unint64_t v15 = v44;
          uint64_t v6 = v33;
          uint64_t v9 = v32;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (v35 != 2)
  {
    sub_250E24400();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  return sub_250E24450();
}

uint64_t sub_250D9E3F0(uint64_t *a1)
{
  uint64_t v3 = sub_250E245E0();
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v54 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_250E247F0();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v50 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2A8C();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = sub_250E24430();
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v60 = (char *)&v43 - v22;
  MEMORY[0x270FA5388](v21);
  unint64_t v24 = (char *)&v43 - v23;
  uint64_t v49 = *a1;
  int v56 = *((unsigned __int8 *)a1 + 8);
  uint64_t v25 = sub_250E24440();
  unint64_t v26 = MEMORY[0x263F8EE78];
  if (v25)
  {
    uint64_t v27 = v25;
    unint64_t v66 = MEMORY[0x263F8EE78];
    uint64_t v64 = *(char **)(v25 + 16);
    if (v64)
    {
      unint64_t v44 = v11;
      unint64_t v45 = v13;
      uint64_t v46 = v5;
      uint64_t v47 = v20;
      uint64_t v48 = v17;
      uint64_t v55 = v1;
      uint64_t v20 = 0;
      uint64_t v28 = v58;
      uint64_t v59 = (void (**)(char *, char *, uint64_t))(v58 + 32);
      uint64_t v29 = (void (**)(char *, uint64_t))(v58 + 8);
      uint64_t v62 = "omplete";
      uint64_t v63 = v58 + 16;
      unint64_t v61 = 0x8000000250E2C520;
      uint64_t v57 = v14;
      while (1)
      {
        if ((unint64_t)v20 >= *(void *)(v27 + 16))
        {
          __break(1u);
LABEL_25:
          unint64_t v26 = sub_250DCF298(0, *(void *)(v26 + 16) + 1, 1, v26);
LABEL_20:
          unint64_t v40 = *(void *)(v26 + 16);
          unint64_t v39 = *(void *)(v26 + 24);
          if (v40 >= v39 >> 1) {
            unint64_t v26 = sub_250DCF298(v39 > 1, v40 + 1, 1, v26);
          }
          *(void *)(v26 + 16) = v40 + 1;
          uint64_t v41 = v58;
          (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v26+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v40, v17, v14);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v14);
          return sub_250E24450();
        }
        unint64_t v17 = (char *)((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
        uint64_t v30 = *(void *)(v28 + 72);
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v24, &v17[v27 + v30 * (void)v20], v14);
        if (sub_250E24410() == 0xD000000000000015 && v31 == v61)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v26 = sub_250E25400();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            uint64_t v32 = *v59;
            (*v59)(v60, v24, v14);
            unint64_t v33 = v66;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_250DBA204(0, *(void *)(v33 + 16) + 1, 1);
              unint64_t v33 = v66;
            }
            unint64_t v35 = *(void *)(v33 + 16);
            unint64_t v34 = *(void *)(v33 + 24);
            unint64_t v26 = v35 + 1;
            if (v35 >= v34 >> 1)
            {
              sub_250DBA204(v34 > 1, v35 + 1, 1);
              unint64_t v33 = v66;
            }
            *(void *)(v33 + 16) = v26;
            uint64_t v36 = &v17[v33 + v35 * v30];
            uint64_t v14 = v57;
            v32(v36, v60, v57);
            unint64_t v66 = v33;
            uint64_t v28 = v58;
            goto LABEL_6;
          }
        }
        (*v29)(v24, v14);
LABEL_6:
        if (v64 == ++v20)
        {
          unint64_t v26 = v66;
          uint64_t v1 = v55;
          uint64_t v20 = v47;
          unint64_t v17 = v48;
          uint64_t v5 = v46;
          uint64_t v13 = v45;
          uint64_t v11 = v44;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((v56 & 1) == 0)
  {
    uint64_t v55 = v1;
    uint64_t v65 = v49;
    sub_250E247D0();
    sub_250D9B9A8();
    sub_250E24520();
    sub_250E245D0();
    uint64_t v37 = v52;
    MEMORY[0x253389100](v5, v52);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v5, v54);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v51 + 8);
    v38(v11, v37);
    sub_250D9B9FC();
    sub_250E25020();
    v38(v13, v37);
    sub_250E24400();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v17, v20, v14);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  return sub_250E24450();
}

uint64_t BalanceURLBuilder.updateActivity(_:withURL:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F06370];
  sub_250DA2964(0, &qword_269B03848, MEMORY[0x263F06370], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v29 - v10;
  int v32 = *v1;
  sub_250E24460();
  sub_250DA2AE8((uint64_t)v11, (uint64_t)v9, &qword_269B03848, v2);
  uint64_t v12 = sub_250E244F0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(void, void, void))(v13 + 48);
  if (v14(v9, 1, v12) == 1)
  {
    sub_250DA12E0((uint64_t)v9, &qword_269B03848, MEMORY[0x263F06370]);
    char v15 = 4;
  }
  else
  {
    uint64_t v31 = v14;
    uint64_t v16 = sub_250E24490();
    unint64_t v18 = v17;
    v34[0] = 47;
    v34[1] = 0xE100000000000000;
    MEMORY[0x270FA5388](v16);
    *(&v29 - 2) = (uint64_t)v34;
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)sub_250DA1350(0x7FFFFFFFFFFFFFFFLL, 1, sub_250DA21A0, (uint64_t)(&v29 - 4), v16, v18);
    swift_bridgeObjectRelease();
    if (v19[2])
    {
      uint64_t v20 = v19[4];
      uint64_t v21 = v19[5];
      uint64_t v22 = v19[7];
      uint64_t v30 = v19[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v23 = MEMORY[0x253389870](v20, v21, v30, v22);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = v23;
      v26._object = v25;
      BalanceURLBuilder.Route.init(rawValue:)(v26);
      char v15 = v34[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      char v15 = 4;
      LOBYTE(v34[0]) = 4;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    uint64_t v14 = v31;
  }
  LOBYTE(v34[0]) = v15;
  sub_250D9EF48((unsigned __int8 *)v34);
  sub_250DA2AE8((uint64_t)v11, (uint64_t)v6, &qword_269B03848, MEMORY[0x263F06370]);
  if (v14(v6, 1, v12) == 1)
  {
    sub_250DA12E0((uint64_t)v6, &qword_269B03848, MEMORY[0x263F06370]);
    char v27 = 10;
  }
  else
  {
    sub_250D9F190(v34);
    char v27 = v34[0];
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v12);
  }
  LOBYTE(v34[0]) = v27;
  sub_250D9F4C8((unsigned __int8 *)v34);
  return sub_250DA12E0((uint64_t)v11, &qword_269B03848, MEMORY[0x263F06370]);
}

HealthBalance::BalanceURLBuilder::Route_optional sub_250D9EE44@<W0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = sub_250E24490();
  unint64_t v4 = v3;
  v16[0] = 47;
  v16[1] = 0xE100000000000000;
  v15[2] = v16;
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_250DA1350(0x7FFFFFFFFFFFFFFFLL, 1, sub_250DA21A0, (uint64_t)v15, v2, v4);
  swift_bridgeObjectRelease();
  if (v5[2])
  {
    uint64_t v6 = v5[4];
    uint64_t v7 = v5[5];
    uint64_t v8 = v5[6];
    uint64_t v9 = v5[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x253389870](v6, v7, v8, v9);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    return BalanceURLBuilder.Route.init(rawValue:)(v13);
  }
  else
  {
    result.value = swift_bridgeObjectRelease();
    *a1 = 4;
  }
  return result;
}

void sub_250D9EF48(unsigned __int8 *a1)
{
  int v2 = *a1;
  unint64_t v3 = v1;
  unint64_t v4 = 0xD000000000000011;
  sub_250DA2964(0, (unint64_t *)&qword_269B03878, (uint64_t (*)(uint64_t))sub_250DA29C8, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_250E264E0;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  sub_250E24CE0();
  uint64_t v6 = MEMORY[0x263F8D310];
  sub_250E25090();
  unint64_t v7 = 0x8000000250E2C410;
  switch(v2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      unint64_t v7 = 0xEB000000006D6F6FLL;
      unint64_t v4 = 0x5265636E616C6162;
      goto LABEL_5;
    case 2:
      unint64_t v7 = 0xEF7363697274654DLL;
      unint64_t v4 = 0x7961446E65766573;
      goto LABEL_5;
    case 3:
      unint64_t v7 = 0xED00007363697274;
      unint64_t v4 = 0x654D796144656E6FLL;
LABEL_5:
      *(void *)(inited + 96) = v6;
      *(void *)(inited + 72) = v4;
      *(void *)(inited + 80) = v7;
      sub_250DE143C(inited);
      uint64_t v8 = (void *)sub_250E24B40();
      swift_bridgeObjectRelease();
      objc_msgSend(v3, sel_addUserInfoEntriesFromDictionary_, v8);

      break;
    default:
      return;
  }
}

char sub_250D9F190@<W0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = sub_250E24430();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2964(0, &qword_269B03868, MEMORY[0x263F06338], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = sub_250E24440();
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v25 = v8;
    uint64_t v26 = v3;
    char v27 = a1;
    Swift::String v13 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v12 = v3 + 16;
    uint64_t v11 = v13;
    unint64_t v14 = v9 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v24 = v9;
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(v5, v14, v2);
      if (sub_250E24410() == 0x656372756F73 && v16 == 0xE600000000000000) {
        break;
      }
      char v17 = sub_250E25400();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v12 - 8))(v5, v2);
      v14 += v15;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v3 = v26;
        a1 = v27;
        uint64_t v8 = v25;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v8 = v25;
    uint64_t v3 = v26;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v25, v5, v2);
    uint64_t v18 = 0;
    a1 = v27;
  }
  else
  {
    uint64_t v18 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v18, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    LOBYTE(v9) = sub_250DA12E0((uint64_t)v8, &qword_269B03868, MEMORY[0x263F06338]);
LABEL_16:
    *a1 = 10;
    return v9;
  }
  uint64_t v19 = sub_250E24420();
  uint64_t v21 = v20;
  LOBYTE(v9) = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (!v21) {
    goto LABEL_16;
  }
  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  LOBYTE(v9) = BalanceURLBuilder.Source.init(rawValue:)(v22);
  return v9;
}

void sub_250D9F4C8(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = v1;
  sub_250DA2964(0, (unint64_t *)&qword_269B03878, (uint64_t (*)(uint64_t))sub_250DA29C8, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_250E264E0;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  unint64_t v5 = 0xE600000000000000;
  sub_250E24CE0();
  uint64_t v6 = MEMORY[0x263F8D310];
  sub_250E25090();
  unint64_t v7 = 0x746567646977;
  switch(v2)
  {
    case 0:
      unint64_t v5 = 0xE800000000000000;
      unint64_t v7 = 0x7974697669746361;
      goto LABEL_13;
    case 1:
      unint64_t v5 = 0xE700000000000000;
      unint64_t v7 = 0x7373656E746966;
      goto LABEL_13;
    case 2:
      unint64_t v7 = 0x704168746C616568;
      goto LABEL_8;
    case 3:
      unint64_t v7 = 0xD000000000000015;
      uint64_t v8 = "healthAppNotification";
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xEC00000073676E69;
      unint64_t v7 = 0x747465536F6E616ELL;
      goto LABEL_13;
    case 5:
      unint64_t v7 = 0x65656C536F6E616ELL;
LABEL_8:
      unint64_t v5 = 0xE900000000000070;
      goto LABEL_13;
    case 6:
      unint64_t v5 = 0xE800000000000000;
      unint64_t v7 = 0x7070416863746177;
      goto LABEL_13;
    case 7:
      unint64_t v5 = 0x8000000250E2C4B0;
      unint64_t v7 = 0xD000000000000010;
      goto LABEL_13;
    case 8:
      unint64_t v7 = 0xD000000000000019;
      uint64_t v8 = "watchLongLookNotification";
LABEL_12:
      unint64_t v5 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_13;
    case 9:
LABEL_13:
      *(void *)(inited + 96) = v6;
      *(void *)(inited + 72) = v7;
      *(void *)(inited + 80) = v5;
      sub_250DE143C(inited);
      uint64_t v9 = (void *)sub_250E24B40();
      swift_bridgeObjectRelease();
      objc_msgSend(v3, sel_addUserInfoEntriesFromDictionary_, v9);

      break;
    default:
      return;
  }
}

HealthBalance::BalanceURLBuilder::Route_optional __swiftcall BalanceURLBuilder.route(activity:)(NSUserActivity activity)
{
  return (HealthBalance::BalanceURLBuilder::Route_optional)sub_250D9F864((uint64_t (*)(uint64_t, unint64_t))BalanceURLBuilder.Route.init(rawValue:), 4, v1);
}

uint64_t BalanceURLBuilder.route(url:)@<X0>(unsigned char *a1@<X8>)
{
  return sub_250D9FA54((void (*)(void))sub_250D9EE44, 4, a1);
}

HealthBalance::BalanceURLBuilder::Source_optional __swiftcall BalanceURLBuilder.source(activity:)(NSUserActivity activity)
{
  return (HealthBalance::BalanceURLBuilder::Source_optional)sub_250D9F864((uint64_t (*)(uint64_t, unint64_t))BalanceURLBuilder.Source.init(rawValue:), 10, v1);
}

uint64_t sub_250D9F864@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X3>, char a2@<W4>, unsigned char *a3@<X8>)
{
  id v7 = objc_msgSend(v3, sel_userInfo);
  if (!v7)
  {
    long long v15 = 0u;
    long long v16 = 0u;
LABEL_10:
    uint64_t result = sub_250DA2810((uint64_t)&v15);
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_250E24B50();

  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  sub_250E24CE0();
  sub_250E25090();
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_250DE4AEC((uint64_t)&v13), (v11 & 1) != 0))
  {
    sub_250D8B520(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v15);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_250DA28C8((uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v16 + 1)) {
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast();
  if (result) {
    return a1(v13, v14);
  }
LABEL_11:
  *a3 = a2;
  return result;
}

uint64_t BalanceURLBuilder.source(url:)@<X0>(unsigned char *a1@<X8>)
{
  return sub_250D9FA54((void (*)(void))sub_250D9F190, 10, a1);
}

uint64_t sub_250D9FA54@<X0>(void (*a1)(void)@<X1>, char a2@<W2>, unsigned char *a3@<X8>)
{
  sub_250DA2964(0, &qword_269B03848, MEMORY[0x263F06370], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v12 - v7;
  sub_250E24460();
  uint64_t v9 = sub_250E244F0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t result = sub_250DA12E0((uint64_t)v8, &qword_269B03848, MEMORY[0x263F06370]);
    *a3 = a2;
  }
  else
  {
    a1();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t BalanceURLBuilder.notification(forQueryString:)@<X0>(void *a1@<X8>)
{
  sub_250DA2964(0, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v29 - v3;
  uint64_t v5 = sub_250E24B20();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E244F0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E244E0();
  swift_bridgeObjectRetain();
  sub_250E244C0();
  uint64_t v13 = sub_250DA0018();
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    sub_250DA0364((uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
      sub_250DA12E0((uint64_t)v4, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8]);
    }
    else
    {
      uint64_t v31 = v15;
      int v32 = a1;
      char v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v17(v8, v4, v5);
      char v18 = sub_250DA09A8();
      if (v18 != 2)
      {
        char v23 = v18;
        uint64_t v30 = v17;
        if (v18)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          uint64_t v24 = 1;
          uint64_t v25 = v31;
        }
        else
        {
          sub_250DA0D04((uint64_t)&v33);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          uint64_t v25 = v31;
          if (v34)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            swift_bridgeObjectRelease();
            uint64_t v19 = type metadata accessor for SleepingSampleChangeNotification();
            uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
            uint64_t v21 = v32;
            return v20(v21, 1, 1, v19);
          }
          uint64_t v24 = v33;
        }
        uint64_t v26 = type metadata accessor for SleepingSampleChangeNotification();
        char v27 = v32;
        v30((char *)v32 + *(int *)(v26 + 20), v8, v5);
        *char v27 = v25;
        v27[1] = v16;
        uint64_t v28 = (char *)v27 + *(int *)(v26 + 24);
        *(void *)uint64_t v28 = v24;
        v28[8] = v23 != 0;
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v27, 0, 1, v26);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      a1 = v32;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v19 = type metadata accessor for SleepingSampleChangeNotification();
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v21 = a1;
  return v20(v21, 1, 1, v19);
}

uint64_t sub_250DA0018()
{
  uint64_t v0 = sub_250E24430();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2964(0, &qword_269B03868, MEMORY[0x263F06338], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v19 - v5;
  uint64_t v7 = sub_250E24440();
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9)
    {
      uint64_t v20 = v6;
      uint64_t v21 = v1;
      uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      uint64_t v10 = v1 + 16;
      uint64_t v11 = v12;
      unint64_t v13 = v7 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
      uint64_t v14 = *(void *)(v10 + 56);
      v19[1] = v7;
      swift_bridgeObjectRetain();
      while (1)
      {
        v11(v3, v13, v0);
        if (sub_250E24410() == 0x6163696669746F6ELL && v15 == 0xEE0044496E6F6974) {
          break;
        }
        char v16 = sub_250E25400();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_12;
        }
        (*(void (**)(char *, uint64_t))(v10 - 8))(v3, v0);
        v13 += v14;
        if (!--v9)
        {
          swift_bridgeObjectRelease();
          uint64_t v17 = 1;
          uint64_t v6 = v20;
          uint64_t v1 = v21;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      uint64_t v6 = v20;
      uint64_t v1 = v21;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v20, v3, v0);
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 1;
    }
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, v17, 1, v0);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
    {
      sub_250DA12E0((uint64_t)v6, &qword_269B03868, MEMORY[0x263F06338]);
      return 0;
    }
    else
    {
      uint64_t v8 = sub_250E24420();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    }
  }
  return v8;
}

uint64_t sub_250DA0364@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_250E24430();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2964(0, &qword_269B03868, MEMORY[0x263F06338], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = sub_250E24440();
  if (!v9) {
    goto LABEL_67;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v48 = v8;
    uint64_t v49 = v3;
    uint64_t v50 = a1;
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    unint64_t v14 = v9 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    uint64_t v47 = v9;
    swift_bridgeObjectRetain();
    while (1)
    {
      v12(v5, v14, v2);
      if (sub_250E24410() == 0x6144746567726174 && v16 == 0xE900000000000079) {
        break;
      }
      char v17 = sub_250E25400();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v11 - 8))(v5, v2);
      v14 += v15;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v3 = v49;
        a1 = v50;
        uint64_t v8 = v48;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v8 = v48;
    uint64_t v3 = v49;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v5, v2);
    uint64_t v18 = 0;
    a1 = v50;
  }
  else
  {
    uint64_t v18 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v18, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_250DA12E0((uint64_t)v8, &qword_269B03868, MEMORY[0x263F06338]);
LABEL_67:
    uint64_t v45 = sub_250E24B20();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(a1, 1, 1, v45);
  }
  uint64_t v19 = sub_250E24420();
  unint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (!v21) {
    goto LABEL_67;
  }
  uint64_t v23 = HIBYTE(v21) & 0xF;
  uint64_t v24 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x2000000000000000) != 0) {
    uint64_t v25 = HIBYTE(v21) & 0xF;
  }
  else {
    uint64_t v25 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25)
  {
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if ((v21 & 0x1000000000000000) != 0)
  {
    sub_250DA1950(v19, v21, 10);
    char v28 = v46;
    goto LABEL_58;
  }
  if ((v21 & 0x2000000000000000) == 0)
  {
    if ((v19 & 0x1000000000000000) != 0) {
      uint64_t v26 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v26 = (unsigned __int8 *)sub_250E25150();
    }
    sub_250DA1A38(v26, v24, 10);
    char v28 = v27 & 1;
LABEL_58:
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      sub_250E24AD0();
      uint64_t v41 = sub_250E24B20();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(a1, 0, 1, v41);
    }
    goto LABEL_67;
  }
  v51[0] = v19;
  v51[1] = v21 & 0xFFFFFFFFFFFFFFLL;
  if (v19 == 43)
  {
    if (!v23) {
      goto LABEL_71;
    }
    if (v23 == 1 || (BYTE1(v19) - 48) > 9u) {
      goto LABEL_45;
    }
    if (v23 != 2)
    {
      if ((BYTE2(v19) - 48) > 9u) {
        goto LABEL_45;
      }
      uint64_t v29 = 10 * (BYTE1(v19) - 48) + (BYTE2(v19) - 48);
      uint64_t v30 = v23 - 3;
      if (v30)
      {
        uint64_t v31 = (unsigned __int8 *)v51 + 3;
        while (1)
        {
          unsigned int v32 = *v31 - 48;
          if (v32 > 9) {
            goto LABEL_45;
          }
          uint64_t v33 = 10 * v29;
          if ((unsigned __int128)(v29 * (__int128)10) >> 64 != (10 * v29) >> 63) {
            goto LABEL_45;
          }
          uint64_t v29 = v33 + v32;
          if (__OFADD__(v33, v32)) {
            goto LABEL_45;
          }
          char v28 = 0;
          ++v31;
          if (!--v30) {
            goto LABEL_58;
          }
        }
      }
    }
LABEL_57:
    char v28 = 0;
    goto LABEL_58;
  }
  if (v19 != 45)
  {
    if (!v23 || (v19 - 48) > 9u) {
      goto LABEL_45;
    }
    if (v23 != 1)
    {
      if ((BYTE1(v19) - 48) > 9u) {
        goto LABEL_45;
      }
      uint64_t v34 = 10 * (v19 - 48) + (BYTE1(v19) - 48);
      uint64_t v35 = v23 - 2;
      if (v35)
      {
        uint64_t v36 = (unsigned __int8 *)v51 + 2;
        while (1)
        {
          unsigned int v37 = *v36 - 48;
          if (v37 > 9) {
            goto LABEL_45;
          }
          uint64_t v38 = 10 * v34;
          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63) {
            goto LABEL_45;
          }
          uint64_t v34 = v38 + v37;
          if (__OFADD__(v38, v37)) {
            goto LABEL_45;
          }
          char v28 = 0;
          ++v36;
          if (!--v35) {
            goto LABEL_58;
          }
        }
      }
    }
    goto LABEL_57;
  }
  if (v23)
  {
    if (v23 != 1 && (BYTE1(v19) - 48) <= 9u)
    {
      if (v23 == 2)
      {
        char v28 = 0;
        goto LABEL_58;
      }
      if ((BYTE2(v19) - 48) <= 9u)
      {
        uint64_t v39 = -10 * (BYTE1(v19) - 48) - (BYTE2(v19) - 48);
        uint64_t v40 = v23 - 3;
        if (!v40) {
          goto LABEL_57;
        }
        uint64_t v42 = (unsigned __int8 *)v51 + 3;
        while (1)
        {
          unsigned int v43 = *v42 - 48;
          if (v43 > 9) {
            break;
          }
          uint64_t v44 = 10 * v39;
          if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63) {
            break;
          }
          uint64_t v39 = v44 - v43;
          if (__OFSUB__(v44, v43)) {
            break;
          }
          char v28 = 0;
          ++v42;
          if (!--v40) {
            goto LABEL_58;
          }
        }
      }
    }
LABEL_45:
    char v28 = 1;
    goto LABEL_58;
  }
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

uint64_t sub_250DA09A8()
{
  uint64_t v0 = sub_250E24430();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2964(0, &qword_269B03868, MEMORY[0x263F06338], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v7 = sub_250E24440();
  if (!v7) {
    return 2;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    Swift::String v22 = v6;
    uint64_t v23 = v1;
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v9 = v1 + 16;
    uint64_t v25 = v10;
    unint64_t v11 = v7 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v12 = *(void *)(v9 + 56);
    v21[1] = v7;
    swift_bridgeObjectRetain();
    unint64_t v24 = 0x8000000250E2C540;
    while (1)
    {
      v25(v3, v11, v0);
      if (sub_250E24410() == 0xD000000000000013 && v13 == v24) {
        break;
      }
      char v14 = sub_250E25400();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v9 - 8))(v3, v0);
      v11 += v12;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = 1;
        uint64_t v6 = v22;
        uint64_t v1 = v23;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v6 = v22;
    uint64_t v1 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v3, v0);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, v15, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
  {
    sub_250DA12E0((uint64_t)v6, &qword_269B03868, MEMORY[0x263F06338]);
    return 2;
  }
  sub_250E24420();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  if (!v17) {
    return 2;
  }
  uint64_t v18 = sub_250E252B0();
  swift_bridgeObjectRelease();
  if (v18 == 1) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = 2;
  }
  if (v18) {
    return v19;
  }
  else {
    return 0;
  }
}

uint64_t sub_250DA0D04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_250E24430();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA2964(0, &qword_269B03868, MEMORY[0x263F06338], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t result = sub_250E24440();
  if (!result) {
    goto LABEL_67;
  }
  uint64_t v10 = *(void *)(result + 16);
  if (v10)
  {
    unsigned int v43 = v8;
    uint64_t v44 = v3;
    uint64_t v45 = a1;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v47 = v12;
    unint64_t v13 = result + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v42 = result;
    swift_bridgeObjectRetain();
    unint64_t v46 = 0x8000000250E2C520;
    while (1)
    {
      v47(v5, v13, v2);
      if (sub_250E24410() == 0xD000000000000015 && v15 == v46) {
        break;
      }
      char v16 = sub_250E25400();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v11 - 8))(v5, v2);
      v13 += v14;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 1;
        uint64_t v3 = v44;
        a1 = v45;
        uint64_t v8 = v43;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v8 = v43;
    uint64_t v3 = v44;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v5, v2);
    uint64_t v17 = 0;
    a1 = v45;
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v17, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    uint64_t result = sub_250DA12E0((uint64_t)v8, &qword_269B03868, MEMORY[0x263F06338]);
    goto LABEL_67;
  }
  uint64_t v18 = sub_250E24420();
  unint64_t v20 = v19;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (!v20) {
    goto LABEL_67;
  }
  uint64_t v21 = HIBYTE(v20) & 0xF;
  uint64_t v22 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    uint64_t v25 = (uint64_t)sub_250DA1950(v18, v20, 10);
    char v27 = v41;
    goto LABEL_58;
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0) {
      unint64_t v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v24 = (unsigned __int8 *)sub_250E25150();
    }
    uint64_t v25 = (uint64_t)sub_250DA1A38(v24, v22, 10);
    char v27 = v26 & 1;
LABEL_58:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      char v37 = 0;
LABEL_68:
      *(void *)a1 = v25;
      *(unsigned char *)(a1 + 8) = v37;
      return result;
    }
LABEL_67:
    uint64_t v25 = 0;
    char v37 = 1;
    goto LABEL_68;
  }
  v48[0] = v18;
  v48[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (!v21) {
      goto LABEL_72;
    }
    if (v21 == 1 || (BYTE1(v18) - 48) > 9u) {
      goto LABEL_45;
    }
    uint64_t v25 = (BYTE1(v18) - 48);
    if (v21 != 2)
    {
      if ((BYTE2(v18) - 48) > 9u) {
        goto LABEL_45;
      }
      uint64_t v25 = 10 * (BYTE1(v18) - 48) + (BYTE2(v18) - 48);
      uint64_t v28 = v21 - 3;
      if (v28)
      {
        uint64_t v29 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          unsigned int v30 = *v29 - 48;
          if (v30 > 9) {
            goto LABEL_45;
          }
          uint64_t v31 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63) {
            goto LABEL_45;
          }
          uint64_t v25 = v31 + v30;
          if (__OFADD__(v31, v30)) {
            goto LABEL_45;
          }
          char v27 = 0;
          ++v29;
          if (!--v28) {
            goto LABEL_58;
          }
        }
      }
    }
LABEL_57:
    char v27 = 0;
    goto LABEL_58;
  }
  if (v18 != 45)
  {
    if (!v21 || (v18 - 48) > 9u) {
      goto LABEL_45;
    }
    uint64_t v25 = (v18 - 48);
    if (v21 != 1)
    {
      if ((BYTE1(v18) - 48) > 9u) {
        goto LABEL_45;
      }
      uint64_t v25 = 10 * (v18 - 48) + (BYTE1(v18) - 48);
      uint64_t v32 = v21 - 2;
      if (v32)
      {
        uint64_t v33 = (unsigned __int8 *)v48 + 2;
        while (1)
        {
          unsigned int v34 = *v33 - 48;
          if (v34 > 9) {
            goto LABEL_45;
          }
          uint64_t v35 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63) {
            goto LABEL_45;
          }
          uint64_t v25 = v35 + v34;
          if (__OFADD__(v35, v34)) {
            goto LABEL_45;
          }
          char v27 = 0;
          ++v33;
          if (!--v32) {
            goto LABEL_58;
          }
        }
      }
    }
    goto LABEL_57;
  }
  if (v21)
  {
    if (v21 != 1 && (BYTE1(v18) - 48) <= 9u)
    {
      if (v21 == 2)
      {
        char v27 = 0;
        uint64_t v25 = -(uint64_t)(BYTE1(v18) - 48);
        goto LABEL_58;
      }
      if ((BYTE2(v18) - 48) <= 9u)
      {
        uint64_t v25 = -10 * (BYTE1(v18) - 48) - (BYTE2(v18) - 48);
        uint64_t v36 = v21 - 3;
        if (!v36) {
          goto LABEL_57;
        }
        uint64_t v38 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          unsigned int v39 = *v38 - 48;
          if (v39 > 9) {
            break;
          }
          uint64_t v40 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63) {
            break;
          }
          uint64_t v25 = v40 - v39;
          if (__OFSUB__(v40, v39)) {
            break;
          }
          char v27 = 0;
          ++v38;
          if (!--v36) {
            goto LABEL_58;
          }
        }
      }
    }
LABEL_45:
    uint64_t v25 = 0;
    char v27 = 1;
    goto LABEL_58;
  }
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t sub_250DA12E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250DA2964(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250DA1350(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_250DA17F4(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    unint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  unint64_t v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = sub_250E24D50();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = sub_250E24CD0();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = sub_250E24CD0();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = sub_250E24D70();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = sub_250DCF2E0(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    unint64_t v13 = sub_250DCF2E0((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  uint64_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = sub_250E24CD0();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = sub_250E24D70();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v13 = sub_250DCF2E0(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      unint64_t v13 = sub_250DCF2E0((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_250E25210();
  __break(1u);
LABEL_42:
  uint64_t result = sub_250E25210();
  __break(1u);
  return result;
}

uint64_t sub_250DA17F4(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = sub_250E24D70();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_250DCF2E0(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_250DCF2E0((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = sub_250E25210();
  __break(1u);
  return result;
}

unsigned __int8 *sub_250DA1950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_250E24D60();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_250DA1CB4();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_250E25150();
  }
LABEL_7:
  uint64_t v11 = sub_250DA1A38(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_250DA1A38(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  char v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_250DA1CB4()
{
  unint64_t v0 = sub_250E24D70();
  uint64_t v4 = sub_250DA1D34(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_250DA1D34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_250DA1E8C(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_250DE48C0(v9, 0);
      unint64_t v12 = sub_250DA1F8C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_250E25150();
LABEL_4:
        JUMPOUT(0x253389880);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x253389880](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x253389880]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t sub_250DA1E8C(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_250DE4924(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_250DE4924(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t sub_250DA1F8C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    id v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_250DE4924(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_250E24D30();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_250E25150();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_250DE4924(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_250E24D00();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_250DA21A0(void *a1)
{
  return sub_250DA2A34(a1) & 1;
}

unint64_t sub_250DA21C0()
{
  unint64_t result = qword_269B03850;
  if (!qword_269B03850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03850);
  }
  return result;
}

unint64_t sub_250DA2218()
{
  unint64_t result = qword_269B03858;
  if (!qword_269B03858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03858);
  }
  return result;
}

unint64_t sub_250DA2270()
{
  unint64_t result = qword_269B03860;
  if (!qword_269B03860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03860);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlatformSpecificAppBundleProvider(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BalanceURLBuilder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DA2430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder()
{
  return &type metadata for BalanceURLBuilder;
}

unsigned char *storeEnumTagSinglePayload for BalanceURLBuilder.Route(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DA2534);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.Route()
{
  return &type metadata for BalanceURLBuilder.Route;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.Source(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BalanceURLBuilder.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DA26CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.Source()
{
  return &type metadata for BalanceURLBuilder.Source;
}

unsigned char *storeEnumTagSinglePayload for BalanceURLBuilder.RoutingKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DA27D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_250DA27F8(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.RoutingKey()
{
  return &type metadata for BalanceURLBuilder.RoutingKey;
}

uint64_t sub_250DA2810(uint64_t a1)
{
  sub_250DA286C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_250DA286C()
{
  if (!qword_269B03870)
  {
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03870);
    }
  }
}

uint64_t sub_250DA28C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_250DA291C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_250DA2954()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_250DA2964(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250DA29C8()
{
  if (!qword_269B03880)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03880);
    }
  }
}

uint64_t sub_250DA2A34(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_250E25400() & 1;
  }
}

void sub_250DA2A8C()
{
  if (!qword_269B03800)
  {
    sub_250D9B9A8();
    unint64_t v0 = sub_250E24540();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03800);
    }
  }
}

uint64_t sub_250DA2AE8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_250DA2964(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_250DA2B70(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void *)(v24 + 72);
      sub_250DA3804(a3 + v16 + v13 * v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      char v17 = a1(v12);
      if (v3)
      {
        sub_250DA386C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        sub_250DA3758((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_250DBA24C(0, *(void *)(v15 + 16) + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_250DBA24C(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        *(void *)(v15 + 16) = v19 + 1;
        uint64_t result = sub_250DA3758(v23, v15 + v16 + v19 * v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_250DA386C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.settingsProvider.getter()
{
  return swift_retain();
}

uint64_t SleepingSampleSummaryDemoDatasetManager.__allocating_init(settingsProvider:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t static SleepingSampleSummaryDemoDatasetManager.demoDaySummaries(in:now:watchFeatureCapabilities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v25 = a1;
  uint64_t v30 = a4;
  uint64_t v26 = sub_250E24710();
  uint64_t v6 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E24B20();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E248B0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = *a3;
  uint64_t v20 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v18, v20, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v27, v26);
  v21(v16, (uint64_t)v18, v12);
  sub_250E24AC0();
  uint64_t v34 = &unk_2701E5D88;
  uint64_t v35 = v11;
  uint64_t v36 = v19;
  uint64_t v37 = v18;
  uint64_t v22 = sub_250DA34D0((uint64_t)&unk_2701E5D88, (void (*)(uint64_t, double, double, double, double, double))sub_250DA32A0, (uint64_t)v33);
  uint64_t v32 = v25;
  uint64_t v23 = sub_250DA2B70((uint64_t (*)(char *))sub_250DA366C, (uint64_t)v31, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  *uint64_t v30 = v23;
  return result;
}

uint64_t sub_250DA3100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X8>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t)@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  uint64_t v20 = sub_250E24B20();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(a2 + 16) - 1;
  BOOL v26 = __OFSUB__(v25, a1);
  uint64_t v27 = v25 - a1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = -v27;
    if (!__OFSUB__(0, v27))
    {
      sub_250E24AF0();
      static SleepingSampleDaySummary.relativeComparisons(on:heart:spO2:rr:wtr:asleep:calendar:hasBaseline:)((uint64_t)v24, a6, 0, COERCE_DOUBLE((a3 << 63 >> 63) & *(void *)&a8), (a3 & 1) == 0, a7, 0, COERCE_DOUBLE(*(void *)&a9 & (a3 << 62 >> 63)), a5, (a3 & 2) == 0, a10, 0, a4, 1u);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_250DA32A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  return sub_250DA3100(a1, *(void *)(v7 + 16), *(void *)(v7 + 32), *(char **)(v7 + 40), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_250DA32AC(uint64_t a1, uint64_t a2)
{
  sub_250D8CEA0();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_250E24B20();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DA37BC((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  char v11 = sub_250E24BA0();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_250DA3804(a2, (uint64_t)v6, (uint64_t (*)(void))sub_250D8CEA0);
  if (v11) {
    char v12 = sub_250E24BB0();
  }
  else {
    char v12 = 0;
  }
  sub_250DA386C((uint64_t)v6, (uint64_t (*)(void))sub_250D8CEA0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12 & 1;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.deinit()
{
  swift_release();
  return v0;
}

uint64_t sub_250DA34D0(uint64_t a1, void (*a2)(uint64_t, double, double, double, double, double), uint64_t a3)
{
  unint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v4 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x263F8EE78];
  sub_250DBA24C(0, 0, 0);
  uint64_t v8 = v18;
  uint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v15 = a1;
  if (v9)
  {
    uint64_t v10 = 0;
    char v11 = (double *)(a1 + 64);
    do
    {
      v16(v10, *(v11 - 4), *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
      uint64_t v18 = v8;
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_250DBA24C(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v18;
      }
      ++v10;
      *(void *)(v8 + 16) = v13 + 1;
      sub_250DA3758((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13);
      v11 += 5;
    }
    while (v9 != v10);
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_250DA366C(uint64_t a1)
{
  return sub_250DA32AC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t method lookup function for SleepingSampleSummaryDemoDatasetManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleSummaryDemoDatasetManager);
}

uint64_t dispatch thunk of SleepingSampleSummaryDemoDatasetManager.__allocating_init(settingsProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_250DA36B8()
{
  return sub_250DA37BC(&qword_26B206D80, (void (*)(uint64_t))sub_250DA3700);
}

void sub_250DA3700()
{
  if (!qword_26B206D78)
  {
    type metadata accessor for SleepingSampleDaySummary();
    unint64_t v0 = sub_250E24E30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B206D78);
    }
  }
}

uint64_t sub_250DA3758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleDaySummary();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DA37BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DA3804(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DA386C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Bool __swiftcall _HKBehavior.supportsBalanceWidgetFeatureStatus()()
{
  return objc_msgSend(v0, sel_isAppleWatch);
}

uint64_t WarmupProgress.count.getter()
{
  return *(void *)v0;
}

uint64_t WarmupProgress.count.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*WarmupProgress.count.modify())()
{
  return nullsub_1;
}

uint64_t WarmupProgress.requiredCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t WarmupProgress.requiredCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*WarmupProgress.requiredCount.modify())()
{
  return nullsub_1;
}

BOOL WarmupProgress.isComplete.getter()
{
  return *v0 >= v0[1];
}

HealthBalance::WarmupProgress __swiftcall WarmupProgress.init(count:requiredCount:)(Swift::Int count, Swift::Int requiredCount)
{
  *uint64_t v2 = count;
  v2[1] = requiredCount;
  result.requiredCount = requiredCount;
  result.count = count;
  return result;
}

BOOL static WarmupProgress.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_250DA3980(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_250DA3998()
{
  return sub_250E254F0();
}

uint64_t sub_250DA39E0()
{
  return sub_250E254C0();
}

uint64_t sub_250DA3A0C()
{
  return sub_250E254F0();
}

uint64_t sub_250DA3A50()
{
  if (*v0) {
    return 0x6465726975716572;
  }
  else {
    return 0x746E756F63;
  }
}

uint64_t sub_250DA3A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DA4210(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DA3ABC()
{
  return 0;
}

void sub_250DA3AC8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_250DA3AD4(uint64_t a1)
{
  unint64_t v2 = sub_250DA3CCC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA3B10(uint64_t a1)
{
  unint64_t v2 = sub_250DA3CCC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t WarmupProgress.encode(to:)(void *a1)
{
  sub_250DA3ED0(0, &qword_269B03888, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v10 - v7;
  v10[1] = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DA3CCC();
  sub_250E25510();
  char v12 = 0;
  sub_250E253A0();
  if (!v2)
  {
    char v11 = 1;
    sub_250E253A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_250DA3CCC()
{
  unint64_t result = qword_269B03890;
  if (!qword_269B03890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03890);
  }
  return result;
}

uint64_t WarmupProgress.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_250DA3ED0(0, &qword_269B03898, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DA3CCC();
  sub_250E25500();
  if (!v2)
  {
    char v15 = 0;
    uint64_t v10 = sub_250E25320();
    char v14 = 1;
    uint64_t v12 = sub_250E25320();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_250DA3ED0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DA3CCC();
    unint64_t v7 = a3(a1, &type metadata for WarmupProgress.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

BOOL sub_250DA3F34(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_250DA3F4C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return WarmupProgress.init(from:)(a1, a2);
}

uint64_t sub_250DA3F64(void *a1)
{
  return WarmupProgress.encode(to:)(a1);
}

HealthBalance::WarmupProgress __swiftcall WarmupProgress.init(daysRemaining:requiredCount:)(Swift::Int daysRemaining, Swift::Int requiredCount)
{
  if (__OFSUB__(requiredCount, daysRemaining))
  {
    __break(1u);
  }
  else
  {
    *uint64_t v2 = (requiredCount - daysRemaining) & ~((requiredCount - daysRemaining) >> 63);
    v2[1] = requiredCount;
  }
  result.requiredCount = requiredCount;
  result.count = daysRemaining;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WarmupProgress(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WarmupProgress(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgress()
{
  return &type metadata for WarmupProgress;
}

unsigned char *storeEnumTagSinglePayload for WarmupProgress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DA40C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_250DA40EC(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgress.CodingKeys()
{
  return &type metadata for WarmupProgress.CodingKeys;
}

unint64_t sub_250DA410C()
{
  unint64_t result = qword_269B038A0;
  if (!qword_269B038A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038A0);
  }
  return result;
}

unint64_t sub_250DA4164()
{
  unint64_t result = qword_269B038A8;
  if (!qword_269B038A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038A8);
  }
  return result;
}

unint64_t sub_250DA41BC()
{
  unint64_t result = qword_269B038B0;
  if (!qword_269B038B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038B0);
  }
  return result;
}

uint64_t sub_250DA4210(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xED0000746E756F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

HKQuantity __swiftcall HKQuantity.init(celsius:)(Swift::Double celsius)
{
  return (HKQuantity)sub_250DA4588((SEL *)&selRef_degreeCelsiusUnit, celsius);
}

HKQuantity __swiftcall HKQuantity.init(celsiusChange:)(Swift::Double celsiusChange)
{
  return (HKQuantity)sub_250DA4588((SEL *)&selRef__changeInDegreeCelsiusUnit, celsiusChange);
}

HKQuantity __swiftcall HKQuantity.init(duration:)(Swift::tuple_hour_Int_minute_Int duration)
{
  Swift::Int minute = duration.minute;
  Swift::Int hour = duration.hour;
  result.super.Class isa = (Class)objc_msgSend(self, sel_minuteUnit);
  uint64_t v4 = 60 * hour;
  if ((unsigned __int128)(hour * (__int128)60) >> 64 == (60 * hour) >> 63)
  {
    BOOL v5 = __OFADD__(v4, minute);
    uint64_t v6 = v4 + minute;
    if (!v5)
    {
      Class isa = result.super.isa;
      id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, result.super.isa, (double)v6);

      return (HKQuantity)v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

HKQuantity __swiftcall HKQuantity.init(duration:)(Swift::tuple_hour_Int_minute_Int_second_Int duration)
{
  Swift::Int second = duration.second;
  Swift::Int minute = duration.minute;
  Swift::Int hour = duration.hour;
  result.super.Class isa = (Class)objc_msgSend(self, sel_secondUnit);
  if ((unsigned __int128)(hour * (__int128)60) >> 64 != (60 * hour) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = 3600 * hour;
  if ((unsigned __int128)(60 * hour * (__int128)60) >> 64 != (3600 * hour) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = 60 * minute;
  if ((unsigned __int128)(minute * (__int128)60) >> 64 != (60 * minute) >> 63)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  BOOL v7 = __OFADD__(v8, second);
  uint64_t v9 = v8 + second;
  if (!v7)
  {
    Class isa = result.super.isa;
    id v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, result.super.isa, (double)v9);

    return (HKQuantity)v11;
  }
LABEL_11:
  __break(1u);
  return result;
}

HKQuantity __swiftcall HKQuantity.init(percent:)(Swift::Double percent)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(self, sel_percentUnit);
  id v4 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v3, percent / 100.0);

  return (HKQuantity)v4;
}

HKQuantity __swiftcall HKQuantity.init(perMinute:)(Swift::Double perMinute)
{
  return (HKQuantity)sub_250DA4588((SEL *)&selRef__countPerMinuteUnit, perMinute);
}

HKQuantity __swiftcall HKQuantity.init(perSecond:)(Swift::Double perSecond)
{
  return (HKQuantity)sub_250DA4588((SEL *)&selRef__countPerSecondUnit, perSecond);
}

HKQuantity __swiftcall HKQuantity.init(s:)(Swift::Double s)
{
  return (HKQuantity)sub_250DA4588((SEL *)&selRef_secondUnit, s);
}

id sub_250DA4588(SEL *a1, double a2)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v5 = [self *a1];
  id v6 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v5, a2);

  return v6;
}

uint64_t SleepingSampleBaseline.middle.getter()
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);

  return sub_250E249B0();
}

uint64_t SleepingSampleBaseline.medialRange.getter()
{
  return sub_250E249B0();
}

uint64_t SleepingSampleBaseline.iqr.getter()
{
  return sub_250E249B0();
}

uint64_t SleepingSampleBaseline.iqrMedialRange.getter()
{
  return sub_250E249B0();
}

uint64_t SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v19 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a2, sel_containsQuantity_, a1))
  {
    sub_250D98B48(0, (unint64_t *)&qword_26B208158);
    id v13 = a1;
    sub_250E249E0();
    sub_250D98B48(0, (unint64_t *)&qword_26B207F08);
    id v14 = a2;
    sub_250E249E0();
    id v15 = a3;
    sub_250E249E0();
    sub_250E249E0();

    sub_250DA495C((uint64_t)v12, a5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a5, 0, 1, v10);
  }
  else
  {

    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    return v17(a5, 1, 1, v10);
  }
}

uint64_t sub_250DA495C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SleepingSampleBaseline.median.getter()
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);

  return sub_250E249B0();
}

uint64_t SleepingSampleBaseline.hash(into:)()
{
  return sub_250E24B70();
}

unint64_t sub_250DA4AFC()
{
  unint64_t result = qword_269B038B8;
  if (!qword_269B038B8)
  {
    sub_250D98938(255, &qword_26B208150, (unint64_t *)&qword_26B208158);
    sub_250DA4C74(&qword_269B038C0, (unint64_t *)&qword_26B208158);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038B8);
  }
  return result;
}

unint64_t sub_250DA4BB8()
{
  unint64_t result = qword_269B038C8;
  if (!qword_269B038C8)
  {
    sub_250D98938(255, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    sub_250DA4C74(&qword_269B038D0, (unint64_t *)&qword_26B207F08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038C8);
  }
  return result;
}

uint64_t sub_250DA4C74(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D98B48(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static SleepingSampleBaseline.== infix(_:_:)()
{
  sub_250D98B48(0, (unint64_t *)&qword_26B208158);
  sub_250DA4C74(&qword_269B038D8, (unint64_t *)&qword_26B208158);
  if ((sub_250E249C0() & 1) == 0) {
    return 0;
  }
  type metadata accessor for SleepingSampleBaseline();
  sub_250D98B48(0, (unint64_t *)&qword_26B207F08);
  sub_250DA4C74(&qword_269B038E0, (unint64_t *)&qword_26B207F08);
  if ((sub_250E249C0() & 1) == 0 || (sub_250E249C0() & 1) == 0) {
    return 0;
  }

  return sub_250E249C0();
}

BOOL sub_250DA4E44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_250DA4E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DA60DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_250DA4E90(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_250DA4E9C(uint64_t a1)
{
  unint64_t v2 = sub_250D90510();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA4ED8(uint64_t a1)
{
  unint64_t v2 = sub_250D90510();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleBaseline.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250DA5024()
{
  return sub_250E254F0();
}

uint64_t sub_250DA512C()
{
  return sub_250E24B70();
}

uint64_t sub_250DA521C()
{
  return sub_250E254F0();
}

uint64_t sub_250DA5320()
{
  sub_250D98B48(0, (unint64_t *)&qword_26B208158);
  sub_250DA4C74(&qword_269B038D8, (unint64_t *)&qword_26B208158);
  if ((sub_250E249C0() & 1) == 0) {
    return 0;
  }
  sub_250D98B48(0, (unint64_t *)&qword_26B207F08);
  sub_250DA4C74(&qword_269B038E0, (unint64_t *)&qword_26B207F08);
  if ((sub_250E249C0() & 1) == 0 || (sub_250E249C0() & 1) == 0) {
    return 0;
  }

  return sub_250E249C0();
}

unint64_t SleepingSampleBaseline.description.getter()
{
  sub_250E250E0();
  swift_bridgeObjectRelease();
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v0 = (void *)sub_250E249B0();
  sub_250E21E90();

  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  type metadata accessor for SleepingSampleBaseline();
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v1 = (void *)sub_250E249B0();
  sub_250DF094C();

  sub_250E24C80();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  unint64_t v2 = (void *)sub_250E249B0();
  sub_250E21E90();

  sub_250E24CE0();
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

unint64_t sub_250DA5668()
{
  unint64_t result = qword_269B038E8;
  if (!qword_269B038E8)
  {
    type metadata accessor for SleepingSampleBaseline();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038E8);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleBaseline(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
    uint64_t v8 = v7;
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v17 = &a1[v10];
    uint64_t v11 = &a2[v10];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v13 = v12;
    id v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v14(v17, v11, v12);
    v9(&a1[a3[6]], &a2[a3[6]], v8);
    v14(&a1[a3[7]], &a2[a3[7]], v13);
  }
  return a1;
}

uint64_t assignWithCopy for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v15 = a1 + v9;
  uint64_t v10 = a2 + v9;
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24);
  v13(v15, v10, v11);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v13(a1 + a3[7], a2 + a3[7], v12);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v15 = a1 + v9;
  uint64_t v10 = a2 + v9;
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v13(v15, v10, v11);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v13(a1 + a3[7], a2 + a3[7], v12);
  return a1;
}

uint64_t assignWithTake for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v15 = a1 + v9;
  uint64_t v10 = a2 + v9;
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40);
  v13(v15, v10, v11);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v13(a1 + a3[7], a2 + a3[7], v12);
  return a1;
}

uint64_t sub_250DA5C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_250DA5D6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_250DA5EA0()
{
  sub_250D98938(319, &qword_26B208150, (unint64_t *)&qword_26B208158);
  if (v0 <= 0x3F)
  {
    sub_250D98938(319, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleBaseline.CodingKeys()
{
  return &type metadata for SleepingSampleBaseline.CodingKeys;
}

unint64_t sub_250DA5FD8()
{
  unint64_t result = qword_269B038F0;
  if (!qword_269B038F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B038F0);
  }
  return result;
}

unint64_t sub_250DA6030()
{
  unint64_t result = qword_26B207F78;
  if (!qword_26B207F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F78);
  }
  return result;
}

unint64_t sub_250DA6088()
{
  unint64_t result = qword_26B207F70;
  if (!qword_26B207F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F70);
  }
  return result;
}

uint64_t sub_250DA60DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7257656C6464696DLL && a2 == 0xED00007265707061;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000250E2CB50 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7070617257727169 && a2 == 0xEA00000000007265 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000250E2CB70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t SleepingSampleBaselineComparison.aggregate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250D90EE0(v1, a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleBaselineComparison.aggregate.setter(uint64_t a1)
{
  return sub_250DA63D8(a1, v1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t (*SleepingSampleBaselineComparison.aggregate.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.availability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_250D90EE0(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
}

uint64_t SleepingSampleBaselineComparison.availability.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_250DA63D8(a1, v1 + *(int *)(v3 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
}

uint64_t sub_250DA63D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*SleepingSampleBaselineComparison.availability.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.baseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_250DA64DC(v1 + *(int *)(v3 + 24), a1, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
}

uint64_t sub_250DA64DC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_250D979D8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t SleepingSampleBaselineComparison.baseline.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleBaselineComparison() + 24);

  return sub_250D93768(a1, v3);
}

uint64_t (*SleepingSampleBaselineComparison.baseline.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.relativeComparison.getter()
{
  uint64_t v1 = v0;
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v39 - v3;
  uint64_t v5 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SleepingSampleAggregate();
  sub_250D90EE0(v1 + *(int *)(v12 + 24), (uint64_t)v11, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v13) == 1)
  {
    sub_250D91F38((uint64_t)v11, (uint64_t (*)(void))sub_250D91EB4);
LABEL_9:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  unint64_t v16 = (void *)sub_250E249B0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v14);
  uint64_t v17 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_250DA64DC(v1 + *(int *)(v17 + 24), (uint64_t)v4, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {

    sub_250DA6B34((uint64_t)v4);
    goto LABEL_9;
  }
  sub_250D90B0C((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
  uint64_t v18 = (void *)sub_250E249B0();
  id v19 = objc_msgSend(v16, sel__unit);
  objc_msgSend(v18, sel_doubleValueForUnit_, v19);
  double v21 = v20;

  uint64_t v22 = (void *)sub_250E249B0();
  id v23 = objc_msgSend(v16, sel_compare_, v22);

  if (v23 == (id)-1)
  {
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v31 = (void *)sub_250E249B0();
    id v32 = objc_msgSend(v31, sel_minimum);

    id v33 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v32, sel_doubleValueForUnit_, v33);
    double v35 = v34;

    double v29 = v21 - v35;
    if (v21 - v35 == 0.0) {
      goto LABEL_8;
    }
LABEL_11:
    id v36 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v16, sel_doubleValueForUnit_, v36);
    double v38 = v37;

    sub_250D91F38((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    *(double *)&uint64_t result = (v38 - v21) / v29;
    return result;
  }
  if (v23 == (id)1)
  {
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v24 = (void *)sub_250E249B0();
    id v25 = objc_msgSend(v24, sel_maximum);

    id v26 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v25, sel_doubleValueForUnit_, v26);
    double v28 = v27;

    double v29 = v28 - v21;
    if (v28 - v21 == 0.0)
    {
LABEL_8:
      sub_250D91F38((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);

      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (v23)
  {
    type metadata accessor for ComparisonResult(0);
    v39[1] = v23;
    *(double *)&uint64_t result = COERCE_DOUBLE(sub_250E25430());
    __break(1u);
  }
  else
  {
    sub_250D91F38((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);

    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t sub_250DA6B34(uint64_t a1)
{
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SleepingSampleBaselineComparison.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SleepingSampleBaselineComparison.init(aggregate:availability:baseline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v9 = a4 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_250D90B0C(a1, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250D90B0C(a2, a4 + *(int *)(v8 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);

  return sub_250D93768(a3, v9);
}

uint64_t SleepingSampleBaselineComparison.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v41 = (uint64_t)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v48 = (uint64_t)&v39 - v5;
  uint64_t v6 = sub_250E24710();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v45 = (uint64_t)&v39 - v9;
  uint64_t v10 = sub_250E243F0();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  MEMORY[0x270FA5388](v10);
  unint64_t v39 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v39 - v13;
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v19 = (char *)&v39 - v18;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24B20();
  sub_250D91C3C(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  id v23 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_250E248B0();
  sub_250D91C3C(&qword_269B03900, MEMORY[0x263F07920]);
  sub_250E24B70();
  sub_250D90EE0(v0 + v23[6], (uint64_t)v22, (uint64_t (*)(void))sub_250D91EB4);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v42 = v16;
  if (v24(v22, 1, v16) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v25 = v42;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v22, v42);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v25);
  }
  sub_250DA64DC(v0 + v23[7], (uint64_t)v14, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
  uint64_t v27 = v43;
  uint64_t v26 = v44;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, v44);
  uint64_t v30 = v46;
  uint64_t v29 = v47;
  if (v28 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v31 = v39;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v39, v14, v26);
    sub_250E254D0();
    sub_250D91C3C(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
  }
  uint64_t v32 = v50;
  uint64_t v33 = v45;
  sub_250DA64DC(v1 + v23[8], v45, &qword_26B207DD8, MEMORY[0x263F07490]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v33, 1, v29) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    double v34 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v40, v33, v29);
    sub_250E254D0();
    sub_250D91C3C(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v29);
  }
  sub_250E254C0();
  uint64_t v35 = type metadata accessor for SleepingSampleBaselineComparison();
  SleepingSampleBaselineAvailability.hash(into:)();
  uint64_t v36 = v48;
  sub_250DA64DC(v1 + *(int *)(v35 + 24), v48, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v36, 1, v32) == 1) {
    return sub_250E254D0();
  }
  uint64_t v38 = v41;
  sub_250D90B0C(v36, v41, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
  sub_250E254D0();
  sub_250DA4AFC();
  sub_250E24B70();
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  sub_250DA4BB8();
  sub_250E24B70();
  sub_250E24B70();
  sub_250E24B70();
  return sub_250D91F38(v38, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
}

uint64_t sub_250DA7588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DAC904(a1, a2);
  *a3 = result;
  return result;
}

void sub_250DA75B0(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_250DA75BC(uint64_t a1)
{
  unint64_t v2 = sub_250D90E8C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA75F8(uint64_t a1)
{
  unint64_t v2 = sub_250D90E8C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleBaselineComparison.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250DA7674()
{
  return sub_250E254F0();
}

uint64_t sub_250DA76B8()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleBaselineComparison.description.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v18 - v6;
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  sub_250E250E0();
  sub_250E24CE0();
  sub_250E24CE0();
  SleepingSampleAggregate.description.getter();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineComparison();
  type metadata accessor for SleepingSampleBaselineAvailability();
  sub_250E251F0();
  sub_250E24CE0();
  sub_250DA64DC(v0 + *(int *)(v14 + 24), (uint64_t)v13, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  sub_250DA64DC((uint64_t)v13, (uint64_t)v11, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1) != 1)
  {
    sub_250D90B0C((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250D90EE0((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250E24C80();
    sub_250D91F38((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
  }
  sub_250DA6B34((uint64_t)v13);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  uint64_t v15 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v16 & 1) == 0)
  {
    v18[1] = v15;
    sub_250E24C80();
  }
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  return v19;
}

uint64_t SleepingSampleBaselineComparison.Classification.init(baselineComparison:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v4)
  {
    char v5 = 3;
  }
  else if (HKCompareDoubles() == -1)
  {
    char v5 = 1;
  }
  else
  {
    char v5 = 2 * (HKCompareDoubles() != 1);
  }
  uint64_t result = sub_250D91F38(a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  *a2 = v5;
  return result;
}

HealthBalance::SleepingSampleBaselineComparison::Classification __swiftcall SleepingSampleBaselineComparison.Classification.init(relativeComparison:)(Swift::Double relativeComparison)
{
  uint64_t v2 = v1;
  uint64_t v3 = HKCompareDoubles();
  if (v3 == -1)
  {
    char v4 = 1;
  }
  else
  {
    uint64_t v3 = HKCompareDoubles();
    char v4 = 2 * (v3 != 1);
  }
  *uint64_t v2 = v4;
  return (char)v3;
}

double static SleepingSampleBaselineComparison.relativeMedialRange.getter()
{
  return -1.0;
}

BOOL SleepingSampleBaselineComparison.Classification.isOutOfRange.getter()
{
  return *v0 < 2u;
}

BOOL static SleepingSampleBaselineComparison.Classification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleBaselineComparison.Classification.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t sub_250DA7C1C()
{
  uint64_t result = 1751607656;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7827308;
      break;
    case 2:
      uint64_t result = 0x6C616369707974;
      break;
    case 3:
      uint64_t result = 0x616C696176616E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250DA7CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DACA80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DA7CCC(uint64_t a1)
{
  unint64_t v2 = sub_250DA9C00();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA7D08(uint64_t a1)
{
  unint64_t v2 = sub_250DA9C00();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DA7D44()
{
  return 0;
}

void sub_250DA7D50(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_250DA7D5C(uint64_t a1)
{
  unint64_t v2 = sub_250DA9BAC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA7D98(uint64_t a1)
{
  unint64_t v2 = sub_250DA9BAC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DA7DD4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_250DA7E04(uint64_t a1)
{
  unint64_t v2 = sub_250DA9B58();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA7E40(uint64_t a1)
{
  unint64_t v2 = sub_250DA9B58();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DA7E7C(uint64_t a1)
{
  unint64_t v2 = sub_250DA9B04();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA7EB8(uint64_t a1)
{
  unint64_t v2 = sub_250DA9B04();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DA7EF4(uint64_t a1)
{
  unint64_t v2 = sub_250DA9AB0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DA7F30(uint64_t a1)
{
  unint64_t v2 = sub_250DA9AB0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleBaselineComparison.Classification.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250D90E24(0, &qword_269B03918, (uint64_t (*)(void))sub_250DA9AB0, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v31 = (char *)&v22 - v5;
  sub_250D90E24(0, &qword_269B03928, (uint64_t (*)(void))sub_250DA9B04, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys, v3);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x270FA5388](v6);
  int v28 = (char *)&v22 - v7;
  sub_250D90E24(0, &qword_269B03938, (uint64_t (*)(void))sub_250DA9B58, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys, v3);
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v25 = (char *)&v22 - v9;
  sub_250D90E24(0, &qword_269B03948, (uint64_t (*)(void))sub_250DA9BAC, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys, v3);
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - v11;
  sub_250D90E24(0, &qword_269B03958, (uint64_t (*)(void))sub_250DA9C00, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys, v3);
  uint64_t v14 = v13;
  uint64_t v34 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v22 - v15;
  uint64_t v17 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DA9C00();
  sub_250E25510();
  switch(v17)
  {
    case 1:
      char v36 = 1;
      sub_250DA9B58();
      uint64_t v18 = v25;
      sub_250E25350();
      uint64_t v20 = v26;
      uint64_t v19 = v27;
      goto LABEL_6;
    case 2:
      char v37 = 2;
      sub_250DA9B04();
      uint64_t v18 = v28;
      sub_250E25350();
      uint64_t v20 = v29;
      uint64_t v19 = v30;
      goto LABEL_6;
    case 3:
      char v38 = 3;
      sub_250DA9AB0();
      uint64_t v18 = v31;
      sub_250E25350();
      uint64_t v20 = v32;
      uint64_t v19 = v33;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
      break;
    default:
      char v35 = 0;
      sub_250DA9BAC();
      sub_250E25350();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v14);
}

uint64_t SleepingSampleBaselineComparison.Classification.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleBaselineComparison.Classification.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250D90E24(0, &qword_269B03968, (uint64_t (*)(void))sub_250DA9AB0, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v46 = v4;
  uint64_t v38 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (char *)&v34 - v5;
  sub_250D90E24(0, &qword_269B03970, (uint64_t (*)(void))sub_250DA9B04, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys, v3);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v34 - v7;
  sub_250D90E24(0, &qword_269B03978, (uint64_t (*)(void))sub_250DA9B58, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys, v3);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v34 - v9;
  sub_250D90E24(0, &qword_269B03980, (uint64_t (*)(void))sub_250DA9BAC, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys, v3);
  uint64_t v11 = v10;
  uint64_t v35 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  sub_250D90E24(0, &qword_269B03988, (uint64_t (*)(void))sub_250DA9C00, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys, v3);
  uint64_t v15 = v14;
  uint64_t v44 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v34 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DA9C00();
  uint64_t v18 = v47;
  sub_250E25500();
  if (v18) {
    goto LABEL_10;
  }
  uint64_t v19 = v13;
  uint64_t v47 = v11;
  uint64_t v20 = v45;
  uint64_t v21 = v46;
  uint64_t v22 = v17;
  uint64_t v23 = sub_250E25340();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v25 = sub_250E25130();
    swift_allocError();
    uint64_t v27 = v26;
    sub_250DA9C54();
    *uint64_t v27 = &type metadata for SleepingSampleBaselineComparison.Classification;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v15);
LABEL_10:
    uint64_t v29 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v29);
  }
  switch(*(unsigned char *)(v23 + 32))
  {
    case 1:
      char v24 = *(unsigned char *)(v23 + 32);
      char v49 = 1;
      sub_250DA9B58();
      int v28 = v42;
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v37);
      goto LABEL_7;
    case 2:
      char v31 = *(unsigned char *)(v23 + 32);
      char v50 = 2;
      sub_250DA9B04();
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v15);
      uint64_t v29 = (uint64_t)a1;
      uint64_t v30 = v43;
      char v24 = v31;
      break;
    case 3:
      uint64_t v47 = *(unsigned __int8 *)(v23 + 32);
      char v51 = 3;
      sub_250DA9AB0();
      uint64_t v32 = v41;
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v15);
      uint64_t v29 = (uint64_t)a1;
      uint64_t v30 = v43;
      char v24 = v47;
      break;
    default:
      char v24 = *(unsigned char *)(v23 + 32);
      char v48 = 0;
      sub_250DA9BAC();
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v47);
LABEL_7:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v15);
      uint64_t v29 = (uint64_t)a1;
      uint64_t v30 = v43;
      break;
  }
  *uint64_t v30 = v24;
  return __swift_destroy_boxed_opaque_existential_1(v29);
}

uint64_t sub_250DA8BC0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return SleepingSampleBaselineComparison.Classification.init(from:)(a1, a2);
}

uint64_t sub_250DA8BD8(void *a1)
{
  return SleepingSampleBaselineComparison.Classification.encode(to:)(a1);
}

uint64_t SleepingSampleBaselineComparison.classification.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D90EE0(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v7)
  {
    char v8 = 3;
  }
  else if (HKCompareDoubles() == -1)
  {
    char v8 = 1;
  }
  else
  {
    char v8 = 2 * (HKCompareDoubles() != 1);
  }
  uint64_t result = sub_250D91F38((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  *a1 = v8;
  return result;
}

BOOL SleepingSampleBaselineComparison.isOutOfRange.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D90EE0(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v5) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = HKCompareDoubles() == -1 || HKCompareDoubles() == 1;
  }
  sub_250D91F38((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v6;
}

BOOL SleepingSampleBaselineComparison.hasRelativeComparison.getter()
{
  SleepingSampleBaselineComparison.relativeComparison.getter();
  return (v0 & 1) == 0;
}

uint64_t SleepingSampleBaselineComparison.isWarmupDay.getter()
{
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v9 - v2;
  unsigned int v4 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 36));
  if (v4 < 3) {
    return 0;
  }
  if (v4 == 3) {
    return 1;
  }
  uint64_t v6 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_250DA64DC(v0 + *(int *)(v6 + 24), (uint64_t)v3, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v7 = type metadata accessor for SleepingSampleBaseline();
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v3, 1, v7) == 1;
  sub_250DA6B34((uint64_t)v3);
  return v5;
}

BOOL SleepingSampleBaselineComparison.hasData.getter()
{
  sub_250D91EB4();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SleepingSampleAggregate();
  sub_250D90EE0(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v5);
  if (v8 == 1)
  {
    sub_250D91F38((uint64_t)v3, (uint64_t (*)(void))sub_250D91EB4);
  }
  else
  {
    uint64_t v9 = (void *)sub_250E249B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  return v8 != 1;
}

uint64_t SleepingSampleBaselineComparison.warmupDaysRequired.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_250D90EE0(v0 + *(int *)(v4 + 20), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250DA9D04();
      uint64_t v7 = *(uint64_t *)((char *)v3 + *(int *)(v6 + 64));
      sub_250D91F38((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
    }
    else
    {
      sub_250D91F38((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
      uint64_t v7 = 6;
    }
  }
  else
  {
    uint64_t v7 = *v3;
  }
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleBaselineComparison.warmupDaysRemaining.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (uint64_t *)((char *)&v18 - v5);
  BOOL v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 36)) < 3u;
  uint64_t v8 = v0 + *(int *)(type metadata accessor for SleepingSampleBaselineComparison() + 20);
  sub_250D90EE0(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250DA9D04();
      uint64_t v11 = *(uint64_t *)((char *)v6 + *(int *)(v10 + 64));
      sub_250D91F38((uint64_t)v6, (uint64_t (*)(void))sub_250D97944);
    }
    else
    {
      sub_250D91F38((uint64_t)v6, (uint64_t (*)(void))sub_250D97944);
      uint64_t v11 = 6;
    }
  }
  else
  {
    uint64_t v11 = *v6;
  }
  sub_250D90EE0(v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1) {
      sub_250DA9D04();
    }
    else {
      sub_250D96CC4();
    }
    uint64_t v14 = *(void *)&v4[*(int *)(v13 + 48)];
    uint64_t result = sub_250D91F38((uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v11 - v14;
  if (__OFSUB__(v11, v14))
  {
    __break(1u);
  }
  else
  {
    BOOL v16 = __OFADD__(v15, v7);
    uint64_t v17 = v15 + v7;
    if (!v16) {
      return v17 & ~(v17 >> 63);
    }
  }
  __break(1u);
  return result;
}

BOOL SleepingSampleBaselineComparison.isInRefinement.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D90EE0(v1 + *(int *)(v3 + 28), (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload == 1) {
    sub_250DA9D04();
  }
  else {
    sub_250D96CC4();
  }
  uint64_t v11 = *(void *)&v8[*(int *)(v10 + 48)];
  sub_250D91F38((uint64_t)v8, (uint64_t (*)(void))sub_250D97944);
  if (v11 < 6)
  {
LABEL_6:
    sub_250D90EE0(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_9:
    BOOL v12 = 0;
    goto LABEL_10;
  }
  sub_250D90EE0(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  if ((unint64_t)v11 > 0x13) {
    goto LABEL_9;
  }
  BOOL v12 = SleepingSampleBaselineComparison.warmupDaysRemaining.getter() == 0;
LABEL_10:
  sub_250D91F38((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v12;
}

uint64_t _s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DACC34();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v29 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v29 - v19;
  if (!static SleepingSampleAggregate.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v30 = v15;
  uint64_t v21 = type metadata accessor for SleepingSampleBaselineComparison();
  if ((_s13HealthBalance34SleepingSampleBaselineAvailabilityO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v21 + 20), a2 + *(int *)(v21 + 20)) & 1) == 0)return 0; {
  uint64_t v29 = v7;
  }
  sub_250DA64DC(a1 + *(int *)(v21 + 24), (uint64_t)v20, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  sub_250DA64DC(a2 + *(int *)(v21 + 24), (uint64_t)v18, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v22 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_250DA64DC((uint64_t)v20, (uint64_t)v11, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  sub_250DA64DC((uint64_t)v18, v22, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v11, 1, v4) == 1)
  {
    sub_250DA6B34((uint64_t)v18);
    sub_250DA6B34((uint64_t)v20);
    if (v23(v22, 1, v4) == 1)
    {
      sub_250DA6B34((uint64_t)v11);
      return 1;
    }
    goto LABEL_8;
  }
  uint64_t v25 = (uint64_t)v30;
  sub_250DA64DC((uint64_t)v11, (uint64_t)v30, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if (v23(v22, 1, v4) == 1)
  {
    sub_250DA6B34((uint64_t)v18);
    sub_250DA6B34((uint64_t)v20);
    sub_250D91F38(v25, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_8:
    sub_250D91F38((uint64_t)v11, (uint64_t (*)(void))sub_250DACC34);
    return 0;
  }
  uint64_t v26 = (uint64_t)v29;
  sub_250D90B0C(v22, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
  sub_250D98B48(0, (unint64_t *)&qword_26B208158);
  uint64_t v27 = v26;
  sub_250DA4C74(&qword_269B038D8, (unint64_t *)&qword_26B208158);
  if ((sub_250E249C0() & 1) != 0
    && (sub_250D98B48(0, (unint64_t *)&qword_26B207F08),
        sub_250DA4C74(&qword_269B038E0, (unint64_t *)&qword_26B207F08),
        uint64_t v27 = (uint64_t)v29,
        (sub_250E249C0() & 1) != 0)
    && (sub_250E249C0() & 1) != 0)
  {
    char v28 = sub_250E249C0();
    sub_250D91F38(v27, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250DA6B34((uint64_t)v18);
    sub_250DA6B34((uint64_t)v20);
    sub_250D91F38(v25, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250DA6B34((uint64_t)v11);
    if (v28) {
      return 1;
    }
  }
  else
  {
    sub_250D91F38(v27, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250DA6B34((uint64_t)v18);
    sub_250DA6B34((uint64_t)v20);
    sub_250D91F38(v25, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250DA6B34((uint64_t)v11);
  }
  return 0;
}

unint64_t sub_250DA9AB0()
{
  unint64_t result = qword_269B03920;
  if (!qword_269B03920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03920);
  }
  return result;
}

unint64_t sub_250DA9B04()
{
  unint64_t result = qword_269B03930;
  if (!qword_269B03930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03930);
  }
  return result;
}

unint64_t sub_250DA9B58()
{
  unint64_t result = qword_269B03940;
  if (!qword_269B03940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03940);
  }
  return result;
}

unint64_t sub_250DA9BAC()
{
  unint64_t result = qword_269B03950;
  if (!qword_269B03950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03950);
  }
  return result;
}

unint64_t sub_250DA9C00()
{
  unint64_t result = qword_269B03960;
  if (!qword_269B03960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03960);
  }
  return result;
}

void sub_250DA9C54()
{
  if (!qword_269B03990)
  {
    sub_250DA9CC4();
    sub_250E25120();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03990);
    }
  }
}

unint64_t sub_250DA9CC4()
{
  unint64_t result = qword_269B03998;
  if (!qword_269B03998)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B03998);
  }
  return result;
}

void sub_250DA9D04()
{
  if (!qword_26B2075B8)
  {
    sub_250D97944();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_26B2075B8);
    }
  }
}

uint64_t sub_250DA9D74()
{
  return sub_250D91C3C(&qword_269B039A0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison);
}

unint64_t sub_250DA9DC0()
{
  unint64_t result = qword_26B2071F8;
  if (!qword_26B2071F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2071F8);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v57(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for SleepingSampleAggregate();
    uint64_t v9 = v8[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)(v16 - 8);
    uint64_t v54 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    {
      sub_250D91EB4();
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v14, v15, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    }
    uint64_t v21 = v8[7];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = sub_250E243F0();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v27 = v8[8];
    char v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    uint64_t v30 = sub_250E24710();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    a1[v8[9]] = a2[v8[9]];
    uint64_t v33 = *(int *)(a3 + 20);
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v57(v34, v35, v7);
      sub_250D97944();
      v57(&v34[*(int *)(v40 + 36)], &v35[*(int *)(v40 + 36)], v7);
      sub_250D96CC4();
      *(void *)&v34[*(int *)(v41 + 48)] = *(void *)&v35[*(int *)(v41 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v57(v34, v35, v7);
      sub_250D97944();
      v57(&v34[*(int *)(v38 + 36)], &v35[*(int *)(v38 + 36)], v7);
      sub_250DA9D04();
      *(void *)&v34[*(int *)(v39 + 48)] = *(void *)&v35[*(int *)(v39 + 48)];
      *(void *)&v34[*(int *)(v39 + 64)] = *(void *)&v35[*(int *)(v39 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    uint64_t v42 = *(int *)(a3 + 24);
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    uint64_t v45 = (int *)type metadata accessor for SleepingSampleBaseline();
    uint64_t v46 = *((void *)v45 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
    {
      sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v58(v43, v44, v17);
      uint64_t v48 = v45[5];
      uint64_t v55 = &v44[v48];
      int v56 = &v43[v48];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v50 = v49;
      uint64_t v51 = v17;
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
      v52(v56, v55, v49);
      v58(&v43[v45[6]], &v44[v45[6]], v51);
      v52(&v43[v45[7]], &v44[v45[7]], v50);
      (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_250E24B20();
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  (*(void (**)(uint64_t, uint64_t))(v71 + 24))(a1, a2);
  uint64_t v6 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v7 = v6[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = v6[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  uint64_t v69 = v16;
  uint64_t v70 = v15;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v12, v13, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v12, v13, v15);
LABEL_7:
  uint64_t v21 = v6[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_250E243F0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = v6[8];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = sub_250E24710();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_18:
    sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_19:
  *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
  if (a1 != a2)
  {
    uint64_t v39 = *(int *)(a3 + 20);
    uint64_t v40 = (char *)(a1 + v39);
    uint64_t v41 = (char *)(a2 + v39);
    sub_250D91F38(a1 + v39, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v42 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      v47(v40, v41, v73);
      sub_250D97944();
      v47(&v40[*(int *)(v48 + 36)], &v41[*(int *)(v48 + 36)], v73);
      sub_250D96CC4();
      *(void *)&v40[*(int *)(v49 + 48)] = *(void *)&v41[*(int *)(v49 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      v44(v40, v41, v73);
      sub_250D97944();
      v44(&v40[*(int *)(v45 + 36)], &v41[*(int *)(v45 + 36)], v73);
      sub_250DA9D04();
      *(void *)&v40[*(int *)(v46 + 48)] = *(void *)&v41[*(int *)(v46 + 48)];
      *(void *)&v40[*(int *)(v46 + 64)] = *(void *)&v41[*(int *)(v46 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
  }
  uint64_t v50 = *(int *)(a3 + 24);
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v54 = *((void *)v53 - 1);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v69 + 24);
      v64(v51, v52, v70);
      uint64_t v65 = v53[5];
      Swift::String v75 = &v52[v65];
      uint64_t v78 = &v51[v65];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v67 = v66;
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 24);
      v68(v78, v75, v66);
      v64(&v51[v53[6]], &v52[v53[6]], v70);
      v68(&v51[v53[7]], &v52[v53[7]], v67);
      return a1;
    }
    sub_250D91F38((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    goto LABEL_30;
  }
  if (v57)
  {
LABEL_30:
    sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v51, v52, *(void *)(*(void *)(v62 - 8) + 64));
    return a1;
  }
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v77(v51, v52, v70);
  uint64_t v58 = v53[5];
  uint64_t v72 = &v52[v58];
  id v74 = &v51[v58];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v60 = v59;
  unint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
  v61(v74, v72, v59);
  v77(&v51[v53[6]], &v52[v53[6]], v70);
  v61(&v51[v53[7]], &v52[v53[7]], v60);
  (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v52(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v16 = v15;
  uint64_t v54 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v14, 1, v15))
  {
    sub_250D91EB4();
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 32))(v13, v14, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v13, 0, 1, v16);
  }
  uint64_t v18 = v7[7];
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_250E243F0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = v7[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = sub_250E24710();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for SleepingSampleBaselineAvailability();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v52((uint64_t)v31, (uint64_t)v32, v6);
    sub_250D97944();
    v52((uint64_t)&v31[*(int *)(v37 + 36)], (uint64_t)&v32[*(int *)(v37 + 36)], v6);
    sub_250D96CC4();
    *(void *)&v31[*(int *)(v38 + 48)] = *(void *)&v32[*(int *)(v38 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v52((uint64_t)v31, (uint64_t)v32, v6);
    sub_250D97944();
    v52((uint64_t)&v31[*(int *)(v35 + 36)], (uint64_t)&v32[*(int *)(v35 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v31[*(int *)(v36 + 48)] = *(void *)&v32[*(int *)(v36 + 48)];
    *(void *)&v31[*(int *)(v36 + 64)] = *(void *)&v32[*(int *)(v36 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  uint64_t v39 = *(int *)(a3 + 24);
  uint64_t v40 = (char *)(a1 + v39);
  uint64_t v41 = (char *)(a2 + v39);
  uint64_t v42 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v43 = *((void *)v42 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v55(v40, v41, v16);
    uint64_t v45 = v42[5];
    uint64_t v51 = &v41[v45];
    uint64_t v53 = &v40[v45];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v47 = v46;
    uint64_t v48 = v16;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32);
    v49(v53, v51, v46);
    v55(&v40[v42[6]], &v41[v42[6]], v48);
    v49(&v40[v42[7]], &v41[v42[7]], v47);
    (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  }
  return a1;
}

uint64_t assignWithTake for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_250E24B20();
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v73 = v5;
  (*(void (**)(uint64_t, uint64_t))(v71 + 40))(a1, a2);
  uint64_t v6 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v7 = v6[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  uint64_t v69 = v16;
  uint64_t v70 = v15;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v12, v13, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v12, v13, v15);
LABEL_7:
  uint64_t v21 = v6[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_250E243F0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_250D979D8(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0]);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = v6[8];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = sub_250E24710();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_18:
    sub_250D979D8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
LABEL_19:
  *(unsigned char *)(a1 + v6[9]) = *(unsigned char *)(a2 + v6[9]);
  if (a1 != a2)
  {
    uint64_t v39 = *(int *)(a3 + 20);
    uint64_t v40 = (char *)(a1 + v39);
    uint64_t v41 = (char *)(a2 + v39);
    sub_250D91F38(a1 + v39, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v42 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      v47(v40, v41, v73);
      sub_250D97944();
      v47(&v40[*(int *)(v48 + 36)], &v41[*(int *)(v48 + 36)], v73);
      sub_250D96CC4();
      *(void *)&v40[*(int *)(v49 + 48)] = *(void *)&v41[*(int *)(v49 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      v44(v40, v41, v73);
      sub_250D97944();
      v44(&v40[*(int *)(v45 + 36)], &v41[*(int *)(v45 + 36)], v73);
      sub_250DA9D04();
      *(void *)&v40[*(int *)(v46 + 48)] = *(void *)&v41[*(int *)(v46 + 48)];
      *(void *)&v40[*(int *)(v46 + 64)] = *(void *)&v41[*(int *)(v46 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
  }
  uint64_t v50 = *(int *)(a3 + 24);
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v54 = *((void *)v53 - 1);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v69 + 40);
      v64(v51, v52, v70);
      uint64_t v65 = v53[5];
      Swift::String v75 = &v52[v65];
      uint64_t v78 = &v51[v65];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v67 = v66;
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 40);
      v68(v78, v75, v66);
      v64(&v51[v53[6]], &v52[v53[6]], v70);
      v68(&v51[v53[7]], &v52[v53[7]], v67);
      return a1;
    }
    sub_250D91F38((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    goto LABEL_30;
  }
  if (v57)
  {
LABEL_30:
    sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v51, v52, *(void *)(*(void *)(v62 - 8) + 64));
    return a1;
  }
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
  v77(v51, v52, v70);
  uint64_t v58 = v53[5];
  uint64_t v72 = &v52[v58];
  id v74 = &v51[v58];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v60 = v59;
  unint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32);
  v61(v74, v72, v59);
  v77(&v51[v53[6]], &v52[v53[6]], v70);
  v61(&v51[v53[7]], &v52[v53[7]], v60);
  (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DABE90);
}

uint64_t sub_250DABE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DAC00C);
}

uint64_t sub_250DAC00C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_250D979D8(0, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_250DAC180()
{
  type metadata accessor for SleepingSampleAggregate();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SleepingSampleBaselineAvailability();
    if (v1 <= 0x3F)
    {
      sub_250D979D8(319, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification;
}

unsigned char *_s13HealthBalance32SleepingSampleBaselineComparisonV14ClassificationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DAC384);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.HighCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.LowCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.CodingKeys;
}

unint64_t sub_250DAC438()
{
  unint64_t result = qword_269B039A8;
  if (!qword_269B039A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039A8);
  }
  return result;
}

unint64_t sub_250DAC490()
{
  unint64_t result = qword_269B039B0;
  if (!qword_269B039B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039B0);
  }
  return result;
}

unint64_t sub_250DAC4E8()
{
  unint64_t result = qword_269B039B8;
  if (!qword_269B039B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039B8);
  }
  return result;
}

unint64_t sub_250DAC540()
{
  unint64_t result = qword_269B039C0;
  if (!qword_269B039C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039C0);
  }
  return result;
}

unint64_t sub_250DAC598()
{
  unint64_t result = qword_269B039C8;
  if (!qword_269B039C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039C8);
  }
  return result;
}

unint64_t sub_250DAC5F0()
{
  unint64_t result = qword_269B039D0;
  if (!qword_269B039D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039D0);
  }
  return result;
}

unint64_t sub_250DAC648()
{
  unint64_t result = qword_269B039D8;
  if (!qword_269B039D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039D8);
  }
  return result;
}

unint64_t sub_250DAC6A0()
{
  unint64_t result = qword_269B039E0;
  if (!qword_269B039E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039E0);
  }
  return result;
}

unint64_t sub_250DAC6F8()
{
  unint64_t result = qword_269B039E8;
  if (!qword_269B039E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039E8);
  }
  return result;
}

unint64_t sub_250DAC750()
{
  unint64_t result = qword_269B039F0;
  if (!qword_269B039F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039F0);
  }
  return result;
}

unint64_t sub_250DAC7A8()
{
  unint64_t result = qword_269B039F8;
  if (!qword_269B039F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B039F8);
  }
  return result;
}

unint64_t sub_250DAC800()
{
  unint64_t result = qword_269B03A00;
  if (!qword_269B03A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A00);
  }
  return result;
}

unint64_t sub_250DAC858()
{
  unint64_t result = qword_26B208058;
  if (!qword_26B208058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208058);
  }
  return result;
}

unint64_t sub_250DAC8B0()
{
  unint64_t result = qword_26B208050;
  if (!qword_26B208050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208050);
  }
  return result;
}

uint64_t sub_250DAC904(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461676572676761 && a2 == 0xE900000000000065;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E696C65736162 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_250DACA80(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1751607656 && a2 == 0xE400000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7827308 && a2 == 0xE300000000000000 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616369707974 && a2 == 0xE700000000000000 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x616C696176616E75 && a2 == 0xEB00000000656C62)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void sub_250DACC34()
{
  if (!qword_269B03A08)
  {
    sub_250D979D8(255, &qword_26B207DF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03A08);
    }
  }
}

uint64_t TrainingLoadChronicBaseline.init(target:firstDayWithData:minConsecutiveDaysOfDataRequired:chronicBaselineCandidate:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v64 = a5;
  double v63 = a4;
  uint64_t v70 = a6;
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t v10 = MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (double *)((char *)&v55 - v13);
  sub_250D88890();
  uint64_t v15 = v14;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v55 - v18;
  sub_250D97944();
  uint64_t v68 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v67 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v69 = (uint64_t)&v55 - v23;
  sub_250DAD404();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_250E24B20();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v71 = (char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DAD6E8(a2, (uint64_t)v26, (uint64_t (*)(void))sub_250DAD404);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    sub_250DB01E8(a2, (uint64_t (*)(void))sub_250DAD404);
    (*(void (**)(char *, uint64_t))(v28 + 8))(a1, v27);
    sub_250DB01E8((uint64_t)v26, (uint64_t (*)(void))sub_250DAD404);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v65 = v15;
    uint64_t v60 = a2;
    uint64_t v61 = a3;
    int v56 = v12;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v31(v71, v26, v27);
    sub_250D94950((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    uint64_t result = sub_250E24BB0();
    if (result)
    {
      uint64_t v59 = ChronicBaseline;
      uint64_t v32 = v65;
      uint64_t v33 = v19;
      uint64_t v34 = &v19[*(int *)(v65 + 48)];
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
      v35(v33, v71, v27);
      int v57 = v34;
      uint64_t v58 = a1;
      v35(v34, a1, v27);
      uint64_t v36 = *(int *)(v32 + 48);
      int v37 = v31;
      uint64_t v38 = v66;
      uint64_t v39 = &v66[v36];
      v35(v66, v33, v27);
      v35(v39, v34, v27);
      uint64_t v40 = (uint64_t)v67;
      v37(v67, v38, v27);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v28 + 8);
      v41(v39, v27);
      uint64_t v42 = &v38[*(int *)(v65 + 48)];
      v37(v38, v33, v27);
      v37(v42, v57, v27);
      v37((char *)(v40 + *(int *)(v68 + 36)), v42, v27);
      uint64_t v66 = (char *)v41;
      v41(v38, v27);
      uint64_t v43 = v69;
      sub_250DAD45C(v40, v69, (uint64_t (*)(void))sub_250D97944);
      sub_250D94950(&qword_26B2075B0, MEMORY[0x263F090E8]);
      sub_250E24FF0();
      uint64_t v44 = v61;
      if (v72 >= v61)
      {
        sub_250DB01E8(v60, (uint64_t (*)(void))sub_250DAD404);
        uint64_t v52 = (void (*)(char *, uint64_t))v66;
        ((void (*)(char *, uint64_t))v66)(v58, v27);
        sub_250DB01E8(v43, (uint64_t (*)(void))sub_250D97944);
        v52(v71, v27);
        double v53 = v63;
        if (v64) {
          double v53 = 0.0;
        }
        uint64_t v54 = v62;
        double *v62 = v53;
        swift_storeEnumTagMultiPayload();
        uint64_t v51 = (uint64_t)v54;
      }
      else
      {
        sub_250DA9D04();
        uint64_t v46 = *(int *)(v45 + 48);
        uint64_t v47 = *(int *)(v45 + 64);
        uint64_t v48 = (uint64_t)v56;
        sub_250DAD6E8(v43, (uint64_t)v56, (uint64_t (*)(void))sub_250D97944);
        sub_250E24FF0();
        uint64_t v49 = v72;
        sub_250DB01E8(v60, (uint64_t (*)(void))sub_250DAD404);
        uint64_t v50 = (void (*)(char *, uint64_t))v66;
        ((void (*)(char *, uint64_t))v66)(v58, v27);
        sub_250DB01E8(v43, (uint64_t (*)(void))sub_250D97944);
        v50(v71, v27);
        *(void *)(v48 + v46) = v49;
        *(void *)(v48 + v47) = v44;
        swift_storeEnumTagMultiPayload();
        uint64_t v51 = v48;
      }
      return sub_250DAD45C(v51, v70, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for TrainingLoadChronicBaseline()
{
  uint64_t result = qword_26B2075F0;
  if (!qword_26B2075F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250DAD404()
{
  if (!qword_26B207080)
  {
    sub_250E24B20();
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B207080);
    }
  }
}

uint64_t sub_250DAD45C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t TrainingLoadChronicBaseline.hash(into:)()
{
  uint64_t v1 = v0;
  sub_250D97944();
  MEMORY[0x270FA5388](v2);
  unsigned int v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DAD6E8(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250E254C0();
      return sub_250E254E0();
    }
    else
    {
      return sub_250E254C0();
    }
  }
  else
  {
    sub_250DA9D04();
    sub_250DAD45C((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
    sub_250E254C0();
    sub_250E24B20();
    sub_250D94950(&qword_269B038F8, MEMORY[0x263F090E8]);
    sub_250E24B70();
    sub_250E24B70();
    sub_250E254C0();
    sub_250E254C0();
    return sub_250DB01E8((uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
  }
}

uint64_t sub_250DAD6E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DAD754()
{
  return 1;
}

uint64_t sub_250DAD75C()
{
  return sub_250E254F0();
}

uint64_t sub_250DAD7A0()
{
  return sub_250E254C0();
}

uint64_t sub_250DAD7C8()
{
  return sub_250E254F0();
}

uint64_t sub_250DAD808()
{
  return 0x656E696C65736162;
}

uint64_t sub_250DAD820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656E696C65736162 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_250E25400();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250DAD8B8(uint64_t a1)
{
  unint64_t v2 = sub_250DAF08C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DAD8F4(uint64_t a1)
{
  unint64_t v2 = sub_250DAF08C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DAD930(uint64_t a1)
{
  unint64_t v2 = sub_250DAF188();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DAD96C(uint64_t a1)
{
  unint64_t v2 = sub_250DAF188();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DAD9A8()
{
  uint64_t v1 = 0x746E756F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465726975716572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64657A796C616E61;
  }
}

uint64_t sub_250DADA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DB0010(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DADA34(uint64_t a1)
{
  unint64_t v2 = sub_250DAF0E0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DADA70(uint64_t a1)
{
  unint64_t v2 = sub_250DAF0E0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DADAAC(uint64_t a1)
{
  unint64_t v2 = sub_250DAF134();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DADAE8(uint64_t a1)
{
  unint64_t v2 = sub_250DAF134();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TrainingLoadChronicBaseline.encode(to:)(void *a1)
{
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250DAF1DC(0, &qword_26B2070A8, (uint64_t (*)(void))sub_250DAF08C, (uint64_t)&type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v36 = v3;
  uint64_t v31 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v35 = (char *)&v31 - v4;
  sub_250DAF1DC(0, &qword_26B2070B0, (uint64_t (*)(void))sub_250DAF0E0, (uint64_t)&type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys, v2);
  uint64_t v37 = v5;
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v31 - v6;
  sub_250D97944();
  uint64_t v34 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v38 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DAF1DC(0, &qword_26B2070A0, (uint64_t (*)(void))sub_250DAF134, (uint64_t)&type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys, v2);
  uint64_t v10 = v9;
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DAF1DC(0, &qword_26B207098, (uint64_t (*)(void))sub_250DAF188, (uint64_t)&type metadata for TrainingLoadChronicBaseline.CodingKeys, v2);
  uint64_t v40 = *(void *)(v16 - 8);
  uint64_t v41 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v31 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DAF188();
  sub_250E25510();
  sub_250DAD6E8(v43, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      char v49 = 2;
      sub_250DAF08C();
      uint64_t v20 = v35;
      uint64_t v21 = v41;
      sub_250E25350();
      uint64_t v22 = v36;
      sub_250E25390();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v22);
    }
    else
    {
      char v44 = 0;
      sub_250DAF134();
      uint64_t v21 = v41;
      sub_250E25350();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v18, v21);
  }
  else
  {
    sub_250DA9D04();
    uint64_t v25 = *(void *)&v15[*(int *)(v24 + 64)];
    sub_250DAD45C((uint64_t)v15, v38, (uint64_t (*)(void))sub_250D97944);
    char v48 = 1;
    sub_250DAF0E0();
    uint64_t v26 = v41;
    sub_250E25350();
    char v47 = 0;
    sub_250D8F440(&qword_26B206D88, &qword_26B206D70);
    uint64_t v27 = v37;
    uint64_t v28 = v42;
    sub_250E253B0();
    if (v28)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v27);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v43 = v25;
      uint64_t v30 = v38;
      char v46 = 1;
      sub_250E253A0();
      char v45 = 2;
      sub_250E253A0();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v27);
      uint64_t v29 = v30;
    }
    sub_250DB01E8(v29, (uint64_t (*)(void))sub_250D97944);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v18, v26);
  }
}

uint64_t TrainingLoadChronicBaseline.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t TrainingLoadChronicBaseline.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250DAF1DC(0, &qword_26B207010, (uint64_t (*)(void))sub_250DAF08C, (uint64_t)&type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v64 = v4;
  uint64_t v59 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v69 = (char *)&v55 - v5;
  sub_250DAF1DC(0, &qword_26B207018, (uint64_t (*)(void))sub_250DAF0E0, (uint64_t)&type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys, v3);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v68 = (char *)&v55 - v7;
  sub_250DAF1DC(0, &qword_26B207008, (uint64_t (*)(void))sub_250DAF134, (uint64_t)&type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys, v3);
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v55 - v9;
  sub_250DAF1DC(0, &qword_26B207000, (uint64_t (*)(void))sub_250DAF188, (uint64_t)&type metadata for TrainingLoadChronicBaseline.CodingKeys, v3);
  uint64_t v11 = v10;
  uint64_t v66 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t v15 = MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v55 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = a1[3];
  uint64_t v70 = (uint64_t)a1;
  uint64_t v24 = a1;
  uint64_t v25 = v13;
  __swift_project_boxed_opaque_existential_1(v24, v23);
  sub_250DAF188();
  uint64_t v26 = v71;
  sub_250E25500();
  if (v26) {
    goto LABEL_9;
  }
  int v56 = v17;
  int v57 = v20;
  uint64_t v28 = v67;
  uint64_t v27 = v68;
  uint64_t v29 = v69;
  uint64_t v58 = v22;
  uint64_t v71 = ChronicBaseline;
  uint64_t v30 = sub_250E25340();
  uint64_t v31 = (char *)v30;
  uint64_t v32 = v11;
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v34 = sub_250E25130();
    swift_allocError();
    uint64_t v36 = v35;
    sub_250DA9C54();
    uint64_t *v36 = v71;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x263F8DCB0], v34);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v11);
LABEL_9:
    uint64_t v39 = v70;
    return __swift_destroy_boxed_opaque_existential_1(v39);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v76 = 1;
      sub_250DAF0E0();
      sub_250E252C0();
      sub_250D97944();
      char v75 = 0;
      sub_250D8F440((unint64_t *)&unk_26B2078E0, &qword_26B2075E8);
      uint64_t v33 = v61;
      sub_250E25330();
      char v74 = 1;
      uint64_t v41 = v27;
      uint64_t v46 = sub_250E25320();
      uint64_t v67 = v31;
      uint64_t v69 = v25;
      sub_250DA9D04();
      uint64_t v48 = v47;
      uint64_t v49 = (uint64_t)v57;
      *(void *)&v57[*(int *)(v47 + 48)] = v46;
      char v73 = 2;
      uint64_t v50 = sub_250E25320();
      uint64_t v51 = v66;
      uint64_t v52 = v50;
      uint64_t v53 = *(int *)(v48 + 64);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v69, v32);
      *(void *)(v49 + v53) = v52;
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = v49;
    }
    else
    {
      char v77 = 2;
      sub_250DAF08C();
      sub_250E252C0();
      uint64_t v38 = v64;
      sub_250E25310();
      uint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v11);
      char v44 = v56;
      *int v56 = v43;
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = (uint64_t)v44;
    }
    uint64_t v37 = (uint64_t)v58;
    sub_250DAD45C(v54, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  }
  else
  {
    char v72 = 0;
    sub_250DAF134();
    sub_250E252C0();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v28, v63);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v11);
    uint64_t v37 = (uint64_t)v58;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = v70;
  sub_250DAD45C(v37, v65, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  uint64_t v39 = v45;
  return __swift_destroy_boxed_opaque_existential_1(v39);
}

uint64_t sub_250DAEB18()
{
  return sub_250E254F0();
}

uint64_t sub_250DAEB5C()
{
  return sub_250E254F0();
}

uint64_t sub_250DAEB98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadChronicBaseline.init(from:)(a1, a2);
}

uint64_t sub_250DAEBB0(void *a1)
{
  return TrainingLoadChronicBaseline.encode(to:)(a1);
}

uint64_t _s13HealthBalance27TrainingLoadChronicBaselineO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = (char *)a2;
  sub_250D97944();
  uint64_t v4 = v3;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v42 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t v14 = MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v16 = (double *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v46 = (uint64_t)&v42 - v17;
  sub_250DB0184();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (double *)&v21[*(int *)(v19 + 56)];
  sub_250DAD6E8(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  sub_250DAD6E8((uint64_t)v47, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250DAD6E8((uint64_t)v21, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v24 = *v16 == *v22;
        uint64_t v25 = (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline;
        goto LABEL_10;
      }
    }
    else
    {
      int v32 = swift_getEnumCaseMultiPayload();
      uint64_t v25 = (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline;
      if (v32 == 2)
      {
        uint64_t v24 = 1;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v24 = 0;
    uint64_t v25 = (uint64_t (*)(void))sub_250DB0184;
    goto LABEL_10;
  }
  uint64_t v45 = v4;
  uint64_t v47 = v7;
  uint64_t v26 = v46;
  sub_250DAD6E8((uint64_t)v21, v46, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  sub_250DA9D04();
  uint64_t v28 = *(int *)(v27 + 48);
  uint64_t v29 = *(void *)(v26 + v28);
  uint64_t v30 = *(int *)(v27 + 64);
  uint64_t v31 = *(void *)(v26 + v30);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_250DB01E8(v26, (uint64_t (*)(void))sub_250D97944);
    goto LABEL_9;
  }
  uint64_t v43 = v29;
  uint64_t v44 = v31;
  uint64_t v42 = *(void *)((char *)v22 + v28);
  uint64_t v34 = *(void *)((char *)v22 + v30);
  sub_250DAD45C((uint64_t)v22, (uint64_t)v12, (uint64_t (*)(void))sub_250D97944);
  sub_250E24B20();
  sub_250D94950(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v35 = sub_250E24BF0();
  uint64_t v36 = (uint64_t)v10;
  sub_250DAD6E8(v46, (uint64_t)v10, (uint64_t (*)(void))sub_250D97944);
  uint64_t v37 = (uint64_t)v12;
  uint64_t v38 = (uint64_t)v47;
  uint64_t v39 = (uint64_t)v12;
  uint64_t v40 = v46;
  sub_250DAD6E8(v37, (uint64_t)v47, (uint64_t (*)(void))sub_250D97944);
  if (v35)
  {
    unsigned __int8 v41 = sub_250E24BF0();
    sub_250DB01E8(v38, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v36, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v39, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v40, (uint64_t (*)(void))sub_250D97944);
    if (v44 == v34) {
      uint64_t v24 = v41 & (v43 == v42);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline;
  }
  else
  {
    sub_250DB01E8(v38, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v36, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v39, (uint64_t (*)(void))sub_250D97944);
    sub_250DB01E8(v40, (uint64_t (*)(void))sub_250D97944);
    uint64_t v24 = 0;
    uint64_t v25 = (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline;
  }
LABEL_10:
  sub_250DB01E8((uint64_t)v21, v25);
  return v24;
}

unint64_t sub_250DAF08C()
{
  unint64_t result = qword_26B207518;
  if (!qword_26B207518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207518);
  }
  return result;
}

unint64_t sub_250DAF0E0()
{
  unint64_t result = qword_26B207530;
  if (!qword_26B207530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207530);
  }
  return result;
}

unint64_t sub_250DAF134()
{
  unint64_t result = qword_26B207500;
  if (!qword_26B207500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207500);
  }
  return result;
}

unint64_t sub_250DAF188()
{
  unint64_t result = qword_26B2074E8;
  if (!qword_26B2074E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074E8);
  }
  return result;
}

void sub_250DAF1DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_250DAF244()
{
  return sub_250D94950(&qword_269B03A10, (void (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadChronicBaseline(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_250E24B20();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_250D97944();
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 36)), (uint64_t *)((char *)a2 + *(int *)(v10 + 36)), v8);
      sub_250DA9D04();
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 64));
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for TrainingLoadChronicBaseline(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = sub_250E24B20();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    sub_250D97944();
    uint64_t v5 = a1 + *(int *)(v4 + 36);
    return v6(v5, v3);
  }
  return result;
}

char *initializeWithCopy for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    sub_250D97944();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    sub_250DA9D04();
    *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
    *(void *)&a1[*(int *)(v9 + 64)] = *(void *)&a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250DB01E8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_250E24B20();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      sub_250D97944();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      sub_250DA9D04();
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      *(void *)&a1[*(int *)(v9 + 64)] = *(void *)&a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    sub_250D97944();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    sub_250DA9D04();
    *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
    *(void *)&a1[*(int *)(v9 + 64)] = *(void *)&a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250DB01E8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_250E24B20();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      sub_250D97944();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      sub_250DA9D04();
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      *(void *)&a1[*(int *)(v9 + 64)] = *(void *)&a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineAvailability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_250DAF934()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_250DAF944()
{
  sub_250D97944();
  if (v0 <= 0x3F)
  {
    uint64_t v1 = MEMORY[0x263F8CF70] + 64;
    swift_getTupleTypeLayout3();
    v2[4] = v2;
    v2[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.CodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.CodingKeys;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.NoDataCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys;
}

unsigned char *_s13HealthBalance27TrainingLoadChronicBaselineO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DAFAE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.InsufficientDataCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys;
}

uint64_t getEnumTagSinglePayload for TrainingLoadChronicBaseline.AvailableCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadChronicBaseline.AvailableCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DAFC08);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250DAFC30()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.AvailableCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys;
}

unint64_t sub_250DAFC4C()
{
  unint64_t result = qword_269B03A18;
  if (!qword_269B03A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A18);
  }
  return result;
}

unint64_t sub_250DAFCA4()
{
  unint64_t result = qword_269B03A20;
  if (!qword_269B03A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A20);
  }
  return result;
}

unint64_t sub_250DAFCFC()
{
  unint64_t result = qword_269B03A28;
  if (!qword_269B03A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A28);
  }
  return result;
}

unint64_t sub_250DAFD54()
{
  unint64_t result = qword_26B2074F8;
  if (!qword_26B2074F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074F8);
  }
  return result;
}

unint64_t sub_250DAFDAC()
{
  unint64_t result = qword_26B2074F0;
  if (!qword_26B2074F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074F0);
  }
  return result;
}

unint64_t sub_250DAFE04()
{
  unint64_t result = qword_26B207510;
  if (!qword_26B207510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207510);
  }
  return result;
}

unint64_t sub_250DAFE5C()
{
  unint64_t result = qword_26B207508;
  if (!qword_26B207508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207508);
  }
  return result;
}

unint64_t sub_250DAFEB4()
{
  unint64_t result = qword_26B207540;
  if (!qword_26B207540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207540);
  }
  return result;
}

unint64_t sub_250DAFF0C()
{
  unint64_t result = qword_26B207538;
  if (!qword_26B207538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207538);
  }
  return result;
}

unint64_t sub_250DAFF64()
{
  unint64_t result = qword_26B207528;
  if (!qword_26B207528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207528);
  }
  return result;
}

unint64_t sub_250DAFFBC()
{
  unint64_t result = qword_26B207520;
  if (!qword_26B207520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207520);
  }
  return result;
}

uint64_t sub_250DB0010(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657A796C616E61 && a2 == 0xED000065676E6152;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void sub_250DB0184()
{
  if (!qword_269B03A30)
  {
    type metadata accessor for TrainingLoadChronicBaseline();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03A30);
    }
  }
}

uint64_t sub_250DB01E8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250DB0248(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC00000065746144;
  unint64_t v3 = 0x64657A796C616E61;
  uint64_t v4 = a1;
  unint64_t v5 = 0x64657A796C616E61;
  unint64_t v6 = 0xEC00000065746144;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x8000000250E2C5B0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000019;
      uint64_t v7 = "notifiableOutOfRangeCount";
      goto LABEL_7;
    case 3:
      unint64_t v5 = 0xD000000000000022;
      uint64_t v7 = "outOfRangeNotificationLastSentDate";
      goto LABEL_7;
    case 4:
      unint64_t v5 = 0xD000000000000027;
      uint64_t v7 = "firstDayAfterWarmupNotificationSentDate";
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0xD00000000000001DLL;
      uint64_t v7 = "dismissedByHighlightAlertDate";
LABEL_7:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x8000000250E2C5B0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000019;
      uint64_t v8 = "notifiableOutOfRangeCount";
      goto LABEL_14;
    case 3:
      unint64_t v3 = 0xD000000000000022;
      uint64_t v8 = "outOfRangeNotificationLastSentDate";
      goto LABEL_14;
    case 4:
      unint64_t v3 = 0xD000000000000027;
      uint64_t v8 = "firstDayAfterWarmupNotificationSentDate";
      goto LABEL_14;
    case 5:
      unint64_t v3 = 0xD00000000000001DLL;
      uint64_t v8 = "dismissedByHighlightAlertDate";
LABEL_14:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = sub_250E25400();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_250DB0428(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000024;
  unint64_t v3 = 0x8000000250E2C670;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000029;
    }
    else {
      unint64_t v5 = 0xD00000000000002BLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000250E2C6A0;
    }
    else {
      unint64_t v6 = 0x8000000250E2C6D0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000024;
  unint64_t v6 = 0x8000000250E2C670;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD000000000000029;
    }
    else {
      unint64_t v2 = 0xD00000000000002BLL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x8000000250E2C6A0;
    }
    else {
      unint64_t v3 = 0x8000000250E2C6D0;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_250E25400();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_250DB0528(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC0000007865646ELL;
  uint64_t v3 = 0x49676E696E726F6DLL;
  uint64_t v4 = a1;
  uint64_t v5 = 0x49676E696E726F6DLL;
  unint64_t v6 = 0xEC0000007865646ELL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x656E696C65736162;
      unint64_t v6 = 0xED000065676E6152;
      break;
    case 2:
      uint64_t v5 = 0x7974697669746361;
      uint64_t v7 = 1701869908;
      goto LABEL_6;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1684955490;
      break;
    case 4:
      uint64_t v5 = 0x676E696E69617274;
      uint64_t v7 = 1684107084;
LABEL_6:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xED000065676E6152;
      if (v5 == 0x656E696C65736162) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 2:
      uint64_t v8 = 0x7974697669746361;
      uint64_t v9 = 1701869908;
      goto LABEL_15;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1684955490;
      goto LABEL_12;
    case 4:
      uint64_t v8 = 0x676E696E69617274;
      uint64_t v9 = 1684107084;
LABEL_15:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v5 == v8) {
        goto LABEL_16;
      }
      goto LABEL_18;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_18;
      }
LABEL_16:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_18:
      }
        char v10 = sub_250E25400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_250DB0720(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1852141679;
    }
    else {
      uint64_t v3 = 0x7373696D736964;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1852141679;
      }
      else {
        uint64_t v6 = 0x7373696D736964;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1684956531;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1684956531)
  {
LABEL_21:
    char v8 = sub_250E25400();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_250DB081C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6C65636E6163;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6C65636E6163;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1954047342;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1885956979;
      break;
    case 3:
      uint64_t v5 = 0x6E4F6E727574;
      break;
    case 4:
      uint64_t v5 = 0x646577656976;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1954047342) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1885956979) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x6E4F6E727574;
      goto LABEL_12;
    case 4:
      if (v5 != 0x646577656976) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_250E25400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_250DB09A0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6163696669746F4ELL;
    }
    else {
      uint64_t v3 = 0x7065656C53;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xED0000736E6F6974;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6163696669746F4ELL;
      }
      else {
        uint64_t v6 = 0x7065656C53;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xED0000736E6F6974;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x656D6F636C6557;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x656D6F636C6557)
  {
LABEL_21:
    char v8 = sub_250E25400();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_250DB0ACC()
{
  unint64_t v0 = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_250E25400();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_250DB0B64(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x7974697669746361;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7974697669746361;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x7373656E746966;
      break;
    case 2:
      unint64_t v5 = 0x704168746C616568;
      goto LABEL_7;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      uint64_t v6 = "healthAppNotification";
      goto LABEL_11;
    case 4:
      unint64_t v5 = 0x747465536F6E616ELL;
      unint64_t v3 = 0xEC00000073676E69;
      break;
    case 5:
      unint64_t v5 = 0x65656C536F6E616ELL;
LABEL_7:
      unint64_t v3 = 0xE900000000000070;
      break;
    case 6:
      unint64_t v5 = 0x7070416863746177;
      break;
    case 7:
      unint64_t v3 = 0x8000000250E2C4B0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 8:
      unint64_t v5 = 0xD000000000000019;
      uint64_t v6 = "watchLongLookNotification";
LABEL_11:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 9:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x746567646977;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE700000000000000;
      if (v5 == 0x7373656E746966) {
        goto LABEL_30;
      }
      goto LABEL_33;
    case 2:
      uint64_t v8 = 0x704168746C616568;
      goto LABEL_21;
    case 3:
      unint64_t v2 = 0xD000000000000015;
      uint64_t v9 = "healthAppNotification";
      goto LABEL_28;
    case 4:
      unint64_t v7 = 0xEC00000073676E69;
      if (v5 != 0x747465536F6E616ELL) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 5:
      uint64_t v8 = 0x65656C536F6E616ELL;
LABEL_21:
      unint64_t v7 = 0xE900000000000070;
      if (v5 != v8) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 6:
      if (v5 != 0x7070416863746177) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 7:
      unint64_t v7 = 0x8000000250E2C4B0;
      if (v5 != 0xD000000000000010) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 8:
      unint64_t v2 = 0xD000000000000019;
      uint64_t v9 = "watchLongLookNotification";
LABEL_28:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      goto LABEL_29;
    case 9:
      unint64_t v7 = 0xE600000000000000;
      if (v5 != 0x746567646977) {
        goto LABEL_33;
      }
      goto LABEL_30;
    default:
LABEL_29:
      if (v5 != v2) {
        goto LABEL_33;
      }
LABEL_30:
      if (v3 == v7) {
        char v10 = 1;
      }
      else {
LABEL_33:
      }
        char v10 = sub_250E25400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_250DB0E88(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x8000000250E2C410;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x5265636E616C6162;
      unint64_t v3 = 0xEB000000006D6F6FLL;
      break;
    case 2:
      unint64_t v5 = 0x7961446E65766573;
      unint64_t v3 = 0xEF7363697274654DLL;
      break;
    case 3:
      unint64_t v5 = 0x654D796144656E6FLL;
      unint64_t v3 = 0xED00007363697274;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x8000000250E2C410;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEB000000006D6F6FLL;
      if (v5 == 0x5265636E616C6162) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x7961446E65766573;
      unint64_t v6 = 0xEF7363697274654DLL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xED00007363697274;
      if (v5 == 0x654D796144656E6FLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_250E25400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_250DB1054(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x6574756F72;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6574756F72;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x656372756F73;
      break;
    case 2:
      unint64_t v5 = 0x6144746567726174;
      unint64_t v3 = 0xE900000000000079;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v3 = 0x8000000250E2C520;
      break;
    case 4:
      unint64_t v3 = 0x8000000250E2C540;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 5:
      unint64_t v5 = 0x6163696669746F6ELL;
      unint64_t v3 = 0xEE0044496E6F6974;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x656372756F73) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE900000000000079;
      if (v5 != 0x6144746567726174) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0x8000000250E2C520;
      if (v5 != 0xD000000000000015) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0x8000000250E2C540;
      unint64_t v2 = 0xD000000000000013;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEE0044496E6F6974;
      if (v5 != 0x6163696669746F6ELL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_250E25400();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t TrainingLoadSampleDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t TrainingLoadSampleDaySummary.morningIndex.setter(uint64_t a1)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*TrainingLoadSampleDaySummary.morningIndex.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.baselineRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_250DB383C(v1 + *(int *)(SampleDaySummary + 20), a1, (uint64_t (*)(void))sub_250D97944);
}

uint64_t type metadata accessor for TrainingLoadSampleDaySummary()
{
  uint64_t result = qword_26B207698;
  if (!qword_26B207698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TrainingLoadSampleDaySummary.baselineRange.setter(uint64_t a1)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_250DB16A4(a1, v1 + *(int *)(SampleDaySummary + 20), (uint64_t (*)(void))sub_250D97944);
}

uint64_t (*TrainingLoadSampleDaySummary.baselineRange.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.activityType.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TrainingLoadSampleDaySummary() + 24));
}

uint64_t TrainingLoadSampleDaySummary.activityType.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummary.activityType.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.band.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for TrainingLoadSampleDaySummary();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t TrainingLoadSampleDaySummary.band.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for TrainingLoadSampleDaySummary();
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummary.band.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.trainingLoad.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_250DB383C(v1 + *(int *)(SampleDaySummary + 32), a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t TrainingLoadSampleDaySummary.trainingLoad.setter(uint64_t a1)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_250DB16A4(a1, v1 + *(int *)(SampleDaySummary + 32), (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t sub_250DB16A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*TrainingLoadSampleDaySummary.trainingLoad.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.init(morningIndex:baselineRange:trainingLoad:activityType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v12 = a6 + SampleDaySummary[6];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = SampleDaySummary[7];
  *(unsigned char *)(a6 + v13) = 5;
  uint64_t v14 = sub_250E24B20();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a6, a1, v14);
  sub_250DB383C(a2, a6 + SampleDaySummary[5], (uint64_t (*)(void))sub_250D97944);
  sub_250DB383C(a3, a6 + SampleDaySummary[8], (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  uint64_t v16 = a3 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 24);
  if (*(unsigned char *)(v16 + 8))
  {
    sub_250DB38A4(a3, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
    sub_250DB38A4(a2, (uint64_t (*)(void))sub_250D97944);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    char v18 = 5;
  }
  else
  {
    TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(*(Swift::Double *)v16);
    sub_250DB38A4(a3, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
    sub_250DB38A4(a2, (uint64_t (*)(void))sub_250D97944);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    char v18 = v20;
  }
  *(unsigned char *)(a6 + v13) = v18;
  *(void *)uint64_t v12 = a4;
  *(unsigned char *)(v12 + 8) = a5 & 1;
  return result;
}

uint64_t static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, char *a8@<X8>, double a9@<D0>, unsigned __int8 a10)
{
  uint64_t v64 = a7;
  LODWORD(v63) = a6;
  uint64_t v62 = a5;
  uint64_t v69 = a1;
  uint64_t v70 = a3;
  char v73 = a8;
  sub_250D97944();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_250E24B20();
  uint64_t v71 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v19 = MEMORY[0x270FA5388](BaselineComparison);
  uint64_t v68 = (uint64_t)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v72 = (uint64_t)&v60 - v21;
  uint64_t ChronicBaseline = (void (*)(char *, char *, uint64_t))type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t v22 = MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (uint64_t *)((char *)&v60 - v25);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  uint64_t v31 = MEMORY[0x270FA5388](AcuteBaseline - 8);
  uint64_t v33 = (char *)&v60 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v60 - v35;
  MEMORY[0x270FA5388](v34);
  uint64_t v74 = (uint64_t)&v60 - v37;
  id v38 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, a2, a9);
  uint64_t v67 = BaselineComparison;
  if (v38)
  {
    uint64_t v39 = v38;
    sub_250DB2068();
    id v40 = v39;
    sub_250E249E0();
    sub_250D922D0(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v29, 0, 1, v41);
  }
  else
  {
    sub_250D922D0(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v29, 1, 1, v42);
  }
  sub_250D91D14((uint64_t)v29, (uint64_t)v36, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91D14((uint64_t)v36, v74, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
  uint64_t v43 = v17;
  if (a4)
  {
    if (v63)
    {
      sub_250DA9D04();
      uint64_t v45 = *(int *)(v44 + 48);
      uint64_t v46 = *(int *)(v44 + 64);
      sub_250DB383C(v70, (uint64_t)v26, (uint64_t (*)(void))sub_250D97944);
      *(void *)((char *)v26 + v45) = sub_250E24B00();
      *(void *)((char *)v26 + v46) = 28;
    }
    else
    {
      *uint64_t v26 = v62;
    }
  }
  LODWORD(v62) = a10;
  swift_storeEnumTagMultiPayload();
  sub_250DB383C(v74, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
  uint64_t v63 = (uint64_t)v26;
  sub_250DB383C((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  uint64_t v47 = v72;
  TrainingLoadBaselineComparison.init(acuteBaseline:chronicBaseline:)((uint64_t)v33, (uint64_t)v24, v72);
  uint64_t ChronicBaseline = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  ChronicBaseline(v17, v69, v15);
  uint64_t v48 = v66;
  sub_250DB383C(v70, v66, (uint64_t (*)(void))sub_250D97944);
  uint64_t v49 = v68;
  sub_250DB383C(v47, v68, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  uint64_t SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v51 = v73;
  uint64_t v52 = &v73[SampleDaySummary[6]];
  *(void *)uint64_t v52 = 0;
  v52[8] = 1;
  uint64_t v61 = SampleDaySummary[7];
  v51[v61] = 5;
  uint64_t v69 = v43;
  uint64_t v70 = v15;
  ChronicBaseline(v51, v43, v15);
  sub_250DB383C(v48, (uint64_t)&v51[SampleDaySummary[5]], (uint64_t (*)(void))sub_250D97944);
  sub_250DB383C(v49, (uint64_t)&v51[SampleDaySummary[8]], (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  uint64_t v53 = v49 + *(int *)(v67 + 24);
  if (*(unsigned char *)(v53 + 8))
  {
    sub_250DB38A4(v49, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
    sub_250DB38A4(v48, (uint64_t (*)(void))sub_250D97944);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
    char v54 = 5;
  }
  else
  {
    TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(*(Swift::Double *)v53);
    sub_250DB38A4(v49, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
    sub_250DB38A4(v48, (uint64_t (*)(void))sub_250D97944);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
    char v54 = v75;
  }
  uint64_t v56 = v63;
  uint64_t v55 = v64;
  char v57 = v62;
  uint64_t v58 = v72;
  v73[v61] = v54;
  *(void *)uint64_t v52 = v55;
  v52[8] = v57 & 1;
  sub_250DB38A4(v58, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  sub_250DB38A4(v56, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  return sub_250DB38A4(v74, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
}

unint64_t sub_250DB2068()
{
  unint64_t result = qword_26B208158;
  if (!qword_26B208158)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B208158);
  }
  return result;
}

uint64_t TrainingLoadSampleDaySummary.hash(into:)()
{
  sub_250E24B20();
  sub_250D94998(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  sub_250E24B70();
  sub_250D97944();
  sub_250E24B70();
  if (*(unsigned char *)(v0 + *(int *)(SampleDaySummary + 24) + 8) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    sub_250E254D0();
    sub_250E254C0();
  }
  if (*(unsigned char *)(v0 + *(int *)(SampleDaySummary + 28)) == 5)
  {
    sub_250E254D0();
  }
  else
  {
    sub_250E254D0();
    sub_250E254C0();
  }
  return TrainingLoadBaselineComparison.hash(into:)();
}

uint64_t TrainingLoadSampleDaySummary.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250DB2238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_250DB22A0()
{
  return sub_250E254F0();
}

uint64_t sub_250DB22E4()
{
  return sub_250E254F0();
}

uint64_t sub_250DB2324(unsigned __int8 *a1, char *a2)
{
  return sub_250DB0528(*a1, *a2);
}

uint64_t sub_250DB2330()
{
  return sub_250E254F0();
}

uint64_t sub_250DB2444()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DB2540()
{
  return sub_250E254F0();
}

uint64_t sub_250DB2650@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_250DB5300();
  *a1 = result;
  return result;
}

void sub_250DB2680(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEC0000007865646ELL;
  uint64_t v3 = 0x49676E696E726F6DLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED000065676E6152;
      uint64_t v3 = 0x656E696C65736162;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "activityType");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 1684955490;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 4:
      strcpy((char *)a1, "trainingLoad");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_250DB2758()
{
  uint64_t result = 0x49676E696E726F6DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E696C65736162;
      break;
    case 2:
      uint64_t result = 0x7974697669746361;
      break;
    case 3:
      uint64_t result = 1684955490;
      break;
    case 4:
      uint64_t result = 0x676E696E69617274;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250DB2820@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_250DB5300();
  *a1 = result;
  return result;
}

void sub_250DB2848(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_250DB2854(uint64_t a1)
{
  unint64_t v2 = sub_250DB36D0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DB2890(uint64_t a1)
{
  unint64_t v2 = sub_250DB36D0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TrainingLoadSampleDaySummary.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  MEMORY[0x270FA5388](BaselineComparison);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D97944();
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v32 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_250E24B20();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v37 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB3904(0, &qword_26B207020, MEMORY[0x263F8E040]);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v11 = MEMORY[0x270FA5388](SampleDaySummary);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v13[*(int *)(v11 + 24)];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v15 = *(int *)(v11 + 28);
  v13[v15] = 5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DB36D0();
  uint64_t v16 = v38;
  sub_250E25500();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v26 = v15;
  uint64_t v27 = v14;
  uint64_t v38 = SampleDaySummary;
  char v46 = 0;
  sub_250D94998(&qword_26B2075E8, MEMORY[0x263F090E8]);
  uint64_t v17 = v36;
  uint64_t v18 = v35;
  sub_250E25330();
  uint64_t v20 = v9;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v13, v37, v17);
  char v45 = 1;
  sub_250DB3968((unint64_t *)&unk_26B2078E0, &qword_26B2075E8);
  uint64_t v21 = (uint64_t)v32;
  sub_250E25330();
  sub_250D91D14(v21, (uint64_t)&v13[*(int *)(v38 + 20)], (uint64_t (*)(void))sub_250D97944);
  sub_250DB3724(0, &qword_26B2075D0);
  char v44 = 2;
  sub_250DB39F8((unint64_t *)&unk_26B206FD8);
  uint64_t v37 = 0;
  sub_250E25330();
  if (v40 != 1)
  {
    uint64_t v22 = v27;
    *(void *)uint64_t v27 = v39;
    v22[8] = 0;
  }
  sub_250DB3724(0, &qword_26B2074C8);
  char v42 = 3;
  sub_250DB376C(&qword_26B206F30, (void (*)(void))sub_250DB37E8);
  sub_250E25330();
  uint64_t v23 = (uint64_t)v30;
  uint64_t v24 = v34;
  v13[v26] = v43;
  char v41 = 4;
  sub_250D94998(&qword_26B206F48, (void (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison);
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v18);
  sub_250D91D14(v23, (uint64_t)&v13[*(int *)(v38 + 32)], (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  sub_250DB383C((uint64_t)v13, v28, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_250DB38A4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
}

uint64_t TrainingLoadSampleDaySummary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250DB3904(0, &qword_26B2070B8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v15[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DB36D0();
  sub_250E25510();
  char v19 = 0;
  sub_250E24B20();
  sub_250D94998(&qword_26B206D70, MEMORY[0x263F090E8]);
  sub_250E253B0();
  if (!v2)
  {
    uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
    char v18 = 1;
    sub_250D97944();
    sub_250DB3968(&qword_26B206D88, &qword_26B206D70);
    sub_250E253B0();
    uint64_t v11 = (uint64_t *)(v3 + *(int *)(SampleDaySummary + 24));
    char v12 = *((unsigned char *)v11 + 8);
    if (v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v11;
    }
    uint64_t v16 = v13;
    char v17 = v12;
    v15[15] = 2;
    sub_250DB3724(0, &qword_26B2075D0);
    sub_250DB39F8(&qword_26B207088);
    sub_250E253B0();
    v15[14] = *(unsigned char *)(v3 + *(int *)(SampleDaySummary + 28));
    v15[13] = 3;
    sub_250DB3724(0, &qword_26B2074C8);
    sub_250DB376C(&qword_26B207060, (void (*)(void))sub_250DB3A68);
    sub_250E253B0();
    v15[12] = 4;
    type metadata accessor for TrainingLoadBaselineComparison();
    sub_250D94998(&qword_26B207078, (void (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison);
    sub_250E253B0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_250DB3380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadSampleDaySummary.init(from:)(a1, a2);
}

uint64_t sub_250DB3398(void *a1)
{
  return TrainingLoadSampleDaySummary.encode(to:)(a1);
}

uint64_t _s13HealthBalance28TrainingLoadSampleDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D97944();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v33 - v8;
  sub_250E24B20();
  sub_250D94998(&qword_26B2075B0, MEMORY[0x263F090E8]);
  sub_250E24FF0();
  if (v36) {
    return 0;
  }
  uint64_t SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v35 = a2;
  uint64_t v10 = SampleDaySummary[5];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  sub_250D94998(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v13 = sub_250E24BF0();
  sub_250DB383C(v11, (uint64_t)v9, (uint64_t (*)(void))sub_250D97944);
  sub_250DB383C(v12, (uint64_t)v7, (uint64_t (*)(void))sub_250D97944);
  if ((v13 & 1) == 0)
  {
    sub_250DB38A4((uint64_t)v7, (uint64_t (*)(void))sub_250D97944);
    sub_250DB38A4((uint64_t)v9, (uint64_t (*)(void))sub_250D97944);
    return 0;
  }
  char v14 = sub_250E24BF0();
  sub_250DB38A4((uint64_t)v7, (uint64_t (*)(void))sub_250D97944);
  sub_250DB38A4((uint64_t)v9, (uint64_t (*)(void))sub_250D97944);
  if ((v14 & 1) == 0) {
    return 0;
  }
  uint64_t v15 = SampleDaySummary[6];
  uint64_t v16 = (void *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 8);
  char v18 = (void *)(v35 + v15);
  int v19 = *(unsigned __int8 *)(v35 + v15 + 8);
  if (v17)
  {
    if (!v19) {
      return 0;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      return 0;
    }
  }
  uint64_t v21 = SampleDaySummary[7];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(v35 + v21);
  if (v22 == 5)
  {
    if (v23 == 5) {
      goto LABEL_18;
    }
    return 0;
  }
  uint64_t result = 0;
  if (v23 != 5 && v22 == v23)
  {
LABEL_18:
    uint64_t v24 = SampleDaySummary[8];
    uint64_t v25 = a1 + v24;
    uint64_t v26 = v35 + v24;
    if (static TrainingLoadAcuteBaseline.== infix(_:_:)(a1 + v24, v35 + v24))
    {
      uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
      if (static TrainingLoadChronicBaseline.== infix(_:_:)(v25 + *(int *)(BaselineComparison + 20), v26 + *(int *)(BaselineComparison + 20)))
      {
        uint64_t v28 = *(int *)(BaselineComparison + 24);
        uint64_t v29 = (double *)(v25 + v28);
        char v30 = *(unsigned char *)(v25 + v28 + 8);
        uint64_t v31 = (double *)(v26 + v28);
        char v32 = *(unsigned char *)(v26 + v28 + 8);
        if (v30)
        {
          if (v32) {
            return 1;
          }
        }
        else
        {
          if (*v29 != *v31) {
            char v32 = 1;
          }
          if ((v32 & 1) == 0) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_250DB36D0()
{
  unint64_t result = qword_26B207548;
  if (!qword_26B207548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207548);
  }
  return result;
}

void sub_250DB3724(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_250E24FB0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_250DB376C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250DB3724(255, &qword_26B2074C8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250DB37E8()
{
  unint64_t result = qword_26B206F28;
  if (!qword_26B206F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B206F28);
  }
  return result;
}

uint64_t sub_250DB383C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DB38A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250DB3904(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DB36D0();
    unint64_t v7 = a3(a1, &type metadata for TrainingLoadSampleDaySummary.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250DB3968(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D97944();
    sub_250D94998(a2, MEMORY[0x263F090E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DB39F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250DB3724(255, &qword_26B2075D0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250DB3A68()
{
  unint64_t result = qword_26B207058;
  if (!qword_26B207058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207058);
  }
  return result;
}

uint64_t sub_250DB3ABC(void *a1)
{
  a1[1] = sub_250D94998(&qword_26B207580, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
  a1[2] = sub_250D94998((unint64_t *)&unk_26B207560, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
  uint64_t result = sub_250D94998(&qword_26B207570, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_250DB3B68()
{
  return sub_250D94998(&qword_26B207578, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
}

char *initializeBufferWithCopyOfBuffer for TrainingLoadSampleDaySummary(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    v8(&a1[v9], &a2[v9], v7);
    sub_250D97944();
    uint64_t v36 = v12;
    v8(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v7);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v13];
    uint64_t v16 = &a2[v13];
    *(void *)uint64_t v15 = *(void *)v16;
    char v17 = a2[v14];
    v15[8] = v16[8];
    a1[v14] = v17;
    uint64_t v18 = a3[8];
    int v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    sub_250D922D0(0);
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v21))
    {
      sub_250D91EB4();
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v19, v20, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
    uint64_t v27 = *(int *)(BaselineComparison + 20);
    uint64_t v28 = &v19[v27];
    uint64_t v29 = &v20[v27];
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v28, v29, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      v8(v28, v29, v7);
      v8(&v28[*(int *)(v36 + 36)], &v29[*(int *)(v36 + 36)], v7);
      sub_250DA9D04();
      *(void *)&v28[*(int *)(v31 + 48)] = *(void *)&v29[*(int *)(v31 + 48)];
      *(void *)&v28[*(int *)(v31 + 64)] = *(void *)&v29[*(int *)(v31 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v32 = *(int *)(BaselineComparison + 24);
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
  }
  return a1;
}

uint64_t destroy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v15)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  v15(v5, v4);
  sub_250D97944();
  uint64_t v7 = v6;
  v15(v5 + *(int *)(v6 + 36), v4);
  uint64_t v8 = a1 + *(int *)(a2 + 32);
  sub_250D922D0(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  }
  uint64_t v12 = v8 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 20);
  type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    v15(v12, v4);
    uint64_t v14 = v12 + *(int *)(v7 + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v4);
  }
  return result;
}

uint64_t initializeWithCopy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D97944();
  uint64_t v34 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  char v16 = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + v13) = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)(a1 + v17);
  int v19 = (char *)(a2 + v17);
  sub_250D922D0(0);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v20))
  {
    sub_250D91EB4();
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v18, v19, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  }
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v25 = *(int *)(BaselineComparison + 20);
  uint64_t v26 = &v18[v25];
  uint64_t v27 = &v19[v25];
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v26, v27, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v7((uint64_t)v26, (uint64_t)v27, v6);
    v7((uint64_t)&v26[*(int *)(v34 + 36)], (uint64_t)&v27[*(int *)(v34 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v26[*(int *)(v29 + 48)] = *(void *)&v27[*(int *)(v29 + 48)];
    *(void *)&v26[*(int *)(v29 + 64)] = *(void *)&v27[*(int *)(v29 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v30 = *(int *)(BaselineComparison + 24);
  uint64_t v31 = &v18[v30];
  uint64_t v32 = &v19[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D97944();
  uint64_t v38 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  sub_250D922D0(0);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v7) = v22(v17, 1, v19);
  int v23 = v22(v18, 1, v20);
  if (v7)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v17, v18, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
LABEL_6:
    sub_250D91EB4();
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v17, v18, v20);
LABEL_7:
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v26 = BaselineComparison;
  if (a1 != a2)
  {
    uint64_t v27 = *(int *)(BaselineComparison + 20);
    uint64_t v28 = &v17[v27];
    uint64_t v29 = &v18[v27];
    sub_250DB38A4((uint64_t)&v17[v27], (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v28, v29, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v31(v28, v29, v6);
      v31(&v28[*(int *)(v38 + 36)], &v29[*(int *)(v38 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v28[*(int *)(v32 + 48)] = *(void *)&v29[*(int *)(v32 + 48)];
      *(void *)&v28[*(int *)(v32 + 64)] = *(void *)&v29[*(int *)(v32 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v33 = *(int *)(v26 + 24);
  uint64_t v34 = &v17[v33];
  uint64_t v35 = &v18[v33];
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D97944();
  uint64_t v34 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  char v16 = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + v13) = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  sub_250D922D0(0);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v20))
  {
    sub_250D91EB4();
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v19, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  }
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v25 = *(int *)(BaselineComparison + 20);
  uint64_t v26 = &v18[v25];
  uint64_t v27 = &v19[v25];
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v26, v27, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v7((uint64_t)v26, (uint64_t)v27, v6);
    v7((uint64_t)&v26[*(int *)(v34 + 36)], (uint64_t)&v27[*(int *)(v34 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v26[*(int *)(v29 + 48)] = *(void *)&v27[*(int *)(v29 + 48)];
    *(void *)&v26[*(int *)(v29 + 64)] = *(void *)&v27[*(int *)(v29 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v30 = *(int *)(BaselineComparison + 24);
  uint64_t v31 = &v18[v30];
  uint64_t v32 = &v19[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  return a1;
}

uint64_t assignWithTake for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D97944();
  uint64_t v38 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  char v16 = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + v13) = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  sub_250D922D0(0);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v7) = v23(v18, 1, v20);
  int v24 = v23(v19, 1, v21);
  if (v7)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v19, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v21);
LABEL_6:
    sub_250D91EB4();
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v18, v19, v21);
LABEL_7:
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v27 = BaselineComparison;
  if (a1 != a2)
  {
    uint64_t v28 = *(int *)(BaselineComparison + 20);
    uint64_t v29 = &v18[v28];
    uint64_t v30 = &v19[v28];
    sub_250DB38A4((uint64_t)&v18[v28], (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v29, v30, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      v32(v29, v30, v6);
      v32(&v29[*(int *)(v38 + 36)], &v30[*(int *)(v38 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v29[*(int *)(v33 + 48)] = *(void *)&v30[*(int *)(v33 + 48)];
      *(void *)&v29[*(int *)(v33 + 64)] = *(void *)&v30[*(int *)(v33 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v34 = *(int *)(v27 + 24);
  uint64_t v35 = &v18[v34];
  uint64_t v36 = &v19[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DB4CC8);
}

uint64_t sub_250DB4CC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_250D97944();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + a3[7]) <= 5u) {
      int v14 = 5;
    }
    else {
      int v14 = *(unsigned __int8 *)(a1 + a3[7]);
    }
    unsigned int v15 = v14 - 5;
    if (*(unsigned __int8 *)(a1 + a3[7]) >= 5u) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(BaselineComparison - 8) + 48);
    uint64_t v18 = BaselineComparison;
    uint64_t v19 = a1 + a3[8];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DB4E60);
}

void sub_250DB4E60(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_250D97944();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 250)
  {
    *(unsigned char *)(a1 + a4[7]) = a2 + 5;
  }
  else
  {
    uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
    char v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(BaselineComparison - 8) + 56);
    uint64_t v17 = BaselineComparison;
    uint64_t v18 = a1 + a4[8];
    v16(v18, a2, a2, v17);
  }
}

void sub_250DB4FDC()
{
  sub_250E24B20();
  if (v0 <= 0x3F)
  {
    sub_250D97944();
    if (v1 <= 0x3F)
    {
      type metadata accessor for TrainingLoadBaselineComparison();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadSampleDaySummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DB51C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadSampleDaySummary.CodingKeys()
{
  return &type metadata for TrainingLoadSampleDaySummary.CodingKeys;
}

unint64_t sub_250DB51FC()
{
  unint64_t result = qword_269B03A38;
  if (!qword_269B03A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A38);
  }
  return result;
}

unint64_t sub_250DB5254()
{
  unint64_t result = qword_26B207558;
  if (!qword_26B207558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207558);
  }
  return result;
}

unint64_t sub_250DB52AC()
{
  unint64_t result = qword_26B207550;
  if (!qword_26B207550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207550);
  }
  return result;
}

uint64_t sub_250DB5300()
{
  unint64_t v0 = sub_250E252B0();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t static SleepingSampleDaySummaryCollectionQuery.AggregationInterval.== infix(_:_:)()
{
  return 1;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.AggregationInterval.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t SleepingSampleDaySummaryCollectionQuery.AggregationInterval.hashValue.getter()
{
  return sub_250E254F0();
}

id SleepingSampleDaySummaryCollectionQuery.query.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t SleepingSampleDaySummaryCollectionQuery.__allocating_init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  uint64_t v9 = swift_allocObject();
  SleepingSampleDaySummaryCollectionQuery.init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(a1, v10, a3, a4, a5);
  return v9;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, objc_class *a5)
{
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  int v39 = a3;
  uint64_t v6 = sub_250E248B0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8CEA0();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for GregorianDayRange();
  uint64_t v14 = v13 - 8;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB67C0(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_250D86068((uint64_t)v17, v19 + v18, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  uint64_t v38 = a1;
  sub_250DB67C0(a1, (uint64_t)v12, (uint64_t (*)(void))sub_250D8CEA0);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v21 = v9;
  uint64_t v22 = v34;
  v20(v9, a1 + *(int *)(v14 + 28), v34);
  uint64_t v23 = (void *)swift_allocObject();
  int v24 = v37;
  v23[2] = v36;
  v23[3] = v24;
  v23[4] = sub_250DB5C40;
  v23[5] = v19;
  sub_250DB6480();
  uint64_t v37 = v25;
  uint64_t v26 = objc_allocWithZone(v25);
  uint64_t v27 = (uint64_t *)&v26[qword_26B207E30];
  *uint64_t v27 = 0;
  v27[1] = 0;
  *(void *)&v26[qword_26B207E40] = MEMORY[0x263F8EE78];
  uint64_t v28 = &v26[qword_26B20BBA0];
  *uint64_t v28 = 0;
  v28[1] = 0;
  sub_250DB67C0((uint64_t)v12, (uint64_t)&v26[qword_26B20BB98], (uint64_t (*)(void))sub_250D8CEA0);
  v20(&v26[qword_26B20BBA8], (uint64_t)v21, v22);
  v26[qword_26B20BBB0] = v39;
  uint64_t v29 = *v27;
  *uint64_t v27 = (uint64_t)sub_250DB6470;
  v27[1] = (uint64_t)v23;
  swift_retain();
  sub_250D8C39C(v29);
  sub_250DB6514();
  uint64_t v30 = (void *)sub_250E24DB0();
  v41.receiver = v26;
  v41.super_class = v37;
  id v31 = objc_msgSendSuper2(&v41, sel_initWithQueryDescriptors_, v30);
  swift_release();

  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v22);
  sub_250D88698((uint64_t)v12, (uint64_t (*)(void))sub_250D8CEA0);
  sub_250D88698(v38, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  uint64_t result = v40;
  *(void *)(v40 + 16) = v31;
  return result;
}

unint64_t sub_250DB5814(uint64_t a1, uint64_t a2)
{
  sub_250DB6A94(0, &qword_269B03A48, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = type metadata accessor for SleepingSampleDaySummaryCollection();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v24 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v23 = (uint64_t)&v21 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v13 = 0;
  uint64_t v21 = v10;
  uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v22 = a2;
  do
  {
    if (__OFADD__(v13, 7)) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v13 + 7;
    }
    unint64_t v25 = v13;
    sub_250DB5CB0(&v25, 7, a1, a2, (uint64_t)v6);
    if ((*v14)(v6, 1, v7) == 1)
    {
      sub_250DB6734((uint64_t)v6);
    }
    else
    {
      uint64_t v17 = v23;
      sub_250D86068((uint64_t)v6, v23, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
      sub_250D86068(v17, v24, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = sub_250DCF410(0, *(void *)(v15 + 16) + 1, 1, v15);
      }
      unint64_t v19 = *(void *)(v15 + 16);
      unint64_t v18 = *(void *)(v15 + 24);
      if (v19 >= v18 >> 1) {
        unint64_t v15 = sub_250DCF410(v18 > 1, v19 + 1, 1, v15);
      }
      *(void *)(v15 + 16) = v19 + 1;
      sub_250D86068(v24, v15+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
      a2 = v22;
    }
    unint64_t v13 = v16;
  }
  while (v16 < v12);
  return v15;
}

uint64_t sub_250DB5AF0()
{
  unint64_t v1 = (int *)(type metadata accessor for GregorianDayRange() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_250E24B20();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  sub_250D8CEA0();
  v8(v6 + *(int *)(v9 + 36), v7);
  uint64_t v10 = v6 + v1[7];
  uint64_t v11 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

unint64_t sub_250DB5C40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for GregorianDayRange() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_250DB5814(a1, v4);
}

uint64_t sub_250DB5CB0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v72 = a4;
  sub_250D88890();
  uint64_t v73 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v69 = (char *)&v58 - v13;
  sub_250D8CEA0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for GregorianDayRange();
  MEMORY[0x270FA5388](v70);
  unint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SleepingSampleDaySummary() - 8;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v25 = (char *)&v58 - v24;
  unint64_t v26 = *a1;
  int64_t v27 = v26 + a2;
  if (__OFADD__(v26, a2))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(void *)(a3 + 16) < v27) {
    int64_t v27 = *(void *)(a3 + 16);
  }
  if (v27 < (uint64_t)v26) {
    goto LABEL_19;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v27 == v26)
  {
    uint64_t v28 = type metadata accessor for SleepingSampleDaySummaryCollection();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a5, 1, 1, v28);
  }
  if (v27 <= v26) {
    goto LABEL_21;
  }
  uint64_t v66 = v15;
  unint64_t v67 = v27 - v26;
  int64_t v68 = v27;
  unint64_t v30 = a3 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  a2 = *(void *)(v23 + 72);
  sub_250DB67C0(v30 + a2 * v26, (uint64_t)&v58 - v24, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  if (v68 - 1 < v26)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v65 = (char *)v30;
  sub_250DB67C0(v30 + a2 * (v68 - 1), (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  a2 = sub_250E24B20();
  sub_250D949E0((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  swift_bridgeObjectRetain();
  if ((sub_250E24BB0() & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v59 = v26;
  uint64_t v63 = a3;
  uint64_t v64 = a5;
  id v31 = v12;
  uint64_t v32 = *(int *)(v73 + 48);
  uint64_t v33 = v73;
  uint64_t v62 = v18;
  uint64_t v34 = v69;
  uint64_t v35 = &v69[v32];
  uint64_t v58 = &v69[v32];
  uint64_t v36 = *(void **)(a2 - 8);
  uint64_t v37 = v25;
  uint64_t v38 = (void (*)(char *))v36[2];
  uint64_t v60 = (uint64_t)v37;
  v38(v69);
  uint64_t v61 = v22;
  ((void (*)(char *, char *, uint64_t))v38)(v35, v22, a2);
  int v39 = &v31[*(int *)(v33 + 48)];
  ((void (*)(char *, char *, uint64_t))v38)(v31, v34, a2);
  ((void (*)(char *, char *, uint64_t))v38)(v39, v35, a2);
  uint64_t v40 = (void (*)(char *, char *, uint64_t))v36[4];
  uint64_t v41 = (uint64_t)v71;
  v40(v71, v31, a2);
  char v42 = (void (*)(char *, uint64_t))v36[1];
  v42(v39, a2);
  char v43 = &v31[*(int *)(v73 + 48)];
  v40(v31, v34, a2);
  uint64_t v44 = (uint64_t)v62;
  v40(v43, v58, a2);
  v40((char *)(v41 + *(int *)(v66 + 36)), v43, a2);
  char v45 = v31;
  unint64_t v26 = v44;
  v42(v45, a2);
  a3 = v63;
  sub_250D86068(v41, v44, (uint64_t (*)(void))sub_250D8CEA0);
  uint64_t v46 = *(int *)(v70 + 20);
  uint64_t v47 = v72 + v46;
  uint64_t v48 = v26 + v46;
  uint64_t v49 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v48, v47, v49);
  sub_250E25410();
  swift_unknownObjectRetain_n();
  uint64_t v50 = swift_dynamicCastClass();
  if (!v50)
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = MEMORY[0x263F8EE78];
  }
  uint64_t v51 = *(void *)(v50 + 16);
  swift_release();
  BOOL v52 = v51 == v67;
  a5 = v64;
  unint64_t v18 = v65;
  a2 = v59;
  if (v52)
  {
    uint64_t v53 = swift_dynamicCastClass();
    uint64_t v55 = v60;
    uint64_t v54 = (uint64_t)v61;
    if (!v53)
    {
      swift_bridgeObjectRelease();
      uint64_t v53 = MEMORY[0x263F8EE78];
    }
    goto LABEL_17;
  }
LABEL_24:
  unint64_t v57 = (2 * v68) | 1;
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_250DB6828(a3, (uint64_t)v18, a2, v57);
  uint64_t v55 = v60;
  uint64_t v54 = (uint64_t)v61;
LABEL_17:
  swift_bridgeObjectRelease();
  sub_250D88698(v54, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  sub_250D88698(v55, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  sub_250D86068(v26, a5, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  uint64_t v56 = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(void *)(a5 + *(int *)(v56 + 20)) = v53;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(a5, 0, 1, v56);
}

void sub_250DB6364(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id, uint64_t), uint64_t a5, uint64_t (*a6)(id))
{
  if (a3)
  {
    id v10 = a2;
    a4(a1, a2, 1);
    sub_250DB6728(a2, 1);
  }
  else
  {
    uint64_t v9 = a6(a2);
    a4(a1, (id)v9, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_250DB6430()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_250DB6470(uint64_t a1, void *a2, char a3)
{
  sub_250DB6364(a1, a2, a3 & 1, *(void (**)(uint64_t, id, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(uint64_t (**)(id))(v3 + 32));
}

void sub_250DB6480()
{
  if (!qword_26B2071F0)
  {
    type metadata accessor for SleepingSampleDaySummary();
    sub_250D949E0(&qword_26B2071E8, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
    unint64_t v0 = type metadata accessor for SleepingSampleDaySummaryQuery();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2071F0);
    }
  }
}

unint64_t sub_250DB6514()
{
  unint64_t result = qword_26B2078F0;
  if (!qword_26B2078F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2078F0);
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.deinit()
{
  return v0;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_250DB65B0()
{
  unint64_t result = qword_269B03A40;
  if (!qword_269B03A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A40);
  }
  return result;
}

uint64_t type metadata accessor for SleepingSampleDaySummaryCollectionQuery()
{
  return self;
}

uint64_t method lookup function for SleepingSampleDaySummaryCollectionQuery(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleDaySummaryCollectionQuery);
}

uint64_t dispatch thunk of SleepingSampleDaySummaryCollectionQuery.__allocating_init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleDaySummaryCollectionQuery.AggregationInterval(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DB66F0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummaryCollectionQuery.AggregationInterval()
{
  return &type metadata for SleepingSampleDaySummaryCollectionQuery.AggregationInterval;
}

void sub_250DB6728(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_250DB6734(uint64_t a1)
{
  sub_250DB6A94(0, &qword_269B03A48, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250DB67C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DB6828(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  if (v5 <= 0)
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for SleepingSampleDaySummary() - 8);
      uint64_t v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      unint64_t v17 = a2 + v16 * a3;
      uint64_t v18 = v16 * v5;
      uint64_t v19 = &v15[v18];
      unint64_t v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_250DB6A94(0, &qword_269B03A50, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, MEMORY[0x263F8E0F8]);
  uint64_t v8 = *(void *)(type metadata accessor for SleepingSampleDaySummary() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  size_t v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

void sub_250DB6A94(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t TrainingLoadAcuteBaseline.init(quantity:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_250D91EB4();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_250DB2068();
    id v7 = a1;
    sub_250E249E0();
    sub_250D922D0(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  }
  else
  {
    sub_250D922D0(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  }
  return sub_250D91D7C((uint64_t)v6, a2, (uint64_t (*)(void))sub_250D91EB4);
}

uint64_t TrainingLoadAcuteBaseline.quantity.getter()
{
  uint64_t v1 = v0;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB6D5C(v1, (uint64_t)v4);
  sub_250D922D0(0);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5) == 1)
  {
    sub_250D91F98((uint64_t)v4, (uint64_t (*)(void))sub_250D91EB4);
    return 0;
  }
  else
  {
    uint64_t v8 = sub_250E249B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  return v8;
}

uint64_t sub_250DB6D5C(uint64_t a1, uint64_t a2)
{
  sub_250D91EB4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TrainingLoadAcuteBaseline.hash(into:)()
{
  sub_250D922D0(0);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB6D5C(v0, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1) {
    return sub_250E254D0();
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_250E254D0();
  sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
  sub_250E24B70();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_250DB6F7C()
{
  return sub_250DB81E8(&qword_269B038C0, (void (*)(uint64_t))sub_250DB2068);
}

uint64_t sub_250DB6FB4()
{
  return 0x797469746E617571;
}

uint64_t sub_250DB6FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x797469746E617571 && a2 == 0xEF72657070617257)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_250E25400();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250DB7094(uint64_t a1)
{
  unint64_t v2 = sub_250DB8194();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DB70D0(uint64_t a1)
{
  unint64_t v2 = sub_250DB8194();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TrainingLoadAcuteBaseline.encode(to:)(void *a1)
{
  sub_250DB8230(0, &qword_26B207090, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DB8194();
  sub_250E25510();
  sub_250D922D0(0);
  sub_250DB81E8(&qword_26B206D60, sub_250D922D0);
  sub_250E25370();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TrainingLoadAcuteBaseline.hashValue.getter()
{
  uint64_t v1 = v0;
  sub_250D922D0(0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E254B0();
  sub_250DB6D5C(v1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_250E254F0();
}

uint64_t TrainingLoadAcuteBaseline.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB8230(0, &qword_26B206FF8, MEMORY[0x263F8E040]);
  uint64_t v8 = v7;
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  MEMORY[0x270FA5388](AcuteBaseline - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DB8194();
  sub_250E25500();
  if (!v2)
  {
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    sub_250D922D0(0);
    sub_250DB81E8(&qword_26B2078C0, sub_250D922D0);
    sub_250E252F0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v8);
    sub_250D91D7C((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D91D7C((uint64_t)v13, v15, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_250DB770C()
{
  sub_250D922D0(0);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB6D5C(v0, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1) {
    return sub_250E254D0();
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_250E254D0();
  sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
  sub_250E24B70();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_250DB78C8()
{
  uint64_t v1 = v0;
  sub_250D922D0(0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E254B0();
  sub_250DB6D5C(v1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_250E254F0();
}

uint64_t sub_250DB7AA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadAcuteBaseline.init(from:)(a1, a2);
}

uint64_t sub_250DB7ABC(void *a1)
{
  sub_250DB8230(0, &qword_26B207090, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DB8194();
  sub_250E25510();
  sub_250D922D0(0);
  sub_250DB81E8(&qword_26B206D60, sub_250D922D0);
  sub_250E25370();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t TrainingLoadAcuteBaseline.description.getter()
{
  uint64_t v1 = v0;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = 0xD000000000000024;
  unint64_t v12 = 0x8000000250E2CD60;
  sub_250DB6D5C(v1, (uint64_t)v4);
  sub_250D922D0(0);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5) == 1)
  {
    sub_250D91F98((uint64_t)v4, (uint64_t (*)(void))sub_250D91EB4);
  }
  else
  {
    uint64_t v8 = sub_250E249B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
    v10[1] = v8;
    sub_250DB2068();
    sub_250E24C80();
  }
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  return v11;
}

BOOL _s13HealthBalance25TrainingLoadAcuteBaselineV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB8DC0();
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v27 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v27 - v20;
  sub_250DB6D5C(a1, (uint64_t)&v27 - v20);
  sub_250DB6D5C(a2, (uint64_t)v19);
  uint64_t v22 = (uint64_t)&v12[*(int *)(v10 + 56)];
  sub_250DB6D5C((uint64_t)v21, (uint64_t)v12);
  sub_250DB6D5C((uint64_t)v19, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v12, 1, v5) == 1)
  {
    sub_250D91F98((uint64_t)v19, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D91F98((uint64_t)v21, (uint64_t (*)(void))sub_250D91EB4);
    if (v23(v22, 1, v5) == 1)
    {
      sub_250D91F98((uint64_t)v12, (uint64_t (*)(void))sub_250D91EB4);
      return 1;
    }
    goto LABEL_6;
  }
  sub_250DB6D5C((uint64_t)v12, (uint64_t)v16);
  if (v23(v22, 1, v5) == 1)
  {
    sub_250D91F98((uint64_t)v19, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D91F98((uint64_t)v21, (uint64_t (*)(void))sub_250D91EB4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
LABEL_6:
    sub_250D91F98((uint64_t)v12, (uint64_t (*)(void))sub_250DB8DC0);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v22, v5);
  sub_250DB8E24((unint64_t *)&qword_269B03A70, (void (*)(void))sub_250DB8E90);
  char v24 = sub_250E24BF0();
  unint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v8, v5);
  sub_250D91F98((uint64_t)v19, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91F98((uint64_t)v21, (uint64_t (*)(void))sub_250D91EB4);
  v25(v16, v5);
  sub_250D91F98((uint64_t)v12, (uint64_t (*)(void))sub_250D91EB4);
  return (v24 & 1) != 0;
}

unint64_t sub_250DB8194()
{
  unint64_t result = qword_26B2074D0;
  if (!qword_26B2074D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074D0);
  }
  return result;
}

uint64_t sub_250DB81E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250DB8230(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DB8194();
    unint64_t v7 = a3(a1, &type metadata for TrainingLoadAcuteBaseline.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t type metadata accessor for TrainingLoadAcuteBaseline()
{
  uint64_t result = qword_26B207480;
  if (!qword_26B207480) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250DB82E0()
{
  return sub_250DB81E8(&qword_269B03A58, (void (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadAcuteBaseline(uint64_t *a1, uint64_t *a2)
{
  sub_250D91EB4();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    sub_250D922D0(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TrainingLoadAcuteBaseline(uint64_t a1)
{
  sub_250D922D0(0);
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v2);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TrainingLoadAcuteBaseline(void *a1, const void *a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for TrainingLoadAcuteBaseline(void *a1, void *a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

void *initializeWithTake for TrainingLoadAcuteBaseline(void *a1, const void *a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for TrainingLoadAcuteBaseline(void *a1, void *a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadAcuteBaseline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DB8A68);
}

uint64_t sub_250DB8A68(uint64_t a1, uint64_t a2)
{
  sub_250D91EB4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadAcuteBaseline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DB8AE8);
}

uint64_t sub_250DB8AE8(uint64_t a1, uint64_t a2)
{
  sub_250D91EB4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_250DB8B58()
{
  sub_250D91EB4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadAcuteBaseline.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DB8C80);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadAcuteBaseline.CodingKeys()
{
  return &type metadata for TrainingLoadAcuteBaseline.CodingKeys;
}

unint64_t sub_250DB8CBC()
{
  unint64_t result = qword_269B03A60;
  if (!qword_269B03A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A60);
  }
  return result;
}

unint64_t sub_250DB8D14()
{
  unint64_t result = qword_26B2074E0;
  if (!qword_26B2074E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074E0);
  }
  return result;
}

unint64_t sub_250DB8D6C()
{
  unint64_t result = qword_26B2074D8;
  if (!qword_26B2074D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2074D8);
  }
  return result;
}

void sub_250DB8DC0()
{
  if (!qword_269B03A68)
  {
    sub_250D91EB4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03A68);
    }
  }
}

uint64_t sub_250DB8E24(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D922D0(255);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DB8E90()
{
  return sub_250DB81E8(&qword_269B038D8, (void (*)(uint64_t))sub_250DB2068);
}

uint64_t String.init<A>(describingOptional:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  id v9[2] = a2;
  v9[3] = sub_250DB934C;
  v9[4] = v4;
  uint64_t v5 = sub_250E24FB0();
  sub_250DB8FD8((void (*)(char *, char *))sub_250DB9354, (uint64_t)v9, MEMORY[0x263F8E628], MEMORY[0x263F8D310], v6, (uint64_t)v10);
  swift_release();
  if (v10[1]) {
    uint64_t v7 = v10[0];
  }
  else {
    uint64_t v7 = 7104878;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v7;
}

uint64_t sub_250DB8FD8@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  unint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t sub_250DB9284(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_250E24C80();
}

uint64_t sub_250DB933C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_250DB934C(uint64_t a1)
{
  return sub_250DB9284(a1);
}

uint64_t sub_250DB9354@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t TrainingLoadDataType.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t static TrainingLoadDataType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t TrainingLoadDataType.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DB948C()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DB94F8()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t sub_250DB9548()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DB95B0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

unint64_t sub_250DB95F0()
{
  unint64_t result = qword_269B03A78;
  if (!qword_269B03A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrainingLoadDataType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TrainingLoadDataType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_250DB9694(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_250DB96B0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadDataType()
{
  return &type metadata for TrainingLoadDataType;
}

uint64_t sub_250DB96E0()
{
  uint64_t v0 = sub_250E24950();
  __swift_allocate_value_buffer(v0, qword_26B207A58);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B207A58);
  return sub_250E24940();
}

uint64_t static OS_os_log.balance.getter()
{
  return sub_250E24FA0();
}

unint64_t sub_250DB97B0()
{
  unint64_t result = qword_26B206C48;
  if (!qword_26B206C48)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B206C48);
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.gregorianDayRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DBB508(v1, a1, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryCollection.gregorianDayRange.setter(uint64_t a1)
{
  return sub_250DB982C(a1, v1);
}

uint64_t sub_250DB982C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SleepingSampleDaySummaryCollection.gregorianDayRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummaryCollection.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DBB508(v1, a1, (uint64_t (*)(void))sub_250D8CEA0);
}

uint64_t SleepingSampleDaySummaryCollection.daySummaries.getter()
{
  type metadata accessor for SleepingSampleDaySummaryCollection();

  return swift_bridgeObjectRetain();
}

uint64_t SleepingSampleDaySummaryCollection.daySummaries.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepingSampleDaySummaryCollection.daySummaries.modify())()
{
  return nullsub_1;
}

size_t SleepingSampleDaySummaryCollection.baselineComparisons.getter()
{
  type metadata accessor for SleepingSampleDaySummaryCollection();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_250DB9A1C(v0);
  swift_bridgeObjectRelease();
  size_t v2 = sub_250DBADD4(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_250DB9A1C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    sub_250DBA294(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (int *)type metadata accessor for SleepingSampleDaySummary();
    uint64_t v5 = a1
       + ((*(unsigned __int8 *)(*((void *)v4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v4 - 1) + 80));
    uint64_t v13 = *(void *)(*((void *)v4 - 1) + 72);
    sub_250DBBBB8(0);
    uint64_t v6 = *(void *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
    uint64_t v7 = *(void *)(v6 + 72);
    unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    do
    {
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_250E27DE0;
      sub_250DBB508(v5 + v4[8], v8 + v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DBB508(v5 + v4[9], v8 + v12 + v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DBB508(v5 + v4[10], v8 + v12 + 2 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DBB508(v5 + v4[11], v8 + v12 + 3 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DBB508(v5 + v4[12], v8 + v12 + 4 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      unint64_t v10 = *(void *)(v14 + 16);
      unint64_t v9 = *(void *)(v14 + 24);
      if (v10 >= v9 >> 1) {
        sub_250DBA294(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v14 + 16) = v10 + 1;
      *(void *)(v14 + 8 * v10 + 32) = v8;
      v5 += v13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_250DB9C84(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_250DBA2B4(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = *(void *)(type metadata accessor for SleepingSampleDaySummary() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = SleepingSampleDaySummary.outOfRangeMetricCount.getter();
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        sub_250DBA2B4(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v11 + 16) = v9 + 1;
      *(void *)(v11 + 8 * v9 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t SleepingSampleDaySummaryCollection.outOfRangeMetricCount.getter()
{
  type metadata accessor for SleepingSampleDaySummaryCollection();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_250DB9C84(v0);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(v1 + 32);
    while (1)
    {
      uint64_t v6 = *v5++;
      BOOL v7 = __OFADD__(v4, v6);
      v4 += v6;
      if (v7) {
        break;
      }
      if (!--v3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.baselineComparisons(for:)(unsigned __int8 *a1)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  uint64_t v11 = *(void *)(v1 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20));
  int64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v26 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_250DBA2D4(0, v12, 0);
    uint64_t v14 = v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v15 = *(void *)(v4 + 72);
    uint64_t v23 = (int *)(v3 + 44);
    char v24 = (int *)(v3 + 48);
    uint64_t v22 = (int *)(v3 + 40);
    v20[1] = v11;
    uint64_t v21 = (int *)(v3 + 36);
    do
    {
      sub_250DBB508(v14, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      uint64_t v16 = (int *)(v3 + 32);
      switch(v25)
      {
        case 1:
          uint64_t v16 = v22;
          break;
        case 2:
          uint64_t v16 = v21;
          break;
        case 3:
          uint64_t v16 = v23;
          break;
        case 4:
          uint64_t v16 = v24;
          break;
        default:
          break;
      }
      sub_250DBB508((uint64_t)&v6[*v16], (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DBBC68((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      uint64_t v13 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250DBA2D4(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v26;
      }
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_250DBA2D4(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v26;
      }
      *(void *)(v13 + 16) = v18 + 1;
      sub_250D860D0((uint64_t)v10, v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v14 += v15;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  return v13;
}

size_t sub_250DBA15C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_250DB9A1C(v0);
  swift_bridgeObjectRelease();
  size_t v2 = sub_250DBADD4(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_250DBA1C8@<X0>(uint64_t a1@<X8>)
{
  return sub_250DBB508(v1, a1, (uint64_t (*)(void))sub_250D8CEA0);
}

uint64_t sub_250DBA204(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA3EC(a1, a2, a3, (void *)*v3, sub_250DBBCFC, MEMORY[0x263F06338]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA24C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA3EC(a1, a2, a3, (void *)*v3, sub_250DBBB50, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA294(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA638(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA2B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA7EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250DBA2D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA3EC(a1, a2, a3, (void *)*v3, sub_250DBBBB8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA31C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA958(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA33C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA3EC(a1, a2, a3, (void *)*v3, sub_250DBBB84, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA384(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBAB0C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250DBA3A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250DBA3EC(a1, a2, a3, (void *)*v3, sub_250DBBAB8, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250DBA3EC(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  a5(0);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DBA638(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DBBAEC(0, &qword_269B03A98, (uint64_t (*)(uint64_t))sub_250DBBCC8, MEMORY[0x263F8E0F8]);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_250DBBCC8(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DBA7EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DBBBEC(0, &qword_269B03A90);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DBA958(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DBBAEC(0, &qword_26B207048, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, MEMORY[0x263F8E0F8]);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DBAB0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DBBBEC(0, &qword_269B03A88);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DBAC78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DBBBEC(0, &qword_26B2071B8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

size_t sub_250DBADD4(uint64_t a1)
{
  sub_250DBBC34(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  BOOL v52 = (char *)v46 - v6;
  uint64_t v7 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x270FA5388](v7);
  int64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  uint64_t v51 = (v11 + 32) & ~v11;
  uint64_t v54 = MEMORY[0x263F8EE78] + v51;
  unint64_t v13 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v48 = v10 + 48;
  uint64_t v49 = v10;
  v46[1] = v11 | 7;
  size_t result = swift_bridgeObjectRetain();
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  unint64_t v15 = 0;
  uint64_t v50 = v9;
  uint64_t v47 = v7;
LABEL_4:
  unint64_t v18 = *(void *)(a1 + 16);
  if (v15 != v18)
  {
    if (v15 < v18)
    {
      while (1)
      {
        uint64_t v19 = *(void *)(a1 + 32 + 8 * v15);
        swift_bridgeObjectRetain();
        size_t result = swift_bridgeObjectRelease();
        if (v19) {
          break;
        }
LABEL_9:
        ++v15;
        unint64_t v20 = *(void *)(a1 + 16);
        if (v15 == v20) {
          goto LABEL_38;
        }
        if (v15 >= v20) {
          goto LABEL_44;
        }
      }
      unint64_t v16 = *(void *)(v19 + 16);
      if (!v16)
      {
        (*v13)(v5, 1, 1, v7);
        size_t result = sub_250DBBC68((uint64_t)v5, (uint64_t (*)(void))sub_250DBBC34);
        goto LABEL_9;
      }
      unint64_t v17 = 0;
      ++v15;
      while (1)
      {
        if (v17 >= v16) {
          goto LABEL_45;
        }
        uint64_t v53 = v12;
        uint64_t v21 = v49;
        uint64_t v22 = *(void *)(v49 + 72);
        unint64_t v56 = v17;
        sub_250DBB508(v19 + v51 + v22 * v17, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v7);
        uint64_t v23 = (uint64_t)v52;
        sub_250D860D0((uint64_t)v5, (uint64_t)v52, (uint64_t (*)(void))sub_250DBBC34);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = v53;
          goto LABEL_39;
        }
        uint64_t v24 = (uint64_t)v50;
        size_t result = sub_250D860D0(v23, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        if (!v55) {
          break;
        }
        unint64_t v25 = v53;
        uint64_t v26 = v55 - 1;
        if (__OFSUB__(v55, 1)) {
          goto LABEL_46;
        }
LABEL_37:
        uint64_t v55 = v26;
        ++v56;
        uint64_t v41 = v24;
        uint64_t v42 = v54;
        size_t result = sub_250D860D0(v41, v54, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        uint64_t v54 = v42 + v22;
        uint64_t v12 = v25;
        uint64_t v7 = v47;
        unint64_t v16 = *(void *)(v19 + 16);
        unint64_t v17 = v56;
        if (v56 == v16)
        {
          (*v13)(v5, 1, 1, v47);
          size_t result = sub_250DBBC68((uint64_t)v5, (uint64_t (*)(void))sub_250DBBC34);
          goto LABEL_4;
        }
      }
      unint64_t v27 = v53[3];
      if ((uint64_t)((v27 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_48;
      }
      int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      if (v28 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v28;
      }
      sub_250DBBBB8(0);
      uint64_t v30 = v51;
      uint64_t v55 = v29;
      unint64_t v25 = (void *)swift_allocObject();
      size_t result = _swift_stdlib_malloc_size(v25);
      if (!v22) {
        goto LABEL_49;
      }
      int64_t v31 = result - v30;
      if (result - v30 == 0x8000000000000000 && v22 == -1) {
        goto LABEL_50;
      }
      uint64_t v33 = v30;
      uint64_t v34 = v31 / v22;
      v25[2] = v55;
      v25[3] = 2 * (v31 / v22);
      unint64_t v35 = (unint64_t)v25 + v30;
      uint64_t v36 = v53[3] >> 1;
      uint64_t v37 = v36 * v22;
      if (!v53[2])
      {
LABEL_36:
        uint64_t v54 = v35 + v37;
        uint64_t v38 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        size_t result = swift_release();
        uint64_t v39 = v38;
        uint64_t v24 = (uint64_t)v50;
        BOOL v40 = __OFSUB__(v39, 1);
        uint64_t v26 = v39 - 1;
        if (v40) {
          goto LABEL_46;
        }
        goto LABEL_37;
      }
      if (v25 < v53 || v35 >= (unint64_t)v53 + v33 + v37)
      {
        uint64_t v54 = v35;
        uint64_t v55 = v31 / v22;
        v46[0] = v36 * v22;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v25 == v53)
        {
LABEL_35:
          void v53[2] = 0;
          goto LABEL_36;
        }
        uint64_t v54 = v35;
        uint64_t v55 = v31 / v22;
        v46[0] = v36 * v22;
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v37 = v46[0];
      unint64_t v35 = v54;
      uint64_t v34 = v55;
      goto LABEL_35;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_38:
  uint64_t v23 = (uint64_t)v52;
  (*v13)(v52, 1, 1, v7);
  swift_bridgeObjectRelease();
LABEL_39:
  swift_bridgeObjectRelease();
  size_t result = sub_250DBBC68(v23, (uint64_t (*)(void))sub_250DBBC34);
  unint64_t v43 = v12[3];
  if (v43 < 2) {
    return (size_t)v12;
  }
  unint64_t v44 = v43 >> 1;
  BOOL v40 = __OFSUB__(v44, v55);
  unint64_t v45 = v44 - v55;
  if (!v40)
  {
    id v12[2] = v45;
    return (size_t)v12;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t _s13HealthBalance34SleepingSampleDaySummaryCollectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D8CEA0();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int64_t v9 = (char *)&v16 - v8;
  sub_250E24B20();
  sub_250D94A28(&qword_26B206F80);
  char v10 = sub_250E24BF0();
  sub_250DBB508(a1, (uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
  sub_250DBB508(a2, (uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
  if ((v10 & 1) == 0)
  {
    sub_250DBBC68((uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
    sub_250DBBC68((uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
LABEL_6:
    char v14 = 0;
    return v14 & 1;
  }
  char v11 = sub_250E24BF0();
  sub_250DBBC68((uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
  sub_250DBBC68((uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
  if ((v11 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v12 = type metadata accessor for GregorianDayRange();
  if ((MEMORY[0x253389430](a1 + *(int *)(v12 + 20), a2 + *(int *)(v12 + 20)) & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v13 = type metadata accessor for SleepingSampleDaySummaryCollection();
  char v14 = sub_250E07740(*(void *)(a1 + *(int *)(v13 + 20)), *(void *)(a2 + *(int *)(v13 + 20)));
  return v14 & 1;
}

uint64_t sub_250DBB508(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t assignWithCopy for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DBB890);
}

uint64_t sub_250DBB890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GregorianDayRange();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DBB964);
}

uint64_t sub_250DBB964(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for GregorianDayRange();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_250DBBA20()
{
  uint64_t result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_250DBBAB8(uint64_t a1)
{
}

void sub_250DBBAEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250DBBB50(uint64_t a1)
{
}

void sub_250DBBB84(uint64_t a1)
{
}

void sub_250DBBBB8(uint64_t a1)
{
}

void sub_250DBBBEC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_250E253E0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_250DBBC34(uint64_t a1)
{
}

uint64_t sub_250DBBC68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_250DBBCC8(uint64_t a1)
{
}

void sub_250DBBCFC(uint64_t a1)
{
}

uint64_t TrainingLoadBaselineComparison.init(acuteBaseline:chronicBaseline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D91EB4();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x270FA5388](ChronicBaseline);
  uint64_t v11 = (double *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v13 = a3 + *(int *)(BaselineComparison + 24);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  sub_250DBC18C(a1, a3, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
  sub_250DBC18C(a2, a3 + *(int *)(BaselineComparison + 20), (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  sub_250DBC18C(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v14 = *v11;
    if (*v11 == 0.0)
    {
      sub_250DBC1F4(a2, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
      uint64_t result = sub_250DBC1F4(a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
      *(void *)uint64_t v13 = 0;
      *(unsigned char *)(v13 + 8) = 1;
    }
    else
    {
      sub_250DBC18C(a1, (uint64_t)v8, (uint64_t (*)(void))sub_250D91EB4);
      sub_250D922D0(0);
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v16) == 1)
      {
        sub_250DBC1F4((uint64_t)v8, (uint64_t (*)(void))sub_250D91EB4);
        sub_250DBC1F4(a2, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
        uint64_t result = sub_250DBC1F4(a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
        *(void *)uint64_t v13 = 0;
        *(unsigned char *)(v13 + 8) = 1;
      }
      else
      {
        uint64_t v19 = (void *)sub_250E249B0();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
        objc_msgSend(v19, sel__value);
        double v21 = v20;

        sub_250DBC1F4(a2, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
        uint64_t result = sub_250DBC1F4(a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
        *(double *)uint64_t v13 = (v21 - v14) / v14;
        *(unsigned char *)(v13 + 8) = 0;
      }
    }
  }
  else
  {
    sub_250DBC1F4(a2, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
    sub_250DBC1F4(a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
    *(void *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 8) = 1;
    return sub_250DBC1F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  }
  return result;
}

uint64_t static TrainingLoadBaselineComparison.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!_s13HealthBalance25TrainingLoadAcuteBaselineV2eeoiySbAC_ACtFZ_0(a1, a2)) {
    return 0;
  }
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  if ((_s13HealthBalance27TrainingLoadChronicBaselineO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(BaselineComparison + 20), a2 + *(int *)(BaselineComparison + 20)) & 1) == 0)return 0; {
  uint64_t v5 = *(int *)(BaselineComparison + 24);
  }
  uint64_t v6 = (double *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 8);
  unint64_t v8 = (double *)(a2 + v5);
  char v9 = *(unsigned char *)(a2 + v5 + 8);
  if (v7)
  {
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v6 != *v8) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  return 1;
}

uint64_t type metadata accessor for TrainingLoadBaselineComparison()
{
  uint64_t result = qword_26B207738;
  if (!qword_26B207738) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250DBC18C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DBC1F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t TrainingLoadBaselineComparison.acuteBaseline.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DBC18C(v1, a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
}

uint64_t TrainingLoadBaselineComparison.chronicBaseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  return sub_250DBC18C(v1 + *(int *)(BaselineComparison + 20), a1, (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
}

uint64_t TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 24));
}

uint64_t TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadBaselineComparison.hash(into:)()
{
  uint64_t v1 = v0;
  sub_250D922D0(0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DBC18C(v1, (uint64_t)v9, (uint64_t (*)(void))sub_250D91EB4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  TrainingLoadChronicBaseline.hash(into:)();
  if (*(unsigned char *)(v1 + *(int *)(BaselineComparison + 24) + 8) == 1) {
    return sub_250E254D0();
  }
  sub_250E254D0();
  return sub_250E254E0();
}

uint64_t sub_250DBC594()
{
  unint64_t v1 = 0x4263696E6F726863;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000027;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7361426574756361;
  }
}

uint64_t sub_250DBC60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DBE334(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DBC634(uint64_t a1)
{
  unint64_t v2 = sub_250DBCEFC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBC670(uint64_t a1)
{
  unint64_t v2 = sub_250DBCEFC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TrainingLoadBaselineComparison.encode(to:)(void *a1)
{
  sub_250DBCF50(0, &qword_26B2070C0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DBCEFC();
  sub_250E25510();
  v9[15] = 0;
  type metadata accessor for TrainingLoadAcuteBaseline();
  sub_250DBD2D8(&qword_26B207068, (void (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline);
  sub_250E253B0();
  if (!v1)
  {
    type metadata accessor for TrainingLoadBaselineComparison();
    v9[14] = 1;
    type metadata accessor for TrainingLoadChronicBaseline();
    sub_250DBD2D8(&qword_26B207070, (void (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline);
    sub_250E253B0();
    v9[13] = 2;
    sub_250E25360();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TrainingLoadBaselineComparison.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t TrainingLoadBaselineComparison.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x270FA5388](ChronicBaseline);
  unint64_t v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  MEMORY[0x270FA5388](AcuteBaseline);
  uint64_t v30 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DBCF50(0, &qword_26B207028, MEMORY[0x263F8E040]);
  uint64_t v31 = v5;
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  uint64_t v9 = MEMORY[0x270FA5388](BaselineComparison);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = &v11[*(int *)(v9 + 24)];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DBCEFC();
  uint64_t v13 = v7;
  uint64_t v14 = (uint64_t)v32;
  sub_250E25500();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v23 = (uint64_t *)v12;
  uint64_t v24 = BaselineComparison;
  uint64_t v15 = (uint64_t)v27;
  uint64_t v32 = a1;
  uint64_t v16 = v26;
  char v35 = 0;
  sub_250DBD2D8(&qword_26B206F38, (void (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline);
  uint64_t v17 = (uint64_t)v30;
  uint64_t v18 = v13;
  sub_250E25330();
  sub_250DBCFB4(v17, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TrainingLoadAcuteBaseline);
  char v34 = 1;
  sub_250DBD2D8(&qword_26B206F40, (void (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline);
  sub_250E25330();
  sub_250DBCFB4(v15, (uint64_t)&v11[*(int *)(v24 + 20)], (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  char v33 = 2;
  uint64_t v19 = sub_250E252E0();
  LOBYTE(v15) = v20;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v31);
  double v21 = v23;
  uint64_t *v23 = v19;
  *((unsigned char *)v21 + 8) = v15 & 1;
  sub_250DBC18C((uint64_t)v11, v25, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_250DBC1F4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t sub_250DBCDC4()
{
  return sub_250E254F0();
}

uint64_t sub_250DBCE08()
{
  return sub_250E254F0();
}

uint64_t sub_250DBCE44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadBaselineComparison.init(from:)(a1, a2);
}

uint64_t sub_250DBCE5C(void *a1)
{
  return TrainingLoadBaselineComparison.encode(to:)(a1);
}

uint64_t sub_250DBCE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static TrainingLoadAcuteBaseline.== infix(_:_:)() & 1) != 0
    && (static TrainingLoadChronicBaseline.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (double *)(a1 + v6);
    char v8 = *(unsigned char *)(a1 + v6 + 8);
    uint64_t v9 = (double *)(a2 + v6);
    int v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if (v8)
    {
      if (v10) {
        return 1;
      }
    }
    else
    {
      if (*v7 != *v9) {
        LOBYTE(v10) = 1;
      }
      if ((v10 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_250DBCEFC()
{
  unint64_t result = qword_26B207588;
  if (!qword_26B207588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207588);
  }
  return result;
}

void sub_250DBCF50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DBCEFC();
    unint64_t v7 = a3(a1, &type metadata for TrainingLoadBaselineComparison.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250DBCFB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DBD01C()
{
  return sub_250DBD2D8(&qword_269B03AA8, (void (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadBaselineComparison(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_250D922D0(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      sub_250D91EB4();
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      uint64_t v16 = sub_250E24B20();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v13, v14, v16);
      sub_250D97944();
      v17(&v13[*(int *)(v18 + 36)], &v14[*(int *)(v18 + 36)], v16);
      sub_250DA9D04();
      *(void *)&v13[*(int *)(v19 + 48)] = *(void *)&v14[*(int *)(v19 + 48)];
      *(void *)&v13[*(int *)(v19 + 64)] = *(void *)&v14[*(int *)(v19 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v20 = *(int *)(a3 + 24);
    double v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *(void *)double v21 = *(void *)v22;
    v21[8] = v22[8];
  }
  return a1;
}

uint64_t sub_250DBD2D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for TrainingLoadBaselineComparison(uint64_t a1, uint64_t a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  type metadata accessor for TrainingLoadChronicBaseline();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v9 = sub_250E24B20();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v9 - 8), v7, v9);
    sub_250D97944();
    uint64_t v11 = v7 + *(int *)(v10 + 36);
    return v12(v11, v9);
  }
  return result;
}

char *initializeWithCopy for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  sub_250D922D0(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    uint64_t v14 = sub_250E24B20();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v11, v12, v14);
    sub_250D97944();
    v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v14);
    sub_250DA9D04();
    *(void *)&v11[*(int *)(v17 + 48)] = *(void *)&v12[*(int *)(v17 + 48)];
    *(void *)&v11[*(int *)(v17 + 64)] = *(void *)&v12[*(int *)(v17 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  return a1;
}

char *assignWithCopy for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  sub_250D922D0(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(a1, a2, v7);
      if (a1 == a2) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    if (a1 == a2) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v11) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  if (a1 == a2) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  sub_250DBC1F4((uint64_t)&a1[v13], (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v14, v15, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    uint64_t v17 = sub_250E24B20();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v14, v15, v17);
    sub_250D97944();
    v18(&v14[*(int *)(v19 + 36)], &v15[*(int *)(v19 + 36)], v17);
    sub_250DA9D04();
    *(void *)&v14[*(int *)(v20 + 48)] = *(void *)&v15[*(int *)(v20 + 48)];
    *(void *)&v14[*(int *)(v20 + 64)] = *(void *)&v15[*(int *)(v20 + 64)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_12:
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  return a1;
}

char *initializeWithTake for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  sub_250D922D0(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  int v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    uint64_t v14 = sub_250E24B20();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
    v15(v11, v12, v14);
    sub_250D97944();
    v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v14);
    sub_250DA9D04();
    *(void *)&v11[*(int *)(v17 + 48)] = *(void *)&v12[*(int *)(v17 + 48)];
    *(void *)&v11[*(int *)(v17 + 64)] = *(void *)&v12[*(int *)(v17 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  return a1;
}

char *assignWithTake for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  sub_250D922D0(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(a1, a2, v7);
      if (a1 == a2) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    sub_250D91EB4();
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    if (a1 == a2) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v11) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  if (a1 == a2) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  sub_250DBC1F4((uint64_t)&a1[v13], (uint64_t (*)(void))type metadata accessor for TrainingLoadChronicBaseline);
  uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v14, v15, *(void *)(*(void *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    uint64_t v17 = sub_250E24B20();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
    v18(v14, v15, v17);
    sub_250D97944();
    v18(&v14[*(int *)(v19 + 36)], &v15[*(int *)(v19 + 36)], v17);
    sub_250DA9D04();
    *(void *)&v14[*(int *)(v20 + 48)] = *(void *)&v15[*(int *)(v20 + 48)];
    *(void *)&v14[*(int *)(v20 + 64)] = *(void *)&v15[*(int *)(v20 + 64)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_12:
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DBDE48);
}

uint64_t sub_250DBDE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  uint64_t v7 = *(void *)(AcuteBaseline - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, AcuteBaseline);
  }
  else
  {
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ChronicBaseline - 8) + 48);
    uint64_t v12 = ChronicBaseline;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for TrainingLoadBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DBDF54);
}

uint64_t sub_250DBDF54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  uint64_t v9 = *(void *)(AcuteBaseline - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, AcuteBaseline);
  }
  else
  {
    uint64_t ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(ChronicBaseline - 8) + 56);
    uint64_t v14 = ChronicBaseline;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_250DBE058()
{
  sub_250D91EB4();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TrainingLoadChronicBaseline();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadBaselineComparison.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DBE1F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadBaselineComparison.CodingKeys()
{
  return &type metadata for TrainingLoadBaselineComparison.CodingKeys;
}

unint64_t sub_250DBE230()
{
  unint64_t result = qword_269B03AB0;
  if (!qword_269B03AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03AB0);
  }
  return result;
}

unint64_t sub_250DBE288()
{
  unint64_t result = qword_26B207598;
  if (!qword_26B207598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207598);
  }
  return result;
}

unint64_t sub_250DBE2E0()
{
  unint64_t result = qword_26B207590;
  if (!qword_26B207590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207590);
  }
  return result;
}

uint64_t sub_250DBE334(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7361426574756361 && a2 == 0xED0000656E696C65;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4263696E6F726863 && a2 == 0xEF656E696C657361 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000027 && a2 == 0x8000000250E2CDB0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t static HKKeyValueDomain.sleepingSampleChangeNotificationStateDomainName.getter()
{
  return 0xD000000000000025;
}

uint64_t HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_250E252B0();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 6;
  if (v2 < 6) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

void *static HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.allCases.getter()
{
  return &unk_2701E68C0;
}

uint64_t sub_250DBE56C(unsigned __int8 *a1, char *a2)
{
  return sub_250DB0248(*a1, *a2);
}

uint64_t sub_250DBE578()
{
  return sub_250DE8428();
}

uint64_t sub_250DBE580()
{
  return sub_250DE8604();
}

uint64_t sub_250DBE588()
{
  return sub_250DE8D14();
}

uint64_t sub_250DBE590@<X0>(char *a1@<X8>)
{
  return HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.init(rawValue:)(a1);
}

unint64_t sub_250DBE59C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_250DBE5C4(void *a1@<X8>)
{
  *a1 = &unk_2701E68C0;
}

void HKKeyValueDomain.setDismissedByHighlightAlertDate(_:)()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v3 = (void *)sub_250E246C0();
  char v4 = (void *)sub_250E24C30();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = ObjectType;
  v7[4] = sub_250DBEA80;
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = sub_250DBEA88;
  v7[3] = &block_descriptor_0;
  char v6 = _Block_copy(v7);
  swift_release();
  objc_msgSend(v1, sel_setDate_forKey_completion_, v3, v4, v6);
  _Block_release(v6);
}

void sub_250DBE6EC(char a1, void *a2)
{
  if (a1)
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_250E24950();
    __swift_project_value_buffer(v2, (uint64_t)qword_26B207A58);
    oslog = sub_250E24930();
    os_log_type_t v3 = sub_250E24F40();
    if (os_log_type_enabled(oslog, v3))
    {
      char v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v23 = v5;
      *(_DWORD *)char v4 = 136446210;
      uint64_t v6 = sub_250E25600();
      sub_250D8B44C(v6, v7, &v23);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250D84000, oslog, v3, "[%{public}s] Saved dismissal date", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v5, -1, -1);
      uint64_t v8 = (uint64_t)v4;
LABEL_17:
      MEMORY[0x25338A890](v8, -1, -1);

      return;
    }
  }
  else
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_250E24950();
    __swift_project_value_buffer(v10, (uint64_t)qword_26B207A58);
    id v11 = a2;
    id v12 = a2;
    oslog = sub_250E24930();
    os_log_type_t v13 = sub_250E24F40();
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v23 = v15;
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v16 = sub_250E25600();
      sub_250D8B44C(v16, v17, &v23);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      if (a2)
      {
        id v18 = a2;
        sub_250DBF0D4();
        uint64_t v19 = sub_250E24C80();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v19 = 7104878;
      }
      sub_250D8B44C(v19, v21, &v23);
      sub_250E24FC0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_250D84000, oslog, v13, "[%{public}s] Error saving dismissal date: %{public}s)", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v15, -1, -1);
      uint64_t v8 = v14;
      goto LABEL_17;
    }
  }
}

uint64_t sub_250DBEA70()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_250DBEA80(char a1, void *a2)
{
}

void sub_250DBEA88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t HKKeyValueDomain.resetValuesForAllKeys()()
{
  *(void *)(v1 + 120) = v0;
  return MEMORY[0x270FA2498](sub_250DBEB20, 0, 0);
}

uint64_t sub_250DBEB20()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_250DBEC18;
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_250DBEDAC;
  v0[13] = &block_descriptor_2;
  v0[14] = v2;
  objc_msgSend(v1, sel_setValueForAllKeys_completion_, 0, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_250DBEC18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 128) = v1;
  if (v1) {
    uint64_t v2 = sub_250DBED40;
  }
  else {
    uint64_t v2 = sub_250DBED28;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250DBED28()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_250DBED40()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_250DBEDAC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return MEMORY[0x270FA2408](a1);
  }
  if (!a3)
  {
    __break(1u);
    return MEMORY[0x270FA2408](a1);
  }
  sub_250DBF0D4();
  uint64_t v5 = swift_allocError();
  *id v6 = a3;
  id v7 = a3;

  return MEMORY[0x270FA2410](v3, v5);
}

id static HKKeyValueDomain.makeSyncedUnprotectedApplicationStateDomain(for:)(void *a1)
{
  id v2 = objc_allocWithZone(MEMORY[0x263F0A470]);
  id v3 = a1;
  uint64_t v4 = (void *)sub_250E24C30();
  id v5 = objc_msgSend(v2, sel_initWithCategory_domainName_healthStore_, 4, v4, v3);

  return v5;
}

unint64_t sub_250DBEED8()
{
  unint64_t result = qword_269B03AC0;
  if (!qword_269B03AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03AC0);
  }
  return result;
}

unint64_t sub_250DBEF30()
{
  unint64_t result = qword_269B03AC8;
  if (!qword_269B03AC8)
  {
    sub_250DBEF88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03AC8);
  }
  return result;
}

void sub_250DBEF88()
{
  if (!qword_269B03AD0)
  {
    unint64_t v0 = sub_250E24E30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03AD0);
    }
  }
}

unsigned char *_s40SleepingSampleChangeNotificationStateKeyOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DBF0ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unint64_t sub_250DBF0D4()
{
  unint64_t result = qword_26B207378;
  if (!qword_26B207378)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26B207378);
  }
  return result;
}

uint64_t SleepingSampleAggregate.quantity.getter()
{
  sub_250D91EB4();
  MEMORY[0x270FA5388](v1 - 8);
  int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SleepingSampleAggregate();
  sub_250D92830(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D922D0(0);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v5) == 1)
  {
    sub_250D91FF8((uint64_t)v3, (uint64_t (*)(void))sub_250D91EB4);
    return 0;
  }
  else
  {
    uint64_t v8 = sub_250E249B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  return v8;
}

BOOL SleepingSampleAggregate.Availability.couldResolveToValue.getter()
{
  return *v0 > 2u;
}

BOOL static SleepingSampleAggregate.Availability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleAggregate.Availability.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t sub_250DBF2E4(uint64_t a1)
{
  unint64_t v2 = sub_250D936C0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF320(uint64_t a1)
{
  unint64_t v2 = sub_250D936C0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DBF35C(uint64_t a1)
{
  unint64_t v2 = sub_250D93714();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF398(uint64_t a1)
{
  unint64_t v2 = sub_250D93714();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DBF3D4(uint64_t a1)
{
  unint64_t v2 = sub_250DC2B64();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF410(uint64_t a1)
{
  unint64_t v2 = sub_250DC2B64();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DBF44C(uint64_t a1)
{
  unint64_t v2 = sub_250DC2BB8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF488(uint64_t a1)
{
  unint64_t v2 = sub_250DC2BB8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DBF4C4(uint64_t a1)
{
  unint64_t v2 = sub_250DC2C0C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF500(uint64_t a1)
{
  unint64_t v2 = sub_250DC2C0C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DBF53C(uint64_t a1)
{
  unint64_t v2 = sub_250DC2C60();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DBF578(uint64_t a1)
{
  unint64_t v2 = sub_250DC2C60();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleAggregate.Availability.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleAggregate.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SleepingSampleAggregate.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 20);
  uint64_t v4 = sub_250E248B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SleepingSampleAggregate.sampleDateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregate();
  return sub_250D92830(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))sub_250D927FC);
}

uint64_t SleepingSampleAggregate.latestSampleCreationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregate();
  return sub_250D92830(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))sub_250D94D70);
}

uint64_t SleepingSampleAggregate.availability.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for SleepingSampleAggregate();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t SleepingSampleAggregate.sampleEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SleepingSampleAggregate();
  sub_250D92830(v1 + *(int *)(v6 + 28), (uint64_t)v5, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v7 = sub_250E243F0();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    sub_250D91FF8((uint64_t)v5, (uint64_t (*)(void))sub_250D927FC);
    uint64_t v9 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    sub_250E243B0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    uint64_t v11 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
}

uint64_t SleepingSampleAggregate.init(morningIndex:gregorianCalendar:quantity:sampleDateInterval:latestSampleCreationDate:availability:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v26 = *a6;
  uint64_t v15 = sub_250E24B20();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v25 = a1;
  v17(a7, a1, v15);
  id v18 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v19 = a7 + v18[5];
  uint64_t v20 = sub_250E248B0();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, a2, v20);
  if (a3)
  {
    sub_250DB2068();
    a3 = a3;
    sub_250E249E0();
    sub_250D922D0(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v14, 0, 1, v22);
  }
  else
  {
    sub_250D922D0(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v14, 1, 1, v23);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a2, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v25, v15);

  sub_250D91DE4((uint64_t)v14, a7 + v18[6], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91DE4(v27, a7 + v18[7], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91DE4(v28, a7 + v18[8], (uint64_t (*)(void))sub_250D94D70);
  *(unsigned char *)(a7 + v18[9]) = v26;
  return result;
}

uint64_t SleepingSampleAggregate.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_250E24710();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v34 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_250E243F0();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D922D0(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v16 - 8);
  id v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24B20();
  sub_250D91C84(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  uint64_t v19 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_250E248B0();
  sub_250D91C84(&qword_269B03900, MEMORY[0x263F07920]);
  sub_250E24B70();
  sub_250D92830(v0 + v19[6], (uint64_t)v18, (uint64_t (*)(void))sub_250D91EB4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_250D92830(v0 + v19[7], (uint64_t)v10, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v21 = v32;
  uint64_t v20 = v33;
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v33);
  uint64_t v24 = v35;
  uint64_t v23 = v36;
  if (v22 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v25 = v30;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v30, v10, v20);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  }
  uint64_t v26 = v34;
  sub_250D92830(v1 + v19[8], v34, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v23) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v31, v26, v23);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
  return sub_250E254C0();
}

uint64_t sub_250DC0264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DC4A34(a1, a2);
  *a3 = result;
  return result;
}

void sub_250DC028C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_250DC0298(uint64_t a1)
{
  unint64_t v2 = sub_250D927A8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DC02D4(uint64_t a1)
{
  unint64_t v2 = sub_250D927A8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleAggregate.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_250E24710();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v32 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_250E243F0();
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D922D0(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v16 - 8);
  id v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E254B0();
  sub_250E24B20();
  sub_250D91C84(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  uint64_t v19 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_250E248B0();
  sub_250D91C84(&qword_269B03900, MEMORY[0x263F07920]);
  sub_250E24B70();
  sub_250D92830(v0 + v19[6], (uint64_t)v18, (uint64_t (*)(void))sub_250D91EB4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_250D92830(v0 + v19[7], (uint64_t)v10, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v20 = v31;
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v6);
  uint64_t v23 = v33;
  uint64_t v22 = v34;
  if (v21 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v29, v10, v6);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v6);
  }
  uint64_t v25 = v32;
  sub_250D92830(v1 + v19[8], v32, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v22) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v26 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v30, v25, v22);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DC0938(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = sub_250E24710();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v36 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E243F0();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v19 - 8);
  int v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24B20();
  sub_250D91C84(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  sub_250E248B0();
  sub_250D91C84(&qword_269B03900, MEMORY[0x263F07920]);
  sub_250E24B70();
  sub_250D92830(v2 + a2[6], (uint64_t)v21, (uint64_t (*)(void))sub_250D91EB4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  sub_250D92830(v2 + a2[7], (uint64_t)v13, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v23 = v34;
  uint64_t v22 = v35;
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v35);
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  if (v24 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v27 = v32;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v32, v13, v22);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  }
  uint64_t v28 = v36;
  sub_250D92830(v4 + a2[8], v36, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v25) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v29 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v33, v28, v25);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  }
  return sub_250E254C0();
}

uint64_t sub_250DC0F44(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = sub_250E24710();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v34 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_250E243F0();
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v19 - 8);
  int v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E254B0();
  sub_250E24B20();
  sub_250D91C84(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  sub_250E248B0();
  sub_250D91C84(&qword_269B03900, MEMORY[0x263F07920]);
  sub_250E24B70();
  sub_250D92830(v2 + a2[6], (uint64_t)v21, (uint64_t (*)(void))sub_250D91EB4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    sub_250E254D0();
    sub_250DB8E24((unint64_t *)&qword_269B038B8, (void (*)(void))sub_250DB6F7C);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  sub_250D92830(v2 + a2[7], (uint64_t)v13, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v22 = v33;
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v9);
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  if (v23 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v31, v13, v9);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v9);
  }
  uint64_t v27 = v34;
  sub_250D92830(v4 + a2[8], v34, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v24) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v28 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v32, v27, v24);
    sub_250E254D0();
    sub_250D91C84(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t SleepingSampleAggregate.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_250E24710();
  uint64_t v53 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v51 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v52 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_250E24670();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_250E246A0();
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  unint64_t v45 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DC2CB4();
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v44 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250E248E0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = 0;
  unint64_t v58 = 0xE000000000000000;
  sub_250E250E0();
  sub_250E24CE0();
  sub_250E24CE0();
  uint64_t v55 = sub_250E24AE0();
  sub_250E253D0();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  int v21 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_250E24890();
  sub_250E248D0();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  sub_250D92830(v0 + v21[6], (uint64_t)v16, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D922D0(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v16, 1, v22) == 1)
  {
    sub_250D91FF8((uint64_t)v16, (uint64_t (*)(void))sub_250D91EB4);
  }
  else
  {
    uint64_t v25 = (void *)sub_250E249B0();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v23);
    uint64_t v26 = sub_250E21E90();
    unint64_t v28 = v27;

    uint64_t v55 = v26;
    unint64_t v56 = v28;
    sub_250E24C80();
  }
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  sub_250D92830(v1 + v21[7], (uint64_t)v13, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v29 = sub_250E243F0();
  uint64_t v30 = *(void *)(v29 - 8);
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v13, 1, v29);
  uint64_t v33 = v53;
  uint64_t v32 = v54;
  if (v31 == 1)
  {
    sub_250D91FF8((uint64_t)v13, (uint64_t (*)(void))sub_250D927FC);
  }
  else
  {
    uint64_t v34 = v44;
    DateInterval.range.getter(v44);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v29);
    uint64_t v35 = v45;
    sub_250E24650();
    uint64_t v36 = v47;
    sub_250E24660();
    uint64_t v37 = sub_250E24F10();
    unint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v48);
    sub_250D91FF8((uint64_t)v34, (uint64_t (*)(void))sub_250DC2CB4);
    uint64_t v55 = v37;
    unint64_t v56 = v39;
    sub_250E24C80();
  }
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  uint64_t v40 = v52;
  sub_250D92830(v1 + v21[8], v52, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v40, 1, v32) != 1)
  {
    uint64_t v41 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v51, v40, v32);
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    sub_250E250E0();
    swift_bridgeObjectRelease();
    uint64_t v55 = 0xD00000000000001ALL;
    unint64_t v56 = 0x8000000250E2CEA0;
    sub_250D91C84(&qword_269B03AE0, MEMORY[0x263F07490]);
    sub_250E253D0();
    sub_250E24CE0();
    swift_bridgeObjectRelease();
    sub_250E24CE0();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v32);
  }
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  LOBYTE(v55) = *(unsigned char *)(v1 + v21[9]);
  sub_250E251F0();
  sub_250E24CE0();
  return v57;
}

BOOL _s13HealthBalance23SleepingSampleAggregateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = sub_250E24710();
  uint64_t v96 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v89 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D88F14(0);
  uint64_t v91 = v5;
  MEMORY[0x270FA5388](v5);
  id v98 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  id v97 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v94 = (uint64_t)&v83 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v95 = (uint64_t)&v83 - v12;
  uint64_t v102 = sub_250E243F0();
  uint64_t v100 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v90 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DC4CF4(0);
  uint64_t v99 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v101 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v93 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v104 = (uint64_t)&v83 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v103 = (uint64_t)&v83 - v21;
  sub_250D922D0(0);
  uint64_t v105 = *((void *)v22 - 1);
  unint64_t v106 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB8DC0();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v25);
  unint64_t v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  uint64_t v35 = (char *)&v83 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v83 - v36;
  sub_250E24B20();
  sub_250D91C84(&qword_26B2075B0, MEMORY[0x263F090E8]);
  sub_250E24FF0();
  if (v107) {
    return 0;
  }
  char v87 = v37;
  uint64_t v88 = v35;
  uint64_t v86 = v32;
  id v85 = v24;
  unint64_t v38 = v106;
  unint64_t v39 = (int *)type metadata accessor for SleepingSampleAggregate();
  if ((MEMORY[0x253389430](a1 + v39[5], a2 + v39[5]) & 1) == 0) {
    return 0;
  }
  uint64_t v40 = v39[6];
  uint64_t v83 = a1;
  uint64_t v41 = (uint64_t)v87;
  sub_250D92830(a1 + v40, (uint64_t)v87, (uint64_t (*)(void))sub_250D91EB4);
  uint64_t v42 = v39[6];
  uint64_t v84 = a2;
  uint64_t v43 = (uint64_t)v88;
  sub_250D92830(a2 + v42, (uint64_t)v88, (uint64_t (*)(void))sub_250D91EB4);
  uint64_t v44 = (uint64_t)&v28[*(int *)(v26 + 48)];
  sub_250D92830(v41, (uint64_t)v28, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D92830(v43, v44, (uint64_t (*)(void))sub_250D91EB4);
  uint64_t v45 = v105;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v105 + 48);
  if (v46((uint64_t)v28, 1, v38) == 1)
  {
    sub_250D91FF8(v43, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D91FF8(v41, (uint64_t (*)(void))sub_250D91EB4);
    if (v46(v44, 1, v38) == 1)
    {
      sub_250D91FF8((uint64_t)v28, (uint64_t (*)(void))sub_250D91EB4);
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v48 = (uint64_t (*)(void))sub_250DB8DC0;
    uint64_t v49 = (uint64_t)v28;
LABEL_23:
    sub_250D91FF8(v49, v48);
    return 0;
  }
  uint64_t v47 = (uint64_t)v86;
  sub_250D92830((uint64_t)v28, (uint64_t)v86, (uint64_t (*)(void))sub_250D91EB4);
  if (v46(v44, 1, v38) == 1)
  {
    sub_250D91FF8((uint64_t)v88, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D91FF8(v41, (uint64_t (*)(void))sub_250D91EB4);
    (*(void (**)(uint64_t, int *))(v45 + 8))(v47, v38);
    goto LABEL_8;
  }
  uint64_t v50 = v41;
  uint64_t v51 = v85;
  (*(void (**)(char *, uint64_t, int *))(v45 + 32))(v85, v44, v38);
  sub_250DB8E24((unint64_t *)&qword_269B03A70, (void (*)(void))sub_250DB8E90);
  char v52 = sub_250E24BF0();
  uint64_t v53 = *(void (**)(char *, int *))(v45 + 8);
  v53(v51, v38);
  sub_250D91FF8((uint64_t)v88, (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91FF8(v50, (uint64_t (*)(void))sub_250D91EB4);
  v53((char *)v47, v38);
  sub_250D91FF8((uint64_t)v28, (uint64_t (*)(void))sub_250D91EB4);
  if ((v52 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v54 = v103;
  sub_250D92830(v83 + v39[7], v103, (uint64_t (*)(void))sub_250D927FC);
  unint64_t v106 = v39;
  uint64_t v55 = v104;
  sub_250D92830(v84 + v39[7], v104, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v56 = v101;
  uint64_t v57 = v101 + *(int *)(v99 + 48);
  sub_250D92830(v54, v101, (uint64_t (*)(void))sub_250D927FC);
  sub_250D92830(v55, v57, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v58 = v100;
  unint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  uint64_t v60 = v102;
  if (v59(v56, 1, v102) != 1)
  {
    uint64_t v65 = v93;
    sub_250D92830(v56, v93, (uint64_t (*)(void))sub_250D927FC);
    int v66 = v59(v57, 1, v60);
    uint64_t v62 = (uint64_t)v98;
    if (v66 != 1)
    {
      unint64_t v67 = v97;
      int64_t v68 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v90, v57, v60);
      sub_250D91C84(&qword_269B03B10, MEMORY[0x263F062D0]);
      char v69 = sub_250E24BF0();
      uint64_t v70 = *(void (**)(char *, uint64_t))(v58 + 8);
      v70(v68, v60);
      sub_250D91FF8(v104, (uint64_t (*)(void))sub_250D927FC);
      sub_250D91FF8(v103, (uint64_t (*)(void))sub_250D927FC);
      uint64_t v71 = v65;
      uint64_t v63 = (uint64_t)v67;
      uint64_t v64 = v96;
      v70((char *)v71, v60);
      sub_250D91FF8(v56, (uint64_t (*)(void))sub_250D927FC);
      if ((v69 & 1) == 0) {
        return 0;
      }
      goto LABEL_17;
    }
    sub_250D91FF8(v104, (uint64_t (*)(void))sub_250D927FC);
    sub_250D91FF8(v54, (uint64_t (*)(void))sub_250D927FC);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v65, v60);
    goto LABEL_15;
  }
  sub_250D91FF8(v55, (uint64_t (*)(void))sub_250D927FC);
  sub_250D91FF8(v54, (uint64_t (*)(void))sub_250D927FC);
  int v61 = v59(v57, 1, v60);
  uint64_t v63 = (uint64_t)v97;
  uint64_t v62 = (uint64_t)v98;
  uint64_t v64 = v96;
  if (v61 != 1)
  {
LABEL_15:
    uint64_t v48 = (uint64_t (*)(void))sub_250DC4CF4;
    uint64_t v49 = v56;
    goto LABEL_23;
  }
  sub_250D91FF8(v56, (uint64_t (*)(void))sub_250D927FC);
LABEL_17:
  uint64_t v72 = v106;
  uint64_t v73 = v83;
  uint64_t v74 = v95;
  sub_250D92830(v83 + v106[8], v95, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v75 = v94;
  sub_250D92830(v84 + v72[8], v94, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v76 = v62 + *(int *)(v91 + 48);
  sub_250D92830(v74, v62, (uint64_t (*)(void))sub_250D94D70);
  sub_250D92830(v75, v76, (uint64_t (*)(void))sub_250D94D70);
  char v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  uint64_t v78 = v92;
  if (v77(v62, 1, v92) == 1)
  {
    sub_250D91FF8(v75, (uint64_t (*)(void))sub_250D94D70);
    sub_250D91FF8(v74, (uint64_t (*)(void))sub_250D94D70);
    if (v77(v76, 1, v78) == 1)
    {
      sub_250D91FF8(v62, (uint64_t (*)(void))sub_250D94D70);
      return *(unsigned __int8 *)(v73 + v106[9]) == *(unsigned __int8 *)(v84 + v106[9]);
    }
    goto LABEL_22;
  }
  sub_250D92830(v62, v63, (uint64_t (*)(void))sub_250D94D70);
  if (v77(v76, 1, v78) == 1)
  {
    sub_250D91FF8(v94, (uint64_t (*)(void))sub_250D94D70);
    sub_250D91FF8(v95, (uint64_t (*)(void))sub_250D94D70);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v78);
LABEL_22:
    uint64_t v48 = (uint64_t (*)(void))sub_250D88F14;
    uint64_t v49 = v62;
    goto LABEL_23;
  }
  uint64_t v80 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v89, v76, v78);
  sub_250D91C84(&qword_269B03B08, MEMORY[0x263F07490]);
  char v81 = sub_250E24BF0();
  unint64_t v82 = *(void (**)(char *, uint64_t))(v64 + 8);
  v82(v80, v78);
  sub_250D91FF8(v94, (uint64_t (*)(void))sub_250D94D70);
  sub_250D91FF8(v95, (uint64_t (*)(void))sub_250D94D70);
  v82((char *)v63, v78);
  sub_250D91FF8(v62, (uint64_t (*)(void))sub_250D94D70);
  if (v81) {
    return *(unsigned __int8 *)(v73 + v106[9]) == *(unsigned __int8 *)(v84 + v106[9]);
  }
  return 0;
}

unint64_t sub_250DC2B64()
{
  unint64_t result = qword_26B207FF8;
  if (!qword_26B207FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FF8);
  }
  return result;
}

unint64_t sub_250DC2BB8()
{
  unint64_t result = qword_26B208010;
  if (!qword_26B208010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208010);
  }
  return result;
}

unint64_t sub_250DC2C0C()
{
  unint64_t result = qword_26B207FE0;
  if (!qword_26B207FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FE0);
  }
  return result;
}

unint64_t sub_250DC2C60()
{
  unint64_t result = qword_26B207FB0;
  if (!qword_26B207FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FB0);
  }
  return result;
}

void sub_250DC2CB4()
{
  if (!qword_269B03AD8)
  {
    sub_250E24710();
    sub_250D91C84((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
    unint64_t v0 = sub_250E24F20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03AD8);
    }
  }
}

unint64_t sub_250DC2D4C()
{
  unint64_t result = qword_269B03AE8;
  if (!qword_269B03AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03AE8);
  }
  return result;
}

uint64_t sub_250DC2DA0()
{
  return sub_250D91C84(&qword_269B03AF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregate);
}

void *initializeBufferWithCopyOfBuffer for SleepingSampleAggregate(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    sub_250D922D0(0);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      sub_250D91EB4();
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_250E243F0();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_250D927FC(0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)a1 + v26;
    unint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = sub_250E24710();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      sub_250D94D70(0);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t assignWithCopy for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v12, v13, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v12, v13, v15);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_250E243F0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_250D927FC(0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = a3[8];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = sub_250E24710();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    sub_250D94D70(0);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v12, v13, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  uint64_t v18 = a3[7];
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_250E243F0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_250D927FC(0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = sub_250E24710();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_250D94D70(0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  sub_250D922D0(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v12, v13, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_250D91EB4();
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v12, v13, v15);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_250E243F0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_250D927FC(0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = a3[8];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = sub_250E24710();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    sub_250D94D70(0);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAggregate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DC3E64);
}

uint64_t sub_250DC3E64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = sub_250E248B0();
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      sub_250D91EB4();
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
      {
        uint64_t v8 = v14;
        uint64_t v12 = *(void *)(v14 - 8);
        uint64_t v13 = a3[6];
      }
      else
      {
        sub_250D927FC(0);
        if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
        {
          uint64_t v8 = v15;
          uint64_t v12 = *(void *)(v15 - 8);
          uint64_t v13 = a3[7];
        }
        else
        {
          sub_250D94D70(0);
          if (*(_DWORD *)(*(void *)(v16 - 8) + 84) != a2)
          {
            unsigned int v18 = *(unsigned __int8 *)(a1 + a3[9]);
            if (v18 >= 5) {
              return v18 - 4;
            }
            else {
              return 0;
            }
          }
          uint64_t v8 = v16;
          uint64_t v12 = *(void *)(v16 - 8);
          uint64_t v13 = a3[8];
        }
      }
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DC406C);
}

void sub_250DC406C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_250E248B0();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      sub_250D91EB4();
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        sub_250D927FC(0);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[7];
        }
        else
        {
          sub_250D94D70(0);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) != a3)
          {
            *(unsigned char *)(a1 + a4[9]) = a2 + 4;
            return;
          }
          uint64_t v10 = v18;
          uint64_t v14 = *(void *)(v18 - 8);
          uint64_t v15 = a4[8];
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  v11(v12, a2, a2, v10);
}

void sub_250DC4260()
{
  sub_250E24B20();
  if (v0 <= 0x3F)
  {
    sub_250E248B0();
    if (v1 <= 0x3F)
    {
      sub_250D91EB4();
      if (v2 <= 0x3F)
      {
        sub_250D927FC(319);
        if (v3 <= 0x3F)
        {
          sub_250D94D70(319);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability()
{
  return &type metadata for SleepingSampleAggregate.Availability;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.CodingKeys()
{
  return &type metadata for SleepingSampleAggregate.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.CodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.NoDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys;
}

unint64_t sub_250DC44B8()
{
  unint64_t result = qword_269B03AF8;
  if (!qword_269B03AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03AF8);
  }
  return result;
}

unint64_t sub_250DC4510()
{
  unint64_t result = qword_269B03B00;
  if (!qword_269B03B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B00);
  }
  return result;
}

unint64_t sub_250DC4568()
{
  unint64_t result = qword_26B207F90;
  if (!qword_26B207F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F90);
  }
  return result;
}

unint64_t sub_250DC45C0()
{
  unint64_t result = qword_26B207F88;
  if (!qword_26B207F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207F88);
  }
  return result;
}

unint64_t sub_250DC4618()
{
  unint64_t result = qword_26B207FA8;
  if (!qword_26B207FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FA8);
  }
  return result;
}

unint64_t sub_250DC4670()
{
  unint64_t result = qword_26B207FA0;
  if (!qword_26B207FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FA0);
  }
  return result;
}

unint64_t sub_250DC46C8()
{
  unint64_t result = qword_26B207FC0;
  if (!qword_26B207FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FC0);
  }
  return result;
}

unint64_t sub_250DC4720()
{
  unint64_t result = qword_26B207FB8;
  if (!qword_26B207FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FB8);
  }
  return result;
}

unint64_t sub_250DC4778()
{
  unint64_t result = qword_26B207FF0;
  if (!qword_26B207FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FF0);
  }
  return result;
}

unint64_t sub_250DC47D0()
{
  unint64_t result = qword_26B207FE8;
  if (!qword_26B207FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FE8);
  }
  return result;
}

unint64_t sub_250DC4828()
{
  unint64_t result = qword_26B208020;
  if (!qword_26B208020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208020);
  }
  return result;
}

unint64_t sub_250DC4880()
{
  unint64_t result = qword_26B208018;
  if (!qword_26B208018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208018);
  }
  return result;
}

unint64_t sub_250DC48D8()
{
  unint64_t result = qword_26B208008;
  if (!qword_26B208008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208008);
  }
  return result;
}

unint64_t sub_250DC4930()
{
  unint64_t result = qword_26B208000;
  if (!qword_26B208000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208000);
  }
  return result;
}

unint64_t sub_250DC4988()
{
  unint64_t result = qword_26B207FD8;
  if (!qword_26B207FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FD8);
  }
  return result;
}

unint64_t sub_250DC49E0()
{
  unint64_t result = qword_26B207FD0;
  if (!qword_26B207FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B207FD0);
  }
  return result;
}

uint64_t sub_250DC4A34(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000250E2CF00 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469746E617571 && a2 == 0xEF72657070617257 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000250E2CF20 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000250E2CF40 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void sub_250DC4CF4(uint64_t a1)
{
}

HealthBalance::SleepingSampleDaySummaryDescription __swiftcall SleepingSampleDaySummaryDescription.init(rawValue:)(HealthBalance::SleepingSampleDaySummaryDescription rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void *sub_250DC4D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  BOOL v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  unint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_250DCF6F4(0, v3[2] + 1, 1, v3);
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        unint64_t v3 = sub_250DCF6F4((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      v3[2] = v8 + 1;
      unint64_t v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t SleepingSampleDaySummaryDescription.rawValue.getter()
{
  return *(void *)v0;
}

void static SleepingSampleDaySummaryDescription.unavailable.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static SleepingSampleDaySummaryDescription.noChanges.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SleepingSampleDaySummaryDescription.heartRateHigh.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static SleepingSampleDaySummaryDescription.heartRateLow.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static SleepingSampleDaySummaryDescription.respiratoryRateHigh.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static SleepingSampleDaySummaryDescription.respiratoryRateLow.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static SleepingSampleDaySummaryDescription.bloodOxygenLow.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static SleepingSampleDaySummaryDescription.wristTemperatureHigh.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static SleepingSampleDaySummaryDescription.timeAsleepHigh.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static SleepingSampleDaySummaryDescription.timeAsleepLow.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static SleepingSampleDaySummaryDescription.baselineRefinement.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static SleepingSampleDaySummaryDescription.menstrualCycle.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static SleepingSampleDaySummaryDescription.strenuousExercise.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

void static SleepingSampleDaySummaryDescription.elevationGain.getter(void *a1@<X8>)
{
  *a1 = 4096;
}

void *sub_250DC4ECC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_250DC4ED8()
{
  return sub_250E24D90();
}

uint64_t sub_250DC4F38()
{
  return sub_250E24D80();
}

void sub_250DC4F88(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_250DC4F90@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_250DC4FA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_250DC4FB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_250DC4FCC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_250DC4FFC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_250DC5028@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_250DC504C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_250DC5060(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_250DC5074(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_250DC5088@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_250DC509C(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_250DC50B0(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_250DC50C4(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_250DC50D8()
{
  return *v0 == 0;
}

uint64_t sub_250DC50E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_250DC5100(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL SleepingSampleDaySummaryDescription.hasHeartRateChanges.getter()
{
  return (*v0 & 6) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasRespiratoryRateChanges.getter()
{
  return (*v0 & 0x18) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasTimeAsleepChanges.getter()
{
  return (*v0 & 0x180) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasAllMetricChanges.getter()
{
  if ((*v0 & 0x180) == 0 || (*v0 & 6) == 0 || (*v0 & 0x18) == 0) {
    return 0;
  }
  uint64_t v4 = unk_2701E6910;
  if ((unk_2701E6910 & ~qword_2701E6908) == 0) {
    uint64_t v4 = 0;
  }
  return ((v4 | qword_2701E6908) & ~*v0) == 0;
}

uint64_t static SleepingSampleDaySummaryDescription.makeDescription(for:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v20 - v7;
  int v21 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    while (1)
    {
      if (v9 >= qword_2701E6928)
      {
        __break(1u);
        JUMPOUT(0x250DC5418);
      }
      uint64_t v12 = *((char *)&unk_2701E6918 + v9 + 32);
      uint64_t v13 = *(void *)&asc_250E28C68[8 * v12];
      uint64_t v14 = type metadata accessor for SleepingSampleDaySummary();
      sub_250DC5440(a1 + *(int *)(v14 + 4 * v13), (uint64_t)v8);
      sub_250DC5440((uint64_t)v8, (uint64_t)v6);
      SleepingSampleBaselineComparison.relativeComparison.getter();
      if (v15)
      {
        sub_250DC54A4((uint64_t)v6);
        uint64_t result = sub_250DC54A4((uint64_t)v8);
        goto LABEL_3;
      }
      if (HKCompareDoubles() == -1) {
        break;
      }
      uint64_t v16 = HKCompareDoubles();
      sub_250DC54A4((uint64_t)v6);
      uint64_t result = sub_250DC54A4((uint64_t)v8);
      if (v16 == 1)
      {
        switch((char)v12)
        {
          case 1:
            v10 |= 8uLL;
            break;
          case 2:
            goto LABEL_3;
          case 3:
            v10 |= 0x40uLL;
            break;
          case 4:
            v10 |= 0x80uLL;
            break;
          default:
            v10 |= 2uLL;
            break;
        }
        goto LABEL_3;
      }
      int v21 = 1;
      if (v9++ == 4) {
        goto LABEL_22;
      }
    }
    sub_250DC54A4((uint64_t)v6);
    uint64_t result = sub_250DC54A4((uint64_t)v8);
    switch((char)v12)
    {
      case 1:
        v10 |= 0x10uLL;
        break;
      case 2:
        v10 |= 0x20uLL;
        break;
      case 3:
        break;
      case 4:
        v10 |= 0x100uLL;
        break;
      default:
        v10 |= 4uLL;
        break;
    }
LABEL_3:
    ++v9;
  }
  while (v9 != 5);
  if ((v21 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_22:
  if (v10 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v10;
  }
  uint64_t result = SleepingSampleDaySummary.hasAnyBaselinesInRefinement.getter();
  if (result) {
    unint64_t v10 = v18 | 0x200;
  }
  else {
    unint64_t v10 = v18;
  }
LABEL_28:
  uint64_t v19 = a1 + *(int *)(v14 + 28);
  if ((*(unsigned char *)(v19 + 8) & 1) == 0) {
    v10 |= (unint64_t)(*(_DWORD *)v19 & 7) << 10;
  }
  unint64_t *v20 = v10;
  return result;
}

uint64_t sub_250DC5440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DC54A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250DC5500(char a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0x40) == 0)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    if ((v3 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v4 = sub_250DCF6F4(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  uint64_t v7 = &v4[2 * v6];
  v7[4] = 0xD000000000000016;
  v7[5] = 0x8000000250E2D0F0;
  if ((v3 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
    }
    unint64_t v9 = v4[2];
    unint64_t v8 = v4[3];
    if (v9 >= v8 >> 1) {
      uint64_t v4 = sub_250DCF6F4((void *)(v8 > 1), v9 + 1, 1, v4);
    }
    v4[2] = v9 + 1;
    unint64_t v10 = &v4[2 * v9];
    v10[4] = 0xD000000000000018;
    v10[5] = 0x8000000250E2D0D0;
  }
LABEL_12:
  if ((v3 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
    }
    unint64_t v12 = v4[2];
    unint64_t v11 = v4[3];
    if (v12 >= v11 >> 1) {
      uint64_t v4 = sub_250DCF6F4((void *)(v11 > 1), v12 + 1, 1, v4);
    }
    v4[2] = v12 + 1;
    uint64_t v13 = &v4[2 * v12];
    v13[4] = 0xD000000000000017;
    v13[5] = 0x8000000250E2D0B0;
    if ((v3 & 8) == 0)
    {
LABEL_14:
      if ((v3 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
  }
  unint64_t v15 = v4[2];
  unint64_t v14 = v4[3];
  if (v15 >= v14 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v14 > 1), v15 + 1, 1, v4);
  }
  v4[2] = v15 + 1;
  uint64_t v16 = &v4[2 * v15];
  v16[4] = 0xD000000000000015;
  v16[5] = 0x8000000250E2D090;
  if ((v3 & 0x10) == 0)
  {
LABEL_15:
    if ((v3 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_30:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
  }
  unint64_t v18 = v4[2];
  unint64_t v17 = v4[3];
  if (v18 >= v17 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v17 > 1), v18 + 1, 1, v4);
  }
  v4[2] = v18 + 1;
  uint64_t v19 = &v4[2 * v18];
  v19[4] = 0xD000000000000014;
  v19[5] = 0x8000000250E2D070;
  if ((v3 & 0x20) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_35:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
  }
  unint64_t v21 = v4[2];
  unint64_t v20 = v4[3];
  if (v21 >= v20 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v20 > 1), v21 + 1, 1, v4);
  }
  v4[2] = v21 + 1;
  uint64_t v22 = &v4[2 * v21];
  v22[4] = 0xD000000000000010;
  v22[5] = 0x8000000250E2D050;
  if ((v3 & 0x80) == 0)
  {
LABEL_17:
    if ((v3 & 0x100) == 0) {
      goto LABEL_18;
    }
LABEL_45:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
    }
    unint64_t v27 = v4[2];
    unint64_t v26 = v4[3];
    if (v27 >= v26 >> 1) {
      uint64_t v4 = sub_250DCF6F4((void *)(v26 > 1), v27 + 1, 1, v4);
    }
    v4[2] = v27 + 1;
    int v28 = &v4[2 * v27];
    v28[4] = 0x4C53415F454D4954;
    v28[5] = 0xEF574F4C5F504545;
    if ((a1 & 1) == 0) {
      goto LABEL_69;
    }
    goto LABEL_50;
  }
LABEL_40:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
  }
  unint64_t v24 = v4[2];
  unint64_t v23 = v4[3];
  if (v24 >= v23 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v23 > 1), v24 + 1, 1, v4);
  }
  v4[2] = v24 + 1;
  uint64_t v25 = &v4[2 * v24];
  v25[4] = 0xD000000000000010;
  v25[5] = 0x8000000250E2D030;
  if ((v3 & 0x100) != 0) {
    goto LABEL_45;
  }
LABEL_18:
  if ((a1 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_50:
  if ((v3 & 0x400) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
    }
    unint64_t v30 = v4[2];
    unint64_t v29 = v4[3];
    if (v30 >= v29 >> 1) {
      uint64_t v4 = sub_250DCF6F4((void *)(v29 > 1), v30 + 1, 1, v4);
    }
    v4[2] = v30 + 1;
    uint64_t v31 = &v4[2 * v30];
    v31[4] = 0x41555254534E454DLL;
    v31[5] = 0xEF454C4359435F4CLL;
    if ((v3 & 0x800) == 0)
    {
LABEL_52:
      if ((v3 & 0x1000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
  }
  else if ((v3 & 0x800) == 0)
  {
    goto LABEL_52;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
  }
  unint64_t v33 = v4[2];
  unint64_t v32 = v4[3];
  if (v33 >= v32 >> 1) {
    uint64_t v4 = sub_250DCF6F4((void *)(v32 > 1), v33 + 1, 1, v4);
  }
  v4[2] = v33 + 1;
  uint64_t v34 = &v4[2 * v33];
  v34[4] = 0xD000000000000012;
  v34[5] = 0x8000000250E2D010;
  if ((v3 & 0x1000) != 0)
  {
LABEL_64:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_250DCF6F4(0, v4[2] + 1, 1, v4);
    }
    unint64_t v36 = v4[2];
    unint64_t v35 = v4[3];
    if (v36 >= v35 >> 1) {
      uint64_t v4 = sub_250DCF6F4((void *)(v35 > 1), v36 + 1, 1, v4);
    }
    v4[2] = v36 + 1;
    int v37 = (char *)&v4[2 * v36];
    strcpy(v37 + 32, "ELEVATION_GAIN");
    v37[47] = -18;
  }
LABEL_69:
  sub_250DC66F8(0, &qword_269B03B48, MEMORY[0x263F8D488]);
  sub_250DC6748();
  uint64_t v38 = sub_250E24B80();
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t SleepingSampleDaySummaryDescription.primaryBodyKey.getter()
{
  strcpy((char *)v1, "PRIMARY_BODY_");
  sub_250DC5500(0);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  return v1[0];
}

unint64_t SleepingSampleDaySummaryDescription.secondaryCauseKey.getter()
{
  return 0xD000000000000010;
}

uint64_t SleepingSampleDaySummaryDescription.primaryBody.getter()
{
  uint64_t v1 = sub_250E247F0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_250E24C10();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)v14 - v7;
  if (!*v0) {
    return 0;
  }
  unint64_t v9 = *v0 & 0xFFFFFFFFFFFFFDFFLL;
  if (v9 > 1)
  {
    strcpy((char *)v15, "PRIMARY_BODY_");
    v15[7] = -4864;
    v14[1] = v9;
    sub_250DC5500(0);
    sub_250E24CE0();
    swift_bridgeObjectRelease();
  }
  sub_250E24C00();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  unint64_t v10 = (void *)sub_250E24C30();
  id v11 = objc_msgSend(self, sel_bundleWithIdentifier_, v10);

  sub_250E247E0();
  uint64_t v12 = sub_250E24C70();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v12;
}

uint64_t SleepingSampleDaySummaryDescription.secondaryCause.getter()
{
  uint64_t v1 = sub_250E247F0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_250E24C10();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)v17 - v7;
  uint64_t v9 = *v0;
  if (!*v0) {
    return 0;
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFDFFLL;
  if ((v9 & 0x180) == 0 || (v9 & 6) == 0 || (v9 & 0x18) == 0) {
    goto LABEL_10;
  }
  uint64_t v11 = unk_2701E6990;
  if ((unk_2701E6990 & ~qword_2701E6988) == 0) {
    uint64_t v11 = 0;
  }
  if (((v11 | qword_2701E6988) & ~v10) != 0)
  {
LABEL_10:
    uint64_t v13 = unk_2701E69C0;
    if ((unk_2701E69C0 & ~qword_2701E69B8) == 0) {
      uint64_t v13 = 0;
    }
    v10 &= ~(v13 | qword_2701E69B8);
    if (v10 < 2) {
      return 0;
    }
LABEL_13:
    unint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    sub_250E250E0();
    swift_bridgeObjectRelease();
    unint64_t v18 = 0xD000000000000010;
    unint64_t v19 = 0x8000000250E2CF60;
    v17[1] = v10;
    sub_250DC5500(1);
    sub_250E24CE0();
    swift_bridgeObjectRelease();
    sub_250E24C00();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    unint64_t v14 = (void *)sub_250E24C30();
    id v15 = objc_msgSend(self, sel_bundleWithIdentifier_, v14);

    sub_250E247E0();
    uint64_t v12 = sub_250E24C70();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return v12;
  }
  if (v10 >= 2) {
    goto LABEL_13;
  }
  return 0;
}

uint64_t SleepingSampleDaySummaryDescription.quaternaryRefinementDisclaimer.getter()
{
  uint64_t v1 = sub_250E247F0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_250E24C10();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = &v13[-v7];
  uint64_t v9 = 0;
  if ((*(unsigned char *)(v0 + 1) & 2) != 0)
  {
    sub_250E24C00();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v6, v8, v2);
    unint64_t v10 = (void *)sub_250E24C30();
    id v11 = objc_msgSend(self, sel_bundleWithIdentifier_, v10);

    sub_250E247E0();
    uint64_t v9 = sub_250E24C70();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v9;
}

void *SleepingSampleDaySummaryDescription.notificationSupplementaryParagraphs.getter()
{
  return sub_250DC6490(SleepingSampleDaySummaryDescription.secondaryCause.getter);
}

void *SleepingSampleDaySummaryDescription.notificationRefinementParagraphs.getter()
{
  return sub_250DC6490(SleepingSampleDaySummaryDescription.quaternaryRefinementDisclaimer.getter);
}

void *sub_250DC6490(uint64_t (*a1)(void))
{
  sub_250DC6514();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_250E264E0;
  *(void *)(inited + 32) = a1();
  *(void *)(inited + 40) = v3;
  uint64_t v4 = sub_250DC4D1C(inited);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_250DC6514()
{
  if (!qword_269B03B18)
  {
    sub_250DC66F8(255, &qword_269B03B20, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_250E253E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03B18);
    }
  }
}

unint64_t sub_250DC658C()
{
  unint64_t result = qword_269B03B28;
  if (!qword_269B03B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B28);
  }
  return result;
}

unint64_t sub_250DC65E4()
{
  unint64_t result = qword_269B03B30;
  if (!qword_269B03B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B30);
  }
  return result;
}

unint64_t sub_250DC663C()
{
  unint64_t result = qword_269B03B38;
  if (!qword_269B03B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B38);
  }
  return result;
}

unint64_t sub_250DC6694()
{
  unint64_t result = qword_269B03B40;
  if (!qword_269B03B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B40);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummaryDescription()
{
  return &type metadata for SleepingSampleDaySummaryDescription;
}

void sub_250DC66F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_250DC6748()
{
  unint64_t result = qword_269B03B50;
  if (!qword_269B03B50)
  {
    sub_250DC66F8(255, &qword_269B03B48, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B50);
  }
  return result;
}

uint64_t static SleepingSampleDaySummary.relativeComparisons(on:heart:spO2:rr:wtr:asleep:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, int a3@<W2>, double a4@<X3>, int a5@<W4>, double a6@<X5>, int a7@<W6>, double a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, double a11, unsigned __int8 a12, char *a13, unsigned __int8 a14)
{
  double v274 = a8;
  int v278 = a7;
  double v273 = a6;
  int v277 = a5;
  double v272 = a4;
  LODWORD(v328) = a3;
  v319 = a2;
  uint64_t v281 = a9;
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v15 - 8);
  v311 = (char *)v271 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v309 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v309);
  v310 = (void *)((char *)v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250D91EB4();
  MEMORY[0x270FA5388](v18 - 8);
  v307 = (char *)v271 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v315 = (uint64_t)v271 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v306 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v306);
  v308 = (char *)v271 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v316 = sub_250E248B0();
  uint64_t v327 = *(void *)(v316 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v316);
  v295 = (char *)v271 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v292 = (char *)v271 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v289 = (char *)v271 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v286 = (char *)v271 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v305 = (char *)v271 - v32;
  MEMORY[0x270FA5388](v31);
  v283 = (char *)v271 - v33;
  sub_250D97A2C(0, (unint64_t *)&unk_26B207200, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8D8F0]);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v294 = (uint64_t)v271 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v291 = (uint64_t)v271 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v288 = (uint64_t)v271 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v285 = (uint64_t)v271 - v42;
  MEMORY[0x270FA5388](v41);
  uint64_t v296 = (uint64_t)v271 - v43;
  uint64_t v330 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v44 = *(void *)(v330 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v330);
  uint64_t v280 = (uint64_t)v271 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v302 = (uint64_t)v271 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v301 = (uint64_t)v271 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v300 = (uint64_t)v271 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v304 = (char *)v271 - v54;
  MEMORY[0x270FA5388](v53);
  uint64_t v299 = (uint64_t)v271 - v55;
  uint64_t v313 = sub_250E243F0();
  uint64_t v312 = *(void *)(v313 - 8);
  MEMORY[0x270FA5388](v313);
  v318 = (char *)v271 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  uint64_t v58 = MEMORY[0x270FA5388](v57 - 8);
  uint64_t v314 = (uint64_t)v271 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v298 = (uint64_t)v271 - v60;
  sub_250D88890();
  uint64_t v62 = v61;
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  v326 = (char *)v271 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  int v66 = (char *)v271 - v65;
  sub_250D97944();
  uint64_t v331 = v67;
  uint64_t v68 = MEMORY[0x270FA5388](v67);
  v322 = (char *)v271 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v68);
  uint64_t v297 = (uint64_t)v271 - v70;
  uint64_t v71 = sub_250E24B20();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = MEMORY[0x270FA5388](v71);
  v293 = (char *)v271 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  v290 = (char *)v271 - v76;
  uint64_t v77 = MEMORY[0x270FA5388](v75);
  v287 = (char *)v271 - v78;
  uint64_t v79 = MEMORY[0x270FA5388](v77);
  v284 = (char *)v271 - v80;
  uint64_t v81 = MEMORY[0x270FA5388](v79);
  v282 = (char *)v271 - v82;
  uint64_t v83 = MEMORY[0x270FA5388](v81);
  id v85 = (char *)v271 - v84;
  MEMORY[0x270FA5388](v83);
  uint64_t v86 = v72;
  uint64_t v89 = *(void (**)(void))(v72 + 16);
  uint64_t v88 = v72 + 16;
  char v87 = v89;
  v279 = (char *)v271 - v90;
  v89();
  sub_250E24AB0();
  sub_250DC8DD8();
  uint64_t v324 = a1;
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v323 = v44;
    int v317 = a14;
    v325 = a13;
    uint64_t v92 = &v66[v62[12]];
    uint64_t v93 = v85;
    uint64_t v94 = v86;
    uint64_t v96 = v86 + 32;
    uint64_t v95 = *(void (**)(char *))(v86 + 32);
    v303 = v93;
    v95(v66);
    id v97 = v62;
    v320 = v92;
    v321 = v62;
    id v98 = v92;
    ((void (*)(char *, uint64_t, uint64_t))v87)(v92, v324, v71);
    uint64_t v99 = v326;
    uint64_t v100 = &v326[v97[12]];
    ((void (*)(char *, char *, uint64_t))v87)(v326, v66, v71);
    uint64_t v329 = v88;
    v332 = v87;
    ((void (*)(char *, char *, uint64_t))v87)(v100, v98, v71);
    uint64_t v101 = (uint64_t)v322;
    ((void (*)(char *, char *, uint64_t))v95)(v322, v99, v71);
    uint64_t v102 = *(void (**)(char *, uint64_t))(v94 + 8);
    v102(v100, v71);
    uint64_t v103 = &v99[v321[12]];
    ((void (*)(char *, char *, uint64_t))v95)(v99, v66, v71);
    ((void (*)(char *, char *, uint64_t))v95)(v103, v320, v71);
    uint64_t v104 = v101 + *(int *)(v331 + 36);
    uint64_t v276 = v96;
    v275 = (void (*)(uint64_t, char *, uint64_t))v95;
    ((void (*)(uint64_t, char *, uint64_t))v95)(v104, v103, v71);
    uint64_t v105 = v71;
    uint64_t v331 = v94 + 8;
    v326 = (char *)v102;
    v102(v99, v71);
    sub_250DC8E30(v101, v297, (uint64_t (*)(void))sub_250D97944);
    if (v317)
    {
      unint64_t v106 = v318;
      uint64_t v107 = v324;
      sub_250E24A70();
      uint64_t v108 = v298;
      sub_250E243B0();
      (*(void (**)(char *, uint64_t))(v312 + 8))(v106, v313);
      uint64_t v109 = sub_250E24710();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v108, 0, 1, v109);
    }
    else
    {
      uint64_t v110 = sub_250E24710();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v298, 1, 1, v110);
      uint64_t v107 = v324;
    }
    uint64_t v111 = v327;
    uint64_t v112 = v283;
    uint64_t v113 = v296;
    uint64_t v114 = v323;
    uint64_t v333 = v105;
    uint64_t v115 = v332;
    if (v328)
    {
      uint64_t v117 = 1;
      int v116 = v325;
    }
    else
    {
      int v116 = v325;
      static SleepingSampleBaselineComparison.heart(_:on:calendar:hasBaseline:baselineCount:)(v107, v325, v317 & 1, 49, v296, *(double *)&v319);
      uint64_t v117 = 0;
    }
    uint64_t v118 = v282;
    uint64_t v119 = v330;
    v319 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56);
    v320 = (char *)(v114 + 56);
    v319(v113, v117, 1, v330);
    ((void (*)(char *, uint64_t, uint64_t))v115)(v118, v107, v333);
    uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
    uint64_t v121 = v116;
    uint64_t v122 = v316;
    v120(v112, v121, v316);
    v318 = *(char **)(v114 + 48);
    int v123 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v318)(v113, 1, v119);
    v322 = (char *)(v111 + 16);
    uint64_t v323 = v114 + 48;
    v321 = (int *)v120;
    if (v123 == 1)
    {
      uint64_t v124 = v303;
      uint64_t v125 = v333;
      ((void (*)(char *, char *, uint64_t))v115)(v303, v118, v333);
      uint64_t v126 = v305;
      v120(v305, v112, v122);
      uint64_t v127 = v315;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 56))(v315, 1, 1, v313);
      uint64_t v128 = sub_250E24710();
      uint64_t v129 = v314;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v314, 1, 1, v128);
      uint64_t v130 = (uint64_t)v308;
      ((void (*)(char *, char *, uint64_t))v332)(v308, v124, v125);
      uint64_t v131 = (int *)v306;
      ((void (*)(uint64_t, char *, uint64_t))v321)(v130 + *(int *)(v306 + 20), v126, v122);
      sub_250D922D0(0);
      uint64_t v133 = (uint64_t)v307;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v307, 1, 1, v132);
      v328 = *(void (**)(char *, uint64_t))(v327 + 8);
      v271[1] = v327 + 8;
      v328(v126, v122);
      uint64_t v134 = v124;
      uint64_t v135 = (void (*)(char *, uint64_t))v326;
      ((void (*)(char *, uint64_t))v326)(v134, v125);
      sub_250DC8E30(v133, v130 + v131[6], (uint64_t (*)(void))sub_250D91EB4);
      sub_250DC8E30(v127, v130 + v131[7], (uint64_t (*)(void))sub_250D927FC);
      sub_250DC8E30(v129, v130 + v131[8], (uint64_t (*)(void))sub_250D94D70);
      *(unsigned char *)(v130 + v131[9]) = 0;
      v136 = v310;
      void *v310 = 6;
      swift_storeEnumTagMultiPayload();
      uint64_t v137 = type metadata accessor for SleepingSampleBaseline();
      id v138 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 56);
      uint64_t v139 = v311;
      v138(v311, 1, 1, v137);
      uint64_t v140 = (uint64_t)v304;
      uint64_t v141 = (uint64_t)&v304[*(int *)(v330 + 24)];
      uint64_t v142 = v137;
      uint64_t v143 = v316;
      v138((char *)v141, 1, 1, v142);
      uint64_t v144 = v324;
      sub_250DC8E30(v130, v140, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      uint64_t v145 = (uint64_t)v136;
      uint64_t v120 = (void (*)(char *, char *, uint64_t))v321;
      sub_250DC8E30(v145, v140 + *(int *)(v330 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      uint64_t v146 = (uint64_t)v139;
      uint64_t v147 = v330;
      sub_250DC8F24(v146, v141, (uint64_t (*)(void))sub_250DC8DA4);
      sub_250DC8E30(v140, v299, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v328(v283, v143);
      uint64_t v148 = v143;
      v135(v282, v333);
      sub_250DC8E98(v296);
      uint64_t v149 = v286;
      uint64_t v150 = v285;
    }
    else
    {
      uint64_t v144 = v107;
      v328 = *(void (**)(char *, uint64_t))(v327 + 8);
      v328(v112, v122);
      ((void (*)(char *, uint64_t))v326)(v118, v333);
      sub_250DC8E30(v296, v299, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v149 = v286;
      uint64_t v150 = v285;
      uint64_t v148 = v122;
      uint64_t v147 = v330;
    }
    if (v277)
    {
      uint64_t v152 = 1;
      unint64_t v151 = v325;
    }
    else
    {
      unint64_t v151 = v325;
      static SleepingSampleBaselineComparison.spO2(_:on:calendar:hasBaseline:)(v144, v325, v317 & 1, v150, v272);
      uint64_t v152 = 0;
    }
    v319(v150, v152, 1, v147);
    v153 = v284;
    v154 = v332;
    v332();
    v120(v149, v151, v148);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v318)(v150, 1, v147) == 1)
    {
      uint64_t v155 = v303;
      uint64_t v156 = v333;
      ((void (*)(char *, char *, uint64_t))v154)(v303, v153, v333);
      uint64_t v157 = v305;
      v120(v305, v149, v148);
      uint64_t v158 = v315;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 56))(v315, 1, 1, v313);
      uint64_t v159 = sub_250E24710();
      uint64_t v160 = v314;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v314, 1, 1, v159);
      uint64_t v161 = (uint64_t)v308;
      uint64_t v162 = v156;
      ((void (*)(char *, char *, uint64_t))v332)(v308, v155, v156);
      v163 = (int *)v306;
      ((void (*)(uint64_t, char *, uint64_t))v321)(v161 + *(int *)(v306 + 20), v157, v148);
      sub_250D922D0(0);
      uint64_t v165 = (uint64_t)v307;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v307, 1, 1, v164);
      uint64_t v296 = v327 + 8;
      v328(v157, v148);
      ((void (*)(char *, uint64_t))v326)(v155, v162);
      sub_250DC8E30(v165, v161 + v163[6], (uint64_t (*)(void))sub_250D91EB4);
      sub_250DC8E30(v158, v161 + v163[7], (uint64_t (*)(void))sub_250D927FC);
      sub_250DC8E30(v160, v161 + v163[8], (uint64_t (*)(void))sub_250D94D70);
      *(unsigned char *)(v161 + v163[9]) = 0;
      uint64_t v166 = v310;
      void *v310 = 6;
      swift_storeEnumTagMultiPayload();
      uint64_t v167 = type metadata accessor for SleepingSampleBaseline();
      v168 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56);
      uint64_t v169 = (uint64_t)v311;
      v168(v311, 1, 1, v167);
      uint64_t v170 = (uint64_t)v304;
      uint64_t v171 = &v304[*(int *)(v330 + 24)];
      uint64_t v172 = v316;
      v168(v171, 1, 1, v167);
      sub_250DC8E30(v161, v170, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      uint64_t v173 = (uint64_t)v166;
      uint64_t v120 = (void (*)(char *, char *, uint64_t))v321;
      sub_250DC8E30(v173, v170 + *(int *)(v330 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      uint64_t v174 = v330;
      uint64_t v175 = (uint64_t)v171;
      v176 = v325;
      sub_250DC8F24(v169, v175, (uint64_t (*)(void))sub_250DC8DA4);
      sub_250DC8E30(v170, v300, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v177 = v172;
      v328(v286, v172);
      ((void (*)(char *, uint64_t))v326)(v284, v333);
      sub_250DC8E98(v285);
      uint64_t v178 = v289;
      uint64_t v179 = v288;
      v180 = v287;
    }
    else
    {
      uint64_t v181 = v150;
      uint64_t v174 = v147;
      uint64_t v177 = v148;
      v328(v149, v148);
      ((void (*)(char *, uint64_t))v326)(v153, v333);
      sub_250DC8E30(v181, v300, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v178 = v289;
      uint64_t v179 = v288;
      v180 = v287;
      v176 = v325;
    }
    if (v278)
    {
      uint64_t v183 = 1;
      uint64_t v182 = v324;
    }
    else
    {
      uint64_t v182 = v324;
      static SleepingSampleBaselineComparison.rr(_:on:calendar:hasBaseline:)(v324, v176, v317 & 1, v179, v273);
      uint64_t v183 = 0;
    }
    LODWORD(v296) = a10;
    v319(v179, v183, 1, v174);
    ((void (*)(char *, uint64_t, uint64_t))v332)(v180, v182, v333);
    uint64_t v184 = v177;
    uint64_t v185 = v174;
    v120(v178, v176, v184);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v318)(v179, 1, v174) == 1)
    {
      v186 = v303;
      uint64_t v187 = v333;
      ((void (*)(char *, char *, uint64_t))v332)(v303, v180, v333);
      uint64_t v188 = v305;
      v120(v305, v178, v184);
      v189 = v120;
      uint64_t v190 = v315;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 56))(v315, 1, 1, v313);
      uint64_t v191 = sub_250E24710();
      uint64_t v192 = v314;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v314, 1, 1, v191);
      uint64_t v193 = v308;
      ((void (*)(char *, char *, uint64_t))v332)(v308, v186, v187);
      uint64_t v194 = (int *)v306;
      v189(&v193[*(int *)(v306 + 20)], v188, v184);
      sub_250D922D0(0);
      uint64_t v196 = (uint64_t)v307;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v195 - 8) + 56))(v307, 1, 1, v195);
      v286 = (char *)(v327 + 8);
      v328(v188, v184);
      v197 = v186;
      v198 = (void (*)(char *, uint64_t))v326;
      ((void (*)(char *, uint64_t))v326)(v197, v187);
      sub_250DC8E30(v196, (uint64_t)&v193[v194[6]], (uint64_t (*)(void))sub_250D91EB4);
      sub_250DC8E30(v190, (uint64_t)&v193[v194[7]], (uint64_t (*)(void))sub_250D927FC);
      sub_250DC8E30(v192, (uint64_t)&v193[v194[8]], (uint64_t (*)(void))sub_250D94D70);
      v193[v194[9]] = 0;
      uint64_t v199 = (uint64_t)v310;
      void *v310 = 6;
      swift_storeEnumTagMultiPayload();
      uint64_t v200 = type metadata accessor for SleepingSampleBaseline();
      uint64_t v201 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v200 - 8) + 56);
      uint64_t v202 = (uint64_t)v311;
      v201(v311, 1, 1, v200);
      uint64_t v203 = (uint64_t)v304;
      uint64_t v204 = (uint64_t)&v304[*(int *)(v330 + 24)];
      uint64_t v205 = v200;
      uint64_t v184 = v316;
      v201((char *)v204, 1, 1, v205);
      uint64_t v185 = v330;
      uint64_t v206 = (uint64_t)v193;
      uint64_t v207 = v324;
      sub_250DC8E30(v206, v203, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      sub_250DC8E30(v199, v203 + *(int *)(v185 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_250DC8F24(v202, v204, (uint64_t (*)(void))sub_250DC8DA4);
      sub_250DC8E30(v203, v301, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v328(v289, v184);
      v198(v287, v187);
      v208 = v332;
      sub_250DC8E98(v288);
      uint64_t v209 = v292;
      uint64_t v210 = v291;
      uint64_t v211 = v290;
    }
    else
    {
      v328(v178, v184);
      ((void (*)(char *, uint64_t))v326)(v180, v333);
      sub_250DC8E30(v179, v301, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v209 = v292;
      uint64_t v210 = v291;
      uint64_t v211 = v290;
      uint64_t v207 = v324;
      v208 = v332;
    }
    if (v296)
    {
      uint64_t v213 = 1;
      uint64_t v212 = v325;
    }
    else
    {
      uint64_t v212 = v325;
      static SleepingSampleBaselineComparison.wtr(_:on:calendar:hasBaseline:)(v207, v325, v317 & 1, v210, v274);
      uint64_t v213 = 0;
    }
    LODWORD(v296) = a12;
    v319(v210, v213, 1, v185);
    ((void (*)(char *, uint64_t, uint64_t))v208)(v211, v207, v333);
    uint64_t v214 = v184;
    uint64_t v215 = v184;
    uint64_t v216 = (void (*)(char *, char *, uint64_t))v321;
    ((void (*)(char *, char *, uint64_t))v321)(v209, v212, v214);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v318)(v210, 1, v185) == 1)
    {
      uint64_t v217 = v303;
      uint64_t v218 = v333;
      ((void (*)(char *, char *, uint64_t))v332)(v303, v211, v333);
      uint64_t v219 = v305;
      v216(v305, v209, v215);
      uint64_t v220 = v315;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 56))(v315, 1, 1, v313);
      uint64_t v221 = sub_250E24710();
      uint64_t v222 = v314;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v221 - 8) + 56))(v314, 1, 1, v221);
      uint64_t v223 = (uint64_t)v308;
      ((void (*)(char *, char *, uint64_t))v332)(v308, v217, v218);
      v224 = (int *)v306;
      v216((char *)(v223 + *(int *)(v306 + 20)), v219, v215);
      sub_250D922D0(0);
      uint64_t v226 = (uint64_t)v307;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 56))(v307, 1, 1, v225);
      v289 = (char *)(v327 + 8);
      v328(v219, v215);
      v227 = v217;
      v228 = (void (*)(char *, uint64_t))v326;
      ((void (*)(char *, uint64_t))v326)(v227, v218);
      sub_250DC8E30(v226, v223 + v224[6], (uint64_t (*)(void))sub_250D91EB4);
      sub_250DC8E30(v220, v223 + v224[7], (uint64_t (*)(void))sub_250D927FC);
      sub_250DC8E30(v222, v223 + v224[8], (uint64_t (*)(void))sub_250D94D70);
      *(unsigned char *)(v223 + v224[9]) = 0;
      uint64_t v229 = (uint64_t)v310;
      void *v310 = 6;
      swift_storeEnumTagMultiPayload();
      uint64_t v230 = type metadata accessor for SleepingSampleBaseline();
      v231 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v230 - 8) + 56);
      uint64_t v232 = (uint64_t)v311;
      v231(v311, 1, 1, v230);
      uint64_t v233 = (uint64_t)v304;
      uint64_t v234 = (uint64_t)&v304[*(int *)(v330 + 24)];
      uint64_t v235 = v230;
      uint64_t v236 = v316;
      v231((char *)v234, 1, 1, v235);
      uint64_t v237 = v330;
      sub_250DC8E30(v223, v233, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      uint64_t v185 = v237;
      sub_250DC8E30(v229, v233 + *(int *)(v237 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_250DC8F24(v232, v234, (uint64_t (*)(void))sub_250DC8DA4);
      sub_250DC8E30(v233, v302, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v328(v292, v236);
      v228(v290, v218);
      v238 = v332;
      sub_250DC8E98(v291);
      v239 = v295;
      uint64_t v240 = v294;
      v241 = v293;
    }
    else
    {
      v328(v209, v215);
      ((void (*)(char *, uint64_t))v326)(v211, v333);
      sub_250DC8E30(v210, v302, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v239 = v295;
      v241 = v293;
      uint64_t v236 = v215;
      v238 = v208;
      uint64_t v240 = v294;
    }
    v242 = v325;
    if (v296)
    {
      uint64_t v244 = 1;
      uint64_t v243 = v324;
    }
    else
    {
      uint64_t v243 = v324;
      static SleepingSampleBaselineComparison.asleep(_:on:calendar:hasBaseline:)(v324, v325, v317 & 1, v240, a11);
      uint64_t v244 = 0;
    }
    v319(v240, v244, 1, v185);
    ((void (*)(char *, uint64_t, uint64_t))v238)(v241, v243, v333);
    v245 = v242;
    uint64_t v246 = v236;
    uint64_t v247 = v236;
    v248 = (void (*)(char *, char *, uint64_t))v321;
    ((void (*)(char *, char *, uint64_t))v321)(v239, v245, v246);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v318)(v240, 1, v185) == 1)
    {
      v249 = v303;
      ((void (*)(char *, char *, uint64_t))v238)(v303, v241, v333);
      v250 = v305;
      v248(v305, v239, v247);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 56))(v315, 1, 1, v313);
      uint64_t v251 = sub_250E24710();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v251 - 8) + 56))(v314, 1, 1, v251);
      uint64_t v252 = (uint64_t)v308;
      ((void (*)(char *, char *, uint64_t))v332)(v308, v249, v333);
      v253 = (int *)v306;
      v248((char *)(v252 + *(int *)(v306 + 20)), v250, v247);
      sub_250D922D0(0);
      uint64_t v255 = (uint64_t)v307;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v254 - 8) + 56))(v307, 1, 1, v254);
      v332 = (void (*)(void))(v327 + 8);
      v328(v250, v247);
      ((void (*)(char *, uint64_t))v326)(v249, v333);
      sub_250DC8E30(v255, v252 + v253[6], (uint64_t (*)(void))sub_250D91EB4);
      sub_250DC8E30(v315, v252 + v253[7], (uint64_t (*)(void))sub_250D927FC);
      sub_250DC8E30(v314, v252 + v253[8], (uint64_t (*)(void))sub_250D94D70);
      *(unsigned char *)(v252 + v253[9]) = 0;
      uint64_t v256 = (uint64_t)v310;
      void *v310 = 6;
      swift_storeEnumTagMultiPayload();
      uint64_t v257 = v247;
      uint64_t v258 = type metadata accessor for SleepingSampleBaseline();
      v259 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v258 - 8) + 56);
      uint64_t v260 = (uint64_t)v311;
      v259(v311, 1, 1, v258);
      uint64_t v261 = v330;
      uint64_t v262 = (uint64_t)v304;
      uint64_t v263 = (uint64_t)&v304[*(int *)(v330 + 24)];
      v259((char *)v263, 1, 1, v258);
      sub_250DC8E30(v252, v262, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      sub_250DC8E30(v256, v262 + *(int *)(v261 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_250DC8F24(v260, v263, (uint64_t (*)(void))sub_250DC8DA4);
      uint64_t v264 = v280;
      sub_250DC8E30(v262, v280, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      v328(v295, v257);
      ((void (*)(char *, uint64_t))v326)(v293, v333);
      sub_250DC8E98(v294);
    }
    else
    {
      v328(v239, v247);
      ((void (*)(char *, uint64_t))v326)(v241, v333);
      uint64_t v264 = v280;
      sub_250DC8E30(v240, v280, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    }
    uint64_t v265 = v297;
    v266 = (int *)type metadata accessor for SleepingSampleDaySummary();
    uint64_t v267 = v281;
    uint64_t v268 = v281 + v266[6];
    uint64_t v269 = sub_250E24710();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v269 - 8) + 56))(v268, 1, 1, v269);
    uint64_t v270 = v267 + v266[7];
    *(void *)uint64_t v270 = 0;
    *(unsigned char *)(v270 + 8) = 1;
    v275(v267, v279, v333);
    sub_250DC8E30(v265, v267 + v266[5], (uint64_t (*)(void))sub_250D97944);
    sub_250DC8F24(v298, v268, (uint64_t (*)(void))sub_250D94D70);
    sub_250DC8E30(v299, v267 + v266[8], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DC8E30(v300, v267 + v266[9], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DC8E30(v301, v267 + v266[10], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DC8E30(v302, v267 + v266[11], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    return sub_250DC8E30(v264, v267 + v266[12], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_250DC8DA4(uint64_t a1)
{
}

unint64_t sub_250DC8DD8()
{
  unint64_t result = qword_26B208148;
  if (!qword_26B208148)
  {
    sub_250E24B20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208148);
  }
  return result;
}

uint64_t sub_250DC8E30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DC8E98(uint64_t a1)
{
  sub_250D97A2C(0, (unint64_t *)&unk_26B207200, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250DC8F24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

BOOL SleepingSampleDataTypeFeatureStatus.State.isHiddenDueToUnsatisfiedRequirements.getter()
{
  return *(unsigned char *)(v0 + 8) == 0;
}

BOOL static SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_250DC8FB8(uint64_t a1)
{
  unint64_t v2 = sub_250DCB93C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DC8FF4(uint64_t a1)
{
  unint64_t v2 = sub_250DCB93C();

  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_250DC9030()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C62616C69617661;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000022;
  }
}

uint64_t sub_250DC9094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DCCE20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DC90BC(uint64_t a1)
{
  unint64_t v2 = sub_250DCBA38();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DC90F8(uint64_t a1)
{
  unint64_t v2 = sub_250DCBA38();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DC913C()
{
  return 12383;
}

uint64_t sub_250DC914C(uint64_t a1)
{
  unint64_t v2 = sub_250DCB990();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DC9188(uint64_t a1)
{
  unint64_t v2 = sub_250DCB990();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DC91C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_250E25400();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250DC9244(uint64_t a1)
{
  unint64_t v2 = sub_250DCB9E4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DC9280(uint64_t a1)
{
  unint64_t v2 = sub_250DCB9E4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleDataTypeFeatureStatus.State.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250DCBED8(0, &qword_269B03B58, (uint64_t (*)(void))sub_250DCB93C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v31 = v5;
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v28 = (char *)&v25 - v6;
  sub_250DCBED8(0, &qword_269B03B68, (uint64_t (*)(void))sub_250DCB990, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys, v4);
  uint64_t v32 = v7;
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - v8;
  sub_250DCBED8(0, &qword_269B03B78, (uint64_t (*)(void))sub_250DCB9E4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys, v4);
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  sub_250DCBED8(0, &qword_269B03B88, (uint64_t (*)(void))sub_250DCBA38, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys, v4);
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *v2;
  int v17 = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBA38();
  sub_250E25510();
  if (v17)
  {
    if (v17 == 1)
    {
      char v38 = 1;
      sub_250DCB990();
      uint64_t v18 = v34;
      sub_250E25350();
      char v37 = v16 & 1;
      sub_250DCBA8C();
      uint64_t v19 = v32;
      sub_250E253B0();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v19);
    }
    else
    {
      char v39 = 2;
      sub_250DCB93C();
      uint64_t v24 = v28;
      uint64_t v18 = v34;
      sub_250E25350();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v31);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v15, v18);
  }
  else
  {
    uint64_t v21 = v26;
    char v36 = 0;
    sub_250DCB9E4();
    uint64_t v22 = v34;
    sub_250E25350();
    uint64_t v35 = v16;
    sub_250DCBAE0();
    sub_250DCBB8C(&qword_269B03BA8, &qword_269B03BB0);
    uint64_t v23 = v27;
    sub_250E253B0();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v15, v22);
  }
}

uint64_t SleepingSampleDataTypeFeatureStatus.State.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  char v36 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250DCBED8(0, &qword_269B03BB8, (uint64_t (*)(void))sub_250DCB93C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  MEMORY[0x270FA5388](v4);
  char v39 = (char *)&v30 - v5;
  sub_250DCBED8(0, &qword_269B03BC0, (uint64_t (*)(void))sub_250DCB990, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys, v3);
  uint64_t v35 = v6;
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v38 = (char *)&v30 - v7;
  sub_250DCBED8(0, &qword_269B03BC8, (uint64_t (*)(void))sub_250DCB9E4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys, v3);
  uint64_t v9 = v8;
  uint64_t v31 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - v10;
  sub_250DCBED8(0, &qword_269B03BD0, (uint64_t (*)(void))sub_250DCBA38, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys, v3);
  uint64_t v13 = v12;
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v30 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBA38();
  uint64_t v16 = (uint64_t)v40;
  sub_250E25500();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v30 = v9;
  int v17 = v38;
  uint64_t v18 = v39;
  uint64_t v40 = a1;
  uint64_t v19 = sub_250E25340();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v23 = sub_250E25130();
    swift_allocError();
    uint64_t v25 = v24;
    sub_250DA9C54();
    *uint64_t v25 = &type metadata for SleepingSampleDataTypeFeatureStatus.State;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x263F8DCB0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v13);
    a1 = v40;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v20 = *(unsigned __int8 *)(v19 + 32);
  if (*(unsigned char *)(v19 + 32))
  {
    if (v20 == 1)
    {
      char v44 = 1;
      sub_250DCB990();
      sub_250E252C0();
      sub_250DCBB38();
      uint64_t v21 = v35;
      sub_250E25330();
      uint64_t v22 = v37;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v13);
      uint64_t v28 = v43;
    }
    else
    {
      char v45 = 2;
      sub_250DCB93C();
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v13);
      uint64_t v28 = 0;
    }
  }
  else
  {
    char v42 = 0;
    sub_250DCB9E4();
    sub_250E252C0();
    sub_250DCBAE0();
    sub_250DCBB8C(&qword_269B03BE0, &qword_269B03BE8);
    uint64_t v27 = v30;
    sub_250E25330();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v13);
    uint64_t v28 = v41;
  }
  uint64_t v29 = v36;
  void *v36 = v28;
  *((unsigned char *)v29 + 8) = v20;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t sub_250DC9F2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.State.init(from:)(a1, a2);
}

uint64_t sub_250DC9F44(void *a1)
{
  return SleepingSampleDataTypeFeatureStatus.State.encode(to:)(a1);
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.hash(into:)()
{
  return sub_250E254C0();
}

unint64_t sub_250DC9F88()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t sub_250DC9FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DCCF7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DC9FF0(uint64_t a1)
{
  unint64_t v2 = sub_250DCBCF4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DCA02C(uint64_t a1)
{
  unint64_t v2 = sub_250DCBCF4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DCA068(uint64_t a1)
{
  unint64_t v2 = sub_250DCBC4C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DCA0A4(uint64_t a1)
{
  unint64_t v2 = sub_250DCBC4C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DCA0E0(uint64_t a1)
{
  unint64_t v2 = sub_250DCBCA0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DCA11C(uint64_t a1)
{
  unint64_t v2 = sub_250DCBCA0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250DCBED8(0, &qword_269B03BF0, (uint64_t (*)(void))sub_250DCBC4C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - v5;
  sub_250DCBED8(0, &qword_269B03C00, (uint64_t (*)(void))sub_250DCBCA0, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys, v3);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  int v20 = (char *)&v19 - v7;
  sub_250DCBED8(0, &qword_269B03C10, (uint64_t (*)(void))sub_250DCBCF4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys, v3);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  char v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBCF4();
  sub_250E25510();
  uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v13)
  {
    char v27 = 1;
    sub_250DCBC4C();
    uint64_t v15 = v23;
    sub_250E25350();
    uint64_t v17 = v24;
    uint64_t v16 = v25;
  }
  else
  {
    char v26 = 0;
    sub_250DCBCA0();
    uint64_t v15 = v20;
    sub_250E25350();
    uint64_t v17 = v21;
    uint64_t v16 = v22;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  return (*v14)(v12, v9);
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250DCBED8(0, &qword_269B03C20, (uint64_t (*)(void))sub_250DCBC4C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v30 = v4;
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v32 = (char *)&v28 - v5;
  sub_250DCBED8(0, &qword_269B03C28, (uint64_t (*)(void))sub_250DCBCA0, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys, v3);
  uint64_t v7 = v6;
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - v8;
  sub_250DCBED8(0, &qword_269B03C30, (uint64_t (*)(void))sub_250DCBCF4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys, v3);
  uint64_t v11 = v10;
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBCF4();
  uint64_t v14 = v35;
  sub_250E25500();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v28 = v7;
  uint64_t v15 = v32;
  uint64_t v16 = v33;
  uint64_t v17 = v34;
  uint64_t v35 = a1;
  uint64_t v18 = v13;
  uint64_t v19 = sub_250E25340();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = sub_250E25130();
    swift_allocError();
    uint64_t v22 = v11;
    uint64_t v24 = v23;
    sub_250DA9C54();
    *uint64_t v24 = &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v22);
    a1 = v35;
LABEL_6:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  int v36 = *(unsigned __int8 *)(v19 + 32);
  if (v36)
  {
    char v38 = 1;
    sub_250DCBC4C();
    sub_250E252C0();
    uint64_t v20 = v31;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
  }
  else
  {
    char v37 = 0;
    sub_250DCBCA0();
    sub_250E252C0();
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  }
  *uint64_t v17 = v36;
  uint64_t v25 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t sub_250DCA998@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.init(from:)(a1, a2);
}

uint64_t sub_250DCA9B0(void *a1)
{
  return SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.encode(to:)(a1);
}

void SleepingSampleDataTypeFeatureStatus.dataType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SleepingSampleDataTypeFeatureStatus.dataType.setter(unsigned char *result)
{
  *unint64_t v1 = *result;
  return result;
}

uint64_t (*SleepingSampleDataTypeFeatureStatus.dataType.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataTypeFeatureStatus.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *(void *)a1 = v2;
  char v3 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v3;
  return sub_250DCBD48(v2, v3);
}

uint64_t SleepingSampleDataTypeFeatureStatus.state.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = sub_250DCBD58(*(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  return result;
}

uint64_t (*SleepingSampleDataTypeFeatureStatus.state.modify())()
{
  return nullsub_1;
}

unsigned char *SleepingSampleDataTypeFeatureStatus.init(dataType:state:)@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_250DCAA94()
{
  if (*v0) {
    return 0x6574617473;
  }
  else {
    return 0x6570795461746164;
  }
}

uint64_t sub_250DCAACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DCD068(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DCAAF4(uint64_t a1)
{
  unint64_t v2 = sub_250DCBDDC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DCAB30(uint64_t a1)
{
  unint64_t v2 = sub_250DCBDDC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleDataTypeFeatureStatus.encode(to:)(void *a1)
{
  sub_250DCBED8(0, &qword_269B03C38, (uint64_t (*)(void))sub_250DCBDDC, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  char v8 = *v1;
  v11[0] = *((void *)v1 + 1);
  int v13 = v1[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBDDC();
  sub_250E25510();
  char v16 = v8;
  char v15 = 0;
  sub_250DCBE30();
  uint64_t v9 = v11[1];
  sub_250E253B0();
  if (!v9)
  {
    v11[2] = v11[0];
    char v12 = v13;
    char v14 = 1;
    sub_250DCBE84();
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SleepingSampleDataTypeFeatureStatus.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  sub_250DCBED8(0, &qword_269B03C58, (uint64_t (*)(void))sub_250DCBDDC, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DCBDDC();
  sub_250E25500();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v16;
    char v20 = 0;
    sub_250DCBF40();
    sub_250E25330();
    char v11 = v21;
    char v19 = 1;
    sub_250DCBF94();
    sub_250E25330();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    uint64_t v13 = v17;
    char v14 = v18;
    *(unsigned char *)uint64_t v10 = v11;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_250DCAF64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_250DCAF7C(void *a1)
{
  return SleepingSampleDataTypeFeatureStatus.encode(to:)(a1);
}

void sub_250DCAF94(id a1@<X1>, unsigned __int8 *a2@<X0>, uint64_t a3@<X8>)
{
  id v3 = a1;
  unsigned __int8 v5 = *a2;
  id v6 = objc_msgSend(a1, sel_unsatisfiedRequirementIdentifiers);
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  uint64_t v7 = sub_250E24DC0();

  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    id v24 = v3;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v10 = MEMORY[0x263F8EE78];
    do
    {
      char v11 = *(void **)(v7 + 8 * v9 + 32);
      unsigned __int8 v27 = v5;
      id v12 = v11;
      if (sub_250DCB23C(&v27))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v28 = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_250DBA31C(0, *(void *)(v10 + 16) + 1, 1);
          uint64_t v10 = v28;
        }
        unint64_t v15 = *(void *)(v10 + 16);
        unint64_t v14 = *(void *)(v10 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_250DBA31C(v14 > 1, v15 + 1, 1);
          uint64_t v10 = v28;
        }
        *(void *)(v10 + 16) = v15 + 1;
        *(void *)(v10 + 8 * v15 + 32) = v12;
      }
      else
      {
      }
      ++v9;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    uint64_t v17 = (char *)MEMORY[0x263F8EE78];
    do
    {
      char v18 = *(void **)(v7 + 8 * v16 + 32);
      unsigned __int8 v25 = v5;
      id v19 = v18;
      sub_250DCB61C(&v25, &v26);

      char v20 = v26;
      if (v26 != 2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = sub_250DCF824(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v22 = *((void *)v17 + 2);
        unint64_t v21 = *((void *)v17 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v17 = sub_250DCF824((char *)(v21 > 1), v22 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v22 + 1;
        v17[v22 + 32] = v20 & 1;
      }
      ++v16;
    }
    while (v8 != v16);
    swift_bridgeObjectRelease_n();
    id v3 = v24;
    if (*(void *)(v10 + 16)) {
      goto LABEL_20;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = (char *)MEMORY[0x263F8EE78];
    uint64_t v10 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16))
    {
LABEL_20:
      swift_bridgeObjectRelease();

      char v23 = 0;
      goto LABEL_25;
    }
  }
  swift_release();
  if (*((void *)v17 + 2))
  {
    uint64_t v10 = v17[32];
    swift_bridgeObjectRelease();

    char v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v10 = 0;
    char v23 = 2;
  }
LABEL_25:
  *(unsigned char *)a3 = v5;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v23;
}

BOOL sub_250DCB23C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = sub_250E24C60();
  uint64_t v4 = v3;
  if (v2 == sub_250E24C60() && v4 == v5) {
    goto LABEL_13;
  }
  char v7 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7) {
    return 1;
  }
  uint64_t v8 = sub_250E24C60();
  uint64_t v10 = v9;
  if (v8 == sub_250E24C60() && v10 == v11)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v13 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13) {
    return 1;
  }
  uint64_t v14 = sub_250E24C60();
  uint64_t v16 = v15;
  if (v14 == sub_250E24C60() && v16 == v17) {
    goto LABEL_13;
  }
  char v19 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    return 1;
  }
  uint64_t v20 = sub_250E24C60();
  uint64_t v22 = v21;
  if (v20 == sub_250E24C60() && v22 == v23) {
    goto LABEL_13;
  }
  char v24 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    return 1;
  }
  uint64_t v25 = sub_250E24C60();
  uint64_t v27 = v26;
  if (v25 == sub_250E24C60() && v27 == v28) {
    goto LABEL_13;
  }
  char v29 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29) {
    return 1;
  }
  uint64_t v30 = sub_250E24C60();
  uint64_t v32 = v31;
  if (v30 == sub_250E24C60() && v32 == v33) {
    goto LABEL_13;
  }
  char v34 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34) {
    return 1;
  }
  uint64_t v35 = sub_250E24C60();
  uint64_t v37 = v36;
  if (v35 == sub_250E24C60() && v37 == v38) {
    goto LABEL_13;
  }
  char v39 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39) {
    return 1;
  }
  uint64_t v40 = sub_250E24C60();
  uint64_t v42 = v41;
  if (v40 == sub_250E24C60() && v42 == v43) {
    goto LABEL_31;
  }
  char v44 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v44) {
    return v1 < 4;
  }
  uint64_t v45 = sub_250E24C60();
  uint64_t v47 = v46;
  if (v45 == sub_250E24C60() && v47 == v48)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    return v1 < 4;
  }
  char v49 = sub_250E25400();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v49) {
    return v1 < 4;
  }
  return result;
}

uint64_t sub_250DCB61C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  unsigned int v3 = *a1;
  uint64_t v4 = sub_250E24C60();
  uint64_t v6 = v5;
  if (v4 == sub_250E24C60() && v6 == v7) {
    goto LABEL_13;
  }
  char v9 = sub_250E25400();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_14;
  }
  uint64_t v11 = sub_250E24C60();
  uint64_t v13 = v12;
  if (v11 == sub_250E24C60() && v13 == v14) {
    goto LABEL_13;
  }
  char v16 = sub_250E25400();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_14:
    char v21 = 1;
    goto LABEL_15;
  }
  uint64_t v17 = sub_250E24C60();
  uint64_t v19 = v18;
  if (v17 == sub_250E24C60() && v19 == v20)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v22 = sub_250E25400();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_14;
  }
  uint64_t v23 = sub_250E24C60();
  uint64_t v25 = v24;
  if (v23 == sub_250E24C60() && v25 == v26)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v3 > 3)
    {
      char v21 = 0;
      goto LABEL_15;
    }
LABEL_23:
    char v21 = 2;
    goto LABEL_15;
  }
  char v27 = sub_250E25400();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v27 & 1) == 0) {
    goto LABEL_23;
  }
  char v21 = 0;
  if (v3 <= 3) {
    goto LABEL_23;
  }
LABEL_15:
  *a2 = v21;
  return result;
}

BOOL _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (v3 == 1)
    {
      if (v5 == 1)
      {
        sub_250DCBD58(*(void *)a1, 1);
        sub_250DCBD58(v4, 1);
        return ((v4 ^ v2) & 1) == 0;
      }
      goto LABEL_11;
    }
    if (v5 != 2 || v4 != 0)
    {
LABEL_11:
      sub_250DCBD48(v4, v5);
      sub_250DCBD58(v2, v3);
      sub_250DCBD58(v4, v5);
      return 0;
    }
    sub_250DCBD58(*(void *)a1, 2);
    sub_250DCBD58(0, 2);
    return 1;
  }
  else
  {
    if (*(unsigned char *)(a2 + 8))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    sub_250DCBD48(*(void *)a2, 0);
    sub_250DCBD48(v2, 0);
    int v8 = sub_250E07668(v2, v4);
    sub_250DCBD58(v2, 0);
    sub_250DCBD58(v4, 0);
    return v8 & 1;
  }
}

unint64_t sub_250DCB93C()
{
  unint64_t result = qword_269B03B60;
  if (!qword_269B03B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B60);
  }
  return result;
}

unint64_t sub_250DCB990()
{
  unint64_t result = qword_269B03B70;
  if (!qword_269B03B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B70);
  }
  return result;
}

unint64_t sub_250DCB9E4()
{
  unint64_t result = qword_269B03B80;
  if (!qword_269B03B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B80);
  }
  return result;
}

unint64_t sub_250DCBA38()
{
  unint64_t result = qword_269B03B90;
  if (!qword_269B03B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B90);
  }
  return result;
}

unint64_t sub_250DCBA8C()
{
  unint64_t result = qword_269B03B98;
  if (!qword_269B03B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03B98);
  }
  return result;
}

void sub_250DCBAE0()
{
  if (!qword_269B03BA0)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    unint64_t v0 = sub_250E24E30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03BA0);
    }
  }
}

unint64_t sub_250DCBB38()
{
  unint64_t result = qword_269B03BD8;
  if (!qword_269B03BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03BD8);
  }
  return result;
}

uint64_t sub_250DCBB8C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250DCBAE0();
    sub_250DCBC08(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DCBC08(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_250DCBC4C()
{
  unint64_t result = qword_269B03BF8;
  if (!qword_269B03BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03BF8);
  }
  return result;
}

unint64_t sub_250DCBCA0()
{
  unint64_t result = qword_269B03C08;
  if (!qword_269B03C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C08);
  }
  return result;
}

unint64_t sub_250DCBCF4()
{
  unint64_t result = qword_269B03C18;
  if (!qword_269B03C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C18);
  }
  return result;
}

uint64_t sub_250DCBD48(uint64_t a1, char a2)
{
  if (!a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_250DCBD58(uint64_t a1, char a2)
{
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  if (qword_250E29680[*a1] == qword_250E29680[*a2])
  {
    char v2 = a2[16];
    uint64_t v3 = *((void *)a2 + 1);
    char v4 = a1[16];
    uint64_t v9 = *((void *)a1 + 1);
    char v10 = v4;
    uint64_t v7 = v3;
    char v8 = v2;
    return _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO2eeoiySbAE_AEtFZ_0((uint64_t)&v9, (uint64_t)&v7);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_250DCBDDC()
{
  unint64_t result = qword_269B03C40;
  if (!qword_269B03C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C40);
  }
  return result;
}

unint64_t sub_250DCBE30()
{
  unint64_t result = qword_269B03C48;
  if (!qword_269B03C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C48);
  }
  return result;
}

unint64_t sub_250DCBE84()
{
  unint64_t result = qword_269B03C50;
  if (!qword_269B03C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C50);
  }
  return result;
}

void sub_250DCBED8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250DCBF40()
{
  unint64_t result = qword_269B03C60;
  if (!qword_269B03C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C60);
  }
  return result;
}

unint64_t sub_250DCBF94()
{
  unint64_t result = qword_269B03C68;
  if (!qword_269B03C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C68);
  }
  return result;
}

unint64_t sub_250DCBFEC()
{
  unint64_t result = qword_269B03C70;
  if (!qword_269B03C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C70);
  }
  return result;
}

uint64_t destroy for SleepingSampleDataTypeFeatureStatus(uint64_t a1)
{
  return sub_250DCBD58(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s13HealthBalance35SleepingSampleDataTypeFeatureStatusVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_250DCBD48(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDataTypeFeatureStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_250DCBD48(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_250DCBD58(v5, v6);
  return a1;
}

uint64_t assignWithTake for SleepingSampleDataTypeFeatureStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_250DCBD58(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_250DCBD48(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1)
{
  return sub_250DCBD58(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_250DCBD48(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_250DCBD58(v5, v6);
  return a1;
}

uint64_t assignWithTake for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_250DCBD58(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_250DCC35C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_250DCC374(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys;
}

unsigned char *_s13HealthBalance35SleepingSampleDataTypeFeatureStatusV18ConfigurationIssueOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DCC490);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DCC5B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys;
}

unsigned char *_s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO44HiddenDueToUnsatisfiedRequirementsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DCC6A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys;
}

unint64_t sub_250DCC6EC()
{
  unint64_t result = qword_269B03C78;
  if (!qword_269B03C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C78);
  }
  return result;
}

unint64_t sub_250DCC744()
{
  unint64_t result = qword_269B03C80;
  if (!qword_269B03C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C80);
  }
  return result;
}

unint64_t sub_250DCC79C()
{
  unint64_t result = qword_269B03C88;
  if (!qword_269B03C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C88);
  }
  return result;
}

unint64_t sub_250DCC7F4()
{
  unint64_t result = qword_269B03C90;
  if (!qword_269B03C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C90);
  }
  return result;
}

unint64_t sub_250DCC84C()
{
  unint64_t result = qword_269B03C98;
  if (!qword_269B03C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03C98);
  }
  return result;
}

unint64_t sub_250DCC8A4()
{
  unint64_t result = qword_269B03CA0;
  if (!qword_269B03CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CA0);
  }
  return result;
}

unint64_t sub_250DCC8FC()
{
  unint64_t result = qword_269B03CA8;
  if (!qword_269B03CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CA8);
  }
  return result;
}

unint64_t sub_250DCC954()
{
  unint64_t result = qword_269B03CB0;
  if (!qword_269B03CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CB0);
  }
  return result;
}

unint64_t sub_250DCC9AC()
{
  unint64_t result = qword_269B03CB8;
  if (!qword_269B03CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CB8);
  }
  return result;
}

unint64_t sub_250DCCA04()
{
  unint64_t result = qword_269B03CC0;
  if (!qword_269B03CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CC0);
  }
  return result;
}

unint64_t sub_250DCCA5C()
{
  unint64_t result = qword_269B03CC8;
  if (!qword_269B03CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CC8);
  }
  return result;
}

unint64_t sub_250DCCAB4()
{
  unint64_t result = qword_269B03CD0;
  if (!qword_269B03CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CD0);
  }
  return result;
}

unint64_t sub_250DCCB0C()
{
  unint64_t result = qword_269B03CD8;
  if (!qword_269B03CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CD8);
  }
  return result;
}

unint64_t sub_250DCCB64()
{
  unint64_t result = qword_269B03CE0;
  if (!qword_269B03CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CE0);
  }
  return result;
}

unint64_t sub_250DCCBBC()
{
  unint64_t result = qword_269B03CE8;
  if (!qword_269B03CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CE8);
  }
  return result;
}

unint64_t sub_250DCCC14()
{
  unint64_t result = qword_269B03CF0;
  if (!qword_269B03CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CF0);
  }
  return result;
}

unint64_t sub_250DCCC6C()
{
  unint64_t result = qword_269B03CF8;
  if (!qword_269B03CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03CF8);
  }
  return result;
}

unint64_t sub_250DCCCC4()
{
  unint64_t result = qword_269B03D00;
  if (!qword_269B03D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03D00);
  }
  return result;
}

unint64_t sub_250DCCD1C()
{
  unint64_t result = qword_269B03D08;
  if (!qword_269B03D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03D08);
  }
  return result;
}

unint64_t sub_250DCCD74()
{
  unint64_t result = qword_269B03D10;
  if (!qword_269B03D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03D10);
  }
  return result;
}

unint64_t sub_250DCCDCC()
{
  unint64_t result = qword_269B03D18;
  if (!qword_269B03D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03D18);
  }
  return result;
}

uint64_t sub_250DCCE20(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000022 && a2 == 0x8000000250E2D110 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000250E2D140 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_250DCCF7C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000250E2D160 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000250E2D180)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_250DCD068(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t TrainingLoadSummaryQuery.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DCD178(v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange, a1);
}

uint64_t sub_250DCD178(uint64_t a1, uint64_t a2)
{
  sub_250D97944();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TrainingLoadSummaryQuery.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar;
  uint64_t v4 = sub_250E248B0();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void TrainingLoadSummaryQuery.typeOfDataRequested.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested);
}

uint64_t TrainingLoadSummaryQuery.continueAfterInitialResults.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults);
}

id TrainingLoadSummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = objc_allocWithZone(v6);
  char v14 = *a3;
  uint64_t v15 = (uint64_t *)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  uint64_t *v15 = 0;
  v15[1] = 0;
  *(void *)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x263F8EE78];
  sub_250DCD178(a1, (uint64_t)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange]);
  char v16 = &v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
  uint64_t v17 = sub_250E248B0();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v14;
  v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = a4;
  uint64_t v19 = *v15;
  uint64_t *v15 = a5;
  v15[1] = a6;
  swift_retain();
  sub_250D8C39C(v19);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v20 = (void *)sub_250E24DB0();
  v25.receiver = v13;
  v25.super_class = v7;
  id v21 = objc_msgSendSuper2(&v25, sel_initWithQueryDescriptors_, v20);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_250DCD5F0(a1);
  return v21;
}

id TrainingLoadSummaryQuery.init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v14 = *a3;
  uint64_t v15 = (uint64_t *)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  uint64_t *v15 = 0;
  v15[1] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x263F8EE78];
  sub_250DCD178(a1, (uint64_t)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange]);
  char v16 = &v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
  uint64_t v17 = sub_250E248B0();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v14;
  v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = a4;
  uint64_t v19 = *v15;
  uint64_t *v15 = a5;
  v15[1] = a6;
  swift_retain();
  sub_250D8C39C(v19);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v20 = (void *)sub_250E24DB0();
  v25.receiver = v7;
  v25.super_class = ObjectType;
  id v21 = objc_msgSendSuper2(&v25, sel_initWithQueryDescriptors_, v20);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_250DCD5F0(a1);
  return v21;
}

uint64_t sub_250DCD5F0(uint64_t a1)
{
  sub_250D97944();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250DCD64C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_250E24990();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *char v5 = objc_msgSend(v0, sel_queue);
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  char v6 = sub_250E249A0();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v8 = *(void *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery];
    *(void *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x263F8EE78];
    uint64_t v9 = *(void *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
    if (v9)
    {
      uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler + 8];
      swift_retain();
      uint64_t v11 = (void *)sub_250E24730();
      char v12 = v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults];
      uint64_t v13 = (void *)swift_allocObject();
      v13[2] = v9;
      v13[3] = v10;
      v13[4] = v1;
      v13[5] = v8;
      aBlock[4] = sub_250DD05D0;
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_250D8A9AC;
      aBlock[3] = &block_descriptor_14;
      char v14 = _Block_copy(aBlock);
      sub_250D8C3AC(v9);
      uint64_t v15 = v1;
      swift_release();
      objc_msgSend(v15, sel_queue_dispatchToClientForUUID_shouldDeactivate_block_, v11, (v12 & 1) == 0, v14);
      _Block_release(v14);

      return sub_250D8C39C(v9);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static TrainingLoadSummaryQuery.configurationClass()()
{
  return type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
}

Swift::Void __swiftcall TrainingLoadSummaryQuery.queue_populateConfiguration(_:)(HKQueryServerConfiguration *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250DD06B4(0, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v21 - v6;
  sub_250DD06B4(0, &qword_26B207F60, MEMORY[0x263F07920], v4);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - v9;
  v22.receiver = v1;
  v22.super_class = ObjectType;
  [(HKQueryServerConfiguration *)&v22 queue_populateConfiguration:a1];
  type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  uint64_t v11 = swift_dynamicCastClass();
  if (v11)
  {
    char v12 = (char *)v11;
    uint64_t v13 = &v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
    uint64_t v14 = sub_250E248B0();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    uint64_t v16 = (uint64_t)&v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
    swift_beginAccess();
    uint64_t v17 = a1;
    sub_250D8A558((uint64_t)v10, v16, &qword_26B207F60, MEMORY[0x263F07920]);
    swift_endAccess();
    sub_250DCD178((uint64_t)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)v7);
    sub_250D97944();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 0, 1, v18);
    uint64_t v19 = (uint64_t)&v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_250D8A558((uint64_t)v7, v19, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
    swift_endAccess();
    LOBYTE(v19) = v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested];
    uint64_t v20 = &v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
    swift_beginAccess();
    char *v20 = v19;
    objc_msgSend(v12, sel_setShouldDeactivateAfterInitialResults_, (v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] & 1) == 0);
  }
}

uint64_t TrainingLoadSummaryQuery.queue_deliverError(_:)(void *a1)
{
  uint64_t v3 = sub_250E24960();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_250E24980();
  uint64_t result = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  if (v12)
  {
    uint64_t v23 = v9;
    uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler + 8];
    swift_retain();
    id v14 = objc_msgSend(v1, sel_clientQueue);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = (void *)swift_allocObject();
      void v16[2] = v12;
      v16[3] = v13;
      v16[4] = v1;
      v16[5] = a1;
      aBlock[4] = sub_250DCE01C;
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_250D8A9AC;
      aBlock[3] = &block_descriptor_1;
      uint64_t v17 = _Block_copy(aBlock);
      uint64_t v22 = v7;
      uint64_t v18 = v17;
      sub_250D8C3AC(v12);
      uint64_t v19 = v1;
      id v20 = a1;
      sub_250E24970();
      uint64_t v24 = MEMORY[0x263F8EE78];
      sub_250D94A6C(&qword_26B2078B8, MEMORY[0x263F8F030]);
      sub_250DD06B4(0, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
      sub_250D87AFC();
      sub_250E25050();
      MEMORY[0x253389B40](0, v11, v6, v18);
      _Block_release(v18);

      sub_250D8C39C(v12);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
      return swift_release();
    }
    else
    {
      return sub_250D8C39C(v12);
    }
  }
  return result;
}

uint64_t sub_250DCE004()
{
  return objectdestroyTm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_250DCE01C()
{
  return sub_250DD05D8(1);
}

Swift::Bool __swiftcall TrainingLoadSummaryQuery.queue_shouldDeactivateAfterInitialResults()()
{
  return (*(unsigned char *)(v0 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults) & 1) == 0;
}

uint64_t TrainingLoadSummaryQuery.queue_queryDidDeactivate(_:)()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = (void *)sub_250E24730();
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_queue_queryDidDeactivate_, v3);

  uint64_t v4 = &v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  return sub_250D8C39C(v5);
}

void *static TrainingLoadSummaryQuery.clientInterfaceProtocol()()
{
  return &unk_2701EC5A0;
}

void static TrainingLoadSummaryQuery.configureClientInterface(_:)(void *a1)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v4 = (objc_class *)(*MEMORY[0x263F8EED0] & *v1);
  v19.receiver = ObjCClassFromMetadata;
  v19.super_class = v4;
  objc_msgSendSuper2(&v19, sel_configureClientInterface_, a1);
  sub_250D98B48(0, &qword_26B208100);
  *(void *)&long long v16 = MEMORY[0x263F8EE78];
  MEMORY[0x253389970]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_250E24DE0();
  }
  sub_250DCE5C8();
  swift_getObjCClassFromMetadata();
  sub_250E24E10();
  uint64_t v5 = sub_250E24DD0();
  MEMORY[0x253389970](v5);
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_250E24DE0();
  }
  swift_getObjCClassFromMetadata();
  sub_250E24E10();
  sub_250E24DD0();
  if (!((unint64_t)v16 >> 62))
  {
    uint64_t v6 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_7;
    }
LABEL_20:
    objc_super v7 = (void *)MEMORY[0x263F8EE78];
LABEL_21:
    swift_bridgeObjectRelease_n();
    sub_250DCFED0((uint64_t)v7);
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)sub_250E24EA0();
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setClasses_forSelector_argumentIndex_ofReply_, v12, sel_client_deliverTrainingLoadSampleDaySummaries_queryUUID_, 0, 0);

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_250E25230();
  if (!v6) {
    goto LABEL_20;
  }
LABEL_7:
  if (v6 >= 1)
  {
    objc_super v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v8 = v16 + 32;
    do
    {
      swift_unknownObjectRetain_n();
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v18 = 0;
        long long v16 = 0u;
        long long v17 = 0u;
      }
      swift_unknownObjectRelease();
      if (*((void *)&v17 + 1))
      {
        long long v13 = v16;
        long long v14 = v17;
        uint64_t v15 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          objc_super v7 = sub_250DCF940(0, v7[2] + 1, 1, v7);
        }
        unint64_t v10 = v7[2];
        unint64_t v9 = v7[3];
        if (v10 >= v9 >> 1) {
          objc_super v7 = sub_250DCF940((void *)(v9 > 1), v10 + 1, 1, v7);
        }
        v7[2] = v10 + 1;
        uint64_t v11 = &v7[5 * v10];
        v11[8] = v15;
        *((_OWORD *)v11 + 2) = v13;
        *((_OWORD *)v11 + 3) = v14;
      }
      else
      {
        sub_250DCE6CC((uint64_t)&v16);
      }
      v8 += 8;
      --v6;
    }
    while (v6);
    goto LABEL_21;
  }
  __break(1u);
}

void sub_250DCE5C8()
{
  if (!qword_26B2075A8)
  {
    type metadata accessor for TrainingLoadSampleDaySummary();
    sub_250D94A6C(&qword_26B207580, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
    sub_250D94A6C((unint64_t *)&unk_26B207560, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
    sub_250D94A6C(&qword_26B207570, (void (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
    unint64_t v0 = sub_250E24A00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2075A8);
    }
  }
}

uint64_t sub_250DCE6CC(uint64_t a1)
{
  sub_250DD0668(0, (unint64_t *)&unk_269B03D28, MEMORY[0x263F8DB68], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TrainingLoadSummaryQuery.client_deliverTrainingLoadSampleDaySummaries(_:queryUUID:)(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_250E24960();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  MEMORY[0x270FA5388](v5);
  objc_super v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_250E24980();
  uint64_t v23 = *(void *)(v8 - 8);
  uint64_t v24 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_250E24750();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t result = sub_250DCEB50(a1);
  if (result)
  {
    uint64_t v15 = result;
    id v22 = objc_msgSend(v2, sel_queue);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
    unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v2;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v16, (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    aBlock[4] = sub_250DD0030;
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_250D8A9AC;
    aBlock[3] = &block_descriptor_6;
    uint64_t v18 = _Block_copy(aBlock);
    id v19 = v2;
    sub_250E24970();
    uint64_t v27 = MEMORY[0x263F8EE78];
    sub_250D94A6C(&qword_26B2078B8, MEMORY[0x263F8F030]);
    sub_250DD06B4(0, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    sub_250D87AFC();
    uint64_t v20 = v26;
    sub_250E25050();
    uint64_t v21 = v22;
    MEMORY[0x253389B40](0, v10, v7, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v20);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_250DCEB50(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  sub_250E25190();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        MEMORY[0x253389CD0](i, v1);
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        sub_250DCE5C8();
        if (!swift_dynamicCastClass()) {
          goto LABEL_14;
        }
        sub_250E25160();
        sub_250E251A0();
        sub_250E251B0();
        sub_250E25170();
        if (v4 == v2) {
          return v9;
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v6 = j + 1;
        if (__OFADD__(j, 1)) {
          break;
        }
        sub_250DCE5C8();
        swift_unknownObjectRetain();
        uint64_t v7 = swift_dynamicCastClass();
        if (!v7)
        {
LABEL_14:
          swift_unknownObjectRelease();
          swift_release();
          return 0;
        }
        uint64_t v1 = v7;
        sub_250E25160();
        sub_250E251A0();
        sub_250E251B0();
        sub_250E25170();
        if (v6 == v2) {
          return v9;
        }
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    sub_250E25230();
    swift_bridgeObjectRelease();
    sub_250E25190();
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_250E25230();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_250DCED34(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v7 = *(void *)(SampleDaySummary - 8);
  uint64_t v8 = MEMORY[0x270FA5388](SampleDaySummary - 8);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_250E25230();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (!v13)
  {
LABEL_15:
    *(void *)(a2 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery) = v14;
    swift_bridgeObjectRelease();
    return sub_250DCD64C();
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t result = sub_250DBA33C(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a3;
    uint64_t v14 = v24;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        MEMORY[0x253389CD0](i, a1);
        sub_250E249F0();
        swift_unknownObjectRelease();
        uint64_t v24 = v14;
        unint64_t v18 = *(void *)(v14 + 16);
        unint64_t v17 = *(void *)(v14 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_250DBA33C(v17 > 1, v18 + 1, 1);
          uint64_t v14 = v24;
        }
        *(void *)(v14 + 16) = v18 + 1;
        sub_250DD0554((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18);
      }
    }
    else
    {
      id v19 = (id *)(a1 + 32);
      do
      {
        id v20 = *v19;
        sub_250E249F0();

        uint64_t v24 = v14;
        unint64_t v22 = *(void *)(v14 + 16);
        unint64_t v21 = *(void *)(v14 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_250DBA33C(v21 > 1, v22 + 1, 1);
          uint64_t v14 = v24;
        }
        *(void *)(v14 + 16) = v22 + 1;
        sub_250DD0554((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v22);
        ++v19;
        --v13;
      }
      while (v13);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

id TrainingLoadSummaryQuery.__allocating_init(queryDescriptors:)()
{
  id v1 = objc_allocWithZone(v0);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v2 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithQueryDescriptors_, v2);

  return v3;
}

void TrainingLoadSummaryQuery.init(queryDescriptors:)()
{
}

id TrainingLoadSummaryQuery.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_250DCF298(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250DCF458(a1, a2, a3, a4, (unint64_t *)&unk_269B03D60, MEMORY[0x263F06338], MEMORY[0x263F06338], MEMORY[0x263F06338]);
}

void *sub_250DCF2E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250DD0668(0, &qword_269B03D58, MEMORY[0x263F8D980], MEMORY[0x263F8E0F8]);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250DCFC00(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_250DCF410(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250DCF458(a1, a2, a3, a4, &qword_269B03D50, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
}

uint64_t sub_250DCF458(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    id v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_250DD06B4(0, a5, a6, MEMORY[0x263F8E0F8]);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  id v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = sub_250E25210();
    __break(1u);
    return result;
  }
  void v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_250DD0300(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

void *sub_250DCF6F4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250DD0668(0, (unint64_t *)&qword_269B03D40, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250DCFCF4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_250DCF824(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_250DD0668(0, &qword_26B207038, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue, MEMORY[0x263F8E0F8]);
      unint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_250DCFDE8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_250DCF940(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250DD0668(0, qword_26B208108, MEMORY[0x263F8DB68], MEMORY[0x263F8E0F8]);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_250DD0208(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_250DCFA84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_250DCF458(a1, a2, a3, a4, &qword_26B207030, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
}

void *sub_250DCFACC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_250DD0668(0, &qword_269B03D38, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_250DD045C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_250DCFC00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DCFCF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

char *sub_250DCFDE8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DCFED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_250E24EB0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_250DD060C(v4, (uint64_t)v5);
      sub_250E0AA1C((uint64_t)v6, (uint64_t)v5);
      sub_250DA28C8((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_250DCFF5C()
{
  uint64_t v1 = sub_250E24750();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_250DD0030()
{
  uint64_t v1 = *(void *)(sub_250E24750() - 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_250DCED34(v2, v3, v4);
}

uint64_t sub_250DD0094()
{
  return type metadata accessor for TrainingLoadSummaryQuery();
}

uint64_t type metadata accessor for TrainingLoadSummaryQuery()
{
  uint64_t result = qword_26B2071A8;
  if (!qword_26B2071A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250DD00E8()
{
  sub_250D97944();
  if (v0 <= 0x3F)
  {
    sub_250E248B0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TrainingLoadSummaryQuery(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TrainingLoadSummaryQuery);
}

uint64_t dispatch thunk of TrainingLoadSummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_250DD0208(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DD0300(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DD045C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

uint64_t sub_250DD0554(uint64_t a1, uint64_t a2)
{
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(SampleDaySummary - 8) + 32))(a2, a1, SampleDaySummary);
  return a2;
}

uint64_t sub_250DD05B8()
{
  return objectdestroyTm(MEMORY[0x263F8EEA0]);
}

uint64_t sub_250DD05D0()
{
  return sub_250DD05D8(0);
}

uint64_t sub_250DD05D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v1 + 16))(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_250DD060C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_250DD0668(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_250DD06B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t dispatch thunk of SleepingSampleDaySummaryProtocol.morningIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t GregorianDayRange.dayIndexRange.setter(uint64_t a1)
{
  return sub_250DD1D64(a1, v1);
}

uint64_t (*GregorianDayRange.dayIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t GregorianDayRange.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v4 = sub_250E248B0();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*GregorianDayRange.gregorianCalendar.modify())()
{
  return nullsub_1;
}

unint64_t GregorianDayRange.description.getter()
{
  uint64_t v0 = sub_250E248E0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
  sub_250E250E0();
  swift_bridgeObjectRelease();
  unint64_t v6 = 0xD000000000000021;
  unint64_t v7 = 0x8000000250E2D3D0;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  sub_250E24B20();
  sub_250E251F0();
  sub_250E24CE0();
  sub_250D8CEA0();
  sub_250E251F0();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  type metadata accessor for GregorianDayRange();
  sub_250E24890();
  sub_250E248D0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  return v6;
}

uint64_t GregorianDayRange.hash(into:)()
{
  return sub_250E24B70();
}

uint64_t sub_250DD0B14()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x7865646E49796164;
  }
}

uint64_t sub_250DD0B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DD2744(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DD0B88(uint64_t a1)
{
  unint64_t v2 = sub_250DD1DC8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DD0BC4(uint64_t a1)
{
  unint64_t v2 = sub_250DD1DC8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GregorianDayRange.encode(to:)(void *a1)
{
  sub_250DD1E1C(0, &qword_269B03DD0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DD1DC8();
  sub_250E25510();
  v9[15] = 0;
  sub_250D8CEA0();
  sub_250DD1E80(&qword_269B03DE0, &qword_26B206D70);
  sub_250E253B0();
  if (!v1)
  {
    type metadata accessor for GregorianDayRange();
    v9[14] = 1;
    sub_250E248B0();
    sub_250D94AB4(&qword_26B206C78, MEMORY[0x263F07920]);
    sub_250E253B0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t GregorianDayRange.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t GregorianDayRange.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v23 = sub_250E248B0();
  uint64_t v20 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8CEA0();
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v25 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DD1E1C(0, &qword_269B03DE8, MEMORY[0x263F8E040]);
  uint64_t v26 = v8;
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = type metadata accessor for GregorianDayRange();
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DD1DC8();
  sub_250E25500();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  id v19 = a1;
  uint64_t v14 = (uint64_t)v13;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  char v28 = 0;
  sub_250DD1E80(&qword_269B03DF0, &qword_26B2075E8);
  uint64_t v17 = (uint64_t)v25;
  sub_250E25330();
  sub_250D89B98(v17, v14);
  char v27 = 1;
  sub_250D94AB4(&qword_26B2077E8, MEMORY[0x263F07920]);
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v14 + *(int *)(v11 + 20), v5, v16);
  sub_250D8C620(v14, v21, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return sub_250D886F8(v14, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
}

uint64_t sub_250DD1340()
{
  return sub_250E254F0();
}

uint64_t sub_250DD145C()
{
  return sub_250E24B70();
}

uint64_t sub_250DD1560()
{
  return sub_250E254F0();
}

uint64_t sub_250DD1678@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GregorianDayRange.init(from:)(a1, a2);
}

uint64_t sub_250DD1690(void *a1)
{
  return GregorianDayRange.encode(to:)(a1);
}

uint64_t static GregorianDayRange.today(containing:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  sub_250D88890();
  uint64_t v47 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v36 - v7;
  sub_250D8CEA0();
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  char v44 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_250E248B0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_250E24710();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_250E24B20();
  uint64_t v40 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v46, v14);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v22 = a2;
  uint64_t v46 = v11 + 16;
  v21(v13, a2, v10);
  sub_250E24AC0();
  sub_250D94AB4((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
    uint64_t v39 = v10;
    uint64_t v24 = v40;
    uint64_t v25 = v41;
    uint64_t v26 = &v41[*(int *)(v47 + 48)];
    uint64_t v37 = v22;
    char v27 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v27(v41, v20, v18);
    char v28 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v28(v26, v20, v18);
    char v29 = v42;
    uint64_t v30 = &v42[*(int *)(v47 + 48)];
    v27(v42, v25, v18);
    v27(v30, v26, v18);
    uint64_t v31 = (uint64_t)v44;
    v28(v44, v29, v18);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
    v32(v30, v18);
    uint64_t v33 = &v29[*(int *)(v47 + 48)];
    v28(v29, v25, v18);
    v28(v33, v26, v18);
    v28((char *)(v31 + *(int *)(v43 + 36)), v33, v18);
    v32(v29, v18);
    uint64_t v34 = v45;
    sub_250D89B98(v31, v45);
    uint64_t v35 = type metadata accessor for GregorianDayRange();
    return v38(v34 + *(int *)(v35 + 20), v37, v39);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t GregorianDayRange.sleepDayInterval.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for GregorianDayRange() + 20);

  return MEMORY[0x270EF33A0](v1);
}

uint64_t _s13HealthBalance17GregorianDayRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D8CEA0();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  sub_250E24B20();
  sub_250D94AB4(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v10 = sub_250E24BF0();
  sub_250D8C620(a1, (uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
  sub_250D8C620(a2, (uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
  if ((v10 & 1) == 0)
  {
    sub_250D886F8((uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
    sub_250D886F8((uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
    goto LABEL_5;
  }
  char v11 = sub_250E24BF0();
  sub_250D886F8((uint64_t)v7, (uint64_t (*)(void))sub_250D8CEA0);
  sub_250D886F8((uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
  if ((v11 & 1) == 0)
  {
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t v12 = type metadata accessor for GregorianDayRange();
  char v13 = MEMORY[0x253389430](a1 + *(int *)(v12 + 20), a2 + *(int *)(v12 + 20));
  return v13 & 1;
}

uint64_t sub_250DD1D64(uint64_t a1, uint64_t a2)
{
  sub_250D8CEA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_250DD1DC8()
{
  unint64_t result = qword_269B03DD8;
  if (!qword_269B03DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03DD8);
  }
  return result;
}

void sub_250DD1E1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DD1DC8();
    unint64_t v7 = a3(a1, &type metadata for GregorianDayRange.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250DD1E80(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D8CEA0();
    sub_250D94AB4(a2, MEMORY[0x263F090E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DD1F10()
{
  return sub_250D94AB4(&qword_269B03DF8, (void (*)(uint64_t))type metadata accessor for GregorianDayRange);
}

uint64_t *initializeBufferWithCopyOfBuffer for GregorianDayRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8CEA0();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = *(int *)(a3 + 20);
    char v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t assignWithCopy for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250D8CEA0();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t sub_250DD2260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250D8CEA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_250E248B0();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DD236C);
}

uint64_t sub_250DD236C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250D8CEA0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_250E248B0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_250DD2470()
{
  sub_250D8CEA0();
  if (v0 <= 0x3F)
  {
    sub_250E248B0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for GregorianDayRange.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DD2604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GregorianDayRange.CodingKeys()
{
  return &type metadata for GregorianDayRange.CodingKeys;
}

unint64_t sub_250DD2640()
{
  unint64_t result = qword_269B03E00;
  if (!qword_269B03E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E00);
  }
  return result;
}

unint64_t sub_250DD2698()
{
  unint64_t result = qword_269B03E08;
  if (!qword_269B03E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E08);
  }
  return result;
}

unint64_t sub_250DD26F0()
{
  unint64_t result = qword_269B03E10;
  if (!qword_269B03E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E10);
  }
  return result;
}

uint64_t sub_250DD2744(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7865646E49796164 && a2 == 0xED000065676E6152;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000250E2CF00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

id HKQuantityRange.init(celsiusChange:)(double a1, double a2)
{
  return sub_250DD2D48((SEL *)&selRef__changeInDegreeCelsiusUnit, a1, a2);
}

id HKQuantityRange.init(durationBetween:and:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v9 = self;
  uint64_t v10 = self;
  id result = objc_msgSend(v10, sel_minuteUnit);
  uint64_t v12 = 60 * a1;
  if ((unsigned __int128)(a1 * (__int128)60) >> 64 != (60 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v13 = __OFADD__(v12, a2);
  uint64_t v14 = v12 + a2;
  if (v13)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v15 = result;
  id v16 = objc_msgSend(v9, sel_quantityWithUnit_doubleValue_, result, (double)v14);

  id result = objc_msgSend(v10, sel_minuteUnit);
  uint64_t v17 = 60 * a3;
  if ((unsigned __int128)(a3 * (__int128)60) >> 64 != (60 * a3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  BOOL v13 = __OFADD__(v17, a4);
  uint64_t v18 = v17 + a4;
  if (!v13)
  {
    uint64_t v19 = result;
    id v20 = objc_msgSend(v9, sel_quantityWithUnit_doubleValue_, result, (double)v18);

    id v21 = objc_msgSend(v8, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v16, v20, 1, 1);
    return v21;
  }
LABEL_9:
  __break(1u);
  return result;
}

id HKQuantityRange.init(durationBetween:and:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v29 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v12 = self;
  BOOL v13 = self;
  id result = objc_msgSend(v13, sel_secondUnit);
  if ((unsigned __int128)(a1 * (__int128)60) >> 64 != (60 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v15 = 3600 * a1;
  if ((unsigned __int128)(60 * a1 * (__int128)60) >> 64 != (3600 * a1) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v16 = 60 * a2;
  if ((unsigned __int128)(a2 * (__int128)60) >> 64 != (60 * a2) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v17 = __OFADD__(v15, v16);
  uint64_t v18 = v15 + v16;
  if (v17)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  BOOL v17 = __OFADD__(v18, a3);
  uint64_t v19 = v18 + a3;
  if (v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v20 = result;
  id v21 = objc_msgSend(v12, sel_quantityWithUnit_doubleValue_, result, (double)v19);

  id result = objc_msgSend(v13, sel_secondUnit);
  if ((unsigned __int128)(a4 * (__int128)60) >> 64 != (60 * a4) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v22 = 3600 * a4;
  if ((unsigned __int128)(60 * a4 * (__int128)60) >> 64 != (3600 * a4) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v23 = 60 * a5;
  if ((unsigned __int128)(a5 * (__int128)60) >> 64 != (60 * a5) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  BOOL v17 = __OFADD__(v22, v23);
  uint64_t v24 = v22 + v23;
  if (v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  BOOL v17 = __OFADD__(v24, a6);
  uint64_t v25 = v24 + a6;
  if (!v17)
  {
    uint64_t v26 = result;
    id v27 = objc_msgSend(v12, sel_quantityWithUnit_doubleValue_, result, (double)v25);

    id v28 = objc_msgSend(v29, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v21, v27, 1, 1);
    return v28;
  }
LABEL_21:
  __break(1u);
  return result;
}

id HKQuantityRange.init(perMinute:)(double a1, double a2)
{
  return sub_250DD2D48((SEL *)&selRef__countPerMinuteUnit, a1, a2);
}

id HKQuantityRange.init(perSecond:)(double a1, double a2)
{
  return sub_250DD2D48((SEL *)&selRef__countPerSecondUnit, a1, a2);
}

id HKQuantityRange.init(percent:)(double a1, double a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = self;
  char v6 = self;
  id v7 = objc_msgSend(v6, sel_percentUnit);
  id v8 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v7, a1 / 100.0);

  id v9 = objc_msgSend(v6, sel_percentUnit);
  id v10 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v9, a2 / 100.0);

  id v11 = objc_msgSend(v4, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v8, v10, 1, 1);
  return v11;
}

id HKQuantityRange.init(s:)(double a1, double a2)
{
  return sub_250DD2D48((SEL *)&selRef_secondUnit, a1, a2);
}

id sub_250DD2D48(SEL *a1, double a2, double a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = self;
  id v8 = self;
  id v9 = [v8 *a1];
  id v10 = objc_msgSend(v7, sel_quantityWithUnit_doubleValue_, v9, a2);

  id v11 = [v8 *a1];
  id v12 = objc_msgSend(v7, sel_quantityWithUnit_doubleValue_, v11, a3);

  id v13 = objc_msgSend(v6, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v10, v12, 1, 1);
  return v13;
}

unsigned char *storeEnumTagSinglePayload for PlatformSpecificAppBundleProvider(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DD2F34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformSpecificAppBundleProvider()
{
  return &type metadata for PlatformSpecificAppBundleProvider;
}

uint64_t SleepingSampleBaselineComparisonCollection.mostRecentSampleDate.getter@<X0>(void (**a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleBaselineComparisonCollection.enclosingSampleDateInterval.getter(a1, a2, (uint64_t)v8);
  uint64_t v9 = sub_250E243F0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_250DD3EFC((uint64_t)v8, (uint64_t (*)(void))sub_250D927FC);
    uint64_t v11 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  else
  {
    sub_250E243B0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v13 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 0, 1, v13);
  }
}

uint64_t SleepingSampleBaselineComparisonCollection.enclosingSampleDateInterval.getter@<X0>(void (**a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v139 = a1;
  uint64_t v112 = a3;
  uint64_t v4 = sub_250E24710();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v107 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v106 = (char *)&v104 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v105 = (char *)&v104 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v110 = (char *)&v104 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v127 = (char *)&v104 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v119 = (char *)&v104 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v126 = (char *)&v104 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v129 = (char *)&v104 - v20;
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v144);
  uint64_t v143 = (uint64_t)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_250E243F0();
  uint64_t v113 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v125 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v124 = (char *)&v104 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v148 = (char *)&v104 - v30;
  uint64_t v31 = type metadata accessor for SleepingSampleBaselineComparison();
  id v138 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v31 - 8);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v33 = (char *)&v104 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v108 = (uint64_t)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v109 = (uint64_t)&v104 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v123 = (uint64_t)&v104 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v122 = (char *)&v104 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v121 = (uint64_t)&v104 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v120 = (char *)&v104 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  char v49 = (char *)&v104 - v48;
  MEMORY[0x270FA5388](v47);
  uint64_t v51 = (char *)&v104 - v50;
  uint64_t v52 = v5;
  uint64_t v53 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v5[7];
  v53((char *)&v104 - v50, 1, 1, v4);
  uint64_t v145 = v49;
  uint64_t v141 = v53;
  uint64_t v142 = v5 + 7;
  v53(v49, 1, 1, v4);
  uint64_t v54 = (*(uint64_t (**)(void (**)(char *, char *, uint64_t), uint64_t))(a2 + 8))(v139, a2);
  uint64_t v55 = *(void *)(v54 + 16);
  uint64_t v146 = v51;
  uint64_t v111 = v5;
  if (v55)
  {
    uint64_t v128 = v4;
    unint64_t v56 = (*((unsigned __int8 *)v138 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v138 + 80);
    uint64_t v104 = v54;
    uint64_t v57 = v54 + v56;
    uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
    uint64_t v140 = v138[9];
    uint64_t v115 = (void (**)(char *, char *, uint64_t))(v113 + 32);
    id v138 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 6);
    uint64_t v139 = (void (**)(char *, char *, uint64_t))(v113 + 16);
    uint64_t v114 = (void (**)(char *, uint64_t, uint64_t))(v52 + 4);
    v136 = (void (**)(char *, uint64_t))(v52 + 1);
    uint64_t v137 = (void (**)(char *, char *, uint64_t))(v52 + 2);
    uint64_t v59 = v129;
    uint64_t v118 = v23;
    uint64_t v117 = v33;
    int v116 = (unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
    uint64_t v135 = (void (**)(char *, uint64_t))(v113 + 8);
    uint64_t v147 = v25;
    do
    {
      sub_250D94810(v57, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v60 = v143;
      sub_250D94810((uint64_t)v33, v143, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      sub_250DD3EFC((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250D94810(v60 + *(int *)(v144 + 28), (uint64_t)v23, (uint64_t (*)(void))sub_250D927FC);
      sub_250DD3EFC(v60, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      if ((*v58)(v23, 1, v25) == 1)
      {
        sub_250DD3EFC((uint64_t)v23, (uint64_t (*)(void))sub_250D927FC);
      }
      else
      {
        int v61 = v148;
        (*v115)(v148, v23, v25);
        uint64_t v62 = v121;
        sub_250D94810((uint64_t)v146, v121, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v63 = *v139;
        uint64_t v64 = v124;
        (*v139)(v124, v61, v25);
        uint64_t v65 = *v138;
        int v66 = (*v138)(v62, 1, v4);
        uint64_t v132 = v65;
        uint64_t v133 = v63;
        if (v66 == 1)
        {
          sub_250E243E0();
          uint64_t v130 = *v135;
          v130(v64, v25);
          sub_250DD3EFC(v62, (uint64_t (*)(void))sub_250D94D70);
        }
        else
        {
          uint64_t v130 = *v135;
          v130(v64, v25);
          (*v114)(v59, v62, v4);
        }
        uint64_t v67 = v126;
        uint64_t v68 = v148;
        sub_250E243E0();
        sub_250DD5BF8((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
        char v69 = sub_250E24B90();
        uint64_t v70 = v59;
        uint64_t v71 = *v137;
        if (v69) {
          uint64_t v72 = v67;
        }
        else {
          uint64_t v72 = v59;
        }
        uint64_t v73 = (uint64_t)v120;
        uint64_t v131 = *v137;
        v71(v120, v72, v4);
        uint64_t v74 = *v136;
        (*v136)(v67, v4);
        v74(v70, v4);
        uint64_t v75 = (uint64_t)v146;
        sub_250DD3EFC((uint64_t)v146, (uint64_t (*)(void))sub_250D94D70);
        v141((char *)v73, 0, 1, v4);
        sub_250DD5C40(v73, v75, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v76 = v123;
        sub_250D94810((uint64_t)v145, v123, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v77 = v125;
        v133(v125, v68, v147);
        int v78 = v132(v76, 1, v4);
        uint64_t v134 = v55;
        if (v78 == 1)
        {
          uint64_t v79 = v119;
          sub_250E243B0();
          uint64_t v80 = v130;
          v130(v77, v147);
          sub_250DD3EFC(v76, (uint64_t (*)(void))sub_250D94D70);
        }
        else
        {
          uint64_t v80 = v130;
          v130(v77, v147);
          uint64_t v79 = v119;
          (*v114)(v119, v76, v4);
        }
        uint64_t v81 = v127;
        uint64_t v82 = v148;
        sub_250E243B0();
        if (sub_250E24BA0()) {
          uint64_t v83 = v81;
        }
        else {
          uint64_t v83 = v79;
        }
        uint64_t v84 = (uint64_t)v122;
        v131(v122, v83, v4);
        v74(v81, v4);
        v74(v79, v4);
        uint64_t v25 = v147;
        v80(v82, v147);
        uint64_t v85 = (uint64_t)v145;
        sub_250DD3EFC((uint64_t)v145, (uint64_t (*)(void))sub_250D94D70);
        v141((char *)v84, 0, 1, v4);
        sub_250DD5C40(v84, v85, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v59 = v129;
        uint64_t v23 = v118;
        uint64_t v33 = v117;
        uint64_t v58 = v116;
        uint64_t v55 = v134;
      }
      v57 += (uint64_t)v140;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease();
    uint64_t v4 = v128;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v86 = v109;
  sub_250D94810((uint64_t)v146, v109, (uint64_t (*)(void))sub_250D94D70);
  char v87 = v111;
  uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v111[6];
  int v89 = v88(v86, 1, v4);
  uint64_t v90 = v110;
  uint64_t v91 = (uint64_t)v145;
  if (v89 != 1)
  {
    uint64_t v92 = (void (*)(char *, uint64_t, uint64_t))v87[4];
    v92(v110, v86, v4);
    uint64_t v86 = v108;
    sub_250D94810(v91, v108, (uint64_t (*)(void))sub_250D94D70);
    if (v88(v86, 1, v4) != 1)
    {
      uint64_t v98 = v25;
      uint64_t v99 = v105;
      v92(v105, v86, v4);
      uint64_t v100 = (void (*)(char *, char *, uint64_t))v87[2];
      v100(v106, v90, v4);
      v100(v107, v99, v4);
      uint64_t v97 = v112;
      sub_250E243C0();
      uint64_t v101 = (void (*)(char *, uint64_t))v87[1];
      uint64_t v102 = v99;
      uint64_t v25 = v98;
      uint64_t v94 = (uint64_t)v145;
      v101(v102, v4);
      v101(v90, v4);
      uint64_t v93 = 0;
      uint64_t v96 = v113;
      uint64_t v95 = (uint64_t)v146;
      goto LABEL_26;
    }
    ((void (*)(char *, uint64_t))v87[1])(v90, v4);
  }
  sub_250DD3EFC(v91, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v93 = 1;
  uint64_t v94 = (uint64_t)v146;
  uint64_t v95 = v86;
  uint64_t v96 = v113;
  uint64_t v97 = v112;
LABEL_26:
  sub_250DD3EFC(v94, (uint64_t (*)(void))sub_250D94D70);
  sub_250DD3EFC(v95, (uint64_t (*)(void))sub_250D94D70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v97, v93, 1, v25);
}

uint64_t sub_250DD3EFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t SleepingSampleBaselineComparisonCollection.latestSampleCreationDate.getter@<X0>(void (**a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1;
  uint64_t v7 = (uint64_t)*(a1 - 1);
  MEMORY[0x270FA5388](a1);
  uint64_t v68 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v84);
  uint64_t v83 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_250E24710();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v76 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v73 = (char *)&v60 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v60 - v16;
  uint64_t v17 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v81 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v75 = (uint64_t)&v60 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v74 = (char *)&v60 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v60 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = *(void (**)(void))(v11 + 56);
  uint64_t v85 = (uint64_t)&v60 - v31;
  uint64_t v86 = v10;
  uint64_t v77 = v30;
  uint64_t v78 = v11 + 56;
  v30();
  uint64_t v32 = *(uint64_t (**)(void (**)(char *, char *, uint64_t), uint64_t))(a2 + 8);
  uint64_t v67 = v3;
  uint64_t v33 = v32(v5, a2);
  uint64_t v34 = *(void *)(v33 + 16);
  uint64_t v66 = v11;
  if (v34)
  {
    uint64_t v61 = a2;
    uint64_t v62 = v7;
    uint64_t v63 = v5;
    uint64_t v64 = a3;
    unint64_t v35 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
    uint64_t v60 = v33;
    uint64_t v36 = v33 + v35;
    uint64_t v37 = *(void *)(v81 + 72);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v80 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v81 = v11 + 48;
    uint64_t v39 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v71 = v37;
    uint64_t v72 = v19;
    char v69 = v29;
    uint64_t v70 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    do
    {
      sub_250D94810(v36, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v40 = v83;
      sub_250D94810((uint64_t)v19, v83, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      sub_250DD3EFC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250D94810(v40 + *(int *)(v84 + 32), (uint64_t)v29, (uint64_t (*)(void))sub_250D94D70);
      sub_250DD3EFC(v40, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
      uint64_t v41 = *v38;
      uint64_t v42 = v86;
      if ((*v38)(v29, 1, v86) == 1)
      {
        sub_250DD3EFC((uint64_t)v29, (uint64_t (*)(void))sub_250D94D70);
      }
      else
      {
        uint64_t v43 = *v70;
        uint64_t v44 = v82;
        (*v70)(v82, v29, v42);
        uint64_t v45 = v75;
        sub_250D94810(v85, v75, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v46 = v76;
        uint64_t v79 = *v80;
        v79(v76, v44, v42);
        uint64_t v47 = v42;
        if (v41((char *)v45, 1, v42) == 1)
        {
          uint64_t v48 = v73;
          v43(v73, v46, v42);
          sub_250DD3EFC(v45, (uint64_t (*)(void))sub_250D94D70);
        }
        else
        {
          (*v39)(v46, v42);
          uint64_t v48 = v73;
          v43(v73, (char *)v45, v42);
        }
        uint64_t v49 = v85;
        uint64_t v29 = v69;
        sub_250DD5BF8((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
        uint64_t v50 = v82;
        if (sub_250E24BA0()) {
          uint64_t v51 = v50;
        }
        else {
          uint64_t v51 = v48;
        }
        uint64_t v52 = (uint64_t)v74;
        v79(v74, v51, v47);
        uint64_t v53 = *v39;
        (*v39)(v48, v47);
        v53(v50, v47);
        sub_250DD3EFC(v49, (uint64_t (*)(void))sub_250D94D70);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v77)(v52, 0, 1, v47);
        sub_250DD5C40(v52, v49, (uint64_t (*)(void))sub_250D94D70);
        uint64_t v37 = v71;
        uint64_t v19 = v72;
        uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))v81;
      }
      v36 += v37;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
    a3 = v64;
    uint64_t v5 = v63;
    uint64_t v7 = v62;
    a2 = v61;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v54 = v85;
  uint64_t v55 = v65;
  sub_250D94810(v85, v65, (uint64_t (*)(void))sub_250D94D70);
  unint64_t v56 = v68;
  (*(void (**)(char *, uint64_t, void))(v7 + 16))(v68, v67, v5);
  uint64_t v57 = v66;
  uint64_t v58 = v86;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v55, 1, v86) == 1)
  {
    SleepingSampleBaselineComparisonCollection.mostRecentSampleDate.getter(v5, a2, a3);
    (*(void (**)(char *, void (**)(char *, char *, uint64_t)))(v7 + 8))(v56, v5);
    sub_250DD3EFC(v54, (uint64_t (*)(void))sub_250D94D70);
    return sub_250DD3EFC(v55, (uint64_t (*)(void))sub_250D94D70);
  }
  else
  {
    (*(void (**)(char *, void (**)(char *, char *, uint64_t)))(v7 + 8))(v56, v5);
    sub_250DD3EFC(v54, (uint64_t (*)(void))sub_250D94D70);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(a3, v55, v58);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v77)(a3, 0, 1, v58);
  }
}

BOOL SleepingSampleBaselineComparisonCollection.isWarmupDay.getter(uint64_t a1, uint64_t a2)
{
  sub_250D91EB4();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v9 = *(void *)(v45 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v45);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v44 = a2 + 8;
  uint64_t v18 = v43(a1, a2);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v41 = a1;
    uint64_t v42 = a2;
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v40 = v9;
    uint64_t v21 = *(void *)(v9 + 72);
    while (1)
    {
      sub_250D94810(v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      unsigned int v22 = v17[*(int *)(type metadata accessor for SleepingSampleAggregate() + 36)];
      sub_250DD3EFC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      if (v22 >= 3) {
        break;
      }
      v20 += v21;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    LODWORD(v19) = 1;
LABEL_8:
    a1 = v41;
    a2 = v42;
    uint64_t v9 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v43(a1, a2);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    LODWORD(v44) = v19;
    uint64_t v25 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t))v23;
    uint64_t v26 = v23 + ((v25 + 32) & ~v25);
    uint64_t v27 = *(void *)(v9 + 72);
    while (1)
    {
      sub_250D94810(v26, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v28 = type metadata accessor for SleepingSampleAggregate();
      unsigned int v29 = v15[*(int *)(v28 + 36)];
      if (v29 < 3) {
        break;
      }
      if (v29 == 3)
      {
        sub_250D94810((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      }
      else
      {
        uint64_t v35 = v46;
        sub_250D94810((uint64_t)&v15[*(int *)(v45 + 24)], v46, (uint64_t (*)(void))sub_250DC8DA4);
        uint64_t v36 = type metadata accessor for SleepingSampleBaseline();
        int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v35, 1, v36);
        sub_250DD3EFC(v35, (uint64_t (*)(void))sub_250DC8DA4);
        sub_250D94810((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        if (v37 != 1) {
          goto LABEL_16;
        }
      }
      sub_250DD3EFC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250DD3EFC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_13:
      v26 += v27;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        return (v44 & 1) != 0;
      }
    }
    sub_250D94810((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_16:
    sub_250D94810((uint64_t)&v12[*(int *)(v28 + 24)], (uint64_t)v6, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D922D0(0);
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)(v30 - 8);
    int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v6, 1, v30);
    if (v33 == 1)
    {
      sub_250DD3EFC((uint64_t)v6, (uint64_t (*)(void))sub_250D91EB4);
    }
    else
    {
      uint64_t v34 = (void *)sub_250E249B0();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v31);
    }
    sub_250DD3EFC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DD3EFC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if (v33 != 1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  return (v19 & 1) != 0;
}

BOOL SleepingSampleBaselineComparisonCollection.isWarmupPeriod.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleBaselineComparisonCollection.warmupProgress.getter(v6, v9, v12);
  uint64_t v10 = v12[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v10 < 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return 0;
  }
  else
  {
    SleepingSampleBaselineComparisonCollection.warmupProgress.getter(a1, a2, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return v12[0] < v12[1];
  }
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupProgress.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = SleepingSampleBaselineComparisonCollection.warmupDaysRemaining.getter(a1, a2);
  uint64_t result = SleepingSampleBaselineComparisonCollection.warmupDaysRequired.getter(a1, a2);
  if (__OFSUB__(result, v6))
  {
    __break(1u);
  }
  else
  {
    *a3 = (result - v6) & ~((result - v6) >> 63);
    a3[1] = result;
  }
  return result;
}

BOOL SleepingSampleBaselineComparisonCollection.isFirstDayAfterWarmup.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v5 = MEMORY[0x270FA5388](v52);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (uint64_t)&v43 - v7;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v11 = *(void *)(v54 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v54);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v43 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v50 = a1;
  uint64_t v51 = v2;
  uint64_t v48 = v20;
  uint64_t v49 = a2 + 8;
  uint64_t v21 = v20(a1, a2);
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v44 = v14;
    uint64_t v45 = v11;
    uint64_t v46 = a2;
    uint64_t v23 = v21 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v24 = *(void *)(v11 + 72);
    do
    {
      sub_250D94810(v23, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      uint64_t v25 = type metadata accessor for SleepingSampleAggregate();
      sub_250D94810((uint64_t)&v19[*(int *)(v25 + 24)], (uint64_t)v10, (uint64_t (*)(void))sub_250D91EB4);
      sub_250D922D0(0);
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v26) == 1)
      {
        sub_250DD3EFC((uint64_t)v10, (uint64_t (*)(void))sub_250D91EB4);
        sub_250D94810((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        sub_250DD3EFC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        sub_250DD3EFC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      }
      else
      {
        unsigned int v29 = (void *)sub_250E249B0();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v27);

        sub_250D94810((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        sub_250D94810((uint64_t)&v17[*(int *)(v54 + 20)], v53, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1) {
            sub_250DA9D04();
          }
          else {
            sub_250D96CC4();
          }
          uint64_t v32 = *(void *)(v53 + *(int *)(v31 + 48));
          sub_250DD3EFC(v53, (uint64_t (*)(void))sub_250D97944);
        }
        else
        {
          uint64_t v32 = 0;
        }
        sub_250DD3EFC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        sub_250DD3EFC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        if (v32 == 6)
        {
          swift_bridgeObjectRelease();
          char v33 = 1;
          goto LABEL_15;
        }
      }
      v23 += v24;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    char v33 = 0;
LABEL_15:
    uint64_t v11 = v45;
    uint64_t v14 = v44;
    uint64_t v34 = v48(v50, v46);
  }
  else
  {
    swift_bridgeObjectRelease();
    char v33 = 0;
    uint64_t v34 = v48(v50, a2);
  }
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    uint64_t v36 = v34 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v37 = *(void *)(v11 + 72);
    uint64_t v38 = (uint64_t)v47;
    do
    {
      sub_250D94810(v36, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250D94810((uint64_t)&v14[*(int *)(v54 + 20)], v38, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      int v39 = swift_getEnumCaseMultiPayload();
      if (v39 == 2)
      {
        sub_250D96CC4();
      }
      else
      {
        if (v39 != 1)
        {
          sub_250DD3EFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
          goto LABEL_20;
        }
        sub_250DA9D04();
      }
      uint64_t v41 = *(void *)(v38 + *(int *)(v40 + 48));
      sub_250DD3EFC(v38, (uint64_t (*)(void))sub_250D97944);
      sub_250DD3EFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      if (v41 > 6)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_20:
      v36 += v37;
      --v35;
    }
    while (v35);
  }
  swift_bridgeObjectRelease();
  return (v33 & 1) != 0;
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupDaysRequired.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = a1;
  uint64_t v3 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v64 = (uint64_t)&v57 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v66 = (uint64_t *)((char *)&v57 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v57 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v57 - v14);
  uint64_t v16 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v57 - v21;
  sub_250DBBC34(0);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v63, a2);
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v63 = v26;
  if (v27)
  {
    uint64_t v28 = v26;
    uint64_t v58 = v25;
    uint64_t v59 = v6;
    uint64_t v29 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v62 = v27;
    uint64_t v61 = v26 + ((v29 + 32) & ~v29);
    uint64_t result = sub_250D94810(v61, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if (v62 != 1)
    {
      unint64_t v36 = 1;
      uint64_t v65 = v16;
      uint64_t v60 = v17;
      while (v36 < *(void *)(v28 + 16))
      {
        sub_250D94810(v61 + *(void *)(v17 + 72) * v36, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        uint64_t v37 = type metadata accessor for SleepingSampleAggregate();
        BOOL v38 = v20[*(int *)(v37 + 36)] < 3u;
        uint64_t v39 = (uint64_t)&v20[*(int *)(v16 + 20)];
        sub_250D94810(v39, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            sub_250DA9D04();
            uint64_t v42 = *(uint64_t *)((char *)v15 + *(int *)(v41 + 64));
            sub_250DD3EFC((uint64_t)v15, (uint64_t (*)(void))sub_250D97944);
          }
          else
          {
            sub_250DD3EFC((uint64_t)v15, (uint64_t (*)(void))sub_250D97944);
            uint64_t v42 = 6;
          }
        }
        else
        {
          uint64_t v42 = *v15;
        }
        sub_250D94810(v39, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
        uint64_t result = swift_getEnumCaseMultiPayload();
        if (result)
        {
          if (result == 1) {
            sub_250DA9D04();
          }
          else {
            sub_250D96CC4();
          }
          uint64_t v44 = *(void *)&v13[*(int *)(v43 + 48)];
          uint64_t result = sub_250DD3EFC((uint64_t)v13, (uint64_t (*)(void))sub_250D97944);
        }
        else
        {
          uint64_t v44 = 0;
        }
        uint64_t v45 = v42 - v44;
        if (__OFSUB__(v42, v44)) {
          goto LABEL_49;
        }
        BOOL v46 = __OFADD__(v45, v38);
        uint64_t v47 = v45 + v38;
        if (v46) {
          goto LABEL_50;
        }
        BOOL v48 = v22[*(int *)(v37 + 36)] < 3u;
        uint64_t v49 = (uint64_t)&v22[*(int *)(v65 + 20)];
        sub_250D94810(v49, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
        int v50 = swift_getEnumCaseMultiPayload();
        if (v50)
        {
          if (v50 == 1)
          {
            sub_250DA9D04();
            uint64_t v52 = *(uint64_t *)((char *)v66 + *(int *)(v51 + 64));
            sub_250DD3EFC((uint64_t)v66, (uint64_t (*)(void))sub_250D97944);
          }
          else
          {
            sub_250DD3EFC((uint64_t)v66, (uint64_t (*)(void))sub_250D97944);
            uint64_t v52 = 6;
          }
        }
        else
        {
          uint64_t v52 = *v66;
        }
        sub_250D94810(v49, v64, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
        uint64_t result = swift_getEnumCaseMultiPayload();
        if (result)
        {
          if (result == 1) {
            sub_250DA9D04();
          }
          else {
            sub_250D96CC4();
          }
          uint64_t v54 = *(void *)(v64 + *(int *)(v53 + 48));
          uint64_t result = sub_250DD3EFC(v64, (uint64_t (*)(void))sub_250D97944);
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v55 = v52 - v54;
        if (__OFSUB__(v52, v54)) {
          goto LABEL_51;
        }
        BOOL v46 = __OFADD__(v55, v48);
        uint64_t v56 = v55 + v48;
        if (v46) {
          goto LABEL_52;
        }
        if (v56 < 0 || (v47 & ~(v47 >> 63)) >= v56)
        {
          uint64_t result = sub_250DD3EFC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        }
        else
        {
          sub_250DD3EFC((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
          uint64_t result = sub_250DD5C40((uint64_t)v20, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
        }
        uint64_t v16 = v65;
        uint64_t v17 = v60;
        uint64_t v28 = v63;
        if (v62 == ++v36) {
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_3:
    uint64_t v25 = v58;
    sub_250DD5C40((uint64_t)v22, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
    uint64_t v6 = v59;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v25, 1, 1, v16);
  }
  swift_bridgeObjectRelease();
  int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v25, 1, v16);
  uint64_t v32 = (uint64_t (*)(void))sub_250DBBC34;
  if (v31 == 1)
  {
    uint64_t v33 = 7;
LABEL_47:
    sub_250DD3EFC((uint64_t)v25, v32);
    return v33;
  }
  sub_250D94810((uint64_t)&v25[*(int *)(v16 + 20)], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1)
    {
      sub_250DA9D04();
      uint64_t v35 = *(uint64_t *)((char *)v6 + *(int *)(v34 + 64));
      uint64_t result = sub_250DD3EFC((uint64_t)v6, (uint64_t (*)(void))sub_250D97944);
    }
    else
    {
      uint64_t result = sub_250DD3EFC((uint64_t)v6, (uint64_t (*)(void))sub_250D97944);
      uint64_t v35 = 6;
    }
  }
  else
  {
    uint64_t v35 = *v6;
  }
  BOOL v46 = __OFADD__(v35, 1);
  uint64_t v33 = v35 + 1;
  if (!v46)
  {
    uint64_t v32 = (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison;
    goto LABEL_47;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupDaysRemaining.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 8))();
  uint64_t v3 = sub_250DD5CD4(v2, (void (*)(uint64_t *__return_ptr, char *))sub_250DD5CA8, 0);
  char v5 = v4;
  swift_bridgeObjectRelease();
  if (v5) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t sub_250DD5BF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DD5C40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DD5CA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SleepingSampleBaselineComparison.warmupDaysRemaining.getter();
  *a1 = result;
  return result;
}

uint64_t sub_250DD5CD4(uint64_t a1, void (*a2)(uint64_t *__return_ptr, char *), uint64_t a3)
{
  void (*v24)(uint64_t *__return_ptr, char *);
  uint64_t v25;
  _DWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t *__return_ptr, char *);
  uint64_t v32;

  uint64_t v6 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DBBC34(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v26 - v14;
  uint64_t v29 = a1;
  uint64_t v30 = 0;
  int v31 = a2;
  uint64_t v32 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_250DD5FE0();
  uint64_t v18 = result;
  if (v17)
  {
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease();
    return v18;
  }
  v26[3] = v17;
  uint64_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v27 = v7;
  uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  while (1)
  {
    unint64_t v21 = v30;
    unint64_t v22 = *(void *)(v29 + 16);
    if (v30 == v22)
    {
      uint64_t v23 = 1;
      goto LABEL_7;
    }
    if (v30 >= v22) {
      break;
    }
    sub_250D94810(v29+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v30, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v23 = 0;
    uint64_t v30 = v21 + 1;
LABEL_7:
    (*v19)(v15, v23, 1, v6);
    uint64_t v24 = v31;
    sub_250DD5C40((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))sub_250DBBC34);
    if ((*v20)(v13, 1, v6) == 1) {
      goto LABEL_11;
    }
    sub_250DD5C40((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    v24(&v28, v9);
    uint64_t v25 = v28;
    uint64_t result = sub_250DD3EFC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if (v25 < v18) {
      uint64_t v18 = v25;
    }
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.baselineComparisons.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.morningIndexRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.outOfRangeMetricCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.baselineComparisons(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_250DD5FE0()
{
  void (*v14)(uint64_t *__return_ptr, char *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  char v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DBBC34(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v16 - v10;
  unint64_t v12 = v0[1];
  unint64_t v13 = *(void *)(*v0 + 16);
  if (v12 == v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))((char *)&v16 - v10, 1, 1, v1);
  }
  else
  {
    if (v12 >= v13)
    {
      __break(1u);
      return result;
    }
    sub_250D94810(*v0+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v12, (uint64_t)&v16 - v10, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    v0[1] = v12 + 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v11, 0, 1, v1);
  }
  uint64_t v14 = (void (*)(uint64_t *__return_ptr, char *))v0[2];
  sub_250DD5C40((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))sub_250DBBC34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1) {
    return 0;
  }
  sub_250DD5C40((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  v14(&v17, v4);
  uint64_t v15 = v17;
  sub_250DD3EFC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v15;
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DD6D80(v1, a1, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.setter(uint64_t a1)
{
  return sub_250DB982C(a1, v1);
}

uint64_t (*SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.init(gregorianDayRange:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250D86138(a1, a2, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.currentAndUpdatingDaySummaryCollections(for:debugIdentifier:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v59 = a1;
  v50[1] = a2;
  uint64_t v57 = a4;
  uint64_t Descriptor = type metadata accessor for SleepingSampleDaySummaryQueryDescriptor();
  uint64_t v56 = *(void *)(Descriptor - 8);
  uint64_t v55 = *(void *)(v56 + 64);
  MEMORY[0x270FA5388](Descriptor - 8);
  uint64_t v54 = (uint64_t)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_250E248B0();
  uint64_t v62 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v61 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8CEA0();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DD894C(0, &qword_26B206F98, MEMORY[0x263F8F688]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v50 - v13;
  sub_250DD894C(0, &qword_26B206FA8, MEMORY[0x263F8F690]);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)v50 - v20;
  type metadata accessor for SleepingSampleDaySummaryCollection();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F680], v11);
  sub_250E24E70();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v52 = sub_250D8CEA0;
  uint64_t v22 = v53;
  sub_250DD6D80(v53, (uint64_t)v9, (uint64_t (*)(void))sub_250D8CEA0);
  uint64_t v23 = v22 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  v51(v61, v23, v60);
  uint64_t v24 = v22;
  uint64_t v25 = v54;
  sub_250DD6D80(v24, v54, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v27 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v21;
  v26(v27, v21, v16);
  unint64_t v28 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  unint64_t v29 = (v55 + *(unsigned __int8 *)(v17 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v30 = swift_allocObject();
  sub_250D86138(v25, v30 + v28, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  uint64_t v55 = v17;
  uint64_t v56 = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v30 + v29, v27, v16);
  sub_250DB6480();
  uint64_t v32 = v31;
  uint64_t v33 = objc_allocWithZone(v31);
  uint64_t v34 = (uint64_t *)&v33[qword_26B207E30];
  *uint64_t v34 = 0;
  v34[1] = 0;
  *(void *)&v33[qword_26B207E40] = MEMORY[0x263F8EE78];
  uint64_t v35 = &v33[qword_26B20BBA0];
  *uint64_t v35 = 0;
  v35[1] = 0;
  sub_250DD6D80((uint64_t)v9, (uint64_t)&v33[qword_26B20BB98], (uint64_t (*)(void))v52);
  uint64_t v37 = v60;
  unint64_t v36 = v61;
  v51(&v33[qword_26B20BBA8], (uint64_t)v61, v60);
  v33[qword_26B20BBB0] = 1;
  uint64_t v38 = *v34;
  *uint64_t v34 = (uint64_t)sub_250DD6FDC;
  v34[1] = v30;
  swift_retain();
  sub_250D8C39C(v38);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v39 = (void *)sub_250E24DB0();
  v63.receiver = v33;
  v63.super_class = v32;
  id v40 = objc_msgSendSuper2(&v63, sel_initWithQueryDescriptors_, v39);
  uint64_t v41 = v58;
  swift_release();

  (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v37);
  sub_250D8A0DC((uint64_t)v9);
  id v42 = v40;
  if (v41) {
    uint64_t v41 = (void *)sub_250E24C30();
  }
  objc_msgSend(v40, sel_setDebugIdentifier_, v41);

  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v59;
  *(void *)(v43 + 16) = v40;
  *(void *)(v43 + 24) = v44;
  id v45 = v40;
  id v46 = v44;
  uint64_t v47 = v56;
  BOOL v48 = v57;
  sub_250E24E80();
  objc_msgSend(v46, sel_executeQuery_, v45);

  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v48, v47);
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQueryDescriptor()
{
  uint64_t result = qword_26B207218;
  if (!qword_26B207218) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_250DD696C(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a4;
  LODWORD(v6) = a3;
  sub_250DD894C(0, &qword_26B206F88, MEMORY[0x263F8F670]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v39 = (char *)&v30 - v12;
  sub_250DD894C(0, &qword_26B207380, MEMORY[0x263F8E848]);
  uint64_t v38 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v30 - v14);
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_250E24950();
  __swift_project_value_buffer(v16, (uint64_t)qword_26B207A58);
  id v17 = a1;
  uint64_t v18 = sub_250E24930();
  os_log_type_t v19 = sub_250E24F40();
  if (!os_log_type_enabled(v18, v19))
  {

    if ((v6 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    void *v15 = a2;
    goto LABEL_8;
  }
  uint64_t v20 = swift_slowAlloc();
  int v34 = v6;
  uint64_t v6 = v20;
  uint64_t v21 = swift_slowAlloc();
  uint64_t v36 = a5;
  int v31 = (void *)v21;
  uint64_t v33 = swift_slowAlloc();
  uint64_t v41 = v33;
  *(_DWORD *)uint64_t v6 = 136446466;
  uint64_t v35 = v10;
  uint64_t v40 = sub_250D8B44C(0xD000000000000027, 0x8000000250E299F0, &v41);
  sub_250E24FC0();
  *(_WORD *)(v6 + 12) = 2112;
  uint64_t v40 = (uint64_t)v17;
  id v22 = v17;
  uint64_t v32 = v15;
  uint64_t v23 = v18;
  id v24 = v22;
  uint64_t v10 = v35;
  sub_250E24FC0();
  uint64_t v25 = v31;
  *int v31 = v17;

  _os_log_impl(&dword_250D84000, v23, v19, "[%{public}s] Yielding query results to stream: %@", (uint8_t *)v6, 0x16u);
  sub_250DD88E4();
  swift_arrayDestroy();
  MEMORY[0x25338A890](v25, -1, -1);
  uint64_t v26 = v33;
  swift_arrayDestroy();
  MEMORY[0x25338A890](v26, -1, -1);
  uint64_t v27 = v6;
  LOBYTE(v6) = v34;
  MEMORY[0x25338A890](v27, -1, -1);

  uint64_t v15 = v32;
  if (v6) {
    goto LABEL_7;
  }
LABEL_5:
  sub_250DD6D80(v37, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
  *(void *)((char *)v15 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20)) = a2;
LABEL_8:
  swift_storeEnumTagMultiPayload();
  sub_250DD8860(a2, v6 & 1);
  sub_250DD894C(0, &qword_26B206FA8, MEMORY[0x263F8F690]);
  unint64_t v28 = v39;
  sub_250E24E90();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
  return sub_250DD886C((uint64_t)v15);
}

uint64_t sub_250DD6D80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DD6DE8()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  sub_250DD894C(0, &qword_26B206FA8, MEMORY[0x263F8F690]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v2 | v8 | 7;
  uint64_t v12 = v0 + v3;
  uint64_t v13 = sub_250E24B20();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  sub_250D8CEA0();
  v14(v12 + *(int *)(v15 + 36), v13);
  uint64_t v16 = v12 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v17 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t sub_250DD6FDC(void *a1, void *a2, char a3)
{
  int v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  sub_250DD894C(0, &qword_26B206FA8, MEMORY[0x263F8F690]);
  uint64_t v11 = v3
      + ((v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));

  return sub_250DD696C(a1, a2, v6, v3 + v8, v11);
}

id sub_250DD70E4(uint64_t a1, void *a2, void *a3)
{
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_250E24950();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B207A58);
  id v6 = a2;
  uint64_t v7 = sub_250E24930();
  os_log_type_t v8 = sub_250E24F40();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v9 = 136446466;
    sub_250D8B44C(0xD000000000000027, 0x8000000250E299F0, &v15);
    sub_250E24FC0();
    *(_WORD *)(v9 + 12) = 2112;
    uint64_t v11 = a3;
    id v12 = v6;
    sub_250E24FC0();
    *uint64_t v10 = v6;

    a3 = v11;
    _os_log_impl(&dword_250D84000, v7, v8, "[%{public}s] Stopping query for stream termination: %@", (uint8_t *)v9, 0x16u);
    sub_250DD88E4();
    swift_arrayDestroy();
    MEMORY[0x25338A890](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v14, -1, -1);
    MEMORY[0x25338A890](v9, -1, -1);
  }
  else
  {
  }
  return objc_msgSend(a3, sel_stopQuery_, v6);
}

uint64_t sub_250DD7320()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id sub_250DD7360(uint64_t a1)
{
  return sub_250DD70E4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.currentDaySummaryCollection(for:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  void v5[2] = a1;
  return MEMORY[0x270FA2498](sub_250DD7390, 0, 0);
}

uint64_t sub_250DD7390()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v8;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = type metadata accessor for SleepingSampleDaySummaryCollection();
  *uint64_t v4 = v0;
  v4[1] = sub_250DD74A0;
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2360](v6, 0, 0, 0xD000000000000031, 0x8000000250E2D400, sub_250DD7B14, v3, v5);
}

uint64_t sub_250DD74A0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_250DD75DC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_250DD75DC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_250DD7640(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v46 = a5;
  uint64_t v37 = a4;
  uint64_t v43 = a1;
  uint64_t v44 = a3;
  sub_250DD894C(0, &qword_26B206C50, MEMORY[0x263F8F480]);
  uint64_t v41 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t Descriptor = type metadata accessor for SleepingSampleDaySummaryQueryDescriptor();
  uint64_t v38 = *(void *)(Descriptor - 8);
  uint64_t v11 = *(void *)(v38 + 64);
  MEMORY[0x270FA5388](Descriptor - 8);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_250E248B0();
  uint64_t v39 = v13;
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v14 = v45;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v16;
  sub_250D8CEA0();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v48 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = sub_250D8CEA0;
  sub_250DD6D80(a2, v48, (uint64_t (*)(void))sub_250D8CEA0);
  uint64_t v19 = a2 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v40(v16, v19, v13);
  sub_250DD6D80(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  uint64_t v20 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v43, v41);
  unint64_t v21 = (*(unsigned __int8 *)(v38 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v22 = (v11 + *(unsigned __int8 *)(v7 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = swift_allocObject();
  id v24 = v44;
  *(void *)(v23 + 16) = v44;
  sub_250D86138((uint64_t)v12, v23 + v21, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v23 + v22, v9, v20);
  sub_250DB6480();
  uint64_t v26 = v25;
  uint64_t v27 = objc_allocWithZone(v25);
  unint64_t v28 = (uint64_t *)&v27[qword_26B207E30];
  *unint64_t v28 = 0;
  v28[1] = 0;
  *(void *)&v27[qword_26B207E40] = MEMORY[0x263F8EE78];
  unint64_t v29 = &v27[qword_26B20BBA0];
  *unint64_t v29 = 0;
  v29[1] = 0;
  sub_250DD6D80(v48, (uint64_t)&v27[qword_26B20BB98], (uint64_t (*)(void))v42);
  uint64_t v30 = v39;
  v40(&v27[qword_26B20BBA8], (uint64_t)v47, v39);
  v27[qword_26B20BBB0] = 0;
  uint64_t v31 = *v28;
  *unint64_t v28 = (uint64_t)sub_250DD86D4;
  v28[1] = v23;
  id v32 = v24;
  swift_retain();
  sub_250D8C39C(v31);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v33 = (void *)sub_250E24DB0();
  v49.receiver = v27;
  v49.super_class = v26;
  int v34 = v46;
  id v35 = objc_msgSendSuper2(&v49, sel_initWithQueryDescriptors_, v33, v37);
  swift_release();

  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v30);
  sub_250D8A0DC(v48);
  id v36 = v35;
  if (v34) {
    int v34 = (void *)sub_250E24C30();
  }
  objc_msgSend(v35, sel_setDebugIdentifier_, v34);

  objc_msgSend(v32, sel_executeQuery_, v35);
}

void sub_250DD7B14(uint64_t a1)
{
  sub_250DD7640(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummaryQueryDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8CEA0();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = (char *)a1 + v10;
    id v12 = (char *)a2 + v10;
    uint64_t v13 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1)
{
  uint64_t v2 = sub_250E24B20();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250D8CEA0();
  v3(a1 + *(int *)(v4 + 36), v2);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v6 = sub_250E248B0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  sub_250D8CEA0();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  uint64_t v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  sub_250D8CEA0();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  uint64_t v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  sub_250D8CEA0();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  uint64_t v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  sub_250D8CEA0();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  uint64_t v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DD80FC);
}

uint64_t sub_250DD80FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DD817C);
}

uint64_t sub_250DD817C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_250DD81EC()
{
  uint64_t result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250DD8278(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  v21[0] = a6;
  uint64_t v11 = type metadata accessor for SleepingSampleDaySummaryCollection();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DD894C(0, &qword_26B207380, MEMORY[0x263F8E848]);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (void *)((char *)v21 - v18);
  objc_msgSend(a4, sel_stopQuery_, a1, v21[0]);
  if (a3)
  {
    *uint64_t v19 = a2;
  }
  else
  {
    sub_250DD6D80(a5, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for GregorianDayRange);
    *(void *)((char *)v19 + *(int *)(v11 + 20)) = a2;
  }
  swift_storeEnumTagMultiPayload();
  sub_250DD87E0((uint64_t)v19, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21[1] = *v17;
    sub_250DD8860(a2, a3 & 1);
    sub_250DD894C(0, &qword_26B206C50, MEMORY[0x263F8F480]);
    sub_250E24E50();
  }
  else
  {
    sub_250D86138((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
    sub_250DD8860(a2, a3 & 1);
    sub_250DD894C(0, &qword_26B206C50, MEMORY[0x263F8F480]);
    sub_250E24E60();
  }
  return sub_250DD886C((uint64_t)v19);
}

uint64_t sub_250DD84D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  sub_250DD894C(0, &qword_26B206C50, MEMORY[0x263F8F480]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v2 | v8 | 7;

  uint64_t v12 = v0 + v3;
  uint64_t v13 = sub_250E24B20();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  sub_250D8CEA0();
  v14(v12 + *(int *)(v15 + 36), v13);
  uint64_t v16 = v12 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v17 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t sub_250DD86D4(uint64_t a1, void *a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  sub_250DD894C(0, &qword_26B206C50, MEMORY[0x263F8F480]);
  uint64_t v11 = *(void **)(v3 + 16);
  uint64_t v12 = v3
      + ((v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));

  return sub_250DD8278(a1, a2, v6, v11, v3 + v8, v12);
}

uint64_t sub_250DD87E0(uint64_t a1, uint64_t a2)
{
  sub_250DD894C(0, &qword_26B207380, MEMORY[0x263F8E848]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_250DD8860(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_250DD886C(uint64_t a1)
{
  sub_250DD894C(0, &qword_26B207380, MEMORY[0x263F8E848]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_250DD88E4()
{
  if (!qword_26B206FD0)
  {
    sub_250D98B48(255, (unint64_t *)&unk_26B206FC0);
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B206FD0);
    }
  }
}

void sub_250DD894C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for SleepingSampleDaySummaryCollection();
    unint64_t v7 = sub_250DBF0D4();
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t SleepingSampleQueryRange.init(morningIndexRange:gregorianCalendar:baselineWindowDays:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_250D888F8(a1, a4, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v7 = a4 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v8 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
  uint64_t result = type metadata accessor for SleepingSampleQueryRange();
  *(void *)(a4 + *(int *)(result + 20)) = a3;
  return result;
}

uint64_t SleepingSampleQueryRange.morningIndexRange.setter(uint64_t a1)
{
  return sub_250DB982C(a1, v1);
}

uint64_t (*SleepingSampleQueryRange.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleQueryRange.baselineWindowDays.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for SleepingSampleQueryRange();
  *(void *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*SleepingSampleQueryRange.baselineWindowDays.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleQueryRange.description.getter()
{
  return 0;
}

uint64_t SleepingSampleQueryRange.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t SleepingSampleQueryRange.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250DD8EA0()
{
  return sub_250E254F0();
}

uint64_t sub_250DD8FF0()
{
  return sub_250E254C0();
}

uint64_t sub_250DD9128()
{
  return sub_250E254F0();
}

BOOL _s13HealthBalance24SleepingSampleQueryRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  sub_250E24B20();
  sub_250D94AFC(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v10 = sub_250E24BF0();
  sub_250D88810(a1, (uint64_t)v9);
  sub_250D88810(a2, (uint64_t)v7);
  if (v10)
  {
    char v11 = sub_250E24BF0();
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    sub_250D88758((uint64_t)v7, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D88758((uint64_t)v9, (unint64_t *)&qword_26B2081C0, v12);
    if (v11)
    {
      uint64_t v13 = type metadata accessor for GregorianDayRange();
      if (MEMORY[0x253389430](a1 + *(int *)(v13 + 20), a2 + *(int *)(v13 + 20)))
      {
        uint64_t Range = type metadata accessor for SleepingSampleQueryRange();
        return *(void *)(a1 + *(int *)(Range + 20)) == *(void *)(a2 + *(int *)(Range + 20));
      }
    }
  }
  else
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    sub_250D88758((uint64_t)v7, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D88758((uint64_t)v9, (unint64_t *)&qword_26B2081C0, v16);
  }
  return 0;
}

uint64_t sub_250DD9494()
{
  return sub_250D94AFC(&qword_269B03E20, (void (*)(uint64_t))type metadata accessor for SleepingSampleQueryRange);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleQueryRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
    char v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithTake for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250D8C96C(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_250DD9874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DD98F4);
}

uint64_t sub_250DD98F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_250DD9964()
{
  uint64_t result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_250DD99FC(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v109 = a2;
  uint64_t v108 = a1;
  uint64_t v2 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v105 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v122 = (uint64_t)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v116 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v127 = (uint64_t)&v98 - v5;
  sub_250DDC7D4();
  uint64_t v119 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v131 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v115 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v117 = (char *)&v98 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v100 = (char *)&v98 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v99 = (char *)&v98 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v126 = (char *)&v98 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v114 = (char *)&v98 - v20;
  sub_250DDC8CC();
  uint64_t v113 = v21;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v112 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v107 = (uint64_t *)((char *)&v98 - v25);
  MEMORY[0x270FA5388](v24);
  uint64_t v106 = (uint64_t)&v98 - v26;
  sub_250DDC838();
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v118 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v111 = (char *)&v98 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  int v34 = (char *)&v98 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  uint64_t v102 = (uint64_t)&v98 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v129 = (uint64_t)&v98 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v98 - v39;
  sub_250DDAC98(0, (unint64_t *)&qword_269B03E58, (unint64_t *)&qword_269B03E60, MEMORY[0x263F8D1E0], MEMORY[0x263F8DE58]);
  uint64_t v123 = (int *)(v41 - 8);
  MEMORY[0x270FA5388](v41 - 8);
  uint64_t v43 = (char *)&v98 - v42;
  uint64_t v120 = (char *)&v98 - v42;
  uint64_t v44 = MEMORY[0x263F8D1C0];
  sub_250DDAC98(0, &qword_269B03E28, &qword_269B03E30, MEMORY[0x263F8D1C0], MEMORY[0x263F8DF48]);
  MEMORY[0x270FA5388](v45 - 8);
  uint64_t v47 = (char *)&v98 - v46;
  sub_250DDAC98(0, &qword_269B03E68, &qword_269B03E30, v44, MEMORY[0x263F8DF40]);
  uint64_t v121 = (void (**)(uint64_t, uint64_t))(v48 - 8);
  MEMORY[0x270FA5388](v48 - 8);
  int v50 = (char *)&v98 - v49;
  uint64_t v133 = MEMORY[0x263F8EE78];
  sub_250DBA24C(0, 0, 0);
  sub_250DDC9DC((uint64_t)v130, (uint64_t)v47);
  uint64_t v51 = v128;
  sub_250D8C688((uint64_t)v47, (uint64_t)v43, (unint64_t *)&qword_26B2081C0, v128);
  uint64_t v52 = v9;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v54 = (uint64_t)v40;
  v53(v40, v47, v8);
  uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v55((uint64_t)v40, 0, 1, v8);
  uint64_t v56 = v55;
  sub_250D887B4((uint64_t)v47, (unint64_t *)&qword_26B2081C0, v51);
  uint64_t v57 = v123;
  uint64_t v58 = (uint64_t)v120;
  sub_250DDCB74(v54, (uint64_t)&v120[v123[11]], (uint64_t (*)(void))sub_250DDC838);
  sub_250DDCA78(v58, (uint64_t)v50);
  uint64_t v110 = *((int *)v121 + 11);
  *(void *)&v50[v110] = 0;
  uint64_t v59 = v57[11];
  uint64_t v130 = v50;
  uint64_t v60 = (uint64_t)&v50[v59];
  uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v52 + 56);
  uint64_t v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  objc_super v63 = (int *)(v52 + 32);
  uint64_t v128 = v61;
  uint64_t v120 = v34;
  uint64_t v121 = (void (**)(uint64_t, uint64_t))((char *)v61 - 48);
  uint64_t v104 = v62;
  uint64_t v123 = v63;
  uint64_t v124 = v55;
  uint64_t v103 = v60;
  while (1)
  {
    uint64_t v64 = v129;
    v56(v129, 1, 1, v8);
    uint64_t v65 = v131;
    uint64_t v66 = v131 + *(int *)(v119 + 48);
    sub_250DDCC58(v60, v131, (uint64_t (*)(void))sub_250DDC838);
    sub_250DDCC58(v64, v66, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v67 = *v62;
    if ((*v62)(v65, 1, v8) == 1)
    {
      unsigned int v68 = v67(v66, 1, v8);
      uint64_t v69 = (uint64_t)v118;
      if (v68 == 1)
      {
        sub_250DDCB14(v131, (uint64_t (*)(void))sub_250DDC838);
        sub_250DDCB14(v129, (uint64_t (*)(void))sub_250DDC838);
LABEL_22:
        sub_250DDCBDC((uint64_t)v130, &qword_269B03E68, MEMORY[0x263F8DF40]);
        return v133;
      }
      goto LABEL_7;
    }
    uint64_t v70 = v102;
    sub_250DDCC58(v131, v102, (uint64_t (*)(void))sub_250DDC838);
    if (v67(v66, 1, v8) == 1)
    {
      (*v121)(v70, v8);
      uint64_t v69 = (uint64_t)v118;
LABEL_7:
      sub_250DDCB14(v131, (uint64_t (*)(void))sub_250DDC7D4);
      sub_250DDCB14(v129, (uint64_t (*)(void))sub_250DDC838);
      goto LABEL_9;
    }
    uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))v63;
    uint64_t v72 = v70;
    uint64_t v73 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))v63)(v99, v72, v8);
    uint64_t v74 = v100;
    v71(v100, v66, v8);
    sub_250D94A28(&qword_26B206F80);
    int v101 = sub_250E24BF0();
    uint64_t v75 = *v121;
    uint64_t v76 = v74;
    int v34 = v120;
    (*v121)((uint64_t)v76, v8);
    v75((uint64_t)v73, v8);
    sub_250DDCB14(v131, (uint64_t (*)(void))sub_250DDC838);
    sub_250DDCB14(v129, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v69 = (uint64_t)v118;
    if (v101) {
      goto LABEL_22;
    }
LABEL_9:
    sub_250DDCC58(v60, (uint64_t)v34, (uint64_t (*)(void))sub_250DDC838);
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v67)(v34, 1, v8);
    if (result == 1) {
      goto LABEL_24;
    }
    uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))v63;
    uint64_t v79 = v117;
    (*(void (**)(char *, char *, uint64_t))v63)(v117, v34, v8);
    v78(v126, (uint64_t)v79, v8);
    sub_250D8C688((uint64_t)v130, v127, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250DDCC58(v60, v69, (uint64_t (*)(void))sub_250DDC838);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v67)(v69, 1, v8);
    if (result == 1) {
      goto LABEL_25;
    }
    uint64_t v80 = v115;
    v78(v115, v69, v8);
    sub_250D94A28(&qword_26B206F80);
    if (sub_250E24BF0())
    {
      (*v121)((uint64_t)v80, v8);
      uint64_t v81 = 1;
      uint64_t v82 = v113;
      uint64_t v83 = (uint64_t)v111;
    }
    else
    {
      uint64_t v132 = 1;
      sub_250D94A28(&qword_26B2075B0);
      uint64_t v83 = (uint64_t)v111;
      sub_250E24FE0();
      (*v121)((uint64_t)v80, v8);
      uint64_t v81 = 0;
      uint64_t v82 = v113;
    }
    v124(v83, v81, 1, v8);
    sub_250D887B4(v127, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250DDCB14(v60, (uint64_t (*)(void))sub_250DDC838);
    sub_250DDCB74(v83, v60, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v84 = v114;
    v78(v114, (uint64_t)v126, v8);
    uint64_t v85 = &v112[*(int *)(v82 + 48)];
    uint64_t v86 = (uint64_t)v130;
    uint64_t v87 = v110;
    uint64_t v88 = *(void *)&v130[v110];
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v78)(v85, v84, v8);
    if (__OFADD__(v88, 1)) {
      break;
    }
    *(void *)(v86 + v87) = v88 + 1;
    int v89 = v107;
    uint64_t v90 = (char *)v107 + *(int *)(v82 + 48);
    void *v107 = v88;
    v78(v90, (uint64_t)v85, v8);
    uint64_t v91 = (uint64_t)v89;
    uint64_t v92 = v106;
    sub_250DDCB74(v91, v106, (uint64_t (*)(void))sub_250DDC8CC);
    uint64_t v93 = v125;
    v108(v92);
    sub_250DDCB14(v92, (uint64_t (*)(void))sub_250DDC8CC);
    if (v93)
    {
      sub_250DDCBDC((uint64_t)v130, &qword_269B03E68, MEMORY[0x263F8DF40]);
      return swift_release();
    }
    uint64_t v94 = v133;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v125 = 0;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_250DBA24C(0, *(void *)(v94 + 16) + 1, 1);
      uint64_t v94 = v133;
    }
    int v34 = v120;
    objc_super v63 = v123;
    uint64_t v56 = v124;
    uint64_t v60 = v103;
    unint64_t v97 = *(void *)(v94 + 16);
    unint64_t v96 = *(void *)(v94 + 24);
    if (v97 >= v96 >> 1)
    {
      sub_250DBA24C(v96 > 1, v97 + 1, 1);
      uint64_t v94 = v133;
    }
    *(void *)(v94 + 16) = v97 + 1;
    sub_250DDCB74(v122, v94+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v97, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
    uint64_t v62 = v104;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t static SleepingSampleDaySummaryCollection.fake(morningIndexRange:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D8C688(a1, a3, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v6 = a3 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  uint64_t v7 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a2, v7);
  uint64_t v8 = sub_250DDA8B4(a1, a2);
  uint64_t result = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(void *)(a3 + *(int *)(result + 20)) = v8;
  return result;
}

uint64_t sub_250DDA8B4(uint64_t a1, uint64_t a2)
{
  sub_250DDAC98(0, &qword_269B03E28, &qword_269B03E30, MEMORY[0x263F8D1C0], MEMORY[0x263F8DF48]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v37 - v5;
  uint64_t v38 = MEMORY[0x263F8EE78];
  sub_250DBA384(0, 7, 0);
  uint64_t v7 = v38;
  double v8 = *(double *)&qword_2701E6A98;
  unint64_t v10 = *(void *)(v38 + 16);
  unint64_t v9 = *(void *)(v38 + 24);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    sub_250DBA384(v9 > 1, v10 + 1, 1);
    uint64_t v7 = v38;
    unint64_t v9 = *(void *)(v38 + 24);
    int64_t v11 = v9 >> 1;
  }
  *(void *)(v7 + 16) = v12;
  *(double *)(v7 + 8 * v10 + 32) = v8 / 100.0;
  double v13 = *(double *)&qword_2701E6AA0;
  int64_t v14 = v10 + 2;
  if (v11 < v14)
  {
    sub_250DBA384(v9 > 1, v14, 1);
    uint64_t v7 = v38;
  }
  *(void *)(v7 + 16) = v14;
  *(double *)(v7 + 8 * v12 + 32) = v13 / 100.0;
  double v15 = *(double *)&qword_2701E6AA8;
  unint64_t v17 = *(void *)(v7 + 16);
  unint64_t v16 = *(void *)(v7 + 24);
  unint64_t v18 = v17 + 1;
  if (v17 >= v16 >> 1) {
    sub_250DBA384(v16 > 1, v17 + 1, 1);
  }
  uint64_t v19 = v38;
  *(void *)(v38 + 16) = v18;
  *(double *)(v19 + 8 * v17 + 32) = v15 / 100.0;
  double v20 = *(double *)&qword_2701E6AB0;
  unint64_t v21 = *(void *)(v19 + 24);
  int64_t v22 = v17 + 2;
  if (v22 > (uint64_t)(v21 >> 1))
  {
    sub_250DBA384(v21 > 1, v22, 1);
    uint64_t v19 = v38;
  }
  *(void *)(v19 + 16) = v22;
  *(double *)(v19 + 8 * v18 + 32) = v20 / 100.0;
  double v23 = *(double *)&qword_2701E6AB8;
  unint64_t v25 = *(void *)(v19 + 16);
  unint64_t v24 = *(void *)(v19 + 24);
  int64_t v26 = v24 >> 1;
  unint64_t v27 = v25 + 1;
  if (v24 >> 1 <= v25)
  {
    sub_250DBA384(v24 > 1, v25 + 1, 1);
    uint64_t v19 = v38;
    unint64_t v24 = *(void *)(v38 + 24);
    int64_t v26 = v24 >> 1;
  }
  *(void *)(v19 + 16) = v27;
  *(double *)(v19 + 8 * v25 + 32) = v23 / 100.0;
  double v28 = *(double *)&qword_2701E6AC0;
  unint64_t v29 = v25 + 2;
  if (v26 < (uint64_t)(v25 + 2)) {
    sub_250DBA384(v24 > 1, v25 + 2, 1);
  }
  uint64_t v30 = v38;
  *(void *)(v38 + 16) = v29;
  *(double *)(v30 + 8 * v27 + 32) = v28 / 100.0;
  double v31 = *(double *)&qword_2701E6AC8;
  unint64_t v33 = *(void *)(v30 + 16);
  unint64_t v32 = *(void *)(v30 + 24);
  if (v33 >= v32 >> 1)
  {
    sub_250DBA384(v32 > 1, v33 + 1, 1);
    uint64_t v30 = v38;
  }
  *(void *)(v30 + 16) = v33 + 1;
  *(double *)(v30 + 8 * v33 + 32) = v31 / 100.0;
  uint64_t v34 = sub_250D8C688(a1, (uint64_t)v6, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v34);
  *(&v37 - 8) = a2;
  *(&v37 - 7) = (uint64_t)&unk_2701E6B28;
  *(&v37 - 6) = a1;
  *(&v37 - 5) = (uint64_t)&unk_2701E69C8;
  *(&v37 - 4) = v30;
  *(&v37 - 3) = (uint64_t)&unk_2701E6A20;
  *(&v37 - 2) = (uint64_t)&unk_2701E6AD0;
  uint64_t v35 = sub_250DD99FC((void (*)(uint64_t))sub_250DDC79C, (uint64_t)(&v37 - 10));
  sub_250DDCBDC((uint64_t)v6, &qword_269B03E28, MEMORY[0x263F8DF48]);
  swift_release();
  return v35;
}

void sub_250DDAC98(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_250D8CA08(255, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    uint64_t v10 = v9;
    uint64_t v11 = sub_250DDC938(a3);
    unint64_t v12 = a5(a1, v10, v11);
    if (!v13) {
      atomic_store(v12, a2);
    }
  }
}

unint64_t sub_250DDAD38()
{
  unint64_t result = qword_269B03E38;
  if (!qword_269B03E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E38);
  }
  return result;
}

id sub_250DDAD8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v126 = a8;
  uint64_t v128 = a7;
  uint64_t v129 = a6;
  uint64_t v135 = a5;
  uint64_t v136 = a3;
  uint64_t v133 = a4;
  uint64_t v146 = a2;
  uint64_t v125 = a9;
  uint64_t v10 = type metadata accessor for SleepingSampleDaySummary();
  MEMORY[0x270FA5388](v10);
  uint64_t v124 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v134 = (uint64_t)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v16 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v132 = (uint64_t)&v118 - v18;
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v142 = (uint64_t)&v118 - v20;
  uint64_t v21 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v123 = (uint64_t)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v122 = (uint64_t)&v118 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v127 = (uint64_t)&v118 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v137 = (uint64_t)&v118 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v138 = (uint64_t)&v118 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v143 = (uint64_t)&v118 - v32;
  sub_250DDC8CC();
  uint64_t v34 = v33 - 8;
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_250E24B20();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v140 = (char *)&v118 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v118 - v41;
  uint64_t v43 = *(int *)(v34 + 56);
  uint64_t v44 = &v36[v43];
  uint64_t v45 = *a1;
  uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v131(&v36[v43], (char *)a1 + v43, v37);
  uint64_t v121 = v38;
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v46 = v38 + 32;
  uint64_t v145 = v42;
  uint64_t v141 = v37;
  uint64_t v120 = v47;
  v47((uint64_t)v42, v44, v37);
  id v144 = self;
  id result = objc_msgSend(v144, sel_hourUnit);
  uint64_t v49 = *(void *)(v136 + 16);
  if (!v49)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v130 = v45;
  uint64_t v50 = v45 % v49;
  if (v50 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v51 = result;
  uint64_t v118 = v46;
  uint64_t v139 = v16;
  uint64_t v119 = (int *)v10;
  double v52 = *(double *)(v136 + 8 * v50 + 32);
  uint64_t v53 = self;
  id v54 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v51, v52);
  id v55 = v51;
  id v56 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 7.2);
  id v57 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 6.8);
  id v58 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 7.7);
  id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A640]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v57, v58, 1, 1);

  uint64_t v60 = v143;
  uint64_t v61 = v145;
  sub_250DDBBC8(v145, v54, v56, v59, v146, v143);

  v131(v140, v61, v141);
  uint64_t v62 = v132;
  sub_250D8C688(v133, v132, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  sub_250DDCD28(v62, v142);
  uint64_t v63 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v64 = v134;
  sub_250DDCC58(v60 + *(int *)(v63 + 28), v134, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v65 = sub_250E243F0();
  uint64_t v66 = *(void *)(v65 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65) == 1)
  {
    sub_250DDCB14(v64, (uint64_t (*)(void))sub_250D927FC);
    uint64_t v67 = sub_250E24710();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v139, 1, 1, v67);
  }
  else
  {
    uint64_t v68 = (uint64_t)v139;
    sub_250E243B0();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
    uint64_t v69 = sub_250E24710();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  uint64_t v70 = v130;
  id result = objc_msgSend(v144, sel__countPerMinuteUnit);
  uint64_t v71 = *(void *)(v135 + 16);
  if (!v71) {
    goto LABEL_17;
  }
  uint64_t v72 = v70 % v71;
  if (v72 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v73 = result;
  id v74 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v135 + 8 * v72 + 32));
  id v75 = v73;
  id v76 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v75, 54.0);
  id v77 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v75, 50.0);
  id v78 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v75, 58.0);
  id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A640]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v77, v78, 1, 1);

  sub_250DDBBC8(v145, v74, v76, v79, v146, v138);
  id result = objc_msgSend(v144, sel_percentUnit);
  uint64_t v80 = *(void *)(v129 + 16);
  if (!v80)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v81 = v70 % v80;
  if (v81 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v82 = result;
  id v83 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v129 + 8 * v81 + 32));
  id v84 = v82;
  id v85 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v84, 0.962);
  id v86 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v84, 0.958);
  id v87 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v84, 0.968);
  id v88 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A640]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v86, v87, 1, 1);

  sub_250DDBBC8(v145, v83, v85, v88, v146, v137);
  id result = objc_msgSend(v144, sel__countPerMinuteUnit);
  uint64_t v89 = *(void *)(v128 + 16);
  if (!v89)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v90 = v70 % v89;
  if (v90 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v91 = result;
  id v92 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v128 + 8 * v90 + 32));
  id v93 = v91;
  id v94 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 12.4);
  id v95 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 11.0);
  id v96 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 13.8);
  id v97 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A640]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v95, v96, 1, 1);

  uint64_t v98 = v127;
  sub_250DDBBC8(v145, v92, v94, v97, v146, v127);

  id result = objc_msgSend(v144, sel__changeInDegreeCelsiusUnit);
  uint64_t v99 = *(void *)(v126 + 16);
  if (!v99)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v100 = v70 % v99;
  if ((v100 & 0x8000000000000000) == 0)
  {
    int v101 = result;
    id v102 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v126 + 8 * v100 + 32));
    id v103 = v101;
    id v104 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v103, 0.0);
    id v105 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v103, -0.12);
    id v106 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v103, 0.18);
    id v107 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A640]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v105, v106, 1, 1);

    uint64_t v108 = v122;
    uint64_t v109 = v145;
    sub_250DDBBC8(v145, v102, v104, v107, v146, v122);

    uint64_t v110 = v143;
    uint64_t v111 = v123;
    sub_250DDCC58(v143, v123, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v112 = v119;
    uint64_t v113 = (uint64_t)v124;
    uint64_t v114 = (uint64_t)&v124[v119[6]];
    uint64_t v115 = sub_250E24710();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v114, 1, 1, v115);
    uint64_t v116 = v113 + v112[7];
    *(void *)uint64_t v116 = 0;
    *(unsigned char *)(v116 + 8) = 1;
    uint64_t v117 = v141;
    v120(v113, v140, v141);
    sub_250D8DFC0(v142, v113 + v112[5]);
    sub_250DDCCC0((uint64_t)v139, v114, (uint64_t (*)(void))sub_250D94D70);
    sub_250DDCB74(v138, v113 + v112[8], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DDCB74(v137, v113 + v112[9], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DDCB74(v98, v113 + v112[10], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DDCB74(v108, v113 + v112[11], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DDCB74(v111, v113 + v112[12], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250DDCB74(v113, v125, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
    sub_250DDCB14(v110, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v109, v117);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_250DDBBC8@<X0>(char *a1@<X0>, void *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v105 = a6;
  uint64_t v106 = a5;
  id v111 = a3;
  id v112 = a4;
  id v108 = a2;
  uint64_t v99 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x270FA5388](v99);
  id v102 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v100 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v109);
  uint64_t v113 = (uint64_t)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v11 - 8);
  id v107 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v119 = (uint64_t)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_250E24710();
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  id v95 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v16 - 8);
  id v104 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_250E248B0();
  uint64_t v98 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v117 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v19 = MEMORY[0x270FA5388](v103);
  int v101 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v110 = (uint64_t)&v90 - v21;
  sub_250D88890();
  uint64_t v23 = v22;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v90 - v27;
  uint64_t v29 = sub_250E24B20();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v90 - v34;
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v93 = v36;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  id v94 = (void (*)(char *, uint64_t, uint64_t))((char *)&v90 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v37);
  uint64_t v120 = (uint64_t)&v90 - v39;
  sub_250E24A80();
  sub_250E24AA0();
  uint64_t v115 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v116 = v30 + 8;
  v115(v33, v29);
  sub_250D94A28((unint64_t *)&qword_26B208148);
  uint64_t v40 = v35;
  uint64_t v114 = a1;
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v42 = v30;
    uint64_t v43 = v23;
    uint64_t v44 = &v28[*(int *)(v23 + 48)];
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    id v92 = v40;
    v45(v28, v40, v29);
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    uint64_t v91 = v46;
    uint64_t v47 = v44;
    uint64_t v90 = v44;
    v46(v44, v114, v29);
    uint64_t v48 = &v26[*(int *)(v43 + 48)];
    v46(v26, v28, v29);
    v46(v48, v47, v29);
    uint64_t v49 = (uint64_t)v94;
    v45((char *)v94, v26, v29);
    uint64_t v50 = v115;
    v115(v48, v29);
    uint64_t v51 = &v26[*(int *)(v43 + 48)];
    double v52 = v28;
    uint64_t v53 = v29;
    ((void (*)(char *, char *))v45)(v26, v52);
    v45(v51, v90, v29);
    v45((char *)(v49 + *(int *)(v93 + 36)), v51, v29);
    v50(v26, v29);
    sub_250D8DFC0(v49, v120);
    id v54 = v92;
    id v55 = v91;
    v91(v92, v114, v29);
    uint64_t v56 = v98;
    id v94 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v94(v117, v106, v118);
    sub_250E24B10();
    uint64_t v57 = (uint64_t)v104;
    sub_250E243D0();
    uint64_t v58 = sub_250E243F0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v119, 1, 1, v97);
    id v59 = v101;
    v55(v101, v54, v53);
    uint64_t v60 = (int *)v103;
    uint64_t v61 = v117;
    uint64_t v62 = v118;
    v94(&v59[*(int *)(v103 + 20)], (uint64_t)v117, v118);
    sub_250DB2068();
    id v63 = v108;
    uint64_t v64 = (uint64_t)v107;
    sub_250E249E0();
    sub_250D922D0(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 0, 1, v65);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v62);
    v115(v54, v53);
    sub_250DDCB74(v64, (uint64_t)&v59[v60[6]], (uint64_t (*)(void))sub_250D91EB4);
    sub_250DDCB74(v57, (uint64_t)&v59[v60[7]], (uint64_t (*)(void))sub_250D927FC);
    sub_250DDCB74(v119, (uint64_t)&v59[v60[8]], (uint64_t (*)(void))sub_250D94D70);
    v59[v60[9]] = 0;
    uint64_t v66 = (uint64_t)v59;
    uint64_t v67 = v110;
    sub_250DDCB74(v66, v110, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
    sub_250D96CC4();
    uint64_t v69 = *(int *)(v68 + 48);
    uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
    uint64_t v71 = v120;
    uint64_t v72 = v113;
    sub_250D8C688(v120, v113, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    *(void *)(v72 + v69) = 7;
    swift_storeEnumTagMultiPayload();
    id v73 = v111;
    id v74 = v112;
    id v75 = objc_msgSend(v74, sel_maximum);
    id v76 = objc_msgSend(v75, sel__unit);

    id v77 = objc_msgSend(v74, sel_maximum);
    objc_msgSend(v77, sel__value);
    double v79 = v78;

    id v80 = objc_msgSend(v74, sel_minimum);
    objc_msgSend(v80, sel__value);
    double v82 = v81;

    id v83 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v76, (v79 - v82) * 0.25);
    id v84 = v74;
    uint64_t v85 = v100;
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v73, v84, v83, v84, v100);
    uint64_t v86 = v99;
    uint64_t v87 = (uint64_t)v102;
    uint64_t v88 = (uint64_t)&v102[*(int *)(v99 + 24)];
    uint64_t v89 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 1, 1, v89);
    sub_250DDCB74(v67, v87, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
    sub_250DDCB74(v72, v87 + *(int *)(v86 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_250DDCCC0(v85, v88, (uint64_t (*)(void))sub_250DC8DA4);
    sub_250DDCB74(v87, v105, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    return sub_250D887B4(v71, (unint64_t *)&qword_26B2081D0, v70);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_250DDC79C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250DDAD8C(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

void sub_250DDC7D4()
{
  if (!qword_269B03E40)
  {
    sub_250DDC838();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03E40);
    }
  }
}

void sub_250DDC838()
{
  if (!qword_269B03E48)
  {
    sub_250E24B20();
    sub_250D94A28(&qword_26B2075B0);
    sub_250DDAD38();
    unint64_t v0 = sub_250E24BE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03E48);
    }
  }
}

void sub_250DDC8CC()
{
  if (!qword_269B03E50)
  {
    sub_250E24B20();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B03E50);
    }
  }
}

uint64_t sub_250DDC938(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250D8CA08(255, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D94A28(&qword_26B2075B0);
    sub_250DDAD38();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250DDC9DC(uint64_t a1, uint64_t a2)
{
  sub_250DDAC98(0, &qword_269B03E28, &qword_269B03E30, MEMORY[0x263F8D1C0], MEMORY[0x263F8DF48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DDCA78(uint64_t a1, uint64_t a2)
{
  sub_250DDAC98(0, (unint64_t *)&qword_269B03E58, (unint64_t *)&qword_269B03E60, MEMORY[0x263F8D1E0], MEMORY[0x263F8DE58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DDCB14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250DDCB74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DDCBDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_250DDAC98(0, a2, &qword_269B03E30, MEMORY[0x263F8D1C0], a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_250DDCC58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DDCCC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_250DDCD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  sub_250D88890();
  uint64_t v33 = v3 - 8;
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = MEMORY[0x263F8D1A0];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v34 = 1;
  sub_250D94A28(&qword_26B2075B0);
  sub_250E24FE0();
  uint64_t v30 = v9;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v12, a1, v8);
  sub_250DDFDE0(a1, (uint64_t)&qword_26B2081C0, v15, (uint64_t (*)(void))sub_250D8CA08);
  uint64_t v17 = v33;
  uint64_t v18 = v7;
  uint64_t v19 = &v7[*(int *)(v33 + 56)];
  uint64_t v20 = *(void (**)(void))(v9 + 32);
  uint64_t v21 = v18;
  v20();
  ((void (*)(char *, char *, uint64_t))v20)(v19, v14, v8);
  uint64_t v22 = v31;
  uint64_t v23 = &v31[*(int *)(v17 + 56)];
  v16(v31, (uint64_t)v21, v8);
  v16(v23, (uint64_t)v19, v8);
  uint64_t v24 = v32;
  ((void (*)(uint64_t, char *, uint64_t))v20)(v32, v22, v8);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v23, v8);
  uint64_t v26 = &v22[*(int *)(v33 + 56)];
  ((void (*)(char *, char *, uint64_t))v20)(v22, v21, v8);
  ((void (*)(char *, char *, uint64_t))v20)(v26, v19, v8);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  ((void (*)(uint64_t, char *, uint64_t))v20)(v24 + *(int *)(v27 + 36), v26, v8);
  return ((uint64_t (*)(char *, uint64_t))v25)(v22, v8);
}

uint64_t TrainingLoadSummaryQueryDescriptor.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250DDE1E4(v1, a1, (uint64_t)&qword_26B2081C0, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250D8CA08);
}

uint64_t TrainingLoadSummaryQueryDescriptor.morningIndexRange.setter(uint64_t a1)
{
  return sub_250DD1D64(a1, v1);
}

uint64_t (*TrainingLoadSummaryQueryDescriptor.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSummaryQueryDescriptor.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() + 20);
  uint64_t v4 = sub_250E248B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for TrainingLoadSummaryQueryDescriptor()
{
  uint64_t result = qword_26B206F50;
  if (!qword_26B206F50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TrainingLoadSummaryQueryDescriptor.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() + 20);
  uint64_t v4 = sub_250E248B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*TrainingLoadSummaryQueryDescriptor.gregorianCalendar.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSummaryQueryDescriptor.init(morningIndexRange:gregorianCalendar:typeOfLoad:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  int v7 = *((unsigned __int8 *)a3 + 8);
  sub_250D89B98(a1, a4);
  SummaryQueryuint64_t Descriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  uint64_t v9 = a4 + *(int *)(SummaryQueryDescriptor + 20);
  uint64_t v10 = sub_250E248B0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
  char v12 = 2 * (v6 == 0);
  if (!v7) {
    char v12 = 1;
  }
  *(unsigned char *)(a4 + *(int *)(SummaryQueryDescriptor + 24)) = v12;
  return result;
}

uint64_t TrainingLoadSummaryQueryDescriptor.currentAndUpdatingDaySummaryCollections(for:)@<X0>(void *a1@<X0>, void (*a2)(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v61 = a2;
  SummaryQueryuint64_t Descriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  uint64_t v4 = SummaryQueryDescriptor - 8;
  uint64_t v55 = *(void *)(SummaryQueryDescriptor - 8);
  uint64_t v54 = *(void *)(v55 + 64);
  MEMORY[0x270FA5388](SummaryQueryDescriptor);
  uint64_t v52 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_250E248B0();
  uint64_t v64 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v62 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x263F8D1A0];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v63 = MEMORY[0x263F8D870];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v57 = (uint64_t)&v49 - v12;
  sub_250DDFD68(0, &qword_26B206FA0, MEMORY[0x263F8F688]);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v49 - v16;
  sub_250DDFD68(0, &qword_26B206FB0, MEMORY[0x263F8F690]);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v58 = v18;
  uint64_t v59 = v19;
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v49 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v49 - v22;
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F8F680], v14);
  uint64_t v53 = v23;
  sub_250E24E70();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v61 = sub_250D8CA08;
  sub_250DDE1E4(v2, (uint64_t)v10, (uint64_t)&qword_26B2081C0, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_250D8CA08);
  uint64_t v24 = v57;
  sub_250DDCD28((uint64_t)v10, v57);
  uint64_t v25 = v2 + *(int *)(v4 + 28);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  v50(v62, v25, v60);
  int v51 = *(unsigned __int8 *)(v2 + *(int *)(v4 + 32));
  uint64_t v26 = v52;
  sub_250DDDE60(v2, v52);
  uint64_t v28 = v58;
  uint64_t v27 = v59;
  uint64_t v29 = v49;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v49, v23, v58);
  unint64_t v30 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  uint64_t v31 = v27;
  unint64_t v32 = (v54 + *(unsigned __int8 *)(v27 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v33 = swift_allocObject();
  sub_250DDFD00(v26, v33 + v30, (uint64_t (*)(void))type metadata accessor for TrainingLoadSummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v33 + v32, v29, v28);
  SummaryQuery = (objc_class *)type metadata accessor for TrainingLoadSummaryQuery();
  uint64_t v35 = objc_allocWithZone(SummaryQuery);
  uint64_t v36 = (uint64_t *)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  uint64_t *v36 = 0;
  v36[1] = 0;
  *(void *)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x263F8EE78];
  sub_250DDE1E4(v24, (uint64_t)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)&qword_26B2081D0, v63, (uint64_t (*)(void, uint64_t, uint64_t))v61);
  uint64_t v37 = v62;
  uint64_t v38 = v60;
  ((void (*)(unsigned char *, char *))v50)(&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar], v62);
  v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v51;
  v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = 1;
  uint64_t v39 = *v36;
  uint64_t *v36 = (uint64_t)sub_250DDE0DC;
  v36[1] = v33;
  swift_retain();
  sub_250D8C39C(v39);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v40 = (void *)sub_250E24DB0();
  v65.receiver = v35;
  v65.super_class = SummaryQuery;
  id v41 = objc_msgSendSuper2(&v65, sel_initWithQueryDescriptors_, v40);
  swift_release();

  (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v38);
  sub_250DDFDE0(v57, (uint64_t)&qword_26B2081D0, v63, (uint64_t (*)(void))v61);
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = v56;
  *(void *)(v42 + 16) = v41;
  *(void *)(v42 + 24) = v43;
  id v44 = v41;
  id v45 = v43;
  uint64_t v46 = v58;
  uint64_t v47 = v53;
  sub_250E24E80();
  objc_msgSend(v45, sel_executeQuery_, v44);

  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v47, v46);
}

uint64_t sub_250DDDA00(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a4;
  LODWORD(v6) = a3;
  sub_250DDFD68(0, &qword_26B206F90, MEMORY[0x263F8F670]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v39 = (char *)&v30 - v12;
  sub_250DDFD68(0, &qword_26B207050, MEMORY[0x263F8E848]);
  uint64_t v38 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v30 - v14);
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_250E24950();
  __swift_project_value_buffer(v16, (uint64_t)qword_26B207A58);
  id v17 = a1;
  uint64_t v18 = sub_250E24930();
  os_log_type_t v19 = sub_250E24F40();
  if (!os_log_type_enabled(v18, v19))
  {

    if ((v6 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    void *v15 = a2;
    goto LABEL_8;
  }
  uint64_t v20 = swift_slowAlloc();
  int v34 = v6;
  uint64_t v6 = v20;
  uint64_t v21 = swift_slowAlloc();
  uint64_t v36 = a5;
  uint64_t v31 = (void *)v21;
  uint64_t v33 = swift_slowAlloc();
  uint64_t v41 = v33;
  *(_DWORD *)uint64_t v6 = 136446466;
  uint64_t v35 = v10;
  uint64_t v40 = sub_250D8B44C(0xD000000000000022, 0x8000000250E29B50, &v41);
  sub_250E24FC0();
  *(_WORD *)(v6 + 12) = 2112;
  uint64_t v40 = (uint64_t)v17;
  id v22 = v17;
  unint64_t v32 = v15;
  uint64_t v23 = v18;
  id v24 = v22;
  uint64_t v10 = v35;
  sub_250E24FC0();
  uint64_t v25 = v31;
  *uint64_t v31 = v17;

  _os_log_impl(&dword_250D84000, v23, v19, "[%{public}s] Yielding query results to stream: %@", (uint8_t *)v6, 0x16u);
  sub_250DD88E4();
  swift_arrayDestroy();
  MEMORY[0x25338A890](v25, -1, -1);
  uint64_t v26 = v33;
  swift_arrayDestroy();
  MEMORY[0x25338A890](v26, -1, -1);
  uint64_t v27 = v6;
  LOBYTE(v6) = v34;
  MEMORY[0x25338A890](v27, -1, -1);

  uint64_t v15 = v32;
  if (v6) {
    goto LABEL_7;
  }
LABEL_5:
  sub_250DDE1E4(v37, (uint64_t)v15, (uint64_t)&qword_26B2081C0, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250D8CA08);
  *(void *)((char *)v15 + *(int *)(type metadata accessor for TrainingLoadSampleDaySummaryCollection() + 20)) = a2;
LABEL_8:
  swift_storeEnumTagMultiPayload();
  sub_250DD8860(a2, v6 & 1);
  sub_250DDFD68(0, &qword_26B206FB0, MEMORY[0x263F8F690]);
  uint64_t v28 = v39;
  sub_250E24E90();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
  return sub_250DDFDE0((uint64_t)v15, (uint64_t)&qword_26B207050, MEMORY[0x263F8E848], (uint64_t (*)(void))sub_250DDFD68);
}

uint64_t sub_250DDDE60(uint64_t a1, uint64_t a2)
{
  SummaryQueryuint64_t Descriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(SummaryQueryDescriptor - 8) + 16))(a2, a1, SummaryQueryDescriptor);
  return a2;
}

uint64_t sub_250DDDEC4()
{
  uint64_t v1 = (int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  sub_250DDFD68(0, &qword_26B206FB0, MEMORY[0x263F8F690]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v8) & ~v8;
  uint64_t v18 = v9 + *(void *)(v7 + 64);
  uint64_t v10 = v2 | v8 | 7;
  uint64_t v11 = v0 + v3;
  uint64_t v12 = sub_250E24B20();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v13(v11 + *(int *)(v14 + 36), v12);
  uint64_t v15 = v11 + v1[7];
  uint64_t v16 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v18, v10);
}

uint64_t sub_250DDE0DC(void *a1, void *a2, char a3)
{
  int v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  sub_250DDFD68(0, &qword_26B206FB0, MEMORY[0x263F8F690]);
  uint64_t v11 = v3
      + ((v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));

  return sub_250DDDA00(a1, a2, v6, v3 + v8, v11);
}

uint64_t sub_250DDE1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

id sub_250DDE254(uint64_t a1, void *a2, void *a3)
{
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_250E24950();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B207A58);
  id v6 = a2;
  uint64_t v7 = sub_250E24930();
  os_log_type_t v8 = sub_250E24F40();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v9 = 136446466;
    sub_250D8B44C(0xD000000000000022, 0x8000000250E29B50, &v15);
    sub_250E24FC0();
    *(_WORD *)(v9 + 12) = 2112;
    uint64_t v11 = a3;
    id v12 = v6;
    sub_250E24FC0();
    *uint64_t v10 = v6;

    a3 = v11;
    _os_log_impl(&dword_250D84000, v7, v8, "[%{public}s] Stopping training load query for stream termination: %@", (uint8_t *)v9, 0x16u);
    sub_250DD88E4();
    swift_arrayDestroy();
    MEMORY[0x25338A890](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v14, -1, -1);
    MEMORY[0x25338A890](v9, -1, -1);
  }
  else
  {
  }
  return objc_msgSend(a3, sel_stopQuery_, v6);
}

uint64_t sub_250DDE490()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id sub_250DDE4D0(uint64_t a1)
{
  return sub_250DDE254(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t TrainingLoadSummaryQueryDescriptor.currentDaySummaryCollection(for:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_250DDE4FC, 0, 0);
}

uint64_t sub_250DDE4FC()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  *uint64_t v2 = v0;
  v2[1] = sub_250DDE5F4;
  uint64_t v4 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2360](v4, 0, 0, 0xD000000000000021, 0x8000000250E2D480, sub_250DDECEC, v1, SampleDaySummaryCollection);
}

uint64_t sub_250DDE5F4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_250DDE730, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_250DDE730()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_250DDE794(uint64_t a1, uint64_t a2, void *a3)
{
  int v51 = a3;
  uint64_t v49 = a1;
  sub_250DDFD68(0, &qword_269B03E78, MEMORY[0x263F8F480]);
  uint64_t v47 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v48 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v40 - v6;
  SummaryQueryuint64_t Descriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  uint64_t v8 = SummaryQueryDescriptor - 8;
  uint64_t v44 = *(void *)(SummaryQueryDescriptor - 8);
  uint64_t v9 = *(void *)(v44 + 64);
  MEMORY[0x270FA5388](SummaryQueryDescriptor);
  uint64_t v10 = sub_250E248B0();
  uint64_t v40 = v10;
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = v50;
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x263F8D1A0];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v45 = MEMORY[0x263F8D870];
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  MEMORY[0x270FA5388](v17 - 8);
  os_log_type_t v19 = (char *)&v40 - v18;
  uint64_t v53 = (uint64_t)&v40 - v18;
  uint64_t v43 = sub_250D8CA08;
  sub_250DDE1E4(a2, (uint64_t)v16, (uint64_t)&qword_26B2081C0, v13, (uint64_t (*)(void, uint64_t, uint64_t))sub_250D8CA08);
  sub_250DDCD28((uint64_t)v16, (uint64_t)v19);
  uint64_t v20 = a2 + *(int *)(v8 + 28);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v21 = v52;
  v41(v52, v20, v10);
  int v42 = *(unsigned __int8 *)(a2 + *(int *)(v8 + 32));
  id v22 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DDDE60(a2, (uint64_t)v22);
  id v24 = v46;
  uint64_t v23 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v46, v49, v47);
  unint64_t v25 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v26 = (v9 + *(unsigned __int8 *)(v5 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v51;
  *(void *)(v27 + 16) = v51;
  sub_250DDFD00((uint64_t)v22, v27 + v25, (uint64_t (*)(void))type metadata accessor for TrainingLoadSummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v27 + v26, v24, v23);
  SummaryQuery = (objc_class *)type metadata accessor for TrainingLoadSummaryQuery();
  uint64_t v30 = objc_allocWithZone(SummaryQuery);
  uint64_t v31 = (uint64_t *)&v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *uint64_t v31 = 0;
  v31[1] = 0;
  *(void *)&v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x263F8EE78];
  uint64_t v32 = v45;
  uint64_t v33 = v43;
  sub_250DDE1E4(v53, (uint64_t)&v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)&qword_26B2081D0, v45, (uint64_t (*)(void, uint64_t, uint64_t))v43);
  int v34 = v21;
  uint64_t v35 = v40;
  v41(&v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar], (uint64_t)v34, v40);
  v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v42;
  v30[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = 0;
  uint64_t v36 = *v31;
  *uint64_t v31 = (uint64_t)sub_250DDFBF4;
  v31[1] = v27;
  id v37 = v28;
  swift_retain();
  sub_250D8C39C(v36);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v38 = (void *)sub_250E24DB0();
  v54.receiver = v30;
  v54.super_class = SummaryQuery;
  id v39 = objc_msgSendSuper2(&v54, sel_initWithQueryDescriptors_, v38);
  swift_release();

  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v35);
  sub_250DDFDE0(v53, (uint64_t)&qword_26B2081D0, v32, (uint64_t (*)(void))v33);
  objc_msgSend(v37, sel_executeQuery_, v39);
}

void sub_250DDECEC(uint64_t a1)
{
  sub_250DDE794(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void *initializeBufferWithCopyOfBuffer for TrainingLoadSummaryQueryDescriptor(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    v8((void *)((char *)a1 + *(int *)(v9 + 36)), (void *)((char *)a2 + *(int *)(v9 + 36)), v7);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_250E248B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_250E24B20();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v5(a1 + *(int *)(v6 + 36), v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = sub_250E248B0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DDF3A0);
}

uint64_t sub_250DDF3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = sub_250E248B0();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
      if (v14 >= 3) {
        return v14 - 2;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DDF4E0);
}

uint64_t sub_250DDF4E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_250E248B0();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_250DDF60C()
{
  sub_250D8CA08(319, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  if (v0 <= 0x3F)
  {
    sub_250E248B0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_250DDF6F8(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  v21[0] = a6;
  uint64_t SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  MEMORY[0x270FA5388](SampleDaySummaryCollection);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DDFD68(0, &qword_26B207050, MEMORY[0x263F8E848]);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  os_log_type_t v19 = (void *)((char *)v21 - v18);
  objc_msgSend(a4, sel_stopQuery_, a1, v21[0]);
  if (a3)
  {
    *os_log_type_t v19 = a2;
  }
  else
  {
    sub_250DDE1E4(a5, (uint64_t)v19, (uint64_t)&qword_26B2081C0, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_250D8CA08);
    *(void *)((char *)v19 + *(int *)(SampleDaySummaryCollection + 20)) = a2;
  }
  swift_storeEnumTagMultiPayload();
  sub_250DDE1E4((uint64_t)v19, (uint64_t)v17, (uint64_t)&qword_26B207050, MEMORY[0x263F8E848], (uint64_t (*)(void, uint64_t, uint64_t))sub_250DDFD68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21[1] = *v17;
    sub_250DD8860(a2, a3 & 1);
    sub_250DDFD68(0, &qword_269B03E78, MEMORY[0x263F8F480]);
    sub_250E24E50();
  }
  else
  {
    sub_250DDFD00((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummaryCollection);
    sub_250DD8860(a2, a3 & 1);
    sub_250DDFD68(0, &qword_269B03E78, MEMORY[0x263F8F480]);
    sub_250E24E60();
  }
  return sub_250DDFDE0((uint64_t)v19, (uint64_t)&qword_26B207050, MEMORY[0x263F8E848], (uint64_t (*)(void))sub_250DDFD68);
}

uint64_t sub_250DDF9D4()
{
  unint64_t v1 = (int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  sub_250DDFD68(0, &qword_269B03E78, MEMORY[0x263F8F480]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v8) & ~v8;
  uint64_t v18 = v9 + *(void *)(v7 + 64);
  uint64_t v10 = v2 | v8 | 7;

  uint64_t v11 = v0 + v3;
  uint64_t v12 = sub_250E24B20();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  sub_250D8CA08(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v13(v11 + *(int *)(v14 + 36), v12);
  uint64_t v15 = v11 + v1[7];
  uint64_t v16 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v18, v10);
}

uint64_t sub_250DDFBF4(uint64_t a1, void *a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  sub_250DDFD68(0, &qword_269B03E78, MEMORY[0x263F8F480]);
  uint64_t v11 = *(void **)(v3 + 16);
  uint64_t v12 = v3
      + ((v9 + *(unsigned __int8 *)(*(void *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));

  return sub_250DDF6F8(a1, a2, v6, v11, v3 + v8, v12);
}

uint64_t sub_250DDFD00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_250DDFD68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
    unint64_t v7 = sub_250DBF0D4();
    unint64_t v8 = a3(a1, SampleDaySummaryCollection, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250DDFDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void *static SleepingSampleDataType.allCases.getter()
{
  return &unk_2701E6940;
}

BOOL sub_250DDFE4C(char *a1, char *a2)
{
  return qword_250E29E20[*a1] == qword_250E29E20[*a2];
}

uint64_t sub_250DDFE70()
{
  return sub_250E254F0();
}

uint64_t sub_250DDFEC0()
{
  return sub_250E254C0();
}

uint64_t sub_250DDFEF8()
{
  return sub_250E254F0();
}

void sub_250DDFF44(void *a1@<X8>)
{
  *a1 = &unk_2701E6B80;
}

HealthBalance::SleepingSampleDataType_optional __swiftcall SleepingSampleDataType.init(rawValue:)(Swift::Int rawValue)
{
  unint64_t v2 = 0x4030201050005uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 7) {
    LOBYTE(v2) = 5;
  }
  *unint64_t v1 = v2;
  return (HealthBalance::SleepingSampleDataType_optional)rawValue;
}

uint64_t SleepingSampleDataType.rawValue.getter()
{
  return qword_250E29E20[*v0];
}

HealthBalance::SleepingSampleDataType_optional sub_250DDFF94(Swift::Int *a1)
{
  return SleepingSampleDataType.init(rawValue:)(*a1);
}

void sub_250DDFF9C(void *a1@<X8>)
{
  *a1 = qword_250E29E20[*v1];
}

uint64_t sub_250DDFFB4()
{
  return sub_250E24D90();
}

uint64_t sub_250DE0014()
{
  return sub_250E24D80();
}

BOOL static SleepingSampleDataType.SortOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleDataType.SortOrder.hash(into:)()
{
  return sub_250E254C0();
}

BOOL static SleepingSampleDataType.SortOrder.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void *static SleepingSampleDataType.SortOrder.allCases.getter()
{
  return &unk_2701E6BA8;
}

uint64_t SleepingSampleDataType.SortOrder.hashValue.getter()
{
  return sub_250E254F0();
}

void sub_250DE010C(void *a1@<X8>)
{
  *a1 = &unk_2701E6BD0;
}

BOOL sub_250DE011C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_250DE0130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_250DE0144(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_250DE0158(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void *static SleepingSampleDataType.allCasesSortOrder.getter()
{
  unint64_t v1 = &unk_2701E6BF8;
  sub_250DE0308((uint64_t *)&v1);
  return v1;
}

void SleepingSampleDataType.sortOrder.getter(unsigned char *a1@<X8>)
{
  *a1 = 0x402030100uLL >> (8 * *v1);
}

uint64_t SleepingSampleDataType.sampleType.getter()
{
  switch(*v0)
  {
    case 1:
      sub_250D98B48(0, &qword_26B2075D8);
      unint64_t v1 = (id *)MEMORY[0x263F09EA8];
      return MEMORY[0x253389B30](*v1);
    case 2:
      sub_250D98B48(0, &qword_26B2075D8);
      unint64_t v1 = (id *)MEMORY[0x263F09E88];
      return MEMORY[0x253389B30](*v1);
    case 3:
      sub_250D98B48(0, &qword_26B2075D8);
      unint64_t v1 = (id *)MEMORY[0x263F09BE0];
      return MEMORY[0x253389B30](*v1);
    case 4:
      sub_250D98B48(0, &qword_26B206C40);
      return MEMORY[0x253389B20]((id)*MEMORY[0x263F09410]);
    default:
      sub_250D98B48(0, &qword_26B2075D8);
      unint64_t v1 = (id *)MEMORY[0x263F09E38];
      return MEMORY[0x253389B30](*v1);
  }
}

uint64_t sub_250DE0308(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_250DE1370(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_250DE0688(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_250DE0378()
{
  unint64_t result = qword_26B2075E0;
  if (!qword_26B2075E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2075E0);
  }
  return result;
}

uint64_t sub_250DE03CC()
{
  return sub_250DE0484(&qword_269B03E80, &qword_269B03E88);
}

unint64_t sub_250DE0400()
{
  unint64_t result = qword_269B03E90;
  if (!qword_269B03E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E90);
  }
  return result;
}

uint64_t sub_250DE0454()
{
  return sub_250DE0484(&qword_269B03E98, &qword_269B03EA0);
}

uint64_t sub_250DE0484(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250DE04D4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250DE04D4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_250E24E30();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleDataType()
{
  return &type metadata for SleepingSampleDataType;
}

unsigned char *_s13HealthBalance22SleepingSampleDataTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DE05FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.SortOrder()
{
  return &type metadata for SleepingSampleDataType.SortOrder;
}

unint64_t sub_250DE0634()
{
  unint64_t result = qword_269B03EA8;
  if (!qword_269B03EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03EA8);
  }
  return result;
}

uint64_t sub_250DE0688(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_250E253C0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_157;
    }
    if (v3) {
      return sub_250DE0DF0(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_165;
  }
  uint64_t v89 = result;
  uint64_t v93 = v1;
  uint64_t v87 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
      goto LABEL_123;
    }
    uint64_t v88 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_250E24E00();
    *(void *)(v7 + 16) = v6;
    uint64_t v88 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v90 = v3;
  uint64_t v91 = v10;
  do
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      unsigned __int8 v14 = *(unsigned char *)(v10 + v9);
      unsigned __int8 v15 = v14;
      switch(*(unsigned char *)(v10 + v13))
      {
        case 1:
          int v16 = (v14 & 0x1F) == 0;
          goto LABEL_25;
        case 2:
          unsigned int v17 = 0xBu >> v14;
          goto LABEL_23;
        case 3:
          unsigned int v17 = 3u >> v14;
          goto LABEL_23;
        case 4:
          unsigned int v17 = 0xFu >> v14;
LABEL_23:
          int v16 = v17 & 1;
LABEL_25:
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3) {
            goto LABEL_26;
          }
          goto LABEL_39;
        default:
          uint64_t v9 = v13 + 2;
          if (v13 + 2 >= v3) {
            goto LABEL_49;
          }
          int v16 = 0;
LABEL_26:
          if (v3 <= v9 + 1) {
            uint64_t v18 = v9 + 1;
          }
          else {
            uint64_t v18 = v3;
          }
          while (2)
          {
            uint64_t v20 = v15;
            unsigned __int8 v15 = *(unsigned char *)(v10 + v9);
            switch(v20)
            {
              case 1:
                unsigned int v19 = (v15 & 0x1F) == 0;
                goto LABEL_30;
              case 2:
                unsigned int v19 = 0xBu >> v15;
                goto LABEL_30;
              case 3:
                unsigned int v19 = 3u >> v15;
                goto LABEL_30;
              case 4:
                unsigned int v19 = 0xFu >> v15;
LABEL_30:
                if (((v16 ^ v19) & 1) == 0) {
                  goto LABEL_31;
                }
                break;
              default:
                if (v16) {
                  goto LABEL_40;
                }
LABEL_31:
                if (++v9 < v3) {
                  continue;
                }
                uint64_t v9 = v18;
                break;
            }
            break;
          }
LABEL_39:
          if (!v16) {
            goto LABEL_49;
          }
LABEL_40:
          if (v9 < v13) {
            goto LABEL_160;
          }
          if (v13 >= v9) {
            goto LABEL_49;
          }
          uint64_t v21 = v9 - 1;
          uint64_t v22 = v13;
          break;
      }
      do
      {
        if (v22 != v21)
        {
          if (!v10) {
            goto LABEL_163;
          }
          char v23 = *(unsigned char *)(v10 + v22);
          *(unsigned char *)(v10 + v22) = *(unsigned char *)(v10 + v21);
          *(unsigned char *)(v10 + v21) = v23;
        }
        BOOL v61 = ++v22 < v21--;
      }
      while (v61);
    }
LABEL_49:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_156;
      }
      if (v9 - v13 < v89)
      {
        if (__OFADD__(v13, v89)) {
          goto LABEL_158;
        }
        if (v13 + v89 >= v3) {
          uint64_t v24 = v3;
        }
        else {
          uint64_t v24 = v13 + v89;
        }
        if (v24 >= v13)
        {
          if (v9 != v24)
          {
            unint64_t v25 = (unsigned char *)(v10 + v9);
LABEL_60:
            char v26 = *(unsigned char *)(v10 + v9);
            uint64_t v27 = v13;
            uint64_t v28 = v25;
            while (2)
            {
              switch(*(v28 - 1))
              {
                case 1:
                  if ((v26 & 0x1F) != 0) {
                    goto LABEL_59;
                  }
                  goto LABEL_69;
                case 2:
                  if ((0xBu >> v26)) {
                    goto LABEL_69;
                  }
                  goto LABEL_59;
                case 3:
                  if (((3u >> v26) & 1) == 0) {
                    goto LABEL_59;
                  }
                  goto LABEL_69;
                case 4:
                  if (((0xFu >> v26) & 1) == 0) {
                    goto LABEL_59;
                  }
LABEL_69:
                  if (!v10) {
                    goto LABEL_161;
                  }
                  *uint64_t v28 = *(v28 - 1);
                  *--uint64_t v28 = v26;
                  if (v9 != ++v27) {
                    continue;
                  }
LABEL_59:
                  ++v9;
                  ++v25;
                  if (v9 != v24) {
                    goto LABEL_60;
                  }
                  uint64_t v9 = v24;
                  break;
                default:
                  goto LABEL_59;
              }
              break;
            }
          }
          goto LABEL_73;
        }
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        sub_250E25210();
        __break(1u);
        JUMPOUT(0x250DE0DB4);
      }
    }
LABEL_73:
    if (v9 < v13) {
      goto LABEL_151;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_250DE11C0(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v91;
    if (v30 >= v29 >> 1)
    {
      double v78 = sub_250DE11C0((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v91;
      uint64_t v11 = v78;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v31 = v11 + 32;
    uint64_t v32 = &v11[16 * v30 + 32];
    *(void *)uint64_t v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_140;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_141;
          }
          unint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_143;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_146;
          }
          if (v50 >= v41)
          {
            uint64_t v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_150;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_110;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_104;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_142;
        }
        unint64_t v45 = v12 - 2;
        int v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_145;
        }
        uint64_t v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_148;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_149;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_110:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_112;
        }
LABEL_104:
        if (v56) {
          goto LABEL_144;
        }
        uint64_t v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_147;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_112:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (!v10) {
          goto LABEL_162;
        }
        id v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        id v75 = &v31[16 * v33];
        uint64_t v76 = *((void *)v75 + 1);
        sub_250DE0EB8((char *)(v10 + *(void *)v73), (char *)(v10 + *(void *)v75), v10 + v76, __dst);
        if (v93) {
          goto LABEL_120;
        }
        if (v76 < v74) {
          goto LABEL_137;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_138;
        }
        *(void *)id v73 = v74;
        *(void *)&v31[16 * v72 + 8] = v76;
        unint64_t v77 = *((void *)v11 + 2);
        if (v33 >= v77) {
          goto LABEL_139;
        }
        unint64_t v12 = v77 - 1;
        memmove(&v31[16 * v33], v75 + 16, 16 * (v77 - 1 - v33));
        *((void *)v11 + 2) = v77 - 1;
        uint64_t v10 = v91;
        if (v77 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v90;
  }
  while (v9 < v90);
  uint64_t v8 = v88;
LABEL_123:
  double v79 = v11;
  uint64_t v88 = v8;
  if (v12 >= 2)
  {
    uint64_t v80 = *v87;
    do
    {
      unint64_t v81 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_152;
      }
      if (!v80) {
        goto LABEL_164;
      }
      double v82 = v79;
      uint64_t v83 = *(void *)&v79[16 * v81 + 32];
      uint64_t v84 = *(void *)&v79[16 * v12 + 24];
      sub_250DE0EB8((char *)(v80 + v83), (char *)(v80 + *(void *)&v79[16 * v12 + 16]), v80 + v84, __dst);
      if (v93) {
        break;
      }
      if (v84 < v83) {
        goto LABEL_153;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v82 = sub_250DE135C((uint64_t)v82);
      }
      if (v81 >= *((void *)v82 + 2)) {
        goto LABEL_154;
      }
      uint64_t v85 = &v82[16 * v81 + 32];
      *(void *)uint64_t v85 = v83;
      *((void *)v85 + 1) = v84;
      unint64_t v86 = *((void *)v82 + 2);
      if (v12 > v86) {
        goto LABEL_155;
      }
      memmove(&v82[16 * v12 + 16], &v82[16 * v12 + 32], 16 * (v86 - v12));
      double v79 = v82;
      *((void *)v82 + 2) = v86 - 1;
      unint64_t v12 = v86 - 1;
    }
    while (v86 > 2);
  }
LABEL_120:
  swift_bridgeObjectRelease();
  *(void *)(v88 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_250DE0DF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = (unsigned char *)(*a4 + a3);
    do
    {
      char v6 = *(unsigned char *)(v4 + a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      while (2)
      {
        switch(*(v8 - 1))
        {
          case 1:
            if ((v6 & 0x1F) == 0) {
              goto LABEL_14;
            }
            break;
          case 2:
            if ((0xBu >> v6)) {
              goto LABEL_14;
            }
            break;
          case 3:
            if ((3u >> v6)) {
              goto LABEL_14;
            }
            break;
          case 4:
            if ((0xFu >> v6))
            {
LABEL_14:
              if (!v4)
              {
                __break(1u);
                JUMPOUT(0x250DE0EA4);
              }
              *uint64_t v8 = *(v8 - 1);
              *--uint64_t v8 = v6;
              if (a3 != ++v7) {
                continue;
              }
            }
            break;
          default:
            goto LABEL_4;
        }
        break;
      }
LABEL_4:
      ++a3;
      ++v5;
    }
    while (a3 != a2);
  }
  return result;
}

uint64_t sub_250DE0EB8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char v23 = __src;
  uint64_t v4 = __dst;
  char v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  uint64_t v22 = __dst;
  if (a2 - __src < (uint64_t)(a3 - (void)a2))
  {
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (__dst != __src || a2 <= __dst) {
        memmove(__dst, __src, v8);
      }
      uint64_t v10 = &v4[v8];
      uint64_t v21 = &v4[v8];
      if (v6 != v7 && (unint64_t)v6 < a3)
      {
        do
        {
          char v11 = *v6;
          switch(*v4)
          {
            case 1:
              if ((*v6 & 0x1F) == 0) {
                goto LABEL_14;
              }
              goto LABEL_10;
            case 2:
              if ((0xBu >> v11)) {
                goto LABEL_14;
              }
              goto LABEL_10;
            case 3:
              if ((3u >> v11)) {
                goto LABEL_14;
              }
              goto LABEL_10;
            case 4:
              if (((0xFu >> v11) & 1) == 0) {
                goto LABEL_10;
              }
LABEL_14:
              unint64_t v12 = v6 + 1;
              if (v7 < v6 || v7 >= v12 || v7 != v6) {
                *uint64_t v7 = v11;
              }
              break;
            default:
LABEL_10:
              if (v7 != v4) {
                *uint64_t v7 = *v4;
              }
              uint64_t v22 = ++v4;
              unint64_t v12 = v6;
              break;
          }
          ++v7;
          if (v4 >= v10) {
            break;
          }
          char v6 = v12;
        }
        while ((unint64_t)v12 < a3);
        char v23 = v7;
      }
      goto LABEL_52;
    }
LABEL_53:
    sub_250E25280();
    __break(1u);
    JUMPOUT(0x250DE1198);
  }
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_53;
  }
  if (__dst != a2 || a3 <= (unint64_t)__dst) {
    memmove(__dst, a2, a3 - (void)a2);
  }
  uint64_t v13 = &v4[v9];
  uint64_t v21 = &v4[v9];
  char v23 = v6;
  if (v7 < v6 && (char *)a3 != v6)
  {
    unsigned __int8 v14 = (char *)(a3 - 1);
    unsigned __int8 v15 = v6;
    while (2)
    {
      int v16 = v14 + 1;
      char v17 = *(v13 - 1);
      int v19 = *--v15;
      char v18 = v19;
      switch(v19)
      {
        case 1:
          if ((*(v13 - 1) & 0x1F) == 0) {
            goto LABEL_41;
          }
          goto LABEL_34;
        case 2:
          if ((0xBu >> v17)) {
            goto LABEL_41;
          }
          goto LABEL_34;
        case 3:
          if ((3u >> v17)) {
            goto LABEL_41;
          }
          goto LABEL_34;
        case 4:
          if (((0xFu >> v17) & 1) == 0) {
            goto LABEL_34;
          }
LABEL_41:
          if (v16 != v6 || v14 >= v6) {
            *unsigned __int8 v14 = v18;
          }
          char v23 = v15;
          if (v15 > v7) {
            goto LABEL_45;
          }
          break;
        default:
LABEL_34:
          uint64_t v21 = v13 - 1;
          if (v16 < v13 || v14 >= v13 || v16 != v13) {
            *unsigned __int8 v14 = *(v13 - 1);
          }
          unsigned __int8 v15 = v6;
          --v13;
          if (v6 <= v7) {
            break;
          }
LABEL_45:
          --v14;
          char v6 = v15;
          if (v13 <= v4) {
            break;
          }
          continue;
      }
      break;
    }
  }
LABEL_52:
  sub_250DE12B8((void **)&v23, (const void **)&v22, &v21);
  return 1;
}

char *sub_250DE11C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DE1384();
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unsigned __int8 v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_250DE12B8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)sub_250E25280();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

char *sub_250DE135C(uint64_t a1)
{
  return sub_250DE11C0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_250DE1370(uint64_t a1)
{
  return sub_250DBAC78(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_250DE1384()
{
  if (!qword_269B03EB0)
  {
    sub_250DE13DC();
    unint64_t v0 = sub_250E253E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03EB0);
    }
  }
}

void sub_250DE13DC()
{
  if (!qword_269B03EB8)
  {
    unint64_t v0 = sub_250E24F20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03EB8);
    }
  }
}

unint64_t sub_250DE143C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250DE78C0(0, &qword_269B03FC0);
  uint64_t v2 = sub_250E25260();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_250DE7918(v6, (uint64_t)v15, (unint64_t *)&qword_269B03880);
    unint64_t result = sub_250DE4AEC((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_250DE78B0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_250DE15A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250DE7FCC(0, &qword_26B206FE8, (uint64_t (*)(uint64_t))sub_250DE7E74, MEMORY[0x263F8DFB0]);
  uint64_t v2 = (void *)sub_250E25260();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = sub_250DE4B9C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_250DE16D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250DE7FCC(0, &qword_26B206FF0, (uint64_t (*)(uint64_t))sub_250D99B64, MEMORY[0x263F8DFB0]);
  uint64_t v2 = (void *)sub_250E25260();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_250DE4B9C((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_250DE1810(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_250DE78C0(0, (unint64_t *)&qword_269B03FB0);
  uint64_t v2 = sub_250E25260();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_250DE7918(v6, (uint64_t)&v15, &qword_269B03FB8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_250DE4C30(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_250DE78B0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SleepingSampleAnalysisFeatureStatusManager.status.getter(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  sub_250E24900();
  swift_release();
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_250DE1BCC(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_250DE1A8C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  sub_250E24900();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v5 = v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_250DE1BCC(v5, a2);
  os_unfair_lock_unlock(v6);
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatusManager(uint64_t a1)
{
  return sub_250DE763C(a1, qword_26B207330);
}

uint64_t sub_250DE1BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_250DE79E4(a1, a2);
}

uint64_t (*SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter())()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  swift_getKeyPath();
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_250DE2148(v7);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = v7[0];
  uint64_t v4 = v7[1];
  swift_release_n();
  if (!v3) {
    return 0;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  return sub_250DE21FC;
}

uint64_t sub_250DE1D18@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = (uint64_t)SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_250DE7744;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_250DE1D88(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1)
  {
    a1 = (uint64_t *)swift_allocObject();
    a1[2] = v2;
    a1[3] = v1;
    uint64_t v3 = sub_250DE81A8;
  }
  else
  {
    uint64_t v3 = 0;
  }
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_250D8C3AC(v2);
  os_unfair_lock_lock(v6);
  sub_250DE81CC(v5);
  os_unfair_lock_unlock(v6);
  return sub_250D8C39C((uint64_t)v3);
}

uint64_t SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_250DE2294(v4);
  os_unfair_lock_unlock(v5);
  return sub_250D8C39C(a1);
}

uint64_t sub_250DE1F84@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = sub_250DE81FC;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;

  return sub_250D8C3AC(v4);
}

uint64_t sub_250DE201C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_250DE81A8;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  uint64_t v8 = *v7;
  sub_250D8C3AC(v3);
  uint64_t result = sub_250D8C39C(v8);
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t (*sub_250DE20CC())()
{
  swift_getAtKeyPath();
  if (!v2) {
    return 0;
  }
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  return sub_250DE81A8;
}

uint64_t (*sub_250DE2140())()
{
  return sub_250DE20CC();
}

uint64_t sub_250DE2148@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = sub_250DE81FC;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v7;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_250DE21C4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_250DE21FC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_250DE2224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  uint64_t v6 = *v5;
  sub_250D8C3AC(a2);
  uint64_t result = sub_250D8C39C(v6);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_250DE2294(uint64_t a1)
{
  return sub_250DE2224(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t (*SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  a1[1] = v3;
  return sub_250DE22F8;
}

uint64_t sub_250DE22F8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a1[2] + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL;
  uint64_t v6 = (os_unfair_lock_s *)(v3 + v5);
  if (a2)
  {
    sub_250D8C3AC(v2);
    os_unfair_lock_lock(v6);
    sub_250DE81CC(v4);
    os_unfair_lock_unlock(v6);
    sub_250D8C39C(v2);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + v5));
    sub_250DE81CC(v4);
    os_unfair_lock_unlock(v6);
  }
  return sub_250D8C39C(v2);
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init(healthStore:observationQueue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  id v6 = objc_allocWithZone(v2);
  id v7 = sub_250DE6498(a2, (uint64_t)sub_250DE24D4, v5);
  swift_release();

  return v7;
}

uint64_t sub_250DE249C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id sub_250DE24D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  id v4 = objc_allocWithZone(MEMORY[0x263F0A3D0]);

  return objc_msgSend(v4, sel_initWithFeatureIdentifier_healthStore_, a1, v3);
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = sub_250DE6498(a1, a2, a3);
  swift_release();

  return v8;
}

id SleepingSampleAnalysisFeatureStatusManager.init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = sub_250DE6498(a1, a2, a3);
  swift_release();

  return v4;
}

Swift::Void __swiftcall SleepingSampleAnalysisFeatureStatusManager.startObserving()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_250DE2DF0(v4, &v35);
  os_unfair_lock_unlock(v5);
  if (v35)
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_250E24950();
    __swift_project_value_buffer(v6, (uint64_t)qword_26B207A58);
    uint64_t v34 = sub_250E24930();
    os_log_type_t v7 = sub_250E24F40();
    if (os_log_type_enabled(v34, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v35 = v9;
      *(_DWORD *)id v8 = 136446210;
      uint64_t v10 = sub_250E25600();
      sub_250D8B44C(v10, v11, &v35);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250D84000, v34, v7, "[%{public}s] Already observing", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v9, -1, -1);
      MEMORY[0x25338A890](v8, -1, -1);
    }
    else
    {
    }
    return;
  }
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_250E24950();
  __swift_project_value_buffer(v12, (uint64_t)qword_26B207A58);
  BOOL v13 = sub_250E24930();
  os_log_type_t v14 = sub_250E24F40();
  uint64_t v33 = ObjectType;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v17 = sub_250E25600();
    sub_250D8B44C(v17, v18, &v35);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250D84000, v13, v14, "[%{public}s] Beginning observation", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v16, -1, -1);
    MEMORY[0x25338A890](v15, -1, -1);
  }

  uint64_t v19 = sub_250DE63B8();
  unint64_t v20 = sub_250DE62E4(v19, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_250E25230();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21)
    {
LABEL_12:
      if (v21 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_observationQueue);
      do
      {
        if ((v20 & 0xC000000000000001) != 0)
        {
          uint64_t v24 = (void *)MEMORY[0x253389CD0](v22, v20);
        }
        else
        {
          uint64_t v24 = *(void **)(v20 + 8 * v22 + 32);
          swift_unknownObjectRetain();
        }
        ++v22;
        objc_msgSend(v24, sel_registerObserver_queue_, v1, v23, v33);
        swift_unknownObjectRelease();
      }
      while (v21 != v22);
    }
  }
  uint64_t v25 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v25);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v35 = v1;
  sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  sub_250E248F0();
  swift_release();
  uint64_t v27 = sub_250E24930();
  os_log_type_t v28 = sub_250E24F40();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v35 = v30;
    *(_DWORD *)unint64_t v29 = 136446210;
    uint64_t v31 = sub_250E25600();
    sub_250D8B44C(v31, v32, &v35);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250D84000, v27, v28, "[%{public}s] Retrieved initial feature status", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v30, -1, -1);
    MEMORY[0x25338A890](v29, -1, -1);
  }
}

uint64_t sub_250DE2DF0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0);
  uint64_t v5 = *(int *)(result + 20);
  char v6 = *(unsigned char *)(a1 + v5);
  if ((v6 & 1) == 0) {
    *(unsigned char *)(a1 + v5) = 1;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_250DE2E44(uint64_t a1)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t result = SleepingSampleAnalysisFeatureStatusManager.currentStatus()((uint64_t)&v8 - v4);
  if (!v1)
  {
    uint64_t v7 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 0, 1, v7);
    return sub_250DE7B04((uint64_t)v5, a1);
  }
  return result;
}

uint64_t SleepingSampleAnalysisFeatureStatusManager.currentStatus()@<X0>(uint64_t a1@<X8>)
{
  v42[4] = *(id *)MEMORY[0x263EF8340];
  sub_250DE16D8(MEMORY[0x263F8EE78]);
  type metadata accessor for HKFeatureIdentifier(0);
  sub_250D99B64();
  sub_250DE67A4(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
  sub_250DE67A4(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
  sub_250DE67A4(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
  uint64_t v39 = a1;
  sub_250E24A60();
  uint64_t v3 = sub_250DE63B8();
  unint64_t v4 = sub_250DE62E4(v3, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_250E25230();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  unint64_t v37 = v4;
  unint64_t v38 = v4 & 0xC000000000000001;
  uint64_t v6 = 4;
  uint64_t v36 = v5;
  while (1)
  {
    uint64_t v8 = v6 - 4;
    if (v38)
    {
      uint64_t v9 = (void *)MEMORY[0x253389CD0](v6 - 4, v4);
      uint64_t v10 = v6 - 3;
      if (__OFADD__(v8, 1)) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v9 = *(void **)(v4 + 8 * v6);
      swift_unknownObjectRetain();
      uint64_t v10 = v6 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v42[0] = 0;
    id v11 = objc_msgSend(v9, sel_featureStatusWithError_, v42);
    if (!v11)
    {
      id v34 = v42[0];
      swift_bridgeObjectRelease();
      sub_250E24560();

      swift_willThrow();
      swift_unknownObjectRelease();
      return sub_250DE7D48(v39, (uint64_t (*)(void))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
    }
    uint64_t v12 = v11;
    uint64_t v40 = v10;
    id v13 = v42[0];
    id v14 = objc_msgSend(v9, sel_featureIdentifier);
    id v15 = v12;
    sub_250D99470();
    unint64_t v4 = sub_250E24A10();
    uint64_t v17 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = (void *)*v17;
    uint64_t v41 = (void *)*v17;
    *uint64_t v17 = 0x8000000000000000;
    unint64_t v21 = sub_250DE4B9C((uint64_t)v14);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_26;
    }
    char v25 = v20;
    if (v19[3] < v24) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      os_log_type_t v28 = v41;
      if (v20) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_250DE5D58();
      os_log_type_t v28 = v41;
      if (v25)
      {
LABEL_4:
        uint64_t v7 = v28[7];

        *(void *)(v7 + 8 * v21) = v15;
        goto LABEL_5;
      }
    }
LABEL_19:
    v28[(v21 >> 6) + 8] |= 1 << v21;
    uint64_t v29 = 8 * v21;
    *(void *)(v28[6] + v29) = v14;
    *(void *)(v28[7] + v29) = v15;
    uint64_t v30 = v28[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_27;
    }
    void v28[2] = v32;
    id v33 = v14;
LABEL_5:
    *uint64_t v17 = v28;

    swift_bridgeObjectRelease();
    ((void (*)(id *, void))v4)(v42, 0);
    swift_unknownObjectRelease();

    ++v6;
    unint64_t v4 = v37;
    if (v40 == v36) {
      return swift_bridgeObjectRelease();
    }
  }
  sub_250DE53B4(v24, isUniquelyReferenced_nonNull_native);
  unint64_t v26 = sub_250DE4B9C((uint64_t)v14);
  if ((v25 & 1) == (v27 & 1))
  {
    unint64_t v21 = v26;
    os_log_type_t v28 = v41;
    if (v25) {
      goto LABEL_4;
    }
    goto LABEL_19;
  }
  uint64_t result = sub_250E25460();
  __break(1u);
  return result;
}

Swift::Void __swiftcall SleepingSampleAnalysisFeatureStatusManager.stopObserving()()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_250E24950();
  __swift_project_value_buffer(v2, (uint64_t)qword_26B207A58);
  uint64_t v3 = sub_250E24930();
  os_log_type_t v4 = sub_250E24F40();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v7 = sub_250E25600();
    uint64_t v15 = sub_250D8B44C(v7, v8, &v16);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250D84000, v3, v4, "[%{public}s] Ending observation", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v6, -1, -1);
    MEMORY[0x25338A890](v5, -1, -1);
  }

  uint64_t v9 = sub_250DE63B8();
  unint64_t v10 = sub_250DE62E4(v9, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v16 = v1;
    sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
    sub_250E248F0();
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_250E25230();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_14;
  }
LABEL_7:
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        id v13 = (void *)MEMORY[0x253389CD0](i, v10);
      }
      else
      {
        id v13 = *(void **)(v10 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      objc_msgSend(v13, sel_unregisterObserver_, v1, v15, v16);
      swift_unknownObjectRelease();
    }
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_250DE36E4(uint64_t a1)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  os_log_type_t v4 = (char *)&v7 - v3;
  *(unsigned char *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 20)) = 0;
  sub_250DE16D8(MEMORY[0x263F8EE78]);
  type metadata accessor for HKFeatureIdentifier(0);
  sub_250D99B64();
  sub_250DE67A4(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
  sub_250DE67A4(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
  sub_250DE67A4(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
  sub_250E24A60();
  uint64_t v5 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return sub_250DE7B04((uint64_t)v4, a1);
}

void sub_250DE38CC(uint64_t a1)
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(a1
                                      + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState)
                          + ((*(unsigned int *)(**(void **)(a1
                                                            + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState)
                                              + 48)
                            + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v1);
  sub_250DE7BF0();
  os_unfair_lock_unlock(v1);
}

void SleepingSampleAnalysisFeatureStatusManager.featureStatusProviding(_:didUpdate:)(void *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  id v4 = objc_msgSend(a1, sel_featureIdentifier);
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_250E24950();
  __swift_project_value_buffer(v5, (uint64_t)qword_26B207A58);
  id v6 = v4;
  uint64_t v7 = sub_250E24930();
  os_log_type_t v8 = sub_250E24F40();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = sub_250E25600();
    sub_250D8B44C(v10, v11, &v19);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = sub_250E24C60();
    sub_250D8B44C(v12, v13, &v19);
    sub_250E24FC0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_250D84000, v7, v8, "[%{public}s] Received status update for %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25338A890](v18, -1, -1);
    MEMORY[0x25338A890](v9, -1, -1);
  }
  else
  {
  }
  MEMORY[0x270FA5388](v14);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v19 = v2;
  sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  sub_250E248F0();
  swift_release();
  uint64_t v16 = SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    v16();

    sub_250D8C39C(v17);
  }
  else
  {
  }
}

void sub_250DE3CE8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  unint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)v35 - v12;
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 20)) == 1)
  {
    id v36 = a4;
    id v37 = a3;
    uint64_t v38 = v4;
    sub_250DE79E4(a1, (uint64_t)v13);
    uint64_t v14 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    int v17 = v16(v13, 1, v14);
    sub_250DE7A78((uint64_t)v13);
    if (v17 == 1)
    {
      v35[2] = sub_250DE16D8(MEMORY[0x263F8EE78]);
      type metadata accessor for HKFeatureIdentifier(0);
      v35[1] = v18;
      v35[0] = sub_250D99B64();
      sub_250DE67A4(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
      sub_250DE67A4(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
      sub_250DE67A4(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
      sub_250E24A60();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      sub_250DE7B04((uint64_t)v11, a1);
    }
    if (!v16((char *)a1, 1, v14))
    {
      id v19 = v37;
      id v20 = v36;
      sub_250D99470();
      unint64_t v21 = (void (*)(uint64_t *, void))sub_250E24A10();
      BOOL v23 = v22;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = *v23;
      uint64_t *v23 = 0x8000000000000000;
      sub_250DE5A34((uint64_t)v20, v19, isUniquelyReferenced_nonNull_native);
      uint64_t *v23 = v40;

      swift_bridgeObjectRelease();
      v21(v39, 0);
    }
  }
  else
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_250E24950();
    __swift_project_value_buffer(v25, (uint64_t)qword_26B207A58);
    id v26 = a3;
    char v27 = sub_250E24930();
    os_log_type_t v28 = sub_250E24F40();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v39[0] = v30;
      *(_DWORD *)uint64_t v29 = 136446466;
      uint64_t v31 = sub_250E25600();
      uint64_t v40 = sub_250D8B44C(v31, v32, v39);
      sub_250E24FC0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      uint64_t v33 = sub_250E24C60();
      uint64_t v40 = sub_250D8B44C(v33, v34, v39);
      sub_250E24FC0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_250D84000, v27, v28, "[%{public}s] Ignoring received update for %{public}s; not observing",
        (uint8_t *)v29,
        0x16u);
      swift_arrayDestroy();
      MEMORY[0x25338A890](v30, -1, -1);
      MEMORY[0x25338A890](v29, -1, -1);
    }
    else
    {
    }
  }
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SleepingSampleAnalysisFeatureStatusManager.init()()
{
}

id SleepingSampleAnalysisFeatureStatusManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_250DE43B8(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_getKeyPath();
  sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  sub_250E24900();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  uint64_t v5 = v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16);
  id v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_250DE1BCC(v5, a1);
  os_unfair_lock_unlock(v6);
}

void sub_250DE44D4()
{
}

void sub_250DE44F8()
{
}

uint64_t sub_250DE451C(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4 = v2;
  id v6 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v26 = v8;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v10 = sub_250DE4B9C((uint64_t)v6);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_12;
  }
  char v3 = v9;
  if (*(void *)(v8 + 24) >= v13)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_12:
    sub_250DE5B98();
    uint64_t v8 = v26;
    goto LABEL_6;
  }
  sub_250DE506C(v13, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v26;
  unint64_t v14 = sub_250DE4B9C((uint64_t)v6);
  if ((v3 & 1) != (v15 & 1)) {
    goto LABEL_14;
  }
  unint64_t v10 = v14;
LABEL_6:
  *uint64_t v4 = v8;
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)*v4;
  if (v3)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    uint64_t v23 = v16[7];
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v23 + 8 * v10);
    swift_unknownObjectRetain();

    return v24;
  }
  uint64_t v17 = swift_bridgeObjectRetain();
  a2(&v26, v17);
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v18 = 8 * v10;
  *(void *)(v16[6] + v18) = v6;
  *(void *)(v16[7] + v18) = v26;
  uint64_t v19 = v16[2];
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    void v16[2] = v21;
    id v22 = v6;
    goto LABEL_10;
  }
  __break(1u);
LABEL_14:
  type metadata accessor for HKFeatureIdentifier(0);
  uint64_t result = sub_250E25460();
  __break(1u);
  return result;
}

uint64_t sub_250DE46B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_250DE4748(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_250DE49A0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_250DE49A0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_250DE4748(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_250DE48C0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_250E250F0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_250E25210();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_250E24CF0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_250E25280();
    __break(1u);
LABEL_14:
    uint64_t result = sub_250E25210();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_250DE48C0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_250DE7B98();
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_250DE4924(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_250E24D40();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x2533898E0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_250DE49A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_250DE7B98();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_250E25280();
  __break(1u);
  return result;
}

unint64_t sub_250DE4AEC(uint64_t a1)
{
  uint64_t v2 = sub_250E25070();

  return sub_250DE4CA8(a1, v2);
}

unint64_t sub_250DE4B30(unsigned __int8 a1)
{
  sub_250E254B0();
  sub_250E254C0();
  uint64_t v2 = sub_250E254F0();

  return sub_250DE4D70(a1, v2);
}

unint64_t sub_250DE4B9C(uint64_t a1)
{
  sub_250E24C60();
  sub_250E254B0();
  sub_250E24CC0();
  uint64_t v2 = sub_250E254F0();
  swift_bridgeObjectRelease();

  return sub_250DE4E10(a1, v2);
}

unint64_t sub_250DE4C30(uint64_t a1, uint64_t a2)
{
  sub_250E254B0();
  sub_250E24CC0();
  uint64_t v4 = sub_250E254F0();

  return sub_250DE4F88(a1, a2, v4);
}

unint64_t sub_250DE4CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_250DD060C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x253389C50](v9, a1);
      sub_250DA28C8((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_250DE4D70(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_250DE4E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_250E24C60();
    uint64_t v8 = v7;
    if (v6 == sub_250E24C60() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_250E25400();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_250E24C60();
          uint64_t v15 = v14;
          if (v13 == sub_250E24C60() && v15 == v16) {
            break;
          }
          char v18 = sub_250E25400();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_250DE4F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_250E25400() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_250E25400() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_250DE506C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_250DE7FCC(0, &qword_26B206FE8, (uint64_t (*)(uint64_t))sub_250DE7E74, MEMORY[0x263F8DFB0]);
  char v38 = a2;
  uint64_t v6 = sub_250E25250();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1)) {
      goto LABEL_40;
    }
    if (v13 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v13);
    if (!v24)
    {
      int64_t v25 = v13 + 1;
      if (v13 + 1 >= v36)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v35;
        if ((v38 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          int64_t v13 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v13 >= v36) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v13);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_21:
    uint64_t v26 = 8 * v21;
    char v27 = *(void **)(*(void *)(v5 + 48) + v26);
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + v26);
    if ((v38 & 1) == 0)
    {
      id v29 = v27;
      swift_unknownObjectRetain();
    }
    sub_250E24C60();
    sub_250E254B0();
    sub_250E24CC0();
    uint64_t v14 = sub_250E254F0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v17);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v27;
    *(void *)(*(void *)(v7 + 56) + v19) = v28;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_250DE53B4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_250DE7FCC(0, &qword_26B206FF0, (uint64_t (*)(uint64_t))sub_250D99B64, MEMORY[0x263F8DFB0]);
  char v39 = a2;
  uint64_t v6 = sub_250E25250();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    unint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    BOOL v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    sub_250E24C60();
    sub_250E254B0();
    sub_250E24CC0();
    uint64_t v14 = sub_250E254F0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_250DE5710(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_250DE776C();
  char v37 = a2;
  uint64_t v6 = sub_250E25250();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    int64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_250DE7898(v25, (uint64_t)v38);
    }
    else
    {
      sub_250DE7834((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_250E254B0();
    sub_250E24CC0();
    uint64_t result = sub_250E254F0();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    void *v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_250DE7898(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_250DE5A34(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_250DE4B9C((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_250DE5D58();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_250DE53B4(v12, a3 & 1);
  unint64_t v17 = sub_250DE4B9C((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    type metadata accessor for HKFeatureIdentifier(0);
    sub_250E25460();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v22;

  id v23 = a2;
}

void *sub_250DE5B98()
{
  id v1 = v0;
  sub_250DE7FCC(0, &qword_26B206FE8, (uint64_t (*)(uint64_t))sub_250DE7E74, MEMORY[0x263F8DFB0]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_250E25240();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    if (!v21) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v22 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id sub_250DE5D58()
{
  id v1 = v0;
  sub_250DE7FCC(0, &qword_26B206FF0, (uint64_t (*)(uint64_t))sub_250D99B64, MEMORY[0x263F8DFB0]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_250E25240();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_250DE5F2C()
{
  id v1 = v0;
  sub_250DE776C();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_250E25240();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *id v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_250DE7834(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_250DE7898(v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_250DE6114(uint64_t *a1@<X0>, os_unfair_lock_s *a2@<X1>, void *a3@<X8>)
{
  v5[1] = *a1;
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_250DE7F58(v5);
  os_unfair_lock_unlock(v4);
  *a3 = v5[0];
}

void sub_250DE618C(id *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  uint64_t v4 = sub_250DE451C(v3, (void (*)(uint64_t *__return_ptr, uint64_t))sub_250DE7F78);

  *a2 = v4;
}

unint64_t sub_250DE6208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_250DE8088();
    id v3 = (void *)sub_250E25260();
    for (uint64_t i = (_OWORD *)(a1 + 40); ; uint64_t i = (_OWORD *)((char *)i + 24))
    {
      unsigned __int8 v5 = *((unsigned char *)i - 8);
      long long v11 = *i;
      unint64_t result = sub_250DE4B30(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t sub_250DE62E4(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_250E25190();
    uint64_t v6 = (void **)(a1 + 32);
    do
    {
      char v7 = *v6++;
      id v8 = v7;
      a2();

      sub_250E25160();
      sub_250E251A0();
      sub_250E251B0();
      sub_250E25170();
      --v3;
    }
    while (v3);
    return v9;
  }
  return result;
}

uint64_t sub_250DE63B8()
{
  sub_250DE7C18(0, &qword_26B207040, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_250E27DE0;
  uint64_t v1 = (void *)*MEMORY[0x263F097F0];
  uint64_t v2 = (void *)*MEMORY[0x263F097E8];
  *(void *)(v0 + 32) = *MEMORY[0x263F097F0];
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = (void *)*MEMORY[0x263F097C8];
  uint64_t v4 = (void *)*MEMORY[0x263F097F8];
  *(void *)(v0 + 48) = *MEMORY[0x263F097C8];
  *(void *)(v0 + 56) = v4;
  unsigned __int8 v5 = (void *)*MEMORY[0x263F097B8];
  *(void *)(v0 + 64) = *MEMORY[0x263F097B8];
  id v6 = v1;
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  return v0;
}

id sub_250DE6498(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState;
  uint64_t v14 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v12[*(int *)(v10 + 28)] = 0;
  unint64_t v15 = &v12[*(int *)(v10 + 32)];
  sub_250DE7C7C();
  *(void *)unint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + ((*(unsigned int *)(*(void *)v16 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_250DE7CE4((uint64_t)v12, v16 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v16 + 16));
  unint64_t v17 = v4;
  sub_250DE7D48((uint64_t)v12, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State);
  *(void *)&v4[v13] = v16;
  sub_250E24910();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  swift_retain();
  unint64_t v19 = sub_250DE15A0(MEMORY[0x263F8EE78]);
  sub_250DE7DDC();
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 24) = 0;
  *(void *)(v20 + 16) = v19;
  unint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v20;
  v21[3] = sub_250DE7DA8;
  v21[4] = v18;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_250DE7F0C;
  *(void *)(v22 + 24) = v21;
  unint64_t v23 = (uint64_t (**)(uint64_t))&v17[OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier];
  void *v23 = sub_250DE7F18;
  v23[1] = (uint64_t (*)(uint64_t))v22;
  *(void *)&v17[OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_observationQueue] = a1;
  id v24 = a1;

  v26.receiver = v17;
  v26.super_class = ObjectType;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t sub_250DE6768(uint64_t a1)
{
  return sub_250DE2E44(a1);
}

void sub_250DE6784()
{
  sub_250DE38CC(*(void *)(v0 + 16));
}

uint64_t sub_250DE67A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250DE67EC(uint64_t a1)
{
  sub_250DE3CE8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_250DE680C(uint64_t a1)
{
  uint64_t result = sub_250DE67A4(&qword_26B206F78, (void (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatusManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.startObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.stopObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_250DE68A8()
{
  return type metadata accessor for SleepingSampleAnalysisFeatureStatusManager(0);
}

uint64_t sub_250DE68B0()
{
  uint64_t result = sub_250E24920();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SleepingSampleAnalysisFeatureStatusManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleAnalysisFeatureStatusManager);
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusManager.__allocating_init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t *sub_250DE6994(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      sub_250D99470();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    if (*v14)
    {
      uint64_t v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    }
  }
  return a1;
}

uint64_t sub_250DE6B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4);
  if (!result)
  {
    sub_250D99470();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a1 + *(int *)(a2 + 24)))
  {
    return swift_release();
  }
  return result;
}

char *sub_250DE6C48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    sub_250D99470();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (*(void *)v12)
  {
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  return a1;
}

char *sub_250DE6DE0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      sub_250D99470();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_250DE7D48((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
LABEL_6:
    sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  sub_250D99470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(a1, a2, v21);
LABEL_7:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *(void *)&a1[v13];
  uint64_t v17 = *(void *)v15;
  if (!v16)
  {
    if (v17)
    {
      uint64_t v19 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = v17;
      *((void *)v14 + 1) = v19;
      swift_retain();
      return a1;
    }
LABEL_13:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    return a1;
  }
  if (!v17)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v18 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v18;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_250DE7034(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    sub_250D99470();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = *(void *)v12;
  if (*(void *)v12)
  {
    uint64_t v14 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = v13;
    *((void *)v11 + 1) = v14;
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  return a1;
}

char *sub_250DE71C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      sub_250D99470();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_250DE7D48((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
LABEL_6:
    sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  sub_250D99470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(a1, a2, v20);
LABEL_7:
  uint64_t v13 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *(void *)v15;
  if (!*(void *)&a1[v13])
  {
    if (v16)
    {
      uint64_t v18 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = v16;
      *((void *)v14 + 1) = v18;
      return a1;
    }
LABEL_13:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v17 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v16;
  *((void *)v14 + 1) = v17;
  swift_release();
  return a1;
}

uint64_t sub_250DE740C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DE7420);
}

uint64_t sub_250DE7420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_250DE751C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DE7530);
}

void sub_250DE7530(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(uint64_t a1)
{
  return sub_250DE763C(a1, qword_26B2072C0);
}

uint64_t sub_250DE763C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250DE7674()
{
  sub_250DE7C18(319, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_250DE7744()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_250DE776C()
{
  if (!qword_269B03FA0)
  {
    sub_250DE77E4(255, (unint64_t *)&qword_269B03FA8);
    unint64_t v0 = sub_250E25270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03FA0);
    }
  }
}

uint64_t sub_250DE77E4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_250DE7834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_250DE7898(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_OWORD *sub_250DE78B0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_250DE78C0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_250E25270();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_250DE7918(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_250DE7984(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_250DE7984(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_250DE79E4(uint64_t a1, uint64_t a2)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DE7A78(uint64_t a1)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250DE7B04(uint64_t a1, uint64_t a2)
{
  sub_250DE7C18(0, &qword_26B207210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_250DE7B98()
{
  if (!qword_269B03FC8)
  {
    unint64_t v0 = sub_250E253E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03FC8);
    }
  }
}

uint64_t sub_250DE7BF0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_250DE7C18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250DE7C7C()
{
  if (!qword_26B207368)
  {
    type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(255);
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_250E25140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B207368);
    }
  }
}

uint64_t sub_250DE7CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DE7D48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250DE7DA8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

void sub_250DE7DDC()
{
  if (!qword_26B207370)
  {
    sub_250DE7FCC(255, &qword_26B207348, (uint64_t (*)(uint64_t))sub_250DE7E74, MEMORY[0x263F8D060]);
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_250E25140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B207370);
    }
  }
}

unint64_t sub_250DE7E74()
{
  unint64_t result = qword_26B207360;
  if (!qword_26B207360)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26B207360);
  }
  return result;
}

uint64_t sub_250DE7ECC()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_250DE7F0C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_250DE6114(a1, *(os_unfair_lock_s **)(v2 + 16), a2);
}

uint64_t sub_250DE7F18(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

void sub_250DE7F58(uint64_t *a1@<X8>)
{
  sub_250DE618C(*(id **)(v1 + 16), a1);
}

void *sub_250DE7F78@<X0>(void *a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t *);
  void *result;
  uint64_t v5;
  uint64_t v6;

  uint64_t v3 = *(void *(**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = **(void **)(v1 + 32);
  unint64_t result = v3(&v6, &v5);
  *a1 = v6;
  return result;
}

void sub_250DE7FCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    uint64_t v9 = v8;
    uint64_t v10 = a3(255);
    uint64_t v11 = sub_250DE67A4(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
    unint64_t v12 = a4(a1, v9, v10, v11);
    if (!v13) {
      atomic_store(v12, a2);
    }
  }
}

void sub_250DE8088()
{
  if (!qword_269B03FD0)
  {
    sub_250DE80F4();
    sub_250DE8154();
    unint64_t v0 = sub_250E25270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03FD0);
    }
  }
}

void sub_250DE80F4()
{
  if (!qword_269B03FD8)
  {
    unint64_t v0 = sub_250E24F20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03FD8);
    }
  }
}

unint64_t sub_250DE8154()
{
  unint64_t result = qword_269B03FE0;
  if (!qword_269B03FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03FE0);
  }
  return result;
}

uint64_t sub_250DE81CC(uint64_t a1)
{
  return sub_250DE2294(a1);
}

void sub_250DE81E4()
{
}

uint64_t sub_250DE8200()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8300()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8428()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8558()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8604()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DE8720()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DE87B4()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DE8938()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DE8A4C()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8B70()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8C6C()
{
  return sub_250E254F0();
}

uint64_t sub_250DE8D14()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleChangeNotification.init(id:day:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *a4;
  char v8 = *((unsigned char *)a4 + 8);
  *a5 = a1;
  a5[1] = a2;
  uint64_t v9 = type metadata accessor for SleepingSampleChangeNotification();
  uint64_t v10 = (char *)a5 + *(int *)(v9 + 20);
  uint64_t v11 = sub_250E24B20();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a3, v11);
  uint64_t v13 = (char *)a5 + *(int *)(v9 + 24);
  *(void *)uint64_t v13 = v7;
  v13[8] = v8;
  return result;
}

uint64_t type metadata accessor for SleepingSampleChangeNotification()
{
  uint64_t result = qword_269B040A8;
  if (!qword_269B040A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SleepingSampleChangeNotification.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleChangeNotification.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SleepingSampleChangeNotification.id.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.day.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 20);
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SleepingSampleChangeNotification.day.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 20);
  uint64_t v4 = sub_250E24B20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*SleepingSampleChangeNotification.day.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for SleepingSampleChangeNotification();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 24));
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t SleepingSampleChangeNotification.content.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for SleepingSampleChangeNotification();
  uint64_t v5 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  return result;
}

uint64_t (*SleepingSampleChangeNotification.content.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.Content.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t static SleepingSampleChangeNotification.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  if (!*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = v4;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t sub_250DE9248(uint64_t a1)
{
  unint64_t v2 = sub_250DE99D8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DE9284(uint64_t a1)
{
  unint64_t v2 = sub_250DE99D8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DE92C0(uint64_t a1)
{
  unint64_t v2 = sub_250DE9984();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DE92FC(uint64_t a1)
{
  unint64_t v2 = sub_250DE9984();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DE9338()
{
  uint64_t v1 = 0x447365676E616863;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F4370756D726177;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7365676E616863;
  }
}

uint64_t sub_250DE93A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DED0AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DE93D0(uint64_t a1)
{
  unint64_t v2 = sub_250DE9A2C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DE940C(uint64_t a1)
{
  unint64_t v2 = sub_250DE9A2C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DE9448(uint64_t a1)
{
  unint64_t v2 = sub_250DE9930();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DE9484(uint64_t a1)
{
  unint64_t v2 = sub_250DE9930();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleChangeNotification.Content.encode(to:)(void *a1)
{
  unsigned int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_250DEC0A8(0, &qword_269B03FF0, (uint64_t (*)(void))sub_250DE9930, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v4);
  int64_t v25 = (char *)&v22 - v5;
  sub_250DEC0A8(0, &qword_269B04000, (uint64_t (*)(void))sub_250DE9984, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys, v3);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v22 = (char *)&v22 - v7;
  sub_250DEC0A8(0, &qword_269B04010, (uint64_t (*)(void))sub_250DE99D8, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys, v3);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v28 = (char *)&v22 - v9;
  sub_250DEC0A8(0, &qword_269B04020, (uint64_t (*)(void))sub_250DE9A2C, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.CodingKeys, v3);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v31 = *v1;
  LODWORD(v3) = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DE9A2C();
  sub_250E25510();
  if (v3 == 1)
  {
    if (v31)
    {
      char v35 = 2;
      sub_250DE9930();
      uint64_t v15 = v25;
      sub_250E25350();
      uint64_t v17 = v26;
      uint64_t v16 = v27;
    }
    else
    {
      char v34 = 1;
      sub_250DE9984();
      uint64_t v15 = v22;
      sub_250E25350();
      uint64_t v17 = v23;
      uint64_t v16 = v24;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    uint64_t v18 = v12;
    char v33 = 0;
    sub_250DE99D8();
    uint64_t v19 = v28;
    sub_250E25350();
    uint64_t v32 = v31;
    sub_250DE9A80();
    uint64_t v20 = v30;
    sub_250E253B0();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v11);
  }
}

unint64_t sub_250DE9930()
{
  unint64_t result = qword_269B03FF8;
  if (!qword_269B03FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03FF8);
  }
  return result;
}

unint64_t sub_250DE9984()
{
  unint64_t result = qword_269B04008;
  if (!qword_269B04008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04008);
  }
  return result;
}

unint64_t sub_250DE99D8()
{
  unint64_t result = qword_269B04018;
  if (!qword_269B04018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04018);
  }
  return result;
}

unint64_t sub_250DE9A2C()
{
  unint64_t result = qword_269B04028;
  if (!qword_269B04028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04028);
  }
  return result;
}

unint64_t sub_250DE9A80()
{
  unint64_t result = qword_269B04030;
  if (!qword_269B04030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04030);
  }
  return result;
}

uint64_t SleepingSampleChangeNotification.Content.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t SleepingSampleChangeNotification.Content.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  unsigned int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_250DEC0A8(0, &qword_269B04038, (uint64_t (*)(void))sub_250DE9930, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v36 = v4;
  uint64_t v41 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)&v32 - v5;
  sub_250DEC0A8(0, &qword_269B04040, (uint64_t (*)(void))sub_250DE9984, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys, v3);
  uint64_t v35 = v6;
  uint64_t v33 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v39 = (char *)&v32 - v7;
  sub_250DEC0A8(0, &qword_269B04048, (uint64_t (*)(void))sub_250DE99D8, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys, v3);
  uint64_t v9 = v8;
  uint64_t v34 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - v10;
  sub_250DEC0A8(0, &qword_269B04050, (uint64_t (*)(void))sub_250DE9A2C, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.CodingKeys, v3);
  uint64_t v13 = v12;
  uint64_t v38 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v32 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DE9A2C();
  uint64_t v16 = v42;
  sub_250E25500();
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v32 = v9;
  uint64_t v18 = v39;
  uint64_t v17 = v40;
  uint64_t v19 = v41;
  uint64_t v42 = a1;
  uint64_t v20 = sub_250E25340();
  if (*(void *)(v20 + 16) != 1)
  {
    uint64_t v22 = sub_250E25130();
    swift_allocError();
    uint64_t v24 = v23;
    sub_250DA9C54();
    *uint64_t v24 = &type metadata for SleepingSampleChangeNotification.Content;
    sub_250E252D0();
    sub_250E25110();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
    a1 = v42;
LABEL_7:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  if (*(unsigned char *)(v20 + 32))
  {
    if (*(unsigned char *)(v20 + 32) == 1)
    {
      char v45 = 1;
      sub_250DE9984();
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
      uint64_t v21 = 0;
    }
    else
    {
      char v46 = 2;
      sub_250DE9930();
      sub_250E252C0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
      uint64_t v21 = 1;
    }
    char v31 = 1;
    uint64_t v28 = v37;
  }
  else
  {
    char v44 = 0;
    sub_250DE99D8();
    uint64_t v27 = v11;
    sub_250E252C0();
    uint64_t v28 = v37;
    sub_250DEA2BC();
    uint64_t v29 = v32;
    sub_250E25330();
    uint64_t v30 = v38;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v13);
    char v31 = 0;
    uint64_t v21 = v43;
  }
  *(void *)uint64_t v28 = v21;
  *(unsigned char *)(v28 + 8) = v31;
  uint64_t v25 = (uint64_t)v42;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t sub_250DEA18C()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DEA1FC()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t sub_250DEA250()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_250E254B0();
  if (v1 != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

unint64_t sub_250DEA2BC()
{
  unint64_t result = qword_269B04058;
  if (!qword_269B04058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04058);
  }
  return result;
}

uint64_t sub_250DEA310@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleChangeNotification.Content.init(from:)(a1, a2);
}

uint64_t sub_250DEA328(void *a1)
{
  return SleepingSampleChangeNotification.Content.encode(to:)(a1);
}

uint64_t sub_250DEA340(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  if (!*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = v4;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t SleepingSampleChangeNotification.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_250E24CC0();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for SleepingSampleChangeNotification();
  sub_250E24B20();
  sub_250D91CCC(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24) + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t sub_250DEA480()
{
  uint64_t v1 = 7954788;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E65746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_250DEA4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DED240(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DEA4F0(uint64_t a1)
{
  unint64_t v2 = sub_250DEC000();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DEA52C(uint64_t a1)
{
  unint64_t v2 = sub_250DEC000();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleChangeNotification.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_250DEC0A8(0, &qword_269B04060, (uint64_t (*)(void))sub_250DEC000, (uint64_t)&type metadata for SleepingSampleChangeNotification.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DEC000();
  sub_250E25510();
  char v18 = 0;
  sub_250E25380();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SleepingSampleChangeNotification();
    char v17 = 1;
    sub_250E24B20();
    sub_250D91CCC(&qword_26B206D70, MEMORY[0x263F090E8]);
    sub_250E253B0();
    uint64_t v11 = (uint64_t *)(v3 + *(int *)(v10 + 24));
    uint64_t v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 8);
    uint64_t v14 = v12;
    char v15 = (char)v11;
    char v16 = 2;
    sub_250DEC054();
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleChangeNotification.hashValue.getter()
{
  sub_250E254B0();
  swift_bridgeObjectRetain();
  sub_250E24CC0();
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for SleepingSampleChangeNotification();
  sub_250E24B20();
  sub_250D91CCC(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24) + 8) != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t SleepingSampleChangeNotification.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v23 = sub_250E24B20();
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unsigned int v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DEC0A8(0, &qword_269B04078, (uint64_t (*)(void))sub_250DEC000, (uint64_t)&type metadata for SleepingSampleChangeNotification.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v25 = v5;
  uint64_t v22 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for SleepingSampleChangeNotification();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DEC000();
  uint64_t v24 = v7;
  uint64_t v11 = v26;
  sub_250E25500();
  if (v11) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v12 = (uint64_t)a1;
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  char v31 = 0;
  *uint64_t v10 = sub_250E25300();
  v10[1] = v15;
  char v30 = 1;
  sub_250D91CCC(&qword_26B2075E8, MEMORY[0x263F090E8]);
  sub_250E25330();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v10 + *(int *)(v8 + 20), v4, v14);
  char v29 = 2;
  sub_250DEC110();
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v25);
  char v16 = v28;
  char v17 = (char *)v10 + *(int *)(v8 + 24);
  *(void *)char v17 = v27;
  v17[8] = v16;
  sub_250DEC164((uint64_t)v10, v20);
  __swift_destroy_boxed_opaque_existential_1(v12);
  return sub_250DEC1C8((uint64_t)v10);
}

uint64_t sub_250DEAC8C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_250DEAC9C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_250E24CC0();
  swift_bridgeObjectRelease();
  sub_250E24B20();
  sub_250D91CCC(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  if (*(unsigned char *)(v2 + *(int *)(a2 + 24) + 8) != 1) {
    sub_250E254C0();
  }
  return sub_250E254C0();
}

uint64_t sub_250DEAD94(uint64_t a1, uint64_t a2)
{
  sub_250E254B0();
  swift_bridgeObjectRetain();
  sub_250E24CC0();
  swift_bridgeObjectRelease();
  sub_250E24B20();
  sub_250D91CCC(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  if (*(unsigned char *)(v2 + *(int *)(a2 + 24) + 8) != 1) {
    sub_250E254C0();
  }
  sub_250E254C0();
  return sub_250E254F0();
}

uint64_t sub_250DEAE98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleChangeNotification.init(from:)(a1, a2);
}

uint64_t sub_250DEAEB0(void *a1)
{
  return SleepingSampleChangeNotification.encode(to:)(a1);
}

HealthBalance::SleepingSampleChangeNotification::CategoryIdentifier_optional __swiftcall SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t SleepingSampleChangeNotification.CategoryIdentifier.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000029;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000002BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000024;
  }
}

uint64_t sub_250DEAF88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_250DB0428(*a1, *a2);
}

uint64_t sub_250DEAF94()
{
  return sub_250DE8558();
}

uint64_t sub_250DEAF9C()
{
  return sub_250DE8720();
}

uint64_t sub_250DEAFA4()
{
  return sub_250DE8C6C();
}

HealthBalance::SleepingSampleChangeNotification::CategoryIdentifier_optional sub_250DEAFAC(Swift::String *a1)
{
  return SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(*a1);
}

unint64_t sub_250DEAFB8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SleepingSampleChangeNotification.CategoryIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SleepingSampleChangeNotification.categoryIdentifier.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = type metadata accessor for SleepingSampleChangeNotification();
  unsigned int v4 = (uint64_t *)(v1 + *(int *)(result + 24));
  uint64_t v5 = *v4;
  int v6 = *((unsigned __int8 *)v4 + 8);
  if (v5) {
    char v7 = 2;
  }
  else {
    char v7 = 1;
  }
  if (v6) {
    char v8 = v7;
  }
  else {
    char v8 = 0;
  }
  *a1 = v8;
  return result;
}

void SleepingSampleChangeNotification.Content.categoryIdentifier.getter(char *a1@<X8>)
{
  if (*(void *)v1) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  if (!*(unsigned char *)(v1 + 8)) {
    char v2 = 0;
  }
  *a1 = v2;
}

uint64_t SleepingSampleChangeNotification.title.getter()
{
  return SleepingSampleChangeNotification.Content.title.getter();
}

uint64_t SleepingSampleChangeNotification.Content.title.getter()
{
  uint64_t v0 = sub_250E247F0();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = sub_250E24C10();
  MEMORY[0x270FA5388](v1 - 8);
  sub_250E24C00();
  char v2 = (void *)sub_250E24C30();
  id v3 = objc_msgSend(self, sel_bundleWithIdentifier_, v2);

  sub_250E247E0();
  return sub_250E24C70();
}

uint64_t SleepingSampleChangeNotification.body.getter()
{
  uint64_t v1 = sub_250E247F0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_250E24C10();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = v0 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 24);
  if (*(unsigned char *)(v3 + 8) != 1 || !*(void *)v3) {
    return SleepingSampleDaySummaryDescription.primaryBody.getter();
  }
  sub_250E24C00();
  unsigned int v4 = (void *)sub_250E24C30();
  id v5 = objc_msgSend(self, sel_bundleWithIdentifier_, v4);

  sub_250E247E0();
  return sub_250E24C70();
}

uint64_t SleepingSampleChangeNotification.Content.body.getter()
{
  uint64_t v1 = sub_250E247F0();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v2 = sub_250E24C10();
  MEMORY[0x270FA5388](v2 - 8);
  if (*(unsigned char *)(v0 + 8) != 1 || !*(void *)v0) {
    return SleepingSampleDaySummaryDescription.primaryBody.getter();
  }
  sub_250E24C00();
  uint64_t v3 = (void *)sub_250E24C30();
  id v4 = objc_msgSend(self, sel_bundleWithIdentifier_, v3);

  sub_250E247E0();
  return sub_250E24C70();
}

uint64_t UNUserNotificationCenter.send(_:)(uint64_t a1)
{
  v2[41] = a1;
  v2[42] = v1;
  uint64_t v3 = sub_250E24710();
  v2[43] = v3;
  v2[44] = *(void *)(v3 - 8);
  v2[45] = swift_task_alloc();
  sub_250E247F0();
  v2[46] = swift_task_alloc();
  sub_250E24C10();
  v2[47] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_250DEB6A4, 0, 0);
}

uint64_t sub_250DEB6A4()
{
  uint64_t v1 = v0[41];
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F1DEF0]), sel_init);
  v0[48] = v2;
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 24));
  uint64_t v4 = *v3;
  int v5 = *((unsigned __int8 *)v3 + 8);
  SleepingSampleChangeNotification.Content.title.getter();
  int v6 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setTitle_, v6);

  if (v5 == 1 && v4)
  {
    sub_250E24C00();
    char v7 = (void *)sub_250E24C30();
    id v8 = objc_msgSend(self, sel_bundleWithIdentifier_, v7);

    sub_250E247E0();
    sub_250E24C70();
  }
  else
  {
    SleepingSampleDaySummaryDescription.primaryBody.getter();
    if (!v9) {
      goto LABEL_6;
    }
  }
  uint64_t v10 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setBody_, v10);

LABEL_6:
  uint64_t v12 = v0[44];
  uint64_t v11 = v0[45];
  uint64_t v26 = v0[43];
  id v27 = (id)v0[42];
  uint64_t v13 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setCategoryIdentifier_, v13);

  id v14 = objc_msgSend(self, sel_soundWithAlertType_, 25);
  objc_msgSend(v2, sel_setSound_, v14);

  sub_250DEC224();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_250E29FB0;
  v0[37] = sub_250E24C60();
  v0[38] = v16;
  sub_250E25090();
  uint64_t v17 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 96) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 72) = 15;
  v0[39] = 0x6144746567726174;
  v0[40] = 0xE900000000000079;
  sub_250E25090();
  uint64_t v18 = sub_250E24AE0();
  *(void *)(inited + 168) = v17;
  *(void *)(inited + 144) = v18;
  sub_250DE143C(inited);
  uint64_t v19 = (void *)sub_250E24B40();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setUserInfo_, v19);

  sub_250E246D0();
  uint64_t v20 = (void *)sub_250E246C0();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v26);
  objc_msgSend(v2, sel_setExpirationDate_, v20);

  swift_bridgeObjectRetain();
  id v21 = v2;
  uint64_t v22 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  id v23 = objc_msgSend(self, sel_requestWithIdentifier_content_trigger_, v22, v21, 0);
  v0[49] = v23;

  v0[2] = v0;
  v0[3] = sub_250DEBBEC;
  uint64_t v24 = swift_continuation_init();
  v0[32] = MEMORY[0x263EF8330];
  v0[33] = 0x40000000;
  v0[34] = sub_250DEBE30;
  v0[35] = &block_descriptor;
  v0[36] = v24;
  objc_msgSend(v27, sel_addNotificationRequest_withCompletionHandler_, v23);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_250DEBBEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 400) = v1;
  if (v1) {
    id v2 = sub_250DEBD8C;
  }
  else {
    id v2 = sub_250DEBCFC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_250DEBCFC()
{
  uint64_t v1 = *(void **)(v0 + 392);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_250DEBD8C()
{
  uint64_t v1 = (void *)v0[49];
  id v2 = (void *)v0[48];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_250DEBE30(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_250DBF0D4();
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return MEMORY[0x270FA2410](v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return MEMORY[0x270FA2408](v7);
  }
}

uint64_t _s13HealthBalance32SleepingSampleChangeNotificationV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_250E25400(), uint64_t result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = type metadata accessor for SleepingSampleChangeNotification();
    sub_250E24B20();
    sub_250D91CCC(&qword_26B2075B0, MEMORY[0x263F090E8]);
    sub_250E24FF0();
    if (!v15)
    {
      uint64_t v8 = *(int *)(v7 + 24);
      uint64_t v9 = *(void *)((char *)a1 + v8);
      int v10 = *((unsigned __int8 *)a1 + v8 + 8);
      uint64_t v11 = (char *)a2 + v8;
      uint64_t v12 = *(void *)((char *)a2 + v8);
      int v13 = v11[8];
      if (v10 == 1)
      {
        if (v9)
        {
          if (v13) {
            return v12 != 0;
          }
        }
        else if (v13)
        {
          return v12 == 0;
        }
      }
      else
      {
        if (v9 == v12) {
          char v14 = v13;
        }
        else {
          char v14 = 1;
        }
        if ((v14 & 1) == 0) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_250DEC000()
{
  unint64_t result = qword_269B04068;
  if (!qword_269B04068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04068);
  }
  return result;
}

unint64_t sub_250DEC054()
{
  unint64_t result = qword_269B04070;
  if (!qword_269B04070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04070);
  }
  return result;
}

void sub_250DEC0A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_250DEC110()
{
  unint64_t result = qword_269B04080;
  if (!qword_269B04080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04080);
  }
  return result;
}

uint64_t sub_250DEC164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleChangeNotification();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_250DEC1C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepingSampleChangeNotification();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_250DEC224()
{
  if (!qword_269B03878)
  {
    sub_250DA29C8();
    unint64_t v0 = sub_250E253E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03878);
    }
  }
}

unint64_t sub_250DEC280()
{
  unint64_t result = qword_269B04090;
  if (!qword_269B04090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04090);
  }
  return result;
}

uint64_t sub_250DEC2D4()
{
  return MEMORY[0x263F8D320];
}

uint64_t sub_250DEC2E0()
{
  return sub_250D91CCC(&qword_269B04098, (void (*)(uint64_t))type metadata accessor for SleepingSampleChangeNotification);
}

unint64_t sub_250DEC32C()
{
  unint64_t result = qword_269B040A0;
  if (!qword_269B040A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040A0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleChangeNotification(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_250E24B20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    char v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    *(void *)char v14 = *(void *)v15;
    v14[8] = v15[8];
  }
  return v4;
}

uint64_t destroy for SleepingSampleChangeNotification(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_250E24B20();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for SleepingSampleChangeNotification(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_250E24B20();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  char v14 = (char *)a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

void *assignWithCopy for SleepingSampleChangeNotification(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_250E24B20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for SleepingSampleChangeNotification(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_250E24B20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

void *assignWithTake for SleepingSampleChangeNotification(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_250E24B20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  char v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleChangeNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DEC7FC);
}

uint64_t sub_250DEC7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_250E24B20();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleChangeNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DEC8C0);
}

uint64_t sub_250DEC8C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250DEC968()
{
  uint64_t result = sub_250E24B20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content()
{
  return &type metadata for SleepingSampleChangeNotification.Content;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.CategoryIdentifier()
{
  return &type metadata for SleepingSampleChangeNotification.CategoryIdentifier;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.CodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.CodingKeys;
}

unsigned char *_s13HealthBalance32SleepingSampleChangeNotificationV18CategoryIdentifierOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DECB08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.CodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleChangeNotification.Content.ChangesCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DECBDCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.ChangesCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys;
}

unint64_t sub_250DECC38()
{
  unint64_t result = qword_269B040B8;
  if (!qword_269B040B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040B8);
  }
  return result;
}

unint64_t sub_250DECC90()
{
  unint64_t result = qword_269B040C0;
  if (!qword_269B040C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040C0);
  }
  return result;
}

unint64_t sub_250DECCE8()
{
  unint64_t result = qword_269B040C8;
  if (!qword_269B040C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040C8);
  }
  return result;
}

unint64_t sub_250DECD40()
{
  unint64_t result = qword_269B040D0;
  if (!qword_269B040D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040D0);
  }
  return result;
}

unint64_t sub_250DECD98()
{
  unint64_t result = qword_269B040D8;
  if (!qword_269B040D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040D8);
  }
  return result;
}

unint64_t sub_250DECDF0()
{
  unint64_t result = qword_269B040E0;
  if (!qword_269B040E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040E0);
  }
  return result;
}

unint64_t sub_250DECE48()
{
  unint64_t result = qword_269B040E8;
  if (!qword_269B040E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040E8);
  }
  return result;
}

unint64_t sub_250DECEA0()
{
  unint64_t result = qword_269B040F0;
  if (!qword_269B040F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040F0);
  }
  return result;
}

unint64_t sub_250DECEF8()
{
  unint64_t result = qword_269B040F8;
  if (!qword_269B040F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B040F8);
  }
  return result;
}

unint64_t sub_250DECF50()
{
  unint64_t result = qword_269B04100;
  if (!qword_269B04100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04100);
  }
  return result;
}

unint64_t sub_250DECFA8()
{
  unint64_t result = qword_269B04108;
  if (!qword_269B04108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04108);
  }
  return result;
}

unint64_t sub_250DED000()
{
  unint64_t result = qword_269B04110;
  if (!qword_269B04110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04110);
  }
  return result;
}

unint64_t sub_250DED058()
{
  unint64_t result = qword_269B04118;
  if (!qword_269B04118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04118);
  }
  return result;
}

uint64_t sub_250DED0AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7365676E616863 && a2 == 0xE700000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x447365676E616863 && a2 == 0xEB000000006F6D65 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F4370756D726177 && a2 == 0xEE006574656C706DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_250DED240(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void HealthBalanceOnboardingAnalyticsEvent.action.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

void HealthBalanceOnboardingAnalyticsEvent.provenance.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

void HealthBalanceOnboardingAnalyticsEvent.step.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 18);
}

unsigned char *HealthBalanceOnboardingAnalyticsEvent.__allocating_init(action:provenance:step:)(unsigned char *a1, char *a2, char *a3)
{
  unint64_t result = (unsigned char *)swift_allocObject();
  char v7 = *a2;
  char v8 = *a3;
  result[16] = *a1;
  result[17] = v7;
  result[18] = v8;
  return result;
}

unsigned char *HealthBalanceOnboardingAnalyticsEvent.init(action:provenance:step:)(unsigned char *a1, char *a2, char *a3)
{
  char v4 = *a2;
  char v5 = *a3;
  v3[16] = *a1;
  v3[17] = v4;
  v3[18] = v5;
  return v3;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 0;
}

unint64_t HealthBalanceOnboardingAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000023;
}

void HealthBalanceOnboardingAnalyticsEvent.makeUnrestrictedEventPayload(with:)(void *a1)
{
  if (objc_msgSend(a1, sel_healthDataSource))
  {
    id v4 = objc_msgSend(a1, sel_environmentDataSource);
    char v9 = v1[16];
    char v8 = v1[17];
    unsigned __int8 v7 = v1[18];
    unint64_t v5 = sub_250DEE5D8(v4, &v9, &v8, &v7);
    if (v2)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = v5;

      sub_250DED5D4(v6);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_250DED580();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_250DED580()
{
  unint64_t result = qword_269B04120;
  if (!qword_269B04120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04120);
  }
  return result;
}

unint64_t sub_250DED5D4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_250DEF8D0();
    uint64_t v2 = (void *)sub_250E25260();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v12 >= v27) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v28 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v28 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v13 = *(void *)(v28 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_36;
              }
              if (v14 >= v27) {
                break;
              }
              unint64_t v13 = *(void *)(v28 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_250DEF93C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v13 - 1) & v13;
  unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; unint64_t v11 = v10 | (i << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_250DE7834(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v39);
    *(void *)&long long v38 = v18;
    *((void *)&v38 + 1) = v17;
    v35[2] = v38;
    v36[0] = v39[0];
    v36[1] = v39[1];
    uint64_t v37 = v40;
    uint64_t v30 = v18;
    uint64_t v31 = v17;
    sub_250DE7898(v36, (uint64_t)v29);
    sub_250DEF828();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t v20 = v30;
    uint64_t v19 = v31;
    sub_250DE78B0(&v32, v34);
    sub_250DE78B0(v34, v35);
    sub_250DE78B0(v35, &v33);
    unint64_t result = sub_250DE4C30(v20, v19);
    unint64_t v21 = result;
    if (v22)
    {
      char v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *char v8 = v20;
      v8[1] = v19;
      char v9 = (_OWORD *)(v2[7] + 32 * v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      unint64_t result = (unint64_t)sub_250DE78B0(&v33, v9);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v23 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v23 = v20;
    v23[1] = v19;
    unint64_t result = (unint64_t)sub_250DE78B0(&v33, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.rawValue.getter()
{
  uint64_t result = 0x6C65636E6163;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1954047342;
      break;
    case 2:
      uint64_t result = 1885956979;
      break;
    case 3:
      uint64_t result = 0x6E4F6E727574;
      break;
    case 4:
      uint64_t result = 0x646577656976;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter()
{
  unint64_t result = 0x7974697669746341;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x79726F6765746143;
      break;
    case 2:
      unint64_t result = 0x6570795461746144;
      break;
    case 3:
      unint64_t result = 0x7373656E746946;
      break;
    case 4:
      unint64_t result = 0x684368746C616548;
      break;
    case 5:
      unint64_t result = 0x747465536F6E614ELL;
      break;
    case 6:
      unint64_t result = 0x686372616553;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x7972616D6D7553;
      break;
    case 9:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    case 0xA:
      unint64_t result = 0x736C61746956;
      break;
    case 0xB:
      unint64_t result = 0x7070416863746157;
      break;
    case 0xC:
      unint64_t result = 0x746567646957;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.rawValue.getter()
{
  uint64_t v1 = 0x6163696669746F4ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7065656C53;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656D6F636C6557;
  }
}

void HealthBalanceOnboardingAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.deinit()
{
  return v0;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingAction_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_250DEDE34(unsigned __int8 *a1, char *a2)
{
  return sub_250DB081C(*a1, *a2);
}

uint64_t sub_250DEDE40()
{
  return sub_250E254F0();
}

uint64_t sub_250DEDF14()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DEDFD0()
{
  return sub_250E254F0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingAction_optional sub_250DEE0A0(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.init(rawValue:)(*a1);
}

void sub_250DEE0AC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x6C65636E6163;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1954047342;
      goto LABEL_3;
    case 2:
      *a1 = 1885956979;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6E4F6E727574;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x646577656976;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingProvenance_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 13;
  if (v3 < 0xD) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

uint64_t sub_250DEE1A0()
{
  return sub_250DB0ACC();
}

uint64_t sub_250DEE1AC()
{
  return sub_250E254F0();
}

uint64_t sub_250DEE214()
{
  HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DEE278()
{
  return sub_250E254F0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingProvenance_optional sub_250DEE2DC(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.init(rawValue:)(*a1);
}

unint64_t sub_250DEE2E8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingStep_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

uint64_t sub_250DEE36C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_250DB09A0(*a1, *a2);
}

uint64_t sub_250DEE378()
{
  return sub_250E254F0();
}

uint64_t sub_250DEE424()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250DEE4BC()
{
  return sub_250E254F0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingStep_optional sub_250DEE564(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.init(rawValue:)(*a1);
}

void sub_250DEE570(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xED0000736E6F6974;
  uint64_t v5 = 0x6163696669746F4ELL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7065656C53;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656D6F636C6557;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_250DEE5D8(void *a1, unsigned char *a2, char *a3, unsigned __int8 *a4)
{
  char v4 = *a3;
  int v5 = *a4;
  unint64_t v6 = 0xE600000000000000;
  uint64_t v7 = 0x6C65636E6163;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v7 = 1954047342;
      break;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v7 = 1885956979;
      break;
    case 3:
      uint64_t v7 = 0x6E4F6E727574;
      break;
    case 4:
      uint64_t v7 = 0x646577656976;
      break;
    default:
      break;
  }
  uint64_t v9 = MEMORY[0x263F8D310];
  uint64_t v10 = MEMORY[0x263F8D338];
  uint64_t v65 = MEMORY[0x263F8D310];
  uint64_t v66 = MEMORY[0x263F8D338];
  *(void *)&long long v64 = v7;
  *((void *)&v64 + 1) = v6;
  sub_250DE7898(&v64, (uint64_t)v62);
  unint64_t v11 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v11;
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  sub_250E1EC74(*v15, v15[1], 0x6E6F69746361, 0xE600000000000000, isUniquelyReferenced_nonNull_native, &v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  unint64_t v17 = v61;
  unint64_t v67 = v61;
  swift_bridgeObjectRelease();
  LOBYTE(v64) = v4;
  unint64_t v18 = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  uint64_t v65 = v9;
  uint64_t v66 = v10;
  *(void *)&long long v64 = v18;
  *((void *)&v64 + 1) = v19;
  sub_250DE7898(&v64, (uint64_t)v62);
  LOBYTE(v11) = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v17;
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
  MEMORY[0x270FA5388](v20);
  char v22 = (uint64_t *)((char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  sub_250E1EC74(*v22, v22[1], 0x6E616E65766F7270, 0xEA00000000006563, v11, &v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  unint64_t v24 = v61;
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v5 == 1)
    {
      unint64_t v25 = 0xED0000736E6F6974;
      uint64_t v26 = 0x6163696669746F4ELL;
    }
    else
    {
      unint64_t v25 = 0xE500000000000000;
      uint64_t v26 = 0x7065656C53;
    }
  }
  else
  {
    unint64_t v25 = 0xE700000000000000;
    uint64_t v26 = 0x656D6F636C6557;
  }
  uint64_t v65 = v9;
  uint64_t v66 = v10;
  *(void *)&long long v64 = v26;
  *((void *)&v64 + 1) = v25;
  sub_250DE7898(&v64, (uint64_t)v62);
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v24;
  uint64_t v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (uint64_t *)((char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  sub_250E1EC74(*v30, v30[1], 1885697139, 0xE400000000000000, v27, &v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  unint64_t v32 = v61;
  unint64_t v67 = v61;
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_250E24C60();
  uint64_t v35 = v34;
  uint64_t v36 = v9;
  uint64_t v37 = a1;
  id v38 = objc_msgSend(a1, sel_activePairedDeviceProductType);
  if (v38)
  {
    uint64_t v39 = v10;
    uint64_t v40 = v38;
    uint64_t v41 = sub_250E24C60();
    uint64_t v42 = v36;
    uint64_t v44 = v43;

    uint64_t v65 = v42;
    uint64_t v66 = v39;
    *(void *)&long long v64 = v41;
    *((void *)&v64 + 1) = v44;
    sub_250DE7898(&v64, (uint64_t)v62);
    LOBYTE(v44) = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v61 = v32;
    unint64_t v67 = 0x8000000000000000;
    uint64_t v45 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
    MEMORY[0x270FA5388](v45);
    uint64_t v47 = (char *)&v60 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v48 + 16))(v47);
    sub_250E1F054((uint64_t)v47, v33, v35, v44, &v61, v42, MEMORY[0x263F8D338]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    unint64_t v67 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_250E1E97C(v33, v35, (uint64_t)&v64);
    swift_bridgeObjectRelease();
    sub_250DEF774((uint64_t)&v64);
  }
  uint64_t v49 = sub_250E24C60();
  uint64_t v51 = v50;
  unsigned __int8 v52 = objc_msgSend(v37, sel_isImproveHealthAndActivityEnabled);
  uint64_t v65 = MEMORY[0x263F8D4F8];
  uint64_t v66 = MEMORY[0x263F8D510];
  LOBYTE(v64) = v52;
  sub_250DE7898(&v64, (uint64_t)v62);
  unint64_t v53 = v67;
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v53;
  unint64_t v67 = 0x8000000000000000;
  uint64_t v55 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
  MEMORY[0x270FA5388](v55);
  uint64_t v57 = (char *)&v60 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v58 + 16))(v57);
  sub_250E1EE64(*v57, v49, v51, v54, &v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  unint64_t v67 = v61;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v67;
}

id sub_250DEED00(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_250E24710();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = (void *)MEMORY[0x263F8EE80];
  id v8 = objc_msgSend(a1, sel_currentDate);
  sub_250E246E0();

  uint64_t v9 = (void *)sub_250E246C0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)&long long v42 = 0;
  id v10 = objc_msgSend(a2, sel_ageWithCurrentDate_error_, v9, &v42);

  id v11 = (id)v42;
  if (v10)
  {
    id v12 = objc_msgSend(v10, sel_integerValue);

    uint64_t v13 = MEMORY[0x263F8D6C8];
    uint64_t v14 = MEMORY[0x263F8D6E8];
    uint64_t v43 = MEMORY[0x263F8D6C8];
    uint64_t v44 = MEMORY[0x263F8D6E8];
    *(void *)&long long v42 = v12;
    sub_250DE7898(&v42, (uint64_t)v40);
    int64_t v15 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v38 = v15;
    uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x270FA5388](v17);
    uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    sub_250E1F054((uint64_t)v19, 6645601, 0xE300000000000000, isUniquelyReferenced_nonNull_native, &v38, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = v11;
    char v22 = (void *)sub_250E24560();

    swift_willThrow();
    sub_250E1E97C(6645601, 0xE300000000000000, (uint64_t)&v42);
    sub_250DEF774((uint64_t)&v42);
  }
  v40[0] = 0;
  id v23 = objc_msgSend(a2, sel_biologicalSexWithError_, v40);
  if (v23)
  {
    unint64_t v24 = v23;
    id v25 = v40[0];
    id v26 = (id)HKAnalyticsPropertyValueForBiologicalSex();

    uint64_t v27 = sub_250E24C60();
    uint64_t v29 = v28;

    uint64_t v43 = MEMORY[0x263F8D310];
    uint64_t v44 = MEMORY[0x263F8D338];
    *(void *)&long long v42 = v27;
    *((void *)&v42 + 1) = v29;
    sub_250DE7898(&v42, (uint64_t)v40);
    uint64_t v30 = v39;
    LOBYTE(v26) = swift_isUniquelyReferenced_nonNull_native();
    id v38 = v30;
    uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x270FA5388](v31);
    uint64_t v33 = (uint64_t *)((char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v34 + 16))(v33);
    sub_250E1EC74(*v33, v33[1], 0x6369676F6C6F6962, 0xED00007865536C61, (char)v26, &v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    id v35 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v35 = v40[0];
    swift_bridgeObjectRelease();
    sub_250E24560();

    swift_willThrow();
  }
  return v35;
}

void sub_250DEF1A0(void *a1)
{
  id v3 = objc_msgSend(a1, sel_healthDataSource);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(a1, sel_environmentDataSource);
    id v6 = sub_250DEED00(v5, v4);
    if (v1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v7 = (uint64_t)v6;

      sub_250DED5D4(v7);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_250DED580();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_250DEF284()
{
  unint64_t result = qword_269B04128;
  if (!qword_269B04128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04128);
  }
  return result;
}

unint64_t sub_250DEF2DC()
{
  unint64_t result = qword_269B04130;
  if (!qword_269B04130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04130);
  }
  return result;
}

unint64_t sub_250DEF334()
{
  unint64_t result = qword_269B04138;
  if (!qword_269B04138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04138);
  }
  return result;
}

uint64_t type metadata accessor for HealthBalanceOnboardingAnalyticsEvent()
{
  return self;
}

uint64_t method lookup function for HealthBalanceOnboardingAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthBalanceOnboardingAnalyticsEvent);
}

uint64_t dispatch thunk of HealthBalanceOnboardingAnalyticsEvent.__allocating_init(action:provenance:step:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DEF4A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction;
}

uint64_t getEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DEF638);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance;
}

unsigned char *storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DEF73CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep;
}

uint64_t sub_250DEF774(uint64_t a1)
{
  sub_250DEF7D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_250DEF7D0()
{
  if (!qword_269B041A0)
  {
    sub_250DEF828();
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B041A0);
    }
  }
}

unint64_t sub_250DEF828()
{
  unint64_t result = qword_269B03FA8;
  if (!qword_269B03FA8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B03FA8);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_250DEF8D0()
{
  if (!qword_269B03FB0)
  {
    unint64_t v0 = sub_250E25270();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03FB0);
    }
  }
}

uint64_t sub_250DEF93C()
{
  return swift_release();
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.__allocating_init(needsOnboarding:source:)(char a1, char *a2)
{
  uint64_t result = swift_allocObject();
  char v5 = *a2;
  *(unsigned char *)(result + 16) = a1;
  *(unsigned char *)(result + 17) = v5;
  return result;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.init(needsOnboarding:source:)(char a1, char *a2)
{
  char v3 = *a2;
  *(unsigned char *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 17) = v3;
  return v2;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 0;
}

unint64_t HealthBalanceAppLaunchAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000022;
}

void HealthBalanceAppLaunchAnalyticsEvent.makeUnrestrictedEventPayload(with:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_environmentDataSource);
  char v4 = *(unsigned char *)(v1 + 16);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 17);
  unint64_t v5 = sub_250DEFCE8(v3, v4, &v6);

  if (!v2)
  {
    sub_250DED5D4(v5);
    swift_bridgeObjectRelease();
  }
}

void HealthBalanceAppLaunchAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.deinit()
{
  return v0;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_250DEFCE8(void *a1, char a2, unsigned __int8 *a3)
{
  uint64_t v5 = *a3;
  unint64_t v6 = MEMORY[0x263F8EE80];
  unint64_t v54 = MEMORY[0x263F8EE80];
  id v7 = objc_msgSend(a1, sel_activePairedDeviceProductType);
  uint64_t v8 = MEMORY[0x263F8D310];
  uint64_t v9 = MEMORY[0x263F8D338];
  if (v7)
  {
    id v10 = v7;
    uint64_t v11 = sub_250E24C60();
    uint64_t v13 = v12;

    uint64_t v52 = v8;
    uint64_t v53 = v9;
    *(void *)&long long v51 = v11;
    *((void *)&v51 + 1) = v13;
    sub_250DE7898(&v51, (uint64_t)v49);
    LOBYTE(v13) = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v6;
    unint64_t v54 = 0x8000000000000000;
    uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
    MEMORY[0x270FA5388](v14);
    uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v16);
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    sub_250E1F054((uint64_t)v16, 0xD000000000000016, 0x8000000250E2DA50, v13, &v48, v8, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    unint64_t v20 = v48;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = MEMORY[0x263F8D310];
    sub_250E1E97C(0xD000000000000016, 0x8000000250E2DA50, (uint64_t)&v51);
    sub_250DEF774((uint64_t)&v51);
    unint64_t v20 = v54;
  }
  unsigned __int8 v21 = objc_msgSend(a1, sel_isImproveHealthAndActivityEnabled);
  uint64_t v22 = MEMORY[0x263F8D4F8];
  uint64_t v23 = MEMORY[0x263F8D510];
  uint64_t v52 = MEMORY[0x263F8D4F8];
  uint64_t v53 = MEMORY[0x263F8D510];
  LOBYTE(v51) = v21;
  sub_250DE7898(&v51, (uint64_t)v49);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v48 = v20;
  uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  sub_250E1EE64(*v27, 0xD000000000000021, 0x8000000250E2DA70, isUniquelyReferenced_nonNull_native, &v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  unint64_t v29 = v48;
  swift_bridgeObjectRelease();
  uint64_t v52 = v22;
  uint64_t v53 = v23;
  LOBYTE(v51) = (a2 & 1) == 0;
  sub_250DE7898(&v51, (uint64_t)v49);
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v48 = v29;
  uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v34 + 16))(v33);
  sub_250E1EE64(*v33, 0x72616F626E4F7369, 0xEB00000000646564, v30, &v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  unint64_t v35 = v48;
  unint64_t v54 = v48;
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xE800000000000000;
  unint64_t v37 = 0x7974697669746361;
  switch(v5)
  {
    case 1:
      unint64_t v36 = 0xE700000000000000;
      unint64_t v37 = 0x7373656E746966;
      goto LABEL_17;
    case 2:
      unint64_t v37 = 0x704168746C616568;
      goto LABEL_10;
    case 3:
      unint64_t v37 = 0xD000000000000015;
      id v38 = "healthAppNotification";
      goto LABEL_16;
    case 4:
      unint64_t v36 = 0xEC00000073676E69;
      unint64_t v37 = 0x747465536F6E616ELL;
      goto LABEL_17;
    case 5:
      unint64_t v37 = 0x65656C536F6E616ELL;
LABEL_10:
      unint64_t v36 = 0xE900000000000070;
      goto LABEL_17;
    case 6:
      unint64_t v37 = 0x7070416863746177;
      goto LABEL_17;
    case 7:
      unint64_t v37 = 0xD000000000000010;
      id v38 = "smartStackWidget";
      goto LABEL_16;
    case 8:
      unint64_t v37 = 0xD000000000000019;
      id v38 = "watchLongLookNotification";
LABEL_16:
      unint64_t v36 = (unint64_t)(v38 - 32) | 0x8000000000000000;
      goto LABEL_17;
    case 9:
      unint64_t v36 = 0xE600000000000000;
      unint64_t v37 = 0x746567646977;
      goto LABEL_17;
    case 10:
      sub_250E1E97C(0x6E616E65766F7270, 0xEA00000000006563, (uint64_t)&v51);
      sub_250DEF774((uint64_t)&v51);
      return v54;
    default:
LABEL_17:
      uint64_t v52 = v19;
      uint64_t v40 = MEMORY[0x263F8D338];
      uint64_t v53 = MEMORY[0x263F8D338];
      *(void *)&long long v51 = v37;
      *((void *)&v51 + 1) = v36;
      sub_250DE7898(&v51, (uint64_t)v49);
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v48 = v35;
      uint64_t v42 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
      MEMORY[0x270FA5388](v42);
      uint64_t v44 = (char *)&v47 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v45 + 16))(v44);
      sub_250E1F054((uint64_t)v44, 0x6E616E65766F7270, 0xEA00000000006563, v41, &v48, v19, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      unint64_t v39 = v48;
      swift_bridgeObjectRelease();
      return v39;
  }
}

id sub_250DF037C(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_250E24710();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v39 = (void *)MEMORY[0x263F8EE80];
  id v8 = objc_msgSend(a1, sel_currentDate);
  sub_250E246E0();

  uint64_t v9 = (void *)sub_250E246C0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)&long long v42 = 0;
  id v10 = objc_msgSend(a2, sel_ageWithCurrentDate_error_, v9, &v42);

  id v11 = (id)v42;
  if (v10)
  {
    id v12 = objc_msgSend(v10, sel_integerValue);

    uint64_t v13 = MEMORY[0x263F8D6C8];
    uint64_t v14 = MEMORY[0x263F8D6E8];
    uint64_t v43 = MEMORY[0x263F8D6C8];
    uint64_t v44 = MEMORY[0x263F8D6E8];
    *(void *)&long long v42 = v12;
    sub_250DE7898(&v42, (uint64_t)v40);
    uint64_t v15 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v38 = v15;
    uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x270FA5388](v17);
    uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    sub_250E1F054((uint64_t)v19, 6645601, 0xE300000000000000, isUniquelyReferenced_nonNull_native, &v38, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned __int8 v21 = v11;
    uint64_t v22 = (void *)sub_250E24560();

    swift_willThrow();
    sub_250E1E97C(6645601, 0xE300000000000000, (uint64_t)&v42);
    sub_250DEF774((uint64_t)&v42);
  }
  v40[0] = 0;
  id v23 = objc_msgSend(a2, sel_biologicalSexWithError_, v40);
  if (v23)
  {
    unint64_t v24 = v23;
    id v25 = v40[0];
    id v26 = (id)HKAnalyticsPropertyValueForBiologicalSex();

    uint64_t v27 = sub_250E24C60();
    uint64_t v29 = v28;

    uint64_t v43 = MEMORY[0x263F8D310];
    uint64_t v44 = MEMORY[0x263F8D338];
    *(void *)&long long v42 = v27;
    *((void *)&v42 + 1) = v29;
    sub_250DE7898(&v42, (uint64_t)v40);
    char v30 = v39;
    LOBYTE(v26) = swift_isUniquelyReferenced_nonNull_native();
    id v38 = v30;
    uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x270FA5388](v31);
    uint64_t v33 = (uint64_t *)((char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v34 + 16))(v33);
    sub_250E1EC74(*v33, v33[1], 0x6369676F6C6F6962, 0xED00007865536C61, (char)v26, &v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    id v35 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v35 = v40[0];
    swift_bridgeObjectRelease();
    sub_250E24560();

    swift_willThrow();
  }
  return v35;
}

void sub_250DF081C(void *a1)
{
  id v3 = objc_msgSend(a1, sel_healthDataSource);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(a1, sel_environmentDataSource);
    id v6 = sub_250DF037C(v5, v4);
    if (v1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v7 = (uint64_t)v6;

      sub_250DED5D4(v7);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_250DED580();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t type metadata accessor for HealthBalanceAppLaunchAnalyticsEvent()
{
  return self;
}

uint64_t method lookup function for HealthBalanceAppLaunchAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthBalanceAppLaunchAnalyticsEvent);
}

uint64_t dispatch thunk of HealthBalanceAppLaunchAnalyticsEvent.__allocating_init(needsOnboarding:source:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_250DF094C()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_minimum);
  uint64_t v3 = sub_250E21E90();

  objc_msgSend(v1, sel_isMinimumInclusive, 0, 0xE000000000000000);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  objc_msgSend(v1, sel_isMaximumInclusive);
  sub_250E24CE0();
  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v1, sel_maximum);
  sub_250E21E90();

  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

id static HealthBalanceUtilities.bundle.getter()
{
  uint64_t v0 = (void *)sub_250E24C30();
  id v1 = objc_msgSend(self, sel_bundleWithIdentifier_, v0);

  return v1;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleName.getter()
{
  return 0xD000000000000011;
}

unint64_t static HealthBalanceUtilities.balanceAppPluginBundleName.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleNameAndExtension.getter()
{
  return 0xD000000000000015;
}

unint64_t static HealthBalanceUtilities.balanceAppPluginBundleNameAndExtension.getter()
{
  return 0xD000000000000029;
}

unint64_t static HealthBalanceUtilities.healthAppBundleIdentifier.getter()
{
  return 0xD000000000000010;
}

unint64_t static HealthBalanceUtilities.balanceSevenDaysWidgetKind.getter()
{
  return 0xD000000000000011;
}

unint64_t static HealthBalanceUtilities.balanceOneDayWidgetKind.getter()
{
  return 0xD000000000000017;
}

void *static HealthBalanceUtilities.balanceWidgetKinds.getter()
{
  return &unk_2701E6F10;
}

unint64_t static HealthBalanceUtilities.balanceWidgetBundleIdentifier.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceWidgetBundleIdentifier.getter()
{
  return 0xD00000000000003CLL;
}

ValueMetadata *type metadata accessor for HealthBalanceUtilities()
{
  return &type metadata for HealthBalanceUtilities;
}

Swift::String __swiftcall HKQuantityRange.formattedValue(for:unit:)(HealthBalance::SleepingSampleDataType a1, HKUnit unit)
{
  uint64_t v3 = v2;
  char v5 = *(unsigned char *)a1;
  id v6 = objc_msgSend(v2, sel_minimum);
  LOBYTE(v16) = v5;
  unsigned long long v7 = (unsigned __int128)HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v16, unit);

  objc_msgSend(v3, sel_isMinimumInclusive, 0, 0xE000000000000000);
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  objc_msgSend(v3, sel_isMaximumInclusive);
  sub_250E24CE0();
  unsigned long long v16 = v7;
  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v10 = (Swift::String)v16;
  object = v10._object;
  uint64_t countAndFlagsBits = v10._countAndFlagsBits;
  id v11 = objc_msgSend(v3, sel_maximum);
  LOBYTE(v16) = v5;
  HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v16, unit);

  unsigned long long v16 = __PAIR128__((unint64_t)object, countAndFlagsBits);
  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v14 = (Swift::String)v16;
  uint64_t v13 = v14._object;
  uint64_t v12 = v14._countAndFlagsBits;
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t Optional<A>.formattedValue(for:unit:)(char *a1, HKUnit a2, void *a3)
{
  if (!a3) {
    return 0x9380E29380E2;
  }
  char v7 = *a1;
  id v4 = a3;
  uint64_t countAndFlagsBits = HKQuantityRange.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v7, a2)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t static Calendar.gregorianPacific.getter()
{
  sub_250DF19CC(0, &qword_269B041A8, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v0 - 8);
  id v2 = (char *)&v9 - v1;
  uint64_t v3 = sub_250E24800();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F07740], v3);
  sub_250E24810();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_250E248C0();
  uint64_t v7 = sub_250E248E0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v2, 1, v7);
  if (result != 1) {
    return sub_250E248A0();
  }
  __break(1u);
  return result;
}

uint64_t Calendar.date(matching:onMorningIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250DF19CC(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)v13 - v7;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(a1, a2, (uint64_t)v13 - v7);
  uint64_t v9 = sub_250E24710();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  }
  sub_250DF1908((uint64_t)v8);
  _s5ErrorOMa();
  sub_250DF1F98(&qword_269B041B0, (void (*)(uint64_t))_s5ErrorOMa);
  swift_allocError();
  uint64_t *v11 = a1;
  v11[1] = a2;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t Calendar.date(onMorningIndex:matchingHour:matchingMinute:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v52 = a1;
  uint64_t v60 = a3;
  uint64_t v4 = sub_250E24830();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v54 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_250E24840();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  unint64_t v48 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_250E24820();
  uint64_t v46 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DF19CC(0, &qword_269B041A8, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v45 = (char *)&v42 - v9;
  sub_250DF19CC(0, &qword_26B207F60, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = sub_250E24510();
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DF19CC(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = sub_250E24710();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = self;
  uint64_t v24 = sub_250E24AE0();
  uint64_t v58 = v3;
  id v25 = (void *)sub_250E24850();
  id v26 = objc_msgSend(v23, sel_hk_sleepDayStartForMorningIndex_calendar_, v24, v25);

  sub_250E246E0();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v27((uint64_t)v18, 0, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_250DF1908((uint64_t)v18);
    return v27(v60, 1, 1, v19);
  }
  else
  {
    uint64_t v43 = v22;
    uint64_t v44 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    uint64_t v29 = sub_250E248B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v12, 1, 1, v29);
    uint64_t v30 = sub_250E248E0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v45, 1, 1, v30);
    long long v42 = v15;
    sub_250E24500();
    uint64_t v32 = v46;
    uint64_t v31 = v47;
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v47, *MEMORY[0x263F07758], v59);
    uint64_t v33 = v53;
    uint64_t v34 = v48;
    uint64_t v35 = v55;
    (*(void (**)(char *, void, uint64_t))(v53 + 104))(v48, *MEMORY[0x263F07800], v55);
    uint64_t v36 = *MEMORY[0x263F077E0];
    uint64_t v37 = v56;
    id v38 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 104);
    unint64_t v39 = v54;
    uint64_t v52 = v19;
    uint64_t v40 = v57;
    v38(v54, v36, v57);
    uint64_t v41 = v43;
    sub_250E24880();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v59);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v42, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v41, v52);
  }
}

uint64_t sub_250DF1908(uint64_t a1)
{
  sub_250DF19CC(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s5ErrorOMa()
{
  uint64_t result = qword_269B041C0;
  if (!qword_269B041C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250DF19CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_250E24FB0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t Calendar.dateInterval(start:end:onMorningIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a3;
  sub_250DF19CC(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = sub_250E24710();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v45 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v44 = (char *)&v43 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v47 = (char *)&v43 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v52 = (char *)&v43 - v21;
  uint64_t v48 = a1;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v22, a2, (uint64_t)v12);
  uint64_t v51 = v14;
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v25 = v13;
  if (v24(v12, 1, v13) == 1)
  {
    sub_250DF1908((uint64_t)v12);
    _s5ErrorOMa();
    sub_250DF1F98(&qword_269B041B0, (void (*)(uint64_t))_s5ErrorOMa);
    swift_allocError();
    *id v26 = v48;
    v26[1] = v23;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v28(v52, v12, v25);
    uint64_t v29 = v49;
    Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v50, v49, (uint64_t)v10);
    if (v24(v10, 1, v25) == 1)
    {
      sub_250DF1908((uint64_t)v10);
      _s5ErrorOMa();
      sub_250DF1F98(&qword_269B041B0, (void (*)(uint64_t))_s5ErrorOMa);
      swift_allocError();
      *uint64_t v30 = v50;
      v30[1] = v29;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v52, v25);
    }
    else
    {
      uint64_t v31 = v51;
      uint64_t v32 = v47;
      v28(v47, v10, v25);
      sub_250DF1F98((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
      if (sub_250E24B90())
      {
        _s5ErrorOMa();
        sub_250DF1F98(&qword_269B041B0, (void (*)(uint64_t))_s5ErrorOMa);
        swift_allocError();
        uint64_t v34 = v33;
        sub_250DF1FE0();
        uint64_t v36 = v34 + *(int *)(v35 + 48);
        uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
        v37(v34, v52, v25);
        v37(v36, v32, v25);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        id v38 = *(void (**)(char *, uint64_t))(v31 + 8);
        v38(v32, v25);
        return ((uint64_t (*)(char *, uint64_t))v38)(v52, v25);
      }
      else
      {
        uint64_t v39 = v31;
        uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
        uint64_t v41 = v52;
        v40(v44, v52, v25);
        v40(v45, v32, v25);
        sub_250E243C0();
        long long v42 = *(void (**)(char *, uint64_t))(v39 + 8);
        v42(v32, v25);
        return ((uint64_t (*)(char *, uint64_t))v42)(v41, v25);
      }
    }
  }
}

uint64_t sub_250DF1F98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250DF1FE0()
{
  if (!qword_269B041B8)
  {
    sub_250E24710();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B041B8);
    }
  }
}

uint64_t *sub_250DF2048(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_250E24710();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_250DF1FE0();
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (uint64_t *)((char *)a2 + *(int *)(v10 + 48)), v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_250DF2170(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = sub_250E24710();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    sub_250DF1FE0();
    uint64_t v5 = a1 + *(int *)(v4 + 48);
    return v6(v5, v3);
  }
  return result;
}

char *sub_250DF2224(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_250E24710();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    sub_250DF1FE0();
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_250DF2308(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250DF23FC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_250E24710();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      sub_250DF1FE0();
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_250DF23FC(uint64_t a1)
{
  uint64_t v2 = _s5ErrorOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_250DF2458(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_250E24710();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    sub_250DF1FE0();
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_250DF253C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250DF23FC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_250E24710();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      sub_250DF1FE0();
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_250DF2630()
{
  uint64_t result = sub_250E24710();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_250E2AAF8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

HealthBalance::TrainingLoadBand __swiftcall TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(Swift::Double fractionalDifferenceFromChronicBaseline)
{
  uint64_t v3 = v1;
  if (qword_269B03780 != -1) {
LABEL_30:
  }
    HealthBalance::TrainingLoadBand result = swift_once();
  int64_t v4 = 0;
  uint64_t v5 = 1 << *((unsigned char *)off_269B041D0 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = (char *)off_269B041D0 + 64;
  unint64_t v8 = v6 & *((void *)off_269B041D0 + 8);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_6:
    uint64_t v12 = (double *)(*((void *)off_269B041D0 + 7) + 16 * v11);
    if (*v12 <= fractionalDifferenceFromChronicBaseline && v12[1] > fractionalDifferenceFromChronicBaseline)
    {
      char v17 = *(unsigned char *)(*((void *)off_269B041D0 + 6) + v11);
      goto LABEL_27;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v14 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)&v7[8 * v14];
  ++v4;
  if (v15) {
    goto LABEL_25;
  }
  int64_t v4 = v14 + 1;
  if (v14 + 1 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)&v7[8 * v4];
  if (v15) {
    goto LABEL_25;
  }
  int64_t v4 = v14 + 2;
  if (v14 + 2 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)&v7[8 * v4];
  if (v15)
  {
LABEL_25:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 3;
  if (v16 < v9)
  {
    unint64_t v15 = *(void *)&v7[8 * v16];
    if (!v15)
    {
      while (1)
      {
        int64_t v4 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v4 >= v9) {
          goto LABEL_26;
        }
        unint64_t v15 = *(void *)&v7[8 * v4];
        ++v16;
        if (v15) {
          goto LABEL_25;
        }
      }
    }
    int64_t v4 = v16;
    goto LABEL_25;
  }
LABEL_26:
  char v17 = 4 * (fractionalDifferenceFromChronicBaseline > 0.0);
LABEL_27:
  *uint64_t v3 = v17;
  return result;
}

HealthBalance::TrainingLoadBand __swiftcall TrainingLoadBand.init(value:baseline:)(Swift::Double value, Swift::Double baseline)
{
  uint64_t v3 = v2;
  if (baseline == 0.0)
  {
    if (qword_26B207980 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_250E24950();
    __swift_project_value_buffer(v4, (uint64_t)qword_26B207A58);
    uint64_t v5 = sub_250E24930();
    os_log_type_t v6 = sub_250E24F40();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134217984;
      sub_250E24FC0();
      _os_log_impl(&dword_250D84000, v5, v6, "Tried to create a band with a baseline of 0 and value of %f", v7, 0xCu);
      MEMORY[0x25338A890](v7, -1, -1);
    }

    HealthBalance::TrainingLoadBand result = TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(0.0);
    char v9 = v10;
  }
  else
  {
    HealthBalance::TrainingLoadBand result = TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)((value - baseline) / baseline);
    char v9 = v11;
  }
  *uint64_t v3 = v9;
  return result;
}

unint64_t TrainingLoadBand.valueRangeForBand(baseline:)(uint64_t a1, char a2)
{
  unsigned __int8 v5 = *v2;
  if (qword_269B03780 != -1) {
    swift_once();
  }
  os_log_type_t v6 = off_269B041D0;
  if (!*((void *)off_269B041D0 + 2)) {
    goto LABEL_10;
  }
  unint64_t result = sub_250DE4B30(v5);
  if ((v8 & 1) == 0) {
    goto LABEL_10;
  }
  char v9 = (double *)(v6[7] + 16 * result);
  double v10 = 0.0;
  double v11 = *v9 * *(double *)&a1 + *(double *)&a1;
  double v12 = 1.0;
  if (a2)
  {
    double v11 = *v9 + 0.0;
  }
  else
  {
    double v12 = *(double *)&a1;
    double v10 = *(double *)&a1;
  }
  if (v11 > v10 + v12 * v9[1])
  {
    __break(1u);
LABEL_10:
    unint64_t result = sub_250E25220();
    __break(1u);
  }
  return result;
}

uint64_t TrainingLoadBand.id.getter()
{
  return *v0;
}

uint64_t TrainingLoadBand.rawValue.getter()
{
  return *v0;
}

void *sub_250DF2AD0()
{
  unint64_t result = (void *)sub_250DE6208((uint64_t)&unk_2701E66E0);
  off_269B041D0 = result;
  return result;
}

HealthBalance::TrainingLoadBand_optional __swiftcall TrainingLoadBand.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  *unint64_t v1 = v2;
  return (HealthBalance::TrainingLoadBand_optional)rawValue;
}

void *static TrainingLoadBand.allCases.getter()
{
  return &unk_2701E6F50;
}

HealthBalance::TrainingLoadBand_optional sub_250DF2B18(Swift::Int *a1)
{
  return TrainingLoadBand.init(rawValue:)(*a1);
}

void sub_250DF2B20(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_250DF2B2C()
{
  return sub_250E24D90();
}

uint64_t sub_250DF2B8C()
{
  return sub_250E24D80();
}

void sub_250DF2BDC(void *a1@<X8>)
{
  *a1 = &unk_2701E6F78;
}

unint64_t sub_250DF2BF0()
{
  unint64_t result = qword_269B041D8;
  if (!qword_269B041D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B041D8);
  }
  return result;
}

unint64_t sub_250DF2C48()
{
  unint64_t result = qword_269B041E0;
  if (!qword_269B041E0)
  {
    sub_250DF2CA0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B041E0);
  }
  return result;
}

void sub_250DF2CA0()
{
  if (!qword_269B041E8)
  {
    unint64_t v0 = sub_250E24E30();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B041E8);
    }
  }
}

uint64_t sub_250DF2CF8()
{
  return MEMORY[0x263F8D6D8];
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadBand(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DF2DD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadBand()
{
  return &type metadata for TrainingLoadBand;
}

unint64_t sub_250DF2E08()
{
  unint64_t result = qword_269B041F0;
  if (!qword_269B041F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B041F0);
  }
  return result;
}

HealthBalance::TrainingLoadQueryType_optional __swiftcall TrainingLoadQueryType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (HealthBalance::TrainingLoadQueryType_optional)rawValue;
}

uint64_t TrainingLoadQueryType.rawValue.getter()
{
  return *v0;
}

HealthBalance::TrainingLoadQueryType_optional sub_250DF2E78(Swift::Int *a1)
{
  return TrainingLoadQueryType.init(rawValue:)(*a1);
}

uint64_t sub_250DF2E80()
{
  return sub_250E24D90();
}

uint64_t sub_250DF2EE0()
{
  return sub_250E24D80();
}

uint64_t sub_250DF2F30@<X0>(uint64_t a1@<X8>)
{
  return sub_250DF3074(&OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar, &qword_26B207F60, MEMORY[0x263F07920], a1);
}

uint64_t sub_250DF2F58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void *a7)
{
  sub_250DF3FA8(0, a5, a6, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int64_t v14 = (char *)&v17 - v13;
  sub_250D8A3F4(a1, (uint64_t)&v17 - v13, a5, a6);
  uint64_t v15 = *a2 + *a7;
  swift_beginAccess();
  sub_250D8A5D8((uint64_t)v14, v15, a5, a6);
  return swift_endAccess();
}

uint64_t sub_250DF304C@<X0>(uint64_t a1@<X8>)
{
  return sub_250DF3074(&OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, a1);
}

uint64_t sub_250DF3074@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = v4 + *a1;
  swift_beginAccess();
  return sub_250D8A3F4(v8, a4, a2, a3);
}

uint64_t sub_250DF30DC@<X0>(unsigned char *a1@<X8>)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id TrainingLoadDaySummaryQueryConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id TrainingLoadDaySummaryQueryConfiguration.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  uint64_t v2 = sub_250E248B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  int v3 = &v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  sub_250D97944();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested] = 3;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for TrainingLoadDaySummaryQueryConfiguration()
{
  uint64_t result = qword_26B207490;
  if (!qword_26B207490) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *sub_250DF3380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250DF3FA8(0, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v22[-v7];
  sub_250DF3FA8(0, &qword_26B207F60, MEMORY[0x263F07920], v5);
  MEMORY[0x270FA5388](v9 - 8);
  double v11 = &v22[-v10];
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v25.receiver = v2;
  v25.super_class = DaySummaryQueryConfiguration;
  objc_msgSendSuper2(&v25, sel_copyWithZone_, a1);
  sub_250E25030();
  swift_unknownObjectRelease();
  sub_250D8B520((uint64_t)v26, (uint64_t)v24);
  if (!swift_dynamicCast()) {
    return sub_250DE78B0(v26, (_OWORD *)a2);
  }
  uint64_t v13 = v23;
  uint64_t v14 = (uint64_t)&v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x263F07920];
  sub_250D8A3F4(v14, (uint64_t)v11, &qword_26B207F60, MEMORY[0x263F07920]);
  uint64_t v16 = v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_250D8A5D8((uint64_t)v11, v16, &qword_26B207F60, v15);
  swift_endAccess();
  uint64_t v17 = (uint64_t)&v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  swift_beginAccess();
  sub_250D8A3F4(v17, (uint64_t)v8, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
  uint64_t v18 = v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_250D8A5D8((uint64_t)v8, v18, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
  swift_endAccess();
  uint64_t v19 = &v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
  swift_beginAccess();
  LOBYTE(v18) = *v19;
  uint64_t v20 = (unsigned char *)(v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  swift_beginAccess();
  unsigned char *v20 = v18;
  *(void *)(a2 + 24) = DaySummaryQueryConfiguration;
  *(void *)a2 = v13;
  return (_OWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

id TrainingLoadDaySummaryQueryConfiguration.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

uint64_t TrainingLoadDaySummaryQueryConfiguration.init(coder:)(void *a1)
{
  sub_250D88890();
  uint64_t v69 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v71 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v66 = (char *)&v59 - v6;
  sub_250D97944();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v67 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250DF3FA8(0, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v68 = (uint64_t)&v59 - v13;
  sub_250DF3FA8(0, &qword_26B207F60, MEMORY[0x263F07920], v11);
  MEMORY[0x270FA5388](v14 - 8);
  id v73 = (char *)&v59 - v15;
  uint64_t v16 = sub_250E24B20();
  uint64_t v76 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v74 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v59 - v19;
  uint64_t v21 = &v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  uint64_t v22 = sub_250E248B0();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v72 = v8;
  uint64_t v70 = v9 + 56;
  v24(&v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange], 1, 1, v8);
  v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested] = 3;
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v80.receiver = v1;
  v80.super_class = DaySummaryQueryConfiguration;
  id v26 = objc_msgSendSuper2(&v80, sel_initWithCoder_, a1);
  if (!v26)
  {

    return 0;
  }
  id v27 = v26;
  long long v64 = (void (*)(uint64_t, void, uint64_t, uint64_t))v24;
  uint64_t v65 = v23;
  uint64_t v28 = (char *)v26;
  uint64_t v29 = (void *)sub_250E24C30();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v29);

  id v75 = v20;
  sub_250E24AD0();
  uint64_t v30 = (void *)sub_250E24C30();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v30);

  sub_250DF3FA8(0, &qword_26B206E10, (uint64_t (*)(uint64_t))sub_250DF400C, MEMORY[0x263F8E0F8]);
  uint64_t v31 = a1;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_250E264E0;
  *(void *)(v32 + 32) = sub_250DF404C();
  sub_250E24F80();
  swift_bridgeObjectRelease();
  if (!v79)
  {

    sub_250DF4630((uint64_t)v78, (uint64_t (*)(void))sub_250DA286C);
LABEL_12:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v16);

    return 0;
  }
  id v63 = v31;
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_12;
  }
  id v60 = v27;
  uint64_t v33 = (uint64_t)v73;
  id v62 = v77;
  sub_250E24870();
  v65((char *)v33, 0, 1, v22);
  unint64_t v61 = v28;
  uint64_t v34 = (uint64_t)&v28[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  sub_250D8A5D8(v33, v34, &qword_26B207F60, MEMORY[0x263F07920]);
  swift_endAccess();
  uint64_t v36 = v74;
  uint64_t v35 = v75;
  sub_250E24A90();
  sub_250D94A28((unint64_t *)&qword_26B208148);
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v38 = v69;
    uint64_t v39 = v66;
    uint64_t v40 = &v66[*(int *)(v69 + 48)];
    uint64_t v41 = v76;
    long long v42 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
    v42(v66, v35, v16);
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    id v73 = v40;
    v43(v40, v36, v16);
    uint64_t v44 = v71;
    uint64_t v45 = &v71[*(int *)(v38 + 48)];
    v42(v71, v39, v16);
    v42(v45, v40, v16);
    uint64_t v46 = (uint64_t)v67;
    v43(v67, v44, v16);
    uint64_t v47 = v16;
    uint64_t v48 = *(void (**)(char *, uint64_t))(v76 + 8);
    v48(v45, v47);
    uint64_t v49 = &v44[*(int *)(v38 + 48)];
    v43(v44, v39, v47);
    v43(v49, v73, v47);
    uint64_t v50 = v72;
    v43((char *)(v46 + *(int *)(v72 + 36)), v49, v47);
    v48(v44, v47);
    uint64_t v51 = v68;
    sub_250D8DFC0(v46, v68);
    v64(v51, 0, 1, v50);
    uint64_t v52 = v61;
    uint64_t v53 = (uint64_t)&v61[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_250D8A5D8(v51, v53, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
    swift_endAccess();
    unint64_t v54 = (void *)sub_250E24C30();
    id v55 = v63;
    id v56 = objc_msgSend(v63, sel_decodeIntegerForKey_, v54);

    v48(v75, v47);
    if ((unint64_t)v56 >= 3) {
      char v57 = 3;
    }
    else {
      char v57 = (char)v56;
    }
    uint64_t v58 = &v52[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
    swift_beginAccess();
    char *v58 = v57;
    return (uint64_t)v60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_250DF3FA8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_250DF400C()
{
  unint64_t result = qword_26B206E18[0];
  if (!qword_26B206E18[0])
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, qword_26B206E18);
  }
  return result;
}

unint64_t sub_250DF404C()
{
  unint64_t result = qword_26B206D90;
  if (!qword_26B206D90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B206D90);
  }
  return result;
}

void sub_250DF40B4(void *a1)
{
  uint64_t v38 = sub_250E24B20();
  uint64_t v3 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_250DF3FA8(0, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, MEMORY[0x263F8D8F0]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v11 = (char *)&v37 - v10;
  uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x263F07920];
  sub_250DF3FA8(0, &qword_26B207F60, MEMORY[0x263F07920], v5);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v37 - v14;
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v41.receiver = v1;
  v41.super_class = DaySummaryQueryConfiguration;
  uint64_t v17 = a1;
  objc_msgSendSuper2(&v41, sel_encodeWithCoder_, a1);
  uint64_t v39 = v1;
  uint64_t v18 = (uint64_t)&v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  sub_250D8A3F4(v18, (uint64_t)v15, &qword_26B207F60, v12);
  uint64_t v19 = sub_250E248B0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) != 1)
  {
    uint64_t v21 = sub_250E24850();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
  }
  uint64_t v22 = (void *)sub_250E24C30();
  uint64_t v23 = v17;
  objc_msgSend(v17, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  uint64_t v24 = (uint64_t)&v39[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  swift_beginAccess();
  sub_250D8A3F4(v24, (uint64_t)v11, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
  sub_250D97944();
  uint64_t v26 = v25;
  id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48);
  if (v27(v11, 1, v25) == 1)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v28 = v37;
  uint64_t v29 = v38;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v37, v11, v38);
  sub_250DF4630((uint64_t)v11, (uint64_t (*)(void))sub_250D97944);
  uint64_t v30 = sub_250E24AE0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v29);
  uint64_t v31 = (void *)sub_250E24C30();
  objc_msgSend(v23, sel_encodeInteger_forKey_, v30, v31);

  sub_250D8A3F4(v24, (uint64_t)v9, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944);
  if (v27(v9, 1, v26) == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_250D94A28(&qword_26B2075B0);
  sub_250E24FF0();
  uint64_t v32 = v40;
  sub_250DF4630((uint64_t)v9, (uint64_t (*)(void))sub_250D97944);
  uint64_t v33 = (void *)sub_250E24C30();
  objc_msgSend(v23, sel_encodeInteger_forKey_, v32, v33);

  uint64_t v34 = &v39[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
  swift_beginAccess();
  uint64_t v35 = *v34;
  if (v35 != 3)
  {
    uint64_t v36 = (void *)sub_250E24C30();
    objc_msgSend(v23, sel_encodeInteger_forKey_, v35, v36);

    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_250DF4630(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id TrainingLoadDaySummaryQueryConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_250DF4734()
{
  unint64_t result = qword_269B041F8;
  if (!qword_269B041F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B041F8);
  }
  return result;
}

uint64_t sub_250DF4788@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar, &qword_26B207F60, MEMORY[0x263F07920], a2);
}

uint64_t sub_250DF47B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_250DF2F58(a1, a2, a3, a4, &qword_26B207F60, MEMORY[0x263F07920], &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar);
}

uint64_t sub_250DF47EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, a2);
}

uint64_t keypath_getTm@<X0>(void *a1@<X0>, void *a2@<X3>, unint64_t *a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a1 + *a2;
  swift_beginAccess();
  return sub_250D8A3F4(v8, a5, a3, a4);
}

uint64_t sub_250DF4880(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_250DF2F58(a1, a2, a3, a4, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange);
}

uint64_t sub_250DF48BC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_250DF4910(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for TrainingLoadQueryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DF4A2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadQueryType()
{
  return &type metadata for TrainingLoadQueryType;
}

uint64_t sub_250DF4ADC()
{
  return type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
}

void sub_250DF4AE4()
{
  sub_250DF3FA8(319, &qword_26B207F60, MEMORY[0x263F07920], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_250DF3FA8(319, (unint64_t *)&qword_26B2075C8, (uint64_t (*)(uint64_t))sub_250D97944, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for TrainingLoadDaySummaryQueryConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TrainingLoadDaySummaryQueryConfiguration);
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.gregorianCalendar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.morningIndexRange.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.typeOfDataRequested.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t sub_250DF4CC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_250DF3FA8(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_250DF4D38()
{
  unint64_t result = qword_269B04200;
  if (!qword_269B04200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04200);
  }
  return result;
}

uint64_t static HKFeatureAvailabilityContext.sleepingHeartRateAnalysis.getter()
{
  return sub_250E24C30();
}

uint64_t WatchFeatureCapabilities.rawValue.getter()
{
  return *(void *)v0;
}

HealthBalance::WatchFeatureCapabilities __swiftcall WatchFeatureCapabilities.init(rawValue:)(HealthBalance::WatchFeatureCapabilities rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static WatchFeatureCapabilities.bloodOxygen.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static WatchFeatureCapabilities.wristTemperature.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static WatchFeatureCapabilities.allCapabilities.getter(uint64_t *a1@<X8>)
{
  uint64_t v1 = unk_2701E6FC8;
  if ((unk_2701E6FC8 & ~qword_2701E6FC0) == 0) {
    uint64_t v1 = 0;
  }
  *a1 = v1 | qword_2701E6FC0;
}

unint64_t sub_250DF4DF4()
{
  unint64_t result = qword_269B04208;
  if (!qword_269B04208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04208);
  }
  return result;
}

unint64_t sub_250DF4E4C()
{
  unint64_t result = qword_269B04210;
  if (!qword_269B04210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04210);
  }
  return result;
}

unint64_t sub_250DF4EA4()
{
  unint64_t result = qword_269B04218;
  if (!qword_269B04218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04218);
  }
  return result;
}

unint64_t sub_250DF4EFC()
{
  unint64_t result = qword_269B04220;
  if (!qword_269B04220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04220);
  }
  return result;
}

uint64_t SleepingSampleAggregateDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SleepingSampleAggregateDaySummary.heartRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_250D90F48(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.bloodOxygen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_250D90F48(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.respiratoryRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_250D90F48(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_250D90F48(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.timeAsleep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_250D90F48(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.init(morningIndex:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a7, a1, v14);
  uint64_t v15 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  sub_250DF5228(a2, a7 + v15[5]);
  sub_250DF5228(a3, a7 + v15[6]);
  sub_250DF5228(a4, a7 + v15[7]);
  sub_250DF5228(a5, a7 + v15[8]);
  uint64_t v16 = a7 + v15[9];

  return sub_250DF5228(a6, v16);
}

uint64_t sub_250DF5228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleAggregate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t SleepingSampleAggregateDaySummary.description.getter()
{
  return 0xD000000000000022;
}

uint64_t SleepingSampleAggregateDaySummary.latestSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v40 = sub_250E24710();
  uint64_t v2 = *(void *)(v40 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v40);
  uint64_t v38 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v37 = (char *)&v36 - v5;
  uint64_t v6 = sub_250E243F0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v36 - v13;
  sub_250DC4CF4(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SleepingSampleAggregateDaySummary();
  uint64_t v20 = v1 + *(int *)(v19 + 36);
  uint64_t v21 = *(int *)(type metadata accessor for SleepingSampleAggregate() + 28);
  uint64_t v22 = v1 + *(int *)(v19 + 32) + v21;
  uint64_t v23 = (uint64_t)&v18[*(int *)(v16 + 56)];
  sub_250D90F48(v20 + v21, (uint64_t)v18, (uint64_t (*)(void))sub_250D927FC);
  sub_250D90F48(v22, v23, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v16) = v24(v18, 1, v6);
  int v25 = v24((char *)v23, 1, v6);
  if (v16 == 1)
  {
    if (v25 == 1)
    {
      uint64_t v26 = 1;
      uint64_t v28 = v40;
      uint64_t v27 = v41;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v27, v26, 1, v28);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v14, v23, v6);
LABEL_7:
    uint64_t v27 = v41;
    sub_250E243B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    uint64_t v26 = 0;
    uint64_t v28 = v40;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v27, v26, 1, v28);
  }
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  if (v25 == 1)
  {
    v29(v14, v18, v6);
    goto LABEL_7;
  }
  v29(v12, v18, v6);
  v29(v39, (char *)v23, v6);
  uint64_t v30 = v37;
  sub_250E243B0();
  uint64_t v31 = v38;
  sub_250E243B0();
  sub_250DFD974((unint64_t *)&qword_26B2077D8, MEMORY[0x263F07490]);
  uint64_t v28 = v40;
  if (sub_250E24BA0()) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = v30;
  }
  uint64_t v27 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v41, v32, v28);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v2 + 8);
  v33(v31, v28);
  v33(v30, v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v39, v6);
  v34(v12, v6);
  uint64_t v26 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v27, v26, 1, v28);
}

uint64_t SleepingSampleAggregateDaySummary.hash(into:)()
{
  uint64_t v120 = sub_250E24710();
  uint64_t v126 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v124 = (char *)&v107 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v119 = (uint64_t)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v117 = (uint64_t)&v107 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v114 = (uint64_t)&v107 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v111 = (uint64_t)&v107 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v108 = (uint64_t)&v107 - v11;
  uint64_t v139 = sub_250E243F0();
  uint64_t v125 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v123 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v118 = (uint64_t)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v115 = (uint64_t)&v107 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v112 = (uint64_t)&v107 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v109 = (uint64_t)&v107 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v107 - v22;
  sub_250D922D0(0);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v116 = (uint64_t)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v113 = (uint64_t)&v107 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v110 = (uint64_t)&v107 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v107 = (uint64_t)&v107 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)&v107 - v38;
  uint64_t v40 = sub_250E24B20();
  uint64_t v41 = sub_250DFD974(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  uint64_t v135 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  uint64_t v136 = v41;
  uint64_t v42 = v135[5];
  uint64_t v137 = v40;
  uint64_t v138 = v0;
  uint64_t v43 = v0 + v42;
  sub_250E24B70();
  uint64_t v44 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v45 = sub_250E248B0();
  uint64_t v133 = sub_250DFD974(&qword_269B03900, MEMORY[0x263F07920]);
  uint64_t v134 = v45;
  sub_250E24B70();
  sub_250D90F48(v43 + v44[6], (uint64_t)v39, (uint64_t (*)(void))sub_250D91EB4);
  uint64_t v131 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v132 = v26 + 48;
  int v46 = v131(v39, 1, v25);
  uint64_t v122 = v26;
  if (v46 == 1)
  {
    sub_250E254D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v39, v25);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  sub_250D90F48(v43 + v44[7], (uint64_t)v23, (uint64_t (*)(void))sub_250D927FC);
  uint64_t v47 = v125;
  uint64_t v48 = v139;
  uint64_t v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
  uint64_t v130 = v125 + 48;
  if (v129(v23, 1, v139) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v49 = v123;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v123, v23, v48);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  }
  uint64_t v121 = v28;
  uint64_t v50 = v108;
  sub_250D90F48(v43 + v44[8], v108, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v51 = v126;
  uint64_t v52 = v120;
  uint64_t v127 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  uint64_t v128 = v126 + 48;
  if (v127(v50, 1, v120) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v53 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v124, v50, v52);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v52);
  }
  sub_250E254C0();
  uint64_t v54 = v138 + v135[6];
  sub_250E24B70();
  sub_250E24B70();
  uint64_t v55 = v107;
  sub_250D90F48(v54 + v44[6], v107, (uint64_t (*)(void))sub_250D91EB4);
  if (v131((char *)v55, 1, v25) == 1)
  {
    sub_250E254D0();
    uint64_t v56 = v122;
  }
  else
  {
    char v57 = v121;
    uint64_t v56 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v121, v55, v25);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v25);
  }
  uint64_t v58 = v139;
  uint64_t v59 = v109;
  sub_250D90F48(v54 + v44[7], v109, (uint64_t (*)(void))sub_250D927FC);
  if (v129((char *)v59, 1, v58) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v60 = v125;
    unint64_t v61 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v123, v59, v139);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    uint64_t v62 = v60;
    uint64_t v56 = v122;
    id v63 = v61;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v139);
  }
  uint64_t v64 = v111;
  sub_250D90F48(v54 + v44[8], v111, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v65 = v52;
  if (v127(v64, 1, v52) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v66 = v126;
    unint64_t v67 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v124, v64, v65);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    uint64_t v68 = v66;
    uint64_t v52 = v65;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v65);
  }
  sub_250E254C0();
  uint64_t v69 = v138 + v135[7];
  sub_250E24B70();
  sub_250E24B70();
  uint64_t v70 = v110;
  sub_250D90F48(v69 + v44[6], v110, (uint64_t (*)(void))sub_250D91EB4);
  if (v131((char *)v70, 1, v25) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v71 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v121, v70, v25);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    uint64_t v72 = v71;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v72, v25);
  }
  uint64_t v73 = v112;
  sub_250D90F48(v69 + v44[7], v112, (uint64_t (*)(void))sub_250D927FC);
  if (v129((char *)v73, 1, v58) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v74 = v125;
    id v75 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v123, v73, v139);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    uint64_t v76 = v74;
    uint64_t v56 = v122;
    unint64_t v77 = v75;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v139);
  }
  uint64_t v78 = v114;
  sub_250D90F48(v69 + v44[8], v114, (uint64_t (*)(void))sub_250D94D70);
  if (v127(v78, 1, v52) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v79 = v126;
    objc_super v80 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v124, v78, v65);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    uint64_t v81 = v79;
    uint64_t v52 = v65;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v65);
  }
  sub_250E254C0();
  uint64_t v82 = v138 + v135[8];
  sub_250E24B70();
  sub_250E24B70();
  uint64_t v83 = v113;
  sub_250D90F48(v82 + v44[6], v113, (uint64_t (*)(void))sub_250D91EB4);
  if (v131((char *)v83, 1, v25) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v84 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v121, v83, v25);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    uint64_t v85 = v84;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v85, v25);
  }
  uint64_t v86 = v115;
  sub_250D90F48(v82 + v44[7], v115, (uint64_t (*)(void))sub_250D927FC);
  if (v129((char *)v86, 1, v58) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v87 = v125;
    uint64_t v88 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v123, v86, v139);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    uint64_t v89 = v87;
    uint64_t v56 = v122;
    uint64_t v90 = v88;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v139);
  }
  uint64_t v91 = v117;
  sub_250D90F48(v82 + v44[8], v117, (uint64_t (*)(void))sub_250D94D70);
  if (v127(v91, 1, v52) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v92 = v126;
    uint64_t v93 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v124, v91, v65);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    uint64_t v94 = v92;
    uint64_t v52 = v65;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v65);
  }
  sub_250E254C0();
  uint64_t v95 = v138 + v135[9];
  sub_250E24B70();
  sub_250E24B70();
  uint64_t v96 = v116;
  sub_250D90F48(v95 + v44[6], v116, (uint64_t (*)(void))sub_250D91EB4);
  if (v131((char *)v96, 1, v25) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v97 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v121, v96, v25);
    sub_250E254D0();
    sub_250DA4AFC();
    sub_250E24B70();
    uint64_t v98 = v97;
    uint64_t v58 = v139;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v98, v25);
  }
  uint64_t v99 = v118;
  sub_250D90F48(v95 + v44[7], v118, (uint64_t (*)(void))sub_250D927FC);
  if (v129((char *)v99, 1, v58) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v100 = v125;
    uint64_t v101 = v58;
    id v102 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v123, v99, v101);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03908, MEMORY[0x263F062D0]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v101);
  }
  uint64_t v103 = v119;
  sub_250D90F48(v95 + v44[8], v119, (uint64_t (*)(void))sub_250D94D70);
  if (v127(v103, 1, v52) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v104 = v126;
    uint64_t v105 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v124, v103, v52);
    sub_250E254D0();
    sub_250DFD974(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v52);
  }
  return sub_250E254C0();
}

unint64_t sub_250DF6D0C()
{
  unint64_t result = 0x49676E696E726F6DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7461527472616568;
      break;
    case 2:
      unint64_t result = 0x79784F646F6F6C62;
      break;
    case 3:
      unint64_t result = 0x7461726970736572;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x656C7341656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_250DF6DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250DFD68C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DF6E24(uint64_t a1)
{
  unint64_t v2 = sub_250DF7AAC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DF6E60(uint64_t a1)
{
  unint64_t v2 = sub_250DF7AAC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleAggregateDaySummary.encode(to:)(void *a1)
{
  sub_250DF7B00(0, &qword_269B04228, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DF7AAC();
  sub_250E25510();
  char v15 = 0;
  sub_250E24B20();
  sub_250DFD974(&qword_26B206D70, MEMORY[0x263F090E8]);
  sub_250E253B0();
  if (!v1)
  {
    type metadata accessor for SleepingSampleAggregateDaySummary();
    char v14 = 1;
    type metadata accessor for SleepingSampleAggregate();
    sub_250DFD974(&qword_26B206C90, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregate);
    sub_250E253B0();
    char v13 = 2;
    sub_250E253B0();
    char v12 = 3;
    sub_250E253B0();
    char v11 = 4;
    sub_250E253B0();
    char v10 = 5;
    sub_250E253B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SleepingSampleAggregateDaySummary.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleAggregateDaySummary.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v36 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v3 = MEMORY[0x270FA5388](v36);
  uint64_t v33 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v34 = (uint64_t)v31 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v35 = (char *)v31 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v38 = (char *)v31 - v10;
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)v31 - v11;
  uint64_t v13 = sub_250E24B20();
  uint64_t v37 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v39 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DF7B00(0, &qword_269B04238, MEMORY[0x263F8E040]);
  uint64_t v42 = v15;
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v31 - v16;
  uint64_t v18 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250DF7AAC();
  uint64_t v41 = v17;
  uint64_t v21 = (uint64_t)v43;
  sub_250E25500();
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v22 = (uint64_t)v12;
  uint64_t v24 = v37;
  uint64_t v23 = (uint64_t)v38;
  uint64_t v43 = a1;
  char v49 = 0;
  sub_250DFD974(&qword_26B2075E8, MEMORY[0x263F090E8]);
  uint64_t v25 = v39;
  sub_250E25330();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  uint64_t v39 = (char *)v13;
  v26(v20, v25, v13);
  char v48 = 1;
  sub_250DFD974(&qword_26B207800, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregate);
  sub_250E25330();
  sub_250DF5228(v22, (uint64_t)&v20[v18[5]]);
  char v47 = 2;
  uint64_t v27 = (uint64_t)v20;
  v31[1] = 0;
  sub_250E25330();
  sub_250DF5228(v23, (uint64_t)&v20[v18[6]]);
  char v46 = 3;
  uint64_t v28 = (uint64_t)v35;
  sub_250E25330();
  sub_250DF5228(v28, v27 + v18[7]);
  char v45 = 4;
  sub_250E25330();
  sub_250DF5228(v34, v27 + v18[8]);
  char v44 = 5;
  uint64_t v30 = (uint64_t)v33;
  sub_250E25330();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  sub_250DF5228(v30, v27 + v18[9]);
  sub_250D90F48(v27, v32, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregateDaySummary);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return sub_250DF7B64(v27, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregateDaySummary);
}

uint64_t sub_250DF78F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAggregateDaySummary.init(from:)(a1, a2);
}

uint64_t sub_250DF7908(void *a1)
{
  return SleepingSampleAggregateDaySummary.encode(to:)(a1);
}

uint64_t sub_250DF7920()
{
  return sub_250E254F0();
}

uint64_t sub_250DF7964()
{
  return sub_250E254F0();
}

BOOL _s13HealthBalance33SleepingSampleAggregateDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250E24B20();
  sub_250DFD974(&qword_26B2075B0, MEMORY[0x263F090E8]);
  sub_250E24FF0();
  BOOL v5 = !v7
    && (uint64_t v4 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary(),
        static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[5], a2 + v4[5]))
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[6], a2 + v4[6])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[7], a2 + v4[7])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[8], a2 + v4[8])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[9], a2 + v4[9]);
  return v5;
}

unint64_t sub_250DF7AAC()
{
  unint64_t result = qword_269B04230;
  if (!qword_269B04230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04230);
  }
  return result;
}

void sub_250DF7B00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250DF7AAC();
    unint64_t v7 = a3(a1, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250DF7B64(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250DF7BC4(void *a1)
{
  a1[1] = sub_250DFD974(&qword_26B207EF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
  a1[2] = sub_250DFD974(&qword_26B207ED8, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
  uint64_t result = sub_250DFD974(&qword_26B207EE0, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_250DF7C70()
{
  return sub_250DFD974(&qword_26B207EE8, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleAggregateDaySummary(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v106 = a3;
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v108 = v7;
    uint64_t v109 = a2;
    uint64_t v11 = &a2[v9];
    uint64_t v107 = v8;
    v8(&a1[v9], &a2[v9], v7);
    char v12 = (int *)type metadata accessor for SleepingSampleAggregate();
    uint64_t v13 = v12[5];
    uint64_t v14 = &v10[v13];
    uint64_t v15 = &v11[v13];
    uint64_t v16 = sub_250E248B0();
    uint64_t v104 = *(void (**)(char *, char *))(*(void *)(v16 - 8) + 16);
    uint64_t v105 = v16;
    v104(v14, v15);
    uint64_t v17 = v12[6];
    uint64_t v18 = &v10[v17];
    uint64_t v19 = &v11[v17];
    sub_250D922D0(0);
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v20 - 8);
    uint64_t v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v99 = v22;
    if (v103(v19, 1, v20))
    {
      sub_250D91EB4();
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v18, v19, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
    uint64_t v25 = v12[7];
    uint64_t v26 = &v10[v25];
    uint64_t v27 = &v11[v25];
    uint64_t v28 = sub_250E243F0();
    uint64_t v29 = *(void *)(v28 - 8);
    id v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    uint64_t v98 = v29;
    if (v102(v27, 1, v28))
    {
      sub_250D927FC(0);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v31 = v12[8];
    uint64_t v32 = &v10[v31];
    uint64_t v33 = &v11[v31];
    uint64_t v34 = sub_250E24710();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    uint64_t v100 = v35;
    if (v101(v33, 1, v34))
    {
      sub_250D94D70(0);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v10[v12[9]] = v11[v12[9]];
    uint64_t v37 = v106[6];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = &v109[v37];
    v107(&a1[v37], &v109[v37], v108);
    ((void (*)(char *, char *, uint64_t))v104)(&v38[v12[5]], &v39[v12[5]], v105);
    uint64_t v40 = v12[6];
    uint64_t v41 = &v38[v40];
    uint64_t v42 = &v39[v40];
    if (v103(&v39[v40], 1, v21))
    {
      sub_250D91EB4();
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v41, v42, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v41, 0, 1, v21);
    }
    uint64_t v44 = v12[7];
    char v45 = &v38[v44];
    char v46 = &v39[v44];
    if (v102(&v39[v44], 1, v28))
    {
      sub_250D927FC(0);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v45, v46, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v45, 0, 1, v28);
    }
    uint64_t v48 = v12[8];
    char v49 = &v38[v48];
    uint64_t v50 = &v39[v48];
    if (v101(&v39[v48], 1, v34))
    {
      sub_250D94D70(0);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v49, v50, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v49, 0, 1, v34);
    }
    v38[v12[9]] = v39[v12[9]];
    uint64_t v52 = v106[7];
    uint64_t v53 = &a1[v52];
    uint64_t v54 = &v109[v52];
    v107(&a1[v52], &v109[v52], v108);
    ((void (*)(char *, char *, uint64_t))v104)(&v53[v12[5]], &v54[v12[5]], v105);
    uint64_t v55 = v12[6];
    uint64_t v56 = &v53[v55];
    char v57 = &v54[v55];
    if (v103(&v54[v55], 1, v21))
    {
      sub_250D91EB4();
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v56, v57, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v56, 0, 1, v21);
    }
    uint64_t v59 = v12[7];
    uint64_t v60 = &v53[v59];
    unint64_t v61 = &v54[v59];
    if (v102(&v54[v59], 1, v28))
    {
      sub_250D927FC(0);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v60, v61, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v60, 0, 1, v28);
    }
    uint64_t v63 = v12[8];
    uint64_t v64 = &v53[v63];
    uint64_t v65 = &v54[v63];
    if (v101(&v54[v63], 1, v34))
    {
      sub_250D94D70(0);
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v64, v65, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v64, 0, 1, v34);
    }
    v53[v12[9]] = v54[v12[9]];
    uint64_t v67 = v106[8];
    uint64_t v68 = &a1[v67];
    uint64_t v69 = &v109[v67];
    v107(&a1[v67], &v109[v67], v108);
    ((void (*)(char *, char *, uint64_t))v104)(&v68[v12[5]], &v69[v12[5]], v105);
    uint64_t v70 = v12[6];
    uint64_t v71 = &v68[v70];
    uint64_t v72 = &v69[v70];
    if (v103(&v69[v70], 1, v21))
    {
      sub_250D91EB4();
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v71, v72, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v71, 0, 1, v21);
    }
    uint64_t v74 = v12[7];
    id v75 = &v68[v74];
    uint64_t v76 = &v69[v74];
    if (v102(&v69[v74], 1, v28))
    {
      sub_250D927FC(0);
      memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v75, v76, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v75, 0, 1, v28);
    }
    uint64_t v78 = v12[8];
    uint64_t v79 = &v68[v78];
    objc_super v80 = &v69[v78];
    if (v101(&v69[v78], 1, v34))
    {
      sub_250D94D70(0);
      memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v79, v80, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v79, 0, 1, v34);
    }
    v68[v12[9]] = v69[v12[9]];
    uint64_t v82 = v106[9];
    uint64_t v83 = &a1[v82];
    uint64_t v84 = &v109[v82];
    v107(&a1[v82], &v109[v82], v108);
    ((void (*)(char *, char *, uint64_t))v104)(&v83[v12[5]], &v84[v12[5]], v105);
    uint64_t v85 = v12[6];
    uint64_t v86 = &v83[v85];
    uint64_t v87 = &v84[v85];
    if (v103(&v84[v85], 1, v21))
    {
      sub_250D91EB4();
      memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v86, v87, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v86, 0, 1, v21);
    }
    uint64_t v89 = v12[7];
    uint64_t v90 = &v83[v89];
    uint64_t v91 = &v84[v89];
    if (v102(&v84[v89], 1, v28))
    {
      sub_250D927FC(0);
      memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v90, v91, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v90, 0, 1, v28);
    }
    uint64_t v93 = v12[8];
    uint64_t v94 = &v83[v93];
    uint64_t v95 = &v84[v93];
    if (v101(&v84[v93], 1, v34))
    {
      sub_250D94D70(0);
      memcpy(v94, v95, *(void *)(*(void *)(v96 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v94, v95, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v94, 0, 1, v34);
    }
    v83[v12[9]] = v84[v12[9]];
  }
  return a1;
}

uint64_t destroy for SleepingSampleAggregateDaySummary(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_250E24B20();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v43 = a2;
  uint64_t v6 = a1 + a2[5];
  uint64_t v42 = v5;
  v5(v6, v4);
  uint64_t v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v8 = v6 + v7[5];
  uint64_t v9 = sub_250E248B0();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v41(v8, v9);
  uint64_t v10 = v6 + v7[6];
  sub_250D922D0(0);
  uint64_t v12 = v11;
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (!v40(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v10, v12);
  }
  uint64_t v13 = v6 + v7[7];
  uint64_t v14 = sub_250E243F0();
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  if (!v39(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v13, v14);
  }
  uint64_t v15 = v6 + v7[8];
  uint64_t v16 = sub_250E24710();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (!v38(v15, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v15, v16);
  }
  uint64_t v17 = a1 + v43[6];
  v42(v17, v4);
  v41(v17 + v7[5], v9);
  uint64_t v18 = v17 + v7[6];
  if (!v40(v18, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v18, v12);
  }
  uint64_t v19 = v17 + v7[7];
  if (!v39(v19, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v19, v14);
  }
  uint64_t v20 = v17 + v7[8];
  if (!v38(v20, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v20, v16);
  }
  uint64_t v21 = a1 + v43[7];
  v42(v21, v4);
  v41(v21 + v7[5], v9);
  uint64_t v22 = v21 + v7[6];
  if (!v40(v22, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v22, v12);
  }
  uint64_t v23 = v21 + v7[7];
  if (!v39(v23, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v23, v14);
  }
  uint64_t v24 = v21 + v7[8];
  if (!v38(v24, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v24, v16);
  }
  uint64_t v25 = a1 + v43[8];
  v42(v25, v4);
  v41(v25 + v7[5], v9);
  uint64_t v26 = v25 + v7[6];
  if (!v40(v26, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v26, v12);
  }
  uint64_t v27 = v25 + v7[7];
  if (!v39(v27, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v27, v14);
  }
  uint64_t v28 = v25 + v7[8];
  if (!v38(v28, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v28, v16);
  }
  uint64_t v29 = a1 + v43[9];
  v42(v29, v4);
  v41(v29 + v7[5], v9);
  uint64_t v30 = v29 + v7[6];
  if (!v40(v30, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v12);
  }
  uint64_t v31 = v29 + v7[7];
  if (!v39(v31, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v31, v14);
  }
  uint64_t v32 = v29 + v7[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v32, 1, v16);
  if (!result)
  {
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
    return v34(v32, v16);
  }
  return result;
}

uint64_t initializeWithCopy for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v106 = a3;
  uint64_t v107 = a2;
  uint64_t v8 = a3[5];
  uint64_t v108 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v105 = v7;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = sub_250E248B0();
  uint64_t v100 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  uint64_t v103 = v15;
  v100(v13, v14);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v9 + v16);
  uint64_t v18 = (const void *)(v10 + v16);
  sub_250D922D0(0);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  uint64_t v104 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v98 = v21;
  if (v104(v18, 1, v19))
  {
    sub_250D91EB4();
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v17, v18, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  uint64_t v23 = v11[7];
  uint64_t v24 = (void *)(v9 + v23);
  uint64_t v25 = (const void *)(v10 + v23);
  uint64_t v26 = sub_250E243F0();
  uint64_t v27 = *(void *)(v26 - 8);
  id v102 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v97 = v27;
  if (v102(v25, 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v11[8];
  uint64_t v30 = (void *)(v9 + v29);
  uint64_t v31 = (const void *)(v10 + v29);
  uint64_t v32 = sub_250E24710();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v99 = v33;
  if (v101(v31, 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v35 = v106[6];
  uint64_t v36 = v108 + v35;
  uint64_t v37 = v107 + v35;
  v105(v108 + v35, v107 + v35, v6);
  uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v36 + v11[5], v37 + v11[5], v103);
  uint64_t v39 = v11[6];
  uint64_t v40 = (void *)(v36 + v39);
  uint64_t v41 = (const void *)(v37 + v39);
  if (v104((const void *)(v37 + v39), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v40, v41, v20);
    uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v40, 0, 1, v20);
  }
  uint64_t v43 = v11[7];
  uint64_t v44 = (void *)(v36 + v43);
  char v45 = (const void *)(v37 + v43);
  if (v102((const void *)(v37 + v43), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v44, v45, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v44, 0, 1, v26);
  }
  uint64_t v47 = v11[8];
  uint64_t v48 = (void *)(v36 + v47);
  char v49 = (const void *)(v37 + v47);
  if (v101((const void *)(v37 + v47), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v48, v49, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v48, 0, 1, v32);
  }
  *(unsigned char *)(v36 + v11[9]) = *(unsigned char *)(v37 + v11[9]);
  uint64_t v51 = v106[7];
  uint64_t v52 = v108 + v51;
  uint64_t v53 = v107 + v51;
  v105(v108 + v51, v107 + v51, v6);
  v38(v52 + v11[5], v53 + v11[5], v103);
  uint64_t v54 = v11[6];
  uint64_t v55 = (void *)(v52 + v54);
  uint64_t v56 = (const void *)(v53 + v54);
  if (v104((const void *)(v53 + v54), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v55, v56, v20);
    uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v55, 0, 1, v20);
  }
  uint64_t v58 = v11[7];
  uint64_t v59 = (void *)(v52 + v58);
  uint64_t v60 = (const void *)(v53 + v58);
  if (v102((const void *)(v53 + v58), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v59, v60, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v59, 0, 1, v26);
  }
  uint64_t v62 = v11[8];
  uint64_t v63 = (void *)(v52 + v62);
  uint64_t v64 = (const void *)(v53 + v62);
  if (v101((const void *)(v53 + v62), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v63, v64, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v63, 0, 1, v32);
  }
  *(unsigned char *)(v52 + v11[9]) = *(unsigned char *)(v53 + v11[9]);
  uint64_t v66 = v106[8];
  uint64_t v67 = v108 + v66;
  uint64_t v68 = v107 + v66;
  v105(v108 + v66, v107 + v66, v6);
  v38(v67 + v11[5], v68 + v11[5], v103);
  uint64_t v69 = v11[6];
  uint64_t v70 = (void *)(v67 + v69);
  uint64_t v71 = (const void *)(v68 + v69);
  if (v104((const void *)(v68 + v69), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v70, v71, v20);
    uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v70, 0, 1, v20);
  }
  uint64_t v73 = v11[7];
  uint64_t v74 = (void *)(v67 + v73);
  id v75 = (const void *)(v68 + v73);
  if (v102((const void *)(v68 + v73), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v74, v75, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v74, 0, 1, v26);
  }
  uint64_t v77 = v11[8];
  uint64_t v78 = (void *)(v67 + v77);
  uint64_t v79 = (const void *)(v68 + v77);
  if (v101((const void *)(v68 + v77), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v78, v79, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v78, 0, 1, v32);
  }
  *(unsigned char *)(v67 + v11[9]) = *(unsigned char *)(v68 + v11[9]);
  uint64_t v81 = v106[9];
  uint64_t v82 = v108 + v81;
  uint64_t v83 = v107 + v81;
  v105(v108 + v81, v107 + v81, v6);
  v38(v82 + v11[5], v83 + v11[5], v103);
  uint64_t v84 = v11[6];
  uint64_t v85 = (void *)(v82 + v84);
  uint64_t v86 = (const void *)(v83 + v84);
  if (v104((const void *)(v83 + v84), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v85, v86, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v20);
  }
  uint64_t v88 = v11[7];
  uint64_t v89 = (void *)(v82 + v88);
  uint64_t v90 = (const void *)(v83 + v88);
  if (v102((const void *)(v83 + v88), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v89, v90, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v89, 0, 1, v26);
  }
  uint64_t v92 = v11[8];
  uint64_t v93 = (void *)(v82 + v92);
  uint64_t v94 = (const void *)(v83 + v92);
  if (v101((const void *)(v83 + v92), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v93, v94, *(void *)(*(void *)(v95 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v93, v94, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v93, 0, 1, v32);
  }
  *(unsigned char *)(v82 + v11[9]) = *(unsigned char *)(v83 + v11[9]);
  return v108;
}

uint64_t assignWithCopy for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v140 = a3;
  uint64_t v141 = a2;
  uint64_t v8 = a3[5];
  uint64_t v142 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v136 = v6;
  uint64_t v139 = v7;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = sub_250E248B0();
  uint64_t v137 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 24);
  uint64_t v138 = v15;
  v137(v13, v14);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v9 + v16);
  uint64_t v18 = (void *)(v10 + v16);
  sub_250D922D0(0);
  uint64_t v20 = v19;
  uint64_t v132 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v132 + 48);
  int v22 = v21(v17, 1, v19);
  uint64_t v143 = v20;
  uint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  int v23 = v21(v18, 1, v20);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v132 + 16))(v17, v18, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v17, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v17, v20);
LABEL_6:
    sub_250D91EB4();
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v132 + 24))(v17, v18, v20);
LABEL_7:
  uint64_t v25 = v11[7];
  uint64_t v26 = (void *)(v9 + v25);
  uint64_t v27 = (void *)(v10 + v25);
  uint64_t v28 = sub_250E243F0();
  uint64_t v131 = *(void *)(v28 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v131 + 48);
  int v30 = v29(v26, 1, v28);
  uint64_t v134 = v29;
  int v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 16))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v26, v28);
LABEL_12:
    sub_250D927FC(0);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 24))(v26, v27, v28);
LABEL_13:
  uint64_t v33 = v11[8];
  uint64_t v34 = (void *)(v9 + v33);
  uint64_t v35 = (void *)(v10 + v33);
  uint64_t v36 = sub_250E24710();
  uint64_t v130 = *(void *)(v36 - 8);
  uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v130 + 48);
  int v38 = v37(v34, 1, v36);
  uint64_t v133 = v37;
  int v39 = v37(v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v34, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v34, v36);
LABEL_18:
    sub_250D94D70(0);
    memcpy(v34, v35, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v34, v35, v36);
LABEL_19:
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v41 = v140[6];
  uint64_t v42 = v142 + v41;
  uint64_t v43 = v141 + v41;
  v139(v142 + v41, v141 + v41, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v42 + v11[5], v43 + v11[5], v138);
  uint64_t v44 = v11[6];
  char v45 = (void *)(v42 + v44);
  uint64_t v46 = (const void *)(v43 + v44);
  int v47 = v135(v42 + v44, 1, v143);
  int v48 = v135((uint64_t)v46, 1, v143);
  if (v47)
  {
    uint64_t v49 = v28;
    if (!v48)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v45, v46, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v45, 0, 1, v143);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v49 = v28;
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v45, v143);
LABEL_24:
    sub_250D91EB4();
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 24))(v45, v46, v143);
LABEL_25:
  uint64_t v51 = v11[7];
  uint64_t v52 = (void *)(v42 + v51);
  uint64_t v53 = (void *)(v43 + v51);
  int v54 = v134((void *)(v42 + v51), 1, v49);
  int v55 = v134(v53, 1, v49);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 16))(v52, v53, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v52, 0, 1, v49);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v55)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v52, v49);
LABEL_30:
    sub_250D927FC(0);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 24))(v52, v53, v49);
LABEL_31:
  uint64_t v57 = v11[8];
  uint64_t v58 = (void *)(v42 + v57);
  uint64_t v59 = (void *)(v43 + v57);
  int v60 = v133((void *)(v42 + v57), 1, v36);
  int v61 = v133(v59, 1, v36);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v58, v59, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v58, 0, 1, v36);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v58, v36);
LABEL_36:
    sub_250D94D70(0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v58, v59, v36);
LABEL_37:
  *(unsigned char *)(v42 + v11[9]) = *(unsigned char *)(v43 + v11[9]);
  uint64_t v63 = v140[7];
  uint64_t v64 = v142 + v63;
  uint64_t v65 = v141 + v63;
  v139(v142 + v63, v141 + v63, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v64 + v11[5], v65 + v11[5], v138);
  uint64_t v66 = v11[6];
  uint64_t v67 = (void *)(v64 + v66);
  uint64_t v68 = (const void *)(v65 + v66);
  int v69 = v135(v64 + v66, 1, v143);
  int v70 = v135((uint64_t)v68, 1, v143);
  if (v69)
  {
    uint64_t v71 = v28;
    if (!v70)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v67, v68, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v67, 0, 1, v143);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v71 = v28;
  if (v70)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v67, v143);
LABEL_42:
    sub_250D91EB4();
    memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 24))(v67, v68, v143);
LABEL_43:
  uint64_t v73 = v11[7];
  uint64_t v74 = (void *)(v64 + v73);
  id v75 = (void *)(v65 + v73);
  int v76 = v134((void *)(v64 + v73), 1, v71);
  int v77 = v134(v75, 1, v71);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 16))(v74, v75, v71);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v74, 0, 1, v71);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v77)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v74, v71);
LABEL_48:
    sub_250D927FC(0);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 24))(v74, v75, v71);
LABEL_49:
  uint64_t v79 = v11[8];
  uint64_t v80 = (void *)(v64 + v79);
  uint64_t v81 = (void *)(v65 + v79);
  int v82 = v133((void *)(v64 + v79), 1, v36);
  int v83 = v133(v81, 1, v36);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v80, v81, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v80, 0, 1, v36);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v83)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v80, v36);
LABEL_54:
    sub_250D94D70(0);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v80, v81, v36);
LABEL_55:
  *(unsigned char *)(v64 + v11[9]) = *(unsigned char *)(v65 + v11[9]);
  uint64_t v85 = v140[8];
  uint64_t v86 = v142 + v85;
  uint64_t v87 = v141 + v85;
  v139(v142 + v85, v141 + v85, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v86 + v11[5], v87 + v11[5], v138);
  uint64_t v88 = v11[6];
  uint64_t v89 = (void *)(v86 + v88);
  uint64_t v90 = (const void *)(v87 + v88);
  int v91 = v135(v86 + v88, 1, v143);
  int v92 = v135((uint64_t)v90, 1, v143);
  if (v91)
  {
    uint64_t v93 = v28;
    if (!v92)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v89, v90, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v89, 0, 1, v143);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v93 = v28;
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v89, v143);
LABEL_60:
    sub_250D91EB4();
    memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 24))(v89, v90, v143);
LABEL_61:
  uint64_t v95 = v11[7];
  uint64_t v96 = (void *)(v86 + v95);
  uint64_t v97 = (void *)(v87 + v95);
  int v98 = v134((void *)(v86 + v95), 1, v93);
  int v99 = v134(v97, 1, v93);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 16))(v96, v97, v93);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v96, 0, 1, v93);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v99)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v96, v93);
LABEL_66:
    sub_250D927FC(0);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 24))(v96, v97, v93);
LABEL_67:
  uint64_t v101 = v11[8];
  id v102 = (void *)(v86 + v101);
  uint64_t v103 = (void *)(v87 + v101);
  int v104 = v133((void *)(v86 + v101), 1, v36);
  int v105 = v133(v103, 1, v36);
  if (v104)
  {
    if (!v105)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v102, v103, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v102, 0, 1, v36);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v105)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v102, v36);
LABEL_72:
    sub_250D94D70(0);
    memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v102, v103, v36);
LABEL_73:
  *(unsigned char *)(v86 + v11[9]) = *(unsigned char *)(v87 + v11[9]);
  uint64_t v107 = v140[9];
  uint64_t v108 = v142 + v107;
  uint64_t v109 = v141 + v107;
  v139(v142 + v107, v141 + v107, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v108 + v11[5], v109 + v11[5], v138);
  uint64_t v110 = v11[6];
  uint64_t v111 = (void *)(v108 + v110);
  uint64_t v112 = (const void *)(v109 + v110);
  int v113 = v135(v108 + v110, 1, v143);
  int v114 = v135((uint64_t)v112, 1, v143);
  if (v113)
  {
    uint64_t v115 = v28;
    if (!v114)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 16))(v111, v112, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v111, 0, 1, v143);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v115 = v28;
  if (v114)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v111, v143);
LABEL_78:
    sub_250D91EB4();
    memcpy(v111, v112, *(void *)(*(void *)(v116 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 24))(v111, v112, v143);
LABEL_79:
  uint64_t v117 = v11[7];
  uint64_t v118 = (void *)(v108 + v117);
  uint64_t v119 = (void *)(v109 + v117);
  int v120 = v134((void *)(v108 + v117), 1, v115);
  int v121 = v134(v119, 1, v115);
  if (v120)
  {
    if (!v121)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 16))(v118, v119, v115);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v118, 0, 1, v115);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v121)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v118, v115);
LABEL_84:
    sub_250D927FC(0);
    memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 24))(v118, v119, v115);
LABEL_85:
  uint64_t v123 = v11[8];
  uint64_t v124 = (void *)(v108 + v123);
  uint64_t v125 = (void *)(v109 + v123);
  int v126 = v133((void *)(v108 + v123), 1, v36);
  int v127 = v133(v125, 1, v36);
  if (!v126)
  {
    if (!v127)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v124, v125, v36);
      goto LABEL_91;
    }
    (*(void (**)(void *, uint64_t))(v130 + 8))(v124, v36);
    goto LABEL_90;
  }
  if (v127)
  {
LABEL_90:
    sub_250D94D70(0);
    memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v124, v125, v36);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v124, 0, 1, v36);
LABEL_91:
  *(unsigned char *)(v108 + v11[9]) = *(unsigned char *)(v109 + v11[9]);
  return v142;
}

uint64_t initializeWithTake for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v106 = a3;
  uint64_t v107 = a2;
  uint64_t v8 = a3[5];
  uint64_t v108 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  int v105 = v7;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = sub_250E248B0();
  uint64_t v100 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);
  uint64_t v103 = v15;
  v100(v13, v14);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v9 + v16);
  uint64_t v18 = (const void *)(v10 + v16);
  sub_250D922D0(0);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  int v104 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v98 = v21;
  if (v104(v18, 1, v19))
  {
    sub_250D91EB4();
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  uint64_t v23 = v11[7];
  uint64_t v24 = (void *)(v9 + v23);
  uint64_t v25 = (const void *)(v10 + v23);
  uint64_t v26 = sub_250E243F0();
  uint64_t v27 = *(void *)(v26 - 8);
  id v102 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v97 = v27;
  if (v102(v25, 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v11[8];
  int v30 = (void *)(v9 + v29);
  int v31 = (const void *)(v10 + v29);
  uint64_t v32 = sub_250E24710();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v99 = v33;
  if (v101(v31, 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v35 = v106[6];
  uint64_t v36 = v108 + v35;
  uint64_t v37 = v107 + v35;
  v105(v108 + v35, v107 + v35, v6);
  int v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v36 + v11[5], v37 + v11[5], v103);
  uint64_t v39 = v11[6];
  uint64_t v40 = (void *)(v36 + v39);
  uint64_t v41 = (const void *)(v37 + v39);
  if (v104((const void *)(v37 + v39), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v40, v41, v20);
    int v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v40, 0, 1, v20);
  }
  uint64_t v43 = v11[7];
  uint64_t v44 = (void *)(v36 + v43);
  char v45 = (const void *)(v37 + v43);
  if (v102((const void *)(v37 + v43), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v44, v45, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v44, 0, 1, v26);
  }
  uint64_t v47 = v11[8];
  int v48 = (void *)(v36 + v47);
  uint64_t v49 = (const void *)(v37 + v47);
  if (v101((const void *)(v37 + v47), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v48, v49, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v48, 0, 1, v32);
  }
  *(unsigned char *)(v36 + v11[9]) = *(unsigned char *)(v37 + v11[9]);
  uint64_t v51 = v106[7];
  uint64_t v52 = v108 + v51;
  uint64_t v53 = v107 + v51;
  v105(v108 + v51, v107 + v51, v6);
  v38(v52 + v11[5], v53 + v11[5], v103);
  uint64_t v54 = v11[6];
  int v55 = (void *)(v52 + v54);
  uint64_t v56 = (const void *)(v53 + v54);
  if (v104((const void *)(v53 + v54), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v55, v56, v20);
    int v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v55, 0, 1, v20);
  }
  uint64_t v58 = v11[7];
  uint64_t v59 = (void *)(v52 + v58);
  int v60 = (const void *)(v53 + v58);
  if (v102((const void *)(v53 + v58), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v59, v60, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v59, 0, 1, v26);
  }
  uint64_t v62 = v11[8];
  uint64_t v63 = (void *)(v52 + v62);
  uint64_t v64 = (const void *)(v53 + v62);
  if (v101((const void *)(v53 + v62), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v63, v64, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v63, 0, 1, v32);
  }
  *(unsigned char *)(v52 + v11[9]) = *(unsigned char *)(v53 + v11[9]);
  uint64_t v66 = v106[8];
  uint64_t v67 = v108 + v66;
  uint64_t v68 = v107 + v66;
  v105(v108 + v66, v107 + v66, v6);
  v38(v67 + v11[5], v68 + v11[5], v103);
  uint64_t v69 = v11[6];
  int v70 = (void *)(v67 + v69);
  uint64_t v71 = (const void *)(v68 + v69);
  if (v104((const void *)(v68 + v69), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v70, v71, v20);
    int v38 = (void (*)(uint64_t, uint64_t, uint64_t))v100;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v70, 0, 1, v20);
  }
  uint64_t v73 = v11[7];
  uint64_t v74 = (void *)(v67 + v73);
  id v75 = (const void *)(v68 + v73);
  if (v102((const void *)(v68 + v73), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v74, v75, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v74, 0, 1, v26);
  }
  uint64_t v77 = v11[8];
  uint64_t v78 = (void *)(v67 + v77);
  uint64_t v79 = (const void *)(v68 + v77);
  if (v101((const void *)(v68 + v77), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v78, v79, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v78, 0, 1, v32);
  }
  *(unsigned char *)(v67 + v11[9]) = *(unsigned char *)(v68 + v11[9]);
  uint64_t v81 = v106[9];
  uint64_t v82 = v108 + v81;
  uint64_t v83 = v107 + v81;
  v105(v108 + v81, v107 + v81, v6);
  v38(v82 + v11[5], v83 + v11[5], v103);
  uint64_t v84 = v11[6];
  uint64_t v85 = (void *)(v82 + v84);
  uint64_t v86 = (const void *)(v83 + v84);
  if (v104((const void *)(v83 + v84), 1, v20))
  {
    sub_250D91EB4();
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v85, v86, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v20);
  }
  uint64_t v88 = v11[7];
  uint64_t v89 = (void *)(v82 + v88);
  uint64_t v90 = (const void *)(v83 + v88);
  if (v102((const void *)(v83 + v88), 1, v26))
  {
    sub_250D927FC(0);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v89, v90, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v89, 0, 1, v26);
  }
  uint64_t v92 = v11[8];
  uint64_t v93 = (void *)(v82 + v92);
  uint64_t v94 = (const void *)(v83 + v92);
  if (v101((const void *)(v83 + v92), 1, v32))
  {
    sub_250D94D70(0);
    memcpy(v93, v94, *(void *)(*(void *)(v95 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v93, v94, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v93, 0, 1, v32);
  }
  *(unsigned char *)(v82 + v11[9]) = *(unsigned char *)(v83 + v11[9]);
  return v108;
}

uint64_t assignWithTake for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v140 = a3;
  uint64_t v141 = a2;
  uint64_t v8 = a3[5];
  uint64_t v142 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v136 = v6;
  uint64_t v139 = v7;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = sub_250E248B0();
  uint64_t v137 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  uint64_t v138 = v15;
  v137(v13, v14);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v9 + v16);
  uint64_t v18 = (void *)(v10 + v16);
  sub_250D922D0(0);
  uint64_t v20 = v19;
  uint64_t v132 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v132 + 48);
  int v22 = v21(v17, 1, v19);
  uint64_t v143 = v20;
  uint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  int v23 = v21(v18, 1, v20);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v132 + 32))(v17, v18, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v17, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v17, v20);
LABEL_6:
    sub_250D91EB4();
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v132 + 40))(v17, v18, v20);
LABEL_7:
  uint64_t v25 = v11[7];
  uint64_t v26 = (void *)(v9 + v25);
  uint64_t v27 = (void *)(v10 + v25);
  uint64_t v28 = sub_250E243F0();
  uint64_t v131 = *(void *)(v28 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v131 + 48);
  int v30 = v29(v26, 1, v28);
  uint64_t v134 = v29;
  int v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v26, v28);
LABEL_12:
    sub_250D927FC(0);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 40))(v26, v27, v28);
LABEL_13:
  uint64_t v33 = v11[8];
  uint64_t v34 = (void *)(v9 + v33);
  uint64_t v35 = (void *)(v10 + v33);
  uint64_t v36 = sub_250E24710();
  uint64_t v130 = *(void *)(v36 - 8);
  uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v130 + 48);
  int v38 = v37(v34, 1, v36);
  uint64_t v133 = v37;
  int v39 = v37(v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 32))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v34, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v34, v36);
LABEL_18:
    sub_250D94D70(0);
    memcpy(v34, v35, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 40))(v34, v35, v36);
LABEL_19:
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v41 = v140[6];
  uint64_t v42 = v142 + v41;
  uint64_t v43 = v141 + v41;
  v139(v142 + v41, v141 + v41, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v42 + v11[5], v43 + v11[5], v138);
  uint64_t v44 = v11[6];
  char v45 = (void *)(v42 + v44);
  uint64_t v46 = (const void *)(v43 + v44);
  int v47 = v135(v42 + v44, 1, v143);
  int v48 = v135((uint64_t)v46, 1, v143);
  if (v47)
  {
    uint64_t v49 = v28;
    if (!v48)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 32))(v45, v46, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v45, 0, 1, v143);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v49 = v28;
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v45, v143);
LABEL_24:
    sub_250D91EB4();
    memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 40))(v45, v46, v143);
LABEL_25:
  uint64_t v51 = v11[7];
  uint64_t v52 = (void *)(v42 + v51);
  uint64_t v53 = (void *)(v43 + v51);
  int v54 = v134((void *)(v42 + v51), 1, v49);
  int v55 = v134(v53, 1, v49);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v52, v53, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v52, 0, 1, v49);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v55)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v52, v49);
LABEL_30:
    sub_250D927FC(0);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 40))(v52, v53, v49);
LABEL_31:
  uint64_t v57 = v11[8];
  uint64_t v58 = (void *)(v42 + v57);
  uint64_t v59 = (void *)(v43 + v57);
  int v60 = v133((void *)(v42 + v57), 1, v36);
  int v61 = v133(v59, 1, v36);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 32))(v58, v59, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v58, 0, 1, v36);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v58, v36);
LABEL_36:
    sub_250D94D70(0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 40))(v58, v59, v36);
LABEL_37:
  *(unsigned char *)(v42 + v11[9]) = *(unsigned char *)(v43 + v11[9]);
  uint64_t v63 = v140[7];
  uint64_t v64 = v142 + v63;
  uint64_t v65 = v141 + v63;
  v139(v142 + v63, v141 + v63, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v64 + v11[5], v65 + v11[5], v138);
  uint64_t v66 = v11[6];
  uint64_t v67 = (void *)(v64 + v66);
  uint64_t v68 = (const void *)(v65 + v66);
  int v69 = v135(v64 + v66, 1, v143);
  int v70 = v135((uint64_t)v68, 1, v143);
  if (v69)
  {
    uint64_t v71 = v28;
    if (!v70)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 32))(v67, v68, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v67, 0, 1, v143);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v71 = v28;
  if (v70)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v67, v143);
LABEL_42:
    sub_250D91EB4();
    memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 40))(v67, v68, v143);
LABEL_43:
  uint64_t v73 = v11[7];
  uint64_t v74 = (void *)(v64 + v73);
  id v75 = (void *)(v65 + v73);
  int v76 = v134((void *)(v64 + v73), 1, v71);
  int v77 = v134(v75, 1, v71);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v74, v75, v71);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v74, 0, 1, v71);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v77)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v74, v71);
LABEL_48:
    sub_250D927FC(0);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 40))(v74, v75, v71);
LABEL_49:
  uint64_t v79 = v11[8];
  uint64_t v80 = (void *)(v64 + v79);
  uint64_t v81 = (void *)(v65 + v79);
  int v82 = v133((void *)(v64 + v79), 1, v36);
  int v83 = v133(v81, 1, v36);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 32))(v80, v81, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v80, 0, 1, v36);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v83)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v80, v36);
LABEL_54:
    sub_250D94D70(0);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 40))(v80, v81, v36);
LABEL_55:
  *(unsigned char *)(v64 + v11[9]) = *(unsigned char *)(v65 + v11[9]);
  uint64_t v85 = v140[8];
  uint64_t v86 = v142 + v85;
  uint64_t v87 = v141 + v85;
  v139(v142 + v85, v141 + v85, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v86 + v11[5], v87 + v11[5], v138);
  uint64_t v88 = v11[6];
  uint64_t v89 = (void *)(v86 + v88);
  uint64_t v90 = (const void *)(v87 + v88);
  int v91 = v135(v86 + v88, 1, v143);
  int v92 = v135((uint64_t)v90, 1, v143);
  if (v91)
  {
    uint64_t v93 = v28;
    if (!v92)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 32))(v89, v90, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v89, 0, 1, v143);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v93 = v28;
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v89, v143);
LABEL_60:
    sub_250D91EB4();
    memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 40))(v89, v90, v143);
LABEL_61:
  uint64_t v95 = v11[7];
  uint64_t v96 = (void *)(v86 + v95);
  uint64_t v97 = (void *)(v87 + v95);
  int v98 = v134((void *)(v86 + v95), 1, v93);
  int v99 = v134(v97, 1, v93);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v96, v97, v93);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v96, 0, 1, v93);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v99)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v96, v93);
LABEL_66:
    sub_250D927FC(0);
    memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 40))(v96, v97, v93);
LABEL_67:
  uint64_t v101 = v11[8];
  id v102 = (void *)(v86 + v101);
  uint64_t v103 = (void *)(v87 + v101);
  int v104 = v133((void *)(v86 + v101), 1, v36);
  int v105 = v133(v103, 1, v36);
  if (v104)
  {
    if (!v105)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 32))(v102, v103, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v102, 0, 1, v36);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v105)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v102, v36);
LABEL_72:
    sub_250D94D70(0);
    memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 40))(v102, v103, v36);
LABEL_73:
  *(unsigned char *)(v86 + v11[9]) = *(unsigned char *)(v87 + v11[9]);
  uint64_t v107 = v140[9];
  uint64_t v108 = v142 + v107;
  uint64_t v109 = v141 + v107;
  v139(v142 + v107, v141 + v107, v136);
  ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v108 + v11[5], v109 + v11[5], v138);
  uint64_t v110 = v11[6];
  uint64_t v111 = (void *)(v108 + v110);
  uint64_t v112 = (const void *)(v109 + v110);
  int v113 = v135(v108 + v110, 1, v143);
  int v114 = v135((uint64_t)v112, 1, v143);
  if (v113)
  {
    uint64_t v115 = v28;
    if (!v114)
    {
      (*(void (**)(void *, const void *, uint64_t))(v132 + 32))(v111, v112, v143);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v111, 0, 1, v143);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v115 = v28;
  if (v114)
  {
    (*(void (**)(void *, uint64_t))(v132 + 8))(v111, v143);
LABEL_78:
    sub_250D91EB4();
    memcpy(v111, v112, *(void *)(*(void *)(v116 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(void *, const void *, uint64_t))(v132 + 40))(v111, v112, v143);
LABEL_79:
  uint64_t v117 = v11[7];
  uint64_t v118 = (void *)(v108 + v117);
  uint64_t v119 = (void *)(v109 + v117);
  int v120 = v134((void *)(v108 + v117), 1, v115);
  int v121 = v134(v119, 1, v115);
  if (v120)
  {
    if (!v121)
    {
      (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v118, v119, v115);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v118, 0, 1, v115);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v121)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v118, v115);
LABEL_84:
    sub_250D927FC(0);
    memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, void *, uint64_t))(v131 + 40))(v118, v119, v115);
LABEL_85:
  uint64_t v123 = v11[8];
  uint64_t v124 = (void *)(v108 + v123);
  uint64_t v125 = (void *)(v109 + v123);
  int v126 = v133((void *)(v108 + v123), 1, v36);
  int v127 = v133(v125, 1, v36);
  if (!v126)
  {
    if (!v127)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 40))(v124, v125, v36);
      goto LABEL_91;
    }
    (*(void (**)(void *, uint64_t))(v130 + 8))(v124, v36);
    goto LABEL_90;
  }
  if (v127)
  {
LABEL_90:
    sub_250D94D70(0);
    memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 32))(v124, v125, v36);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v124, 0, 1, v36);
LABEL_91:
  *(unsigned char *)(v108 + v11[9]) = *(unsigned char *)(v109 + v11[9]);
  return v142;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250DFD1A0);
}

uint64_t sub_250DFD1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for SleepingSampleAggregate();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250DFD2AC);
}

uint64_t sub_250DFD2AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SleepingSampleAggregate();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_250DFD3B0()
{
  uint64_t result = sub_250E24B20();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SleepingSampleAggregate();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleAggregateDaySummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250DFD54CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregateDaySummary.CodingKeys()
{
  return &type metadata for SleepingSampleAggregateDaySummary.CodingKeys;
}

unint64_t sub_250DFD588()
{
  unint64_t result = qword_269B04240;
  if (!qword_269B04240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04240);
  }
  return result;
}

unint64_t sub_250DFD5E0()
{
  unint64_t result = qword_269B04248;
  if (!qword_269B04248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04248);
  }
  return result;
}

unint64_t sub_250DFD638()
{
  unint64_t result = qword_269B04250;
  if (!qword_269B04250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04250);
  }
  return result;
}

uint64_t sub_250DFD68C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461527472616568 && a2 == 0xE900000000000065 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79784F646F6F6C62 && a2 == 0xEB000000006E6567 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461726970736572 && a2 == 0xEF6574615279726FLL || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000250E2DCD0 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C7341656D6974 && a2 == 0xEA00000000007065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_250DFD974(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of TrainingLoadSampleDaySummaryProtocol.morningIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t SleepingSampleBaselineAvailability.required.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return *(void *)v3;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_250DA9D04();
    uint64_t v6 = *(void *)&v3[*(int *)(v5 + 64)];
    sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
  }
  else
  {
    sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
    return 6;
  }
  return v6;
}

uint64_t SleepingSampleBaselineAvailability.count.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return 0;
  }
  if (EnumCaseMultiPayload == 1) {
    sub_250DA9D04();
  }
  else {
    sub_250D96CC4();
  }
  uint64_t v6 = *(void *)&v3[*(int *)(v5 + 48)];
  sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
  return v6;
}

uint64_t SleepingSampleBaselineAvailability.isInRefinement.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1) {
      sub_250DA9D04();
    }
    else {
      sub_250D96CC4();
    }
    uint64_t v6 = *(void *)&v3[*(int *)(v5 + 48)];
    sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
    return (unint64_t)(v6 - 6) < 0xE;
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.maximumNumberOfDays.getter()
{
  return 49;
}

uint64_t SleepingSampleBaselineAvailability.isEqualToMinimumAvailability.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1) {
      sub_250DA9D04();
    }
    else {
      sub_250D96CC4();
    }
    uint64_t v6 = *(void *)&v3[*(int *)(v5 + 48)];
    sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
    return v6 == 6;
  }
  return result;
}

uint64_t SleepingSampleBaselineAvailability.isGreaterThanMinimumAvailability.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1) {
      sub_250DA9D04();
    }
    else {
      sub_250D96CC4();
    }
    uint64_t v6 = *(void *)&v3[*(int *)(v5 + 48)];
    sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
    return v6 > 6;
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.minimumNumberOfValues.getter()
{
  return 6;
}

uint64_t static SleepingSampleBaselineAvailability.maximumNumberOfValues.getter()
{
  return 49;
}

uint64_t static SleepingSampleBaselineAvailability.minimumNumberOfValuesForConfidentRange.getter()
{
  return 20;
}

uint64_t static SleepingSampleBaselineAvailability.refinementRangeOfValues.getter()
{
  return 6;
}

BOOL SleepingSampleBaselineAvailability.isAvailable.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v1);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return 0;
  }
  BOOL v5 = EnumCaseMultiPayload != 1;
  sub_250D8F6B4((uint64_t)v3, (uint64_t (*)(void))sub_250D97944);
  return v5;
}

uint64_t SleepingSampleBaselineAvailability.init(analyzedRange:count:required:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_250D97944();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v24 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    sub_250D8EC28(a1, (uint64_t)v12, (uint64_t (*)(void))sub_250D97944);
    if (a2 >= a3)
    {
      sub_250D96CC4();
      uint64_t v22 = *(int *)(v21 + 48);
      sub_250D8EC28((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))sub_250D97944);
      *(void *)((char *)v15 + v22) = a2;
    }
    else
    {
      sub_250DA9D04();
      uint64_t v19 = *(int *)(v18 + 48);
      uint64_t v20 = *(int *)(v18 + 64);
      sub_250D8EC28((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))sub_250D97944);
      *(void *)((char *)v15 + v19) = a2;
      *(void *)((char *)v15 + v20) = a3;
    }
    goto LABEL_10;
  }
  sub_250D8F6B4(a1, (uint64_t (*)(void))sub_250DFF094);
  if (!a2)
  {
    void *v15 = a3;
LABEL_10:
    swift_storeEnumTagMultiPayload();
    sub_250D8EC28((uint64_t)v15, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(a4, 0, 1, v13);
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);

  return v16(a4, 1, 1, v13);
}

uint64_t SleepingSampleBaselineAvailability.analyzedRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_250D8EC28((uint64_t)v6, a1, (uint64_t (*)(void))sub_250D97944);
    sub_250D97944();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  else
  {
    sub_250D97944();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

uint64_t SleepingSampleBaselineAvailability.hash(into:)()
{
  uint64_t v1 = v0;
  sub_250D97944();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8F770(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250DA9D04();
      sub_250D8EC28((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
      sub_250E254C0();
      sub_250E24B20();
      sub_250D94B44(&qword_269B038F8, MEMORY[0x263F090E8]);
      sub_250E24B70();
      sub_250E24B70();
      sub_250E254C0();
    }
    else
    {
      sub_250D96CC4();
      sub_250D8EC28((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
      sub_250E254C0();
      sub_250E24B20();
      sub_250D94B44(&qword_269B038F8, MEMORY[0x263F090E8]);
      sub_250E24B70();
      sub_250E24B70();
    }
    sub_250E254C0();
    return sub_250D8F6B4((uint64_t)v4, (uint64_t (*)(void))sub_250D97944);
  }
  else
  {
    sub_250E254C0();
    return sub_250E254C0();
  }
}

uint64_t sub_250DFE674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250E00178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_250DFE69C(uint64_t a1)
{
  unint64_t v2 = sub_250D8F60C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DFE6D8(uint64_t a1)
{
  unint64_t v2 = sub_250D8F60C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DFE714(uint64_t a1)
{
  unint64_t v2 = sub_250D8F660();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DFE750(uint64_t a1)
{
  unint64_t v2 = sub_250D8F660();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DFE78C(uint64_t a1)
{
  unint64_t v2 = sub_250DFF0EC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DFE7C8(uint64_t a1)
{
  unint64_t v2 = sub_250DFF0EC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_250DFE804()
{
  return 0x6465726975716572;
}

uint64_t sub_250DFE81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_250E25400();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_250DFE8B4(uint64_t a1)
{
  unint64_t v2 = sub_250DFF140();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250DFE8F0(uint64_t a1)
{
  unint64_t v2 = sub_250DFF140();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleBaselineAvailability.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250DFE96C()
{
  return sub_250E254F0();
}

uint64_t sub_250DFE9B0()
{
  return sub_250E254F0();
}

uint64_t _s13HealthBalance34SleepingSampleBaselineAvailabilityO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_250D97944();
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v55 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v56 = (uint64_t)&v55 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v57 = (uint64_t)&v55 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v58 = (uint64_t)&v55 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v59 = (uint64_t)&v55 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v55 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (uint64_t *)((char *)&v55 - v24);
  sub_250E00288();
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v29 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v30 = &v29[*(int *)(v27 + 56)];
  sub_250D8F770(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  sub_250D8F770(a2, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250D8F770((uint64_t)v29, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_250DA9D04();
      uint64_t v33 = *(int *)(v32 + 48);
      uint64_t v34 = *(void *)&v23[v33];
      uint64_t v35 = *(int *)(v32 + 64);
      uint64_t v36 = *(void *)&v23[v35];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v55 = *(void *)&v30[v33];
        uint64_t v56 = *(void *)&v30[v35];
        uint64_t v57 = v36;
        sub_250D8EC28((uint64_t)v30, (uint64_t)v16, (uint64_t (*)(void))sub_250D97944);
        sub_250E24B20();
        sub_250D94B44(&qword_26B206F80, MEMORY[0x263F090E8]);
        char v37 = sub_250E24BF0();
        uint64_t v38 = v59;
        sub_250D8F770((uint64_t)v23, v59, (uint64_t (*)(void))sub_250D97944);
        uint64_t v39 = v58;
        sub_250D8F770((uint64_t)v16, v58, (uint64_t (*)(void))sub_250D97944);
        if (v37)
        {
          unsigned __int8 v40 = sub_250E24BF0();
          sub_250D8F6B4(v39, (uint64_t (*)(void))sub_250D97944);
          sub_250D8F6B4(v38, (uint64_t (*)(void))sub_250D97944);
          sub_250D8F6B4((uint64_t)v16, (uint64_t (*)(void))sub_250D97944);
          sub_250D8F6B4((uint64_t)v23, (uint64_t (*)(void))sub_250D97944);
          if (v57 == v56) {
            uint64_t v41 = v40 & (v34 == v55);
          }
          else {
            uint64_t v41 = 0;
          }
          goto LABEL_19;
        }
        sub_250D8F6B4(v39, (uint64_t (*)(void))sub_250D97944);
        sub_250D8F6B4(v38, (uint64_t (*)(void))sub_250D97944);
        sub_250D8F6B4((uint64_t)v16, (uint64_t (*)(void))sub_250D97944);
        uint64_t v53 = (uint64_t)v23;
        goto LABEL_18;
      }
      uint64_t v20 = v23;
      goto LABEL_14;
    }
    sub_250D8F770((uint64_t)v29, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_250D96CC4();
    uint64_t v45 = *(int *)(v44 + 48);
    uint64_t v46 = *(void *)&v20[v45];
    if (swift_getEnumCaseMultiPayload() != 2)
    {
LABEL_14:
      sub_250D8F6B4((uint64_t)v20, (uint64_t (*)(void))sub_250D97944);
      uint64_t v41 = 0;
      uint64_t v43 = (uint64_t (*)(void))sub_250E00288;
      goto LABEL_20;
    }
    uint64_t v47 = *(void *)&v30[v45];
    uint64_t v48 = v57;
    sub_250D8EC28((uint64_t)v30, v57, (uint64_t (*)(void))sub_250D97944);
    sub_250E24B20();
    sub_250D94B44(&qword_26B206F80, MEMORY[0x263F090E8]);
    char v49 = sub_250E24BF0();
    uint64_t v50 = v56;
    sub_250D8F770((uint64_t)v20, v56, (uint64_t (*)(void))sub_250D97944);
    uint64_t v51 = v55;
    sub_250D8F770(v48, v55, (uint64_t (*)(void))sub_250D97944);
    if ((v49 & 1) == 0)
    {
      sub_250D8F6B4(v51, (uint64_t (*)(void))sub_250D97944);
      sub_250D8F6B4(v50, (uint64_t (*)(void))sub_250D97944);
      sub_250D8F6B4(v48, (uint64_t (*)(void))sub_250D97944);
      uint64_t v53 = (uint64_t)v20;
LABEL_18:
      sub_250D8F6B4(v53, (uint64_t (*)(void))sub_250D97944);
      uint64_t v41 = 0;
      goto LABEL_19;
    }
    unsigned __int8 v52 = sub_250E24BF0();
    sub_250D8F6B4(v51, (uint64_t (*)(void))sub_250D97944);
    sub_250D8F6B4(v50, (uint64_t (*)(void))sub_250D97944);
    sub_250D8F6B4(v48, (uint64_t (*)(void))sub_250D97944);
    sub_250D8F6B4((uint64_t)v20, (uint64_t (*)(void))sub_250D97944);
    uint64_t v41 = v52 & (v46 == v47);
LABEL_19:
    uint64_t v43 = (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability;
    goto LABEL_20;
  }
  sub_250D8F770((uint64_t)v29, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int v42 = swift_getEnumCaseMultiPayload();
  uint64_t v43 = (uint64_t (*)(void))sub_250E00288;
  if (!v42)
  {
    uint64_t v41 = *v25 == *(void *)v30;
    goto LABEL_19;
  }
  uint64_t v41 = 0;
LABEL_20:
  sub_250D8F6B4((uint64_t)v29, v43);
  return v41;
}

void sub_250DFF094()
{
  if (!qword_26B2075C8)
  {
    sub_250D97944();
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2075C8);
    }
  }
}

unint64_t sub_250DFF0EC()
{
  unint64_t result = qword_26B2080A8;
  if (!qword_26B2080A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2080A8);
  }
  return result;
}

unint64_t sub_250DFF140()
{
  unint64_t result = qword_26B208078;
  if (!qword_26B208078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208078);
  }
  return result;
}

uint64_t sub_250DFF194()
{
  return sub_250D94B44(&qword_269B04258, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleBaselineAvailability(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = sub_250E24B20();
      uint64_t v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16);
      v14(a1, a2, v13);
      sub_250D97944();
      v14((uint64_t *)((char *)a1 + *(int *)(v15 + 36)), (uint64_t *)((char *)a2 + *(int *)(v15 + 36)), v13);
      sub_250D96CC4();
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v16 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_250E24B20();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_250D97944();
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 36)), (uint64_t *)((char *)a2 + *(int *)(v10 + 36)), v8);
      sub_250DA9D04();
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for SleepingSampleBaselineAvailability(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    uint64_t v3 = sub_250E24B20();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    sub_250D97944();
    uint64_t v5 = a1 + *(int *)(v4 + 36);
    return v6(v5, v3);
  }
  return result;
}

char *initializeWithCopy for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = sub_250E24B20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(a1, a2, v11);
    sub_250D97944();
    v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
    sub_250D96CC4();
    *(void *)&a1[*(int *)(v14 + 48)] = *(void *)&a2[*(int *)(v14 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D97944();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    sub_250DA9D04();
    *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
    *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250D8F6B4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = sub_250E24B20();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      sub_250D97944();
      v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
      sub_250D96CC4();
      *(void *)&a1[*(int *)(v14 + 48)] = *(void *)&a2[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_250E24B20();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      sub_250D97944();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      sub_250DA9D04();
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = sub_250E24B20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(a1, a2, v11);
    sub_250D97944();
    v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
    sub_250D96CC4();
    *(void *)&a1[*(int *)(v14 + 48)] = *(void *)&a2[*(int *)(v14 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    sub_250D97944();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    sub_250DA9D04();
    *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
    *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_250D8F6B4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = sub_250E24B20();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      sub_250D97944();
      v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
      sub_250D96CC4();
      *(void *)&a1[*(int *)(v14 + 48)] = *(void *)&a2[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_250E24B20();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      sub_250D97944();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      sub_250DA9D04();
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_250DFFB34()
{
  uint64_t v3 = MEMORY[0x263F8CF70] + 64;
  sub_250D97944();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v4 = &v2;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleBaselineAvailability.NoDataCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250DFFCB0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.NoDataCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys;
}

unint64_t sub_250DFFD5C()
{
  unint64_t result = qword_269B04260;
  if (!qword_269B04260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04260);
  }
  return result;
}

unint64_t sub_250DFFDB4()
{
  unint64_t result = qword_269B04268;
  if (!qword_269B04268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04268);
  }
  return result;
}

unint64_t sub_250DFFE0C()
{
  unint64_t result = qword_269B04270;
  if (!qword_269B04270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04270);
  }
  return result;
}

unint64_t sub_250DFFE64()
{
  unint64_t result = qword_269B04278;
  if (!qword_269B04278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04278);
  }
  return result;
}

unint64_t sub_250DFFEBC()
{
  unint64_t result = qword_26B208070;
  if (!qword_26B208070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208070);
  }
  return result;
}

unint64_t sub_250DFFF14()
{
  unint64_t result = qword_26B208068;
  if (!qword_26B208068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208068);
  }
  return result;
}

unint64_t sub_250DFFF6C()
{
  unint64_t result = qword_26B208088;
  if (!qword_26B208088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208088);
  }
  return result;
}

unint64_t sub_250DFFFC4()
{
  unint64_t result = qword_26B208080;
  if (!qword_26B208080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208080);
  }
  return result;
}

unint64_t sub_250E0001C()
{
  unint64_t result = qword_26B2080B8;
  if (!qword_26B2080B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2080B8);
  }
  return result;
}

unint64_t sub_250E00074()
{
  unint64_t result = qword_26B2080B0;
  if (!qword_26B2080B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2080B0);
  }
  return result;
}

unint64_t sub_250E000CC()
{
  unint64_t result = qword_26B2080A0;
  if (!qword_26B2080A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2080A0);
  }
  return result;
}

unint64_t sub_250E00124()
{
  unint64_t result = qword_26B208098;
  if (!qword_26B208098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208098);
  }
  return result;
}

uint64_t sub_250E00178(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64657A796C616E61 && a2 == 0xED000065676E6152;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_250E00288()
{
  if (!qword_269B04280)
  {
    type metadata accessor for SleepingSampleBaselineAvailability();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B04280);
    }
  }
}

id SleepingSampleDaySummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_250D8C1B8(a1, a2, a3, a4, a5);
  swift_release();
  return v12;
}

uint64_t SleepingSampleDaySummaryQuery.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250D88810(v1 + qword_26B20BB98, a1);
}

uint64_t SleepingSampleDaySummaryQuery.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_26B20BBA8;
  uint64_t v4 = sub_250E248B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SleepingSampleDaySummaryQuery.continueAfterInitialResults.getter()
{
  return *(unsigned __int8 *)(v0 + qword_26B20BBB0);
}

uint64_t SleepingSampleDaySummaryQuery.queue_deliverError(_:)(void *a1)
{
  uint64_t v3 = sub_250E24960();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_250E24980();
  uint64_t result = MEMORY[0x270FA5388](v7);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)&v1[qword_26B207E30];
  if (v12)
  {
    uint64_t v23 = v9;
    uint64_t v13 = *(void *)&v1[qword_26B207E30 + 8];
    swift_retain();
    id v14 = objc_msgSend(v1, sel_clientQueue);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = (void *)swift_allocObject();
      void v16[2] = v12;
      v16[3] = v13;
      v16[4] = v1;
      v16[5] = a1;
      aBlock[4] = sub_250E01B38;
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_250D8A9AC;
      aBlock[3] = &block_descriptor_2;
      uint64_t v17 = _Block_copy(aBlock);
      uint64_t v22 = v7;
      uint64_t v18 = v17;
      sub_250D8C3AC(v12);
      uint64_t v19 = v1;
      id v20 = a1;
      sub_250E24970();
      uint64_t v24 = MEMORY[0x263F8EE78];
      sub_250D94B8C(&qword_26B2078B8, MEMORY[0x263F8F030]);
      sub_250D8A4F4(0, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
      sub_250D87AFC();
      sub_250E25050();
      MEMORY[0x253389B40](0, v11, v6, v18);
      _Block_release(v18);

      sub_250D8C39C(v12);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
      return swift_release();
    }
    else
    {
      return sub_250D8C39C(v12);
    }
  }
  return result;
}

void sub_250E0075C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = a1;
  SleepingSampleDaySummaryQuery.queue_deliverError(_:)(v5);
}

uint64_t SleepingSampleDaySummaryQuery.queue_queryDidDeactivate(_:)()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = (void *)sub_250E24730();
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_queue_queryDidDeactivate_, v3);

  id v4 = &v1[qword_26B207E30];
  uint64_t v5 = *(void *)&v1[qword_26B207E30];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  return sub_250D8C39C(v5);
}

uint64_t sub_250E00830(void *a1)
{
  uint64_t v2 = sub_250E24750();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24740();
  id v6 = a1;
  SleepingSampleDaySummaryQuery.queue_queryDidDeactivate(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id static SleepingSampleDaySummaryQuery.clientInterfaceProtocol()()
{
  uint64_t v0 = sub_250D86E58();

  return v0;
}

void static SleepingSampleDaySummaryQuery.configureClientInterface(_:)(void *a1)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v4 = (objc_class *)(*MEMORY[0x263F8EED0] & *v1);
  v21.receiver = ObjCClassFromMetadata;
  v21.super_class = v4;
  id v14 = a1;
  objc_msgSendSuper2(&v21, sel_configureClientInterface_, a1);
  sub_250D98B48(0, &qword_26B208100);
  *(void *)&long long v18 = MEMORY[0x263F8EE78];
  MEMORY[0x253389970]();
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_250E24DE0();
  }
  sub_250E01B6C();
  swift_getObjCClassFromMetadata();
  sub_250E24E10();
  uint64_t v5 = sub_250E24DD0();
  MEMORY[0x253389970](v5);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_250E24DE0();
  }
  sub_250E01C70();
  swift_getObjCClassFromMetadata();
  sub_250E24E10();
  uint64_t v6 = sub_250E24DD0();
  MEMORY[0x253389970](v6);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_250E24DE0();
  }
  swift_getObjCClassFromMetadata();
  sub_250E24E10();
  sub_250E24DD0();
  if (!((unint64_t)v18 >> 62))
  {
    uint64_t v7 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_9;
    }
LABEL_22:
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
    swift_bridgeObjectRelease_n();
    sub_250DCFED0((uint64_t)v9);
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)sub_250E24EA0();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setClasses_forSelector_argumentIndex_ofReply_, v13, sel_client_deliverSleepingSampleDaySummaries_clearPending_isFinalBatch_queryUUID_, 0, 0);

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_250E25230();
  if (!v7) {
    goto LABEL_22;
  }
LABEL_9:
  if (v7 >= 1)
  {
    uint64_t v8 = v18 + 32;
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    do
    {
      swift_unknownObjectRetain_n();
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v20 = 0;
        long long v18 = 0u;
        long long v19 = 0u;
      }
      swift_unknownObjectRelease();
      if (*((void *)&v19 + 1))
      {
        long long v15 = v18;
        long long v16 = v19;
        uint64_t v17 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_250DCF940(0, v9[2] + 1, 1, v9);
        }
        unint64_t v11 = v9[2];
        unint64_t v10 = v9[3];
        if (v11 >= v10 >> 1) {
          uint64_t v9 = sub_250DCF940((void *)(v10 > 1), v11 + 1, 1, v9);
        }
        id v9[2] = v11 + 1;
        uint64_t v12 = &v9[5 * v11];
        v12[8] = v17;
        *((_OWORD *)v12 + 2) = v15;
        *((_OWORD *)v12 + 3) = v16;
      }
      else
      {
        sub_250E02010((uint64_t)&v18, (unint64_t *)&unk_269B03D28);
      }
      v8 += 8;
      --v7;
    }
    while (v7);
    goto LABEL_23;
  }
  __break(1u);
}

void sub_250E00D10(uint64_t a1, uint64_t a2, void *a3)
{
  swift_getObjCClassMetadata();
  id v4 = a3;
  static SleepingSampleDaySummaryQuery.configureClientInterface(_:)(v4);
}

uint64_t SleepingSampleDaySummaryQuery.client_logErrorAndKeepQueryActivated(error:queryUUID:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v31 = sub_250E24960();
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  int v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_250E24980();
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_250E24750();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = objc_msgSend(v3, sel_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = *(void *)(v5 + 80);
  *((void *)v16 + 3) = *(void *)(v5 + 88);
  *((void *)v16 + 4) = v3;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v14], v13, v10);
  uint64_t v17 = ObjectType;
  long long v18 = v29;
  *(void *)&v16[v15] = v29;
  *(void *)&v16[(v15 + 15) & 0xFFFFFFFFFFFFFFF8] = v17;
  aBlock[4] = sub_250E01F44;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_250D8A9AC;
  aBlock[3] = &block_descriptor_12;
  long long v19 = _Block_copy(aBlock);
  id v20 = v3;
  id v21 = v18;
  sub_250E24970();
  uint64_t v35 = MEMORY[0x263F8EE78];
  sub_250D94B8C(&qword_26B2078B8, MEMORY[0x263F8F030]);
  sub_250D8A4F4(0, &qword_26B2078D0, MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
  sub_250D87AFC();
  uint64_t v23 = v30;
  uint64_t v22 = v31;
  sub_250E25050();
  uint64_t v24 = v27;
  MEMORY[0x253389B40](0, v9, v23, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  return swift_release();
}

void sub_250E01184(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_250E24750();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E24DF0();
  uint64_t v13 = (uint64_t *)(a1 + qword_26B207E40);
  swift_beginAccess();
  *uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (qword_26B207980 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_250E24950();
  __swift_project_value_buffer(v14, (uint64_t)qword_26B207A58);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  id v15 = a3;
  id v16 = a3;
  uint64_t v17 = sub_250E24930();
  os_log_type_t v18 = sub_250E24F30();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    int v30 = (void *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = v31;
    *(_DWORD *)uint64_t v19 = 136446722;
    os_log_t v29 = v17;
    uint64_t v33 = a4;
    swift_getMetatypeMetadata();
    uint64_t v20 = sub_250E24C80();
    uint64_t v33 = sub_250D8B44C(v20, v21, &v32);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v22 = sub_250E24720();
    uint64_t v33 = sub_250D8B44C(v22, v23, &v32);
    sub_250E24FC0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_WORD *)(v19 + 22) = 2114;
    id v24 = a3;
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v33 = v25;
    sub_250E24FC0();
    uint64_t v26 = v30;
    *int v30 = v25;

    uint64_t v17 = v29;
    _os_log_impl(&dword_250D84000, v29, v18, "[%{public}s] Non-deactivating query error %s %{public}@", (uint8_t *)v19, 0x20u);
    sub_250DD88E4();
    swift_arrayDestroy();
    MEMORY[0x25338A890](v26, -1, -1);
    uint64_t v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x25338A890](v27, -1, -1);
    MEMORY[0x25338A890](v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v28 = *(void (**)(void *))(a1 + qword_26B20BBA0);
  if (v28)
  {
    swift_retain();
    v28(a3);
    sub_250D8C39C((uint64_t)v28);
  }
}

uint64_t sub_250E01580(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_250E24750();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24740();
  id v9 = a3;
  id v10 = a1;
  SleepingSampleDaySummaryQuery.client_logErrorAndKeepQueryActivated(error:queryUUID:)(v9, (uint64_t)v8);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id SleepingSampleDaySummaryQuery.__allocating_init(queryDescriptors:)()
{
  id v1 = objc_allocWithZone(v0);
  sub_250D98B48(0, (unint64_t *)&qword_26B2078F0);
  uint64_t v2 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithQueryDescriptors_, v2);

  return v3;
}

void SleepingSampleDaySummaryQuery.init(queryDescriptors:)()
{
}

void sub_250E01740()
{
}

id SleepingSampleDaySummaryQuery.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_250E017BC(uint64_t a1)
{
  sub_250D8A0DC(a1 + qword_26B20BB98);
  uint64_t v2 = a1 + qword_26B20BBA8;
  uint64_t v3 = sub_250E248B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  sub_250D8C39C(*(void *)(a1 + qword_26B207E30));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + qword_26B20BBA0);

  return sub_250D8C39C(v4);
}

uint64_t sub_250E01874(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void *a7)
{
  sub_250D8A4F4(0, a5, a6, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  sub_250D8A474(a1, (uint64_t)&v17 - v13, a5, a6);
  uint64_t v15 = *a2 + *a7;
  swift_beginAccess();
  sub_250D8A658((uint64_t)v14, v15, a5, a6);
  return swift_endAccess();
}

id SleepingSampleDaySummaryQueryConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SleepingSampleDaySummaryQueryConfiguration.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar];
  uint64_t v2 = sub_250E248B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = &v0[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange];
  sub_250D8CEA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v6, sel_init);
}

id SleepingSampleDaySummaryQueryConfiguration.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id SleepingSampleDaySummaryQueryConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_250E01AF0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_250E01B38()
{
  return (*(uint64_t (**)(void, void, uint64_t))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 1);
}

void sub_250E01B6C()
{
  if (!qword_26B2080D8)
  {
    type metadata accessor for SleepingSampleAggregateDaySummary();
    sub_250D94B8C(&qword_26B207EF0, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
    sub_250D94B8C(&qword_26B207ED8, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
    sub_250D94B8C(&qword_26B207EE0, (void (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary);
    unint64_t v0 = sub_250E24A00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2080D8);
    }
  }
}

void sub_250E01C70()
{
  if (!qword_26B2080C8)
  {
    type metadata accessor for SleepingSampleDaySummary();
    sub_250D94B8C((unint64_t *)&unk_26B207E20, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
    sub_250D94B8C(&qword_26B207E08, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
    sub_250D94B8C(&qword_26B207E10, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
    unint64_t v0 = sub_250E24A00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2080C8);
    }
  }
}

uint64_t sub_250E01D74()
{
  uint64_t v1 = sub_250E24750();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 57) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t sub_250E01E54()
{
  uint64_t v1 = sub_250E24750();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_250E01F44()
{
  uint64_t v1 = *(void *)(sub_250E24750() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void **)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_250E01184(v4, v0 + v2, v5, v6);
}

void sub_250E01FE0()
{
}

uint64_t sub_250E02010(uint64_t a1, unint64_t *a2)
{
  sub_250DB3724(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250E0206C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar, &qword_26B207F60, MEMORY[0x263F07920], a2);
}

uint64_t sub_250E02094(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_250E01874(a1, a2, a3, a4, &qword_26B207F60, MEMORY[0x263F07920], &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar);
}

uint64_t sub_250E020D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, a2);
}

uint64_t keypath_getTm_0@<X0>(void *a1@<X0>, void *a2@<X3>, unint64_t *a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a1 + *a2;
  swift_beginAccess();
  return sub_250D8A474(v8, a5, a3, a4);
}

uint64_t sub_250E02164(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_250E01874(a1, a2, a3, a4, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange);
}

void sub_250E021A4()
{
  sub_250D8CEA0();
  if (v0 <= 0x3F)
  {
    sub_250E248B0();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for SleepingSampleDaySummaryQuery(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleDaySummaryQuery);
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_250E022C0()
{
  return type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
}

void sub_250E022C8()
{
  sub_250D8A4F4(319, &qword_26B207F60, MEMORY[0x263F07920], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_250D8A4F4(319, &qword_26B2080F0, (uint64_t (*)(uint64_t))sub_250D8CEA0, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SleepingSampleDaySummaryQueryConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleDaySummaryQueryConfiguration);
}

uint64_t sub_250E02408()
{
  uint64_t v1 = sub_250E24750();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t DayIndex.formatted(dateStyle:gregorianCalendar:)()
{
  uint64_t v0 = sub_250E24670();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_250E24710();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E24B10();
  sub_250E24650();
  uint64_t v8 = sub_250E24700();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_250E02684(char *a1)
{
  sub_250D88890();
  uint64_t v101 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v100 = (char *)v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v99 = (char *)v86 - v6;
  sub_250D97944();
  uint64_t v8 = v7;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v122 = (uint64_t)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  int v121 = (char *)v86 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v119 = (uint64_t)v86 - v13;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v108 = (char *)v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v126 = (uint64_t)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v125 = (uint64_t)v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D92744(0, &qword_269B041A8, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)v86 - v21;
  uint64_t v110 = sub_250E24800();
  unint64_t v112 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v109 = (char *)v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_250E248B0();
  uint64_t v118 = *(void (***)(void, void))(v107 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v107);
  uint64_t v106 = (char *)v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)v86 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v124 = (char *)v86 - v29;
  uint64_t v105 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v123 = (uint64_t)v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_250E24B20();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  int v98 = (char *)v86 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v97 = (char *)v86 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v103 = (char *)v86 - v38;
  MEMORY[0x270FA5388](v37);
  unsigned __int8 v40 = (char *)v86 - v39;
  uint64_t v120 = v8;
  uint64_t v41 = &a1[*(int *)(v8 + 36)];
  uint64_t v42 = sub_250D94A28(&qword_26B2075B0);
  id v102 = v41;
  uint64_t v96 = v42;
  sub_250E24FF0();
  uint64_t v43 = v130;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v130)
  {
    uint64_t v130 = MEMORY[0x263F8EE78];
    uint64_t v45 = &v130;
    sub_250DBA3A4(0, v43 & ~(v43 >> 63), 0);
    uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 16);
    uint64_t v111 = v40;
    int v127 = v46;
    uint64_t v128 = v32 + 16;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v46)(v40, a1, v31);
    if ((v43 & 0x8000000000000000) == 0)
    {
      v86[1] = v1;
      unint64_t v47 = v112 + 104;
      uint64_t v95 = *(void (**)(char *, void, uint64_t))(v112 + 104);
      unint64_t v112 = v47;
      uint64_t v94 = (void (**)(char *, uint64_t))(v47 - 96);
      unsigned int v93 = *MEMORY[0x263F07740];
      int v91 = (void (**)(char *, char *, uint64_t))(v118 + 4);
      uint64_t v90 = (void (**)(char *, char *, uint64_t))(v118 + 2);
      uint64_t v89 = (void (**)(char *, uint64_t))(v118 + 1);
      uint64_t v117 = (char **)(v32 + 32);
      int v92 = a1;
      uint64_t v88 = v22;
      uint64_t v48 = (uint64_t *)v111;
      uint64_t v87 = v28;
      uint64_t v118 = (void (**)(void, void))(v32 + 8);
      while (v43)
      {
        uint64_t v113 = v43;
        uint64_t v50 = v109;
        uint64_t v49 = v110;
        v95(v109, v93, v110);
        sub_250E24810();
        (*v94)(v50, v49);
        sub_250E248C0();
        uint64_t v51 = sub_250E248E0();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v22, 1, v51);
        if (result == 1) {
          goto LABEL_21;
        }
        sub_250E248A0();
        unsigned __int8 v52 = v124;
        uint64_t v53 = v107;
        (*v91)(v124, v28, v107);
        int v54 = v103;
        uint64_t v55 = v127;
        v127((uint64_t)v103, (char *)v48, v31);
        uint64_t v56 = *v90;
        uint64_t v28 = v106;
        (*v90)(v106, v52, v53);
        uint64_t v57 = sub_250E243F0();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v125, 1, 1, v57);
        uint64_t v58 = sub_250E24710();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v126, 1, 1, v58);
        uint64_t v59 = v123;
        v55(v123, v54, v31);
        uint64_t v60 = (int *)v105;
        v56((char *)(v59 + *(int *)(v105 + 20)), v28, v53);
        sub_250D922D0(0);
        uint64_t v62 = (uint64_t)v108;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v108, 1, 1, v61);
        uint64_t v63 = *v89;
        (*v89)(v28, v53);
        uint64_t v116 = (void (*)(char *, uint64_t))*v118;
        v116(v54, v31);
        sub_250D91E4C(v62, v59 + v60[6], (uint64_t (*)(void))sub_250D91EB4);
        sub_250D91E4C(v125, v59 + v60[7], (uint64_t (*)(void))sub_250D927FC);
        sub_250D91E4C(v126, v59 + v60[8], (uint64_t (*)(void))sub_250D94D70);
        *(unsigned char *)(v59 + v60[9]) = 0;
        v63(v124, v53);
        uint64_t v64 = v130;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_250DBA3A4(0, *(void *)(v64 + 16) + 1, 1);
          uint64_t v64 = v130;
        }
        uint64_t v65 = (uint64_t)v102;
        unint64_t v47 = *(void *)(v64 + 16);
        unint64_t v66 = *(void *)(v64 + 24);
        if (v47 >= v66 >> 1)
        {
          sub_250DBA3A4(v66 > 1, v47 + 1, 1);
          uint64_t v64 = v130;
        }
        *(void *)(v64 + 16) = v47 + 1;
        sub_250D91E4C(v123, v64+ ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(void *)(v104 + 72) * v47, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
        uint64_t v67 = sub_250D94A28((unint64_t *)&qword_26B208148);
        uint64_t v68 = v92;
        uint64_t v45 = (uint64_t *)v31;
        if ((sub_250E24BB0() & 1) == 0) {
          goto LABEL_17;
        }
        uint64_t v69 = v101;
        int v70 = v99;
        uint64_t v71 = &v99[*(int *)(v101 + 48)];
        uint64_t v72 = v31;
        uint64_t v45 = (uint64_t *)v31;
        uint64_t v73 = (void (*)(char *, uint64_t, uint64_t *))v127;
        v127((uint64_t)v99, v68, v72);
        int v114 = v71;
        v73(v71, v65, v45);
        uint64_t v74 = v100;
        id v75 = &v100[*(int *)(v69 + 48)];
        v73(v100, (uint64_t)v70, v45);
        v73(v75, (uint64_t)v71, v45);
        int v76 = *v117;
        uint64_t v115 = v67;
        ((void (*)(char *, char *, uint64_t *))v76)(v121, v74, v45);
        int v77 = (void (*)(char *, uint64_t *))v116;
        v116(v75, (uint64_t)v45);
        uint64_t v78 = *(int *)(v69 + 48);
        uint64_t v79 = v119;
        uint64_t v80 = &v74[v78];
        ((void (*)(char *, char *, uint64_t *))v76)(v74, v70, v45);
        ((void (*)(char *, char *, uint64_t *))v76)(v80, v114, v45);
        uint64_t v81 = (uint64_t)v121;
        int v82 = &v121[*(int *)(v120 + 36)];
        int v114 = v76;
        ((void (*)(char *, char *, uint64_t *))v76)(v82, v80, v45);
        unint64_t v47 = (unint64_t)v77;
        v77(v74, v45);
        sub_250D91E4C(v81, v79, (uint64_t (*)(void))sub_250D97944);
        uint64_t v48 = (uint64_t *)v111;
        LOBYTE(v74) = sub_250E24BB0();
        uint64_t v28 = v98;
        v127((uint64_t)v98, (char *)v48, (uint64_t)v45);
        sub_250E05440(v79, v122, (uint64_t (*)(void))sub_250D97944);
        if ((v74 & 1) == 0) {
          goto LABEL_18;
        }
        uint64_t v83 = v122;
        char v84 = sub_250E24B90();
        sub_250E054A8(v83, (uint64_t (*)(void))sub_250D97944);
        uint64_t result = ((uint64_t (*)(char *, uint64_t *))v77)(v28, v45);
        if ((v84 & 1) == 0) {
          goto LABEL_19;
        }
        uint64_t v31 = (uint64_t)v45;
        sub_250E054A8(v119, (uint64_t (*)(void))sub_250D97944);
        uint64_t v129 = 1;
        uint64_t v85 = v97;
        uint64_t v45 = v48;
        sub_250E24FE0();
        ((void (*)(uint64_t *, uint64_t))v47)(v48, v31);
        ((void (*)(uint64_t *, char *, uint64_t))v114)(v48, v85, v31);
        uint64_t v43 = v113 - 1;
        uint64_t v22 = v88;
        uint64_t v28 = v87;
        if (v113 == 1)
        {
          ((void (*)(uint64_t *, uint64_t))v47)(v48, v31);
          return v130;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_250E054A8(v122, (uint64_t (*)(void))sub_250D97944);
      uint64_t result = ((uint64_t (*)(char *, uint64_t *))v47)(v28, v45);
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t static SleepingSampleAggregate.empty(in:calendar:)(char *a1)
{
  return sub_250E02684(a1);
}

uint64_t static SleepingSampleAggregate.empty(on:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v33 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v10;
  uint64_t v11 = sub_250E248B0();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v12 = v28;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_250E24B20();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v19(v18, a1, v15);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20(v14, v30, v11);
  uint64_t v21 = sub_250E243F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
  uint64_t v22 = sub_250E24710();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v33, 1, 1, v22);
  uint64_t v23 = v31;
  v19(v31, (uint64_t)v18, v15);
  uint64_t v24 = (int *)type metadata accessor for SleepingSampleAggregate();
  v20(&v23[v24[5]], (uint64_t)v14, v11);
  sub_250D922D0(0);
  uint64_t v26 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v32, 1, 1, v25);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_250D91E4C(v26, (uint64_t)&v23[v24[6]], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91E4C((uint64_t)v29, (uint64_t)&v23[v24[7]], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91E4C(v33, (uint64_t)&v23[v24[8]], (uint64_t (*)(void))sub_250D94D70);
  v23[v24[9]] = 0;
  return result;
}

id static SleepingSampleAggregate.asleep(on:for:ending:created:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char *a10)
{
  uint64_t v16 = self;
  uint64_t v17 = self;
  id result = objc_msgSend(v17, sel_minuteUnit);
  uint64_t v19 = 60 * a2;
  if ((unsigned __int128)(a2 * (__int128)60) >> 64 != (60 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  BOOL v20 = __OFADD__(v19, a3);
  uint64_t v21 = v19 + a3;
  if (v20)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v22 = result;
  id v23 = objc_msgSend(v16, sel_quantityWithUnit_doubleValue_, result, (double)v21);

  id v24 = objc_msgSend(v17, sel_secondUnit);
  objc_msgSend(v23, sel_doubleValueForUnit_, v24);
  double v26 = v25;

  return (id)static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)(a1, a4, a5, a6, a7, a8 & 1, a10, a9, v26);
}

uint64_t static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v72 = a7;
  int v83 = a6;
  uint64_t v84 = a5;
  uint64_t v85 = a4;
  uint64_t v74 = a2;
  uint64_t v87 = a8;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v86 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_250E243F0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v88 = v14;
  uint64_t v89 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250E24710();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v65[1] = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v65[0] = (char *)v65 - v22;
  MEMORY[0x270FA5388](v21);
  unint64_t v66 = (char *)v65 - v23;
  sub_250D94D70(0);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v82 = (uint64_t)v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)v65 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)v65 - v30;
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v90 = (uint64_t)v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_250E248B0();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)v65 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_250E24B20();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  id v75 = (char *)v65 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = v39;
  uint64_t v41 = *(void (**)(void))(v39 + 16);
  uint64_t v73 = v42;
  uint64_t v69 = v41;
  v41();
  uint64_t v78 = v34;
  uint64_t v79 = v35;
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 16);
  int v77 = v37;
  uint64_t v71 = v35 + 16;
  int v70 = v43;
  v43((uint64_t)v37, v72, v34);
  uint64_t v44 = self;
  id v45 = objc_msgSend(self, sel_secondUnit);
  id v68 = objc_msgSend(v44, sel_quantityWithUnit_doubleValue_, v45, a9);

  uint64_t v80 = a3;
  uint64_t v81 = a1;
  uint64_t v46 = v74;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v74, a3, (uint64_t)v31);
  sub_250E05440((uint64_t)v31, (uint64_t)v29, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v47 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v29, 1, v17) != 1)
  {
    uint64_t v48 = v66;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v66, v29, v17);
    uint64_t v49 = v65[0];
    (*(void (**)(void, char *, uint64_t))(v18 + 16))(v65[0], v48, v17);
    sub_250E246B0();
    uint64_t v50 = v67;
    sub_250E243D0();
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v51(v49, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v90, v50, v88);
    v51((uint64_t)v48, v17);
    uint64_t v47 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v90, v47, 1, v88);
  sub_250E054A8((uint64_t)v31, (uint64_t (*)(void))sub_250D94D70);
  if (v83) {
    uint64_t v52 = v80;
  }
  else {
    uint64_t v52 = v84;
  }
  if (v83) {
    uint64_t v53 = v46;
  }
  else {
    uint64_t v53 = v85;
  }
  uint64_t v54 = v82;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v53, v52, v82);
  uint64_t v55 = v87;
  uint64_t v56 = v75;
  uint64_t v57 = v73;
  ((void (*)(uint64_t, char *, uint64_t))v69)(v87, v75, v73);
  uint64_t v58 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v59 = v77;
  uint64_t v60 = v78;
  v70(v55 + v58[5], v77, v78);
  sub_250DB2068();
  id v61 = v68;
  uint64_t v62 = (uint64_t)v86;
  sub_250E249E0();
  sub_250D922D0(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v57);

  sub_250D91E4C(v62, v55 + v58[6], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91E4C(v90, v55 + v58[7], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91E4C(v54, v55 + v58[8], (uint64_t (*)(void))sub_250D94D70);
  *(unsigned char *)(v55 + v58[9]) = 4;
  return result;
}

uint64_t _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v68 = a4;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_250E24710();
  uint64_t v9 = *(void *)(v55 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v55);
  uint64_t v53 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v51 - v12;
  sub_250D94D70(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  unint64_t v66 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v51 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v51 - v19;
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v69 = (uint64_t)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_250E248B0();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_250E24B20();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v63 = v28;
  uint64_t v30 = *(void (**)(void))(v28 + 16);
  uint64_t v60 = v31;
  id v61 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v30;
  v30();
  uint64_t v64 = v24;
  uint64_t v65 = v23;
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 16);
  uint64_t v62 = v26;
  uint64_t v57 = v32;
  v32((uint64_t)v26, a3, v23);
  uint64_t v33 = self;
  id v34 = objc_msgSend(self, sel__countPerMinuteUnit);
  id v54 = objc_msgSend(v33, sel_quantityWithUnit_doubleValue_, v34, a5);

  uint64_t v35 = v55;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v58, v59, (uint64_t)v20);
  sub_250E05440((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v35) == 1)
  {
    uint64_t v36 = sub_250E243F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v69, 1, 1, v36);
  }
  else
  {
    uint64_t v37 = v52;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v52, v18, v35);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v53, v37, v35);
    uint64_t v38 = v69;
    sub_250E243D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v35);
    uint64_t v39 = sub_250E243F0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  sub_250E054A8((uint64_t)v20, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v40 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v66, 1, 1, v35);
  uint64_t v41 = v68;
  uint64_t v43 = v60;
  uint64_t v42 = v61;
  ((void (*)(uint64_t, char *, uint64_t))v56)(v68, v61, v60);
  uint64_t v44 = (int *)type metadata accessor for SleepingSampleAggregate();
  id v45 = v62;
  uint64_t v46 = v65;
  v57(v41 + v44[5], v62, v65);
  sub_250DB2068();
  id v47 = v54;
  uint64_t v48 = (uint64_t)v67;
  sub_250E249E0();
  sub_250D922D0(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v43);

  sub_250D91E4C(v48, v41 + v44[6], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91E4C(v69, v41 + v44[7], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91E4C(v40, v41 + v44[8], (uint64_t (*)(void))sub_250D94D70);
  *(unsigned char *)(v41 + v44[9]) = 4;
  return result;
}

uint64_t static SleepingSampleAggregate.spO2(on:pct:time:calendar:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v68 = a4;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_250E24710();
  uint64_t v9 = *(void *)(v55 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v55);
  uint64_t v53 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v51 - v12;
  sub_250D94D70(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  unint64_t v66 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v51 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v51 - v19;
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v69 = (uint64_t)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_250E248B0();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_250E24B20();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v63 = v28;
  uint64_t v30 = *(void (**)(void))(v28 + 16);
  uint64_t v60 = v31;
  id v61 = (char *)&v51 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v30;
  v30();
  uint64_t v64 = v24;
  uint64_t v65 = v23;
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 16);
  uint64_t v62 = v26;
  uint64_t v57 = v32;
  v32((uint64_t)v26, a3, v23);
  uint64_t v33 = self;
  id v34 = objc_msgSend(self, sel_percentUnit);
  id v54 = objc_msgSend(v33, sel_quantityWithUnit_doubleValue_, v34, a5 / 100.0);

  uint64_t v35 = v55;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v58, v59, (uint64_t)v20);
  sub_250E05440((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(void))sub_250D94D70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v35) == 1)
  {
    uint64_t v36 = sub_250E243F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v69, 1, 1, v36);
  }
  else
  {
    uint64_t v37 = v52;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v52, v18, v35);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v53, v37, v35);
    uint64_t v38 = v69;
    sub_250E243D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v35);
    uint64_t v39 = sub_250E243F0();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  sub_250E054A8((uint64_t)v20, (uint64_t (*)(void))sub_250D94D70);
  uint64_t v40 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v66, 1, 1, v35);
  uint64_t v41 = v68;
  uint64_t v43 = v60;
  uint64_t v42 = v61;
  ((void (*)(uint64_t, char *, uint64_t))v56)(v68, v61, v60);
  uint64_t v44 = (int *)type metadata accessor for SleepingSampleAggregate();
  id v45 = v62;
  uint64_t v46 = v65;
  v57(v41 + v44[5], v62, v65);
  sub_250DB2068();
  id v47 = v54;
  uint64_t v48 = (uint64_t)v67;
  sub_250E249E0();
  sub_250D922D0(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v43);

  sub_250D91E4C(v48, v41 + v44[6], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91E4C(v69, v41 + v44[7], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91E4C(v40, v41 + v44[8], (uint64_t (*)(void))sub_250D94D70);
  *(unsigned char *)(v41 + v44[9]) = 4;
  return result;
}

uint64_t static SleepingSampleAggregate.wtr(on:degC:start:end:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X8>, double a8@<D0>)
{
  uint64_t v50 = a7;
  uint64_t v51 = a6;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  sub_250D91EB4();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v49 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v52 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250E248B0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_250E24B20();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v40(v24, a1, v21);
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
  uint64_t v44 = v20;
  uint64_t v41 = v25;
  v25((uint64_t)v20, v51, v17);
  uint64_t v26 = self;
  id v27 = objc_msgSend(self, sel__changeInDegreeCelsiusUnit);
  id v28 = objc_msgSend(v26, sel_quantityWithUnit_doubleValue_, v27, a8);

  uint64_t v53 = v16;
  Calendar.dateInterval(start:end:onMorningIndex:)(v42, v43, v45, v46, (uint64_t)v16);
  uint64_t v29 = sub_250E243F0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v53, 0, 1, v29);
  uint64_t v30 = sub_250E24710();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v52, 1, 1, v30);
  uint64_t v31 = v50;
  v40(v50, (uint64_t)v24, v21);
  uint64_t v32 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v33 = v44;
  uint64_t v34 = v48;
  v41((uint64_t)&v31[v32[5]], v44, v48);
  sub_250DB2068();
  id v35 = v28;
  uint64_t v36 = (uint64_t)v49;
  sub_250E249E0();
  sub_250D922D0(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 0, 1, v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);

  sub_250D91E4C(v36, (uint64_t)&v31[v32[6]], (uint64_t (*)(void))sub_250D91EB4);
  sub_250D91E4C((uint64_t)v53, (uint64_t)&v31[v32[7]], (uint64_t (*)(void))sub_250D927FC);
  uint64_t result = sub_250D91E4C(v52, (uint64_t)&v31[v32[8]], (uint64_t (*)(void))sub_250D94D70);
  v31[v32[9]] = 4;
  return result;
}

uint64_t sub_250E05440(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250E054A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static SleepingSampleBaselineComparison.heart(_:on:calendar:hasBaseline:baselineCount:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0(6, 30, a2, (uint64_t)v20, a6 * 7.0 + 60.0);
  if (a3)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, a4, (uint64_t)v17);
    SleepingSampleBaseline.init(perMinute:_:_:iqr:)(0.0, 1, (uint64_t)v14, 53.0, 60.0, 67.0);
  }
  else
  {
    *uint64_t v17 = 6;
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v14, 1, 1, v21);
  }
  uint64_t v22 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v23 = a5 + *(int *)(v22 + 24);
  uint64_t v24 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  sub_250E068B0((uint64_t)v20, a5, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0((uint64_t)v17, a5 + *(int *)(v22 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768((uint64_t)v14, v23);
}

uint64_t static SleepingSampleBaselineComparison.empty(on:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v49 = a3;
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v48 = (char *)&v40 - v5;
  uint64_t v47 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v47);
  uint64_t v46 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_250D91EB4();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v51 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D927FC(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v50 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_250E248B0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  uint64_t v42 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250E24B20();
  uint64_t v43 = *(void *)(v17 - 8);
  uint64_t v18 = v43;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v22 = (int *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v25(v20, a1, v17);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v27 = v41;
  v26(v16, v45, v41);
  uint64_t v28 = sub_250E243F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v50, 1, 1, v28);
  uint64_t v29 = sub_250E24710();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v51, 1, 1, v29);
  v25(v24, (uint64_t)v20, v17);
  v26(&v24[v22[7]], (uint64_t)v16, v27);
  sub_250D922D0(0);
  uint64_t v31 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v44, 1, 1, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v27);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v17);
  sub_250E068B0(v31, (uint64_t)&v24[v22[8]], (uint64_t (*)(void))sub_250D91EB4);
  sub_250E068B0(v50, (uint64_t)&v24[v22[9]], (uint64_t (*)(void))sub_250D927FC);
  sub_250E068B0(v51, (uint64_t)&v24[v22[10]], (uint64_t (*)(void))sub_250D94D70);
  v24[v22[11]] = 0;
  uint64_t v32 = (uint64_t)v46;
  void *v46 = 6;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
  uint64_t v35 = (uint64_t)v48;
  v34(v48, 1, 1, v33);
  uint64_t v36 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v37 = v49;
  uint64_t v38 = v49 + *(int *)(v36 + 24);
  v34((char *)v38, 1, 1, v33);
  sub_250E068B0((uint64_t)v24, v37, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0(v32, v37 + *(int *)(v36 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768(v35, v38);
}

uint64_t static SleepingSampleBaselineComparison.spO2(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.spO2(on:pct:time:calendar:)(6, 30, a2, (uint64_t)v18, a5 + 95.0);
  if (a3)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(percent:_:_:iqr:)(0.0, 1, (uint64_t)v12, 94.0, 95.0, 96.0);
  }
  else
  {
    void *v15 = 6;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  uint64_t v20 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v21 = a4 + *(int *)(v20 + 24);
  uint64_t v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_250E068B0((uint64_t)v18, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.rr(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0(6, 30, a2, (uint64_t)v18, a5 + 15.0);
  if (a3)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(perMinute:_:_:iqr:)(0.0, 1, (uint64_t)v12, 14.0, 15.0, 16.0);
  }
  else
  {
    void *v15 = 6;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  uint64_t v20 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v21 = a4 + *(int *)(v20 + 24);
  uint64_t v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_250E068B0((uint64_t)v18, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.wtr(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.wtr(on:degC:start:end:calendar:)(a1, 23, 45, 6, 30, a2, v18, a5);
  if (a3)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(celsiusChange:_:_:iqr:)(0.0, 1, (uint64_t)v12, -1.0, 0.0, 1.0);
  }
  else
  {
    void *v15 = 6;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  uint64_t v20 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v21 = a4 + *(int *)(v20 + 24);
  uint64_t v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_250E068B0((uint64_t)v18, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.asleep(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_250D97A90(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)(a1, 6, 30, 0, 0, 1, a2, (uint64_t)v18, a5 * 3600.0 + 25200.0);
  if (a3)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(s:_:_:)((uint64_t)v12, 21600.0, 25200.0, 28800.0);
  }
  else
  {
    void *v15 = 6;
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  uint64_t v20 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v21 = a4 + *(int *)(v20 + 24);
  uint64_t v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_250E068B0((uint64_t)v18, a4, (uint64_t (*)(void))type metadata accessor for SleepingSampleAggregate);
  sub_250E068B0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_250D93768((uint64_t)v12, v21);
}

uint64_t sub_250E068B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t static HealthBalanceAnalyticsError.== infix(_:_:)()
{
  return 1;
}

uint64_t HealthBalanceAnalyticsError.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t HealthBalanceAnalyticsError.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t submitAnalytics(for:manager:)(void *a1, void *a2)
{
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(a1, sel_notification);
  id v8 = objc_msgSend(v7, sel_request);

  id v9 = objc_msgSend(v8, sel_content);
  id v10 = objc_msgSend(v9, sel_categoryIdentifier);

  uint64_t v11 = sub_250E24C60();
  uint64_t v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(v14);
  uint64_t v15 = LOBYTE(aBlock[0]);
  char v16 = 0;
  switch(LOBYTE(aBlock[0]))
  {
    case 1:
    case 3:
      return 0;
    case 2:
      uint64_t v15 = 1;
      char v16 = 1;
      goto LABEL_4;
    default:
LABEL_4:
      id v18 = objc_msgSend(a1, sel_actionIdentifier);
      uint64_t v19 = sub_250E24C60();
      uint64_t v21 = v20;

      if (v19 == sub_250E24C60() && v21 == v22)
      {
        char v23 = 2;
        swift_bridgeObjectRelease_n();
        if (a2)
        {
LABEL_7:
          id v24 = a2;
          goto LABEL_13;
        }
      }
      else
      {
        char v25 = sub_250E25400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v25) {
          char v23 = 2;
        }
        else {
          char v23 = 1;
        }
        if (a2) {
          goto LABEL_7;
        }
      }
      sub_250DB97B0();
      uint64_t v26 = (void *)sub_250E24FA0();
      id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
      id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A0C0]), sel_initWithLoggingCategory_healthDataSource_, v26, v27);

LABEL_13:
      uint64_t v28 = sub_250E24710();
      uint64_t v17 = 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v6, 1, 1, v28);
      type metadata accessor for HealthBalanceNotificationsAnalyticsEvent();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v15;
      *(unsigned char *)(v29 + 24) = v16;
      *(unsigned char *)(v29 + 25) = v23;
      sub_250D94D0C((uint64_t)v6, v29+ OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_250DBEA88;
      aBlock[3] = &block_descriptor_3;
      uint64_t v30 = _Block_copy(aBlock);
      id v31 = a2;
      objc_msgSend(v24, sel_submitEvent_completion_, v29, v30);

      _Block_release(v30);
      swift_release();
      return v17;
  }
}

unint64_t sub_250E06D48()
{
  unint64_t result = qword_269B042F0;
  if (!qword_269B042F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B042F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for HealthBalanceAnalyticsError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250E06E38);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceAnalyticsError()
{
  return &type metadata for HealthBalanceAnalyticsError;
}

uint64_t sub_250E06E70(uint64_t a1, uint64_t a2)
{
  sub_250D922D0(0);
  uint64_t v5 = v4;
  uint64_t v85 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DB8DC0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  Swift::String v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v16 = v15;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v70 - v20;
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v23 = MEMORY[0x270FA5388](SampleDaySummary);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v70 - v27;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29 == *(void *)(a2 + 16))
  {
    uint64_t v84 = (int *)v24;
    uint64_t v81 = v21;
    uint64_t v82 = v19;
    uint64_t v79 = v16;
    uint64_t v80 = v12;
    uint64_t v86 = v14;
    if (!v29 || a1 == a2) {
      return 1;
    }
    uint64_t v71 = v7;
    unint64_t v30 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v77 = a2;
    uint64_t v78 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
    uint64_t v75 = *(void *)(v25 + 72);
    uint64_t v76 = a1;
    int v70 = (void (**)(char *, uint64_t, uint64_t))(v85 + 32);
    uint64_t v72 = (void (**)(uint64_t, uint64_t))(v85 + 8);
    uint64_t v73 = v10;
    uint64_t v31 = v26;
    uint64_t v32 = (uint64_t)v28;
    uint64_t v33 = v84;
    while (1)
    {
      uint64_t v85 = v29;
      sub_250E09B58(a1 + v30, v32, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      unint64_t v83 = v30;
      sub_250E09B58(a2 + v30, v31, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      sub_250E24B20();
      sub_250D94BD4(&qword_26B2075B0, MEMORY[0x263F090E8]);
      sub_250E24FF0();
      if (v87) {
        break;
      }
      uint64_t v35 = v5;
      uint64_t v36 = v33[5];
      uint64_t v37 = v32 + v36;
      uint64_t v38 = v31 + v36;
      sub_250D94BD4(&qword_26B206F80, MEMORY[0x263F090E8]);
      char v39 = sub_250E24BF0();
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      uint64_t v41 = (uint64_t)v81;
      sub_250D8C6F4(v37, (uint64_t)v81, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
      uint64_t v42 = (uint64_t)v82;
      sub_250D8C6F4(v38, (uint64_t)v82, (unint64_t *)&qword_26B2081D0, v40);
      if ((v39 & 1) == 0)
      {
        uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
        sub_250D8F714(v42, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
        sub_250D8F714(v41, (unint64_t *)&qword_26B2081D0, v69);
        break;
      }
      char v43 = sub_250E24BF0();
      uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D870];
      sub_250D8F714(v42, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
      sub_250D8F714(v41, (unint64_t *)&qword_26B2081D0, v44);
      uint64_t v5 = v35;
      uint64_t v45 = (uint64_t)v86;
      uint64_t v33 = v84;
      if ((v43 & 1) == 0) {
        break;
      }
      uint64_t v46 = v84[6];
      uint64_t v47 = (void *)(v32 + v46);
      char v48 = *(unsigned char *)(v32 + v46 + 8);
      uint64_t v49 = (void *)(v31 + v46);
      int v50 = *(unsigned __int8 *)(v31 + v46 + 8);
      if (v48)
      {
        if (!v50) {
          break;
        }
      }
      else
      {
        if (*v47 != *v49) {
          LOBYTE(v50) = 1;
        }
        if (v50) {
          break;
        }
      }
      uint64_t v51 = v84[7];
      int v52 = *(unsigned __int8 *)(v32 + v51);
      int v53 = *(unsigned __int8 *)(v31 + v51);
      if (v52 == 5)
      {
        if (v53 != 5) {
          break;
        }
      }
      else if (v53 == 5 || v52 != v53)
      {
        break;
      }
      uint64_t v54 = v84[8];
      uint64_t v55 = v32 + v54;
      uint64_t v56 = v31 + v54;
      uint64_t v57 = (uint64_t)&v86[*(int *)(v80 + 48)];
      sub_250E09B58(v32 + v54, (uint64_t)v86, (uint64_t (*)(void))sub_250D91EB4);
      sub_250E09B58(v56, v57, (uint64_t (*)(void))sub_250D91EB4);
      uint64_t v58 = *v78;
      if ((*v78)(v45, 1, v5) == 1)
      {
        if (v58(v57, 1, v5) != 1) {
          goto LABEL_35;
        }
        sub_250E08FB0(v45, (uint64_t (*)(void))sub_250D91EB4);
      }
      else
      {
        uint64_t v74 = v56;
        uint64_t v59 = (uint64_t)v73;
        sub_250E09B58(v45, (uint64_t)v73, (uint64_t (*)(void))sub_250D91EB4);
        if (v58(v57, 1, v5) == 1)
        {
          (*v72)(v59, v5);
LABEL_35:
          sub_250E08FB0(v45, (uint64_t (*)(void))sub_250DB8DC0);
          break;
        }
        uint64_t v60 = v71;
        (*v70)(v71, v57, v5);
        sub_250E09BC0();
        char v61 = sub_250E24BF0();
        uint64_t v62 = *v72;
        (*v72)((uint64_t)v60, v5);
        v62(v59, v5);
        sub_250E08FB0((uint64_t)v86, (uint64_t (*)(void))sub_250D91EB4);
        uint64_t v56 = v74;
        if ((v61 & 1) == 0) {
          break;
        }
      }
      uint64_t BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
      if ((static TrainingLoadChronicBaseline.== infix(_:_:)(v55 + *(int *)(BaselineComparison + 20), v56 + *(int *)(BaselineComparison + 20)) & 1) == 0)break; {
      uint64_t v64 = *(int *)(BaselineComparison + 24);
      }
      uint64_t v65 = (double *)(v55 + v64);
      char v66 = *(unsigned char *)(v55 + v64 + 8);
      uint64_t v67 = (double *)(v56 + v64);
      int v68 = *(unsigned __int8 *)(v56 + v64 + 8);
      if (v66)
      {
        if (!v68) {
          break;
        }
      }
      else
      {
        if (*v65 != *v67) {
          LOBYTE(v68) = 1;
        }
        if (v68) {
          break;
        }
      }
      sub_250E08FB0(v31, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      sub_250E08FB0(v32, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      a1 = v76;
      unint64_t v30 = v83 + v75;
      uint64_t result = 1;
      uint64_t v29 = v85 - 1;
      a2 = v77;
      if (v85 == 1) {
        return result;
      }
    }
    sub_250E08FB0(v31, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
    sub_250E08FB0(v32, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
  }
  return 0;
}

uint64_t sub_250E07668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = a1 + 32;
    uint64_t v4 = a2 + 32;
    do
    {
      uint64_t v5 = sub_250E24C60();
      uint64_t v7 = v6;
      if (v5 == sub_250E24C60() && v7 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v10 = sub_250E25400();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
      v3 += 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_250E07740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleDaySummary() - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_250E09B58(a1 + v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
        sub_250E09B58(a2 + v12, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
        char v15 = static SleepingSampleDaySummary.== infix(_:_:)(v10, v7);
        sub_250E08FB0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
        sub_250E08FB0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t TrainingLoadSampleDaySummaryCollection.init(morningIndexRange:daySummaries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D88964(a1, a3, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t result = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for TrainingLoadSampleDaySummaryCollection()
{
  uint64_t result = qword_26B206F60;
  if (!qword_26B206F60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TrainingLoadSampleDaySummaryCollection.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250D8C6F4(v1, a1, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
}

uint64_t TrainingLoadSampleDaySummaryCollection.morningIndexRange.setter(uint64_t a1)
{
  return sub_250DD1D64(a1, v1);
}

uint64_t (*TrainingLoadSampleDaySummaryCollection.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummaryCollection.daySummaries.getter()
{
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();

  return swift_bridgeObjectRetain();
}

uint64_t TrainingLoadSampleDaySummaryCollection.daySummaries.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for TrainingLoadSampleDaySummaryCollection() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummaryCollection.daySummaries.modify())()
{
  return nullsub_1;
}

uint64_t static TrainingLoadSampleDaySummaryCollection.fake(inDayRange:separateByActivityType:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v144 = a2;
  uint64_t v128 = a3;
  uint64_t v162 = sub_250E24800();
  uint64_t v4 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v161 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_250E248B0();
  uint64_t v6 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  uint64_t v159 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  uint64_t v143 = *(void *)(SampleDaySummary - 8);
  uint64_t v9 = MEMORY[0x270FA5388](SampleDaySummary - 8);
  uint64_t v142 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v141 = (char *)&v127 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v140 = (char *)&v127 - v13;
  sub_250D88890();
  uint64_t v139 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v138 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v137 = (char *)&v127 - v17;
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v136 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v135 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v171 = (uint64_t)&v127 - v21;
  uint64_t v22 = sub_250E24B20();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v146 = (char *)&v127 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v148 = (char *)&v127 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v154 = (char *)&v127 - v32;
  MEMORY[0x270FA5388](v31);
  v153 = (char *)&v127 - v33;
  sub_250DDC7D4();
  uint64_t v151 = v34;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DDC838();
  uint64_t v38 = MEMORY[0x270FA5388](v37 - 8);
  uint64_t v147 = (uint64_t)&v127 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v145 = (char *)&v127 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v149 = (uint64_t)&v127 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v129 = (uint64_t)&v127 - v45;
  MEMORY[0x270FA5388](v44);
  uint64_t v170 = (uint64_t)&v127 - v46;
  sub_250E09AF4(0, (unint64_t *)&qword_26B207080, MEMORY[0x263F090E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v47 - 8);
  uint64_t v167 = (char *)&v127 - v48;
  sub_250E08E6C();
  uint64_t v50 = v49 - 8;
  MEMORY[0x270FA5388](v49);
  int v52 = (char *)&v127 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D8C6F4(a1, (uint64_t)v52, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v53 = *(int *)(v50 + 44);
  uint64_t v150 = v52;
  uint64_t v54 = (uint64_t)&v52[v53];
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v127 = a1;
  uint64_t v134 = v23 + 16;
  uint64_t v133 = v55;
  v55((char *)v54, a1, v22);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v23 += 56;
  uint64_t v169 = v56;
  v56(v54, 0, 1, v22);
  v168 = (uint64_t (**)(char *, uint64_t, uint64_t))(v23 - 8);
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t))(v23 - 24);
  uint64_t v174 = (void (**)(uint64_t, uint64_t))(v23 - 48);
  unsigned int v158 = *MEMORY[0x263F07740];
  uint64_t v157 = (void (**)(char *, void, uint64_t))(v4 + 104);
  uint64_t v156 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v155 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v58 = v26;
  unint64_t v59 = MEMORY[0x263F8EE78];
  uint64_t v152 = v36;
  uint64_t v166 = v23;
  uint64_t v164 = v26;
  uint64_t v173 = v54;
  uint64_t v132 = (void (**)(char *, uint64_t, uint64_t))(v23 - 24);
  uint64_t v131 = v22;
  while (1)
  {
    uint64_t v60 = v170;
    v169(v170, 1, 1, v22);
    uint64_t v61 = (uint64_t)&v36[*(int *)(v151 + 48)];
    sub_250E09B58(v54, (uint64_t)v36, (uint64_t (*)(void))sub_250DDC838);
    sub_250E09B58(v60, v61, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v62 = *v168;
    int v63 = (*v168)(v36, 1, v22);
    unint64_t v165 = v59;
    if (v63 == 1)
    {
      int v64 = v62((char *)v61, 1, v22);
      uint64_t v65 = v154;
      if (v64 == 1)
      {
        sub_250E08FB0((uint64_t)v36, (uint64_t (*)(void))sub_250DDC838);
        sub_250E08FB0(v170, (uint64_t (*)(void))sub_250DDC838);
LABEL_30:
        v169((uint64_t)v167, 1, 1, v22);
        sub_250E08FB0((uint64_t)v150, (uint64_t (*)(void))sub_250E08E6C);
        uint64_t v126 = v128;
        sub_250D8C6F4(v127, v128, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
        uint64_t result = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
        *(void *)(v126 + *(int *)(result + 20)) = v165;
        return result;
      }
      goto LABEL_9;
    }
    uint64_t v66 = v129;
    sub_250E09B58((uint64_t)v36, v129, (uint64_t (*)(void))sub_250DDC838);
    int v67 = v62((char *)v61, 1, v22);
    uint64_t v65 = v154;
    if (v67 == 1)
    {
      (*v174)(v66, v22);
LABEL_9:
      sub_250E08FB0((uint64_t)v36, (uint64_t (*)(void))sub_250DDC7D4);
      sub_250E08FB0(v170, (uint64_t (*)(void))sub_250DDC838);
      goto LABEL_11;
    }
    int v68 = *v57;
    uint64_t v69 = v153;
    (*v57)(v153, v129, v22);
    v68(v65, v61, v22);
    sub_250D94BD4(&qword_26B206F80, MEMORY[0x263F090E8]);
    char v70 = sub_250E24BF0();
    uint64_t v71 = *v174;
    (*v174)((uint64_t)v65, v22);
    v71((uint64_t)v69, v22);
    sub_250E08FB0((uint64_t)v152, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v65 = v154;
    sub_250E08FB0(v170, (uint64_t (*)(void))sub_250DDC838);
    if (v70) {
      goto LABEL_30;
    }
LABEL_11:
    uint64_t v72 = v173;
    uint64_t v73 = v149;
    sub_250E09B58(v173, v149, (uint64_t (*)(void))sub_250DDC838);
    uint64_t result = v62((char *)v73, 1, v22);
    if (result == 1) {
      goto LABEL_33;
    }
    uint64_t v75 = *v57;
    uint64_t v76 = v148;
    (*v57)(v148, v73, v22);
    v75(v167, (uint64_t)v76, v22);
    uint64_t v77 = v147;
    sub_250E09B58(v72, v147, (uint64_t (*)(void))sub_250DDC838);
    uint64_t result = v62((char *)v77, 1, v22);
    if (result == 1) {
      goto LABEL_34;
    }
    uint64_t v78 = v146;
    v75(v146, v77, v22);
    sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D94BD4(&qword_26B206F80, MEMORY[0x263F090E8]);
    char v79 = sub_250E24BF0();
    uint64_t v80 = (uint64_t)v145;
    if (v79)
    {
      uint64_t v172 = *v174;
      v172((uint64_t)v78, v22);
      uint64_t v81 = 1;
    }
    else
    {
      uint64_t v175 = 1;
      sub_250D94BD4(&qword_26B2075B0, MEMORY[0x263F090E8]);
      sub_250E24FE0();
      uint64_t v172 = *v174;
      v172((uint64_t)v78, v22);
      uint64_t v81 = 0;
    }
    uint64_t v82 = v169;
    v169(v80, v81, 1, v22);
    uint64_t v83 = v173;
    sub_250E08FB0(v173, (uint64_t (*)(void))sub_250DDC838);
    sub_250E090C4(v80, v83, (uint64_t (*)(void))sub_250DDC838);
    uint64_t v84 = v167;
    v82((uint64_t)v167, 0, 1, v22);
    uint64_t v85 = ((uint64_t (*)(char *, char *, uint64_t))v75)(v58, v84, v22);
    uint64_t result = sub_250E09018(v85, 200.0, 250.0);
    *(double *)&uint64_t v87 = v86;
    double v88 = v86 * 0.5;
    uint64_t v89 = v153;
    if (v88 > *(double *)&v87 * 1.5) {
      break;
    }
    sub_250E09018(result, v88, *(double *)&v87 * 1.5);
    double v91 = v90;
    sub_250E24AF0();
    sub_250E24AF0();
    sub_250D94BD4((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
    uint64_t result = sub_250E24BB0();
    if ((result & 1) == 0) {
      goto LABEL_32;
    }
    int v92 = v89;
    uint64_t v93 = v139;
    uint64_t v94 = v137;
    uint64_t v95 = (uint64_t)&v137[*(int *)(v139 + 48)];
    v75(v137, (uint64_t)v92, v22);
    uint64_t v163 = v95;
    v75((char *)v95, (uint64_t)v65, v22);
    uint64_t v96 = v138;
    uint64_t v97 = &v138[*(int *)(v93 + 48)];
    int v98 = v133;
    v133(v138, (uint64_t)v94, v22);
    v98(v97, v95, v22);
    int v99 = v135;
    v75(v135, (uint64_t)v96, v22);
    uint64_t v100 = v172;
    v172((uint64_t)v97, v22);
    uint64_t v101 = &v96[*(int *)(v93 + 48)];
    v75(v96, (uint64_t)v94, v22);
    v75(v101, v163, v22);
    v75(&v99[*(int *)(v136 + 36)], (uint64_t)v101, v22);
    v100((uint64_t)v96, v22);
    uint64_t v102 = (uint64_t)v99;
    uint64_t v103 = v171;
    sub_250D88964(v102, v171, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    uint64_t v104 = self;
    id v105 = objc_msgSend(v104, sel_kilocalorieUnit);
    uint64_t v106 = *v157;
    uint64_t v108 = v161;
    uint64_t v107 = v162;
    (*v157)(v161, v158, v162);
    uint64_t v109 = v159;
    sub_250E24810();
    uint64_t v110 = *v156;
    (*v156)(v108, v107);
    if (v144)
    {
      uint64_t v163 = v87;
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v164, (uint64_t)v105, v103, 1, v87, 0, 13, v140, v91, 0);

      uint64_t v130 = *v155;
      v130(v109, v160);
      unint64_t v111 = v165;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v111 = sub_250DCFA84(0, *(void *)(v111 + 16) + 1, 1, v111);
      }
      uint64_t v57 = v132;
      uint64_t v22 = v131;
      unint64_t v113 = *(void *)(v111 + 16);
      unint64_t v112 = *(void *)(v111 + 24);
      if (v113 >= v112 >> 1) {
        unint64_t v111 = sub_250DCFA84(v112 > 1, v113 + 1, 1, v111);
      }
      *(void *)(v111 + 16) = v113 + 1;
      unint64_t v114 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
      uint64_t v115 = *(void *)(v143 + 72);
      sub_250E090C4((uint64_t)v140, v111 + v114 + v115 * v113, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      id v116 = objc_msgSend(v104, sel_kilocalorieUnit);
      uint64_t v118 = v161;
      uint64_t v117 = v162;
      v106(v161, v158, v162);
      unint64_t v119 = v111;
      uint64_t v120 = v159;
      sub_250E24810();
      v110(v118, v117);
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v164, (uint64_t)v116, v171, 1, v163, 0, 37, v141, v91, 0);

      int v121 = v120;
      unint64_t v59 = v119;
      v130(v121, v160);
      unint64_t v122 = *(void *)(v119 + 16);
      unint64_t v123 = *(void *)(v59 + 24);
      if (v122 >= v123 >> 1) {
        unint64_t v59 = sub_250DCFA84(v123 > 1, v122 + 1, 1, v59);
      }
      uint64_t v36 = v152;
      *(void *)(v59 + 16) = v122 + 1;
      sub_250E090C4((uint64_t)v141, v59 + v114 + v122 * v115, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
      uint64_t v58 = v164;
      uint64_t v54 = v173;
    }
    else
    {
      uint64_t v58 = v164;
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v164, (uint64_t)v105, v103, 1, v87, 0, 0, v142, v91, 1u);

      (*v155)(v109, v160);
      unint64_t v59 = v165;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v59 = sub_250DCFA84(0, *(void *)(v59 + 16) + 1, 1, v59);
      }
      uint64_t v36 = v152;
      uint64_t v54 = v173;
      uint64_t v57 = v132;
      uint64_t v22 = v131;
      unint64_t v125 = *(void *)(v59 + 16);
      unint64_t v124 = *(void *)(v59 + 24);
      if (v125 >= v124 >> 1) {
        unint64_t v59 = sub_250DCFA84(v124 > 1, v125 + 1, 1, v59);
      }
      *(void *)(v59 + 16) = v125 + 1;
      sub_250E090C4((uint64_t)v142, v59+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(void *)(v143 + 72) * v125, (uint64_t (*)(void))type metadata accessor for TrainingLoadSampleDaySummary);
    }
    sub_250D8F714(v171, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    v172((uint64_t)v58, v22);
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_250E08E6C()
{
  if (!qword_269B03E58)
  {
    sub_250D8CA90(255, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250E08EEC();
    unint64_t v0 = sub_250E25200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03E58);
    }
  }
}

unint64_t sub_250E08EEC()
{
  unint64_t result = qword_269B03E60;
  if (!qword_269B03E60)
  {
    sub_250D8CA90(255, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D94BD4(&qword_26B2075B0, MEMORY[0x263F090E8]);
    sub_250DDAD38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03E60);
  }
  return result;
}

uint64_t sub_250E08FB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_250E09018(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  unint64_t result = MEMORY[0x25338A8A0](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    return sub_250E09018(v6, a2, a3);
  }
  return result;
}

uint64_t sub_250E090C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s13HealthBalance38TrainingLoadSampleDaySummaryCollectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  sub_250E24B20();
  sub_250D94BD4(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v11 = sub_250E24BF0();
  sub_250D8C6F4(a1, (uint64_t)v10, (unint64_t *)&qword_26B2081C0, v4);
  sub_250D8C6F4(a2, (uint64_t)v8, (unint64_t *)&qword_26B2081C0, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
    sub_250D8F714((uint64_t)v8, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    sub_250D8F714((uint64_t)v10, (unint64_t *)&qword_26B2081C0, v16);
    goto LABEL_5;
  }
  char v12 = sub_250E24BF0();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8D1A0];
  sub_250D8F714((uint64_t)v8, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  sub_250D8F714((uint64_t)v10, (unint64_t *)&qword_26B2081C0, v13);
  if ((v12 & 1) == 0)
  {
LABEL_5:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  char v15 = sub_250E06E70(*(void *)(a1 + *(int *)(SampleDaySummaryCollection + 20)), *(void *)(a2 + *(int *)(SampleDaySummaryCollection + 20)));
  return v15 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadSampleDaySummaryCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_250E24B20();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TrainingLoadSampleDaySummaryCollection(uint64_t a1)
{
  uint64_t v2 = sub_250E24B20();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v3(a1 + *(int *)(v4 + 36), v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250E09878);
}

uint64_t sub_250E09878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250E09968);
}

void sub_250E09968(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_250D8CA90(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void sub_250E09A40()
{
  sub_250D8CA90(319, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_250E09AF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_250E09B58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_250E09BC0()
{
  unint64_t result = qword_269B03A70;
  if (!qword_269B03A70)
  {
    sub_250D922D0(255);
    sub_250D94BD4(&qword_269B038D8, (void (*)(uint64_t))sub_250DB2068);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B03A70);
  }
  return result;
}

id SleepingSampleChangeNotificationSettingsProvider.defaults.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__allocating_init(defaults:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.init(defaults:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter()
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  sub_250E24C60();
  id v2 = v1;
  uint64_t v3 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v4 = objc_msgSend(v2, sel_hk_safeNumberIfExistsForKeyPath_error_, v3, v10);

  if (v4)
  {
    id v5 = v10[0];
    id v6 = objc_msgSend(v4, sel_BOOLValue);
  }
  else
  {
    id v7 = v10[0];
    unint64_t v8 = (void *)sub_250E24560();

    swift_willThrow();
    return 2;
  }
  return (uint64_t)v6;
}

void SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(unsigned __int8 a1)
{
  int v2 = a1;
  uint64_t v30 = sub_250E24710();
  uint64_t v3 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  id v5 = (char *)&v31[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D94D70(0);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v31[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v1 + 16);
  id v10 = v9;
  if (v2 == 2) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = sub_250E24E40();
  }
  sub_250E24C60();
  char v12 = (void *)sub_250E24C30();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setObject_forKey_, v11, v12);

  swift_unknownObjectRelease();
  sub_250E0A1C8();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_250E264E0;
  *(void *)(inited + 32) = sub_250E24C60();
  *(void *)(inited + 40) = v14;
  uint64_t v15 = sub_250E0C228(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v31[8] = v15;
  if (v2 == 2)
  {
    id v16 = v9;
    uint64_t v17 = (void *)sub_250E24C30();
    objc_msgSend(v16, sel_setURL_forKey_, 0, v17);

    sub_250E0AB98(v31, 0xD00000000000002DLL, 0x8000000250E2DF30);
    swift_bridgeObjectRelease();
    uint64_t v18 = v30;
  }
  else
  {
    SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter((uint64_t)v8);
    uint64_t v18 = v30;
    int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v30);
    sub_250DF1908((uint64_t)v8);
    if (v19 == 1)
    {
      id v20 = v9;
      sub_250E246F0();
      sub_250E24640();
      double v22 = v21;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
      uint64_t v23 = (void *)sub_250E24C30();
      objc_msgSend(v20, sel_setDouble_forKey_, v23, v22);

      sub_250E0AB98(v31, 0xD00000000000002DLL, 0x8000000250E2DF30);
      swift_bridgeObjectRelease();
    }
  }
  id v24 = v9;
  sub_250E246F0();
  sub_250E24640();
  double v26 = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
  uint64_t v27 = (void *)sub_250E24C30();
  objc_msgSend(v24, sel_setDouble_forKey_, v27, v26);

  id v28 = (id)*MEMORY[0x263F0ACE8];
  uint64_t v29 = (void *)sub_250E24EA0();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();
}

void sub_250E0A1C8()
{
  if (!qword_269B03D40)
  {
    unint64_t v0 = sub_250E253E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B03D40);
    }
  }
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250E0A514(a1);
}

void (*SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  return sub_250E0A2D8;
}

void sub_250E0A2D8(uint64_t a1)
{
}

void SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(uint64_t a1, char a2)
{
  id v4 = *(id *)(v2 + 16);
  if (a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = sub_250E24EC0();
  }
  uint64_t v6 = (void *)sub_250E24C30();
  objc_msgSend(v4, sel_setObject_forKey_, v5, v6);

  swift_unknownObjectRelease();
  id v7 = (id)*MEMORY[0x263F0ACE8];
  sub_250E0C228((uint64_t)&unk_2701E6FD0);
  swift_arrayDestroy();
  id v8 = (id)sub_250E24EA0();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();
}

void (*SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return sub_250E0A474;
}

void sub_250E0A474(uint64_t a1)
{
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsLastUpdatedLocally.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250E0A514(a1);
}

uint64_t sub_250E0A514@<X0>(uint64_t a1@<X8>)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  id v3 = *(id *)(v1 + 16);
  id v4 = (void *)sub_250E24C30();
  v12[0] = 0;
  id v5 = objc_msgSend(v3, sel_hk_safeNumberIfExistsForKeyPath_error_, v4, v12);

  if (v5)
  {
    id v6 = v12[0];
    objc_msgSend(v5, sel_doubleValue);
    sub_250E24630();

    uint64_t v7 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  else
  {
    id v9 = v12[0];
    id v10 = (void *)sub_250E24560();

    swift_willThrow();
    uint64_t v11 = sub_250E24710();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(char a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (a1)
  {
    id v3 = v2;
    uint64_t v4 = sub_250E25440();
  }
  else
  {
    id v5 = v2;
    uint64_t v4 = 0;
  }
  id v6 = (void *)sub_250E24C30();
  objc_msgSend(v2, sel_setObject_forKey_, v4, v6);

  swift_unknownObjectRelease();
  id v7 = (id)*MEMORY[0x263F0ACE8];
  sub_250E0C228((uint64_t)&unk_2701E7000);
  swift_arrayDestroy();
  id v8 = (void *)sub_250E24EA0();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();
}

void (*SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  return sub_250E0A7F8;
}

void sub_250E0A7F8(uint64_t a1)
{
}

Swift::Void __swiftcall SleepingSampleChangeNotificationSettingsProvider.resetAll()()
{
  SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(0, 1);
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(2u);

  SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(0);
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.deinit()
{
  return v0;
}

unint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.keyPath.getter()
{
  return 0xD000000000000018;
}

uint64_t static SleepingSampleChangeNotificationSettingsProvider.ObservableKey.== infix(_:_:)()
{
  return 1;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.hash(into:)()
{
  return sub_250E254C0();
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.hashValue.getter()
{
  return sub_250E254F0();
}

void SleepingSampleChangeNotificationSettingsProvider.registerObserver(_:for:)(uint64_t a1)
{
  id v3 = *(id *)(v1 + 16);
  id v4 = (id)sub_250E24C30();
  objc_msgSend(v3, sel_addObserver_forKeyPath_options_context_, a1, v4, 0, 0);
}

void SleepingSampleChangeNotificationSettingsProvider.unregisterObserver(_:for:)(uint64_t a1)
{
  id v3 = *(id *)(v1 + 16);
  id v4 = (id)sub_250E24C30();
  objc_msgSend(v3, sel_removeObserver_forKeyPath_, a1, v4);
}

uint64_t sub_250E0AA1C(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_250E25070();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      sub_250DD060C(*(void *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      char v11 = MEMORY[0x253389C50](v16, a2);
      sub_250DA28C8((uint64_t)v16);
      if (v11) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_250DA28C8(a2);
    sub_250DD060C(*(void *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_250DD060C(a2, (uint64_t)v16);
    uint64_t v15 = *v3;
    *id v3 = 0x8000000000000000;
    sub_250E0B31C((uint64_t)v16, v9, isUniquelyReferenced_nonNull_native);
    *id v3 = v15;
    swift_bridgeObjectRelease();
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_250E0AB98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_250E254B0();
  swift_bridgeObjectRetain();
  sub_250E24CC0();
  uint64_t v8 = sub_250E254F0();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_250E25400() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_250E25400() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *id v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_250E0B488(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *id v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_250E0AD48()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_250E0C720(0, &qword_269B04320);
  uint64_t v3 = sub_250E250B0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = sub_250E25070();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_250E0B028()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_250E0C720(0, &qword_269B04318);
  uint64_t v3 = sub_250E250B0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_250E254B0();
      sub_250E24CC0();
      uint64_t result = sub_250E254F0();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_250E0B31C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_250E0AD48();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_250E0B624();
      goto LABEL_12;
    }
    sub_250E0B9D0();
  }
  uint64_t v9 = *v3;
  uint64_t result = sub_250E25070();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_250DD060C(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = MEMORY[0x253389C50](v19, v6);
      uint64_t result = sub_250DA28C8((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_250E25450();
  __break(1u);
  return result;
}

uint64_t sub_250E0B488(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_250E0B028();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_250E0B808();
      goto LABEL_22;
    }
    sub_250E0BC78();
  }
  uint64_t v11 = *v4;
  sub_250E254B0();
  sub_250E24CC0();
  uint64_t result = sub_250E254F0();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    long long v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_250E25400(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_250E25450();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_250E25400();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  uint64_t *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_250E0B624()
{
  uint64_t v1 = v0;
  sub_250E0C720(0, &qword_269B04320);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_250E250A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_250DD060C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_250E0B808()
{
  uint64_t v1 = v0;
  sub_250E0C720(0, &qword_269B04318);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_250E250A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    long long v19 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_250E0B9D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_250E0C720(0, &qword_269B04320);
  uint64_t v3 = sub_250E250B0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_250DD060C(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = sub_250E25070();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_250E0BC78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_250E0C720(0, &qword_269B04318);
  uint64_t v3 = sub_250E250B0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_250E254B0();
    swift_bridgeObjectRetain();
    sub_250E24CC0();
    uint64_t result = sub_250E254F0();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_250E0BF3C(uint64_t a1)
{
  uint64_t v2 = sub_250E25580();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_250E0C65C();
    uint64_t v9 = sub_250E250C0();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_250E0C6DC(&qword_269B04308);
      uint64_t v16 = sub_250E24B60();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_250E0C6DC(&qword_269B04310);
          char v23 = sub_250E24BF0();
          unint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_250E0C228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_250E0C720(0, &qword_269B04318);
    uint64_t v3 = sub_250E250C0();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_250E254B0();
      swift_bridgeObjectRetain();
      sub_250E24CC0();
      uint64_t result = sub_250E254F0();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_250E25400(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_250E25400();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

unint64_t sub_250E0C3E4()
{
  unint64_t result = qword_269B042F8;
  if (!qword_269B042F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B042F8);
  }
  return result;
}

uint64_t sub_250E0C438@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  *a1 = result;
  return result;
}

void sub_250E0C464(unsigned __int8 *a1)
{
}

id sub_250E0C48C@<X0>(uint64_t a1@<X8>)
{
  id result = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_250E0C4C0(uint64_t a1)
{
}

BOOL sub_250E0C4F4@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  *a1 = result;
  return result;
}

void sub_250E0C524(char *a1)
{
}

uint64_t method lookup function for SleepingSampleChangeNotificationSettingsProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SleepingSampleChangeNotificationSettingsProvider);
}

uint64_t dispatch thunk of SleepingSampleChangeNotificationSettingsProvider.__allocating_init(defaults:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleChangeNotificationSettingsProvider.ObservableKey(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *BOOL result = a2;
        return result;
      case 2:
        *(_WORD *)BOOL result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)BOOL result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *BOOL result = 0;
      break;
    case 2:
      *(_WORD *)BOOL result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250E0C614);
    case 4:
      *(_DWORD *)BOOL result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotificationSettingsProvider.ObservableKey()
{
  return &type metadata for SleepingSampleChangeNotificationSettingsProvider.ObservableKey;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotificationSettingsProvider.UncheckedSendableUserDefaults()
{
  return &type metadata for SleepingSampleChangeNotificationSettingsProvider.UncheckedSendableUserDefaults;
}

void sub_250E0C65C()
{
  if (!qword_269B04300)
  {
    sub_250E25580();
    sub_250E0C6DC(&qword_269B04308);
    unint64_t v0 = sub_250E250D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B04300);
    }
  }
}

uint64_t sub_250E0C6DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_250E25580();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250E0C720(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_250E250D0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

id HKTableFormatter.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v7 = (void *)sub_250E24DB0();
  id v8 = objc_msgSend(v6, sel_initWithColumnTitles_, v7);

  uint64_t v9 = *(void *)(a1 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20));
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    type metadata accessor for GregorianDayRange();
    uint64_t v11 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    id v13 = v8;
    swift_bridgeObjectRetain();
    do
    {
      sub_250E0E894(v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      sub_250E0C940((uint64_t)v5);
      sub_250E0E8FC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
      v11 += v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_250E0E8FC(a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummaryCollection);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_250E0C940(uint64_t a1)
{
  uint64_t v234 = sub_250E255B0();
  uint64_t v233 = *(void *)(v234 - 8);
  MEMORY[0x270FA5388](v234);
  uint64_t v232 = (uint64_t)&v225 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E0E45C(0, &qword_269B037D8, &qword_269B037E0, 0x263F08D20, MEMORY[0x263F061F0]);
  uint64_t v231 = v3;
  uint64_t v230 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v229 = (uint64_t)&v225 - v4;
  sub_250E0E45C(0, &qword_269B037E8, &qword_269B037E0, 0x263F08D20, MEMORY[0x263F06210]);
  uint64_t v228 = v5;
  uint64_t v227 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v226 = (char *)&v225 - v6;
  uint64_t v7 = sub_250E245C0();
  uint64_t v247 = *(void *)(v7 - 8);
  uint64_t v248 = v7;
  MEMORY[0x270FA5388](v7);
  v245 = (char *)&v225 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = sub_250E24610();
  uint64_t v256 = *(void *)(v246 - 8);
  MEMORY[0x270FA5388](v246);
  uint64_t v261 = (char *)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D9B940(0, &qword_269B037F0, (uint64_t (*)(void))sub_250D9B8EC, MEMORY[0x263F8D538], MEMORY[0x263F06DA8]);
  uint64_t v260 = v10;
  uint64_t v257 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v244 = (char *)&v225 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v258 = (char *)&v225 - v14;
  MEMORY[0x270FA5388](v13);
  v259 = (char *)&v225 - v15;
  sub_250D91EB4();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v240 = (char *)&v225 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v239 = (char *)&v225 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v238 = (char *)&v225 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v237 = (char *)&v225 - v24;
  MEMORY[0x270FA5388](v23);
  v249 = (char *)&v225 - v25;
  uint64_t v255 = sub_250E245E0();
  uint64_t v253 = *(void *)(v255 - 8);
  MEMORY[0x270FA5388](v255);
  uint64_t v252 = (char *)&v225 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_250E247F0();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v254 = (char *)&v225 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D9B940(0, (unint64_t *)&qword_269B03800, (uint64_t (*)(void))sub_250D9B9A8, MEMORY[0x263F8D6C8], MEMORY[0x263F068B8]);
  uint64_t v30 = (char *)*(v29 - 1);
  v250 = (uint64_t (*)(void, void, void))v29;
  uint64_t v251 = v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v242 = (char *)&v225 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v243 = (void (**)(uint64_t, char *))((char *)&v225 - v33);
  uint64_t v262 = (void *)sub_250E24670();
  uint64_t v34 = *(v262 - 1);
  MEMORY[0x270FA5388](v262);
  uint64_t v36 = (char *)&v225 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v236 = sub_250E24710();
  uint64_t v37 = *(void *)(v236 - 8);
  MEMORY[0x270FA5388](v236);
  uint64_t v39 = (char *)&v225 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = sub_250E246A0();
  uint64_t v40 = *(void *)(v235 - 8);
  MEMORY[0x270FA5388](v235);
  uint64_t v42 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E0A1C8();
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_250E2BB50;
  sub_250E24660();
  uint64_t v44 = a1;
  sub_250E24B10();
  sub_250E24650();
  uint64_t v45 = sub_250E24700();
  uint64_t v47 = v46;
  (*(void (**)(char *, void *))(v34 + 8))(v36, v262);
  (*(void (**)(char *, unint64_t))(v37 + 8))(v39, v236);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v235);
  *(void *)(v43 + 32) = v45;
  *(void *)(v43 + 40) = v47;
  uint64_t v262 = (void *)v43;
  uint64_t v48 = v44;
  uint64_t v264 = sub_250E24AE0();
  sub_250E247D0();
  sub_250D9B9A8();
  uint64_t v49 = v242;
  sub_250E24520();
  uint64_t v50 = v252;
  sub_250E245D0();
  uint64_t v51 = v243;
  int v52 = v250;
  MEMORY[0x253389100](v50, v250);
  (*(void (**)(char *, uint64_t))(v253 + 8))(v50, v255);
  uint64_t v53 = (void (*)(void, void))*((void *)v251 + 1);
  v53(v49, v52);
  sub_250D9B9FC();
  sub_250E25020();
  uint64_t v54 = (uint64_t)v249;
  v53(v51, v52);
  uint64_t v253 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v55 = *(int *)(v253 + 32);
  uint64_t v255 = v48;
  unint64_t v56 = v48 + v55;
  uint64_t v252 = (char *)type metadata accessor for SleepingSampleAggregate();
  sub_250E0E894(v56 + *((int *)v252 + 6), v54, (uint64_t (*)(void))sub_250D91EB4);
  sub_250E0E45C(0, &qword_26B208150, (unint64_t *)&qword_26B208158, 0x263F0A630, MEMORY[0x263F08F88]);
  uint64_t v58 = v57;
  unint64_t v59 = (char *)*((void *)v57 - 1);
  v250 = (uint64_t (*)(void, void, void))*((void *)v59 + 6);
  uint64_t v251 = v59 + 48;
  int v60 = v250(v54, 1, v57);
  uint64_t v62 = v259;
  uint64_t v61 = v260;
  int v63 = v261;
  int v64 = v258;
  uint64_t v243 = (void (**)(uint64_t, char *))v59;
  v242 = v58;
  if (v60 == 1)
  {
    sub_250E0E8FC(v54, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v65 = 0xA600000000000000;
    uint64_t v66 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v67 = sub_250E249B0();
    unint64_t v236 = v56;
    int v68 = (void *)v67;
    (*((void (**)(uint64_t, char *))v59 + 1))(v54, v58);
    id v69 = objc_msgSend(self, sel__countPerMinuteUnit);
    objc_msgSend(v68, sel_doubleValueForUnit_, v69);
    uint64_t v263 = v70;
    sub_250E247D0();
    sub_250D9B8EC();
    sub_250E24580();
    uint64_t v71 = v63;
    sub_250E245F0();
    uint64_t v72 = v62;
    MEMORY[0x253389160](v71, v61);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v71, v246);
    uint64_t v73 = *(void (**)(char *, uint64_t))(v257 + 8);
    v73(v64, v61);
    sub_250D9BC80();
    sub_250E24B30();
    v73(v72, v61);

    uint64_t v66 = v264;
    unint64_t v65 = v265;
  }
  uint64_t v74 = v262;
  v262[8] = v66;
  v74[9] = v65;
  LOBYTE(v264) = 0;
  uint64_t v75 = (char *)self;
  uint64_t v76 = (objc_class *)objc_msgSend(v75, sel__countPerMinuteUnit);
  v77.super.Class isa = v76;
  uint64_t v78 = sub_250E0E4C4((char *)&v264, v77);
  uint64_t v80 = v79;

  v74[10] = v78;
  v74[11] = v80;
  uint64_t v81 = SleepingSampleBaselineComparison.relativeComparison.getter();
  uint64_t v82 = v247;
  uint64_t v83 = v248;
  v249 = v75;
  if (v84)
  {
    unint64_t v95 = 0xA600000000000000;
    uint64_t v96 = 0x9380E29380E2;
    uint64_t v90 = v246;
  }
  else
  {
    uint64_t v263 = v81;
    sub_250E247D0();
    unint64_t v236 = sub_250D9B8EC();
    uint64_t v85 = v244;
    sub_250E24580();
    double v86 = v261;
    sub_250E245F0();
    uint64_t v87 = v258;
    uint64_t v88 = v260;
    MEMORY[0x253389160](v86, v260);
    uint64_t v89 = v86;
    uint64_t v90 = v246;
    (*(void (**)(char *, uint64_t))(v256 + 8))(v89, v246);
    double v91 = *(void (**)(char *, uint64_t))(v257 + 8);
    v91(v85, v88);
    int v92 = v245;
    sub_250E245B0();
    uint64_t v93 = v259;
    MEMORY[0x253389140](v92, v88);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v92, v83);
    v91(v87, v88);
    sub_250D9BC80();
    sub_250E24B30();
    uint64_t v94 = v88;
    uint64_t v75 = v249;
    v91(v93, v94);
    uint64_t v96 = v264;
    unint64_t v95 = v265;
  }
  uint64_t v97 = (uint64_t)v237;
  int v98 = v262;
  v262[12] = v96;
  v98[13] = v95;
  sub_250E0E894(v255 + *(int *)(v253 + 36) + *((int *)v252 + 6), v97, (uint64_t (*)(void))sub_250D91EB4);
  int v99 = v242;
  if (v250(v97, 1, v242) == 1)
  {
    sub_250E0E8FC(v97, (uint64_t (*)(void))sub_250D91EB4);
    object = (void *)0xA600000000000000;
    uint64_t countAndFlagsBits = 0x9380E29380E2;
  }
  else
  {
    uint64_t v102 = (void *)sub_250E249B0();
    v243[1](v97, v99);
    LOBYTE(v264) = 2;
    id v103 = objc_msgSend(v75, sel_percentUnit);
    Swift::String v104 = HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v264, (HKUnit)v103);
    uint64_t countAndFlagsBits = v104._countAndFlagsBits;
    object = v104._object;
  }
  id v105 = v258;
  uint64_t v106 = v75;
  uint64_t v107 = v261;
  uint64_t v108 = v262;
  v262[14] = countAndFlagsBits;
  v108[15] = object;
  LOBYTE(v264) = 2;
  uint64_t v109 = (objc_class *)objc_msgSend(v106, sel_percentUnit);
  v110.super.Class isa = v109;
  uint64_t v111 = sub_250E0E4C4((char *)&v264, v110);
  uint64_t v113 = v112;

  v108[16] = v111;
  v108[17] = v113;
  uint64_t v114 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v115)
  {
    unint64_t v122 = 0xA600000000000000;
    uint64_t v123 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v263 = v114;
    sub_250E247D0();
    sub_250D9B8EC();
    id v116 = v244;
    sub_250E24580();
    sub_250E245F0();
    uint64_t v117 = v260;
    MEMORY[0x253389160](v107, v260);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v107, v90);
    uint64_t v118 = *(void (**)(char *, uint64_t))(v257 + 8);
    v118(v116, v117);
    unint64_t v119 = v245;
    sub_250E245B0();
    uint64_t v120 = v105;
    int v121 = v259;
    MEMORY[0x253389140](v119, v117);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v119, v248);
    v118(v120, v117);
    sub_250D9BC80();
    sub_250E24B30();
    v118(v121, v117);
    uint64_t v123 = v264;
    unint64_t v122 = v265;
  }
  uint64_t v124 = (uint64_t)v238;
  unint64_t v125 = v262;
  v262[18] = v123;
  v125[19] = v122;
  sub_250E0E894(v255 + *(int *)(v253 + 40) + *((int *)v252 + 6), v124, (uint64_t (*)(void))sub_250D91EB4);
  int v126 = v250(v124, 1, v99);
  uint64_t v127 = v249;
  if (v126 == 1)
  {
    sub_250E0E8FC(v124, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v128 = 0xA600000000000000;
    uint64_t v129 = 0x9380E29380E2;
    unint64_t v130 = 0x26535A000;
  }
  else
  {
    uint64_t v131 = (void *)sub_250E249B0();
    v243[1](v124, v99);
    unint64_t v130 = 0x26535A000uLL;
    id v132 = objc_msgSend(v127, sel__countPerMinuteUnit);
    objc_msgSend(v131, sel_doubleValueForUnit_, v132);
    uint64_t v263 = v133;
    sub_250E247D0();
    sub_250D9B8EC();
    uint64_t v134 = v258;
    sub_250E24580();
    uint64_t v264 = 1;
    sub_250D9BBD8();
    sub_250D94C1C(&qword_269B03830, (void (*)(uint64_t))sub_250D9BBD8);
    uint64_t v135 = v261;
    sub_250E24600();
    uint64_t v136 = v259;
    uint64_t v137 = v90;
    uint64_t v138 = v260;
    MEMORY[0x253389160](v135, v260);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v135, v137);
    uint64_t v139 = *(void (**)(char *, uint64_t))(v257 + 8);
    v139(v134, v138);
    sub_250D9BC80();
    sub_250E24B30();
    uint64_t v140 = v136;
    uint64_t v127 = v249;
    v139(v140, v138);

    uint64_t v129 = v264;
    unint64_t v128 = v265;
  }
  uint64_t v141 = v262;
  v262[20] = v129;
  v141[21] = v128;
  LOBYTE(v264) = 1;
  uint64_t v142 = (objc_class *)[v127 *(SEL *)(v130 + 3304)];
  v143.super.Class isa = v142;
  uint64_t v144 = sub_250E0E4C4((char *)&v264, v143);
  uint64_t v146 = v145;

  v141[22] = v144;
  v141[23] = v146;
  uint64_t v147 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v148)
  {
    unint64_t v159 = 0xA600000000000000;
    uint64_t v160 = 0x9380E29380E2;
    uint64_t v154 = v246;
  }
  else
  {
    uint64_t v263 = v147;
    sub_250E247D0();
    sub_250D9B8EC();
    uint64_t v149 = v244;
    sub_250E24580();
    uint64_t v150 = v261;
    sub_250E245F0();
    uint64_t v151 = v258;
    uint64_t v152 = v260;
    MEMORY[0x253389160](v150, v260);
    v153 = v150;
    uint64_t v154 = v246;
    (*(void (**)(char *, uint64_t))(v256 + 8))(v153, v246);
    uint64_t v155 = *(void (**)(char *, uint64_t))(v257 + 8);
    v155(v149, v152);
    uint64_t v156 = v245;
    sub_250E245B0();
    uint64_t v157 = v259;
    MEMORY[0x253389140](v156, v152);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v156, v248);
    v155(v151, v152);
    sub_250D9BC80();
    sub_250E24B30();
    uint64_t v158 = v152;
    uint64_t v127 = v249;
    v155(v157, v158);
    uint64_t v160 = v264;
    unint64_t v159 = v265;
  }
  uint64_t v161 = (uint64_t)v239;
  uint64_t v162 = v242;
  uint64_t v163 = v262;
  v262[24] = v160;
  v163[25] = v159;
  sub_250E0E894(v255 + *(int *)(v253 + 44) + *((int *)v252 + 6), v161, (uint64_t (*)(void))sub_250D91EB4);
  if (v250(v161, 1, v162) == 1)
  {
    sub_250E0E8FC(v161, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v164 = 0xA600000000000000;
    uint64_t v165 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v166 = (void *)sub_250E249B0();
    v243[1](v161, v162);
    id v167 = objc_msgSend(v127, sel__changeInDegreeFahrenheitUnit);
    id v168 = v166;
    id v169 = v167;
    uint64_t v170 = v226;
    Measurement<>.init(wristTemperatureForFormatting:unit:)(v168, v169);
    uint64_t v171 = v229;
    static FormatStyle<>.wristTemperature(unit:)((uint64_t)v169, v229);
    sub_250D9BB54();
    uint64_t v172 = v228;
    uint64_t v173 = v231;
    sub_250E243A0();
    uint64_t v174 = v171;
    uint64_t v127 = v249;
    (*(void (**)(uint64_t, uint64_t))(v230 + 8))(v174, v173);
    (*(void (**)(char *, uint64_t))(v227 + 8))(v170, v172);

    uint64_t v165 = v264;
    unint64_t v164 = v265;
  }
  v176 = v261;
  uint64_t v175 = v262;
  v262[26] = v165;
  v175[27] = v164;
  LOBYTE(v264) = 3;
  uint64_t v177 = (objc_class *)objc_msgSend(v127, sel__changeInDegreeFahrenheitUnit);
  v178.super.Class isa = v177;
  uint64_t v179 = sub_250E0E4C4((char *)&v264, v178);
  uint64_t v181 = v180;

  v175[28] = v179;
  v175[29] = v181;
  uint64_t v182 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v183)
  {
    unint64_t v191 = 0xA600000000000000;
    uint64_t v192 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v263 = v182;
    sub_250E247D0();
    sub_250D9B8EC();
    uint64_t v184 = v244;
    sub_250E24580();
    sub_250E245F0();
    uint64_t v185 = v258;
    uint64_t v186 = v260;
    MEMORY[0x253389160](v176, v260);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v176, v154);
    uint64_t v187 = *(void (**)(char *, uint64_t))(v257 + 8);
    v187(v184, v186);
    uint64_t v188 = v245;
    sub_250E245B0();
    v189 = v259;
    MEMORY[0x253389140](v188, v186);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v188, v248);
    v187(v185, v186);
    sub_250D9BC80();
    sub_250E24B30();
    uint64_t v190 = v186;
    uint64_t v127 = v249;
    v187(v189, v190);
    uint64_t v192 = v264;
    unint64_t v191 = v265;
  }
  uint64_t v193 = (uint64_t)v240;
  uint64_t v194 = v243;
  uint64_t v195 = v262;
  v262[30] = v192;
  v195[31] = v191;
  sub_250E0E894(v255 + *(int *)(v253 + 48) + *((int *)v252 + 6), v193, (uint64_t (*)(void))sub_250D91EB4);
  if (v250(v193, 1, v162) == 1)
  {
    sub_250E0E8FC(v193, (uint64_t (*)(void))sub_250D91EB4);
    unint64_t v196 = 0xA600000000000000;
    uint64_t v197 = 0x9380E29380E2;
    uint64_t v198 = v260;
    uint64_t v199 = v127;
  }
  else
  {
    uint64_t v200 = (void *)sub_250E249B0();
    v194[1](v193, v162);
    id v201 = objc_msgSend(v127, sel_secondUnit);
    id v202 = v200;
    sub_250E23660(v202);

    uint64_t v199 = v127;
    uint64_t v203 = v232;
    static FormatStyle<>.sleepDuration.getter(v232);
    sub_250D94C1C(&qword_269B03818, MEMORY[0x263F07F20]);
    uint64_t v204 = v234;
    sub_250E255C0();
    (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v203, v204);

    uint64_t v197 = v264;
    unint64_t v196 = v265;
    uint64_t v198 = v260;
  }
  uint64_t v205 = v256;
  uint64_t v206 = v257;
  uint64_t v207 = v259;
  v208 = v262;
  v262[32] = v197;
  v208[33] = v196;
  LOBYTE(v264) = 4;
  uint64_t v209 = (objc_class *)objc_msgSend(v199, sel_secondUnit);
  v210.super.Class isa = v209;
  uint64_t v211 = sub_250E0E4C4((char *)&v264, v210);
  uint64_t v213 = v212;

  v208[34] = v211;
  v208[35] = v213;
  uint64_t v214 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if (v215)
  {
    unint64_t v221 = 0xA600000000000000;
    uint64_t v222 = 0x9380E29380E2;
  }
  else
  {
    uint64_t v263 = v214;
    sub_250E247D0();
    sub_250D9B8EC();
    uint64_t v216 = v244;
    sub_250E24580();
    uint64_t v217 = v261;
    sub_250E245F0();
    uint64_t v218 = v258;
    MEMORY[0x253389160](v217, v198);
    (*(void (**)(char *, uint64_t))(v205 + 8))(v217, v246);
    uint64_t v219 = *(void (**)(char *, uint64_t))(v206 + 8);
    v219(v216, v198);
    uint64_t v220 = v245;
    sub_250E245B0();
    MEMORY[0x253389140](v220, v198);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v220, v248);
    v219(v218, v198);
    sub_250D9BC80();
    sub_250E24B30();
    v219(v207, v198);
    uint64_t v222 = v264;
    unint64_t v221 = v265;
  }
  uint64_t v223 = v262;
  v262[36] = v222;
  v223[37] = v221;
  v224 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  objc_msgSend(v241, sel_appendRow_, v224);
}

void sub_250E0E45C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_250D98B48(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_250E0E4C4(char *a1, HKUnit a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *a1;
  sub_250E0E894(v3 + *(int *)(v9 + 24), (uint64_t)v14, (uint64_t (*)(void))sub_250DC8DA4);
  uint64_t v16 = type metadata accessor for SleepingSampleBaseline();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v14, 1, v16) == 1)
  {
    sub_250E0E8FC((uint64_t)v14, (uint64_t (*)(void))sub_250DC8DA4);
    sub_250E0E894(v3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  }
  else
  {
    sub_250E0E45C(0, &qword_26B207998, (unint64_t *)&qword_26B207F08, 0x263F0A640, MEMORY[0x263F08F88]);
    uint64_t v17 = (void *)sub_250E249B0();
    LOBYTE(v27[0]) = v15;
    Swift::String v18 = HKQuantityRange.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)v27, a2);
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;

    sub_250E0E8FC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    sub_250E0E894(v3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if (v18._object) {
      goto LABEL_9;
    }
  }
  sub_250E0E894((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_250DA9D04();
      uint64_t v22 = *(void *)&v8[*(int *)(v21 + 64)];
      uint64_t v26 = *(void *)&v8[*(int *)(v21 + 48)];
      v27[0] = sub_250E253D0();
      v27[1] = v23;
      sub_250E24CE0();
      uint64_t v26 = v22;
      sub_250E253D0();
      sub_250E24CE0();
      swift_bridgeObjectRelease();
      sub_250E24CE0();
      uint64_t countAndFlagsBits = v27[0];
      sub_250E0E8FC((uint64_t)v8, (uint64_t (*)(void))sub_250D97944);
    }
    else
    {
      sub_250E0E8FC((uint64_t)v8, (uint64_t (*)(void))sub_250D97944);
      uint64_t countAndFlagsBits = 0x6C62616C69617641;
    }
  }
  else
  {
    uint64_t countAndFlagsBits = 0x9380E29380E2;
  }
LABEL_9:
  sub_250E0E8FC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return countAndFlagsBits;
}

uint64_t sub_250E0E894(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_250E0E8FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t DateInterval.range.getter@<X0>(char *a1@<X8>)
{
  uint64_t v25 = a1;
  sub_250E0EC0C();
  uint64_t v2 = v1;
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = sub_250E24710();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v24 - v13;
  sub_250E243E0();
  sub_250E243B0();
  sub_250E0EC74();
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v24 = v2;
    uint64_t v16 = &v7[*(int *)(v2 + 48)];
    uint64_t v17 = v5;
    Swift::String v18 = (void (*)(char *, char *, uint64_t))v9[4];
    v18(v7, v14, v8);
    v18(v16, v12, v8);
    uint64_t v19 = &v17[*(int *)(v2 + 48)];
    uint64_t v20 = (void (*)(char *, char *, uint64_t))v9[2];
    v20(v17, v7, v8);
    v20(v19, v16, v8);
    v18(v25, v17, v8);
    uint64_t v21 = (void (*)(char *, uint64_t))v9[1];
    v21(v19, v8);
    uint64_t v22 = &v17[*(int *)(v24 + 48)];
    v18(v17, v7, v8);
    v18(v22, v16, v8);
    sub_250DC2CB4();
    v18(&v25[*(int *)(v23 + 36)], v22, v8);
    return ((uint64_t (*)(char *, uint64_t))v21)(v17, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_250E0EC0C()
{
  if (!qword_269B04328)
  {
    sub_250E24710();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B04328);
    }
  }
}

unint64_t sub_250E0EC74()
{
  unint64_t result = qword_26B2077D8;
  if (!qword_26B2077D8)
  {
    sub_250E24710();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2077D8);
  }
  return result;
}

uint64_t DateInterval.cappedToMaximumEnd(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = sub_250E24710();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v25 = (char *)v24 - v15;
  MEMORY[0x270FA5388](v14);
  v24[1] = (char *)v24 - v16;
  sub_250E243E0();
  sub_250E243E0();
  sub_250E243B0();
  sub_250E0EC74();
  char v17 = sub_250E24B90();
  Swift::String v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  if (v17)
  {
    uint64_t v19 = v10;
    uint64_t v20 = a1;
  }
  else
  {
    uint64_t v19 = v10;
    uint64_t v20 = v7;
  }
  v18(v19, v20, v3);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v7, v3);
  if (sub_250E24BA0()) {
    uint64_t v22 = v10;
  }
  else {
    uint64_t v22 = v13;
  }
  v18(v25, v22, v3);
  v21(v10, v3);
  v21(v13, v3);
  return sub_250E243C0();
}

id HKTableFormatter.init(notificationSettings:)(uint64_t a1)
{
  sub_250D94D70(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v38 - v6;
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v9 = (void *)sub_250E24DB0();
  id v10 = objc_msgSend(v8, sel_initWithColumnTitles_, v9);

  sub_250E0A1C8();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_250E27DE0;
  id v12 = v10;
  char v13 = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  if (v13 == 2)
  {
    unint64_t v14 = 0xE300000000000000;
    uint64_t v15 = 7104878;
  }
  else
  {
    char v39 = v13 & 1;
    uint64_t v15 = sub_250E24C80();
  }
  *(void *)(v11 + 32) = v15;
  *(void *)(v11 + 40) = v14;
  v38[1] = a1;
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsLastUpdatedLocally.getter((uint64_t)v7);
  uint64_t v16 = sub_250E24710();
  uint64_t v17 = *(void *)(v16 - 8);
  Swift::String v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v19 = 0;
  if (v18(v7, 1, v16) != 1)
  {
    uint64_t v19 = (void *)sub_250E246C0();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v16);
  }
  id v20 = objc_msgSend(v12, sel_stringFromDate_, v19);

  uint64_t v21 = sub_250E24C60();
  uint64_t v23 = v22;

  *(void *)(v11 + 48) = v21;
  *(void *)(v11 + 56) = v23;
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter((uint64_t)v5);
  if (v18(v5, 1, v16) == 1)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = (void *)sub_250E246C0();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
  }
  id v25 = objc_msgSend(v12, sel_stringFromDate_, v24);

  uint64_t v26 = sub_250E24C60();
  uint64_t v28 = v27;

  *(void *)(v11 + 64) = v26;
  *(void *)(v11 + 72) = v28;
  id v29 = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  uint64_t v31 = 2;
  if ((v30 & 1) == 0) {
    uint64_t v31 = (uint64_t)v29;
  }
  uint64_t v40 = v31;
  sub_250D9B9A8();
  *(void *)(v11 + 80) = sub_250E25010();
  *(void *)(v11 + 88) = v32;
  BOOL v33 = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  uint64_t v34 = 1702195828;
  if (!v33) {
    uint64_t v34 = 0x65736C6166;
  }
  unint64_t v35 = 0xE500000000000000;
  if (v33) {
    unint64_t v35 = 0xE400000000000000;
  }
  *(void *)(v11 + 96) = v34;
  *(void *)(v11 + 104) = v35;
  uint64_t v36 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_appendRow_, v36);

  swift_release();
  return v12;
}

uint64_t SleepingSampleDaySummary.baselineComparisons.getter()
{
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v1 = *(void *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_250E27DE0;
  uint64_t v5 = v4 + v3;
  uint64_t v6 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_250D94878(v0 + v6[8], v5, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v6[9], v5 + v2, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v6[10], v5 + 2 * v2, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v6[11], v5 + 3 * v2, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v6[12], v5 + 4 * v2, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v4;
}

uint64_t SleepingSampleDaySummary.baselineComparison(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_250E2C050[*a1];
  uint64_t v5 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v2 + *(int *)(v5 + 4 * v4), a2, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t sub_250E0F464@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t SleepingSampleDaySummary.hasAnyBaselinesInRefinement.getter()
{
  uint64_t v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v36 = (uint64_t)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v38 = (void *)((char *)v34 - v5);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v34 - v6;
  uint64_t v8 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v34 - v13;
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v15 = *(void *)(v9 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v37 = 4 * v15;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_250E27DE0;
  v34[1] = v17;
  uint64_t v18 = v17 + v16;
  uint64_t v19 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_250D94878(v0 + v19[8], v18, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v19[9], v18 + v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v35 = 2 * v15;
  sub_250D94878(v0 + v19[10], v18 + 2 * v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v19[11], v18 + v35 + v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v19[12], v18 + v37, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v20 = 5;
  while (1)
  {
    sub_250D94878(v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250D94878((uint64_t)&v14[*(int *)(v8 + 20)], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload) {
      goto LABEL_2;
    }
    if (EnumCaseMultiPayload == 1) {
      sub_250DA9D04();
    }
    else {
      sub_250D96CC4();
    }
    uint64_t v23 = *(void *)&v7[*(int *)(v22 + 48)];
    sub_250DCD5F0((uint64_t)v7);
    if (v23 < 6)
    {
LABEL_2:
      sub_250D94878((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_3:
      sub_250D94CAC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      sub_250D94CAC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
      goto LABEL_4;
    }
    sub_250D94878((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if ((unint64_t)v23 >= 0x14) {
      goto LABEL_3;
    }
    uint64_t v37 = v12[*(int *)(type metadata accessor for SleepingSampleAggregate() + 36)] < 3u;
    uint64_t v24 = (uint64_t)&v12[*(int *)(v8 + 20)];
    sub_250D94878(v24, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    int v25 = swift_getEnumCaseMultiPayload();
    if (v25)
    {
      if (v25 == 1)
      {
        sub_250DA9D04();
        uint64_t v27 = *(uint64_t *)((char *)v38 + *(int *)(v26 + 64));
        sub_250DCD5F0((uint64_t)v38);
      }
      else
      {
        sub_250DCD5F0((uint64_t)v38);
        uint64_t v27 = 6;
      }
    }
    else
    {
      uint64_t v27 = *v38;
    }
    sub_250D94878(v24, v36, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result)
    {
      if (result == 1) {
        sub_250DA9D04();
      }
      else {
        sub_250D96CC4();
      }
      uint64_t v30 = *(void *)(v36 + *(int *)(v29 + 48));
      uint64_t result = sub_250DCD5F0(v36);
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v31 = v27 - v30;
    if (__OFSUB__(v27, v30)) {
      break;
    }
    uint64_t v32 = v31 + v37;
    if (__OFADD__(v31, v37)) {
      goto LABEL_29;
    }
    sub_250D94CAC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250D94CAC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    if (v32 < 1)
    {
      uint64_t v33 = 1;
LABEL_27:
      swift_bridgeObjectRelease();
      return v33;
    }
LABEL_4:
    v18 += v15;
    if (!--v20)
    {
      uint64_t v33 = 0;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t SleepingSampleDaySummary.init(morningIndex:baselineRange:latestBaselineSampleEnd:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v16 = (int *)type metadata accessor for SleepingSampleDaySummary();
  uint64_t v17 = a9 + v16[6];
  uint64_t v18 = sub_250E24710();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = a9 + v16[7];
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = sub_250E24B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a9, a1, v20);
  sub_250D8DFC0(a2, a9 + v16[5]);
  sub_250D8E0E8(a3, v17);
  sub_250D8DEA0(a4, a9 + v16[8], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(a5, a9 + v16[9], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(a6, a9 + v16[10], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(a7, a9 + v16[11], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return sub_250D8DEA0(a8, a9 + v16[12], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.morningIndex.setter(uint64_t a1)
{
  uint64_t v3 = sub_250E24B20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*SleepingSampleDaySummary.morningIndex.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.baselineRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 20);

  return sub_250DCD178(v3, a1);
}

uint64_t SleepingSampleDaySummary.baselineRange.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 20);

  return sub_250E12150(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.baselineRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.latestBaselineSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94790(v1 + *(int *)(v3 + 24), a1, &qword_26B207DD8, MEMORY[0x263F07490]);
}

uint64_t SleepingSampleDaySummary.latestBaselineSampleEnd.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 24);

  return sub_250D8E0E8(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.latestBaselineSampleEnd.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.outlierContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 28));
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t SleepingSampleDaySummary.outlierContext.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v5 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  return result;
}

uint64_t (*SleepingSampleDaySummary.outlierContext.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.heartRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.heartRate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 32);

  return sub_250E121D0(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.heartRate.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.bloodOxygen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.bloodOxygen.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 36);

  return sub_250E121D0(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.bloodOxygen.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.respiratoryRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v1 + *(int *)(v3 + 40), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.respiratoryRate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 40);

  return sub_250E121D0(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.respiratoryRate.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v1 + *(int *)(v3 + 44), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.wristTemperature.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 44);

  return sub_250E121D0(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.wristTemperature.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.timeAsleep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_250D94878(v1 + *(int *)(v3 + 48), a1, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.timeAsleep.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 48);

  return sub_250E121D0(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.timeAsleep.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.init(morningIndex:baselineRange:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v57 = a7;
  uint64_t v58 = a6;
  uint64_t v59 = a5;
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v53 = a2;
  uint64_t v54 = a1;
  uint64_t v55 = a8;
  uint64_t v10 = type metadata accessor for SleepingSampleDaySummary();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v52 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v56 = (uint64_t)&v46 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v51 = (uint64_t)&v46 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v48 = (uint64_t)&v46 - v22;
  MEMORY[0x270FA5388](v21);
  int v25 = (char *)&v46 - v24;
  uint64_t v46 = (uint64_t)&v46 - v24;
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v46 - v27;
  uint64_t v47 = (uint64_t)&v46 - v27;
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v46 - v30;
  uint64_t v32 = sub_250E24B20();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v49 = v32;
  uint64_t v50 = v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v46 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v36 + 16))(v35, a1);
  sub_250DCD178(a2, (uint64_t)v31);
  uint64_t v37 = sub_250E24710();
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  v38(v28, 1, 1, v37);
  sub_250D94878(v61, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v60, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v39 = v51;
  sub_250D94878(v59, v51, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v58, v56, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v40 = v52;
  sub_250D94878(v57, v52, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v41 = (uint64_t)&v13[v11[8]];
  v38((char *)v41, 1, 1, v37);
  uint64_t v42 = &v13[v11[9]];
  *(void *)uint64_t v42 = 0;
  v42[8] = 1;
  uint64_t v44 = v49;
  uint64_t v43 = v50;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v13, v35, v49);
  sub_250D8DFC0((uint64_t)v31, (uint64_t)&v13[v11[7]]);
  sub_250D8E0E8(v47, v41);
  sub_250D8DEA0(v46, (uint64_t)&v13[v11[10]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(v48, (uint64_t)&v13[v11[11]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(v39, (uint64_t)&v13[v11[12]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(v56, (uint64_t)&v13[v11[13]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0(v40, (uint64_t)&v13[v11[14]], (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D8DEA0((uint64_t)v13, v55, (uint64_t (*)(void))type metadata accessor for SleepingSampleDaySummary);
  sub_250D94CAC(v57, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94CAC(v58, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94CAC(v59, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94CAC(v60, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94CAC(v61, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250DCD5F0(v53);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v54, v44);
}

uint64_t SleepingSampleDaySummary.hash(into:)()
{
  uint64_t v1 = sub_250E24710();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v12 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v11 - v6;
  sub_250E24B20();
  sub_250D94C64(&qword_269B038F8, MEMORY[0x263F090E8]);
  sub_250E24B70();
  uint64_t v8 = type metadata accessor for SleepingSampleDaySummary();
  sub_250E24B70();
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  sub_250E24B70();
  sub_250D94790(v0 + *(int *)(v8 + 24), (uint64_t)v7, &qword_26B207DD8, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    uint64_t v9 = v12;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v12, v7, v1);
    sub_250E254D0();
    sub_250D94C64(&qword_269B03910, MEMORY[0x263F07490]);
    sub_250E24B70();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v1);
  }
  if (*(unsigned char *)(v0 + *(int *)(v8 + 28) + 8) == 1)
  {
    sub_250E254D0();
  }
  else
  {
    sub_250E254D0();
    sub_250E254C0();
  }
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  return SleepingSampleBaselineComparison.hash(into:)();
}

uint64_t sub_250E10B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250E1C748(a1, a2);
  *a3 = result;
  return result;
}

void sub_250E10B6C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_250E10B78(uint64_t a1)
{
  unint64_t v2 = sub_250D8DF6C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250E10BB4(uint64_t a1)
{
  unint64_t v2 = sub_250D8DF6C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleDaySummary.hashValue.getter()
{
  return sub_250E254F0();
}

uint64_t sub_250E10C30()
{
  return sub_250E254F0();
}

uint64_t sub_250E10C74()
{
  return sub_250E254F0();
}

uint64_t SleepingSampleDaySummary.morningIndexRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  sub_250D88890();
  uint64_t v4 = v3;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = sub_250E24B20();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v17((char *)&v30 - v15, v2, v10);
  v17(v14, v2, v10);
  sub_250D94C64((unint64_t *)&qword_26B208148, MEMORY[0x263F090E8]);
  uint64_t result = sub_250E24BB0();
  if (result)
  {
    uint64_t v19 = *(int *)(v4 + 48);
    uint64_t v20 = v9;
    uint64_t v30 = v14;
    uint64_t v31 = v17;
    uint64_t v21 = &v9[v19];
    uint64_t v32 = v4;
    uint64_t v22 = (void (*)(char *, char *, uint64_t))v11[4];
    v22(v20, v16, v10);
    uint64_t v23 = v21;
    v22(v21, v30, v10);
    uint64_t v24 = &v7[*(int *)(v4 + 48)];
    int v25 = (void (*)(char *, char *, uint64_t))v31;
    v31(v7, (uint64_t)v20, v10);
    v25(v24, v23, v10);
    uint64_t v26 = v33;
    v22(v33, v7, v10);
    uint64_t v27 = (void (*)(char *, uint64_t))v11[1];
    v27(v24, v10);
    uint64_t v28 = &v7[*(int *)(v32 + 48)];
    v22(v7, v20, v10);
    v22(v28, v23, v10);
    sub_250D98A24(0, (unint64_t *)&qword_26B2081C0, MEMORY[0x263F8D1A0]);
    v22(&v26[*(int *)(v29 + 36)], v28, v10);
    return ((uint64_t (*)(char *, uint64_t))v27)(v7, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleDaySummary.hasAnyRelativeComparison.getter()
{
  sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v45 - v2;
  uint64_t v4 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v51 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D91EB4();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v9 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v12 = *(void *)(v9 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v46 = 4 * v12;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_250E27DE0;
  uint64_t v47 = v14;
  uint64_t v15 = v14 + v13;
  uint64_t v16 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_250D94878(v0 + v16[8], v15, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v16[9], v15 + v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v16[10], v15 + 2 * v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v53 = v12;
  sub_250D94878(v0 + v16[11], v15 + 3 * v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v16[12], v15 + v46, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  v51 += 6;
  uint64_t v17 = 5;
  uint64_t v48 = v3;
  uint64_t v49 = v4;
  while (1)
  {
    sub_250D94878(v15, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v18 = type metadata accessor for SleepingSampleAggregate();
    sub_250D94878((uint64_t)&v11[*(int *)(v18 + 24)], (uint64_t)v8, (uint64_t (*)(void))sub_250D91EB4);
    sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v19) != 1) {
      break;
    }
    sub_250D94CAC((uint64_t)v8, (uint64_t (*)(void))sub_250D91EB4);
LABEL_3:
    sub_250D94CAC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    v15 += v53;
    if (!--v17)
    {
      uint64_t v42 = 0;
      goto LABEL_19;
    }
  }
  uint64_t v22 = (void *)sub_250E249B0();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  sub_250D94790((uint64_t)&v11[*(int *)(v52 + 24)], (uint64_t)v3, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*v51)(v3, 1, v4) == 1)
  {

    sub_250D948E0((uint64_t)v3, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    goto LABEL_3;
  }
  uint64_t v23 = v50;
  sub_250D8DEA0((uint64_t)v3, v50, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
  uint64_t v24 = (void *)sub_250E249B0();
  id v25 = objc_msgSend(v22, sel__unit);
  objc_msgSend(v24, sel_doubleValueForUnit_, v25);
  double v27 = v26;

  uint64_t v28 = v23;
  uint64_t v29 = (void *)sub_250E249B0();
  id v30 = objc_msgSend(v22, sel_compare_, v29);

  type metadata accessor for ComparisonResult(0);
  if (v30 == (id)-1)
  {
    uint64_t v4 = v49;
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v37 = (void *)sub_250E249B0();
    id v38 = objc_msgSend(v37, sel_minimum);

    id v39 = objc_msgSend(v22, sel__unit);
    objc_msgSend(v38, sel_doubleValueForUnit_, v39);
    double v41 = v40;

    double v36 = v27 - v41;
    goto LABEL_11;
  }
  uint64_t v4 = v49;
  if (v30 == (id)1)
  {
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v31 = (void *)sub_250E249B0();
    id v32 = objc_msgSend(v31, sel_maximum);

    id v33 = objc_msgSend(v22, sel__unit);
    objc_msgSend(v32, sel_doubleValueForUnit_, v33);
    double v35 = v34;

    double v36 = v35 - v27;
LABEL_11:
    uint64_t v3 = v48;
    if (v36 != 0.0)
    {
      id v43 = objc_msgSend(v22, sel__unit);
      objc_msgSend(v22, sel_doubleValueForUnit_, v43);

      sub_250D94CAC(v28, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
      goto LABEL_18;
    }
    sub_250D94CAC(v28, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);

    goto LABEL_3;
  }
  if (!v30)
  {
    sub_250D94CAC(v28, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);

LABEL_18:
    sub_250D94CAC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    uint64_t v42 = 1;
LABEL_19:
    swift_bridgeObjectRelease();
    return v42;
  }
  id v54 = v30;
  uint64_t result = sub_250E25430();
  __break(1u);
  return result;
}

uint64_t SleepingSampleDaySummary.baselineComparisons(for:)(char *a1)
{
  uint64_t v2 = *a1;
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v3 = *(void *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_250E264E0;
  uint64_t v6 = qword_250E2C050[v2];
  uint64_t v7 = type metadata accessor for SleepingSampleDaySummary();
  sub_250D94878(v1 + *(int *)(v7 + 4 * v6), v5 + v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v5;
}

uint64_t sub_250E118C8(int *a1)
{
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v3 = *(void *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_250E27DE0;
  uint64_t v7 = v6 + v5;
  sub_250D94878(v1 + a1[8], v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v1 + a1[9], v7 + v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v1 + a1[10], v7 + 2 * v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v1 + a1[11], v7 + 3 * v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v1 + a1[12], v7 + 4 * v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v6;
}

uint64_t sub_250E11A48(char *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v5 = *(void *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_250E264E0;
  sub_250D94878(v2 + *(int *)(a2 + 4 * qword_250E2C050[v4]), v7 + v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  return v7;
}

uint64_t _s13HealthBalance24SleepingSampleDaySummaryV21outOfRangeMetricCountSivg_0()
{
  uint64_t v19 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v1 = *(void *)(v19 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v19);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v18 - v5;
  sub_250D96C60(0, &qword_26B207968, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, MEMORY[0x263F8E0F8]);
  uint64_t v7 = *(void *)(v1 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_250E27DE0;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_250D94878(v0 + v11[8], v10, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v11[9], v10 + v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v11[10], v10 + 2 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v11[11], v10 + 3 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  sub_250D94878(v0 + v11[12], v10 + 4 * v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  uint64_t v12 = 0;
  uint64_t v13 = 5;
  uint64_t v14 = v10;
  while (1)
  {
    sub_250D94878(v14, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    sub_250D94878((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    SleepingSampleBaselineComparison.relativeComparison.getter();
    if ((v15 & 1) == 0 && (HKCompareDoubles() == -1 || HKCompareDoubles() == 1)) {
      break;
    }
    sub_250D94CAC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_3:
    sub_250D94CAC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
    v14 += v7;
    if (!--v13) {
      goto LABEL_10;
    }
  }
  sub_250D94CAC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineComparison);
  if (!__OFADD__(v12++, 1)) {
    goto LABEL_3;
  }
  __break(1u);
LABEL_10:
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v12;
}

uint64_t SleepingSampleDaySummary.OutlierContext.rawValue.getter()
{
  return *(void *)v0;
}

HealthBalance::SleepingSampleDaySummary::OutlierContext __swiftcall SleepingSampleDaySummary.OutlierContext.init(rawValue:)(HealthBalance::SleepingSampleDaySummary::OutlierContext rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SleepingSampleDaySummary.OutlierContext.menstrualCycle.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SleepingSampleDaySummary.OutlierContext.strenuousExercise.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static SleepingSampleDaySummary.OutlierContext.elevationGain.getter(void *a1@<X8>)
{
  *a1 = 4;
}

unint64_t SleepingSampleDaySummary.OutlierContext.description.getter()
{
  unint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  sub_250E250E0();
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  sub_250E24CE0();
  uint64_t v0 = (void *)sub_250E24E40();
  id v1 = (id)HKSensitiveLogItem();

  sub_250E25030();
  swift_unknownObjectRelease();
  sub_250E251F0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  sub_250E24CE0();
  unint64_t v7 = 0x437265696C74754FLL;
  unint64_t v8 = 0xEF28747865746E6FLL;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  unint64_t v3 = v7;
  unint64_t v2 = v8;
  unint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  sub_250E250E0();
  swift_bridgeObjectRelease();
  unint64_t v7 = 0xD000000000000013;
  unint64_t v8 = 0x8000000250E2E020;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  unint64_t v7 = v3;
  unint64_t v8 = v2;
  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v7;
  unint64_t v4 = v8;
  unint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  sub_250E250E0();
  swift_bridgeObjectRelease();
  unint64_t v7 = 0x6F69746176656C65;
  unint64_t v8 = 0xEF203A6E6961476ELL;
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  sub_250E24CE0();
  unint64_t v7 = v5;
  unint64_t v8 = v4;
  swift_bridgeObjectRetain();
  sub_250E24CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_250E12138@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_250E0F464(a1, a2);
}

uint64_t sub_250E12150(uint64_t a1, uint64_t a2)
{
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_250E121D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s13HealthBalance24SleepingSampleDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = sub_250E24710();
  uint64_t v64 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v62 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D88F14(0);
  uint64_t v63 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v65 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  unint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v54 - v12;
  MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v54 - v14;
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v17 = v16;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v54 - v21;
  sub_250E24B20();
  sub_250D94C64(&qword_26B2075B0, MEMORY[0x263F090E8]);
  sub_250E24FF0();
  if (v67) {
    goto LABEL_8;
  }
  uint64_t v60 = v15;
  uint64_t v61 = v17;
  uint64_t v59 = v13;
  uint64_t v55 = v10;
  uint64_t v57 = (int *)type metadata accessor for SleepingSampleDaySummary();
  uint64_t v58 = a1;
  uint64_t v23 = v57[5];
  uint64_t v24 = a1 + v23;
  uint64_t v56 = a2;
  uint64_t v25 = a2 + v23;
  sub_250D94C64(&qword_26B206F80, MEMORY[0x263F090E8]);
  char v26 = sub_250E24BF0();
  sub_250DCD178(v24, (uint64_t)v22);
  sub_250DCD178(v25, (uint64_t)v20);
  if ((v26 & 1) == 0)
  {
    sub_250DCD5F0((uint64_t)v20);
    sub_250DCD5F0((uint64_t)v22);
    goto LABEL_8;
  }
  char v27 = sub_250E24BF0();
  sub_250DCD5F0((uint64_t)v20);
  sub_250DCD5F0((uint64_t)v22);
  if (v27)
  {
    uint64_t v28 = v57;
    uint64_t v29 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
    uint64_t v30 = (uint64_t)v60;
    sub_250D94790(v58 + v57[6], (uint64_t)v60, &qword_26B207DD8, MEMORY[0x263F07490]);
    uint64_t v31 = v56;
    uint64_t v32 = (uint64_t)v59;
    sub_250D94790(v56 + v28[6], (uint64_t)v59, &qword_26B207DD8, v29);
    uint64_t v33 = v65;
    uint64_t v34 = v65 + *(int *)(v63 + 48);
    sub_250D94790(v30, v65, &qword_26B207DD8, v29);
    sub_250D94790(v32, v34, &qword_26B207DD8, v29);
    uint64_t v35 = v64;
    double v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
    uint64_t v37 = v66;
    if (v36(v33, 1, v66) == 1)
    {
      id v38 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
      sub_250D948E0(v32, &qword_26B207DD8, MEMORY[0x263F07490]);
      sub_250D948E0(v30, &qword_26B207DD8, v38);
      if (v36(v34, 1, v37) == 1)
      {
        sub_250D948E0(v33, &qword_26B207DD8, MEMORY[0x263F07490]);
LABEL_14:
        uint64_t v47 = v57;
        uint64_t v48 = v58;
        uint64_t v49 = v57[7];
        uint64_t v50 = (void *)(v58 + v49);
        char v51 = *(unsigned char *)(v58 + v49 + 8);
        uint64_t v52 = (void *)(v31 + v49);
        int v53 = *(unsigned __int8 *)(v31 + v49 + 8);
        if (v51)
        {
          if (!v53) {
            goto LABEL_8;
          }
        }
        else
        {
          if (*v50 != *v52) {
            LOBYTE(v53) = 1;
          }
          if (v53) {
            goto LABEL_8;
          }
        }
        if ((_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v58 + v57[8], v31 + v57[8]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v48 + v47[9], v31 + v47[9]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v48 + v47[10], v31 + v47[10]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v48 + v47[11], v31 + v47[11]) & 1) != 0)
        {
          char v39 = _s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v48 + v47[12], v31 + v47[12]);
          return v39 & 1;
        }
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v41 = (uint64_t)v55;
      sub_250D94790(v33, (uint64_t)v55, &qword_26B207DD8, MEMORY[0x263F07490]);
      if (v36(v34, 1, v37) != 1)
      {
        id v43 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v62, v34, v37);
        sub_250D94C64(&qword_269B03B08, MEMORY[0x263F07490]);
        char v44 = sub_250E24BF0();
        uint64_t v45 = *(void (**)(char *, uint64_t))(v35 + 8);
        v45(v43, v37);
        uint64_t v46 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        sub_250D948E0((uint64_t)v59, &qword_26B207DD8, MEMORY[0x263F07490]);
        sub_250D948E0((uint64_t)v60, &qword_26B207DD8, v46);
        v45((char *)v41, v37);
        sub_250D948E0(v33, &qword_26B207DD8, v46);
        if ((v44 & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
      uint64_t v42 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
      sub_250D948E0((uint64_t)v59, &qword_26B207DD8, MEMORY[0x263F07490]);
      sub_250D948E0((uint64_t)v60, &qword_26B207DD8, v42);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v37);
    }
    sub_250D94CAC(v33, (uint64_t (*)(void))sub_250D88F14);
  }
LABEL_8:
  char v39 = 0;
  return v39 & 1;
}

uint64_t sub_250E12964(void *a1)
{
  a1[1] = sub_250D94C64((unint64_t *)&unk_26B207E20, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
  a1[2] = sub_250D94C64(&qword_26B207E08, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
  uint64_t result = sub_250D94C64(&qword_26B207E10, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_250E12A10()
{
  return sub_250D94C64(&qword_26B207E18, (void (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary);
}

unint64_t sub_250E12A60()
{
  unint64_t result = qword_269B04330;
  if (!qword_269B04330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04330);
  }
  return result;
}

unint64_t sub_250E12AB8()
{
  unint64_t result = qword_26B206CA0;
  if (!qword_26B206CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B206CA0);
  }
  return result;
}

unint64_t sub_250E12B10()
{
  unint64_t result = qword_26B206CA8;
  if (!qword_26B206CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B206CA8);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummary(char *a1, char *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = sub_250E24B20();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    unint64_t v10 = &a2[v8];
    v7(&a1[v8], &a2[v8], v6);
    sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    uint64_t v209 = v11;
    unint64_t v221 = v7;
    v7(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v6);
    uint64_t v12 = a3[6];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = sub_250E24710();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v220 = v15;
    uint64_t v219 = *(unsigned int (**)(char *, uint64_t))(v16 + 48);
    uint64_t v207 = v16;
    if (v219(v14, 1))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v220);
    }
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v216 = a3;
    uint64_t v21 = &a1[v19];
    uint64_t v22 = &a2[v19];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = &a1[v20];
    uint64_t v24 = &a2[v20];
    v7(&a1[v20], &a2[v20], v6);
    uint64_t v25 = type metadata accessor for SleepingSampleAggregate();
    uint64_t v26 = *(int *)(v25 + 20);
    char v27 = &v23[v26];
    uint64_t v28 = &v24[v26];
    uint64_t v215 = sub_250E248B0();
    uint64_t v213 = *(void (**)(char *, char *))(*(void *)(v215 - 8) + 16);
    v213(v27, v28);
    uint64_t v225 = (int *)v25;
    uint64_t v29 = *(int *)(v25 + 24);
    uint64_t v30 = &v23[v29];
    uint64_t v31 = &v24[v29];
    sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)(v32 - 8);
    uint64_t v212 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    uint64_t v217 = v32;
    if (v212(v31, 1, v32))
    {
      uint64_t v35 = v34;
      sub_250D91EB4();
      memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v30, v31, v33);
      uint64_t v35 = v34;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
    }
    uint64_t v37 = v225[7];
    id v38 = &v23[v37];
    char v39 = &v24[v37];
    uint64_t v40 = sub_250E243F0();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v211 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    uint64_t v204 = v41;
    if (v211(v39, 1, v40))
    {
      sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v35;
    uint64_t v44 = v225[8];
    uint64_t v45 = &v23[v44];
    uint64_t v46 = &v24[v44];
    uint64_t v218 = a2;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v219)(&v24[v44], 1, v220))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v45, v46, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v45, 0, 1, v220);
    }
    v23[v225[9]] = v24[v225[9]];
    uint64_t v223 = type metadata accessor for SleepingSampleBaselineComparison();
    uint64_t v48 = *(int *)(v223 + 20);
    uint64_t v49 = &v23[v48];
    uint64_t v50 = &v24[v48];
    uint64_t v222 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v7(v49, v50, v6);
      v7(&v49[*(int *)(v209 + 36)], &v50[*(int *)(v209 + 36)], v6);
      sub_250D96CC4();
      *(void *)&v49[*(int *)(v53 + 48)] = *(void *)&v50[*(int *)(v53 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7(v49, v50, v6);
      v7(&v49[*(int *)(v209 + 36)], &v50[*(int *)(v209 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v49[*(int *)(v52 + 48)] = *(void *)&v50[*(int *)(v52 + 48)];
      *(void *)&v49[*(int *)(v52 + 64)] = *(void *)&v50[*(int *)(v52 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v222 - 8) + 64));
    }
    uint64_t v54 = *(int *)(v223 + 24);
    uint64_t v55 = &v23[v54];
    uint64_t v56 = &v24[v54];
    uint64_t v57 = (int *)type metadata accessor for SleepingSampleBaseline();
    uint64_t v206 = *((void *)v57 - 1);
    uint64_t v205 = v6;
    uint64_t v208 = v35;
    uint64_t v214 = v57;
    HKUnit v210 = *(unsigned int (**)(char *, uint64_t, int *))(v206 + 48);
    if (v210(v56, 1, v57))
    {
      sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
      memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
      uint64_t v59 = v217;
    }
    else
    {
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      v60(v55, v56, v217);
      uint64_t v61 = v57[5];
      uint64_t v203 = &v55[v61];
      uint64_t v62 = &v56[v61];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v64 = v63;
      uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
      v65(v203, v62, v63);
      v60(&v55[v57[6]], &v56[v57[6]], v217);
      uint64_t v66 = v64;
      uint64_t v6 = v205;
      v65(&v55[v57[7]], &v56[v57[7]], v66);
      uint64_t v59 = v217;
      (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v55, 0, 1, v57);
    }
    uint64_t v67 = v216[9];
    int v68 = &a1[v67];
    id v69 = &a2[v67];
    v221(&a1[v67], &a2[v67], v6);
    ((void (*)(char *, char *, uint64_t))v213)(&v68[v225[5]], &v69[v225[5]], v215);
    uint64_t v70 = v225[6];
    uint64_t v71 = &v68[v70];
    uint64_t v72 = &v69[v70];
    if (v212(&v69[v70], 1, v59))
    {
      sub_250D91EB4();
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v71, v72, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v71, 0, 1, v59);
    }
    uint64_t v74 = v225[7];
    uint64_t v75 = &v68[v74];
    uint64_t v76 = &v69[v74];
    if (v211(&v69[v74], 1, v40))
    {
      sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
      memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v75, v76, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(v75, 0, 1, v40);
    }
    uint64_t v78 = v225[8];
    uint64_t v79 = &v68[v78];
    uint64_t v80 = &v69[v78];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v219)(&v69[v78], 1, v220))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v79, v80, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v79, 0, 1, v220);
    }
    v68[v225[9]] = v69[v225[9]];
    uint64_t v82 = *(int *)(v223 + 20);
    uint64_t v83 = &v68[v82];
    char v84 = &v69[v82];
    int v85 = swift_getEnumCaseMultiPayload();
    if (v85 == 2)
    {
      v221(v83, v84, v6);
      v221(&v83[*(int *)(v209 + 36)], &v84[*(int *)(v209 + 36)], v6);
      sub_250D96CC4();
      *(void *)&v83[*(int *)(v87 + 48)] = *(void *)&v84[*(int *)(v87 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v85 == 1)
    {
      v221(v83, v84, v6);
      v221(&v83[*(int *)(v209 + 36)], &v84[*(int *)(v209 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v83[*(int *)(v86 + 48)] = *(void *)&v84[*(int *)(v86 + 48)];
      *(void *)&v83[*(int *)(v86 + 64)] = *(void *)&v84[*(int *)(v86 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v83, v84, *(void *)(*(void *)(v222 - 8) + 64));
    }
    uint64_t v88 = *(int *)(v223 + 24);
    uint64_t v89 = &v68[v88];
    uint64_t v90 = &v69[v88];
    double v91 = v218;
    if (v210(&v69[v88], 1, v214))
    {
      sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
      memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v93(v89, v90, v217);
      uint64_t v94 = v214[5];
      unint64_t v95 = &v89[v94];
      uint64_t v96 = &v90[v94];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v98 = v97;
      int v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16);
      uint64_t v100 = v95;
      uint64_t v6 = v205;
      uint64_t v101 = v96;
      double v91 = v218;
      v99(v100, v101, v98);
      v93(&v89[v214[6]], &v90[v214[6]], v217);
      v99(&v89[v214[7]], &v90[v214[7]], v98);
      uint64_t v59 = v217;
      uint64_t v43 = v208;
      (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v89, 0, 1, v214);
    }
    uint64_t v102 = v216[10];
    id v103 = &a1[v102];
    Swift::String v104 = &v91[v102];
    v221(&a1[v102], &v91[v102], v6);
    ((void (*)(char *, char *, uint64_t))v213)(&v103[v225[5]], &v104[v225[5]], v215);
    uint64_t v105 = v225[6];
    uint64_t v106 = &v103[v105];
    uint64_t v107 = &v104[v105];
    if (v212(&v104[v105], 1, v59))
    {
      sub_250D91EB4();
      memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v106, v107, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v106, 0, 1, v59);
    }
    uint64_t v109 = v225[7];
    HKUnit v110 = &v103[v109];
    uint64_t v111 = &v104[v109];
    if (v211(&v104[v109], 1, v40))
    {
      sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
      memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v110, v111, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(v110, 0, 1, v40);
    }
    uint64_t v113 = v225[8];
    uint64_t v114 = &v103[v113];
    char v115 = &v104[v113];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v219)(&v104[v113], 1, v220))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v114, v115, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v114, 0, 1, v220);
    }
    v103[v225[9]] = v104[v225[9]];
    uint64_t v117 = *(int *)(v223 + 20);
    uint64_t v118 = &v103[v117];
    unint64_t v119 = &v104[v117];
    int v120 = swift_getEnumCaseMultiPayload();
    if (v120 == 2)
    {
      v221(v118, v119, v6);
      v221(&v118[*(int *)(v209 + 36)], &v119[*(int *)(v209 + 36)], v6);
      sub_250D96CC4();
      *(void *)&v118[*(int *)(v122 + 48)] = *(void *)&v119[*(int *)(v122 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v120 == 1)
    {
      v221(v118, v119, v6);
      v221(&v118[*(int *)(v209 + 36)], &v119[*(int *)(v209 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v118[*(int *)(v121 + 48)] = *(void *)&v119[*(int *)(v121 + 48)];
      *(void *)&v118[*(int *)(v121 + 64)] = *(void *)&v119[*(int *)(v121 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v118, v119, *(void *)(*(void *)(v222 - 8) + 64));
    }
    uint64_t v123 = *(int *)(v223 + 24);
    uint64_t v124 = &v103[v123];
    unint64_t v125 = &v104[v123];
    int v126 = v218;
    if (v210(v125, 1, v214))
    {
      sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
      memcpy(v124, v125, *(void *)(*(void *)(v127 - 8) + 64));
    }
    else
    {
      unint64_t v128 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v128(v124, v125, v217);
      uint64_t v129 = v214[5];
      unint64_t v130 = &v124[v129];
      uint64_t v131 = &v125[v129];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v133 = v132;
      uint64_t v134 = *(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 16);
      uint64_t v135 = v130;
      uint64_t v6 = v205;
      v134(v135, v131, v133);
      v128(&v124[v214[6]], &v125[v214[6]], v217);
      int v126 = v218;
      v134(&v124[v214[7]], &v125[v214[7]], v133);
      uint64_t v59 = v217;
      uint64_t v43 = v208;
      (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v124, 0, 1, v214);
    }
    uint64_t v136 = v216[11];
    uint64_t v137 = &a1[v136];
    uint64_t v138 = &v126[v136];
    v221(&a1[v136], &v126[v136], v6);
    ((void (*)(char *, char *, uint64_t))v213)(&v137[v225[5]], &v138[v225[5]], v215);
    uint64_t v139 = v225[6];
    uint64_t v140 = &v137[v139];
    uint64_t v141 = &v138[v139];
    if (v212(&v138[v139], 1, v59))
    {
      sub_250D91EB4();
      memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v140, v141, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v140, 0, 1, v59);
    }
    uint64_t v143 = v225[7];
    uint64_t v144 = &v137[v143];
    uint64_t v145 = &v138[v143];
    if (v211(&v138[v143], 1, v40))
    {
      sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
      memcpy(v144, v145, *(void *)(*(void *)(v146 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v144, v145, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(v144, 0, 1, v40);
    }
    uint64_t v147 = v225[8];
    char v148 = &v137[v147];
    uint64_t v149 = &v138[v147];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v219)(&v138[v147], 1, v220))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v148, v149, *(void *)(*(void *)(v150 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v148, v149, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v148, 0, 1, v220);
    }
    v137[v225[9]] = v138[v225[9]];
    uint64_t v151 = *(int *)(v223 + 20);
    uint64_t v152 = &v137[v151];
    v153 = &v138[v151];
    int v154 = swift_getEnumCaseMultiPayload();
    if (v154 == 2)
    {
      v221(v152, v153, v6);
      v221(&v152[*(int *)(v209 + 36)], &v153[*(int *)(v209 + 36)], v6);
      sub_250D96CC4();
      *(void *)&v152[*(int *)(v156 + 48)] = *(void *)&v153[*(int *)(v156 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v154 == 1)
    {
      v221(v152, v153, v6);
      v221(&v152[*(int *)(v209 + 36)], &v153[*(int *)(v209 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v152[*(int *)(v155 + 48)] = *(void *)&v153[*(int *)(v155 + 48)];
      *(void *)&v152[*(int *)(v155 + 64)] = *(void *)&v153[*(int *)(v155 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v152, v153, *(void *)(*(void *)(v222 - 8) + 64));
    }
    uint64_t v157 = *(int *)(v223 + 24);
    uint64_t v158 = &v137[v157];
    unint64_t v159 = &v138[v157];
    if (v210(v159, 1, v214))
    {
      sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
      memcpy(v158, v159, *(void *)(*(void *)(v160 - 8) + 64));
    }
    else
    {
      uint64_t v161 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v161(v158, v159, v217);
      uint64_t v162 = v214[5];
      uint64_t v163 = &v158[v162];
      unint64_t v164 = &v159[v162];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v166 = v165;
      id v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16);
      id v168 = v163;
      uint64_t v6 = v205;
      v167(v168, v164, v166);
      v161(&v158[v214[6]], &v159[v214[6]], v217);
      v167(&v158[v214[7]], &v159[v214[7]], v166);
      uint64_t v59 = v217;
      (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v158, 0, 1, v214);
    }
    uint64_t v169 = v216[12];
    uint64_t v170 = &a1[v169];
    uint64_t v171 = &v218[v169];
    v221(&a1[v169], &v218[v169], v6);
    ((void (*)(char *, char *, uint64_t))v213)(&v170[v225[5]], &v171[v225[5]], v215);
    uint64_t v172 = v225[6];
    uint64_t v173 = &v170[v172];
    uint64_t v174 = &v171[v172];
    if (v212(&v171[v172], 1, v59))
    {
      sub_250D91EB4();
      memcpy(v173, v174, *(void *)(*(void *)(v175 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v173, v174, v59);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v208 + 56))(v173, 0, 1, v59);
    }
    uint64_t v176 = v225[7];
    uint64_t v177 = &v170[v176];
    HKUnit v178 = &v171[v176];
    if (v211(&v171[v176], 1, v40))
    {
      sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
      memcpy(v177, v178, *(void *)(*(void *)(v179 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v177, v178, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(v177, 0, 1, v40);
    }
    uint64_t v180 = v225[8];
    uint64_t v181 = &v170[v180];
    uint64_t v182 = &v171[v180];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v219)(&v171[v180], 1, v220))
    {
      sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v181, v182, v220);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v181, 0, 1, v220);
    }
    v170[v225[9]] = v171[v225[9]];
    uint64_t v184 = *(int *)(v223 + 20);
    uint64_t v185 = &v170[v184];
    uint64_t v186 = &v171[v184];
    int v187 = swift_getEnumCaseMultiPayload();
    if (v187 == 2)
    {
      v221(v185, v186, v6);
      v221(&v185[*(int *)(v209 + 36)], &v186[*(int *)(v209 + 36)], v6);
      sub_250D96CC4();
      *(void *)&v185[*(int *)(v189 + 48)] = *(void *)&v186[*(int *)(v189 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v187 == 1)
    {
      v221(v185, v186, v6);
      v221(&v185[*(int *)(v209 + 36)], &v186[*(int *)(v209 + 36)], v6);
      sub_250DA9D04();
      *(void *)&v185[*(int *)(v188 + 48)] = *(void *)&v186[*(int *)(v188 + 48)];
      *(void *)&v185[*(int *)(v188 + 64)] = *(void *)&v186[*(int *)(v188 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v185, v186, *(void *)(*(void *)(v222 - 8) + 64));
    }
    uint64_t v190 = *(int *)(v223 + 24);
    unint64_t v191 = &v170[v190];
    uint64_t v192 = &v171[v190];
    if (v210(v192, 1, v214))
    {
      sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
      memcpy(v191, v192, *(void *)(*(void *)(v193 - 8) + 64));
    }
    else
    {
      uint64_t v194 = v59;
      uint64_t v195 = *(void (**)(char *, char *, uint64_t))(v208 + 16);
      v195(v191, v192, v59);
      uint64_t v196 = v214[5];
      uint64_t v197 = &v191[v196];
      uint64_t v198 = &v192[v196];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v200 = v199;
      id v201 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 16);
      v201(v197, v198, v199);
      v195(&v191[v214[6]], &v192[v214[6]], v194);
      v201(&v191[v214[7]], &v192[v214[7]], v200);
      (*(void (**)(char *, void, uint64_t, int *))(v206 + 56))(v191, 0, 1, v214);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v309 = sub_250E24B20();
  uint64_t v306 = *(void *)(v309 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v306 + 24);
  v6(a1, a2, v309);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  v6(a1 + v7, a2 + v7, v309);
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v305 = v10;
  int v317 = v6;
  v6(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v309);
  v318 = a3;
  uint64_t v11 = a3[6];
  uint64_t v323 = a2;
  uint64_t v326 = a1;
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_250E24710();
  uint64_t v308 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v308 + 48);
  LODWORD(v8) = v15(v12, 1, v14);
  uint64_t v322 = v14;
  v319 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
  int v16 = v15(v13, 1, v14);
  if (v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v308 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v12, v14);
LABEL_6:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v308 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v18 = v318[7];
  uint64_t v19 = v326 + v18;
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  *(unsigned char *)(v19 + 8) = *((unsigned char *)v20 + 8);
  *(void *)uint64_t v19 = v21;
  uint64_t v22 = v318[8];
  uint64_t v23 = v326 + v22;
  uint64_t v24 = a2 + v22;
  v6(v326 + v22, a2 + v22, v309);
  uint64_t v25 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v26 = v25[5];
  uint64_t v27 = v23 + v26;
  uint64_t v28 = v24 + v26;
  uint64_t v29 = sub_250E248B0();
  uint64_t v313 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 24);
  uint64_t v314 = v29;
  v313(v27, v28);
  uint64_t v30 = v25[6];
  uint64_t v31 = (void *)(v23 + v30);
  uint64_t v32 = (void *)(v24 + v30);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v34 = v33;
  uint64_t v316 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v316 + 48);
  LODWORD(v27) = v35(v31, 1, v33);
  uint64_t v327 = v34;
  uint64_t v312 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  int v36 = v35(v32, 1, v34);
  if (v27)
  {
    if (v36)
    {
      sub_250D91EB4();
      memcpy(v31, v32, *(void *)(*(void *)(v37 - 8) + 64));
      uint64_t v38 = v34;
    }
    else
    {
      uint64_t v41 = v32;
      uint64_t v38 = v34;
      (*(void (**)(void *, const void *, uint64_t))(v316 + 16))(v31, v41, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v316 + 56))(v31, 0, 1, v34);
    }
  }
  else if (v36)
  {
    (*(void (**)(void *, uint64_t))(v316 + 8))(v31, v34);
    sub_250D91EB4();
    uint64_t v40 = v32;
    uint64_t v38 = v34;
    memcpy(v31, v40, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v42 = v32;
    uint64_t v38 = v34;
    (*(void (**)(void *, const void *, uint64_t))(v316 + 24))(v31, v42, v34);
  }
  uint64_t v43 = v25[7];
  uint64_t v44 = (void *)(v23 + v43);
  uint64_t v45 = (void *)(v24 + v43);
  uint64_t v46 = sub_250E243F0();
  uint64_t v307 = *(void *)(v46 - 8);
  uint64_t v47 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v307 + 48);
  int v48 = v47(v44, 1, v46);
  uint64_t v321 = v46;
  v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  int v49 = v47(v45, 1, v46);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(void *, void *, uint64_t))(v307 + 16))(v44, v45, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v44, 0, 1, v46);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v49)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v44, v46);
LABEL_20:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v307 + 24))(v44, v45, v46);
LABEL_21:
  uint64_t v51 = v25[8];
  uint64_t v52 = (void *)(v23 + v51);
  uint64_t v53 = (const void *)(v24 + v51);
  int v54 = v319(v23 + v51, 1, v322);
  int v55 = v319((uint64_t)v53, 1, v322);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v52, v53, v322);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v52, 0, 1, v322);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v55)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v52, v322);
LABEL_26:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v52, v53, v322);
LABEL_27:
  *(unsigned char *)(v23 + v25[9]) = *(unsigned char *)(v24 + v25[9]);
  uint64_t v57 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v58 = v57;
  if (v326 != v323)
  {
    uint64_t v59 = *(int *)(v57 + 20);
    uint64_t v60 = (char *)(v23 + v59);
    uint64_t v61 = (char *)(v24 + v59);
    sub_250D94CAC(v23 + v59, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v62 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v66(v60, v61, v309);
      v66(&v60[*(int *)(v305 + 36)], &v61[*(int *)(v305 + 36)], v309);
      uint64_t v38 = v327;
      sub_250D96CC4();
      *(void *)&v60[*(int *)(v67 + 48)] = *(void *)&v61[*(int *)(v67 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v64(v60, v61, v309);
      v64(&v60[*(int *)(v305 + 36)], &v61[*(int *)(v305 + 36)], v309);
      uint64_t v38 = v327;
      sub_250DA9D04();
      *(void *)&v60[*(int *)(v65 + 48)] = *(void *)&v61[*(int *)(v65 + 48)];
      *(void *)&v60[*(int *)(v65 + 64)] = *(void *)&v61[*(int *)(v65 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  uint64_t v68 = *(int *)(v58 + 24);
  id v69 = (char *)(v23 + v68);
  uint64_t v70 = (char *)(v24 + v68);
  uint64_t v71 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v303 = *(void *)(v71 - 8);
  uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v303 + 48);
  int v73 = v72(v69, 1, v71);
  v320 = (int *)v71;
  v310 = (uint64_t (*)(char *, uint64_t, int *))v72;
  int v74 = v72(v70, 1, v71);
  uint64_t v315 = v58;
  v304 = v25;
  if (v73)
  {
    uint64_t v75 = v309;
    if (!v74)
    {
      uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v316 + 16);
      v76(v69, v70, v327);
      uint64_t v77 = v71;
      uint64_t v78 = *(int *)(v71 + 20);
      uint64_t v79 = &v69[v78];
      uint64_t v80 = &v70[v78];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v82 = v81;
      uint64_t v83 = *(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16);
      v83(v79, v80, v81);
      v76(&v69[*(int *)(v77 + 24)], &v70[*(int *)(v77 + 24)], v327);
      uint64_t v38 = v327;
      v83(&v69[*(int *)(v77 + 28)], &v70[*(int *)(v77 + 28)], v82);
      uint64_t v75 = v309;
      uint64_t v25 = v304;
      (*(void (**)(char *, void, uint64_t, int *))(v303 + 56))(v69, 0, 1, v320);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint64_t v75 = v309;
  if (v74)
  {
    sub_250D94CAC((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_38:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_39;
  }
  uint64_t v268 = *(void (**)(char *, char *, uint64_t))(v316 + 24);
  v268(v69, v70, v327);
  uint64_t v269 = *(int *)(v71 + 20);
  uint64_t v302 = &v69[v269];
  uint64_t v270 = &v70[v269];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v272 = v271;
  double v273 = *(void (**)(char *, char *, uint64_t))(*(void *)(v271 - 8) + 24);
  v273(v302, v270, v271);
  v268(&v69[v320[6]], &v70[v320[6]], v327);
  uint64_t v38 = v327;
  v273(&v69[v320[7]], &v70[v320[7]], v272);
LABEL_39:
  uint64_t v85 = v318[9];
  uint64_t v86 = v326 + v85;
  uint64_t v87 = v323 + v85;
  v317(v326 + v85, v323 + v85, v75);
  ((void (*)(uint64_t, uint64_t, uint64_t))v313)(v86 + v25[5], v87 + v25[5], v314);
  uint64_t v88 = v25[6];
  uint64_t v89 = (void *)(v86 + v88);
  uint64_t v90 = (const void *)(v87 + v88);
  int v91 = v312(v86 + v88, 1, v38);
  int v92 = v312((uint64_t)v90, 1, v38);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, const void *, uint64_t))(v316 + 16))(v89, v90, v327);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v316 + 56))(v89, 0, 1, v327);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v316 + 8))(v89, v327);
LABEL_44:
    sub_250D91EB4();
    memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, const void *, uint64_t))(v316 + 24))(v89, v90, v327);
LABEL_45:
  uint64_t v94 = v25[7];
  unint64_t v95 = (void *)(v86 + v94);
  uint64_t v96 = (const void *)(v87 + v94);
  int v97 = v311(v86 + v94, 1, v321);
  int v98 = v311((uint64_t)v96, 1, v321);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 16))(v95, v96, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v95, 0, 1, v321);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v98)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v95, v321);
LABEL_50:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 24))(v95, v96, v321);
LABEL_51:
  uint64_t v100 = v25[8];
  uint64_t v101 = (void *)(v86 + v100);
  uint64_t v102 = (const void *)(v87 + v100);
  int v103 = v319(v86 + v100, 1, v322);
  int v104 = v319((uint64_t)v102, 1, v322);
  if (v103)
  {
    uint64_t v105 = v315;
    if (!v104)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v101, v102, v322);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v101, 0, 1, v322);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v105 = v315;
  if (v104)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v101, v322);
LABEL_56:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v101, v102, *(void *)(*(void *)(v106 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v101, v102, v322);
LABEL_57:
  *(unsigned char *)(v86 + v25[9]) = *(unsigned char *)(v87 + v25[9]);
  uint64_t v107 = v327;
  if (v326 != v323)
  {
    uint64_t v108 = *(int *)(v105 + 20);
    uint64_t v109 = (char *)(v86 + v108);
    HKUnit v110 = (char *)(v87 + v108);
    sub_250D94CAC(v86 + v108, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v111 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v112 = swift_getEnumCaseMultiPayload();
    if (v112 == 2)
    {
      char v115 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v115(v109, v110, v75);
      v115(&v109[*(int *)(v305 + 36)], &v110[*(int *)(v305 + 36)], v75);
      uint64_t v107 = v327;
      sub_250D96CC4();
      *(void *)&v109[*(int *)(v116 + 48)] = *(void *)&v110[*(int *)(v116 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v112 == 1)
    {
      uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v113(v109, v110, v75);
      v113(&v109[*(int *)(v305 + 36)], &v110[*(int *)(v305 + 36)], v75);
      uint64_t v107 = v327;
      sub_250DA9D04();
      *(void *)&v109[*(int *)(v114 + 48)] = *(void *)&v110[*(int *)(v114 + 48)];
      *(void *)&v109[*(int *)(v114 + 64)] = *(void *)&v110[*(int *)(v114 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
    }
  }
  uint64_t v117 = *(int *)(v105 + 24);
  uint64_t v118 = (char *)(v86 + v117);
  unint64_t v119 = (char *)(v87 + v117);
  int v120 = v310(v118, 1, v320);
  int v121 = v310(v119, 1, v320);
  if (v120)
  {
    if (!v121)
    {
      uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v316 + 16);
      v122(v118, v119, v327);
      uint64_t v123 = v320;
      uint64_t v124 = v320[5];
      unint64_t v125 = &v118[v124];
      int v126 = &v119[v124];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v128 = v127;
      uint64_t v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16);
      v129(v125, v126, v127);
      v122(&v118[v123[6]], &v119[v123[6]], v327);
      uint64_t v107 = v327;
      v129(&v118[v123[7]], &v119[v123[7]], v128);
      uint64_t v75 = v309;
      uint64_t v25 = v304;
      (*(void (**)(char *, void, uint64_t, int *))(v303 + 56))(v118, 0, 1, v320);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v121)
  {
    sub_250D94CAC((uint64_t)v118, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_68:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v118, v119, *(void *)(*(void *)(v130 - 8) + 64));
    goto LABEL_69;
  }
  double v274 = *(void (**)(char *, char *, uint64_t))(v316 + 24);
  v274(v118, v119, v327);
  uint64_t v275 = v320[5];
  uint64_t v276 = &v118[v275];
  int v277 = &v119[v275];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v279 = v278;
  uint64_t v280 = *(void (**)(char *, char *, uint64_t))(*(void *)(v278 - 8) + 24);
  v280(v276, v277, v278);
  v274(&v118[v320[6]], &v119[v320[6]], v327);
  uint64_t v107 = v327;
  uint64_t v25 = v304;
  v280(&v118[v320[7]], &v119[v320[7]], v279);
  uint64_t v75 = v309;
LABEL_69:
  uint64_t v131 = v318[10];
  uint64_t v132 = v326 + v131;
  uint64_t v133 = v323 + v131;
  v317(v326 + v131, v323 + v131, v75);
  ((void (*)(uint64_t, uint64_t, uint64_t))v313)(v132 + v25[5], v133 + v25[5], v314);
  uint64_t v134 = v25[6];
  uint64_t v135 = (void *)(v132 + v134);
  uint64_t v136 = (const void *)(v133 + v134);
  int v137 = v312(v132 + v134, 1, v107);
  int v138 = v312((uint64_t)v136, 1, v107);
  if (v137)
  {
    if (!v138)
    {
      (*(void (**)(void *, const void *, uint64_t))(v316 + 16))(v135, v136, v327);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v316 + 56))(v135, 0, 1, v327);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v138)
  {
    (*(void (**)(void *, uint64_t))(v316 + 8))(v135, v327);
LABEL_74:
    sub_250D91EB4();
    memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(void *, const void *, uint64_t))(v316 + 24))(v135, v136, v327);
LABEL_75:
  uint64_t v140 = v25[7];
  uint64_t v141 = (void *)(v132 + v140);
  uint64_t v142 = (const void *)(v133 + v140);
  int v143 = v311(v132 + v140, 1, v321);
  int v144 = v311((uint64_t)v142, 1, v321);
  if (v143)
  {
    if (!v144)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 16))(v141, v142, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v141, 0, 1, v321);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v144)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v141, v321);
LABEL_80:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 24))(v141, v142, v321);
LABEL_81:
  uint64_t v146 = v25[8];
  uint64_t v147 = (void *)(v132 + v146);
  char v148 = (const void *)(v133 + v146);
  int v149 = v319(v132 + v146, 1, v322);
  int v150 = v319((uint64_t)v148, 1, v322);
  if (v149)
  {
    uint64_t v151 = v315;
    if (!v150)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v147, v148, v322);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v147, 0, 1, v322);
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v151 = v315;
  if (v150)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v147, v322);
LABEL_86:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v147, v148, *(void *)(*(void *)(v152 - 8) + 64));
    goto LABEL_87;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v147, v148, v322);
LABEL_87:
  *(unsigned char *)(v132 + v25[9]) = *(unsigned char *)(v133 + v25[9]);
  uint64_t v153 = v327;
  if (v326 != v323)
  {
    uint64_t v154 = *(int *)(v151 + 20);
    uint64_t v155 = (char *)(v132 + v154);
    uint64_t v156 = (char *)(v133 + v154);
    sub_250D94CAC(v132 + v154, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v157 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v158 = swift_getEnumCaseMultiPayload();
    if (v158 == 2)
    {
      uint64_t v161 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v161(v155, v156, v75);
      v161(&v155[*(int *)(v305 + 36)], &v156[*(int *)(v305 + 36)], v75);
      uint64_t v153 = v327;
      sub_250D96CC4();
      *(void *)&v155[*(int *)(v162 + 48)] = *(void *)&v156[*(int *)(v162 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v158 == 1)
    {
      unint64_t v159 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v159(v155, v156, v75);
      v159(&v155[*(int *)(v305 + 36)], &v156[*(int *)(v305 + 36)], v75);
      uint64_t v153 = v327;
      sub_250DA9D04();
      *(void *)&v155[*(int *)(v160 + 48)] = *(void *)&v156[*(int *)(v160 + 48)];
      *(void *)&v155[*(int *)(v160 + 64)] = *(void *)&v156[*(int *)(v160 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v155, v156, *(void *)(*(void *)(v157 - 8) + 64));
    }
  }
  uint64_t v163 = *(int *)(v151 + 24);
  unint64_t v164 = (char *)(v132 + v163);
  uint64_t v165 = (char *)(v133 + v163);
  int v166 = v310(v164, 1, v320);
  int v167 = v310(v165, 1, v320);
  if (v166)
  {
    if (!v167)
    {
      id v168 = *(void (**)(char *, char *, uint64_t))(v316 + 16);
      v168(v164, v165, v327);
      uint64_t v169 = v320;
      uint64_t v170 = v320[5];
      uint64_t v171 = &v164[v170];
      uint64_t v172 = &v165[v170];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v174 = v173;
      uint64_t v175 = *(void (**)(char *, char *, uint64_t))(*(void *)(v173 - 8) + 16);
      v175(v171, v172, v173);
      v168(&v164[v169[6]], &v165[v169[6]], v327);
      uint64_t v153 = v327;
      v175(&v164[v169[7]], &v165[v169[7]], v174);
      uint64_t v75 = v309;
      uint64_t v25 = v304;
      (*(void (**)(char *, void, uint64_t, int *))(v303 + 56))(v164, 0, 1, v320);
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (v167)
  {
    sub_250D94CAC((uint64_t)v164, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_98:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v164, v165, *(void *)(*(void *)(v176 - 8) + 64));
    goto LABEL_99;
  }
  uint64_t v281 = *(void (**)(char *, char *, uint64_t))(v316 + 24);
  v281(v164, v165, v327);
  uint64_t v282 = v320[5];
  v283 = &v164[v282];
  v284 = &v165[v282];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v286 = v285;
  v287 = *(void (**)(char *, char *, uint64_t))(*(void *)(v285 - 8) + 24);
  v287(v283, v284, v285);
  v281(&v164[v320[6]], &v165[v320[6]], v327);
  uint64_t v153 = v327;
  uint64_t v25 = v304;
  v287(&v164[v320[7]], &v165[v320[7]], v286);
  uint64_t v75 = v309;
LABEL_99:
  uint64_t v177 = v318[11];
  uint64_t v178 = v326 + v177;
  uint64_t v179 = v323 + v177;
  v317(v326 + v177, v323 + v177, v75);
  ((void (*)(uint64_t, uint64_t, uint64_t))v313)(v178 + v25[5], v179 + v25[5], v314);
  uint64_t v180 = v25[6];
  uint64_t v181 = (void *)(v178 + v180);
  uint64_t v182 = (const void *)(v179 + v180);
  int v183 = v312(v178 + v180, 1, v153);
  int v184 = v312((uint64_t)v182, 1, v153);
  if (v183)
  {
    if (!v184)
    {
      (*(void (**)(void *, const void *, uint64_t))(v316 + 16))(v181, v182, v327);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v316 + 56))(v181, 0, 1, v327);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v184)
  {
    (*(void (**)(void *, uint64_t))(v316 + 8))(v181, v327);
LABEL_104:
    sub_250D91EB4();
    memcpy(v181, v182, *(void *)(*(void *)(v185 - 8) + 64));
    goto LABEL_105;
  }
  (*(void (**)(void *, const void *, uint64_t))(v316 + 24))(v181, v182, v327);
LABEL_105:
  uint64_t v186 = v25[7];
  int v187 = (void *)(v178 + v186);
  uint64_t v188 = (const void *)(v179 + v186);
  int v189 = v311(v178 + v186, 1, v321);
  int v190 = v311((uint64_t)v188, 1, v321);
  if (v189)
  {
    if (!v190)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 16))(v187, v188, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v187, 0, 1, v321);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v190)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v187, v321);
LABEL_110:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v187, v188, *(void *)(*(void *)(v191 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 24))(v187, v188, v321);
LABEL_111:
  uint64_t v192 = v25[8];
  uint64_t v193 = (void *)(v178 + v192);
  uint64_t v194 = (const void *)(v179 + v192);
  int v195 = v319(v178 + v192, 1, v322);
  int v196 = v319((uint64_t)v194, 1, v322);
  if (v195)
  {
    uint64_t v197 = v315;
    if (!v196)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v193, v194, v322);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v193, 0, 1, v322);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  uint64_t v197 = v315;
  if (v196)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v193, v322);
LABEL_116:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v193, v194, *(void *)(*(void *)(v198 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v193, v194, v322);
LABEL_117:
  *(unsigned char *)(v178 + v25[9]) = *(unsigned char *)(v179 + v25[9]);
  uint64_t v199 = v327;
  if (v326 != v323)
  {
    uint64_t v200 = *(int *)(v197 + 20);
    id v201 = (char *)(v178 + v200);
    id v202 = (char *)(v179 + v200);
    sub_250D94CAC(v178 + v200, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v203 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v204 = swift_getEnumCaseMultiPayload();
    if (v204 == 2)
    {
      uint64_t v207 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v207(v201, v202, v75);
      v207(&v201[*(int *)(v305 + 36)], &v202[*(int *)(v305 + 36)], v75);
      uint64_t v199 = v327;
      sub_250D96CC4();
      *(void *)&v201[*(int *)(v208 + 48)] = *(void *)&v202[*(int *)(v208 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v204 == 1)
    {
      uint64_t v205 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v205(v201, v202, v75);
      v205(&v201[*(int *)(v305 + 36)], &v202[*(int *)(v305 + 36)], v75);
      uint64_t v199 = v327;
      sub_250DA9D04();
      *(void *)&v201[*(int *)(v206 + 48)] = *(void *)&v202[*(int *)(v206 + 48)];
      *(void *)&v201[*(int *)(v206 + 64)] = *(void *)&v202[*(int *)(v206 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v201, v202, *(void *)(*(void *)(v203 - 8) + 64));
    }
  }
  uint64_t v209 = *(int *)(v197 + 24);
  HKUnit v210 = (char *)(v178 + v209);
  uint64_t v211 = (char *)(v179 + v209);
  int v212 = v310(v210, 1, v320);
  int v213 = v310(v211, 1, v320);
  if (v212)
  {
    if (!v213)
    {
      uint64_t v214 = *(void (**)(char *, char *, uint64_t))(v316 + 16);
      v214(v210, v211, v327);
      uint64_t v215 = v320;
      uint64_t v216 = v320[5];
      uint64_t v217 = &v210[v216];
      uint64_t v218 = &v211[v216];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v220 = v219;
      unint64_t v221 = *(void (**)(char *, char *, uint64_t))(*(void *)(v219 - 8) + 16);
      v221(v217, v218, v219);
      v214(&v210[v215[6]], &v211[v215[6]], v327);
      uint64_t v199 = v327;
      v221(&v210[v215[7]], &v211[v215[7]], v220);
      uint64_t v75 = v309;
      uint64_t v25 = v304;
      (*(void (**)(char *, void, uint64_t, int *))(v303 + 56))(v210, 0, 1, v320);
      goto LABEL_129;
    }
    goto LABEL_128;
  }
  if (v213)
  {
    sub_250D94CAC((uint64_t)v210, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_128:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v210, v211, *(void *)(*(void *)(v222 - 8) + 64));
    goto LABEL_129;
  }
  uint64_t v288 = *(void (**)(char *, char *, uint64_t))(v316 + 24);
  v288(v210, v211, v327);
  uint64_t v289 = v320[5];
  v290 = &v210[v289];
  uint64_t v291 = &v211[v289];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v293 = v292;
  uint64_t v294 = *(void (**)(char *, char *, uint64_t))(*(void *)(v292 - 8) + 24);
  v294(v290, v291, v292);
  v288(&v210[v320[6]], &v211[v320[6]], v327);
  uint64_t v199 = v327;
  uint64_t v25 = v304;
  v294(&v210[v320[7]], &v211[v320[7]], v293);
  uint64_t v75 = v309;
LABEL_129:
  uint64_t v223 = v318[12];
  uint64_t v224 = v326 + v223;
  uint64_t v225 = v323 + v223;
  v317(v326 + v223, v323 + v223, v75);
  ((void (*)(uint64_t, uint64_t, uint64_t))v313)(v224 + v25[5], v225 + v25[5], v314);
  uint64_t v226 = v25[6];
  uint64_t v227 = (void *)(v224 + v226);
  uint64_t v228 = (const void *)(v225 + v226);
  int v229 = v312(v224 + v226, 1, v199);
  int v230 = v312((uint64_t)v228, 1, v199);
  if (v229)
  {
    if (!v230)
    {
      (*(void (**)(void *, const void *, uint64_t))(v316 + 16))(v227, v228, v199);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v316 + 56))(v227, 0, 1, v199);
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  if (v230)
  {
    (*(void (**)(void *, uint64_t))(v316 + 8))(v227, v199);
LABEL_134:
    sub_250D91EB4();
    memcpy(v227, v228, *(void *)(*(void *)(v231 - 8) + 64));
    goto LABEL_135;
  }
  (*(void (**)(void *, const void *, uint64_t))(v316 + 24))(v227, v228, v199);
LABEL_135:
  uint64_t v232 = v25[7];
  uint64_t v233 = (void *)(v224 + v232);
  uint64_t v234 = (const void *)(v225 + v232);
  int v235 = v311(v224 + v232, 1, v321);
  int v236 = v311((uint64_t)v234, 1, v321);
  if (v235)
  {
    if (!v236)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 16))(v233, v234, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v233, 0, 1, v321);
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if (v236)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v233, v321);
LABEL_140:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v233, v234, *(void *)(*(void *)(v237 - 8) + 64));
    goto LABEL_141;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 24))(v233, v234, v321);
LABEL_141:
  uint64_t v238 = v25[8];
  v239 = (void *)(v224 + v238);
  uint64_t v240 = (const void *)(v225 + v238);
  int v241 = v319(v224 + v238, 1, v322);
  int v242 = v319((uint64_t)v240, 1, v322);
  if (v241)
  {
    uint64_t v243 = v315;
    if (!v242)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v239, v240, v322);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v239, 0, 1, v322);
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  uint64_t v243 = v315;
  if (v242)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v239, v322);
LABEL_146:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v239, v240, *(void *)(*(void *)(v244 - 8) + 64));
    goto LABEL_147;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v239, v240, v322);
LABEL_147:
  *(unsigned char *)(v224 + v25[9]) = *(unsigned char *)(v225 + v25[9]);
  if (v326 != v323)
  {
    uint64_t v245 = *(int *)(v243 + 20);
    uint64_t v246 = (char *)(v224 + v245);
    uint64_t v247 = (char *)(v225 + v245);
    sub_250D94CAC(v224 + v245, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v248 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v249 = swift_getEnumCaseMultiPayload();
    if (v249 == 2)
    {
      uint64_t v252 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v252(v246, v247, v75);
      v252(&v246[*(int *)(v305 + 36)], &v247[*(int *)(v305 + 36)], v75);
      sub_250D96CC4();
      *(void *)&v246[*(int *)(v253 + 48)] = *(void *)&v247[*(int *)(v253 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v249 == 1)
    {
      v250 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
      v250(v246, v247, v75);
      v250(&v246[*(int *)(v305 + 36)], &v247[*(int *)(v305 + 36)], v75);
      sub_250DA9D04();
      *(void *)&v246[*(int *)(v251 + 48)] = *(void *)&v247[*(int *)(v251 + 48)];
      *(void *)&v246[*(int *)(v251 + 64)] = *(void *)&v247[*(int *)(v251 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v246, v247, *(void *)(*(void *)(v248 - 8) + 64));
    }
  }
  uint64_t v254 = *(int *)(v243 + 24);
  uint64_t v255 = (char *)(v224 + v254);
  uint64_t v256 = (char *)(v225 + v254);
  int v257 = v310((char *)(v224 + v254), 1, v320);
  int v258 = v310(v256, 1, v320);
  if (!v257)
  {
    if (!v258)
    {
      v295 = *(void (**)(char *, char *, uint64_t))(v316 + 24);
      v295(v255, v256, v327);
      uint64_t v296 = v320;
      uint64_t v297 = v320[5];
      v325 = &v255[v297];
      uint64_t v298 = &v256[v297];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v300 = v299;
      uint64_t v301 = *(void (**)(char *, char *, uint64_t))(*(void *)(v299 - 8) + 24);
      v301(v325, v298, v299);
      v295(&v255[v296[6]], &v256[v296[6]], v327);
      v301(&v255[v296[7]], &v256[v296[7]], v300);
      return v326;
    }
    sub_250D94CAC((uint64_t)v255, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    goto LABEL_158;
  }
  if (v258)
  {
LABEL_158:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v255, v256, *(void *)(*(void *)(v266 - 8) + 64));
    return v326;
  }
  v259 = *(void (**)(char *, char *, uint64_t))(v316 + 16);
  v259(v255, v256, v327);
  uint64_t v260 = v320;
  uint64_t v261 = v320[5];
  uint64_t v324 = &v255[v261];
  uint64_t v262 = &v256[v261];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v264 = v263;
  unint64_t v265 = *(void (**)(char *, char *, uint64_t))(*(void *)(v263 - 8) + 16);
  v265(v324, v262, v263);
  v259(&v255[v260[6]], &v256[v260[6]], v327);
  v265(&v255[v260[7]], &v256[v260[7]], v264);
  (*(void (**)(char *, void, uint64_t, int *))(v303 + 56))(v255, 0, 1, v320);
  return v326;
}

uint64_t initializeWithTake for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v203 = v11;
  uint64_t v218 = v6;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  int v213 = a3;
  uint64_t v214 = a2;
  uint64_t v12 = a3[6];
  uint64_t v216 = a1;
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_250E24710();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v217 = v15;
  uint64_t v215 = *(unsigned int (**)(const void *, uint64_t))(v16 + 48);
  uint64_t v200 = v16;
  if (v215(v14, 1))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v217);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = v216 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = v216 + v19;
  uint64_t v23 = a2 + v19;
  v7(v216 + v19, a2 + v19, v6);
  uint64_t v24 = type metadata accessor for SleepingSampleAggregate();
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = sub_250E248B0();
  uint64_t v208 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 32);
  uint64_t v209 = v28;
  v208(v26, v27);
  unint64_t v221 = (int *)v24;
  uint64_t v29 = *(int *)(v24 + 24);
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (const void *)(v23 + v29);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v206 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
  uint64_t v212 = v32;
  if (v206(v31, 1, v32))
  {
    sub_250D91EB4();
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v30, v31, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  }
  uint64_t v36 = v221[7];
  uint64_t v37 = (void *)(v22 + v36);
  uint64_t v38 = (const void *)(v23 + v36);
  uint64_t v39 = sub_250E243F0();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v205 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v207 = v39;
  uint64_t v201 = v40;
  if (v205(v38, 1, v39))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = v221[8];
  uint64_t v43 = (void *)(v22 + v42);
  uint64_t v44 = (const void *)(v23 + v42);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v23 + v42, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v43, v44, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v43, 0, 1, v217);
  }
  *(unsigned char *)(v22 + v221[9]) = *(unsigned char *)(v23 + v221[9]);
  uint64_t v220 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v46 = *(int *)(v220 + 20);
  uint64_t v47 = (char *)(v22 + v46);
  int v48 = (char *)(v23 + v46);
  uint64_t v219 = type metadata accessor for SleepingSampleBaselineAvailability();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    v7((uint64_t)&v47[*(int *)(v203 + 36)], (uint64_t)&v48[*(int *)(v203 + 36)], v6);
    sub_250D96CC4();
    *(void *)&v47[*(int *)(v51 + 48)] = *(void *)&v48[*(int *)(v51 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    v7((uint64_t)&v47[*(int *)(v203 + 36)], (uint64_t)&v48[*(int *)(v203 + 36)], v6);
    sub_250DA9D04();
    *(void *)&v47[*(int *)(v50 + 48)] = *(void *)&v48[*(int *)(v50 + 48)];
    *(void *)&v47[*(int *)(v50 + 64)] = *(void *)&v48[*(int *)(v50 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v47, v48, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v52 = *(int *)(v220 + 24);
  uint64_t v53 = (char *)(v22 + v52);
  int v54 = (char *)(v23 + v52);
  int v55 = (int *)type metadata accessor for SleepingSampleBaseline();
  uint64_t v56 = *((void *)v55 - 1);
  int v204 = *(unsigned int (**)(char *, uint64_t, int *))(v56 + 48);
  id v202 = v7;
  uint64_t v211 = v34;
  HKUnit v210 = v55;
  uint64_t v199 = v56;
  if (v204(v54, 1, v55))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    uint64_t v58 = v212;
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v59(v53, v54, v212);
    uint64_t v60 = v55[5];
    uint64_t v197 = &v54[v60];
    uint64_t v198 = &v53[v60];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v62 = v61;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32);
    v63(v198, v197, v61);
    v59(&v53[v55[6]], &v54[v55[6]], v212);
    uint64_t v64 = v62;
    uint64_t v7 = v202;
    v63(&v53[v55[7]], &v54[v55[7]], v64);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
  }
  uint64_t v65 = v213[9];
  uint64_t v66 = v216 + v65;
  uint64_t v67 = v214 + v65;
  v7(v216 + v65, v214 + v65, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v66 + v221[5], v67 + v221[5], v209);
  uint64_t v68 = v221[6];
  id v69 = (void *)(v66 + v68);
  uint64_t v70 = (const void *)(v67 + v68);
  if (v206((const void *)(v67 + v68), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v69, v70, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v69, 0, 1, v58);
  }
  uint64_t v72 = v221[7];
  int v73 = (void *)(v66 + v72);
  int v74 = (const void *)(v67 + v72);
  if (v205((const void *)(v67 + v72), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v73, v74, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v73, 0, 1, v207);
  }
  uint64_t v76 = v221[8];
  uint64_t v77 = (void *)(v66 + v76);
  uint64_t v78 = (const void *)(v67 + v76);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v67 + v76, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v77, v78, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v77, 0, 1, v217);
  }
  *(unsigned char *)(v66 + v221[9]) = *(unsigned char *)(v67 + v221[9]);
  uint64_t v80 = *(int *)(v220 + 20);
  uint64_t v81 = (char *)(v66 + v80);
  uint64_t v82 = (char *)(v67 + v80);
  int v83 = swift_getEnumCaseMultiPayload();
  if (v83 == 2)
  {
    v7((uint64_t)v81, (uint64_t)v82, v218);
    v7((uint64_t)&v81[*(int *)(v203 + 36)], (uint64_t)&v82[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v81[*(int *)(v85 + 48)] = *(void *)&v82[*(int *)(v85 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v83 == 1)
  {
    v7((uint64_t)v81, (uint64_t)v82, v218);
    v7((uint64_t)&v81[*(int *)(v203 + 36)], (uint64_t)&v82[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v81[*(int *)(v84 + 48)] = *(void *)&v82[*(int *)(v84 + 48)];
    *(void *)&v81[*(int *)(v84 + 64)] = *(void *)&v82[*(int *)(v84 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v81, v82, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v86 = *(int *)(v220 + 24);
  uint64_t v87 = (char *)(v66 + v86);
  uint64_t v88 = (char *)(v67 + v86);
  if (v204(v88, 1, v55))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    uint64_t v90 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v90(v87, v88, v212);
    uint64_t v91 = v210[5];
    int v92 = &v87[v91];
    uint64_t v93 = &v88[v91];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v95 = v94;
    uint64_t v96 = *(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 32);
    int v97 = v92;
    uint64_t v7 = v202;
    v96(v97, v93, v95);
    v90(&v87[v210[6]], &v88[v210[6]], v212);
    v96(&v87[v210[7]], &v88[v210[7]], v95);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v87, 0, 1, v210);
  }
  uint64_t v98 = v213[10];
  uint64_t v99 = v216 + v98;
  uint64_t v100 = v214 + v98;
  v7(v216 + v98, v214 + v98, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v99 + v221[5], v100 + v221[5], v209);
  uint64_t v101 = v221[6];
  uint64_t v102 = (void *)(v99 + v101);
  int v103 = (const void *)(v100 + v101);
  if (v206((const void *)(v100 + v101), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v102, v103, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v102, 0, 1, v58);
  }
  uint64_t v105 = v221[7];
  uint64_t v106 = (void *)(v99 + v105);
  uint64_t v107 = (const void *)(v100 + v105);
  if (v205((const void *)(v100 + v105), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 32))(v106, v107, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v106, 0, 1, v207);
  }
  uint64_t v109 = v221[8];
  HKUnit v110 = (void *)(v99 + v109);
  uint64_t v111 = (const void *)(v100 + v109);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v100 + v109, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v110, v111, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v110, 0, 1, v217);
  }
  *(unsigned char *)(v99 + v221[9]) = *(unsigned char *)(v100 + v221[9]);
  uint64_t v113 = *(int *)(v220 + 20);
  uint64_t v114 = (char *)(v99 + v113);
  char v115 = (char *)(v100 + v113);
  int v116 = swift_getEnumCaseMultiPayload();
  if (v116 == 2)
  {
    v7((uint64_t)v114, (uint64_t)v115, v218);
    v7((uint64_t)&v114[*(int *)(v203 + 36)], (uint64_t)&v115[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v114[*(int *)(v118 + 48)] = *(void *)&v115[*(int *)(v118 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v116 == 1)
  {
    v7((uint64_t)v114, (uint64_t)v115, v218);
    v7((uint64_t)&v114[*(int *)(v203 + 36)], (uint64_t)&v115[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v114[*(int *)(v117 + 48)] = *(void *)&v115[*(int *)(v117 + 48)];
    *(void *)&v114[*(int *)(v117 + 64)] = *(void *)&v115[*(int *)(v117 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v114, v115, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v119 = *(int *)(v220 + 24);
  int v120 = (char *)(v99 + v119);
  int v121 = (char *)(v100 + v119);
  if (v204(v121, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v120, v121, *(void *)(*(void *)(v122 - 8) + 64));
  }
  else
  {
    uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v123(v120, v121, v212);
    uint64_t v124 = v210[5];
    unint64_t v125 = &v120[v124];
    int v126 = &v121[v124];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v128 = v127;
    uint64_t v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 32);
    uint64_t v130 = v125;
    uint64_t v7 = v202;
    v129(v130, v126, v128);
    v123(&v120[v210[6]], &v121[v210[6]], v212);
    v129(&v120[v210[7]], &v121[v210[7]], v128);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v120, 0, 1, v210);
  }
  uint64_t v131 = v213[11];
  uint64_t v132 = v216 + v131;
  uint64_t v133 = v214 + v131;
  v7(v216 + v131, v214 + v131, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v132 + v221[5], v133 + v221[5], v209);
  uint64_t v134 = v221[6];
  uint64_t v135 = (void *)(v132 + v134);
  uint64_t v136 = (const void *)(v133 + v134);
  if (v206((const void *)(v133 + v134), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v135, v136, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v135, 0, 1, v58);
  }
  uint64_t v138 = v221[7];
  uint64_t v139 = (void *)(v132 + v138);
  uint64_t v140 = (const void *)(v133 + v138);
  if (v205((const void *)(v133 + v138), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v139, v140, *(void *)(*(void *)(v141 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 32))(v139, v140, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v139, 0, 1, v207);
  }
  uint64_t v142 = v221[8];
  int v143 = (void *)(v132 + v142);
  int v144 = (const void *)(v133 + v142);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v133 + v142, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v143, v144, *(void *)(*(void *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v143, v144, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v143, 0, 1, v217);
  }
  *(unsigned char *)(v132 + v221[9]) = *(unsigned char *)(v133 + v221[9]);
  uint64_t v146 = *(int *)(v220 + 20);
  uint64_t v147 = (char *)(v132 + v146);
  char v148 = (char *)(v133 + v146);
  int v149 = swift_getEnumCaseMultiPayload();
  if (v149 == 2)
  {
    v7((uint64_t)v147, (uint64_t)v148, v218);
    v7((uint64_t)&v147[*(int *)(v203 + 36)], (uint64_t)&v148[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v147[*(int *)(v151 + 48)] = *(void *)&v148[*(int *)(v151 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v149 == 1)
  {
    v7((uint64_t)v147, (uint64_t)v148, v218);
    v7((uint64_t)&v147[*(int *)(v203 + 36)], (uint64_t)&v148[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v147[*(int *)(v150 + 48)] = *(void *)&v148[*(int *)(v150 + 48)];
    *(void *)&v147[*(int *)(v150 + 64)] = *(void *)&v148[*(int *)(v150 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v147, v148, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v152 = *(int *)(v220 + 24);
  uint64_t v153 = (char *)(v132 + v152);
  uint64_t v154 = (char *)(v133 + v152);
  if (v204(v154, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64));
  }
  else
  {
    uint64_t v156 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v156(v153, v154, v212);
    uint64_t v157 = v210[5];
    int v158 = &v153[v157];
    unint64_t v159 = &v154[v157];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v161 = v160;
    uint64_t v162 = *(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 32);
    uint64_t v163 = v158;
    uint64_t v7 = v202;
    v162(v163, v159, v161);
    v156(&v153[v210[6]], &v154[v210[6]], v212);
    v162(&v153[v210[7]], &v154[v210[7]], v161);
    uint64_t v58 = v212;
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v153, 0, 1, v210);
  }
  uint64_t v164 = v213[12];
  uint64_t v165 = v216 + v164;
  uint64_t v166 = v214 + v164;
  v7(v216 + v164, v214 + v164, v218);
  ((void (*)(uint64_t, uint64_t, uint64_t))v208)(v165 + v221[5], v166 + v221[5], v209);
  uint64_t v167 = v221[6];
  id v168 = (void *)(v165 + v167);
  uint64_t v169 = (const void *)(v166 + v167);
  if (v206((const void *)(v166 + v167), 1, v58))
  {
    sub_250D91EB4();
    memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v168, v169, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v168, 0, 1, v58);
  }
  uint64_t v171 = v221[7];
  uint64_t v172 = (void *)(v165 + v171);
  uint64_t v173 = (const void *)(v166 + v171);
  if (v205((const void *)(v166 + v171), 1, v207))
  {
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v172, v173, *(void *)(*(void *)(v174 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v201 + 32))(v172, v173, v207);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v172, 0, 1, v207);
  }
  uint64_t v175 = v221[8];
  uint64_t v176 = (void *)(v165 + v175);
  uint64_t v177 = (const void *)(v166 + v175);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v215)(v166 + v175, 1, v217))
  {
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v176, v177, *(void *)(*(void *)(v178 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v200 + 32))(v176, v177, v217);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v176, 0, 1, v217);
  }
  *(unsigned char *)(v165 + v221[9]) = *(unsigned char *)(v166 + v221[9]);
  uint64_t v179 = *(int *)(v220 + 20);
  uint64_t v180 = (char *)(v165 + v179);
  uint64_t v181 = (char *)(v166 + v179);
  int v182 = swift_getEnumCaseMultiPayload();
  if (v182 == 2)
  {
    v202((uint64_t)v180, (uint64_t)v181, v218);
    v202((uint64_t)&v180[*(int *)(v203 + 36)], (uint64_t)&v181[*(int *)(v203 + 36)], v218);
    sub_250D96CC4();
    *(void *)&v180[*(int *)(v184 + 48)] = *(void *)&v181[*(int *)(v184 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v182 == 1)
  {
    v202((uint64_t)v180, (uint64_t)v181, v218);
    v202((uint64_t)&v180[*(int *)(v203 + 36)], (uint64_t)&v181[*(int *)(v203 + 36)], v218);
    sub_250DA9D04();
    *(void *)&v180[*(int *)(v183 + 48)] = *(void *)&v181[*(int *)(v183 + 48)];
    *(void *)&v180[*(int *)(v183 + 64)] = *(void *)&v181[*(int *)(v183 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v180, v181, *(void *)(*(void *)(v219 - 8) + 64));
  }
  uint64_t v185 = *(int *)(v220 + 24);
  uint64_t v186 = (char *)(v165 + v185);
  int v187 = (char *)(v166 + v185);
  if (v204(v187, 1, v210))
  {
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
  }
  else
  {
    int v189 = *(void (**)(char *, char *, uint64_t))(v211 + 32);
    v189(v186, v187, v212);
    uint64_t v190 = v210[5];
    uint64_t v191 = &v186[v190];
    uint64_t v192 = &v187[v190];
    sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
    uint64_t v194 = v193;
    int v195 = *(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32);
    v195(v191, v192, v193);
    v189(&v186[v210[6]], &v187[v210[6]], v212);
    v195(&v186[v210[7]], &v187[v210[7]], v194);
    (*(void (**)(char *, void, uint64_t, int *))(v199 + 56))(v186, 0, 1, v210);
  }
  return v216;
}

uint64_t assignWithTake for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v308 = sub_250E24B20();
  uint64_t v305 = *(void *)(v308 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v305 + 40);
  v6(a1, a2, v308);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  v6(a1 + v7, a2 + v7, v308);
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  uint64_t v304 = v10;
  uint64_t v316 = v6;
  v6(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v308);
  int v317 = a3;
  uint64_t v11 = a3[6];
  uint64_t v322 = a2;
  uint64_t v325 = a1;
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_250E24710();
  uint64_t v307 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v307 + 48);
  LODWORD(v8) = v15(v12, 1, v14);
  uint64_t v321 = v14;
  v318 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15;
  int v16 = v15(v13, 1, v14);
  if (v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v307 + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v12, v14);
LABEL_6:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v307 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v18 = v317[7];
  uint64_t v19 = v317[8];
  uint64_t v20 = v325 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = v325 + v19;
  uint64_t v23 = a2 + v19;
  v6(v325 + v19, a2 + v19, v308);
  uint64_t v24 = (int *)type metadata accessor for SleepingSampleAggregate();
  uint64_t v25 = v24[5];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = sub_250E248B0();
  uint64_t v312 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 40);
  uint64_t v313 = v28;
  v312(v26, v27);
  uint64_t v29 = v24[6];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  sub_250D98938(0, &qword_26B208150, (unint64_t *)&qword_26B208158);
  uint64_t v33 = v32;
  uint64_t v315 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v315 + 48);
  LODWORD(v26) = v34(v30, 1, v32);
  uint64_t v326 = v33;
  v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
  int v35 = v34(v31, 1, v33);
  if (v26)
  {
    if (v35)
    {
      sub_250D91EB4();
      memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v37 = v33;
    }
    else
    {
      uint64_t v40 = v31;
      uint64_t v37 = v33;
      (*(void (**)(void *, const void *, uint64_t))(v315 + 32))(v30, v40, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v315 + 56))(v30, 0, 1, v33);
    }
  }
  else if (v35)
  {
    (*(void (**)(void *, uint64_t))(v315 + 8))(v30, v33);
    sub_250D91EB4();
    uint64_t v39 = v31;
    uint64_t v37 = v33;
    memcpy(v30, v39, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v31;
    uint64_t v37 = v33;
    (*(void (**)(void *, const void *, uint64_t))(v315 + 40))(v30, v41, v33);
  }
  uint64_t v42 = v24[7];
  uint64_t v43 = (void *)(v22 + v42);
  uint64_t v44 = (void *)(v23 + v42);
  uint64_t v45 = sub_250E243F0();
  uint64_t v306 = *(void *)(v45 - 8);
  uint64_t v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v306 + 48);
  int v47 = v46(v43, 1, v45);
  uint64_t v320 = v45;
  v310 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
  int v48 = v46(v44, 1, v45);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v306 + 32))(v43, v44, v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v306 + 56))(v43, 0, 1, v45);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v306 + 8))(v43, v45);
LABEL_20:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v306 + 40))(v43, v44, v45);
LABEL_21:
  uint64_t v50 = v24[8];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (const void *)(v23 + v50);
  int v53 = v318(v22 + v50, 1, v321);
  int v54 = v318((uint64_t)v52, 1, v321);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v51, v52, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v51, 0, 1, v321);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v54)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v51, v321);
LABEL_26:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v51, v52, v321);
LABEL_27:
  *(unsigned char *)(v22 + v24[9]) = *(unsigned char *)(v23 + v24[9]);
  uint64_t v56 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v57 = v56;
  if (v325 != v322)
  {
    uint64_t v58 = *(int *)(v56 + 20);
    uint64_t v59 = (char *)(v22 + v58);
    uint64_t v60 = (char *)(v23 + v58);
    sub_250D94CAC(v22 + v58, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v61 = type metadata accessor for SleepingSampleBaselineAvailability();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v65(v59, v60, v308);
      v65(&v59[*(int *)(v304 + 36)], &v60[*(int *)(v304 + 36)], v308);
      uint64_t v37 = v326;
      sub_250D96CC4();
      *(void *)&v59[*(int *)(v66 + 48)] = *(void *)&v60[*(int *)(v66 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v63(v59, v60, v308);
      v63(&v59[*(int *)(v304 + 36)], &v60[*(int *)(v304 + 36)], v308);
      uint64_t v37 = v326;
      sub_250DA9D04();
      *(void *)&v59[*(int *)(v64 + 48)] = *(void *)&v60[*(int *)(v64 + 48)];
      *(void *)&v59[*(int *)(v64 + 64)] = *(void *)&v60[*(int *)(v64 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
  }
  uint64_t v67 = *(int *)(v57 + 24);
  uint64_t v68 = (char *)(v22 + v67);
  id v69 = (char *)(v23 + v67);
  uint64_t v70 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v302 = *(void *)(v70 - 8);
  uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v302 + 48);
  int v72 = v71(v68, 1, v70);
  v319 = (int *)v70;
  uint64_t v309 = (uint64_t (*)(char *, uint64_t, int *))v71;
  int v73 = v71(v69, 1, v70);
  uint64_t v314 = v57;
  uint64_t v303 = v24;
  if (v72)
  {
    uint64_t v74 = v308;
    if (!v73)
    {
      uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v315 + 32);
      v75(v68, v69, v326);
      uint64_t v76 = v70;
      uint64_t v77 = *(int *)(v70 + 20);
      uint64_t v78 = &v68[v77];
      uint64_t v79 = &v69[v77];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v81 = v80;
      uint64_t v82 = *(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32);
      v82(v78, v79, v80);
      v75(&v68[*(int *)(v76 + 24)], &v69[*(int *)(v76 + 24)], v326);
      uint64_t v37 = v326;
      v82(&v68[*(int *)(v76 + 28)], &v69[*(int *)(v76 + 28)], v81);
      uint64_t v74 = v308;
      uint64_t v24 = v303;
      (*(void (**)(char *, void, uint64_t, int *))(v302 + 56))(v68, 0, 1, v319);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint64_t v74 = v308;
  if (v73)
  {
    sub_250D94CAC((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_38:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_39;
  }
  uint64_t v267 = *(void (**)(char *, char *, uint64_t))(v315 + 40);
  v267(v68, v69, v326);
  uint64_t v268 = *(int *)(v70 + 20);
  uint64_t v301 = &v68[v268];
  uint64_t v269 = &v69[v268];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v271 = v270;
  uint64_t v272 = *(void (**)(char *, char *, uint64_t))(*(void *)(v270 - 8) + 40);
  v272(v301, v269, v270);
  v267(&v68[v319[6]], &v69[v319[6]], v326);
  uint64_t v37 = v326;
  v272(&v68[v319[7]], &v69[v319[7]], v271);
LABEL_39:
  uint64_t v84 = v317[9];
  uint64_t v85 = v325 + v84;
  uint64_t v86 = v322 + v84;
  v316(v325 + v84, v322 + v84, v74);
  ((void (*)(uint64_t, uint64_t, uint64_t))v312)(v85 + v24[5], v86 + v24[5], v313);
  uint64_t v87 = v24[6];
  uint64_t v88 = (void *)(v85 + v87);
  uint64_t v89 = (const void *)(v86 + v87);
  int v90 = v311(v85 + v87, 1, v37);
  int v91 = v311((uint64_t)v89, 1, v37);
  if (v90)
  {
    if (!v91)
    {
      (*(void (**)(void *, const void *, uint64_t))(v315 + 32))(v88, v89, v326);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v315 + 56))(v88, 0, 1, v326);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v91)
  {
    (*(void (**)(void *, uint64_t))(v315 + 8))(v88, v326);
LABEL_44:
    sub_250D91EB4();
    memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, const void *, uint64_t))(v315 + 40))(v88, v89, v326);
LABEL_45:
  uint64_t v93 = v24[7];
  uint64_t v94 = (void *)(v85 + v93);
  uint64_t v95 = (const void *)(v86 + v93);
  int v96 = v310(v85 + v93, 1, v320);
  int v97 = v310((uint64_t)v95, 1, v320);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(void *, const void *, uint64_t))(v306 + 32))(v94, v95, v320);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v306 + 56))(v94, 0, 1, v320);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v97)
  {
    (*(void (**)(void *, uint64_t))(v306 + 8))(v94, v320);
LABEL_50:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(void *, const void *, uint64_t))(v306 + 40))(v94, v95, v320);
LABEL_51:
  uint64_t v99 = v24[8];
  uint64_t v100 = (void *)(v85 + v99);
  uint64_t v101 = (const void *)(v86 + v99);
  int v102 = v318(v85 + v99, 1, v321);
  int v103 = v318((uint64_t)v101, 1, v321);
  if (v102)
  {
    uint64_t v104 = v314;
    if (!v103)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v100, v101, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v100, 0, 1, v321);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v104 = v314;
  if (v103)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v100, v321);
LABEL_56:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v100, v101, *(void *)(*(void *)(v105 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v100, v101, v321);
LABEL_57:
  *(unsigned char *)(v85 + v24[9]) = *(unsigned char *)(v86 + v24[9]);
  uint64_t v106 = v326;
  if (v325 != v322)
  {
    uint64_t v107 = *(int *)(v104 + 20);
    uint64_t v108 = (char *)(v85 + v107);
    uint64_t v109 = (char *)(v86 + v107);
    sub_250D94CAC(v85 + v107, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v110 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v111 = swift_getEnumCaseMultiPayload();
    if (v111 == 2)
    {
      uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v114(v108, v109, v74);
      v114(&v108[*(int *)(v304 + 36)], &v109[*(int *)(v304 + 36)], v74);
      uint64_t v106 = v326;
      sub_250D96CC4();
      *(void *)&v108[*(int *)(v115 + 48)] = *(void *)&v109[*(int *)(v115 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v111 == 1)
    {
      uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v112(v108, v109, v74);
      v112(&v108[*(int *)(v304 + 36)], &v109[*(int *)(v304 + 36)], v74);
      uint64_t v106 = v326;
      sub_250DA9D04();
      *(void *)&v108[*(int *)(v113 + 48)] = *(void *)&v109[*(int *)(v113 + 48)];
      *(void *)&v108[*(int *)(v113 + 64)] = *(void *)&v109[*(int *)(v113 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64));
    }
  }
  uint64_t v116 = *(int *)(v104 + 24);
  uint64_t v117 = (char *)(v85 + v116);
  uint64_t v118 = (char *)(v86 + v116);
  int v119 = v309(v117, 1, v319);
  int v120 = v309(v118, 1, v319);
  if (v119)
  {
    if (!v120)
    {
      int v121 = *(void (**)(char *, char *, uint64_t))(v315 + 32);
      v121(v117, v118, v326);
      uint64_t v122 = v319;
      uint64_t v123 = v319[5];
      uint64_t v124 = &v117[v123];
      unint64_t v125 = &v118[v123];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v127 = v126;
      uint64_t v128 = *(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 32);
      v128(v124, v125, v126);
      v121(&v117[v122[6]], &v118[v122[6]], v326);
      uint64_t v106 = v326;
      v128(&v117[v122[7]], &v118[v122[7]], v127);
      uint64_t v74 = v308;
      uint64_t v24 = v303;
      (*(void (**)(char *, void, uint64_t, int *))(v302 + 56))(v117, 0, 1, v319);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v120)
  {
    sub_250D94CAC((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_68:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v117, v118, *(void *)(*(void *)(v129 - 8) + 64));
    goto LABEL_69;
  }
  double v273 = *(void (**)(char *, char *, uint64_t))(v315 + 40);
  v273(v117, v118, v326);
  uint64_t v274 = v319[5];
  uint64_t v275 = &v117[v274];
  uint64_t v276 = &v118[v274];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v278 = v277;
  uint64_t v279 = *(void (**)(char *, char *, uint64_t))(*(void *)(v277 - 8) + 40);
  v279(v275, v276, v277);
  v273(&v117[v319[6]], &v118[v319[6]], v326);
  uint64_t v106 = v326;
  uint64_t v24 = v303;
  v279(&v117[v319[7]], &v118[v319[7]], v278);
  uint64_t v74 = v308;
LABEL_69:
  uint64_t v130 = v317[10];
  uint64_t v131 = v325 + v130;
  uint64_t v132 = v322 + v130;
  v316(v325 + v130, v322 + v130, v74);
  ((void (*)(uint64_t, uint64_t, uint64_t))v312)(v131 + v24[5], v132 + v24[5], v313);
  uint64_t v133 = v24[6];
  uint64_t v134 = (void *)(v131 + v133);
  uint64_t v135 = (const void *)(v132 + v133);
  int v136 = v311(v131 + v133, 1, v106);
  int v137 = v311((uint64_t)v135, 1, v106);
  if (v136)
  {
    if (!v137)
    {
      (*(void (**)(void *, const void *, uint64_t))(v315 + 32))(v134, v135, v326);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v315 + 56))(v134, 0, 1, v326);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v137)
  {
    (*(void (**)(void *, uint64_t))(v315 + 8))(v134, v326);
LABEL_74:
    sub_250D91EB4();
    memcpy(v134, v135, *(void *)(*(void *)(v138 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(void *, const void *, uint64_t))(v315 + 40))(v134, v135, v326);
LABEL_75:
  uint64_t v139 = v24[7];
  uint64_t v140 = (void *)(v131 + v139);
  uint64_t v141 = (const void *)(v132 + v139);
  int v142 = v310(v131 + v139, 1, v320);
  int v143 = v310((uint64_t)v141, 1, v320);
  if (v142)
  {
    if (!v143)
    {
      (*(void (**)(void *, const void *, uint64_t))(v306 + 32))(v140, v141, v320);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v306 + 56))(v140, 0, 1, v320);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v143)
  {
    (*(void (**)(void *, uint64_t))(v306 + 8))(v140, v320);
LABEL_80:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, const void *, uint64_t))(v306 + 40))(v140, v141, v320);
LABEL_81:
  uint64_t v145 = v24[8];
  uint64_t v146 = (void *)(v131 + v145);
  uint64_t v147 = (const void *)(v132 + v145);
  int v148 = v318(v131 + v145, 1, v321);
  int v149 = v318((uint64_t)v147, 1, v321);
  if (v148)
  {
    uint64_t v150 = v314;
    if (!v149)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v146, v147, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v146, 0, 1, v321);
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v150 = v314;
  if (v149)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v146, v321);
LABEL_86:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v146, v147, *(void *)(*(void *)(v151 - 8) + 64));
    goto LABEL_87;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v146, v147, v321);
LABEL_87:
  *(unsigned char *)(v131 + v24[9]) = *(unsigned char *)(v132 + v24[9]);
  uint64_t v152 = v326;
  if (v325 != v322)
  {
    uint64_t v153 = *(int *)(v150 + 20);
    uint64_t v154 = (char *)(v131 + v153);
    uint64_t v155 = (char *)(v132 + v153);
    sub_250D94CAC(v131 + v153, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v156 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v157 = swift_getEnumCaseMultiPayload();
    if (v157 == 2)
    {
      uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v160(v154, v155, v74);
      v160(&v154[*(int *)(v304 + 36)], &v155[*(int *)(v304 + 36)], v74);
      uint64_t v152 = v326;
      sub_250D96CC4();
      *(void *)&v154[*(int *)(v161 + 48)] = *(void *)&v155[*(int *)(v161 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v157 == 1)
    {
      int v158 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v158(v154, v155, v74);
      v158(&v154[*(int *)(v304 + 36)], &v155[*(int *)(v304 + 36)], v74);
      uint64_t v152 = v326;
      sub_250DA9D04();
      *(void *)&v154[*(int *)(v159 + 48)] = *(void *)&v155[*(int *)(v159 + 48)];
      *(void *)&v154[*(int *)(v159 + 64)] = *(void *)&v155[*(int *)(v159 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v154, v155, *(void *)(*(void *)(v156 - 8) + 64));
    }
  }
  uint64_t v162 = *(int *)(v150 + 24);
  uint64_t v163 = (char *)(v131 + v162);
  uint64_t v164 = (char *)(v132 + v162);
  int v165 = v309(v163, 1, v319);
  int v166 = v309(v164, 1, v319);
  if (v165)
  {
    if (!v166)
    {
      uint64_t v167 = *(void (**)(char *, char *, uint64_t))(v315 + 32);
      v167(v163, v164, v326);
      id v168 = v319;
      uint64_t v169 = v319[5];
      uint64_t v170 = &v163[v169];
      uint64_t v171 = &v164[v169];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v173 = v172;
      uint64_t v174 = *(void (**)(char *, char *, uint64_t))(*(void *)(v172 - 8) + 32);
      v174(v170, v171, v172);
      v167(&v163[v168[6]], &v164[v168[6]], v326);
      uint64_t v152 = v326;
      v174(&v163[v168[7]], &v164[v168[7]], v173);
      uint64_t v74 = v308;
      uint64_t v24 = v303;
      (*(void (**)(char *, void, uint64_t, int *))(v302 + 56))(v163, 0, 1, v319);
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (v166)
  {
    sub_250D94CAC((uint64_t)v163, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_98:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v163, v164, *(void *)(*(void *)(v175 - 8) + 64));
    goto LABEL_99;
  }
  uint64_t v280 = *(void (**)(char *, char *, uint64_t))(v315 + 40);
  v280(v163, v164, v326);
  uint64_t v281 = v319[5];
  uint64_t v282 = &v163[v281];
  v283 = &v164[v281];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v285 = v284;
  uint64_t v286 = *(void (**)(char *, char *, uint64_t))(*(void *)(v284 - 8) + 40);
  v286(v282, v283, v284);
  v280(&v163[v319[6]], &v164[v319[6]], v326);
  uint64_t v152 = v326;
  uint64_t v24 = v303;
  v286(&v163[v319[7]], &v164[v319[7]], v285);
  uint64_t v74 = v308;
LABEL_99:
  uint64_t v176 = v317[11];
  uint64_t v177 = v325 + v176;
  uint64_t v178 = v322 + v176;
  v316(v325 + v176, v322 + v176, v74);
  ((void (*)(uint64_t, uint64_t, uint64_t))v312)(v177 + v24[5], v178 + v24[5], v313);
  uint64_t v179 = v24[6];
  uint64_t v180 = (void *)(v177 + v179);
  uint64_t v181 = (const void *)(v178 + v179);
  int v182 = v311(v177 + v179, 1, v152);
  int v183 = v311((uint64_t)v181, 1, v152);
  if (v182)
  {
    if (!v183)
    {
      (*(void (**)(void *, const void *, uint64_t))(v315 + 32))(v180, v181, v326);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v315 + 56))(v180, 0, 1, v326);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v183)
  {
    (*(void (**)(void *, uint64_t))(v315 + 8))(v180, v326);
LABEL_104:
    sub_250D91EB4();
    memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
    goto LABEL_105;
  }
  (*(void (**)(void *, const void *, uint64_t))(v315 + 40))(v180, v181, v326);
LABEL_105:
  uint64_t v185 = v24[7];
  uint64_t v186 = (void *)(v177 + v185);
  int v187 = (const void *)(v178 + v185);
  int v188 = v310(v177 + v185, 1, v320);
  int v189 = v310((uint64_t)v187, 1, v320);
  if (v188)
  {
    if (!v189)
    {
      (*(void (**)(void *, const void *, uint64_t))(v306 + 32))(v186, v187, v320);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v306 + 56))(v186, 0, 1, v320);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v189)
  {
    (*(void (**)(void *, uint64_t))(v306 + 8))(v186, v320);
LABEL_110:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v186, v187, *(void *)(*(void *)(v190 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(void *, const void *, uint64_t))(v306 + 40))(v186, v187, v320);
LABEL_111:
  uint64_t v191 = v24[8];
  uint64_t v192 = (void *)(v177 + v191);
  uint64_t v193 = (const void *)(v178 + v191);
  int v194 = v318(v177 + v191, 1, v321);
  int v195 = v318((uint64_t)v193, 1, v321);
  if (v194)
  {
    uint64_t v196 = v314;
    if (!v195)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v192, v193, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v192, 0, 1, v321);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  uint64_t v196 = v314;
  if (v195)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v192, v321);
LABEL_116:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v192, v193, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v192, v193, v321);
LABEL_117:
  *(unsigned char *)(v177 + v24[9]) = *(unsigned char *)(v178 + v24[9]);
  uint64_t v198 = v326;
  if (v325 != v322)
  {
    uint64_t v199 = *(int *)(v196 + 20);
    uint64_t v200 = (char *)(v177 + v199);
    uint64_t v201 = (char *)(v178 + v199);
    sub_250D94CAC(v177 + v199, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v202 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v203 = swift_getEnumCaseMultiPayload();
    if (v203 == 2)
    {
      uint64_t v206 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v206(v200, v201, v74);
      v206(&v200[*(int *)(v304 + 36)], &v201[*(int *)(v304 + 36)], v74);
      uint64_t v198 = v326;
      sub_250D96CC4();
      *(void *)&v200[*(int *)(v207 + 48)] = *(void *)&v201[*(int *)(v207 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v203 == 1)
    {
      int v204 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v204(v200, v201, v74);
      v204(&v200[*(int *)(v304 + 36)], &v201[*(int *)(v304 + 36)], v74);
      uint64_t v198 = v326;
      sub_250DA9D04();
      *(void *)&v200[*(int *)(v205 + 48)] = *(void *)&v201[*(int *)(v205 + 48)];
      *(void *)&v200[*(int *)(v205 + 64)] = *(void *)&v201[*(int *)(v205 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
    }
  }
  uint64_t v208 = *(int *)(v196 + 24);
  uint64_t v209 = (char *)(v177 + v208);
  HKUnit v210 = (char *)(v178 + v208);
  int v211 = v309(v209, 1, v319);
  int v212 = v309(v210, 1, v319);
  if (v211)
  {
    if (!v212)
    {
      int v213 = *(void (**)(char *, char *, uint64_t))(v315 + 32);
      v213(v209, v210, v326);
      uint64_t v214 = v319;
      uint64_t v215 = v319[5];
      uint64_t v216 = &v209[v215];
      uint64_t v217 = &v210[v215];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v219 = v218;
      uint64_t v220 = *(void (**)(char *, char *, uint64_t))(*(void *)(v218 - 8) + 32);
      v220(v216, v217, v218);
      v213(&v209[v214[6]], &v210[v214[6]], v326);
      uint64_t v198 = v326;
      v220(&v209[v214[7]], &v210[v214[7]], v219);
      uint64_t v74 = v308;
      uint64_t v24 = v303;
      (*(void (**)(char *, void, uint64_t, int *))(v302 + 56))(v209, 0, 1, v319);
      goto LABEL_129;
    }
    goto LABEL_128;
  }
  if (v212)
  {
    sub_250D94CAC((uint64_t)v209, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
LABEL_128:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v209, v210, *(void *)(*(void *)(v221 - 8) + 64));
    goto LABEL_129;
  }
  v287 = *(void (**)(char *, char *, uint64_t))(v315 + 40);
  v287(v209, v210, v326);
  uint64_t v288 = v319[5];
  uint64_t v289 = &v209[v288];
  v290 = &v210[v288];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v292 = v291;
  uint64_t v293 = *(void (**)(char *, char *, uint64_t))(*(void *)(v291 - 8) + 40);
  v293(v289, v290, v291);
  v287(&v209[v319[6]], &v210[v319[6]], v326);
  uint64_t v198 = v326;
  uint64_t v24 = v303;
  v293(&v209[v319[7]], &v210[v319[7]], v292);
  uint64_t v74 = v308;
LABEL_129:
  uint64_t v222 = v317[12];
  uint64_t v223 = v325 + v222;
  uint64_t v224 = v322 + v222;
  v316(v325 + v222, v322 + v222, v74);
  ((void (*)(uint64_t, uint64_t, uint64_t))v312)(v223 + v24[5], v224 + v24[5], v313);
  uint64_t v225 = v24[6];
  uint64_t v226 = (void *)(v223 + v225);
  uint64_t v227 = (const void *)(v224 + v225);
  int v228 = v311(v223 + v225, 1, v198);
  int v229 = v311((uint64_t)v227, 1, v198);
  if (v228)
  {
    if (!v229)
    {
      (*(void (**)(void *, const void *, uint64_t))(v315 + 32))(v226, v227, v198);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v315 + 56))(v226, 0, 1, v198);
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  if (v229)
  {
    (*(void (**)(void *, uint64_t))(v315 + 8))(v226, v198);
LABEL_134:
    sub_250D91EB4();
    memcpy(v226, v227, *(void *)(*(void *)(v230 - 8) + 64));
    goto LABEL_135;
  }
  (*(void (**)(void *, const void *, uint64_t))(v315 + 40))(v226, v227, v198);
LABEL_135:
  uint64_t v231 = v24[7];
  uint64_t v232 = (void *)(v223 + v231);
  uint64_t v233 = (const void *)(v224 + v231);
  int v234 = v310(v223 + v231, 1, v320);
  int v235 = v310((uint64_t)v233, 1, v320);
  if (v234)
  {
    if (!v235)
    {
      (*(void (**)(void *, const void *, uint64_t))(v306 + 32))(v232, v233, v320);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v306 + 56))(v232, 0, 1, v320);
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if (v235)
  {
    (*(void (**)(void *, uint64_t))(v306 + 8))(v232, v320);
LABEL_140:
    sub_250D96C60(0, (unint64_t *)&unk_26B207F50, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
    memcpy(v232, v233, *(void *)(*(void *)(v236 - 8) + 64));
    goto LABEL_141;
  }
  (*(void (**)(void *, const void *, uint64_t))(v306 + 40))(v232, v233, v320);
LABEL_141:
  uint64_t v237 = v24[8];
  uint64_t v238 = (void *)(v223 + v237);
  v239 = (const void *)(v224 + v237);
  int v240 = v318(v223 + v237, 1, v321);
  int v241 = v318((uint64_t)v239, 1, v321);
  if (v240)
  {
    uint64_t v242 = v314;
    if (!v241)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v238, v239, v321);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(v238, 0, 1, v321);
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  uint64_t v242 = v314;
  if (v241)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v238, v321);
LABEL_146:
    sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v238, v239, *(void *)(*(void *)(v243 - 8) + 64));
    goto LABEL_147;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v238, v239, v321);
LABEL_147:
  *(unsigned char *)(v223 + v24[9]) = *(unsigned char *)(v224 + v24[9]);
  if (v325 != v322)
  {
    uint64_t v244 = *(int *)(v242 + 20);
    uint64_t v245 = (char *)(v223 + v244);
    uint64_t v246 = (char *)(v224 + v244);
    sub_250D94CAC(v223 + v244, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineAvailability);
    uint64_t v247 = type metadata accessor for SleepingSampleBaselineAvailability();
    int v248 = swift_getEnumCaseMultiPayload();
    if (v248 == 2)
    {
      uint64_t v251 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v251(v245, v246, v74);
      v251(&v245[*(int *)(v304 + 36)], &v246[*(int *)(v304 + 36)], v74);
      sub_250D96CC4();
      *(void *)&v245[*(int *)(v252 + 48)] = *(void *)&v246[*(int *)(v252 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v248 == 1)
    {
      int v249 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
      v249(v245, v246, v74);
      v249(&v245[*(int *)(v304 + 36)], &v246[*(int *)(v304 + 36)], v74);
      sub_250DA9D04();
      *(void *)&v245[*(int *)(v250 + 48)] = *(void *)&v246[*(int *)(v250 + 48)];
      *(void *)&v245[*(int *)(v250 + 64)] = *(void *)&v246[*(int *)(v250 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v245, v246, *(void *)(*(void *)(v247 - 8) + 64));
    }
  }
  uint64_t v253 = *(int *)(v242 + 24);
  uint64_t v254 = (char *)(v223 + v253);
  uint64_t v255 = (char *)(v224 + v253);
  int v256 = v309((char *)(v223 + v253), 1, v319);
  int v257 = v309(v255, 1, v319);
  if (!v256)
  {
    if (!v257)
    {
      uint64_t v294 = *(void (**)(char *, char *, uint64_t))(v315 + 40);
      v294(v254, v255, v326);
      v295 = v319;
      uint64_t v296 = v319[5];
      uint64_t v324 = &v254[v296];
      uint64_t v297 = &v255[v296];
      sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
      uint64_t v299 = v298;
      uint64_t v300 = *(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 40);
      v300(v324, v297, v298);
      v294(&v254[v295[6]], &v255[v295[6]], v326);
      v300(&v254[v295[7]], &v255[v295[7]], v299);
      return v325;
    }
    sub_250D94CAC((uint64_t)v254, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaseline);
    goto LABEL_158;
  }
  if (v257)
  {
LABEL_158:
    sub_250D96C60(0, &qword_26B207DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, MEMORY[0x263F8D8F0]);
    memcpy(v254, v255, *(void *)(*(void *)(v265 - 8) + 64));
    return v325;
  }
  int v258 = *(void (**)(char *, char *, uint64_t))(v315 + 32);
  v258(v254, v255, v326);
  v259 = v319;
  uint64_t v260 = v319[5];
  uint64_t v323 = &v254[v260];
  uint64_t v261 = &v255[v260];
  sub_250D98938(0, &qword_26B207998, (unint64_t *)&qword_26B207F08);
  uint64_t v263 = v262;
  uint64_t v264 = *(void (**)(char *, char *, uint64_t))(*(void *)(v262 - 8) + 32);
  v264(v323, v261, v262);
  v258(&v254[v259[6]], &v255[v259[6]], v326);
  v264(&v254[v259[7]], &v255[v259[7]], v263);
  (*(void (**)(char *, void, uint64_t, int *))(v302 + 56))(v254, 0, 1, v319);
  return v325;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250E1C074);
}

uint64_t sub_250E1C074(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_250E24B20();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];

  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250E1C26C);
}

uint64_t sub_250E1C26C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_250E24B20();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  sub_250D98A24(0, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  sub_250D96C60(0, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = type metadata accessor for SleepingSampleBaselineComparison();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];

  return v19(v21, a2, a2, v20);
}

void sub_250E1C45C()
{
  sub_250E24B20();
  if (v0 <= 0x3F)
  {
    sub_250D98A24(319, (unint64_t *)&qword_26B2081D0, MEMORY[0x263F8D870]);
    if (v1 <= 0x3F)
    {
      sub_250D96C60(319, &qword_26B207DD8, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for SleepingSampleBaselineComparison();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummary.OutlierContext()
{
  return &type metadata for SleepingSampleDaySummary.OutlierContext;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummary.CodingKeys()
{
  return &type metadata for SleepingSampleDaySummary.CodingKeys;
}

unint64_t sub_250E1C644()
{
  unint64_t result = qword_269B04338;
  if (!qword_269B04338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04338);
  }
  return result;
}

unint64_t sub_250E1C69C()
{
  unint64_t result = qword_26B208038;
  if (!qword_26B208038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208038);
  }
  return result;
}

unint64_t sub_250E1C6F4()
{
  unint64_t result = qword_26B208030;
  if (!qword_26B208030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B208030);
  }
  return result;
}

uint64_t sub_250E1C748(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E696C65736162 && a2 == 0xED000065676E6152 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000250E2E040 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x437265696C74756FLL && a2 == 0xEE00747865746E6FLL || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7461527472616568 && a2 == 0xE900000000000065 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79784F646F6F6C62 && a2 == 0xEB000000006E6567 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461726970736572 && a2 == 0xEF6574615279726FLL || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000250E2DCD0 || (sub_250E25400() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C7341656D6974 && a2 == 0xEA00000000007065)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_250E25400();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

void (*SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.modify(void *a1))(void *a1)
{
  BOOL v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_250D99470();
  v2[4] = sub_250E24A10();
  return sub_250E1CC04;
}

void sub_250E1CC04(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.getter()
{
  sub_250D99470();

  return sub_250E24A20();
}

uint64_t SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.setter()
{
  sub_250D99470();

  return sub_250E24A30();
}

void SleepingSampleAnalysisFeatureStatus.dataTypeStatus(for:)(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  switch(*a1)
  {
    case 1:
      sub_250D99470();
      uint64_t v9 = sub_250E24A20();
      if (!*(void *)(v9 + 16)) {
        goto LABEL_20;
      }
      id v10 = (id)*MEMORY[0x263F097C8];
      unint64_t v11 = sub_250DE4B9C((uint64_t)v10);
      if ((v12 & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v13 = *MEMORY[0x263F09600];
      id v8 = *(id *)(*(void *)(v9 + 56) + 8 * v11);

      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v8, sel_objectForKeyedSubscript_, v13);
      unsigned __int8 v15 = 1;
      goto LABEL_17;
    case 2:
      sub_250D99470();
      uint64_t v16 = sub_250E24A20();
      if (!*(void *)(v16 + 16)) {
        goto LABEL_20;
      }
      id v10 = (id)*MEMORY[0x263F097B8];
      unint64_t v17 = sub_250DE4B9C((uint64_t)v10);
      if ((v18 & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v19 = *MEMORY[0x263F095D8];
      id v8 = *(id *)(*(void *)(v16 + 56) + 8 * v17);

      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v8, sel_objectForKeyedSubscript_, v19);
      unsigned __int8 v15 = 2;
      goto LABEL_17;
    case 3:
      sub_250D99470();
      uint64_t v20 = sub_250E24A20();
      if (!*(void *)(v20 + 16)) {
        goto LABEL_20;
      }
      id v10 = (id)*MEMORY[0x263F097F8];
      unint64_t v21 = sub_250DE4B9C((uint64_t)v10);
      if ((v22 & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v23 = *MEMORY[0x263F09600];
      id v8 = *(id *)(*(void *)(v20 + 56) + 8 * v21);

      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v8, sel_objectForKeyedSubscript_, v23);
      unsigned __int8 v15 = 3;
      goto LABEL_17;
    case 4:
      sub_250D99470();
      uint64_t v24 = sub_250E24A20();
      if (!*(void *)(v24 + 16)) {
        goto LABEL_20;
      }
      id v10 = (id)*MEMORY[0x263F097E8];
      unint64_t v25 = sub_250DE4B9C((uint64_t)v10);
      if ((v26 & 1) == 0)
      {
LABEL_19:

LABEL_20:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      uint64_t v27 = *MEMORY[0x263F09600];
      id v8 = *(id *)(*(void *)(v24 + 56) + 8 * v25);

      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v8, sel_objectForKeyedSubscript_, v27);
      unsigned __int8 v15 = 4;
LABEL_17:
      unsigned __int8 v31 = v15;
      sub_250DCAF94(v14, &v31, (uint64_t)v32);
      goto LABEL_18;
    default:
      unint64_t v3 = (void *)sub_250E24C30();
      sub_250D99470();
      uint64_t v4 = sub_250E24A20();
      if (!*(void *)(v4 + 16)) {
        goto LABEL_24;
      }
      id v5 = (id)*MEMORY[0x263F097F0];
      unint64_t v6 = sub_250DE4B9C((uint64_t)v5);
      if (v7)
      {
        id v8 = *(id *)(*(void *)(v4 + 56) + 8 * v6);

        swift_bridgeObjectRelease();
        unsigned __int8 v31 = 0;
        sub_250DCAF94(objc_msgSend(v8, sel_objectForKeyedSubscript_, v3), &v31, (uint64_t)v32);

LABEL_18:
        unsigned int v28 = v32[0];
        uint64_t v29 = v33;
        char v30 = v34;
      }
      else
      {

LABEL_24:
        swift_bridgeObjectRelease();

LABEL_21:
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        char v30 = -1;
      }
      *(void *)a2 = v28;
      *(void *)(a2 + 8) = v29;
      *(unsigned char *)(a2 + 16) = v30;
      return;
  }
}

void *SleepingSampleAnalysisFeatureStatus.subscript.getter(void *a1)
{
  sub_250D99470();
  uint64_t v2 = sub_250E24A20();
  if (*(void *)(v2 + 16))
  {
    id v3 = a1;
    unint64_t v4 = sub_250DE4B9C((uint64_t)v3);
    if (v5)
    {
      unint64_t v6 = *(void **)(*(void *)(v2 + 56) + 8 * v4);
      id v7 = v6;
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static SleepingSampleAnalysisFeatureStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HKFeatureIdentifier(0);
  uint64_t v5 = v4;
  unint64_t v6 = sub_250D99B64();
  uint64_t v7 = sub_250D998AC(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
  uint64_t v8 = sub_250D998AC(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
  uint64_t v9 = sub_250D998AC(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
  uint64_t v10 = sub_250D998AC(&qword_269B04340, (void (*)(uint64_t))sub_250D99B64);

  return MEMORY[0x270EF31E0](a1, a2, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_250E1D1FC()
{
  return 0xD000000000000020;
}

uint64_t sub_250E1D218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_250E1E004(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_250E1D244(uint64_t a1)
{
  unint64_t v2 = sub_250E1D9D4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_250E1D280(uint64_t a1)
{
  unint64_t v2 = sub_250E1D9D4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SleepingSampleAnalysisFeatureStatus.encode(to:)(void *a1)
{
  sub_250E1DA28(0, &qword_269B04348, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250E1D9D4();
  sub_250E25510();
  sub_250D99470();
  sub_250D998AC(&qword_269B04358, (void (*)(uint64_t))sub_250D99470);
  sub_250E253B0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SleepingSampleAnalysisFeatureStatus.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  sub_250D99470();
  uint64_t v5 = v4;
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v21 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E1DA28(0, &qword_269B04360, MEMORY[0x263F8E040]);
  uint64_t v8 = v7;
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250E1D9D4();
  sub_250E25500();
  if (!v2)
  {
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    sub_250D998AC(&qword_269B04368, (void (*)(uint64_t))sub_250D99470);
    sub_250E25330();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v8);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v13, v21, v5);
    sub_250E1DA8C((uint64_t)v13, v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_250E1D6F0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HKFeatureIdentifier(0);
  uint64_t v5 = v4;
  unint64_t v6 = sub_250D99B64();
  uint64_t v7 = sub_250D998AC(&qword_26B207A48, type metadata accessor for HKFeatureIdentifier);
  uint64_t v8 = sub_250D998AC(&qword_26B207A30, type metadata accessor for HKFeatureIdentifier);
  uint64_t v9 = sub_250D998AC(&qword_26B207A38, type metadata accessor for HKFeatureIdentifier);
  uint64_t v10 = sub_250D998AC(&qword_269B04340, (void (*)(uint64_t))sub_250D99B64);

  return MEMORY[0x270EF31E0](a1, a2, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_250E1D834@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAnalysisFeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_250E1D84C(void *a1)
{
  sub_250E1DA28(0, &qword_269B04348, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250E1D9D4();
  sub_250E25510();
  sub_250D99470();
  sub_250D998AC(&qword_269B04358, (void (*)(uint64_t))sub_250D99470);
  sub_250E253B0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_250E1D9D4()
{
  unint64_t result = qword_269B04350;
  if (!qword_269B04350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04350);
  }
  return result;
}

void sub_250E1DA28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250E1D9D4();
    unint64_t v7 = a3(a1, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_250E1DA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_250E1DAF0@<X0>(uint64_t *a1@<X8>)
{
  sub_250D99470();
  uint64_t result = sub_250E24A20();
  *a1 = result;
  return result;
}

uint64_t sub_250E1DB24()
{
  return sub_250E24A30();
}

uint64_t assignWithCopy for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250E1DCAC);
}

uint64_t sub_250E1DCAC(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250E1DD2C);
}

uint64_t sub_250E1DD2C(uint64_t a1, uint64_t a2)
{
  sub_250D99470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_250E1DD9C()
{
  sub_250D99470();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250E1DEC4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAnalysisFeatureStatus.CodingKeys()
{
  return &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys;
}

unint64_t sub_250E1DF00()
{
  unint64_t result = qword_269B04370;
  if (!qword_269B04370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04370);
  }
  return result;
}

unint64_t sub_250E1DF58()
{
  unint64_t result = qword_269B04378;
  if (!qword_269B04378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04378);
  }
  return result;
}

unint64_t sub_250E1DFB0()
{
  unint64_t result = qword_269B04380;
  if (!qword_269B04380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04380);
  }
  return result;
}

uint64_t sub_250E1E004(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000020 && a2 == 0x8000000250E2E060)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_250E25400();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.__allocating_init(notificationContent:action:outOfRangeNotificationLastSentDate:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  char v7 = *(unsigned char *)(a1 + 8);
  char v8 = *a2;
  *(void *)(v6 + 16) = *(void *)a1;
  *(unsigned char *)(v6 + 24) = v7;
  *(unsigned char *)(v6 + 25) = v8;
  sub_250D94D0C(a3, v6 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
  return v6;
}

HealthBalance::HealthBalanceNotificationsAnalyticsEvent::NotificationAction_optional __swiftcall HealthBalanceNotificationsAnalyticsEvent.NotificationAction.init(rawValue:)(Swift::String rawValue)
{
  char v2 = v1;
  unint64_t v3 = sub_250E252B0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *char v2 = v5;
  return result;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.NotificationAction.rawValue.getter()
{
  uint64_t v1 = 1852141679;
  if (*v0 != 1) {
    uint64_t v1 = 0x7373696D736964;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1684956531;
  }
}

uint64_t sub_250E1E1A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_250DB0720(*a1, *a2);
}

uint64_t sub_250E1E1B4()
{
  return sub_250E254F0();
}

uint64_t sub_250E1E248()
{
  sub_250E24CC0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_250E1E2C8()
{
  return sub_250E254F0();
}

HealthBalance::HealthBalanceNotificationsAnalyticsEvent::NotificationAction_optional sub_250E1E358(Swift::String *a1)
{
  return HealthBalanceNotificationsAnalyticsEvent.NotificationAction.init(rawValue:)(*a1);
}

void sub_250E1E364(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1852141679;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7373696D736964;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1684956531;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void HealthBalanceNotificationsAnalyticsEvent.notificationContent.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

void HealthBalanceNotificationsAnalyticsEvent.action.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 25);
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.outOfRangeNotificationLastSentDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_250E1E42C(v1+ OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, a1);
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.init(notificationContent:action:outOfRangeNotificationLastSentDate:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a1 + 8);
  char v5 = *a2;
  *(void *)(v3 + 16) = *(void *)a1;
  *(unsigned char *)(v3 + 24) = v4;
  *(unsigned char *)(v3 + 25) = v5;
  sub_250D94D0C(a3, v3 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
  return v3;
}

uint64_t sub_250E1E42C(uint64_t a1, uint64_t a2)
{
  sub_250E205F8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 1;
}

unint64_t HealthBalanceNotificationsAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000026;
}

unint64_t HealthBalanceNotificationsAnalyticsEvent.makeUnrestrictedEventPayload(with:)()
{
  return sub_250DE1810(MEMORY[0x263F8EE78]);
}

void HealthBalanceNotificationsAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
  id v4 = objc_msgSend(a1, sel_healthDataSource);
  if (v4)
  {
    char v5 = v4;
    id v6 = objc_msgSend(a1, sel_environmentDataSource);
    char v7 = *(unsigned char *)(v1 + 24);
    uint64_t v11 = *(void *)(v1 + 16);
    char v12 = v7;
    unsigned __int8 v10 = *(unsigned char *)(v1 + 25);
    id v8 = sub_250E1F480(v6, v5, (uint64_t)&v11, &v10, v1+ OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
    if (v2)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = (uint64_t)v8;

      sub_250DED5D4(v9);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_250DED580();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.deinit()
{
  sub_250E2059C(v0 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, &qword_26B207DD8, MEMORY[0x263F07490]);
  return v0;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.__deallocating_deinit()
{
  sub_250E2059C(v0 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, &qword_26B207DD8, MEMORY[0x263F07490]);

  return swift_deallocClassInstance();
}

uint64_t sub_250E1E87C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 & 0x18;
  if ((*v0 & 6) != 0)
  {
    if (v2)
    {
      uint64_t result = 3;
      if ((v1 & 0x180) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    uint64_t result = 1;
    if ((v1 & 0x180) == 0)
    {
LABEL_11:
      if ((v1 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }
LABEL_4:
    result |= 0x10uLL;
    if ((v1 & 0x20) != 0) {
      goto LABEL_5;
    }
LABEL_12:
    if ((v1 & 0x40) == 0) {
      return result;
    }
    return result | 4;
  }
  if (v2)
  {
    uint64_t result = 2;
    if ((v1 & 0x180) == 0) {
      goto LABEL_11;
    }
    goto LABEL_4;
  }
  if ((v1 & 0x180) != 0)
  {
    uint64_t result = 16;
    if ((v1 & 0x20) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v1 & 0x20) == 0) {
      goto LABEL_12;
    }
  }
LABEL_5:
  result |= 8uLL;
  if ((v1 & 0x40) == 0) {
    return result;
  }
  return result | 4;
}

uint64_t sub_250E1E904()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 & 0x18;
  if ((*v0 & 6) != 0)
  {
    if (v2)
    {
      uint64_t result = 2;
      if ((v1 & 0x180) != 0) {
        goto LABEL_4;
      }
LABEL_9:
      if ((v1 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
LABEL_8:
    uint64_t result = 1;
    if ((v1 & 0x180) != 0)
    {
LABEL_4:
      ++result;
      if ((v1 & 0x20) != 0) {
        goto LABEL_5;
      }
LABEL_10:
      if ((v1 & 0x40) == 0) {
        return result;
      }
      return ++result;
    }
    goto LABEL_9;
  }
  if (v2) {
    goto LABEL_8;
  }
  if ((v1 & 0x180) != 0)
  {
    uint64_t result = 1;
    if ((v1 & 0x20) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v1 & 0x20) == 0) {
      goto LABEL_10;
    }
  }
LABEL_5:
  ++result;
  if ((v1 & 0x40) == 0) {
    return result;
  }
  return ++result;
}

double sub_250E1E97C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_250DE4C30(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *id v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_250DE5F2C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_250DE7898((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_250E1EA88(v8, v11);
    *id v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

unint64_t sub_250E1EA88(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_250E25060();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_250E254B0();
        swift_bridgeObjectRetain();
        sub_250E24CC0();
        uint64_t v11 = sub_250E254F0();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          uint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_250E1EC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v10 = MEMORY[0x263F8D310];
  uint64_t v30 = MEMORY[0x263F8D310];
  uint64_t v31 = MEMORY[0x263F8D338];
  *(void *)&long long v29 = a1;
  *((void *)&v29 + 1) = a2;
  uint64_t v11 = (void *)*a6;
  unint64_t v13 = sub_250DE4C30(a3, a4);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = (void *)*a6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      __swift_destroy_boxed_opaque_existential_1(v20);
      return sub_250DE7898(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_250DE5F2C();
    goto LABEL_7;
  }
  sub_250DE5710(v16, a5 & 1);
  unint64_t v22 = sub_250DE4C30(a3, a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_250E25460();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*a6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v29, v10);
  MEMORY[0x270FA5388](v24);
  char v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_250E1F318(v13, a3, a4, *v26, v26[1], v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  return swift_bridgeObjectRetain();
}

uint64_t sub_250E1EE64(char a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  LOBYTE(v28) = a1;
  uint64_t v9 = MEMORY[0x263F8D4F8];
  uint64_t v29 = MEMORY[0x263F8D4F8];
  uint64_t v30 = MEMORY[0x263F8D510];
  uint64_t v10 = (void *)*a5;
  unint64_t v12 = sub_250DE4C30(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = (void *)*a5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 40 * v12;
      __swift_destroy_boxed_opaque_existential_1(v19);
      return sub_250DE7898(&v28, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_250DE5F2C();
    goto LABEL_7;
  }
  sub_250DE5710(v15, a4 & 1);
  unint64_t v21 = sub_250DE4C30(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = sub_250E25460();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*a5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v9);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v26 + 16))(v25);
  sub_250E1F288(v12, a2, a3, *v25, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  return swift_bridgeObjectRetain();
}

uint64_t sub_250E1F054(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  uint64_t v15 = (void *)*a5;
  unint64_t v17 = sub_250DE4C30(a2, a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = (void *)*a5;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7] + 40 * v17;
      __swift_destroy_boxed_opaque_existential_1(v24);
      return sub_250DE7898(&v33, v24);
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    sub_250DE5F2C();
    goto LABEL_7;
  }
  sub_250DE5710(v20, a4 & 1);
  unint64_t v26 = sub_250DE4C30(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = sub_250E25460();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  uint64_t v23 = (void *)*a5;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v34);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v30);
  sub_250E1F3A8(v17, a2, a3, (uint64_t)v30, v23, a6, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  return swift_bridgeObjectRetain();
}

uint64_t sub_250E1F288(unint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  LOBYTE(v11) = a4;
  uint64_t v12 = MEMORY[0x263F8D4F8];
  uint64_t v13 = MEMORY[0x263F8D510];
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_250DE7898(&v11, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_250E1F318(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v13 = MEMORY[0x263F8D310];
  uint64_t v14 = MEMORY[0x263F8D338];
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = (void *)(a6[6] + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t result = sub_250DE7898(&v12, a6[7] + 40 * a1);
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t sub_250E1F3A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v14 = (void *)(a5[6] + 16 * a1);
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t result = sub_250DE7898(&v19, a5[7] + 40 * a1);
  uint64_t v16 = a5[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a5[2] = v18;
  }
  return result;
}

id sub_250E1F480(void *a1, void *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  id v113 = a2;
  uint64_t v121 = *MEMORY[0x263EF8340];
  sub_250E205F8(0, &qword_26B207DD8, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v105 = (uint64_t)&v104 - v11;
  uint64_t v12 = sub_250E24710();
  uint64_t v110 = *(void *)(v12 - 8);
  uint64_t v111 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = *a4;
  uint64_t v106 = a5;
  uint64_t v112 = v5;
  if (v15)
  {
    if (v15 == 1)
    {
      unint64_t v16 = 0xE400000000000000;
      uint64_t v17 = 1852141679;
    }
    else
    {
      unint64_t v16 = 0xE700000000000000;
      uint64_t v17 = 0x7373696D736964;
    }
  }
  else
  {
    unint64_t v16 = 0xE400000000000000;
    uint64_t v17 = 1684956531;
  }
  uint64_t v108 = *(void **)a3;
  int v109 = *(unsigned __int8 *)(a3 + 8);
  uint64_t v18 = MEMORY[0x263F8D310];
  uint64_t v19 = MEMORY[0x263F8D338];
  unint64_t v119 = MEMORY[0x263F8D310];
  unint64_t v120 = MEMORY[0x263F8D338];
  *(void *)&long long v118 = v17;
  *((void *)&v118 + 1) = v16;
  sub_250DE7898(&v118, (uint64_t)v116);
  uint64_t v20 = (void *)MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v114 = v20;
  uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t *)((char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  sub_250E1EC74(*v24, v24[1], 0x6E6F69746361, 0xE600000000000000, isUniquelyReferenced_nonNull_native, &v114);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  unint64_t v26 = v114;
  unint64_t v115 = (unint64_t)v114;
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(a1, sel_activePairedDeviceProductType);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = sub_250E24C60();
    uint64_t v31 = v30;

    unint64_t v119 = v18;
    unint64_t v120 = v19;
    *(void *)&long long v118 = v29;
    *((void *)&v118 + 1) = v31;
    sub_250DE7898(&v118, (uint64_t)v116);
    LOBYTE(v31) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = v26;
    uint64_t v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
    MEMORY[0x270FA5388](v32);
    uint64_t v34 = (char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v35 + 16))(v34);
    sub_250E1F054((uint64_t)v34, 0xD000000000000016, 0x8000000250E2DA50, v31, &v114, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    unint64_t v115 = (unint64_t)v114;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_250E1E97C(0xD000000000000016, 0x8000000250E2DA50, (uint64_t)&v118);
    sub_250E2059C((uint64_t)&v118, (unint64_t *)&qword_269B041A0, (void (*)(uint64_t))sub_250DEF828);
  }
  id v107 = a1;
  id v36 = objc_msgSend(a1, sel_currentDate);
  sub_250E246E0();

  uint64_t v37 = (void *)sub_250E246C0();
  uint64_t v38 = v111;
  uint64_t v104 = *(void (**)(char *, uint64_t))(v110 + 8);
  v104(v14, v111);
  *(void *)&long long v118 = 0;
  id v39 = objc_msgSend(v113, sel_ageWithCurrentDate_error_, v37, &v118);

  id v40 = (id)v118;
  if (v39)
  {
    id v41 = objc_msgSend(v39, sel_integerValue);

    uint64_t v42 = MEMORY[0x263F8D6C8];
    uint64_t v43 = MEMORY[0x263F8D6E8];
    unint64_t v119 = MEMORY[0x263F8D6C8];
    unint64_t v120 = MEMORY[0x263F8D6E8];
    *(void *)&long long v118 = v41;
    sub_250DE7898(&v118, (uint64_t)v116);
    unint64_t v44 = v115;
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (void *)v44;
    uint64_t v46 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
    MEMORY[0x270FA5388](v46);
    int v48 = (char *)&v104 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v49 + 16))(v48);
    uint64_t v50 = (uint64_t)v48;
    uint64_t v38 = v111;
    sub_250E1F054(v50, 6645601, 0xE300000000000000, v45, &v114, v42, v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    uint64_t v51 = v112;
    unint64_t v115 = (unint64_t)v114;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = v40;
    int v53 = (void *)sub_250E24560();

    swift_willThrow();
    sub_250E1E97C(6645601, 0xE300000000000000, (uint64_t)&v118);
    sub_250E2059C((uint64_t)&v118, (unint64_t *)&qword_269B041A0, (void (*)(uint64_t))sub_250DEF828);
    uint64_t v51 = 0;
  }
  v116[0] = 0;
  id v54 = objc_msgSend(v113, sel_biologicalSexWithError_, v116);
  if (!v54)
  {
    id v68 = v116[0];
    swift_bridgeObjectRelease();
    sub_250E24560();

    swift_willThrow();
    return v68;
  }
  uint64_t v55 = v54;
  uint64_t v112 = v51;
  id v56 = v116[0];
  id v57 = (id)HKAnalyticsPropertyValueForBiologicalSex();

  uint64_t v58 = sub_250E24C60();
  uint64_t v60 = v59;

  unint64_t v119 = v18;
  unint64_t v120 = v19;
  *(void *)&long long v118 = v58;
  *((void *)&v118 + 1) = v60;
  sub_250DE7898(&v118, (uint64_t)v116);
  unint64_t v61 = v115;
  LOBYTE(v58) = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v114 = (void *)v61;
  uint64_t v62 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
  MEMORY[0x270FA5388](v62);
  uint64_t v64 = (uint64_t *)((char *)&v104 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v65 + 16))(v64);
  sub_250E1EC74(*v64, v64[1], 0x6369676F6C6F6962, 0xED00007865536C61, v58, &v114);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  unint64_t v115 = (unint64_t)v114;
  swift_bridgeObjectRelease();
  uint64_t v66 = v105;
  sub_250E1E42C(v106, v105);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v66, 1, v38) == 1)
  {
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = (void *)sub_250E246C0();
    v104((char *)v66, v38);
  }
  id v69 = objc_msgSend(v107, sel_bucketedNumberOfDaysSinceDate_, v67);

  if (!v69)
  {
    sub_250E1E97C(0xD000000000000019, 0x8000000250E2E100, (uint64_t)&v118);
    sub_250E2059C((uint64_t)&v118, (unint64_t *)&qword_269B041A0, (void (*)(uint64_t))sub_250DEF828);
    if (v109) {
      goto LABEL_19;
    }
LABEL_21:
    uint64_t v79 = v108;
    v116[0] = v108;
    uint64_t v80 = sub_250E1E904();
    uint64_t v81 = MEMORY[0x263F8D6C8];
    uint64_t v82 = MEMORY[0x263F8D6E8];
    unint64_t v119 = MEMORY[0x263F8D6C8];
    unint64_t v120 = MEMORY[0x263F8D6E8];
    *(void *)&long long v118 = v80;
    sub_250DE7898(&v118, (uint64_t)v116);
    unint64_t v83 = v115;
    char v84 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = (void *)v83;
    uint64_t v85 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
    MEMORY[0x270FA5388](v85);
    uint64_t v87 = (char *)&v104 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v88 + 16))(v87);
    sub_250E1F054((uint64_t)v87, 0x6F69746169766564, 0xEE00746E756F436ELL, v84, &v114, v81, v82);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    uint64_t v89 = v114;
    swift_bridgeObjectRelease();
    v116[0] = v79;
    uint64_t v90 = sub_250E1E87C();
    if ((unint64_t)(v90 - 1) <= 0xE) {
      uint64_t v90 = qword_250E2C398[v90 - 1];
    }
    unint64_t v119 = v81;
    unint64_t v120 = v82;
    *(void *)&long long v118 = v90;
    sub_250DE7898(&v118, (uint64_t)v116);
    char v91 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v114 = v89;
    uint64_t v92 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
    MEMORY[0x270FA5388](v92);
    uint64_t v94 = (char *)&v104 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v95 + 16))(v94);
    sub_250E1F054((uint64_t)v94, 0xD000000000000010, 0x8000000250E2E120, v91, &v114, v81, v82);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
    unint64_t v78 = (unint64_t)v114;
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  unint64_t v70 = sub_250E2064C();
  unint64_t v119 = v70;
  unint64_t v71 = sub_250E2068C();
  unint64_t v120 = v71;
  *(void *)&long long v118 = v69;
  sub_250DE7898(&v118, (uint64_t)v116);
  unint64_t v72 = v115;
  char v73 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v114 = (void *)v72;
  unint64_t v115 = 0x8000000000000000;
  uint64_t v74 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
  MEMORY[0x270FA5388](v74);
  uint64_t v76 = (char *)&v104 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v77 + 16))(v76);
  sub_250E1F054((uint64_t)v76, 0xD000000000000019, 0x8000000250E2E100, v73, &v114, v70, v71);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  unint64_t v115 = (unint64_t)v114;
  swift_bridgeObjectRelease();
  if ((v109 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_19:
  sub_250E1E97C(0x6F69746169766564, 0xEE00746E756F436ELL, (uint64_t)v116);
  sub_250E2059C((uint64_t)v116, (unint64_t *)&qword_269B041A0, (void (*)(uint64_t))sub_250DEF828);
  sub_250E1E97C(0xD000000000000010, 0x8000000250E2E120, (uint64_t)v116);
  sub_250E2059C((uint64_t)v116, (unint64_t *)&qword_269B041A0, (void (*)(uint64_t))sub_250DEF828);
  unint64_t v78 = v115;
LABEL_24:
  uint64_t v96 = 0x7365676E616863;
  if ((v109 & (v108 != 0)) != 0) {
    uint64_t v96 = 0x6F4370756D726177;
  }
  unint64_t v97 = 0xE700000000000000;
  unint64_t v119 = v18;
  unint64_t v120 = v19;
  if ((v109 & (v108 != 0)) != 0) {
    unint64_t v97 = 0xEE006574656C706DLL;
  }
  *(void *)&long long v118 = v96;
  *((void *)&v118 + 1) = v97;
  sub_250DE7898(&v118, (uint64_t)v116);
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v114 = (void *)v78;
  uint64_t v99 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v116, v117);
  MEMORY[0x270FA5388](v99);
  uint64_t v101 = (uint64_t *)((char *)&v104 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v102 + 16))(v101);
  sub_250E1EC74(*v101, v101[1], 1701869940, 0xE400000000000000, v98, &v114);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  id v68 = v114;
  swift_bridgeObjectRelease();
  return v68;
}

unint64_t sub_250E20304()
{
  unint64_t result = qword_269B04388;
  if (!qword_269B04388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B04388);
  }
  return result;
}

uint64_t sub_250E20358()
{
  return type metadata accessor for HealthBalanceNotificationsAnalyticsEvent();
}

uint64_t type metadata accessor for HealthBalanceNotificationsAnalyticsEvent()
{
  uint64_t result = qword_269B04390;
  if (!qword_269B04390) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_250E203AC()
{
  sub_250E205F8(319, &qword_26B207DD8, MEMORY[0x263F07490]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for HealthBalanceNotificationsAnalyticsEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthBalanceNotificationsAnalyticsEvent);
}

uint64_t dispatch thunk of HealthBalanceNotificationsAnalyticsEvent.__allocating_init(notificationContent:action:outOfRangeNotificationLastSentDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for HealthBalanceNotificationsAnalyticsEvent.NotificationAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250E20564);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceNotificationsAnalyticsEvent.NotificationAction()
{
  return &type metadata for HealthBalanceNotificationsAnalyticsEvent.NotificationAction;
}

uint64_t sub_250E2059C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_250E205F8(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_250E205F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_250E24FB0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_250E2064C()
{
  unint64_t result = qword_269B043A0;
  if (!qword_269B043A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B043A0);
  }
  return result;
}

unint64_t sub_250E2068C()
{
  unint64_t result = qword_269B043A8;
  if (!qword_269B043A8)
  {
    sub_250E2064C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B043A8);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void SleepingSampleBaseline.init(s:_:_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = self;
  uint64_t v12 = self;
  id v13 = objc_msgSend(v12, sel_secondUnit);
  id v14 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v13, a3);

  if (a2 > a4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v36 = a1;
    id v15 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v16 = objc_msgSend(v12, sel_secondUnit);
    id v17 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v16, a2);
    uint64_t v35 = v14;
    id v18 = v17;

    id v19 = objc_msgSend(v12, sel_secondUnit);
    id v20 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v19, a4);

    id v21 = objc_msgSend(v15, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v18, v20, 1, 1);
    id v22 = objc_msgSend(v12, sel_secondUnit);
    id v23 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v22, (a4 - a2) * 0.25);

    id v24 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v25 = objc_msgSend(v12, sel_secondUnit);
    id v26 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v25, a2);

    id v27 = objc_msgSend(v12, sel_secondUnit);
    id v28 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v27, a4);

    id v29 = objc_msgSend(v24, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v26, v28, 1, 1);
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v35, v21, v23, v29, (uint64_t)v10);
    uint64_t v30 = type metadata accessor for SleepingSampleBaseline();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v30))
    {
      sub_250DA6B34((uint64_t)v10);
      uint64_t v32 = 1;
      uint64_t v33 = v36;
    }
    else
    {
      uint64_t v34 = (uint64_t)v10;
      uint64_t v33 = v36;
      sub_250DA495C(v34, v36);
      uint64_t v32 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v33, v32, 1, v30);
  }
}

void SleepingSampleBaseline.init(perMinute:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
}

void SleepingSampleBaseline.init(percent:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v12 - 8);
  id v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = self;
  id v16 = self;
  id v17 = objc_msgSend(v16, sel_percentUnit);
  id v18 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v17, a5 / 100.0);

  if (a4 > a6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v42 = a3;
    id v19 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v20 = objc_msgSend(v16, sel_percentUnit);
    id v21 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v20, a4 / 100.0);
    id v41 = v18;
    id v22 = v21;

    id v23 = [v16 (SEL)0x26535A225];
    double v24 = a6 / 100.0;
    id v25 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v23, a6 / 100.0);

    id v26 = objc_msgSend(v19, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v22, v25, 1, 1);
    if (a2) {
      double v27 = (a6 - a4) * 0.25;
    }
    else {
      double v27 = a1;
    }
    id v28 = objc_msgSend(v16, sel_percentUnit);
    id v29 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v28, v27 / 100.0);

    id v30 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v31 = objc_msgSend(v16, sel_percentUnit);
    id v32 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v31, a4 / 100.0);

    id v33 = objc_msgSend(v16, sel_percentUnit);
    id v34 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v33, v24);

    id v35 = objc_msgSend(v30, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v32, v34, 1, 1);
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v41, v26, v29, v35, (uint64_t)v14);
    uint64_t v36 = type metadata accessor for SleepingSampleBaseline();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v14, 1, v36))
    {
      sub_250DA6B34((uint64_t)v14);
      uint64_t v38 = 1;
      uint64_t v39 = v42;
    }
    else
    {
      uint64_t v40 = (uint64_t)v14;
      uint64_t v39 = v42;
      sub_250DA495C(v40, v42);
      uint64_t v38 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v39, v38, 1, v36);
  }
}

void SleepingSampleBaseline.init(celsiusChange:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
}

id SleepingSampleBaseline.init(duration:_:_:iqr:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v47 = a9;
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v18 - 8);
  id v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E211A0();
  id v21 = HKQuantityRange.init(durationBetween:and:)(a1, a2, a5, a6);
  id v22 = self;
  id v23 = self;
  id result = objc_msgSend(v23, sel_minuteUnit);
  uint64_t v25 = 60 * a3;
  if ((unsigned __int128)(a3 * (__int128)60) >> 64 != (60 * a3) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  BOOL v26 = __OFADD__(v25, a4);
  uint64_t v27 = v25 + a4;
  if (v26)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v28 = result;
  id v46 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, result, (double)v27);

  id result = objc_msgSend(v23, sel_minuteUnit);
  id v29 = result;
  if (a10)
  {
    id v33 = objc_msgSend(v21, sel_maximum);
    objc_msgSend(v33, sel__value);
    double v35 = v34;

    id v36 = objc_msgSend(v21, sel_minimum);
    objc_msgSend(v36, sel__value);
    double v38 = v37;

    double v32 = (v35 - v38) * 0.25;
    goto LABEL_8;
  }
  uint64_t v30 = 60 * a7;
  if ((unsigned __int128)(a7 * (__int128)60) >> 64 != (60 * a7) >> 63) {
    goto LABEL_14;
  }
  BOOL v26 = __OFADD__(v30, a8);
  uint64_t v31 = v30 + a8;
  if (v26)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  double v32 = (double)v31;
LABEL_8:
  id v39 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, v29, v32);

  id v40 = v21;
  SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v46, v40, v39, v40, (uint64_t)v20);
  uint64_t v41 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v20, 1, v41))
  {
    sub_250DA6B34((uint64_t)v20);
    uint64_t v43 = 1;
    uint64_t v44 = v47;
  }
  else
  {
    uint64_t v45 = (uint64_t)v20;
    uint64_t v44 = v47;
    sub_250DA495C(v45, v47);
    uint64_t v43 = 0;
  }
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v44, v43, 1, v41);
}

unint64_t sub_250E211A0()
{
  unint64_t result = qword_26B207F08;
  if (!qword_26B207F08)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B207F08);
  }
  return result;
}

id SleepingSampleBaseline.init(duration:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v18 - 8);
  id v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E211A0();
  id v21 = HKQuantityRange.init(durationBetween:and:)(a1, a2, a3, a6, a7, a8);
  id v22 = self;
  id v23 = self;
  id result = objc_msgSend(v23, sel_minuteUnit);
  uint64_t v25 = 60 * a4;
  if ((unsigned __int128)(a4 * (__int128)60) >> 64 != (60 * a4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v26 = __OFADD__(v25, a5);
  uint64_t v27 = v25 + a5;
  if (v26)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  id v28 = result;
  id v29 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, result, (double)v27);

  id v30 = objc_msgSend(v21, sel_maximum);
  objc_msgSend(v30, sel__value);
  double v32 = v31;

  id v33 = objc_msgSend(v21, sel_minimum);
  objc_msgSend(v33, sel__value);
  double v35 = v34;

  id v36 = objc_msgSend(v23, sel_secondUnit);
  id v37 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, v36, (v32 - v35) * 0.25);

  id v38 = v21;
  SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v29, v38, v37, v38, (uint64_t)v20);
  uint64_t v39 = type metadata accessor for SleepingSampleBaseline();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v20, 1, v39))
  {
    sub_250DA6B34((uint64_t)v20);
    uint64_t v41 = 1;
  }
  else
  {
    sub_250DA495C((uint64_t)v20, a9);
    uint64_t v41 = 0;
  }
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(a9, v41, 1, v39);
}

void SleepingSampleBaseline.init(perSecond:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
}

void sub_250E214B0(double a1@<X0>, char a2@<W1>, SEL *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  sub_250DC8DA4(0);
  MEMORY[0x270FA5388](v14 - 8);
  id v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = self;
  uint64_t v18 = self;
  id v19 = [v18 *a3];
  id v20 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v19, a6);

  if (a5 > a7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v47 = a4;
    id v21 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v22 = [v18 *a3];
    uint64_t v45 = v20;
    id v23 = v22;
    id v24 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v22, a5);

    id v25 = [v18 *a3];
    id v26 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v25, a7);
    id v46 = v16;
    id v27 = v26;

    id v28 = objc_msgSend(v21, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v24, v27, 1, 1);
    if (a2) {
      double v29 = (a7 - a5) * 0.25;
    }
    else {
      double v29 = a1;
    }
    id v30 = [v18 *a3];
    id v31 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v30, v29);

    id v32 = objc_allocWithZone(MEMORY[0x263F0A640]);
    id v33 = [v18 *a3];
    id v34 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v33, a5);

    id v35 = [v18 *a3];
    id v36 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v35, a7);

    id v37 = objc_msgSend(v32, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v34, v36, 1, 1);
    uint64_t v38 = (uint64_t)v46;

    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v45, v28, v31, v37, v38);
    uint64_t v39 = type metadata accessor for SleepingSampleBaseline();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      sub_250DA6B34(v38);
      uint64_t v41 = 1;
      uint64_t v42 = v47;
    }
    else
    {
      uint64_t v43 = v38;
      uint64_t v42 = v47;
      sub_250DA495C(v43, v47);
      uint64_t v41 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v42, v41, 1, v39);
  }
}

Swift::String __swiftcall HKQuantity.formattedValue(for:unit:)(HealthBalance::SleepingSampleDataType a1, HKUnit unit)
{
  uint64_t v44 = (unsigned char *)a1;
  Class isa = unit.super.isa;
  uint64_t v2 = sub_250E255B0();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E22BBC(0, &qword_269B037D8, MEMORY[0x263F061F0]);
  uint64_t v6 = v5;
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - v7;
  sub_250E22BBC(0, &qword_269B037E8, MEMORY[0x263F06210]);
  uint64_t v10 = v9;
  uint64_t v37 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = sub_250E24610();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_250E247F0();
  MEMORY[0x270FA5388](v16 - 8);
  sub_250E237E0(0, &qword_269B037F0, MEMORY[0x263F06DA8]);
  uint64_t v18 = v17;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  id v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  id v24 = (char *)&v37 - v23;
  switch(*v44)
  {
    case 1:
      uint64_t v25 = v22;
      objc_msgSend(v45, sel_doubleValueForUnit_, isa);
      goto LABEL_5;
    case 2:
      uint64_t v25 = v22;
      objc_msgSend(v45, sel_doubleValueForUnit_, isa);
      double v27 = v28 * 100.0;
LABEL_5:
      double v46 = v27;
      sub_250E247D0();
      sub_250D9B8EC();
      sub_250E24580();
      uint64_t v47 = 1;
      sub_250D9BBD8();
      sub_250E23798(&qword_269B03830, (void (*)(uint64_t))sub_250D9BBD8);
      sub_250E24600();
      goto LABEL_6;
    case 3:
      id v30 = v45;
      id v31 = isa;
      Measurement<>.init(wristTemperatureForFormatting:unit:)(v30, v31);
      static FormatStyle<>.wristTemperature(unit:)((uint64_t)v31, (uint64_t)v8);
      sub_250D9BB54();
      sub_250E243A0();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v6);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v10);
      goto LABEL_9;
    case 4:
      id v32 = v45;
      sub_250E23660(v32);

      static FormatStyle<>.sleepDuration.getter((uint64_t)v4);
      sub_250E23798(&qword_269B03818, MEMORY[0x263F07F20]);
      uint64_t v33 = v40;
      sub_250E255C0();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v33);
      goto LABEL_9;
    default:
      uint64_t v25 = v22;
      objc_msgSend(v45, sel_doubleValueForUnit_, isa);
      double v46 = v26;
      sub_250E247D0();
      sub_250D9B8EC();
      sub_250E24580();
      sub_250E245F0();
LABEL_6:
      MEMORY[0x253389160](v15, v18);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v42);
      double v29 = *(void (**)(char *, uint64_t))(v25 + 8);
      v29(v21, v18);
      sub_250D9BC80();
      sub_250E24B30();
      v29(v24, v18);
LABEL_9:
      uint64_t v34 = v47;
      id v35 = v48;
      result._object = v35;
      result._uint64_t countAndFlagsBits = v34;
      return result;
  }
}

uint64_t sub_250E21E90()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_250E255B0();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v31 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_250E247F0();
  MEMORY[0x270FA5388](v4 - 8);
  sub_250E237E0(0, &qword_269B037F0, MEMORY[0x263F06DA8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v31 - v8;
  id v10 = objc_msgSend(v0, sel__unit);
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = objc_msgSend(v11, sel__countPerSecondUnit);
  sub_250D98B48(0, &qword_269B043C0);
  char v14 = sub_250E24F90();

  if (v14)
  {

    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    id v15 = objc_msgSend(v11, sel__countPerMinuteUnit);
    objc_msgSend(v1, sel_doubleValueForUnit_, v15);
    uint64_t v17 = v16;

    uint64_t v34 = v17;
    sub_250E247D0();
    sub_250D9B8EC();
    sub_250E24580();
    sub_250D9BC80();
    sub_250E24B30();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v18 = v35;
    unint64_t v19 = v36;
    swift_bridgeObjectRelease();
    uint64_t v37 = v18;
    unint64_t v38 = v19;
    sub_250E24CE0();
  }
  else
  {
    id v20 = v12;
    id v21 = objc_msgSend(v11, sel_secondUnit);
    char v22 = sub_250E24F90();

    if (v22)
    {
    }
    else
    {
      id v23 = objc_msgSend(v11, sel_minuteUnit);
      char v24 = sub_250E24F90();

      if ((v24 & 1) == 0)
      {
        id v30 = objc_msgSend(v1, sel_description);
        uint64_t v28 = sub_250E24C60();

        return v28;
      }
    }
    id v25 = objc_msgSend(v11, sel_secondUnit);
    objc_msgSend(v1, sel_doubleValueForUnit_, v25);

    sub_250E255D0();
    uint64_t v26 = v31;
    static FormatStyle<>.sleepDuration.getter(v31);
    sub_250E23798(&qword_269B03818, MEMORY[0x263F07F20]);
    uint64_t v27 = v33;
    sub_250E255C0();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v26, v27);
  }
  return v37;
}

uint64_t static FormatStyle<>.heartRate.getter()
{
  uint64_t v0 = sub_250E24610();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_250E247F0();
  MEMORY[0x270FA5388](v4 - 8);
  sub_250E237E0(0, &qword_269B037F0, MEMORY[0x263F06DA8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v11 - v8;
  sub_250E247D0();
  sub_250D9B8EC();
  sub_250E24580();
  sub_250E245F0();
  MEMORY[0x253389160](v3, v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static FormatStyle<>.respiratoryRate.getter()
{
  return sub_250E22598(&qword_269B037F0, MEMORY[0x263F06DA8], MEMORY[0x263F06D70], MEMORY[0x263F06DA0]);
}

uint64_t static FormatStyle<>.bloodOxygen.getter()
{
  return sub_250E22598(&qword_269B037F0, MEMORY[0x263F06DA8], MEMORY[0x263F06D70], MEMORY[0x263F06DA0]);
}

uint64_t sub_250E22598(unint64_t *a1, uint64_t (*a2)(uint64_t, void, unint64_t), void (*a3)(char *, void, unint64_t), void (*a4)(char *, uint64_t))
{
  uint64_t v8 = sub_250E24610();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E247F0();
  MEMORY[0x270FA5388](v12 - 8);
  char v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E237E0(0, a1, a2);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)v22 - v18;
  sub_250E247D0();
  unint64_t v20 = sub_250D9B8EC();
  a3(v14, MEMORY[0x263F8D538], v20);
  v22[1] = 1;
  sub_250D9BBD8();
  sub_250E23798(&qword_269B03830, (void (*)(uint64_t))sub_250D9BBD8);
  sub_250E24600();
  a4(v11, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t static FormatStyle<>.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v20 = sub_250E24610();
  uint64_t v1 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_250E245C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_250E247F0();
  MEMORY[0x270FA5388](v8 - 8);
  sub_250E237E0(0, &qword_269B037F0, MEMORY[0x263F06DA8]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  char v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v19 - v15;
  sub_250E247D0();
  sub_250D9B8EC();
  sub_250E24580();
  sub_250E245B0();
  MEMORY[0x253389140](v7, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  uint64_t v21 = 2;
  sub_250D9BBD8();
  sub_250E23798(&qword_269B03830, (void (*)(uint64_t))sub_250D9BBD8);
  sub_250E24600();
  MEMORY[0x253389160](v3, v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v10);
}

uint64_t static FormatStyle<>.bloodOxygenPercentage.getter()
{
  return sub_250E22598(&qword_269B043B0, MEMORY[0x263F06D88], MEMORY[0x263F06D78], MEMORY[0x263F06D80]);
}

uint64_t Duration.init(sleepDurationForFormatting:)(void *a1)
{
  sub_250E23660(a1);
  uint64_t v3 = v2;

  return v3;
}

void sub_250E22BBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_250D98B48(255, &qword_269B037E0);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t static FormatStyle<>.sleepDuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v15 = sub_250E25550();
  uint64_t v1 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_250E25530();
  uint64_t v4 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_250E255A0();
  uint64_t v7 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E23844(0, &qword_269B043B8, MEMORY[0x263F07EC8], MEMORY[0x263F8E0F8]);
  sub_250E25580();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_250E29FB0;
  sub_250E25560();
  sub_250E25570();
  sub_250E0BF3C(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_250E25590();
  sub_250E25520();
  sub_250E25540();
  sub_250E24360();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v12);
}

void Measurement<>.init(wristTemperatureForFormatting:unit:)(void *a1, void *a2)
{
  uint64_t v4 = self;
  id v12 = a2;
  id v5 = objc_msgSend(v4, sel__changeInDegreeCelsiusUnit);
  sub_250D98B48(0, &qword_269B043C0);
  char v6 = sub_250E24F90();

  if (v6)
  {
    uint64_t v7 = &selRef_celsius;
  }
  else
  {
    id v8 = v12;
    id v9 = objc_msgSend(v4, sel__changeInDegreeFahrenheitUnit);
    char v10 = sub_250E24F90();

    if ((v10 & 1) == 0)
    {
      sub_250E25220();
      __break(1u);
      return;
    }
    uint64_t v7 = &selRef_fahrenheit;
  }
  id v11 = [self *v7];
  objc_msgSend(a1, sel_doubleValueForUnit_, v12);
  sub_250D98B48(0, &qword_269B037E0);
  sub_250E24370();
}

uint64_t static FormatStyle<>.wristTemperature(unit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v35 = a2;
  sub_250E23844(0, &qword_269B043C8, MEMORY[0x263F07580], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - v3;
  uint64_t v5 = sub_250E247F0();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = sub_250E24780();
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v30 - v9;
  sub_250E238A8();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250E22BBC(0, &qword_269B043D8, MEMORY[0x263F06DD0]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v30 - v17;
  sub_250E22BBC(0, &qword_269B043E0, MEMORY[0x263F061E8]);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v23 = (char *)&v30 - v22;
  sub_250D98B48(0, &qword_269B037E0);
  sub_250E24390();
  sub_250E245A0();
  static FormatStyle<>.wristTemperature.getter((uint64_t)v13);
  sub_250E237E0(0, &qword_269B037F0, MEMORY[0x263F06DA8]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v13, 0, 1, v24);
  sub_250E24350();
  sub_250E2391C((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_250E247E0();
  sub_250E24770();
  sub_250D98B48(0, &qword_269B043C0);
  id v25 = objc_msgSend(self, sel__changeInDegreeFahrenheitUnit);
  LOBYTE(v20) = sub_250E24F90();

  if (v20) {
    sub_250E247A0();
  }
  else {
    sub_250E247B0();
  }
  uint64_t v26 = sub_250E247C0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v4, 0, 1, v26);
  sub_250E24760();
  uint64_t v28 = v33;
  uint64_t v27 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v31, v10, v34);
  sub_250E24790();
  sub_250E22BBC(0, &qword_269B037D8, MEMORY[0x263F061F0]);
  sub_250E24380();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v10, v27);
}

void sub_250E23660(void *a1)
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_secondUnit);
  unsigned int v4 = objc_msgSend(a1, sel_isCompatibleWithUnit_, v3);

  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v5 = objc_msgSend(v2, sel_secondUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v5);
  double v7 = v6;

  double v8 = round(v7 / 60.0) * 60.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= 9.22337204e18) {
LABEL_9:
  }
    __break(1u);
}

uint64_t sub_250E23798(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_250E237E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_250D9B8EC();
    unint64_t v7 = a3(a1, MEMORY[0x263F8D538], v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_250E23844(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_250E238A8()
{
  if (!qword_269B043D0)
  {
    sub_250E237E0(255, &qword_269B037F0, MEMORY[0x263F06DA8]);
    unint64_t v0 = sub_250E24FB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B043D0);
    }
  }
}

uint64_t sub_250E2391C(uint64_t a1)
{
  sub_250E238A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250E23978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[1] = a2;
  v23[0] = a1;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_250D8B520(*(void *)(a3 + 56) + 32 * i, (uint64_t)v22);
    *(void *)&long long v21 = v19;
    *((void *)&v21 + 1) = v18;
    v20[0] = v21;
    v20[1] = v22[0];
    void v20[2] = v22[1];
    swift_bridgeObjectRetain();
    sub_250E23C54((uint64_t)v23, (uint64_t *)v20);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_250E23EFC((uint64_t)v20);
      return swift_release();
    }
    uint64_t result = sub_250E23EFC((uint64_t)v20);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v9) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v9)
  {
LABEL_26:
    swift_release();
    return v23[0];
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id HKTableFormatter.init(keyValueDomainDictionary:)(uint64_t a1)
{
  sub_250E23978(MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], a1);
  swift_bridgeObjectRelease();
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithColumnTitles_, v2);

  id v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)sub_250E24DB0();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_appendHeterogenousRow_, v5);

  return v4;
}

_OWORD *sub_250E23C54(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = (uint64_t)(a2 + 2);
  *(void *)&long long v20 = *a2;
  *((void *)&v20 + 1) = v4;
  sub_250D8B520((uint64_t)(a2 + 2), (uint64_t)v21);
  uint64_t v7 = *(void **)a1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = sub_250DCF6F4(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = sub_250DCF6F4((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  v7[2] = v9 + 1;
  char v10 = &v7[2 * v9];
  v10[4] = v5;
  v10[5] = v4;
  *(void *)a1 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  *(void *)&long long v20 = *a2;
  *((void *)&v20 + 1) = v12;
  sub_250E23FC8();
  if ((sub_250E25000() & 1) != 0
    && (*(void *)&long long v20 = v11,
        *((void *)&v20 + 1) = v12,
        sub_250D8B520(v6, (uint64_t)v21),
        (swift_dynamicCast() & 1) != 0))
  {
    *((void *)&v21[0] + 1) = sub_250E24710();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
    sub_250E24630();
    uint64_t v13 = *(void **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_250DCFACC(0, v13[2] + 1, 1, v13);
    }
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1) {
      uint64_t v13 = sub_250DCFACC((void *)(v14 > 1), v15 + 1, 1, v13);
    }
    void v13[2] = v15 + 1;
    uint64_t result = sub_250DE78B0(&v20, &v13[4 * v15 + 4]);
    *(void *)(a1 + 8) = v13;
  }
  else
  {
    sub_250D8B520(v6, (uint64_t)v21);
    uint64_t v17 = *(void **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v17 = sub_250DCFACC(0, v17[2] + 1, 1, v17);
    }
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      uint64_t v17 = sub_250DCFACC((void *)(v18 > 1), v19 + 1, 1, v17);
    }
    void v17[2] = v19 + 1;
    uint64_t result = sub_250DE78B0(v21, &v17[4 * v19 + 4]);
    *(void *)(a1 + 8) = v17;
  }
  return result;
}

uint64_t sub_250E23EFC(uint64_t a1)
{
  sub_250E23F58();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_250E23F58()
{
  if (!qword_269B043E8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B043E8);
    }
  }
}

unint64_t sub_250E23FC8()
{
  unint64_t result = qword_269B043F0;
  if (!qword_269B043F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B043F0);
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.available(on:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_250D88890();
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - v10;
  sub_250D97944();
  uint64_t v37 = v12;
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_250E24B20();
  int64_t v16 = *(void **)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250D96CC4();
  uint64_t v38 = *(int *)(v19 + 48);
  sub_250E24AB0();
  sub_250DC8DD8();
  if (sub_250E24BB0())
  {
    uint64_t v20 = *(int *)(v7 + 48);
    uint64_t v35 = a3;
    uint64_t v36 = a2;
    long long v21 = &v11[v20];
    uint64_t v34 = v14;
    uint64_t v22 = (void (*)(char *, char *, uint64_t))v16[4];
    v22(v11, v18, v15);
    uint64_t v23 = v7;
    uint64_t v32 = v21;
    uint64_t v33 = v7;
    uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v24(v21, a1, v15);
    id v25 = v39;
    uint64_t v26 = &v39[*(int *)(v23 + 48)];
    v24(v39, (uint64_t)v11, v15);
    v24(v26, (uint64_t)v21, v15);
    uint64_t v27 = (uint64_t)v34;
    v22(v34, v25, v15);
    uint64_t v28 = (void (*)(char *, uint64_t))v16[1];
    v28(v26, v15);
    double v29 = &v25[*(int *)(v33 + 48)];
    v22(v25, v11, v15);
    v22(v29, v32, v15);
    v22((char *)(v27 + *(int *)(v37 + 36)), v29, v15);
    v28(v25, v15);
    uint64_t v30 = v35;
    sub_250D8DFC0(v27, v35);
    *(void *)(v30 + v38) = v36;
    type metadata accessor for SleepingSampleBaselineAvailability();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
    return sub_250E24350();
  }
}

uint64_t sub_250E24350()
{
  return MEMORY[0x270EEDD28]();
}

uint64_t sub_250E24360()
{
  return MEMORY[0x270EEDD58]();
}

uint64_t sub_250E24370()
{
  return MEMORY[0x270EEDFA8]();
}

uint64_t sub_250E24380()
{
  return MEMORY[0x270EEDFE0]();
}

uint64_t sub_250E24390()
{
  return MEMORY[0x270EEDFF0]();
}

uint64_t sub_250E243A0()
{
  return MEMORY[0x270EEE058]();
}

uint64_t sub_250E243B0()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t sub_250E243C0()
{
  return MEMORY[0x270EEE2F8]();
}

uint64_t sub_250E243D0()
{
  return MEMORY[0x270EEE300]();
}

uint64_t sub_250E243E0()
{
  return MEMORY[0x270EEE308]();
}

uint64_t sub_250E243F0()
{
  return MEMORY[0x270EEE338]();
}

uint64_t sub_250E24400()
{
  return MEMORY[0x270EEE3E0]();
}

uint64_t sub_250E24410()
{
  return MEMORY[0x270EEE3F0]();
}

uint64_t sub_250E24420()
{
  return MEMORY[0x270EEE408]();
}

uint64_t sub_250E24430()
{
  return MEMORY[0x270EEE410]();
}

uint64_t sub_250E24440()
{
  return MEMORY[0x270EEE4B0]();
}

uint64_t sub_250E24450()
{
  return MEMORY[0x270EEE4C0]();
}

uint64_t sub_250E24460()
{
  return MEMORY[0x270EEE518]();
}

uint64_t sub_250E24470()
{
  return MEMORY[0x270EEE520]();
}

uint64_t sub_250E24480()
{
  return MEMORY[0x270EEE548]();
}

uint64_t sub_250E24490()
{
  return MEMORY[0x270EEE558]();
}

uint64_t sub_250E244A0()
{
  return MEMORY[0x270EEE568]();
}

uint64_t sub_250E244B0()
{
  return MEMORY[0x270EEE590]();
}

uint64_t sub_250E244C0()
{
  return MEMORY[0x270EEE598]();
}

uint64_t sub_250E244D0()
{
  return MEMORY[0x270EEE5B8]();
}

uint64_t sub_250E244E0()
{
  return MEMORY[0x270EEE5F8]();
}

uint64_t sub_250E244F0()
{
  return MEMORY[0x270EEE610]();
}

uint64_t sub_250E24500()
{
  return MEMORY[0x270EEE890]();
}

uint64_t sub_250E24510()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t sub_250E24520()
{
  return MEMORY[0x270EEF0A0]();
}

uint64_t sub_250E24530()
{
  return MEMORY[0x270EEF0C0]();
}

uint64_t sub_250E24540()
{
  return MEMORY[0x270EEF0D0]();
}

uint64_t sub_250E24550()
{
  return MEMORY[0x270EEF830]();
}

uint64_t sub_250E24560()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_250E24570()
{
  return MEMORY[0x270EEF938]();
}

uint64_t sub_250E24580()
{
  return MEMORY[0x270EEF950]();
}

uint64_t sub_250E24590()
{
  return MEMORY[0x270EEF9B8]();
}

uint64_t sub_250E245A0()
{
  return MEMORY[0x270EEFA58]();
}

uint64_t sub_250E245B0()
{
  return MEMORY[0x270EEFAD0]();
}

uint64_t sub_250E245C0()
{
  return MEMORY[0x270EEFAE0]();
}

uint64_t sub_250E245D0()
{
  return MEMORY[0x270EEFAE8]();
}

uint64_t sub_250E245E0()
{
  return MEMORY[0x270EEFAF0]();
}

uint64_t sub_250E245F0()
{
  return MEMORY[0x270EEFB10]();
}

uint64_t sub_250E24600()
{
  return MEMORY[0x270EEFB20]();
}

uint64_t sub_250E24610()
{
  return MEMORY[0x270EEFB28]();
}

uint64_t sub_250E24620()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_250E24630()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t sub_250E24640()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t sub_250E24650()
{
  return MEMORY[0x270EF02E8]();
}

uint64_t sub_250E24660()
{
  return MEMORY[0x270EF0310]();
}

uint64_t sub_250E24670()
{
  return MEMORY[0x270EF0320]();
}

uint64_t sub_250E24680()
{
  return MEMORY[0x270EF0348]();
}

uint64_t sub_250E24690()
{
  return MEMORY[0x270EF0358]();
}

uint64_t sub_250E246A0()
{
  return MEMORY[0x270EF0360]();
}

uint64_t sub_250E246B0()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_250E246C0()
{
  return MEMORY[0x270EF0998]();
}

uint64_t sub_250E246D0()
{
  return MEMORY[0x270EF09D8]();
}

uint64_t sub_250E246E0()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t sub_250E246F0()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_250E24700()
{
  return MEMORY[0x270EF0C00]();
}

uint64_t sub_250E24710()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_250E24720()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t sub_250E24730()
{
  return MEMORY[0x270EF0C88]();
}

uint64_t sub_250E24740()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t sub_250E24750()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_250E24760()
{
  return MEMORY[0x270EF0D48]();
}

uint64_t sub_250E24770()
{
  return MEMORY[0x270EF0D50]();
}

uint64_t sub_250E24780()
{
  return MEMORY[0x270EF0D58]();
}

uint64_t sub_250E24790()
{
  return MEMORY[0x270EF0D60]();
}

uint64_t sub_250E247A0()
{
  return MEMORY[0x270EF0E80]();
}

uint64_t sub_250E247B0()
{
  return MEMORY[0x270EF0E90]();
}

uint64_t sub_250E247C0()
{
  return MEMORY[0x270EF0E98]();
}

uint64_t sub_250E247D0()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t sub_250E247E0()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t sub_250E247F0()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_250E24800()
{
  return MEMORY[0x270EF10C8]();
}

uint64_t sub_250E24810()
{
  return MEMORY[0x270EF10D8]();
}

uint64_t sub_250E24820()
{
  return MEMORY[0x270EF1160]();
}

uint64_t sub_250E24830()
{
  return MEMORY[0x270EF1280]();
}

uint64_t sub_250E24840()
{
  return MEMORY[0x270EF12C0]();
}

uint64_t sub_250E24850()
{
  return MEMORY[0x270EF12C8]();
}

uint64_t sub_250E24860()
{
  return MEMORY[0x270EF1330]();
}

uint64_t sub_250E24870()
{
  return MEMORY[0x270EF1350]();
}

uint64_t sub_250E24880()
{
  return MEMORY[0x270EF13F0]();
}

uint64_t sub_250E24890()
{
  return MEMORY[0x270EF1400]();
}

uint64_t sub_250E248A0()
{
  return MEMORY[0x270EF1410]();
}

uint64_t sub_250E248B0()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_250E248C0()
{
  return MEMORY[0x270EF1570]();
}

uint64_t sub_250E248D0()
{
  return MEMORY[0x270EF1580]();
}

uint64_t sub_250E248E0()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_250E248F0()
{
  return MEMORY[0x270FA11F8]();
}

uint64_t sub_250E24900()
{
  return MEMORY[0x270FA1208]();
}

uint64_t sub_250E24910()
{
  return MEMORY[0x270FA1238]();
}

uint64_t sub_250E24920()
{
  return MEMORY[0x270FA1250]();
}

uint64_t sub_250E24930()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_250E24940()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_250E24950()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_250E24960()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_250E24970()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_250E24980()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_250E24990()
{
  return MEMORY[0x270FA0BA8]();
}

uint64_t sub_250E249A0()
{
  return MEMORY[0x270FA0BF0]();
}

uint64_t sub_250E249B0()
{
  return MEMORY[0x270EF30B8]();
}

uint64_t sub_250E249C0()
{
  return MEMORY[0x270EF30C8]();
}

uint64_t sub_250E249D0()
{
  return MEMORY[0x270EF30D0]();
}

uint64_t sub_250E249E0()
{
  return MEMORY[0x270EF30D8]();
}

uint64_t sub_250E249F0()
{
  return MEMORY[0x270EF31B8]();
}

uint64_t sub_250E24A00()
{
  return MEMORY[0x270EF31C0]();
}

uint64_t sub_250E24A10()
{
  return MEMORY[0x270EF31C8]();
}

uint64_t sub_250E24A20()
{
  return MEMORY[0x270EF31D0]();
}

uint64_t sub_250E24A30()
{
  return MEMORY[0x270EF31D8]();
}

uint64_t sub_250E24A50()
{
  return MEMORY[0x270EF31E8]();
}

uint64_t sub_250E24A60()
{
  return MEMORY[0x270EF31F0]();
}

uint64_t sub_250E24A70()
{
  return MEMORY[0x270EF3318]();
}

uint64_t sub_250E24A80()
{
  return MEMORY[0x270EF3328]();
}

uint64_t sub_250E24A90()
{
  return MEMORY[0x270EF3340]();
}

uint64_t sub_250E24AA0()
{
  return MEMORY[0x270EF3348]();
}

uint64_t sub_250E24AB0()
{
  return MEMORY[0x270EF3350]();
}

uint64_t sub_250E24AC0()
{
  return MEMORY[0x270EF3360]();
}

uint64_t sub_250E24AD0()
{
  return MEMORY[0x270EF3368]();
}

uint64_t sub_250E24AE0()
{
  return MEMORY[0x270EF3370]();
}

uint64_t sub_250E24AF0()
{
  return MEMORY[0x270EF3378]();
}

uint64_t sub_250E24B00()
{
  return MEMORY[0x270EF3380]();
}

uint64_t sub_250E24B10()
{
  return MEMORY[0x270EF3388]();
}

uint64_t sub_250E24B20()
{
  return MEMORY[0x270EF3390]();
}

uint64_t sub_250E24B30()
{
  return MEMORY[0x270EF1808]();
}

uint64_t sub_250E24B40()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_250E24B50()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_250E24B60()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_250E24B70()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_250E24B80()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_250E24B90()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_250E24BA0()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_250E24BB0()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_250E24BD0()
{
  return MEMORY[0x270F9D550]();
}

uint64_t sub_250E24BE0()
{
  return MEMORY[0x270F9D560]();
}

uint64_t sub_250E24BF0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_250E24C00()
{
  return MEMORY[0x270EF18D0]();
}

uint64_t sub_250E24C10()
{
  return MEMORY[0x270EF1958]();
}

uint64_t sub_250E24C20()
{
  return MEMORY[0x270EF1968]();
}

uint64_t sub_250E24C30()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_250E24C40()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_250E24C50()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_250E24C60()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_250E24C70()
{
  return MEMORY[0x270EF1AF8]();
}

uint64_t sub_250E24C80()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_250E24C90()
{
  return MEMORY[0x270F9D600]();
}

uint64_t sub_250E24CA0()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_250E24CB0()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_250E24CC0()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_250E24CD0()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_250E24CE0()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_250E24CF0()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_250E24D00()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_250E24D10()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_250E24D30()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_250E24D40()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_250E24D50()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_250E24D60()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_250E24D70()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_250E24D80()
{
  return MEMORY[0x270F9DA98]();
}

uint64_t sub_250E24D90()
{
  return MEMORY[0x270F9DB18]();
}

uint64_t sub_250E24DA0()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_250E24DB0()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_250E24DC0()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_250E24DD0()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_250E24DE0()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_250E24DF0()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_250E24E00()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_250E24E10()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_250E24E20()
{
  return MEMORY[0x270F9DC80]();
}

uint64_t sub_250E24E30()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_250E24E40()
{
  return MEMORY[0x270EF1BD8]();
}

uint64_t sub_250E24E50()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t sub_250E24E60()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t sub_250E24E70()
{
  return MEMORY[0x270FA20B0]();
}

uint64_t sub_250E24E80()
{
  return MEMORY[0x270FA20C0]();
}

uint64_t sub_250E24E90()
{
  return MEMORY[0x270FA20D0]();
}

uint64_t sub_250E24EA0()
{
  return MEMORY[0x270EF1C98]();
}

uint64_t sub_250E24EB0()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_250E24EC0()
{
  return MEMORY[0x270EF1CE0]();
}

uint64_t sub_250E24ED0()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_250E24EE0()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_250E24EF0()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_250E24F00()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_250E24F10()
{
  return MEMORY[0x270EF1D40]();
}

uint64_t sub_250E24F20()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_250E24F30()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_250E24F40()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_250E24F50()
{
  return MEMORY[0x270EF33E8]();
}

uint64_t sub_250E24F60()
{
  return MEMORY[0x270EF33F8]();
}

uint64_t sub_250E24F70()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_250E24F80()
{
  return MEMORY[0x270EF2100]();
}

uint64_t sub_250E24F90()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_250E24FA0()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t sub_250E24FB0()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_250E24FC0()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_250E24FD0()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_250E24FE0()
{
  return MEMORY[0x270F9E570]();
}

uint64_t sub_250E24FF0()
{
  return MEMORY[0x270F9E578]();
}

uint64_t sub_250E25000()
{
  return MEMORY[0x270EF2518]();
}

uint64_t sub_250E25010()
{
  return MEMORY[0x270EF25E0]();
}

uint64_t sub_250E25020()
{
  return MEMORY[0x270EF25E8]();
}

uint64_t sub_250E25030()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_250E25050()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_250E25060()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_250E25070()
{
  return MEMORY[0x270F9E8C0]();
}

uint64_t sub_250E25080()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_250E25090()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_250E250A0()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_250E250B0()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_250E250C0()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_250E250D0()
{
  return MEMORY[0x270F9E978]();
}

uint64_t sub_250E250E0()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_250E250F0()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_250E25100()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_250E25110()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t sub_250E25120()
{
  return MEMORY[0x270F9EA90]();
}

uint64_t sub_250E25130()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t sub_250E25140()
{
  return MEMORY[0x270F9EAE0]();
}

uint64_t sub_250E25150()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_250E25160()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_250E25170()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_250E25180()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_250E25190()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_250E251A0()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_250E251B0()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_250E251C0()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_250E251D0()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_250E251E0()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_250E251F0()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_250E25200()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t sub_250E25210()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_250E25220()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_250E25230()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_250E25240()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_250E25250()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_250E25260()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_250E25270()
{
  return MEMORY[0x270F9F0B8]();
}

uint64_t sub_250E25280()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_250E25290()
{
  return MEMORY[0x270F9F0C8]();
}

uint64_t sub_250E252B0()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_250E252C0()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_250E252D0()
{
  return MEMORY[0x270F9F258]();
}

uint64_t sub_250E252E0()
{
  return MEMORY[0x270F9F280]();
}

uint64_t sub_250E252F0()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_250E25300()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_250E25310()
{
  return MEMORY[0x270F9F2F8]();
}

uint64_t sub_250E25320()
{
  return MEMORY[0x270F9F308]();
}

uint64_t sub_250E25330()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_250E25340()
{
  return MEMORY[0x270F9F360]();
}

uint64_t sub_250E25350()
{
  return MEMORY[0x270F9F390]();
}

uint64_t sub_250E25360()
{
  return MEMORY[0x270F9F3C0]();
}

uint64_t sub_250E25370()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_250E25380()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_250E25390()
{
  return MEMORY[0x270F9F438]();
}

uint64_t sub_250E253A0()
{
  return MEMORY[0x270F9F448]();
}

uint64_t sub_250E253B0()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_250E253C0()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_250E253D0()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_250E253E0()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_250E253F0()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_250E25400()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_250E25410()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_250E25430()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t sub_250E25440()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t sub_250E25450()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_250E25460()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_250E25470()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_250E25480()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_250E25490()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_250E254A0()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_250E254B0()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_250E254C0()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_250E254D0()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_250E254E0()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_250E254F0()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_250E25500()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_250E25510()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_250E25520()
{
  return MEMORY[0x270EF2860]();
}

uint64_t sub_250E25530()
{
  return MEMORY[0x270EF2870]();
}

uint64_t sub_250E25540()
{
  return MEMORY[0x270EF2920]();
}

uint64_t sub_250E25550()
{
  return MEMORY[0x270EF2928]();
}

uint64_t sub_250E25560()
{
  return MEMORY[0x270EF2960]();
}

uint64_t sub_250E25570()
{
  return MEMORY[0x270EF2970]();
}

uint64_t sub_250E25580()
{
  return MEMORY[0x270EF2980]();
}

uint64_t sub_250E25590()
{
  return MEMORY[0x270EF29C8]();
}

uint64_t sub_250E255A0()
{
  return MEMORY[0x270EF29D0]();
}

uint64_t sub_250E255B0()
{
  return MEMORY[0x270EF29F0]();
}

uint64_t sub_250E255C0()
{
  return MEMORY[0x270EF2A10]();
}

uint64_t sub_250E255D0()
{
  return MEMORY[0x270F9FFE8]();
}

uint64_t sub_250E25600()
{
  return MEMORY[0x270FA0128]();
}

uint64_t HKAnalyticsPropertyValueForBiologicalSex()
{
  return MEMORY[0x270EF35F8]();
}

uint64_t HKCompareDoubles()
{
  return MEMORY[0x270EF3638]();
}

uint64_t HKSensitiveLogItem()
{
  return MEMORY[0x270EF3808]();
}

uint64_t HKSynchronizeNanoPreferencesUserDefaults()
{
  return MEMORY[0x270EF3898]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x270FA0350]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x270FA0358]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}