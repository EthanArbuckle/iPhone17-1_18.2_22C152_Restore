void sub_248948938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_248948B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_248948C6C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265242DF0, MEMORY[0x263F8C060]);
}

void sub_248948CF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

id get_adm_log_object(void)
{
  unint64_t v0 = 0x26B148000uLL;
  {
    unint64_t v0 = 0x26B148000;
    if (v3)
    {
      get_adm_log_object(void)::g_adm_log_object = (uint64_t)os_log_create("com.apple.coreaudio", "audio_dsp_manager");
      unint64_t v0 = 0x26B148000;
    }
  }
  uint64_t v1 = *(void **)(v0 + 1928);
  return v1;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t adm::exclaves::utility::convert_to<std::optional<audiodsptypes_streamdescription_s>,CA::StreamDescription>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)*(double *)a2;
  if (v2 <= 44099)
  {
    if (v2 > 23999)
    {
      if (v2 == 24000)
      {
        unint64_t v3 = 0x4C7CB07FE50E5462;
        goto LABEL_22;
      }
      if (v2 == 32000)
      {
        unint64_t v3 = 0x5460BCD664C6C7FALL;
        goto LABEL_22;
      }
    }
    else
    {
      if (v2 == 8000)
      {
        unint64_t v3 = 0xDB58BC24D81FB94FLL;
        goto LABEL_22;
      }
      if (v2 == 16000)
      {
        unint64_t v3 = 0xF3D427428C99B29;
        goto LABEL_22;
      }
    }
LABEL_27:
    char v5 = 0;
    *(unsigned char *)result = 0;
    goto LABEL_28;
  }
  if (v2 <= 88199)
  {
    if (v2 == 44100)
    {
      unint64_t v3 = 0xEF2093B88F8E7C91;
      goto LABEL_22;
    }
    if (v2 == 48000)
    {
      unint64_t v3 = 0x4709E2ED84FF14BLL;
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (v2 == 88200)
  {
    unint64_t v3 = 0xD64B2C69CF7E5942;
    goto LABEL_22;
  }
  if (v2 == 96000)
  {
    unint64_t v3 = 0x26F9951B5B225FF3;
    goto LABEL_22;
  }
  if (v2 != 192000) {
    goto LABEL_27;
  }
  unint64_t v3 = 0xA35EFE3E1F8EBC3ALL;
LABEL_22:
  if (*(_DWORD *)(a2 + 8) != 1819304813) {
    goto LABEL_27;
  }
  int v4 = *(_DWORD *)(a2 + 12);
  if ((v4 & 0x20) != 0 || (v4 & 1) == 0 || *(_DWORD *)(a2 + 32) != 32) {
    goto LABEL_27;
  }
  *(_DWORD *)result = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 4) = 0;
  *(void *)(result + 8) = 0xA324521D2548FDC2;
  *(void *)(result + 16) = v3;
  char v5 = 1;
LABEL_28:
  *(unsigned char *)(result + 24) = v5;
  return result;
}

uint64_t adm::exclaves::utility::convert_to<std::optional<audiodsputility_parameterid_s>,adm::exclaves::ParameterID>(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_2489AF2E8[a1];
  }
}

uint64_t adm::exclaves::utility::convert_to<std::optional<float>,audiodsputility_parametervalue_s>(uint64_t *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *a1;
  float v3 = 0.0;
  if (*a1 <= (uint64_t)0xF876E807C3E4A3E6)
  {
    if (v2 != 0x8695345E04E75645 && v2 != 0xBA94426FF040F022)
    {
      unint64_t v4 = 0xE9CAC24E271E1010;
LABEL_8:
      if (v2 != v4) {
        return v1 | LODWORD(v3);
      }
    }
LABEL_17:
    if (*((unsigned char *)a1 + 8)) {
      float v3 = 1.0;
    }
    goto LABEL_19;
  }
  if (v2 <= 0x67D58230E14B515ALL)
  {
    if (v2 != 0xF876E807C3E4A3E7)
    {
      unint64_t v4 = 0x23580A01CC35D89ELL;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  if (v2 == 0x67D58230E14B515BLL) {
    goto LABEL_17;
  }
  if (v2 == 0x7F1E21C17219CAE8)
  {
    int64_t v5 = a1[1];
    if (v5 > (uint64_t)0xF7C7674340E151C7)
    {
      switch(v5)
      {
        case 0xF7C7674340E151C8:
          goto LABEL_19;
        case 0xE69699D348D1432:
          float v3 = 4.0;
          goto LABEL_19;
        case 0x2C1A98D65FB58883:
          float v3 = 1.0;
          goto LABEL_19;
      }
    }
    else
    {
      switch(v5)
      {
        case 0x8D3025BDD0206734:
          float v3 = 5.0;
          goto LABEL_19;
        case 0x966DBF642921EE02:
          float v3 = 3.0;
          goto LABEL_19;
        case 0xB941EFAD2C01A1F7:
          float v3 = 2.0;
LABEL_19:
          uint64_t v1 = 0x100000000;
          return v1 | LODWORD(v3);
      }
    }
    BOOL v7 = v5 == 0x996B795339B4732BLL;
    uint64_t v8 = v5 == 0x996B795339B4732BLL;
    if (v7) {
      float v3 = 6.0;
    }
    uint64_t v1 = v8 << 32;
  }
  return v1 | LODWORD(v3);
}

uint64_t adm::exclaves::utility::convert_to<std::optional<adm::exclaves::ParameterID>,unsigned int>(int a1)
{
  if (a1 <= 1701015405)
  {
    switch(a1)
    {
      case 1633969524:
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 4;
        return v2 | v1;
      case 1650811756:
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 6;
        return v2 | v1;
      case 1651797616:
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 1;
        return v2 | v1;
    }
LABEL_16:
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    return v2 | v1;
  }
  if (a1 > 1969844081)
  {
    if (a1 == 1969844082)
    {
      uint64_t v2 = 0;
      uint64_t v1 = 0x100000000;
      return v2 | v1;
    }
    if (a1 == 1987339878)
    {
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 2;
      return v2 | v1;
    }
    goto LABEL_16;
  }
  if (a1 == 1701015406)
  {
    uint64_t v1 = 0x100000000;
    uint64_t v2 = 5;
    return v2 | v1;
  }
  if (a1 != 1936748642) {
    goto LABEL_16;
  }
  uint64_t v1 = 0x100000000;
  uint64_t v2 = 3;
  return v2 | v1;
}

uint64_t adm::utility::getPortSubType(uint64_t result, unsigned int a2, int a3, char *a4)
{
  if (result == 1970496032)
  {
    uint64_t v4 = a4[23];
    BOOL v5 = (v4 & 0x80u) != 0;
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *((void *)a4 + 1);
    }
    if (v5) {
      std::string::size_type v6 = *(char **)a4;
    }
    else {
      std::string::size_type v6 = a4;
    }
    if (v4 >= 9)
    {
      BOOL v7 = &v6[v4];
      uint64_t v8 = v6;
      do
      {
        v9 = (char *)memchr(v8, 48, v4 - 8);
        if (!v9) {
          break;
        }
        if (*(void *)v9 == 0x3131313A43413530 && v9[8] == 52)
        {
          if (v9 != v7 && v9 - v6 != -1) {
            return 909127729;
          }
          return 1970496032;
        }
        uint64_t v8 = v9 + 1;
        uint64_t v4 = v7 - (unsigned char *)v8;
      }
      while (v7 - (unsigned char *)v8 >= 9);
    }
    return 1970496032;
  }
  else if (result == 1651275109)
  {
    if ((a3 - 1) >= 3) {
      return 1651275109;
    }
    else {
      return dword_2489AAAB0[a3 - 1];
    }
  }
  else if (a2)
  {
    return a2;
  }
  else
  {
    return result;
  }
}

void *adm::graph::Semantic::operator std::string(void *a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v8 = *MEMORY[0x263EF8340];
  do
  {
    if (adm::graph::detail::gSemanticInfoTable[v4] == a2) {
      return std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&adm::graph::detail::gSemanticInfoTable[v4 + 2]);
    }
    v4 += 4;
  }
  while (v4 != 12);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 67109120;
    v7[1] = a2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, "Unknown");
}

void sub_2489494A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  size_t v4 = operator new(0x18uLL);
  *(_OWORD *)size_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    size_t v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v31;
      do
      {
        if (v6 >= v32)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v31 = v6;
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            size_t v5 = v8;
          }
          while (!v9);
        }
        size_t v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(**a1, (*a1)[1], &v30);
  }
  for (unint64_t i = v31; v30 != v31; unint64_t i = v31)
  {
    unsigned int v13 = *(unsigned __int8 *)(i - 16);
    uint64_t v11 = i - 16;
    uint64_t v12 = v13;
    LOBYTE(v28) = v13;
    v14 = *(uint64_t **)(v11 + 8);
    v29 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    unint64_t v15 = v31;
    unint64_t v16 = v31 - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31 - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15 - 8, *(unsigned __int8 *)(v15 - 16));
    unint64_t v31 = v16;
    if (v13 == 1)
    {
      uint64_t v22 = *v14;
      if ((uint64_t *)*v14 == v14 + 1)
      {
        uint64_t v12 = 1;
      }
      else
      {
        do
        {
          if (v16 >= v32)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, v22 + 56);
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *(unsigned char *)(v22 + 56);
            *(void *)(v16 + 8) = *(void *)(v22 + 64);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22 + 56);
            *(unsigned char *)(v22 + 56) = 0;
            *(void *)(v22 + 64) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v31 = v16;
          v23 = *(uint64_t **)(v22 + 8);
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = *(uint64_t **)(v22 + 16);
              BOOL v9 = *v24 == v22;
              uint64_t v22 = (uint64_t)v24;
            }
            while (!v9);
          }
          uint64_t v22 = (uint64_t)v24;
        }
        while (v24 != v14 + 1);
        v14 = v29;
        uint64_t v12 = v28;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v14[1]);
      uint64_t *v14 = (uint64_t)(v14 + 1);
      v14[2] = 0;
      v14[1] = 0;
    }
    else if (v12 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(*v14, v14[1], &v30);
      uint64_t v18 = *v14;
      uint64_t v17 = v14[1];
      if (v17 != *v14)
      {
        uint64_t v19 = v17 - 16;
        v20 = (unsigned __int8 *)(v17 - 16);
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
          unsigned int v21 = *v20;
          v20 -= 16;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19 + 8, v21);
          BOOL v9 = v19 == v18;
          uint64_t v19 = (uint64_t)v20;
        }
        while (!v9);
      }
      v14[1] = v18;
      uint64_t v12 = 2;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v12);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((*a1)[1]);
      goto LABEL_45;
    case 1:
      v28 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
      goto LABEL_45;
    case 2:
      v25 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      v26 = (void *)*v25;
      break;
    case 7:
      v25 = *a1;
      v27 = (void *)**a1;
      if (!v27) {
        goto LABEL_46;
      }
      v25[1] = (uint64_t)v27;
      v26 = v27;
      break;
    default:
      goto LABEL_47;
  }
  operator delete(v26);
LABEL_45:
  v25 = *a1;
LABEL_46:
  operator delete(v25);
LABEL_47:
  v28 = (void **)&v30;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a3, v5);
        unint64_t v6 = result;
      }
      else
      {
        *(unsigned char *)unint64_t v6 = *(unsigned char *)v5;
        *(void *)(v6 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v6 += 16;
      }
      a3[1] = v6;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 2;
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 3 > v3) {
    unint64_t v3 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  v14[4] = v6;
  BOOL v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v8);
  uint64_t v10 = (uint64_t)&v9[16 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v14[3] = &v9[16 * v11];
  *(unsigned char *)uint64_t v10 = *(unsigned char *)a2;
  *(void *)(v10 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  v14[2] = v10 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(unsigned __int8 *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((void *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a1 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)a1 + 8, a1[56]);
    if ((char)a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      uint64_t v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      *(unsigned char *)(v6 + v7 - 16) = *(unsigned char *)(v4 + v7 - 16);
      *(void *)(v6 + v7 - 8) = *(void *)(v4 + v7 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4 + v7 - 16);
      *(unsigned char *)(v4 + v7 - 16) = 0;
      *(void *)(v4 + v7 - 8) = 0;
      result = (uint64_t *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v7 - 16);
      v7 -= 16;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(i - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i - 8, *(unsigned __int8 *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlohmann::detail::type_error::create(uint64_t a1, int a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  std::operator+<char>();
  size_t v6 = std::string::append(&v26, ".", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, a2);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v25;
  }
  else {
    uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v28, "] ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    unint64_t v15 = (const std::string::value_type *)a3;
  }
  else {
    unint64_t v15 = *(const std::string::value_type **)a3;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(a3 + 8);
  }
  uint64_t v17 = std::string::append(&v22, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v24 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v23 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v24 >= 0) {
    uint64_t v19 = v23;
  }
  else {
    uint64_t v19 = (void **)v23[0];
  }
  *(void *)a1 = &unk_26FCA41D0;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const char *)v19);
  *(void *)a1 = &unk_26FCA41A8;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
}

void sub_24894A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::exception::~exception(v41);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26FCA41D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26FCA41D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x24C5866C0);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26FCA41D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x24C5866C0);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26FCA41D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265242DF8, MEMORY[0x263F8C068]);
}

void sub_24894A45C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t adm::graph::SemanticSetIterator::operator*(unint64_t a1)
{
  if (a1 >= 3) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  return adm::graph::detail::gSemanticInfoTable[4 * a1];
}

uint64_t adm::graph::detail::getSemanticIndex(int a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  uint64_t v6 = *MEMORY[0x263EF8340];
  while (adm::graph::detail::gSemanticInfoTable[v2] != a1)
  {
    ++result;
    v2 += 4;
    if (v2 == 12)
    {
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        v5[0] = 67109120;
        v5[1] = a1;
        _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "Failed to match semantic type %d to get index. Use index 0 instead", (uint8_t *)v5, 8u);
      }
      return 0;
    }
  }
  return result;
}

void *adm::graph::SemanticSet::SemanticSet(void *a1, int *a2, uint64_t a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      unint64_t SemanticIndex = adm::graph::detail::getSemanticIndex(*a2);
      if (SemanticIndex >= 0x20) {
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      }
      *a1 |= 1 << SemanticIndex;
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

uint64_t adm::graph::SemanticSet::contains(void *a1, int a2)
{
  unint64_t SemanticIndex = adm::graph::detail::getSemanticIndex(a2);
  if (SemanticIndex >= 0x20) {
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  return (*a1 >> SemanticIndex) & 1;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v5 = *(void **)(a2 + 8);
      uint64_t v4 = (uint64_t)operator new(0x18uLL);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = v4 + 8;
      uint64_t v8 = (void *)*v5;
      uint64_t v6 = v5 + 1;
      long long v7 = v8;
      if (v8 == v6) {
        goto LABEL_33;
      }
      break;
    case 2:
      uint64_t v17 = *(uint64_t **)(a2 + 8);
      long long v18 = operator new(0x18uLL);
      uint64_t v4 = (uint64_t)v18;
      v18[1] = 0;
      v18[2] = 0;
      *long long v18 = 0;
      uint64_t v19 = *v17;
      uint64_t v20 = v17[1];
      v29 = v18;
      char v30 = 0;
      if (v20 != v19)
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v18, (v20 - v19) >> 4);
        uint64_t v33 = *(void *)(v4 + 8);
        uint64_t v34 = v33;
        v31[0] = (uint64_t *)(v4 + 16);
        v31[1] = &v33;
        v31[2] = &v34;
        char v32 = 0;
        uint64_t v21 = v33;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v21, v19);
          v19 += 16;
          uint64_t v21 = v34 + 16;
          v34 += 16;
        }
        while (v19 != v20);
        char v32 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v31);
        *(void *)(v4 + 8) = v21;
      }
      goto LABEL_33;
    case 3:
      uint64_t v4 = (uint64_t)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_33;
    case 4:
      uint64_t v4 = *(unsigned __int8 *)(a2 + 8);
      goto LABEL_33;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = *(void *)(a2 + 8);
      goto LABEL_33;
    case 8:
      uint64_t v22 = *(void *)(a2 + 8);
      v23 = operator new(0x20uLL);
      uint64_t v4 = (uint64_t)v23;
      v23[1] = 0;
      v23[2] = 0;
      void *v23 = 0;
      std::string v25 = *(const void **)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      size_t v26 = v24 - *(void *)v22;
      if (v24 != *(void *)v22)
      {
        std::vector<unsigned char>::__vallocate[abi:ne180100](v23, v24 - *(void *)v22);
        std::string v27 = *(char **)(v4 + 8);
        memmove(v27, v25, v26);
        *(void *)(v4 + 8) = &v27[v26];
      }
      *(_WORD *)(v4 + 24) = *(_WORD *)(v22 + 24);
LABEL_33:
      *(void *)(a1 + 8) = v4;
      goto LABEL_34;
    default:
LABEL_34:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      return a1;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(v4 + 8);
    uint64_t v10 = (void *)(v4 + 8);
    if (*(void *)v4 == v4 + 8) {
      goto LABEL_11;
    }
    long long v11 = *(void **)(v4 + 8);
    uint64_t v12 = (void *)(v4 + 8);
    if (v9)
    {
      do
      {
        uint64_t v10 = v11;
        long long v11 = (void *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v12[2];
        BOOL v13 = *v10 == (void)v12;
        uint64_t v12 = v10;
      }
      while (v13);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, v7 + 4) & 0x80) != 0)
    {
LABEL_11:
      if (!v9)
      {
        v29 = (void *)(v4 + 8);
        int v14 = (uint64_t **)(v4 + 8);
LABEL_16:
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)v31, v4, (uint64_t)(v7 + 4));
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v4, (uint64_t)v29, v14, v31[0]);
        v31[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)v31);
        goto LABEL_17;
      }
      v29 = v10;
      int v14 = (uint64_t **)(v10 + 1);
    }
    else
    {
      int v14 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v4, &v29, v7 + 4);
    }
    if (!*v14) {
      goto LABEL_16;
    }
LABEL_17:
    unint64_t v15 = (void *)v7[1];
    if (v15)
    {
      do
      {
        std::string::size_type v16 = v15;
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        std::string::size_type v16 = (void *)v7[2];
        BOOL v13 = *v16 == (void)v7;
        long long v7 = v16;
      }
      while (!v13);
    }
    long long v7 = v16;
    if (v16 == v6) {
      goto LABEL_33;
    }
  }
}

void sub_24894A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x18uLL);
  unint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_24894AA50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 16;
      uint64_t v5 = (unsigned __int8 *)(v2 - 16);
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
        int v6 = *v5;
        v5 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v4 + 8), v6);
        BOOL v7 = v4 == v3;
        uint64_t v4 = (uint64_t)v5;
      }
      while (!v7);
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  int v6 = (char *)operator new(0x48uLL);
  BOOL v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v7 + 56, a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_24894ABD8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v1 + 56);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v1 + 64), *(unsigned __int8 *)(v1 + 56));
      if (*(char *)(v1 + 55) < 0) {
        operator delete(*(void **)(v1 + 32));
      }
    }
    operator delete((void *)v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

void *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  size_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        size_t v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      size_t v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  size_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_24894B054(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    uint64_t v5 = a2 + 32 * a3;
    uint64_t v6 = a2 + 16;
    uint64_t v7 = 32 * a3;
    uint64_t v8 = 32 * a3;
    while (**(unsigned char **)v6 == 2)
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 8);
      uint64_t v9 = *(unsigned char **)v10;
      if (*(void *)(v10 + 8) - *(void *)v10 != 32 || *v9 != 3) {
        break;
      }
      v6 += 32;
      v8 -= 32;
      if (!v8)
      {
        *(unsigned char *)a1 = 1;
        uint64_t v11 = operator new(0x18uLL);
        v11[2] = 0;
        v11[1] = 0;
        *uint64_t v11 = v11 + 1;
        *(void *)(a1 + 8) = v11;
        uint64_t v12 = (char *)(a2 + 24);
        do
        {
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v26, *((void *)v12 - 1), *v12);
          uint64_t v13 = *(uint64_t ***)(a1 + 8);
          uint64_t v14 = *v27[0];
          unint64_t v15 = *(void **)(*v27[0] + 8);
          std::string::size_type v16 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v13, &v31, v15);
          if (!*v16)
          {
            uint64_t v17 = v16;
            long long v18 = operator new(0x48uLL);
            long long v19 = *(_OWORD *)v15;
            v18[6] = v15[2];
            *((_OWORD *)v18 + 2) = v19;
            v15[1] = 0;
            v15[2] = 0;
            *unint64_t v15 = 0;
            *((unsigned char *)v18 + 56) = *(unsigned char *)(v14 + 16);
            v18[8] = *(void *)(v14 + 24);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14 + 16);
            *(unsigned char *)(v14 + 16) = 0;
            *(void *)(v14 + 24) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v18 + 7));
            std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v13, v31, v17, v18);
          }
          v12 += 32;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v27, v26);
          v7 -= 32;
        }
        while (v7);
        goto LABEL_18;
      }
    }
    *(unsigned char *)a1 = 2;
    uint64_t v20 = operator new(0x18uLL);
    uint64_t v21 = v20;
    v20[1] = 0;
    v20[2] = 0;
    void *v20 = 0;
    if (a2 != v5)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v20, (v5 - a2) >> 5);
      uint64_t v29 = v21[1];
      uint64_t v30 = v29;
      size_t v26 = v21 + 2;
      v27[0] = &v29;
      v27[1] = &v30;
      char v28 = 0;
      uint64_t v22 = (char *)(a2 + 24);
      uint64_t v23 = v29;
      do
      {
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v31, *((void *)v22 - 1), *v22);
        v22 += 32;
        *(unsigned char *)uint64_t v23 = v31;
        *(void *)(v23 + 8) = v32;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31);
        LOBYTE(v31) = 0;
        char v32 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31);
        uint64_t v23 = v30 + 16;
        v30 += 16;
        v7 -= 32;
      }
      while (v7);
      char v28 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v26);
      v21[1] = v23;
    }
    *(void *)(a1 + 8) = v21;
  }
  else
  {
    *(unsigned char *)a1 = 1;
    uint64_t v24 = operator new(0x18uLL);
    v24[2] = 0;
    v24[1] = 0;
    void *v24 = v24 + 1;
    *(void *)(a1 + 8) = v24;
  }
LABEL_18:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_24894B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(void *a1, uint64_t a2, int a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA41F8;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA4248;
  v6[1].__shared_owners_ = (uint64_t)a1;
  *(void *)&long long v7 = v6 + 1;
  *((void *)&v7 + 1) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  v15[0] = v7;
  memset(&v15[1], 0, 64);
  uint64_t v8 = localeconv();
  std::string::size_type v16 = v8;
  thousands_sep = v8->thousands_sep;
  if (thousands_sep) {
    char v10 = *thousands_sep;
  }
  else {
    char v10 = 0;
  }
  char v17 = v10;
  decimal_point = v8->decimal_point;
  if (v8->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  char v18 = (char)decimal_point;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v51 = 32;
  uint64_t v12 = operator new(0x208uLL);
  v52 = v12;
  unint64_t v54 = 0x8000000000000208;
  uint64_t v53 = 512;
  *(void *)&long long v13 = 0x2020202020202020;
  *((void *)&v13 + 1) = 0x2020202020202020;
  *uint64_t v12 = v13;
  v12[1] = v13;
  v12[2] = v13;
  v12[3] = v13;
  v12[4] = v13;
  v12[5] = v13;
  v12[6] = v13;
  v12[7] = v13;
  v12[8] = v13;
  v12[9] = v13;
  v12[10] = v13;
  v12[11] = v13;
  v12[12] = v13;
  v12[13] = v13;
  v12[14] = v13;
  v12[15] = v13;
  v12[16] = v13;
  v12[17] = v13;
  v12[18] = v13;
  v12[19] = v13;
  v12[20] = v13;
  v12[21] = v13;
  v12[22] = v13;
  v12[23] = v13;
  v12[24] = v13;
  v12[25] = v13;
  v12[26] = v13;
  v12[27] = v13;
  v12[28] = v13;
  v12[29] = v13;
  v12[30] = v13;
  v12[31] = v13;
  *((unsigned char *)v12 + 512) = 0;
  int v55 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump((char *)v15, a2, a3 >= 0, a3 & ~(a3 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
}

void sub_24894B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      goto LABEL_29;
    case 1:
      uint64_t v9 = **(void **)a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        long long v46 = *(uint64_t (**)(void))(v9 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v9 + 8))();
        unsigned int v10 = a5 + a4;
        uint64_t v11 = (char **)(a1 + 608);
        if (a1[631] < 0)
        {
          unint64_t v12 = *((void *)a1 + 77);
          if (v12 >= v10) {
            goto LABEL_6;
          }
        }
        else
        {
          unint64_t v12 = a1[631];
          if (v10 <= v12)
          {
LABEL_6:
            long long v13 = *(void **)(a2 + 8);
            uint64_t v14 = (void *)*v13;
            if (v13[2] == 1)
            {
              unint64_t v15 = (void *)*v13;
            }
            else
            {
              unint64_t v79 = 0;
              do
              {
                v80 = a1 + 608;
                if (a1[631] < 0) {
                  v80 = *v11;
                }
                (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v80, (a5 + a4));
                (***(void (****)(void))a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v14 + 4);
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v14 + 7, 1, a4, (a5 + a4));
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ",\n", 2);
                v81 = (void *)v14[1];
                if (v81)
                {
                  do
                  {
                    unint64_t v15 = v81;
                    v81 = (void *)*v81;
                  }
                  while (v81);
                }
                else
                {
                  do
                  {
                    unint64_t v15 = (void *)v14[2];
                    BOOL v58 = *v15 == (void)v14;
                    uint64_t v14 = v15;
                  }
                  while (!v58);
                }
                ++v79;
                long long v13 = *(void **)(a2 + 8);
                uint64_t v14 = v15;
              }
              while (v79 < v13[2] - 1);
            }
            v82 = v13 + 1;
            if (v15 == v82) {
              __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
            }
            v83 = (void *)v15[1];
            if (v83)
            {
              do
              {
                v84 = v83;
                v83 = (void *)*v83;
              }
              while (v83);
            }
            else
            {
              v86 = v15;
              do
              {
                v84 = (void *)v86[2];
                BOOL v58 = *v84 == (void)v86;
                v86 = v84;
              }
              while (!v58);
            }
            if (v84 != v82) {
              __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
            }
            v87 = a1 + 608;
            if (a1[631] < 0) {
              v87 = *v11;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v87, (a5 + a4));
            (***(void (****)(void))a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v15 + 4);
            (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v15 + 7, 1, a4, (a5 + a4));
            (***(void (****)(void))a1)();
            v78 = *(void (**)(void))(**(void **)a1 + 8);
            goto LABEL_145;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v12, 32);
        goto LABEL_6;
      }
      (*(void (**)(void))v9)();
      uint64_t v53 = *(void *)(a2 + 8);
      unint64_t v54 = *(void **)v53;
      if (*(void *)(v53 + 16) != 1)
      {
        unint64_t v55 = 0;
        do
        {
          (***(void (****)(void, uint64_t))a1)(*(void *)a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v54 + 4);
          (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v54 + 7, 0, a4, a5);
          (***(void (****)(void))a1)();
          uint64_t v56 = (void *)v54[1];
          v57 = v54;
          if (v56)
          {
            do
            {
              unint64_t v54 = v56;
              uint64_t v56 = (void *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              unint64_t v54 = (void *)v57[2];
              BOOL v58 = *v54 == (void)v57;
              v57 = v54;
            }
            while (!v58);
          }
          ++v55;
          uint64_t v53 = *(void *)(a2 + 8);
        }
        while (v55 < *(void *)(v53 + 16) - 1);
      }
      v59 = (void *)(v53 + 8);
      if (v54 == v59) {
        __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
      }
      v60 = (void *)v54[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (void *)*v60;
        }
        while (v60);
      }
      else
      {
        v85 = v54;
        do
        {
          v61 = (void *)v85[2];
          BOOL v58 = *v61 == (void)v85;
          v85 = v61;
        }
        while (!v58);
      }
      if (v61 != v59) {
        __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
      }
      (***(void (****)(void, uint64_t))a1)(*(void *)a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v54 + 4);
      (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v54 + 7, 0, a4, a5);
LABEL_146:
      std::string::size_type v16 = ***(uint64_t (****)(void))a1;
LABEL_147:
      return v16();
    case 2:
      char v17 = **(void (****)(void))a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v17)();
          long long v48 = *(uint64_t **)(a2 + 8);
          uint64_t v50 = *v48;
          uint64_t v49 = v48[1];
          if (v50 == v49 - 16)
          {
            uint64_t v51 = v50;
          }
          else
          {
            uint64_t v51 = v50;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v51, 0, a4, a5);
              (***(void (****)(void))a1)();
              v51 += 16;
              v52 = *(uint64_t **)(a2 + 8);
              uint64_t v49 = v52[1];
            }
            while (v51 != v49 - 16);
            uint64_t v50 = *v52;
          }
          if (v50 == v49) {
            __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v51, 0, a4, a5);
          goto LABEL_130;
        }
        v17[1]();
        unsigned int v18 = a5 + a4;
        long long v19 = a1 + 608;
        if (a1[631] < 0)
        {
          unint64_t v20 = *((void *)a1 + 77);
          if (v20 >= v18) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v20 = a1[631];
          if (v18 <= v20)
          {
LABEL_14:
            long long v21 = *(uint64_t **)(a2 + 8);
            uint64_t v23 = *v21;
            uint64_t v22 = v21[1];
            if (v23 != v22 - 16)
            {
              do
              {
                long long v24 = a1 + 608;
                if (a1[631] < 0) {
                  long long v24 = *(char **)v19;
                }
                (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v24, (a5 + a4));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v23, 1, a4, (a5 + a4));
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ",\n", 2);
                v23 += 16;
                long long v25 = *(uint64_t **)(a2 + 8);
                uint64_t v22 = v25[1];
              }
              while (v23 != v22 - 16);
              uint64_t v23 = *v25;
            }
            if (v23 == v22) {
              __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
            }
            long long v26 = a1 + 608;
            if (a1[631] < 0) {
              long long v26 = *(char **)v19;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v26, (a5 + a4));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
            (***(void (****)(void))a1)();
            if (a1[631] < 0) {
              long long v19 = *(char **)v19;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v19, a5);
LABEL_130:
            std::string::size_type v16 = ***(uint64_t (****)(void))a1;
            goto LABEL_147;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v20, 32);
        goto LABEL_14;
      }
      long long v46 = (uint64_t (*)(void))v17[1];
LABEL_52:
      return v46();
    case 3:
      (***(void (****)(void))a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8));
      std::string::size_type v16 = ***(uint64_t (****)(void))a1;
      goto LABEL_147;
    case 4:
      std::string::size_type v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
      goto LABEL_276;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      if (!v29) {
        goto LABEL_46;
      }
      long long v30 = a1 + 16;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *long long v30 = 45;
        unint64_t v29 = -(uint64_t)v29;
        unsigned int v31 = 1;
        if (v29 >= 0xA)
        {
          unint64_t v65 = v29;
          while (1)
          {
            if (v65 <= 0x63)
            {
              ++v31;
              goto LABEL_193;
            }
            if (v65 <= 0x3E7)
            {
              v31 += 2;
              goto LABEL_193;
            }
            if (v65 >> 4 <= 0x270) {
              break;
            }
            v31 += 4;
            BOOL v33 = v65 >= 0x186A0;
            v65 /= 0x2710uLL;
            if (!v33) {
              goto LABEL_193;
            }
          }
          v31 += 3;
        }
      }
      else
      {
        if (v29 < 0xA)
        {
LABEL_41:
          uint64_t v34 = (uint64_t)(a1 + 17);
          goto LABEL_202;
        }
        unsigned int v31 = 1;
        unint64_t v32 = *(void *)(a2 + 8);
        while (v32 > 0x63)
        {
          if (v32 <= 0x3E7)
          {
            v31 += 2;
            goto LABEL_194;
          }
          if (v32 >> 4 <= 0x270)
          {
            v31 += 3;
            goto LABEL_194;
          }
          v31 += 4;
          BOOL v33 = v32 >= 0x186A0;
          v32 /= 0x2710uLL;
          if (!v33) {
            goto LABEL_194;
          }
        }
      }
LABEL_193:
      ++v31;
LABEL_194:
      if (v31 >= 0x3F) {
LABEL_282:
      }
        __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
      uint64_t v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
LABEL_198:
        unint64_t v126 = v29;
      }
      else
      {
        do
        {
          unint64_t v126 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v29 % 0x64)];
          v34 -= 2;
          unint64_t v128 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v128 > 0x270);
      }
LABEL_199:
      if (v126 >= 0xA)
      {
        *(_WORD *)(v34 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v126];
        goto LABEL_203;
      }
      LOBYTE(v29) = v126;
LABEL_202:
      *(unsigned char *)(v34 - 1) = v29 + 48;
LABEL_203:
      v129 = *(uint64_t (****)(void))a1;
      goto LABEL_275;
    case 6:
      unint64_t v29 = *(void *)(a2 + 8);
      if (!v29)
      {
LABEL_46:
        long long v41 = ***(uint64_t (****)(void))a1;
LABEL_80:
        return v41();
      }
      if (v29 < 0xA) {
        goto LABEL_41;
      }
      unsigned int v62 = 1;
      unint64_t v63 = *(void *)(a2 + 8);
      while (1)
      {
        if (v63 <= 0x63)
        {
          ++v62;
          goto LABEL_182;
        }
        if (v63 <= 0x3E7)
        {
          v62 += 2;
          goto LABEL_182;
        }
        if (v63 >> 4 <= 0x270) {
          break;
        }
        v62 += 4;
        BOOL v33 = v63 >= 0x186A0;
        v63 /= 0x2710uLL;
        if (!v33) {
          goto LABEL_182;
        }
      }
      v62 += 3;
LABEL_182:
      if (v62 >= 0x3F) {
        goto LABEL_282;
      }
      uint64_t v34 = (uint64_t)&a1[v62 + 16];
      if (v29 < 0x64) {
        goto LABEL_198;
      }
      do
      {
        unint64_t v126 = v29 / 0x64;
        *(_WORD *)(v34 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v29 % 0x64)];
        v34 -= 2;
        unint64_t v127 = v29 >> 4;
        v29 /= 0x64uLL;
      }
      while (v127 > 0x270);
      goto LABEL_199;
    case 7:
      double v27 = *(double *)(a2 + 8);
      if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_29:
        std::string::size_type v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
        goto LABEL_276;
      }
      if ((*(void *)&v27 & 0x8000000000000000) != 0)
      {
        double v27 = -v27;
        uint64_t v28 = (uint64_t)(a1 + 17);
        a1[16] = 45;
      }
      else
      {
        uint64_t v28 = (uint64_t)(a1 + 16);
      }
      if (v27 == 0.0)
      {
        *(_WORD *)uint64_t v28 = 11824;
        *(unsigned char *)(v28 + 2) = 48;
        goto LABEL_274;
      }
      if ((uint64_t)&a1[-v28 + 80] <= 16) {
        __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
      }
      if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
      }
      if (v27 <= 0.0) {
        __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
      }
      uint64_t v66 = *(void *)&v27 & 0xFFFFFFFFFFFFFLL;
      unint64_t v159 = (unint64_t)&a1[-v28 + 80];
      if (*(void *)&v27 >> 52)
      {
        unint64_t v69 = (*(void *)&v27 >> 52) - 1075;
        uint64_t v71 = 2 * (v66 | 0x10000000000000);
        unsigned int v70 = (*(void *)&v27 >> 52) - 1076;
        uint64_t v88 = *(void *)&v27 >> 53;
        uint64_t v89 = 4 * (v66 | 0x10000000000000);
        int v90 = (*(void *)&v27 >> 52) - 1077;
        uint64_t v91 = 0x10000000000000;
        if (v66)
        {
          uint64_t v89 = 2 * (v66 | 0x10000000000000);
          int v90 = (*(void *)&v27 >> 52) - 1076;
          uint64_t v91 = v66 | 0x10000000000000;
        }
        if (v88) {
          uint64_t v67 = v89;
        }
        else {
          uint64_t v67 = 2 * (v66 | 0x10000000000000);
        }
        if (v88) {
          int v68 = v90;
        }
        else {
          int v68 = (*(void *)&v27 >> 52) - 1076;
        }
        if (v88) {
          uint64_t v66 = v91;
        }
        else {
          v66 |= 0x10000000000000uLL;
        }
      }
      else
      {
        uint64_t v67 = 2 * v66;
        int v68 = -1075;
        unint64_t v69 = 4294966222;
        unsigned int v70 = -1075;
        uint64_t v71 = 2 * v66;
      }
      uint64_t v92 = nlohmann::detail::dtoa_impl::diyfp::normalize(v71 | 1, v70);
      uint64_t v94 = v93;
      char v95 = v68 - v93;
      if (v68 - (int)v93 < 0)
      {
        v157 = "delta >= 0";
        int v158 = 162;
        goto LABEL_296;
      }
      unint64_t v96 = (v67 - 1) << v95;
      if (v96 >> v95 != v67 - 1)
      {
        v157 = "((x.f << delta) >> delta) == x.f";
        int v158 = 163;
LABEL_296:
        __assert_rtn("normalize_to", "to_chars.hpp", v158, v157);
      }
      uint64_t v97 = v92;
      uint64_t v98 = nlohmann::detail::dtoa_impl::diyfp::normalize(v66, v69);
      if (v94 != v99) {
        __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
      }
      if ((int)v94 <= -1501) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
      }
      if ((int)v94 >= 1501) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
      }
      int v100 = 78913 * (-61 - (int)v94) / 0x40000;
      if ((int)v94 < -61) {
        ++v100;
      }
      if (v100 <= -315) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
      }
      unsigned int v101 = (int)((v100 + 307 + (((__int16)(v100 + 307) >> 28) & 7)) << 16) >> 19;
      if (v101 >= 0x4F) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
      }
      v102 = (uint64_t *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                       + 16 * (unsigned __int16)v101);
      unint64_t v103 = v102[1];
      if ((int)v103 + (int)v94 <= -125) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
      }
      if ((int)v103 + (int)v94 >= -95) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
      }
      uint64_t v104 = *v102;
      unint64_t v105 = nlohmann::detail::dtoa_impl::diyfp::mul(v98, v94, *v102);
      int v107 = v106;
      unint64_t v108 = nlohmann::detail::dtoa_impl::diyfp::mul(v96, v94, v104);
      int v110 = v109;
      unint64_t v111 = nlohmann::detail::dtoa_impl::diyfp::mul(v97, v94, v104);
      int v113 = v112;
      if (v112 <= -61) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
      }
      if (v112 >= -31) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
      }
      unint64_t v114 = v108 + 1;
      unint64_t v115 = v111 - 1;
      unint64_t v116 = nlohmann::detail::dtoa_impl::diyfp::sub(v111 - 1, v112, v114, v110);
      unint64_t v117 = nlohmann::detail::dtoa_impl::diyfp::sub(v115, v113, v105, v107);
      int v118 = -v113;
      unint64_t v119 = v115 >> -(char)v113;
      if (!v119) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
      }
      unint64_t v120 = v117;
      unint64_t v121 = HIDWORD(v103);
      uint64_t v122 = (1 << v118) - 1;
      unint64_t v123 = v122 & v115;
      if (v119 <= 0x3B9AC9FF)
      {
        if (v119 <= 0x5F5E0FF)
        {
          if (v119 <= 0x98967F)
          {
            if (v119 <= 0xF423F)
            {
              unsigned int v130 = v119 >> 5;
              unsigned int v131 = v119 >> 4;
              if (v119 <= 9) {
                int v132 = 1;
              }
              else {
                int v132 = 10;
              }
              if (v119 <= 9) {
                int v133 = 1;
              }
              else {
                int v133 = 2;
              }
              if (v119 <= 0x63) {
                int v134 = v133;
              }
              else {
                int v134 = 3;
              }
              if (v119 <= 0x63) {
                int v135 = v132;
              }
              else {
                int v135 = 100;
              }
              if (v119 <= 0x3E7) {
                int v136 = v134;
              }
              else {
                int v136 = 4;
              }
              if (v119 <= 0x3E7) {
                int v137 = v135;
              }
              else {
                int v137 = 1000;
              }
              if (v131 <= 0x270) {
                int v138 = v136;
              }
              else {
                int v138 = 5;
              }
              if (v131 <= 0x270) {
                int v139 = v137;
              }
              else {
                int v139 = 10000;
              }
              if (v130 <= 0xC34) {
                unsigned int v125 = v138;
              }
              else {
                unsigned int v125 = 6;
              }
              if (v130 > 0xC34) {
                unsigned int v124 = 100000;
              }
              else {
                unsigned int v124 = v139;
              }
            }
            else
            {
              unsigned int v124 = 1000000;
              unsigned int v125 = 7;
            }
          }
          else
          {
            unsigned int v124 = 10000000;
            unsigned int v125 = 8;
          }
        }
        else
        {
          unsigned int v124 = 100000000;
          unsigned int v125 = 9;
        }
      }
      else
      {
        unsigned int v124 = 1000000000;
        unsigned int v125 = 10;
      }
      uint64_t v140 = 0;
      int v141 = -1;
      v142 = (char *)v125;
      do
      {
        unsigned int v143 = v119 / v124;
        if (v119 / v124 >= 0xA) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
        }
        unint64_t v119 = v119 % v124;
        v144 = (char *)(v140 + 1);
        *(unsigned char *)(v28 + v140) = v143 + 48;
        if ((v119 << v118) + v123 <= v116)
        {
          int v148 = v142 + v141;
          nlohmann::detail::dtoa_impl::grisu2_round(v28, (char *)(v140 + 1), v120, v116, (v119 << v118) + v123, (unint64_t)v124 << v118);
          goto LABEL_247;
        }
        v124 /= 0xAu;
        --v141;
        ++v140;
      }
      while (v142 != v144);
      if (v123 <= v116) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
      }
      uint64_t v145 = 0;
      do
      {
        if (v123 >= 0x199999999999999ALL) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
        }
        unint64_t v146 = (10 * v123) >> v118;
        if (v146 >= 0xA) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
        }
        v144[v28 + v145] = v146 + 48;
        uint64_t v147 = 5 * v116;
        unint64_t v123 = (10 * v123) & v122;
        v116 *= 10;
        v120 *= 10;
        ++v145;
      }
      while (v123 > 2 * v147);
      v144 += v145;
      int v148 = ~(v145 - 1);
      nlohmann::detail::dtoa_impl::grisu2_round(v28, v144, v120, v116, v123, 1 << v118);
LABEL_247:
      if ((int)v144 >= 18) {
        __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
      }
      if (v159 <= 0x15) {
        __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
      }
      if (v159 == 22) {
        __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
      }
      uint64_t v149 = v148 - (int)v121 + (uint64_t)(int)v144;
      if (((v148 - v121) & 0x80000000) == 0 && (int)v149 <= 15)
      {
        memset((void *)(v28 + (int)v144), 48, v148 - (int)v121);
        *(unsigned char *)(v28 + v149) = 46;
        *(unsigned char *)(v28 + (int)v149 + 1) = 48;
        goto LABEL_274;
      }
      if ((v149 - 16) >= 0xFFFFFFF1)
      {
        if (((v148 - v121) & 0x80000000) == 0) {
          __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
        }
        v150 = (unsigned char *)(v28 + v149);
        memmove(v150 + 1, v150, (int)v144 - (unint64_t)v149);
        unsigned char *v150 = 46;
      }
      else
      {
        if (v149 == 0 || v149 >= 0xFFFFFFFD)
        {
          memmove((void *)(v28 + -(int)v149 + 2), (const void *)v28, (int)v144);
          *(_WORD *)uint64_t v28 = 11824;
          memset((void *)(v28 + 2), 48, -(int)v149);
          goto LABEL_274;
        }
        if (v144 == 1)
        {
          uint64_t v151 = 1;
        }
        else
        {
          memmove((void *)(v28 + 2), (const void *)(v28 + 1), (int)v144 - 1);
          *(unsigned char *)(v28 + 1) = 46;
          uint64_t v151 = (int)v144 + 1;
        }
        v152 = (unsigned char *)(v28 + v151);
        unsigned char *v152 = 101;
        if ((int)v149 <= -999) {
          __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
        }
        if ((int)v149 >= 1001) {
          __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
        }
        int v153 = v149 - 1;
        if ((int)v149 >= 1) {
          char v154 = 43;
        }
        else {
          char v154 = 45;
        }
        if (v153 < 0) {
          int v153 = 1 - v149;
        }
        v152[1] = v154;
        if (v153 <= 9)
        {
          v152[2] = 48;
          char v155 = v153 + 48;
LABEL_272:
          v152[3] = v155;
          goto LABEL_274;
        }
        if (v153 <= 0x63)
        {
          v152[2] = v153 / 0xAu + 48;
          char v155 = (v153 % 0xAu) | 0x30;
          goto LABEL_272;
        }
        v152[2] = (unsigned __int16)v153 / 0x64u + 48;
        unsigned __int8 v156 = (unsigned __int16)v153 % 0x64u;
        v152[3] = (v156 / 0xAu) | 0x30;
        v152[4] = (v156 % 0xAu) | 0x30;
      }
LABEL_274:
      v129 = *(uint64_t (****)(void))a1;
LABEL_275:
      std::string::size_type v16 = (*v129)[1];
LABEL_276:
      return v16();
    case 8:
      long long v35 = *(void (**)(void))(**(void **)a1 + 8);
      if (!a3)
      {
        v35();
        long long v42 = *(unsigned __int8 ***)(a2 + 8);
        long long v44 = *v42;
        long long v43 = v42[1];
        if (v44 != v43)
        {
          while (v44 != v43 - 1)
          {
            unsigned int v45 = *v44++;
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v45);
            (***(void (****)(void, uint64_t))a1)(*(void *)a1, 44);
            long long v43 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v44);
        }
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "],\"subtype\":", 12);
        uint64_t v64 = *(void *)(a2 + 8);
        if (*(unsigned char *)(v64 + 25))
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          long long v41 = ***(uint64_t (****)(void))a1;
          goto LABEL_80;
        }
        std::string::size_type v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
        goto LABEL_276;
      }
      v35();
      uint64_t v36 = (a5 + a4);
      long long v37 = (char **)(a1 + 608);
      if (a1[631] < 0)
      {
        unint64_t v38 = *((void *)a1 + 77);
        if (v38 >= v36)
        {
          long long v39 = *(uint64_t (****)(void))a1;
          goto LABEL_100;
        }
      }
      else
      {
        unint64_t v38 = a1[631];
        if (v36 <= v38)
        {
          long long v39 = *(uint64_t (****)(void))a1;
          long long v40 = a1 + 608;
          goto LABEL_101;
        }
      }
      std::string::resize((std::string *)(a1 + 608), 2 * v38, 32);
      long long v39 = *(uint64_t (****)(void))a1;
      long long v40 = a1 + 608;
      if ((a1[631] & 0x80000000) == 0)
      {
LABEL_101:
        ((void (*)(uint64_t (***)(void), char *, uint64_t))(*v39)[1])(v39, v40, v36);
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\"bytes\": [", 10);
        v72 = *(unsigned __int8 ***)(a2 + 8);
        v74 = *v72;
        v73 = v72[1];
        if (v74 != v73)
        {
          if (v74 != v73 - 1)
          {
            do
            {
              unsigned int v75 = *v74++;
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v75);
              (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ", ", 2);
            }
            while (v74 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v74);
        }
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "],\n", 3);
        v76 = a1 + 608;
        if (a1[631] < 0) {
          v76 = *v37;
        }
        (*(void (**)(void, char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, v76, v36);
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\"subtype\": ", 11);
        uint64_t v77 = *(void *)(a2 + 8);
        if (*(unsigned char *)(v77 + 25)) {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v77 + 24));
        }
        else {
          (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "null", 4);
        }
        (***(void (****)(void, uint64_t))a1)(*(void *)a1, 10);
        v78 = *(void (**)(void))(**(void **)a1 + 8);
LABEL_145:
        v78();
        goto LABEL_146;
      }
LABEL_100:
      long long v40 = *v37;
      goto LABEL_101;
    case 9:
      std::string::size_type v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
      goto LABEL_276;
    default:
      __assert_rtn("dump", "serializer.hpp", 363, "false");
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  size_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  uint64_t v3 = a2[1];
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  if (!v3) {
    return result;
  }
  uint64_t v5 = (void *)result;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = v2 >> 31;
  uint64_t v13 = result + 90;
  do
  {
    if (v12) {
      uint64_t v14 = (uint64_t *)*a2;
    }
    else {
      uint64_t v14 = a2;
    }
    uint64_t v15 = *((unsigned __int8 *)v14 + v8);
    if (v7) {
      unsigned int v6 = v15 & 0x3F | (v6 << 6);
    }
    else {
      unsigned int v6 = (0xFFu >> nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]) & v15;
    }
    unint64_t v16 = 16 * v7
        + nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]
        + 256;
    if (v16 >= 0x190) {
      __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
    }
    unsigned int v7 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16];
    if (v7 == 1)
    {
      int v18 = *((_DWORD *)v5 + 158);
      if ((v18 - 1) >= 2)
      {
        if (!v18)
        {
          char v40 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v15);
          exception = __cxa_allocate_exception(0x20uLL);
          std::to_string(&v33, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "invalid UTF-8 byte at index ", &v33);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, &v34, ": 0x");
          if (v40 >= 0) {
            double v27 = __str;
          }
          else {
            double v27 = *(char **)__str;
          }
          if (v40 >= 0) {
            std::string::size_type v28 = v40;
          }
          else {
            std::string::size_type v28 = v39;
          }
          unint64_t v29 = std::string::append(&v35, v27, v28);
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          std::string::size_type v37 = v29->__r_.__value_.__r.__words[2];
          long long v36 = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create((uint64_t)exception, 316, (uint64_t)&v36);
        }
        __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
      }
      v8 -= v9 != 0;
      if (v18 != 1)
      {
        unsigned int v7 = 0;
        uint64_t v9 = 0;
        uint64_t v11 = v10;
        goto LABEL_39;
      }
      uint64_t v19 = v13 + v10;
      uint64_t v11 = v10 + 3;
      *(_WORD *)uint64_t v19 = -16401;
      *(unsigned char *)(v19 + 2) = -67;
      unint64_t v20 = v10 - 497;
      goto LABEL_36;
    }
    if (!v7)
    {
      switch(v6)
      {
        case 8u:
          __int16 v17 = 25180;
          goto LABEL_34;
        case 9u:
          __int16 v17 = 29788;
          goto LABEL_34;
        case 0xAu:
          __int16 v17 = 28252;
          goto LABEL_34;
        case 0xBu:
          goto LABEL_27;
        case 0xCu:
          __int16 v17 = 26204;
          goto LABEL_34;
        case 0xDu:
          __int16 v17 = 29276;
          goto LABEL_34;
        default:
          if (v6 == 34)
          {
            __int16 v17 = 8796;
            goto LABEL_34;
          }
          if (v6 == 92)
          {
            __int16 v17 = 23644;
LABEL_34:
            *(_WORD *)(v13 + v11) = v17;
            v11 += 2;
            goto LABEL_35;
          }
LABEL_27:
          if (v6 > 0x1F)
          {
            if ((v2 & 0x80u) == 0) {
              uint64_t v23 = a2;
            }
            else {
              uint64_t v23 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v13 + v11++) = *((unsigned char *)v23 + v8);
          }
          else
          {
            uint64_t result = snprintf((char *)(v13 + v11), 7uLL, "\\u%04x", v6);
            v11 += 6;
          }
LABEL_35:
          unint64_t v20 = v11 - 500;
          break;
      }
LABEL_36:
      if (v20 <= 0xC)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v13, v11);
        unsigned int v7 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        unsigned int v7 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = v11;
      }
      goto LABEL_39;
    }
    if ((v2 & 0x80u) == 0) {
      long long v21 = a2;
    }
    else {
      long long v21 = (uint64_t *)*a2;
    }
    *(unsigned char *)(v13 + v11++) = *((unsigned char *)v21 + v8);
    ++v9;
LABEL_39:
    ++v8;
    int v2 = *((char *)a2 + 23);
    unsigned int v12 = v2 >> 31;
    unint64_t v22 = a2[1];
    if (v2 >= 0) {
      unint64_t v22 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v22);
  if (v7)
  {
    int v25 = *((_DWORD *)v5 + 158);
    switch(v25)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v13, v10);
        long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 2:
        long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 0:
        char v40 = 3;
        *(_DWORD *)__str = 0;
        unsigned int v31 = (uint64_t *)*a2;
        if (v2 >= 0) {
          unsigned int v31 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v31 + v22 - 1));
        unint64_t v32 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create((uint64_t)v32, 316, (uint64_t)&v36);
      default:
        __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
    }
LABEL_50:
    return v24();
  }
  else if (v11)
  {
    long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
    goto LABEL_50;
  }
  return result;
}

void sub_24894D82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (a39 < 0) {
        operator delete(a34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(void *a1, unsigned int a2)
{
  if (!a2) {
    return (**(uint64_t (***)(void, uint64_t))*a1)(*a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 < 0xA)
  {
    uint64_t v3 = 1;
LABEL_8:
    char v6 = v2 | 0x30;
    goto LABEL_9;
  }
  if (a2 >= 0x64)
  {
    *(_WORD *)((char *)a1 + 17) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (a2 - 100 * ((41 * a2) >> 12))];
    uint64_t v3 = 3;
    unsigned int v2 = (41 * a2) >> 12;
    goto LABEL_8;
  }
  uint64_t v5 = &nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * a2];
  *((unsigned char *)a1 + 17) = v5[1];
  char v6 = *v5;
  uint64_t v3 = 2;
LABEL_9:
  *((unsigned char *)a1 + 16) = v6;
  return (*(uint64_t (**)(void, void *, uint64_t))(*(void *)*a1 + 8))(*a1, a1 + 2, v3);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (HIDWORD(a3) * a1)
         + (a3 * HIDWORD(a1))
         + 0x80000000) >> 32);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::sub(unint64_t a1, int a2, unint64_t a3, int a4)
{
  if (a2 != a4)
  {
    char v6 = "x.e == y.e";
    int v7 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v7, v6);
  }
  BOOL v4 = a1 >= a3;
  unint64_t result = a1 - a3;
  if (!v4)
  {
    char v6 = "x.f >= y.f";
    int v7 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
  }
  if (a3 > a4) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
  }
  if (a4 < a5) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
  }
  if (!a6) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA41F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA41F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  else
  {
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a1, a2);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

adm::SystemConfiguration *adm::SystemConfiguration::SystemConfiguration(adm::SystemConfiguration *this, const SystemConfiguration *a2)
{
  *(_DWORD *)this = a2->mContext.mOS;
  if (*((char *)&a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_, a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_;
    *((void *)this + 3) = *((void *)&a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)&a2[1].mContext.mOS + 7) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)&a2->mContext.mResourcePath.__pn_.__r_.var0, a2->mContext.mResourcePath.__pn_.var0);
  }
  else
  {
    long long v5 = *(_OWORD *)&a2->mContext.mResourcePath.__pn_.__r_.var0;
    *((void *)this + 6) = *(void *)&a2[1].mContext.mOS;
    *((_OWORD *)this + 2) = v5;
  }
  *((void *)this + 7) = a2[1].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 64), (long long *)&a2[1].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 4, (long long *)&a2[2].mContext.mOS);
  *((void *)this + 16) = *(void *)&a2[2].mContext.mResourcePath.__pn_.__r_.var0;
  if (a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), (const std::string::value_type *)a2[2].mContext.mResourcePath.__pn_.var0, *(void *)&a2[3].mContext.mOS);
  }
  else
  {
    long long v6 = *(_OWORD *)&a2[2].mContext.mResourcePath.__pn_.var0;
    *((void *)this + 19) = a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)((char *)this + 136) = v6;
  }
  unint64_t v7 = (unint64_t)this + 160;
  if (*((char *)&a2[3].mContext.mResourcePath.__pn_.__r_.var1 + 3) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), (const std::string::value_type *)a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_, *((void *)&a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 2));
  }
  else
  {
    long long v8 = *(_OWORD *)&a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_;
    *((void *)this + 22) = *(void *)&a2[3].mContext.mResourcePath.__pn_.__r_.var0;
    *(_OWORD *)unint64_t v7 = v8;
  }
  *(_OWORD *)((char *)this + 184) = 0u;
  int v9 = (uint64_t *)((char *)this + 184);
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = *((_DWORD *)&a2[4].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 4);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)this + 184, *(void *)&a2[4].mContext.mOS);
  data = a2[4].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
  if (data)
  {
    long long v30 = (void *)((char *)this + 200);
    do
    {
      unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(data + 16));
      unint64_t v12 = v11;
      unint64_t v13 = *((void *)this + 24);
      if (v13)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        unint64_t v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v7 = v11;
          if (v11 >= v13) {
            unint64_t v7 = v11 % v13;
          }
        }
        else
        {
          unint64_t v7 = (v13 - 1) & v11;
        }
        unint64_t v16 = *(unsigned __int8 ***)(*v9 + 8 * v7);
        if (v16)
        {
          for (uint64_t i = *v16; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v18 = *((void *)i + 1);
            if (v18 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)data + 16)) {
                goto LABEL_53;
              }
            }
            else
            {
              if (v15 > 1)
              {
                if (v18 >= v13) {
                  v18 %= v13;
                }
              }
              else
              {
                v18 &= v13 - 1;
              }
              if (v18 != v7) {
                break;
              }
            }
          }
        }
      }
      uint64_t v19 = (char *)operator new(0x50uLL);
      v31[0] = v19;
      v31[1] = (char *)this + 200;
      char v32 = 0;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = v12;
      std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100]((std::string *)(v19 + 16), (long long *)data + 1);
      char v32 = 1;
      float v20 = (float)(unint64_t)(*((void *)this + 26) + 1);
      float v21 = *((float *)this + 54);
      if (!v13 || (float)(v21 * (float)v13) < v20)
      {
        BOOL v22 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3) {
          BOOL v22 = 1;
        }
        unint64_t v23 = v22 | (2 * v13);
        unint64_t v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24) {
          size_t v25 = v24;
        }
        else {
          size_t v25 = v23;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)this + 184, v25);
        unint64_t v13 = *((void *)this + 24);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            unint64_t v7 = v12 % v13;
          }
          else {
            unint64_t v7 = v12;
          }
        }
        else
        {
          unint64_t v7 = (v13 - 1) & v12;
        }
      }
      uint64_t v26 = *v9;
      double v27 = *(void **)(*v9 + 8 * v7);
      if (v27)
      {
        *(void *)uint64_t v19 = *v27;
      }
      else
      {
        *(void *)uint64_t v19 = *v30;
        *long long v30 = v19;
        *(void *)(v26 + 8 * v7) = v30;
        if (!*(void *)v19) {
          goto LABEL_52;
        }
        unint64_t v28 = *(void *)(*(void *)v19 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v28 >= v13) {
            v28 %= v13;
          }
        }
        else
        {
          v28 &= v13 - 1;
        }
        double v27 = (void *)(*v9 + 8 * v28);
      }
      void *v27 = v19;
LABEL_52:
      v31[0] = 0;
      ++*((void *)this + 26);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
LABEL_53:
      data = *(char **)data;
    }
    while (data);
  }
  return this;
}

void sub_24894E188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 159) < 0) {
    operator delete(*a10);
  }
  adm::ConfigurationContext::~ConfigurationContext((void **)v10);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void adm::SystemConfiguration::~SystemConfiguration(void **this)
{
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t *std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    JUMPOUT(0x24C5866C0);
  }
  return result;
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  long long v4 = (void **)(a1 + 72);
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v4);
  long long v4 = (void **)(a1 + 48);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  long long v4 = v2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm5graph11NodeManagerC1ERKNS_19SystemConfigurationEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 240);
  uint64_t v3 = *(void *)(a1 + 232);
  if (*(unsigned char *)(a1 + 68)) {
    int v2 = *(_DWORD *)(a1 + 64);
  }
  else {
    int v2 = 0;
  }
  int v4 = 0;
  int v5 = v2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = v1;
  operator new();
}

void sub_24894EAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v19 + 8), a14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20 - 112);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v20 - 104), *(unsigned __int8 *)(v20 - 112));
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a19 + i + 32));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a19 + i + 40), *(&a19 + i + 32));
  }
  JUMPOUT(0x24894EC30);
}

void sub_24894EB68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 buf)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      buf = 0;
      _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown exception from voice processor proxy SPI");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  JUMPOUT(0x24894EC48);
}

void sub_24894EBF0()
{
}

void sub_24894EC0C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x24894EC48);
}

void sub_24894EC1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x24C5866C0](v1, 0xE0C402B90B96ALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy_deallocate(uint64_t a1)
{
  std::__function::__alloc_func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy[abi:ne180100]((adm::SystemConfiguration *)(a1 + 8));
  operator delete((void *)a1);
}

void std::__function::__alloc_func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy[abi:ne180100](adm::SystemConfiguration *this)
{
  int v2 = (const void *)*((void *)this + 29);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 28);
  if (v3) {
    CFRelease(v3);
  }
  adm::SystemConfiguration::~SystemConfiguration((void **)this);
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy(uint64_t a1)
{
}

adm::SystemConfiguration *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26FCA0E08;
  return std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>((adm::SystemConfiguration *)(a2 + 1), a1 + 8);
}

adm::SystemConfiguration *std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>(adm::SystemConfiguration *a1, uint64_t a2)
{
  adm::SystemConfiguration::SystemConfiguration(a1, (const SystemConfiguration *)a2);
  uint64_t v4 = *(void *)(a2 + 224);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 224));
  }
  *((void *)a1 + 28) = v4;
  int v5 = *(const void **)(a2 + 232);
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 29) = v5;
  return a1;
}

void *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0xF8uLL);
  void *v2 = &unk_26FCA0E08;
  std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>((adm::SystemConfiguration *)(v2 + 1), v1);
  return v2;
}

void sub_24894EDCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26FCA0E08;
  int v2 = *(const void **)(a1 + 240);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 232);
  if (v3) {
    CFRelease(v3);
  }
  adm::SystemConfiguration::~SystemConfiguration((void **)(a1 + 8));
  JUMPOUT(0x24C5866C0);
}

uint64_t std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26FCA0E08;
  int v2 = *(const void **)(a1 + 240);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 232);
  if (v3) {
    CFRelease(v3);
  }
  adm::SystemConfiguration::~SystemConfiguration((void **)(a1 + 8));
  return a1;
}

void adm::ConfigurationContext::~ConfigurationContext(void **this)
{
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint8x8_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint8x8_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint8x8_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    int8x8_t v4 = (uint64_t *)a1;
  }
  else {
    int8x8_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      size_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  uint64_t v6 = this + 1;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)&this[1], *((void *)a2 + 4));
  int v7 = (unsigned __int8 *)*((void *)a2 + 5);
  if (v7)
  {
    uint64_t v27 = &this[1].__r_.__value_.__r.__words[2];
    do
    {
      unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v7 + 16));
      std::string::size_type v9 = v8;
      std::string::size_type size = this[1].__r_.__value_.__l.__size_;
      if (size)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)size);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v8 >= size) {
            unint64_t v2 = v8 % size;
          }
        }
        else
        {
          unint64_t v2 = (size - 1) & v8;
        }
        BOOL v13 = *(unsigned __int8 ***)(v6->__r_.__value_.__r.__words[0] + 8 * v2);
        if (v13)
        {
          for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
          {
            std::string::size_type v15 = *((void *)i + 1);
            if (v15 == v9)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v7 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= size) {
                  v15 %= size;
                }
              }
              else
              {
                v15 &= size - 1;
              }
              if (v15 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v16 = (char *)operator new(0x88uLL);
      v28[0] = v16;
      v28[1] = (char *)this + 40;
      char v29 = 0;
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = v9;
      std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100]((std::string *)(v16 + 16), (long long *)v7 + 1);
      char v29 = 1;
      float v17 = (float)(this[2].__r_.__value_.__r.__words[0] + 1);
      float v18 = *(float *)&this[2].__r_.__value_.__r.__words[1];
      if (!size || (float)(v18 * (float)size) < v17)
      {
        BOOL v19 = (size & (size - 1)) != 0;
        if (size < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * size);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)&this[1], v22);
        std::string::size_type size = this[1].__r_.__value_.__l.__size_;
        if ((size & (size - 1)) != 0)
        {
          if (v9 >= size) {
            unint64_t v2 = v9 % size;
          }
          else {
            unint64_t v2 = v9;
          }
        }
        else
        {
          unint64_t v2 = (size - 1) & v9;
        }
      }
      std::string::size_type v23 = v6->__r_.__value_.__r.__words[0];
      uint64_t v24 = *(void **)(v6->__r_.__value_.__r.__words[0] + 8 * v2);
      if (v24)
      {
        *(void *)unint64_t v16 = *v24;
      }
      else
      {
        *(void *)unint64_t v16 = *v27;
        std::string::size_type *v27 = (std::string::size_type)v16;
        *(void *)(v23 + 8 * v2) = v27;
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        std::string::size_type v25 = *(void *)(*(void *)v16 + 8);
        if ((size & (size - 1)) != 0)
        {
          if (v25 >= size) {
            v25 %= size;
          }
        }
        else
        {
          v25 &= size - 1;
        }
        uint64_t v24 = (void *)(v6->__r_.__value_.__r.__words[0] + 8 * v25);
      }
      void *v24 = v16;
LABEL_43:
      v28[0] = 0;
      ++this[2].__r_.__value_.__r.__words[0];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
LABEL_44:
      int v7 = *(unsigned __int8 **)v7;
    }
    while (v7);
  }
  return this;
}

void sub_24894F934(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(this + 1, (uint64_t)a2 + 24);
  return this;
}

void sub_24894FA24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(a1, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(a1 + 1, *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5 != v4)
  {
    std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100](a1[2].__r_.__value_.__r.__words, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4));
    a1[2].__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(v4, v5, a1[2].__r_.__value_.__l.__size_);
  }
  uint64_t v6 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_24894FB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::string *std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_24894FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      long long v7 = (long long *)(a1 + v6);
      uint64_t v8 = a3 + v6;
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a3 + v6), *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v9 = *v7;
        *(void *)(v8 + 16) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      uint64_t v10 = (std::string *)(a3 + v6 + 24);
      uint8x8_t v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(void *)(a1 + v6 + 32));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(a3 + v6 + 40) = *(void *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_24894FD38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  while (v2 != v1)
  {
    v2 -= 48;
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

char *std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint8x8_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_24894FEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void adm::graph::NodeManager::NodeManager(adm::graph::NodeManager *this, const SystemConfiguration *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  adm::utility::getTemporaryPath(__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = __p[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v12;
  }
  else {
    uint64_t v3 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = v12.__r_.__value_.__l.__size_;
    }
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, size, 0x8000100u, 0);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if ((*((unsigned char *)&v12.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    CFStringRef v5 = 0;
    if ((*((unsigned char *)&v12.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_13:
    }
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"empty hardware model", 20, 0x8000100u, 0);
  if (v6)
  {
    adm::SystemConfiguration::SystemConfiguration((adm::SystemConfiguration *)__p, a2);
    CFRetain(v6);
    CFTypeRef cf = v6;
    if (v5) {
      CFRetain(v5);
    }
    CFTypeRef v11 = v5;
    operator new();
  }
  long long v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v7, "Could not construct");
  __cxa_throw(v7, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_2489503C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef a40,CFTypeRef a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  uint64_t v49 = (std::__shared_weak_count *)v47[2];
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](v47, 0);
  _Unwind_Resume(a1);
}

void adm::graph::NodeManager::configureNode<adm::vp::UplinkConfiguration>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v198 = *MEMORY[0x263EF8340];
  CFStringRef v5 = *a1;
  CFStringRef v6 = (char *)operator new(0xF8uLL);
  long long v7 = v6;
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)CFStringRef v6 = &unk_26FCA2228;
  *((_DWORD *)v6 + 6) = *(_DWORD *)a3;
  uint64_t v8 = v6 + 24;
  *((void *)v6 + 4) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)v184 = v6 + 32;
  v184[8] = 0;
  uint64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v130 = v6 + 24;
    unsigned int v131 = v5;
    std::string v12 = (char *)operator new(v9 - v10);
    uint64_t v13 = 0;
    *((void *)v7 + 4) = v12;
    *((void *)v7 + 5) = v12;
    *((void *)v7 + 6) = &v12[64 * (v11 >> 6)];
    do
    {
      uint64_t v14 = v10 + v13;
      std::string::size_type v15 = &v12[v13];
      *(_DWORD *)std::string::size_type v15 = *(_DWORD *)(v10 + v13);
      *(void *)&v12[v13 + 8] = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v12[v13 + 8], *(long long **)(v10 + v13 + 8), *(long long **)(v10 + v13 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + v13 + 16) - *(void *)(v10 + v13 + 8)) >> 4));
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 5) = 0;
      *((void *)v15 + 6) = 0;
      std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v12[v13 + 32], *(long long **)(v14 + 32), *(long long **)(v14 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 + 40) - *(void *)(v14 + 32)) >> 4));
      *(void *)&v12[v13 + 56] = *(void *)(v10 + v13 + 56);
      v13 += 64;
    }
    while (v14 + 64 != v9);
    *((void *)v7 + 5) = &v12[v13];
    uint64_t v8 = v130;
    CFStringRef v5 = v131;
  }
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 32);
  unint64_t v16 = *(const void **)(a3 + 56);
  *((void *)v7 + 9) = *(void *)(a3 + 48);
  if (v16) {
    CFRetain(v16);
  }
  *((void *)v7 + 12) = 0;
  *((void *)v7 + 10) = v16;
  v7[88] = *(unsigned char *)(a3 + 64);
  *((void *)v7 + 13) = 0;
  *((void *)v7 + 14) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v7 + 12, *(const void **)(a3 + 72), *(void *)(a3 + 80), (uint64_t)(*(void *)(a3 + 80) - *(void *)(a3 + 72)) >> 2);
  long long v17 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v7 + 136) = v17;
  uint64_t v18 = *(void *)(a3 + 128);
  if (v18) {
    CFRetain(*(CFTypeRef *)(a3 + 128));
  }
  *((void *)v7 + 20) = 0;
  *((void *)v7 + 19) = v18;
  *((void *)v7 + 21) = 0;
  *((void *)v7 + 22) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v7 + 20, *(const void **)(a3 + 136), *(void *)(a3 + 144), (uint64_t)(*(void *)(a3 + 144) - *(void *)(a3 + 136)) >> 2);
  long long v19 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(v7 + 200) = v19;
  *((_DWORD *)v7 + 54) = *(_DWORD *)(a3 + 192);
  unint64_t v20 = (std::string *)(v7 + 224);
  if (*(char *)(a3 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(a3 + 200), *(void *)(a3 + 208));
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 200);
    *((void *)v7 + 30) = *(void *)(a3 + 216);
  }
  *(void *)buf = v8;
  *(void *)&buf[8] = v7;
  if (*((void *)v7 + 5) - *((void *)v7 + 4) == 64)
  {
    adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>((uint64_t)v184, *v5, (uint64_t)buf);
    if (LOBYTE(v185[1]))
    {
      uint64_t v21 = *(void *)&v184[8];
      long long v124 = *(_OWORD *)(*(void *)&v184[8] + 16);
      *(void *)(*(void *)&v184[8] + 16) = 0;
      *(void *)(v21 + 24) = 0;
      if (LOBYTE(v185[1])) {
        std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)v184);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
      uint64_t v22 = *(void *)(a3 + 104);
      *(_DWORD *)v184 = 1;
      std::string::size_type v23 = operator new(0x30uLL);
      v185[1] = v23 + 6;
      *(_DWORD *)std::string::size_type v23 = 0;
      v23[1] = v22;
      *((_OWORD *)v23 + 1) = xmmword_2489AAA40;
      *((_OWORD *)v23 + 2) = xmmword_2489AAA50;
      *(void *)&v184[8] = v23;
      v185[0] = v23 + 6;
      uint64_t v24 = operator new(0x30uLL);
      v187[0] = v24 + 3;
      *(_DWORD *)uint64_t v24 = 0;
      *((void *)v24 + 1) = v22;
      v24[1] = xmmword_2489AAA40;
      v24[2] = xmmword_2489AAA50;
      v185[2] = v24;
      v186 = (char *)(v24 + 3);
      LODWORD(v187[1]) = *(_DWORD *)(a3 + 192);
      BYTE4(v187[1]) = 1;
      v135[1] = 0;
      int v136 = 0;
      v135[0] = 0;
      *(void *)buf = v135;
      buf[8] = 0;
      std::string::size_type v25 = operator new(0x40uLL);
      v135[0] = v25;
      v135[1] = v25;
      int v136 = v25 + 16;
      _DWORD *v25 = *(_DWORD *)v184;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 3) = 0;
      std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(v25 + 2, *(_OWORD **)&v184[8], (_OWORD *)v185[0], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v185[0] - *(void *)&v184[8]) >> 4));
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 5) = 0;
      *((void *)v25 + 6) = 0;
      std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>((_OWORD *)v25 + 2, (_OWORD *)v185[2], v186, 0xAAAAAAAAAAAAAAABLL * ((v186 - (char *)v185[2]) >> 4));
      uint64_t v26 = (char *)v185[2];
      *((void **)v25 + 7) = v187[1];
      v135[1] = v25 + 16;
      int v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      int v140 = *(_DWORD *)(a3 + 192);
      if (v26)
      {
        v186 = v26;
        operator delete(v26);
      }
      if (*(void *)&v184[8])
      {
        v185[0] = *(void **)&v184[8];
        operator delete(*(void **)&v184[8]);
      }
      uint64_t v27 = *a1;
      uint64_t v28 = (char *)operator new(0x58uLL);
      *(_OWORD *)(v28 + 8) = 0u;
      *(void *)uint64_t v28 = &unk_26FCA2278;
      *((_DWORD *)v28 + 6) = 1;
      unint64_t v126 = v28 + 24;
      *((void *)v28 + 4) = 0;
      *(_OWORD *)(v28 + 40) = 0u;
      char v29 = (char *)v135[0];
      uint64_t v30 = (char *)v135[1];
      *(void *)v184 = v28 + 32;
      v184[8] = 0;
      int64_t v31 = (char *)v135[1] - (char *)v135[0];
      if (v135[1] != v135[0])
      {
        if (v31 < 0) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        int v132 = v27;
        uint64_t v32 = (char *)operator new((char *)v135[1] - (char *)v135[0]);
        uint64_t v33 = 0;
        *((void *)v28 + 4) = v32;
        *((void *)v28 + 5) = v32;
        *((void *)v28 + 6) = &v32[64 * (v31 >> 6)];
        do
        {
          unint64_t v34 = &v29[v33];
          unint64_t v35 = &v32[v33];
          *(_DWORD *)unint64_t v35 = *(_DWORD *)&v29[v33];
          *(void *)&v32[v33 + 8] = 0;
          *((void *)v35 + 2) = 0;
          *((void *)v35 + 3) = 0;
          std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v32[v33 + 8], *(_OWORD **)&v29[v33 + 8], *(_OWORD **)&v29[v33 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v29[v33 + 16] - *(void *)&v29[v33 + 8]) >> 4));
          *((void *)v35 + 4) = 0;
          *((void *)v35 + 5) = 0;
          *((void *)v35 + 6) = 0;
          std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v32[v33 + 32], *((_OWORD **)v34 + 4), *((_OWORD **)v34 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v34 + 5) - *((void *)v34 + 4)) >> 4));
          *(void *)&v32[v33 + 56] = *(void *)&v29[v33 + 56];
          v33 += 64;
        }
        while (v34 + 64 != v30);
        *((void *)v28 + 5) = &v32[v33];
        uint64_t v27 = v132;
      }
      *((void *)v28 + 7) = 0;
      *((void *)v28 + 8) = 0;
      *((void *)v28 + 9) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v28 + 7, v137, v138, (v138 - (uint64_t)v137) >> 2);
      *((_DWORD *)v28 + 20) = v140;
      if (*((void *)v28 + 5) - *((void *)v28 + 4) != 64) {
        goto LABEL_136;
      }
      uint64_t v122 = (std::recursive_mutex *)(*v27 + 16);
      uint64_t v123 = *v27;
      std::recursive_mutex::lock(v122);
      adm_log_object = get_adm_log_object();
      if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
      {
LABEL_80:
        int v94 = *(_DWORD *)(v123 + 180);
        if (v94 != *v126) {
          goto LABEL_130;
        }
        if (v94 != 1) {
          goto LABEL_130;
        }
        if (!*((_DWORD *)v28 + 20)) {
          goto LABEL_130;
        }
        char v95 = (char *)*((void *)v28 + 4);
        unint64_t v96 = (char *)*((void *)v28 + 5);
        if (v96 - v95 != 64) {
          goto LABEL_130;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)v28 + 1, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v28 + 1, 1uLL, memory_order_relaxed);
        if (v95 == v96)
        {
LABEL_88:
          exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
          MEMORY[0x24C5863B0](exception, 1, &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory);
          __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
        }
        *(void *)&long long v97 = v28 + 24;
        *((void *)&v97 + 1) = v28;
        while (*(_DWORD *)v95 != 1)
        {
          v95 += 64;
          if (v95 == v96) {
            goto LABEL_88;
          }
        }
        *(_OWORD *)v184 = v97;
        v185[0] = v95;
        LODWORD(v185[1]) = 1;
        LOBYTE(v185[2]) = 1;
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28);
        BOOL v99 = 0;
        if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v184, 0))
        {
          if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v184, 1)|| adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v184, 2)|| adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v184, 3))
          {
            goto LABEL_106;
          }
          int v100 = (char *)v185[0];
          if (!v185[0])
          {
            int v100 = *(char **)(*(void *)v184 + 8);
            if (*(_DWORD *)v100 != LODWORD(v185[1]))
            {
              unsigned int v101 = (int *)(v100 + 64);
              do
              {
                int v102 = *v101;
                v101 += 16;
              }
              while (v102 != LODWORD(v185[1]));
              int v100 = (char *)(v101 - 16);
            }
          }
          uint64_t v104 = *((void *)v100 + 4);
          uint64_t v103 = *((void *)v100 + 5);
          if (v104 == v103)
          {
LABEL_106:
            BOOL v99 = 0;
          }
          else
          {
            uint64_t v105 = v104 + 48;
            do
            {
              int v106 = *(_DWORD *)(v105 - 48);
              BOOL v99 = v106 == 0;
              if (v106) {
                BOOL v107 = v105 == v103;
              }
              else {
                BOOL v107 = 1;
              }
              v105 += 48;
            }
            while (!v107);
          }
        }
        if (LOBYTE(v185[2]) && *(void *)&v184[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v184[8]);
        }
        if (v99)
        {
          *(void *)v184 = v28 + 24;
          *(void *)&v184[8] = v28;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v28 + 1, 1uLL, memory_order_relaxed);
          memset(v185, 0, sizeof(v185));
          LOBYTE(v186) = 0;
          if (*((void *)v28 + 4) != *((void *)v28 + 5)) {
            operator new();
          }
          unint64_t v108 = (void **)operator new(0x40uLL);
          long long v109 = *(_OWORD *)v184;
          long long v110 = *(_OWORD *)v185;
          memset(v184, 0, sizeof(v184));
          *((_OWORD *)v108 + 1) = v109;
          *((_OWORD *)v108 + 2) = v110;
          v108[6] = v185[2];
          memset(v185, 0, sizeof(v185));
          *((unsigned char *)v108 + 56) = (_BYTE)v186;
          unint64_t v111 = *(void **)(v123 + 152);
          *unint64_t v108 = v111;
          v108[1] = (void *)(v123 + 152);
          v111[1] = v108;
          *(void *)(v123 + 152) = v108;
          ++*(void *)(v123 + 168);
          adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor((adm::vp::detail::ProxyFactoryImplementation *)&v164, v123);
          if ((_BYTE)v165)
          {
            *(void *)v162 = v162;
            *(void *)&v162[8] = v162;
            *(void *)&v162[16] = 0;
            *(void *)buf = buf;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0;
            LOBYTE(v172[0]) = 1;
            std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)v162);
          }
          else
          {
            int v112 = get_adm_log_object();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
            {
              v162[0] = 0;
              *(void *)&v162[8] = 0;
              std::to_json(v162, (const std::error_code *)&v164);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v162);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(buf, (uint64_t)v162, 4);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v162);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v162[8], v162[0]);
              int v113 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)v162 = 136315394;
              *(void *)&v162[4] = "downlink";
              *(_WORD *)&v162[12] = 2080;
              *(void *)&v162[14] = v113;
              _os_log_error_impl(&dword_248947000, v112, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy due to error: %s", v162, 0x16u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            *(std::runtime_error *)buf = v164;
            LOBYTE(v172[0]) = 0;
          }
          v164.__vftable = (std::runtime_error_vtbl *)v185;
          std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
          if (*(void *)&v184[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v184[8]);
          }
        }
        else
        {
LABEL_130:
          unint64_t v115 = get_adm_log_object();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v184 = 136315138;
            *(void *)&v184[4] = "downlink";
            _os_log_error_impl(&dword_248947000, v115, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy list due to invalid configuration", v184, 0xCu);
          }
          *(void *)buf = 1;
          *(void *)&buf[8] = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
          LOBYTE(v172[0]) = 0;
        }
        std::recursive_mutex::unlock(v122);
        if (LOBYTE(v172[0]))
        {
          uint64_t v116 = *(void *)&buf[8];
          *(void *)(*(void *)&buf[8] + 16) = 0;
          *(void *)(v116 + 24) = 0;
          if (LOBYTE(v172[0])) {
            std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)buf);
          }
        }
LABEL_136:
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28);
        unint64_t v117 = (uint64_t *)*a2;
        adm::graph::Node::getIOFormats_((void **)buf, *a2, 0);
        adm::graph::Node::getIOFormats_(v172, (uint64_t)v117, 1u);
        adm::graph::Node::getInputSemantics((adm::graph::Node *)v174, v117[8], v117[9]);
        adm::graph::Node::getOutputSemantics((adm::graph::Node *)&v176, v117[11], v117[12]);
        *(_OWORD *)v184 = *(_OWORD *)buf;
        memset(buf, 0, sizeof(buf));
        *(_OWORD *)&v185[1] = *(_OWORD *)v172;
        v185[0] = *(void **)&buf[16];
        v186 = (char *)imp;
        imp = 0;
        *(_OWORD *)v172 = 0uLL;
        *(_OWORD *)v187 = *(_OWORD *)v174;
        uint64_t v118 = v175;
        v174[1] = 0;
        uint64_t v175 = 0;
        v174[0] = 0;
        long long v189 = v176;
        uint64_t v188 = v118;
        uint64_t v190 = v177;
        long long v176 = 0uLL;
        uint64_t v177 = 0;
        uint64_t v192 = 0;
        v191 = 0;
        v178 = 0;
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        uint64_t v193 = 0;
        uint64_t v194 = 0;
        uint64_t v195 = 0;
        uint64_t v196 = 0;
        uint64_t v182 = 0;
        uint64_t v181 = 0;
        uint64_t v183 = 0;
        long long v197 = v124;
        if (adm::graph::isValid(v184)) {
          operator new();
        }
        unint64_t v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v119, "failed to create kernel due to invalid configuration");
        __cxa_throw(v119, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v141[0] = 0;
      v142 = 0;
      v145[0] = 0;
      v146[0] = 0;
      log = adm_log_object;
      if (*v126 == 1)
      {
        *(void *)&v184[8] = 0;
        v184[0] = 3;
        unint64_t v37 = (uint64_t *)operator new(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v37, "AllOfDownlinkDSPInOneNodeWithFarEndVoiceOnly");
      }
      else
      {
        if (*v126)
        {
          unint64_t v37 = 0;
          char v38 = 0;
          goto LABEL_35;
        }
        *(void *)&v184[8] = 0;
        v184[0] = 3;
        unint64_t v37 = (uint64_t *)operator new(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v37, "AllOfDownlinkDSPInOneNode");
      }
      *(void *)&v184[8] = v37;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      v145[0] = 3;
      v184[0] = 0;
      v146[0] = v37;
      *(void *)&v184[8] = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v145);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v184[8], 0);
      char v38 = 3;
LABEL_35:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v145);
      uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "type");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v145);
      int v40 = *v39;
      *uint64_t v39 = v38;
      v145[0] = v40;
      unint64_t v41 = (uint64_t *)*((void *)v39 + 1);
      *((void *)v39 + 1) = v37;
      v146[0] = v41;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v145);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v146, v40);
      v144 = 0;
      v143[0] = 2;
      unint64_t v42 = (char *)*((void *)v28 + 4);
      uint64_t v43 = (char *)*((void *)v28 + 5);
      uint64_t v44 = (uint64_t *)operator new(0x18uLL);
      uint64_t v45 = v44;
      *uint64_t v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
      v146[1] = v44;
      char v147 = 0;
      if (v43 != v42)
      {
        unint64_t v127 = v43;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v44, (v43 - v42) >> 6);
        unint64_t v120 = v45;
        uint64_t v148 = v45[1];
        uint64_t v149 = v148;
        *(void *)v162 = v45 + 2;
        *(void *)&v162[8] = &v148;
        *(void *)&v162[16] = &v149;
        char v163 = 0;
        uint64_t v46 = v148;
        uint64_t v47 = v42;
        while (1)
        {
          v129 = v47;
          *(unsigned char *)uint64_t v46 = 0;
          *(void *)(v46 + 8) = 0;
          v152[0] = 0;
          int v153 = 0;
          int v133 = (unsigned __int8 *)v46;
          if (*(_DWORD *)v47 == 1)
          {
            *(void *)&buf[8] = 0;
            buf[0] = 3;
            uint64_t v49 = (uint64_t *)operator new(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v49, "AllOfDownlinkDSPWithFarEndVoiceOnly");
            *(void *)&buf[8] = v49;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
            uint8_t v48 = 3;
            v152[0] = 3;
            buf[0] = 0;
            int v153 = v49;
            *(void *)&buf[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
            unint64_t v51 = (uint64_t **)&buf[8];
            int v50 = 0;
          }
          else
          {
            if (*(_DWORD *)v47)
            {
              uint64_t v49 = 0;
              uint8_t v48 = 0;
              goto LABEL_43;
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v184, "AllOfDownlinkDSP");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
            uint8_t v48 = v184[0];
            v152[0] = v184[0];
            v184[0] = 0;
            uint64_t v49 = *(uint64_t **)&v184[8];
            int v153 = *(uint64_t **)&v184[8];
            *(void *)&v184[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
            int v50 = v184[0];
            unint64_t v51 = (uint64_t **)&v184[8];
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v51, v50);
LABEL_43:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
          unint64_t v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "type");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
          int v53 = *v52;
          char *v52 = v48;
          v152[0] = v53;
          uint64_t v54 = (uint64_t *)*((void *)v52 + 1);
          *((void *)v52 + 1) = v49;
          int v153 = v54;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v52);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v153, v53);
          unint64_t v55 = (_DWORD *)*((void *)v129 + 1);
          uint64_t v56 = (_DWORD *)*((void *)v129 + 2);
          while (v55 != v56)
          {
            uint64_t v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "input_format_map");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
            *(void *)&buf[16] = buf;
            LOBYTE(v172[0]) = 1;
            LOBYTE(v172[1]) = 0;
            imp = 0;
            switch(*v55)
            {
              case 0:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)&v164, "FarEndVoice");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v164);
                char v58 = (char)v172[1];
                LOBYTE(v172[1]) = v164.__vftable;
                LOBYTE(v164.__vftable) = v58;
                uint64_t v59 = imp;
                imp = v164.__imp_.__imp_;
                v164.__imp_.__imp_ = v59;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v164);
                int v60 = LOBYTE(v164.__vftable);
                p_imp = (uint64_t **)&v164.__imp_;
                goto LABEL_51;
              case 1:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v160, "DefaultAudio");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v160);
                unsigned __int8 v68 = v172[1];
                LOBYTE(v172[1]) = v160[0];
                v160[0] = v68;
                uint64_t v69 = imp;
                imp = v161;
                v161 = v69;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v160);
                int v60 = v160[0];
                p_imp = (uint64_t **)&v161;
                goto LABEL_51;
              case 2:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v158, "SystemAudio");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v158);
                unsigned __int8 v64 = v172[1];
                LOBYTE(v172[1]) = v158[0];
                v158[0] = v64;
                uint64_t v65 = imp;
                imp = v159;
                unint64_t v159 = v65;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v158);
                int v60 = v158[0];
                p_imp = (uint64_t **)&v159;
                goto LABEL_51;
              case 3:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v156, "OtherAudio");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v156);
                unsigned __int8 v66 = v172[1];
                LOBYTE(v172[1]) = v156[0];
                v156[0] = v66;
                uint64_t v67 = imp;
                imp = v157;
                v157 = v67;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v156);
                int v60 = v156[0];
                p_imp = (uint64_t **)&v157;
                goto LABEL_51;
              case 4:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v154, "SpeakerTelemetry");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v154);
                unsigned __int8 v62 = v172[1];
                LOBYTE(v172[1]) = v154[0];
                v154[0] = v62;
                unint64_t v63 = imp;
                imp = v155;
                char v155 = v63;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v154);
                int v60 = v154[0];
                p_imp = (uint64_t **)&v155;
LABEL_51:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(p_imp, v60);
                break;
              default:
                break;
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
            v174[0] = &v172[1];
            LOBYTE(v174[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v184, (uint64_t)buf, 2);
            v185[0] = v184;
            LOBYTE(v185[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v164);
            v165 = &v164;
            char v166 = 1;
            v167[0] = 0;
            uint64_t v168 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v167, (uint64_t)(v55 + 2));
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
            v169 = v167;
            char v170 = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v185[2], (uint64_t)&v164, 2);
            v187[0] = &v185[2];
            LOBYTE(v187[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v57, (uint64_t)v184, 2);
            for (uint64_t i = 0; i != -8; i -= 4)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v185[i + 2]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v187[i - 1], LOBYTE(v185[i + 2]));
            }
            for (uint64_t j = 0; j != -64; j -= 32)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v167[j]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v168 + j), v167[j]);
            }
            for (uint64_t k = 0; k != -8; k -= 4)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[k + 1]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v174[k - 1], LOBYTE(v172[k + 1]));
            }
            v55 += 12;
          }
          uint64_t v73 = (_DWORD *)*((void *)v129 + 4);
          uint64_t v74 = (_DWORD *)*((void *)v129 + 5);
          while (v73 != v74)
          {
            uint64_t v75 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "output_format_map");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
            *(void *)&buf[16] = buf;
            LOBYTE(v172[0]) = 1;
            LOBYTE(v172[1]) = 0;
            imp = 0;
            if (!*v73)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)&v164, "Default");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v164);
              char v76 = (char)v172[1];
              LOBYTE(v172[1]) = v164.__vftable;
              LOBYTE(v164.__vftable) = v76;
              unint64_t v77 = imp;
              imp = v164.__imp_.__imp_;
              v164.__imp_.__imp_ = v77;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v164);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v164.__imp_, LOBYTE(v164.__vftable));
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[1]);
            v174[0] = &v172[1];
            LOBYTE(v174[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v184, (uint64_t)buf, 2);
            v185[0] = v184;
            LOBYTE(v185[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v164);
            v165 = &v164;
            char v166 = 1;
            v167[0] = 0;
            uint64_t v168 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v167, (uint64_t)(v73 + 2));
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
            v169 = v167;
            char v170 = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v185[2], (uint64_t)&v164, 2);
            v187[0] = &v185[2];
            LOBYTE(v187[1]) = 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v75, (uint64_t)v184, 2);
            for (uint64_t m = 0; m != -8; m -= 4)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v185[m + 2]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v187[m - 1], LOBYTE(v185[m + 2]));
            }
            for (uint64_t n = 0; n != -64; n -= 32)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v167[n]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v168 + n), v167[n]);
            }
            for (iuint64_t i = 0; ii != -8; ii -= 4)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[ii + 1]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v174[ii - 1], LOBYTE(v172[ii + 1]));
            }
            v73 += 12;
          }
          if (v129[60]) {
            unint64_t v81 = (uint64_t *)*((unsigned int *)v129 + 14);
          }
          else {
            unint64_t v81 = 0;
          }
          v150[0] = 6;
          uint64_t v151 = v81;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
          int v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "block_size");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
          char v83 = *v82;
          int v128 = *v82;
          char *v82 = 6;
          v150[0] = v83;
          unint64_t v84 = (uint64_t *)*((void *)v82 + 1);
          *((void *)v82 + 1) = v81;
          uint64_t v151 = v84;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v82);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v151, v128);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
          uint64_t v47 = v129 + 64;
          uint64_t v46 = v149 + 16;
          v149 += 16;
          if (v129 + 64 == v127)
          {
            char v163 = 1;
            std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v162);
            uint64_t v85 = v46;
            uint64_t v45 = v120;
            v120[1] = v85;
            break;
          }
        }
      }
      v144 = v45;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
      v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "node_configurations");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
      int v87 = *v86;
      char *v86 = 2;
      v143[0] = v87;
      uint64_t v88 = (uint64_t *)*((void *)v86 + 1);
      *((void *)v86 + 1) = v45;
      v144 = v88;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v144, v87);
      uint64_t v89 = *((unsigned int *)v28 + 20);
      v184[0] = 6;
      *(void *)&v184[8] = v89;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      int v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "client_io_block_size");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      int v91 = *v90;
      *int v90 = 6;
      v184[0] = v91;
      uint64_t v92 = *((void *)v90 + 1);
      *((void *)v90 + 1) = v89;
      *(void *)&v184[8] = v92;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v184[8], v91);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v141);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v184, (uint64_t)v141, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v141);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v142, v141[0]);
      if (SHIBYTE(v185[0]) >= 0) {
        uint64_t v93 = v184;
      }
      else {
        uint64_t v93 = *(uint8_t **)v184;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "downlink";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v93;
      _os_log_impl(&dword_248947000, log, OS_LOG_TYPE_DEFAULT, "creating %s voice processor proxy list with configuration: %s", buf, 0x16u);
      if (SHIBYTE(v185[0]) < 0) {
        operator delete(*(void **)v184);
      }
      goto LABEL_80;
    }
    *(_OWORD *)int v134 = *(_OWORD *)v184;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    MEMORY[0x24C5863C0](&v164, *(void *)v134, *(void *)&v134[2], "failed to create uplink voice processor proxy");
  }
  else
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
    MEMORY[0x24C5863C0](&v164, vdupq_n_s64(1uLL).u64[0], &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory, "failed to create uplink voice processor proxy");
  }
  adm::log_exception((adm *)&v164, v114);
  __cxa_allocate_exception(0x50uLL);
  boost::enable_error_info<std::system_error>((std::runtime_error *)buf, (uint64_t)&v164);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v184, (uint64_t)buf);
  v187[0] = "void adm::graph::NodeManager::configureNode(std::shared_ptr<DSPNode>, const adm::vp::UplinkConfiguration &)";
  v187[1] = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/NodeManager.cpp";
  LODWORD(v188) = 78;
  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v162);
  *(_OWORD *)int v135 = *(_OWORD *)v162;
  int v136 = *(_DWORD **)&v162[16];
  memset(v162, 0, sizeof(v162));
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
}

void sub_2489524C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37)
{
  __cxa_free_exception(v37);
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration((uint64_t)&STACK[0x2C0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x230]);
  if (v38)
  {
    if (a36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a36);
    }
  }
  adm::vp::DownlinkConfiguration::~DownlinkConfiguration((adm::vp::DownlinkConfiguration *)&a37);
  _Unwind_Resume(a1);
}

void sub_2489524D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(&STACK[0x2C0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x230]);
  if (v67 && a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  adm::vp::DownlinkConfiguration::~DownlinkConfiguration((adm::vp::DownlinkConfiguration *)&a37);
  JUMPOUT(0x2489529D4);
}

void sub_248952504()
{
  MEMORY[0x24C5866C0](v0, 0x10A3C4097AC226DLL);
  JUMPOUT(0x2489526A4);
}

void sub_24895250C()
{
  uint64_t v0 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v1;
    operator delete(v1);
  }
  uint64_t v2 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v2;
    operator delete(v2);
  }
  JUMPOUT(0x2489526BCLL);
}

void sub_248952554()
{
}

void sub_24895255C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    STACK[0x2C0] = v2;
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
    JUMPOUT(0x2489527C8);
  }
  _Unwind_Resume(a1);
}

void sub_248952570()
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  adm::vp::DownlinkNodeConfiguration::~DownlinkNodeConfiguration((adm::vp::DownlinkNodeConfiguration *)&STACK[0x2C0]);
  JUMPOUT(0x2489526D8);
}

void sub_2489525AC()
{
  operator delete(v0);
  JUMPOUT(0x2489526D8);
}

void sub_2489525BC()
{
}

void sub_2489525C4(_Unwind_Exception *a1)
{
}

void sub_2489525CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2489525D4);
  }
  _Unwind_Resume(a1);
}

void sub_2489525F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x248952600);
  }
  _Unwind_Resume(a1);
}

void sub_248952624(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&STACK[0x2C0]);
    JUMPOUT(0x2489527C8);
  }
  _Unwind_Resume(a1);
}

void sub_248952630(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__shared_weak_count::~__shared_weak_count(v2);
    JUMPOUT(0x248952A88);
  }
  _Unwind_Resume(a1);
}

void sub_24895263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(&STACK[0x2C0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x230]);
  if (v37 && a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  adm::vp::DownlinkConfiguration::~DownlinkConfiguration((adm::vp::DownlinkConfiguration *)&a37);
  JUMPOUT(0x2489529D4);
}

void sub_248952644(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_248952650(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    operator delete(v67);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a67);
    *(void *)(a10 + 8) = a9;
    JUMPOUT(0x248952A7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_248952664()
{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v1);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v0 + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  adm::graph::DSPKernel::~DSPKernel(v0);
  JUMPOUT(0x24895268CLL);
}

void sub_2489526F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a55);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a24, 6);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a67);
    *(void *)(a10 + 8) = a9;
    JUMPOUT(0x248952A7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_24895270C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a57);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a25, v57);
    JUMPOUT(0x248952A6CLL);
  }
  _Unwind_Resume(a1);
}

void sub_248952728(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  while (v23 != v22)
  {
    v23 -= 8;
    std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v23);
  }
  *(void *)(a22 + 40) = v22;
  JUMPOUT(0x24895276CLL);
}

void sub_24895277C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  while (v4 != v3)
  {
    v4 -= 8;
    std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v4);
  }
  *(void *)(v2 + 40) = v3;
  JUMPOUT(0x2489527BCLL);
}

void sub_2489527D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x230]);
    JUMPOUT(0x2489527F0);
  }
  _Unwind_Resume(a1);
}

void sub_2489527F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x2C0] + i + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x2C0] + i + 40), *((unsigned __int8 *)&STACK[0x2C0] + i + 32));
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a71 + j + 32));
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a71 + j + 40), *(&a71 + j + 32));
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x230] + k + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x230] + k + 40), *((unsigned __int8 *)&STACK[0x230] + k + 32));
    }
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a67);
    *(void *)(a10 + 8) = a9;
    JUMPOUT(0x248952A7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_248952930(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a71 + i + 32));
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a71 + i + 40), *(&a71 + i + 32));
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x230] + j + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x230] + j + 40), *((unsigned __int8 *)&STACK[0x230] + j + 32));
    }
    if (&STACK[0x2C0] != a33)
    {
      uint64_t v73 = a33 - 4;
      uint64_t v74 = a33 - 4;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v73);
        int v75 = *(unsigned __int8 *)v74;
        v74 -= 4;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v73 + 1, v75);
        BOOL v76 = v73 == &STACK[0x2C0];
        uint64_t v73 = v74;
      }
      while (!v76);
    }
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a67);
    *(void *)(a10 + 8) = a9;
    JUMPOUT(0x248952A7CLL);
  }
  _Unwind_Resume(a1);
}

void sub_2489529A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x248952A00);
}

void sub_2489529C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x248952A00);
}

void sub_2489529CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a2) {
    JUMPOUT(0x2489529D4);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](&a67);
  *(void *)(a10 + 8) = a9;
  JUMPOUT(0x248952A7CLL);
}

void sub_2489529DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a71);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a72, a71);
    JUMPOUT(0x2489529FCLL);
  }
  _Unwind_Resume(a1);
}

__n128 boost::enable_error_info<std::system_error>(std::runtime_error *a1, uint64_t a2)
{
  uint64_t v3 = (__n128 *)std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  __n128 result = *(__n128 *)(a2 + 16);
  v3[1] = result;
  v3[3].n128_u64[0] = 0;
  v3[3].n128_u64[1] = 0;
  v3[4].n128_u32[0] = -1;
  v3->n128_u64[0] = (unint64_t)&unk_26FCA0DC0;
  v3[2].n128_u64[0] = (unint64_t)&unk_26FCA0DE8;
  v3[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = &unk_26FCA3BD0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 32) = &unk_26FCA3C48;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26FCA0D20;
  *(void *)(a1 + 32) = &unk_26FCA0D58;
  *(void *)(a1 + 72) = &unk_26FCA0D90;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 40), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 72) = &unk_26FCA3BD0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_26FCA3C48;
  *(void *)(a1 + 40) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26FCA0D20;
  *(void *)(a1 + 32) = &unk_26FCA0D58;
  *(void *)(a1 + 72) = &unk_26FCA0D90;
  return a1;
}

void sub_248952CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

char **applesauce::backtrace::snapshot_N<64>::snapshot_N(char **a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (void **)operator new(0x200uLL);
  a1[2] = (char *)(v2 + 64);
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 64);
  int v3 = backtrace(v2, 64);
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  long long v6 = a1[1];
  unint64_t v7 = (v6 - *a1) >> 3;
  if (v3 <= v7)
  {
    if (v3 >= v7) {
      return a1;
    }
    unint64_t v20 = &v5[8 * v3];
LABEL_17:
    a1[1] = v20;
    return a1;
  }
  unint64_t v8 = v3 - v7;
  uint64_t v9 = a1[2];
  if (v8 <= (v9 - v6) >> 3)
  {
    bzero(a1[1], 8 * v8);
    unint64_t v20 = &v6[8 * v8];
    goto LABEL_17;
  }
  if (v3 < 0) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v9 - v5;
  if (v10 >> 2 > (unint64_t)v3) {
    uint64_t v4 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v4;
  }
  std::string v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
  uint64_t v13 = &v12[8 * v7];
  std::string::size_type v15 = &v12[8 * v14];
  bzero(v13, 8 * v8);
  unint64_t v16 = &v13[8 * v8];
  uint64_t v18 = *a1;
  long long v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    long long v17 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17) {
    operator delete(v17);
  }
  return a1;
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>()
{
}

void sub_248952FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_248953134(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x24C5866C0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x24C5866C0);
}

void std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void adm::vp::DownlinkNodeConfiguration::~DownlinkNodeConfiguration(adm::vp::DownlinkNodeConfiguration *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void adm::vp::DownlinkConfiguration::~DownlinkConfiguration(adm::vp::DownlinkConfiguration *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  int v3 = (void **)((char *)this + 8);
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void caulk::bad_expected_access<std::error_code>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x24C5866C0);
}

void std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

_OWORD *std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(_OWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = operator new(48 * a4);
    void *v5 = result;
    v5[1] = result;
    _DWORD v5[2] = &result[3 * a4];
    while (a2 != a3)
    {
      long long v8 = a2[1];
      char *result = *a2;
      result[1] = v8;
      result[2] = a2[2];
      a2 += 3;
      result += 3;
    }
    v5[1] = result;
  }
  return result;
}

void sub_248953444(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>(_OWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = operator new(48 * a4);
    void *v5 = result;
    v5[1] = result;
    _DWORD v5[2] = &result[3 * a4];
    while (a2 != a3)
    {
      long long v8 = a2[1];
      char *result = *a2;
      result[1] = v8;
      result[2] = a2[2];
      a2 += 3;
      result += 3;
    }
    v5[1] = result;
  }
  return result;
}

void sub_2489534F8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 4) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2489536DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone()
{
}

void sub_2489538F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(v10);
  MEMORY[0x24C5866C0](v10, 0x10F1C4044841AE3);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  operator new();
}

void sub_248953B38(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  __cxa_rethrow();
}

void sub_248953B70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (*this && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::exception_detail::error_info_container_impl::clone(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_248953E74()
{
}

void sub_248953ECC()
{
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = v5[4];
    if (v7 != a3)
    {
      long long v8 = (const char *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        uint64_t v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          uint64_t v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          uint64_t v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        uint64_t v5 = v10;
      }
      while (v7 != a3);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(atomic_uint ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      boost::detail::shared_count::~shared_count(v1 + 6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p()
{
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    if (*((char *)this + 55) < 0) {
      operator delete(*((void **)this + 4));
    }
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((atomic_uint ***)this + 2));
    MEMORY[0x24C5866C0](this, 0x10B3C409A6CECE4);
  }
  return v1 == 0;
}

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(atomic_uint **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count(a1 + 6);
    operator delete(a1);
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  return this;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*a2) {
    __assert_rtn("set", "info.hpp", 77, "x");
  }
  long long v6 = (uint64_t **)(a1 + 8);
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(a1 + 8, &v16, *a3);
  long long v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    long long v8 = (uint64_t *)operator new(0x38uLL);
    *((void *)&v14 + 1) = a1 + 16;
    uint64_t v10 = *a3;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v10;
    char v15 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v6, v16, v9, v8);
    *(void *)&long long v14 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
  }
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
  }
  long long v13 = *(_OWORD *)(v8 + 5);
  v8[5] = v12;
  v8[6] = v11;
  long long v14 = v13;
  boost::detail::shared_count::~shared_count((atomic_uint **)&v14 + 1);
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(result + 16);
  uint64_t v5 = *(void **)(result + 16);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)(result + 16);
  do
  {
    uint64_t v8 = v5[4];
    if (v8 == v6)
    {
      uint64_t v7 = v5;
    }
    else
    {
      uint64_t result = strcmp((const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      if ((int)result < 0) {
        ++v5;
      }
      else {
        uint64_t v7 = v5;
      }
    }
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  if (v4 != v7
    && ((uint64_t v9 = v7[4], v6 == v9)
     || (uint64_t result = strcmp((const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) == 0)))
  {
    uint64_t v10 = v7[6];
    *a3 = v7[5];
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  void (***v6)(void **__return_ptr);
  void **v7;
  uint64_t v8;
  boost::exception_detail::error_info_container_impl *v9;
  boost::exception_detail::error_info_container_impl *v10;
  BOOL v11;
  uint64_t v12;
  long long v13;
  uint64_t result;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  void v18[10];
  char v19;
  uint64_t v20;

  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
    size_t v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a2, v4);
    uint64_t v5 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        uint64_t v6 = (void (***)(void **__return_ptr))*((void *)v5 + 5);
        if (!v6) {
          __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
        }
        (**v6)(__p);
        if (v16 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        if (v16 >= 0) {
          uint64_t v8 = HIBYTE(v16);
        }
        else {
          uint64_t v8 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v8);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 2);
            uint64_t v11 = *(void *)v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v11);
        }
        uint64_t v5 = v10;
      }
      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v18);
    uint64_t v12 = v16;
    long long v13 = *(_OWORD *)__p;
    *(_OWORD *)__p = *((_OWORD *)this + 2);
    uint64_t v16 = *((void *)this + 6);
    *((_OWORD *)this + 2) = v13;
    *((void *)this + 6) = v12;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    long long v17 = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v18[-1] + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v18[0] = MEMORY[0x263F8C318] + 16;
    if (v19 < 0) {
      operator delete((void *)v18[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24C586600](&v20);
  }
  uint64_t result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_2489545B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_248954758(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x24C586600](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24C5863F0](v20, a1);
  if (v20[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      long long v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x24C586400](v20);
  return a1;
}

void sub_2489549C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x24C586400](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x24895499CLL);
}

void sub_248954A2C(_Unwind_Exception *a1)
{
}

void *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  int v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    void *v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24C586600](a1 + 112);
  return a1;
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::locale __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::~sp_counted_impl_p()
{
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(void *a1)
{
  *a1 = &unk_26FCA3EB8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24C5866C0);
}

void *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(void *a1)
{
  *a1 = &unk_26FCA3EB8;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::clone()
{
}

void sub_248954EA4(_Unwind_Exception *a1)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x24C5866C0](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::name_value_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v51, (const char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL));
  if (v51) {
    size_t v4 = (char *)v51;
  }
  else {
    size_t v4 = (char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, v4);
  free(v51);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v47;
  }
  else {
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v47.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v47, v5, 91);
  std::string v48 = v47;
  memset(&v47, 0, sizeof(v47));
  unint64_t v6 = std::string::append(&v48, "] = ", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v51);
  memset(&v55, 0, sizeof(v55));
  size_t v8 = *(void *const **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16) - (void)v8;
  unint64_t v10 = v9 >> 3;
  uint64_t v11 = backtrace_symbols(v8, v9 >> 3);
  if ((int)(v9 >> 3) < 1) {
    goto LABEL_69;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (v9 >> 3);
  do
  {
    BOOL v14 = *(const void **)(*(void *)(a1 + 8) + 8 * v12);
    snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v12, 18, v14);
    size_t v15 = strlen(__str);
    std::string::append(&v55, __str, v15);
    memset(&v63, 0, sizeof(v63));
    if (dladdr(v14, &v63)) {
      BOOL v16 = v63.dli_sname == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v63.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v24 = __cxa_demangle((const char *)p_p, 0, (size_t *)&outlen, (int *)&status);
      std::string::size_type v25 = v24;
      int data = (int)status.__r_.__value_.__l.__data_;
      if (LODWORD(status.__r_.__value_.__l.__data_))
      {
        LOBYTE(v60) = 0;
        char v62 = 0;
        if (!v24) {
          goto LABEL_30;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100](&v64, v24, outlen.__r_.__value_.__r.__words[0] - 1);
        long long v60 = v64;
        int64_t v61 = v65;
        char v62 = 1;
        if (!v25)
        {
LABEL_30:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (data)
            {
LABEL_32:
              dli_sname = (char *)v63.dli_sname;
              if (!v63.dli_sname) {
                dli_sname = v11[v12];
              }
LABEL_40:
              dli_saddr = v63.dli_saddr;
              std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
              char v29 = std::string::append(&status, " + ", 3uLL);
              long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
              outlen.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
              *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v30;
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v56, (unsigned char *)v14 - dli_saddr);
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v31 = &v56;
              }
              else {
                int64_t v31 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v56.__r_.__value_.__l.__size_;
              }
              uint64_t v33 = std::string::append(&outlen, (const std::string::value_type *)v31, size);
              long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
              v33->__r_.__value_.__l.__size_ = 0;
              v33->__r_.__value_.__r.__words[2] = 0;
              v33->__r_.__value_.__r.__words[0] = 0;
              unint64_t v35 = std::string::append(&__p, "\n", 1uLL);
              long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
              int64_t v65 = v35->__r_.__value_.__r.__words[2];
              long long v64 = v36;
              v35->__r_.__value_.__l.__size_ = 0;
              v35->__r_.__value_.__r.__words[2] = 0;
              v35->__r_.__value_.__r.__words[0] = 0;
              if (v65 >= 0) {
                int v37 = (const std::string::value_type *)&v64;
              }
              else {
                int v37 = (const std::string::value_type *)v64;
              }
              if (v65 >= 0) {
                std::string::size_type v38 = HIBYTE(v65);
              }
              else {
                std::string::size_type v38 = *((void *)&v64 + 1);
              }
              std::string::append(&v55, v37, v38);
              if (SHIBYTE(v65) < 0) {
                operator delete((void *)v64);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v56.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(outlen.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(status.__r_.__value_.__l.__data_);
              }
              if (!data && SHIBYTE(v61) < 0)
              {
                char v22 = (void *)v60;
                goto LABEL_65;
              }
              goto LABEL_66;
            }
          }
          else if (data)
          {
            goto LABEL_32;
          }
          if (v61 >= 0) {
            dli_sname = (char *)&v60;
          }
          else {
            dli_sname = (char *)v60;
          }
          goto LABEL_40;
        }
      }
      free(v25);
      goto LABEL_30;
    }
    long long v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v64, v11[v12]);
    uint64_t v18 = std::string::append(v17, "\n", 1uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t v61 = v18->__r_.__value_.__r.__words[2];
    long long v60 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      unint64_t v20 = (const std::string::value_type *)&v60;
    }
    else {
      unint64_t v20 = (const std::string::value_type *)v60;
    }
    if (v61 >= 0) {
      std::string::size_type v21 = HIBYTE(v61);
    }
    else {
      std::string::size_type v21 = *((void *)&v60 + 1);
    }
    std::string::append(&v55, v20, v21);
    if (SHIBYTE(v61) < 0) {
      operator delete((void *)v60);
    }
    if (SHIBYTE(v65) < 0)
    {
      char v22 = (void *)v64;
LABEL_65:
      operator delete(v22);
    }
LABEL_66:
    ++v12;
  }
  while (v13 != v12);
  if (v10 == 64) {
    std::string::append(&v55, "[truncated?]\n", 0xDuLL);
  }
LABEL_69:
  if (v11) {
    free(v11);
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &v55;
  }
  else {
    uint64_t v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v55.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)v39, v40);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v52);
  unint64_t v51 = (void *)*MEMORY[0x263F8C2C8];
  *(void *)((char *)&v52[-1] + *((void *)v51 - 3)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v52[0] = MEMORY[0x263F8C318] + 16;
  if (v53 < 0) {
    operator delete((void *)v52[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24C586600](&v54);
  if ((v46 & 0x80u) == 0) {
    unint64_t v41 = __dst;
  }
  else {
    unint64_t v41 = (void **)__dst[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v42 = v46;
  }
  else {
    std::string::size_type v42 = (std::string::size_type)__dst[1];
  }
  uint64_t v43 = std::string::append(&v49, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v50, 10);
  *a2 = v50;
  memset(&v50, 0, sizeof(v50));
  if ((char)v46 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_248955530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  int status = 0;
  size_t v4 = 0;
  *(void *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void adm::graph::NodeManager::createNode(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    goto LABEL_17;
  }
  adm::graph::Node::getDescription(&v18, v8);
  v16.i64[0] = (uint64_t)&v18;
  v16.i64[1] = (uint64_t)&v19;
  long long v17 = (char *)&v19 + 4;
  v15[0] = a3;
  v15[1] = a3 + 3;
  v15[2] = (void **)((char *)a3 + 28);
  if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)&v16, (unsigned __int8 ***)v15))goto LABEL_9; {
  adm::graph::Node::getTerminalDescriptions(&v16, *(void *)(a2 + 8));
  }
  uint64_t v10 = v16.i64[1];
  unint64_t v9 = (unsigned __int8 *)v16.i64[0];
  uint64_t v11 = *(unsigned __int8 **)a4;
  if (v16.i64[1] - v16.i64[0] != *(void *)(a4 + 8) - *(void *)a4)
  {
    v15[0] = (void **)&v16;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v15);
LABEL_9:
    BOOL v12 = 0;
    goto LABEL_10;
  }
  if (v16.i64[0] == v16.i64[1])
  {
    v15[0] = (void **)&v16;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v15);
    BOOL v12 = 1;
  }
  else
  {
    do
    {
      BOOL v12 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v9, v11);
      if (!v12) {
        break;
      }
      v9 += 136;
      v11 += 136;
    }
    while (v9 != (unsigned __int8 *)v10);
    v15[0] = (void **)&v16;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v15);
  }
LABEL_10:
  if (v21 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_14;
    }
LABEL_17:
    BOOL v14 = *(std::__shared_weak_count **)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    adm::graph::DSPNode::create();
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_248955AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    if (a19 < 0) {
      operator delete((void *)buf);
    }
    if (a2 == 3)
    {
      char v29 = __cxa_begin_catch(exception_object);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v34;
        _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)&buf, 0xCu);
      }
      *(void *)uint64_t v26 = 1685287015;
      *(unsigned char *)(v26 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      int64_t v31 = __cxa_begin_catch(exception_object);
      uint64_t v32 = get_adm_log_object();
      BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v33)
        {
          uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v35;
          _os_log_error_impl(&dword_248947000, v32, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v33)
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_248947000, v32, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)&buf, 2u);
      }
      *(void *)uint64_t v26 = 1970170734;
      *(unsigned char *)(v26 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x248955A90);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>(const void ***a1, unsigned __int8 ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0) {
    std::string::const_iterator v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  }
  else {
    std::string::const_iterator v5 = (unsigned __int8 *)(*a1)[1];
  }
  unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    unint64_t v6 = v3[1];
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    uint64_t v10 = *a2;
  }
  else {
    uint64_t v10 = (unsigned __int8 **)*v3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, (size_t)(*a1)[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)*a1 + 23))
  {
    uint64_t v11 = v4 - 1;
    do
    {
      int v13 = *(unsigned __int8 *)v2;
      uint64_t v2 = (const void **)((char *)v2 + 1);
      int v12 = v13;
      int v15 = *(unsigned __int8 *)v10;
      uint64_t v10 = (unsigned __int8 **)((char *)v10 + 1);
      int v14 = v15;
      BOOL v17 = v11-- != 0;
    }
    while (v12 == v14 && v17);
    if (v12 != v14) {
      return 0;
    }
  }
  if (*(_DWORD *)a1[1] == *(_DWORD *)a2[1]) {
    return *(_DWORD *)a1[2] == *(_DWORD *)a2[2];
  }
  return 0;
}

void std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::const_iterator v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      std::string::const_iterator v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = v2 - 1;
    unint64_t v9 = a1;
    do
    {
      int v11 = *v9++;
      int v10 = v11;
      int v13 = *a2++;
      int v12 = v13;
      BOOL v15 = v8-- != 0;
    }
    while (v10 == v12 && v15);
    if (v10 != v12) {
      return 0;
    }
  }
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)v6 + 6)
    || *((double *)a1 + 4) != *((double *)v6 + 4)
    || *((_DWORD *)a1 + 10) != *((_DWORD *)v6 + 10)
    || *((_DWORD *)a1 + 11) != *((_DWORD *)v6 + 11)
    || *((_DWORD *)a1 + 12) != *((_DWORD *)v6 + 12)
    || *((_DWORD *)a1 + 13) != *((_DWORD *)v6 + 13)
    || *((_DWORD *)a1 + 14) != *((_DWORD *)v6 + 14)
    || *((_DWORD *)a1 + 15) != *((_DWORD *)v6 + 15)
    || *((_DWORD *)a1 + 16) != *((_DWORD *)v6 + 16)
    || *((_DWORD *)a1 + 18) != *((_DWORD *)v6 + 18))
  {
    return 0;
  }
  return *((_DWORD *)a1 + 20) == *((_DWORD *)v6 + 20);
}

void adm::graph::DSPNode::create()
{
}

void sub_24895614C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x24C5866C0](v1, 0x10B3C40B371BB5DLL);
  _Unwind_Resume(a1);
}

void adm::graph::anonymous namespace'::ErrorCategory::message(int a1@<W1>, void *a2@<X8>)
{
  if (a1 == 1685287015)
  {
    int v5 = "dspgraph error";
    goto LABEL_5;
  }
  if (a1 == 1970170734)
  {
    int v5 = "unknown error";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(a2, v5);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "!! Invalid error code: ");
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v14, " !!", 3uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_2489562FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *adm::graph::anonymous namespace'::ErrorCategory::name(adm::graph::_anonymous_namespace_::ErrorCategory *this)
{
  return "NodeManagerError";
}

void adm::graph::anonymous namespace'::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24C5866C0);
}

uint64_t std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN3adm5graph7DSPNodeEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void non-virtual thunk to'adm::graph::DSPNode::~DSPNode(adm::graph::DSPNode *this)
{
  adm::graph::HostNode::~HostNode((adm::graph::DSPNode *)((char *)this - 128));
  JUMPOUT(0x24C5866C0);
}

{
  adm::graph::HostNode::~HostNode((adm::graph::DSPNode *)((char *)this - 128));
}

void adm::graph::HostNode::~HostNode(adm::graph::HostNode *this)
{
  *(void *)this = &unk_26FCA39A8;
  *((void *)this + 16) = &unk_26FCA3A58;
  uint64_t v3 = (void **)((char *)this + 320);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 296);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 272);
  std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 248);
  std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 224);
  std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 200);
  std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 176);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 152);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  adm::graph::Node::~Node((void **)this);
}

{
  uint64_t vars8;

  adm::graph::HostNode::~HostNode(this);
  JUMPOUT(0x24C5866C0);
}

void std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 40;
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 40;
        std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 40;
        std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void adm::graph::Node::~Node(void **this)
{
  *this = &unk_26FCA3850;
  uint64_t v2 = this + 14;
  uint64_t v3 = this + 8;
  uint64_t v4 = this + 14;
  do
  {
    unint64_t v6 = *(v4 - 3);
    v4 -= 3;
    int v5 = v6;
    if (v6)
    {
      int v7 = *(v2 - 2);
      uint64_t v8 = v5;
      if (v7 != v5)
      {
        do
        {
          uint64_t v10 = *--v7;
          uint64_t v9 = v10;
          *int v7 = 0;
          if (v10) {
            std::default_delete<adm::graph::Terminal>::operator()[abi:ne180100](v9);
          }
        }
        while (v7 != v5);
        uint64_t v8 = *v4;
      }
      *(v2 - 2) = v5;
      operator delete(v8);
    }
    uint64_t v2 = v4;
  }
  while (v4 != v3);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  adm::graph::Node::~Node(this);
  JUMPOUT(0x24C5866C0);
}

void std::default_delete<adm::graph::Terminal>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120) && *(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x24C5866C0);
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void adm::graph::DSPNode::~DSPNode(adm::graph::DSPNode *this)
{
  adm::graph::HostNode::~HostNode(this);
  JUMPOUT(0x24C5866C0);
}

void std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120) && *(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void adm::graph::NodeManager::createNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  adm::graph::Node::getDescription(&v17, v8);
  v15[0] = &v17;
  v15[1] = &v18;
  int64x2_t v16 = (char *)&v18 + 4;
  *(void *)buf = a3;
  uint64_t v22 = a3 + 24;
  uint64_t v23 = a3 + 28;
  if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)v15, (unsigned __int8 ***)buf))goto LABEL_9; {
  adm::graph::Node::getTerminalDescriptions((int64x2_t *)v15, *(void *)(a2 + 8));
  }
  uint64_t v10 = (unsigned __int8 *)v15[0];
  uint64_t v9 = (unsigned __int8 *)v15[1];
  long long v11 = *(unsigned __int8 **)a4;
  if ((char *)v15[1] - (char *)v15[0] != *(void *)(a4 + 8) - *(void *)a4)
  {
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_9:
    BOOL v12 = 0;
    goto LABEL_10;
  }
  if (v15[0] == v15[1])
  {
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    BOOL v12 = 1;
  }
  else
  {
    do
    {
      BOOL v12 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v10, v11);
      if (!v12) {
        break;
      }
      v10 += 136;
      v11 += 136;
    }
    while (v10 != v9);
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
LABEL_10:
  if (v20 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_14;
    }
LABEL_18:
    std::string v14 = *(std::__shared_weak_count **)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    adm::graph::DSPNode::create();
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  BOOL v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  char *v16;
  std::string v17;
  void *v18[2];
  char v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    goto LABEL_17;
  }
  adm::graph::Node::getDescription(&v17, v8);
  v15[0] = &v17;
  v15[1] = v18;
  int64x2_t v16 = (char *)v18 + 4;
  *(void *)buf = a3;
  *(void *)&uint8_t buf[8] = a3 + 24;
  char v21 = a3 + 28;
  if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)v15, (unsigned __int8 ***)buf))goto LABEL_9; {
  adm::graph::Node::getTerminalDescriptions((int64x2_t *)v15, *(void *)(a2 + 8));
  }
  uint64_t v9 = (unsigned __int8 *)v15[0];
  uint64_t v10 = (unsigned __int8 *)v15[1];
  long long v11 = *(unsigned __int8 **)a4;
  if ((char *)v15[1] - (char *)v15[0] != *(void *)(a4 + 8) - *(void *)a4)
  {
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_9:
    BOOL v12 = 0;
    goto LABEL_10;
  }
  if (v15[0] == v15[1])
  {
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    BOOL v12 = 1;
  }
  else
  {
    do
    {
      BOOL v12 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v9, v11);
      if (!v12) {
        break;
      }
      v9 += 136;
      v11 += 136;
    }
    while (v9 != v10);
    *(void *)buf = v15;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
LABEL_10:
  if (v19 < 0) {
    operator delete(v18[1]);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_14;
    }
LABEL_17:
    std::string v14 = *(std::__shared_weak_count **)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    adm::graph::DSPNode::create();
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_24895717C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (a2)
  {
    __cxa_free_exception(v52);
    adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(&a33);
    *(void *)(v53 - 128) = a10;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 128));
    if (__p) {
      operator delete(__p);
    }
    if (a24) {
      operator delete(a24);
    }
    if (a21) {
      operator delete(a21);
    }
    if (a18) {
      operator delete(a18);
    }
    if (a15) {
      operator delete(a15);
    }
    if (a12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    if (a2 == 3)
    {
      std::string v56 = __cxa_begin_catch(exception_object);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = (*(uint64_t (**)(void *))(*(void *)v56 + 16))(v56);
        *(_DWORD *)(v53 - 128) = 136315138;
        *(void *)(v53 - 124) = v61;
        _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v53 - 128), 0xCu);
      }
      *(void *)a11 = 1685287015;
      *(unsigned char *)(a11 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      char v58 = __cxa_begin_catch(exception_object);
      uint64_t v59 = get_adm_log_object();
      BOOL v60 = os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v60)
        {
          uint64_t v62 = (*(uint64_t (**)(void *))(*(void *)v58 + 16))(v58);
          *(_DWORD *)(v53 - 128) = 136315138;
          *(void *)(v53 - 124) = v62;
          _os_log_error_impl(&dword_248947000, v59, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v53 - 128), 0xCu);
        }
      }
      else if (v60)
      {
        *(_WORD *)(v53 - 128) = 0;
        _os_log_error_impl(&dword_248947000, v59, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)(v53 - 128), 2u);
      }
      *(void *)a11 = 1970170734;
      *(unsigned char *)(a11 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x248956FB8);
  }
  _Unwind_Resume(exception_object);
}

void sub_2489580A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    char v58 = *(std::__shared_weak_count **)(v56 - 152);
    if (v58) {
      std::__shared_weak_count::__release_weak(v58);
    }
    MEMORY[0x24C5866C0](v55, 0x10B1C4009C77CB4);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_24895824C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    if (!a10) {
      JUMPOUT(0x2489583B0);
    }
    JUMPOUT(0x2489583A8);
  }
  JUMPOUT(0x24895823CLL);
}

void sub_248958268(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a2)
  {
    __cxa_free_exception(v53);
    adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration(v52);
    adm::graph::DSPKernel::~DSPKernel(v51);
    MEMORY[0x24C5866C0](v51, 0x10A1C40C9FBF0C7);
    if (a49) {
      (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
    }
    *(void *)(v57 - 144) = v56;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
    if (a41) {
      operator delete(a41);
    }
    if (a38) {
      operator delete(a38);
    }
    if (a35) {
      operator delete(a35);
    }
    if (a32) {
      operator delete(a32);
    }
    if (a29) {
      operator delete(a29);
    }
    *(void *)(v57 - 144) = v54;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
    if (a23) {
      operator delete(a23);
    }
    if (a20) {
      operator delete(a20);
    }
    if (a17) {
      operator delete(a17);
    }
    if (a14) {
      operator delete(a14);
    }
    if (a11) {
      operator delete(a11);
    }
    if (v50)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (a2 == 3)
    {
      BOOL v60 = __cxa_begin_catch(a1);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = (*(uint64_t (**)(void *))(*(void *)v60 + 16))(v60);
        *(_DWORD *)(v57 - 144) = 136315138;
        *(void *)(v55 + 212) = v65;
        _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v57 - 144), 0xCu);
      }
      *(void *)uint64_t v49 = 1685287015;
      *(unsigned char *)(v49 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      uint64_t v62 = __cxa_begin_catch(a1);
      Dl_info v63 = get_adm_log_object();
      BOOL v64 = os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v64)
        {
          uint64_t v66 = (*(uint64_t (**)(void *))(*(void *)v62 + 16))(v62);
          *(_DWORD *)(v57 - 144) = 136315138;
          *(void *)(v55 + 212) = v66;
          _os_log_error_impl(&dword_248947000, v63, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v57 - 144), 0xCu);
        }
      }
      else if (v64)
      {
        *(_WORD *)(v57 - 144) = 0;
        _os_log_error_impl(&dword_248947000, v63, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)(v57 - 144), 2u);
      }
      *(void *)uint64_t v49 = 1970170734;
      *(unsigned char *)(v49 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x248957EC0);
  }
  JUMPOUT(0x24895823CLL);
}

void sub_248958280(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x24895828CLL);
  }
  JUMPOUT(0x24895823CLL);
}

void sub_2489585E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(std::string *this, std::string *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = (std::string *)((char *)a2 - 1);
  do
  {
    int v4 = v3->__r_.__value_.__s.__data_[1];
    uint64_t v3 = (std::string *)((char *)v3 + 1);
  }
  while (v4);
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_248958644(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v13 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    std::string v14 = (char *)v13 + size;
    do
    {
      std::string::value_type v15 = v4->__r_.__value_.__s.__data_[0];
      int v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    std::string::value_type *v14 = 0;
    std::string::size_type v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      std::string::size_type v24 = v7;
      int64_t v25 = v18 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      std::string::value_type v19 = v4->__r_.__value_.__s.__data_[0];
      int v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    std::string::value_type *p_p = 0;
    if (v25 >= 0) {
      char v20 = (const std::string::value_type *)&__p;
    }
    else {
      char v20 = (const std::string::value_type *)__p;
    }
    if (v25 >= 0) {
      std::string::size_type v21 = HIBYTE(v25);
    }
    else {
      std::string::size_type v21 = v24;
    }
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

void sub_248958804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24895892C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  adm::SystemConfiguration::~SystemConfiguration(&a9);
  if (a2 == 4)
  {
    unint64_t v11 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v11);
  }
  if (a2 == 3)
  {
    BOOL v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12, v13);
  }
  std::string v14 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    std::string::value_type v15 = v14;
    adm::consume_exception_and_terminate(v15, v16);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v14);
}

void sub_248958998(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_248958BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose((const void *)(v39 - 64), 8);
  if (a38) {
    adm::SystemConfiguration::~SystemConfiguration(&a10);
  }

  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      while (1)
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        if ((uint64_t *)v6 != v2)
        {
          std::string::size_type v9 = (void *)(v6 + 40);
          *(_DWORD *)(v6 + 72) = *((_DWORD *)v2 + 18);
          uint64_t v10 = (uint64_t *)v2[7];
          uint64_t v11 = *(void *)(v6 + 48);
          if (v11)
          {
            for (uint64_t j = 0; j != v11; ++j)
              *(void *)(*v9 + 8 * j) = 0;
            uint64_t v13 = *(void *)(v6 + 56);
            *(void *)(v6 + ++*(_DWORD *)(this + 56) = 0;
            *(void *)(v6 + 64) = 0;
            if (v13) {
              BOOL v14 = v10 == 0;
            }
            else {
              BOOL v14 = 1;
            }
            if (!v14)
            {
              uint64_t v36 = v6;
              while (1)
              {
                std::string::operator=((std::string *)(v13 + 16), (const std::string *)(v10 + 2));
                if ((uint64_t *)v13 != v10)
                {
                  std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v13 + 40, (std::string *)v10[5], (long long *)v10[6], 0xAAAAAAAAAAAAAAABLL * ((v10[6] - v10[5]) >> 3));
                  std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v13 + 64, (std::string *)v10[8], (long long *)v10[9], 0xAAAAAAAAAAAAAAABLL * ((v10[9] - v10[8]) >> 3));
                  std::string::size_type v16 = (void **)(v13 + 88);
                  uint64_t v17 = *(void *)(v13 + 88);
                  uint64_t v19 = v10[11];
                  uint64_t v18 = v10[12];
                  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 4);
                  uint64_t v21 = *(void *)(v13 + 104);
                  if (0xAAAAAAAAAAAAAAABLL * ((v21 - v17) >> 4) >= v20)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v13 + 96) - v17) >> 4) >= v20)
                    {
                      char v29 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>((std::string *)v10[11], (std::string *)v10[12], *(std::string **)(v13 + 88));
                      for (uint64_t k = *(void *)(v13 + 96);
                            (std::string *)k != v29;
                            std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(k))
                      {
                        k -= 48;
                      }
                      *(void *)(v13 + 96) = v29;
                      goto LABEL_41;
                    }
                    uint64_t v28 = (std::string *)(v19 + 16 * ((*(void *)(v13 + 96) - v17) >> 4));
                    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>((std::string *)v10[11], v28, *(std::string **)(v13 + 88));
                    uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>((uint64_t)v28, v18, *(void *)(v13 + 96));
                  }
                  else
                  {
                    if (v17)
                    {
                      uint64_t v22 = *(void *)(v13 + 96);
                      uint64_t v23 = *(void **)(v13 + 88);
                      if (v22 != v17)
                      {
                        do
                        {
                          v22 -= 48;
                          std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v22);
                        }
                        while (v22 != v17);
                        uint64_t v23 = *v16;
                      }
                      *(void *)(v13 + 96) = v17;
                      operator delete(v23);
                      uint64_t v21 = 0;
                      *std::string::size_type v16 = 0;
                      *(void *)(v13 + 96) = 0;
                      *(void *)(v13 + 104) = 0;
                      uint64_t v6 = v36;
                    }
                    if (v20 > 0x555555555555555) {
                      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 4);
                    uint64_t v25 = 2 * v24;
                    if (2 * v24 <= v20) {
                      uint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 4);
                    }
                    if (v24 >= 0x2AAAAAAAAAAAAAALL) {
                      unint64_t v26 = 0x555555555555555;
                    }
                    else {
                      unint64_t v26 = v25;
                    }
                    std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100]((void *)(v13 + 88), v26);
                    uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(v19, v18, *(void *)(v13 + 96));
                  }
                  *(void *)(v13 + 96) = v27;
                }
LABEL_41:
                std::string::operator=((std::string *)(v13 + 112), (const std::string *)(v10 + 14));
                std::string::value_type v15 = *(void **)v13;
                std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi((uint64_t)v9, v13);
                uint64_t v10 = (uint64_t *)*v10;
                if (v15)
                {
                  uint64_t v13 = (uint64_t)v15;
                  if (v10) {
                    continue;
                  }
                }
                goto LABEL_43;
              }
            }
            std::string::value_type v15 = (void *)v13;
LABEL_43:
            std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(v15);
            uint64_t v3 = (uint64_t)a1;
          }
          for (; v10; uint64_t v10 = (uint64_t *)*v10)
          {
            int64_t v31 = (char *)operator new(0x88uLL);
            int v37 = v31;
            uint64_t v38 = v6 + 56;
            char v39 = 0;
            *(void *)int64_t v31 = 0;
            *((void *)v31 + 1) = 0;
            uint64_t v32 = std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100]((std::string *)(v31 + 16), (long long *)v10 + 1);
            char v39 = 1;
            *((void *)v31 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v32);
            std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi((uint64_t)v9, (uint64_t)v31);
            int v37 = 0;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
          }
        }
        uint64_t v8 = *(void **)v6;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(v3, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8)
        {
          uint64_t v6 = (uint64_t)v8;
          if (v2) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
    uint64_t v8 = (void *)v6;
LABEL_48:
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    BOOL v33 = (char *)operator new(0x50uLL);
    int v37 = v33;
    uint64_t v38 = v3 + 16;
    char v39 = 0;
    *(void *)BOOL v33 = 0;
    *((void *)v33 + 1) = 0;
    uint64_t v34 = std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100]((std::string *)(v33 + 16), (long long *)v2 + 1);
    char v39 = 1;
    *((void *)v33 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v34);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(v3, (uint64_t)v33);
    int v37 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
  }
}

void sub_248959084()
{
}

void sub_248959114()
{
}

void *___ZL39getRegisterAudioUnits_InternalSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  uint64_t v8 = 0;
  std::string::size_type v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v2 = (void *)AudioDSPLibraryCore(char **)::frameworkLibrary;
  uint64_t v11 = AudioDSPLibraryCore(char **)::frameworkLibrary;
  if (!AudioDSPLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    _DWORD v5[2] = (void *)3221225472;
    v5[3] = ___ZL19AudioDSPLibraryCorePPc_block_invoke;
    v5[4] = &unk_265242FB0;
    uint64_t v6 = &v8;
    BOOL v7 = v5;
    long long v12 = xmmword_265242F98;
    void v9[3] = _sl_dlopen();
    AudioDSPLibraryCore(char **)::frameworkLibrary = *(void *)(v6[1] + 24);
    uint64_t v2 = (void *)v9[3];
  }
  _Block_object_dispose(&v8, 8);
  uint64_t v3 = v5[0];
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    __break(1u);
    goto LABEL_7;
  }
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "RegisterAudioUnits_Internal");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getRegisterAudioUnits_InternalSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2489592A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AudioDSPLibraryCorePPc_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  AudioDSPLibraryCore(char **)::frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v12 = operator new(8 * *(void *)&prime);
      uint64_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      unint64_t v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      std::string::value_type v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        std::string::size_type v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              std::string::value_type v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              unint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                uint64_t v25 = (void *)v22;
                while (1)
                {
                  unint64_t v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break; {
                  unint64_t v24 = (void *)*v26;
                  }
                  uint64_t v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                unint64_t v24 = v26;
                unint64_t v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                unint64_t v26 = (void *)v22;
              }
              *std::string::value_type v15 = (uint64_t)v24;
              void *v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              std::string::value_type v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      uint64_t v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  int64_t v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    uint64_t v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        uint64_t v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        uint64_t v32 = *(unsigned __int8 **)v34;
        int64_t v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v31;
  *(void *)int64_t v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

void std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  float v6 = (long long *)__str;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100]((void *)a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v9, v6, a3, *(std::string **)(a1 + 8));
LABEL_17:
    *(void *)(a1 + 8) = v14;
    return;
  }
  std::string::value_type v15 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v10) >> 3) < a4)
  {
    unint64_t v16 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)v15 - (char *)v10) >> 3));
    if (v15 != v10)
    {
      uint64_t v17 = 8 * (((char *)v15 - (char *)v10) >> 3);
      do
      {
        std::string::operator=(v10, (const std::string *)v6);
        float v6 = (long long *)((char *)v6 + 24);
        ++v10;
        v17 -= 24;
      }
      while (v17);
      unint64_t v10 = *(std::string **)(a1 + 8);
    }
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v9, v16, a3, v10);
    goto LABEL_17;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v10, (const std::string *)v6);
      float v6 = (long long *)((char *)v6 + 24);
      ++v10;
    }
    while (v6 != a3);
    std::string::value_type v15 = *(std::string **)(a1 + 8);
  }
  while (v15 != v10)
  {
    if (SHIBYTE(v15[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    }
    --v15;
  }
  *(void *)(a1 + 8) = v10;
}

void sub_248959990(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    unint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

id CreateAudioDSPManager()
{
  uint64_t v0 = get_adm_log_object();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_248947000, v0, OS_LOG_TYPE_DEFAULT, "creating AudioDSPManager...", v3, 2u);
  }

  uint64_t v1 = objc_opt_new();
  return v1;
}

BOOL adm::graph::isValid(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1)
  {
    adm_log_object = get_adm_log_object();
    BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v11 = 0;
    float v6 = "Kernel configuration is not valid - no input terminal formats";
    float v7 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v2 == v3)
  {
    adm_log_object = get_adm_log_object();
    BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    float v6 = "Kernel configuration is not valid - no output terminal formats";
    float v7 = (uint8_t *)&v10;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v1 - *a1) >> 3) != (uint64_t)(a1[7] - a1[6]) >> 3)
  {
    adm_log_object = get_adm_log_object();
    BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    float v6 = "Kernel configuration is not valid - number of input terminal formats and semantics don't match";
    float v7 = (uint8_t *)&v9;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v3 - v2) >> 3) == (uint64_t)(a1[10] - a1[9]) >> 3) {
    return 1;
  }
  adm_log_object = get_adm_log_object();
  BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __int16 v8 = 0;
    float v6 = "Kernel configuration is not valid - number of output terminal formats and semantics don't match";
    float v7 = (uint8_t *)&v8;
LABEL_14:
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  return result;
}

uint64_t adm::graph::isValid(uint64_t a1)
{
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  BOOL isValid = adm::graph::isValid((void *)a1);
  uint64_t result = 0;
  if (!isValid) {
    return result;
  }
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a1 + 216), &__ec);
  if (!buf[0] || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), buf[0] == 255) || !buf[0])
  {
    adm_log_object = get_adm_log_object();
    uint64_t result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      __int16 v9 = "Kernel configuration is not valid - '.dspg' file doesn't exist";
      goto LABEL_34;
    }
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(void *)(v5 + 8)) {
        goto LABEL_16;
      }
    }
    else if (!*(unsigned char *)(v5 + 23))
    {
      goto LABEL_16;
    }
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v5, &__ec);
    if (!buf[0] || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), buf[0] == 255) || !buf[0])
    {
      adm_log_object = get_adm_log_object();
      uint64_t result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        __int16 v9 = "Kernel configuration is not valid - '.austrip' file doesn't exist";
        goto LABEL_34;
      }
      return result;
    }
LABEL_16:
    v5 += 24;
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 252);
      if (v10 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      *(void *)buf = &v11;
      return ((uint64_t (*)(uint8_t *, uint64_t))off_26FCA1068[v10])(buf, a1 + 240);
    }
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8)) {
        goto LABEL_26;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_26;
    }
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v7, &__ec);
    if (!buf[0]) {
      break;
    }
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (buf[0] == 255 || !buf[0]) {
      break;
    }
LABEL_26:
    v7 += 24;
  }
  adm_log_object = get_adm_log_object();
  uint64_t result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  *(_WORD *)buf = 0;
  __int16 v9 = "Kernel configuration is not valid - '.propstrip' file doesn't exist";
LABEL_34:
  _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, v9, buf, 2u);
  return 0;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::isValid(adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v2 = *(_DWORD *)(a2 + 4) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  uint64_t v3 = !v2;
  if (v2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "Kernel configuration is not valid - expected maximum block size can't be 0", v6, 2u);
    }
  }
  return v3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::isValid(adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (!*a2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "Kernel configuration is not valid - block size can't be 0", v5, 2u);
    }
  }
  return v2 != 0;
}

BOOL adm::graph::operator==(std::__fs::filesystem::path *a1, uint64_t a2)
{
  if (!adm::graph::KernelConfiguration::operator==((uint64_t *)a1, (uint64_t *)a2)) {
    return 0;
  }
  int data = (const std::__fs::filesystem::path *)a1[6].__pn_.__r_.__value_.__l.__data_;
  std::string::size_type size = (const std::__fs::filesystem::path *)a1[6].__pn_.__r_.__value_.__l.__size_;
  uint64_t v7 = *(const std::string_view::value_type **)(a2 + 144);
  if ((char *)size - (char *)data != *(void *)(a2 + 152) - (void)v7) {
    return 0;
  }
  if (data != size)
  {
    do
    {
      v4.__data_ = v7;
      BOOL v8 = std::__fs::filesystem::operator==[abi:ne180100](data, v4);
      if (!v8) {
        break;
      }
      ++data;
      v7 += 24;
    }
    while (data != size);
    if (!v8) {
      return 0;
    }
  }
  __int16 v9 = (const std::__fs::filesystem::path *)a1[7].__pn_.__r_.__value_.__l.__data_;
  uint64_t v10 = (const std::__fs::filesystem::path *)a1[7].__pn_.__r_.__value_.__l.__size_;
  char v11 = *(const std::string_view::value_type **)(a2 + 168);
  if ((char *)v10 - (char *)v9 != *(void *)(a2 + 176) - (void)v11) {
    return 0;
  }
  if (v9 != v10)
  {
    do
    {
      v4.__data_ = v11;
      BOOL v12 = std::__fs::filesystem::operator==[abi:ne180100](v9, v4);
      if (!v12) {
        break;
      }
      ++v9;
      v11 += 24;
    }
    while (v9 != v10);
    if (!v12) {
      return 0;
    }
  }
  v4.__data_ = (const std::string_view::value_type *)(a2 + 216);
  return std::__fs::filesystem::operator==[abi:ne180100](a1 + 9, v4);
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

BOOL adm::graph::KernelConfiguration::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  while (v2 != v3)
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v2, v4);
    if (!result) {
      return result;
    }
    v2 += 40;
    v4 += 40;
  }
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a2[3];
  if (v9 - v8 != a2[4] - v10) {
    return 0;
  }
  while (v8 != v9)
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v8, v10);
    if (!result) {
      return result;
    }
    v8 += 40;
    v10 += 40;
  }
  BOOL v12 = (char *)a1[6];
  char v11 = (char *)a1[7];
  unint64_t v13 = (_DWORD *)a2[6];
  if (v11 - v12 != a2[7] - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*(_DWORD *)v12 != *v13) {
      return 0;
    }
    v12 += 8;
    v13 += 2;
  }
  std::string::value_type v15 = (char *)a1[9];
  uint64_t v14 = (char *)a1[10];
  unint64_t v16 = (_DWORD *)a2[9];
  if (v14 - v15 != a2[10] - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*(_DWORD *)v15 != *v16) {
      return 0;
    }
    v15 += 8;
    v16 += 2;
  }
  uint64_t v18 = a1[12];
  uint64_t v17 = a1[13];
  uint64_t v19 = a2[12];
  if (v17 - v18 != a2[13] - v19) {
    return 0;
  }
  while (v18 != v17)
  {
    if (*(_DWORD *)v18 != *(_DWORD *)v19 || *(float *)(v18 + 4) != *(float *)(v19 + 4)) {
      return 0;
    }
    v18 += 8;
    v19 += 8;
  }
  uint64_t v22 = a1[15];
  uint64_t v21 = a1[16];
  unint64_t v23 = (uint64_t *)a2[15];
  if (v21 - v22 != a2[16] - (void)v23) {
    return 0;
  }
  if (v22 == v21) {
    return 1;
  }
  uint64_t v24 = v22 + 16;
  do
  {
    uint64_t v25 = *v23;
    v23 += 2;
    BOOL result = *(void *)(v24 - 16) == v25;
    BOOL v26 = *(void *)(v24 - 16) != v25 || v24 == v21;
    v24 += 16;
  }
  while (!v26);
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

adm::graph::GraphBuilder *adm::graph::GraphBuilder::GraphBuilder(adm::graph::GraphBuilder *this, const SystemConfiguration *a2, const HostDescription *a3)
{
  uint64_t v5 = adm::SystemConfiguration::SystemConfiguration(this, a2);
  if (*((char *)&a3->mBundleID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v5 + 224), a3->mBundleID.__r_.__value_.var0.var1.__data_, a3->mBundleID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    long long v6 = *(_OWORD *)a3->mBundleID.__r_.__value_.var0.var0.__data_;
    *((void *)v5 + 30) = *((void *)&a3->mBundleID.__r_.__value_.var0.var1 + 2);
    *((_OWORD *)v5 + 14) = v6;
  }
  uint64_t v7 = (std::string *)((char *)this + 248);
  if (a3[1].mBundleID.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)&a3->mBundleID.__r_.var0, a3->mBundleID.var0);
  }
  else
  {
    long long v8 = *(_OWORD *)&a3->mBundleID.__r_.var0;
    *((void *)this + 33) = a3[1].mBundleID.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_24895A350(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*v2);
  }
  adm::SystemConfiguration::~SystemConfiguration((void **)v1);
  _Unwind_Resume(a1);
}

void adm::graph::GraphBuilder::buildGraph(adm::graph::GraphBuilder *this, const adm::ConfigurationChangeRequest *a2, uint64_t a3)
{
  uint64_t v559 = *MEMORY[0x263EF8340];
  long long v6 = (void *)(a3 + 8);
  if (adm::config_policy::isExclaveUseCase(a3 + 8))
  {
    if (*((char *)a2 + 247) >= 0) {
      size_t v7 = *((unsigned __int8 *)a2 + 247);
    }
    else {
      size_t v7 = *((void *)a2 + 29);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v521, v7 + 1);
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = &v521;
    }
    else {
      long long v8 = (std::string *)v521.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*((char *)a2 + 247) >= 0) {
        uint64_t v9 = (char *)a2 + 224;
      }
      else {
        uint64_t v9 = (char *)*((void *)a2 + 28);
      }
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
    BOOL v12 = (const std::string::value_type *)*((void *)a2 + 31);
    char v11 = (char *)a2 + 248;
    uint64_t v10 = v12;
    int v13 = v11[23];
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = v11[23];
    }
    else {
      std::string::size_type v15 = *((void *)v11 + 1);
    }
    unint64_t v16 = std::string::append(&v521, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v530[0].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v530[0].__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(v530, "_", 1uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v542.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v542.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v22 = std::string::append(&v542, (const std::string::value_type *)p_p, size);
    __s = (const std::string::value_type *)v22->__r_.__value_.__r.__words[0];
    std::string::size_type __sz = v22->__r_.__value_.__l.__size_;
    LODWORD(v557) = v22->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v557 + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2] + 3);
    int v497 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v542.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v530[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v530[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v521.__r_.__value_.__l.__data_);
    }
    if (v497 < 0)
    {
      std::string::__init_copy_ctor_external(&v521, __s, __sz);
    }
    else
    {
      v521.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v521.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v521.__r_.__value_.__r.__words[2]) = v557;
      *(_DWORD *)((char *)&v521.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v557 + 3);
      *((unsigned char *)&v521.__r_.__value_.__s + 23) = v497;
    }
    if (*(unsigned char *)(a3 + 164)) {
      int v42 = *(_DWORD *)(a3 + 160);
    }
    else {
      int v42 = 1024;
    }
    LODWORD(v522) = 1;
    HIDWORD(v522) = v42;
    std::string::basic_string[abi:ne180100]<0>(&v523, (char *)&unk_2489B2B19);
    long long v519 = 0uLL;
    v520[0] = 0;
    adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v518, (const ConfigurationChangeRequest *)a3);
    uint64_t v484 = (uint64_t)v6;
    v486 = this;
    unint64_t v43 = (adm::config_policy **)v518.__r_.__value_.__r.__words[0];
    uint64_t v500 = a3;
    std::string::size_type v502 = v518.__r_.__value_.__l.__size_;
    if (v518.__r_.__value_.__r.__words[0] != v518.__r_.__value_.__l.__size_)
    {
      int v44 = 0;
      uint64_t v45 = 0;
      v490 = 0;
      v491 = 0;
      int v514 = 0;
      uint64_t v494 = a3 + 32;
      int v46 = v497;
      while (1)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v542, (uint64_t)v43[1] + 32, "general");
        uint64_t v47 = v45;
        std::string::size_type v48 = HIBYTE(v542.__r_.__value_.__r.__words[2]);
        if ((v542.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v48 = v542.__r_.__value_.__l.__size_;
        }
        if (v48 == 7)
        {
          uint64_t v49 = (std::string *)v542.__r_.__value_.__r.__words[0];
          if ((v542.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v49 = &v542;
          }
          int data = (int)v49->__r_.__value_.__l.__data_;
          int v51 = *(_DWORD *)((char *)v49->__r_.__value_.__r.__words + 3);
          BOOL v52 = data == 1701733735 && v51 == 1818325605;
          int v53 = v52;
          if ((SHIBYTE(v542.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_91:
            if (!v53) {
              goto LABEL_99;
            }
            goto LABEL_92;
          }
        }
        else
        {
          int v53 = 0;
          if ((SHIBYTE(v542.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
        }
        operator delete(v542.__r_.__value_.__l.__data_);
        if (!v53)
        {
LABEL_99:
          if (std::operator==[abi:ne180100]<std::string,char [10]>((const void **)v43[1] + 4, "reference"))
          {
            v491 = *v43;
            if (v46 < 0)
            {
              std::string::__init_copy_ctor_external(&v542, __s, __sz);
            }
            else
            {
              v542.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
              v542.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v542.__r_.__value_.__r.__words[2]) = v557;
              *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v557 + 3);
              *((unsigned char *)&v542.__r_.__value_.__s + 23) = v46;
            }
            *(_DWORD *)v543 = 0;
            uint64_t v59 = v43[1];
            long long v61 = *((_OWORD *)v59 + 4);
            long long v60 = *((_OWORD *)v59 + 5);
            *(void *)&v543[40] = *((void *)v59 + 12);
            *(_OWORD *)&v543[8] = v61;
            *(_OWORD *)&v543[24] = v60;
            LODWORD(__p.__r_.__value_.__l.__data_) = 1;
            adm::graph::SemanticSet::SemanticSet(v544, (int *)&__p, 1);
            *(_DWORD *)&v544[8] = v44;
            *(void *)&v544[12] = 1;
            v544[24] = 0;
            v544[48] = 0;
            v545.__r_.__value_.__s.__data_[0] = 0;
            uint64_t v62 = *((void *)&v519 + 1);
            if (*((void *)&v519 + 1) >= v520[0])
            {
              unint64_t v63 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
              unint64_t v64 = v63 + 1;
              if (v63 + 1 > 0x1E1E1E1E1E1E1E1) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v64) {
                unint64_t v64 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
              }
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
                unint64_t v65 = 0x1E1E1E1E1E1E1E1;
              }
              else {
                unint64_t v65 = v64;
              }
              v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
              if (v65) {
                unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v65);
              }
              else {
                uint64_t v66 = 0;
              }
              std::string::size_type v100 = v65 + 136 * v63;
              v530[0].__r_.__value_.__r.__words[0] = v65;
              v530[0].__r_.__value_.__l.__size_ = v100;
              v530[1].__r_.__value_.__r.__words[0] = v65 + 136 * v66;
              long long v101 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
              *(void *)(v100 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v100 = v101;
              memset(&v542, 0, sizeof(v542));
              *(_OWORD *)(v100 + 24) = *(_OWORD *)v543;
              long long v102 = *(_OWORD *)&v543[16];
              long long v103 = *(_OWORD *)&v543[32];
              long long v104 = *(_OWORD *)v544;
              *(_DWORD *)(v100 + 88) = *(_DWORD *)&v544[16];
              *(_OWORD *)(v100 + 72) = v104;
              *(_OWORD *)(v100 + ++*(_DWORD *)(this + 56) = v103;
              *(_OWORD *)(v100 + 40) = v102;
              *(unsigned char *)(v100 + 96) = 0;
              *(unsigned char *)(v100 + 120) = 0;
              if (v544[48])
              {
                long long v105 = *(_OWORD *)&v544[24];
                *(void *)(v100 + 112) = *(void *)&v544[40];
                *(_OWORD *)(v100 + 96) = v105;
                memset(&v544[24], 0, 24);
                *(unsigned char *)(v100 + 120) = 1;
              }
              *(unsigned char *)(v65 + 136 * v63 + 128) = v545.__r_.__value_.__s.__data_[0];
              std::string::size_type v75 = v100 + 136;
              v530[0].__r_.__value_.__r.__words[2] = v100 + 136;
              unint64_t v106 = *((void *)&v519 + 1);
              uint64_t v107 = v519;
              std::string::size_type v108 = v530[0].__r_.__value_.__l.__size_;
              if (*((void *)&v519 + 1) != (void)v519)
              {
                uint64_t v109 = 0;
                do
                {
                  std::string::size_type v110 = v108 + v109;
                  uint64_t v111 = v106 + v109;
                  long long v112 = *(_OWORD *)(v106 + v109 - 136);
                  *(void *)(v110 - 120) = *(void *)(v106 + v109 - 120);
                  *(_OWORD *)(v110 - 136) = v112;
                  *(void *)(v111 - 128) = 0;
                  *(void *)(v111 - 120) = 0;
                  *(void *)(v111 - 136) = 0;
                  *(_OWORD *)(v110 - 112) = *(_OWORD *)(v106 + v109 - 112);
                  long long v113 = *(_OWORD *)(v106 + v109 - 96);
                  long long v114 = *(_OWORD *)(v106 + v109 - 80);
                  long long v115 = *(_OWORD *)(v106 + v109 - 64);
                  *(_DWORD *)(v110 - 48) = *(_DWORD *)(v106 + v109 - 48);
                  *(_OWORD *)(v110 - 80) = v114;
                  *(_OWORD *)(v110 - 64) = v115;
                  *(_OWORD *)(v110 - 96) = v113;
                  *(unsigned char *)(v108 + v109 - 40) = 0;
                  *(unsigned char *)(v110 - 16) = 0;
                  if (*(unsigned char *)(v106 + v109 - 16))
                  {
                    long long v116 = *(_OWORD *)(v111 - 40);
                    *(void *)(v108 + v109 - 24) = *(void *)(v111 - 24);
                    *(_OWORD *)(v108 + v109 - 40) = v116;
                    *(void *)(v111 - 32) = 0;
                    *(void *)(v111 - 24) = 0;
                    *(void *)(v111 - 40) = 0;
                    *(unsigned char *)(v110 - 16) = 1;
                  }
                  *(unsigned char *)(v110 - 8) = *(unsigned char *)(v111 - 8);
                  v109 -= 136;
                }
                while (v106 + v109 != v107);
                goto LABEL_161;
              }
LABEL_162:
              int64x2_t v131 = vdupq_n_s64(v106);
              goto LABEL_163;
            }
LABEL_118:
            long long v70 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
            *(void *)(v62 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v62 = v70;
            memset(&v542, 0, sizeof(v542));
            *(_OWORD *)(v62 + 24) = *(_OWORD *)v543;
            long long v72 = *(_OWORD *)&v543[32];
            long long v71 = *(_OWORD *)v544;
            int v73 = *(_DWORD *)&v544[16];
            *(_OWORD *)(v62 + 40) = *(_OWORD *)&v543[16];
            *(_DWORD *)(v62 + 88) = v73;
            *(_OWORD *)(v62 + 72) = v71;
            *(_OWORD *)(v62 + ++*(_DWORD *)(this + 56) = v72;
            *(unsigned char *)(v62 + 96) = 0;
            *(unsigned char *)(v62 + 120) = 0;
            if (v544[48])
            {
              long long v74 = *(_OWORD *)&v544[24];
              *(void *)(v62 + 112) = *(void *)&v544[40];
              *(_OWORD *)(v62 + 96) = v74;
              memset(&v544[24], 0, 24);
              *(unsigned char *)(v62 + 120) = 1;
            }
            *(unsigned char *)(v62 + 128) = v545.__r_.__value_.__s.__data_[0];
            std::string::size_type v75 = v62 + 136;
          }
          else
          {
            if (v46 < 0)
            {
              std::string::__init_copy_ctor_external(&v542, __s, __sz);
            }
            else
            {
              v542.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
              v542.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v542.__r_.__value_.__r.__words[2]) = v557;
              *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v557 + 3);
              *((unsigned char *)&v542.__r_.__value_.__s + 23) = v46;
            }
            *(_DWORD *)v543 = 0;
            uint64_t v67 = v43[1];
            long long v69 = *((_OWORD *)v67 + 4);
            long long v68 = *((_OWORD *)v67 + 5);
            *(void *)&v543[40] = *((void *)v67 + 12);
            *(_OWORD *)&v543[8] = v69;
            *(_OWORD *)&v543[24] = v68;
            LODWORD(__p.__r_.__value_.__l.__data_) = 2;
            adm::graph::SemanticSet::SemanticSet(v544, (int *)&__p, 1);
            *(_DWORD *)&v544[8] = v44;
            *(void *)&v544[12] = 1;
            v544[24] = 0;
            v544[48] = 0;
            v545.__r_.__value_.__s.__data_[0] = 0;
            uint64_t v62 = *((void *)&v519 + 1);
            if (*((void *)&v519 + 1) < v520[0]) {
              goto LABEL_118;
            }
            unint64_t v76 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
            unint64_t v77 = v76 + 1;
            if (v76 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v77) {
              unint64_t v77 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
            }
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
              unint64_t v78 = 0x1E1E1E1E1E1E1E1;
            }
            else {
              unint64_t v78 = v77;
            }
            v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
            if (v78) {
              unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v78);
            }
            else {
              uint64_t v79 = 0;
            }
            std::string::size_type v117 = v78 + 136 * v76;
            v530[0].__r_.__value_.__r.__words[0] = v78;
            v530[0].__r_.__value_.__l.__size_ = v117;
            v530[1].__r_.__value_.__r.__words[0] = v78 + 136 * v79;
            long long v118 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
            *(void *)(v117 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type v117 = v118;
            memset(&v542, 0, sizeof(v542));
            *(_OWORD *)(v117 + 24) = *(_OWORD *)v543;
            long long v119 = *(_OWORD *)&v543[16];
            long long v120 = *(_OWORD *)&v543[32];
            long long v121 = *(_OWORD *)v544;
            *(_DWORD *)(v117 + 88) = *(_DWORD *)&v544[16];
            *(_OWORD *)(v117 + 72) = v121;
            *(_OWORD *)(v117 + ++*(_DWORD *)(this + 56) = v120;
            *(_OWORD *)(v117 + 40) = v119;
            *(unsigned char *)(v117 + 96) = 0;
            *(unsigned char *)(v117 + 120) = 0;
            if (v544[48])
            {
              long long v122 = *(_OWORD *)&v544[24];
              *(void *)(v117 + 112) = *(void *)&v544[40];
              *(_OWORD *)(v117 + 96) = v122;
              memset(&v544[24], 0, 24);
              *(unsigned char *)(v117 + 120) = 1;
            }
            *(unsigned char *)(v78 + 136 * v76 + 128) = v545.__r_.__value_.__s.__data_[0];
            std::string::size_type v75 = v117 + 136;
            v530[0].__r_.__value_.__r.__words[2] = v117 + 136;
            unint64_t v106 = *((void *)&v519 + 1);
            uint64_t v123 = v519;
            std::string::size_type v108 = v530[0].__r_.__value_.__l.__size_;
            if (*((void *)&v519 + 1) == (void)v519) {
              goto LABEL_162;
            }
            uint64_t v109 = 0;
            do
            {
              std::string::size_type v124 = v108 + v109;
              uint64_t v125 = v106 + v109;
              long long v126 = *(_OWORD *)(v106 + v109 - 136);
              *(void *)(v124 - 120) = *(void *)(v106 + v109 - 120);
              *(_OWORD *)(v124 - 136) = v126;
              *(void *)(v125 - 128) = 0;
              *(void *)(v125 - 120) = 0;
              *(void *)(v125 - 136) = 0;
              *(_OWORD *)(v124 - 112) = *(_OWORD *)(v106 + v109 - 112);
              long long v127 = *(_OWORD *)(v106 + v109 - 96);
              long long v128 = *(_OWORD *)(v106 + v109 - 80);
              long long v129 = *(_OWORD *)(v106 + v109 - 64);
              *(_DWORD *)(v124 - 48) = *(_DWORD *)(v106 + v109 - 48);
              *(_OWORD *)(v124 - 80) = v128;
              *(_OWORD *)(v124 - 64) = v129;
              *(_OWORD *)(v124 - 96) = v127;
              *(unsigned char *)(v108 + v109 - 40) = 0;
              *(unsigned char *)(v124 - 16) = 0;
              if (*(unsigned char *)(v106 + v109 - 16))
              {
                long long v130 = *(_OWORD *)(v125 - 40);
                *(void *)(v108 + v109 - 24) = *(void *)(v125 - 24);
                *(_OWORD *)(v108 + v109 - 40) = v130;
                *(void *)(v125 - 32) = 0;
                *(void *)(v125 - 24) = 0;
                *(void *)(v125 - 40) = 0;
                *(unsigned char *)(v124 - 16) = 1;
              }
              *(unsigned char *)(v124 - 8) = *(unsigned char *)(v125 - 8);
              v109 -= 136;
            }
            while (v106 + v109 != v123);
LABEL_161:
            v108 += v109;
            int64x2_t v131 = (int64x2_t)v519;
            std::string::size_type v75 = v530[0].__r_.__value_.__r.__words[2];
LABEL_163:
            *(void *)&long long v519 = v108;
            *((void *)&v519 + 1) = v75;
            *(int64x2_t *)&v530[0].__r_.__value_.__r.__words[1] = v131;
            std::string::size_type v132 = v520[0];
            v520[0] = v530[1].__r_.__value_.__l.__data_;
            v530[1].__r_.__value_.__r.__words[0] = v132;
            v530[0].__r_.__value_.__r.__words[0] = v131.i64[0];
            std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v530);
          }
          *((void *)&v519 + 1) = v75;
          if (v544[48] && (v544[47] & 0x80000000) != 0) {
            operator delete(*(void **)&v544[24]);
          }
          uint64_t v45 = v47;
          if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v542.__r_.__value_.__l.__data_);
          }
          goto LABEL_198;
        }
LABEL_92:
        uint64_t v54 = v43[1];
        uint64_t v55 = (uint64_t)v54 + 64;
        long long v56 = *((_OWORD *)v54 + 5);
        *(_OWORD *)&v530[0].__r_.__value_.__l.__data_ = *((_OWORD *)v54 + 4);
        *(_OWORD *)&v530[0].__r_.__value_.__r.__words[2] = v56;
        v530[1].__r_.__value_.__l.__size_ = *((void *)v54 + 12);
        uint64_t v57 = v494;
        if (!*(unsigned char *)(v500 + 72)) {
          uint64_t v57 = v55;
        }
        long long v58 = *(_OWORD *)(v57 + 16);
        *(_OWORD *)&v530[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v57;
        *(_OWORD *)&v530[2].__r_.__value_.__r.__words[1] = v58;
        *(void *)&long long v531 = *(void *)(v57 + 32);
        if (v514)
        {
          uint64_t v45 = v47;
          if ((v46 & 0x80000000) == 0) {
            goto LABEL_176;
          }
        }
        else
        {
          v490 = *v43;
          if (v46 < 0)
          {
            std::string::__init_copy_ctor_external(&v542, __s, __sz);
          }
          else
          {
            v542.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
            v542.__r_.__value_.__l.__size_ = __sz;
            LODWORD(v542.__r_.__value_.__r.__words[2]) = v557;
            *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v557 + 3);
            *((unsigned char *)&v542.__r_.__value_.__s + 23) = v46;
          }
          *(_DWORD *)v543 = 1;
          *(_OWORD *)&v543[8] = *(_OWORD *)&v530[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v543[24] = *(_OWORD *)&v530[2].__r_.__value_.__r.__words[1];
          *(void *)&v543[40] = v531;
          *(void *)v544 = 0;
          *(_DWORD *)&v544[8] = v47;
          *(void *)&v544[12] = 1;
          v544[24] = 0;
          v544[48] = 0;
          v545.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v80 = *((void *)&v519 + 1);
          if (*((void *)&v519 + 1) >= v520[0])
          {
            unint64_t v81 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
            unint64_t v82 = v81 + 1;
            if (v81 + 1 > 0x1E1E1E1E1E1E1E1) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v82) {
              unint64_t v82 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
            }
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
              unint64_t v83 = 0x1E1E1E1E1E1E1E1;
            }
            else {
              unint64_t v83 = v82;
            }
            v529 = v520;
            unint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v83);
            std::string::size_type v85 = (std::string::size_type)&v84[136 * v81];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
            __p.__r_.__value_.__l.__size_ = v85;
            v528 = &v84[136 * v86];
            *(std::string *)std::string::size_type v85 = v542;
            memset(&v542, 0, sizeof(v542));
            *(_OWORD *)(v85 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
            *(_OWORD *)(v85 + 72) = *(_OWORD *)v544;
            *(_DWORD *)(v85 + 88) = *(_DWORD *)&v544[16];
            *(_OWORD *)(v85 + 40) = *(_OWORD *)&v543[16];
            *(_OWORD *)(v85 + 24) = *(_OWORD *)v543;
            *(unsigned char *)(v85 + 96) = 0;
            *(unsigned char *)(v85 + 120) = 0;
            std::string::size_type v88 = *((void *)&v519 + 1);
            std::string::size_type v87 = v519;
            std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
            *(unsigned char *)(v85 + 128) = 0;
            std::string::size_type v90 = v85 + 136;
            __p.__r_.__value_.__r.__words[2] = v85 + 136;
            if (v88 == v87)
            {
              int v99 = 0;
            }
            else
            {
              uint64_t v91 = 0;
              do
              {
                std::string::size_type v92 = v89 + v91;
                std::string::size_type v93 = v88 + v91;
                long long v94 = *(_OWORD *)(v88 + v91 - 136);
                *(void *)(v92 - 120) = *(void *)(v88 + v91 - 120);
                *(_OWORD *)(v92 - 136) = v94;
                *(void *)(v93 - 128) = 0;
                *(void *)(v93 - 120) = 0;
                *(void *)(v93 - 136) = 0;
                *(_OWORD *)(v92 - 112) = *(_OWORD *)(v88 + v91 - 112);
                long long v95 = *(_OWORD *)(v88 + v91 - 96);
                long long v96 = *(_OWORD *)(v88 + v91 - 80);
                long long v97 = *(_OWORD *)(v88 + v91 - 64);
                *(_DWORD *)(v92 - 48) = *(_DWORD *)(v88 + v91 - 48);
                *(_OWORD *)(v92 - 80) = v96;
                *(_OWORD *)(v92 - 64) = v97;
                *(_OWORD *)(v92 - 96) = v95;
                *(unsigned char *)(v89 + v91 - 40) = 0;
                *(unsigned char *)(v92 - 16) = 0;
                if (*(unsigned char *)(v88 + v91 - 16))
                {
                  long long v98 = *(_OWORD *)(v93 - 40);
                  *(void *)(v89 + v91 - 24) = *(void *)(v93 - 24);
                  *(_OWORD *)(v89 + v91 - 40) = v98;
                  *(void *)(v93 - 32) = 0;
                  *(void *)(v93 - 24) = 0;
                  *(void *)(v93 - 40) = 0;
                  *(unsigned char *)(v92 - 16) = 1;
                }
                *(unsigned char *)(v92 - 8) = *(unsigned char *)(v93 - 8);
                v91 -= 136;
              }
              while (v88 + v91 != v87);
              v89 += v91;
              std::string::size_type v88 = *((void *)&v519 + 1);
              std::string::size_type v87 = v519;
              std::string::size_type v90 = __p.__r_.__value_.__r.__words[2];
              int v99 = v544[48];
            }
            *(void *)&long long v519 = v89;
            *((void *)&v519 + 1) = v90;
            int v133 = (char *)v520[0];
            v520[0] = v528;
            __p.__r_.__value_.__r.__words[2] = v88;
            v528 = v133;
            __p.__r_.__value_.__r.__words[0] = v87;
            __p.__r_.__value_.__l.__size_ = v87;
            std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
            *((void *)&v519 + 1) = v90;
            uint64_t v45 = (v47 + 1);
            if (v99 && (v544[47] & 0x80000000) != 0) {
              operator delete(*(void **)&v544[24]);
            }
            int v46 = v497;
          }
          else
          {
            **((_OWORD **)&v519 + 1) = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
            *(void *)(v80 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
            memset(&v542, 0, sizeof(v542));
            *(_OWORD *)(v80 + 40) = *(_OWORD *)&v543[16];
            *(_OWORD *)(v80 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
            *(_OWORD *)(v80 + 72) = *(_OWORD *)v544;
            *(_DWORD *)(v80 + 88) = *(_DWORD *)&v544[16];
            *(_OWORD *)(v80 + 24) = *(_OWORD *)v543;
            *(unsigned char *)(v80 + 96) = 0;
            *(unsigned char *)(v80 + 120) = 0;
            *(unsigned char *)(v80 + 128) = 0;
            *((void *)&v519 + 1) = v80 + 136;
            uint64_t v45 = (v47 + 1);
          }
          if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v542.__r_.__value_.__l.__data_);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_176:
              v542.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
              v542.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v542.__r_.__value_.__r.__words[2]) = v557;
              *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v557 + 3);
              *((unsigned char *)&v542.__r_.__value_.__s + 23) = v46;
              goto LABEL_177;
            }
          }
          else if ((v46 & 0x80000000) == 0)
          {
            goto LABEL_176;
          }
        }
        std::string::__init_copy_ctor_external(&v542, __s, __sz);
LABEL_177:
        *(_DWORD *)v543 = 0;
        *(_OWORD *)&v543[8] = *(_OWORD *)&v530[0].__r_.__value_.__l.__data_;
        *(_OWORD *)&v543[24] = *(_OWORD *)&v530[0].__r_.__value_.__r.__words[2];
        *(void *)&v543[40] = v530[1].__r_.__value_.__l.__size_;
        *(void *)v544 = 0;
        *(_DWORD *)&v544[8] = v44;
        *(void *)&v544[12] = 1;
        v544[24] = 0;
        v544[48] = 0;
        v545.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v134 = *((void *)&v519 + 1);
        if (*((void *)&v519 + 1) >= v520[0])
        {
          uint64_t v135 = v45;
          unint64_t v136 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
          unint64_t v137 = v136 + 1;
          if (v136 + 1 > 0x1E1E1E1E1E1E1E1) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v137) {
            unint64_t v137 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
          }
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
            unint64_t v138 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v138 = v137;
          }
          v529 = v520;
          uint64_t v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v138);
          std::string::size_type v140 = (std::string::size_type)&v139[136 * v136];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
          __p.__r_.__value_.__l.__size_ = v140;
          v528 = &v139[136 * v141];
          *(std::string *)std::string::size_type v140 = v542;
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v140 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v140 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v140 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v140 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v140 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v140 + 96) = 0;
          *(unsigned char *)(v140 + 120) = 0;
          std::string::size_type v143 = *((void *)&v519 + 1);
          std::string::size_type v142 = v519;
          std::string::size_type v144 = __p.__r_.__value_.__l.__size_;
          *(unsigned char *)(v140 + 128) = 0;
          std::string::size_type v145 = v140 + 136;
          __p.__r_.__value_.__r.__words[2] = v140 + 136;
          if (v143 == v142)
          {
            int v154 = 0;
          }
          else
          {
            uint64_t v146 = 0;
            do
            {
              std::string::size_type v147 = v144 + v146;
              std::string::size_type v148 = v143 + v146;
              long long v149 = *(_OWORD *)(v143 + v146 - 136);
              *(void *)(v147 - 120) = *(void *)(v143 + v146 - 120);
              *(_OWORD *)(v147 - 136) = v149;
              *(void *)(v148 - 128) = 0;
              *(void *)(v148 - 120) = 0;
              *(void *)(v148 - 136) = 0;
              *(_OWORD *)(v147 - 112) = *(_OWORD *)(v143 + v146 - 112);
              long long v150 = *(_OWORD *)(v143 + v146 - 96);
              long long v151 = *(_OWORD *)(v143 + v146 - 80);
              long long v152 = *(_OWORD *)(v143 + v146 - 64);
              *(_DWORD *)(v147 - 48) = *(_DWORD *)(v143 + v146 - 48);
              *(_OWORD *)(v147 - 80) = v151;
              *(_OWORD *)(v147 - 64) = v152;
              *(_OWORD *)(v147 - 96) = v150;
              *(unsigned char *)(v144 + v146 - 40) = 0;
              *(unsigned char *)(v147 - 16) = 0;
              if (*(unsigned char *)(v143 + v146 - 16))
              {
                long long v153 = *(_OWORD *)(v148 - 40);
                *(void *)(v144 + v146 - 24) = *(void *)(v148 - 24);
                *(_OWORD *)(v144 + v146 - 40) = v153;
                *(void *)(v148 - 32) = 0;
                *(void *)(v148 - 24) = 0;
                *(void *)(v148 - 40) = 0;
                *(unsigned char *)(v147 - 16) = 1;
              }
              *(unsigned char *)(v147 - 8) = *(unsigned char *)(v148 - 8);
              v146 -= 136;
            }
            while (v143 + v146 != v142);
            v144 += v146;
            std::string::size_type v143 = *((void *)&v519 + 1);
            std::string::size_type v142 = v519;
            std::string::size_type v145 = __p.__r_.__value_.__r.__words[2];
            int v154 = v544[48];
          }
          *(void *)&long long v519 = v144;
          *((void *)&v519 + 1) = v145;
          char v155 = (char *)v520[0];
          v520[0] = v528;
          __p.__r_.__value_.__r.__words[2] = v143;
          v528 = v155;
          __p.__r_.__value_.__r.__words[0] = v142;
          __p.__r_.__value_.__l.__size_ = v142;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((void *)&v519 + 1) = v145;
          uint64_t v45 = v135;
          if (v154 && (v544[47] & 0x80000000) != 0) {
            operator delete(*(void **)&v544[24]);
          }
        }
        else
        {
          **((_OWORD **)&v519 + 1) = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
          *(void *)(v134 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v134 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v134 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v134 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v134 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v134 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v134 + 96) = 0;
          *(unsigned char *)(v134 + 120) = 0;
          *(unsigned char *)(v134 + 128) = 0;
          *((void *)&v519 + 1) = v134 + 136;
        }
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        ++v514;
        int v46 = v497;
LABEL_198:
        ++v44;
        v43 += 3;
        if (v43 == (adm::config_policy **)v502) {
          goto LABEL_203;
        }
      }
    }
    v490 = 0;
    v491 = 0;
    int v46 = v497;
LABEL_203:
    std::string::basic_string[abi:ne180100]<0>(&v542, "isolated audio siri");
    uint64_t v156 = (uint64_t)v486;
    int v158 = std::__tree<std::string>::find<std::string>(v484, &v542);
    unint64_t v159 = (void *)(v500 + 16);
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v542.__r_.__value_.__l.__data_);
    }
    if (v159 != v158)
    {
      int v160 = 1;
      int v161 = 1;
      goto LABEL_544;
    }
    std::string::basic_string[abi:ne180100]<0>(&v542, "isolated audio muted talker detection");
    v162 = std::__tree<std::string>::find<std::string>(v484, &v542);
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v542.__r_.__value_.__l.__data_);
    }
    if (v159 == v162)
    {
      std::string::basic_string[abi:ne180100]<0>(&v542, "isolated audio sound analysis");
      v264 = std::__tree<std::string>::find<std::string>(v484, &v542);
      if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v542.__r_.__value_.__l.__data_);
      }
      if (v159 == v264)
      {
        std::string::basic_string[abi:ne180100]<0>(&v542, "isolated audio perception");
        v361 = std::__tree<std::string>::find<std::string>(v484, &v542);
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        if (v159 == v361)
        {
          std::string::basic_string[abi:ne180100]<0>(&v542, "isolated audio shared DSP");
          v416 = std::__tree<std::string>::find<std::string>(v484, &v542);
          if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v542.__r_.__value_.__l.__data_);
          }
          if (v159 == v416)
          {
            adm_log_object = get_adm_log_object();
            if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v542.__r_.__value_.__l.__data_) = 0;
              _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "unsupported configuration: useCase", (uint8_t *)&v542, 2u);
            }
            int v160 = 0;
            int v161 = 0;
LABEL_544:
            int v417 = 1886216704;
            if (v490 && adm::config_policy::isBuiltInMicrophoneDevice(v490, v157))
            {
              int v417 = 1886216809;
              int v420 = 1;
            }
            else
            {
              v421 = get_adm_log_object();
              if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v542.__r_.__value_.__l.__data_) = 0;
                _os_log_error_impl(&dword_248947000, v421, OS_LOG_TYPE_ERROR, "unsupported configuration: inputPort", (uint8_t *)&v542, 2u);
              }
              int v420 = 0;
            }
            int v516 = v161;
            int __szd = v417;
            if (!v491) {
              goto LABEL_579;
            }
            int v422 = *((_DWORD *)v491 + 16);
            if (v422 <= 1651275108)
            {
              if (v422 == 1634300528)
              {
                int v423 = 1885433856;
                int v424 = 115;
                goto LABEL_569;
              }
              if (v422 != 1651271009)
              {
                if (v422 == 1651274862)
                {
                  if (adm::config_policy::isBuiltInSpeakerDevice(v491, v418))
                  {
                    int v423 = 1886613504;
                    int v424 = 107;
                    goto LABEL_569;
                  }
                  if (*((_DWORD *)v491 + 18) == 1751412846)
                  {
                    int v423 = 1885892608;
                    int v424 = 119;
                    goto LABEL_569;
                  }
                  uint64_t v426 = *((unsigned __int8 *)v491 + 23);
                  int v427 = (char)v426;
                  if ((v426 & 0x80u) != 0) {
                    uint64_t v426 = *((void *)v491 + 1);
                  }
                  if (v426 == 8)
                  {
                    v428 = v427 >= 0 ? v491 : *(adm::config_policy **)v491;
                    if (*(void *)v428 == 0x7265766965636552)
                    {
                      int v423 = 1886545152;
                      int v424 = 99;
                      goto LABEL_569;
                    }
                  }
                }
LABEL_579:
                v429 = get_adm_log_object();
                if (os_log_type_enabled(v429, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v542.__r_.__value_.__l.__data_) = 0;
                  _os_log_error_impl(&dword_248947000, v429, OS_LOG_TYPE_ERROR, "unsupported configuration: outputPort", (uint8_t *)&v542, 2u);
                }
                int v425 = 0;
                int v424 = 0;
                int v423 = 0;
                goto LABEL_582;
              }
              int v423 = 1886151936;
            }
            else
            {
              if (v422 <= 1751412072)
              {
                if (v422 == 1651275109)
                {
                  int v424 = 66;
                  int v425 = 1;
                  int v423 = 1885892608;
                  goto LABEL_582;
                }
                if (v422 == 1685090932)
                {
                  int v423 = 1885631232;
                  int v424 = 112;
LABEL_569:
                  int v425 = 1;
LABEL_582:
                  unsigned int v430 = v423 | v424;
                  if (v491)
                  {
                    if (v425)
                    {
                      v432 = get_adm_log_object();
                      if (os_log_type_enabled(v432, OS_LOG_TYPE_DEFAULT))
                      {
                        std::string::size_type v433 = (std::string::size_type)v491;
                        if (*((char *)v491 + 23) < 0) {
                          std::string::size_type v433 = *(void *)v491;
                        }
                        v434 = (void *)((char *)v491 + 24);
                        if (*((char *)v491 + 47) < 0) {
                          v434 = (void *)*v434;
                        }
                        unsigned int v435 = *((_DWORD *)v491 + 16);
                        int v436 = bswap32(v435);
                        *(_DWORD *)((char *)&v542.__r_.__value_.__l.__data_ + 1) = v436;
                        if (((char)v436 - 32) > 0x5E
                          || (((__int16)v436 >> 8) - 32) > 0x5E
                          || ((v436 << 8 >> 24) - 32) > 0x5E
                          || ((v436 >> 24) - 32) > 0x5E)
                        {
                          std::to_string(v530, v435);
                        }
                        else
                        {
                          *(_WORD *)((char *)v542.__r_.__value_.__r.__words + 5) = 39;
                          v542.__r_.__value_.__s.__data_[0] = 39;
                          std::string::basic_string[abi:ne180100]<0>(v530, (char *)&v542);
                        }
                        if ((v530[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v437 = v530;
                        }
                        else {
                          v437 = (std::string *)v530[0].__r_.__value_.__r.__words[0];
                        }
                        int v438 = *((_DWORD *)v491 + 18);
                        unsigned int v439 = bswap32(v430);
                        *(_DWORD *)((char *)&v542.__r_.__value_.__l.__data_ + 1) = v439;
                        if ((v439 & 0x70) - 32 > 0x5E
                          || ((v439 >> 8) & 0x7F) - 32 > 0x5E
                          || (HIWORD(v439) & 0x77) - 32 > 0x5Eu
                          || HIBYTE(v439) - 32 > 0x5Eu)
                        {
                          std::to_string(&__p, v430);
                        }
                        else
                        {
                          *(_WORD *)((char *)v542.__r_.__value_.__r.__words + 5) = 39;
                          v542.__r_.__value_.__s.__data_[0] = 39;
                          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&v542);
                        }
                        v440 = &__p;
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          v440 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        }
                        LODWORD(v542.__r_.__value_.__l.__data_) = 136316162;
                        *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = v433;
                        WORD2(v542.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&v542.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v434;
                        HIWORD(v542.__r_.__value_.__r.__words[2]) = 2080;
                        *(void *)v543 = v437;
                        *(_WORD *)&v543[8] = 1024;
                        *(_DWORD *)&v543[10] = v438;
                        *(_WORD *)&v543[14] = 2080;
                        *(void *)&v543[16] = v440;
                        _os_log_impl(&dword_248947000, v432, OS_LOG_TYPE_DEFAULT, "mapped { deviceUID '%s', modelUID '%s', transportType %s, outputDataSource %d } -> output port type %s", (uint8_t *)&v542, 0x30u);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        uint64_t v156 = (uint64_t)v486;
                        int v46 = v497;
                        if (SHIBYTE(v530[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v530[0].__r_.__value_.__l.__data_);
                        }
                      }
                    }
                  }
                  if (v160 & v420 & v425)
                  {
                    *(_OWORD *)&v542.__r_.__value_.__l.__data_ = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
                    memset(&v521, 0, sizeof(v521));
                    v542.__r_.__value_.__r.__words[2] = v521.__r_.__value_.__r.__words[2];
                    *(void *)v543 = v522;
                    *(_OWORD *)&v543[8] = v523;
                    uint64_t v441 = v524;
                    long long v523 = 0uLL;
                    uint64_t v524 = 0;
                    *(_OWORD *)&v543[32] = v519;
                    *(void *)&v543[24] = v441;
                    *(void *)v544 = v520[0];
                    long long v519 = 0uLL;
                    v520[0] = 0;
                    *(_DWORD *)&v544[8] = v516;
                    *(_DWORD *)&v544[12] = __szd;
                    *(_DWORD *)&v544[16] = v430;
                    *(_DWORD *)&v544[20] = isHighLatencyRoute;
                    int v556 = 2;
                    caulk::expected<adm::graph::GraphDescription,std::error_code>::expected(v156, (long long *)&v542);
                    std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v544[8]);
                    v530[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v543[32];
                    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)v530);
                    if ((v543[31] & 0x80000000) != 0) {
                      operator delete(*(void **)&v543[8]);
                    }
                    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v542.__r_.__value_.__l.__data_);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v156 = 1969448551;
                    *(unsigned char *)(v156 + 312) = 0;
                  }
                  if (v518.__r_.__value_.__r.__words[0]) {
                    operator delete(v518.__r_.__value_.__l.__data_);
                  }
                  v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v519;
                  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
                  if (SHIBYTE(v524) < 0) {
                    operator delete((void *)v523);
                  }
                  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v521.__r_.__value_.__l.__data_);
                    if ((v46 & 0x80000000) == 0) {
                      return;
                    }
                  }
                  else if ((v46 & 0x80000000) == 0)
                  {
                    return;
                  }
                  uint64_t v24 = (std::string::value_type *)__s;
                  goto LABEL_705;
                }
                goto LABEL_579;
              }
              if (v422 == 1751412073)
              {
                int v423 = 1885889536;
                int v424 = 109;
                goto LABEL_569;
              }
              if (v422 != 1970496032) {
                goto LABEL_579;
              }
              int v423 = 1886745344;
            }
            int v424 = 111;
            goto LABEL_569;
          }
          int v161 = 4;
        }
        else
        {
          int v161 = 3;
        }
      }
      else
      {
        int v161 = 2;
      }
    }
    else
    {
      int v161 = 0;
    }
    int v160 = 1;
    goto LABEL_544;
  }
  std::string::basic_string[abi:ne180100]<0>(&v542, "voice isolation conferencing");
  unint64_t v23 = std::__tree<std::string>::find<std::string>((uint64_t)v6, &v542);
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v542.__r_.__value_.__l.__data_);
  }
  if ((void *)(a3 + 16) == v23)
  {
    v489 = v23;
    if (*((char *)a2 + 247) >= 0) {
      size_t v28 = *((unsigned __int8 *)a2 + 247);
    }
    else {
      size_t v28 = *((void *)a2 + 29);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v521, v28 + 1);
    if ((v521.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v29 = &v521;
    }
    else {
      unint64_t v29 = (std::string *)v521.__r_.__value_.__r.__words[0];
    }
    if (v28)
    {
      if (*((char *)a2 + 247) >= 0) {
        unint64_t v30 = (char *)a2 + 224;
      }
      else {
        unint64_t v30 = (char *)*((void *)a2 + 28);
      }
      memmove(v29, v30, v28);
    }
    *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 95;
    int v31 = *((char *)a2 + 271);
    if (v31 >= 0) {
      uint64_t v32 = (char *)a2 + 248;
    }
    else {
      uint64_t v32 = (const std::string::value_type *)*((void *)a2 + 31);
    }
    if (v31 >= 0) {
      std::string::size_type v33 = *((unsigned __int8 *)a2 + 271);
    }
    else {
      std::string::size_type v33 = *((void *)a2 + 32);
    }
    uint64_t v34 = std::string::append(&v521, v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v530[0].__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v530[0].__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    unint64_t v36 = std::string::append(v530, "_", 1uLL);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v542.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v542.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &__p;
    }
    else {
      unint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v40 = std::string::append(&v542, (const std::string::value_type *)v38, v39);
    v513 = (const std::string::value_type *)v40->__r_.__value_.__r.__words[0];
    std::string::size_type __sza = v40->__r_.__value_.__l.__size_;
    v525[0] = v40->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v525 + 3) = *(_DWORD *)((char *)&v40->__r_.__value_.__r.__words[2] + 3);
    int v41 = SHIBYTE(v40->__r_.__value_.__r.__words[2]);
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v542.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v530[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v530[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v521.__r_.__value_.__l.__data_);
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_72;
      }
    }
    else if ((v41 & 0x80000000) == 0)
    {
LABEL_72:
      v521.__r_.__value_.__r.__words[0] = (std::string::size_type)v513;
      v521.__r_.__value_.__l.__size_ = __sza;
      LODWORD(v521.__r_.__value_.__r.__words[2]) = v525[0];
      *(_DWORD *)((char *)&v521.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v525 + 3);
      *((unsigned char *)&v521.__r_.__value_.__s + 23) = v41;
      goto LABEL_221;
    }
    std::string::__init_copy_ctor_external(&v521, v513, __sza);
LABEL_221:
    v492 = a2;
    v485 = v6;
    if (*(unsigned char *)(a3 + 164)) {
      int v173 = *(_DWORD *)(a3 + 160);
    }
    else {
      int v173 = 1024;
    }
    LODWORD(v522) = 1;
    HIDWORD(v522) = v173;
    int __sb = v41;
    v483 = std::string::basic_string[abi:ne180100]<0>(&v523, (char *)&unk_2489B2B19);
    v487 = this;
    long long v519 = 0uLL;
    v520[0] = 0;
    adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v518, (const ConfigurationChangeRequest *)a3);
    std::string::size_type v504 = v518.__r_.__value_.__l.__size_;
    std::string::size_type v174 = v518.__r_.__value_.__r.__words[0];
    if (v518.__r_.__value_.__r.__words[0] != v518.__r_.__value_.__l.__size_)
    {
      int v175 = 0;
      int v176 = 0;
      do
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v542, *(void *)(v174 + 8) + 32, "general");
        std::string::size_type v177 = HIBYTE(v542.__r_.__value_.__r.__words[2]);
        if ((v542.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v177 = v542.__r_.__value_.__l.__size_;
        }
        if (v177 == 7)
        {
          v178 = (std::string *)v542.__r_.__value_.__r.__words[0];
          if ((v542.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v178 = &v542;
          }
          int v179 = (int)v178->__r_.__value_.__l.__data_;
          int v180 = *(_DWORD *)((char *)v178->__r_.__value_.__r.__words + 3);
          BOOL v182 = v179 == 1701733735 && v180 == 1818325605;
          if ((SHIBYTE(v542.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_238:
            if (!v182) {
              goto LABEL_245;
            }
            goto LABEL_239;
          }
        }
        else
        {
          BOOL v182 = 0;
          if ((SHIBYTE(v542.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_238;
          }
        }
        operator delete(v542.__r_.__value_.__l.__data_);
        if (!v182)
        {
LABEL_245:
          if (std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*(void *)(v174 + 8) + 32), "reference"))
          {
            if (__sb < 0)
            {
              std::string::__init_copy_ctor_external(&v542, v513, __sza);
            }
            else
            {
              v542.__r_.__value_.__r.__words[0] = (std::string::size_type)v513;
              v542.__r_.__value_.__l.__size_ = __sza;
              LODWORD(v542.__r_.__value_.__r.__words[2]) = v525[0];
              *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v525 + 3);
              *((unsigned char *)&v542.__r_.__value_.__s + 23) = __sb;
            }
            *(_DWORD *)v543 = 0;
            uint64_t v208 = *(void *)(v174 + 8);
            long long v210 = *(_OWORD *)(v208 + 64);
            long long v209 = *(_OWORD *)(v208 + 80);
            *(void *)&v543[40] = *(void *)(v208 + 96);
            *(_OWORD *)&v543[8] = v210;
            *(_OWORD *)&v543[24] = v209;
            LODWORD(__p.__r_.__value_.__l.__data_) = 1;
            adm::graph::SemanticSet::SemanticSet(v544, (int *)&__p, 1);
            *(_DWORD *)&v544[8] = v175;
            *(void *)&v544[12] = 1;
            v544[24] = 0;
            v544[48] = 0;
            v545.__r_.__value_.__s.__data_[0] = 0;
            uint64_t v211 = *((void *)&v519 + 1);
            if (*((void *)&v519 + 1) >= v520[0])
            {
              unint64_t v218 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
              unint64_t v219 = v218 + 1;
              if (v218 + 1 > 0x1E1E1E1E1E1E1E1) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v219) {
                unint64_t v219 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
              }
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
                unint64_t v220 = 0x1E1E1E1E1E1E1E1;
              }
              else {
                unint64_t v220 = v219;
              }
              v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
              if (v220) {
                unint64_t v220 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v220);
              }
              else {
                uint64_t v221 = 0;
              }
              std::string::size_type v244 = v220 + 136 * v218;
              v530[0].__r_.__value_.__r.__words[0] = v220;
              v530[0].__r_.__value_.__l.__size_ = v244;
              v530[1].__r_.__value_.__r.__words[0] = v220 + 136 * v221;
              long long v245 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
              *(void *)(v244 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v244 = v245;
              memset(&v542, 0, sizeof(v542));
              *(_OWORD *)(v244 + 24) = *(_OWORD *)v543;
              long long v246 = *(_OWORD *)&v543[16];
              long long v247 = *(_OWORD *)&v543[32];
              long long v248 = *(_OWORD *)v544;
              *(_DWORD *)(v244 + 88) = *(_DWORD *)&v544[16];
              *(_OWORD *)(v244 + 72) = v248;
              *(_OWORD *)(v244 + ++*(_DWORD *)(this + 56) = v247;
              *(_OWORD *)(v244 + 40) = v246;
              *(unsigned char *)(v244 + 96) = 0;
              *(unsigned char *)(v244 + 120) = 0;
              if (v544[48])
              {
                long long v249 = *(_OWORD *)&v544[24];
                *(void *)(v244 + 112) = *(void *)&v544[40];
                *(_OWORD *)(v244 + 96) = v249;
                memset(&v544[24], 0, 24);
                *(unsigned char *)(v244 + 120) = 1;
              }
              *(unsigned char *)(v220 + 136 * v218 + 128) = v545.__r_.__value_.__s.__data_[0];
              std::string::size_type v217 = v244 + 136;
              v530[0].__r_.__value_.__r.__words[2] = v244 + 136;
              long long v250 = v519;
              std::string::size_type v251 = v530[0].__r_.__value_.__l.__size_;
              if (*((void *)&v519 + 1) == (void)v519)
              {
                int64x2_t v260 = vdupq_n_s64(*((unint64_t *)&v519 + 1));
              }
              else
              {
                uint64_t v252 = 0;
                do
                {
                  std::string::size_type v253 = v251 + v252;
                  uint64_t v254 = *((void *)&v250 + 1) + v252;
                  long long v255 = *(_OWORD *)(*((void *)&v250 + 1) + v252 - 136);
                  *(void *)(v253 - 120) = *(void *)(*((void *)&v250 + 1) + v252 - 120);
                  *(_OWORD *)(v253 - 136) = v255;
                  *(void *)(v254 - 128) = 0;
                  *(void *)(v254 - 120) = 0;
                  *(void *)(v254 - 136) = 0;
                  *(_OWORD *)(v253 - 112) = *(_OWORD *)(*((void *)&v250 + 1) + v252 - 112);
                  long long v256 = *(_OWORD *)(*((void *)&v250 + 1) + v252 - 96);
                  long long v257 = *(_OWORD *)(*((void *)&v250 + 1) + v252 - 80);
                  long long v258 = *(_OWORD *)(*((void *)&v250 + 1) + v252 - 64);
                  *(_DWORD *)(v253 - 48) = *(_DWORD *)(*((void *)&v250 + 1) + v252 - 48);
                  *(_OWORD *)(v253 - 80) = v257;
                  *(_OWORD *)(v253 - 64) = v258;
                  *(_OWORD *)(v253 - 96) = v256;
                  *(unsigned char *)(v251 + v252 - 40) = 0;
                  *(unsigned char *)(v253 - 16) = 0;
                  if (*(unsigned char *)(*((void *)&v250 + 1) + v252 - 16))
                  {
                    long long v259 = *(_OWORD *)(v254 - 40);
                    *(void *)(v251 + v252 - 24) = *(void *)(v254 - 24);
                    *(_OWORD *)(v251 + v252 - 40) = v259;
                    *(void *)(v254 - 32) = 0;
                    *(void *)(v254 - 24) = 0;
                    *(void *)(v254 - 40) = 0;
                    *(unsigned char *)(v253 - 16) = 1;
                  }
                  *(unsigned char *)(v253 - 8) = *(unsigned char *)(v254 - 8);
                  v252 -= 136;
                }
                while (*((void *)&v250 + 1) + v252 != (void)v250);
                v251 += v252;
                int64x2_t v260 = (int64x2_t)v519;
                std::string::size_type v217 = v530[0].__r_.__value_.__r.__words[2];
              }
              *(void *)&long long v519 = v251;
              *((void *)&v519 + 1) = v217;
              *(int64x2_t *)&v530[0].__r_.__value_.__r.__words[1] = v260;
              std::string::size_type v261 = v520[0];
              v520[0] = v530[1].__r_.__value_.__l.__data_;
              v530[1].__r_.__value_.__r.__words[0] = v261;
              v530[0].__r_.__value_.__r.__words[0] = v260.i64[0];
              std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v530);
            }
            else
            {
              long long v212 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
              *(void *)(*((void *)&v519 + 1) + 16) = *((void *)&v542.__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v211 = v212;
              memset(&v542, 0, sizeof(v542));
              *(_OWORD *)(v211 + 24) = *(_OWORD *)v543;
              long long v214 = *(_OWORD *)&v543[32];
              long long v213 = *(_OWORD *)v544;
              int v215 = *(_DWORD *)&v544[16];
              *(_OWORD *)(v211 + 40) = *(_OWORD *)&v543[16];
              *(_DWORD *)(v211 + 88) = v215;
              *(_OWORD *)(v211 + 72) = v213;
              *(_OWORD *)(v211 + ++*(_DWORD *)(this + 56) = v214;
              *(unsigned char *)(v211 + 96) = 0;
              *(unsigned char *)(v211 + 120) = 0;
              if (v544[48])
              {
                long long v216 = *(_OWORD *)&v544[24];
                *(void *)(v211 + 112) = *(void *)&v544[40];
                *(_OWORD *)(v211 + 96) = v216;
                memset(&v544[24], 0, 24);
                *(unsigned char *)(v211 + 120) = 1;
              }
              *(unsigned char *)(v211 + 128) = v545.__r_.__value_.__s.__data_[0];
              std::string::size_type v217 = v211 + 136;
            }
            *((void *)&v519 + 1) = v217;
            if (v544[48] && (v544[47] & 0x80000000) != 0) {
              operator delete(*(void **)&v544[24]);
            }
            if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v542.__r_.__value_.__l.__data_);
            }
            ++v175;
          }
          goto LABEL_328;
        }
LABEL_239:
        memset(v530, 0, 40);
        uint64_t v183 = *(void *)(v174 + 8) + 64;
        if (*(unsigned char *)(v174 + 16))
        {
          long long v184 = *(_OWORD *)(*(void *)(v174 + 8) + 80);
          *(_OWORD *)&v530[0].__r_.__value_.__l.__data_ = *(_OWORD *)v183;
          *(_OWORD *)&v530[0].__r_.__value_.__r.__words[2] = v184;
          v530[1].__r_.__value_.__l.__size_ = *(void *)(v183 + 32);
          if (*(unsigned char *)(a3 + 72)) {
            uint64_t v183 = a3 + 32;
          }
        }
        else
        {
          uint64_t v185 = a3 + 80;
          if (!*(unsigned char *)(a3 + 120)) {
            uint64_t v185 = *(void *)(v174 + 8) + 64;
          }
          long long v186 = *(_OWORD *)(v185 + 16);
          *(_OWORD *)&v530[0].__r_.__value_.__l.__data_ = *(_OWORD *)v185;
          *(_OWORD *)&v530[0].__r_.__value_.__r.__words[2] = v186;
          v530[1].__r_.__value_.__l.__size_ = *(void *)(v185 + 32);
        }
        long long v187 = *(_OWORD *)(v183 + 16);
        *(_OWORD *)&v530[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v183;
        *(_OWORD *)&v530[2].__r_.__value_.__r.__words[1] = v187;
        *(void *)&long long v531 = *(void *)(v183 + 32);
        if (__sb < 0)
        {
          std::string::__init_copy_ctor_external(&v542, v513, __sza);
        }
        else
        {
          v542.__r_.__value_.__r.__words[0] = (std::string::size_type)v513;
          v542.__r_.__value_.__l.__size_ = __sza;
          LODWORD(v542.__r_.__value_.__r.__words[2]) = v525[0];
          *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v525 + 3);
          *((unsigned char *)&v542.__r_.__value_.__s + 23) = __sb;
        }
        *(_DWORD *)v543 = 1;
        *(_OWORD *)&v543[8] = *(_OWORD *)&v530[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v543[24] = *(_OWORD *)&v530[2].__r_.__value_.__r.__words[1];
        *(void *)&v543[40] = v531;
        *(void *)v544 = 0;
        *(_DWORD *)&v544[8] = v176;
        *(void *)&v544[12] = 1;
        v544[24] = 0;
        v544[48] = 0;
        v545.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v188 = *((void *)&v519 + 1);
        if (*((void *)&v519 + 1) >= v520[0])
        {
          unint64_t v189 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
          unint64_t v190 = v189 + 1;
          if (v189 + 1 > 0x1E1E1E1E1E1E1E1) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v190) {
            unint64_t v190 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
          }
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
            unint64_t v191 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v191 = v190;
          }
          v529 = v520;
          uint64_t v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v191);
          std::string::size_type v193 = (std::string::size_type)&v192[136 * v189];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
          __p.__r_.__value_.__l.__size_ = v193;
          v528 = &v192[136 * v194];
          *(std::string *)std::string::size_type v193 = v542;
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v193 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v193 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v193 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v193 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v193 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v193 + 96) = 0;
          *(unsigned char *)(v193 + 120) = 0;
          std::string::size_type v196 = *((void *)&v519 + 1);
          std::string::size_type v195 = v519;
          std::string::size_type v197 = __p.__r_.__value_.__l.__size_;
          *(unsigned char *)(v193 + 128) = 0;
          std::string::size_type v198 = v193 + 136;
          __p.__r_.__value_.__r.__words[2] = v193 + 136;
          if (v196 == v195)
          {
            int v207 = 0;
          }
          else
          {
            uint64_t v199 = 0;
            do
            {
              std::string::size_type v200 = v197 + v199;
              std::string::size_type v201 = v196 + v199;
              long long v202 = *(_OWORD *)(v196 + v199 - 136);
              *(void *)(v200 - 120) = *(void *)(v196 + v199 - 120);
              *(_OWORD *)(v200 - 136) = v202;
              *(void *)(v201 - 128) = 0;
              *(void *)(v201 - 120) = 0;
              *(void *)(v201 - 136) = 0;
              *(_OWORD *)(v200 - 112) = *(_OWORD *)(v196 + v199 - 112);
              long long v203 = *(_OWORD *)(v196 + v199 - 96);
              long long v204 = *(_OWORD *)(v196 + v199 - 80);
              long long v205 = *(_OWORD *)(v196 + v199 - 64);
              *(_DWORD *)(v200 - 48) = *(_DWORD *)(v196 + v199 - 48);
              *(_OWORD *)(v200 - 80) = v204;
              *(_OWORD *)(v200 - 64) = v205;
              *(_OWORD *)(v200 - 96) = v203;
              *(unsigned char *)(v197 + v199 - 40) = 0;
              *(unsigned char *)(v200 - 16) = 0;
              if (*(unsigned char *)(v196 + v199 - 16))
              {
                long long v206 = *(_OWORD *)(v201 - 40);
                *(void *)(v197 + v199 - 24) = *(void *)(v201 - 24);
                *(_OWORD *)(v197 + v199 - 40) = v206;
                *(void *)(v201 - 32) = 0;
                *(void *)(v201 - 24) = 0;
                *(void *)(v201 - 40) = 0;
                *(unsigned char *)(v200 - 16) = 1;
              }
              *(unsigned char *)(v200 - 8) = *(unsigned char *)(v201 - 8);
              v199 -= 136;
            }
            while (v196 + v199 != v195);
            v197 += v199;
            std::string::size_type v196 = *((void *)&v519 + 1);
            std::string::size_type v195 = v519;
            std::string::size_type v198 = __p.__r_.__value_.__r.__words[2];
            int v207 = v544[48];
          }
          *(void *)&long long v519 = v197;
          *((void *)&v519 + 1) = v198;
          v222 = (char *)v520[0];
          v520[0] = v528;
          __p.__r_.__value_.__r.__words[2] = v196;
          v528 = v222;
          __p.__r_.__value_.__r.__words[0] = v195;
          __p.__r_.__value_.__l.__size_ = v195;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((void *)&v519 + 1) = v198;
          if (v207 && (v544[47] & 0x80000000) != 0) {
            operator delete(*(void **)&v544[24]);
          }
        }
        else
        {
          **((_OWORD **)&v519 + 1) = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
          *(void *)(v188 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v188 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v188 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v188 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v188 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v188 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v188 + 96) = 0;
          *(unsigned char *)(v188 + 120) = 0;
          *(unsigned char *)(v188 + 128) = 0;
          *((void *)&v519 + 1) = v188 + 136;
        }
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        if (__sb < 0)
        {
          std::string::__init_copy_ctor_external(&v542, v513, __sza);
        }
        else
        {
          v542.__r_.__value_.__r.__words[0] = (std::string::size_type)v513;
          v542.__r_.__value_.__l.__size_ = __sza;
          LODWORD(v542.__r_.__value_.__r.__words[2]) = v525[0];
          *(_DWORD *)((char *)&v542.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v525 + 3);
          *((unsigned char *)&v542.__r_.__value_.__s + 23) = __sb;
        }
        *(_DWORD *)v543 = 0;
        *(_OWORD *)&v543[8] = *(_OWORD *)&v530[0].__r_.__value_.__l.__data_;
        *(_OWORD *)&v543[24] = *(_OWORD *)&v530[0].__r_.__value_.__r.__words[2];
        *(void *)&v543[40] = v530[1].__r_.__value_.__l.__size_;
        *(void *)v544 = 0;
        *(_DWORD *)&v544[8] = v175;
        *(void *)&v544[12] = 1;
        v544[24] = 0;
        v544[48] = 0;
        v545.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v223 = *((void *)&v519 + 1);
        if (*((void *)&v519 + 1) >= v520[0])
        {
          unint64_t v224 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
          unint64_t v225 = v224 + 1;
          if (v224 + 1 > 0x1E1E1E1E1E1E1E1) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v225) {
            unint64_t v225 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
          }
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
            unint64_t v226 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v226 = v225;
          }
          v529 = v520;
          v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v226);
          std::string::size_type v228 = (std::string::size_type)&v227[136 * v224];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v227;
          __p.__r_.__value_.__l.__size_ = v228;
          v528 = &v227[136 * v229];
          *(std::string *)std::string::size_type v228 = v542;
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v228 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v228 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v228 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v228 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v228 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v228 + 96) = 0;
          *(unsigned char *)(v228 + 120) = 0;
          std::string::size_type v231 = *((void *)&v519 + 1);
          std::string::size_type v230 = v519;
          std::string::size_type v232 = __p.__r_.__value_.__l.__size_;
          *(unsigned char *)(v228 + 128) = 0;
          std::string::size_type v233 = v228 + 136;
          __p.__r_.__value_.__r.__words[2] = v228 + 136;
          if (v231 == v230)
          {
            int v242 = 0;
          }
          else
          {
            uint64_t v234 = 0;
            do
            {
              std::string::size_type v235 = v232 + v234;
              std::string::size_type v236 = v231 + v234;
              long long v237 = *(_OWORD *)(v231 + v234 - 136);
              *(void *)(v235 - 120) = *(void *)(v231 + v234 - 120);
              *(_OWORD *)(v235 - 136) = v237;
              *(void *)(v236 - 128) = 0;
              *(void *)(v236 - 120) = 0;
              *(void *)(v236 - 136) = 0;
              *(_OWORD *)(v235 - 112) = *(_OWORD *)(v231 + v234 - 112);
              long long v238 = *(_OWORD *)(v231 + v234 - 96);
              long long v239 = *(_OWORD *)(v231 + v234 - 80);
              long long v240 = *(_OWORD *)(v231 + v234 - 64);
              *(_DWORD *)(v235 - 48) = *(_DWORD *)(v231 + v234 - 48);
              *(_OWORD *)(v235 - 80) = v239;
              *(_OWORD *)(v235 - 64) = v240;
              *(_OWORD *)(v235 - 96) = v238;
              *(unsigned char *)(v232 + v234 - 40) = 0;
              *(unsigned char *)(v235 - 16) = 0;
              if (*(unsigned char *)(v231 + v234 - 16))
              {
                long long v241 = *(_OWORD *)(v236 - 40);
                *(void *)(v232 + v234 - 24) = *(void *)(v236 - 24);
                *(_OWORD *)(v232 + v234 - 40) = v241;
                *(void *)(v236 - 32) = 0;
                *(void *)(v236 - 24) = 0;
                *(void *)(v236 - 40) = 0;
                *(unsigned char *)(v235 - 16) = 1;
              }
              *(unsigned char *)(v235 - 8) = *(unsigned char *)(v236 - 8);
              v234 -= 136;
            }
            while (v231 + v234 != v230);
            v232 += v234;
            std::string::size_type v231 = *((void *)&v519 + 1);
            std::string::size_type v230 = v519;
            std::string::size_type v233 = __p.__r_.__value_.__r.__words[2];
            int v242 = v544[48];
          }
          *(void *)&long long v519 = v232;
          *((void *)&v519 + 1) = v233;
          v243 = (char *)v520[0];
          v520[0] = v528;
          __p.__r_.__value_.__r.__words[2] = v231;
          v528 = v243;
          __p.__r_.__value_.__r.__words[0] = v230;
          __p.__r_.__value_.__l.__size_ = v230;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((void *)&v519 + 1) = v233;
          ++v175;
          if (v242 && (v544[47] & 0x80000000) != 0) {
            operator delete(*(void **)&v544[24]);
          }
        }
        else
        {
          **((_OWORD **)&v519 + 1) = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
          *(void *)(v223 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
          memset(&v542, 0, sizeof(v542));
          *(_OWORD *)(v223 + 40) = *(_OWORD *)&v543[16];
          *(_OWORD *)(v223 + ++*(_DWORD *)(this + 56) = *(_OWORD *)&v543[32];
          *(_OWORD *)(v223 + 72) = *(_OWORD *)v544;
          *(_DWORD *)(v223 + 88) = *(_DWORD *)&v544[16];
          *(_OWORD *)(v223 + 24) = *(_OWORD *)v543;
          *(unsigned char *)(v223 + 96) = 0;
          *(unsigned char *)(v223 + 120) = 0;
          *(unsigned char *)(v223 + 128) = 0;
          *((void *)&v519 + 1) = v223 + 136;
          ++v175;
        }
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        ++v176;
LABEL_328:
        v174 += 24;
      }
      while (v174 != v504);
    }
    v262 = (void *)((char *)v492 + 184);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>((void *)v492 + 23, (unsigned __int8 *)&__p))
    {
      v265 = get_adm_log_object();
      if (os_log_type_enabled(v265, OS_LOG_TYPE_ERROR))
      {
        v477 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v477 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(v542.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = (std::string::size_type)v477;
        _os_log_error_impl(&dword_248947000, v265, OS_LOG_TYPE_ERROR, "The IOContextSemantic %s is not found from the DSPG config of system config", (uint8_t *)&v542, 0xCu);
      }
      std::string::basic_string[abi:ne180100]<0>(&v542, "general");
      v266 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(v262, (unsigned __int8 *)&v542);
      if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v542.__r_.__value_.__l.__data_);
      }
      if (!v266)
      {
        v362 = get_adm_log_object();
        if (os_log_type_enabled(v362, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v542.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = (std::string::size_type)"general";
          _os_log_error_impl(&dword_248947000, v362, OS_LOG_TYPE_ERROR, "The fallback IOContextSemantic %s is not found from the DSPG config of system config", (uint8_t *)&v542, 0xCu);
        }
        *(void *)v487 = 1969448551;
        *((unsigned char *)v487 + 312) = 0;
        int v280 = __sb;
        goto LABEL_694;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = 7;
        v267 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
        v267 = &__p;
      }
      strcpy((char *)v267, "general");
      v364 = get_adm_log_object();
      if (os_log_type_enabled(v364, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v542.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = (std::string::size_type)"general";
        _os_log_impl(&dword_248947000, v364, OS_LOG_TYPE_DEFAULT, "Fall back to DSP for IOContext Semantic %s", (uint8_t *)&v542, 0xCu);
      }
    }
    long long v557 = 0uLL;
    uint64_t v558 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v542, "spatial playback");
    if (v489 == std::__tree<std::string>::find<std::string>((uint64_t)v485, &v542))
    {
      std::string::basic_string[abi:ne180100]<0>(v530, "spatial channel virtualization only");
      BOOL v263 = v489 != std::__tree<std::string>::find<std::string>((uint64_t)v485, v530);
      if (SHIBYTE(v530[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v530[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      BOOL v263 = 1;
    }
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v542.__r_.__value_.__l.__data_);
      if (!v263) {
        goto LABEL_625;
      }
    }
    else if (!v263)
    {
LABEL_625:
      std::string::basic_string[abi:ne180100]<0>(&v517, "Default");
      std::string::basic_string[abi:ne180100]<0>(&v542, "spatial playback");
      if (v489 == std::__tree<std::string>::find<std::string>((uint64_t)v485, &v542))
      {
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v442 = *(unsigned __int8 *)(a3 + 152);
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        if (v442)
        {
          if (**(_DWORD **)(a3 + 128) == 6619138)
          {
            if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
            {
              v517.__r_.__value_.__l.__size_ = 9;
              v444 = (std::string *)v517.__r_.__value_.__r.__words[0];
              v443 = (std::string::value_type *)(v517.__r_.__value_.__r.__words[0] + 9);
            }
            else
            {
              v443 = &v517.__r_.__value_.__s.__data_[9];
              *((unsigned char *)&v517.__r_.__value_.__s + 23) = 9;
              v444 = &v517;
            }
            v444->__r_.__value_.__s.__data_[8] = 32;
            v444->__r_.__value_.__r.__words[0] = *(void *)"Stereo - ";
          }
          else
          {
            if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
            {
              v517.__r_.__value_.__l.__size_ = 16;
              v449 = (std::string *)v517.__r_.__value_.__r.__words[0];
              v443 = (std::string::value_type *)(v517.__r_.__value_.__r.__words[0] + 16);
            }
            else
            {
              v443 = &v517.__r_.__value_.__s.__data_[16];
              *((unsigned char *)&v517.__r_.__value_.__s + 23) = 16;
              v449 = &v517;
            }
            *(_OWORD *)&v449->__r_.__value_.__l.__data_ = *(_OWORD *)"Multi Channel - ";
          }
          std::string::value_type *v443 = 0;
          DeviceDescriptiouint64_t n = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)a3, 0);
          v452 = DeviceDescription;
          int v453 = *((_DWORD *)DeviceDescription + 16);
          if (v453 == 1651275109)
          {
            if (*((_DWORD *)DeviceDescription + 19) == 1) {
              goto LABEL_663;
            }
          }
          else if (v453 == 1651274862)
          {
            if (adm::config_policy::isBuiltInSpeakerDevice(DeviceDescription, v451))
            {
              v454 = "Built-in Speaker";
              std::string::size_type v455 = 16;
LABEL_664:
              std::string::append(&v517, v454, v455);
              goto LABEL_665;
            }
            if (*((_DWORD *)v452 + 18) != 1751412846) {
              goto LABEL_665;
            }
LABEL_663:
            v454 = "Headphone";
            std::string::size_type v455 = 9;
            goto LABEL_664;
          }
          v454 = "Default";
          std::string::size_type v455 = 7;
          goto LABEL_664;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v542, "spatial channel virtualization only");
      v445 = std::__tree<std::string>::find<std::string>((uint64_t)v485, &v542);
      if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v542.__r_.__value_.__l.__data_);
      }
      if (v489 == v445)
      {
        std::string::basic_string[abi:ne180100]<0>(&v542, "voice activity detection");
        v447 = std::__tree<std::string>::find<std::string>((uint64_t)v485, &v542);
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        if (v489 != v447)
        {
          if (*(void *)(a3 + 176) - *(void *)(a3 + 168) == 24)
          {
            if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
            {
              v517.__r_.__value_.__l.__size_ = 5;
              v448 = (std::string *)v517.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((unsigned char *)&v517.__r_.__value_.__s + 23) = 5;
              v448 = &v517;
            }
            strcpy((char *)v448, "No EC");
          }
          else
          {
            v456 = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)a3, 1);
            v457 = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)a3, 0);
            {
              if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
              {
                v517.__r_.__value_.__l.__size_ = 15;
                v459 = (std::string *)v517.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((unsigned char *)&v517.__r_.__value_.__s + 23) = 15;
                v459 = &v517;
              }
              strcpy((char *)v459, "High HW Latency");
            }
            v481 = get_adm_log_object();
            if (os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT))
            {
              v482 = &v517;
              if ((v517.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v482 = (std::string *)v517.__r_.__value_.__r.__words[0];
              }
              LODWORD(v542.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = (std::string::size_type)v482;
              _os_log_impl(&dword_248947000, v481, OS_LOG_TYPE_DEFAULT, "DSP selection is: %s", (uint8_t *)&v542, 0xCu);
            }
          }
        }
      }
      else
      {
        if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
        {
          v517.__r_.__value_.__l.__size_ = 22;
          v446 = (std::string *)v517.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v517.__r_.__value_.__s + 23) = 22;
          v446 = &v517;
        }
        strcpy((char *)v446, "Channel Virtualization");
      }
LABEL_665:
      v460 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(v262, (unsigned __int8 *)&__p);
      if (!v460) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      v461 = (int8x8_t *)v460;
      unint64_t v462 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v517);
      int8x8_t v463 = v461[6];
      if (!*(void *)&v463) {
        goto LABEL_682;
      }
      unint64_t v464 = v462;
      uint8x8_t v465 = (uint8x8_t)vcnt_s8(v463);
      v465.i16[0] = vaddlv_u8(v465);
      unint64_t v466 = v465.u32[0];
      if (v465.u32[0] > 1uLL)
      {
        unint64_t v467 = v462;
        if (v462 >= *(void *)&v463) {
          unint64_t v467 = v462 % *(void *)&v463;
        }
      }
      else
      {
        unint64_t v467 = (*(void *)&v463 - 1) & v462;
      }
      v468 = *(unsigned __int8 ***)(*(void *)&v461[5] + 8 * v467);
      if (!v468 || (v469 = *v468) == 0) {
LABEL_682:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      while (1)
      {
        unint64_t v470 = *((void *)v469 + 1);
        if (v464 == v470)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](v469 + 16, (unsigned __int8 *)&v517))
          {
            adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(v530, (uint64_t)(v469 + 40));
            uint64_t v471 = v558;
            long long v472 = v557;
            uint64_t v558 = 0;
            long long v557 = 0uLL;
            LOBYTE(v536) = 0;
            BYTE4(v536) = 0;
            BYTE8(v536) = 0;
            BYTE12(v536) = 0;
            *(_OWORD *)&v542.__r_.__value_.__l.__data_ = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
            memset(&v521, 0, sizeof(v521));
            v542.__r_.__value_.__r.__words[2] = v521.__r_.__value_.__r.__words[2];
            *(void *)v543 = v522;
            *(_OWORD *)&v543[8] = *(_OWORD *)v483;
            uint64_t v473 = v483[2];
            void *v483 = 0;
            v483[1] = 0;
            v483[2] = 0;
            *(_OWORD *)&v543[32] = v519;
            *(void *)&v543[24] = v473;
            *(void *)v544 = v520[0];
            long long v519 = 0uLL;
            v520[0] = 0;
            *(_OWORD *)&v544[8] = *(_OWORD *)&v530[0].__r_.__value_.__l.__data_;
            memset(v530, 0, sizeof(v530));
            *(std::string *)&v544[32] = v530[1];
            *(void *)&v544[24] = *((void *)&v530[0].__r_.__value_.__l + 2);
            std::string v545 = v530[2];
            uint64_t v547 = v532;
            long long v546 = v531;
            long long v531 = 0uLL;
            uint64_t v532 = 0;
            long long v548 = 0uLL;
            long long v533 = 0uLL;
            *(_OWORD *)&v549[8] = v472;
            *(void *)v549 = 0;
            *(void *)&v549[24] = v471;
            long long v534 = 0uLL;
            cf[0] = 0;
            cf[1] = 0;
            *(void *)((char *)&v550 + 5) = *(void *)((char *)&v536 + 5);
            *(void *)&long long v550 = v536;
            int v556 = 0;
            caulk::expected<adm::graph::GraphDescription,std::error_code>::expected((uint64_t)v487, (long long *)&v542);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v544[8]);
            v526 = (void **)&v543[32];
            std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](&v526);
            if ((v543[31] & 0x80000000) != 0) {
              operator delete(*(void **)&v543[8]);
            }
            int v280 = __sb;
            if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v542.__r_.__value_.__l.__data_);
            }
            v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v534 + 8;
            std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
            if ((void)v533)
            {
              *((void *)&v533 + 1) = v533;
              operator delete((void *)v533);
            }
            if (SHIBYTE(v532) < 0) {
              operator delete((void *)v531);
            }
            v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v530[2];
            std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
            v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v530[1];
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
            v542.__r_.__value_.__r.__words[0] = (std::string::size_type)v530;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
            if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v517.__r_.__value_.__l.__data_);
            }
            goto LABEL_693;
          }
        }
        else
        {
          if (v466 > 1)
          {
            if (v470 >= *(void *)&v463) {
              v470 %= *(void *)&v463;
            }
          }
          else
          {
            v470 &= *(void *)&v463 - 1;
          }
          if (v470 != v467) {
            goto LABEL_682;
          }
        }
        v469 = *(unsigned __int8 **)v469;
        if (!v469) {
          goto LABEL_682;
        }
      }
    }
    if (*(unsigned char *)(a3 + 152)) {
      operator new();
    }
    v279 = get_adm_log_object();
    if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v542.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_248947000, v279, OS_LOG_TYPE_ERROR, "Failed to create DSP node due to missing channel layout", (uint8_t *)&v542, 2u);
    }
    *(void *)v487 = 1969448551;
    *((unsigned char *)v487 + 312) = 0;
    int v280 = __sb;
LABEL_693:
    v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v557;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
LABEL_694:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v518.__r_.__value_.__r.__words[0]) {
      operator delete(v518.__r_.__value_.__l.__data_);
    }
    v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v519;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
    if (SHIBYTE(v524) < 0) {
      operator delete((void *)v523);
    }
    if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v521.__r_.__value_.__l.__data_);
      if ((v280 & 0x80000000) == 0) {
        return;
      }
    }
    else if ((v280 & 0x80000000) == 0)
    {
      return;
    }
    uint64_t v24 = (std::string::value_type *)v513;
    goto LABEL_705;
  }
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&__p, (const ConfigurationChangeRequest *)a3);
  uint64_t v24 = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  std::string::size_type v25 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  unint64_t v27 = v26 - 1;
  if (v26 <= 1)
  {
    *(void *)this = 1969448551;
    *((unsigned char *)this + 312) = 0;
    if (!v24) {
      return;
    }
    goto LABEL_705;
  }
  uint64_t v163 = *(void *)__p.__r_.__value_.__l.__data_;
  v515 = (void *)__p.__r_.__value_.__r.__words[0];
  double v164 = *(double *)(*(void *)(__p.__r_.__value_.__r.__words[0] + 8) + 64);
  std::string::size_type v503 = __p.__r_.__value_.__l.__size_;
  uint64_t v165 = *(void *)(__p.__r_.__value_.__l.__size_ - 24);
  std::string::basic_string[abi:ne180100]<0>(&v521, "VoiceProcessingUL");
  uint64_t v498 = v163;
  int v499 = v26;
  if (*(unsigned char *)(a3 + 164)) {
    int v166 = *(_DWORD *)(a3 + 160);
  }
  else {
    int v166 = 480;
  }
  LODWORD(v522) = 6;
  HIDWORD(v522) = v166;
  v167 = std::string::basic_string[abi:ne180100]<0>(&v523, (char *)&unk_2489B2B19);
  long long v519 = 0uLL;
  v520[0] = 0;
  uint64_t v168 = v515[1];
  *(void *)&long long v557 = *(void *)(v168 + 64);
  int v169 = *(_DWORD *)(v168 + 76);
  DWORD2(v557) = *(_DWORD *)(v168 + 72);
  unsigned int v170 = *(_DWORD *)(v168 + 88);
  unsigned int v171 = *(_DWORD *)(v168 + 92);
  uint64_t v172 = *(void *)(v168 + 96);
  uint64_t __sa = v172;
  if (*(_DWORD *)(*v515 + 64) != 1651274862)
  {
    uint64_t __szb = *(void *)(v168 + 80);
    goto LABEL_353;
  }
  if ((v169 & 0x20) != 0)
  {
    unsigned int v171 = 1;
    goto LABEL_351;
  }
  if (v171)
  {
LABEL_351:
    v170 /= v171;
    goto LABEL_352;
  }
  unsigned int v170 = (v172 + 7) >> 3;
LABEL_352:
  v169 |= 0x20u;
  uint64_t __szb = v170 | 0x100000000;
  unsigned int v171 = 1;
LABEL_353:
  v495 = v167;
  uint64_t v496 = v165;
  std::string::basic_string[abi:ne180100]<0>(&v542, "VoiceProcessingUL");
  *(_DWORD *)v543 = 1;
  *(void *)&v543[8] = v557;
  *(_DWORD *)&v543[16] = DWORD2(v557);
  *(_DWORD *)&v543[20] = v169;
  *(void *)&v543[24] = __szb;
  *(_DWORD *)&v543[32] = v170;
  *(_DWORD *)&v543[36] = v171;
  *(void *)&v543[40] = __sa;
  *(void *)v544 = 0;
  *(void *)&v544[8] = 0x100000000;
  *(_DWORD *)&v544[16] = 0;
  v544[24] = 0;
  v544[48] = 0;
  v545.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v268 = *((void *)&v519 + 1);
  if (*((void *)&v519 + 1) >= v520[0])
  {
    unint64_t v275 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
    unint64_t v276 = v275 + 1;
    if (v275 + 1 > 0x1E1E1E1E1E1E1E1) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v276) {
      unint64_t v276 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v277 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v277 = v276;
    }
    v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
    if (v277) {
      unint64_t v277 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v277);
    }
    else {
      uint64_t v278 = 0;
    }
    std::string::size_type v281 = v277 + 8 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
    v530[0].__r_.__value_.__r.__words[0] = v277;
    v530[0].__r_.__value_.__l.__size_ = v281;
    v530[1].__r_.__value_.__r.__words[0] = v277 + 136 * v278;
    long long v282 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
    *(void *)(v281 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
    *(_OWORD *)std::string::size_type v281 = v282;
    memset(&v542, 0, sizeof(v542));
    *(_OWORD *)(v281 + 24) = *(_OWORD *)v543;
    long long v283 = *(_OWORD *)&v543[16];
    long long v284 = *(_OWORD *)&v543[32];
    long long v285 = *(_OWORD *)v544;
    *(_DWORD *)(v281 + 88) = *(_DWORD *)&v544[16];
    *(_OWORD *)(v281 + 72) = v285;
    *(_OWORD *)(v281 + ++*(_DWORD *)(this + 56) = v284;
    *(_OWORD *)(v281 + 40) = v283;
    unint64_t v286 = v277 + 136 * v275;
    *(unsigned char *)(v286 + 96) = 0;
    unint64_t v287 = v286 + 96;
    unint64_t v288 = v277 + 136 * v275;
    *(unsigned char *)(v288 + 120) = 0;
    v289 = (unsigned char *)(v288 + 120);
    if (v544[48])
    {
      long long v290 = *(_OWORD *)&v544[24];
      *(void *)(v287 + 16) = *(void *)&v544[40];
      *(_OWORD *)unint64_t v287 = v290;
      memset(&v544[24], 0, 24);
      unsigned char *v289 = 1;
    }
    *(unsigned char *)(v277 + 136 * v275 + 128) = v545.__r_.__value_.__s.__data_[0];
    std::string::size_type v274 = v281 + 136;
    v530[0].__r_.__value_.__r.__words[2] = v281 + 136;
    long long v291 = v519;
    std::string::size_type v292 = v530[0].__r_.__value_.__l.__size_;
    if (*((void *)&v519 + 1) == (void)v519)
    {
      int64x2_t v301 = vdupq_n_s64(*((unint64_t *)&v519 + 1));
    }
    else
    {
      uint64_t v293 = 0;
      do
      {
        std::string::size_type v294 = v292 + v293;
        uint64_t v295 = *((void *)&v291 + 1) + v293;
        long long v296 = *(_OWORD *)(*((void *)&v291 + 1) + v293 - 136);
        *(void *)(v294 - 120) = *(void *)(*((void *)&v291 + 1) + v293 - 120);
        *(_OWORD *)(v294 - 136) = v296;
        *(void *)(v295 - 128) = 0;
        *(void *)(v295 - 120) = 0;
        *(void *)(v295 - 136) = 0;
        *(_OWORD *)(v294 - 112) = *(_OWORD *)(*((void *)&v291 + 1) + v293 - 112);
        long long v297 = *(_OWORD *)(*((void *)&v291 + 1) + v293 - 96);
        long long v298 = *(_OWORD *)(*((void *)&v291 + 1) + v293 - 80);
        long long v299 = *(_OWORD *)(*((void *)&v291 + 1) + v293 - 64);
        *(_DWORD *)(v294 - 48) = *(_DWORD *)(*((void *)&v291 + 1) + v293 - 48);
        *(_OWORD *)(v294 - 80) = v298;
        *(_OWORD *)(v294 - 64) = v299;
        *(_OWORD *)(v294 - 96) = v297;
        *(unsigned char *)(v292 + v293 - 40) = 0;
        *(unsigned char *)(v294 - 16) = 0;
        if (*(unsigned char *)(*((void *)&v291 + 1) + v293 - 16))
        {
          long long v300 = *(_OWORD *)(v295 - 40);
          *(void *)(v292 + v293 - 24) = *(void *)(v295 - 24);
          *(_OWORD *)(v292 + v293 - 40) = v300;
          *(void *)(v295 - 32) = 0;
          *(void *)(v295 - 24) = 0;
          *(void *)(v295 - 40) = 0;
          *(unsigned char *)(v294 - 16) = 1;
        }
        *(unsigned char *)(v294 - 8) = *(unsigned char *)(v295 - 8);
        v293 -= 136;
      }
      while (*((void *)&v291 + 1) + v293 != (void)v291);
      v292 += v293;
      int64x2_t v301 = (int64x2_t)v519;
      std::string::size_type v274 = v530[0].__r_.__value_.__r.__words[2];
    }
    *(void *)&long long v519 = v292;
    *((void *)&v519 + 1) = v274;
    *(int64x2_t *)&v530[0].__r_.__value_.__r.__words[1] = v301;
    std::string::size_type v302 = v520[0];
    v520[0] = v530[1].__r_.__value_.__l.__data_;
    v530[1].__r_.__value_.__r.__words[0] = v302;
    v530[0].__r_.__value_.__r.__words[0] = v301.i64[0];
    std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v530);
  }
  else
  {
    long long v269 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
    *(void *)(*((void *)&v519 + 1) + 16) = *((void *)&v542.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v268 = v269;
    memset(&v542, 0, sizeof(v542));
    *(_OWORD *)(v268 + 24) = *(_OWORD *)v543;
    long long v271 = *(_OWORD *)&v543[32];
    long long v270 = *(_OWORD *)v544;
    int v272 = *(_DWORD *)&v544[16];
    *(_OWORD *)(v268 + 40) = *(_OWORD *)&v543[16];
    *(_DWORD *)(v268 + 88) = v272;
    *(_OWORD *)(v268 + 72) = v270;
    *(_OWORD *)(v268 + ++*(_DWORD *)(this + 56) = v271;
    *(unsigned char *)(v268 + 96) = 0;
    *(unsigned char *)(v268 + 120) = 0;
    if (v544[48])
    {
      long long v273 = *(_OWORD *)&v544[24];
      *(void *)(v268 + 112) = *(void *)&v544[40];
      *(_OWORD *)(v268 + 96) = v273;
      memset(&v544[24], 0, 24);
      *(unsigned char *)(v268 + 120) = 1;
    }
    *(unsigned char *)(v268 + 128) = v545.__r_.__value_.__s.__data_[0];
    std::string::size_type v274 = v268 + 136;
  }
  *((void *)&v519 + 1) = v274;
  if (v544[48] && (v544[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v544[24]);
  }
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v542.__r_.__value_.__l.__data_);
  }
  v493 = a2;
  uint64_t v501 = a3;
  v488 = this;
  if (v25 == 24)
  {
    int v303 = 0;
  }
  else
  {
    int v303 = 0;
    uint64_t v304 = 0;
    if (v27 <= 1) {
      uint64_t v305 = 1;
    }
    else {
      uint64_t v305 = v27;
    }
    do
    {
      uint64_t v306 = v515[3 * v304 + 1];
      int v307 = *(_DWORD *)(v306 + 92);
      std::string::basic_string[abi:ne180100]<0>(&v542, "VoiceProcessingUL");
      *(_DWORD *)v543 = 0;
      long long v308 = *(_OWORD *)(v306 + 64);
      long long v309 = *(_OWORD *)(v306 + 80);
      *(void *)&v543[40] = *(void *)(v306 + 96);
      *(_OWORD *)&v543[8] = v308;
      *(_OWORD *)&v543[24] = v309;
      *(void *)v544 = 0;
      *(_DWORD *)&v544[8] = v304;
      *(void *)&v544[12] = 1;
      v544[24] = 0;
      v544[48] = 0;
      v545.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v310 = *((void *)&v519 + 1);
      if (*((void *)&v519 + 1) >= v520[0])
      {
        unint64_t v317 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
        unint64_t v318 = v317 + 1;
        if (v317 + 1 > 0x1E1E1E1E1E1E1E1) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v318) {
          unint64_t v318 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
        }
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
          unint64_t v319 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v319 = v318;
        }
        v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
        if (v319) {
          unint64_t v319 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v319);
        }
        else {
          uint64_t v320 = 0;
        }
        std::string::size_type v321 = v319 + 8 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
        v530[0].__r_.__value_.__r.__words[0] = v319;
        v530[0].__r_.__value_.__l.__size_ = v321;
        v530[1].__r_.__value_.__r.__words[0] = v319 + 136 * v320;
        long long v322 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
        *(void *)(v321 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v321 = v322;
        memset(&v542, 0, sizeof(v542));
        *(_OWORD *)(v321 + 24) = *(_OWORD *)v543;
        long long v323 = *(_OWORD *)&v543[16];
        long long v324 = *(_OWORD *)&v543[32];
        long long v325 = *(_OWORD *)v544;
        *(_DWORD *)(v321 + 88) = *(_DWORD *)&v544[16];
        *(_OWORD *)(v321 + 72) = v325;
        *(_OWORD *)(v321 + ++*(_DWORD *)(this + 56) = v324;
        *(_OWORD *)(v321 + 40) = v323;
        unint64_t v326 = v319 + 136 * v317;
        *(unsigned char *)(v326 + 96) = 0;
        unint64_t v327 = v326 + 96;
        unint64_t v328 = v319 + 136 * v317;
        *(unsigned char *)(v328 + 120) = 0;
        v329 = (unsigned char *)(v328 + 120);
        if (v544[48])
        {
          long long v330 = *(_OWORD *)&v544[24];
          *(void *)(v327 + 16) = *(void *)&v544[40];
          *(_OWORD *)unint64_t v327 = v330;
          memset(&v544[24], 0, 24);
          unsigned char *v329 = 1;
        }
        *(unsigned char *)(v319 + 136 * v317 + 128) = v545.__r_.__value_.__s.__data_[0];
        std::string::size_type v316 = v321 + 136;
        v530[0].__r_.__value_.__r.__words[2] = v321 + 136;
        long long v331 = v519;
        std::string::size_type v332 = v530[0].__r_.__value_.__l.__size_;
        if (*((void *)&v519 + 1) == (void)v519)
        {
          int64x2_t v341 = vdupq_n_s64(*((unint64_t *)&v519 + 1));
        }
        else
        {
          uint64_t v333 = 0;
          do
          {
            std::string::size_type v334 = v332 + v333;
            uint64_t v335 = *((void *)&v331 + 1) + v333;
            long long v336 = *(_OWORD *)(*((void *)&v331 + 1) + v333 - 136);
            *(void *)(v334 - 120) = *(void *)(*((void *)&v331 + 1) + v333 - 120);
            *(_OWORD *)(v334 - 136) = v336;
            *(void *)(v335 - 128) = 0;
            *(void *)(v335 - 120) = 0;
            *(void *)(v335 - 136) = 0;
            *(_OWORD *)(v334 - 112) = *(_OWORD *)(*((void *)&v331 + 1) + v333 - 112);
            long long v337 = *(_OWORD *)(*((void *)&v331 + 1) + v333 - 96);
            long long v338 = *(_OWORD *)(*((void *)&v331 + 1) + v333 - 80);
            long long v339 = *(_OWORD *)(*((void *)&v331 + 1) + v333 - 64);
            *(_DWORD *)(v334 - 48) = *(_DWORD *)(*((void *)&v331 + 1) + v333 - 48);
            *(_OWORD *)(v334 - 80) = v338;
            *(_OWORD *)(v334 - 64) = v339;
            *(_OWORD *)(v334 - 96) = v337;
            *(unsigned char *)(v332 + v333 - 40) = 0;
            *(unsigned char *)(v334 - 16) = 0;
            if (*(unsigned char *)(*((void *)&v331 + 1) + v333 - 16))
            {
              long long v340 = *(_OWORD *)(v335 - 40);
              *(void *)(v332 + v333 - 24) = *(void *)(v335 - 24);
              *(_OWORD *)(v332 + v333 - 40) = v340;
              *(void *)(v335 - 32) = 0;
              *(void *)(v335 - 24) = 0;
              *(void *)(v335 - 40) = 0;
              *(unsigned char *)(v334 - 16) = 1;
            }
            *(unsigned char *)(v334 - 8) = *(unsigned char *)(v335 - 8);
            v333 -= 136;
          }
          while (*((void *)&v331 + 1) + v333 != (void)v331);
          v332 += v333;
          int64x2_t v341 = (int64x2_t)v519;
          std::string::size_type v316 = v530[0].__r_.__value_.__r.__words[2];
        }
        *(void *)&long long v519 = v332;
        *((void *)&v519 + 1) = v316;
        *(int64x2_t *)&v530[0].__r_.__value_.__r.__words[1] = v341;
        std::string::size_type v342 = v520[0];
        v520[0] = v530[1].__r_.__value_.__l.__data_;
        v530[1].__r_.__value_.__r.__words[0] = v342;
        v530[0].__r_.__value_.__r.__words[0] = v341.i64[0];
        std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v530);
      }
      else
      {
        long long v311 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
        *(void *)(*((void *)&v519 + 1) + 16) = *((void *)&v542.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v310 = v311;
        memset(&v542, 0, sizeof(v542));
        *(_OWORD *)(v310 + 24) = *(_OWORD *)v543;
        long long v313 = *(_OWORD *)&v543[32];
        long long v312 = *(_OWORD *)v544;
        int v314 = *(_DWORD *)&v544[16];
        *(_OWORD *)(v310 + 40) = *(_OWORD *)&v543[16];
        *(_DWORD *)(v310 + 88) = v314;
        *(_OWORD *)(v310 + 72) = v312;
        *(_OWORD *)(v310 + ++*(_DWORD *)(this + 56) = v313;
        *(unsigned char *)(v310 + 96) = 0;
        *(unsigned char *)(v310 + 120) = 0;
        if (v544[48])
        {
          long long v315 = *(_OWORD *)&v544[24];
          *(void *)(v310 + 112) = *(void *)&v544[40];
          *(_OWORD *)(v310 + 96) = v315;
          memset(&v544[24], 0, 24);
          *(unsigned char *)(v310 + 120) = 1;
        }
        *(unsigned char *)(v310 + 128) = v545.__r_.__value_.__s.__data_[0];
        std::string::size_type v316 = v310 + 136;
      }
      *((void *)&v519 + 1) = v316;
      if (v544[48] && (v544[47] & 0x80000000) != 0) {
        operator delete(*(void **)&v544[24]);
      }
      if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v542.__r_.__value_.__l.__data_);
      }
      v303 += v307;
      ++v304;
    }
    while (v304 != v305);
  }
  v343 = (double *)operator new(0x30uLL);
  *(_DWORD *)v343 = 0;
  v343[1] = v164;
  *((_OWORD *)v343 + 1) = xmmword_2489AAA40;
  *((_DWORD *)v343 + 8) = 4;
  *((_DWORD *)v343 + 9) = v303;
  *((void *)v343 + 5) = 32;
  v344 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(1uLL);
  *(_DWORD *)v344 = 3;
  v344[1] = v164;
  *((_OWORD *)v344 + 1) = xmmword_2489AAA40;
  *((_OWORD *)v344 + 2) = xmmword_2489AAA50;
  __szc = (long long *)v344;
  if (*(unsigned char *)(a3 + 72))
  {
    if (*(double *)(a3 + 32) != v164)
    {
      v345 = get_adm_log_object();
      if (os_log_type_enabled(v345, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v476 = *(void *)(a3 + 32);
        LODWORD(v542.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v542.__r_.__value_.__r.__words + 4) = v476;
        WORD2(v542.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&v542.__r_.__value_.__r.__words[1] + 6) = v164;
        _os_log_error_impl(&dword_248947000, v345, OS_LOG_TYPE_ERROR, "The IOContext rate %f doesn't match the mic stream rate %f", (uint8_t *)&v542, 0x16u);
      }
    }
  }
  uint64_t v346 = *(void *)(v503 - 16);
  uint64_t v347 = *(void *)(v346 + 64);
  int v349 = *(_DWORD *)(v346 + 72);
  unsigned int v348 = *(_DWORD *)(v346 + 76);
  unsigned int v350 = *(_DWORD *)(v346 + 80);
  int v351 = *(_DWORD *)(v346 + 84);
  unsigned int v353 = *(_DWORD *)(v346 + 88);
  unsigned int v352 = *(_DWORD *)(v346 + 92);
  unsigned int v354 = *(_DWORD *)(v346 + 96);
  std::string::basic_string[abi:ne180100]<0>(&v542, "VoiceProcessingUL");
  *(_DWORD *)v543 = 0;
  int v355 = v348 & 0x20;
  if (v349 != 1819304813 || v351 != 1 || v353 != v350 || v354 >> 3 > v353 || !v352) {
    goto LABEL_455;
  }
  if ((v348 & 0x20) == 0)
  {
    BOOL v52 = v350 == v350 / v352 * v352;
    v350 /= v352;
    if (!v52)
    {
      int v363 = 9;
      goto LABEL_456;
    }
  }
  int v356 = 0;
  uint64_t v357 = 0;
  uint64_t v358 = 0;
  if ((v348 & 2) != 0 || 8 * v350 != v354)
  {
    int v363 = 0;
    goto LABEL_437;
  }
  if (v348)
  {
    if ((v348 & 0x1F84) == 0 && v350 != 4)
    {
      if (v350 == 8)
      {
        unsigned int v365 = 8 * v352;
        if ((v348 & 0x20) != 0) {
          unsigned int v365 = 8;
        }
        uint64_t v357 = v365 | 0x100000000;
        int v363 = v355 | 9;
        uint64_t v360 = v352 | 0x4000000000;
        uint64_t v358 = v347;
        int v356 = 1819304813;
        goto LABEL_438;
      }
      int v356 = 0;
      int v363 = 0;
LABEL_437:
      uint64_t v360 = 0;
LABEL_438:
      v359 = (void *)&unk_2489AA000;
      goto LABEL_461;
    }
LABEL_455:
    int v363 = v355 | 9;
    if ((v348 & 0x20) != 0)
    {
      unsigned int v366 = 4;
      v359 = &unk_2489AA000;
      goto LABEL_458;
    }
LABEL_456:
    v359 = (void *)&unk_2489AA000;
    unsigned int v366 = 4 * v352;
LABEL_458:
    uint64_t v357 = v366 | 0x100000000;
LABEL_459:
    HIDWORD(v360) = 32;
LABEL_460:
    LODWORD(v360) = v352;
    uint64_t v358 = v347;
    int v356 = 1819304813;
    goto LABEL_461;
  }
  v359 = (void *)&unk_2489AA000;
  if ((v348 & 4) == 0)
  {
    int v356 = 0;
    int v363 = 0;
LABEL_435:
    uint64_t v360 = 0;
    goto LABEL_461;
  }
  int v474 = (v348 >> 7) & 0x3F;
  if (v474 == 24 && v350 == 4)
  {
    unsigned int v475 = 4 * v352;
    if ((v348 & 0x20) != 0) {
      unsigned int v475 = 4;
    }
    uint64_t v357 = v475 | 0x100000000;
    int v363 = v355 | 0xC0C;
    goto LABEL_459;
  }
  if (!v474 && v350 == 4)
  {
    unsigned int v479 = 4 * v352;
    if ((v348 & 0x20) != 0) {
      unsigned int v479 = 4;
    }
    uint64_t v357 = v479 | 0x100000000;
    int v363 = v355 | 0xC;
    goto LABEL_459;
  }
  int v356 = 0;
  if (v474)
  {
    int v363 = 0;
    goto LABEL_435;
  }
  int v363 = 0;
  uint64_t v360 = 0;
  if (v350 == 2)
  {
    unsigned int v480 = 2 * v352;
    if ((v348 & 0x20) != 0) {
      unsigned int v480 = 2;
    }
    uint64_t v357 = v480 | 0x100000000;
    int v363 = v355 | 0xC;
    HIDWORD(v360) = 16;
    goto LABEL_460;
  }
LABEL_461:
  *(void *)&v543[8] = v358;
  *(_DWORD *)&v543[16] = v356;
  *(_DWORD *)&v543[20] = v363;
  *(void *)&v543[24] = v357;
  *(_DWORD *)&v543[32] = v357;
  *(void *)&v543[36] = v360;
  *(_DWORD *)&v543[44] = 0;
  LODWORD(v518.__r_.__value_.__l.__data_) = 1;
  adm::graph::SemanticSet::SemanticSet(v544, (int *)&v518, 1);
  *(_DWORD *)&v544[8] = v499;
  *(void *)&v544[12] = v359[309];
  v544[24] = 0;
  v544[48] = 0;
  v545.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v367 = *((void *)&v519 + 1);
  if (*((void *)&v519 + 1) >= v520[0])
  {
    unint64_t v374 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v519 + 1) - v519) >> 3);
    unint64_t v375 = v374 + 1;
    if (v374 + 1 > 0x1E1E1E1E1E1E1E1) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3) > v375) {
      unint64_t v375 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v520[0] - v519) >> 3);
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v520[0] - v519) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v376 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v376 = v375;
    }
    v530[1].__r_.__value_.__l.__size_ = (std::string::size_type)v520;
    if (v376) {
      unint64_t v376 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v376);
    }
    else {
      uint64_t v377 = 0;
    }
    std::string::size_type v378 = v376 + 136 * v374;
    v530[0].__r_.__value_.__r.__words[0] = v376;
    v530[0].__r_.__value_.__l.__size_ = v378;
    v530[1].__r_.__value_.__r.__words[0] = v376 + 136 * v377;
    long long v379 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
    *(void *)(v378 + 16) = *((void *)&v542.__r_.__value_.__l + 2);
    *(_OWORD *)std::string::size_type v378 = v379;
    memset(&v542, 0, sizeof(v542));
    *(_OWORD *)(v378 + 24) = *(_OWORD *)v543;
    long long v380 = *(_OWORD *)&v543[16];
    long long v381 = *(_OWORD *)&v543[32];
    long long v382 = *(_OWORD *)v544;
    *(_DWORD *)(v378 + 88) = *(_DWORD *)&v544[16];
    *(_OWORD *)(v378 + 72) = v382;
    *(_OWORD *)(v378 + ++*(_DWORD *)(this + 56) = v381;
    *(_OWORD *)(v378 + 40) = v380;
    *(unsigned char *)(v378 + 96) = 0;
    *(unsigned char *)(v378 + 120) = 0;
    if (v544[48])
    {
      long long v383 = *(_OWORD *)&v544[24];
      *(void *)(v378 + 112) = *(void *)&v544[40];
      *(_OWORD *)(v378 + 96) = v383;
      memset(&v544[24], 0, 24);
      *(unsigned char *)(v378 + 120) = 1;
    }
    *(unsigned char *)(v376 + 136 * v374 + 128) = v545.__r_.__value_.__s.__data_[0];
    std::string::size_type v373 = v378 + 136;
    v530[0].__r_.__value_.__r.__words[2] = v378 + 136;
    long long v384 = v519;
    std::string::size_type v385 = v530[0].__r_.__value_.__l.__size_;
    if (*((void *)&v519 + 1) == (void)v519)
    {
      int64x2_t v394 = vdupq_n_s64(*((unint64_t *)&v519 + 1));
    }
    else
    {
      uint64_t v386 = 0;
      do
      {
        std::string::size_type v387 = v385 + v386;
        uint64_t v388 = *((void *)&v384 + 1) + v386;
        long long v389 = *(_OWORD *)(*((void *)&v384 + 1) + v386 - 136);
        *(void *)(v387 - 120) = *(void *)(*((void *)&v384 + 1) + v386 - 120);
        *(_OWORD *)(v387 - 136) = v389;
        *(void *)(v388 - 128) = 0;
        *(void *)(v388 - 120) = 0;
        *(void *)(v388 - 136) = 0;
        *(_OWORD *)(v387 - 112) = *(_OWORD *)(*((void *)&v384 + 1) + v386 - 112);
        long long v390 = *(_OWORD *)(*((void *)&v384 + 1) + v386 - 96);
        long long v391 = *(_OWORD *)(*((void *)&v384 + 1) + v386 - 80);
        long long v392 = *(_OWORD *)(*((void *)&v384 + 1) + v386 - 64);
        *(_DWORD *)(v387 - 48) = *(_DWORD *)(*((void *)&v384 + 1) + v386 - 48);
        *(_OWORD *)(v387 - 80) = v391;
        *(_OWORD *)(v387 - 64) = v392;
        *(_OWORD *)(v387 - 96) = v390;
        *(unsigned char *)(v385 + v386 - 40) = 0;
        *(unsigned char *)(v387 - 16) = 0;
        if (*(unsigned char *)(*((void *)&v384 + 1) + v386 - 16))
        {
          long long v393 = *(_OWORD *)(v388 - 40);
          *(void *)(v385 + v386 - 24) = *(void *)(v388 - 24);
          *(_OWORD *)(v385 + v386 - 40) = v393;
          *(void *)(v388 - 32) = 0;
          *(void *)(v388 - 24) = 0;
          *(void *)(v388 - 40) = 0;
          *(unsigned char *)(v387 - 16) = 1;
        }
        *(unsigned char *)(v387 - 8) = *(unsigned char *)(v388 - 8);
        v386 -= 136;
      }
      while (*((void *)&v384 + 1) + v386 != (void)v384);
      v385 += v386;
      int64x2_t v394 = (int64x2_t)v519;
      std::string::size_type v373 = v530[0].__r_.__value_.__r.__words[2];
    }
    *(void *)&long long v519 = v385;
    *((void *)&v519 + 1) = v373;
    *(int64x2_t *)&v530[0].__r_.__value_.__r.__words[1] = v394;
    std::string::size_type v395 = v520[0];
    v520[0] = v530[1].__r_.__value_.__l.__data_;
    v530[1].__r_.__value_.__r.__words[0] = v395;
    v530[0].__r_.__value_.__r.__words[0] = v394.i64[0];
    std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v530);
  }
  else
  {
    long long v368 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
    *(void *)(*((void *)&v519 + 1) + 16) = *((void *)&v542.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v367 = v368;
    memset(&v542, 0, sizeof(v542));
    *(_OWORD *)(v367 + 24) = *(_OWORD *)v543;
    long long v370 = *(_OWORD *)&v543[32];
    long long v369 = *(_OWORD *)v544;
    int v371 = *(_DWORD *)&v544[16];
    *(_OWORD *)(v367 + 40) = *(_OWORD *)&v543[16];
    *(_DWORD *)(v367 + 88) = v371;
    *(_OWORD *)(v367 + 72) = v369;
    *(_OWORD *)(v367 + ++*(_DWORD *)(this + 56) = v370;
    *(unsigned char *)(v367 + 96) = 0;
    *(unsigned char *)(v367 + 120) = 0;
    if (v544[48])
    {
      long long v372 = *(_OWORD *)&v544[24];
      *(void *)(v367 + 112) = *(void *)&v544[40];
      *(_OWORD *)(v367 + 96) = v372;
      memset(&v544[24], 0, 24);
      *(unsigned char *)(v367 + 120) = 1;
    }
    *(unsigned char *)(v367 + 128) = v545.__r_.__value_.__s.__data_[0];
    std::string::size_type v373 = v367 + 136;
  }
  *((void *)&v519 + 1) = v373;
  if (v544[48] && (v544[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v544[24]);
  }
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v542.__r_.__value_.__l.__data_);
  }
  v396 = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(2uLL);
  *((_DWORD *)v396 + 12) = 2;
  *((void *)v396 + 7) = v347;
  *((_OWORD *)v396 + 4) = xmmword_2489AAA40;
  *((_DWORD *)v396 + 20) = 4;
  *((_DWORD *)v396 + 21) = v352;
  *((void *)v396 + 11) = 32;
  long long v397 = *(_OWORD *)v343;
  long long v398 = *((_OWORD *)v343 + 2);
  *((_OWORD *)v396 + 1) = *((_OWORD *)v343 + 1);
  *((_OWORD *)v396 + 2) = v398;
  *(_OWORD *)v396 = v397;
  operator delete(v343);
  LODWORD(v530[0].__r_.__value_.__l.__data_) = 0;
  LODWORD(v542.__r_.__value_.__l.__data_) = 0;
  *(void *)v543 = 0;
  *(_OWORD *)&v542.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v542.__r_.__value_.__r.__words[1], (long long *)v396, (long long *)v396 + 6, 2uLL);
  memset(&v543[8], 0, 24);
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v543[8], __szc, __szc + 3, 1uLL);
  if (*(unsigned char *)(v501 + 164)) {
    int v399 = *(_DWORD *)(v501 + 160);
  }
  else {
    int v399 = 480;
  }
  *(_DWORD *)&v543[32] = v399;
  v543[36] = 1;
  memset(&v530[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
  v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v530[0].__r_.__value_.__l.__size_;
  v518.__r_.__value_.__s.__data_[8] = 0;
  v400 = operator new(0x40uLL);
  v530[0].__r_.__value_.__l.__size_ = (std::string::size_type)v400;
  v530[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v400;
  v530[1].__r_.__value_.__r.__words[0] = (std::string::size_type)(v400 + 8);
  *(_DWORD *)v400 = v542.__r_.__value_.__l.__data_;
  v400[1] = 0;
  v400[2] = 0;
  v400[3] = 0;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(v400 + 1, (long long *)v542.__r_.__value_.__l.__size_, (long long *)v542.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v542.__r_.__value_.__r.__words[2] - v542.__r_.__value_.__l.__size_) >> 4));
  v400[4] = 0;
  v400[5] = 0;
  v400[6] = 0;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>((_OWORD *)v400 + 2, *(long long **)&v543[8], *(long long **)&v543[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v543[16] - *(void *)&v543[8]) >> 4));
  v400[7] = *(void *)&v543[32];
  v530[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v400 + 8);
  LODWORD(v530[1].__r_.__value_.__r.__words[1]) = adm::utility::getPortSubType(*(unsigned int *)(v498 + 64), *(_DWORD *)(v498 + 68), *(_DWORD *)(v498 + 76), (char *)(v498 + 24));
  v530[1].__r_.__value_.__r.__words[2] = *(void *)(v498 + 56);
  int v401 = *(_DWORD *)(v498 + 88);
  LODWORD(v530[2].__r_.__value_.__l.__data_) = *(_DWORD *)(v498 + 80);
  HIDWORD(v530[2].__r_.__value_.__r.__words[0]) = v401;
  v530[2].__r_.__value_.__l.__size_ = 0;
  v530[2].__r_.__value_.__s.__data_[16] = *(unsigned char *)(v498 + 160);
  uint64_t v532 = 0;
  long long v531 = 0uLL;
  LODWORD(v533) = adm::utility::getPortSubType(*(unsigned int *)(v496 + 64), *(_DWORD *)(v496 + 72), *(_DWORD *)(v496 + 76), (char *)(v496 + 24));
  *((void *)&v533 + 1) = *(void *)(v498 + 56);
  v402 = (float *)&v534;
  float32x2x2_t v403 = *(float32x2x2_t *)(v496 + 80);
  unint64_t v404 = vextq_s8((int8x16_t)v403, (int8x16_t)v403, 8uLL).u64[0];
  vst2_f32(v402, v403);
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v536 = 0u;
  LOBYTE(v537) = 1;
  *(void *)((char *)&v537 + 4) = 0;
  *(void *)&long long v538 = 0;
  BYTE8(v538) = 0;
  if (*(unsigned char *)(v501 + 164)) {
    int v405 = *(_DWORD *)(v501 + 160);
  }
  else {
    int v405 = 480;
  }
  HIDWORD(v538) = 2;
  int v539 = v405;
  if (*((char *)v493 + 247) >= 0) {
    size_t v406 = *((unsigned __int8 *)v493 + 247);
  }
  else {
    size_t v406 = *((void *)v493 + 29);
  }
  v407 = &v518;
  std::string::basic_string[abi:ne180100]((uint64_t)&v518, v406 + 1);
  if ((v518.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v407 = (std::string *)v518.__r_.__value_.__r.__words[0];
  }
  if (v406)
  {
    if (*((char *)v493 + 247) >= 0) {
      v408 = (char *)v493 + 224;
    }
    else {
      v408 = (const void *)*((void *)v493 + 28);
    }
    memmove(v407, v408, v406);
  }
  *(_WORD *)((char *)&v407->__r_.__value_.__l.__data_ + v406) = 95;
  int v409 = *((char *)v493 + 271);
  if (v409 >= 0) {
    v410 = (char *)v493 + 248;
  }
  else {
    v410 = (const std::string::value_type *)*((void *)v493 + 31);
  }
  if (v409 >= 0) {
    std::string::size_type v411 = *((unsigned __int8 *)v493 + 271);
  }
  else {
    std::string::size_type v411 = *((void *)v493 + 32);
  }
  v412 = std::string::append(&v518, v410, v411);
  long long v413 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
  std::string::size_type v541 = v412->__r_.__value_.__r.__words[2];
  long long v540 = v413;
  v412->__r_.__value_.__l.__size_ = 0;
  v412->__r_.__value_.__r.__words[2] = 0;
  v412->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v518.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v543[8])
  {
    *(void *)&v543[16] = *(void *)&v543[8];
    operator delete(*(void **)&v543[8]);
  }
  if (v542.__r_.__value_.__l.__size_)
  {
    v542.__r_.__value_.__r.__words[2] = v542.__r_.__value_.__l.__size_;
    operator delete((void *)v542.__r_.__value_.__l.__size_);
  }
  *(_OWORD *)&v542.__r_.__value_.__l.__data_ = *(_OWORD *)&v521.__r_.__value_.__l.__data_;
  memset(&v521, 0, sizeof(v521));
  v542.__r_.__value_.__r.__words[2] = v521.__r_.__value_.__r.__words[2];
  *(void *)v543 = v522;
  *(_OWORD *)&v543[8] = *(_OWORD *)v495;
  uint64_t v414 = v495[2];
  void *v495 = 0;
  v495[1] = 0;
  v495[2] = 0;
  *(void *)&v543[24] = v414;
  *(void *)v544 = v520[0];
  *(_DWORD *)&v544[8] = v530[0].__r_.__value_.__l.__data_;
  *(std::string *)&v544[32] = v530[1];
  *(_OWORD *)&v543[32] = v519;
  long long v519 = 0uLL;
  v520[0] = 0;
  *(_OWORD *)&v544[16] = *(_OWORD *)&v530[0].__r_.__value_.__r.__words[1];
  memset(&v530[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
  *(_OWORD *)&v545.__r_.__value_.__l.__data_ = *(_OWORD *)&v530[2].__r_.__value_.__l.__data_;
  v545.__r_.__value_.__s.__data_[16] = v530[2].__r_.__value_.__s.__data_[16];
  long long v546 = v531;
  uint64_t v547 = v532;
  long long v531 = 0uLL;
  uint64_t v532 = 0;
  long long v548 = v533;
  *(_OWORD *)v549 = v534;
  long long v415 = *(_OWORD *)cf;
  v530[2].__r_.__value_.__l.__size_ = 0;
  cf[0] = 0;
  *(_OWORD *)&v549[16] = v415;
  long long v550 = v536;
  long long v536 = 0uLL;
  cf[1] = 0;
  int v553 = v539;
  long long v551 = v537;
  long long v552 = v538;
  long long v554 = v540;
  std::string::size_type v555 = v541;
  long long v540 = 0uLL;
  std::string::size_type v541 = 0;
  int v556 = 1;
  caulk::expected<adm::graph::GraphDescription,std::error_code>::expected((uint64_t)v488, (long long *)&v542);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v544[8]);
  v518.__r_.__value_.__r.__words[0] = (std::string::size_type)&v543[32];
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v518);
  if ((v543[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v543[8]);
  }
  if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v542.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v541) < 0) {
    operator delete((void *)v540);
  }
  if (cf[1])
  {
    *(CFTypeRef *)&long long v536 = cf[1];
    operator delete((void *)cf[1]);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if ((void)v531)
  {
    *((void *)&v531 + 1) = v531;
    operator delete((void *)v531);
  }
  if (v530[2].__r_.__value_.__l.__size_) {
    CFRelease((CFTypeRef)v530[2].__r_.__value_.__l.__size_);
  }
  v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v530[0].__r_.__value_.__l.__size_;
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
  operator delete(__szc);
  if (v396) {
    operator delete(v396);
  }
  v542.__r_.__value_.__r.__words[0] = (std::string::size_type)&v519;
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
  if (SHIBYTE(v524) < 0) {
    operator delete((void *)v523);
  }
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0]) {
LABEL_705:
  }
    operator delete(v24);
}

void sub_24895E3E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    *(void *)a11 = 1969448551;
    *(unsigned char *)(a11 + 312) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24895DFFCLL);
  }
  _Unwind_Resume(a1);
}

void *std::__tree<std::string>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

std::string *anonymous namespace'::flattenSemantics(std::string *this, void *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = this;
    int v5 = 0;
    do
    {
      if (v5) {
        std::string::append(v4, "_", 1uLL);
      }
      int v6 = *((char *)v3 + 55);
      if (v6 >= 0) {
        size_t v7 = (const std::string::value_type *)(v3 + 4);
      }
      else {
        size_t v7 = (const std::string::value_type *)v3[4];
      }
      if (v6 >= 0) {
        std::string::size_type v8 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        std::string::size_type v8 = v3[5];
      }
      this = std::string::append(v4, v7, v8);
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      ++v5;
      uint64_t v3 = v10;
    }
    while (v10 != v2);
  }
  return this;
}

void sub_24895EA34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(std::string *a1, uint64_t a2, char *__s)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, __s);
  }
}

void adm::graph::TerminalDescription::~TerminalDescription(void **this)
{
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

BOOL std::operator==[abi:ne180100]<std::string,char [10]>(const void **a1, char *__s)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 0;
  }
  int v4 = *((char *)a1 + 23);
  size_t v5 = v4 >= 0 ? *((unsigned __int8 *)a1 + 23) : (size_t)a1[1];
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    int v6 = a1;
  }
  else {
    int v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

BOOL anonymous namespace'::isHighLatencyRoute(_anonymous_namespace_ *this, const DeviceDescription *a2, const DeviceDescription *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  float v4 = 0.0;
  float v5 = 0.0;
  float v6 = 0.0;
  if (this)
  {
    float v7 = *((double *)this + 7);
    float v6 = (float)*((unsigned int *)this + 20) / v7;
    uint64_t v8 = *((void *)this + 21);
    if (v8 != *((void *)this + 22))
    {
      if (*(unsigned char *)(v8 + 132)) {
        float v9 = (float)*(unsigned int *)(v8 + 128);
      }
      else {
        float v9 = 0.0;
      }
      float v10 = *(double *)(v8 + 64);
      float v5 = v9 / v10;
    }
  }
  float v11 = 0.0;
  float v12 = 0.0;
  if (a2)
  {
    float v13 = *((double *)a2 + 7);
    uint64_t v14 = *((void *)a2 + 24);
    float v15 = 0.0;
    if (v14 != *((void *)a2 + 25))
    {
      if (*(unsigned char *)(v14 + 132)) {
        float v16 = (float)*(unsigned int *)(v14 + 128);
      }
      else {
        float v16 = 0.0;
      }
      float v17 = *(double *)(v14 + 64);
      float v4 = v16 / v17;
    }
    float v18 = (float)*((unsigned int *)a2 + 21);
    uint64_t v19 = *((void *)a2 + 21);
    uint64_t v20 = *((void *)a2 + 22);
    float v21 = (float)*((unsigned int *)a2 + 20) / v13;
    if (v19 != v20)
    {
      while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v19 + 32), "reference"))
      {
        v19 += 136;
        if (v19 == v20) {
          goto LABEL_21;
        }
      }
      if (*(unsigned char *)(v19 + 132)) {
        float v22 = (float)*(unsigned int *)(v19 + 128);
      }
      else {
        float v22 = 0.0;
      }
      float v23 = *(double *)(v19 + 64);
      float v15 = v22 / v23;
    }
LABEL_21:
    float v12 = v21 + v15;
    float v11 = v18 / v13;
  }
  float v24 = (float)(v4 + (float)((float)(v5 + v6) + v11)) - v12;
  if (v24 < 0.0)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      int v27 = 134217984;
      double v28 = v24;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "Total HW presentation latency is %f seconds, mic-ref will be non-causal", (uint8_t *)&v27, 0xCu);
    }
  }
  BOOL result = v24 >= 0.1;
  if (a2)
  {
    if (v24 < 0.1) {
      return *((_DWORD *)a2 + 16) == 1634300528;
    }
  }
  return result;
}

uint64_t caulk::expected<adm::graph::GraphDescription,std::error_code>::expected(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  long long v4 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 32) = v4;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  uint64_t v5 = *((unsigned int *)a2 + 76);
  if (v5 != -1)
  {
    ((void (*)(char *, uint64_t, long long *))off_26FCA1090[v5])(&v7, a1 + 80, a2 + 5);
    *(_DWORD *)(a1 + 304) = v5;
  }
  *(unsigned char *)(a1 + 312) = 1;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 224);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_26FCA1078 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 224) = -1;
  return a1;
}

void std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SC_SD_EEEEEEDcSH_DpT0_(int a1, void **this)
{
}

void adm::vp::UplinkConfiguration::~UplinkConfiguration(void **this)
{
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  uint64_t v2 = this[17];
  if (v2)
  {
    this[18] = v2;
    operator delete(v2);
  }
  long long v3 = this[16];
  if (v3) {
    CFRelease(v3);
  }
  char v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[7];
  if (v5) {
    CFRelease(v5);
  }
  float v6 = this + 1;
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  char v4 = (void **)(a2 + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v4);
  long long v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  char v4 = (void **)(a2 + 48);
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v4 = (void **)(a2 + 24);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v4 = (void **)a2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v3 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v3;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = *(void *)(a3 + 56);
  *(void *)(a3 + ++*(_DWORD *)(this + 56) = 0;
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  long long v4 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  long long v5 = *(_OWORD *)(a3 + 160);
  long long v6 = *(_OWORD *)(a3 + 176);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a3 + 192);
  *(_OWORD *)(a2 + 160) = v5;
  *(_OWORD *)(a2 + 176) = v6;
  __n128 result = *(__n128 *)(a3 + 200);
  *(void *)(a2 + 216) = *(void *)(a3 + 216);
  *(__n128 *)(a2 + 200) = result;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 200) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a3 + 64) = 0;
  long long v3 = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(_OWORD *)(a2 + 72) = v3;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  __n128 result = *(__n128 *)(a3 + 120);
  *(__n128 *)(a2 + 120) = result;
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  uint64_t v5 = *(void *)(a3 + 144);
  *(void *)(a2 + 149) = *(void *)(a3 + 149);
  *(void *)(a2 + 144) = v5;
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm5graph14KernelPropertyEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void *adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getTypeInfo()
{
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getEntry@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 32))(a1);
  *(_DWORD *)a2 = a1[2];
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  return result;
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getData(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::~KernelPropertyType(void *a1)
{
  *a1 = &unk_26FCA10B8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24C5866C0);
}

void *adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::~KernelPropertyType(void *a1)
{
  *a1 = &unk_26FCA10B8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_OWORD *std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(_OWORD *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x555555555555556) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      long long v8 = *a2;
      long long v9 = a2[2];
      result[1] = a2[1];
      result[2] = v9;
      void *result = v8;
      result += 3;
      a2 += 3;
    }
    v4[1] = result;
  }
  return result;
}

void sub_24895F61C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(_OWORD *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x555555555555556) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      long long v8 = *a2;
      long long v9 = a2[2];
      result[1] = a2[1];
      result[2] = v9;
      void *result = v8;
      result += 3;
      a2 += 3;
    }
    v4[1] = result;
  }
  return result;
}

void sub_24895F6C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 192))
  {
    uint64_t v2 = (uint64_t *)(a1 + 176);
    uint64_t v3 = *(void *)(a1 + 176);
    uint64_t v4 = *(uint64_t **)(a1 + 184);
    uint64_t v5 = *v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *(void *)(a1 + 192) = 0;
    if (v4 != (uint64_t *)(a1 + 176))
    {
      do
      {
        long long v6 = (uint64_t *)v4[1];
        std::__destroy_at[abi:ne180100]<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>,0>((uint64_t)(v4 + 2));
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(void *)(a1 + 168))
  {
    uint64_t v7 = *(void *)(a1 + 152);
    long long v8 = *(uint64_t **)(a1 + 160);
    uint64_t v9 = *v8;
    *(void *)(v9 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v9;
    *(void *)(a1 + 168) = 0;
    if (v8 != (uint64_t *)(a1 + 152))
    {
      do
      {
        float v10 = (uint64_t *)v8[1];
        std::__destroy_at[abi:ne180100]<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>,0>((uint64_t)(v8 + 2));
        operator delete(v8);
        long long v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 152));
    }
  }
  float v11 = *(std::__shared_weak_count **)(a1 + 144);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 104));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 40));
  float v12 = *(std::__shared_weak_count **)(a1 + 32);
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void std::__destroy_at[abi:ne180100]<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA11A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA11A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v222 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::recursive_mutex *)(a2 + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 16));
  adm_log_object = get_adm_log_object();
  uint64_t v165 = a3;
  if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_56;
  }
  unint64_t v7 = *(void *)a3;
  v172[0] = 0;
  int v173 = 0;
  v184[0] = 0;
  uint64_t v185 = 0;
  log = adm_log_object;
  if (*(_DWORD *)v7 == 1)
  {
    *(void *)&v216[8] = 0;
    v216[0] = 3;
    long long v8 = (uint64_t *)operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "HardwareEchoAndDynamicsDSPInSeparateNodes");
  }
  else
  {
    if (*(_DWORD *)v7)
    {
      long long v8 = 0;
      char v9 = 0;
      goto LABEL_8;
    }
    *(void *)&v216[8] = 0;
    v216[0] = 3;
    long long v8 = (uint64_t *)operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "AllOfUplinkDSPInOneNode");
  }
  *(void *)&v216[8] = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  v184[0] = 3;
  v216[0] = 0;
  uint64_t v185 = v8;
  *(void *)&v216[8] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v216[8], 0);
  char v9 = 3;
LABEL_8:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  float v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  int v11 = *v10;
  *float v10 = v9;
  v184[0] = v11;
  float v12 = (uint64_t *)*((void *)v10 + 1);
  *((void *)v10 + 1) = v8;
  uint64_t v185 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v185, v11);
  uint64_t v183 = 0;
  v182[0] = 2;
  uint64_t v14 = *(char **)(v7 + 8);
  float v13 = *(char **)(v7 + 16);
  float v15 = (uint64_t *)operator new(0x18uLL);
  float v16 = v15;
  *float v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  long long v186 = v15;
  LOBYTE(v187) = 0;
  if (v13 != v14)
  {
    unint64_t v162 = v7;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v15, (v13 - v14) >> 6);
    uint64_t v163 = v16;
    uint64_t v17 = v16[1];
    uint64_t v180 = v17;
    uint64_t v178 = v17;
    std::string __p = v16 + 2;
    p_p = (void **)&v178;
    unint64_t v190 = &v180;
    char v191 = 0;
    v167 = v13;
    do
    {
      int v169 = v14;
      *(unsigned char *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;
      v194[0] = 0;
      std::string::size_type v195 = 0;
      switch(*(_DWORD *)v14)
      {
        case 0:
          *(void *)&v216[8] = 0;
          v216[0] = 3;
          float v18 = (uint64_t *)operator new(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v18, "AllOfUplinkDSP");
          *(void *)&v216[8] = v18;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
          uint8_t v19 = 3;
          v194[0] = 3;
          v216[0] = 0;
          std::string::size_type v195 = v18;
          *(void *)&v216[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
          uint64_t v20 = (uint64_t **)&v216[8];
          int v21 = 0;
          goto LABEL_15;
        case 1:
          uint64_t v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)buf, "HardwareDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22);
          uint8_t v19 = buf[0];
          v194[0] = buf[0];
          buf[0] = 0;
          float v18 = *(uint64_t **)&buf[8];
          std::string::size_type v195 = *(uint64_t **)&buf[8];
          *(void *)&uint8_t buf[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          int v21 = buf[0];
          uint64_t v20 = (uint64_t **)&buf[8];
          goto LABEL_15;
        case 2:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)&v202, "EchoDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
          uint8_t v19 = v202;
          v194[0] = v202;
          LOBYTE(v202) = 0;
          float v18 = v203;
          std::string::size_type v195 = v203;
          long long v203 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
          int v21 = v202;
          uint64_t v20 = &v203;
          goto LABEL_15;
        case 3:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v200, "DynamicsDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
          uint8_t v19 = v200[0];
          v194[0] = v200[0];
          v200[0] = 0;
          float v18 = *(uint64_t **)&v201[4];
          std::string::size_type v195 = *(uint64_t **)&v201[4];
          *(void *)&v201[4] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
          int v21 = v200[0];
          uint64_t v20 = (uint64_t **)&v201[4];
LABEL_15:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v20, v21);
          break;
        default:
          float v18 = 0;
          uint8_t v19 = 0;
          break;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
      unsigned int v170 = (unsigned __int8 *)v17;
      float v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v17, "type");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
      int v24 = *v23;
      char *v23 = v19;
      v194[0] = v24;
      std::string::size_type v25 = (uint64_t *)*((void *)v23 + 1);
      *((void *)v23 + 1) = v18;
      std::string::size_type v195 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v195, v24);
      unint64_t v26 = (_DWORD *)*((void *)v169 + 1);
      int v27 = (_DWORD *)*((void *)v169 + 2);
      while (v26 != v27)
      {
        double v28 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "input_format_map");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
        *(void *)&uint8_t buf[16] = buf;
        LOBYTE(v211) = 1;
        LOBYTE(v212) = 0;
        long long v213 = 0;
        switch(*v26)
        {
          case 0:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)&v202, "Microphone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
            char v29 = v212;
            LOBYTE(v212) = (_BYTE)v202;
            LOBYTE(v202) = v29;
            unint64_t v30 = v213;
            long long v213 = v203;
            long long v203 = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
            int v31 = v202;
            uint64_t v32 = &v203;
            goto LABEL_24;
          case 1:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v200, "MicrophoneClipData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
            uint8_t v37 = v212;
            LOBYTE(v212) = v200[0];
            v200[0] = v37;
            unint64_t v38 = v213;
            long long v213 = *(uint64_t **)&v201[4];
            *(void *)&v201[4] = v38;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
            int v31 = v200[0];
            uint64_t v32 = (uint64_t **)&v201[4];
            goto LABEL_24;
          case 2:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v198);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            unsigned __int8 v33 = v212;
            LOBYTE(v212) = v198[0];
            v198[0] = v33;
            uint64_t v34 = v213;
            long long v213 = v199;
            uint64_t v199 = v34;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            int v31 = v198[0];
            uint64_t v32 = &v199;
            goto LABEL_24;
          case 3:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v196, "Voice");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
            unsigned __int8 v35 = v212;
            LOBYTE(v212) = v196[0];
            v196[0] = v35;
            unint64_t v36 = v213;
            long long v213 = v197;
            std::string::size_type v197 = v36;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
            int v31 = v196[0];
            uint64_t v32 = &v197;
LABEL_24:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v32, v31);
            break;
          default:
            break;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
        long long v214 = &v212;
        char v215 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v216, (uint64_t)buf, 2);
        *(void *)&long long v217 = v216;
        BYTE8(v217) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v202);
        long long v204 = &v202;
        char v205 = 1;
        v206[0] = 0;
        uint64_t v207 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v206, (uint64_t)(v26 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v206);
        uint64_t v208 = v206;
        char v209 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v218, (uint64_t)&v202, 2);
        unint64_t v220 = &v218;
        char v221 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v28, (uint64_t)v216, 2);
        for (uint64_t i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v219[i - 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v219[i], v219[i - 8]);
        }
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v206[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v207 + j), v206[j]);
        }
        for (uint64_t k = 0; k != -8; k -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212 + k * 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v213)[k], *((unsigned __int8 *)&v212 + k * 8));
        }
        v26 += 12;
      }
      int v42 = (_DWORD *)*((void *)v169 + 4);
      for (uint64_t m = (_DWORD *)*((void *)v169 + 5); v42 != m; v42 += 12)
      {
        int v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "output_format_map");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
        *(void *)&uint8_t buf[16] = buf;
        LOBYTE(v211) = 1;
        LOBYTE(v212) = 0;
        long long v213 = 0;
        switch(*v42)
        {
          case 0:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)&v202, "Microphone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
            char v45 = v212;
            LOBYTE(v212) = (_BYTE)v202;
            LOBYTE(v202) = v45;
            int v46 = v213;
            long long v213 = v203;
            long long v203 = v46;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
            int v47 = v202;
            std::string::size_type v48 = &v203;
            goto LABEL_38;
          case 1:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v200, "MicrophoneClipData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
            uint8_t v53 = v212;
            LOBYTE(v212) = v200[0];
            v200[0] = v53;
            uint64_t v54 = v213;
            long long v213 = *(uint64_t **)&v201[4];
            *(void *)&v201[4] = v54;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
            int v47 = v200[0];
            std::string::size_type v48 = (uint64_t **)&v201[4];
            goto LABEL_38;
          case 2:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v198);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            unsigned __int8 v49 = v212;
            LOBYTE(v212) = v198[0];
            v198[0] = v49;
            std::string v50 = v213;
            long long v213 = v199;
            uint64_t v199 = v50;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            int v47 = v198[0];
            std::string::size_type v48 = &v199;
            goto LABEL_38;
          case 3:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v196, "Voice");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
            unsigned __int8 v51 = v212;
            LOBYTE(v212) = v196[0];
            v196[0] = v51;
            BOOL v52 = v213;
            long long v213 = v197;
            std::string::size_type v197 = v52;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
            int v47 = v196[0];
            std::string::size_type v48 = &v197;
LABEL_38:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v48, v47);
            break;
          default:
            break;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212);
        long long v214 = &v212;
        char v215 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v216, (uint64_t)buf, 2);
        *(void *)&long long v217 = v216;
        BYTE8(v217) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v202);
        long long v204 = &v202;
        char v205 = 1;
        v206[0] = 0;
        uint64_t v207 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v206, (uint64_t)(v42 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v206);
        uint64_t v208 = v206;
        char v209 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v218, (uint64_t)&v202, 2);
        unint64_t v220 = &v218;
        char v221 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v44, (uint64_t)v216, 2);
        for (uint64_t n = 0; n != -64; n -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v219[n - 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v219[n], v219[n - 8]);
        }
        for (iuint64_t i = 0; ii != -64; ii -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v206[ii]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v207 + ii), v206[ii]);
        }
        for (juint64_t j = 0; jj != -8; jj -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v212 + jj * 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v213)[jj], *((unsigned __int8 *)&v212 + jj * 8));
        }
      }
      if (v169[60]) {
        long long v58 = (uint64_t *)*((unsigned int *)v169 + 14);
      }
      else {
        long long v58 = 0;
      }
      v192[0] = 6;
      std::string::size_type v193 = v58;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
      uint64_t v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "block_size");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
      char v60 = *v59;
      int v168 = *v59;
      char *v59 = 6;
      v192[0] = v60;
      long long v61 = (uint64_t *)*((void *)v59 + 1);
      *((void *)v59 + 1) = v58;
      std::string::size_type v193 = v61;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v168);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v170);
      uint64_t v14 = v169 + 64;
      uint64_t v17 = v180 + 16;
      v180 += 16;
    }
    while (v169 + 64 != v167);
    char v191 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
    float v16 = v163;
    v163[1] = v17;
    unint64_t v7 = v162;
  }
  uint64_t v183 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
  uint64_t v62 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "node_configurations");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
  int v63 = *v62;
  *uint64_t v62 = 2;
  v182[0] = v63;
  unint64_t v64 = (uint64_t *)*((void *)v62 + 1);
  *((void *)v62 + 1) = v16;
  uint64_t v183 = v64;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v62);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v183, v63);
  uint64_t v65 = *(unsigned int *)(v7 + 32);
  v216[0] = 6;
  *(void *)&v216[8] = v65;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  uint64_t v66 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "microphone_port_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  int v67 = *v66;
  *uint64_t v66 = 6;
  v216[0] = v67;
  uint64_t v68 = *((void *)v66 + 1);
  *((void *)v66 + 1) = v65;
  *(void *)&v216[8] = v68;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v216[8], v67);
  uint64_t v69 = *(void *)(v7 + 40);
  buf[0] = 7;
  *(void *)&uint8_t buf[8] = v69;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  long long v70 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "microphone_device_sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  int v71 = *v70;
  *long long v70 = 7;
  buf[0] = v71;
  uint64_t v72 = *((void *)v70 + 1);
  *((void *)v70 + 1) = v69;
  *(void *)&uint8_t buf[8] = v72;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[8], v71);
  int v73 = (uint64_t *)*(unsigned int *)(v7 + 48);
  LOBYTE(v202) = 6;
  long long v203 = v73;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
  long long v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "microphone_device_input_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
  int v75 = *v74;
  char *v74 = 6;
  LOBYTE(v202) = v75;
  unint64_t v76 = (uint64_t *)*((void *)v74 + 1);
  *((void *)v74 + 1) = v73;
  long long v203 = v76;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v74);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v203, v75);
  unint64_t v77 = (void **)*(unsigned int *)(v7 + 52);
  LOBYTE(__p) = 6;
  p_p = v77;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  unint64_t v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "microphone_device_input_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  int v79 = *v78;
  *unint64_t v78 = 6;
  LOBYTE(__p) = v79;
  uint64_t v80 = (uint64_t *)*((void *)v78 + 1);
  *((void *)v78 + 1) = v77;
  p_p = (void **)v80;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v78);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&p_p, v79);
  uint64_t v81 = *(unsigned int *)(v7 + 96);
  v200[0] = 6;
  *(void *)&v201[4] = v81;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
  unint64_t v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_port_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
  int v83 = *v82;
  char *v82 = 6;
  v200[0] = v83;
  uint64_t v84 = *((void *)v82 + 1);
  *((void *)v82 + 1) = v81;
  *(void *)&v201[4] = v84;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v82);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v200);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v201[4], v83);
  std::string::size_type v85 = *(uint64_t **)(v7 + 104);
  v198[0] = 7;
  uint64_t v199 = v85;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
  uint64_t v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_device_sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
  int v87 = *v86;
  char *v86 = 7;
  v198[0] = v87;
  std::string::size_type v88 = (uint64_t *)*((void *)v86 + 1);
  *((void *)v86 + 1) = v85;
  uint64_t v199 = v88;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v199, v87);
  std::string::size_type v89 = (uint64_t *)*(unsigned int *)(v7 + 112);
  v196[0] = 6;
  std::string::size_type v197 = v89;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  std::string::size_type v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_device_input_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  int v91 = *v90;
  *std::string::size_type v90 = 6;
  v196[0] = v91;
  std::string::size_type v92 = (uint64_t *)*((void *)v90 + 1);
  *((void *)v90 + 1) = v89;
  std::string::size_type v197 = v92;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v197, v91);
  std::string::size_type v93 = (uint64_t *)*(unsigned int *)(v7 + 116);
  v194[0] = 6;
  std::string::size_type v195 = v93;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
  long long v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_device_input_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
  int v95 = *v94;
  *long long v94 = 6;
  v194[0] = v95;
  long long v96 = (uint64_t *)*((void *)v94 + 1);
  *((void *)v94 + 1) = v93;
  std::string::size_type v195 = v96;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v194);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v195, v95);
  long long v97 = (uint64_t *)*(unsigned int *)(v7 + 120);
  v192[0] = 6;
  std::string::size_type v193 = v97;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
  long long v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_device_output_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
  int v99 = *v98;
  *long long v98 = 6;
  v192[0] = v99;
  std::string::size_type v100 = (uint64_t *)*((void *)v98 + 1);
  *((void *)v98 + 1) = v97;
  std::string::size_type v193 = v100;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v99);
  long long v101 = (uint64_t *)*(unsigned int *)(v7 + 124);
  LOBYTE(v186) = 6;
  long long v187 = v101;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v186);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v186);
  long long v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_device_output_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v186);
  int v103 = *v102;
  char *v102 = 6;
  LOBYTE(v186) = v103;
  long long v104 = (uint64_t *)*((void *)v102 + 1);
  *((void *)v102 + 1) = v101;
  long long v187 = v104;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v186);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v103);
  long long v105 = (uint64_t *)*(unsigned __int8 *)(v7 + 160);
  LOBYTE(v180) = 4;
  uint64_t v181 = v105;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v180);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v180);
  unint64_t v106 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "reference_is_hardware_tap_stream");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v180);
  int v107 = *v106;
  *unint64_t v106 = 4;
  LOBYTE(v180) = v107;
  std::string::size_type v108 = (uint64_t *)*((void *)v106 + 1);
  *((void *)v106 + 1) = v105;
  uint64_t v181 = v108;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v180);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v181, v107);
  uint64_t v109 = (uint64_t *)*(unsigned int *)(v7 + 188);
  LOBYTE(v178) = 5;
  int v179 = v109;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v178);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v178);
  std::string::size_type v110 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "chat_flavor");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v178);
  int v111 = *v110;
  *std::string::size_type v110 = 5;
  LOBYTE(v178) = v111;
  long long v112 = (uint64_t *)*((void *)v110 + 1);
  *((void *)v110 + 1) = v109;
  int v179 = v112;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v178);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v179, v111);
  long long v113 = (uint64_t *)*(unsigned int *)(v7 + 192);
  v176[0] = 6;
  std::string::size_type v177 = v113;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
  long long v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "client_io_block_size");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
  int v115 = *v114;
  *long long v114 = 6;
  v176[0] = v115;
  long long v116 = (uint64_t *)*((void *)v114 + 1);
  *((void *)v114 + 1) = v113;
  std::string::size_type v177 = v116;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v177, v115);
  int v175 = 0;
  v174[0] = 3;
  std::string::size_type v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(v7 + 200);
  int v175 = v117;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
  long long v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "client_uid");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
  LODWORD(v113) = *v118;
  *long long v118 = 3;
  v174[0] = (char)v113;
  long long v119 = (uint64_t *)*((void *)v118 + 1);
  *((void *)v118 + 1) = v117;
  int v175 = (std::string *)v119;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v175, (int)v113);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v216, (uint64_t)v172, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v173, v172[0]);
  if ((SBYTE7(v217) & 0x80u) == 0) {
    long long v120 = v216;
  }
  else {
    long long v120 = *(uint8_t **)v216;
  }
  *(_DWORD *)buf = 136315394;
  *(void *)&buf[4] = "uplink";
  *(_WORD *)&buf[12] = 2080;
  *(void *)&buf[14] = v120;
  _os_log_impl(&dword_248947000, log, OS_LOG_TYPE_DEFAULT, "creating %s voice processor proxy list with configuration: %s", buf, 0x16u);
  a3 = v165;
  if (SBYTE7(v217) < 0) {
    operator delete(*(void **)v216);
  }
LABEL_56:
  int v121 = *(_DWORD *)(a2 + 176);
  unint64_t v122 = *(void *)a3;
  if (v121 == **(_DWORD **)a3 && *(_DWORD *)(v122 + 192))
  {
    if (v121 == 1)
    {
      if (*(void *)(v122 + 16) - *(void *)(v122 + 8) == 192)
      {
        adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v216, v122, *(std::__shared_weak_count **)(a3 + 8), 1);
        if ((_BYTE)v218)
        {
          if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 0)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 0))
          {
            BOOL v125 = 1;
            if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 1)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 2))
            {
              long long v126 = (int *)v217;
              if (!(void)v217)
              {
                long long v126 = *(int **)(*(void *)v216 + 8);
                if (*v126 != DWORD2(v217))
                {
                  long long v127 = v126 + 16;
                  do
                  {
                    int v128 = *v127;
                    v127 += 16;
                  }
                  while (v128 != DWORD2(v217));
                  long long v126 = v127 - 16;
                }
              }
              BOOL v125 = *((unsigned char *)v126 + 60) == 0;
            }
          }
          else
          {
            BOOL v125 = 1;
          }
          if ((_BYTE)v218 && *(void *)&v216[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v216[8]);
          }
          if (!v125)
          {
            adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v216, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), 2);
            if ((_BYTE)v218)
            {
              BOOL v131 = 0;
              if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 0))
              {
                if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 1)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 3))
                {
                  std::string::size_type v132 = (int *)v217;
                  if (!(void)v217)
                  {
                    std::string::size_type v132 = *(int **)(*(void *)v216 + 8);
                    if (*v132 != DWORD2(v217))
                    {
                      int v133 = v132 + 16;
                      do
                      {
                        int v134 = *v133;
                        v133 += 16;
                      }
                      while (v134 != DWORD2(v217));
                      std::string::size_type v132 = v133 - 16;
                    }
                  }
                  BOOL v131 = *((unsigned char *)v132 + 60) != 0;
                }
                else
                {
                  BOOL v131 = 0;
                }
              }
              if ((_BYTE)v218 && *(void *)&v216[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v216[8]);
              }
              if (v131)
              {
                adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v216, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8), 3);
                if ((_BYTE)v218)
                {
                  if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 3)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 3))
                  {
                    uint64_t v156 = (int *)v217;
                    if (!(void)v217)
                    {
                      uint64_t v156 = *(int **)(*(void *)v216 + 8);
                      if (*v156 != DWORD2(v217))
                      {
                        v157 = v156 + 16;
                        do
                        {
                          int v158 = *v157;
                          v157 += 16;
                        }
                        while (v158 != DWORD2(v217));
                        uint64_t v156 = v157 - 16;
                      }
                    }
                    BOOL v159 = *((unsigned char *)v156 + 60) != 0;
                  }
                  else
                  {
                    BOOL v159 = 0;
                  }
                  if ((_BYTE)v218 && *(void *)&v216[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v216[8]);
                  }
                  if (v159)
                  {
LABEL_84:
                    unint64_t v129 = *(void *)a3;
                    uint64_t v130 = *(void *)(a3 + 8);
                    *(void *)long long v216 = *(void *)a3;
                    *(void *)&v216[8] = v130;
                    if (v130)
                    {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
                      unint64_t v129 = *(void *)a3;
                    }
                    long long v217 = 0uLL;
                    v219[0] = 0;
                    uint64_t v218 = 0;
                    long long v203 = 0;
                    long long v204 = 0;
                    long long v202 = 0;
                    if (*(void *)(v129 + 8) != *(void *)(v129 + 16)) {
                      operator new();
                    }
                    uint64_t v135 = operator new(0x40uLL);
                    long long v136 = *(_OWORD *)v216;
                    long long v137 = v217;
                    memset(v216, 0, sizeof(v216));
                    v135[1] = v136;
                    v135[2] = v137;
                    *((void *)v135 + 6) = 0;
                    uint64_t v218 = 0;
                    long long v217 = 0uLL;
                    *((unsigned char *)v135 + ++*(_DWORD *)(this + 56) = v219[0];
                    uint64_t v138 = *(void *)(a2 + 128);
                    *(void *)uint64_t v135 = v138;
                    *((void *)v135 + 1) = a2 + 128;
                    *(void *)(v138 + 8) = v135;
                    *(void *)(a2 + 128) = v135;
                    ++*(void *)(a2 + 144);
                    adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor((adm::vp::detail::ProxyFactoryImplementation *)buf, a2);
                    if (!buf[16])
                    {
                      char v155 = get_adm_log_object();
                      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                      {
                        adm::vp::to_json_str<std::error_code>(&__p, (const std::error_code *)buf);
                        int v161 = SHIBYTE(v190) >= 0 ? &__p : (void **)__p;
                        *(_DWORD *)std::string::size_type v200 = 136315394;
                        *(void *)std::string::size_type v201 = "uplink";
                        *(_WORD *)&v201[8] = 2080;
                        *(void *)&v201[10] = v161;
                        _os_log_error_impl(&dword_248947000, v155, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy due to error: %s", v200, 0x16u);
                        if (SHIBYTE(v190) < 0) {
                          operator delete(__p);
                        }
                      }
                      *(_OWORD *)a1 = *(_OWORD *)buf;
                      *(unsigned char *)(a1 + 24) = 0;
                      goto LABEL_136;
                    }
                    std::string __p = &__p;
                    p_p = &__p;
                    unint64_t v190 = 0;
                    uint64_t v139 = v202;
                    std::string::size_type v140 = v203;
                    if (v202 == v203)
                    {
                      *(void *)a1 = a1;
                      *(void *)(a1 + 8) = a1;
                      uint64_t v141 = (uint64_t *)a1;
                      std::string::size_type v142 = (uint64_t **)(a1 + 16);
                    }
                    else
                    {
                      uint64_t v141 = (uint64_t *)a1;
                      std::string::size_type v142 = &v190;
                      do
                      {
                        uint64_t v143 = *v139;
                        std::string::size_type v144 = (std::__shared_weak_count *)v139[1];
                        *(_OWORD *)unsigned int v171 = 0u;
                        if (v144)
                        {
                          atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
                          *(void *)&v171[2] = v144;
                          atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (!v143)
                        {
                          std::string::size_type v145 = get_adm_log_object();
                          if (os_log_type_enabled(v145, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)std::string::size_type v200 = 0;
                            _os_log_fault_impl(&dword_248947000, v145, OS_LOG_TYPE_FAULT, "Invalid VoiceProcessorProxy implementation provided", v200, 2u);
                          }
                        }
                        uint64_t v146 = operator new(0x20uLL);
                        *((void *)&v147 + 1) = *(void *)&v171[2];
                        *(void *)&long long v147 = v143;
                        v146[1] = v147;
                        std::string::size_type v148 = __p;
                        *(void *)uint64_t v146 = __p;
                        *((void *)v146 + 1) = &__p;
                        v148[1] = v146;
                        std::string __p = v146;
                        unint64_t v190 = (uint64_t *)((char *)v190 + 1);
                        if (v144) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
                        }
                        v139 += 2;
                      }
                      while (v139 != v140);
                      long long v149 = v190;
                      long long v150 = v141;
                      *uint64_t v141 = (uint64_t)v141;
                      v141[1] = (uint64_t)v141;
                      v141[2] = 0;
                      if (!v149) {
                        goto LABEL_135;
                      }
                      long long v152 = (void **)__p;
                      long long v151 = (uint64_t *)p_p;
                      long long v153 = *p_p;
                      v153[1] = *((void *)__p + 1);
                      *v152[1] = v153;
                      uint64_t v154 = *v141;
                      *(void *)(v154 + 8) = v151;
                      *long long v151 = v154;
                      *uint64_t v141 = (uint64_t)v152;
                      v152[1] = v141;
                      v141[2] = (uint64_t)v149;
                    }
                    uint64_t *v142 = 0;
                    long long v150 = v141;
LABEL_135:
                    *((unsigned char *)v150 + 24) = 1;
                    std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)&__p);
LABEL_136:
                    *(void *)buf = &v202;
                    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    *(void *)buf = &v217;
                    std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    if (*(void *)&v216[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v216[8]);
                    }
                    goto LABEL_146;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (!v121 && *(void *)(v122 + 16) - *(void *)(v122 + 8) == 64)
    {
      adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v216, v122, *(std::__shared_weak_count **)(a3 + 8), 0);
      if ((_BYTE)v218)
      {
        if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 0)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v216, 3))
        {
          uint64_t v123 = (double *)adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216);
          BOOL v124 = *v123 != *(double *)adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v216);
        }
        else
        {
          BOOL v124 = 1;
        }
        if ((_BYTE)v218 && *(void *)&v216[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v216[8]);
        }
        if (!v124) {
          goto LABEL_84;
        }
      }
    }
  }
  int v160 = get_adm_log_object();
  if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long v216 = 136315138;
    *(void *)&v216[4] = "uplink";
    _os_log_error_impl(&dword_248947000, v160, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy list due to invalid configuration", v216, 0xCu);
  }
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_146:
  std::recursive_mutex::unlock(v5);
}

void sub_2489615C8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x248961A70);
  }
  JUMPOUT(0x2489619A8);
}

void sub_2489615E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1}::operator()((uint64_t)&a31, v31);
    __cxa_rethrow();
  }
  JUMPOUT(0x2489619A8);
}

void sub_248961608(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x248961A74);
  }
  JUMPOUT(0x2489619A8);
}

void sub_24896161C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x248961A64);
  }
  JUMPOUT(0x2489619A8);
}

void sub_24896162C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a33);
    JUMPOUT(0x248961A74);
  }
  JUMPOUT(0x2489619A8);
}

void sub_248961744(uint64_t a1, int a2)
{
  if (a2)
  {
    operator delete(v2);
    JUMPOUT(0x2489619B0);
  }
  JUMPOUT(0x2489619A8);
}

void sub_248961758(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        long long v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor(adm::vp::detail::ProxyFactoryImplementation *this, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::recursive_mutex *)(a2 + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 16));
  if (!*(void *)(a2 + 112) && *(void *)(a2 + 144) && *(void *)(a2 + 168))
  {
    uint64_t v5 = *(void *)(a2 + 104);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(adm::vp::SPI **__return_ptr))(*(void *)v5 + 48))(v14);
    if (v14[0]) {
      operator new();
    }
    v14[0] = 0;
    char v9 = *(std::__shared_weak_count **)(a2 + 120);
    *(_OWORD *)(a2 + 112) = 0u;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      float v10 = v14[0];
      v14[0] = 0;
      if (v10)
      {
        adm::vp::SPI::~SPI(v10);
        MEMORY[0x24C5866C0]();
      }
    }
    else
    {
      v14[0] = 0;
    }
  }
  adm::vp::detail::ProxyFactoryImplementation::configureUplink((adm::vp::detail::ProxyFactoryImplementation *)v14, (void *)a2);
  if (!v15)
  {
    adm_log_object = get_adm_log_object();
    if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_OWORD *)this = *(_OWORD *)v14;
      *((unsigned char *)this + 16) = 0;
      goto LABEL_17;
    }
    buf[0] = 0;
    *(void *)&v17[4] = 0;
    std::to_json(buf, (const std::error_code *)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[4], buf[0]);
    if (v13 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v17 = v7;
    long long v8 = "failed to configure voice processor uplink due to error: %s";
LABEL_26:
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, v8, buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_16;
  }
  adm::vp::detail::ProxyFactoryImplementation::configureDownlink((adm::vp::detail::ProxyFactoryImplementation *)v14, a2);
  if (!v15)
  {
    adm_log_object = get_adm_log_object();
    if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    buf[0] = 0;
    *(void *)&v17[4] = 0;
    std::to_json(buf, (const std::error_code *)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[4], buf[0]);
    if (v13 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v17 = v11;
    long long v8 = "failed to configure voice processor downlink due to error: %s";
    goto LABEL_26;
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 16) = 1;
LABEL_17:
  std::recursive_mutex::unlock(v4);
}

void sub_248961E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, adm::vp::SPI *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
  {
    std::unique_ptr<adm::vp::SPI>::reset[abi:ne180100](&a12);
    if (a2 == 2)
    {
      uint8_t v19 = __cxa_begin_catch(exception_object);
      uint64_t v20 = *(std::__shared_weak_count **)(v16 + 120);
      *(void *)(v16 + 112) = 0;
      *(void *)(v16 + 120) = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      *(_OWORD *)uint64_t v15 = v19[1];
      *(unsigned char *)(v15 + 16) = 0;
      __cxa_end_catch();
      JUMPOUT(0x248961CE0);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  long long v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void adm::vp::to_json_str<std::error_code>(void *a1, const std::error_code *a2)
{
  v3[0] = 0;
  uint64_t v4 = 0;
  std::to_json(v3, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a1, (uint64_t)v3, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v4, v3[0]);
}

void sub_248961FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void std::to_json(unsigned __int8 *a1, const std::error_code *a2)
{
  val = (uint64_t *)a2->__val_;
  v21[0] = 5;
  uint64_t v22 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  long long v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  int v6 = *v5;
  char *v5 = 5;
  v21[0] = v6;
  uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
  *((void *)v5 + 1) = val;
  uint64_t v22 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v6);
  std::error_code::message(&v18, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v19, (uint64_t)&v18);
  uint64_t v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  char v9 = *v8;
  char *v8 = v19[0];
  v19[0] = v9;
  float v10 = (uint64_t *)*((void *)v8 + 1);
  *((void *)v8 + 1) = v20;
  uint64_t v20 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  int v11 = (char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  v16[0] = 3;
  float v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(v11);
  uint64_t v17 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  char v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  int v14 = *v13;
  *char v13 = 3;
  v16[0] = v14;
  uint64_t v15 = (uint64_t *)*((void *)v13 + 1);
  *((void *)v13 + 1) = v12;
  uint64_t v17 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v14);
}

void sub_2489621C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    long long v5 = operator new(0x18uLL);
    _DWORD v5[2] = 0;
    v5[1] = 0;
    void *v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v12 = *a1;
    if (v12 > 9) {
      char v13 = "number";
    }
    else {
      char v13 = off_265242F20[v12];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v13);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, "cannot use operator[] with a string argument with ", &__p);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&v15);
  }
  int v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t v7 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v6, &v16, &__p);
  uint64_t v8 = (char *)*v7;
  if (!*v7)
  {
    char v9 = (uint64_t **)v7;
    uint64_t v8 = (char *)operator new(0x48uLL);
    v15.__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
    *(std::string *)(v8 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    v8[56] = 0;
    *((void *)v8 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    v15.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v6, v16, v9, (uint64_t *)v8);
    v15.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v8 + 56;
}

void sub_2489623BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_24896246C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(void *)a1) {
      adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(*(adm::vp::detail::ProxyFactoryImplementation **)a1);
    }
  }
  else
  {
    long long v5 = 0;
  }
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(adm::vp::detail::ProxyFactoryImplementation *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  adm::vp::detail::ProxyFactoryImplementation::configureUplink((adm::vp::detail::ProxyFactoryImplementation *)&v9, this);
  if (!v10)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 0;
      *(void *)&v12[4] = 0;
      std::to_json(buf, &v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v12[4], buf[0]);
      long long v5 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(void *)unint64_t v12 = v5;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to re-configure voice processor uplink due to error: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  adm::vp::detail::ProxyFactoryImplementation::configureDownlink((adm::vp::detail::ProxyFactoryImplementation *)&v9, (uint64_t)this);
  if (!v10)
  {
    uint64_t v3 = get_adm_log_object();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 0;
      *(void *)&v12[4] = 0;
      std::to_json(buf, &v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v12[4], buf[0]);
      int v6 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(void *)unint64_t v12 = v6;
      _os_log_error_impl(&dword_248947000, v3, OS_LOG_TYPE_ERROR, "failed to re-configure voice processor downlink due to error: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (*((void *)this + 14) && !*((void *)this + 18) && !*((void *)this + 21))
  {
    int v4 = (std::__shared_weak_count *)*((void *)this + 15);
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_248962744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void adm::vp::detail::ProxyFactoryImplementation::configureUplink(adm::vp::detail::ProxyFactoryImplementation *this, void *a2)
{
  uint64_t v3 = this;
  uint64_t v110 = *MEMORY[0x263EF8340];
  while (1)
  {
    if (!a2[14] || !a2[18])
    {
      *(unsigned char *)uint64_t v3 = 0;
      *((unsigned char *)v3 + 16) = 1;
      return;
    }
    uint64_t v4 = a2[17];
    long long v105 = 0;
    unint64_t v106 = 0;
    unint64_t v107 = 0;
    int v6 = *(uint64_t **)(v4 + 32);
    long long v5 = *(uint64_t **)(v4 + 40);
    if (v6 == v5)
    {
      int v27 = 0;
      unint64_t v26 = 0;
      uint64_t v28 = *(void *)(v4 + 32);
    }
    else
    {
      do
      {
        uint64_t v7 = (std::__shared_weak_count *)v6[1];
        if (v7)
        {
          uint64_t v8 = *v6;
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::error_code v9 = std::__shared_weak_count::lock(v7);
          unint64_t v12 = v9;
          if (v9) {
            BOOL v13 = v8 == 0;
          }
          else {
            BOOL v13 = 1;
          }
          if (!v13)
          {
            v10.i64[0] = 0;
            v11.i64[0] = (uint64_t)v9;
            int8x16_t v14 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v11, v10)).i64[0], 0);
            v15.i64[0] = v8;
            v15.i64[1] = (uint64_t)v9;
            int8x16_t v16 = vandq_s8(v15, v14);
            uint64_t v17 = v106;
            if ((unint64_t)v106 >= v107)
            {
              int8x16_t v76 = v16;
              uint64_t v19 = ((char *)v106 - v105) >> 4;
              unint64_t v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 60) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v21 = v107 - (void)v105;
              if ((uint64_t)(v107 - (void)v105) >> 3 > v20) {
                unint64_t v20 = v21 >> 3;
              }
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v20;
              }
              *(void *)&v85[0] = &v107;
              float v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v22);
              int v24 = (int8x16_t *)&v23[16 * v19];
              *(void *)buf = v23;
              *(void *)&uint8_t buf[8] = v24;
              *((void *)&v84 + 1) = &v23[16 * v25];
              int8x16_t *v24 = v76;
              unint64_t v12 = (std::__shared_weak_count *)v76.i64[1];
              if (v76.i64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v76.i64[1] + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)&long long v84 = v24 + 1;
              std::vector<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::__swap_out_circular_buffer(&v105, buf);
              std::string v18 = v106;
              std::__split_buffer<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *unint64_t v106 = v16;
              unint64_t v12 = (std::__shared_weak_count *)v16.i64[1];
              if (v16.i64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16.i64[1] + 8), 1uLL, memory_order_relaxed);
              }
              std::string v18 = v17 + 1;
            }
            unint64_t v106 = v18;
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          std::__shared_weak_count::__release_weak(v7);
        }
        v6 += 2;
      }
      while (v6 != v5);
      int v27 = v105;
      unint64_t v26 = v106;
      int v6 = *(uint64_t **)(v4 + 32);
      uint64_t v28 = *(void *)(v4 + 40);
    }
    char v29 = (char *)((char *)v26 - v27);
    unint64_t v30 = (char *)(v28 - (void)v6);
    if ((char *)v26 - v27 == v28 - (void)v6) {
      break;
    }
    unint64_t v64 = (char *)(v28 - (void)v6);
    uint64_t v65 = (uint64_t *)a2[17];
    uint64_t v66 = *v65;
    *(void *)(v66 + 8) = v65[1];
    *(void *)v65[1] = v66;
    --a2[18];
    std::__destroy_at[abi:ne180100]<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>,0>((uint64_t)(v65 + 2));
    operator delete(v65);
    uint64_t v3 = this;
LABEL_82:
    *(void *)buf = &v105;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v29 == v64) {
      return;
    }
  }
  if (!*(unsigned char *)(v4 + 56))
  {
    unint64_t v77 = (char *)((char *)v26 - v27);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "configuring voice processor uplink", buf, 2u);
    }
    memset(v85, 0, 480);
    *(_OWORD *)buf = 0u;
    long long v84 = 0u;
    uint64_t v32 = *(void *)(v4 + 16);
    uint64_t v34 = *(int **)(v32 + 8);
    unsigned __int8 v33 = *(int **)(v32 + 16);
    *(_DWORD *)buf = *(_DWORD *)v32 != 0;
    *(_DWORD *)&uint8_t buf[4] = (unint64_t)((char *)v33 - (char *)v34) >> 6;
    bzero(&buf[8], 0x348uLL);
    int v86 = *(_DWORD *)(v32 + 32);
    uint64_t v87 = *(void *)(v32 + 40);
    uint64_t v88 = *(void *)(v32 + 48);
    uint64_t v89 = *(void *)(v32 + 56);
    int v90 = *(unsigned __int8 *)(v32 + 64);
    memset(v91, 0, sizeof(v91));
    int v93 = *(_DWORD *)(v32 + 96);
    uint64_t v94 = *(void *)(v32 + 104);
    long long v95 = *(_OWORD *)(v32 + 112);
    uint64_t v96 = *(void *)(v32 + 128);
    memset(v97, 0, sizeof(v97));
    uint64_t v99 = *(void *)(v32 + 164);
    uint64_t v100 = *(void *)(v32 + 176);
    int v101 = *(unsigned __int8 *)(v32 + 184);
    int v102 = *(_DWORD *)(v32 + 192);
    int v103 = *(unsigned __int8 *)(v32 + 160);
    int v104 = *(_DWORD *)(v32 + 188);
    unsigned __int8 v35 = *(const void **)(v32 + 72);
    BOOL v13 = *(void *)(v32 + 80) == (void)v35;
    unint64_t v36 = (uint64_t)(*(void *)(v32 + 80) - (void)v35) >> 2;
    int v92 = v36;
    if (!v13)
    {
      if (v36 <= 1) {
        unint64_t v36 = 1;
      }
      memcpy(v91, v35, 4 * v36);
    }
    uint8_t v37 = *(const void **)(v32 + 136);
    BOOL v13 = *(void *)(v32 + 144) == (void)v37;
    unint64_t v38 = (uint64_t)(*(void *)(v32 + 144) - (void)v37) >> 2;
    int v98 = v38;
    if (!v13)
    {
      if (v38 <= 1) {
        unint64_t v38 = 1;
      }
      memcpy(v97, v37, 4 * v38);
    }
    if (v34 != v33)
    {
      uint64_t v39 = 0;
      std::string::size_type v40 = (char *)&v85[7] + 12;
      int v41 = (char *)&v85[8] + 8;
      int v42 = (char *)&v84 + 4;
      unint64_t v43 = v85;
      do
      {
        if ((*v34 - 1) >= 3) {
          int v44 = 0;
        }
        else {
          int v44 = *v34;
        }
        if (*((unsigned char *)v34 + 60)) {
          int v45 = v34[14];
        }
        else {
          int v45 = 0;
        }
        int v47 = (int *)*((void *)v34 + 1);
        int v46 = (int *)*((void *)v34 + 2);
        unsigned __int8 v49 = (int *)*((void *)v34 + 4);
        std::string::size_type v48 = (int *)*((void *)v34 + 5);
        std::string v50 = &buf[280 * v39];
        *((_DWORD *)v50 + 2) = v44;
        *((_DWORD *)v50 + 3) = v45;
        unsigned __int8 v51 = v42;
        BOOL v52 = v43;
        *((_DWORD *)v50 + 4) = -1431655765 * ((unint64_t)((char *)v46 - (char *)v47) >> 4);
        *(_OWORD *)(v50 + 20) = 0u;
        *(_OWORD *)(v50 + 36) = 0u;
        *(_OWORD *)(v50 + 52) = 0u;
        *(_OWORD *)(v50 + 68) = 0u;
        *(_OWORD *)(v50 + 84) = 0u;
        *(_OWORD *)(v50 + 100) = 0u;
        *(_OWORD *)(v50 + 116) = 0u;
        *(_OWORD *)(v50 + 132) = 0u;
        *((_DWORD *)v50 + 37) = 0;
        *((_DWORD *)v50 + 38) = -1431655765 * ((unint64_t)((char *)v48 - (char *)v49) >> 4);
        *(_OWORD *)(v50 + 1++*(_DWORD *)(this + 56) = 0u;
        v50 += 156;
        *((_DWORD *)v50 + 32) = 0;
        *((_OWORD *)v50 + 6) = 0u;
        *((_OWORD *)v50 + 7) = 0u;
        *((_OWORD *)v50 + 4) = 0u;
        *((_OWORD *)v50 + 5) = 0u;
        *((_OWORD *)v50 + 2) = 0u;
        *((_OWORD *)v50 + 3) = 0u;
        for (*((_OWORD *)v50 + 1) = 0u; v47 != v46; v47 += 12)
        {
          int v53 = *v47;
          if ((*v47 - 1) >= 3) {
            int v53 = 0;
          }
          *v51++ = v53;
          long long v54 = *(_OWORD *)(v47 + 2);
          long long v55 = *(_OWORD *)(v47 + 6);
          *((void *)v52 + 4) = *((void *)v47 + 5);
          _OWORD *v52 = v54;
          v52[1] = v55;
          BOOL v52 = (_OWORD *)((char *)v52 + 40);
        }
        long long v56 = v40;
        uint64_t v57 = v41;
        while (v49 != v48)
        {
          int v58 = *v49;
          if ((*v49 - 1) >= 3) {
            int v58 = 0;
          }
          *v56++ = v58;
          long long v59 = *(_OWORD *)(v49 + 2);
          long long v60 = *(_OWORD *)(v49 + 6);
          *((void *)v57 + 4) = *((void *)v49 + 5);
          *(_OWORD *)uint64_t v57 = v59;
          *((_OWORD *)v57 + 1) = v60;
          v57 += 40;
          v49 += 12;
        }
        ++v39;
        v34 += 16;
        unint64_t v43 = (_OWORD *)((char *)v43 + 280);
        v42 += 280;
        v41 += 280;
        v40 += 280;
      }
      while (v34 != v33);
    }
    long long v61 = (void *)a2[14];
    uint64_t v62 = *(uint64_t (**)(void, uint8_t *))(*v61 + 32);
    if (v62)
    {
      unsigned int v63 = v62(v61[1], buf);
      if (v63)
      {
        LODWORD(v62) = 0;
        *(void *)uint64_t v81 = v63;
        *(void *)&v81[8] = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
      }
      else
      {
        v81[0] = 0;
        LODWORD(v62) = 1;
      }
    }
    else
    {
      *(void *)uint64_t v81 = 2;
      *(void *)&v81[8] = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    }
    char v82 = (char)v62;
    if (v62)
    {
      int v67 = (int8x16_t *)v105;
      uint64_t v68 = v106;
      while (v67 != v68)
      {
        uint64_t v69 = v67->i64[0];
        long long v70 = (std::__shared_weak_count *)v67->i64[1];
        if (v70) {
          atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v71 = (std::__shared_weak_count *)a2[15];
        v78[0] = a2[14];
        v78[1] = (uint64_t)v71;
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        adm::vp::SPIClient::configure(v69 + 8, v78);
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        if (v70) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        }
        ++v67;
      }
      unint64_t v64 = v30;
      char v72 = 1;
      *(unsigned char *)(v4 + ++*(_DWORD *)(this + 56) = 1;
      uint64_t v3 = this;
      *(unsigned char *)this = 1;
      char v29 = v77;
    }
    else
    {
      unint64_t v64 = v30;
      int v73 = get_adm_log_object();
      uint64_t v3 = this;
      char v29 = v77;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        v108[0] = 0;
        *(void *)&v109[4] = 0;
        std::to_json(v108, (const std::error_code *)v81);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v108, 4);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v109[4], v108[0]);
        long long v74 = __p;
        if (v80 < 0) {
          long long v74 = (void **)__p[0];
        }
        *(_DWORD *)std::string::size_type v108 = 136315138;
        *(void *)uint64_t v109 = v74;
        _os_log_error_impl(&dword_248947000, v73, OS_LOG_TYPE_ERROR, "failed to configure voice processor uplink with error: %s", v108, 0xCu);
        if (v80 < 0) {
          operator delete(__p[0]);
        }
      }
      char v72 = 0;
      *(_OWORD *)this = *(_OWORD *)v81;
    }
    *((unsigned char *)v3 + 16) = v72;
    goto LABEL_82;
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 16) = 1;
  *(void *)buf = &v105;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_248962F60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void adm::vp::detail::ProxyFactoryImplementation::configureDownlink(adm::vp::detail::ProxyFactoryImplementation *this, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 180) != 1)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "mDownlinkConfigurationType is not implemented", buf, 2u);
    }
    *(void *)this = 0;
    *((void *)this + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    goto LABEL_19;
  }
  if (!*(void *)(a2 + 168))
  {
LABEL_12:
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 16) = 1;
    return;
  }
  uint64_t v4 = *(void *)(a2 + 160);
  long long v5 = *(uint64_t **)(v4 + 32);
  if (*(void *)(v4 + 40) - (void)v5 != 16)
  {
    int64x2_t v11 = get_adm_log_object();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (uint64_t)(*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 4;
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_error_impl(&dword_248947000, v11, OS_LOG_TYPE_ERROR, "context.mProxyImplementationSet.size() is %lu", buf, 0xCu);
    }
    *(void *)this = 1;
    *((void *)this + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
LABEL_19:
    *((unsigned char *)this + 16) = 0;
    return;
  }
  int v6 = (std::__shared_weak_count *)v5[1];
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_22;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v8 = v7;
  if (!v7 || (uint64_t v9 = *v5) == 0)
  {
LABEL_22:
    unint64_t v12 = *(uint64_t **)(a2 + 160);
    uint64_t v13 = *v12;
    *(void *)(v13 + 8) = v12[1];
    *(void *)v12[1] = v13;
    --*(void *)(a2 + 168);
    std::__destroy_at[abi:ne180100]<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>,0>((uint64_t)(v12 + 2));
    operator delete(v12);
    adm::vp::detail::ProxyFactoryImplementation::configureDownlink(this);
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    return;
  }
  if (*(void *)(a2 + 112) && *(void *)(a2 + 144) && *(unsigned char *)(*(void *)(a2 + 136) + 56))
  {
    if (*(unsigned char *)(v4 + 56))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_12;
    }
    int8x16_t v16 = get_adm_log_object();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_248947000, v16, OS_LOG_TYPE_DEFAULT, "configuring voice processor downlink", buf, 2u);
    }
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)buf = 0u;
    long long v29 = 0u;
    adm::vp::convert(buf, *(void *)(v4 + 16));
    adm::vp::SPI::call<VoiceProcessorError ()(void *,VoiceProcessorDownlinkConfiguration const*),VoiceProcessorDownlinkConfiguration*>((uint64_t)&v24, *(void **)(a2 + 112), (uint64_t)buf);
    if (v25)
    {
      uint64_t v17 = *(void *)(a2 + 112);
      std::string v18 = *(std::__shared_weak_count **)(a2 + 120);
      v21[0] = v17;
      v21[1] = (uint64_t)v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      adm::vp::SPIClient::configure(v9 + 8, v21);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      char v14 = 1;
      *(unsigned char *)(v4 + ++*(_DWORD *)(this + 56) = 1;
      *(unsigned char *)this = 1;
    }
    else
    {
      uint64_t v19 = get_adm_log_object();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        adm::vp::to_json_str<std::error_code>(__p, &v24);
        unint64_t v20 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)unint64_t v26 = 136315138;
        int v27 = v20;
        _os_log_error_impl(&dword_248947000, v19, OS_LOG_TYPE_ERROR, "failed to configure voice processor downlink with error: %s", v26, 0xCu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      char v14 = 0;
      *(std::error_code *)this = v24;
    }
  }
  else
  {
    *(unsigned char *)this = 0;
    char v14 = 1;
  }
  *((unsigned char *)this + 16) = v14;
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_24896335C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t adm::vp::SPI::call<VoiceProcessorError ()(void *,VoiceProcessorDownlinkConfiguration const*),VoiceProcessorDownlinkConfiguration*>(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(uint64_t (**)(void, uint64_t))(*a2 + 40);
  if (v4)
  {
    uint64_t result = v4(a2[1], a3);
    if (!result)
    {
      *(unsigned char *)uint64_t v3 = 0;
      LOBYTE(v4) = 1;
      goto LABEL_7;
    }
    LOBYTE(v4) = 0;
    uint64_t v5 = result;
    int v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v5 = 2;
    int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)uint64_t v3 = v5;
  *(void *)(v3 + 8) = v6;
LABEL_7:
  *(unsigned char *)(v3 + 16) = (_BYTE)v4;
  return result;
}

void sub_2489633E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x2489633D0);
}

void adm::vp::SPIClient::configure(uint64_t a1, uint64_t *a2)
{
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  uint64_t v4 = *a2;
  if (!*a2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "inSPI is nullptr", v9, 2u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "inSPI is nullptr");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 176) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void sub_248963528(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm2vp6detail26ProxyFactoryImplementation17doCreateProxyListINS0_19UplinkConfigurationEEEN5caulk8expectedINS2_8DispatchIT_E9ProxyListENSt3__110error_codeEEERKNS0_17ImmutableDispatchIS8_E4TypeEEUlPNS1_25UplinkProxyImplementationEE_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = (adm::vp::detail::ProxyFactoryImplementation *)a1[4];
      if (v5) {
        adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(v5);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA11F8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *shared_weak_owners;
  uint64_t vars8;

  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA11F8;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

adm::vp::SPI *std::unique_ptr<adm::vp::SPI>::reset[abi:ne180100](adm::vp::SPI **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    adm::vp::SPI::~SPI(result);
    JUMPOUT(0x24C5866C0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::vp::SPI  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm2vp3SPIEEE")) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

adm::vp::SPI *std::__shared_ptr_pointer<adm::vp::SPI  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(adm::vp::SPI **)(a1 + 24);
  if (result)
  {
    adm::vp::SPI::~SPI(result);
    JUMPOUT(0x24C5866C0);
  }
  return result;
}

void std::__shared_ptr_pointer<adm::vp::SPI  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x24C5866C0);
}

void adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration(uint64_t a1, unint64_t a2, std::__shared_weak_count *a3, int a4)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v4 = a2;
  }
  for (uint64_t i = *(_DWORD **)(a2 + 8); ; i += 16)
  {
    if (i == *(_DWORD **)(a2 + 16))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      MEMORY[0x24C5863B0](exception, 1, &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory);
      __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
    }
    if (*i == a4) {
      break;
    }
  }
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = i;
  *(_DWORD *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = 1;
  if (a3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

BOOL adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    uint64_t v2 = *(int **)(*(void *)a1 + 8);
    int v3 = *(_DWORD *)(a1 + 24);
    if (*v2 != v3)
    {
      long long v4 = v2 + 16;
      do
      {
        int v5 = *v4;
        v4 += 16;
      }
      while (v5 != v3);
      uint64_t v2 = v4 - 16;
    }
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v7 = *((void *)v2 + 1);
  uint64_t v6 = *((void *)v2 + 2);
  if (v7 == v6) {
    return 0;
  }
  uint64_t v8 = v7 + 48;
  do
  {
    int v9 = *(_DWORD *)(v8 - 48);
    BOOL result = v9 == a2;
    BOOL v11 = v9 == a2 || v8 == v6;
    v8 += 48;
  }
  while (!v11);
  return result;
}

BOOL adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    uint64_t v2 = *(int **)(*(void *)a1 + 8);
    int v3 = *(_DWORD *)(a1 + 24);
    if (*v2 != v3)
    {
      long long v4 = v2 + 16;
      do
      {
        int v5 = *v4;
        v4 += 16;
      }
      while (v5 != v3);
      uint64_t v2 = v4 - 16;
    }
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v7 = *((void *)v2 + 4);
  uint64_t v6 = *((void *)v2 + 5);
  if (v7 == v6) {
    return 0;
  }
  uint64_t v8 = v7 + 48;
  do
  {
    int v9 = *(_DWORD *)(v8 - 48);
    BOOL result = v9 == a2;
    BOOL v11 = v9 == a2 || v8 == v6;
    v8 += 48;
  }
  while (!v11);
  return result;
}

_DWORD *adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 16);
  if (!v1)
  {
    uint64_t v1 = *(int **)(*(void *)a1 + 8);
    int v2 = *(_DWORD *)(a1 + 24);
    if (*v1 != v2)
    {
      int v3 = v1 + 16;
      do
      {
        int v4 = *v3;
        v3 += 16;
      }
      while (v4 != v2);
      uint64_t v1 = v3 - 16;
    }
    *(void *)(a1 + 16) = v1;
  }
  uint64_t v6 = (_DWORD *)*((void *)v1 + 1);
  int v5 = (_DWORD *)*((void *)v1 + 2);
  while (1)
  {
    if (v6 == v5) {
      return 0;
    }
    if (!*v6) {
      break;
    }
    v6 += 12;
  }
  return v6 + 2;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v4 = result;
    if (a4 >> 62) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_248963B88(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA2228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA2228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm2vp6detail26ProxyFactoryImplementation17doCreateProxyListINS0_21DownlinkConfigurationEEEN5caulk8expectedINS2_8DispatchIT_E9ProxyListENSt3__110error_codeEEERKNS0_17ImmutableDispatchIS8_E4TypeEEUlPNS1_27DownlinkProxyImplementationEE_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[3];
  int v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = (adm::vp::detail::ProxyFactoryImplementation *)a1[4];
      if (v5) {
        adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(v5);
      }
    }
  }
  else
  {
    int v4 = 0;
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA1248;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *shared_weak_owners;
  uint64_t vars8;

  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA1248;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248963E7C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  int v3 = (void **)(a1 + 32);
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA2278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26FCA2278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getOutputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 17) + 120))(*((void *)this + 17), 1);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getInputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 17) + 120))(*((void *)this + 17), 0);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getPropertySize(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 17) + 136))(&v2);
  if (v3) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getPropertyInfo(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 17) + 136))(&v2);
  if (v3) {
    return v2;
  }
  else {
    return 0;
  }
}

void *non-virtual thunk to'adm::graph::DSPGraphKernel::setProperty(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 136) + 152))(v2);
}

void *non-virtual thunk to'adm::graph::DSPGraphKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return adm::graph::DSPGraphKernel::getProperty(a1 - 24, a2, a3, a4, a5);
}

void *adm::graph::DSPGraphKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = 0;
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  BOOL result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 160) + 144))(&v7);
  if (v8) {
    *a5 = v10;
  }
  return result;
}

BOOL non-virtual thunk to'adm::graph::DSPGraphKernel::isPropertyWritable(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 17) + 136))(&v3);
  if (v5) {
    BOOL v1 = v4 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::hasProperty(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 17) + 128))(*((void *)this + 17), a2, 0);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getOutputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 17) + 88))(*((void *)this + 17), 1);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::getInputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 17) + 88))(*((void *)this + 17), 0);
}

void *non-virtual thunk to'adm::graph::DSPGraphKernel::setParameter(adm::graph::DSPGraphKernel *this, float a2)
{
  return (*(void *(**)(void *__return_ptr, float))(**((void **)this + 17) + 112))(v3, a2);
}

float non-virtual thunk to'adm::graph::DSPGraphKernel::getParameter(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(float *__return_ptr))(**((void **)this + 17) + 104))(v2);
  float result = v2[0];
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::isParameterWritable(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 17) + 96))(*((void *)this + 17), a2, 0x100000000);
}

uint64_t non-virtual thunk to'adm::graph::DSPGraphKernel::hasParameter(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 17) + 96))(*((void *)this + 17), a2, 0);
}

uint64_t adm::graph::DSPGraphKernel::getOutputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 120))(*((void *)this + 20), 1);
}

uint64_t adm::graph::DSPGraphKernel::getInputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 20) + 120))(*((void *)this + 20), 0);
}

uint64_t adm::graph::DSPGraphKernel::getPropertySize(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 136))(&v2);
  if (v3) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t adm::graph::DSPGraphKernel::getPropertyInfo(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 136))(&v2);
  if (v3) {
    return v2;
  }
  else {
    return 0;
  }
}

void *adm::graph::DSPGraphKernel::setProperty(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 160) + 152))(v2);
}

BOOL adm::graph::DSPGraphKernel::isPropertyWritable(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 136))(&v3);
  if (v5) {
    BOOL v1 = v4 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t adm::graph::DSPGraphKernel::hasProperty(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 20) + 128))(*((void *)this + 20), a2, 0);
}

uint64_t adm::graph::DSPGraphKernel::getOutputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 88))(*((void *)this + 20), 1);
}

uint64_t adm::graph::DSPGraphKernel::getInputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 20) + 88))(*((void *)this + 20), 0);
}

void *adm::graph::DSPGraphKernel::setParameter(adm::graph::DSPGraphKernel *this, float a2)
{
  return (*(void *(**)(void *__return_ptr, float))(**((void **)this + 20) + 112))(v3, a2);
}

float adm::graph::DSPGraphKernel::getParameter(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(float *__return_ptr))(**((void **)this + 20) + 104))(v2);
  float result = v2[0];
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t adm::graph::DSPGraphKernel::isParameterWritable(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 20) + 96))(*((void *)this + 20), a2, 0x100000000);
}

uint64_t adm::graph::DSPGraphKernel::hasParameter(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 20) + 96))(*((void *)this + 20), a2, 0);
}

uint64_t adm::graph::DSPGraphKernel::doGetLatency(adm::graph::DSPGraphKernel *this)
{
  (*(void (**)(long long *__return_ptr))(**((void **)this + 20) + 160))(&v4);
  if (!v5)
  {
    exceptiouint64_t n = (char *)__cxa_allocate_exception(0x18uLL);
    long long v3 = v4;
    *(void *)exceptiouint64_t n = &unk_26FCA3150;
    *(_OWORD *)(exception + 8) = v3;
  }
  return v4;
}

uint64_t adm::graph::DSPGraphKernel::supportsGetLatencyHandler(adm::graph::DSPGraphKernel *this)
{
  return 1;
}

uint64_t adm::graph::DSPGraphKernel::supportsClientIOHandler(adm::graph::DSPGraphKernel *this)
{
  return 1;
}

void adm::graph::DSPGraphKernel::registerWithProcessingBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v4 = 1;
  (*(void (**)(uint64_t, std::string *))(*(void *)v2 + 168))(v2, &__p);
  if (v4)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void non-virtual thunk to'adm::graph::FixedBlockSizeDSPGraphKernel::~FixedBlockSizeDSPGraphKernel(adm::graph::FixedBlockSizeDSPGraphKernel *this)
{
  adm::graph::DSPGraphKernel::~DSPGraphKernel((adm::graph::FixedBlockSizeDSPGraphKernel *)((char *)this - 24));
  JUMPOUT(0x24C5866C0);
}

{
  adm::graph::DSPGraphKernel::~DSPGraphKernel((adm::graph::FixedBlockSizeDSPGraphKernel *)((char *)this - 24));
}

void adm::graph::DSPGraphKernel::~DSPGraphKernel(adm::graph::DSPGraphKernel *this)
{
  *(void *)this = &unk_26FCA12E8;
  *((void *)this + 3) = &unk_26FCA1450;
  adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration((void **)this + 28);
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  adm::graph::DSPKernel::~DSPKernel(this);
}

void adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(void **this)
{
  uint64_t v2 = this + 18;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  char v8 = this + 24;
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v8);
  char v8 = this + 21;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v8);
  char v8 = v2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v8);
  char v8 = this + 15;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v8);
  long long v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  char v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  char v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[3];
  if (v6)
  {
    this[4] = v6;
    operator delete(v6);
  }
  uint64_t v7 = *this;
  if (*this)
  {
    this[1] = v7;
    operator delete(v7);
  }
}

void adm::graph::DSPKernel::~DSPKernel(adm::graph::DSPKernel *this)
{
  *(void *)this = &unk_26FCA3C68;
  *((void *)this + 3) = &unk_26FCA3D58;
  MEMORY[0x24C586010]((char *)this + 144);
  uint64_t v2 = (void **)((char *)this + 104);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 80);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_26FCA3DE8;
  adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer((unint64_t *)this + 1);
}

void std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    for (uint64_t i = (char *)v1[1]; i != v2; i -= 8)
      ExtendedAudioBufferList_Destroy();
    v1[1] = v2;
    char v5 = **a1;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v1 = *a1;
  uint64_t v2 = (OpaqueAudioConverter **)**a1;
  if (v2)
  {
    char v4 = (OpaqueAudioConverter **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer(unint64_t *result)
{
  if (atomic_load(result))
  {
    _os_assert_log();
    float result = (unint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](OpaqueAudioConverter **a1)
{
  float result = *a1;
  *a1 = 0;
  if (result) {
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  }
  return result;
}

double adm::graph::FixedBlockSizeDSPGraphKernel::getSliceDuration@<D0>(adm::graph::FixedBlockSizeDSPGraphKernel *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 119)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v2 = (double *)*((void *)this + 28);
  *(_DWORD *)a2 = *((_DWORD *)this + 116);
  double result = *v2;
  *(double *)(a2 + 8) = *v2;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t adm::graph::FixedBlockSizeDSPGraphKernel::doClientIO(std::chrono::system_clock::time_point *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    char v14 = this + 16;
    uint64_t v15 = "inNumInputStreams is 0";
    goto LABEL_11;
  }
  if (!a5)
  {
    char v14 = this + 16;
    uint64_t v15 = "inInputStreams is nullptr";
    goto LABEL_11;
  }
  if (!a6)
  {
    char v14 = this + 16;
    uint64_t v15 = "inNumOutputStreams is 0";
    goto LABEL_11;
  }
  if (!a7)
  {
    char v14 = this + 16;
    uint64_t v15 = "inOutputStreams is nullptr";
    goto LABEL_11;
  }
  SliceDuratiouint64_t n = adm::graph::FixedBlockSizeDSPGraphKernel::getSliceDuration((adm::graph::FixedBlockSizeDSPGraphKernel *)this, (uint64_t)v44);
  if (v45)
  {
    char v14 = this + 16;
    uint64_t v15 = "Slice duration is variable for a fixed block size DSPGraph kernel";
LABEL_11:
    return adm::util::RTLogger::log<>(v14, (uint64_t)v15).__d_.__rep_;
  }
  int v43 = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, double))(this->__d_.__rep_ + 208))(this, a5, a4, SliceDuration);
  if (v43) {
    return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPreProcessing error %u", &v43).__d_.__rep_;
  }
  long long v17 = a3[1];
  v42[0] = *a3;
  v42[1] = v17;
  long long v18 = a3[3];
  v42[2] = a3[2];
  v42[3] = v18;
  uint64_t v19 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v21 = (char *)&v41[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = 0;
  int v23 = v44[0];
  std::error_code v24 = (int *)(a5 + 64);
  do
  {
    if (*v24 != v23)
    {
      v41[0] = v22;
      long long v38 = this + 16;
      long long v39 = "stream index = %u, inInputStreams frame count = %u , sliceBlockSize = %u";
      return adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(v38, (uint64_t)v39, v41, v24, v44).__d_.__rep_;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = this[22].__d_.__rep_;
    if (v22 >= (this[23].__d_.__rep_ - rep) >> 3) {
LABEL_32:
    }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    uint64_t v26 = *(void *)(rep + 8 * v22);
    int v27 = &v21[24 * v26];
    *((void *)v27 + 1) = v42;
    *((_DWORD *)v27 + 4) = v23;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v28 = this[10].__d_.__rep_;
    if (v22 >= (this[11].__d_.__rep_ - v28) >> 3) {
LABEL_33:
    }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    *(void *)&v21[24 * v26] = *(void *)(v28 + 8 * v22++) + 48;
    v24 += 20;
  }
  while (a4 != v22);
  MEMORY[0x270FA5388](v19);
  long long v31 = (char *)&v41[-1] - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = 0;
  long long v33 = (int *)(a7 + 64);
  do
  {
    if (*v33 != v29)
    {
      v41[0] = v32;
      long long v38 = this + 16;
      long long v39 = "stream index %u, inOutputStreams frame count %u, sliceBlockSize %u";
      std::error_code v24 = v33;
      return adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(v38, (uint64_t)v39, v41, v24, v44).__d_.__rep_;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v34 = this[25].__d_.__rep_;
    if (v32 >= (this[26].__d_.__rep_ - v34) >> 3) {
      goto LABEL_32;
    }
    uint64_t v35 = *(void *)(v34 + 8 * v32);
    long long v36 = &v31[24 * v35];
    *((void *)v36 + 1) = v42;
    *((_DWORD *)v36 + 4) = v29;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v37 = this[13].__d_.__rep_;
    if (v32 >= (this[14].__d_.__rep_ - v37) >> 3) {
      goto LABEL_33;
    }
    *(void *)&v31[24 * v35] = *(void *)(v37 + 8 * v32++) + 48;
    v33 += 20;
  }
  while (a6 != v32);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this[20].__d_.__rep_ + 80))(v41);
  uint64_t result = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t))(this->__d_.__rep_ + 216))(this, a7, a6);
  int v43 = result;
  if (result) {
    return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPostProcessing error %u", &v43).__d_.__rep_;
  }
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<>(std::chrono::system_clock::time_point *a1, uint64_t a2)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    char v5 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v7) = 3;
    *((void *)&v7 + 1) = "%s";
    int rep = a1->__d_.__rep_;
  }
  else
  {
    LODWORD(v7) = 3;
    *((void *)&v7 + 1) = "%s";
    char v5 = (caulk::concurrent::messenger *)&a1[2];
  }
  int v8 = rep;
  uint64_t v9 = a2;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>(v5, &v7);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    long long v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    long long v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + 1) = a2;
  }
  int v9 = *a3;
  int v11 = rep;
  int v12 = v9;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>(v7, &v10);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3, int *a4, int *a5)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    int v11 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v14) = 3;
    *((void *)&v14 + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    int v11 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v14) = 3;
    *((void *)&v14 + 1) = a2;
  }
  int v15 = rep;
  uint64_t v16 = *a3;
  int v13 = *a5;
  int v17 = *a4;
  int v18 = v13;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>(v11, &v14);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 72, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA1A60;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(void *)(v4 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA1A08;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 36));
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        long long v6 = __p;
        if (v14 < 0) {
          long long v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        int v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        int v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 72, 8);
  return a1;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      int v7 = (char *)a2;
    }
    else {
      int v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 56, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA31D0;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(void *)(v4 + 40) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA3178;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20));
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        int v6 = __p;
        if (v14 < 0) {
          int v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        size_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        size_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2618;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA25C0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        int v6 = __p;
        if (v14 < 0) {
          int v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        size_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      uint64_t v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        uint64_t v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        size_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void *adm::graph::FixedBlockSizeDSPGraphKernel::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)adm::graph::operator==((std::__fs::filesystem::path *)(a1 + 224), (uint64_t)result + 224);
  }
  return result;
}

void adm::graph::FixedBlockSizeDSPGraphKernel::~FixedBlockSizeDSPGraphKernel(adm::graph::FixedBlockSizeDSPGraphKernel *this)
{
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
  JUMPOUT(0x24C5866C0);
}

void non-virtual thunk to'adm::graph::VariableBlockSizeDSPGraphKernel::~VariableBlockSizeDSPGraphKernel(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  uint64_t v2 = (adm::graph::VariableBlockSizeDSPGraphKernel *)((char *)this - 24);
  *((void *)this - 3) = &unk_26FCA1708;
  *(void *)this = &unk_26FCA1870;
  long long v3 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)((char *)this + 456);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(v2);
  JUMPOUT(0x24C5866C0);
}

{
  adm::graph::DSPGraphKernel *v2;
  void **v3;
  uint64_t vars8;

  uint64_t v2 = (adm::graph::VariableBlockSizeDSPGraphKernel *)((char *)this - 24);
  *((void *)this - 3) = &unk_26FCA1708;
  *(void *)this = &unk_26FCA1870;
  long long v3 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)((char *)this + 456);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(v2);
}

double adm::graph::VariableBlockSizeDSPGraphKernel::getSliceDuration@<D0>(adm::graph::VariableBlockSizeDSPGraphKernel *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 119) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v2 = *((_DWORD *)this + 116);
  if (v2)
  {
    if (v2 != 1) {
      return result;
    }
    if (*((unsigned char *)this + 472)) {
      long long v3 = (_DWORD *)((char *)this + 468);
    }
    else {
      long long v3 = &adm::graph::DSPKernel::kMaxBufferFrameSize;
    }
    int v4 = (double **)((char *)this + 248);
  }
  else
  {
    int v4 = (double **)((char *)this + 224);
    long long v3 = (_DWORD *)((char *)this + 468);
    if (!*((unsigned char *)this + 472)) {
      long long v3 = &adm::graph::DSPKernel::kMaxBufferFrameSize;
    }
  }
  long long v5 = *v4;
  *(_DWORD *)a2 = *v3;
  double result = *v5;
  *(double *)(a2 + 8) = *v5;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doGetExpectedOutputSamplesForInputSamples(adm::graph::VariableBlockSizeDSPGraphKernel *this, unint64_t a2, unint64_t *a3)
{
  caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(a2);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 64))(&v8);
  if (v9) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v9) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(unint64_t result)
{
  if (HIDWORD(result))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception);
    __cxa_throw(exception, (struct type_info *)off_265242E08, MEMORY[0x263F8C078]);
  }
  return result;
}

void sub_2489664F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "numerical cast overflow: could not retain value in conversion type");
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
  return result;
}

BOOL adm::graph::VariableBlockSizeDSPGraphKernel::supportsGetExpectedOutputSamplesForInputSamplesHandler(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  if (*((_DWORD *)this + 119) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return *((_DWORD *)this + 116) == 0;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::VariableBlockSizeDSPGraphKernel *this, unint64_t a2)
{
  caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(a2);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 56))(&v4);
  if (v5) {
    return v4;
  }
  else {
    return 0;
  }
}

BOOL adm::graph::VariableBlockSizeDSPGraphKernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  if (*((_DWORD *)this + 119) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  return *((_DWORD *)this + 116) == 1;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doClientIO(std::chrono::system_clock::time_point *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (a5)
    {
      if (a6)
      {
        if (a7)
        {
          SliceDuratiouint64_t n = adm::graph::VariableBlockSizeDSPGraphKernel::getSliceDuration((adm::graph::VariableBlockSizeDSPGraphKernel *)this, (uint64_t)v103);
          if (HIDWORD(this[59].__d_.__rep_) != 1) {
            std::__throw_bad_variant_access[abi:ne180100]();
          }
          int rep = this[58].__d_.__rep_;
          uint64_t v15 = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, double))(this->__d_.__rep_ + 208))(this, a5, a4, SliceDuration);
          int v102 = v15;
          if (v15) {
            return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPreProcessing error %u", &v102).__d_.__rep_;
          }
          int v98 = rep;
          uint64_t v94 = a7;
          long long v19 = a3[1];
          v101[0] = *a3;
          v101[1] = v19;
          long long v20 = a3[3];
          v101[2] = a3[2];
          v101[3] = v20;
          MEMORY[0x270FA5388](v15);
          unint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
          unint64_t v23 = 0;
          unsigned int v24 = v103[0];
          uint64_t v92 = a5;
          char v25 = (unsigned int *)(a5 + 64);
          do
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = this[22].__d_.__rep_;
            if (v23 >= (this[23].__d_.__rep_ - v26) >> 3) {
LABEL_75:
            }
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            unsigned int v28 = *v25;
            int v27 = &v22[24 * *(void *)(v26 + 8 * v23)];
            *((_DWORD *)v27 + 4) = *v25;
            *((void *)v27 + 1) = v101;
            int v29 = (AudioBufferList *)(*(void *)(this[60].__d_.__rep_ + 8 * v23) + 48);
            *(void *)int v27 = v29;
            if (!v98 && v28 > v24) {
              *((_DWORD *)v27 + 4) = v24;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = this[10].__d_.__rep_;
            if (v23 >= (this[11].__d_.__rep_ - v30) >> 3) {
LABEL_76:
            }
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            long long v31 = adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(void *)(v30 + 8 * v23++) + 48), v29, 0);
            v25 += 20;
          }
          while (a4 != v23);
          long long v95 = v22;
          uint64_t v96 = a4;
          MEMORY[0x270FA5388](v31);
          long long v33 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          unint64_t v34 = 0;
          uint64_t v35 = 64;
          uint64_t v36 = v94;
          int v37 = v98;
          long long v97 = v33;
          do
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = this[25].__d_.__rep_;
            if (v34 >= (this[26].__d_.__rep_ - v38) >> 3) {
              goto LABEL_75;
            }
            long long v39 = &v33[24 * *(void *)(v38 + 8 * v34)];
            *((void *)v39 + 1) = v101;
            unsigned int v40 = *(_DWORD *)(v36 + v35);
            *((_DWORD *)v39 + 4) = v40;
            long long v41 = (AudioBufferList *)(*(void *)(this[63].__d_.__rep_ + 8 * v34) + 48);
            *(void *)long long v39 = v41;
            if (v37 == 1 && v40 > v24) {
              *((_DWORD *)v39 + 4) = v24;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = this[13].__d_.__rep_;
            if (v34 >= (this[14].__d_.__rep_ - v42) >> 3) {
              goto LABEL_76;
            }
            int v43 = adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(void *)(v42 + 8 * v34++) + 48), v41, 0);
            v35 += 80;
            long long v33 = v97;
          }
          while (a6 != v34);
          uint64_t v90 = (uint64_t)&v90;
          uint64_t v44 = MEMORY[0x270FA5388](v43);
          long long v47 = (char *)&v90 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v48 = 0;
          long long v49 = (int *)(v92 + 64);
          do
          {
            int v50 = *v49;
            v49 += 20;
            *(_DWORD *)&v47[4 * v48++] = v50;
          }
          while (v45 != v48);
          MEMORY[0x270FA5388](v44);
          long long v53 = (char *)&v90 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v54 = 0;
          uint64_t v55 = 64;
          do
          {
            *(_DWORD *)&v53[4 * v54++] = *(_DWORD *)(v36 + v55);
            v55 += 80;
          }
          while (a6 != v54);
          int v91 = (int *)(v51 + 64);
          uint64_t v93 = a6;
          while (1)
          {
            (*(void (**)(void *__return_ptr))(*(void *)this[20].__d_.__rep_ + 80))(v100);
            LODWORD(v++*(_DWORD *)(this + 56) = 0;
            unint64_t v57 = 0;
            long long v58 = v91;
            do
            {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v59 = this[22].__d_.__rep_;
              if (v57 >= (this[23].__d_.__rep_ - v59) >> 3) {
                goto LABEL_75;
              }
              uint64_t v60 = *(void *)(v59 + 8 * v57);
              long long v61 = v95;
              uint64_t v62 = &v95[24 * v60];
              int v65 = *((_DWORD *)v62 + 4);
              unint64_t v64 = (unsigned int *)(v62 + 16);
              int v63 = v65;
              int v66 = *(_DWORD *)&v47[4 * v57];
              unsigned int v67 = v66 - v65;
              *(_DWORD *)&v47[4 * v57] = v66 - v65;
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = this[10].__d_.__rep_;
              if (v57 >= (this[11].__d_.__rep_ - v68) >> 3) {
                goto LABEL_76;
              }
              if (v66 == v63) {
                uint64_t v56 = (v56 + 1);
              }
              else {
                uint64_t v56 = v56;
              }
              int v69 = *v58;
              v58 += 20;
              adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(void *)(v68 + 8 * v57) + 48), *(AudioBufferList **)&v61[24 * v60], v69 - v67);
              if (v67 > v24 && v98 == 0) {
                unsigned int v71 = v24;
              }
              else {
                unsigned int v71 = v67;
              }
              *unint64_t v64 = v71;
              ++v57;
            }
            while (v96 != v57);
            LODWORD(v100[0]) = v56;
            char v72 = v97;
            if (v98) {
              goto LABEL_51;
            }
            if (v56 != v96) {
              break;
            }
            LODWORD(v92) = 1;
LABEL_52:
            LODWORD(v73) = 0;
            unint64_t v74 = 0;
            uint64_t v75 = 64;
            do
            {
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v76 = this[25].__d_.__rep_;
              if (v74 >= (this[26].__d_.__rep_ - v76) >> 3) {
                goto LABEL_75;
              }
              uint64_t v77 = *(void *)(v76 + 8 * v74);
              unint64_t v78 = &v72[24 * v77];
              int v81 = *((_DWORD *)v78 + 4);
              char v80 = (unsigned int *)(v78 + 16);
              int v79 = v81;
              int v82 = *(_DWORD *)&v53[4 * v74];
              unsigned int v83 = v82 - v81;
              *(_DWORD *)&v53[4 * v74] = v82 - v81;
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v84 = this[13].__d_.__rep_;
              if (v74 >= (this[14].__d_.__rep_ - v84) >> 3) {
                goto LABEL_76;
              }
              if (v82 == v79) {
                uint64_t v73 = (v73 + 1);
              }
              else {
                uint64_t v73 = v73;
              }
              adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(void *)(v84 + 8 * v74) + 48), *(AudioBufferList **)&v72[24 * v77], *(_DWORD *)(v94 + v75) - v83);
              char v72 = v97;
              if (v83 > v24 && v98 == 1) {
                unsigned int v86 = v24;
              }
              else {
                unsigned int v86 = v83;
              }
              unsigned int *v80 = v86;
              ++v74;
              v75 += 80;
            }
            while (v93 != v74);
            int v99 = v73;
            if (v98 == 1)
            {
              if (v73 == v93) {
                goto LABEL_69;
              }
              if (v73)
              {
                uint64_t v87 = this + 16;
                uint64_t v88 = "producedCount = %u";
                uint64_t v89 = &v99;
                return adm::util::RTLogger::log<unsigned int &>(v87, (uint64_t)v88, v89).__d_.__rep_;
              }
            }
            if (v92)
            {
LABEL_69:
              uint64_t result = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, char *))(this->__d_.__rep_ + 216))(this, v94, v93, v72);
              int v102 = result;
              if (result) {
                return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPostProcessing error %u", &v102).__d_.__rep_;
              }
              return result;
            }
          }
          if (v56)
          {
            uint64_t v87 = this + 16;
            uint64_t v88 = "consumedCount = %u";
            uint64_t v89 = (int *)v100;
            return adm::util::RTLogger::log<unsigned int &>(v87, (uint64_t)v88, v89).__d_.__rep_;
          }
LABEL_51:
          LODWORD(v92) = 0;
          goto LABEL_52;
        }
        __int16 v17 = this + 16;
        int v18 = "inOutputStreams is nullptr";
      }
      else
      {
        __int16 v17 = this + 16;
        int v18 = "inNumOutputStreams is 0";
      }
    }
    else
    {
      __int16 v17 = this + 16;
      int v18 = "inInputStreams is nullptr";
    }
  }
  else
  {
    __int16 v17 = this + 16;
    int v18 = "inNumInputStreams is 0";
  }
  return adm::util::RTLogger::log<>(v17, (uint64_t)v18).__d_.__rep_;
}

std::chrono::system_clock::time_point *adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(std::chrono::system_clock::time_point *this, AudioBufferList *a2, AudioBufferList *a3, int a4)
{
  uint64_t v4 = this;
  if (!a2)
  {
    int v13 = "inMainABL is nullptr ";
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<>(this + 16, (uint64_t)v13).__d_.__rep_;
  }
  if (!a3)
  {
    int v13 = "inScratchABL is nullptr ";
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<>(this + 16, (uint64_t)v13).__d_.__rep_;
  }
  uint64_t mNumberBuffers = a2->mNumberBuffers;
  if (mNumberBuffers != a3->mNumberBuffers) {
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<unsigned int const&,unsigned int &>(this + 16, (uint64_t)"inMainABL->uint64_t mNumberBuffers = %u, inScratchABL->uint64_t mNumberBuffers = %u", (int *)a2, (int *)a3).__d_.__rep_;
  }
  if (!mNumberBuffers) {
    return this;
  }
  uint64_t v6 = 0;
  p_mData = &a2->mBuffers[0].mData;
  for (uint64_t i = &a3->mBuffers[0].mData; ; i += 2)
  {
    int v9 = *((_DWORD *)p_mData - 2);
    int v10 = v9 * a4;
    unint64_t v11 = 4 * (v9 * a4);
    *uint64_t i = (char *)*p_mData + v11;
    *((_DWORD *)i - 2) = v9;
    unint64_t v12 = *((unsigned int *)p_mData - 1);
    if (v11 > v12) {
      break;
    }
    p_mData += 2;
    *((_DWORD *)i - 1) = v12 - v11;
    if (mNumberBuffers == ++v6) {
      return this;
    }
  }
  unsigned int rep = this[16].__d_.__rep_;
  if (rep > 0x64)
  {
    this = (std::chrono::system_clock::time_point *)std::chrono::system_clock::now().__d_.__rep_;
    if ((uint64_t)this - v4[17].__d_.__rep_ < 501000) {
      goto LABEL_19;
    }
    LODWORD(v17) = 3;
    *((void *)&v17 + 1) = "AudioBufferList buffer overwrite or overread has occurred at buffer index %u, numFloatValues"
                            "ToAdvanceBy = %u, mDataByteSize = %u";
    unsigned int v18 = v4[16].__d_.__rep_;
    int v19 = v6;
    int v15 = *((_DWORD *)p_mData - 1);
    int v20 = v10;
    int v21 = v15;
    caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>((caulk::concurrent::messenger *)&v4[18], &v17);
  }
  else
  {
    LODWORD(v17) = 3;
    *((void *)&v17 + 1) = "AudioBufferList buffer overwrite or overread has occurred at buffer index %u, numFloatValues"
                            "ToAdvanceBy = %u, mDataByteSize = %u";
    unsigned int v18 = rep;
    int v19 = v6;
    int v20 = v10;
    int v21 = v12;
    caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>((caulk::concurrent::messenger *)&this[18], &v17);
  }
  this = (std::chrono::system_clock::time_point *)std::chrono::system_clock::now().__d_.__rep_;
  v4[17].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this;
LABEL_19:
  int v16 = v4[16].__d_.__rep_;
  if (v16 != -1) {
    LODWORD(v4[16].__d_.__rep_) = v16 + 1;
  }
  return this;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    int v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    int v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + 1) = a2;
  }
  int v9 = *a3;
  int v11 = rep;
  int v12 = v9;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>(v7, &v10);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 56, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2998;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(void *)(v4 + 40) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2940;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  int v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20));
  switch(*(_DWORD *)a1)
  {
    case 0:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = __p;
        if (v14 < 0) {
          uint64_t v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  int v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int const&,unsigned int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3, int *a4)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    os_log_type_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    os_log_type_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + 1) = a2;
  }
  int v11 = *a3;
  int v13 = rep;
  int v14 = v11;
  int v15 = *a4;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>(v9, &v12);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA1AE0;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA1A88;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  int v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
  switch(*(_DWORD *)a1)
  {
    case 0:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = __p;
        if (v14 < 0) {
          uint64_t v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  int v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2698;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2640;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  int v2 = a1;
  adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        long long v3 = __p;
        if (v14 < 0) {
          long long v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v3;
        __int16 v17 = 1024;
        int v18 = v4;
        _os_log_debug_impl(&dword_248947000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = __p;
        if (v14 < 0) {
          uint64_t v6 = (void **)__p[0];
        }
        int v7 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v6;
        __int16 v17 = 1024;
        int v18 = v7;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = __p;
        if (v14 < 0) {
          int v11 = (void **)__p[0];
        }
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_error_impl(&dword_248947000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      int v2 = get_adm_log_object();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        long long v5 = __p;
        if (v14 < 0) {
          long long v5 = (void **)__p[0];
        }
LABEL_17:
        int v10 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)buf = 136315394;
        int v16 = v5;
        __int16 v17 = 1024;
        int v18 = v10;
        uint64_t v8 = v2;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  int v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void *adm::graph::VariableBlockSizeDSPGraphKernel::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    return (void *)adm::graph::operator==((std::__fs::filesystem::path *)(a1 + 224), (uint64_t)result + 224);
  }
  return result;
}

void adm::graph::VariableBlockSizeDSPGraphKernel::~VariableBlockSizeDSPGraphKernel(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  *(void *)this = &unk_26FCA1708;
  *((void *)this + 3) = &unk_26FCA1870;
  int v2 = (void **)((char *)this + 504);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
  JUMPOUT(0x24C5866C0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26FCA1708;
  *((void *)this + 3) = &unk_26FCA1870;
  int v2 = (void **)((char *)this + 504);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

adm::graph::DSPKernel *adm::graph::DSPGraphKernel::DSPGraphKernel(adm::graph::DSPKernel *a1, uint64_t a2)
{
  int v4 = (char *)a1 + 296;
  long long v5 = adm::graph::DSPKernel::DSPKernel(a1);
  *(void *)long long v5 = &unk_26FCA12E8;
  *((_OWORD *)v5 + 14) = 0u;
  *((void *)v5 + 3) = &unk_26FCA1450;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((void *)v5 + 30) = 0;
  *((_OWORD *)v5 + 14) = *(_OWORD *)a2;
  *((void *)v5 + 30) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v5 + 31) = 0;
  *((void *)v5 + 32) = 0;
  *((void *)v5 + 33) = 0;
  *(_OWORD *)((char *)v5 + 248) = *(_OWORD *)(a2 + 24);
  *((void *)v5 + 33) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v5 + 34) = 0;
  *((void *)v5 + 35) = 0;
  *((void *)v5 + 36) = 0;
  *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 48);
  *((void *)v5 + 36) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((void *)v5 + 37) = 0;
  *((void *)v5 + 38) = 0;
  *((void *)v5 + 39) = 0;
  *(_OWORD *)int v4 = *(_OWORD *)(a2 + 72);
  *((void *)v5 + 39) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((void *)v5 + 40) = 0;
  *((void *)v5 + 41) = 0;
  *((void *)v5 + 42) = 0;
  *((_OWORD *)v5 + 20) = *(_OWORD *)(a2 + 96);
  *((void *)v5 + 42) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v5 + 44) = 0;
  *((void *)v5 + 45) = 0;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 120);
  *((void *)v5 + 45) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *((void *)v5 + 46) = 0;
  *((void *)v5 + 47) = 0;
  *((void *)v5 + 48) = 0;
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 144);
  *((void *)v5 + 48) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *((void *)v4 + 12) = 0;
  *((void *)v5 + 50) = 0;
  *((void *)v5 + 51) = 0;
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 168);
  *((void *)v5 + 51) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *((void *)v5 + 52) = 0;
  *((void *)v5 + 53) = 0;
  *((void *)v5 + 54) = 0;
  *((_OWORD *)v5 + 26) = *(_OWORD *)(a2 + 192);
  *((void *)v5 + 54) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v6 = *(_OWORD *)(a2 + 216);
  *((void *)v5 + 57) = *(void *)(a2 + 232);
  *(_OWORD *)((char *)v5 + 440) = v6;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 216) = 0;
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 240);
  if ((adm::graph::isValid((uint64_t)v5 + 224) & 1) == 0)
  {
    uint64_t v8 = get_adm_log_object();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_248947000, v8, OS_LOG_TYPE_FAULT, "Invalid DSPGraphKernel configuration provided", v10, 2u);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid DSPGraphKernel configuration provided");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_265242E10, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_2489682E8(_Unwind_Exception *a1)
{
  adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(v2);
  int v4 = (void *)*((void *)v1 + 25);
  if (v4)
  {
    *((void *)v1 + 26) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)v1 + 22);
  if (v5)
  {
    *((void *)v1 + 23) = v5;
    operator delete(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)v1 + 21);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  adm::graph::DSPKernel::~DSPKernel(v1);
  _Unwind_Resume(a1);
}

adm::graph::DSPKernel *adm::graph::DSPKernel::DSPKernel(adm::graph::DSPKernel *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26FCA3C68;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = &unk_26FCA3D58;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 17) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  uint64_t v2 = caulk::concurrent::messenger::shared_logging_priority(this);
  MEMORY[0x24C585FF0]((char *)this + 144, 0, v2);
  return this;
}

void sub_2489683FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v13 = v12;
  a10 = (void **)(v10 + 104);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 80);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 56);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v13;
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(void *)uint64_t v10 = &unk_26FCA3DE8;
  adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer(v11);
  _Unwind_Resume(a1);
}

void adm::graph::DSPGraphKernel::configure(adm::graph::DSPGraphKernel *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_24896A0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (*(char *)(v78 - 201) < 0) {
    operator delete(*(void **)(v78 - 224));
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  if (a76 < 0) {
    operator delete(a75.__locale_);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a74 < 0) {
    operator delete(a73.__locale_);
  }
  if (*(char *)(v78 - 225) < 0) {
    operator delete(*(void **)(v78 - 248));
  }
  if (a72 < 0)
  {
    operator delete(a69.__locale_);
    if ((v76 & 1) == 0) {
      goto LABEL_26;
    }
  }
  else if (!v76)
  {
LABEL_26:
    for (uint64_t i = 24; i != -24; i -= 24)
    {
      *(void *)(v78 - 224) = (char *)&STACK[0x200] + i;
      std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 224));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a43);
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v77);
  goto LABEL_26;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  std::chrono::system_clock::time_point result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    int v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(*(void *)a1);
    std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

void *std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::target_type()
{
}

uint64_t std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm5graph6detailL20createTerminalBusMapERKNS0_19KernelConfigurationERKNS_3dsp5GraphEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 8), (void *)(a3 + 8)) << 24) > 0;
}

void std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26FCA1928;
}

void *std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::__clone()
{
  std::chrono::system_clock::time_point result = operator new(0x10uLL);
  void *result = &unk_26FCA1928;
  return result;
}

void std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::~__func()
{
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__shared_ptr_pointer<adm::dsp::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm3dsp5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<adm::dsp::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<adm::dsp::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::detail::getFormatMacroSubstitutions(adm::dsp::GraphMacroGenerator &,adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::detail::getFormatMacroSubstitutions(adm::dsp::GraphMacroGenerator &,adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0x100000000;
}

uint64_t std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,int>(void *a1, AudioStreamBasicDescription *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    int v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    int v15 = (CA::AudioBuffers *)(v12 + 8 * v9);
    unint64_t v17 = v12 + 8 * v13;
    CA::AudioBuffers::AudioBuffers(v15, a2);
    int v16 = (char *)v15 + 8;
    std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)a1[1], a2);
    unint64_t v8 = v6 + 8;
    a1[1] = v6 + 8;
  }
  a1[1] = v8;
  return result;
}

void sub_24896ABC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CA::AudioBuffers *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3 = (CA::AudioBuffers *)ExtendedAudioBufferList_CreateWithFormat();
  *(void *)this = v3;
  if (!v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  CA::AudioBuffers::Prepare(v3);
  return this;
}

void sub_24896AC90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CA::AudioBuffers>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    *(void *)(a1 + 16) = v3 - 8;
    ExtendedAudioBufferList_Destroy();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return result;
}

void sub_24896ADB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'adm::graph::ExclaveKernel::getOutputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void non-virtual thunk to'adm::graph::ExclaveKernel::getInputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::getPropertySize(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::getPropertyInfo(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void non-virtual thunk to'adm::graph::ExclaveKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = 0;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::isPropertyWritable(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::hasProperty(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::getOutputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 37) + 72))();
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::getInputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 37) + 64))();
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::setParameter(adm::graph::ExclaveKernel *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 37) + 88))(a2);
}

float non-virtual thunk to'adm::graph::ExclaveKernel::getParameter(adm::graph::ExclaveKernel *this)
{
  (*(void (**)(float *__return_ptr))(**((void **)this + 37) + 80))(v2);
  float result = v2[0];
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::isParameterWritable(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 37) + 48))();
}

uint64_t non-virtual thunk to'adm::graph::ExclaveKernel::hasParameter(adm::graph::ExclaveKernel *this)
{
  return adm::graph::ExclaveKernel::hasParameter((adm::graph::ExclaveKernel *)((char *)this - 24));
}

uint64_t adm::graph::ExclaveKernel::hasParameter(adm::graph::ExclaveKernel *this)
{
  if ((*(uint64_t (**)(void))(**((void **)this + 40) + 48))(*((void *)this + 40))) {
    return 1;
  }
  char v3 = *(uint64_t (**)(void))(**((void **)this + 40) + 56);
  return v3();
}

void non-virtual thunk to'adm::graph::ExclaveKernel::~ExclaveKernel(adm::graph::ExclaveKernel *this)
{
}

{
  adm::graph::DSPKernel *v1;
  uint64_t vars8;

  uint64_t v1 = (adm::graph::ExclaveKernel *)((char *)this - 24);
  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 136));
  adm::graph::DSPKernel::~DSPKernel(v1);
}

void adm::graph::ExclaveKernel::~ExclaveKernel(adm::graph::ExclaveKernel *this)
{
  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 160));
  adm::graph::DSPKernel::~DSPKernel(this);
  JUMPOUT(0x24C5866C0);
}

{
  uint64_t vars8;

  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 160));
  adm::graph::DSPKernel::~DSPKernel(this);
}

void adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration(adm::graph::ExclaveKernelConfiguration *this)
{
  uint64_t v2 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v8 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v8);
  char v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void adm::graph::ExclaveKernel::getOutputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::ExclaveKernel::getInputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::ExclaveKernel::getPropertySize(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t adm::graph::ExclaveKernel::getPropertyInfo(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void adm::graph::ExclaveKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = 0;
}

uint64_t adm::graph::ExclaveKernel::isPropertyWritable(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t adm::graph::ExclaveKernel::hasProperty(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t adm::graph::ExclaveKernel::getOutputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 40) + 72))();
}

uint64_t adm::graph::ExclaveKernel::getInputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 40) + 64))();
}

uint64_t adm::graph::ExclaveKernel::setParameter(adm::graph::ExclaveKernel *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 40) + 88))(a2);
}

float adm::graph::ExclaveKernel::getParameter(adm::graph::ExclaveKernel *this)
{
  (*(void (**)(float *__return_ptr))(**((void **)this + 40) + 80))(v2);
  float result = v2[0];
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t adm::graph::ExclaveKernel::isParameterWritable(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 40) + 48))();
}

uint64_t adm::graph::ExclaveKernel::doEndProcessing(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 40) + 40))();
}

uint64_t adm::graph::ExclaveKernel::supportsEndProcessingHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::doClientIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320), a5 + 80 * *(void *)(a1 + 328));
}

uint64_t adm::graph::ExclaveKernel::supportsClientIOHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::doBeginProcessing(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 40) + 24))();
}

uint64_t adm::graph::ExclaveKernel::supportsBeginProcessingHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = adm::graph::KernelConfiguration::operator==((uint64_t *)(a1 + 160), (uint64_t *)(result + 160));
    if (result) {
      return *(_DWORD *)(a1 + 304) == *(_DWORD *)(v4 + 304)
    }
          && *(_DWORD *)(a1 + 308) == *(_DWORD *)(v4 + 308)
          && *(_DWORD *)(a1 + 312) == *(_DWORD *)(v4 + 312)
          && *(_DWORD *)(a1 + 316) == *(_DWORD *)(v4 + 316)
          && *(void *)(a1 + 320) == *(void *)(v4 + 320);
  }
  return result;
}

void std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_24896B440(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    uint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
  return v12;
}

void sub_24896B558(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  std::__split_buffer<std::string>::pointer v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    uint64_t v5 = __v->__begin_;
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 1;
      long long v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  unint64_t v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  uint64_t v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4__fs10filesystem4pathEEEC2B8ne180100IJLm0ELm1EEJS8_SB_EJEJEJRKS8_RKSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_24896B6D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<std::string,std::__fs::filesystem::path>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void adm::dsp::v1::Graph::connectToAUPB(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (a2[24])
  {
    unint64_t v2 = (std::string *)(*(void *)(a1 + 8) + 408);
    if (a2[23] < 0) {
      a2 = *(const std::string::value_type **)a2;
    }
    std::string::__assign_external(v2, a2);
  }
  operator new();
}

void sub_24896B8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, int a10, __int16 a11, __int16 a12, uint64_t a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x24C5866C0](v15, 0xE1C40E9FAB1CALL);
  if (a2 == 3)
  {
    int v18 = __cxa_begin_catch(exception_object);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = (*(uint64_t (**)(void *))(*v18 + 16))(v18);
      int v21 = v18 + 2;
      if (*((char *)v18 + 39) < 0) {
        int v21 = (void *)*v21;
      }
      unint64_t v22 = v18 + 6;
      if (*((char *)v18 + 71) < 0) {
        unint64_t v22 = (void *)*v22;
      }
      int v23 = *((_DWORD *)v18 + 10);
      int v24 = *((_DWORD *)v18 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "connect to AUPB";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v20;
      a12 = 2080;
      a13 = (uint64_t)v21;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v22;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v23;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v24;
      char v25 = "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d";
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = adm_log_object;
      uint32_t v27 = 54;
      goto LABEL_15;
    }
LABEL_13:
    __cxa_end_catch();
    JUMPOUT(0x24896B8B8);
  }
  unsigned int v28 = __cxa_begin_catch(exception_object);
  int v29 = get_adm_log_object();
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (!v30) {
      goto LABEL_13;
    }
    uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
    LODWORD(a9) = 136315394;
    *(void *)((char *)&a9 + 4) = "connect to AUPB";
    WORD6(a9) = 2080;
    *(void *)((char *)&a9 + 14) = v31;
    char v25 = "failed to %s due to std::exception: %s";
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = v29;
    uint32_t v27 = 22;
  }
  else
  {
    if (!v30) {
      goto LABEL_13;
    }
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "connect to AUPB";
    char v25 = "failed to %s due to unknown exception";
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = v29;
    uint32_t v27 = 12;
  }
LABEL_15:
  _os_log_error_impl(&dword_248947000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&a9, v27);
  goto LABEL_13;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t adm::dsp::v1::Graph::getLatencyInSamples@<X0>(DSPGraph::Graph **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  size_t v4 = (DSPGraph::Box *)DSPGraph::Graph::out(this[1]);
  long long v5 = (void *)*((void *)this[1] + 3);
  for (i = DSPGraph::getLog(void)::onceToken; v5; long long v5 = (void *)*v5)
  {
    if (i != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global);
    }
    long long v7 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = (char *)v5[2];
      uint64_t v9 = v8 + 32;
      if (v8[55] < 0) {
        uint64_t v9 = (void *)*v9;
      }
      DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v8);
      *(_DWORD *)buf = 136315394;
      double v15 = *(double *)&v9;
      __int16 v16 = 2048;
      double v17 = v10 * 1000.0;
      _os_log_impl(&dword_248947000, v7, OS_LOG_TYPE_INFO, "latency for box '%s' = %.1fms", buf, 0x16u);
      uint64_t i = DSPGraph::getLog(void)::onceToken;
    }
    else
    {
      uint64_t i = -1;
    }
  }
  if (i != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global);
  }
  long long v11 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    DSPGraph::Box::totalLatencyInSeconds(v4);
    *(_DWORD *)buf = 134217984;
    double v15 = v12 * 1000.0;
    _os_log_impl(&dword_248947000, v11, OS_LOG_TYPE_INFO, "total latency = %.1fms", buf, 0xCu);
  }
  uint64_t result = DSPGraph::Box::totalLatencyInSamples(v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void sub_24896BD40(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, __int16 a14, void *a15, long long a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (*(uint64_t (**)(void *))(*v19 + 16))(v19);
      BOOL v30 = v19 + 2;
      if (*((char *)v19 + 39) < 0) {
        BOOL v30 = (void *)*v30;
      }
      uint64_t v31 = v19 + 6;
      if (*((char *)v19 + 71) < 0) {
        uint64_t v31 = (void *)*v31;
      }
      int v32 = *((_DWORD *)v19 + 10);
      int v33 = *((_DWORD *)v19 + 2);
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "get graph latency in samples";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v29;
      a14 = 2080;
      a15 = v30;
      LOWORD(a16) = 2080;
      *(void *)((char *)&a16 + 2) = v31;
      WORD5(a16) = 1024;
      HIDWORD(a16) = v32;
      LOWORD(a17) = 1024;
      *(_DWORD *)((char *)&a17 + 2) = v33;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    uint64_t v21 = 1685287015;
LABEL_10:
    *(void *)uint64_t v17 = v21;
    *(unsigned char *)(v17 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896BCE8);
  }
  unint64_t v22 = __cxa_begin_catch(a1);
  int v23 = get_adm_log_object();
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v24)
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "get graph latency in samples";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v25;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = "failed to %s due to std::exception: %s";
      uint32_t v27 = v23;
      uint32_t v28 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else if (v24)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "get graph latency in samples";
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = "failed to %s due to unknown exception";
    uint32_t v27 = v23;
    uint32_t v28 = 12;
    goto LABEL_17;
  }
  uint64_t v21 = 1970170734;
  goto LABEL_10;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t adm::dsp::v1::Graph::setProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2, a4, a3);
  *a5 = 0;
  a5[16] = 1;
  return result;
}

void sub_24896C014(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, void *a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      uint32_t v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0) {
        uint32_t v28 = (void *)*v28;
      }
      uint64_t v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      int v30 = *((_DWORD *)v17 + 10);
      int v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "set DSP property";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    uint64_t v19 = 1685287015;
LABEL_10:
    *(void *)uint64_t v15 = v19;
    *(unsigned char *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896BFE4);
  }
  uint64_t v20 = __cxa_begin_catch(a1);
  uint64_t v21 = get_adm_log_object();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "set DSP property";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v23;
      BOOL v24 = "failed to %s due to std::exception: %s";
      uint64_t v25 = v21;
      uint32_t v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "set DSP property";
    BOOL v24 = "failed to %s due to unknown exception";
    uint64_t v25 = v21;
    uint32_t v26 = 12;
    goto LABEL_17;
  }
  uint64_t v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a3;
  v8[0] = a3[1];
  uint64_t result = (*(uint64_t (**)(void, uint64_t, _DWORD *, uint64_t))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a2, v8, v6);
  a3[1] = v8[0];
  *a4 = 0;
  a4[16] = 1;
  return result;
}

void sub_24896C2B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, int a12, __int16 a13, __int16 a14, void *a15, long long a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (*(uint64_t (**)(void *))(*v19 + 16))(v19);
      int v30 = v19 + 2;
      if (*((char *)v19 + 39) < 0) {
        int v30 = (void *)*v30;
      }
      int v31 = v19 + 6;
      if (*((char *)v19 + 71) < 0) {
        int v31 = (void *)*v31;
      }
      int v32 = *((_DWORD *)v19 + 10);
      int v33 = *((_DWORD *)v19 + 2);
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "get DSP property";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v29;
      a14 = 2080;
      a15 = v30;
      LOWORD(a16) = 2080;
      *(void *)((char *)&a16 + 2) = v31;
      WORD5(a16) = 1024;
      HIDWORD(a16) = v32;
      LOWORD(a17) = 1024;
      *(_DWORD *)((char *)&a17 + 2) = v33;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    uint64_t v21 = 1685287015;
LABEL_10:
    *(void *)uint64_t v17 = v21;
    *(unsigned char *)(v17 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896C288);
  }
  BOOL v22 = __cxa_begin_catch(a1);
  uint64_t v23 = get_adm_log_object();
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v24)
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "get DSP property";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v25;
      uint32_t v26 = "failed to %s due to std::exception: %s";
      uint64_t v27 = v23;
      uint32_t v28 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else if (v24)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "get DSP property";
    uint32_t v26 = "failed to %s due to unknown exception";
    uint64_t v27 = v23;
    uint32_t v28 = 12;
    goto LABEL_17;
  }
  uint64_t v21 = 1970170734;
  goto LABEL_10;
}

unint64_t adm::dsp::v1::Graph::getPropertyInfo@<X0>(adm::dsp::v1::Graph *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 64))(*((void *)this + 1));
  int v7 = result;
  if (!v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &unk_26FCA1E80;
    exception[2] = v7;
  }
  uint64_t v9 = *((void *)this + 1) + 576;
  do
  {
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      break;
    }
  }
  while (*(_DWORD *)(v9 + 16) != a2 || *(unsigned char *)(v9 + 64) == 0);
  if (v9) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = HIDWORD(result) & 1;
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_24896C5D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, void *a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      uint32_t v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0) {
        uint32_t v28 = (void *)*v28;
      }
      uint64_t v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      int v30 = *((_DWORD *)v17 + 10);
      int v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "get DSP property info";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    uint64_t v19 = 1685287015;
LABEL_10:
    *(void *)uint64_t v15 = v19;
    *(unsigned char *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896C55CLL);
  }
  uint64_t v20 = __cxa_begin_catch(a1);
  uint64_t v21 = get_adm_log_object();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "get DSP property info";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v23;
      BOOL v24 = "failed to %s due to std::exception: %s";
      uint64_t v25 = v21;
      uint32_t v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "get DSP property info";
    BOOL v24 = "failed to %s due to unknown exception";
    uint64_t v25 = v21;
    uint32_t v26 = 12;
    goto LABEL_17;
  }
  uint64_t v19 = 1970170734;
  goto LABEL_10;
}

void caulk::bad_expected_access<int>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x24C5866C0);
}

BOOL adm::dsp::v1::Graph::hasProperty(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(v3 + 568);
  if (!v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (v4 <= a2) {
      unint64_t v6 = a2 % v4;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
  }
  int v7 = *(uint64_t ***)(*(void *)(v3 + 560) + 8 * v6);
  if (!v7) {
    return 0;
  }
  char v8 = *v7;
  if (!v8) {
    return 0;
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == a2) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4) {
        v9 %= v4;
      }
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6) {
      return 0;
    }
LABEL_16:
    char v8 = (uint64_t *)*v8;
    if (!v8) {
      return 0;
    }
  }
  if (*((_DWORD *)v8 + 4) != a2) {
    goto LABEL_16;
  }
  return (a3 & 0xFF00000000) == 0 || *((unsigned char *)v8 + 64) == (a3 == 1);
}

uint64_t adm::dsp::v1::Graph::getPropertyIDs@<X0>(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *(uint64_t **)(*(void *)(a1 + 8) + 576);
  if (v4)
  {
    uint8x8_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = a2 == 1;
    do
    {
      if (*((unsigned __int8 *)v4 + 64) == v8)
      {
        if ((unint64_t)v7 >= v6)
        {
          uint64_t v10 = (v7 - v5) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v6 - (void)v5) >> 1 > v11) {
            unint64_t v11 = (uint64_t)(v6 - (void)v5) >> 1;
          }
          if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
          }
          else {
            uint64_t v13 = 0;
          }
          unint64_t v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)unint64_t v14 = *((_DWORD *)v4 + 4);
          unint64_t v9 = v14 + 4;
          while (v7 != v5)
          {
            int v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          unint64_t v6 = v12 + 4 * v13;
          *a3 = v14;
          a3[1] = v9;
          a3[2] = (char *)v6;
          if (v5) {
            operator delete(v5);
          }
          uint8x8_t v5 = v14;
        }
        else
        {
          *(_DWORD *)int v7 = *((_DWORD *)v4 + 4);
          unint64_t v9 = v7 + 4;
        }
        a3[1] = v9;
        int v7 = v9;
      }
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

uint64_t adm::dsp::v1::Graph::setParameter@<X0>(adm::dsp::v1::Graph *this@<X0>, float a2@<S0>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, float))(**((void **)this + 1) + 40))(*((void *)this + 1), a2);
  *a3 = 0;
  a3[16] = 1;
  return result;
}

void sub_24896CAD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, void *a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      uint32_t v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0) {
        uint32_t v28 = (void *)*v28;
      }
      uint64_t v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      int v30 = *((_DWORD *)v17 + 10);
      int v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "set DSP parameter";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    uint64_t v19 = 1685287015;
LABEL_10:
    *(void *)uint64_t v15 = v19;
    *(unsigned char *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896CAA0);
  }
  uint64_t v20 = __cxa_begin_catch(a1);
  uint64_t v21 = get_adm_log_object();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "set DSP parameter";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v23;
      BOOL v24 = "failed to %s due to std::exception: %s";
      uint64_t v25 = v21;
      uint32_t v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "set DSP parameter";
    BOOL v24 = "failed to %s due to unknown exception";
    uint64_t v25 = v21;
    uint32_t v26 = 12;
    goto LABEL_17;
  }
  uint64_t v19 = 1970170734;
  goto LABEL_10;
}

void adm::dsp::v1::Graph::getParameter(adm::dsp::v1::Graph *this@<X0>, uint64_t a2@<X8>)
{
  *(float *)a2 = (*(float (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  *(unsigned char *)(a2 + 16) = 1;
}

void sub_24896CD5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, void *a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      uint32_t v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0) {
        uint32_t v28 = (void *)*v28;
      }
      uint64_t v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      int v30 = *((_DWORD *)v17 + 10);
      int v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "get DSP parameter";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    uint64_t v19 = 1685287015;
LABEL_10:
    *(void *)uint64_t v15 = v19;
    *(unsigned char *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896CD2CLL);
  }
  uint64_t v20 = __cxa_begin_catch(a1);
  uint64_t v21 = get_adm_log_object();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "get DSP parameter";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v23;
      BOOL v24 = "failed to %s due to std::exception: %s";
      uint64_t v25 = v21;
      uint32_t v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "get DSP parameter";
    BOOL v24 = "failed to %s due to unknown exception";
    uint64_t v25 = v21;
    uint32_t v26 = 12;
    goto LABEL_17;
  }
  uint64_t v19 = 1970170734;
  goto LABEL_10;
}

BOOL adm::dsp::v1::Graph::hasParameter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(v3 + 528);
  if (!v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (v4 <= a2) {
      unint64_t v6 = a2 % v4;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
  }
  int v7 = *(uint64_t ***)(*(void *)(v3 + 520) + 8 * v6);
  if (!v7) {
    return 0;
  }
  int v8 = *v7;
  if (!v8) {
    return 0;
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == a2) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4) {
        v9 %= v4;
      }
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6) {
      return 0;
    }
LABEL_16:
    int v8 = (uint64_t *)*v8;
    if (!v8) {
      return 0;
    }
  }
  if (*((_DWORD *)v8 + 4) != a2) {
    goto LABEL_16;
  }
  return (a3 & 0xFF00000000) == 0 || *((unsigned char *)v8 + 32) == (a3 == 1);
}

uint64_t adm::dsp::v1::Graph::getParameterIDs@<X0>(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *(uint64_t **)(*(void *)(a1 + 8) + 536);
  if (v4)
  {
    uint8x8_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = a2 == 1;
    do
    {
      if (*((unsigned __int8 *)v4 + 32) == v8)
      {
        if ((unint64_t)v7 >= v6)
        {
          uint64_t v10 = (v7 - v5) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v6 - (void)v5) >> 1 > v11) {
            unint64_t v11 = (uint64_t)(v6 - (void)v5) >> 1;
          }
          if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
          }
          else {
            uint64_t v13 = 0;
          }
          unint64_t v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)unint64_t v14 = *((_DWORD *)v4 + 4);
          unint64_t v9 = v14 + 4;
          while (v7 != v5)
          {
            int v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          unint64_t v6 = v12 + 4 * v13;
          *a3 = v14;
          a3[1] = v9;
          a3[2] = (char *)v6;
          if (v5) {
            operator delete(v5);
          }
          uint8x8_t v5 = v14;
        }
        else
        {
          *(_DWORD *)int v7 = *((_DWORD *)v4 + 4);
          unint64_t v9 = v7 + 4;
        }
        a3[1] = v9;
        int v7 = v9;
      }
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

uint64_t adm::dsp::v1::Graph::process@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unsigned char *a7@<X8>)
{
  v12[9] = *MEMORY[0x263EF8340];
  v12[0] = a2;
  v12[1] = a3;
  v11[0] = a4;
  v11[1] = a5;
  int v10 = a6;
  v9[0] = a1;
  v9[1] = v12;
  v9[2] = &v10;
  void v9[3] = v11;
  uint64_t result = adm::dsp::v1::Graph::process(std::span<adm::dsp::ProcessData const,18446744073709551615ul>,std::span<adm::dsp::ProcessData,18446744073709551615ul>,unsigned int)::$_0::operator()(v9);
  *a7 = 0;
  a7[16] = 1;
  return result;
}

void sub_24896D218(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long buf, int a20,__int16 a21,__int16 a22,void *a23,long long a24,uint64_t a25)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*v27 + 16))(v27);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = v27 + 2;
      if (*((char *)v27 + 39) < 0) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38 = (void *)*v38;
      }
      long long v39 = v27 + 6;
      if (*((char *)v27 + 71) < 0) {
        long long v39 = (void *)*v39;
      }
      int v40 = *((_DWORD *)v27 + 10);
      int v41 = *((_DWORD *)v27 + 2);
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "process";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v37;
      a22 = 2080;
      a23 = v38;
      LOWORD(a24) = 2080;
      *(void *)((char *)&a24 + 2) = v39;
      WORD5(a24) = 1024;
      HIDWORD(a24) = v40;
      LOWORD(a25) = 1024;
      *(_DWORD *)((char *)&a25 + 2) = v41;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    uint64_t v29 = 1685287015;
LABEL_10:
    *(void *)uint64_t v25 = v29;
    *(unsigned char *)(v25 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896D1E8);
  }
  int v30 = __cxa_begin_catch(a1);
  int v31 = get_adm_log_object();
  BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v32)
    {
      uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "process";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v33;
      unint64_t v34 = "failed to %s due to std::exception: %s";
      uint64_t v35 = v31;
      uint32_t v36 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&buf, v36);
    }
  }
  else if (v32)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "process";
    unint64_t v34 = "failed to %s due to unknown exception";
    uint64_t v35 = v31;
    uint32_t v36 = 12;
    goto LABEL_17;
  }
  uint64_t v29 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::process(std::span<adm::dsp::ProcessData const,18446744073709551615ul>,std::span<adm::dsp::ProcessData,18446744073709551615ul>,unsigned int)::$_0::operator()(void *a1)
{
  v42[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 24);
  uint64_t v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, 0);
  uint8x8_t v5 = (void *)a1[1];
  if (v5[1] != v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mismatched input bus count");
    goto LABEL_27;
  }
  uint64_t v6 = v4;
  MEMORY[0x270FA5388](v4);
  int v8 = &v42[-2 * v7];
  if (v6)
  {
    bzero(v8, 80 * ((80 * (unint64_t)v6 - 80) / 0x50) + 80);
    uint64_t v9 = 0;
    int v10 = v8;
    do
    {
      int v11 = 0;
      *((_DWORD *)v10 + 1) = 0;
      if (v3 != 2) {
        int v11 = *(_DWORD *)a1[2];
      }
      *(_DWORD *)int v10 = v11;
      unint64_t v12 = *(long long **)(*v5 + v9 + 8);
      long long v13 = *v12;
      long long v14 = v12[1];
      long long v15 = v12[2];
      *(_OWORD *)(v10 + 7) = v12[3];
      *(_OWORD *)(v10 + 5) = v15;
      *(_OWORD *)(v10 + 3) = v14;
      *(_OWORD *)(v10 + 1) = v13;
      v10[9] = 0;
      v9 += 24;
      v10 += 10;
    }
    while (24 * v6 != v9);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, 1);
  uint64_t v17 = (void *)a1[3];
  if (v17[1] != v16)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mismatched output bus count");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v18 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = &v42[-2 * v19];
  if (v18)
  {
    bzero(v20, 80 * ((80 * (unint64_t)v18 - 80) / 0x50) + 80);
    uint64_t v21 = 0;
    BOOL v22 = v20;
    do
    {
      int v23 = 0;
      *((_DWORD *)v22 + 1) = 0;
      if (v3 != 3) {
        int v23 = *(_DWORD *)a1[2];
      }
      *(_DWORD *)BOOL v22 = v23;
      BOOL v24 = *(long long **)(*v17 + v21 + 8);
      long long v25 = *v24;
      long long v26 = v24[1];
      long long v27 = v24[2];
      *(_OWORD *)(v22 + 7) = v24[3];
      *(_OWORD *)(v22 + 5) = v27;
      *(_OWORD *)(v22 + 3) = v26;
      *(_OWORD *)(v22 + 1) = v25;
      v22[9] = 0;
      v21 += 24;
      v22 += 10;
    }
    while (24 * v18 != v21);
  }
  if (v3) {
    DSPGraph::Graph::preflight();
  }
  if (v6)
  {
    uint32_t v28 = *(uint64_t **)a1[1];
    uint64_t v29 = v8 + 9;
    do
    {
      uint64_t v30 = *v28;
      v28 += 3;
      void *v29 = v30;
      v29 += 10;
      --v6;
    }
    while (v6);
  }
  if (!v18) {
    return DSPGraph::Graph::processMultiple();
  }
  uint64_t v31 = 0;
  BOOL v32 = *(uint64_t **)a1[3];
  do
  {
    uint64_t v33 = *v32;
    v32 += 3;
    v20[v31 + 9] = v33;
    v31 += 10;
  }
  while (10 * v18 != v31);
  uint64_t result = DSPGraph::Graph::processMultiple();
  uint64_t v35 = 0;
  uint32_t v36 = (long long *)(v20 + 1);
  do
  {
    uint64_t v37 = *(_OWORD **)(*(void *)a1[3] + v35 + 8);
    long long v38 = *v36;
    long long v39 = v36[1];
    long long v40 = v36[3];
    v37[2] = v36[2];
    v37[3] = v40;
    *uint64_t v37 = v38;
    v37[1] = v39;
    v35 += 24;
    v36 += 5;
  }
  while (24 * v18 != v35);
  return result;
}

void sub_24896D7A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::dsp::v1::Graph::reset@<X0>(DSPGraph::Graph **this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = DSPGraph::Graph::reset(this[1]);
  *a2 = 0;
  a2[16] = 1;
  return result;
}

void sub_24896D830(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, void *a13, long long a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      uint32_t v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0) {
        uint32_t v28 = (void *)*v28;
      }
      uint64_t v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      int v30 = *((_DWORD *)v17 + 10);
      int v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(void *)((char *)&a9 + 4) = "reset";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    uint64_t v19 = 1685287015;
LABEL_10:
    *(void *)uint64_t v15 = v19;
    *(unsigned char *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896D800);
  }
  uint64_t v20 = __cxa_begin_catch(a1);
  uint64_t v21 = get_adm_log_object();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "reset";
      WORD6(a9) = 2080;
      *(void *)((char *)&a9 + 14) = v23;
      BOOL v24 = "failed to %s due to std::exception: %s";
      long long v25 = v21;
      uint32_t v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(void *)((char *)&a9 + 4) = "reset";
    BOOL v24 = "failed to %s due to unknown exception";
    long long v25 = v21;
    uint32_t v26 = 12;
    goto LABEL_17;
  }
  uint64_t v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getExpectedOutputFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v5 = a2;
  if (*(unsigned char *)(*(void *)(this + 8) + 760))
  {
    v4[0] = this;
    v4[1] = &v5;
    this = adm::dsp::v1::Graph::getExpectedOutputFrameCount::$_0::operator()(v4);
    *(_DWORD *)a3 = this;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(void *)a3 = 1970171760;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return this;
}

void sub_24896DAD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, int a14, __int16 a15, __int16 a16, void *a17, long long a18, uint64_t a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v21 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(void *))(*v21 + 16))(v21);
      BOOL v32 = v21 + 2;
      if (*((char *)v21 + 39) < 0) {
        BOOL v32 = (void *)*v32;
      }
      uint64_t v33 = v21 + 6;
      if (*((char *)v21 + 71) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      int v34 = *((_DWORD *)v21 + 10);
      int v35 = *((_DWORD *)v21 + 2);
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "get expected output frame count";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v31;
      a16 = 2080;
      a17 = v32;
      LOWORD(a18) = 2080;
      *(void *)((char *)&a18 + 2) = v33;
      WORD5(a18) = 1024;
      HIDWORD(a18) = v34;
      LOWORD(a19) = 1024;
      *(_DWORD *)((char *)&a19 + 2) = v35;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    uint64_t v23 = 1685287015;
LABEL_10:
    *(void *)uint64_t v19 = v23;
    *(unsigned char *)(v19 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896DAA4);
  }
  BOOL v24 = __cxa_begin_catch(a1);
  long long v25 = get_adm_log_object();
  BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v26)
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "get expected output frame count";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v27;
      uint32_t v28 = "failed to %s due to std::exception: %s";
      uint64_t v29 = v25;
      uint32_t v30 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }
  else if (v26)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "get expected output frame count";
    uint32_t v28 = "failed to %s due to unknown exception";
    uint64_t v29 = v25;
    uint32_t v30 = 12;
    goto LABEL_17;
  }
  uint64_t v23 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getExpectedOutputFrameCount(unsigned int)::$_0::operator()(void *a1)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, 0);
  unsigned int v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v21[-2 * v5 - 1];
  if (v4)
  {
    uint64_t v7 = v4;
    bzero(v6, 80 * ((80 * (unint64_t)v4 - 80) / 0x50) + 80);
    int v8 = *(_DWORD *)a1[1];
    uint64_t v9 = v6 + 1;
    do
    {
      *((_DWORD *)v9 - 2) = v8;
      *((_DWORD *)v9 - 1) = 0;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *((_OWORD *)v9 + 1) = 0uLL;
      *((_OWORD *)v9 + 2) = 0uLL;
      *((_OWORD *)v9 + 3) = 0uLL;
      v9[8] = 0;
      v9 += 10;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, 1);
  uint64_t v11 = v10;
  int v12 = MEMORY[0x270FA5388](v10);
  long long v14 = &v21[-2 * v13 - 1];
  if (v12)
  {
    bzero(v14, 80 * ((80 * (unint64_t)v11 - 80) / 0x50) + 80);
    uint64_t v15 = v14;
    uint64_t v16 = v11;
    do
    {
      v15[3] = 0uLL;
      v15[4] = 0uLL;
      v15[1] = 0uLL;
      v15[2] = 0uLL;
      *uint64_t v15 = 0uLL;
      v15 += 5;
      --v16;
    }
    while (v16);
  }
  (*(void (**)(void *__return_ptr, uint64_t, void, void))(*(void *)v2 + 40))(v21, v2, 0, 0);
  DSPGraph::Graph::preflight();
  uint64_t result = 0xFFFFFFFFLL;
  if (v11)
  {
    do
    {
      unsigned int v19 = *v14;
      v14 += 20;
      unsigned int v18 = v19;
      if (v19 >= result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v18;
      }
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t adm::dsp::v1::Graph::getRequiredInputFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v5 = a2;
  if (*(unsigned char *)(*(void *)(this + 8) + 760))
  {
    v4[0] = this;
    v4[1] = &v5;
    this = adm::dsp::v1::Graph::getRequiredInputFrameCount::$_0::operator()(v4);
    *(_DWORD *)a3 = this;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    *(void *)a3 = 1970171760;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return this;
}

void sub_24896DFA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, int a14, __int16 a15, __int16 a16, void *a17, long long a18, uint64_t a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v21 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(void *))(*v21 + 16))(v21);
      BOOL v32 = v21 + 2;
      if (*((char *)v21 + 39) < 0) {
        BOOL v32 = (void *)*v32;
      }
      uint64_t v33 = v21 + 6;
      if (*((char *)v21 + 71) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      int v34 = *((_DWORD *)v21 + 10);
      int v35 = *((_DWORD *)v21 + 2);
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "get required input frame count";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v31;
      a16 = 2080;
      a17 = v32;
      LOWORD(a18) = 2080;
      *(void *)((char *)&a18 + 2) = v33;
      WORD5(a18) = 1024;
      HIDWORD(a18) = v34;
      LOWORD(a19) = 1024;
      *(_DWORD *)((char *)&a19 + 2) = v35;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    uint64_t v23 = 1685287015;
LABEL_10:
    *(void *)uint64_t v19 = v23;
    *(unsigned char *)(v19 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x24896DF78);
  }
  BOOL v24 = __cxa_begin_catch(a1);
  long long v25 = get_adm_log_object();
  BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v26)
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "get required input frame count";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v27;
      uint32_t v28 = "failed to %s due to std::exception: %s";
      uint64_t v29 = v25;
      uint32_t v30 = 22;
LABEL_17:
      _os_log_error_impl(&dword_248947000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }
  else if (v26)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "get required input frame count";
    uint32_t v28 = "failed to %s due to unknown exception";
    uint64_t v29 = v25;
    uint32_t v30 = 12;
    goto LABEL_17;
  }
  uint64_t v23 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getRequiredInputFrameCount(unsigned int)::$_0::operator()(void *a1)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, 0);
  uint64_t v4 = v3;
  int v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v21[-2 * v6 - 1];
  if (v5)
  {
    bzero(v7, 80 * ((80 * (unint64_t)v4 - 80) / 0x50) + 80);
    int v8 = v7;
    uint64_t v9 = v4;
    do
    {
      v8[3] = 0uLL;
      v8[4] = 0uLL;
      v8[1] = 0uLL;
      v8[2] = 0uLL;
      _OWORD *v8 = 0uLL;
      v8 += 5;
      --v9;
    }
    while (v9);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, 1);
  unsigned int v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v21[-2 * v12 - 1];
  if (v11)
  {
    uint64_t v14 = v11;
    bzero(v13, 80 * ((80 * (unint64_t)v11 - 80) / 0x50) + 80);
    int v15 = *(_DWORD *)a1[1];
    uint64_t v16 = v13 + 1;
    do
    {
      *((_DWORD *)v16 - 2) = v15;
      *((_DWORD *)v16 - 1) = 0;
      *(_OWORD *)uint64_t v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      char v16[8] = 0;
      v16 += 10;
      --v14;
    }
    while (v14);
  }
  (*(void (**)(void *__return_ptr, uint64_t, void, uint64_t))(*(void *)v2 + 40))(v21, v2, 0, 1);
  DSPGraph::Graph::preflight();
  uint64_t result = 0;
  if (v4)
  {
    do
    {
      unsigned int v19 = *v7;
      v7 += 20;
      unsigned int v18 = v19;
      if (result <= v19) {
        uint64_t result = v18;
      }
      else {
        uint64_t result = result;
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

double adm::dsp::v1::Graph::getTerminalName@<D0>(DSPGraph::Graph **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  if ((*((unsigned int (**)(DSPGraph::Graph **, uint64_t))*a1 + 4))(a1, a3) <= a2)
  {
    *(void *)a4 = 1651536493;
    *(unsigned char *)(a4 + 24) = 0;
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = DSPGraph::Graph::out(a1[1]);
      uint64_t v9 = (char *)(v8 + 32);
      if (*(char *)(v8 + 55) < 0) {
        uint64_t v9 = *(char **)v9;
      }
    }
    else
    {
      uint64_t v10 = DSPGraph::Graph::in(a1[1]);
      uint64_t v9 = (char *)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        uint64_t v9 = *(char **)v9;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, v9);
    double result = *(double *)&v11;
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 16) = v12;
    *(unsigned char *)(a4 + 24) = 1;
  }
  return result;
}

uint64_t adm::dsp::v1::Graph::getTerminalFormat@<X0>(DSPGraph::Graph **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t result = (*((uint64_t (**)(DSPGraph::Graph **, uint64_t))*a1 + 4))(a1, a3);
  if (result <= a2)
  {
    char v13 = 0;
    *(void *)a4 = 1651536493;
  }
  else
  {
    if (v4 == 1)
    {
      uint64_t v14 = DSPGraph::Graph::out(a1[1]);
      uint64_t v10 = *(void *)(v14 + 64);
      if (*(void *)(v14 + 72) == v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v20, "in");
        unsigned int v18 = (void *)(v14 + 32);
        if (*(char *)(v14 + 55) < 0) {
          unsigned int v18 = (void *)*v18;
        }
        DSPGraph::strprintf(v19, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v17, v18, (uint64_t)(*(void *)(v14 + 72) - *(void *)(v14 + 64)) >> 5, 0);
        uint64_t result = DSPGraph::ThrowException();
        goto LABEL_16;
      }
    }
    else
    {
      if (v4) {
        return result;
      }
      uint64_t v9 = DSPGraph::Graph::in(a1[1]);
      uint64_t v10 = *(void *)(v9 + 88);
      if (*(void *)(v9 + 96) == v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v20, "out");
        uint64_t v12 = (void *)(v9 + 32);
        if (*(char *)(v9 + 55) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        DSPGraph::strprintf(v19, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*(void *)(v9 + 96) - *(void *)(v9 + 88)) >> 5, 0);
        uint64_t result = DSPGraph::ThrowException();
LABEL_16:
        __break(1u);
        return result;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v15 = *(void *)(result + 120);
    long long v16 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v15;
    *(_OWORD *)(a4 + 16) = v16;
    *(void *)(a4 + 32) = *(void *)(v15 + 32);
    char v13 = 1;
  }
  *(unsigned char *)(a4 + 40) = v13;
  return result;
}

void sub_24896E6C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  __clang_call_terminate(a1);
}

uint64_t adm::dsp::v1::Graph::getTerminalCount(uint64_t result, int a2)
{
  if (a2 == 1) {
    return DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(result + 8));
  }
  if (!a2) {
    return DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(result + 8));
  }
  return result;
}

uint64_t adm::dsp::v1::Graph::getBlockSize(adm::dsp::v1::Graph *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 688);
}

uint64_t adm::dsp::v1::Graph::getBlockSizePolicy(adm::dsp::v1::Graph *this)
{
  return *((unsigned int *)this + 6);
}

void adm::dsp::v1::Graph::~Graph(adm::dsp::v1::Graph *this)
{
  *(void *)this = &unk_26FCA1D10;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x24C5866C0);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26FCA1D10;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN8DSPGraph5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<DSPGraph::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void *adm::dsp::v1::Graph::create(void *result, void *a2, unsigned int a3)
{
  if (*a2 && a3 <= 3 && a3 != 1) {
    operator new();
  }
  void *result = 0;
  return result;
}

void sub_24896EB44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void boost::exception_ptr::~exception_ptr(atomic_uint **this)
{
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26FCA3BD0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_26FCA3C48;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26FCA20F0;
  *(void *)(a1 + 40) = &unk_26FCA2120;
  *(void *)(a1 + 48) = &unk_26FCA2160;
  return a1;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x24C5866C0);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::~sp_counted_impl_p()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(void *)a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x24C5866C0);
}

uint64_t *virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  std::bad_exception::~bad_exception((std::bad_exception *)v1 + 5);
  *(void *)uint64_t v1 = &unk_26FCA3C48;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)exception, a1);
}

void sub_24896EEE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone()
{
}

void sub_24896F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::bad_exception_::~bad_exception_(v10);
  MEMORY[0x24C5866C0](v10, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
}

uint64_t *non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(std::bad_exception *a1)
{
  std::bad_exception::~bad_exception(a1);
  *(void *)(v1 - 40) = &unk_26FCA3C48;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
}

void non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(std::bad_exception *this)
{
  std::bad_exception::~bad_exception(this);
  *(void *)(v1 - 40) = &unk_26FCA3C48;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26FCA3BD0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_26FCA3C48;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26FCA1F30;
  *(void *)(a1 + 40) = &unk_26FCA1F60;
  *(void *)(a1 + 48) = &unk_26FCA1FA0;
  return a1;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(void *)this = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x24C5866C0);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::~sp_counted_impl_p()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(void *)a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x24C5866C0);
}

uint64_t *virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1 + 5);
  *(void *)uint64_t v1 = &unk_26FCA3C48;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)exception, a1);
}

void sub_24896F5F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone()
{
}

void sub_24896F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::bad_alloc_::~bad_alloc_(v10);
  MEMORY[0x24C5866C0](v10, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
}

uint64_t *non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(std::bad_alloc *a1)
{
  std::bad_alloc::~bad_alloc(a1);
  *(void *)(v1 - 40) = &unk_26FCA3C48;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
}

void non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(std::bad_alloc *this)
{
  std::bad_alloc::~bad_alloc(this);
  *(void *)(v1 - 40) = &unk_26FCA3C48;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void adm::consume_exception_and_terminate(const std::exception *this, const std::exception *a2)
{
  uint64_t v3 = (const char *)((uint64_t (*)(const std::exception *, const std::exception *))this->what)(this, a2);
  consume_exception_and_terminate(this, v3);
}

void consume_exception_and_terminate(const std::exception *a1, const char *a2)
{
  v40[19] = *MEMORY[0x263EF8340];
  qword_269334F60 = (uint64_t)a2;
  if (v3)
  {
    uint64_t v4 = v3[1];
    if (v4)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v4 + 8))(lpsrc);
      if (*(void *)lpsrc
      {
        __assert_rtn("get", "get_error_info.hpp", 46, "0!=dynamic_cast<ErrorInfo *>(eib.get())");
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)&lpsrc[8]);
    }
  }
  long long v5 = a1->__vftable;
  uint64_t v7 = (char *)((uint64_t (*)(const std::exception *))v5->what)(a1);
  if (v6)
  {
    uint64_t v17 = (uint64_t (***)(void, void))*((void *)v6 + 1);
    if (!v17) {
      operator new();
    }
    uint64_t v18 = (**v17)(v17, 0);
    if (!v18) {
      __assert_rtn("get_diagnostic_information", "diagnostic_information.hpp", 109, "di!=0");
    }
    if ((char *)v18 == v7)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, v7);
      goto LABEL_54;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)lpsrc);
    uint64_t v25 = *((void *)v6 + 3);
    if (v25) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = *((_DWORD *)v6 + 8) == -1;
    }
    if (v26 && *((void *)v6 + 2) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"Throw location unknown (consider using BOOST_THROW_EXCEPTION)\n", 62);
      uint64_t v8 = (const std::exception *)v6;
    }
    else
    {
      if (v25)
      {
        size_t v28 = strlen(*((const char **)v6 + 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, v25, v28);
        if (*((_DWORD *)v6 + 8) != -1)
        {
          LOBYTE(__dst[0]) = 40;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
          uint64_t v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"): ", 3);
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"Throw in function ", 18);
      uint64_t v29 = (const char *)*((void *)v6 + 2);
      if (v29)
      {
        size_t v30 = strlen(*((const char **)v6 + 2));
      }
      else
      {
        uint64_t v29 = "(unknown)";
        size_t v30 = 9;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v29, v30);
      LOBYTE(__dst[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
      uint64_t v8 = (const std::exception *)v6;
    }
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)lpsrc);
    uint64_t v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "Dynamic exception type: ");
  if ((v35 & 0x80u) == 0) {
    uint64_t v9 = __dst;
  }
  else {
    uint64_t v9 = (void **)__dst[0];
  }
  if ((v35 & 0x80u) == 0) {
    uint64_t v10 = v35;
  }
  else {
    uint64_t v10 = (uint64_t)__dst[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v9, v10);
  if (v6) {
    long long v11 = v8;
  }
  else {
    long long v11 = a1;
  }
  uint64_t v12 = (const char *)(*((void *)v11->__vftable[-1].what + 1) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v36, v12);
  if (v36) {
    char v13 = (char *)v36;
  }
  else {
    char v13 = (char *)v12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  free(v36);
  if ((v33 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v15 = v33;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v14, v15);
  LOBYTE(v36) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)&v36, 1);
  if ((char)v33 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v35 < 0) {
    operator delete(__dst[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"std::exception::what: ", 22);
  if (!v7) {
    uint64_t v7 = "(null)";
  }
  size_t v16 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v7, v16);
  LOBYTE(__dst[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
  if (!v6) {
    goto LABEL_33;
  }
  unsigned int v19 = __dst;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&lpsrc[8]);
  if ((v35 & 0x80u) != 0) {
    unsigned int v19 = (void **)__dst[0];
  }
  uint64_t v20 = v8[1].__vftable;
  if (!v20) {
    operator new();
  }
  uint64_t v21 = (char *)(*(uint64_t (**)(std::exception_vtbl *, void **))v20->~exception)(v20, v19);
  if (!v21) {
    __assert_rtn("get_diagnostic_information", "diagnostic_information.hpp", 109, "di!=0");
  }
  if ((char)v35 < 0) {
    operator delete(__dst[0]);
  }
  if (*v21) {
    std::string::basic_string[abi:ne180100]<0>(__dst, v21);
  }
  else {
LABEL_33:
  }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&lpsrc[8]);
  *(void *)lpsrc = *MEMORY[0x263F8C2C8];
  *(void *)&lpsrc[*(void *)(*(void *)lpsrc - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&lpsrc[8] = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete(v38);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24C586600](v40);
LABEL_54:
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = ((uint64_t (*)(const std::exception *))a1->what)(a1);
    BOOL v24 = __dst;
    if ((v35 & 0x80u) != 0) {
      BOOL v24 = (void **)__dst[0];
    }
    *(_DWORD *)lpsrc = 136315394;
    *(void *)&lpsrc[4] = v23;
    *(_WORD *)&lpsrc[12] = 2080;
    *(void *)&lpsrc[14] = v24;
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "**EXCEPTION**  %s\n%s", lpsrc, 0x16u);
  }
  abort();
}

void sub_2489701D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2489701E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void adm::consume_exception_and_terminate(const std::exception *a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  uint64_t v18 = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = MEMORY[0x263F8C328] + 64;
  uint64_t v13 = MEMORY[0x263F8C328] + 64;
  uint64_t v4 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  v12[0] = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)((char *)v12 + *(void *)(v12[0] - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v5;
  v12[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24));
  std::ios_base::init(v6, v14);
  uint64_t v7 = MEMORY[0x263F8C328] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v8 = v4[5];
  uint64_t v13 = v4[4];
  *(void *)((char *)&v14[-1] + *(void *)(v13 - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v8;
  v12[0] = v4[1];
  *(void *)((char *)v12 + *(void *)(v12[0] - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v4[6];
  uint64_t v18 = v2;
  v12[0] = v7;
  uint64_t v13 = v3;
  std::streambuf::basic_streambuf();
  v14[0] = MEMORY[0x263F8C318] + 16;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = 24;
  DSPGraph::Exception::print();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v14);
  if (v11 >= 0) {
    uint64_t v9 = (const char *)__dst;
  }
  else {
    uint64_t v9 = (const char *)__dst[0];
  }
  consume_exception_and_terminate(a1, v9);
}

void sub_2489704E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = *v33;
  uint64_t v35 = v33[9];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v33[8];
  a18 = v35;
  if (a32 < 0) {
    operator delete(a27);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24C586600](v32);
  _Unwind_Resume(a1);
}

void adm::consume_unknown_exception_and_terminate(adm *this)
{
  qword_269334F60 = (uint64_t)"Unknown exception";
  abort();
}

void adm::log_exception(adm *this, const std::exception *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = (*(uint64_t (**)(adm *))(*(void *)this + 16))(this);
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "**THROWING EXCEPTION** %s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_248970748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "format");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_2489707B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  v55[0] = 7;
  uint64_t v56 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  int v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  int v6 = *v5;
  char *v5 = 7;
  v55[0] = v6;
  uint64_t v7 = (uint64_t *)*((void *)v5 + 1);
  *((void *)v5 + boost::detail::shared_count::~shared_count(this + 1) = v4;
  uint64_t v56 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v6);
  uint64_t v8 = (uint64_t *)*(unsigned int *)(a2 + 8);
  v53[0] = 6;
  uint64_t v54 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "format_id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  int v10 = *v9;
  char *v9 = 6;
  v53[0] = v10;
  char v11 = (uint64_t *)*((void *)v9 + 1);
  *((void *)v9 + boost::detail::shared_count::~shared_count(this + 1) = v8;
  uint64_t v54 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v10);
  uint64_t v12 = (uint64_t *)*(unsigned int *)(a2 + 12);
  v51[0] = 6;
  uint64_t v52 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "format_flags");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  int v14 = *v13;
  *uint64_t v13 = 6;
  v51[0] = v14;
  long long v15 = (uint64_t *)*((void *)v13 + 1);
  *((void *)v13 + boost::detail::shared_count::~shared_count(this + 1) = v12;
  uint64_t v52 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v14);
  long long v16 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v49[0] = 6;
  int v50 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  int v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bytes_per_packet");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  int v18 = *v17;
  *int v17 = 6;
  v49[0] = v18;
  unsigned int v19 = (uint64_t *)*((void *)v17 + 1);
  *((void *)v17 + boost::detail::shared_count::~shared_count(this + 1) = v16;
  int v50 = v19;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v18);
  uint64_t v20 = (uint64_t *)*(unsigned int *)(a2 + 20);
  v47[0] = 6;
  uint64_t v48 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "frames_per_packet");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  int v22 = *v21;
  *uint64_t v21 = 6;
  v47[0] = v22;
  uint64_t v23 = (uint64_t *)*((void *)v21 + 1);
  *((void *)v21 + boost::detail::shared_count::~shared_count(this + 1) = v20;
  uint64_t v48 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v22);
  BOOL v24 = (uint64_t *)*(unsigned int *)(a2 + 24);
  v45[0] = 6;
  uint64_t v46 = v24;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bytes_per_frame");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  int v26 = *v25;
  char *v25 = 6;
  v45[0] = v26;
  uint64_t v27 = (uint64_t *)*((void *)v25 + 1);
  *((void *)v25 + boost::detail::shared_count::~shared_count(this + 1) = v24;
  uint64_t v46 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v26);
  size_t v28 = (uint64_t *)*(unsigned int *)(a2 + 28);
  v43[0] = 6;
  uint64_t v44 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "channels_per_frame");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  int v30 = *v29;
  char *v29 = 6;
  v43[0] = v30;
  uint64_t v31 = (uint64_t *)*((void *)v29 + 1);
  *((void *)v29 + boost::detail::shared_count::~shared_count(this + 1) = v28;
  uint64_t v44 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v30);
  uint64_t v32 = (uint64_t *)*(unsigned int *)(a2 + 32);
  v41[0] = 6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = v32;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  unsigned __int8 v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bits_per_channel");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  int v34 = *v33;
  *unsigned __int8 v33 = 6;
  v41[0] = v34;
  uint64_t v35 = (uint64_t *)*((void *)v33 + 1);
  *((void *)v33 + boost::detail::shared_count::~shared_count(this + 1) = v32;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = v35;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v34);
  uint32_t v36 = (uint64_t *)*(unsigned int *)(a2 + 36);
  v39[0] = 6;
  long long v40 = v36;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  uint64_t v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "reserved");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  LODWORD(v33) = *v37;
  *uint64_t v37 = 6;
  v39[0] = (char)v33;
  long long v38 = (uint64_t *)*((void *)v37 + 1);
  *((void *)v37 + boost::detail::shared_count::~shared_count(this + 1) = v36;
  long long v40 = v38;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, (int)v33);
}

void sub_248970C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10)
{
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = *a1 == 1 && a3 == 2;
  if (v5 && (int v6 = *(unsigned char **)(a2 + 16), *v6 == 3))
  {
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)v33, (uint64_t)v6, *(unsigned char *)(a2 + 24));
    if (v33[0] != 3 || (uint64_t v7 = v34) == 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      if (v33[0] > 9uLL) {
        uint64_t v27 = "number";
      }
      else {
        uint64_t v27 = off_265242F20[v33[0]];
      }
      std::string::basic_string[abi:ne180100]<0>(&v35, v27);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, "incompatible ReferenceType for get_ref, actual type is ", &v35);
      nlohmann::detail::type_error::create((uint64_t)exception, 303, (uint64_t)&v36);
    }
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)v28, *(void *)(a2 + 48), *(unsigned char *)(a2 + 56));
    long long v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    *((void *)v7 + boost::detail::shared_count::~shared_count(this + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = 0;
    int v9 = v28[0];
    v31[0] = v28[0];
    uint64_t v32 = v29;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
    v28[0] = 0;
    uint64_t v29 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    if (*a1)
    {
      if (*a1 != 1)
      {
        uint64_t v23 = __cxa_allocate_exception(0x20uLL);
        unint64_t v24 = *a1;
        if (v24 > 9) {
          uint64_t v25 = "number";
        }
        else {
          uint64_t v25 = off_265242F20[v24];
        }
        std::string::basic_string[abi:ne180100]<0>(&v35, v25);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, "cannot use push_back() with ", &v35);
        nlohmann::detail::type_error::create((uint64_t)v23, 308, (uint64_t)&v36);
      }
    }
    else
    {
      *a1 = 1;
      int v10 = operator new(0x18uLL);
      v10[2] = 0;
      v10[1] = 0;
      *int v10 = v10 + 1;
      *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    }
    int v17 = (uint64_t **)*((void *)a1 + 1);
    int v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v17, &v35, &__p);
    if (!*v18)
    {
      unsigned int v19 = v18;
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)&v36, (uint64_t)v17, (uint64_t)&__p);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v17, (uint64_t)v35.__r_.__value_.__l.__data_, v19, (uint64_t *)v36.__r_.__value_.__l.__data_);
      v36.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v36);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    int v16 = v33[0];
    p_std::string::size_type size = (uint64_t **)&v34;
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35, a2, a3);
    if (*a1)
    {
      if (*a1 != 2)
      {
        uint64_t v20 = __cxa_allocate_exception(0x20uLL);
        unint64_t v21 = *a1;
        if (v21 > 9) {
          int v22 = "number";
        }
        else {
          int v22 = off_265242F20[v21];
        }
        std::string::basic_string[abi:ne180100]<0>(&v36, v22);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "cannot use push_back() with ", &v36);
        nlohmann::detail::type_error::create((uint64_t)v20, 308, (uint64_t)&__p);
      }
    }
    else
    {
      *a1 = 2;
      char v11 = operator new(0x18uLL);
      *char v11 = 0;
      v11[1] = 0;
      void v11[2] = 0;
      *((void *)a1 + boost::detail::shared_count::~shared_count(this + 1) = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    }
    uint64_t v12 = (uint64_t *)*((void *)a1 + 1);
    unint64_t v13 = v12[1];
    if (v13 >= v12[2])
    {
      uint64_t v14 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v12, (uint64_t)&v35);
    }
    else
    {
      *(unsigned char *)unint64_t v13 = v35.__r_.__value_.__s.__data_[0];
      *(void *)(v13 + 8) = v35.__r_.__value_.__l.__size_;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
      v35.__r_.__value_.__s.__data_[0] = 0;
      v35.__r_.__value_.__l.__size_ = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
      uint64_t v14 = v13 + 16;
    }
    v12[1] = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
    p_std::string::size_type size = (uint64_t **)&v35.__r_.__value_.__l.__size_;
    int v16 = v35.__r_.__value_.__s.__data_[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(p_size, v16);
}

void sub_2489710CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_24897127C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_2489712F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "Reference");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_248971364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_2489713DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_24897149C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_248971514(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_24897158C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void adm::vp::convert(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = *(_DWORD *)a2 != 0;
  a1[1] = (unint64_t)(v4 - v5) >> 6;
  bzero(a1 + 2, 0x388uLL);
  a1[229] = *(_DWORD *)(a2 + 56);
  int v6 = *(const void **)(a2 + 32);
  BOOL v7 = *(void *)(a2 + 40) == (void)v6;
  unint64_t v8 = (uint64_t)(*(void *)(a2 + 40) - (void)v6) >> 2;
  a1[228] = v8;
  if (!v7)
  {
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    memcpy(a1 + 212, v6, 4 * v8);
  }
  if (v5 != v4)
  {
    uint64_t v9 = 0;
    int v10 = a1 + 10;
    char v11 = a1 + 5;
    uint64_t v12 = a1 + 62;
    unint64_t v13 = a1 + 61;
    do
    {
      if (*(unsigned char *)(v5 + 60)) {
        int v14 = *(_DWORD *)(v5 + 56);
      }
      else {
        int v14 = 0;
      }
      int v16 = *(int **)(v5 + 8);
      long long v15 = *(int **)(v5 + 16);
      uint64_t v17 = *(void *)(v5 + 32);
      uint64_t v18 = *(void *)(v5 + 40);
      unsigned int v19 = &a1[70 * v9];
      v19[2] = 1;
      v19 += 2;
      *(_OWORD *)(v19 + 3) = 0uLL;
      *(_OWORD *)(v19 + 7) = 0uLL;
      *(_OWORD *)(v19 + 1boost::detail::shared_count::~shared_count(this + 1) = 0uLL;
      *(_OWORD *)(v19 + 1std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0uLL;
      *(_OWORD *)(v19 + 19) = 0uLL;
      *(_OWORD *)(v19 + 23) = 0uLL;
      *(_OWORD *)(v19 + 27) = 0uLL;
      *(_OWORD *)(v19 + 3boost::detail::shared_count::~shared_count(this + 1) = 0uLL;
      *(_OWORD *)(v19 + 3std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0uLL;
      *(_OWORD *)(v19 + 39) = 0uLL;
      *(_OWORD *)(v19 + 43) = 0uLL;
      *(_OWORD *)(v19 + 47) = 0uLL;
      *(_OWORD *)(v19 + 5boost::detail::shared_count::~shared_count(this + 1) = 0uLL;
      *(_OWORD *)(v19 + 54) = 0uLL;
      v19[58] = -1431655765 * ((unint64_t)(v18 - v17) >> 4);
      *(_OWORD *)(v19 + 59) = 0uLL;
      *(_OWORD *)(v19 + 63) = 0uLL;
      *(_OWORD *)(v19 + 66) = 0uLL;
      uint64_t v20 = v11;
      unint64_t v21 = v10;
      v19[1] = v14;
      for (v19[2] = -1431655765 * ((unint64_t)((char *)v15 - (char *)v16) >> 4); v16 != v15; v16 += 12)
      {
        int v22 = *v16;
        if ((*v16 - 1) >= 4) {
          int v22 = 0;
        }
        *v20++ = v22;
        *((void *)v21 + 4) = *((void *)v16 + 5);
        long long v23 = *(_OWORD *)(v16 + 6);
        *(_OWORD *)unint64_t v21 = *(_OWORD *)(v16 + 2);
        *((_OWORD *)v21 + boost::detail::shared_count::~shared_count(this + 1) = v23;
        v21 += 10;
      }
      unint64_t v24 = v13;
      uint64_t v25 = v12;
      while (v17 != v18)
      {
        *v24++ = 5;
        long long v26 = *(_OWORD *)(v17 + 24);
        *(_OWORD *)uint64_t v25 = *(_OWORD *)(v17 + 8);
        *((_OWORD *)v25 + boost::detail::shared_count::~shared_count(this + 1) = v26;
        *((void *)v25 + 4) = *(void *)(v17 + 40);
        v17 += 48;
        v25 += 10;
      }
      ++v9;
      v5 += 64;
      v10 += 70;
      v11 += 70;
      v12 += 70;
      v13 += 70;
    }
    while (v5 != v4);
  }
}

void adm::dsp::GraphMacroGenerator::generateBusSemanticFormatMacros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::to_string(&v15, *(double *)a3);
  std::operator+<char>();
  int v16 = __p;
  BOOL v7 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (long long **)&v16);
  unint64_t v8 = (void **)(v7 + 40);
  if (v7[63] < 0) {
    operator delete(*v8);
  }
  *(std::string *)unint64_t v8 = v15;
  *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&v15, *(_DWORD *)(a3 + 28));
  std::operator+<char>();
  int v16 = __p;
  uint64_t v9 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (long long **)&v16);
  int v10 = (void **)(v9 + 40);
  if (v9[63] < 0) {
    operator delete(*v10);
  }
  *(std::string *)int v10 = v15;
  *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    std::to_string(&v15, a4);
    std::operator+<char>();
    int v16 = __p;
    char v11 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (long long **)&v16);
    uint64_t v12 = (void **)(v11 + 40);
    if (v11[63] < 0) {
      operator delete(*v12);
    }
    *(std::string *)uint64_t v12 = v15;
    *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
    }
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x40uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + boost::detail::shared_count::~shared_count(this + 1) = v8;
  int v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + boost::detail::shared_count::~shared_count(this + 1) = v17;
  *((void *)v16 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)int v16 = 0;
  *((void *)i + 6) = 0;
  *((void *)i + 7) = 0;
  *((void *)i + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *std::string v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_248971BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void adm::dsp::GraphMacroGenerator::operator()(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    int v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 2));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v5 + 16)) {
                goto LABEL_47;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      std::string v15 = (char *)operator new(0x40uLL);
      int v16 = v15;
      v29[0] = v15;
      v29[1] = a1 + 16;
      char v30 = 0;
      *(void *)std::string v15 = 0;
      *((void *)v15 + boost::detail::shared_count::~shared_count(this + 1) = v8;
      if (*((char *)v5 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), (const std::string::value_type *)v5[2], v5[3]);
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        *((void *)v15 + 4) = v5[4];
        *((_OWORD *)v15 + boost::detail::shared_count::~shared_count(this + 1) = v17;
      }
      float v18 = (std::string *)(v16 + 5);
      if (*((char *)v5 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v5[5], v5[6]);
      }
      else
      {
        long long v19 = *(_OWORD *)(v5 + 5);
        v16[7] = v5[7];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      char v30 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (!v9 || (float)(v21 * (float)v9) < v20)
      {
        BOOL v22 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v22 = 1;
        }
        unint64_t v23 = v22 | (2 * v9);
        unint64_t v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24) {
          size_t v25 = v24;
        }
        else {
          size_t v25 = v23;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v25);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v26 = *(void *)a1;
      uint64_t v27 = *(void **)(*(void *)a1 + 8 * v2);
      if (v27)
      {
        *int v16 = *v27;
      }
      else
      {
        *int v16 = *v6;
        void *v6 = v16;
        *(void *)(v26 + 8 * v2) = v6;
        if (!*v16) {
          goto LABEL_46;
        }
        unint64_t v28 = *(void *)(*v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v28 >= v9) {
            v28 %= v9;
          }
        }
        else
        {
          v28 &= v9 - 1;
        }
        uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
      }
      void *v27 = v16;
LABEL_46:
      v29[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_47:
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
}

void sub_248971ECC(void *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  __clang_call_terminate(a1);
}

void adm::LoadSystemConfiguration(adm *this)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  memset(&v79, 0, sizeof(v79));
  std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(&v80, (std::string *)"/Library/Audio/Tunings/");
  if (MGIsQuestionValid() && (int v1 = MGGetSInt32Answer()) != 0)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v1;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "Found device acousticID = %d", buf, 8u);
    }
    unsigned int v3 = v1 & 0xFFFFFF00;
    int v4 = v1;
    uint64_t v5 = 0x100000000;
  }
  else
  {
    int v6 = get_adm_log_object();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_248947000, v6, OS_LOG_TYPE_DEFAULT, "An acousticID was not found on this device", buf, 2u);
    }
    unsigned int v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v81 = v5 | v4 | v3;
  v82.__r_.__value_.__s.__data_[0] = 0;
  char v83 = 0;
  unint64_t v7 = get_adm_log_object();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_248947000, v7, OS_LOG_TYPE_DEFAULT, "A macBoardID was not found on this device", buf, 2u);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v85 = 0;
  if (!MGIsQuestionValid()) {
    goto LABEL_36;
  }
  CFStringRef v8 = (const __CFString *)MGGetStringAnswer();
  if (!v8) {
    goto LABEL_36;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v8);
  CFRelease(v8);
  if (CFStringHasSuffix(MutableCopy, @"AP"))
  {
    CFStringRef v10 = @"AP";
  }
  else if (CFStringHasSuffix(MutableCopy, @"DEV"))
  {
    CFStringRef v10 = @"DEV";
  }
  else if (CFStringHasSuffix(MutableCopy, @"ap"))
  {
    CFStringRef v10 = @"ap";
  }
  else
  {
    if (!CFStringHasSuffix(MutableCopy, @"dev")) {
      goto LABEL_22;
    }
    CFStringRef v10 = @"dev";
  }
  CFStringTrim(MutableCopy, v10);
LABEL_22:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, MutableCopy);
  if (!cf.__r_.__value_.__r.__words[0])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)cf.__r_.__value_.__l.__data_);
  if (v85)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)buf;
    buf[23] = 0;
    buf[0] = 0;
  }
  else
  {
    std::string __p = *(std::string *)buf;
    memset(buf, 0, 24);
    char v85 = 1;
  }
  if (cf.__r_.__value_.__r.__words[0]) {
    CFRelease(cf.__r_.__value_.__l.__data_);
  }
  unint64_t v11 = get_adm_log_object();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = p_p;
    _os_log_impl(&dword_248947000, v11, OS_LOG_TYPE_DEFAULT, "Found HW Model Name = %s", buf, 0xCu);
  }
  if (!v85)
  {
LABEL_36:
    unint64_t v13 = get_adm_log_object();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_248947000, v13, OS_LOG_TYPE_DEFAULT, "A HW Model Name was not found on this device", buf, 2u);
    }
  }
  *(_DWORD *)buf = 0;
  memset(&buf[8], 0, 24);
  std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(&v98, (std::string *)"/Library/Audio/Tunings/");
  LOBYTE(__val[0]) = 0;
  LOBYTE(__val[1]) = 0;
  v100.__r_.__value_.__s.__data_[0] = 0;
  char v101 = 0;
  v102.__r_.__value_.__s.__data_[0] = 0;
  char v103 = 0;
  LOBYTE(v104) = 0;
  char v105 = 0;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  int v111 = 1065353216;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  if (v83)
  {
    std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v82.__r_.__value_.__l.__size_;
    }
    if (size == 20)
    {
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v15 = &v82;
      }
      else {
        std::string v15 = (std::string *)v82.__r_.__value_.__r.__words[0];
      }
      if (v15->__r_.__value_.__r.__words[0] == 0x353941412D63614DLL
        && v15->__r_.__value_.__l.__size_ == 0x3732424144443142
        && LODWORD(v15->__r_.__value_.__r.__words[2]) == 892944952)
      {
        int v27 = 0;
        char v28 = 1;
        LOBYTE(Value) = 15;
      }
      else
      {
        std::string::size_type v18 = v15->__r_.__value_.__r.__words[0];
        std::string::size_type v19 = v15->__r_.__value_.__l.__size_;
        int v20 = v15->__r_.__value_.__r.__words[2];
        if (v18 != 0x303033362D63614DLL || v19 != 0x3341374538393631 || v20 != 875640884) {
          goto LABEL_59;
        }
        int v27 = 0;
        char v28 = 1;
        LOBYTE(Value) = 16;
      }
LABEL_98:
      char v105 = v28;
      unsigned int v104 = v27 & 0xFFFFFF00 | Value;
      goto LABEL_99;
    }
LABEL_59:
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (!v112.__r_.__value_.__s.__data_[8]) {
      goto LABEL_87;
    }
    CFDictionaryRef v23 = (const __CFDictionary *)v112.__r_.__value_.__r.__words[0];
    if (!v112.__r_.__value_.__r.__words[0]) {
      goto LABEL_266;
    }
    unint64_t v24 = (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v82
        : (std::string *)v82.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v25 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v25 = v82.__r_.__value_.__l.__size_;
      }
      CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      if (!v26)
      {
LABEL_266:
        int v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v76, "Could not construct");
        __cxa_throw(v76, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
    }
    else
    {
      CFStringRef v26 = 0;
      cf.__r_.__value_.__r.__words[0] = 0;
    }
    int v30 = CFDictionaryContainsKey(v23, v26);
    if (v26) {
      CFRelease(v26);
    }
    if (v30)
    {
      CFDictionaryRef v31 = (const __CFDictionary *)v112.__r_.__value_.__r.__words[0];
      if (!v112.__r_.__value_.__r.__words[0])
      {
        uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
        __cxa_throw(v77, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v82;
      }
      else {
        uint64_t v32 = (std::string *)v82.__r_.__value_.__r.__words[0];
      }
      if (v32)
      {
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v33 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v33 = v82.__r_.__value_.__l.__size_;
        }
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
        if (!v34)
        {
          std::string v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      else
      {
        CFStringRef v34 = 0;
      }
      uint64_t Value = (uint64_t)CFDictionaryGetValue(v31, v34);
      if (v34) {
        CFRelease(v34);
      }
      if (Value) {
        uint64_t Value = applesauce::CF::convert_as<unsigned int,0>((const __CFNumber *)Value);
      }
      int v27 = Value & 0xFFFFFF00;
      char v28 = BYTE4(Value) & 1;
    }
    else
    {
LABEL_87:
      std::string v36 = get_adm_log_object();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(cf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"/System/Library/Components/AudioDSP.component/Contents/Resources/Tunings/vp_platform_info.plist";
        _os_log_error_impl(&dword_248947000, v36, OS_LOG_TYPE_ERROR, "Device boardID not presented in vp_platform_info plist at path: %s", (uint8_t *)&cf, 0xCu);
      }
      char v28 = 0;
      LOBYTE(Value) = 0;
      int v27 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v112);
    goto LABEL_98;
  }
LABEL_99:
  uint64_t v37 = get_adm_log_object();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = BYTE4(v81);
    int v39 = v81;
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&cf, (uint64_t)&v82, (char *)&unk_2489B2B19);
    int v40 = v38 ? v39 : 0;
    int v41 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &cf
        : (std::string *)cf.__r_.__value_.__r.__words[0];
    LODWORD(v112.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(v112.__r_.__value_.__r.__words[0]) = v40;
    LOWORD(v112.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v41;
    _os_log_impl(&dword_248947000, v37, OS_LOG_TYPE_DEFAULT, "Loading configuration file for acousticID=%d, macBoardID='%s'", (uint8_t *)&v112, 0x12u);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
  }
  *(_DWORD *)buf = 0;
  std::string::operator=((std::string *)&buf[8], &v79);
  std::string::operator=(&v98, &v80);
  __val[0] = v81;
  LOBYTE(__val[1]) = BYTE4(v81);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v100, &v82);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v102, &__p);
  if ((*(void *)__val & 0xFF00000000) != 0)
  {
    std::to_string(&v112, __val[0]);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = std::string::insert(&v112, 0, "AID", 3uLL);
    std::string::size_type v43 = v42->__r_.__value_.__r.__words[0];
    v94.__r_.__value_.__r.__words[0] = v42->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
    char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7);
    cf.__r_.__value_.__r.__words[0] = v43;
    cf.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    *((unsigned char *)&cf.__r_.__value_.__s + 23) = v44;
    char v96 = 1;
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v103) {
      uint64_t v45 = &v102;
    }
    else {
      uint64_t v45 = &v100;
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&cf, (long long *)v45);
  }
  if (v96) {
    std::string::operator=((std::string *)&v106, &cf);
  }
  if ((buf[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)&buf[8], *(std::string::size_type *)&buf[16]);
  }
  else {
    std::string v112 = *(std::string *)&buf[8];
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v94, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else {
    std::string v94 = v98;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v46 = &v94;
  }
  else {
    uint64_t v46 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v47 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v47 = v94.__r_.__value_.__l.__size_;
  }
  uint64_t v48 = std::string::append(&v112, (const std::string::value_type *)v46, v47);
  std::string::size_type v49 = v48->__r_.__value_.__r.__words[0];
  v93.__pn_.__r_.__value_.__r.__words[0] = v48->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v93.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7);
  char v50 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v108) < 0) {
    operator delete(*((void **)&v107 + 1));
  }
  *((void *)&v107 + boost::detail::shared_count::~shared_count(this + 1) = v49;
  *(void *)&long long v108 = v93.__pn_.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v108 + 7) = *(std::string::size_type *)((char *)v93.__pn_.__r_.__value_.__r.__words + 7);
  HIBYTE(v108) = v50;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)((char *)&v107 + 8), &__ec);
  if (!v112.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), v112.__r_.__value_.__s.__data_[0] == 255)
    || !v112.__r_.__value_.__s.__data_[0])
  {
    uint64_t v51 = get_adm_log_object();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      if (v108 >= 0) {
        uint64_t v54 = (char *)&v107 + 8;
      }
      else {
        uint64_t v54 = (char *)*((void *)&v107 + 1);
      }
      LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
      _os_log_error_impl(&dword_248947000, v51, OS_LOG_TYPE_ERROR, "Root tuning directory not found: %s", (uint8_t *)&v112, 0xCu);
    }
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 224) = 0;
    goto LABEL_140;
  }
  uint64_t v52 = get_adm_log_object();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v112.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_248947000, v52, OS_LOG_TYPE_DEFAULT, "Loading generic configuration file", (uint8_t *)&v112, 2u);
  }
  memset(&v112, 0, sizeof(v112));
  std::string::append[abi:ne180100]<char const*,0>(&v112, (std::string *)"Generic", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&v94, (uint64_t)&v107 + 8, (std::__fs::filesystem::path *)&v112);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v94, &__ec);
  if (v112.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (v112.__r_.__value_.__s.__data_[0] != 255)
    {
      if (v112.__r_.__value_.__s.__data_[0])
      {
        std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v92);
        std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v94, (std::__fs::filesystem::path *)&v92);
        std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v91);
        std::__fs::filesystem::operator/[abi:ne180100](&v93.__pn_, (uint64_t)&v112, (std::__fs::filesystem::path *)&v91);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::__status(&v93, &__ec);
        if (!v112.__r_.__value_.__s.__data_[0]
          || (__ec.__val_ = 0,
              __ec.__cat_ = std::system_category(),
              v112.__r_.__value_.__s.__data_[0] == 255)
          || !v112.__r_.__value_.__s.__data_[0])
        {
          uint64_t v55 = get_adm_log_object();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            long long v58 = &v93;
            if ((v93.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v58 = (std::__fs::filesystem::path *)v93.__pn_.__r_.__value_.__r.__words[0];
            }
            LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
            _os_log_error_impl(&dword_248947000, v55, OS_LOG_TYPE_ERROR, "Generic config file not found: %s", (uint8_t *)&v112, 0xCu);
          }
          *(unsigned char *)this = 0;
          *((unsigned char *)this + 224) = 0;
          goto LABEL_243;
        }
        if (!v89)
        {
          unint64_t v57 = get_adm_log_object();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            unsigned int v71 = &v93;
            if ((v93.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unsigned int v71 = (std::__fs::filesystem::path *)v93.__pn_.__r_.__value_.__r.__words[0];
            }
            LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
            _os_log_error_impl(&dword_248947000, v57, OS_LOG_TYPE_ERROR, "Failed to load generic config file: %s", (uint8_t *)&v112, 0xCu);
          }
          *(unsigned char *)this = 0;
          *((unsigned char *)this + 224) = 0;
          goto LABEL_242;
        }
        std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v92);
        std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v94, (std::__fs::filesystem::path *)&v92);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (v96)
        {
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v92, (std::string *)&v106);
          std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v107 + 8, (std::__fs::filesystem::path *)&v92);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v112, &__ec);
          if (v92.__r_.__value_.__s.__data_[0]
            && (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), v92.__r_.__value_.__s.__data_[0])
            && v92.__r_.__value_.__s.__data_[0] != 255)
          {
            std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v87.__pn_);
            std::__fs::filesystem::operator/[abi:ne180100](&v91, (uint64_t)&v112, &v87);
            std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v86.__pn_);
            std::__fs::filesystem::operator/[abi:ne180100](&v92, (uint64_t)&v91, &v86);
            if (SHIBYTE(v86.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87.__pn_.__r_.__value_.__l.__data_);
            }
            if (std::__fs::filesystem::exists[abi:ne180100]((const std::__fs::filesystem::path *)&v92, &__ec))
            {
              if (!v86.__pn_.__r_.__value_.__s.__data_[8])
              {
                uint64_t v73 = get_adm_log_object();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                {
                  unint64_t v74 = &v92;
                  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    unint64_t v74 = (std::string *)v92.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v91.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
                  _os_log_error_impl(&dword_248947000, v73, OS_LOG_TYPE_ERROR, "Failed to load device specific config file: %s", (uint8_t *)&v91, 0xCu);
                }
                *(unsigned char *)this = 0;
                *((unsigned char *)this + 224) = 0;
                std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
                if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v92.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v112.__r_.__value_.__l.__data_);
                }
                goto LABEL_242;
              }
              std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v87.__pn_);
              std::__fs::filesystem::operator/[abi:ne180100](&v91, (uint64_t)&v112, &v87);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v87.__pn_.__r_.__value_.__l.__data_);
              }
              std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
            }
            else
            {
              int v69 = get_adm_log_object();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                long long v70 = &v92;
                if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  long long v70 = (std::string *)v92.__r_.__value_.__r.__words[0];
                }
                LODWORD(v91.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
                _os_log_impl(&dword_248947000, v69, OS_LOG_TYPE_DEFAULT, "Device specific config file not found: %s", (uint8_t *)&v91, 0xCu);
              }
            }
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v92.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v59 = get_adm_log_object();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
            {
              char v72 = &v112;
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                char v72 = (std::string *)v112.__r_.__value_.__r.__words[0];
              }
              LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
              _os_log_error_impl(&dword_248947000, v59, OS_LOG_TYPE_ERROR, "Device tuning directory not found: %s", (uint8_t *)&v92, 0xCu);
            }
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v60 = get_adm_log_object();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v112.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_248947000, v60, OS_LOG_TYPE_DEFAULT, "SystemConfiguration:", (uint8_t *)&v112, 2u);
        }
        long long v61 = get_adm_log_object();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          if (LOBYTE(__val[1]))
          {
            std::to_string(&v112, __val[0]);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v62 = &v112;
            }
            else {
              uint64_t v62 = (std::string *)v112.__r_.__value_.__r.__words[0];
            }
            LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
            _os_log_impl(&dword_248947000, v61, OS_LOG_TYPE_DEFAULT, "- AcousticID: %s", (uint8_t *)&v92, 0xCu);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v112.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)&unk_2489B2B19;
            _os_log_impl(&dword_248947000, v61, OS_LOG_TYPE_DEFAULT, "- AcousticID: %s", (uint8_t *)&v92, 0xCu);
          }
        }
        int v63 = get_adm_log_object();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v112, (uint64_t)&v100, (char *)&unk_2489B2B19);
          unint64_t v64 = (v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v112
              : (std::string *)v112.__r_.__value_.__r.__words[0];
          LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
          _os_log_impl(&dword_248947000, v63, OS_LOG_TYPE_DEFAULT, "- MacBoardID: %s", (uint8_t *)&v92, 0xCu);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
        }
        int v65 = get_adm_log_object();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          if ((SBYTE7(v107) & 0x80u) == 0) {
            int v66 = &v106;
          }
          else {
            int v66 = (long long *)v106;
          }
          LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
          _os_log_impl(&dword_248947000, v65, OS_LOG_TYPE_DEFAULT, "- HWIdentifier: %s", (uint8_t *)&v112, 0xCu);
        }
        unsigned int v67 = get_adm_log_object();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          if (v108 >= 0) {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = (char *)&v107 + 8;
          }
          else {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = (char *)*((void *)&v107 + 1);
          }
          LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
          _os_log_impl(&dword_248947000, v67, OS_LOG_TYPE_DEFAULT, "- TuningRootDirectory: %s", (uint8_t *)&v112, 0xCu);
        }
        std::__optional_destruct_base<adm::SystemConfiguration,false>::__optional_destruct_base[abi:ne180100]<adm::SystemConfiguration>((uint64_t)this, (uint64_t)buf);
LABEL_242:
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v88);
LABEL_243:
        if (SHIBYTE(v93.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__pn_.__r_.__value_.__l.__data_);
        }
        goto LABEL_163;
      }
    }
  }
  long long v53 = get_adm_log_object();
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    uint64_t v56 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v56 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
    _os_log_error_impl(&dword_248947000, v53, OS_LOG_TYPE_ERROR, "Generic tuning directory not found: %s", (uint8_t *)&v112, 0xCu);
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 224) = 0;
LABEL_163:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
LABEL_140:
  if (v96 && SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(cf.__r_.__value_.__l.__data_);
  }
  adm::SystemConfiguration::~SystemConfiguration((void **)buf);
  if (v85 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v83 && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
}

void sub_2489732AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return this;
}

void sub_248973498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a2);
    maxBufLeuint64_t n = 0;
    v12.locatiouint64_t n = 0;
    v12.length = Length;
    CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
    if (*(char *)(a1 + 23) >= 0) {
      CFStringRef v8 = (UInt8 *)a1;
    }
    else {
      CFStringRef v8 = *(UInt8 **)a1;
    }
    v13.locatiouint64_t n = 0;
    v13.length = Length;
    return (void *)CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
  }
}

void sub_248973608(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, std::string **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  CFTypeID v3 = *a2;
  int v4 = (std::string *)((char *)v3 - 1);
  do
  {
    int v5 = v4->__r_.__value_.__s.__data_[1];
    int v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_248973678(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void adm::anonymous namespace'::LoadPlist(adm::_anonymous_namespace_ *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    puint64_t n = a2->__pn_;
  }
  applesauce::CF::make_DataRef(&v4, (uint64_t)&pn);
  CFDataRef v3 = v4;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&v5, v4);
  *(void *)this = v5;
  uint64_t v5 = 0;
  *((unsigned char *)this + 8) = 1;
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
}

void sub_248973770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  unint64_t v14 = __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  BOOL v16 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v16)
    {
      if (*((char *)v12 + 23) < 0) {
        CFRange v12 = (uint64_t *)*v12;
      }
      uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = v12;
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v17;
      std::string::size_type v18 = "failed to load plist %s: %s";
      std::string::size_type v19 = adm_log_object;
      uint32_t v20 = 22;
      goto LABEL_14;
    }
  }
  else if (v16)
  {
    if (*((char *)v12 + 23) >= 0) {
      float v21 = v12;
    }
    else {
      float v21 = (uint64_t *)*v12;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v21;
    std::string::size_type v18 = "failed to load plist %s";
    std::string::size_type v19 = adm_log_object;
    uint32_t v20 = 12;
LABEL_14:
    _os_log_error_impl(&dword_248947000, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, v20);
  }
  __cxa_end_catch();
  *unint64_t v11 = 0;
  v11[8] = 0;
  JUMPOUT(0x24897373CLL);
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

std::string *std::__fs::filesystem::operator/[abi:ne180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  if (std::__fs::filesystem::path::__root_directory(a3).__size_) {
    return std::string::operator=(this, &a3->__pn_);
  }
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
    std::string::push_back(this, 47);
  }
  int v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(this, (const std::string::value_type *)v7, size);
}

void sub_2489739AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, (std::string *)"ADM", (std::string *)"");
  return a1;
}

void sub_248973A04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, (std::string *)"config.plist", (std::string *)"");
  return a1;
}

void sub_248973A5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void adm::anonymous namespace'::AddDSPConfiguration(adm::_anonymous_namespace_ *this, CFDictionaryRef *a2, std::string *a3, std::__fs::filesystem::path *a4, const std::__fs::filesystem::path *a5)
{
  int v138 = (int)a5;
  uint64_t v176 = *MEMORY[0x263EF8340];
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator((uint64_t)&v167, *a2);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator((uint64_t)&v161, *a2);
  CFStringRef v8 = (char *)this + 184;
  uint64_t v162 = (v164 - (unsigned char *)v163) >> 3;
  long long v137 = (const applesauce::CF::DictionaryRef *)a3;
  while (1)
  {
    if (v167 && (unint64_t v9 = v168, v168 != v170 - v169))
    {
      uint64_t v10 = v161;
    }
    else
    {
      uint64_t v10 = v161;
      if (!v161 || v162 == (v164 - (unsigned char *)v163) >> 3) {
        break;
      }
      unint64_t v9 = v168;
    }
    if (v167 == v10 && v9 == v162) {
      break;
    }
    if ((v9 & 0x8000000000000000) != 0 || v9 >= v170 - v169)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
      __cxa_throw(exception, (struct type_info *)off_265242DF8, MEMORY[0x263F8C068]);
    }
    CFRange v12 = (const void *)v169[v9];
    if (v12)
    {
      CFRetain((CFTypeRef)v169[v9]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v154, v12);
      unint64_t v9 = v168;
    }
    else
    {
      v154.__r_.__value_.__r.__words[0] = 0;
    }
    CFRange v13 = (const void *)v171[v9];
    if (v13)
    {
      CFRetain((CFTypeRef)v171[v9]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v148, v13);
      CFDictionaryRef v135 = (const __CFDictionary *)v148;
    }
    else
    {
      CFDictionaryRef v135 = 0;
    }
    unint64_t v14 = (const void *)v154.__r_.__value_.__r.__words[0];
    if (!v154.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v132, "Could not construct");
      __cxa_throw(v132, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)v159, (const __CFString *)v154.__r_.__value_.__l.__data_);
    uint64_t v139 = v14;
    if (!v135)
    {
      BOOL v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Could not construct");
      __cxa_throw(v131, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::string v15 = applesauce::CF::details::at_key<char const* const&>(v135, (const UInt8 *)"DSPConfigurations");
    if (!v15) {
      goto LABEL_26;
    }
    BOOL v16 = v15;
    CFRetain(v15);
    CFTypeRef cf = v16;
    CFTypeID v17 = CFGetTypeID(v16);
    if (v17 != CFDictionaryGetTypeID())
    {
      CFRelease(cf);
LABEL_26:
      CFTypeRef cf = 0;
      v154.__r_.__value_.__s.__data_[0] = 0;
      v154.__r_.__value_.__s.__data_[8] = 0;
      goto LABEL_27;
    }
    v154.__r_.__value_.__s.__data_[8] = 1;
    v154.__r_.__value_.__r.__words[0] = 0;
LABEL_27:
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v154);
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)a3, a4);
    if (!cf)
    {
      uint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not construct");
      __cxa_throw(v130, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"FilePathBase", 12, 0x8000100u, 0);
    v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    if (!v18)
    {
      int v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v133, "Could not construct");
      __cxa_throw(v133, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    int v19 = CFDictionaryContainsKey((CFDictionaryRef)cf, v18);
    CFRelease(v18);
    if (v19)
    {
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v154, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
      }
      else {
        std::string v154 = *a3;
      }
      applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v148, (const __CFDictionary *)cf, (const UInt8 *)"FilePathBase");
      if (SHIBYTE(v150) >= 0) {
        uint32_t v20 = (const std::string::value_type *)&v148;
      }
      else {
        uint32_t v20 = (const std::string::value_type *)v148;
      }
      if (SHIBYTE(v150) >= 0) {
        std::string::size_type v21 = HIBYTE(v150);
      }
      else {
        std::string::size_type v21 = v149;
      }
      BOOL v22 = std::string::append(&v154, v20, v21);
      std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v22->__r_.__value_.__l.__size_;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
      char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v23;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)__v.__first_;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__v.__first_ + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
      if (SHIBYTE(v150) < 0) {
        operator delete(v148);
      }
      a3 = (std::string *)v137;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
    }
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v154, (CFDictionaryRef)cf);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v148, (CFDictionaryRef)cf);
    uint64_t v149 = (v151 - v150) >> 3;
    while (1)
    {
      if (v154.__r_.__value_.__r.__words[0]
        && (std::string::size_type size = v154.__r_.__value_.__l.__size_,
            v154.__r_.__value_.__l.__size_ != (int64_t)(v155 - v154.__r_.__value_.__r.__words[2]) >> 3))
      {
        std::string::pointer v26 = (std::string::pointer)v148;
      }
      else
      {
        std::string::pointer v26 = (std::string::pointer)v148;
        if (!v148 || v149 == (v151 - v150) >> 3) {
          break;
        }
        std::string::size_type size = v154.__r_.__value_.__l.__size_;
      }
      if (v154.__r_.__value_.__l.__data_ == v26 && size == v149) {
        break;
      }
      if ((size & 0x8000000000000000) != 0 || size >= (int64_t)(v155 - v154.__r_.__value_.__r.__words[2]) >> 3)
      {
        int v121 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v121, "DictionaryRef_iterator iterator out of range.");
        v121->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
        __cxa_throw(v121, (struct type_info *)off_265242DF8, MEMORY[0x263F8C068]);
      }
      CFStringRef v141 = *(const __CFString **)(v154.__r_.__value_.__r.__words[2] + 8 * size);
      if (v141)
      {
        CFRetain(v141);
        std::string::size_type size = v154.__r_.__value_.__l.__size_;
      }
      char v28 = (const void *)*((void *)v156 + size);
      if (v28) {
        CFRetain(*((CFTypeRef *)v156 + size));
      }
      CFTypeRef v140 = v28;
      if (!v141)
      {
        unint64_t v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v122, "Could not construct");
        __cxa_throw(v122, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__s, v141);
      std::string::size_type v29 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      char v30 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v29 = __s.__r_.__value_.__l.__size_;
      }
      if (v29 != 12) {
        goto LABEL_72;
      }
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      std::string::size_type v32 = p_s->__r_.__value_.__r.__words[0];
      int v33 = p_s->__r_.__value_.__r.__words[1];
      if (v32 != 0x68746150656C6946 || v33 != 1702060354)
      {
LABEL_72:
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v146, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v146 = __s;
        }
        if (v28)
        {
          CFTypeID v35 = CFGetTypeID(v28);
          if (v35 != CFDictionaryGetTypeID())
          {
            long long v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v127, "Could not construct");
            __cxa_throw(v127, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          CFRetain(v140);
          std::string v36 = v140;
        }
        else
        {
          std::string v36 = 0;
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v145, v36);
        if (!v145)
        {
          uint64_t v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Could not construct");
          __cxa_throw(v123, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        CFStringRef v37 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v145, (const UInt8 *)"DSPGraphFileName");
        if (v37)
        {
          applesauce::CF::convert_as<std::string,0>((uint64_t)&__v, v37);
          if (LOBYTE(__v.__end_cap_.__value_))
          {
            if (v138)
            {
              v143.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
              int v38 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&v143);
              v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
              int v39 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v38 + 40), (unsigned __int8 *)&v146, (long long **)&v143);
              if (v39[135] < 0)
              {
                if (*((void *)v39 + 15)) {
                  goto LABEL_85;
                }
              }
              else if (v39[135])
              {
LABEL_85:
                adm_log_object = get_adm_log_object();
                if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
                {
                  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
                  int v41 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&v143);
                  v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
                  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v41 + 40), (unsigned __int8 *)&v146, (long long **)&v143);
                  std::string::size_type v43 = v42 + 112;
                  if (v42[135] < 0) {
                    std::string::size_type v43 = (void *)*v43;
                  }
                  if (!v145)
                  {
                    unint64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v129, "Could not construct");
                    __cxa_throw(v129, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                  }
                  applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v143, (const __CFDictionary *)v145, (const UInt8 *)"DSPGraphFileName");
                  char v44 = &v143;
                  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v44 = (std::string *)v143.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v44;
                  _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "DSPGraphFilePath %s is already in the SystemConfiguration and can't be added to. Ignore the new value %s", (uint8_t *)&buf, 0x16u);
                  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v143.__r_.__value_.__l.__data_);
                  }
                  a3 = (std::string *)v137;
                }
                goto LABEL_99;
              }
            }
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (std::string *)&__v);
            std::__fs::filesystem::operator/[abi:ne180100](&v143, (uint64_t)&__p, (std::__fs::filesystem::path *)&buf);
            v142.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
            uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&v142);
            v142.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
            uint64_t v46 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v45 + 40), (unsigned __int8 *)&v146, (long long **)&v142);
            std::string::size_type v47 = (void **)(v46 + 112);
            if (v46[135] < 0) {
              operator delete(*v47);
            }
            *(std::string *)std::string::size_type v47 = v143;
            *((unsigned char *)&v143.__r_.__value_.__s + 23) = 0;
            v143.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
LABEL_99:
            if (LOBYTE(__v.__end_cap_.__value_) && SHIBYTE(__v.__end_) < 0) {
              operator delete(__v.__first_);
            }
          }
        }
        if (!v145)
        {
          BOOL v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v125, "Could not construct");
          __cxa_throw(v125, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>((uint64_t)&v143, (const __CFDictionary *)v145, (const UInt8 *)"TuningStripFileNames");
        if (v144)
        {
          if ((v138 & 1) == 0)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v159;
            uint64_t v48 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&__v);
            __v.__first_ = &v146;
            std::string::size_type v49 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v48 + 40), (unsigned __int8 *)&v146, (long long **)&__v);
            std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v49 + 5);
          }
          std::string::size_type v51 = v143.__r_.__value_.__l.__size_;
          for (uint64_t i = (std::string *)v143.__r_.__value_.__r.__words[0]; i != (std::string *)v51; ++i)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v159;
            uint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&__v);
            __v.__first_ = &v146;
            long long v53 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v52 + 40), (unsigned __int8 *)&v146, (long long **)&__v);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v142.__pn_, i);
            std::__fs::filesystem::operator/[abi:ne180100](&buf, (uint64_t)&__p, &v142);
            unint64_t v54 = *((void *)v53 + 7);
            unint64_t v55 = *((void *)v53 + 6);
            if (v55 >= v54)
            {
              uint64_t v57 = *((void *)v53 + 5);
              unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v57) >> 3);
              unint64_t v59 = v58 + 1;
              if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v57) >> 3);
              if (2 * v60 > v59) {
                unint64_t v59 = 2 * v60;
              }
              if (v60 >= 0x555555555555555) {
                unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v61 = v59;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v53 + 56);
              if (v61) {
                unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v61);
              }
              else {
                uint64_t v62 = 0;
              }
              int v63 = (std::string *)(v61 + 24 * v58);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v61;
              __v.__begin_ = v63;
              __v.__end_cap_.__value_ = (std::string *)(v61 + 24 * v62);
              long long v64 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              v63->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
              memset(&buf, 0, sizeof(buf));
              __v.__end_ = v63 + 1;
              std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((std::vector<std::string> *)(v53 + 40), &__v);
              uint64_t v65 = *((void *)v53 + 6);
              std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
              int v66 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
              *((void *)v53 + 6) = v65;
              if (v66 < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(void *)(v55 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v55 = v56;
              memset(&buf, 0, sizeof(buf));
              *((void *)v53 + 6) = v55 + 24;
            }
            if (SHIBYTE(v142.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__pn_.__r_.__value_.__l.__data_);
            }
          }
          a3 = (std::string *)v137;
          if (v144)
          {
            __v.__first_ = &v143;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          }
        }
        if (!v145)
        {
          BOOL v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Could not construct");
          __cxa_throw(v124, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>((uint64_t)&v143, (const __CFDictionary *)v145, (const UInt8 *)"PropStripFileNames");
        if (v144)
        {
          if ((v138 & 1) == 0)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v159;
            unsigned int v67 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&__v);
            __v.__first_ = &v146;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v67 + 40), (unsigned __int8 *)&v146, (long long **)&__v);
            std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v68 + 8);
          }
          std::string::size_type v70 = v143.__r_.__value_.__l.__size_;
          for (uint64_t j = (std::string *)v143.__r_.__value_.__r.__words[0]; j != (std::string *)v70; ++j)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v159;
            unsigned int v71 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&__v);
            __v.__first_ = &v146;
            char v72 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v71 + 40), (unsigned __int8 *)&v146, (long long **)&__v);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v142.__pn_, j);
            std::__fs::filesystem::operator/[abi:ne180100](&buf, (uint64_t)&__p, &v142);
            unint64_t v73 = *((void *)v72 + 10);
            unint64_t v74 = *((void *)v72 + 9);
            if (v74 >= v73)
            {
              uint64_t v76 = *((void *)v72 + 8);
              unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - v76) >> 3);
              unint64_t v78 = v77 + 1;
              if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - v76) >> 3);
              if (2 * v79 > v78) {
                unint64_t v78 = 2 * v79;
              }
              if (v79 >= 0x555555555555555) {
                unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v80 = v78;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v72 + 80);
              if (v80) {
                unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v80);
              }
              else {
                uint64_t v81 = 0;
              }
              std::string v82 = (std::string *)(v80 + 24 * v77);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v80;
              __v.__begin_ = v82;
              __v.__end_cap_.__value_ = (std::string *)(v80 + 24 * v81);
              long long v83 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              v82->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
              memset(&buf, 0, sizeof(buf));
              __v.__end_ = v82 + 1;
              std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((std::vector<std::string> *)(v72 + 64), &__v);
              uint64_t v84 = *((void *)v72 + 9);
              std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
              int v85 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
              *((void *)v72 + 9) = v84;
              if (v85 < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v75 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(void *)(v74 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v74 = v75;
              memset(&buf, 0, sizeof(buf));
              *((void *)v72 + 9) = v74 + 24;
            }
            if (SHIBYTE(v142.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__pn_.__r_.__value_.__l.__data_);
            }
          }
          a3 = (std::string *)v137;
          if (v144)
          {
            __v.__first_ = &v143;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          }
        }
        if (!v145)
        {
          long long v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v126, "Could not construct");
          __cxa_throw(v126, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        CFArrayRef v86 = (const __CFArray *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v145, (const UInt8 *)"AUPresetOverrides");
        if (v86)
        {
          applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>((int64x2_t *)&v143, v86);
          if (v144)
          {
            if ((v138 & 1) == 0)
            {
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
              std::__fs::filesystem::path v87 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&buf);
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
              CFDictionaryRef v88 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v87 + 40), (unsigned __int8 *)&v146, (long long **)&buf);
              uint64_t v89 = *((void *)v88 + 11);
              for (uint64_t k = *((void *)v88 + 12);
                    k != v89;
                    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(k))
              {
                k -= 48;
              }
              *((void *)v88 + 12) = v89;
            }
            std::string::size_type v91 = v143.__r_.__value_.__l.__size_;
            for (uint64_t m = (const __CFDictionary **)v143.__r_.__value_.__r.__words[0]; m != (const __CFDictionary **)v91; ++m)
            {
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
              std::__fs::filesystem::path v93 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v159, (long long **)&buf);
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
              std::string v94 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v93 + 40), (unsigned __int8 *)&v146, (long long **)&buf);
              if (!*m)
              {
                long long v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v119, "Could not construct");
                __cxa_throw(v119, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              long long v95 = v94;
              applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&__v, *m, (const UInt8 *)"BoxName");
              if (!*m)
              {
                long long v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v120, "Could not construct");
                __cxa_throw(v120, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v142, *m, (const UInt8 *)"FileName");
              std::string buf = v142.__pn_;
              memset(&v142, 0, sizeof(v142));
              std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__v.__end_cap_, (uint64_t)&__p, (std::__fs::filesystem::path *)&buf);
              unint64_t v96 = *((void *)v95 + 12);
              unint64_t v97 = *((void *)v95 + 13);
              if (v96 >= v97)
              {
                uint64_t v100 = *((void *)v95 + 11);
                unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v100) >> 4);
                unint64_t v102 = v101 + 1;
                if (v101 + 1 > 0x555555555555555) {
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v100) >> 4);
                if (2 * v103 > v102) {
                  unint64_t v102 = 2 * v103;
                }
                if (v103 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v104 = 0x555555555555555;
                }
                else {
                  unint64_t v104 = v102;
                }
                if (v104) {
                  unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(v104);
                }
                else {
                  uint64_t v105 = 0;
                }
                unint64_t v106 = v104 + 48 * v101;
                long long v107 = *(_OWORD *)&__v.__first_;
                *(void *)(v106 + 16) = __v.__end_;
                *(_OWORD *)unint64_t v106 = v107;
                memset(&__v, 0, 24);
                std::__compressed_pair<std::string *> end_cap = __v.__end_cap_;
                *(void *)(v106 + 40) = v174;
                *(std::__compressed_pair<std::string *> *)(v106 + 24) = end_cap;
                __v.__end_cap_.__value_ = 0;
                uint64_t v174 = 0;
                __v.__end_cap_.__value_ = 0;
                uint64_t v110 = *((void *)v95 + 11);
                unint64_t v109 = *((void *)v95 + 12);
                if (v109 == v110)
                {
                  int64x2_t v114 = vdupq_n_s64(v109);
                  unint64_t v111 = v104 + 48 * v101;
                }
                else
                {
                  unint64_t v111 = v104 + 48 * v101;
                  do
                  {
                    long long v112 = *(_OWORD *)(v109 - 48);
                    *(void *)(v111 - 32) = *(void *)(v109 - 32);
                    *(_OWORD *)(v111 - 48) = v112;
                    *(void *)(v109 - 40) = 0;
                    *(void *)(v109 - 32) = 0;
                    *(void *)(v109 - 48) = 0;
                    long long v113 = *(_OWORD *)(v109 - 24);
                    *(void *)(v111 - 8) = *(void *)(v109 - 8);
                    *(_OWORD *)(v111 - 24) = v113;
                    v111 -= 48;
                    *(void *)(v109 - 16) = 0;
                    *(void *)(v109 - 8) = 0;
                    *(void *)(v109 - 24) = 0;
                    v109 -= 48;
                  }
                  while (v109 != v110);
                  int64x2_t v114 = *(int64x2_t *)(v95 + 88);
                }
                unint64_t v115 = v106 + 48;
                *((void *)v95 + 1boost::detail::shared_count::~shared_count(this + 1) = v111;
                *((void *)v95 + 12) = v106 + 48;
                *((void *)v95 + 13) = v104 + 48 * v105;
                uint64_t v117 = v114.i64[1];
                long long v116 = (void *)v114.i64[0];
                while ((void *)v117 != v116)
                {
                  v117 -= 48;
                  std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v117);
                }
                if (v116) {
                  operator delete(v116);
                }
                int v118 = SHIBYTE(v174);
                *((void *)v95 + 12) = v115;
                unint64_t v14 = v139;
                if (v118 < 0) {
                  operator delete(__v.__end_cap_.__value_);
                }
              }
              else
              {
                long long v98 = *(_OWORD *)&__v.__first_;
                *(void *)(v96 + 16) = __v.__end_;
                *(_OWORD *)unint64_t v96 = v98;
                memset(&__v, 0, 24);
                uint64_t v99 = v174;
                *(std::__compressed_pair<std::string *> *)(v96 + 24) = __v.__end_cap_;
                *(void *)(v96 + 40) = v99;
                __v.__end_cap_.__value_ = 0;
                uint64_t v174 = 0;
                __v.__end_cap_.__value_ = 0;
                *((void *)v95 + 12) = v96 + 48;
              }
              if (SHIBYTE(__v.__end_) < 0) {
                operator delete(__v.__first_);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v142.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v142.__pn_.__r_.__value_.__l.__data_);
              }
            }
            a3 = (std::string *)v137;
            if (v144)
            {
              __v.__first_ = &v143;
              std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
            }
          }
        }
        if (v145) {
          CFRelease(v145);
        }
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v146.__r_.__value_.__l.__data_);
        }
        char v30 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      if (v30 < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (v140) {
        CFRelease(v140);
      }
      CFRelease(v141);
      ++v154.__r_.__value_.__l.__size_;
    }
    if (v152)
    {
      long long v153 = v152;
      operator delete(v152);
    }
    if (v150)
    {
      long long v151 = v150;
      operator delete(v150);
    }
    if (v156)
    {
      v157 = v156;
      operator delete(v156);
    }
    if (v154.__r_.__value_.__r.__words[2])
    {
      uint64_t v155 = v154.__r_.__value_.__r.__words[2];
      operator delete((void *)v154.__r_.__value_.__r.__words[2]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    CFRelease(cf);
    if (v160 < 0) {
      operator delete(v159[0]);
    }
    CFRelease(v135);
    CFRelease(v14);
    ++v168;
  }
  if (v165)
  {
    int v166 = v165;
    operator delete(v165);
  }
  if (v163)
  {
    double v164 = v163;
    operator delete(v163);
  }
  if (v171)
  {
    uint64_t v172 = v171;
    operator delete(v171);
  }
  if (v169)
  {
    unsigned int v170 = v169;
    operator delete(v169);
  }
}

void sub_248974CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef cf, uint64_t a16, uint64_t a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a14) {
    CFRelease(a14);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a68) {
    operator delete(a68);
  }
  if (a65) {
    operator delete(a65);
  }
  std::string::size_type v70 = *(void **)(v68 - 200);
  if (v70)
  {
    *(void *)(v68 - 192) = v70;
    operator delete(v70);
  }
  unsigned int v71 = *(void **)(v68 - 224);
  if (v71)
  {
    *(void *)(v68 - 216) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (v3 & 0x80000000) != 0;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_24897520C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__fs::filesystem::exists[abi:ne180100](const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  std::__fs::filesystem::__status(a1, a2);
  if (v6)
  {
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
    uint64_t v3 = v6;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v3) {
    BOOL v4 = v3 == 255;
  }
  else {
    BOOL v4 = 1;
  }
  return !v4;
}

uint64_t std::__optional_destruct_base<adm::SystemConfiguration,false>::__optional_destruct_base[abi:ne180100]<adm::SystemConfiguration>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(result + 32) = v3;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + ++*(_DWORD *)(this + 56) = v4;
  *(unsigned char *)(result + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(result + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(result + 64) = v5;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(result + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(result + 96) = v6;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    *(unsigned char *)(result + 120) = 1;
  }
  *(void *)(result + 128) = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(result + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(result + 136) = v7;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 136) = 0;
  long long v8 = *(_OWORD *)(a2 + 160);
  *(void *)(result + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(result + 160) = v8;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v9 = *(void *)(a2 + 184);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(result + 184) = v9;
  *(void *)(result + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(void *)(a2 + 200);
  uint64_t v10 = a2 + 200;
  uint64_t v11 = v12;
  *(void *)(result + 200) = v12;
  uint64_t v13 = *(void *)(v10 + 8);
  *(void *)(result + 208) = v13;
  *(_DWORD *)(result + 216) = *(_DWORD *)(v10 + 16);
  if (v13)
  {
    unint64_t v14 = *(void *)(v11 + 8);
    unint64_t v15 = *(void *)(result + 192);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(v9 + 8 * v14) = result + 200;
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
  }
  *(unsigned char *)(result + 224) = 1;
  return result;
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  long long v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize((char **)(a1 + 16), Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void *applesauce::CF::details::find_at_key<std::string,char const* const&>(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFStringRef v4 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>(a2, __s);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_2489754DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  long long v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  CFIndex Count = CFDictionaryGetCount(theDict);
  std::vector<void const*>::resize((char **)(a1 + 16), Count);
  std::vector<void const*>::resize(v3, Count);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  return a1;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x50uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + boost::detail::shared_count::~shared_count(this + 1) = v8;
  BOOL v16 = (std::string *)(v13 + 16);
  CFTypeID v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *(_OWORD *)(v13 + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 18) = 1065353216;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  std::string::pointer v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    void *v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  *unint64_t v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    std::string::pointer v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_2489757E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x88uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + boost::detail::shared_count::~shared_count(this + 1) = v8;
  BOOL v16 = (std::string *)(v13 + 16);
  CFTypeID v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  std::string::pointer v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    void *v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  *unint64_t v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    std::string::pointer v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_248975A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  CFArrayRef v4 = (const __CFArray *)applesauce::CF::details::at_key<char const* const&>(a2, __s);
  if (v4 && (CFArrayRef v5 = v4, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v5)))
  {
    CFIndex Count = CFArrayGetCount(v5);
    int v8 = Count;
    memset(&v22, 0, sizeof(v22));
    if (Count << 32)
    {
      if (Count << 32 < 0) {
LABEL_27:
      }
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v22.__end_cap_;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((int)Count);
      __v.__begin_ = __v.__first_;
      __v.__end_ = __v.__first_;
      __v.__end_cap_.__value_ = &__v.__first_[v9];
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(&v22, &__v);
      std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
    }
    if (v8 < 1)
    {
LABEL_22:
      *(std::vector<std::string> *)a1 = v22;
      memset(&v22, 0, sizeof(v22));
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      CFIndex v10 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v10);
        applesauce::CF::convert_as<std::string,0>((uint64_t)&v19, ValueAtIndex);
        if (!v21) {
          break;
        }
        std::vector<std::string>::pointer end = v22.__end_;
        if (v22.__end_ >= v22.__end_cap_.__value_)
        {
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_ - (char *)v22.__begin_) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_27;
          }
          if (0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) > v15) {
            unint64_t v15 = 0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v16 = v15;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v22.__end_cap_;
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          long long v18 = (std::string *)(v16 + 24 * v14);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
          __v.__begin_ = v18;
          __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__r.__words[2] = v20;
          long long v19 = 0uLL;
          std::string::size_type v20 = 0;
          __v.__end_ = v18 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(&v22, &__v);
          uint64_t v13 = v22.__end_;
          std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
        }
        else
        {
          *(_OWORD *)v22.__end_ = v19;
          end->__r_.__value_.__r.__words[2] = v20;
          std::string::size_type v20 = 0;
          long long v19 = 0uLL;
          uint64_t v13 = end + 1;
        }
        v22.__end_ = v13;
        if (v8 == ++v10) {
          goto LABEL_22;
        }
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig::~AUPresetOverrideConfig(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    CFArrayRef v4 = (char *)v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(v6);
      }
      while (v4 != v2);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const void *applesauce::CF::details::at_key<char const* const&>(const __CFDictionary *a1, const UInt8 *__s)
{
  long long v2 = __s;
  CFIndex v4 = strlen((const char *)__s);
  if (v2)
  {
    long long v2 = (const UInt8 *)CFStringCreateWithBytes(0, v2, v4, 0x8000100u, 0);
    if (!v2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  uint64_t Value = CFDictionaryGetValue(a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return Value;
}

void sub_248975E5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>(int64x2_t *a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    CFIndex Count = CFArrayGetCount(a2);
    int v6 = Count;
    int64x2_t v35 = 0uLL;
    std::string v36 = 0;
    if (Count << 32)
    {
      if (Count << 32 < 0) {
LABEL_36:
      }
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      int v40 = &v36;
      unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((int)Count);
      uint64_t v9 = (void *)v35.i64[1];
      CFIndex v10 = (void *)v35.i64[0];
      if (v35.i64[1] == v35.i64[0])
      {
        int64x2_t v13 = vdupq_n_s64(v35.u64[1]);
        unint64_t v11 = v7;
      }
      else
      {
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *--v9;
          *((void *)v11 - boost::detail::shared_count::~shared_count(this + 1) = v12;
          v11 -= 8;
          void *v9 = 0;
        }
        while (v9 != v10);
        int64x2_t v13 = v35;
      }
      v35.i64[0] = (uint64_t)v11;
      v35.i64[1] = (uint64_t)v7;
      int64x2_t v38 = v13;
      unint64_t v14 = v36;
      std::string v36 = &v7[8 * v8];
      unint64_t v39 = (unint64_t)v14;
      CFStringRef v37 = (int64x2_t *)v13.i64[0];
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v37);
    }
    if (v6 < 1)
    {
LABEL_31:
      *a1 = v35;
      a1[1].i64[0] = (uint64_t)v36;
      std::string v36 = 0;
      int64x2_t v35 = 0uLL;
      a1[1].i8[8] = 1;
    }
    else
    {
      CFIndex v15 = 0;
      uint64_t v16 = v6;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v15);
        long long v18 = ValueAtIndex;
        if (!ValueAtIndex) {
          break;
        }
        CFRetain(ValueAtIndex);
        CFTypeID v19 = CFGetTypeID(v18);
        if (v19 != CFDictionaryGetTypeID())
        {
          CFRelease(v18);
          break;
        }
        int v33 = v18;
        char v34 = 1;
        std::string::size_type v20 = (void *)v35.i64[1];
        if (v35.i64[1] >= (unint64_t)v36)
        {
          char v21 = (void *)v35.i64[0];
          uint64_t v22 = (v35.i64[1] - v35.i64[0]) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            goto LABEL_36;
          }
          uint64_t v24 = (uint64_t)&v36[-v35.i64[0]];
          if ((uint64_t)&v36[-v35.i64[0]] >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          int v40 = &v36;
          if (v25)
          {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
            std::string::size_type v20 = (void *)v35.i64[1];
            char v21 = (void *)v35.i64[0];
            long long v18 = v33;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v27 = (void *)(v25 + 8 * v22);
          unint64_t v28 = v25 + 8 * v26;
          unint64_t v39 = v28;
          void *v27 = v18;
          std::string::size_type v29 = v27 + 1;
          int v33 = 0;
          v38.i64[1] = (uint64_t)(v27 + 1);
          if (v20 != v21)
          {
            do
            {
              uint64_t v30 = *--v20;
              *--unint64_t v27 = v30;
              void *v20 = 0;
            }
            while (v20 != v21);
            std::string::size_type v29 = (void *)v38.i64[1];
            unint64_t v28 = v39;
          }
          int64x2_t v31 = v35;
          v35.i64[0] = (uint64_t)v27;
          v35.i64[1] = (uint64_t)v29;
          int64x2_t v38 = v31;
          std::string::size_type v32 = v36;
          std::string v36 = (char *)v28;
          unint64_t v39 = (unint64_t)v32;
          CFStringRef v37 = (int64x2_t *)v31.i64[0];
          std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v37);
          v35.i64[1] = (uint64_t)v29;
        }
        else
        {
          *(void *)v35.i64[1] = v18;
          int v33 = 0;
          v35.i64[1] = (uint64_t)(v20 + 1);
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
        if (++v15 == v16) {
          goto LABEL_31;
        }
      }
      LOBYTE(v33) = 0;
      char v34 = 0;
      a1->i8[0] = 0;
      a1[1].i8[8] = 0;
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
    }
    CFStringRef v37 = &v35;
    std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
  else
  {
    a1->i8[0] = 0;
    a1[1].i8[8] = 0;
  }
}

double applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  if (a2 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
    if (CStringPtr)
    {
      std::string::basic_string[abi:ne180100]<0>(&__b, CStringPtr);
    }
    else
    {
      CFIndex Length = CFStringGetLength(a2);
      maxBufLeuint64_t n = 0;
      v12.locatiouint64_t n = 0;
      v12.length = Length;
      CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::string::basic_string[abi:ne180100](&__b, maxBufLen, 0);
      if (v10 >= 0) {
        p_b = (UInt8 *)&__b;
      }
      else {
        p_b = (UInt8 *)__b;
      }
      v13.locatiouint64_t n = 0;
      v13.length = Length;
      CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, p_b, maxBufLen, &maxBufLen);
    }
    double result = *(double *)&__b;
    *(_OWORD *)a1 = __b;
    *(void *)(a1 + 16) = v10;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return this;
}

void sub_248976310(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void std::vector<void const*>::resize(char **a1, unint64_t a2)
{
  CFTypeID v3 = *a1;
  CFIndex v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    CFTypeID v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    CFTypeID v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  CFRange v12 = &v11[8 * v5];
  unint64_t v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  CFIndex v15 = &v12[8 * v6];
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - boost::detail::shared_count::~shared_count(this + 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    uint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
          int v13 = 0;
        }
        uint64_t v8 = v11 << 32;
        LODWORD(vstd::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = v13 & 0xFFFFFF00 | v12;
        int v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9) {
          uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        }
        else {
          uint64_t v5 = 0;
        }
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        uint64_t v14 = *(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        uint64_t v14 = valuePtr;
LABEL_35:
        uint64_t v5 = v14 | 0x100000000;
        if (!v10) {
          uint64_t v5 = 0;
        }
LABEL_37:
        int v7 = v5 & 0xFFFFFF00;
        uint64_t v8 = v5 & 0x100000000;
        break;
      default:
        int v7 = 0;
        uint64_t v8 = 0;
        LOBYTE(vstd::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
        break;
    }
    uint64_t v6 = v8 | v7 & 0xFFFFFF00;
    uint64_t v5 = v5;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      uint64_t v5 = CFBooleanGetValue(a1);
      uint64_t v6 = 0x100000000;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  return v6 | v5;
}

void *applesauce::CF::make_DataRef(CFDataRef *a1, uint64_t a2)
{
  v15[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) >= 0) {
    CFTypeID v3 = (const char *)a2;
  }
  else {
    CFTypeID v3 = *(const char **)a2;
  }
  CFTypeID v4 = fopen(v3, "rb");
  v13[0] = &unk_26FCA3678;
  v13[1] = MEMORY[0x263EF88A8];
  v13[3] = v13;
  __streauint64_t m = v4;
  v15[3] = v15;
  std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone((uint64_t)v13, v15);
  std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](v13);
  if (!__stream)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  fseek(__stream, 0, 2);
  size_t v5 = MEMORY[0x24C586980](__stream);
  if (v5)
  {
    size_t v6 = v5;
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v5);
    uint64_t v8 = &v7[v6];
    bzero(v7, v6);
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = 0;
  }
  fseek(__stream, 0, 0);
  fread(v7, 1uLL, v8 - v7, __stream);
  CFDataRef v9 = CFDataCreate(0, (const UInt8 *)v7, v8 - v7);
  *a1 = v9;
  if (!v9)
  {
    unsigned __int8 v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v7) {
    operator delete(v7);
  }
  std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100]((uint64_t *)&__stream);
  return std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](v15);
}

void sub_248976954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v14) {
    operator delete(v14);
  }
  std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100](&a13);
  std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::make_DictionaryRef(applesauce::CF::DictionaryRef *a1, const __CFData *a2)
{
  if (!a2) {
    goto LABEL_10;
  }
  CFPropertyListRef v3 = CFPropertyListCreateWithData(0, a2, 0, 0, 0);
  if (!v3)
  {
    double result = (applesauce::CF::DictionaryRef *)CFDictionaryGetTypeID();
    if (!result)
    {
      *(void *)a1 = 0;
      return result;
    }
LABEL_10:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFTypeID v4 = v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    goto LABEL_10;
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v4);
}

void sub_248976A7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void *std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  applesauce::CF::DictionaryRef *result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

void *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::target_type()
{
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFiP7__sFILEE")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26FCA3678;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26FCA3678;
  result[1] = v3;
  return result;
}

void std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::~__func()
{
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void *adm::vp::SPIErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a1 > 1651270507)
  {
    if (a1 > 1651733600)
    {
      if (a1 == 1651733601)
      {
        CFTypeID v5 = "bad state";
        goto LABEL_20;
      }
      if (a1 == 2004186175)
      {
        CFTypeID v5 = "unknown error has occurred";
        goto LABEL_20;
      }
    }
    else
    {
      if (a1 == 1651270508)
      {
        CFTypeID v5 = "bad legacy call";
        goto LABEL_20;
      }
      if (a1 == 1651664230)
      {
        CFTypeID v5 = "bad VoiceProcessorRef";
        goto LABEL_20;
      }
    }
  }
  else if (a1 > 1651076963)
  {
    if (a1 == 1651076964)
    {
      CFTypeID v5 = "bad VoiceProcessor[Uplink|Downlink]IOData";
      goto LABEL_20;
    }
    if (a1 == 1651270507)
    {
      CFTypeID v5 = "back lock";
      goto LABEL_20;
    }
  }
  else
  {
    if (a1 == 1650553447)
    {
      CFTypeID v5 = "bad argument";
      goto LABEL_20;
    }
    if (a1 == 1650681447)
    {
      CFTypeID v5 = "bad VoiceProcessor[Uplink|Downlink]Configuration";
LABEL_20:
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    }
  }
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    v8[0] = 67109120;
    v8[1] = a1;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown return status %d in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)v8, 8u);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "???");
}

const char *adm::vp::SPIErrorCategory::name(adm::vp::SPIErrorCategory *this)
{
  return "adm::vp::SPIErrorCategory";
}

void adm::vp::SPIErrorCategory::~SPIErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24C5866C0);
}

_DWORD *___ZL20GetVoiceProcessorSPIv_block_invoke()
{
  double result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    double result = dlsym(result, "gVoiceProcessorSPI");
    if (result)
    {
      if (*result >= 0xBu) {
        GetVoiceProcessorSPI(void)::sVoiceProcessorSPI = (uint64_t)result;
      }
    }
  }
  return result;
}

void adm::vp::SPI::~SPI(adm::vp::SPI *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "destroying voice processor", buf, 2u);
  }
  unsigned int v3 = (*(uint64_t (**)(void))(*(void *)this + 16))(*((void *)this + 1));
  if (v3)
  {
    CFTypeID v4 = get_adm_log_object();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)buf, "error");
      unsigned __int8 v12 = buf;
      char v13 = 1;
      v14[0] = 5;
      v15[0] = v3;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      v15[1] = v14;
      char v16 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)buf, 2);
      v18[1] = (uint64_t *)v17;
      char v19 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)v17, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v7, -1);
      if (v10 >= 0) {
        CFTypeID v5 = __p;
      }
      else {
        CFTypeID v5 = (void **)__p[0];
      }
      *(_DWORD *)std::string::size_type v20 = 136315138;
      char v21 = v5;
      _os_log_error_impl(&dword_248947000, v4, OS_LOG_TYPE_ERROR, "failed to destroy voice processor with error: %s", v20, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v18, v17[0]);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v14[i * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v15[i], v14[i * 8]);
      }
    }
  }
}

void sub_2489771EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 buf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t *a24)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a11, a10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a24, a23);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a19 + i);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a20 + i), *((unsigned __int8 *)&a19 + i));
    }
    __cxa_begin_catch(exception_object);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      std::string buf = 0;
      _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x248977074);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Kernel::doGetExpectedOutputSamplesForInputSamples(adm::graph::Kernel *this, unint64_t a2, unint64_t *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v27, "file");
    unint64_t v28 = v27;
    char v29 = 1;
    uint64_t v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v30);
    char v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v27, 2);
    char v34 = v33;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v21, "line");
    uint64_t v22 = v21;
    char v23 = 1;
    v24[0] = 5;
    v25[0] = 145;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    v25[1] = v24;
    char v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v21, 2);
    v36[2] = v36;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v15);
    char v16 = v15;
    char v17 = 1;
    v19[0] = 0;
    v18[0] = 3;
    CFTypeID v4 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "virtual std::uint64_t adm::graph::Kernel::doGetExpectedOutputSamplesForInputSamples(std::uint64_t, std::uint64_t &)");
    v19[0] = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    v19[1] = v18;
    char v20 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v15, 2);
    unint64_t v39 = v38;
    char v40 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v33, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v11, 4);
    if (v14 >= 0) {
      CFTypeID v5 = __p;
    }
    else {
      CFTypeID v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = v5;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v38[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38[i + 8], v38[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v18[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v19[j], v18[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v25[k], v24[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v30[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v30[m + 8], v30[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2489775D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Kernel.cpp");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_248977768(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "function");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_2489777D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetExpectedOutputSamplesForInputSamplesHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 132;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual std::uint64_t adm::graph::Kernel::doGetRequiredInputSamplesForOutputSamples(std::uint64_t)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248977AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doGetLatency(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 119;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual std::int64_t adm::graph::Kernel::doGetLatency()");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248977F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetLatencyHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doUnregisterClient(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 106;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doUnregisterClient(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_24897834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsUnregisterClientHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doEndProcessing(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 93;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doEndProcessing(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248978780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsEndProcessingHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doEndCycle()
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    unint64_t v25 = v24;
    char v26 = 1;
    uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    char v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    uint64_t v31 = v30;
    char v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    char v19 = v18;
    char v20 = 1;
    v21[0] = 5;
    v22[0] = 80;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    char v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    char v13 = v12;
    char v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    uint64_t v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doEndCycle(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    char v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    std::string v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v39 = v2;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248978BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsEndCycleHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doClientIO()
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    unint64_t v25 = v24;
    char v26 = 1;
    uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    char v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    uint64_t v31 = v30;
    char v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    char v19 = v18;
    char v20 = 1;
    v21[0] = 5;
    v22[0] = 67;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    char v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    char v13 = v12;
    char v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    uint64_t v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doClientIO(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &, std::size_t, AMCP::Proc_Stream *, std::size_t, AMCP::Proc_Stream *)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    char v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    std::string v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v39 = v2;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248978FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsClientIOHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doBeginCycle()
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    unint64_t v25 = v24;
    char v26 = 1;
    uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    char v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    uint64_t v31 = v30;
    char v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    char v19 = v18;
    char v20 = 1;
    v21[0] = 5;
    v22[0] = 53;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    char v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    char v13 = v12;
    char v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    uint64_t v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doBeginCycle(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    char v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    std::string v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v39 = v2;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_24897941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsBeginCycleHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doBeginProcessing(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 40;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doBeginProcessing(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248979850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsBeginProcessingHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doRegisterClient(adm::graph::Kernel *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    char v26 = v25;
    char v27 = 1;
    uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    char v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    char v32 = v31;
    char v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    char v20 = v19;
    char v21 = 1;
    v22[0] = 5;
    v23[0] = 27;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    char v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    char v14 = v13;
    char v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    uint64_t v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doRegisterClient(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    char v37 = v36;
    char v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0) {
      unsigned int v3 = __p;
    }
    else {
      unsigned int v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v40 = v3;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (uint64_t k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (uint64_t m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_248979C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsRegisterClientHandler(adm::graph::Kernel *this)
{
  return 0;
}

uint64_t adm::graph::DSPKernel::doClientIOPostProcessing(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v4 = (a1[8].__d_.__rep_ - a1[7].__d_.__rep_) >> 3;
  if (v4 != a3)
  {
    uint64_t v6 = (a1[14].__d_.__rep_ - a1[13].__d_.__rep_) >> 3;
    goto LABEL_12;
  }
  uint64_t v6 = (a1[14].__d_.__rep_ - a1[13].__d_.__rep_) >> 3;
  if (v6 != a3)
  {
LABEL_12:
    uint64_t v7 = 1920231791;
    uint64_t v15 = v6;
    unint64_t v16 = v4;
    adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(a1 + 16, (uint64_t)"numStreams = %u, mPostProcessingConverters size is %u, mPostProcessingABLs size is %u", &v17, (uint64_t *)&v16, &v15);
    return v7;
  }
  uint64_t v7 = 0;
  if (a3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (AudioBufferList **)(a2 + 72);
    char v10 = "mPostProcessingConverters is nullptr at index %u";
    while (1)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = a1[7].__d_.__rep_;
      if (v8 >= (a1[8].__d_.__rep_ - rep) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      char v12 = *(OpaqueAudioConverter **)(rep + 8 * v8);
      if (!v12) {
        break;
      }
      if (!*v9)
      {
        char v10 = "outStreams ABL is nullptr at index %u";
        break;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = a1[13].__d_.__rep_;
      if (v8 >= (a1[14].__d_.__rep_ - v13) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v7 = AudioConverterConvertComplexBuffer(v12, *((_DWORD *)v9 - 2), (const AudioBufferList *)(*(void *)(v13 + 8 * v8++) + 48), *v9) | v7;
      v9 += 10;
      if (a3 == v8) {
        return v7;
      }
    }
    uint64_t v7 = 1920231791;
    unint64_t v16 = v8;
    adm::util::RTLogger::log<unsigned long &>(a1 + 16, (uint64_t)v10, (uint64_t *)&v16);
  }
  return v7;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    char v11 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v14) = 3;
    *((void *)&v14 + boost::detail::shared_count::~shared_count(this + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    char v11 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v14) = 3;
    *((void *)&v14 + boost::detail::shared_count::~shared_count(this + 1) = a2;
  }
  int v15 = rep;
  uint64_t v13 = *a4;
  uint64_t v16 = *a3;
  uint64_t v17 = v13;
  uint64_t v18 = *a5;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>(v11, &v14);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    uint64_t v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v9) = 3;
    *((void *)&v9 + boost::detail::shared_count::~shared_count(this + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    uint64_t v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v9) = 3;
    *((void *)&v9 + boost::detail::shared_count::~shared_count(this + 1) = a2;
  }
  int v10 = rep;
  uint64_t v11 = *a3;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>(v7, &v9);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA3250;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA31F8;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v3 = __p;
        if (v17 < 0) {
          unsigned int v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = __p;
        if (v17 < 0) {
          unint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = __p;
        if (v17 < 0) {
          uint64_t v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v14 = __p;
        if (v17 < 0) {
          long long v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = __p;
        if (v17 < 0) {
          uint64_t v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 80, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA23A8;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + ++*(_DWORD *)(this + 56) = a2[2];
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2350;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v3 = __p;
        if (v17 < 0) {
          unsigned int v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = __p;
        if (v17 < 0) {
          unint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v14 = __p;
        if (v17 < 0) {
          long long v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        char v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 80, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t adm::graph::DSPKernel::doClientIOPreProcessing(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v4 = (a1[5].__d_.__rep_ - a1[4].__d_.__rep_) >> 3;
  if (v4 != a3)
  {
    uint64_t v6 = (a1[11].__d_.__rep_ - a1[10].__d_.__rep_) >> 3;
    goto LABEL_12;
  }
  uint64_t v6 = (a1[11].__d_.__rep_ - a1[10].__d_.__rep_) >> 3;
  if (v6 != a3)
  {
LABEL_12:
    uint64_t v7 = 1920231791;
    uint64_t v15 = v6;
    unint64_t v16 = v4;
    adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(a1 + 16, (uint64_t)"numStreams = %u, mPreProcessingConverters size is %u, mPreProcessingABLs size is %u", &v17, (uint64_t *)&v16, &v15);
    return v7;
  }
  uint64_t v7 = 0;
  if (a3)
  {
    unint64_t v8 = 0;
    int v9 = (const AudioBufferList **)(a2 + 72);
    int v10 = "mPreProcessingConverters is nullptr at index %u";
    while (1)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = a1[4].__d_.__rep_;
      if (v8 >= (a1[5].__d_.__rep_ - rep) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      int v12 = *(OpaqueAudioConverter **)(rep + 8 * v8);
      if (!v12) {
        break;
      }
      if (!*v9)
      {
        int v10 = "inStreams ABL is nullptr at index %u";
        break;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = a1[10].__d_.__rep_;
      if (v8 >= (a1[11].__d_.__rep_ - v13) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v7 = AudioConverterConvertComplexBuffer(v12, *((_DWORD *)v9 - 2), *v9, (AudioBufferList *)(*(void *)(v13 + 8 * v8++) + 48)) | v7;
      v9 += 10;
      if (a3 == v8) {
        return v7;
      }
    }
    uint64_t v7 = 1920231791;
    unint64_t v16 = v8;
    adm::util::RTLogger::log<unsigned long &>(a1 + 16, (uint64_t)v10, (uint64_t *)&v16);
  }
  return v7;
}

uint64_t adm::graph::DSPKernel::createPostProcessingConverters(adm::graph::DSPKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  uint64_t v6 = (AudioConverterRef **)((char *)this + 56);
  uint64_t result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((void *)this + 7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  uint64_t v8 = *((void *)a2 + 3);
  if (*((void *)a2 + 4) != v8)
  {
    unint64_t v9 = 0;
    int v10 = 4 * a3;
    do
    {
      os_log_type_t v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inSourceFormat, v9);
        __n128 v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Non-LinearPCM format for output terminal index ", (std::string *)&inSourceFormat);
        MEMORY[0x24C5862B0](exception, &v34, v30);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      UInt32 mChannelsPerFrame = v11->mChannelsPerFrame;
      inSourceFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inSourceFormat.mFormatID = xmmword_2489AAA40;
      inSourceFormat.mBytesPerFrame = 4;
      inSourceFormat.UInt32 mChannelsPerFrame = mChannelsPerFrame;
      *(void *)&inSourceFormat.mBitsPerChannel = 32;
      AudioConverterRef outAudioConverter = 0;
      if (AudioConverterNew(&inSourceFormat, v11, &outAudioConverter))
      {
        char v27 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v9);
        __n128 v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Failed to create postprocessing converter for stream ", &v31);
        MEMORY[0x24C5862B0](v27, &v34, v28);
        __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      long long v14 = (AudioConverterRef *)*((void *)this + 8);
      unint64_t v13 = *((void *)this + 9);
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = *v6;
        uint64_t v17 = v14 - *v6;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        std::string v36 = (char *)this + 72;
        if (v20)
        {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          unint64_t v16 = (AudioConverterRef *)*((void *)this + 7);
          long long v14 = (AudioConverterRef *)*((void *)this + 8);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (AudioConverterRef *)(v20 + 8 * v17);
        unint64_t v23 = v20 + 8 * v21;
        unint64_t v35 = v23;
        *uint64_t v22 = outAudioConverter;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
        if (v14 == v16)
        {
          uint64_t v15 = v22 + 1;
        }
        else
        {
          do
          {
            char v24 = *--v14;
            AudioConverterRef *v14 = 0;
            *--uint64_t v22 = v24;
          }
          while (v14 != v16);
          uint64_t v15 = (void *)v34.__r_.__value_.__r.__words[2];
          unint64_t v23 = v35;
        }
        long long v25 = *(_OWORD *)((char *)this + 56);
        *((void *)this + 7) = v22;
        *((void *)this + 8) = v15;
        *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = v25;
        unint64_t v26 = *((void *)this + 9);
        *((void *)this + 9) = v23;
        unint64_t v35 = v26;
        v34.__r_.__value_.__r.__words[0] = v25;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        AudioConverterRef *v14 = outAudioConverter;
        uint64_t v15 = v14 + 1;
      }
      *((void *)this + 8) = v15;
      LODWORD(v34.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((void *)this + 13, &inSourceFormat);
      uint64_t result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((void *)this + 14) - 8));
      ++v9;
      uint64_t v8 = *((void *)a2 + 3);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 4) - v8) >> 3));
  }
  return result;
}

void sub_24897AE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void *std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    uint64_t v15 = result + 2;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    uint64_t v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v8 - boost::detail::shared_count::~shared_count(this + 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    caulk::concurrent::message *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    os_log_type_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    long long v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>(void *a1, AudioStreamBasicDescription *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = (CA::AudioBuffers *)(v12 + 8 * v9);
    unint64_t v17 = v12 + 8 * v13;
    CA::AudioBuffers::AudioBuffers(v15, a2);
    unint64_t v16 = (char *)v15 + 8;
    std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = (uint64_t)CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)a1[1], a2);
    unint64_t v8 = v6 + 8;
    a1[1] = v6 + 8;
  }
  a1[1] = v8;
  return result;
}

void sub_24897B0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::DSPKernel::createPreProcessingConverters(adm::graph::DSPKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  unint64_t v6 = (AudioConverterRef **)((char *)this + 32);
  uint64_t result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((void *)this + 4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  uint64_t v8 = *(void *)a2;
  if (*((void *)a2 + 1) != *(void *)a2)
  {
    unint64_t v9 = 0;
    int v10 = 4 * a3;
    do
    {
      uint64_t v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inDestinationFormat, v9);
        __n128 v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Non-LinearPCM format for input terminal index ", (std::string *)&inDestinationFormat);
        MEMORY[0x24C5862B0](exception, &v34, v30);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      UInt32 mChannelsPerFrame = v11->mChannelsPerFrame;
      inDestinationFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inDestinationFormat.mFormatID = xmmword_2489AAA40;
      inDestinationFormat.mBytesPerFrame = 4;
      inDestinationFormat.UInt32 mChannelsPerFrame = mChannelsPerFrame;
      *(void *)&inDestinationFormat.mBitsPerChannel = 32;
      AudioConverterRef outAudioConverter = 0;
      if (AudioConverterNew(v11, &inDestinationFormat, &outAudioConverter))
      {
        char v27 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v9);
        __n128 v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Failed to create preprocessing converter for stream ", &v31);
        MEMORY[0x24C5862B0](v27, &v34, v28);
        __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unint64_t v14 = (AudioConverterRef *)*((void *)this + 5);
      unint64_t v13 = *((void *)this + 6);
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = *v6;
        uint64_t v17 = v14 - *v6;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        std::string v36 = (char *)this + 48;
        if (v20)
        {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          unint64_t v16 = (AudioConverterRef *)*((void *)this + 4);
          unint64_t v14 = (AudioConverterRef *)*((void *)this + 5);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (AudioConverterRef *)(v20 + 8 * v17);
        unint64_t v23 = v20 + 8 * v21;
        unint64_t v35 = v23;
        *uint64_t v22 = outAudioConverter;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
        if (v14 == v16)
        {
          uint64_t v15 = v22 + 1;
        }
        else
        {
          do
          {
            char v24 = *--v14;
            AudioConverterRef *v14 = 0;
            *--uint64_t v22 = v24;
          }
          while (v14 != v16);
          uint64_t v15 = (void *)v34.__r_.__value_.__r.__words[2];
          unint64_t v23 = v35;
        }
        long long v25 = *((_OWORD *)this + 2);
        *((void *)this + 4) = v22;
        *((void *)this + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = v15;
        *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = v25;
        unint64_t v26 = *((void *)this + 6);
        *((void *)this + 6) = v23;
        unint64_t v35 = v26;
        v34.__r_.__value_.__r.__words[0] = v25;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        AudioConverterRef *v14 = outAudioConverter;
        uint64_t v15 = v14 + 1;
      }
      *((void *)this + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = v15;
      LODWORD(v34.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((void *)this + 10, &inDestinationFormat);
      uint64_t result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((void *)this + 11) - 8));
      ++v9;
      uint64_t v8 = *(void *)a2;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  }
  return result;
}

void sub_24897B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void anonymous namespace'::getControllerEK(_anonymous_namespace_ *this, unint64_t a2, const char *a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  adm_log_object = get_adm_log_object();
  if (os_signpost_enabled(adm_log_object))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_248947000, adm_log_object, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ADM::GetControllerEK", (const char *)&unk_2489B4309, buf, 2u);
  }
  {
    *(_OWORD *)&qword_269336FD8 = 0u;
    dword_269336FE8 = 1065353216;
  }
  {
                                        + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = a2;
        unint64_t v9 = a2
    }
    else
    {
          - 1) & a2;
    }
    if (v10)
    {
      for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == a2)
        {
          if (i[2] == a2) {
            goto LABEL_100;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
                        + 1))
                     + 1);
          }
          else
          {
                   + 1)
                 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = tb_conclave_endpoint_for_service();
  if (v13)
  {
    unint64_t v14 = get_adm_log_object();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v13;
      uint64_t v15 = "tb call failed to lookup endpoint for service[%s]: error[%d]";
      unint64_t v16 = v14;
      uint32_t v17 = 18;
LABEL_26:
      _os_log_error_impl(&dword_248947000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
      goto LABEL_99;
    }
    goto LABEL_99;
  }
  tb_endpoint_set_interface_identifier();
  uint64_t v18 = tb_client_connection_create_with_endpoint();
  int v19 = tb_client_connection_activate();
  if (!v19)
  {
    {
                                           + 8));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        uint64_t v13 = a2;
          uint64_t v13 = a2
      }
      else
      {
             - 1) & a2;
      }
      if (v24)
      {
        for (uint64_t j = (void *)*v24; j; uint64_t j = (void *)*j)
        {
          unint64_t v26 = j[1];
          if (v26 == a2)
          {
            if (j[2] == a2) {
              goto LABEL_99;
            }
          }
          else
          {
            if (v23.u32[0] > 1uLL)
            {
                          + 1))
                       + 1);
            }
            else
            {
                     + 1)
                   - 1;
            }
            if (v26 != v13) {
              break;
            }
          }
        }
      }
    }
    char v27 = operator new(0x30uLL);
    *(void *)std::string buf = v27;
    *(void *)&uint8_t buf[8] = &qword_269336FD8;
    void *v27 = 0;
    v27[1] = a2;
    v27[2] = a2;
    v27[3] = v18;
    v27[4] = 0;
    v27[5] = 0;
    uint8_t buf[16] = 1;
    float v28 = (float)(unint64_t)(qword_269336FE0 + 1);
    if (v22 && (float)(*(float *)&dword_269336FE8 * (float)v22) >= v28) {
      goto LABEL_90;
    }
    BOOL v29 = (v22 & (v22 - 1)) == 0;
    if (v22 < 3) {
      BOOL v29 = 0;
    }
    unint64_t v30 = (2 * v22) | !v29;
    unint64_t v31 = vcvtps_u32_f32(v28 / *(float *)&dword_269336FE8);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    if (*(void *)&prime > v22) {
      goto LABEL_56;
    }
    if (*(void *)&prime < v22)
    {
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)qword_269336FE0 / *(float *)&dword_269336FE8);
      if (v22 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v22)
      {
      }
      else
      {
        if (prime)
        {
LABEL_56:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v33 = operator new(8 * *(void *)&prime);
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          do
                      + 8 * v35++) = 0;
          while (*(void *)&prime != v35);
          std::string v36 = (void **)qword_269336FD8;
          if (qword_269336FD8)
          {
            unint64_t v37 = *(void *)(qword_269336FD8 + 8);
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }
            else
            {
              v37 &= *(void *)&prime - 1;
            }
            for (k = *v36; k; unint64_t v37 = v43)
            {
              unint64_t v43 = k[1];
              if (v38.u32[0] > 1uLL)
              {
                if (v43 >= *(void *)&prime) {
                  v43 %= *(void *)&prime;
                }
              }
              else
              {
                v43 &= *(void *)&prime - 1;
              }
              if (v43 != v37)
              {
                                + 8 * v43))
                {
                            + 8 * v43) = v36;
                  goto LABEL_81;
                }
                *std::string v36 = (void *)*k;
                                 + 8 * v43);
                            + 8 * v43) = k;
                uint64_t k = v36;
              }
              unint64_t v43 = v37;
LABEL_81:
              std::string v36 = (void **)k;
              uint64_t k = (void *)*k;
            }
          }
          unint64_t v22 = (unint64_t)prime;
          goto LABEL_85;
        }
        if (v53) {
          operator delete(v53);
        }
        unint64_t v22 = 0;
      }
    }
LABEL_85:
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v22 <= a2) {
        uint64_t v13 = a2 % v22;
      }
      else {
        uint64_t v13 = a2;
      }
    }
    else
    {
      uint64_t v13 = (v22 - 1) & a2;
    }
LABEL_90:
    if (v44)
    {
      **(void **)std::string buf = *v44;
      *char v44 = *(void *)buf;
    }
    else
    {
      **(void **)std::string buf = qword_269336FD8;
      qword_269336FD8 = *(void *)buf;
      if (**(void **)buf)
      {
        unint64_t v45 = *(void *)(**(void **)buf + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v45 >= v22) {
            v45 %= v22;
          }
        }
        else
        {
          v45 &= v22 - 1;
        }
      }
    }
    *(void *)std::string buf = 0;
    ++qword_269336FE0;
    goto LABEL_99;
  }
  int v20 = v19;
  uint64_t v21 = get_adm_log_object();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    uint64_t v15 = "tb call to initialize exclave failed: %d";
    unint64_t v16 = v21;
    uint32_t v17 = 8;
    goto LABEL_26;
  }
LABEL_99:
LABEL_100:
  if (v7)
  {
    uint8x8_t v46 = (uint8x8_t)vcnt_s8(v7);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      unint64_t v47 = a2;
      if (*(void *)&v7 <= a2) {
        unint64_t v47 = a2 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v47 = (*(void *)&v7 - 1) & a2;
    }
    if (v48)
    {
      std::string::size_type v49 = (void *)*v48;
      if (*v48)
      {
        do
        {
          unint64_t v50 = v49[1];
          if (v50 == a2)
          {
            if (v49[2] == a2) {
              operator new();
            }
          }
          else
          {
            if (v46.u32[0] > 1uLL)
            {
              if (v50 >= *(void *)&v7) {
                v50 %= *(void *)&v7;
              }
            }
            else
            {
              v50 &= *(void *)&v7 - 1;
            }
            if (v50 != v47) {
              break;
            }
          }
          std::string::size_type v49 = (void *)*v49;
        }
        while (v49);
      }
    }
  }
  std::string::size_type v51 = get_adm_log_object();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_248947000, v51, OS_LOG_TYPE_ERROR, "Unable to initialize exclave ID %llu", buf, 0xCu);
  }
  *(void *)this = 1970431354;
  *((unsigned char *)this + 16) = 0;
  uint64_t v52 = get_adm_log_object();
  if (os_signpost_enabled(v52))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_248947000, v52, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ADM::GetControllerEK", (const char *)&unk_2489B4309, buf, 2u);
  }
}

void sub_24897BD6C()
{
}

void sub_24897BD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_end_catch();
  adm::ScopedSignpostGetControllerEK::~ScopedSignpostGetControllerEK((adm::ScopedSignpostGetControllerEK *)va);
  _Unwind_Resume(a1);
}

std::string::size_type adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::string::size_type a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6, int a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26FCA24D0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((void *)(a1 + 24), a3, (uint64_t)a3 + 4 * a4, (4 * a4) >> 2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((void *)(a1 + 48), a5, (uint64_t)a5 + 4 * a6, (4 * a6) >> 2);
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v11 = (int *)(a1 + 72);
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  unint64_t v12 = (caulk::concurrent::messenger *)exclaves_inbound_buffer_create();
  if (!v12)
  {
    int v13 = *v11;
    *uint64_t v11 = (int)buf.__r_.__value_.__l.__data_;
    LODWORD(p_buf) = v13;
    caulk::mach::mach_port::~mach_port((mach_port_name_t *)&p_buf);
  }
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v14 = caulk::concurrent::messenger::shared_logging_priority(v12);
  MEMORY[0x24C585FF0](a1 + 96, 0, v14);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a1;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) created", (uint8_t *)&buf, 0xCu);
  }
  if (AudioCaptureLibraryCore(0))
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::onceflag, memory_order_acquire) != -1)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
      p_std::string buf = &buf;
      std::__call_once(&adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::onceflag, &p_buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::{lambda(void)#1} &&>>);
    }
    unint64_t v16 = (void *)[objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:@"com.apple.coreaudio"];
    uint32_t v17 = [v16 objectForKey:@"adm_debug_capture_level"];
    BOOL v18 = v17 == 0;

    if (!v18)
    {
      int v19 = [v16 integerForKey:@"adm_debug_capture_level"];
      int v20 = get_adm_log_object();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v19;
        _os_log_impl(&dword_248947000, v20, OS_LOG_TYPE_DEFAULT, "ADM debug capture level set to %d", (uint8_t *)&buf, 8u);
      }

      uint64_t v21 = NSString;
      adm::exclaves::makeCaptureDefaultsKey(&buf, a7, 0, 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &buf;
      }
      else {
        unint64_t v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      uint8x8_t v23 = [v21 stringWithUTF8String:v22];
      [v16 setBool:v19 > 0 forKey:v23];

      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      char v24 = NSString;
      adm::exclaves::makeCaptureDefaultsKey(&buf, a7, 1, 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v25 = &buf;
      }
      else {
        long long v25 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      unint64_t v26 = [v24 stringWithUTF8String:v25];
      [v16 setBool:v19 > 1 forKey:v26];

      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      char v27 = NSString;
      adm::exclaves::makeCaptureDefaultsKey(&buf, a7, 3, 0);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v28 = &buf;
      }
      else {
        float v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      BOOL v29 = [v27 stringWithUTF8String:v28];
      [v16 setBool:v19 > 2 forKey:v29];

      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  return a1;
}

void sub_24897C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  MEMORY[0x24C586010](a10);
  caulk::mach::mach_port::~mach_port(v21);
  long long v25 = *v20;
  if (*v20)
  {
    v18[7] = v25;
    operator delete(v25);
  }
  unint64_t v26 = *v19;
  if (*v19)
  {
    v18[4] = v26;
    operator delete(v26);
  }
  char v27 = (std::__shared_weak_count *)v18[2];
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::setParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2, float a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v47 = a2;
  float v46 = a3;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6)
  {
    int8x8_t v7 = 0;
    goto LABEL_11;
  }
  int8x8_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7 || !*((void *)this + 1))
  {
LABEL_11:
    unsigned int v13 = *((_DWORD *)this + 20);
    if (v13 > 0x64)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *((void *)this + 11) <= 500999) {
        goto LABEL_16;
      }
      LODWORD(v53) = 2;
      *((void *)&v53 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) setParameter(%d, %f): EK unavailable";
      LODWORD(v54) = *((_DWORD *)this + 20);
      *((void *)&v54 + boost::detail::shared_count::~shared_count(this + 1) = this;
      *(void *)&long long v55 = __PAIR64__(LODWORD(a3), a2);
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v53);
    }
    else
    {
      LODWORD(v53) = 2;
      *((void *)&v53 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) setParameter(%d, %f): EK unavailable";
      LODWORD(v54) = v13;
      *((void *)&v54 + boost::detail::shared_count::~shared_count(this + 1) = this;
      *(void *)&long long v55 = __PAIR64__(LODWORD(a3), a2);
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v53);
    }
    *((std::chrono::system_clock::time_point *)this + 1boost::detail::shared_count::~shared_count(this + 1) = std::chrono::system_clock::now();
LABEL_16:
    int v14 = *((_DWORD *)this + 20);
    if (v14 != -1) {
      *((_DWORD *)this + 20) = v14 + 1;
    }
    uint64_t v15 = 1970431354;
    if (!v7) {
      return v15;
    }
    goto LABEL_22;
  }
  uint8x8_t v8 = (__int32 *)*((void *)this + 4);
  unint64_t v9 = wmemchr(*((__int32 **)this + 3), a2, ((uint64_t)v8 - *((void *)this + 3)) >> 2);
  if (v9) {
    int v10 = v9;
  }
  else {
    int v10 = v8;
  }
  if (v10 == *((__int32 **)this + 4))
  {
    unint64_t v12 = "setParameter(%d, %f): parameter not supported";
    goto LABEL_21;
  }
  unint64_t v11 = adm::exclaves::utility::convert_to<std::optional<adm::exclaves::ParameterID>,unsigned int>(a2);
  if (!HIDWORD(v11))
  {
    unint64_t v12 = "setParameter(%d, %f): converting id to ex id failed";
LABEL_21:
    adm::util::RTLogger::log<unsigned int &,float &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)v12, &v47, (int *)&v46);
    uint64_t v15 = 1651536493;
LABEL_22:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return v15;
  }
  unsigned int v17 = v11;
  uint64_t v19 = adm::exclaves::utility::convert_to<std::optional<audiodsputility_parameterid_s>,adm::exclaves::ParameterID>(v11);
  switch(v17)
  {
    case 0u:
      if ((int)a3 > 6) {
        goto LABEL_27;
      }
      unint64_t v20 = 0x7F1E21C17219CAE8;
      uint64_t v21 = qword_2489AF320[a3];
      goto LABEL_35;
    case 1u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0x23580A01CC35D89ELL;
      goto LABEL_35;
    case 2u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0xE9CAC24E271E1010;
      goto LABEL_35;
    case 3u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0xBA94426FF040F022;
      goto LABEL_35;
    case 4u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0x67D58230E14B515BLL;
      goto LABEL_35;
    case 5u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0x8695345E04E75645;
      goto LABEL_35;
    case 6u:
      uint64_t v21 = a3 != 0.0;
      unint64_t v20 = 0xF876E807C3E4A3E7;
LABEL_35:
      if (!v18) {
        goto LABEL_38;
      }
      uint64_t v41 = 0;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v42 = &v41;
      uint64_t v43 = 0x3802000000;
      char v44 = __Block_byref_object_copy__114;
      unint64_t v45 = __Block_byref_object_dispose__115;
      v37[0] = MEMORY[0x263EF8330];
      v37[1] = 0x40000000;
      uint8x8_t v38 = ___ZN3adm5graph30ExclaveDSPControllerClientImpl12setParameterEjf_block_invoke;
      unint64_t v39 = &unk_265243120;
      uint8x8_t v40 = &v41;
      uint64_t v22 = v20;
      uint64_t v52 = 0;
      memset(v51, 0, sizeof(v51));
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      int v23 = tb_client_connection_message_construct();
      if (v23)
      {
        LODWORD(v51[0]) = v23;
LABEL_72:
        adm::util::RTLogger::log<unsigned int &,float &,tb_error_t &>((std::chrono::system_clock::time_point *)this + 10, &v47, (int *)&v46, (int *)v51);
        goto LABEL_73;
      }
      tb_message_encode_u64();
      tb_message_encode_u64();
      if (v19 <= (uint64_t)0xE95D2CBE682F3545)
      {
        if (v19 == 0x8A4D9A6CD80AC7E5 || v19 == 0xA743B5FF2B4E9891)
        {
LABEL_55:
          tb_message_encode_u64();
          if (v22 <= (uint64_t)0xF876E807C3E4A3E6)
          {
            if (v22 != 0x8695345E04E75645 && v22 != 0xBA94426FF040F022)
            {
              unint64_t v27 = 0xE9CAC24E271E1010;
LABEL_62:
              if (v22 != v27) {
                goto LABEL_114;
              }
            }
LABEL_69:
            tb_message_encode_BOOL();
            goto LABEL_70;
          }
          if (v22 <= 0x67D58230E14B515ALL)
          {
            if (v22 != 0xF876E807C3E4A3E7)
            {
              unint64_t v27 = 0x23580A01CC35D89ELL;
              goto LABEL_62;
            }
            goto LABEL_69;
          }
          if (v22 == 0x67D58230E14B515BLL) {
            goto LABEL_69;
          }
          tb_message_encode_u64();
          if (v21 <= (uint64_t)0xB941EFAD2C01A1F6)
          {
            if (v21 == 0x8D3025BDD0206734 || v21 == 0x966DBF642921EE02) {
              goto LABEL_70;
            }
            unint64_t v28 = 0x996B795339B4732BLL;
          }
          else if (v21 > 0xE69699D348D1431)
          {
            if (v21 == 0xE69699D348D1432) {
              goto LABEL_70;
            }
            unint64_t v28 = 0x2C1A98D65FB58883;
          }
          else
          {
            if (v21 == 0xB941EFAD2C01A1F7) {
              goto LABEL_70;
            }
            unint64_t v28 = 0xF7C7674340E151C8;
          }
          if (v21 != v28)
          {
            printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v21, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 76);
            _os_crash();
            __break(1u);
            goto LABEL_90;
          }
LABEL_70:
          tb_message_complete();
          uint64_t v50 = 0;
          int v29 = tb_connection_send_query();
          if ((v29 & 0xFFFFFFF7) != 0)
          {
LABEL_71:
            tb_client_connection_message_destruct();
            LODWORD(v51[0]) = v29;
            goto LABEL_72;
          }
          if (!v50)
          {
            int v29 = 4;
            goto LABEL_71;
          }
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          tb_message_decode_u8();
          if (v48 != 1)
          {
            if (!(_BYTE)v48)
            {
              uint64_t v30 = v49;
              goto LABEL_93;
            }
LABEL_101:
            tb_client_connection_message_destruct();
            LODWORD(v51[0]) = 7;
            goto LABEL_72;
          }
          tb_message_decode_u64();
          uint64_t v30 = v49;
          if (v49 <= 0x15AAC3129EA7047DLL)
          {
            if (v49 == 0xF57D459A0697D042) {
              goto LABEL_93;
            }
            uint64_t v31 = 0xB36710F1590EB0BLL;
            goto LABEL_92;
          }
LABEL_90:
          if (v30 == 0x3A8875D359853A61) {
            goto LABEL_93;
          }
          uint64_t v31 = 0x15AAC3129EA7047ELL;
LABEL_92:
          if (v30 != v31) {
            goto LABEL_101;
          }
LABEL_93:
          v38((uint64_t)v37, v48, v30);
          tb_client_connection_message_destruct();
          uint64_t v15 = 0;
          LODWORD(v51[0]) = 0;
          int v32 = *((unsigned __int8 *)v42 + 40);
          if (v32 == 1) {
            char v33 = v42 + 6;
          }
          else {
            char v33 = 0;
          }
          if (v32 != 1) {
            goto LABEL_74;
          }
          uint64_t v34 = *v33;
          if (*v33 == 0xB36710F1590EB0BLL)
          {
            uint64_t v35 = "PARAMETERERROR_INVALIDSCOPE";
          }
          else
          {
            switch(v34)
            {
              case 0x15AAC3129EA7047ELL:
                uint64_t v35 = "PARAMETERERROR_INVALIDPARAMETER";
                break;
              case 0x3A8875D359853A61:
                uint64_t v35 = "PARAMETERERROR_INVALIDELEMENT";
                break;
              case 0xF57D459A0697D042:
                uint64_t v35 = "PARAMETERERROR_UNKNOWN";
                break;
              default:
                uint64_t v35 = "<unknown>";
                break;
            }
          }
          *(void *)&long long v53 = v35;
          adm::util::RTLogger::log<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>((std::chrono::system_clock::time_point *)this + 10, &v47, (int *)&v46, v33, (uint64_t *)&v53);
          uint64_t v36 = *v33;
          if (*v33 == 0xB36710F1590EB0BLL)
          {
            uint64_t v15 = 1651729264;
            goto LABEL_74;
          }
          if (v36 == 0x15AAC3129EA7047ELL)
          {
            uint64_t v15 = 1651536493;
            goto LABEL_74;
          }
          if (v36 == 0x3A8875D359853A61)
          {
            uint64_t v15 = 1650814324;
            goto LABEL_74;
          }
LABEL_73:
          uint64_t v15 = 1970170734;
LABEL_74:
          _Block_object_dispose(&v41, 8);
          goto LABEL_22;
        }
        unint64_t v25 = 0xD651CBD5B1375569;
      }
      else if (v19 > 0x6F7ACC7D3D83C1A7)
      {
        if (v19 == 0x6F7ACC7D3D83C1A8) {
          goto LABEL_55;
        }
        unint64_t v25 = 0x722B4C09C3EA568FLL;
      }
      else
      {
        if (v19 == 0xE95D2CBE682F3546) {
          goto LABEL_55;
        }
        unint64_t v25 = 0x49534BEB5B166B7BLL;
      }
      if (v19 == v25) {
        goto LABEL_55;
      }
      printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v19, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 689);
      _os_crash();
      __break(1u);
LABEL_114:
      printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v22, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 308);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    default:
LABEL_27:
      if (v18)
      {
        unint64_t v12 = "setParameter(%d, %f): converting value to tb failed";
        goto LABEL_21;
      }
LABEL_38:
      unsigned int v24 = *((_DWORD *)this + 20);
      if (v24 > 0x64)
      {
        if (std::chrono::system_clock::now().__d_.__rep_ - *((void *)this + 11) <= 500999) {
          goto LABEL_47;
        }
        LODWORD(v53) = 3;
        *((void *)&v53 + boost::detail::shared_count::~shared_count(this + 1) = "setParameter(%d, %f): converting ex id %d to tb failed";
        LODWORD(v54) = *((_DWORD *)this + 20);
        *(void *)((char *)&v54 + 4) = __PAIR64__(LODWORD(a3), a2);
        HIDWORD(v54) = v17;
        caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v53);
      }
      else
      {
        LODWORD(v53) = 3;
        *((void *)&v53 + boost::detail::shared_count::~shared_count(this + 1) = "setParameter(%d, %f): converting ex id %d to tb failed";
        *(void *)&long long v54 = __PAIR64__(a2, v24);
        *((void *)&v54 + boost::detail::shared_count::~shared_count(this + 1) = __PAIR64__(v17, LODWORD(a3));
        caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v53);
      }
      *((std::chrono::system_clock::time_point *)this + 1boost::detail::shared_count::~shared_count(this + 1) = std::chrono::system_clock::now();
LABEL_47:
      uint64_t v15 = 1651536493;
      int v26 = *((_DWORD *)this + 20);
      if (v26 != -1) {
        *((_DWORD *)this + 20) = v26 + 1;
      }
      goto LABEL_22;
  }
}

void sub_24897CCFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3, int *a4)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    unint64_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + boost::detail::shared_count::~shared_count(this + 1) = a2;
    int rep = a1->__d_.__rep_;
  }
  else
  {
    unint64_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + boost::detail::shared_count::~shared_count(this + 1) = a2;
  }
  int v11 = *a3;
  int v13 = rep;
  int v14 = v11;
  int v15 = *a4;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>(v9, &v12);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

__n128 __Block_byref_object_copy__114(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl12setParameterEjf_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &,tb_error_t &>(std::chrono::system_clock::time_point *a1, int *a2, int *a3, int *a4)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    unint64_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + boost::detail::shared_count::~shared_count(this + 1) = "setParameter(%d, %f): tb call failed: tbError=%d";
    int rep = a1->__d_.__rep_;
  }
  else
  {
    unint64_t v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v12) = 3;
    *((void *)&v12 + boost::detail::shared_count::~shared_count(this + 1) = "setParameter(%d, %f): tb call failed: tbError=%d";
  }
  int v11 = *a2;
  int v13 = rep;
  int v14 = v11;
  int v15 = *a3;
  int v16 = *a4;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>(v9, &v12);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(std::chrono::system_clock::time_point *a1, int *a2, int *a3, uint64_t *a4, uint64_t *a5)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_5;
    }
    int rep = a1->__d_.__rep_;
  }
  int v12 = *a2;
  int v13 = *a3;
  uint64_t v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 80, 8);
  *(_DWORD *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 24) = 3;
  *(void *)(v16 + 32) = "setParameter(%d, %f): tb call failed: failure=%d, %s";
  *(_DWORD *)(v16 + 40) = rep;
  *(_DWORD *)(v16 + 44) = v12;
  *(_DWORD *)(v16 + 48) = v13;
  *(void *)(v16 + ++*(_DWORD *)(this + 56) = v14;
  *(void *)(v16 + 64) = v15;
  *(void *)uint64_t v16 = &unk_26FCA2C40;
  *(void *)(v16 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v16);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(float *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      unint64_t v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = __p;
        if (v17 < 0) {
          uint64_t v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      unint64_t v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 80, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2C18;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2BC0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(float *)(a1 + 24), *(unsigned int *)(a1 + 28));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = __p;
        if (v17 < 0) {
          uint64_t v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2B98;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2B40;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(float *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = __p;
        if (v17 < 0) {
          uint64_t v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2B18;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2AC0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(float *)(a1 + 24), *(unsigned int *)(a1 + 28));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = __p;
        if (v17 < 0) {
          uint64_t v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = __p;
        if (v17 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,float &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 72, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2A98;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(void *)(v4 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2A40;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(float *)(a1 + 36));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      int v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = __p;
        if (v17 < 0) {
          uint64_t v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void adm::graph::ExclaveDSPControllerClientImpl::getParameter(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, __int32 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  int v47 = a2;
  long long v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6)
  {
    int8x8_t v7 = 0;
    goto LABEL_11;
  }
  int8x8_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7 || !*((void *)this + 1))
  {
LABEL_11:
    unsigned int v13 = *((_DWORD *)this + 20);
    if (v13 > 0x64)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *((void *)this + 11) <= 500999) {
        goto LABEL_16;
      }
      LODWORD(v59) = 2;
      *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) getParameter(%d): EK unavailable";
      LODWORD(v60) = *((_DWORD *)this + 20);
      *((void *)&v60 + boost::detail::shared_count::~shared_count(this + 1) = this;
      LODWORD(v6boost::detail::shared_count::~shared_count(this + 1) = a2;
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
    }
    else
    {
      LODWORD(v59) = 2;
      *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) getParameter(%d): EK unavailable";
      LODWORD(v60) = v13;
      *((void *)&v60 + boost::detail::shared_count::~shared_count(this + 1) = this;
      LODWORD(v6boost::detail::shared_count::~shared_count(this + 1) = a2;
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
    }
    *((std::chrono::system_clock::time_point *)this + 1boost::detail::shared_count::~shared_count(this + 1) = std::chrono::system_clock::now();
LABEL_16:
    int v14 = *((_DWORD *)this + 20);
    if (v14 != -1) {
      *((_DWORD *)this + 20) = v14 + 1;
    }
    *(void *)a3 = 1970431354;
    *(unsigned char *)(a3 + 16) = 0;
    if (v7) {
      goto LABEL_23;
    }
    return;
  }
  uint8x8_t v8 = (__int32 *)*((void *)this + 7);
  int v9 = wmemchr(*((__int32 **)this + 6), a2, ((uint64_t)v8 - *((void *)this + 6)) >> 2);
  if (v9) {
    int v10 = v9;
  }
  else {
    int v10 = v8;
  }
  if (v10 == *((__int32 **)this + 7))
  {
    int v12 = "getParameter(%d): parameter not supported";
    goto LABEL_21;
  }
  unint64_t v11 = adm::exclaves::utility::convert_to<std::optional<adm::exclaves::ParameterID>,unsigned int>(a2);
  if (!HIDWORD(v11))
  {
    int v12 = "getParameter(%d): converting id to ex id failed";
LABEL_21:
    adm::util::RTLogger::log<unsigned int &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)v12, &v47);
LABEL_22:
    *(void *)a3 = 1651536493;
    *(unsigned char *)(a3 + 16) = 0;
LABEL_23:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return;
  }
  unsigned int v15 = v11;
  uint64_t v16 = adm::exclaves::utility::convert_to<std::optional<audiodsputility_parameterid_s>,adm::exclaves::ParameterID>(v11);
  if (!v17)
  {
    unsigned int v21 = *((_DWORD *)this + 20);
    if (v21 > 0x64)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *((void *)this + 11) <= 500999) {
        goto LABEL_36;
      }
      LODWORD(v59) = 3;
      *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): converting ex id %d to tb failed";
      LODWORD(v60) = *((_DWORD *)this + 20);
      *(void *)((char *)&v60 + 4) = __PAIR64__(v15, a2);
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
    }
    else
    {
      LODWORD(v59) = 3;
      *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): converting ex id %d to tb failed";
      *(void *)&long long v60 = __PAIR64__(a2, v21);
      DWORD2(v60) = v15;
      caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
    }
    *((std::chrono::system_clock::time_point *)this + 1boost::detail::shared_count::~shared_count(this + 1) = std::chrono::system_clock::now();
LABEL_36:
    int v23 = *((_DWORD *)this + 20);
    if (v23 != -1) {
      *((_DWORD *)this + 20) = v23 + 1;
    }
    goto LABEL_22;
  }
  uint64_t v18 = v16;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x4002000000;
  unint64_t v45 = __Block_byref_object_copy__75;
  float v46 = __Block_byref_object_dispose__76;
  v38[0] = MEMORY[0x263EF8330];
  v38[1] = 0x40000000;
  unint64_t v39 = ___ZNK3adm5graph30ExclaveDSPControllerClientImpl12getParameterEj_block_invoke;
  uint8x8_t v40 = &unk_2652430F8;
  uint64_t v41 = &v42;
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  uint64_t v65 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  int v19 = tb_client_connection_message_construct();
  if (v19)
  {
    int v20 = v19;
    goto LABEL_46;
  }
  tb_message_encode_u64();
  tb_message_encode_u64();
  if (v18 <= (uint64_t)0xE95D2CBE682F3545)
  {
    if (v18 == 0x8A4D9A6CD80AC7E5 || v18 == 0xA743B5FF2B4E9891)
    {
LABEL_44:
      tb_message_complete();
      uint64_t v52 = 0;
      int v20 = tb_connection_send_query();
      if ((v20 & 0xFFFFFFF7) != 0)
      {
LABEL_45:
        tb_client_connection_message_destruct();
        goto LABEL_46;
      }
      if (!v52)
      {
        int v20 = 4;
        goto LABEL_45;
      }
      long long v50 = 0uLL;
      uint64_t v51 = 0;
      tb_message_decode_u8();
      if ((_BYTE)v50)
      {
        if (v50 == 1)
        {
          tb_message_decode_u64();
          uint64_t v28 = *((void *)&v50 + 1);
          if (*((uint64_t *)&v50 + 1) > 0x15AAC3129EA7047DLL)
          {
            if (*((void *)&v50 + 1) == 0x15AAC3129EA7047ELL) {
              goto LABEL_84;
            }
            unint64_t v29 = 0x3A8875D359853A61;
          }
          else
          {
            if (*((void *)&v50 + 1) == 0xF57D459A0697D042) {
              goto LABEL_84;
            }
            unint64_t v29 = 0xB36710F1590EB0BLL;
          }
          goto LABEL_69;
        }
        goto LABEL_82;
      }
      tb_message_decode_u64();
      if (*((uint64_t *)&v50 + 1) <= (uint64_t)0xF876E807C3E4A3E6)
      {
        if (*((void *)&v50 + 1) != 0x8695345E04E75645 && *((void *)&v50 + 1) != 0xBA94426FF040F022)
        {
          unint64_t v30 = 0xE9CAC24E271E1010;
LABEL_74:
          if (*((void *)&v50 + 1) != v30) {
            goto LABEL_82;
          }
        }
      }
      else if (*((uint64_t *)&v50 + 1) > 0x67D58230E14B515ALL)
      {
        if (*((void *)&v50 + 1) != 0x67D58230E14B515BLL)
        {
          if (*((void *)&v50 + 1) == 0x7F1E21C17219CAE8)
          {
            tb_message_decode_u64();
            uint64_t v28 = v51;
            if (v51 <= (uint64_t)0xB941EFAD2C01A1F6)
            {
              if (v51 == 0x8D3025BDD0206734 || v51 == 0x966DBF642921EE02) {
                goto LABEL_84;
              }
              unint64_t v29 = 0x996B795339B4732BLL;
            }
            else if (v51 > 0xE69699D348D1431)
            {
              if (v51 == 0xE69699D348D1432) {
                goto LABEL_84;
              }
              unint64_t v29 = 0x2C1A98D65FB58883;
            }
            else
            {
              if (v51 == 0xB941EFAD2C01A1F7) {
                goto LABEL_84;
              }
              unint64_t v29 = 0xF7C7674340E151C8;
            }
LABEL_69:
            if (v28 != v29) {
              goto LABEL_82;
            }
LABEL_84:
            long long v48 = v50;
            uint64_t v49 = v51;
            v39((uint64_t)v38, (__n128 *)&v48);
            tb_client_connection_message_destruct();
            int v31 = *((unsigned __int8 *)v43 + 40);
            if (v31 == 1) {
              int v32 = v43 + 6;
            }
            else {
              int v32 = 0;
            }
            if (v31 != 1)
            {
              if (*((unsigned char *)v43 + 40)) {
                uint64_t v35 = 0;
              }
              else {
                uint64_t v35 = v43 + 6;
              }
              unint64_t v36 = adm::exclaves::utility::convert_to<std::optional<float>,audiodsputility_parametervalue_s>(v35);
              if (!HIDWORD(v36))
              {
                adm::util::RTLogger::log<unsigned int &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)"getParameter(%d): value conversion failed", &v47);
                _Block_object_dispose(&v42, 8);
                goto LABEL_22;
              }
              *(_DWORD *)a3 = v36;
              char v26 = 1;
LABEL_55:
              *(unsigned char *)(a3 + 16) = v26;
              _Block_object_dispose(&v42, 8);
              goto LABEL_23;
            }
            uint64_t v33 = *v32;
            if (*v32 == 0xB36710F1590EB0BLL)
            {
              uint64_t v34 = "PARAMETERERROR_INVALIDSCOPE";
            }
            else
            {
              switch(v33)
              {
                case 0x15AAC3129EA7047ELL:
                  uint64_t v34 = "PARAMETERERROR_INVALIDPARAMETER";
                  break;
                case 0x3A8875D359853A61:
                  uint64_t v34 = "PARAMETERERROR_INVALIDELEMENT";
                  break;
                case 0xF57D459A0697D042:
                  uint64_t v34 = "PARAMETERERROR_UNKNOWN";
                  break;
                default:
                  uint64_t v34 = "<unknown>";
                  break;
              }
            }
            *(void *)&long long v59 = v34;
            adm::util::RTLogger::log<unsigned int &,audiodsputility_parametererror_s const&,char const*>((std::chrono::system_clock::time_point *)this + 10, &v47, v32, (uint64_t *)&v59);
            uint64_t v37 = *v32;
            if (*v32 == 0xB36710F1590EB0BLL)
            {
              uint64_t v27 = 1651729264;
            }
            else if (v37 == 0x15AAC3129EA7047ELL)
            {
              uint64_t v27 = 1651536493;
            }
            else if (v37 == 0x3A8875D359853A61)
            {
              uint64_t v27 = 1650814324;
            }
            else
            {
              uint64_t v27 = 1970170734;
            }
            char v26 = 0;
LABEL_54:
            *(void *)a3 = v27;
            goto LABEL_55;
          }
LABEL_82:
          tb_client_connection_message_destruct();
          int v20 = 7;
LABEL_46:
          unsigned int v24 = *((_DWORD *)this + 20);
          if (v24 > 0x64)
          {
            if (std::chrono::system_clock::now().__d_.__rep_ - *((void *)this + 11) <= 500999)
            {
LABEL_51:
              int v25 = *((_DWORD *)this + 20);
              if (v25 != -1) {
                *((_DWORD *)this + 20) = v25 + 1;
              }
              char v26 = 0;
              uint64_t v27 = 1970170734;
              goto LABEL_54;
            }
            LODWORD(v59) = 3;
            *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): tb call failed: tbError=%d";
            LODWORD(v60) = *((_DWORD *)this + 20);
            *(void *)((char *)&v60 + 4) = __PAIR64__(v20, a2);
            caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
          }
          else
          {
            LODWORD(v59) = 3;
            *((void *)&v59 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): tb call failed: tbError=%d";
            *(void *)&long long v60 = __PAIR64__(a2, v24);
            DWORD2(v60) = v20;
            caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), &v59);
          }
          *((std::chrono::system_clock::time_point *)this + 1boost::detail::shared_count::~shared_count(this + 1) = std::chrono::system_clock::now();
          goto LABEL_51;
        }
      }
      else if (*((void *)&v50 + 1) != 0xF876E807C3E4A3E7)
      {
        unint64_t v30 = 0x23580A01CC35D89ELL;
        goto LABEL_74;
      }
      tb_message_decode_BOOL();
      goto LABEL_84;
    }
    unint64_t v22 = 0xD651CBD5B1375569;
  }
  else if (v18 > 0x6F7ACC7D3D83C1A7)
  {
    if (v18 == 0x6F7ACC7D3D83C1A8) {
      goto LABEL_44;
    }
    unint64_t v22 = 0x722B4C09C3EA568FLL;
  }
  else
  {
    if (v18 == 0xE95D2CBE682F3546) {
      goto LABEL_44;
    }
    unint64_t v22 = 0x49534BEB5B166B7BLL;
  }
  if (v18 == v22) {
    goto LABEL_44;
  }
  printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v18, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 689);
  _os_crash();
  __break(1u);
}

void sub_24897F088(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 __Block_byref_object_copy__75(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 ___ZNK3adm5graph30ExclaveDSPControllerClientImpl12getParameterEj_block_invoke(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  __n128 result = *a2;
  *(void *)(v2 + ++*(_DWORD *)(this + 56) = a2[1].n128_u64[0];
  *(__n128 *)(v2 + 40) = result;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,audiodsputility_parametererror_s const&,char const*>(std::chrono::system_clock::time_point *a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    int v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v13) = 3;
    *((void *)&v13 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): tb call failed: failure=%d, %s";
    int rep = a1->__d_.__rep_;
  }
  else
  {
    int v9 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v13) = 3;
    *((void *)&v13 + boost::detail::shared_count::~shared_count(this + 1) = "getParameter(%d): tb call failed: failure=%d, %s";
  }
  int v11 = *a2;
  int v14 = rep;
  int v15 = v11;
  uint64_t v12 = *a4;
  uint64_t v16 = *a3;
  uint64_t v17 = v12;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>(v9, &v13);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2A18;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA29C0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      long long v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,adm::exclaves::ParameterID const&>(adm::util::RTLogLevel,char const*,unsigned int &,adm::exclaves::ParameterID const&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 72, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2918;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(void *)(v4 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA28C0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(void *)(a1 + 24), *(void *)(a1 + 32));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      long long v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2898;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2840;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      long long v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 72, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2818;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(void *)(v4 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA27C0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24), *(unsigned int *)(a1 + 32));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      int8x8_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint8x8_t v8 = __p;
        if (v17 < 0) {
          uint8x8_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      long long v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        int v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void *adm::graph::ExclaveDSPControllerClientImpl::getOutputParameterIDs@<X0>(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *((const void **)this + 6), *((void *)this + 7), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2);
}

void *adm::graph::ExclaveDSPControllerClientImpl::getInputParameterIDs@<X0>(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *((const void **)this + 3), *((void *)this + 4), (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2);
}

BOOL adm::graph::ExclaveDSPControllerClientImpl::hasOutputParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2)
{
  uint64_t v3 = (__int32 *)*((void *)this + 7);
  int v4 = wmemchr(*((__int32 **)this + 6), a2, ((uint64_t)v3 - *((void *)this + 6)) >> 2);
  if (v4) {
    long long v5 = v4;
  }
  else {
    long long v5 = v3;
  }
  return v5 != *((__int32 **)this + 7);
}

BOOL adm::graph::ExclaveDSPControllerClientImpl::hasInputParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2)
{
  uint64_t v3 = (__int32 *)*((void *)this + 4);
  int v4 = wmemchr(*((__int32 **)this + 3), a2, ((uint64_t)v3 - *((void *)this + 3)) >> 2);
  if (v4) {
    long long v5 = v4;
  }
  else {
    long long v5 = v3;
  }
  return v5 != *((__int32 **)this + 4);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::ioStopped(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3 && *((void *)this + 1))
    {
      adm_log_object = get_adm_log_object();
      if (os_signpost_enabled(adm_log_object))
      {
        *(_WORD *)std::string buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, adm_log_object, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::IOStopped", (const char *)&unk_2489B4309, buf, 2u);
      }
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      *(_OWORD *)std::string buf = 0u;
      long long v13 = 0u;
      int v5 = tb_client_connection_message_construct();
      if (!v5)
      {
        tb_message_encode_u64();
        tb_message_complete();
        int v5 = tb_connection_send_query();
        tb_client_connection_message_destruct();
      }
      long long v6 = get_adm_log_object();
      if (os_signpost_enabled(v6))
      {
        *(_WORD *)std::string buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::IOStopped", (const char *)&unk_2489B4309, buf, 2u);
      }
      int8x8_t v7 = get_adm_log_object();
      uint8x8_t v8 = v7;
      if (v5)
      {
        uint64_t v9 = 1970170734;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v5;
          _os_log_error_impl(&dword_248947000, v8, OS_LOG_TYPE_ERROR, "tb call to iostopped failed: %d", buf, 8u);
        }
      }
      else
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_248947000, v8, OS_LOG_TYPE_DEFAULT, "ioStopped() completed", buf, 2u);
        }
        uint64_t v9 = 0;
      }
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      return v9;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v10 = get_adm_log_object();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_248947000, v10, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) ioStopped: EK unavailable", buf, 0xCu);
  }
  uint64_t v9 = 0;
  if (v3) {
    goto LABEL_17;
  }
  return v9;
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::process(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5 && *(void *)(a1 + 8))
    {
      if (!*(_DWORD *)(a1 + 72))
      {
LABEL_23:
        adm::util::RTLogger::log<>((std::chrono::system_clock::time_point *)(a1 + 80), (uint64_t)"copyDataFromABLToInboundBuffer failed.");
LABEL_25:
        uint64_t v17 = 1970170734;
        goto LABEL_26;
      }
      long long v6 = *(_DWORD **)(a2 + 72);
      if (*v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = v6 + 3;
        while (!exclaves_inbound_buffer_copyin())
        {
          unsigned int v10 = *v9;
          v9 += 4;
          v8 += v10;
          if (++v7 >= (unint64_t)*v6) {
            goto LABEL_9;
          }
        }
        goto LABEL_23;
      }
LABEL_9:
      int v12 = *(_DWORD *)(a2 + 64);
      os_log_type_t v11 = (int *)(a2 + 64);
      if (v12 != *(_DWORD *)(a1 + 76))
      {
        adm::util::RTLogger::log<unsigned int const&,unsigned int &>((std::chrono::system_clock::time_point *)(a1 + 80), (uint64_t)"IO proc block size %u doesn't match the block size of the ExclaveDSPControllerClient %u", v11, (int *)(a1 + 76));
        goto LABEL_25;
      }
      uint64_t v32 = 0;
      uint64_t v33 = &v32;
      uint64_t v34 = 0x3802000000;
      uint64_t v35 = __Block_byref_object_copy__47;
      unint64_t v36 = __Block_byref_object_dispose__48;
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 0x40000000;
      unint64_t v29 = ___ZN3adm5graph30ExclaveDSPControllerClientImpl7processERKN4AMCP11Proc_StreamE_block_invoke;
      unint64_t v30 = &unk_2652430D0;
      int v31 = &v32;
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      uint64_t v52 = 0;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      int v13 = tb_client_connection_message_construct();
      if (v13)
      {
        int v14 = v13;
        goto LABEL_30;
      }
      tb_message_encode_u64();
      tb_message_complete();
      uint64_t v39 = 0;
      int v14 = tb_connection_send_query();
      if ((v14 & 0xFFFFFFF7) != 0) {
        goto LABEL_29;
      }
      if (!v39)
      {
        int v14 = 4;
LABEL_29:
        tb_client_connection_message_destruct();
        goto LABEL_30;
      }
      uint64_t v37 = 0;
      int64_t v38 = 0;
      tb_message_decode_u8();
      if (v37 == 1)
      {
        tb_message_decode_u64();
        int64_t v21 = v38;
        if (v38 > (uint64_t)0xF0BC6BC4DC856BF3)
        {
          if (v38 == 0xF0BC6BC4DC856BF4) {
            goto LABEL_49;
          }
          unint64_t v22 = 0x5C86F7F42A29C41BLL;
        }
        else
        {
          if (v38 == 0xB2C107004910703DLL) {
            goto LABEL_49;
          }
          unint64_t v22 = 0xD0513AF3527449BDLL;
        }
        if (v38 == v22) {
          goto LABEL_49;
        }
      }
      else if (!(_BYTE)v37)
      {
        int64_t v21 = v38;
LABEL_49:
        v29((uint64_t)v28, v37, v21);
        tb_client_connection_message_destruct();
        int v23 = *((unsigned __int8 *)v33 + 40);
        if (v23 == 1) {
          unsigned int v24 = v33 + 6;
        }
        else {
          unsigned int v24 = 0;
        }
        if (v23 == 1)
        {
          uint64_t v25 = *v24;
          if (*v24 == 0xB2C107004910703DLL)
          {
            char v26 = "PROCESSERROR_ANOMALYDETECTED";
          }
          else
          {
            switch(v25)
            {
              case 0xD0513AF3527449BDLL:
                char v26 = "PROCESSERROR_FORMATNOTSUPPORTED";
                break;
              case 0x5C86F7F42A29C41BLL:
                char v26 = "PROCESSERROR_UNINITIALIZED";
                break;
              case 0xF0BC6BC4DC856BF4:
                char v26 = "PROCESSERROR_UNKNOWN";
                break;
              default:
                char v26 = "<unknown>";
                break;
            }
          }
          *(void *)&long long v46 = v26;
          adm::util::RTLogger::log<audiodsputility_processerror_s const&,char const*>((std::chrono::system_clock::time_point *)(a1 + 80), v24, (uint64_t *)&v46);
          uint64_t v27 = *v24;
          if (*v24 == 0xB2C107004910703DLL)
          {
            uint64_t v17 = 1634627437;
          }
          else if (v27 == 0xD0513AF3527449BDLL)
          {
            uint64_t v17 = 1969646964;
          }
          else if (v27 == 0x5C86F7F42A29C41BLL)
          {
            uint64_t v17 = 1768843636;
          }
          else
          {
            uint64_t v17 = 1970170734;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        goto LABEL_37;
      }
      tb_client_connection_message_destruct();
      int v14 = 7;
LABEL_30:
      unsigned int v19 = *(_DWORD *)(a1 + 80);
      if (v19 > 0x64)
      {
        if (std::chrono::system_clock::now().__d_.__rep_ - *(void *)(a1 + 88) <= 500999) {
          goto LABEL_35;
        }
        LODWORD(v46) = 3;
        *((void *)&v46 + boost::detail::shared_count::~shared_count(this + 1) = "tb call to process failed: tbError=%d";
        LODWORD(v47) = *(_DWORD *)(a1 + 80);
        DWORD1(v47) = v14;
        caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>((caulk::concurrent::messenger *)(a1 + 96), &v46);
      }
      else
      {
        LODWORD(v46) = 3;
        *((void *)&v46 + boost::detail::shared_count::~shared_count(this + 1) = "tb call to process failed: tbError=%d";
        *(void *)&long long v47 = __PAIR64__(v14, v19);
        caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>((caulk::concurrent::messenger *)(a1 + 96), &v46);
      }
      *(std::chrono::system_clock::time_point *)(a1 + 88) = std::chrono::system_clock::now();
LABEL_35:
      uint64_t v17 = 1970170734;
      int v20 = *(_DWORD *)(a1 + 80);
      if (v20 != -1) {
        *(_DWORD *)(a1 + 80) = v20 + 1;
      }
LABEL_37:
      _Block_object_dispose(&v32, 8);
      goto LABEL_26;
    }
  }
  else
  {
    int v5 = 0;
  }
  unsigned int v15 = *(_DWORD *)(a1 + 80);
  if (v15 > 0x64)
  {
    if (std::chrono::system_clock::now().__d_.__rep_ - *(void *)(a1 + 88) <= 500999) {
      goto LABEL_18;
    }
    LODWORD(v46) = 2;
    *((void *)&v46 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) process: EK unavailable";
    LODWORD(v47) = *(_DWORD *)(a1 + 80);
    *((void *)&v47 + boost::detail::shared_count::~shared_count(this + 1) = a1;
    caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>((caulk::concurrent::messenger *)(a1 + 96), &v46);
  }
  else
  {
    LODWORD(v46) = 2;
    *((void *)&v46 + boost::detail::shared_count::~shared_count(this + 1) = "ControllerClient(%p) process: EK unavailable";
    LODWORD(v47) = v15;
    *((void *)&v47 + boost::detail::shared_count::~shared_count(this + 1) = a1;
    caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>((caulk::concurrent::messenger *)(a1 + 96), &v46);
  }
  *(std::chrono::system_clock::time_point *)(a1 + 88) = std::chrono::system_clock::now();
LABEL_18:
  int v16 = *(_DWORD *)(a1 + 80);
  if (v16 == -1)
  {
    uint64_t v17 = 0;
    if (!v5) {
      return v17;
    }
  }
  else
  {
    uint64_t v17 = 0;
    *(_DWORD *)(a1 + 80) = v16 + 1;
    if (!v5) {
      return v17;
    }
  }
LABEL_26:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v17;
}

void sub_248980DE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__47(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl7processERKN4AMCP11Proc_StreamE_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<audiodsputility_processerror_s const&,char const*>(std::chrono::system_clock::time_point *a1, uint64_t *a2, uint64_t *a3)
{
  int rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) > 0x64)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000) {
      goto LABEL_6;
    }
    uint64_t v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + boost::detail::shared_count::~shared_count(this + 1) = "tb call to process failed: failure=%d, %s";
    int rep = a1->__d_.__rep_;
  }
  else
  {
    uint64_t v7 = (caulk::concurrent::messenger *)&a1[2];
    LODWORD(v10) = 3;
    *((void *)&v10 + boost::detail::shared_count::~shared_count(this + 1) = "tb call to process failed: failure=%d, %s";
  }
  int v11 = rep;
  uint64_t v9 = *a3;
  uint64_t v12 = *a2;
  uint64_t v13 = v9;
  caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>(v7, &v10);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_6:
  if (LODWORD(a1->__d_.__rep_) != -1) {
    ++LODWORD(a1->__d_.__rep_);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 72, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2798;
  *(void *)(v4 + 8) = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  *(void *)(v4 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2740;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24), *(void *)(a1 + 32));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = __p;
        if (v17 < 0) {
          uint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        long long v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        long long v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 56, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2718;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(void *)(v4 + 40) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA26C0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = __p;
        if (v17 < 0) {
          uint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        long long v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        long long v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA2598;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 40) = a2[1];
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA2540;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(void *)(a1 + 24));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      uint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = __p;
        if (v17 < 0) {
          uint64_t v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        long long v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      uint64_t v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = __p;
        if (v17 < 0) {
          int v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        long long v6 = __p;
        if (v17 < 0) {
          long long v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)std::string buf = 136315394;
        unsigned int v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        long long v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::ioStarting(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3 && *((void *)this + 1))
    {
      adm_log_object = get_adm_log_object();
      if (os_signpost_enabled(adm_log_object))
      {
        *(_WORD *)std::string buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, adm_log_object, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::IOStarting", (const char *)&unk_2489B4309, buf, 2u);
      }
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      *(_OWORD *)std::string buf = 0u;
      long long v13 = 0u;
      int v5 = tb_client_connection_message_construct();
      if (!v5)
      {
        tb_message_encode_u64();
        tb_message_complete();
        int v5 = tb_connection_send_query();
        tb_client_connection_message_destruct();
      }
      long long v6 = get_adm_log_object();
      if (os_signpost_enabled(v6))
      {
        *(_WORD *)std::string buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::IOStarting", (const char *)&unk_2489B4309, buf, 2u);
      }
      uint64_t v7 = get_adm_log_object();
      uint64_t v8 = v7;
      if (v5)
      {
        uint64_t v9 = 1970170734;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v5;
          _os_log_error_impl(&dword_248947000, v8, OS_LOG_TYPE_ERROR, "tb call to iostarting failed: %d", buf, 8u);
        }
      }
      else
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_248947000, v8, OS_LOG_TYPE_DEFAULT, "ioStarting() completed", buf, 2u);
        }
        uint64_t v9 = 0;
      }
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      return v9;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  long long v10 = get_adm_log_object();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = this;
    _os_log_impl(&dword_248947000, v10, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) ioStarting: EK unavailable", buf, 0xCu);
  }
  uint64_t v9 = 0;
  if (v3) {
    goto LABEL_17;
  }
  return v9;
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    long long v17 = std::__shared_weak_count::lock(v9);
    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      if (v18)
      {
        *(_DWORD *)(a1 + 76) = a5;
        adm::exclaves::utility::convert_to<std::optional<audiodsptypes_streamdescription_s>,CA::StreamDescription>((uint64_t)v46, a2);
        adm::exclaves::utility::convert_to<std::optional<audiodsptypes_streamdescription_s>,CA::StreamDescription>((uint64_t)v45, a3);
        adm::exclaves::utility::convert_to<std::optional<audiodsptypes_streamdescription_s>,CA::StreamDescription>((uint64_t)v44, a4);
        if (a6 == 1)
        {
          int v19 = 0;
          uint64_t v20 = 0x3DF307DCB5382200;
          uint64_t v21 = 243;
        }
        else
        {
          if (a6)
          {
            uint64_t v20 = 0;
            uint64_t v25 = 0;
            uint64_t v21 = 0;
            int v19 = 1;
LABEL_16:
            v43[0] = v21 | v20;
            v43[1] = v25;
            uint64_t v26 = 0x29D9165411843273;
            if (a7 != 1886216809) {
              uint64_t v26 = 0;
            }
            v42[0] = v26;
            v42[1] = a7 == 1886216809;
            int64x2_t v27 = 0uLL;
            int v28 = 1;
            if (a8 > 1885892726)
            {
              if (a8 > 1886613610)
              {
                if (a8 > 1886680174)
                {
                  if (a8 == 1886680175)
                  {
                    unint64_t v29 = 0xDEBD14632E00370BLL;
                  }
                  else
                  {
                    if (a8 != 1886745455) {
                      goto LABEL_58;
                    }
                    unint64_t v29 = 0xE0BAAD14F9DBDDF0;
                  }
                }
                else if (a8 == 1886613611)
                {
                  unint64_t v29 = 0x2F66DF9B2814CFB5;
                }
                else
                {
                  if (a8 != 1886614639) {
                    goto LABEL_58;
                  }
                  unint64_t v29 = 0x57839668489FE6E1;
                }
              }
              else if (a8 > 1886154612)
              {
                if (a8 == 1886154613)
                {
                  unint64_t v29 = 0x92D97930F1887DE3;
                }
                else
                {
                  if (a8 != 1886545251) {
                    goto LABEL_58;
                  }
                  unint64_t v29 = 0xFE52B066A3299AA1;
                }
              }
              else if (a8 == 1885892727)
              {
                unint64_t v29 = 0xF8050C060D986E6BLL;
              }
              else
              {
                if (a8 != 1886152047) {
                  goto LABEL_58;
                }
                unint64_t v29 = 0xA5B814BA7E080C1ALL;
              }
            }
            else if (a8 > 1885888866)
            {
              if (a8 > 1885892673)
              {
                if (a8 == 1885892674)
                {
                  unint64_t v29 = 0x7E234EE52CCEAB90;
                }
                else
                {
                  if (a8 != 1885892706) {
                    goto LABEL_58;
                  }
                  unint64_t v29 = 0xB5C617462A130B2FLL;
                }
              }
              else if (a8 == 1885888867)
              {
                unint64_t v29 = 0xC355D4D55002AF8CLL;
              }
              else
              {
                if (a8 != 1885889645) {
                  goto LABEL_58;
                }
                unint64_t v29 = 0x455F57CA4B039ED9;
              }
            }
            else if (a8 > 1885433974)
            {
              if (a8 == 1885433975)
              {
                unint64_t v29 = 0x5814DD695070736FLL;
              }
              else
              {
                if (a8 != 1885631344) {
                  goto LABEL_58;
                }
                unint64_t v29 = 0xD333A5300DE06CF0;
              }
            }
            else if (a8 == 1885433964)
            {
              unint64_t v29 = 0xAC3D9F9FC752B77DLL;
            }
            else
            {
              if (a8 != 1885433971) {
                goto LABEL_58;
              }
              unint64_t v29 = 0xB89E299E0626F289;
            }
            int v28 = 0;
            int64x2_t v27 = vdupq_n_s64(1uLL);
            v27.i64[0] = v29;
LABEL_58:
            int64x2_t v41 = v27;
            if (!v46[24])
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                int v31 = "failed to convert mic format";
                goto LABEL_73;
              }
LABEL_11:
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              return v23;
            }
            if (!v45[24])
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                int v31 = "failed to convert ref format";
                goto LABEL_73;
              }
              goto LABEL_11;
            }
            if (!v44[24])
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                int v31 = "failed to convert out format";
                goto LABEL_73;
              }
              goto LABEL_11;
            }
            if (a7 != 1886216809)
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                int v31 = "failed to convert input port";
                goto LABEL_73;
              }
              goto LABEL_11;
            }
            if (v28)
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                int v31 = "failed to convert output port";
LABEL_73:
                _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, 2u);
                goto LABEL_11;
              }
              goto LABEL_11;
            }
            if (v19)
            {
              uint64_t v23 = 1651536493;
              adm_log_object = get_adm_log_object();
              if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR)) {
                goto LABEL_11;
              }
              LOWORD(buf) = 0;
              int v31 = "failed to convert latency";
              goto LABEL_73;
            }
            if (!*(_DWORD *)(a1 + 72))
            {
              uint64_t v23 = 1768843636;
              adm_log_object = get_adm_log_object();
              if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR)) {
                goto LABEL_11;
              }
              LOWORD(buf) = 0;
              int v31 = "failed to create refStreamInboundBuffer";
              goto LABEL_73;
            }
            adm::ScopedSignpostTBCallPrepareForIO::ScopedSignpostTBCallPrepareForIO((uint64_t)v40);
            *(void *)&long long buf = 0;
            *((void *)&buf + boost::detail::shared_count::~shared_count(this + 1) = &buf;
            uint64_t v50 = 0x3802000000;
            long long v51 = __Block_byref_object_copy__40;
            uint64_t v52 = __Block_byref_object_dispose__41;
            int v32 = audiodspcontroller_audiodspcontrol_prepareforio(v18, a5, (uint64_t)v46, (uint64_t)v45, (uint64_t)v44, v43, v42, v41.i64);
            adm::ScopedSignpostTBCallPrepareForIO::closeNow((adm::ScopedSignpostTBCallPrepareForIO *)v40);
            if (v32)
            {
              uint64_t v23 = 1970170734;
              uint64_t v33 = get_adm_log_object();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long v47 = 67109120;
                LODWORD(v48) = v32;
                _os_log_error_impl(&dword_248947000, v33, OS_LOG_TYPE_ERROR, "tb call to configure failed: tbError=%d", v47, 8u);
              }
              goto LABEL_94;
            }
            int v34 = *(unsigned __int8 *)(*((void *)&buf + 1) + 40);
            if (v34 == 1) {
              uint64_t v35 = (uint64_t *)(*((void *)&buf + 1) + 48);
            }
            else {
              uint64_t v35 = 0;
            }
            if (v34 != 1)
            {
              uint64_t v23 = 0;
LABEL_94:
              _Block_object_dispose(&buf, 8);
              adm::ScopedSignpostTBCallPrepareForIO::~ScopedSignpostTBCallPrepareForIO((adm::ScopedSignpostTBCallPrepareForIO *)v40);
              goto LABEL_11;
            }
            unint64_t v36 = get_adm_log_object();
            if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
LABEL_89:
              uint64_t v37 = *v35;
              if (*v35 > 0x721C3F2F787AA9CLL)
              {
                switch(v37)
                {
                  case 0x721C3F2F787AA9DLL:
                    uint64_t v23 = 1684498798;
                    goto LABEL_94;
                  case 0xB6B27F51290F905:
                    uint64_t v23 = 1684496757;
                    goto LABEL_94;
                  case 0x33D96A0AB5A284C2:
                    uint64_t v23 = 1684500595;
                    goto LABEL_94;
                }
              }
              else
              {
                switch(v37)
                {
                  case 0xA79E13CA15F5775CLL:
                    uint64_t v23 = 1684497264;
                    goto LABEL_94;
                  case 0xAD6FFC2BEEE2EB53:
                    uint64_t v23 = 1970431354;
                    goto LABEL_94;
                  case 0xF9A9592E1248F97ALL:
                    uint64_t v23 = 1969646964;
                    goto LABEL_94;
                }
              }
              uint64_t v23 = 1970170734;
              goto LABEL_94;
            }
            uint64_t v38 = *v35;
            if (*v35 > 0x721C3F2F787AA9CLL)
            {
              switch(v38)
              {
                case 0x721C3F2F787AA9DLL:
                  uint64_t v39 = "SETUPERROR_INITIALIZING";
                  goto LABEL_120;
                case 0xB6B27F51290F905:
                  uint64_t v39 = "SETUPERROR_SETTINGAUSTRIP";
                  goto LABEL_120;
                case 0x33D96A0AB5A284C2:
                  uint64_t v39 = "SETUPERROR_SETTINGPROPSTRIP";
                  goto LABEL_120;
              }
            }
            else
            {
              switch(v38)
              {
                case 0xA79E13CA15F5775CLL:
                  uint64_t v39 = "SETUPERROR_COMPILINGGRAPH";
                  goto LABEL_120;
                case 0xAD6FFC2BEEE2EB53:
                  uint64_t v39 = "SETUPERROR_PARSINGDATABASE";
                  goto LABEL_120;
                case 0xF9A9592E1248F97ALL:
                  uint64_t v39 = "SETUPERROR_FORMATNOTSUPPORTED";
LABEL_120:
                  *(_DWORD *)long long v47 = 136315138;
                  long long v48 = v39;
                  _os_log_error_impl(&dword_248947000, v36, OS_LOG_TYPE_ERROR, "tb call to configure failed: failure=%s", v47, 0xCu);
                  goto LABEL_89;
              }
            }
            if (v38 == 0x7F9919C7ACD04D39) {
              uint64_t v39 = "SETUPERROR_UNKNOWN";
            }
            else {
              uint64_t v39 = "<unknown>";
            }
            goto LABEL_120;
          }
          int v19 = 0;
          uint64_t v20 = 0x8C3BC6B79890B00;
          uint64_t v21 = 133;
        }
        uint64_t v25 = 1;
        goto LABEL_16;
      }
    }
  }
  else
  {
    long long v17 = 0;
  }
  uint64_t v22 = get_adm_log_object();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_248947000, v22, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) configure: EK unavailable", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v23 = 1970431354;
  if (v17) {
    goto LABEL_11;
  }
  return v23;
}

uint64_t adm::ScopedSignpostTBCallPrepareForIO::ScopedSignpostTBCallPrepareForIO(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  adm_log_object = get_adm_log_object();
  if (os_signpost_enabled(adm_log_object))
  {
    *(_WORD *)int v4 = 0;
    _os_signpost_emit_with_name_impl(&dword_248947000, adm_log_object, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::PrepareForIO", (const char *)&unk_2489B4309, v4, 2u);
  }
  return a1;
}

__n128 __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl9configureERKN2CA17StreamDescriptionES5_S5_jNS_8exclaves17MicRefLatencyTypeENS6_9InputPortENS6_10OutputPortE_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

void adm::ScopedSignpostTBCallPrepareForIO::closeNow(adm::ScopedSignpostTBCallPrepareForIO *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this)
  {
    *(unsigned char *)this = 0;
    int v2 = *((unsigned __int8 *)this + 16);
    adm_log_object = get_adm_log_object();
    BOOL v4 = os_signpost_enabled(adm_log_object);
    if (v2)
    {
      if (!v4) {
        return;
      }
      uint64_t v5 = *((void *)this + 1);
      int v10 = 136315138;
      uint64_t v11 = v5;
      long long v6 = "%s";
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_BEGIN;
      uint32_t v9 = 12;
    }
    else
    {
      if (!v4) {
        return;
      }
      LOWORD(v10) = 0;
      long long v6 = (const char *)&unk_2489B4309;
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v9 = 2;
    }
    _os_signpost_emit_with_name_impl(&dword_248947000, v7, v8, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::PrepareForIO", v6, (uint8_t *)&v10, v9);
  }
}

void adm::ScopedSignpostTBCallPrepareForIO::~ScopedSignpostTBCallPrepareForIO(adm::ScopedSignpostTBCallPrepareForIO *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this)
  {
    *(unsigned char *)this = 0;
    int v2 = *((unsigned __int8 *)this + 16);
    adm_log_object = get_adm_log_object();
    BOOL v4 = os_signpost_enabled(adm_log_object);
    if (v2)
    {
      if (!v4) {
        return;
      }
      uint64_t v5 = *((void *)this + 1);
      int v10 = 136315138;
      uint64_t v11 = v5;
      long long v6 = "%s";
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_BEGIN;
      uint32_t v9 = 12;
    }
    else
    {
      if (!v4) {
        return;
      }
      LOWORD(v10) = 0;
      long long v6 = (const char *)&unk_2489B4309;
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v9 = 2;
    }
    _os_signpost_emit_with_name_impl(&dword_248947000, v7, v8, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::PrepareForIO", v6, (uint8_t *)&v10, v9);
  }
}

void adm::graph::ExclaveDSPControllerClientSharedDSP::~ExclaveDSPControllerClientSharedDSP(adm::graph::ExclaveDSPControllerClientSharedDSP *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

void adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26FCA24D0;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) destroyed", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    BOOL v4 = std::__shared_weak_count::lock(v3);
    if (v4 && *((void *)this + 1))
    {
      uint64_t v5 = get_adm_log_object();
      if (os_signpost_enabled(v5))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::Unconfigure", (const char *)&unk_2489B4309, (uint8_t *)&buf, 2u);
      }
      uint64_t v27 = 0;
      int v28 = &v27;
      uint64_t v29 = 0x3802000000;
      unint64_t v30 = __Block_byref_object_copy_;
      int v31 = __Block_byref_object_dispose_;
      v23[0] = MEMORY[0x263EF8330];
      v23[1] = 0x40000000;
      unsigned int v24 = ___ZN3adm5graph30ExclaveDSPControllerClientImpl11unconfigureEv_block_invoke;
      uint64_t v25 = &unk_265243080;
      uint64_t v26 = &v27;
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      uint64_t v47 = 0;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long buf = 0u;
      long long v42 = 0u;
      int v6 = tb_client_connection_message_construct();
      if (!v6)
      {
        tb_message_encode_u64();
        tb_message_complete();
        uint64_t v34 = 0;
        int v7 = tb_connection_send_query();
        if ((v7 & 0xFFFFFFF7) != 0)
        {
          int v6 = v7;
LABEL_11:
          tb_client_connection_message_destruct();
          goto LABEL_12;
        }
        if (v34)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          tb_message_decode_u8();
          if (v32 == 1)
          {
            tb_message_decode_u64();
            int v6 = 7;
            uint64_t v18 = v33;
            if (v33 <= 0x721C3F2F787AA9CLL)
            {
              if (v33 == 0xA79E13CA15F5775CLL || v33 == 0xAD6FFC2BEEE2EB53) {
                goto LABEL_45;
              }
              unint64_t v19 = 0xF9A9592E1248F97ALL;
            }
            else if (v33 > 0x33D96A0AB5A284C1)
            {
              if (v33 == 0x7F9919C7ACD04D39) {
                goto LABEL_45;
              }
              unint64_t v19 = 0x33D96A0AB5A284C2;
            }
            else
            {
              if (v33 == 0x721C3F2F787AA9DLL) {
                goto LABEL_45;
              }
              unint64_t v19 = 0xB6B27F51290F905;
            }
            if (v33 != v19) {
              goto LABEL_11;
            }
          }
          else
          {
            if ((_BYTE)v32)
            {
              int v6 = 7;
              goto LABEL_11;
            }
            uint64_t v18 = v33;
          }
LABEL_45:
          v24((uint64_t)v23, v32, v18);
          int v6 = 0;
          goto LABEL_11;
        }
        tb_client_connection_message_destruct();
        int v6 = 4;
      }
LABEL_12:
      os_signpost_type_t v8 = get_adm_log_object();
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_248947000, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ADM::TBCall::Unconfigure", (const char *)&unk_2489B4309, (uint8_t *)&buf, 2u);
      }
      if (v6)
      {
        uint32_t v9 = get_adm_log_object();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
LABEL_59:
          _Block_object_dispose(&v27, 8);
LABEL_60:
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          goto LABEL_61;
        }
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v6;
        int v10 = "tb call to unconfigure failed: tbError=%d";
        uint64_t v11 = v9;
        uint32_t v12 = 8;
LABEL_58:
        _os_log_error_impl(&dword_248947000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&buf, v12);
        goto LABEL_59;
      }
      long long v14 = v28;
      if (*((unsigned char *)v28 + 40) != 1) {
        goto LABEL_59;
      }
      long long v15 = get_adm_log_object();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      uint64_t v16 = v14[6];
      if (v16 > 0x721C3F2F787AA9CLL)
      {
        switch(v16)
        {
          case 0x721C3F2F787AA9DLL:
            long long v17 = "SETUPERROR_INITIALIZING";
            goto LABEL_57;
          case 0xB6B27F51290F905:
            long long v17 = "SETUPERROR_SETTINGAUSTRIP";
            goto LABEL_57;
          case 0x33D96A0AB5A284C2:
            long long v17 = "SETUPERROR_SETTINGPROPSTRIP";
            goto LABEL_57;
        }
      }
      else
      {
        switch(v16)
        {
          case 0xA79E13CA15F5775CLL:
            long long v17 = "SETUPERROR_COMPILINGGRAPH";
            goto LABEL_57;
          case 0xAD6FFC2BEEE2EB53:
            long long v17 = "SETUPERROR_PARSINGDATABASE";
            goto LABEL_57;
          case 0xF9A9592E1248F97ALL:
            long long v17 = "SETUPERROR_FORMATNOTSUPPORTED";
LABEL_57:
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v17;
            int v10 = "tb call to unconfigure failed: failure=%s";
            uint64_t v11 = v15;
            uint32_t v12 = 12;
            goto LABEL_58;
        }
      }
      if (v16 == 0x7F9919C7ACD04D39) {
        long long v17 = "SETUPERROR_UNKNOWN";
      }
      else {
        long long v17 = "<unknown>";
      }
      goto LABEL_57;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  long long v13 = get_adm_log_object();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = this;
    _os_log_impl(&dword_248947000, v13, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) unconfigure: EK unavailable", (uint8_t *)&buf, 0xCu);
  }
  if (v4) {
    goto LABEL_60;
  }
LABEL_61:
  MEMORY[0x24C586010]((char *)this + 96);
  caulk::mach::mach_port::~mach_port((mach_port_name_t *)this + 18);
  uint64_t v20 = (void *)*((void *)this + 6);
  if (v20)
  {
    *((void *)this + 7) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 3);
  if (v21)
  {
    *((void *)this + 4) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
}

{
  uint64_t vars8;

  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

void caulk::mach::mach_port::~mach_port(mach_port_name_t *this)
{
  if (*this) {
    mach_port_deallocate(*MEMORY[0x263EF8960], *this);
  }
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl11unconfigureEv_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return result;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    __n128 result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2489833D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioCaptureLibraryCore(char **a1)
{
  if (!AudioCaptureLibraryCore(char **)::frameworkLibrary) {
    AudioCaptureLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return AudioCaptureLibraryCore(char **)::frameworkLibrary;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::{lambda(void)#1} &&>>()
{
  uint64_t v8 = 0;
  uint32_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v0 = (uint64_t (*)(void))getAudioCaptureInitializeSymbolLoc(void)::ptr;
  uint64_t v11 = getAudioCaptureInitializeSymbolLoc(void)::ptr;
  if (!getAudioCaptureInitializeSymbolLoc(void)::ptr)
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v4 = 0x40000000;
    uint64_t v5 = ___ZL34getAudioCaptureInitializeSymbolLocv_block_invoke;
    int v6 = &unk_265243058;
    uint64_t v7 = &v8;
    ___ZL34getAudioCaptureInitializeSymbolLocv_block_invoke((uint64_t)buf);
    uint64_t v0 = (uint64_t (*)(void))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v0)
  {
    dlerror();
    int v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v2);
  }
  if ((v0() & 1) == 0)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to initialize AudioCapture", buf, 2u);
    }
  }
}

void *___ZL34getAudioCaptureInitializeSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  int v2 = (void *)AudioCaptureLibraryCore(&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    free(v3);
  __n128 result = dlsym(v2, "AudioCaptureInitialize");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAudioCaptureInitializeSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL23AudioCaptureLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AudioCaptureLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void adm::graph::ExclaveDSPControllerClientPerception::~ExclaveDSPControllerClientPerception(adm::graph::ExclaveDSPControllerClientPerception *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

void adm::graph::ExclaveDSPControllerClientSoundAnalysis::~ExclaveDSPControllerClientSoundAnalysis(adm::graph::ExclaveDSPControllerClientSoundAnalysis *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

void adm::graph::ExclaveDSPControllerClientSiri::~ExclaveDSPControllerClientSiri(adm::graph::ExclaveDSPControllerClientSiri *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

void adm::graph::ExclaveDSPControllerClientMTD::~ExclaveDSPControllerClientMTD(adm::graph::ExclaveDSPControllerClientMTD *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x24C5866C0);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,anonymous namespace'::getControllerEK(unsigned long long,char const*)::ControllerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,anonymous namespace'::getControllerEK(unsigned long long,char const*)::ControllerInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[5];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void adm::ScopedSignpostGetControllerEK::~ScopedSignpostGetControllerEK(adm::ScopedSignpostGetControllerEK *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this)
  {
    *(unsigned char *)this = 0;
    int v2 = *((unsigned __int8 *)this + 16);
    adm_log_object = get_adm_log_object();
    BOOL v4 = os_signpost_enabled(adm_log_object);
    if (v2)
    {
      if (!v4) {
        return;
      }
      uint64_t v5 = *((void *)this + 1);
      int v10 = 136315138;
      uint64_t v11 = v5;
      int v6 = "%s";
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_BEGIN;
      uint32_t v9 = 12;
    }
    else
    {
      if (!v4) {
        return;
      }
      LOWORD(v10) = 0;
      int v6 = (const char *)&unk_2489B4309;
      uint64_t v7 = adm_log_object;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v9 = 2;
    }
    _os_signpost_emit_with_name_impl(&dword_248947000, v7, v8, 0xEEEEB0B5B2B2EEEELL, "ADM::GetControllerEK", v6, (uint8_t *)&v10, v9);
  }
}

uint64_t std::__shared_ptr_pointer<audiodspcontroller_audiodspcontrol_s *,anonymous namespace'::getControllerEK(unsigned long long,char const*)::$_0,std::allocator<audiodspcontroller_audiodspcontrol_s>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_115getControllerEKEyPKcE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<audiodspcontroller_audiodspcontrol_s *,anonymous namespace'::getControllerEK(unsigned long long,char const*)::$_0,std::allocator<audiodspcontroller_audiodspcontrol_s>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

void non-virtual thunk to'adm::graph::VoiceProcessorKernel::getOutputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void non-virtual thunk to'adm::graph::VoiceProcessorKernel::getInputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t non-virtual thunk to'adm::graph::VoiceProcessorKernel::getPropertySize(adm::graph::VoiceProcessorKernel *this)
{
  return adm::graph::VoiceProcessorKernel::getPropertyInfo((adm::graph::VoiceProcessorKernel *)((char *)this - 24));
}

uint64_t adm::graph::VoiceProcessorKernel::getPropertyInfo(adm::graph::VoiceProcessorKernel *this)
{
  uint64_t v1 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(void *)this + 344))(this);
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 32))(v4);
  if (!v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v4[0], v4[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  return v4[0];
}

void sub_248983A98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'adm::graph::VoiceProcessorKernel::getPropertyInfo(adm::graph::VoiceProcessorKernel *this)
{
  return adm::graph::VoiceProcessorKernel::getPropertyInfo((adm::graph::VoiceProcessorKernel *)((char *)this - 24));
}

void *non-virtual thunk to'adm::graph::VoiceProcessorKernel::setProperty(uint64_t a1)
{
  return adm::graph::VoiceProcessorKernel::setProperty(a1 - 24);
}

void *adm::graph::VoiceProcessorKernel::setProperty(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v1 + 48))(v4);
  if (!v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v4[0], v4[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  return result;
}

void sub_248983B90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'adm::graph::VoiceProcessorKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return adm::graph::VoiceProcessorKernel::getProperty(a1 - 24, a2, a3, a4, a5);
}

void *adm::graph::VoiceProcessorKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v6 + 40))(v9);
  if (!v10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v9[0], v9[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  *a5 = v11;
  return result;
}

void sub_248983C8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL non-virtual thunk to'adm::graph::VoiceProcessorKernel::isPropertyWritable(adm::graph::VoiceProcessorKernel *this)
{
  return adm::graph::VoiceProcessorKernel::isPropertyWritable((adm::graph::VoiceProcessorKernel *)((char *)this - 24));
}

BOOL adm::graph::VoiceProcessorKernel::isPropertyWritable(adm::graph::VoiceProcessorKernel *this)
{
  adm::graph::VoiceProcessorKernel::getPropertyInfo(this);
  return v1 != 0;
}

uint64_t non-virtual thunk to'adm::graph::VoiceProcessorKernel::hasProperty(adm::graph::VoiceProcessorKernel *this)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*((void *)this - 3) + 344))();
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 32))(&v3);
  return v4;
}

void non-virtual thunk to'adm::graph::VoiceProcessorKernel::getOutputParameterIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void non-virtual thunk to'adm::graph::VoiceProcessorKernel::getInputParameterIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void *non-virtual thunk to'adm::graph::VoiceProcessorKernel::setParameter(adm::graph::VoiceProcessorKernel *this, float a2)
{
  return adm::graph::VoiceProcessorKernel::setParameter((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2);
}

void *adm::graph::VoiceProcessorKernel::setParameter(adm::graph::VoiceProcessorKernel *this, float a2)
{
  uint64_t v3 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(void *)this + 336))(this);
  uint64_t result = (*(void *(**)(void *__return_ptr, float))(*(void *)v3 + 24))(v6, a2);
  if (!v7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v6[0], v6[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  return result;
}

void sub_248983E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float non-virtual thunk to'adm::graph::VoiceProcessorKernel::getParameter(adm::graph::VoiceProcessorKernel *this)
{
  return adm::graph::VoiceProcessorKernel::getParameter((adm::graph::VoiceProcessorKernel *)((char *)this - 24));
}

float adm::graph::VoiceProcessorKernel::getParameter(adm::graph::VoiceProcessorKernel *this)
{
  uint64_t v1 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(void *)this + 344))(this);
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 16))(v4);
  if (!v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v4[0], v4[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  return *(float *)v4;
}

void sub_248983F18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'adm::graph::VoiceProcessorKernel::isParameterWritable(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

uint64_t non-virtual thunk to'adm::graph::VoiceProcessorKernel::hasParameter(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

void non-virtual thunk to'adm::graph::VoiceProcessorUplinkKernel::~VoiceProcessorUplinkKernel(adm::graph::VoiceProcessorUplinkKernel *this)
{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 168);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 152);
  int v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  adm::graph::DSPKernel::~DSPKernel((adm::graph::VoiceProcessorUplinkKernel *)((char *)this - 24));
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 168);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 152);
  int v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  adm::graph::DSPKernel::~DSPKernel((adm::graph::VoiceProcessorUplinkKernel *)((char *)this - 24));
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    ExtendedAudioBufferList_Destroy();
  }
  return a1;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::getInterface(adm::graph::VoiceProcessorUplinkKernel *this)
{
  uint64_t v1 = *((void *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v1 + 8))) {
    return v1;
  }
  else {
    return 0;
  }
}

{
  uint64_t v1;

  uint64_t v1 = *((void *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v1 + 8))) {
    return v1;
  }
  else {
    return 0;
  }
}

void adm::graph::VoiceProcessorKernel::getOutputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::VoiceProcessorKernel::getInputPropertyIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::VoiceProcessorKernel::hasProperty(adm::graph::VoiceProcessorKernel *this)
{
  uint64_t v1 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(void *)this + 344))(this);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 32))(&v3);
  return v4;
}

void adm::graph::VoiceProcessorKernel::getOutputParameterIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::VoiceProcessorKernel::getInputParameterIDs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::VoiceProcessorKernel::isParameterWritable(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

uint64_t adm::graph::VoiceProcessorKernel::hasParameter(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::createPostProcessingConverters(adm::graph::VoiceProcessorUplinkKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  uint64_t v6 = (AudioConverterRef **)((char *)this + 56);
  uint64_t result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((void *)this + 7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  uint64_t v8 = *((void *)a2 + 3);
  if (*((void *)a2 + 4) != v8)
  {
    unint64_t v9 = 0;
    int v10 = 4 * a3;
    do
    {
      uint64_t v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inSourceFormat, v9);
        __n128 v29 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, "Non-LinearPCM format for output terminal index ", (std::string *)&inSourceFormat);
        MEMORY[0x24C5862B0](exception, &v33, v29);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      inSourceFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inSourceFormat.mFormatID = xmmword_2489AAA40;
      *(_OWORD *)&inSourceFormat.mBytesPerFrame = xmmword_2489AAA50;
      AudioConverterRef outAudioConverter = 0;
      if (AudioConverterNew(&inSourceFormat, v11, &outAudioConverter))
      {
        uint64_t v26 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v30, v9);
        __n128 v27 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, "Failed to create postprocessing converter for stream ", &v30);
        MEMORY[0x24C5862B0](v26, &v33, v27);
        __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      long long v13 = (AudioConverterRef *)*((void *)this + 8);
      unint64_t v12 = *((void *)this + 9);
      if ((unint64_t)v13 >= v12)
      {
        long long v15 = *v6;
        uint64_t v16 = v13 - *v6;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        long long v35 = (char *)this + 72;
        if (v19)
        {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
          long long v15 = (AudioConverterRef *)*((void *)this + 7);
          long long v13 = (AudioConverterRef *)*((void *)this + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (AudioConverterRef *)(v19 + 8 * v16);
        unint64_t v22 = v19 + 8 * v20;
        unint64_t v34 = v22;
        *uint64_t v21 = outAudioConverter;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)(v21 + 1);
        if (v13 == v15)
        {
          long long v14 = v21 + 1;
        }
        else
        {
          do
          {
            uint64_t v23 = *--v13;
            *long long v13 = 0;
            *--uint64_t v21 = v23;
          }
          while (v13 != v15);
          long long v14 = (void *)v33.__r_.__value_.__r.__words[2];
          unint64_t v22 = v34;
        }
        long long v24 = *(_OWORD *)((char *)this + 56);
        *((void *)this + 7) = v21;
        *((void *)this + 8) = v14;
        *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = v24;
        unint64_t v25 = *((void *)this + 9);
        *((void *)this + 9) = v22;
        unint64_t v34 = v25;
        v33.__r_.__value_.__r.__words[0] = v24;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v33);
      }
      else
      {
        *long long v13 = outAudioConverter;
        long long v14 = v13 + 1;
      }
      *((void *)this + 8) = v14;
      LODWORD(v33.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((void *)this + 13, &inSourceFormat);
      uint64_t result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((void *)this + 14) - 8));
      ++v9;
      uint64_t v8 = *((void *)a2 + 3);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 4) - v8) >> 3));
  }
  return result;
}

void sub_248984438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v37 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::createPreProcessingConverters(adm::graph::VoiceProcessorUplinkKernel *this, Float64 **a2, int a3)
{
  adm::graph::DSPKernel::createPreProcessingConverters(this, (const adm::graph::KernelConfiguration *)a2, a3);
  char v5 = a2[1];
  if (v5 == *a2)
  {
    UInt32 v9 = 0;
    UInt32 v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    UInt32 v8 = 0;
    UInt32 v9 = 0;
    uint64_t v10 = 28;
    char v5 = *a2;
    do
    {
      int v11 = adm::graph::SemanticSet::contains(&a2[6][v6], 1);
      if (v11) {
        UInt32 v12 = v8;
      }
      else {
        UInt32 v12 = v9;
      }
      if (v11) {
        UInt32 v8 = v12 + *(_DWORD *)((char *)v5 + v10);
      }
      else {
        UInt32 v9 = v12 + *(_DWORD *)((char *)v5 + v10);
      }
      ++v7;
      char v5 = *a2;
      v10 += 40;
      ++v6;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  }
  Float64 v13 = *v5;
  *(_OWORD *)&v35.mFormatID = xmmword_2489AAA40;
  v35.mBytesPerFrame = 4;
  v35.UInt32 mChannelsPerFrame = v9;
  *(void *)&v35.mBitsPerChannel = 32;
  v34.mSampleRate = v13;
  *(_OWORD *)&v34.mFormatID = xmmword_2489AAA40;
  v34.mBytesPerFrame = 4;
  v34.UInt32 mChannelsPerFrame = v8;
  *(void *)&v34.mBitsPerChannel = 32;
  v35.mSampleRate = v13;
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)&v33, &v35);
  long long v14 = (uint64_t *)((char *)this + 176);
  if (*((unsigned char *)this + 184))
  {
    uint64_t v15 = *v14;
    uint64_t v16 = v33;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = v33;
    *((unsigned char *)this + 184) = 1;
  }
  uint64_t v33 = v15;
  uint64_t *v14 = v16;
  ExtendedAudioBufferList_Destroy();
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)&v33, &v34);
  unint64_t v17 = (uint64_t *)((char *)this + 192);
  if (*((unsigned char *)this + 200))
  {
    uint64_t v18 = *v17;
    uint64_t v19 = v33;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = v33;
    *((unsigned char *)this + 200) = 1;
  }
  uint64_t v33 = v18;
  *unint64_t v17 = v19;
  uint64_t result = ExtendedAudioBufferList_Destroy();
  uint64_t v21 = *a2;
  if (a2[1] != *a2)
  {
    int v22 = 0;
    int v23 = 0;
    unint64_t v24 = 0;
    do
    {
      uint64_t result = adm::graph::SemanticSet::contains(&a2[6][v24], 1);
      if (result) {
        unint64_t v25 = (char *)this + 192;
      }
      else {
        unint64_t v25 = (char *)this + 176;
      }
      uint64_t v26 = &v21[5 * v24];
      int v28 = *((_DWORD *)v26 + 7);
      __n128 v27 = (unsigned int *)v26 + 7;
      if (v28)
      {
        unint64_t v29 = 0;
        uint64_t v30 = *(void *)v25 + 56;
        if (result) {
          int v31 = v23;
        }
        else {
          int v31 = v22;
        }
        uint64_t v32 = 56;
        do
        {
          *(_OWORD *)(v30 + 16 * (v31 + v29++)) = *(_OWORD *)(*(void *)(*((void *)this + 10)
                                                                                        + 8 * v24)
                                                                            + v32);
          v32 += 16;
        }
        while (v29 < *v27);
        if (result) {
          int v23 = v31 + v29;
        }
        else {
          int v22 = v31 + v29;
        }
      }
      ++v24;
      uint64_t v21 = *a2;
    }
    while (v24 < 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  }
  return result;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::VoiceProcessorUplinkKernel *this)
{
  uint64_t v1 = *((void *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v1 + 8))) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(void *__return_ptr))(*(void *)v2 + 64))(v5);
  if (!v6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x24C5863B0](exception, v5[0], v5[1]);
    __cxa_throw(exception, MEMORY[0x263F8C1A8], MEMORY[0x263F8C0D8]);
  }
  return v5[0];
}

void sub_2489847C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL adm::graph::VoiceProcessorUplinkKernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::VoiceProcessorUplinkKernel *this)
{
  return *((unsigned char *)adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>::getConfiguration(*((void *)this + 20))
         + 60) == 0;
}

std::chrono::system_clock::time_point adm::graph::VoiceProcessorUplinkKernel::doClientIO(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v43 = adm::graph::DSPKernel::doClientIOPreProcessing(a1, a5, a4);
  if (v43)
  {
    int v11 = a1 + 16;
    UInt32 v12 = "doClientIOPreProcessing returns error %u";
    return adm::util::RTLogger::log<int &>(v11, (uint64_t)v12, &v43);
  }
  for (uint64_t i = 0; i != 10; i += 5)
  {
    uint64_t v15 = &v52[i];
    *((void *)v15 + 9) = 0;
    *uint64_t v15 = 0uLL;
    v15[1] = 0uLL;
    void v15[2] = 0uLL;
    v15[3] = 0uLL;
    *(void *)((char *)v15 + 6boost::detail::shared_count::~shared_count(this + 1) = 0;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  long long v16 = *(_OWORD *)(a5 + 16);
  v52[0] = *(_OWORD *)a5;
  v52[1] = v16;
  long long v17 = *(_OWORD *)(a5 + 48);
  long long v19 = *(_OWORD *)a5;
  long long v18 = *(_OWORD *)(a5 + 16);
  v52[2] = *(_OWORD *)(a5 + 32);
  v52[3] = v17;
  uint64_t v51 = 0;
  int v53 = *(_DWORD *)(a5 + 64);
  char v54 = *(unsigned char *)(a5 + 68);
  uint64_t v55 = a1[22].__d_.__rep_ + 48;
  long long v56 = v19;
  long long v57 = v18;
  long long v20 = *(_OWORD *)(a5 + 48);
  long long v58 = *(_OWORD *)(a5 + 32);
  long long v59 = v20;
  int v60 = v53;
  char v61 = v54;
  uint64_t v62 = a1[24].__d_.__rep_ + 48;
  if (a6)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = a1[13].__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v22 = a1[14].__d_.__rep_;
    long long v23 = a7[1];
    long long v47 = *a7;
    long long v48 = v23;
    long long v24 = a7[3];
    long long v49 = a7[2];
    *(_OWORD *)uint64_t v50 = v24;
    uint64_t v25 = v22 - rep;
    if (v22 == rep) {
LABEL_12:
    }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    uint64_t v26 = 0;
    uint64_t v27 = v25 >> 3;
    int v28 = a7 + 5;
    unint64_t v29 = v52;
    while (a6 - 1 != v26)
    {
      ++v26;
      long long v30 = v28[1];
      _OWORD *v29 = *v28;
      v29[1] = v30;
      long long v31 = v28[3];
      void v29[2] = v28[2];
      v29[3] = v31;
      v28 += 5;
      v29 += 5;
      if (v27 == v26) {
        goto LABEL_12;
      }
    }
    uint64_t v32 = *(void *)(rep + 8 * v26) + 48;
    uint64_t v33 = &a7[5 * v26];
    char v34 = *((unsigned char *)v33 + 68);
    LODWORD(v33) = *((_DWORD *)v33 + 16);
    uint64_t v51 = v32;
    *(_DWORD *)&v50[16] = v33;
    v50[20] = v34;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35 = a1[20].__d_.__rep_;
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v35 + 8))) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = v35;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v36 + 56))(&v41);
  if (!v42)
  {
    int v37 = v41;
    unsigned int v38 = a1[16].__d_.__rep_;
    if (v38 > 0x64)
    {
      result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (result.__d_.__rep_ - a1[17].__d_.__rep_ < 501000) {
        goto LABEL_25;
      }
      long long v39 = (caulk::concurrent::messenger *)&a1[18];
      LODWORD(v44) = 3;
      *((void *)&v44 + boost::detail::shared_count::~shared_count(this + 1) = "clientIO has error %u";
      unsigned int v38 = a1[16].__d_.__rep_;
    }
    else
    {
      LODWORD(v44) = 3;
      *((void *)&v44 + boost::detail::shared_count::~shared_count(this + 1) = "clientIO has error %u";
      long long v39 = (caulk::concurrent::messenger *)&a1[18];
    }
    unsigned int v45 = v38;
    int v46 = v37;
    caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>(v39, &v44);
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    a1[17].__d_.__rep_ = result.__d_.__rep_;
LABEL_25:
    int v40 = a1[16].__d_.__rep_;
    if (v40 != -1) {
      LODWORD(a1[16].__d_.__rep_) = v40 + 1;
    }
    return result;
  }
  result.__d_.__rep_ = adm::graph::DSPKernel::doClientIOPostProcessing(a1, (uint64_t)a7, a6);
  int v43 = result.__d_.__rep_;
  if (LODWORD(result.__d_.__rep_))
  {
    int v11 = a1 + 16;
    UInt32 v12 = "doClientIOPostProcessing returns error %u";
    return adm::util::RTLogger::log<int &>(v11, (uint64_t)v12, &v43);
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>(caulk::concurrent::messenger *a1, long long *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 56, 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26FCA32D0;
  *(void *)(v4 + 8) = 0;
  long long v5 = *a2;
  *(void *)(v4 + 40) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_26FCA3278;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}::operator()((uint64_t)a1 + 24);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  caulk::make_string(*(caulk **)(a1 + 8), (uint64_t)__p, *(unsigned int *)(a1 + 20));
  switch(*(_DWORD *)a1)
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v3 = __p;
        if (v17 < 0) {
          uint64_t v3 = (void **)__p[0];
        }
        int v4 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)long long buf = 136315394;
        long long v19 = v3;
        __int16 v20 = 1024;
        int v21 = v4;
        _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      unint64_t v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        UInt32 v8 = __p;
        if (v17 < 0) {
          UInt32 v8 = (void **)__p[0];
        }
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)long long buf = 136315394;
        long long v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        uint64_t v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        char v6 = __p;
        if (v17 < 0) {
          char v6 = (void **)__p[0];
        }
        goto LABEL_17;
      }
      break;
    case 3:
      Float64 v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        long long v14 = __p;
        if (v17 < 0) {
          long long v14 = (void **)__p[0];
        }
        int v15 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)long long buf = 136315394;
        long long v19 = v14;
        __int16 v20 = 1024;
        int v21 = v15;
        _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      long long v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        char v6 = __p;
        if (v17 < 0) {
          char v6 = (void **)__p[0];
        }
LABEL_17:
        int v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)long long buf = 136315394;
        long long v19 = v6;
        __int16 v20 = 1024;
        int v21 = v12;
        uint64_t v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_248947000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t adm::graph::VoiceProcessorKernel::supportsClientIOHandler(adm::graph::VoiceProcessorKernel *this)
{
  return 1;
}

uint64_t adm::graph::VoiceProcessorKernel::operator==()
{
  return 0;
}

void adm::graph::VoiceProcessorUplinkKernel::~VoiceProcessorUplinkKernel(adm::graph::VoiceProcessorUplinkKernel *this)
{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 176);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  adm::graph::DSPKernel::~DSPKernel(this);
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 176);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  adm::graph::DSPKernel::~DSPKernel(this);
}

void adm::consume_exception_and_terminate(adm *this, const NSException *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  uint64_t v3 = [(adm *)v2 name];
  int v4 = [(adm *)v2 reason];
  long long v5 = [(adm *)v2 callStackReturnAddresses];
  char v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 count];
    os_unfair_lock_lock(&__last_exception_backtrace_lock__);
    strlcpy(__last_exception_backtrace__, "(", 0x2000uLL);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        int v23 = 0;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)__str = 0u;
        long long v20 = 0u;
        int v9 = [v6 objectAtIndex:i];
        snprintf(__str, 0x44uLL, "%p ", (const void *)[v9 unsignedIntegerValue]);

        strlcat(__last_exception_backtrace__, __str, 0x2000uLL);
      }
    }
    uint64_t v10 = strrchr(__last_exception_backtrace__, 32);
    if (v10) {
      *(_WORD *)uint64_t v10 = 41;
    }
    else {
      strlcat(__last_exception_backtrace__, ")", 0x2000uLL);
    }
  }
  else
  {
    os_unfair_lock_lock(&__last_exception_backtrace_lock__);
    strlcpy(__last_exception_backtrace__, "()", 0x2000uLL);
  }
  os_unfair_lock_unlock(&__last_exception_backtrace_lock__);
  id v11 = [(adm *)v2 callStackReturnAddresses];
  if (!v11) {
    id v11 = v6;
  }
  int v12 = NSString;
  Float64 v13 = [v11 description];
  long long v14 = [v12 stringWithFormat:@"***NSException*** '%@', reason: '%@'\n*** First throw call stack:\n%@\n", v3, v4, v13];

  if (v3)
  {
    id v16 = [NSString stringWithFormat:@"*** Terminating due to uncaught exception '%@', reason: '%@'", v3, v4];
    uint64_t v15 = [v16 UTF8String];
  }
  else
  {
    uint64_t v15 = [v14 UTF8String];
  }
  qword_269334F60 = v15;
  char v17 = get_adm_log_object();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = [v14 UTF8String];
    *(_DWORD *)__str = 136315138;
    *(void *)&__str[4] = v18;
    _os_log_error_impl(&dword_248947000, v17, OS_LOG_TYPE_ERROR, "***EXCEPTION***\n%s", (uint8_t *)__str, 0xCu);
  }

  abort();
}

void sub_248985300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL adm::config_policy::isExclaveUseCase(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "isolated audio muted talker detection");
  uint64_t v2 = std::__tree<std::string>::find<std::string>(a1, v14);
  if ((void *)(a1 + 8) == v2)
  {
    int v4 = v2;
    std::string::basic_string[abi:ne180100]<0>(v12, "isolated audio siri");
    if (v4 == std::__tree<std::string>::find<std::string>(a1, v12))
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "isolated audio sound analysis");
      if (v4 == std::__tree<std::string>::find<std::string>(a1, v10))
      {
        std::string::basic_string[abi:ne180100]<0>(v8, "isolated audio perception");
        if (v4 == std::__tree<std::string>::find<std::string>(a1, v8))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "isolated audio shared DSP");
          BOOL v3 = v4 != std::__tree<std::string>::find<std::string>(a1, __p);
          if (v7 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          BOOL v3 = 1;
        }
        if (v9 < 0) {
          operator delete(v8[0]);
        }
      }
      else
      {
        BOOL v3 = 1;
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
    }
    else
    {
      BOOL v3 = 1;
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  else
  {
    BOOL v3 = 1;
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return v3;
}

void sub_24898550C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (*(char *)(v24 - 17) < 0) {
    operator delete(*(void **)(v24 - 40));
  }
  _Unwind_Resume(exception_object);
}

double adm::config_policy::getPrimaryStreamInfo(adm::config_policy *this, const adm::ConfigurationChangeRequest *a2)
{
  if (!v6) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  double result = *(double *)&v4;
  *(_OWORD *)this = v4;
  *((void *)this + 2) = v5;
  return result;
}

void anonymous namespace'::findStreamByID(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 != a3)
  {
    char v7 = a2;
    while (2)
    {
      UInt32 v8 = (unsigned __int8 *)v7[21];
      char v9 = (unsigned __int8 *)v7[22];
      while (v8 != v9)
      {
        if (std::operator==[abi:ne180100]<std::string,std::string>(v8, a4))
        {
          *(void *)a1 = v7;
          *(void *)(a1 + 8) = v8;
          char v13 = 1;
          *(unsigned char *)(a1 + 16) = 1;
          goto LABEL_16;
        }
        v8 += 136;
      }
      uint64_t v10 = (unsigned __int8 *)v7[24];
      char v11 = (unsigned __int8 *)v7[25];
      while (v10 != v11)
      {
        if (std::operator==[abi:ne180100]<std::string,std::string>(v10, a4))
        {
          *(void *)a1 = v7;
          *(void *)(a1 + 8) = v10;
          char v13 = 1;
          *(unsigned char *)(a1 + 16) = 0;
          goto LABEL_16;
        }
        v10 += 136;
      }
      v7 += 27;
      if (v7 != a3) {
        continue;
      }
      break;
    }
  }
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    if ((a4[23] & 0x80u) == 0) {
      long long v14 = (uint64_t *)a4;
    }
    else {
      long long v14 = *(uint64_t **)a4;
    }
    int v15 = 136315138;
    id v16 = v14;
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "Requested stream ID %s not found (this shouldn't happen)", (uint8_t *)&v15, 0xCu);
  }
  char v13 = 0;
  *(unsigned char *)a1 = 0;
LABEL_16:
  *(unsigned char *)(a1 + 24) = v13;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[24];
  if (a1[24])
  {
    uint64_t v3 = a1[23];
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = a1[23];
    }
    else {
      uint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v5 = a2[23];
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v4 == v5)
    {
      if (v6 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        uint64_t v7 = v3 - 1;
        do
        {
          int v9 = *a1++;
          int v8 = v9;
          int v11 = *a2++;
          int v10 = v11;
          BOOL v13 = v7-- != 0;
          BOOL v14 = v8 == v10;
          uint64_t v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void adm::config_policy::getActiveStreamInfo(adm::config_policy *this, const ConfigurationChangeRequest *a2)
{
  *(void *)this = 0;
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)this + 2) = 0;
  begiuint64_t n = (unsigned __int8 *)a2->mIOContextDescription.mStreamIDs.__begin_;
  std::vector<std::string>::pointer end = (unsigned __int8 *)a2->mIOContextDescription.mStreamIDs.__end_;
  if (begin != end)
  {
    int v6 = 0;
    do
    {
      if (!v21) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      unint64_t v7 = *((void *)this + 2);
      if ((unint64_t)v6 >= v7)
      {
        int v10 = *(void **)this;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)this) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v15 = (char *)operator new(24 * v14);
        }
        else
        {
          int v15 = 0;
        }
        id v16 = &v15[24 * v11];
        *(_OWORD *)id v16 = v19;
        *((void *)v16 + 2) = v20;
        uint64_t v17 = v16;
        if (v6 != v10)
        {
          do
          {
            long long v18 = *(_OWORD *)(v6 - 3);
            *(v17 - 8) = *((unsigned char *)v6 - 8);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v6 -= 3;
          }
          while (v6 != v10);
          int v6 = *(void **)this;
        }
        int v9 = v16 + 24;
        *(void *)this = v17;
        *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v16 + 24;
        *((void *)this + 2) = &v15[24 * v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        long long v8 = v19;
        void v6[2] = v20;
        *(_OWORD *)int v6 = v8;
        int v9 = v6 + 3;
      }
      *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
      begin += 24;
      int v6 = v9;
    }
    while (begin != end);
  }
}

void sub_2489859C4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::validateStreamUsage(ConfigurationChangeRequest *this, const adm::ConfigurationChangeRequest *a2)
{
  int v2 = (int)a2;
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!this->mIsActivation) {
    goto LABEL_43;
  }
  unint64_t value = this->mIOContextDescription.mSemantics.__tree_.__pair3_.__value_;
  if (value == 1) {
    goto LABEL_43;
  }
  if (value != 3)
  {
    if (value != 2)
    {
      adm_log_object = get_adm_log_object();
      if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR)) {
        goto LABEL_105;
      }
      unint64_t v11 = this->mIOContextDescription.mSemantics.__tree_.__pair3_.__value_;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      unint64_t v12 = "Unsupported IOContext semantic count: %lu";
      unint64_t v13 = adm_log_object;
      uint32_t v14 = 12;
LABEL_161:
      _os_log_error_impl(&dword_248947000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&buf, v14);
      goto LABEL_105;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
    uint64_t v5 = (ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    p_pair1 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
    if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v76, "voice isolation");
      if (p_pair1 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v76))
      {
        BOOL v7 = 1;
LABEL_39:
        if (v77 < 0) {
          operator delete(v76[0]);
        }
LABEL_41:
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if (v7) {
            goto LABEL_43;
          }
        }
        else if (v7)
        {
          goto LABEL_43;
        }
        id v16 = get_adm_log_object();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
LABEL_105:
          long long v49 = get_adm_log_object();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl(&dword_248947000, v49, OS_LOG_TYPE_ERROR, "invalid configChangeRequest - semantics", (uint8_t *)&buf, 2u);
          }
          return 0;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        unint64_t v12 = "Unsupported IOContext semantic combination";
        goto LABEL_160;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "airpods noise suppression");
    int v15 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &__p);
    if (p_pair1 == v15
      || (std::string::basic_string[abi:ne180100]<0>(v71, "voice isolation"),
          p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v71)))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "airpods noise suppression");
      if (p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v69))
      {
        BOOL v7 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "voice activity detection");
        BOOL v7 = p_pair1 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v67);
        if (v68 < 0) {
          operator delete(v67[0]);
        }
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      if (p_pair1 == v15)
      {
LABEL_36:
        if (v75 < 0) {
          operator delete(__p);
        }
        if (p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v5) {
          goto LABEL_41;
        }
        goto LABEL_39;
      }
    }
    else
    {
      BOOL v7 = 1;
    }
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
  long long v8 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
  if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf))
  {
    BOOL v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v76, "voice isolation");
    if (v8 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v76))
    {
      BOOL v9 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "airpods noise suppression");
      BOOL v9 = v8 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &__p);
      if (v75 < 0) {
        operator delete(__p);
      }
    }
    if (v77 < 0) {
      operator delete(v76[0]);
    }
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_43;
    }
    goto LABEL_28;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_28:
    id v16 = get_adm_log_object();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_105;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    unint64_t v12 = "Unsupported IOContext semantic combination";
LABEL_160:
    unint64_t v13 = v16;
    uint32_t v14 = 2;
    goto LABEL_161;
  }
LABEL_43:
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&__p, this);
  if (this->mIsActivation)
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation");
    uint64_t v17 = (ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    long long v18 = (char *)__p;
    long long v19 = v74;
    if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v17
      && __p != v74
      && *(_DWORD *)(*(void *)__p + 64) == 1986622068)
    {
      uint64_t v20 = get_adm_log_object();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_248947000, v20, OS_LOG_TYPE_ERROR, "don't perform VI on virtual device input streams", (uint8_t *)&buf, 2u);
      }
      char v21 = get_adm_log_object();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "unsupported configChangeRequest - devices";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
  }
  else
  {
    long long v18 = (char *)__p;
    long long v19 = v74;
  }
  if (v18 == v19)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    if ((v2 & 1) == 0) {
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  int v23 = 0;
  char v24 = 1;
  uint64_t v25 = v18;
  do
  {
    double v26 = *(double *)(*((void *)v25 + 1) + 64);
    if (v24) {
      int v27 = (int)v26;
    }
    else {
      int v27 = v23;
    }
    if (v26 != (double)v27)
    {
      long long v44 = get_adm_log_object();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      int v43 = "inconsistent stream sample rates";
LABEL_92:
      unsigned int v45 = v44;
      uint32_t v46 = 2;
      goto LABEL_156;
    }
    if (v26 != *(double *)(*(void *)v25 + 56))
    {
      long long v44 = get_adm_log_object();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      int v43 = "inconsistent device sample rates";
      goto LABEL_92;
    }
    char v24 = 0;
    v25 += 24;
    int v23 = (int)v26;
  }
  while (v25 != v19);
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
  if (v2) {
    goto LABEL_68;
  }
  uint64_t v29 = 0;
  long long v30 = v18;
  do
  {
    v29 += std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*((void *)v30 + 1) + 32), "reference");
    v30 += 24;
  }
  while (v30 != v19);
LABEL_67:
  v28 -= v29;
LABEL_68:
  p_mIOContextDescriptiouint64_t n = &this->mIOContextDescription;
  BOOL isExclaveUseCase = adm::config_policy::isExclaveUseCase((uint64_t)&this->mIOContextDescription);
  std::string::basic_string[abi:ne180100]<0>(&buf, "airpods noise suppression");
  char v34 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v35 == v34)
  {
    if (isExclaveUseCase)
    {
      if (v28 - 4 <= 0xFFFFFFFFFFFFFFFCLL)
      {
        char v42 = get_adm_log_object();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
          int v43 = "unexpected stream count: %lu";
LABEL_155:
          unsigned int v45 = v42;
          uint32_t v46 = 12;
LABEL_156:
          _os_log_error_impl(&dword_248947000, v45, OS_LOG_TYPE_ERROR, v43, (uint8_t *)&buf, v46);
          goto LABEL_94;
        }
        goto LABEL_94;
      }
      if (adm::config_policy::isBuiltInMicrophoneDevice(*(adm::config_policy **)v18, v33))
      {
        if (v18[16] == 1)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
          BOOL v50 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v50)
          {
            BOOL v51 = v28 >= 2
               && *(v19 - 8) == 1
               && std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*((void *)v19 - 2) + 32), "reference");
            uint64_t v47 = 1;
            if (!v2 || v51) {
              goto LABEL_227;
            }
            char v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              goto LABEL_226;
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            long long v22 = "this route requires a ref stream";
          }
          else
          {
            char v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              goto LABEL_226;
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            long long v22 = "mic stream not general semantic";
          }
        }
        else
        {
          char v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_226;
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          long long v22 = "mic stream not input stream ";
        }
      }
      else
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "exclave use-cases can only operate on built-in mic";
      }
      goto LABEL_225;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
    long long v48 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v35 != v48)
    {
      if (v28 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        char v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
          goto LABEL_94;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        int v43 = "unexpected stream count: %lu";
        goto LABEL_155;
      }
      if (v18[16] == 1)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
        BOOL v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v54)
        {
          if (v28 == 2)
          {
            if (v18[40] == 1)
            {
              if (!std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(*((void *)v18 + 4) + 32))) {
                goto LABEL_122;
              }
              char v21 = get_adm_log_object();
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                goto LABEL_226;
              }
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              long long v22 = "ref stream not ref semantic";
            }
            else
            {
              char v21 = get_adm_log_object();
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                goto LABEL_226;
              }
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              long long v22 = "ref stream not input stream ";
            }
          }
          else
          {
            if (!v2) {
              goto LABEL_122;
            }
            long long v59 = *(adm::config_policy **)v18;
            if (*(void *)v18)
            {
              if (*((_DWORD *)v59 + 16) == 1651275109 && *((_DWORD *)v59 + 19) == 1 && *((unsigned char *)v59 + 160)) {
                goto LABEL_122;
              }
            }
            char v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              goto LABEL_226;
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            long long v22 = "this route requires a ref stream";
          }
        }
        else
        {
          char v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_226;
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          long long v22 = "mic stream not general semantic";
        }
      }
      else
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "mic stream not input stream ";
      }
      goto LABEL_225;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation");
    uint64_t v52 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v35 == v52)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "spatial playback");
      if (v35 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf))
      {
        std::string::basic_string[abi:ne180100]<0>(v69, "spatial channel virtualization only");
        BOOL v55 = v35 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, v69);
        if (v70 < 0) {
          operator delete(v69[0]);
        }
      }
      else
      {
        BOOL v55 = 1;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (!v55)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation conferencing");
        long long v56 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v35 == v56)
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "general");
          int v60 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          uint64_t v47 = 1;
          if (v35 == v60 || v28 == 1)
          {
LABEL_95:
            if (v18) {
              goto LABEL_227;
            }
            return v47;
          }
          char v42 = get_adm_log_object();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
            int v43 = "expected 1 stream but got %lu";
            goto LABEL_155;
          }
LABEL_94:
          uint64_t v47 = 0;
          goto LABEL_95;
        }
        if (v2) {
          std::string::size_type v57 = 2;
        }
        else {
          std::string::size_type v57 = 1;
        }
        if (v28 < v57)
        {
          long long v58 = get_adm_log_object();
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            goto LABEL_94;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v57;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v28;
          int v43 = "expected at least %lu stream(s) but got %lu";
          unsigned int v45 = v58;
          uint32_t v46 = 22;
          goto LABEL_156;
        }
        if (v18[16] == 1)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
          BOOL v61 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v61)
          {
            unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
            if (v62 < 2) {
              goto LABEL_122;
            }
            uint64_t v63 = v18 + 40;
            unint64_t v64 = v62 - 1;
            uint64_t v47 = 1;
            while (1)
            {
              if (*v63 != 1)
              {
                char v21 = get_adm_log_object();
                if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_226;
                }
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                long long v22 = "ref stream is not input stream";
                goto LABEL_225;
              }
              if (std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(*((void *)v63 - 1) + 32))) {
                break;
              }
              v63 += 24;
              if (!--v64) {
                goto LABEL_95;
              }
            }
            char v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              goto LABEL_226;
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            long long v22 = "ref stream is not ref semantic";
          }
          else
          {
            char v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              goto LABEL_226;
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            long long v22 = "mic stream not general semantic";
          }
        }
        else
        {
          char v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_226;
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          long long v22 = "mic stream not input stream";
        }
LABEL_225:
        _os_log_error_impl(&dword_248947000, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&buf, 2u);
        goto LABEL_226;
      }
      if (v28 != 1)
      {
        char v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
          goto LABEL_94;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        int v43 = "expected 1 stream but got %lu";
        goto LABEL_155;
      }
      if (v18[16])
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "stream not output stream";
        goto LABEL_225;
      }
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
      BOOL v65 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (!v65)
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "stream not general semantic";
        goto LABEL_225;
      }
    }
    else
    {
      if (v28 != 1)
      {
        char v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
          goto LABEL_94;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        int v43 = "expected 1 stream but got %lu";
        goto LABEL_155;
      }
      if (v18[16] != 1)
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "mic stream not input stream";
        goto LABEL_225;
      }
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
      BOOL v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (!v53)
      {
        char v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          goto LABEL_226;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v22 = "mic stream not general semantic";
        goto LABEL_225;
      }
    }
LABEL_122:
    uint64_t v47 = 1;
    goto LABEL_227;
  }
  if (v28 != 1)
  {
    char v42 = get_adm_log_object();
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      goto LABEL_94;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    int v43 = "expected 1 stream but got %lu";
    goto LABEL_155;
  }
  if (v18[16] == 1)
  {
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((void *)v18 + 1) + 32, "general");
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    if (size == 7)
    {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      int data = (int)p_buf->__r_.__value_.__l.__data_;
      int v39 = *(_DWORD *)((char *)p_buf->__r_.__value_.__r.__words + 3);
      BOOL v41 = data == 1701733735 && v39 == 1818325605;
    }
    else
    {
      BOOL v41 = 0;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v41) {
      goto LABEL_122;
    }
    char v21 = get_adm_log_object();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      long long v22 = "mic stream not general semantic";
      goto LABEL_225;
    }
  }
  else
  {
    char v21 = get_adm_log_object();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      long long v22 = "mic stream not input stream";
      goto LABEL_225;
    }
  }
LABEL_226:
  uint64_t v47 = 0;
LABEL_227:
  unint64_t v74 = v18;
  operator delete(v18);
  return v47;
}

void sub_2489869B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  operator delete(v36);
  _Unwind_Resume(a1);
}

BOOL adm::config_policy::isBuiltInMicrophoneDevice(adm::config_policy *this, const DeviceDescription *a2)
{
  if (*((_DWORD *)this + 16) != 1651274862) {
    return 0;
  }
  if (*((_DWORD *)this + 17) == 1768778083) {
    return 1;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 != 7) {
    return 0;
  }
  if (v2 >= 0) {
    uint64_t v3 = (int *)a1;
  }
  else {
    uint64_t v3 = *(int **)a1;
  }
  int v4 = *v3;
  int v5 = *(int *)((char *)v3 + 3);
  return v4 == 1701733735 && v5 == 1818325605;
}

BOOL std::operator!=[abi:ne180100]<std::string,char [10]>(uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 1;
  }
  uint64_t v1 = (uint64_t *)*((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((char)v1 < 0) {
    uint64_t v1 = a1[1];
  }
  if (v1 != (uint64_t *)9) {
    return 1;
  }
  if (v2 >= 0) {
    uint64_t v3 = (uint64_t *)a1;
  }
  else {
    uint64_t v3 = *a1;
  }
  uint64_t v4 = *v3;
  int v5 = *((unsigned __int8 *)v3 + 8);
  return v4 != 0x636E657265666572 || v5 != 101;
}

uint64_t std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      BOOL v7 = a3;
    }
    else {
      BOOL v7 = *a3;
    }
    while (*(void *)(v3 + 8) != v6 || memcmp(*(const void **)v3, v7, v6))
    {
      v3 += 16;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

BOOL adm::config_policy::isBuiltInSpeakerDevice(adm::config_policy *this, const DeviceDescription *a2)
{
  if (*((_DWORD *)this + 16) != 1651274862) {
    return 0;
  }
  if (*((_DWORD *)this + 18) == 1769173099) {
    return 1;
  }
}

_anonymous_namespace_ *adm::config_policy::getDeviceDescription(adm::ConfigurationChangeRequest *a1, int a2)
{
  if (*((void *)a1 + 21) == *((void *)a1 + 22)) {
    return 0;
  }
  adm::config_policy::getPrimaryStreamInfo((adm::config_policy *)&v9, a1);
  if (v10 == a2) {
    return (_anonymous_namespace_ *)v9;
  }
  size_t v6 = (_anonymous_namespace_ *)*((void *)a1 + 24);
  BOOL v7 = (_anonymous_namespace_ *)*((void *)a1 + 25);
  char v5 = v6;
  if (v6 != v7)
  {
    char v5 = v6;
    while (a2 || !*((unsigned char *)v5 + 48))
    {
      char v5 = (_anonymous_namespace_ *)((char *)v5 + 216);
      if (v5 == v7) {
        goto LABEL_12;
      }
    }
  }
  if (v5 == v7)
  {
LABEL_12:
    if (v6 == v7) {
      goto LABEL_22;
    }
    char v5 = v6;
    {
      char v5 = (_anonymous_namespace_ *)((char *)v5 + 216);
      if (v5 == v7) {
        goto LABEL_18;
      }
    }
    if (v5 != v7) {
      return v5;
    }
LABEL_18:
    if (v6 == v7)
    {
LABEL_22:
      BOOL v7 = v6;
    }
    else
    {
      {
        size_t v6 = (_anonymous_namespace_ *)((char *)v6 + 216);
        if (v6 == v7)
        {
          size_t v6 = v7;
          break;
        }
      }
    }
    if (v6 == v7) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return v5;
}

uint64_t anonymous namespace'::getDeviceDirection(_anonymous_namespace_ *this, const DeviceDescription *a2)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *((void *)this + 22);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    v5 += std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(v2 + 32));
    v2 += 136;
  }
  while (v2 != v3);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 24);
  uint64_t v6 = *((void *)this + 25);
  if (v7 == v6) {
    return 1;
  }
  uint64_t v8 = 0;
  do
  {
    v8 += std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(v7 + 32));
    v7 += 136;
  }
  while (v7 != v6);
  if (!v8) {
    return 1;
  }
  else {
    return 2;
  }
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::setProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X8>)
{
  uint64_t v11 = a3;
  unsigned int v7 = a4;
  unsigned int v8 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v11, &v7);
  char v6 = v10;
  if (v10)
  {
    *a5 = 0;
    char v6 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v9;
  }
  a5[16] = v6;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, void *a4, unsigned int *a5)
{
  if (!std::__shared_mutex_base::try_lock_shared(this)) {
    goto LABEL_7;
  }
  sig = (void *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(void *)a1 = 6;
    *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  uint64_t v11 = *(uint64_t (**)(void, void, void, void))(*sig + 96);
  if (v11)
  {
    unsigned int v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(unsigned char *)a1 = 0;
      LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 1;
      goto LABEL_11;
    }
    LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 0;
    uint64_t v13 = v12;
    uint32_t v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v13 = 2;
    uint32_t v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
LABEL_11:
  *(unsigned char *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_248986FDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x248986FBCLL);
}

void *adm::vp::ErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_2652431D8[a1]);
}

const char *adm::vp::ErrorCategory::name(adm::vp::ErrorCategory *this)
{
  return "adm::vp::ErrorCategory";
}

void adm::vp::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24C5866C0);
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v13 = a3;
  unsigned int v12 = *a4;
  unsigned int v9 = a2;
  unsigned int v8 = &v12;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>((uint64_t)&v10, (std::__shared_mutex_base *)(a1 + 8), &v9, &v13, &v8);
  char v7 = v11;
  if (v11)
  {
    *a4 = v12;
    *a5 = 0;
    char v7 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v10;
  }
  a5[16] = v7;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, void *a4, void *a5)
{
  if (!std::__shared_mutex_base::try_lock_shared(this)) {
    goto LABEL_7;
  }
  sig = (void *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(void *)a1 = 6;
    *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  char v11 = *(uint64_t (**)(void, void, void, void))(*sig + 88);
  if (v11)
  {
    unsigned int v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(unsigned char *)a1 = 0;
      LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 1;
      goto LABEL_11;
    }
    LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 0;
    uint64_t v13 = v12;
    uint32_t v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v13 = 2;
    uint32_t v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
LABEL_11:
  *(unsigned char *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_248987204(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x2489871E4);
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getPropertyInfo(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v11 = 0;
  unsigned int v8 = a2;
  char v7 = (char *)&v11 + 4;
  char v6 = &v11;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v7, &v6);
  char v4 = v10;
  if (v10)
  {
    BOOL v5 = v11 != 0;
    *(void *)a3 = HIDWORD(v11);
    *(void *)(a3 + 8) = v5;
    char v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v9;
  }
  *(unsigned char *)(a3 + 16) = v4;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, void *a4, void *a5)
{
  if (!std::__shared_mutex_base::try_lock_shared(this)) {
    goto LABEL_7;
  }
  sig = (void *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(void *)a1 = 6;
    *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  uint64_t v11 = *(uint64_t (**)(void, void, void, void))(*sig + 48);
  if (v11)
  {
    unsigned int v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(unsigned char *)a1 = 0;
      LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 1;
      goto LABEL_11;
    }
    LOBYTE(v1boost::detail::shared_count::~shared_count(this + 1) = 0;
    uint64_t v13 = v12;
    uint32_t v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v13 = 2;
    uint32_t v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
LABEL_11:
  *(unsigned char *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_2489873D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x2489873B0);
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::setParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X8>, float a4@<S0>)
{
  float v9 = a4;
  unsigned int v6 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v9);
  char v5 = v8;
  if (v8)
  {
    *a3 = 0;
    char v5 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  a3[16] = v5;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, float *a4)
{
  if (!std::__shared_mutex_base::try_lock_shared(this)) {
    goto LABEL_7;
  }
  sig = (void *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(void *)a1 = 6;
    *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  float v9 = *(uint64_t (**)(void, void, float))(*sig + 64);
  if (v9)
  {
    unsigned int v10 = v9(sig[1], *a3, *a4);
    if (!v10)
    {
      *(unsigned char *)a1 = 0;
      LOBYTE(v9) = 1;
      goto LABEL_11;
    }
    LOBYTE(v9) = 0;
    uint64_t v11 = v10;
    unsigned int v12 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v11 = 2;
    unsigned int v12 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
LABEL_11:
  *(unsigned char *)(a1 + 16) = (_BYTE)v9;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_24898756C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x248987550);
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v9 = 0;
  unsigned int v6 = a2;
  char v5 = &v9;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v5);
  char v4 = v8;
  if (v8)
  {
    *(_DWORD *)a3 = v9;
    char v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  *(unsigned char *)(a3 + 16) = v4;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, void *a4)
{
  if (!std::__shared_mutex_base::try_lock_shared(this)) {
    goto LABEL_7;
  }
  sig = (void *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(void *)a1 = 6;
    *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(unsigned char *)(a1 + 16) = 0;
    return;
  }
  int v9 = *(uint64_t (**)(void, void, void))(*sig + 56);
  if (v9)
  {
    unsigned int v10 = v9(sig[1], *a3, *a4);
    if (!v10)
    {
      *(unsigned char *)a1 = 0;
      LOBYTE(v9) = 1;
      goto LABEL_11;
    }
    LOBYTE(v9) = 0;
    uint64_t v11 = v10;
    unsigned int v12 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    uint64_t v11 = 2;
    unsigned int v12 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
LABEL_11:
  *(unsigned char *)(a1 + 16) = (_BYTE)v9;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_248987714(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(void *)uint64_t v9 = 6;
  *(void *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x2489876F8);
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::setProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X8>)
{
  uint64_t v11 = a3;
  unsigned int v7 = a4;
  unsigned int v8 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v11, &v7);
  char v6 = v10;
  if (v10)
  {
    *a5 = 0;
    char v6 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v9;
  }
  a5[16] = v6;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v13 = a3;
  unsigned int v12 = *a4;
  unsigned int v9 = a2;
  unsigned int v8 = &v12;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>((uint64_t)&v10, (std::__shared_mutex_base *)(a1 + 8), &v9, &v13, &v8);
  char v7 = v11;
  if (v11)
  {
    *a4 = v12;
    *a5 = 0;
    char v7 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v10;
  }
  a5[16] = v7;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getPropertyInfo(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v11 = 0;
  unsigned int v8 = a2;
  char v7 = (char *)&v11 + 4;
  char v6 = &v11;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v7, &v6);
  char v4 = v10;
  if (v10)
  {
    BOOL v5 = v11 != 0;
    *(void *)a3 = HIDWORD(v11);
    *(void *)(a3 + 8) = v5;
    char v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v9;
  }
  *(unsigned char *)(a3 + 16) = v4;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::setParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X8>, float a4@<S0>)
{
  float v9 = a4;
  unsigned int v6 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v9);
  char v5 = v8;
  if (v8)
  {
    *a3 = 0;
    char v5 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  a3[16] = v5;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v9 = 0;
  unsigned int v6 = a2;
  char v5 = &v9;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v5);
  char v4 = v8;
  if (v8)
  {
    *(_DWORD *)a3 = v9;
    char v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  *(unsigned char *)(a3 + 16) = v4;
}

void adm::vp::detail::UplinkProxyImplementation::getExpectedOutputSamplesForInputSamples(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(a1 + 16) = 0;
}

void adm::vp::detail::UplinkProxyImplementation::getRequiredInputSamplesForOutputSamples(void (***this)(adm::vp::SPIErrorCategory *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = this;
  v15[0] = 0;
  unsigned int v6 = (std::__shared_mutex_base *)(this + 1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(this + 1))) {
    goto LABEL_7;
  }
  long long v7 = v4[22];
  if (!v7)
  {
    std::__shared_mutex_base::unlock_shared(v6);
LABEL_7:
    uint64_t v12 = 0;
    char v4 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    unsigned __int8 v11 = 6;
    goto LABEL_8;
  }
  char v8 = (uint64_t (*)(void (*)(adm::vp::SPIErrorCategory *__hidden), void, uint64_t, _DWORD *))*((void *)*v7 + 15);
  if (v8)
  {
    int v9 = v8(v7[1], *((unsigned int *)v4 + 55), a2, v15);
    if (v9)
    {
      int v10 = 0;
      unsigned __int8 v11 = v9;
      uint64_t v12 = v9 & 0xFFFFFF00;
      char v4 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      unsigned __int8 v11 = 0;
      uint64_t v12 = 0;
      int v10 = 1;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v12 = 0;
    unsigned __int8 v11 = 2;
    char v4 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (v10)
  {
    uint64_t v14 = v15[0];
    char v13 = 1;
    goto LABEL_9;
  }
LABEL_8:
  char v13 = 0;
  uint64_t v14 = v12 | v11;
  *(void *)(a3 + 8) = v4;
LABEL_9:
  *(void *)a3 = v14;
  *(unsigned char *)(a3 + 16) = v13;
}

void sub_248987B00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 buf)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    std::string buf = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x248987AD0);
}

void adm::vp::detail::UplinkProxyImplementation::clientIO(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v26 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v22 = 0u;
  v21[0] = *(_DWORD *)(a1 + 220);
  v21[1] = a2;
  HIDWORD(v24) = a4;
  if (a2)
  {
    int v9 = &v24;
    int v10 = (void *)v23 + 1;
    do
    {
      *(v10 - 3) = *(void *)(a3 + 72);
      *v10++ = a3;
      *(_DWORD *)int v9 = *(_DWORD *)(a3 + 64);
      int v9 = (long long *)((char *)v9 + 4);
      a3 += 80;
      --a2;
    }
    while (a2);
  }
  if (a4)
  {
    unsigned __int8 v11 = &v26;
    uint64_t v12 = v25;
    do
    {
      *uint64_t v12 = *(void *)(a5 + 72);
      v12[3] = a5;
      *(_DWORD *)unsigned __int8 v11 = *(_DWORD *)(a5 + 64);
      unsigned __int8 v11 = (long long *)((char *)v11 + 4);
      a5 += 80;
      ++v12;
      --a4;
    }
    while (a4);
  }
  char v13 = (std::__shared_mutex_base *)(a1 + 8);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(a1 + 8))) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void **)(a1 + 176);
  if (!v14)
  {
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(a1 + 8));
LABEL_13:
    uint64_t v19 = 0;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    unsigned __int8 v18 = 6;
    goto LABEL_14;
  }
  int v15 = *(uint64_t (**)(void, _DWORD *))(*v14 + 128);
  if (v15)
  {
    int v16 = v15(v14[1], v21);
    if (v16)
    {
      int v17 = 0;
      unsigned __int8 v18 = v16;
      uint64_t v19 = v16 & 0xFFFFFF00;
      unsigned int v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      unsigned __int8 v18 = 0;
      uint64_t v19 = 0;
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v19 = 0;
    unsigned __int8 v18 = 2;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v13);
  if (v17)
  {
    *(unsigned char *)a6 = 0;
    char v20 = 1;
    goto LABEL_15;
  }
LABEL_14:
  char v20 = 0;
  *(void *)a6 = v19 | v18;
  *(void *)(a6 + 8) = v6;
LABEL_15:
  *(unsigned char *)(a6 + 16) = v20;
}

void sub_248987CD8(void *a1)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)(v1 - 64) = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)(v1 - 64), 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x248987CA8);
}

void adm::vp::detail::UplinkProxyImplementation::~UplinkProxyImplementation(adm::vp::detail::UplinkProxyImplementation *this)
{
  *(void *)this = &unk_26FCA3348;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26FCA3348;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void adm::vp::detail::DownlinkProxyImplementation::getExpectedOutputSamplesForInputSamples(void (***this)(adm::vp::SPIErrorCategory *__hidden this)@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  unsigned int v6 = this;
  *(void *)int v17 = 0;
  char v8 = (std::__shared_mutex_base *)(this + 1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(this + 1))) {
    goto LABEL_7;
  }
  int v9 = v6[22];
  if (!v9)
  {
    std::__shared_mutex_base::unlock_shared(v8);
LABEL_7:
    uint64_t v14 = 0;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    unsigned __int8 v13 = 6;
    goto LABEL_8;
  }
  int v10 = (uint64_t (*)(void (*)(adm::vp::SPIErrorCategory *__hidden), void, uint64_t, unsigned int *, unsigned int *))*((void *)*v9 + 17);
  if (v10)
  {
    int v11 = v10(v9[1], *((unsigned int *)v6 + 55), a3, &v17[1], v17);
    if (v11)
    {
      int v12 = 0;
      unsigned __int8 v13 = v11;
      uint64_t v14 = v11 & 0xFFFFFF00;
      unsigned int v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      unsigned __int8 v13 = 0;
      uint64_t v14 = 0;
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
    uint64_t v14 = 0;
    unsigned __int8 v13 = 2;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v8);
  if (v12)
  {
    uint64_t v16 = v17[0];
    *a2 = v17[1];
    char v15 = 1;
    goto LABEL_9;
  }
LABEL_8:
  char v15 = 0;
  uint64_t v16 = v14 | v13;
  *(void *)(a4 + 8) = v6;
LABEL_9:
  *(void *)a4 = v16;
  *(unsigned char *)(a4 + 16) = v15;
}

void sub_248987F58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 buf)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    std::string buf = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x248987F24);
}

void adm::vp::detail::DownlinkProxyImplementation::getRequiredInputSamplesForOutputSamples(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(void *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(unsigned char *)(a1 + 16) = 0;
}

void adm::vp::detail::DownlinkProxyImplementation::clientIO(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  long long v26 = 0u;
  v27[0] = 0u;
  long long v25 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v22 = 0u;
  long long v23 = 0u;
  v21[0] = *(_DWORD *)(a1 + 220);
  v21[1] = a2;
  DWORD1(v26) = a4;
  if (a2)
  {
    int v9 = &v25;
    int v10 = (void *)v24 + 1;
    do
    {
      *(v10 - std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = *(void *)(a3 + 72);
      *v10++ = a3;
      *(_DWORD *)int v9 = *(_DWORD *)(a3 + 64);
      int v9 = (long long *)((char *)v9 + 4);
      a3 += 80;
      --a2;
    }
    while (a2);
  }
  if (a4)
  {
    int v11 = (_DWORD *)v27 + 2;
    int v12 = v27;
    do
    {
      *(v12 - boost::detail::shared_count::~shared_count(this + 1) = *(void *)(a5 + 72);
      *int v12 = a5;
      *v11++ = *(_DWORD *)(a5 + 64);
      a5 += 80;
      ++v12;
      --a4;
    }
    while (a4);
  }
  unsigned __int8 v13 = (std::__shared_mutex_base *)(a1 + 8);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(a1 + 8))) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void **)(a1 + 176);
  if (!v14)
  {
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(a1 + 8));
LABEL_13:
    uint64_t v19 = 0;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    unsigned __int8 v18 = 6;
    goto LABEL_14;
  }
  char v15 = *(uint64_t (**)(void, _DWORD *))(*v14 + 144);
  if (v15)
  {
    int v16 = v15(v14[1], v21);
    if (v16)
    {
      int v17 = 0;
      unsigned __int8 v18 = v16;
      uint64_t v19 = v16 & 0xFFFFFF00;
      unsigned int v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      unsigned __int8 v18 = 0;
      uint64_t v19 = 0;
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
    uint64_t v19 = 0;
    unsigned __int8 v18 = 2;
    unsigned int v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v13);
  if (v17)
  {
    *(unsigned char *)a6 = 0;
    char v20 = 1;
    goto LABEL_15;
  }
LABEL_14:
  char v20 = 0;
  *(void *)a6 = v19 | v18;
  *(void *)(a6 + 8) = v6;
LABEL_15:
  *(unsigned char *)(a6 + 16) = v20;
}

void sub_248988140(void *a1)
{
  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)(v1 - 64) = 0;
    _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)(v1 - 64), 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x248988110);
}

void adm::vp::detail::DownlinkProxyImplementation::~DownlinkProxyImplementation(adm::vp::detail::DownlinkProxyImplementation *this)
{
  *(void *)this = &unk_26FCA33A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x24C5866C0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_26FCA33A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

BOOL adm::vp::SPIClient::isConfigured(std::__shared_mutex_base *this)
{
  BOOL result = std::__shared_mutex_base::try_lock_shared(this);
  if (result)
  {
    uint64_t sig = this[1].__mut_.__m_.__sig;
    std::__shared_mutex_base::unlock_shared(this);
    return sig != 0;
  }
  return result;
}

_DWORD *adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>::getConfiguration(uint64_t a1)
{
  adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)&v4, *(void *)(a1 + 200), *(std::__shared_weak_count **)(a1 + 208), *(_DWORD *)(a1 + 216));
  if (!v8) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v1 = v6;
  if (!v6)
  {
    uint64_t v1 = *(_DWORD **)(v4 + 8);
    uint64_t v2 = *(_DWORD **)(v4 + 16);
    if (v1 == v2)
    {
LABEL_6:
      uint64_t v1 = 0;
    }
    else
    {
      while (*v1 != v7)
      {
        v1 += 16;
        if (v1 == v2) {
          goto LABEL_6;
        }
      }
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

uint64_t adm::dsp::v1::GraphBuilder::build@<X0>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  unint64_t v104 = 0;
  if (*(unsigned char *)(a1 + 256))
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "compiling text", (uint8_t *)&buf, 2u);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    buf.__r_.__value_.__l.__size_ = a1;
    buf.__r_.__value_.__r.__words[2] = a2;
    int v7 = caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_0>;
    char v8 = "compile DSP graph text";
  }
  else
  {
    int v9 = *(unsigned __int8 *)(a1 + 96);
    int v10 = get_adm_log_object();
    int v11 = v10;
    if (!v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v19 = "failed to build DSP graph - graph file path and graph text are missing";
        char v20 = v11;
        goto LABEL_69;
      }
LABEL_23:
      unsigned __int16 v21 = 25456;
      goto LABEL_54;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        int v12 = (void *)*v12;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl(&dword_248947000, v11, OS_LOG_TYPE_DEFAULT, "compiling file \"%s\"", (uint8_t *)&buf, 0xCu);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    buf.__r_.__value_.__l.__size_ = a1;
    buf.__r_.__value_.__r.__words[2] = a2;
    int v7 = caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_1>;
    char v8 = "compile DSP graph";
  }
  unsigned __int8 v13 = v104;
  if (!v104)
  {
    unsigned __int8 v18 = get_adm_log_object();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v19 = "failed to build DSP graph - compilation error";
      char v20 = v18;
LABEL_69:
      _os_log_error_impl(&dword_248947000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, 2u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v14 = (const std::string::value_type *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0) {
      uint64_t v14 = *(const std::string::value_type **)v14;
    }
    std::string::__assign_external((std::string *)v104 + 17, v14);
    unsigned __int8 v13 = v104;
  }
  if (DSPGraph::Graph::numInputs(v13))
  {
    uint64_t v15 = DSPGraph::Graph::in(v104);
    uint64_t v16 = *(void *)(v15 + 88);
    if (*(void *)(v15 + 96) == v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v106, "out");
      long long v98 = (void *)(v15 + 32);
      if (*(char *)(v15 + 55) < 0) {
        long long v98 = (void *)*v98;
      }
      DSPGraph::strprintf((uint64_t *)&v105, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v97, v98, (uint64_t)(*(void *)(v15 + 96) - *(void *)(v15 + 88)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_197;
    }
    unsigned int v17 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16) + 120);
  }
  else
  {
    unsigned int v17 = 0;
  }
  unsigned int v22 = 1;
  while (v22 < DSPGraph::Graph::numInputs(v104))
  {
    uint64_t v23 = DSPGraph::Graph::in(v104);
    uint64_t v24 = *(void *)(v23 + 88);
    if (*(void *)(v23 + 96) == v24)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v106, "out");
      std::string v94 = (void *)(v23 + 32);
      if (*(char *)(v23 + 55) < 0) {
        std::string v94 = (void *)*v94;
      }
      DSPGraph::strprintf((uint64_t *)&v105, (DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v93, v94, (uint64_t)(*(void *)(v23 + 96) - *(void *)(v23 + 88)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
LABEL_197:
      __break(1u);
      return result;
    }
    ++v22;
    if (v17 != **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24) + 120))
    {
      long long v25 = get_adm_log_object();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v26 = "failed to build DSP graph - all input bus sample rates must be equal";
        goto LABEL_41;
      }
      goto LABEL_53;
    }
  }
  if (DSPGraph::Graph::numOutputs(v104))
  {
    uint64_t v27 = DSPGraph::Graph::out(v104);
    uint64_t v28 = *(void *)(v27 + 64);
    if (*(void *)(v27 + 72) == v28)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v106, "in");
      uint64_t v100 = (void *)(v27 + 32);
      if (*(char *)(v27 + 55) < 0) {
        uint64_t v100 = (void *)*v100;
      }
      DSPGraph::strprintf((uint64_t *)&v105, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v99, v100, (uint64_t)(*(void *)(v27 + 72) - *(void *)(v27 + 64)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_197;
    }
    unsigned int v29 = **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28) + 120);
  }
  else
  {
    unsigned int v29 = 0;
  }
  unsigned int v30 = 1;
  do
  {
    if (v30 >= DSPGraph::Graph::numOutputs(v104))
    {
      if (*(unsigned char *)(a1 + 316))
      {
        char v34 = get_adm_log_object();
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35 = v34;
        if (v17 != v29)
        {
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            goto LABEL_53;
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          long long v26 = "failed to build DSP graph - I/O bus sample rates of fixed block size graphs must be equal";
          uint64_t v33 = v35;
          goto LABEL_42;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = *(_DWORD *)(a1 + 312);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v36;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v17;
          _os_log_impl(&dword_248947000, v35, OS_LOG_TYPE_DEFAULT, "setting fixed slice duration using block size %u and sample rate %u", (uint8_t *)&buf, 0xEu);
        }
        DSPGraph::Graph::setSliceDuration();
        unsigned int v37 = 0;
      }
      else if (*(unsigned char *)(a1 + 324))
      {
        unsigned int v38 = get_adm_log_object();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          int v39 = *(_DWORD *)(a1 + 320);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v39;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v29;
          _os_log_impl(&dword_248947000, v38, OS_LOG_TYPE_DEFAULT, "setting variable slice duration using block size %u and output sample rate %u", (uint8_t *)&buf, 0xEu);
        }
        DSPGraph::Graph::setSliceDuration();
        unsigned int v37 = 2;
      }
      else
      {
        int v42 = *(unsigned __int8 *)(a1 + 332);
        int v43 = get_adm_log_object();
        long long v44 = v43;
        if (!v42)
        {
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl(&dword_248947000, v44, OS_LOG_TYPE_ERROR, "failed to build DSP graph - block size information is missing", (uint8_t *)&buf, 2u);
          }
          uint64_t v40 = 1684497011;
          goto LABEL_55;
        }
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          int v45 = *(_DWORD *)(a1 + 328);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v45;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v17;
          _os_log_impl(&dword_248947000, v44, OS_LOG_TYPE_DEFAULT, "setting variable slice duration using block size %u and input sample rate %u", (uint8_t *)&buf, 0xEu);
        }
        DSPGraph::Graph::setSliceDuration();
        unsigned int v37 = 3;
      }
      buf.__r_.__value_.__r.__words[0] = a1;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v104;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      {
        uint64_t v40 = 1684497254;
        goto LABEL_55;
      }
      if (*(unsigned char *)(a1 + 32))
      {
        uint32_t v46 = (_OWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *v46;
          buf.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = buf.__r_.__value_.__l.__size_;
        }
        applesauce::CF::StringRef::StringRef((CFStringRef *)&cf, (const UInt8 *)p_buf, size);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 32))
        {
          long long v49 = get_adm_log_object();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a1 + 31) < 0) {
              uint32_t v46 = *(_OWORD **)v46;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
            _os_log_impl(&dword_248947000, v49, OS_LOG_TYPE_DEFAULT, "setting \"%s\" resources path", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      else
      {
        CFTypeRef cf = 0;
      }
      std::string::size_type v50 = *(void *)(a1 + 152);
      for (uint64_t i = *(void *)(a1 + 160); v50 != i; v50 += 24)
      {
        if (*(char *)(v50 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v50, *(void *)(v50 + 8));
        }
        else
        {
          long long v52 = *(_OWORD *)v50;
          v106.__r_.__value_.__r.__words[2] = *(void *)(v50 + 16);
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v52;
        }
        BOOL v53 = std::string::insert(&v106, 0, "file_path ", 0xAuLL);
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        v106.__r_.__value_.__r.__words[0] = v50;
        v106.__r_.__value_.__l.__size_ = (std::string::size_type)&cf;
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v104;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      std::string::size_type v55 = *(void *)(a1 + 104);
      for (uint64_t j = *(void *)(a1 + 112); v55 != j; v55 += 24)
      {
        if (*(char *)(v55 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v55, *(void *)(v55 + 8));
        }
        else
        {
          long long v57 = *(_OWORD *)v55;
          v106.__r_.__value_.__r.__words[2] = *(void *)(v55 + 16);
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v57;
        }
        long long v58 = std::string::insert(&v106, 0, "file_path ", 0xAuLL);
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        v106.__r_.__value_.__r.__words[0] = v55;
        v106.__r_.__value_.__l.__size_ = (std::string::size_type)&v104;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      std::string::size_type v60 = *(void *)(a1 + 128);
      uint64_t v61 = *(void *)(a1 + 136);
      if (v60 != v61)
      {
        while (1)
        {
          if (*(char *)(v60 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(v60 + 24), *(void *)(v60 + 32));
          }
          else {
            std::string v102 = *(std::string *)(v60 + 24);
          }
          unint64_t v62 = std::string::insert(&v102, 0, "file_path ", 0xAuLL);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          unint64_t v64 = std::string::append(&v105, ", box_name ", 0xBuLL);
          long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v106.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          int v66 = *(char *)(v60 + 23);
          if (v66 >= 0) {
            unsigned int v67 = (const std::string::value_type *)v60;
          }
          else {
            unsigned int v67 = *(const std::string::value_type **)v60;
          }
          if (v66 >= 0) {
            std::string::size_type v68 = *(unsigned __int8 *)(v60 + 23);
          }
          else {
            std::string::size_type v68 = *(void *)(v60 + 8);
          }
          int v69 = std::string::append(&v106, v67, v68);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v105.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          v106.__r_.__value_.__r.__words[0] = v60;
          v106.__r_.__value_.__l.__size_ = v60 + 24;
          v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v104;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          v60 += 48;
          if (v60 == v61) {
            goto LABEL_125;
          }
        }
LABEL_171:
        uint64_t v91 = 1684496757;
LABEL_172:
        *(void *)a3 = v91;
        *(unsigned char *)(a3 + 16) = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_174;
      }
LABEL_125:
      std::string::size_type v71 = *(void *)(a1 + 176);
      uint64_t v72 = *(void *)(a1 + 184);
      if (v71 != v72)
      {
        while (1)
        {
          if (*(char *)(v71 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v71, *(void *)(v71 + 8));
          }
          else
          {
            long long v73 = *(_OWORD *)v71;
            v106.__r_.__value_.__r.__words[2] = *(void *)(v71 + 16);
            *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v73;
          }
          unint64_t v74 = std::string::insert(&v106, 0, "file_path ", 0xAuLL);
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          v106.__r_.__value_.__r.__words[0] = v71;
          v106.__r_.__value_.__l.__size_ = (std::string::size_type)&cf;
          v106.__r_.__value_.__r.__words[2] = (std::string::size_type)&v104;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          v71 += 24;
          if (v71 == v72) {
            goto LABEL_135;
          }
        }
LABEL_170:
        uint64_t v91 = 1684500595;
        goto LABEL_172;
      }
LABEL_135:
      uint64_t v76 = *(CFTypeRef **)(a1 + 288);
      char v77 = *(CFTypeRef **)(a1 + 296);
      if (v76 == v77)
      {
LABEL_142:
        uint64_t v79 = *(CFTypeRef **)(a1 + 264);
        unint64_t v80 = *(CFTypeRef **)(a1 + 272);
        if (v79 == v80)
        {
LABEL_151:
          buf.__r_.__value_.__r.__words[0] = a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v104;
          buf.__r_.__value_.__r.__words[0] = a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v104;
          if (*(unsigned char *)(a1 + 388))
          {
            long long v83 = get_adm_log_object();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            {
              int v84 = *(_DWORD *)(a1 + 384);
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v84;
              _os_log_impl(&dword_248947000, v83, OS_LOG_TYPE_DEFAULT, "setting sample rate conversion algorithm to %u", (uint8_t *)&buf, 8u);
            }
            DSPGraph::Graph::setSRCAlgorithm(v104);
            if (*(unsigned char *)(a1 + 388) && *(_DWORD *)(a1 + 384) == 1835626096)
            {
              int v85 = get_adm_log_object();
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_248947000, v85, OS_LOG_TYPE_DEFAULT, "enabling minium phase sample rate conversion", (uint8_t *)&buf, 2u);
              }
              DSPGraph::Graph::setSRCMinimumPhase(v104);
            }
          }
          if (*(unsigned char *)(a1 + 396))
          {
            CFArrayRef v86 = get_adm_log_object();
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
            {
              int v87 = *(_DWORD *)(a1 + 392);
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v87;
              _os_log_impl(&dword_248947000, v86, OS_LOG_TYPE_DEFAULT, "setting sample rate conversion quality to %u", (uint8_t *)&buf, 8u);
            }
            DSPGraph::Graph::setSRCQuality(v104);
          }
          LODWORD(v105.__r_.__value_.__l.__data_) = 2 * *(unsigned __int8 *)(a1 + 401);
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v105;
          {
            CFDictionaryRef v88 = v104;
            unint64_t v104 = 0;
            unint64_t v101 = v88;
            adm::dsp::v1::Graph::create(&v106, &v101, v37);
            uint64_t v89 = v101;
            unint64_t v101 = 0;
            if (v89) {
              (*(void (**)(DSPGraph::Graph *))(*(void *)v89 + 8))(v89);
            }
            std::string::size_type v90 = v106.__r_.__value_.__r.__words[0];
            if (v106.__r_.__value_.__r.__words[0] && *(unsigned char *)(a1 + 402))
            {
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
              buf.__r_.__value_.__l.__size_ = a1;
              std::string::size_type v90 = v106.__r_.__value_.__r.__words[0];
            }
            *(void *)a3 = v90;
            *(unsigned char *)(a3 + 16) = 1;
          }
          else
          {
            *(void *)a3 = 1684498798;
            *(unsigned char *)(a3 + 16) = 0;
          }
          goto LABEL_174;
        }
        while (1)
        {
          CFTypeRef v81 = *v79;
          if (*v79) {
            CFRetain(*v79);
          }
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          v106.__r_.__value_.__l.__size_ = (std::string::size_type)&v105;
          std::string::basic_string[abi:ne180100]<0>(&buf, (char *)&unk_2489B2B19);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if ((v82 & 1) == 0) {
            break;
          }
          if (v105.__r_.__value_.__r.__words[0]) {
            CFRelease(v105.__r_.__value_.__l.__data_);
          }
          if (++v79 == v80) {
            goto LABEL_151;
          }
        }
        *(void *)a3 = 1684496757;
        *(unsigned char *)(a3 + 16) = 0;
        std::string v92 = (const void *)v105.__r_.__value_.__r.__words[0];
        if (!v105.__r_.__value_.__r.__words[0]) {
          goto LABEL_174;
        }
      }
      else
      {
        while (1)
        {
          CFTypeRef v78 = *v76;
          if (*v76) {
            CFRetain(*v76);
          }
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v106;
          if (v106.__r_.__value_.__r.__words[0]) {
            CFRelease(v106.__r_.__value_.__l.__data_);
          }
          if (++v76 == v77) {
            goto LABEL_142;
          }
        }
        *(void *)a3 = 1684500595;
        *(unsigned char *)(a3 + 16) = 0;
        std::string v92 = (const void *)v106.__r_.__value_.__r.__words[0];
        if (!v106.__r_.__value_.__r.__words[0]) {
          goto LABEL_174;
        }
      }
      CFRelease(v92);
LABEL_174:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_56;
    }
    uint64_t v31 = DSPGraph::Graph::out(v104);
    uint64_t v32 = *(void *)(v31 + 64);
    if (*(void *)(v31 + 72) == v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v106, "in");
      unint64_t v96 = (void *)(v31 + 32);
      if (*(char *)(v31 + 55) < 0) {
        unint64_t v96 = (void *)*v96;
      }
      DSPGraph::strprintf((uint64_t *)&v105, (DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v95, v96, (uint64_t)(*(void *)(v31 + 72) - *(void *)(v31 + 64)) >> 5, 0);
      uint64_t result = DSPGraph::ThrowException();
      goto LABEL_197;
    }
    ++v30;
  }
  while (v29 == **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v32 + 40))(v32) + 120));
  long long v25 = get_adm_log_object();
  if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
    goto LABEL_53;
  }
  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
  long long v26 = "failed to build DSP graph - all output bus sample rates must be equal";
LABEL_41:
  uint64_t v33 = v25;
LABEL_42:
  _os_log_error_impl(&dword_248947000, v33, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, 2u);
LABEL_53:
  unsigned __int16 v21 = 29554;
LABEL_54:
  uint64_t v40 = v21 | 0x64670000u;
LABEL_55:
  *(void *)a3 = v40;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_56:
  uint64_t result = (uint64_t)v104;
  unint64_t v104 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2489894C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t adm::dsp::v1::anonymous namespace'::exception_guard(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

{
  void (*v4)(void);
  void v5[7];

  v5[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  v5[0] = a3;
  a2(v5);
  return 1;
}

CFStringRef *applesauce::CF::StringRef::StringRef(CFStringRef *a1, const UInt8 *a2, CFIndex a3)
{
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 0);
    *a1 = v4;
    if (!v4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_248989660(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_248989708(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, long long a12, uint64_t *a13)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      if (*((char *)v13 + 23) >= 0) {
        unsigned __int8 v18 = v13;
      }
      else {
        unsigned __int8 v18 = (uint64_t *)*v13;
      }
      std::string buf = 136315650;
      WORD2(a12) = 2080;
      *(void *)((char *)&a12 + 6) = v17;
      HIWORD(a12) = 2080;
      a13 = v18;
      uint64_t v19 = "failed to %s due to DSPGraph exception: %s - %s";
LABEL_14:
      uint64_t v24 = adm_log_object;
      uint32_t v25 = 32;
LABEL_21:
      _os_log_error_impl(&dword_248947000, v24, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    char v20 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    BOOL v21 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v21)
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
        if (*((char *)v13 + 23) >= 0) {
          uint64_t v23 = v13;
        }
        else {
          uint64_t v23 = (uint64_t *)*v13;
        }
        std::string buf = 136315650;
        WORD2(a12) = 2080;
        *(void *)((char *)&a12 + 6) = v22;
        HIWORD(a12) = 2080;
        a13 = v23;
        uint64_t v19 = "failed to %s due to std::exception: %s - %s";
        goto LABEL_14;
      }
    }
    else if (v21)
    {
      if (*((char *)v13 + 23) >= 0) {
        long long v26 = v13;
      }
      else {
        long long v26 = (uint64_t *)*v13;
      }
      std::string buf = 136315394;
      WORD2(a12) = 2080;
      *(void *)((char *)&a12 + 6) = v26;
      uint64_t v19 = "failed to %s due to unknown exception - %s";
      uint64_t v24 = adm_log_object;
      uint32_t v25 = 22;
      goto LABEL_21;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x2489896D4);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_13>(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 8);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)char v5 = 0;
    _os_log_debug_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEBUG, "connecting to AUPB", v5, 2u);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)**v1 + 168))(**v1, v2 + 200);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_12>(void ***a1)
{
  return MEMORY[0x270F0FF28](***a1, *(unsigned int *)(*a1)[1]);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_11>(uint64_t **a1)
{
  uint64_t v1 = (std::string::size_type *)(*a1)[1];
  std::string::size_type v2 = *v1;
  uint64_t v3 = *(uint64_t **)(*v1 + 576);
  if (v3)
  {
    uint64_t v4 = **a1;
    do
    {
      if (!*((unsigned char *)v3 + 64))
      {
        uint64_t v5 = *(void *)(v4 + 360);
        uint64_t v6 = *(void *)(v4 + 368);
        if (v5 != v6)
        {
          unsigned int v7 = *((_DWORD *)v3 + 4);
          while (*(_DWORD *)v5 != v7)
          {
            v5 += 32;
            if (v5 == v6) {
              goto LABEL_4;
            }
          }
          uint64_t v8 = *(void *)(v5 + 8);
          uint64_t v9 = *(void *)(v5 + 16) - v8;
          v16[0] = v8;
          v16[1] = v9;
          unsigned int v15 = v7;
          std::to_string(&v12, v7);
          int v10 = std::string::insert(&v12, 0, "property id ", 0xCuLL);
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v12.__r_.__value_.__l.__data_);
          }
          v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          v12.__r_.__value_.__l.__size_ = v2;
          v12.__r_.__value_.__r.__words[2] = (std::string::size_type)&v15;
          if (SHIBYTE(v14) < 0) {
            operator delete(__p[0]);
          }
        }
      }
LABEL_4:
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_248989AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::doSetPropertyValue(DSPGraph::Graph &,unsigned int,std::span<std::byte const,18446744073709551615ul>)::$_0>(void ***a1)
{
  return (*(uint64_t (**)(void *, void, void, void))(*(*a1)[1] + 56))((*a1)[1], *(unsigned int *)(*a1)[2], *((unsigned int *)**a1 + 2), ***a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_10>(uint64_t **a1)
{
  uint64_t v1 = (std::string::size_type *)(*a1)[1];
  std::string::size_type v2 = *v1;
  uint64_t v3 = *(uint64_t **)(*v1 + 536);
  if (v3)
  {
    uint64_t v4 = **a1;
    do
    {
      uint64_t v5 = *(float **)(v4 + 336);
      uint64_t v6 = *(float **)(v4 + 344);
      if (v5 != v6)
      {
        unsigned int v7 = *((_DWORD *)v3 + 4);
        while (*(_DWORD *)v5 != v7)
        {
          v5 += 2;
          if (v5 == v6) {
            goto LABEL_24;
          }
        }
        float v8 = v5[1];
        int v24 = *((_DWORD *)v3 + 4);
        float v23 = v8;
        std::to_string(&v18, v7);
        uint64_t v9 = std::string::insert(&v18, 0, "parameter id ", 0xDuLL);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        long long v11 = std::string::append(&v19, ", value ", 8uLL);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, v8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        unsigned int v15 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v22 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)BOOL v21 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
        v20.__r_.__value_.__l.__size_ = (std::string::size_type)&v23;
        v20.__r_.__value_.__r.__words[2] = v2;
        if (SHIBYTE(v22) < 0) {
          operator delete(v21[0]);
        }
      }
LABEL_24:
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_248989CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::doSetParameterValue(DSPGraph::Graph &,unsigned int,float)::$_0>(unsigned int ***a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = **v1;
    int v4 = bswap32(v3);
    *(_DWORD *)&buf[1] = v4;
    if (((char)v4 - 32) > 0x5E
      || (((__int16)v4 >> 8) - 32) > 0x5E
      || ((v4 << 8 >> 24) - 32) > 0x5E
      || ((v4 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v8, v3);
    }
    else
    {
      strcpy(&buf[5], "'");
      buf[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&v8, buf);
    }
    uint64_t v5 = &v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    double v6 = *(float *)v1[1];
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v10 = 2048;
    double v11 = v6;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting parameter %s to %f", buf, 0x16u);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  return (*(uint64_t (**)(unsigned int *, void, float))(*(void *)v1[2] + 40))(v1[2], **v1, *(float *)v1[1]);
}

void sub_248989ED0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_9>(DSPGraph::Graph ****a1)
{
  uint64_t v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting austrip as plist", v4, 2u);
  }
  return DSPGraph::Graph::setAUStrip(**v1, *v1[1]);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_8>(DSPGraph::Graph ****a1)
{
  uint64_t v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting propstrip as plist", v4, 2u);
  }
  return DSPGraph::Graph::setPropertyStrip(**v1, *v1[1]);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_7>(const std::__fs::filesystem::path ***a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  std::string::size_type v2 = **a1;
  if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, v2->__pn_.__r_.__value_.__l.__data_, v2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&v2->__pn_.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef(&v13, (uint64_t)&v15);
  CFDataRef v4 = v13;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v13);
  if (v4) {
    CFRelease(v4);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string::size_type v5 = v1[1]->__pn_.__r_.__value_.__r.__words[0];
  adm_log_object = get_adm_log_object();
  BOOL v7 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      std::string v8 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string v8 = (const std::__fs::filesystem::path *)v8->__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v9, (const __CFDictionary *)v15.__r_.__value_.__l.__data_, (const __CFString *)v1[1]->__pn_.__r_.__value_.__l.__data_);
    __int16 v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0]) {
LABEL_20:
    }
      CFRelease(v10);
  }
  else
  {
    if (v7)
    {
      double v11 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        double v11 = (const std::__fs::filesystem::path *)v11->__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v12 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v12, (const __CFDictionary *)v15.__r_.__value_.__l.__data_);
    __int16 v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0]) {
      goto LABEL_20;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_24898A1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void adm::dsp::v1::anonymous namespace'::loadPlist(adm::dsp::v1::_anonymous_namespace_ *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = a2->__pn_;
  }
  applesauce::CF::make_DataRef(&v5, (uint64_t)&__p);
  CFDataRef v3 = v5;
  applesauce::CF::make_DictionaryRef(this, v5);
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_24898A2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_6>(const std::__fs::filesystem::path ***a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    CFDataRef v3 = *v1;
    if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      CFDataRef v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
    }
    CFDataRef v4 = v1[1];
    if (SHIBYTE(v4->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      CFDataRef v4 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)CFTypeRef cf = 136315394;
    *(void *)&cf[4] = v3;
    __int16 v7 = 2080;
    std::string v8 = v4;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "on box \"%s\", setting \"%s\"", cf, 0x16u);
  }
  uint64_t v5 = DSPGraph::Graph::box();
  (*(void (**)(uint64_t, void))(*(void *)v5 + 352))(v5, *(void *)cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
}

void sub_24898A42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_5>(const std::__fs::filesystem::path ***a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    CFDataRef v3 = *v1;
    if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      CFDataRef v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)CFTypeRef cf = 136315138;
    *(void *)&cf[4] = v3;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", cf, 0xCu);
  }
  CFDataRef v4 = (DSPGraph::Graph *)v1[1]->__pn_.__r_.__value_.__r.__words[0];
  DSPGraph::Graph::setAUStrip(v4, *(const __CFDictionary **)cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
}

void sub_24898A534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_4>(const std::__fs::filesystem::path ***a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  std::string::size_type v2 = **a1;
  if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, v2->__pn_.__r_.__value_.__l.__data_, v2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&v2->__pn_.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef(&v13, (uint64_t)&v15);
  CFDataRef v4 = v13;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v13);
  if (v4) {
    CFRelease(v4);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string::size_type v5 = v1[1]->__pn_.__r_.__value_.__r.__words[0];
  adm_log_object = get_adm_log_object();
  BOOL v7 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      std::string v8 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string v8 = (const std::__fs::filesystem::path *)v8->__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v9 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v9, (const __CFDictionary *)v15.__r_.__value_.__l.__data_, (const __CFString *)v1[1]->__pn_.__r_.__value_.__l.__data_);
    __int16 v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0]) {
LABEL_20:
    }
      CFRelease(v10);
  }
  else
  {
    if (v7)
    {
      double v11 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0) {
        double v11 = (const std::__fs::filesystem::path *)v11->__pn_.__r_.__value_.__r.__words[0];
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v12 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v12, (const __CFDictionary *)v15.__r_.__value_.__l.__data_);
    __int16 v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0]) {
      goto LABEL_20;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_24898A744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_3>(void ***a1)
{
  return MEMORY[0x270F0FF60](***a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_2>(uint64_t **a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = **a1;
  if (*(unsigned char *)(v1 + 400) && *(unsigned char *)(v1 + 64))
  {
    uint64_t v2 = *(void *)(*a1)[1];
    uint64_t v3 = v1 + 40;
    v20.__val_ = 0;
    v20.__cat_ = std::system_category();
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)(v1 + 40), &v20);
    if (*(char *)(v2 + 431) >= 0) {
      CFDataRef v4 = (const char *)(v2 + 408);
    }
    else {
      CFDataRef v4 = *(const char **)(v2 + 408);
    }
    if (v4)
    {
      CFIndex v5 = strlen(v4);
      CFStringRef cf = CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
      if (!cf)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
    }
    else
    {
      CFStringRef cf = 0;
    }
    BOOL v7 = *(void **)(v2 + 24);
    if (v7)
    {
      std::string v8 = (const time_t *)(v1 + 408);
      do
      {
        if ((*(uint64_t (**)(void))(*(void *)v7[2] + 232))(v7[2])
          || (*(uint64_t (**)(void))(*(void *)v7[2] + 240))(v7[2]))
        {
          uint64_t v9 = (char *)v7[2];
          if (*(char *)(v2 + 431) >= 0) {
            __int16 v10 = (const char *)(v2 + 408);
          }
          else {
            __int16 v10 = *(const char **)(v2 + 408);
          }
          double v11 = v9 + 32;
          if (v9[55] < 0) {
            double v11 = *(const char **)v11;
          }
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v22 = 0;
          std::string::append[abi:ne180100]<char const*,0>((std::string *)__p, (std::string *)"adm.", (std::string *)"");
          std::__fs::filesystem::operator/[abi:ne180100](&v19, v3, (std::__fs::filesystem::path *)__p);
          if (SBYTE7(v22) < 0) {
            operator delete(__p[0]);
          }
          long long v23 = 0u;
          long long v24 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v22 = 0u;
          uint64_t v12 = localtime(v8);
          strftime((char *)__p, 0x40uLL, "%Y%m%d.%H%M%S.", v12);
          CFDataRef v13 = (std::string *)((char *)&v20.__cat_ + 7);
          do
          {
            int v14 = v13->__r_.__value_.__s.__data_[1];
            CFDataRef v13 = (std::string *)((char *)v13 + 1);
          }
          while (v14);
          std::string::append[abi:ne180100]<char const*,0>(&v19, (std::string *)__p, v13);
          if (v10 && *v10)
          {
            size_t v15 = strlen(v10);
            std::string::append(&v19, v10, v15);
            std::string::append(&v19, ".", 1uLL);
          }
          if (v11 && *v11)
          {
            size_t v16 = strlen(v11);
            std::string::append(&v19, v11, v16);
          }
          std::string::append(&v19, ".caf", 4uLL);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v19;
          }
          else {
            uint64_t v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
          }
          (*(void (**)(char *, std::string *, void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 152))(v9, v17, 0, 1, 1, 4096);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
        }
        BOOL v7 = (void *)*v7;
      }
      while (v7);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_24898AB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_1>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)v9);
  adm::dsp::GraphMacroGenerator::operator()((uint64_t)v8, *(void *)(v1 + 16));
  memset(v7, 0, sizeof(v7));
  DSPGraph::Interpreter::compileFile();
  uint64_t v2 = *(uint64_t **)v1;
  uint64_t v3 = v11;
  uint64_t v11 = 0;
  uint64_t v4 = *v2;
  uint64_t *v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v12 = (void **)v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  return MEMORY[0x24C586050](v9);
}

void sub_24898ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  *(void *)(v5 - 40) = v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  MEMORY[0x24C586050](va1);
  _Unwind_Resume(a1);
}

DSPGraph::Interpreter *DSPGraph::Interpreter::Interpreter(DSPGraph::Interpreter *this)
{
  *(void *)this = MEMORY[0x263F28DE8] + 16;
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  MEMORY[0x24C586060]((char *)this + 16);
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 42) = 1;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 2std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  return this;
}

void sub_24898AD5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)v9);
  adm::dsp::GraphMacroGenerator::operator()((uint64_t)v8, *(void *)(v1 + 16));
  memset(v7, 0, sizeof(v7));
  DSPGraph::Interpreter::compileText();
  uint64_t v2 = *(uint64_t **)v1;
  uint64_t v3 = v11;
  uint64_t v11 = 0;
  uint64_t v4 = *v2;
  uint64_t *v2 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v12 = (void **)v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  return MEMORY[0x24C586050](v9);
}

void sub_24898AEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  *(void *)(v5 - 40) = v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  MEMORY[0x24C586050](va1);
  _Unwind_Resume(a1);
}

void adm::dsp::v1::GraphBuilder::~GraphBuilder(adm::dsp::v1::GraphBuilder *this)
{
  adm::dsp::GraphBuilder::~GraphBuilder(this);
  JUMPOUT(0x24C5866C0);
}

void adm::dsp::GraphBuilder::~GraphBuilder(adm::dsp::GraphBuilder *this)
{
  *(void *)this = &unk_26FCA3650;
  uint64_t v2 = *((void *)this + 45);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 46);
    uint64_t v4 = (void *)*((void *)this + 45);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 45);
    }
    *((void *)this + 46) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)*((void *)this + 42);
  if (v6)
  {
    *((void *)this + 43) = v6;
    operator delete(v6);
  }
  uint64_t v10 = (void **)((char *)this + 288);
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 264);
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((unsigned char *)this + 256) && *((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((unsigned char *)this + 224) && *((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  uint64_t v10 = (void **)((char *)this + 176);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 152);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = *((void *)this + 16);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 17);
    uint64_t v9 = (void *)*((void *)this + 16);
    if (v8 != v7)
    {
      do
      {
        v8 -= 48;
        std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v8);
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v7;
    operator delete(v9);
  }
  uint64_t v10 = (void **)((char *)this + 104);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((unsigned char *)this + 96) && *((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
  }
}

void adm::config_policy::getDeviceConfigurations(uint64_t a1, adm::ConfigurationChangeRequest *a2, uint64_t a3)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  v93[0] = 0;
  v93[1] = 0;
  std::string v92 = (uint64_t *)v93;
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(void *)(a3 + 8);
    if (*(void *)a3 != v6)
    {
      do
      {
        BYTE8(v89) = 0;
        *(_WORD *)std::string::size_type v90 = 0;
        v90[4] = 0;
        v90[8] = 0;
        *(_WORD *)&v90[12] = 0;
        v90[16] = 0;
        v90[20] = 0;
        v90[24] = 0;
        v90[28] = 0;
        memset(&v88, 0, sizeof(v88));
        LOBYTE(v89) = 0;
        std::string::operator=(&v88, (const std::string *)v5);
        if (*(unsigned char *)(v5 + 41) && *(unsigned char *)(v5 + 40)) {
          *(_WORD *)std::string::size_type v90 = 256;
        }
        if (*(unsigned char *)(v5 + 53) && *(unsigned char *)(v5 + 52)) {
          *(_WORD *)&v90[12] = 256;
        }
        if (*(unsigned char *)(v5 + 68) && *(_DWORD *)(v5 + 64))
        {
          *(_DWORD *)&v90[24] = 0;
          v90[28] = 1;
        }
        if (*(unsigned char *)(v5 + 60) && *(_DWORD *)(v5 + 56))
        {
          *(_DWORD *)&v90[16] = 0;
          v90[20] = 1;
        }
        uint64_t v7 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, (void *)v5, v5);
        uint64_t v8 = (void **)(v7 + 7);
        if (*((char *)v7 + 79) < 0) {
          operator delete(*v8);
        }
        v7[9] = (uint64_t *)v88.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        long long v9 = *(_OWORD *)v90;
        *((_OWORD *)v7 + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = v89;
        *((_OWORD *)v7 + 6) = v9;
        *(_OWORD *)((char *)v7 + 109) = *(_OWORD *)&v90[13];
        v5 += 72;
      }
      while (v5 != v6);
    }
  }
  if (*(unsigned char *)a2)
  {
    DeviceDescriptiouint64_t n = adm::config_policy::getDeviceDescription(a2, 1);
    uint64_t v11 = adm::config_policy::getDeviceDescription(a2, 0);
    BYTE8(v8std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
    *(_WORD *)CFArrayRef v86 = 0;
    v86[4] = 0;
    v86[8] = 0;
    *(_WORD *)&v86[12] = 0;
    v86[16] = 0;
    v86[20] = 0;
    v86[24] = 0;
    v86[28] = 0;
    memset(&v84, 0, sizeof(v84));
    LOBYTE(v8std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation conferencing");
    uint64_t v12 = (char *)a2 + 8;
    CFDataRef v13 = std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, &buf);
    int v14 = (void *)((char *)a2 + 16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v14 == v13)
    {
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "No input device configuration needed", (uint8_t *)&buf, 2u);
      }
      goto LABEL_28;
    }
    if (DeviceDescription)
    {
      std::string::operator=(&v84, (const std::string *)DeviceDescription);
      if (*((void *)DeviceDescription + 24) != *((void *)DeviceDescription + 25)) {
        goto LABEL_24;
      }
      uint64_t v23 = *((void *)DeviceDescription + 21);
      uint64_t v24 = *((void *)DeviceDescription + 22);
      if (v23 == v24) {
        goto LABEL_24;
      }
      while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v23 + 32), "reference"))
      {
        v23 += 136;
        if (v23 == v24) {
          goto LABEL_24;
        }
      }
      if (v23 == v24) {
        goto LABEL_24;
      }
      *(_WORD *)CFArrayRef v86 = 257;
      uint64_t v34 = *(void *)(v23 + 104);
      uint64_t v35 = *(void *)(v23 + 112);
      uint64_t v36 = v34 + 40;
      BOOL v37 = v34 == v35 || v36 == v35;
      if (!v37)
      {
        do
        {
          if (*(_DWORD *)(v34 + 28) < *(_DWORD *)(v36 + 28)) {
            uint64_t v34 = v36;
          }
          v36 += 40;
        }
        while (v36 != v35);
      }
      int v38 = *(_DWORD *)(v34 + 28);
      int v39 = get_adm_log_object();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v38;
        _os_log_impl(&dword_248947000, v39, OS_LOG_TYPE_DEFAULT, "The max channel count in the supported ref stream format is %u", (uint8_t *)&buf, 8u);
      }
      if (v38)
      {
        *(_DWORD *)&v86[4] = v38;
        v86[8] = 1;
LABEL_24:
        if (adm::config_policy::isBuiltInMicrophoneDevice(DeviceDescription, v15))
        {
          *(_DWORD *)&v86[24] = 1;
          v86[28] = 1;
          *(_DWORD *)&v86[16] = 1;
          v86[20] = 1;
        }
LABEL_28:
        std::string v88 = v84;
        long long v89 = v85;
        memset(&v84, 0, sizeof(v84));
        *(_OWORD *)std::string::size_type v90 = *(_OWORD *)v86;
        *(_OWORD *)&v90[13] = *(_OWORD *)&v86[13];
        int v17 = 1;
        goto LABEL_31;
      }
      std::string v18 = get_adm_log_object();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v48 = "Max channel count of the available ref stream is 0 ";
        goto LABEL_108;
      }
    }
    else
    {
      std::string v18 = get_adm_log_object();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        long long v48 = "Input device description unavailable";
LABEL_108:
        _os_log_error_impl(&dword_248947000, v18, OS_LOG_TYPE_ERROR, v48, (uint8_t *)&buf, 2u);
      }
    }
    int v17 = 0;
    v88.__r_.__value_.__r.__words[0] = 1969448551;
LABEL_31:
    char v91 = v17;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v84.__r_.__value_.__l.__data_);
      if (v91)
      {
LABEL_33:
        std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v88.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::error_code v20 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, &v88, (uint64_t)&v88);
        }
        BYTE8(v98) = 0;
        *(_WORD *)uint64_t v99 = 0;
        v99[4] = 0;
        v99[8] = 0;
        *(_WORD *)&v99[12] = 0;
        v99[16] = 0;
        v99[20] = 0;
        v99[24] = 0;
        v99[28] = 0;
        memset(&buf, 0, sizeof(buf));
        LOBYTE(v98) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
        if (v14 == std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "voice activity detection");
          BOOL v22 = v14 != std::__tree<std::string>::find<std::string>((uint64_t)v12, __p)
             || adm::config_policy::isExclaveUseCase((uint64_t)v12);
          if (v95 < 0) {
            operator delete(*(void **)__p);
          }
        }
        else
        {
          BOOL v22 = 1;
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v96.__r_.__value_.__l.__data_);
          if (v22)
          {
LABEL_52:
            if (v11)
            {
              std::string::operator=(&buf, (const std::string *)v11);
              std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
              BOOL v25 = v14 != std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96)
                 || adm::config_policy::isExclaveUseCase((uint64_t)v12);
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v96.__r_.__value_.__l.__data_);
              }
              BOOL v31 = DeviceDescription
                 && *((_DWORD *)DeviceDescription + 16) == 1651275109
                 && *((_DWORD *)DeviceDescription + 19) == 1
                 && *((unsigned char *)DeviceDescription + 160) != 0;
              if (*((_DWORD *)v11 + 16) == 1651275109 && !v25 && v31 && *((_DWORD *)v11 + 19) == 1) {
                goto LABEL_118;
              }
              uint64_t v32 = *((void *)v11 + 21);
              uint64_t v33 = *((void *)v11 + 22);
              if (v32 == v33) {
                goto LABEL_96;
              }
              while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v32 + 32), "reference"))
              {
                v32 += 136;
                if (v32 == v33) {
                  goto LABEL_96;
                }
              }
              if (v32 == v33)
              {
LABEL_96:
                int v43 = get_adm_log_object();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v96.__r_.__value_.__l.__data_) = 0;
                  _os_log_error_impl(&dword_248947000, v43, OS_LOG_TYPE_ERROR, "None of the input HW streams on the output device is marked as ref stream", (uint8_t *)&v96, 2u);
                }
                uint64_t v44 = *((void *)v11 + 21);
                for (uint64_t i = *((void *)v11 + 22); v44 != i; v44 += 136)
                {
                  uint32_t v46 = get_adm_log_object();
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v96, v44 + 32, (char *)&unk_2489B2B19);
                    uint64_t v47 = (v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? &v96
                        : (std::string *)v96.__r_.__value_.__r.__words[0];
                    *(_DWORD *)std::string __p = 136315138;
                    *(void *)&__p[4] = v47;
                    _os_log_error_impl(&dword_248947000, v46, OS_LOG_TYPE_ERROR, "Input HW stream on the output device has semantic %s", __p, 0xCu);
                    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v96.__r_.__value_.__l.__data_);
                    }
                  }
                }
                goto LABEL_126;
              }
              uint64_t v40 = *(void *)(v32 + 104);
              uint64_t v41 = *(void *)(v32 + 112);
              if (v40 == v41)
              {
                unsigned int v42 = 0;
              }
              else
              {
                unsigned int v42 = 0;
                do
                {
                  if (*(_DWORD *)(v40 + 28) > v42) {
                    unsigned int v42 = *(_DWORD *)(v40 + 28);
                  }
                  v40 += 40;
                }
                while (v40 != v41);
              }
              long long v49 = get_adm_log_object();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v96.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(v96.__r_.__value_.__r.__words[0]) = v42;
                _os_log_impl(&dword_248947000, v49, OS_LOG_TYPE_DEFAULT, "The max channel count in the supported ref stream format is %u", (uint8_t *)&v96, 8u);
              }
              if (v42)
              {
                *(_WORD *)uint64_t v99 = 257;
                if (!v99[8]) {
                  v99[8] = 1;
                }
                *(_DWORD *)&v99[4] = v42;
LABEL_118:
                std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
                if (v14 == std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96))
                {
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v96.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  int v50 = *((_DWORD *)v11 + 16);
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v96.__r_.__value_.__l.__data_);
                  }
                  if (v50 == 1651275109) {
                    *(_WORD *)&v99[12] = 257;
                  }
                }
LABEL_58:
                int v27 = 0;
                std::string v84 = buf;
                long long v85 = v98;
                memset(&buf, 0, sizeof(buf));
                *(_OWORD *)CFArrayRef v86 = *(_OWORD *)v99;
                *(_OWORD *)&v86[13] = *(_OWORD *)&v99[13];
                int v28 = 1;
                goto LABEL_127;
              }
              unsigned int v29 = get_adm_log_object();
              if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
LABEL_126:
                int v28 = 0;
                v84.__r_.__value_.__r.__words[0] = 1969448551;
                int v27 = 1;
LABEL_127:
                unsigned __int8 v87 = v28;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if (v27) {
                    goto LABEL_129;
                  }
                }
                else if (v27)
                {
LABEL_129:
                  *(_OWORD *)a1 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
                  *(unsigned char *)(a1 + 24) = 0;
                  goto LABEL_138;
                }
                std::string::size_type v51 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                char v52 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v51 = v84.__r_.__value_.__l.__size_;
                }
                if (v51)
                {
                  BOOL v53 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, &v84, (uint64_t)&v84);
                  int v28 = v87;
                  char v52 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                }
                if (v28 && v52 < 0) {
                  operator delete(v84.__r_.__value_.__l.__data_);
                }
LABEL_138:
                if (v91 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v88.__r_.__value_.__l.__data_);
                }
                if (v27) {
                  goto LABEL_192;
                }
                goto LABEL_142;
              }
              LOWORD(v96.__r_.__value_.__l.__data_) = 0;
              unsigned int v30 = "Max channel count of the available ref stream is 0 ";
            }
            else
            {
              unsigned int v29 = get_adm_log_object();
              if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                goto LABEL_126;
              }
              LOWORD(v96.__r_.__value_.__l.__data_) = 0;
              unsigned int v30 = "Output device description unavailable";
            }
            _os_log_error_impl(&dword_248947000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v96, 2u);
            goto LABEL_126;
          }
        }
        else if (v22)
        {
          goto LABEL_52;
        }
        long long v26 = get_adm_log_object();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v96.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_248947000, v26, OS_LOG_TYPE_DEFAULT, "No output device configuration needed", (uint8_t *)&v96, 2u);
        }
        goto LABEL_58;
      }
    }
    else if (v17)
    {
      goto LABEL_33;
    }
    *(_OWORD *)a1 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_192;
  }
LABEL_142:
  long long v55 = 0uLL;
  memset(&v88, 0, sizeof(v88));
  long long v56 = v92;
  if (v92 != (uint64_t *)v93)
  {
    std::string::size_type v57 = 0;
    while (1)
    {
      if (*((unsigned char *)v56 + 88)) {
        BOOL v58 = 0;
      }
      else {
        BOOL v58 = *((unsigned char *)v56 + 97) == 0;
      }
      if (v58
        && *((unsigned char *)v56 + 104) == 0
        && *((unsigned char *)v56 + 109) == 0
        && *((unsigned char *)v56 + 116) == 0
        && *((unsigned char *)v56 + 124) == 0)
      {
        goto LABEL_181;
      }
      long long v63 = (long long *)(v56 + 7);
      if (v57 >= v88.__r_.__value_.__r.__words[2])
      {
        unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v57 - v88.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v68 = v67 + 1;
        if (v67 + 1 > 0x38E38E38E38E38ELL) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72
           * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) > v68)
          unint64_t v68 = 0x1C71C71C71C71C72
              * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3);
        if (0x8E38E38E38E38E39
           * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) >= 0x1C71C71C71C71C7)
          unint64_t v69 = 0x38E38E38E38E38ELL;
        else {
          unint64_t v69 = v68;
        }
        if (v69) {
          unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(v69);
        }
        else {
          uint64_t v70 = 0;
        }
        std::string::size_type v71 = v69 + 72 * v67;
        long long v72 = *v63;
        *(void *)(v71 + 16) = v56[9];
        *(_OWORD *)std::string::size_type v71 = v72;
        v56[8] = 0;
        v56[9] = 0;
        *(void *)long long v63 = 0;
        long long v73 = *(_OWORD *)((char *)v56 + 109);
        long long v74 = *((_OWORD *)v56 + 5);
        *(_OWORD *)(v71 + 40) = *((_OWORD *)v56 + 6);
        *(_OWORD *)(v71 + 24) = v74;
        *(_OWORD *)(v71 + 53) = v73;
        std::string::size_type v57 = v71 + 72;
        uint64_t v76 = (char *)v88.__r_.__value_.__l.__size_;
        std::string::size_type v75 = v88.__r_.__value_.__r.__words[0];
        if (v88.__r_.__value_.__l.__size_ == v88.__r_.__value_.__r.__words[0])
        {
          v88.__r_.__value_.__r.__words[0] = v71;
          v88.__r_.__value_.__l.__size_ = v71 + 72;
          v88.__r_.__value_.__r.__words[2] = v69 + 72 * v70;
          if (!v76) {
            goto LABEL_180;
          }
        }
        else
        {
          do
          {
            long long v77 = *(_OWORD *)(v76 - 72);
            *(void *)(v71 - ++*(_DWORD *)(this + 56) = *((void *)v76 - 7);
            *(_OWORD *)(v71 - 72) = v77;
            *((void *)v76 - 8) = 0;
            *((void *)v76 - 7) = 0;
            *((void *)v76 - 9) = 0;
            long long v78 = *((_OWORD *)v76 - 3);
            long long v79 = *((_OWORD *)v76 - 2);
            *(_OWORD *)(v71 - 19) = *(_OWORD *)(v76 - 19);
            *(_OWORD *)(v71 - 48) = v78;
            *(_OWORD *)(v71 - 32) = v79;
            v71 -= 72;
            v76 -= 72;
          }
          while (v76 != (char *)v75);
          uint64_t v76 = (char *)v88.__r_.__value_.__l.__size_;
          std::string::size_type v80 = v88.__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v71;
          v88.__r_.__value_.__l.__size_ = v57;
          v88.__r_.__value_.__r.__words[2] = v69 + 72 * v70;
          if (v76 != (char *)v80)
          {
            do
            {
              if (*(v76 - 49) < 0) {
                operator delete(*((void **)v76 - 9));
              }
              v76 -= 72;
            }
            while (v76 != (char *)v80);
            uint64_t v76 = (char *)v80;
          }
          if (!v76) {
            goto LABEL_180;
          }
        }
        operator delete(v76);
      }
      else
      {
        long long v64 = *v63;
        *(void *)(v57 + 16) = v56[9];
        *(_OWORD *)std::string::size_type v57 = v64;
        v56[8] = 0;
        v56[9] = 0;
        *(void *)long long v63 = 0;
        long long v65 = *((_OWORD *)v56 + 5);
        long long v66 = *((_OWORD *)v56 + 6);
        *(_OWORD *)(v57 + 53) = *(_OWORD *)((char *)v56 + 109);
        *(_OWORD *)(v57 + 40) = v66;
        *(_OWORD *)(v57 + 24) = v65;
        v57 += 72;
      }
LABEL_180:
      v88.__r_.__value_.__l.__size_ = v57;
LABEL_181:
      CFTypeRef v81 = (uint64_t *)v56[1];
      if (v81)
      {
        do
        {
          char v82 = v81;
          CFTypeRef v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          char v82 = (uint64_t *)v56[2];
          BOOL v37 = *v82 == (void)v56;
          long long v56 = v82;
        }
        while (!v37);
      }
      long long v56 = v82;
      if (v82 == (uint64_t *)v93)
      {
        long long v55 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        std::string::size_type v83 = v88.__r_.__value_.__r.__words[2];
        goto LABEL_191;
      }
    }
  }
  std::string::size_type v83 = 0;
LABEL_191:
  *(_OWORD *)a1 = v55;
  *(void *)(a1 + 16) = v83;
  memset(&v88, 0, sizeof(v88));
  *(unsigned char *)(a1 + 24) = 1;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
LABEL_192:
  std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(v93[0]);
}

void sub_24898BD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 153) < 0) {
    operator delete(*(void **)(v46 - 176));
  }
  if (a36)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
  }
  std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(a39);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = (char *)operator new(0x80uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v11 + 6) = *(void *)(a3 + 16);
    }
    *((void *)v11 + 1std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + ++*(_DWORD *)(this + 56) = 0u;
    char v17 = 1;
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + boost::detail::shared_count::~shared_count(this + 1) = 0;
    *((void *)v11 + 2) = v7;
    const time_t *v8 = (uint64_t *)v11;
    CFDataRef v13 = (uint64_t *)**a1;
    int v14 = (uint64_t *)v11;
    if (v13)
    {
      *a1 = v13;
      int v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_24898BF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *anonymous namespace'::mergeConfigs(std::string *this, const std::string *__str, const DeviceConfiguration *a3)
{
  uint64_t v4 = this;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size) {
    this = std::string::operator=(this, __str);
  }
  if (__str[1].__r_.__value_.__s.__data_[8])
  {
    std::string::pointer data = __str[1].__r_.__value_.__l.__data_;
    v4[1].__r_.__value_.__s.__data_[8] = __str[1].__r_.__value_.__s.__data_[8];
    v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  }
  if (__str[1].__r_.__value_.__s.__data_[17]) {
    LOWORD(v4[1].__r_.__value_.__r.__words[2]) = __str[1].__r_.__value_.__r.__words[2];
  }
  if (__str[2].__r_.__value_.__s.__data_[0])
  {
    int v7 = HIDWORD(__str[1].__r_.__value_.__r.__words[2]);
    v4[2].__r_.__value_.__s.__data_[0] = __str[2].__r_.__value_.__s.__data_[0];
    HIDWORD(v4[1].__r_.__value_.__r.__words[2]) = v7;
  }
  if (__str[2].__r_.__value_.__s.__data_[5]) {
    WORD2(v4[2].__r_.__value_.__r.__words[0]) = WORD2(__str[2].__r_.__value_.__r.__words[0]);
  }
  if (__str[2].__r_.__value_.__s.__data_[12])
  {
    int v8 = __str[2].__r_.__value_.__r.__words[1];
    v4[2].__r_.__value_.__s.__data_[12] = __str[2].__r_.__value_.__s.__data_[12];
    LODWORD(v4[2].__r_.__value_.__r.__words[1]) = v8;
  }
  if (__str[2].__r_.__value_.__s.__data_[20])
  {
    int v9 = __str[2].__r_.__value_.__r.__words[2];
    v4[2].__r_.__value_.__s.__data_[20] = __str[2].__r_.__value_.__s.__data_[20];
    LODWORD(v4[2].__r_.__value_.__r.__words[2]) = v9;
  }
  return this;
}

void std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 49) < 0) {
      operator delete(*(void **)(i - 72));
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

BOOL adm::utility::convertFromDictionary(adm::utility *this, NSDictionary *a2, adm::ConfigurationChangeRequest *a3)
{
  uint64_t v335 = *MEMORY[0x263EF8340];
  uint64_t v3 = this;
  long long v245 = v3;
  if (!v3)
  {
    long long v216 = get_adm_log_object();
    if (!os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
    {
LABEL_374:

      goto LABEL_375;
    }
    *(_WORD *)std::string buf = 0;
    long long v217 = "Null config change dictionary received!";
LABEL_383:
    _os_log_error_impl(&dword_248947000, v216, OS_LOG_TYPE_ERROR, v217, buf, 2u);
    goto LABEL_374;
  }
  uint64_t v4 = [(adm::utility *)v3 objectForKeyedSubscript:@"is activation"];
  if (!v4) {
    goto LABEL_373;
  }
  uint64_t v5 = [(adm::utility *)v245 objectForKeyedSubscript:@"io context description"];
  if (!v5)
  {

    goto LABEL_373;
  }
  uint64_t v6 = [(adm::utility *)v245 objectForKeyedSubscript:@"device descriptions"];

  if (!v6)
  {
LABEL_373:
    long long v216 = get_adm_log_object();
    if (!os_log_type_enabled(v216, OS_LOG_TYPE_ERROR)) {
      goto LABEL_374;
    }
    *(_WORD *)std::string buf = 0;
    long long v217 = "Missing top level description entry from the config change dictionary!";
    goto LABEL_383;
  }
  id v254 = [(adm::utility *)v245 objectForKeyedSubscript:@"io context description"];
  int v7 = [v254 objectForKeyedSubscript:@"io context semantic list"];
  if (!v7
    || ([v254 objectForKeyedSubscript:@"io context stream id list"],
        int v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        !v8))
  {
    char v221 = get_adm_log_object();
    if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_248947000, v221, OS_LOG_TYPE_ERROR, "Incomplete IOContext description from the config change dictionary!", buf, 2u);
    }

    goto LABEL_375;
  }
  [(adm::utility *)v245 objectForKeyedSubscript:@"device descriptions"];
  long long v301 = 0u;
  long long v302 = 0u;
  long long v299 = 0u;
  long long v300 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [obj countByEnumeratingWithState:&v299 objects:__p count:16];
  if (!v9) {
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)v300;
  uint64_t v240 = *(void *)v300;
  do
  {
    uint64_t v11 = 0;
    v243 = (std::string *)v9;
    do
    {
      if (*(void *)v300 != v10) {
        objc_enumerationMutation(obj);
      }
      uint64_t v246 = v11;
      id v12 = *(id *)(*((void *)&v299 + 1) + 8 * v11);
      CFDataRef v13 = [v12 objectForKeyedSubscript:@"device uid"];
      if (!v13) {
        goto LABEL_400;
      }
      int v14 = [v12 objectForKeyedSubscript:@"device model uid"];
      if (!v14) {
        goto LABEL_399;
      }
      size_t v15 = [v12 objectForKeyedSubscript:@"sample rate"];
      if (!v15) {
        goto LABEL_398;
      }
      size_t v16 = [v12 objectForKeyedSubscript:@"transport type"];
      if (!v16) {
        goto LABEL_397;
      }
      char v17 = [v12 objectForKeyedSubscript:@"latency in samples"];
      if (!v17) {
        goto LABEL_396;
      }
      std::string v18 = [v12 objectForKeyedSubscript:@"latency out samples"];
      if (!v18
        || ([v12 objectForKeyedSubscript:@"safety offset in samples"],
            (std::string v19 = objc_claimAutoreleasedReturnValue()) == 0))
      {

LABEL_396:
LABEL_397:

LABEL_398:
LABEL_399:

LABEL_400:
        uint64_t v23 = get_adm_log_object();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl(&dword_248947000, v23, OS_LOG_TYPE_ERROR, "Incomplete device description from the config change dictionary!", buf, 2u);
        }
LABEL_402:

LABEL_375:
        uint64_t v218 = get_adm_log_object();
        if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_error_impl(&dword_248947000, v218, OS_LOG_TYPE_ERROR, "Invalid config change dictionary received!", (uint8_t *)__p, 2u);
        }

        BOOL v219 = 0;
        goto LABEL_378;
      }
      std::error_code v20 = [v12 objectForKeyedSubscript:@"safety offset out samples"];
      BOOL v21 = v20 == 0;

      if (v21) {
        goto LABEL_400;
      }
      BOOL v22 = [v12 objectForKeyedSubscript:@"hw streams input"];
      if ([v22 count])
      {
        long long v297 = 0u;
        long long v298 = 0u;
        long long v295 = 0u;
        long long v296 = 0u;
        uint64_t v23 = v22;
        uint64_t v24 = [v23 countByEnumeratingWithState:&v295 objects:&v307 count:16];
        if (!v24) {
          goto LABEL_30;
        }
        uint64_t v25 = *(void *)v296;
        while (1)
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v296 != v25) {
              objc_enumerationMutation(v23);
            }
            id v27 = *(id *)(*((void *)&v295 + 1) + 8 * i);
            int v28 = [v27 objectForKeyedSubscript:@"current format"];
            if (!v28
              || ([v27 objectForKeyedSubscript:@"supported formats"],
                  unsigned int v29 = objc_claimAutoreleasedReturnValue(),
                  BOOL v30 = v29 == 0,
                  v29,
                  v28,
                  v30))
            {
              uint64_t v222 = get_adm_log_object();
              if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_error_impl(&dword_248947000, v222, OS_LOG_TYPE_ERROR, "Incomplete input HW stream description from the config change dictionary!", buf, 2u);
              }

              goto LABEL_402;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v295 objects:&v307 count:16];
          if (!v24)
          {
LABEL_30:

            break;
          }
        }
      }
      BOOL v31 = [v12 objectForKeyedSubscript:@"hw streams output"];
      if (![v31 count]) {
        goto LABEL_42;
      }
      long long v293 = 0u;
      long long v294 = 0u;
      long long v291 = 0u;
      long long v292 = 0u;
      id v32 = v31;
      uint64_t v33 = [v32 countByEnumeratingWithState:&v291 objects:&v332 count:16];
      if (!v33) {
        goto LABEL_41;
      }
      uint64_t v34 = *(void *)v292;
      do
      {
        for (uint64_t j = 0; j != v33; ++j)
        {
          if (*(void *)v292 != v34) {
            objc_enumerationMutation(v32);
          }
          id v36 = *(id *)(*((void *)&v291 + 1) + 8 * j);
          BOOL v37 = [v36 objectForKeyedSubscript:@"current format"];
          if (!v37
            || ([v36 objectForKeyedSubscript:@"supported formats"],
                int v38 = objc_claimAutoreleasedReturnValue(),
                BOOL v39 = v38 == 0,
                v38,
                v37,
                v39))
          {
            uint64_t v223 = get_adm_log_object();
            if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl(&dword_248947000, v223, OS_LOG_TYPE_ERROR, "Incomplete output HW stream description from the config change dictionary!", buf, 2u);
            }

            uint64_t v23 = v22;
            goto LABEL_402;
          }
        }
        uint64_t v33 = [v32 countByEnumeratingWithState:&v291 objects:&v332 count:16];
      }
      while (v33);
LABEL_41:

LABEL_42:
      uint64_t v11 = v246 + 1;
      uint64_t v10 = v240;
    }
    while ((std::string *)(v246 + 1) != v243);
    uint64_t v9 = [obj countByEnumeratingWithState:&v299 objects:__p count:16];
  }
  while (v9);
LABEL_44:

  uint64_t v40 = [(adm::utility *)v245 objectForKeyedSubscript:@"is activation"];
  LOBYTE(a2->super.isa) = [v40 BOOLValue];

  uint64_t v41 = [(adm::utility *)v245 objectForKeyedSubscript:@"io context description"];
  uint64_t v234 = v41;
  unsigned int v42 = [v41 objectForKeyedSubscript:@"io context semantic list"];
  int v43 = v42;
  if (!v42) {
    goto LABEL_84;
  }
  long long v289 = 0u;
  long long v290 = 0u;
  long long v287 = 0u;
  long long v288 = 0u;
  std::string::size_type v233 = v42;
  uint64_t v44 = unk_26FCA7E28(v233, "countByEnumeratingWithState:objects:count:", &v287, v331, 16);
  std::string::size_type v244 = v43;
  if (!v44) {
    goto LABEL_83;
  }
  id obja = *(id *)v288;
  int v45 = (uint64_t **)&a2[1];
  while (2)
  {
    uint64_t v247 = v44;
    uint64_t v46 = 0;
    while (2)
    {
      if (*(id *)v288 != obja) {
        objc_enumerationMutation(v233);
      }
      id v47 = *(id *)(*((void *)&v287 + 1) + 8 * v46);
      if (![v47 isEqual:@"isolated audio"])
      {
        if (![v47 isEqual:@"dsp offload"])
        {
          std::string::size_type v60 = v47;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v47 UTF8String]);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
          goto LABEL_79;
        }
        id v255 = v47;
        BOOL v53 = [v41 objectForKeyedSubscript:@"dsp offload description"];
        if (v53)
        {
          long long v285 = 0u;
          long long v286 = 0u;
          long long v283 = 0u;
          long long v284 = 0u;
          long long v54 = v53;
          uint64_t v55 = [v54 countByEnumeratingWithState:&v283 objects:v330 count:16];
          if (!v55) {
            goto LABEL_393;
          }
          long long v56 = 0;
          uint64_t v57 = *(void *)v284;
LABEL_61:
          uint64_t v58 = 0;
          while (1)
          {
            if (*(void *)v284 != v57) {
              objc_enumerationMutation(v54);
            }
            long long v59 = *(void **)(*((void *)&v283 + 1) + 8 * v58);
            if ([v59 isEqualToString:@"airpods noise suppression"]) {
              long long v56 = "airpods noise suppression";
            }
            if (!v56) {
              break;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v56);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
            if (SBYTE7(v319[0]) < 0) {
              operator delete(__p[0]);
            }
            if (v55 == ++v58)
            {
              uint64_t v55 = [v54 countByEnumeratingWithState:&v283 objects:v330 count:16];
              if (!v55)
              {

                std::string::size_type v60 = v255;
                goto LABEL_81;
              }
              goto LABEL_61;
            }
          }
          unint64_t v224 = get_adm_log_object();
          if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 138412290;
            *(void **)((char *)__p + 4) = v59;
            _os_log_error_impl(&dword_248947000, v224, OS_LOG_TYPE_ERROR, "Invalid DSPOffload description %@", (uint8_t *)__p, 0xCu);
          }

LABEL_393:
          long long v49 = v54;
          goto LABEL_394;
        }
        long long v54 = get_adm_log_object();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v227 = "IOContext description missing DSPOffload description";
          goto LABEL_427;
        }
LABEL_419:
        long long v49 = 0;
        goto LABEL_394;
      }
      id v255 = v47;
      long long v48 = [v41 objectForKeyedSubscript:@"isolated audio use case id"];
      long long v49 = v48;
      if (!v48)
      {
        long long v54 = get_adm_log_object();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v227 = "IOContext description missing isolated audio use case ID";
LABEL_427:
          _os_log_error_impl(&dword_248947000, v54, OS_LOG_TYPE_ERROR, v227, (uint8_t *)__p, 2u);
          goto LABEL_419;
        }
        goto LABEL_419;
      }
      int v50 = [v48 unsignedIntValue];
      int v51 = v50;
      if (v50 <= 1935962991)
      {
        if (v50 == 1836346212)
        {
          char v52 = "isolated audio muted talker detection";
          goto LABEL_78;
        }
        if (v50 == 1885696611)
        {
          char v52 = "isolated audio perception";
          goto LABEL_78;
        }
LABEL_420:
        long long v54 = get_adm_log_object();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v51;
          _os_log_error_impl(&dword_248947000, v54, OS_LOG_TYPE_ERROR, "Invalid IsolatedAudio use case ID %d", (uint8_t *)__p, 8u);
        }
LABEL_394:

        goto LABEL_412;
      }
      if (v50 == 1935962992)
      {
        char v52 = "isolated audio shared DSP";
      }
      else
      {
        char v52 = "isolated audio siri";
        if (v50 != 1936290409)
        {
          if (v50 != 1936614497) {
            goto LABEL_420;
          }
          char v52 = "isolated audio sound analysis";
        }
      }
LABEL_78:

      std::string::basic_string[abi:ne180100]<0>(__p, v52);
      std::string::size_type v60 = v47;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
LABEL_79:
      if (SBYTE7(v319[0]) < 0) {
        operator delete(__p[0]);
      }
LABEL_81:

      ++v46;
      uint64_t v41 = v234;
      if (v46 != v247) {
        continue;
      }
      break;
    }
    uint64_t v44 = unk_26FCA7E30(v233, "countByEnumeratingWithState:objects:count:", &v287, v331, 16);
    if (v44) {
      continue;
    }
    break;
  }
LABEL_83:

  int v43 = v244;
LABEL_84:

  uint64_t v61 = [v234 objectForKeyedSubscript:@"io context stream id list"];
  unint64_t v62 = v61;
  if (v61)
  {
    long long v281 = 0u;
    long long v282 = 0u;
    long long v279 = 0u;
    long long v280 = 0u;
    id v256 = v61;
    uint64_t v63 = [v256 countByEnumeratingWithState:&v279 objects:v329 count:16];
    id objb = v62;
    if (v63)
    {
      long long v64 = (std::vector<std::string> *)&a2[21];
      uint64_t v65 = *(void *)v280;
      do
      {
        for (uint64_t k = 0; k != v63; ++k)
        {
          if (*(void *)v280 != v65) {
            objc_enumerationMutation(v256);
          }
          id v67 = *(id *)(*((void *)&v279 + 1) + 8 * k);
          std::string::basic_string[abi:ne180100]<0>(&v307, (char *)[v67 UTF8String]);
          Class isa = a2[22].super.isa;
          Class v68 = a2[23].super.isa;
          if (isa >= v68)
          {
            unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((isa - (Class)v64->__begin_) >> 3);
            unint64_t v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (Class)v64->__begin_) >> 3);
            if (2 * v73 > v72) {
              unint64_t v72 = 2 * v73;
            }
            if (v73 >= 0x555555555555555) {
              unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v74 = v72;
            }
            *(void *)&v319[1] = a2 + 23;
            if (v74) {
              unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v74);
            }
            else {
              uint64_t v75 = 0;
            }
            uint64_t v76 = (void *)(v74 + 24 * v71);
            __p[0] = (void *)v74;
            __p[1] = v76;
            *((void *)&v319[0] + boost::detail::shared_count::~shared_count(this + 1) = v74 + 24 * v75;
            long long v77 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
            v76[2] = *((void *)&v307.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v76 = v77;
            memset(&v307, 0, sizeof(v307));
            *(void *)&v319[0] = v76 + 3;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(v64, (std::__split_buffer<std::string> *)__p);
            long long v78 = a2[22].super.isa;
            std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer((std::__split_buffer<std::string> *)__p);
            int v79 = SHIBYTE(v307.__r_.__value_.__r.__words[2]);
            a2[22].super.Class isa = v78;
            if (v79 < 0) {
              operator delete(v307.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v70 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
            *((void *)isa + 2) = *((void *)&v307.__r_.__value_.__l + 2);
            *(_OWORD *)Class isa = v70;
            a2[22].super.Class isa = (Class)((char *)isa + 24);
          }
        }
        uint64_t v63 = [v256 countByEnumeratingWithState:&v279 objects:v329 count:16];
      }
      while (v63);
    }

    unint64_t v62 = objb;
  }

  std::string::size_type v80 = [v234 objectForKey:@"io context input format"];
  if (v80)
  {
    int isa_low = LOBYTE(a2[9].super.isa);
    long long v82 = v319[0];
    *(_OWORD *)&a2[4].super.Class isa = *(_OWORD *)__p;
    *(_OWORD *)&a2[6].super.Class isa = v82;
    a2[8].super.Class isa = *(Class *)&v319[1];
    if (!isa_low) {
      LOBYTE(a2[9].super.isa) = 1;
    }
  }

  std::string::size_type v83 = [v234 objectForKey:@"io context output format"];
  if (v83)
  {
    int v84 = LOBYTE(a2[15].super.isa);
    long long v85 = v319[0];
    *(_OWORD *)&a2[10].super.Class isa = *(_OWORD *)__p;
    *(_OWORD *)&a2[12].super.Class isa = v85;
    a2[14].super.Class isa = *(Class *)&v319[1];
    if (!v84) {
      LOBYTE(a2[15].super.isa) = 1;
    }
  }

  CFArrayRef v86 = [v234 objectForKey:@"io context output client virtual layout"];
  if (v86)
  {
    std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout,void>((uint64_t)&a2[16], (uint64_t)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }

  unsigned __int8 v87 = [v234 objectForKey:@"io context buffer size"];
  std::string v88 = v87;
  if (v87)
  {
    LODWORD(a2[20].super.isa) = [v87 unsignedIntValue];
    BYTE4(a2[20].super.isa) = 1;
  }

  [(adm::utility *)v245 objectForKeyedSubscript:@"device descriptions"];
  long long v277 = 0u;
  long long v278 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  std::string::size_type v233 = (std::string *)(id)objc_claimAutoreleasedReturnValue();
  uint64_t v89 = unk_26FCA7E38(v233, "countByEnumeratingWithState:objects:count:", &v275, v328, 16);
  if (v89)
  {
    uint64_t v230 = *(void *)v276;
    do
    {
      uint64_t v90 = 0;
      uint64_t v229 = v89;
      do
      {
        if (*(void *)v276 != v230) {
          objc_enumerationMutation(v233);
        }
        uint64_t v231 = v90;
        id v91 = *(id *)(*((void *)&v275 + 1) + 8 * v90);
        char v323 = 0;
        v324.__r_.__value_.__s.__data_[0] = 0;
        char v325 = 0;
        char v326 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v319, 0, sizeof(v319));
        char v320 = 0;
        long long v321 = 0u;
        memset(v322, 0, 25);
        memset(v327, 0, sizeof(v327));
        id v235 = v91;
        id v92 = [v91 objectForKeyedSubscript:@"device uid"];
        std::string::basic_string[abi:ne180100]<0>(&v307, (char *)[v92 UTF8String]);
        if (SBYTE7(v319[0]) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
        *(void *)&v319[0] = *((void *)&v307.__r_.__value_.__l + 2);
        *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
        v307.__r_.__value_.__s.__data_[0] = 0;

        id v93 = [v235 objectForKeyedSubscript:@"device model uid"];
        std::string::basic_string[abi:ne180100]<0>(&v307, (char *)[v93 UTF8String]);
        if (SHIBYTE(v319[1]) < 0) {
          operator delete(*((void **)&v319[0] + 1));
        }
        *(std::string *)((char *)v319 + 8) = v307;
        *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
        v307.__r_.__value_.__s.__data_[0] = 0;

        std::string v94 = [v235 objectForKeyedSubscript:@"is default device"];
        char v320 = [v94 BOOLValue];

        char v95 = [v235 objectForKeyedSubscript:@"sample rate"];
        [v95 doubleValue];
        *(void *)&long long v321 = v96;

        unint64_t v97 = [v235 objectForKeyedSubscript:@"transport type"];
        DWORD2(v32boost::detail::shared_count::~shared_count(this + 1) = [v97 unsignedIntValue];

        long long v98 = [v235 objectForKeyedSubscript:@"data source type in"];
        HIDWORD(v32boost::detail::shared_count::~shared_count(this + 1) = [v98 unsignedIntValue];

        uint64_t v99 = [v235 objectForKeyedSubscript:@"data source type out"];
        *(_DWORD *)long long v322 = [v99 unsignedIntValue];

        uint64_t v100 = [v235 objectForKeyedSubscript:@"bluetooth device category"];
        *(_DWORD *)&v322[4] = [v100 unsignedIntValue];

        unint64_t v101 = [v235 objectForKeyedSubscript:@"latency in samples"];
        *(_DWORD *)&v322[8] = [v101 unsignedIntValue];

        std::string v102 = [v235 objectForKeyedSubscript:@"latency out samples"];
        *(_DWORD *)&v322[12] = [v102 unsignedIntValue];

        unint64_t v103 = [v235 objectForKeyedSubscript:@"safety offset in samples"];
        *(_DWORD *)&v322[16] = [v103 unsignedIntValue];

        unint64_t v104 = [v235 objectForKeyedSubscript:@"safety offset out samples"];
        *(_DWORD *)&v322[20] = [v104 unsignedIntValue];

        std::string v105 = [v235 objectForKeyedSubscript:@"bluetooth ecnr enabled"];
        char v326 = [v105 BOOLValue];

        std::string v106 = [v235 objectForKeyedSubscript:@"output default layout"];
        if (v106)
        {
          if (v325)
          {
            if (v324.__r_.__value_.__r.__words[0])
            {
              v324.__r_.__value_.__l.__size_ = v324.__r_.__value_.__r.__words[0];
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            std::string v324 = v307;
          }
          else
          {
            std::string v324 = v307;
            char v325 = 1;
          }
        }

        long long v107 = [v235 objectForKeyedSubscript:@"output preferred layout"];
        if (v107)
        {
          if (v323)
          {
            if (*(void *)&v322[24])
            {
              *(void *)&v322[32] = *(void *)&v322[24];
              operator delete(*(void **)&v322[24]);
            }
            *(std::string *)&v322[24] = v307;
          }
          else
          {
            *(std::string *)&v322[24] = v307;
            char v323 = 1;
          }
        }

        uint64_t v108 = [v235 objectForKeyedSubscript:@"hw streams input"];
        std::string::size_type v232 = v108;
        if ([v108 count])
        {
          long long v273 = 0u;
          long long v274 = 0u;
          long long v271 = 0u;
          long long v272 = 0u;
          id v236 = v108;
          uint64_t v109 = [v236 countByEnumeratingWithState:&v271 objects:v317 count:16];
          if (!v109) {
            goto LABEL_198;
          }
          uint64_t v238 = *(void *)v272;
          while (1)
          {
            uint64_t v110 = 0;
            uint64_t v241 = v109;
            do
            {
              if (*(void *)v272 != v238) {
                objc_enumerationMutation(v236);
              }
              uint64_t v248 = v110;
              id v111 = *(id *)(*((void *)&v271 + 1) + 8 * v110);
              v307.__r_.__value_.__s.__data_[0] = 0;
              char v308 = 0;
              v309.__r_.__value_.__s.__data_[0] = 0;
              char v310 = 0;
              long long v311 = 0u;
              long long v312 = 0u;
              long long v313 = 0u;
              long long v314 = 0u;
              int v315 = 0;
              char v316 = 1;
              id v257 = v111;
              long long v112 = [v111 objectForKeyedSubscript:@"stream id"];
              long long v113 = v112;
              if (v112) {
                std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(&v307, (std::string::value_type *)[v112 UTF8String]);
              }

              int64x2_t v114 = [v257 objectForKeyedSubscript:@"stream semantic"];
              unint64_t v115 = v114;
              if (v114)
              {
                std::string::basic_string[abi:ne180100]<0>(&v332, (char *)[v114 UTF8String]);
                if (v310)
                {
                  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v309.__r_.__value_.__l.__data_);
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                    if (!v310) {
                      goto LABEL_163;
                    }
                  }
                  else
                  {
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                  }
                }
                else
                {
                  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                  v309.__r_.__value_.__r.__words[2] = v333;
                  char v310 = 1;
                }
                std::string::size_type size = HIBYTE(v309.__r_.__value_.__r.__words[2]);
                if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = v309.__r_.__value_.__l.__size_;
                }
                if (size == 3)
                {
                  uint64_t v117 = &v309;
                  if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v117 = (std::string *)v309.__r_.__value_.__r.__words[0];
                  }
                  int data_low = LOWORD(v117->__r_.__value_.__l.__data_);
                  int v119 = v117->__r_.__value_.__s.__data_[2];
                  BOOL v120 = data_low == 24948 && v119 == 112;
                  if (v120) {
                    std::string::__assign_external(&v309, "reference");
                  }
                }
              }
LABEL_163:

              int v121 = [v257 objectForKey:@"current format"];
              long long v311 = v332;
              long long v312 = v333;
              *(void *)&long long v313 = v334;

              unint64_t v122 = [v257 objectForKeyedSubscript:@"supported formats"];
              long long v269 = 0u;
              long long v270 = 0u;
              long long v267 = 0u;
              long long v268 = 0u;
              id v123 = v122;
              uint64_t v124 = [v123 countByEnumeratingWithState:&v267 objects:v306 count:16];
              if (v124)
              {
                uint64_t v125 = *(void *)v268;
                do
                {
                  for (uint64_t m = 0; m != v124; ++m)
                  {
                    if (*(void *)v268 != v125) {
                      objc_enumerationMutation(v123);
                    }
                    long long v127 = (NSDictionary *)*(id *)(*((void *)&v267 + 1) + 8 * m);
                    uint64_t v128 = v314;
                    if ((unint64_t)v314 >= *((void *)&v314 + 1))
                    {
                      unint64_t v130 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v314 - *((void *)&v313 + 1)) >> 3);
                      unint64_t v131 = v130 + 1;
                      if (v130 + 1 > 0x666666666666666) {
                        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x999999999999999ALL * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3) > v131) {
                        unint64_t v131 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3);
                      }
                      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3) >= 0x333333333333333) {
                        unint64_t v132 = 0x666666666666666;
                      }
                      else {
                        unint64_t v132 = v131;
                      }
                      if (v132) {
                        unint64_t v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v132);
                      }
                      else {
                        uint64_t v133 = 0;
                      }
                      unint64_t v134 = v132 + 40 * v130;
                      *(_OWORD *)unint64_t v134 = v332;
                      *(_OWORD *)(v134 + 16) = v333;
                      *(void *)(v134 + 32) = v334;
                      CFDictionaryRef v135 = (char *)v314;
                      long long v136 = (char *)*((void *)&v313 + 1);
                      unint64_t v137 = v134;
                      if ((void)v314 != *((void *)&v313 + 1))
                      {
                        do
                        {
                          long long v138 = *(_OWORD *)(v135 - 40);
                          long long v139 = *(_OWORD *)(v135 - 24);
                          *(void *)(v137 - 8) = *((void *)v135 - 1);
                          *(_OWORD *)(v137 - 24) = v139;
                          *(_OWORD *)(v137 - 40) = v138;
                          v137 -= 40;
                          v135 -= 40;
                        }
                        while (v135 != v136);
                        CFDictionaryRef v135 = (char *)*((void *)&v313 + 1);
                      }
                      unint64_t v129 = v134 + 40;
                      *((void *)&v313 + boost::detail::shared_count::~shared_count(this + 1) = v137;
                      *(void *)&long long v314 = v134 + 40;
                      *((void *)&v314 + boost::detail::shared_count::~shared_count(this + 1) = v132 + 40 * v133;
                      if (v135) {
                        operator delete(v135);
                      }
                    }
                    else
                    {
                      *(_OWORD *)long long v314 = v332;
                      *(_OWORD *)(v128 + 16) = v333;
                      *(void *)(v128 + 32) = v334;
                      unint64_t v129 = v128 + 40;
                    }
                    *(void *)&long long v314 = v129;
                  }
                  uint64_t v124 = [v123 countByEnumeratingWithState:&v267 objects:v306 count:16];
                }
                while (v124);
              }

              CFTypeRef v140 = [v257 objectForKeyedSubscript:@"latency samples"];
              CFStringRef v141 = v140;
              if (v140)
              {
                int v315 = [v140 unsignedIntValue];
                char v316 = 1;
              }

              std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100]((long long **)v327, (long long *)&v307);
              if (*((void *)&v313 + 1))
              {
                *(void *)&long long v314 = *((void *)&v313 + 1);
                operator delete(*((void **)&v313 + 1));
              }
              if (v310 && SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v309.__r_.__value_.__l.__data_);
              }
              if (v308 && SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v307.__r_.__value_.__l.__data_);
              }

              uint64_t v110 = v248 + 1;
            }
            while (v248 + 1 != v241);
            uint64_t v109 = [v236 countByEnumeratingWithState:&v271 objects:v317 count:16];
            if (!v109)
            {
LABEL_198:

              break;
            }
          }
        }
        std::__fs::filesystem::path v142 = [v235 objectForKeyedSubscript:@"hw streams output"];
        std::string::size_type v228 = v142;
        if ([v142 count])
        {
          long long v265 = 0u;
          long long v266 = 0u;
          long long v263 = 0u;
          long long v264 = 0u;
          id v237 = v142;
          uint64_t v143 = [v237 countByEnumeratingWithState:&v263 objects:v305 count:16];
          if (v143)
          {
            uint64_t v239 = *(void *)v264;
            do
            {
              uint64_t v144 = 0;
              uint64_t v242 = v143;
              do
              {
                if (*(void *)v264 != v239) {
                  objc_enumerationMutation(v237);
                }
                uint64_t v249 = v144;
                id v145 = *(id *)(*((void *)&v263 + 1) + 8 * v144);
                v307.__r_.__value_.__s.__data_[0] = 0;
                char v308 = 0;
                v309.__r_.__value_.__s.__data_[0] = 0;
                char v310 = 0;
                long long v311 = 0u;
                long long v312 = 0u;
                long long v313 = 0u;
                long long v314 = 0u;
                int v315 = 0;
                char v316 = 1;
                id v258 = v145;
                std::string v146 = [v145 objectForKeyedSubscript:@"stream id"];
                long long v147 = v146;
                if (v146) {
                  std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(&v307, (std::string::value_type *)[v146 UTF8String]);
                }

                std::string::size_type v148 = [v258 objectForKeyedSubscript:@"stream semantic"];
                uint64_t v149 = v148;
                if (v148)
                {
                  std::string::basic_string[abi:ne180100]<0>(&v332, (char *)[v148 UTF8String]);
                  if (v310)
                  {
                    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v309.__r_.__value_.__l.__data_);
                    }
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                  }
                  else
                  {
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                    char v310 = 1;
                  }
                }

                long long v150 = [v258 objectForKey:@"current format"];
                long long v311 = v332;
                long long v312 = v333;
                *(void *)&long long v313 = v334;

                long long v151 = [v258 objectForKeyedSubscript:@"supported formats"];
                long long v261 = 0u;
                long long v262 = 0u;
                long long v259 = 0u;
                long long v260 = 0u;
                id v152 = v151;
                uint64_t v153 = [v152 countByEnumeratingWithState:&v259 objects:v304 count:16];
                if (v153)
                {
                  uint64_t v154 = *(void *)v260;
                  do
                  {
                    for (uint64_t n = 0; n != v153; ++n)
                    {
                      if (*(void *)v260 != v154) {
                        objc_enumerationMutation(v152);
                      }
                      uint64_t v156 = (NSDictionary *)*(id *)(*((void *)&v259 + 1) + 8 * n);
                      uint64_t v157 = v314;
                      if ((unint64_t)v314 >= *((void *)&v314 + 1))
                      {
                        unint64_t v159 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v314 - *((void *)&v313 + 1)) >> 3);
                        unint64_t v160 = v159 + 1;
                        if (v159 + 1 > 0x666666666666666) {
                          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                        }
                        if (0x999999999999999ALL * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3) > v160) {
                          unint64_t v160 = 0x999999999999999ALL
                        }
                               * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3);
                        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v314 + 1) - *((void *)&v313 + 1)) >> 3) >= 0x333333333333333) {
                          unint64_t v161 = 0x666666666666666;
                        }
                        else {
                          unint64_t v161 = v160;
                        }
                        if (v161) {
                          unint64_t v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v161);
                        }
                        else {
                          uint64_t v162 = 0;
                        }
                        unint64_t v163 = v161 + 40 * v159;
                        *(_OWORD *)unint64_t v163 = v332;
                        *(_OWORD *)(v163 + 16) = v333;
                        *(void *)(v163 + 32) = v334;
                        double v164 = (char *)v314;
                        uint64_t v165 = (char *)*((void *)&v313 + 1);
                        unint64_t v166 = v163;
                        if ((void)v314 != *((void *)&v313 + 1))
                        {
                          do
                          {
                            long long v167 = *(_OWORD *)(v164 - 40);
                            long long v168 = *(_OWORD *)(v164 - 24);
                            *(void *)(v166 - 8) = *((void *)v164 - 1);
                            *(_OWORD *)(v166 - 24) = v168;
                            *(_OWORD *)(v166 - 40) = v167;
                            v166 -= 40;
                            v164 -= 40;
                          }
                          while (v164 != v165);
                          double v164 = (char *)*((void *)&v313 + 1);
                        }
                        unint64_t v158 = v163 + 40;
                        *((void *)&v313 + boost::detail::shared_count::~shared_count(this + 1) = v166;
                        *(void *)&long long v314 = v163 + 40;
                        *((void *)&v314 + boost::detail::shared_count::~shared_count(this + 1) = v161 + 40 * v162;
                        if (v164) {
                          operator delete(v164);
                        }
                      }
                      else
                      {
                        *(_OWORD *)long long v314 = v332;
                        *(_OWORD *)(v157 + 16) = v333;
                        *(void *)(v157 + 32) = v334;
                        unint64_t v158 = v157 + 40;
                      }
                      *(void *)&long long v314 = v158;
                    }
                    uint64_t v153 = [v152 countByEnumeratingWithState:&v259 objects:v304 count:16];
                  }
                  while (v153);
                }

                int v169 = [v258 objectForKeyedSubscript:@"latency samples"];
                unsigned int v170 = v169;
                if (v169)
                {
                  int v315 = [v169 unsignedIntValue];
                  char v316 = 1;
                }

                std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100]((long long **)&v327[1] + 1, (long long *)&v307);
                if (*((void *)&v313 + 1))
                {
                  *(void *)&long long v314 = *((void *)&v313 + 1);
                  operator delete(*((void **)&v313 + 1));
                }
                if (v310 && SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v309.__r_.__value_.__l.__data_);
                }
                if (v308 && SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v307.__r_.__value_.__l.__data_);
                }

                uint64_t v144 = v249 + 1;
              }
              while (v249 + 1 != v242);
              uint64_t v143 = [v237 countByEnumeratingWithState:&v263 objects:v305 count:16];
            }
            while (v143);
          }

          std::__fs::filesystem::path v142 = v228;
        }
        std::vector<adm::DeviceDescription>::push_back[abi:ne180100]((long long **)&a2[24], (long long *)__p);

        v307.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327[1] + 8;
        std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
        v307.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
        std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
        if (v325 && v324.__r_.__value_.__r.__words[0])
        {
          v324.__r_.__value_.__l.__size_ = v324.__r_.__value_.__r.__words[0];
          operator delete(v324.__r_.__value_.__l.__data_);
        }
        if (v323 && *(void *)&v322[24])
        {
          *(void *)&v322[32] = *(void *)&v322[24];
          operator delete(*(void **)&v322[24]);
        }
        if (SHIBYTE(v319[1]) < 0) {
          operator delete(*((void **)&v319[0] + 1));
        }
        if (SBYTE7(v319[0]) < 0) {
          operator delete(__p[0]);
        }

        uint64_t v90 = v231 + 1;
      }
      while (v231 + 1 != v229);
      uint64_t v89 = unk_26FCA7E40(v233, "countByEnumeratingWithState:objects:count:", &v275, v328, 16);
    }
    while (v89);
  }

  *(void *)&v319[0] = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  Class v171 = a2[24].super.isa;
  Class v172 = a2[25].super.isa;
  if (v171 == v172)
  {
LABEL_273:
    Class v177 = a2[21].super.isa;
    Class v178 = a2[22].super.isa;
    if (v177 == v178) {
      goto LABEL_369;
    }
    while (1)
    {
      if (&__p[1] == std::__tree<std::string>::find<std::string>((uint64_t)__p, v177)) {
        goto LABEL_409;
      }
      int v179 = (void **)__p[1];
      if (!__p[1]) {
        goto LABEL_368;
      }
      uint64_t v180 = &__p[1];
      uint64_t v181 = __p[1];
      do
      {
        BOOL v182 = v180;
        uint64_t v183 = (void **)(v181 + 4);
        int v184 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v181 + 4, v177);
        uint64_t v185 = v181 + 1;
        if (v184 >= 0)
        {
          uint64_t v185 = v181;
          uint64_t v180 = (void **)v181;
        }
        uint64_t v181 = (void *)*v185;
      }
      while (*v185);
      if (v180 == &__p[1]) {
        goto LABEL_368;
      }
      long long v186 = (char *)(v184 >= 0 ? v183 : v182 + 4);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v177, v186) & 0x80) != 0) {
        goto LABEL_368;
      }
      long long v187 = (void **)v180[1];
      uint64_t v188 = v187;
      unint64_t v189 = v180;
      if (v187)
      {
        do
        {
          unint64_t v190 = v188;
          uint64_t v188 = (void **)*v188;
        }
        while (v188);
      }
      else
      {
        do
        {
          unint64_t v190 = (void **)v189[2];
          BOOL v120 = *v190 == v189;
          unint64_t v189 = v190;
        }
        while (!v120);
      }
      if (__p[0] == v180) {
        __p[0] = v190;
      }
      --*(void *)&v319[0];
      if (*v180)
      {
        if (!v187)
        {
          long long v187 = (void **)*v180;
          char v191 = v180;
LABEL_300:
          int v192 = 0;
          v187[2] = v191[2];
          goto LABEL_301;
        }
        do
        {
          char v191 = v187;
          long long v187 = (void **)*v187;
        }
        while (v187);
        long long v187 = (void **)v191[1];
      }
      else
      {
        char v191 = v180;
      }
      if (v187) {
        goto LABEL_300;
      }
      int v192 = 1;
LABEL_301:
      std::string::size_type v193 = (void ***)v191[2];
      uint64_t v194 = *v193;
      if (*v193 == v191)
      {
        *std::string::size_type v193 = v187;
        if (v191 == v179)
        {
          uint64_t v194 = 0;
          int v179 = v187;
        }
        else
        {
          uint64_t v194 = v193[1];
        }
      }
      else
      {
        v193[1] = v187;
      }
      int v195 = *((unsigned __int8 *)v191 + 24);
      if (v191 != v180)
      {
        std::string::size_type v196 = v180[2];
        v191[2] = v196;
        *((void *)v196 + (*(void *)v180[2] != (void)v180)) = v191;
        std::string::size_type v197 = *v180;
        void *v191 = *v180;
        v197[2] = v191;
        std::string::size_type v198 = v180[1];
        v191[1] = v198;
        if (v198) {
          *((void *)v198 + 2) = v191;
        }
        *((unsigned char *)v191 + 24) = *((unsigned char *)v180 + 24);
        if (v179 == v180) {
          int v179 = v191;
        }
      }
      if (!v195 || !v179) {
        goto LABEL_365;
      }
      if (!v192)
      {
        *((unsigned char *)v187 + 24) = 1;
        goto LABEL_365;
      }
      while (1)
      {
        uint64_t v199 = (void **)v194[2];
        if (*v199 != v194) {
          break;
        }
        if (!*((unsigned char *)v194 + 24))
        {
          *((unsigned char *)v194 + 24) = 1;
          *((unsigned char *)v199 + 24) = 0;
          char v205 = v194[1];
          *uint64_t v199 = v205;
          if (v205) {
            v205[2] = v199;
          }
          v194[2] = v199[2];
          *((void *)v199[2] + (*(void *)v199[2] != (void)v199)) = v194;
          v194[1] = v199;
          v199[2] = v194;
          if (v179 == v199) {
            int v179 = v194;
          }
          uint64_t v194 = (void **)*v199;
        }
        long long v206 = *v194;
        if (*v194 && !v206[24]) {
          goto LABEL_360;
        }
        uint64_t v207 = (void **)v194[1];
        if (v207 && !*((unsigned char *)v207 + 24))
        {
          if (v206 && !v206[24])
          {
LABEL_360:
            uint64_t v207 = v194;
          }
          else
          {
            *((unsigned char *)v207 + 24) = 1;
            *((unsigned char *)v194 + 24) = 0;
            long long v213 = *v207;
            v194[1] = *v207;
            if (v213) {
              v213[2] = v194;
            }
            v207[2] = v194[2];
            *((void *)v194[2] + (*(void *)v194[2] != (void)v194)) = v207;
            *uint64_t v207 = v194;
            v194[2] = v207;
            long long v206 = v194;
          }
          long long v210 = v207[2];
          *((unsigned char *)v207 + 24) = *((unsigned char *)v210 + 24);
          *((unsigned char *)v210 + 24) = 1;
          v206[24] = 1;
          uint64_t v211 = *(uint64_t **)v210;
          uint64_t v214 = *(void *)(*(void *)v210 + 8);
          *(void *)long long v210 = v214;
          if (v214) {
            *(void *)(v214 + 16) = v210;
          }
          v211[2] = *((void *)v210 + 2);
          *(void *)(*((void *)v210 + 2) + 8 * (**((void **)v210 + 2) != (void)v210)) = v211;
          v211[1] = (uint64_t)v210;
          goto LABEL_364;
        }
        *((unsigned char *)v194 + 24) = 0;
        long long v204 = (void **)v194[2];
        if (*((unsigned char *)v204 + 24)) {
          BOOL v208 = v204 == v179;
        }
        else {
          BOOL v208 = 1;
        }
        if (v208) {
          goto LABEL_345;
        }
LABEL_342:
        uint64_t v194 = (void **)*((void *)v204[2] + (*(void *)v204[2] == (void)v204));
      }
      if (!*((unsigned char *)v194 + 24))
      {
        *((unsigned char *)v194 + 24) = 1;
        *((unsigned char *)v199 + 24) = 0;
        std::string::size_type v200 = (uint64_t *)v199[1];
        uint64_t v201 = *v200;
        v199[1] = (void *)*v200;
        if (v201) {
          *(void *)(v201 + 16) = v199;
        }
        v200[2] = (uint64_t)v199[2];
        *((void *)v199[2] + (*(void *)v199[2] != (void)v199)) = v200;
        *std::string::size_type v200 = (uint64_t)v199;
        v199[2] = v200;
        if (v179 == *v194) {
          int v179 = v194;
        }
        uint64_t v194 = (void **)*((void *)*v194 + 1);
      }
      long long v202 = *v194;
      if (!*v194 || v202[24])
      {
        long long v203 = (void **)v194[1];
        if (v203 && !*((unsigned char *)v203 + 24)) {
          goto LABEL_351;
        }
        *((unsigned char *)v194 + 24) = 0;
        long long v204 = (void **)v194[2];
        if (v204 == v179)
        {
          long long v204 = v179;
LABEL_345:
          *((unsigned char *)v204 + 24) = 1;
          goto LABEL_365;
        }
        if (!*((unsigned char *)v204 + 24)) {
          goto LABEL_345;
        }
        goto LABEL_342;
      }
      long long v203 = (void **)v194[1];
      if (v203 && !*((unsigned char *)v203 + 24))
      {
LABEL_351:
        long long v202 = v194;
      }
      else
      {
        v202[24] = 1;
        *((unsigned char *)v194 + 24) = 0;
        char v209 = (void *)*((void *)v202 + 1);
        *uint64_t v194 = v209;
        if (v209) {
          v209[2] = v194;
        }
        *((void *)v202 + 2) = v194[2];
        *((void *)v194[2] + (*(void *)v194[2] != (void)v194)) = v202;
        *((void *)v202 + boost::detail::shared_count::~shared_count(this + 1) = v194;
        v194[2] = v202;
        long long v203 = v194;
      }
      long long v210 = (void *)*((void *)v202 + 2);
      v202[24] = *((unsigned char *)v210 + 24);
      *((unsigned char *)v210 + 24) = 1;
      *((unsigned char *)v203 + 24) = 1;
      uint64_t v211 = (uint64_t *)*((void *)v210 + 1);
      uint64_t v212 = *v211;
      *((void *)v210 + boost::detail::shared_count::~shared_count(this + 1) = *v211;
      if (v212) {
        *(void *)(v212 + 16) = v210;
      }
      v211[2] = *((void *)v210 + 2);
      *(void *)(*((void *)v210 + 2) + 8 * (**((void **)v210 + 2) != (void)v210)) = v211;
      *uint64_t v211 = (uint64_t)v210;
LABEL_364:
      *((void *)v210 + 2) = v211;
LABEL_365:
      if (*((char *)v180 + 55) < 0) {
        operator delete(v180[4]);
      }
      operator delete(v180);
LABEL_368:
      Class v177 = (Class)((char *)v177 + 24);
      if (v177 == v178)
      {
LABEL_369:
        std::__tree<std::string>::destroy((char *)__p[1]);
        int v215 = 0;
        goto LABEL_413;
      }
    }
  }
LABEL_262:
  uint64_t v173 = *((void *)v171 + 21);
  uint64_t v174 = *((void *)v171 + 22);
  while (1)
  {
    if (v173 == v174)
    {
      uint64_t v175 = *((void *)v171 + 24);
      uint64_t v176 = *((void *)v171 + 25);
      while (v175 != v176)
      {
        if (*(unsigned char *)(v175 + 24)
          && !std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (void *)v175, v175))
        {
          unint64_t v225 = get_adm_log_object();
          if (!os_log_type_enabled(v225, OS_LOG_TYPE_ERROR)) {
            goto LABEL_408;
          }
          if (*(char *)(v175 + 23) < 0) {
            uint64_t v175 = *(void *)v175;
          }
          LODWORD(v307.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v307.__r_.__value_.__r.__words + 4) = v175;
LABEL_425:
          _os_log_error_impl(&dword_248947000, v225, OS_LOG_TYPE_ERROR, "duplicate stream ID %s", (uint8_t *)&v307, 0xCu);
          goto LABEL_408;
        }
        v175 += 136;
      }
      Class v171 = (Class)((char *)v171 + 216);
      if (v171 == v172) {
        goto LABEL_273;
      }
      goto LABEL_262;
    }
    if (*(unsigned char *)(v173 + 24)
      && !std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (void *)v173, v173))
    {
      break;
    }
    v173 += 136;
  }
  unint64_t v225 = get_adm_log_object();
  if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v173 + 23) < 0) {
      uint64_t v173 = *(void *)v173;
    }
    LODWORD(v307.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v307.__r_.__value_.__r.__words + 4) = v173;
    goto LABEL_425;
  }
LABEL_408:

LABEL_409:
  std::__tree<std::string>::destroy((char *)__p[1]);
  unint64_t v226 = get_adm_log_object();
  if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_248947000, v226, OS_LOG_TYPE_ERROR, "Inconsistent stream IDs in config change request dictionary!", (uint8_t *)__p, 2u);
  }

LABEL_412:
  int v215 = 1;
LABEL_413:

  BOOL v219 = v215 == 0;
LABEL_378:

  return v219;
}

void sub_24898E504(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  if (a2)
  {

    __cxa_begin_catch(a1);
    std::string v19 = get_adm_log_object();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x370]) = 0;
      _os_log_error_impl(&dword_248947000, v19, OS_LOG_TYPE_ERROR, "Exception from converting the config change request dictionary!", (uint8_t *)&STACK[0x370], 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x24898E058);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    int v7 = operator new(0x38uLL);
    _DWORD v7[2] = *(_OWORD *)a3;
    *((void *)v7 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v8 = v9;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

void anonymous namespace'::getASBDFormatFromDict(_anonymous_namespace_ *this, NSDictionary *a2)
{
  std::error_code v20 = a2;
  uint64_t v3 = [(NSDictionary *)v20 objectForKeyedSubscript:@"channels"];
  int v4 = [v3 unsignedIntValue];

  uint64_t v5 = [(NSDictionary *)v20 objectForKeyedSubscript:@"sample rate"];
  [v5 doubleValue];
  uint64_t v7 = v6;

  uint64_t v8 = [(NSDictionary *)v20 objectForKeyedSubscript:@"common pcm format"];
  LODWORD(vstd::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = [v8 unsignedIntValue];

  uint64_t v9 = [(NSDictionary *)v20 objectForKeyedSubscript:@"is interleaved"];
  int v10 = [v9 BOOLValue];

  switch((int)v5)
  {
    case 1:
      BOOL v11 = v10 == 0;
      int v12 = 41;
      int v13 = 9;
      goto LABEL_5;
    case 2:
      if (v10) {
        int v12 = 12;
      }
      else {
        int v12 = 44;
      }
      unsigned int v18 = 2 * v4;
      if (!v10) {
        unsigned int v18 = 2;
      }
      uint64_t v15 = v18 | 0x100000000;
      int v16 = 16;
      goto LABEL_24;
    case 3:
      BOOL v11 = v10 == 0;
      int v12 = 3116;
      int v13 = 3084;
      goto LABEL_5;
    case 4:
      if (v10) {
        int v12 = 9;
      }
      else {
        int v12 = 41;
      }
      unsigned int v19 = 8 * v4;
      if (!v10) {
        unsigned int v19 = 8;
      }
      uint64_t v15 = v19 | 0x100000000;
      int v16 = 64;
      goto LABEL_24;
    case 5:
      BOOL v11 = v10 == 0;
      int v12 = 44;
      int v13 = 12;
LABEL_5:
      if (!v11) {
        int v12 = v13;
      }
      unsigned int v14 = 4 * v4;
      if (v11) {
        unsigned int v14 = 4;
      }
      uint64_t v15 = v14 | 0x100000000;
      int v16 = 32;
LABEL_24:
      int v17 = 1819304813;
      break;
    default:
      int v17 = 0;
      int v12 = 0;
      int v4 = 0;
      int v16 = 0;
      uint64_t v15 = 0;
      uint64_t v7 = 0;
      break;
  }
  *(void *)this = v7;
  *((_DWORD *)this + 2) = v17;
  *((_DWORD *)this + 3) = v12;
  *((void *)this + 2) = v15;
  *((_DWORD *)this + 6) = v15;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v16;
  *((_DWORD *)this + 9) = 0;
}

void sub_24898EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::getChannelLayoutFromDict(_anonymous_namespace_ *this, NSDictionary *a2)
{
  uint64_t v3 = a2;
  CFRetain(v3);
  id v91 = v3;
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v3);

  *(void *)this = 0;
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)this + 2) = 0;
  int v4 = operator new(0x20uLL);
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v4 + 2;
  *((void *)this + 2) = v4 + 2;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  *(void *)this = v4;
  *(void *)int v4 = 0;
  *((_DWORD *)v4 + 2) = 0;
  CFDictionaryRef v5 = (const __CFDictionary *)cf;
  id v93 = this;
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"channel layout tag", 18, 0x8000100u, 0);
  if (!v6)
  {
    uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, v6);
  CFRelease(v6);
  int v8 = -65536;
  if (Value)
  {
    unint64_t v9 = applesauce::CF::convert_as<unsigned int,0>(Value);
    if (HIDWORD(v9)) {
      int v8 = v9;
    }
    else {
      int v8 = -65536;
    }
  }
  *(_DWORD *)int v4 = v8;
  CFDictionaryRef v10 = (const __CFDictionary *)cf;
  if (!cf)
  {
    long long v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"channel bitmap", 14, 0x8000100u, 0);
  if (!v11)
  {
    id v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, v11);
  CFRelease(v11);
  if (v12)
  {
    unint64_t v13 = applesauce::CF::convert_as<unsigned int,0>(v12);
    int v14 = 0;
    if (v13 > 0x100000000) {
      int v14 = v13;
    }
  }
  else
  {
    int v14 = 0;
  }
  *((_DWORD *)v4 + boost::detail::shared_count::~shared_count(this + 1) = v14;
  CFDictionaryRef v15 = (const __CFDictionary *)cf;
  if (!cf)
  {
    int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  long long valuePtr = 0uLL;
  unint64_t v97 = 0;
  CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"channel descriptions", 20, 0x8000100u, 0);
  if (!v16)
  {
    unsigned int v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v15, v16);
  CFRelease(v16);
  if (!v17)
  {
    v101.i8[0] = 0;
    char v103 = 0;
    goto LABEL_35;
  }
  applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>(&v101, v17);
  if (!v103)
  {
LABEL_35:
    long long v98 = valuePtr;
    uint64_t v99 = v97;
    unint64_t v97 = 0;
    long long valuePtr = 0uLL;
    goto LABEL_36;
  }
  long long v98 = 0uLL;
  uint64_t v99 = 0;
  uint64_t v19 = v101.i64[1];
  unsigned int v18 = (CFTypeRef *)v101.i64[0];
  unint64_t v104 = (int64x2_t *)&v98;
  char v105 = 0;
  uint64_t v20 = v101.i64[1] - v101.i64[0];
  if (v101.i64[1] != v101.i64[0])
  {
    if (v20 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20 >> 3);
    *(void *)&long long v98 = v21;
    *((void *)&v98 + boost::detail::shared_count::~shared_count(this + 1) = v21;
    uint64_t v99 = &v21[v22];
    do
    {
      CFTypeRef v23 = *v18;
      if (*v18) {
        CFRetain(*v18);
      }
      *v21++ = v23;
      ++v18;
    }
    while (v18 != (CFTypeRef *)v19);
    *((void *)&v98 + boost::detail::shared_count::~shared_count(this + 1) = v21;
  }
  if (v103)
  {
    unint64_t v104 = &v101;
    std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  }
LABEL_36:
  v101.i64[0] = (uint64_t)&valuePtr;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  unint64_t v30 = *((void *)&v98 + 1) - v98;
  uint64_t v31 = (*((void *)&v98 + 1) - (void)v98) >> 3;
  if (v31 <= 1) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = (*((void *)&v98 + 1) - (void)v98) >> 3;
  }
  unint64_t v33 = 20 * v32 + 12;
  uint64_t v35 = *(char **)v93;
  uint64_t v34 = (char *)*((void *)v93 + 1);
  id v36 = &v34[-*(void *)v93];
  unint64_t v37 = v33 - (void)v36;
  if (v33 <= (unint64_t)v36)
  {
    if (v33 >= (unint64_t)v36) {
      goto LABEL_59;
    }
    id v47 = &v35[v33];
    goto LABEL_55;
  }
  uint64_t v38 = *((void *)v93 + 2);
  if (v38 - (uint64_t)v34 >= v37)
  {
    id v47 = &v34[v37];
    do
    {
      *v34++ = 0;
      --v37;
    }
    while (v37);
LABEL_55:
    *((void *)v93 + boost::detail::shared_count::~shared_count(this + 1) = v47;
    goto LABEL_59;
  }
  unint64_t v39 = v38 - (void)v35;
  uint64_t v40 = 2 * v39;
  if (2 * v39 <= v33) {
    uint64_t v40 = v33;
  }
  if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v41 = v40;
  }
  unsigned int v42 = operator new(v41);
  uint64_t v35 = &v36[(void)v42];
  int v43 = &v36[(void)v42];
  do
  {
    *v43++ = 0;
    --v37;
  }
  while (v37);
  uint64_t v44 = *(char **)v93;
  if (v34 == *(char **)v93)
  {
    uint64_t v46 = v93;
  }
  else
  {
    do
    {
      char v45 = *--v34;
      *--uint64_t v35 = v45;
    }
    while (v34 != v44);
    uint64_t v46 = v93;
    uint64_t v34 = *(char **)v93;
  }
  *(void *)uint64_t v46 = v35;
  *((void *)v46 + boost::detail::shared_count::~shared_count(this + 1) = (char *)v42 + v33;
  *((void *)v46 + 2) = (char *)v42 + v41;
  if (v34) {
    operator delete(v34);
  }
LABEL_59:
  *((_DWORD *)v35 + 2) = v31;
  if (v31)
  {
    unint64_t v48 = 0;
    uint64_t v92 = (v30 >> 3);
    while (1)
    {
      long long v49 = *(char **)v93;
      unint64_t v50 = *(unsigned int *)(*(void *)v93 + 8);
      if (v50 > (*((void *)v93 + 1) - *(void *)v93 - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v48 >= v50)
      {
        unsigned __int8 v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v87, "accessing a CA::ChannelLayout with an out-of-range index");
        v87->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
        __cxa_throw(v87, (struct type_info *)off_265242DF8, MEMORY[0x263F8C068]);
      }
      uint64_t v51 = v98;
      CFDictionaryRef v52 = *(const __CFDictionary **)(v98 + 8 * v48);
      if (!v52)
      {
        std::string v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Could not construct");
        __cxa_throw(v88, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      BOOL v53 = v49 + 12;
      v101.i32[0] = -1;
      *(_DWORD *)&v49[20 * v48 + 12] = applesauce::CF::at_or<unsigned int,char const(&)[14]>(v52, "channel label", (unsigned int *)&v101);
      CFDictionaryRef v54 = *(const __CFDictionary **)(v51 + 8 * v48);
      if (!v54)
      {
        uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v89, "Could not construct");
        __cxa_throw(v89, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v101.i32[0] = 0;
      *(_DWORD *)&v53[20 * v48 + 4] = applesauce::CF::at_or<unsigned int,char const(&)[14]>(v54, "channel flags", (unsigned int *)&v101);
      CFDictionaryRef v55 = *(const __CFDictionary **)(v51 + 8 * v48);
      if (!v55)
      {
        uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v90, "Could not construct");
        __cxa_throw(v90, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      CFStringRef v56 = CFStringCreateWithBytes(0, (const UInt8 *)"coordinates", 11, 0x8000100u, 0);
      if (!v56)
      {
        long long v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v85, "Could not construct");
        __cxa_throw(v85, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v57 = CFDictionaryGetValue(v55, v56);
      CFRelease(v56);
      if (!v57) {
        break;
      }
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID != CFGetTypeID(v57)) {
        break;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)v57);
      int v60 = Count;
      if (Count << 32)
      {
        if (Count << 32 < 0) {
LABEL_148:
        }
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        uint64_t v61 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((int)Count);
        uint64_t v63 = &v61[v62];
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v61 = 0;
      }
      if (v60 >= 1)
      {
        CFIndex v64 = 0;
        uint64_t v95 = v60;
        uint64_t v65 = v61;
        while (1)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v57, v64);
          if (!ValueAtIndex) {
            break;
          }
          CFTypeID v67 = CFNumberGetTypeID();
          if (v67 == CFGetTypeID(ValueAtIndex))
          {
            switch(CFNumberGetType(ValueAtIndex))
            {
              case kCFNumberSInt8Type:
                LOBYTE(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt8Type, &valuePtr);
                goto LABEL_97;
              case kCFNumberSInt16Type:
                LOWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
                goto LABEL_92;
              case kCFNumberSInt32Type:
                LODWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
                goto LABEL_102;
              case kCFNumberSInt64Type:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
                goto LABEL_100;
              case kCFNumberFloat32Type:
                LODWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, &valuePtr);
                goto LABEL_84;
              case kCFNumberFloat64Type:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &valuePtr);
                goto LABEL_94;
              case kCFNumberCharType:
                LOBYTE(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberCharType, &valuePtr);
LABEL_97:
                int v72 = (char)valuePtr;
                goto LABEL_98;
              case kCFNumberShortType:
                LOWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
LABEL_92:
                int v72 = (__int16)valuePtr;
LABEL_98:
                float v73 = (float)v72;
                goto LABEL_103;
              case kCFNumberIntType:
                LODWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
LABEL_102:
                float v73 = (float)(int)valuePtr;
                goto LABEL_103;
              case kCFNumberLongType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr);
                goto LABEL_100;
              case kCFNumberLongLongType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr);
                goto LABEL_100;
              case kCFNumberFloatType:
                LODWORD(valuePtr) = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &valuePtr);
LABEL_84:
                uint64_t v71 = valuePtr;
                goto LABEL_104;
              case kCFNumberDoubleType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
                goto LABEL_94;
              case kCFNumberCFIndexType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
                goto LABEL_100;
              case kCFNumberNSIntegerType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberNSIntegerType, &valuePtr);
LABEL_100:
                float v73 = (float)(uint64_t)valuePtr;
                goto LABEL_103;
              case kCFNumberCGFloatType:
                *(void *)&long long valuePtr = 0;
                int v68 = CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
LABEL_94:
                float v73 = *(double *)&valuePtr;
LABEL_103:
                uint64_t v71 = LODWORD(v73);
LABEL_104:
                uint64_t v74 = v71 | 0x100000000;
                if (!v68) {
                  uint64_t v74 = 0;
                }
                int v75 = v74 & 0xFFFFFF00;
                unint64_t v76 = v74 & 0x100000000;
                break;
              default:
                int v75 = 0;
                unint64_t v76 = 0;
                LOBYTE(v74) = 0;
                break;
            }
            if (!HIDWORD(v76)) {
              break;
            }
            LODWORD(v70) = v76 | v75 & 0xFFFFFF00 | v74;
          }
          else
          {
            CFTypeID v69 = CFBooleanGetTypeID();
            if (v69 != CFGetTypeID(ValueAtIndex)) {
              break;
            }
            float v70 = (float)CFBooleanGetValue(ValueAtIndex);
          }
          if (v61 >= v63)
          {
            uint64_t v78 = v61 - v65;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
              goto LABEL_148;
            }
            if (((char *)v63 - (char *)v65) >> 1 > v79) {
              unint64_t v79 = ((char *)v63 - (char *)v65) >> 1;
            }
            if ((unint64_t)((char *)v63 - (char *)v65) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v79;
            }
            if (v80) {
              unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v80);
            }
            else {
              uint64_t v81 = 0;
            }
            long long v82 = (float *)(v80 + 4 * v78);
            float *v82 = v70;
            uint64_t v77 = (uint64_t)(v82 + 1);
            while (v61 != v65)
            {
              int v83 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v82-- - boost::detail::shared_count::~shared_count(this + 1) = v83;
            }
            uint64_t v63 = (float *)(v80 + 4 * v81);
            if (v65) {
              operator delete(v65);
            }
            uint64_t v65 = v82;
          }
          else
          {
            float *v61 = v70;
            uint64_t v77 = (uint64_t)(v61 + 1);
          }
          ++v64;
          uint64_t v61 = (float *)v77;
          if (v64 == v95) {
            goto LABEL_133;
          }
        }
        v94 &= 0xFFFFFFFFFFFFFF00;
        if (v65) {
          operator delete(v65);
        }
        goto LABEL_138;
      }
      uint64_t v65 = v61;
      uint64_t v77 = (uint64_t)v61;
LABEL_133:
      int64x2_t v101 = 0uLL;
      uint64_t v102 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v101, v65, v77, (v77 - (uint64_t)v65) >> 2);
      if (v65) {
        operator delete(v65);
      }
      int v84 = (_DWORD *)v101.i64[0];
      unint64_t v94 = (unint64_t)v65;
LABEL_139:
      if (v101.i64[1] - (void)v84 == 12)
      {
        CFArrayRef v86 = &v53[20 * v48];
        v86[2] = *v84;
        v86[3] = v84[1];
        v86[4] = v84[2];
LABEL_142:
        operator delete(v84);
        goto LABEL_143;
      }
      if (v84) {
        goto LABEL_142;
      }
LABEL_143:
      if (++v48 == v92) {
        goto LABEL_144;
      }
    }
    v94 &= 0xFFFFFFFFFFFFFF00;
LABEL_138:
    int v84 = 0;
    int64x2_t v101 = 0uLL;
    uint64_t v102 = 0;
    goto LABEL_139;
  }
LABEL_144:
  v101.i64[0] = (uint64_t)&v98;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_24898FC5C()
{
  CFRelease(v0);
  JUMPOUT(0x24898FC78);
}

void sub_24898FC98()
{
  CFRelease(v0);
  JUMPOUT(0x24898FCB0);
}

void sub_24898FCD0()
{
}

void sub_24898FCD8()
{
  JUMPOUT(0x24898FD50);
}

void sub_24898FD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a23);
  JUMPOUT(0x24898FD2CLL);
}

uint64_t std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0]) {
    return std::string::__assign_external(a1, a2);
  }
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

void std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100](long long **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - (void)*a1) >> 3);
    if (v8 + 1 > 0x1E1E1E1E1E1E1E1) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - (void)*a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 > 0x1E1E1E1E1E1E1E1) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFNumberRef v12 = (char *)operator new(136 * v11);
    }
    else
    {
      CFNumberRef v12 = 0;
    }
    unint64_t v13 = (long long *)&v12[136 * v11];
    std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>((uint64_t)&v12[136 * v8], a2);
    uint64_t v7 = (long long *)((char *)v14 + 136);
    CFStringRef v16 = *a1;
    CFDictionaryRef v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        CFDictionaryRef v15 = (long long *)((char *)v15 - 136);
        std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>((uint64_t)v14 - 136, v15);
      }
      while (v15 != v16);
      CFDictionaryRef v15 = *a1;
      uint64_t v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((long long *)v17 != v15)
      {
        v17 -= 136;
        std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(v17);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>(v4, a2);
    uint64_t v7 = (long long *)(v6 + 136);
  }
  a1[1] = v7;
}

void std::vector<adm::DeviceDescription>::push_back[abi:ne180100](long long **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0x84BDA12F684BDA13 * ((uint64_t)(v4 - (void)*a1) >> 3);
    if (v8 + 1 > 0x12F684BDA12F684) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x84BDA12F684BDA13 * ((uint64_t)(v5 - (void)*a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x97B425ED097B42) {
      unint64_t v11 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 > 0x12F684BDA12F684) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFNumberRef v12 = (char *)operator new(216 * v11);
    }
    else
    {
      CFNumberRef v12 = 0;
    }
    unint64_t v13 = (long long *)&v12[216 * v11];
    std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>((uint64_t)&v12[216 * v8], a2);
    uint64_t v7 = (long long *)((char *)v14 + 216);
    CFStringRef v16 = *a1;
    CFDictionaryRef v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        CFDictionaryRef v15 = (long long *)((char *)v15 - 216);
        std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>((uint64_t)v14 - 216, v15);
      }
      while (v15 != v16);
      CFDictionaryRef v15 = *a1;
      uint64_t v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((long long *)v17 != v15)
      {
        v17 -= 216;
        std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v17);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>(v4, a2);
    uint64_t v7 = (long long *)(v6 + 216);
  }
  a1[1] = v7;
}

void std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  if (*v5) {
    return 0;
  }
  uint64_t v7 = v5;
  unint64_t v8 = (uint64_t *)operator new(0x38uLL);
  unint64_t v9 = (std::string *)(v8 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[6] = *(void *)(a3 + 16);
  }
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v8);
  return 1;
}

void sub_248990298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

__n128 std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v3 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*((unsigned char *)a2 + 152))
  {
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 128) = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *((void *)a2 + 16) = 0;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *(unsigned char *)(a1 + 152) = 1;
  }
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 2boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  __n128 result = (__n128)a2[12];
  *(__n128 *)(a1 + 192) = result;
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 2std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
  *((void *)a2 + 26) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(uint64_t a1)
{
  long long v5 = (void **)(a1 + 192);
  std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = (void **)(a1 + 168);
  std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(unsigned char *)(a1 + 152))
  {
    long long v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    long long v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(void *)(a1 + 104) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v4 = *(void **)a1;
    operator delete(v4);
  }
}

__n128 std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + boost::detail::shared_count::~shared_count(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 56) = 1;
  }
  long long v4 = a2[5];
  uint64_t v5 = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 1std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = 0;
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  return result;
}

__n128 std::vector<char>::__move_assign(uint64_t a1, __n128 *a2)
{
  long long v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t applesauce::CF::at_or<unsigned int,char const(&)[14]>(const __CFDictionary *a1, char *__s, unsigned int *a3)
{
  CFIndex v6 = strlen(__s);
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, v7);
  CFRelease(v7);
  if (!Value) {
    return *a3;
  }
  unint64_t result = applesauce::CF::convert_as<unsigned int,0>(Value);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t adm::utility::convertFromDictionary(adm::utility *this, NSDictionary *a2, HostDescription *a3)
{
  long long v4 = this;
  uint64_t v5 = [(adm::utility *)v4 objectForKeyedSubscript:@"client bundle identifier"];
  CFIndex v6 = v5;
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)[v5 UTF8String]);
    if (SHIBYTE(a2[2].super.isa) < 0) {
      operator delete(a2->super.isa);
    }
    *(_OWORD *)&a2->super.Class isa = v11;
    a2[2].super.Class isa = v12;
  }

  CFStringRef v7 = [(adm::utility *)v4 objectForKeyedSubscript:@"client unique identifier"];
  unint64_t v8 = v7;
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)[v7 UTF8String]);
    unint64_t v9 = a2 + 3;
    if (SHIBYTE(a2[5].super.isa) < 0) {
      operator delete(v9->super.isa);
    }
    *(_OWORD *)&v9->super.Class isa = v11;
    a2[5].super.Class isa = v12;
  }

  return 1;
}

void sub_248990838(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  __cxa_begin_catch(a1);
  unint64_t v9 = get_adm_log_object();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    a9 = 0;
    _os_log_error_impl(&dword_248947000, v9, OS_LOG_TYPE_ERROR, "Exception from converting the host description dictionary!", (uint8_t *)&a9, 2u);
  }

  __cxa_end_catch();
  JUMPOUT(0x24899081CLL);
}

id anonymous namespace'::createFormatDictFromASBD(_anonymous_namespace_ *this, const StreamDescription *a2)
{
  long long v3 = objc_opt_new();
  long long v4 = [NSNumber numberWithDouble:*(double *)this];
  [v3 setObject:v4 forKeyedSubscript:@"sample rate"];

  uint64_t v5 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 7)];
  [v3 setObject:v5 forKeyedSubscript:@"channels"];

  uint64_t v6 = 0;
  if (*((_DWORD *)this + 2) == 1819304813 && *((_DWORD *)this + 5) == 1)
  {
    unsigned int v7 = *((_DWORD *)this + 6);
    if (v7 != *((_DWORD *)this + 4)
      || (unsigned int v8 = *((_DWORD *)this + 8), v7 < v8 >> 3)
      || (unsigned int v9 = *((_DWORD *)this + 7)) == 0
      || (v10 = *((_DWORD *)this + 3), (v10 & 0x20) == 0) && (BOOL v16 = v7 == v7 / v9 * v9, v7 /= v9, !v16))
    {
LABEL_13:
      uint64_t v6 = 0;
      goto LABEL_14;
    }
    uint64_t v6 = 0;
    if ((v10 & 2) == 0 && 8 * v7 == v8)
    {
      if (v10)
      {
        if (v7 == 4) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = 4 * (v7 == 8);
        }
        if ((v10 & 0x1F84) != 0) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = v14;
        }
        goto LABEL_14;
      }
      if ((v10 & 4) != 0)
      {
        int v15 = (v10 >> 7) & 0x3F;
        if (v15 == 24 && v7 == 4)
        {
          uint64_t v6 = 3;
        }
        else if (v15 || v7 != 4)
        {
          BOOL v16 = v7 == 2 && v15 == 0;
          if (v16) {
            uint64_t v6 = 2;
          }
          else {
            uint64_t v6 = 0;
          }
        }
        else
        {
          uint64_t v6 = 5;
        }
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
LABEL_14:
  long long v11 = [NSNumber numberWithInteger:v6];
  [v3 setObject:v11 forKeyedSubscript:@"common pcm format"];

  CFNumberRef v12 = [NSNumber numberWithBool:(*((_DWORD *)this + 3) & 0x20) == 0];
  [v3 setObject:v12 forKeyedSubscript:@"is interleaved"];

  return v3;
}

void sub_248990AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id adm::utility::convertToDictionary(uint64_t a1)
{
  long long v2 = objc_opt_new();
  if (*(unsigned char *)(a1 + 8))
  {
    long long v3 = [NSNumber numberWithUnsignedLongLong:*(void *)a1];
    [v2 setObject:v3 forKeyedSubscript:@"dsp processing latency samples"];
  }
  return v2;
}

void sub_248990B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id adm::utility::convertToDictionary(adm::utility *this, const adm::NegotiateResponse *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v3 = objc_opt_new();
  id v34 = v3;
  uint64_t v35 = objc_opt_new();
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)];
  uint64_t v6 = *(_anonymous_namespace_ **)this;
  unsigned int v7 = (_anonymous_namespace_ *)*((void *)this + 1);
  while (v6 != v7)
    unsigned int v8 = {;
    [v5 addObject:v8];

    uint64_t v6 = (_anonymous_namespace_ *)((char *)v6 + 40);
  }
  [v35 setObject:v5 forKeyedSubscript:@"io context supported input formats"];

  unsigned int v10 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3)];
  long long v11 = (_anonymous_namespace_ *)*((void *)this + 3);
  CFNumberRef v12 = (_anonymous_namespace_ *)*((void *)this + 4);
  while (v11 != v12)
    unint64_t v13 = {;
    [v10 addObject:v13];

    long long v11 = (_anonymous_namespace_ *)((char *)v11 + 40);
  }
  [v35 setObject:v10 forKeyedSubscript:@"io context supported output formats"];

  [v3 setObject:v35 forKeyedSubscript:@"io context configuration"];
  uint64_t v14 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3)];
  BOOL v16 = (double *)*((void *)this + 6);
  uint64_t v17 = (uint64_t *)*((void *)this + 7);
  if (v16 != (double *)v17)
  {
    *(void *)&long long v15 = 67109120;
    long long v33 = v15;
    do
    {
      unsigned int v18 = objc_opt_new();
      uint64_t v19 = (uint64_t *)v16;
      if (*((char *)v16 + 23) < 0) {
        uint64_t v19 = *(uint64_t **)v16;
      }
      uint64_t v20 = objc_msgSend(NSString, "stringWithUTF8String:", v19, v33);
      [v18 setObject:v20 forKeyedSubscript:@"device uid"];

      if (*((unsigned char *)v16 + 32))
      {
        BOOL v21 = [NSNumber numberWithDouble:v16[3]];
        [v18 setObject:v21 forKeyedSubscript:@"sample rate"];
      }
      if (*((unsigned char *)v16 + 41))
      {
        uint64_t v22 = [NSNumber numberWithBool:*((unsigned __int8 *)v16 + 40)];
        [v18 setObject:v22 forKeyedSubscript:@"reference stream enablement"];
      }
      if (*((unsigned char *)v16 + 48))
      {
        CFTypeRef v23 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v16 + 11)];
        [v18 setObject:v23 forKeyedSubscript:@"reference stream channel count"];
      }
      if (*((unsigned char *)v16 + 53))
      {
        uint64_t v24 = NSString;
        unsigned int v25 = *((unsigned __int8 *)v16 + 52);
        if (v25 >= 4)
        {
          id v27 = get_adm_log_object();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = v33;
            unsigned int v39 = v25;
            _os_log_error_impl(&dword_248947000, v27, OS_LOG_TYPE_ERROR, "Unknown Bluetooth format %d - use Automatic instead", buf, 8u);
          }

          long long v26 = "automatic";
        }
        else
        {
          long long v26 = off_265243210[*((unsigned __int8 *)v16 + 52)];
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v26);
        if (v37 >= 0) {
          int v28 = __p;
        }
        else {
          int v28 = (void **)__p[0];
        }
        unsigned int v29 = [v24 stringWithUTF8String:v28];
        [v18 setObject:v29 forKeyedSubscript:@"bluetooth format"];

        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
      if (*((unsigned char *)v16 + 60))
      {
        unint64_t v30 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v16 + 14)];
        [v18 setObject:v30 forKeyedSubscript:@"mic processing mode"];
      }
      if (*((unsigned char *)v16 + 68))
      {
        uint64_t v31 = [NSNumber numberWithUnsignedInt:*((unsigned int *)v16 + 16)];
        [v18 setObject:v31 forKeyedSubscript:@"mic processing kind"];
      }
      [v14 addObject:v18];

      v16 += 9;
    }
    while (v16 != (double *)v17);
  }
  [v34 setObject:v14 forKeyedSubscript:@"device configurations"];

  return v34;
}

void sub_248990FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::ErrorCategory::message(int a1@<W1>, void *a2@<X8>)
{
  if (a1 <= 1969448550)
  {
    if (!a1)
    {
      uint64_t v5 = "no error";
      goto LABEL_12;
    }
    if (a1 == 1651536493)
    {
      uint64_t v5 = "bad parameter";
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 1969448551:
        uint64_t v5 = "unknown configuration";
        goto LABEL_12;
      case 1969843568:
        uint64_t v5 = "unimplemented";
        goto LABEL_12;
      case 1970170734:
        uint64_t v5 = "unknown error";
LABEL_12:
        std::string::basic_string[abi:ne180100]<0>(a2, v5);
        return;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid error code: ");
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_248991210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *anonymous namespace'::ErrorCategory::name(_anonymous_namespace_::ErrorCategory *this)
{
  return "AudioDSPManagerError";
}

void anonymous namespace'::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24C5866C0);
}

uint64_t adm::config_policy::getIOContextConfiguration(uint64_t this, const adm::ConfigurationChangeRequest *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)a2)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    adm::config_policy::getPrimaryStreamInfo((adm::config_policy *)v31, a2);
    long long v4 = v31[1];
    if (adm::config_policy::isBuiltInMicrophoneDevice(v31[0], v5))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "voice isolation conferencing");
      uint64_t v6 = (const adm::ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, __p);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if ((const adm::ConfigurationChangeRequest *)((char *)a2 + 16) != v6)
      {
        unsigned int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
        long long v9 = &v7[40 * v8];
        this = std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>((uint64_t)v7, 1, 1, 0, *((double *)v4 + 8));
        *((void *)&v33 + boost::detail::shared_count::~shared_count(this + 1) = this + 40;
        *(void *)&long long v34 = v9;
LABEL_26:
        *(void *)&long long v33 = this;
LABEL_32:
        long long v26 = v34;
        *(_OWORD *)uint64_t v2 = v33;
        *(_OWORD *)(v2 + 16) = v26;
        *(_OWORD *)(v2 + 32) = v35;
        goto LABEL_33;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial playback");
    if ((void *)((char *)a2 + 16) == std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, __p))
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "spatial channel virtualization only");
      BOOL v10 = (void *)((char *)a2 + 16) != std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, v27)
         && *((unsigned char *)a2 + 152) != 0;
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    else
    {
      BOOL v10 = *((unsigned char *)a2 + 152) != 0;
    }
    if (v30 < 0)
    {
      operator delete(__p[0]);
      if (v10) {
        goto LABEL_20;
      }
    }
    else if (v10)
    {
LABEL_20:
      CFNumberRef v12 = (_DWORD *)*((void *)a2 + 16);
      if (*v12 == 0x10000)
      {
        uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v12[1]);
        v20.i16[0] = vaddlv_u8(v20);
        int v13 = v20.i32[0];
      }
      else if (*v12)
      {
        int v13 = (unsigned __int16)*v12;
      }
      else
      {
        int v13 = v12[2];
      }
      int v21 = *((_DWORD *)v4 + 19);
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
      char v23 = (v21 & 0x20) == 0;
      unsigned int v25 = &v22[40 * v24];
      this = std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,unsigned int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>((uint64_t)v22, v13, 1, v23, *((double *)v4 + 8));
      *(void *)&long long v35 = this + 40;
      *((void *)&v35 + boost::detail::shared_count::~shared_count(this + 1) = v25;
      goto LABEL_31;
    }
    if (v32 == 1)
    {
      this = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
      long long v15 = *((_OWORD *)v4 + 4);
      long long v16 = *((_OWORD *)v4 + 5);
      *(void *)(this + 32) = *((void *)v4 + 12);
      *(_OWORD *)this = v15;
      *(_OWORD *)(this + 16) = v16;
      *((void *)&v33 + boost::detail::shared_count::~shared_count(this + 1) = this + 40;
      *(void *)&long long v34 = this + 40 * v14;
      goto LABEL_26;
    }
    this = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
    long long v18 = *((_OWORD *)v4 + 4);
    long long v19 = *((_OWORD *)v4 + 5);
    *(void *)(this + 32) = *((void *)v4 + 12);
    *(_OWORD *)this = v18;
    *(_OWORD *)(this + 16) = v19;
    *(void *)&long long v35 = this + 40;
    *((void *)&v35 + boost::detail::shared_count::~shared_count(this + 1) = this + 40 * v17;
LABEL_31:
    *((void *)&v34 + boost::detail::shared_count::~shared_count(this + 1) = this;
    goto LABEL_32;
  }
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
LABEL_33:
  *(unsigned char *)(v2 + 48) = 1;
  return this;
}

void sub_2489914EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  adm::IOContextConfiguration::~IOContextConfiguration((adm::IOContextConfiguration *)&a22);
  _Unwind_Resume(a1);
}

void adm::IOContextConfiguration::~IOContextConfiguration(adm::IOContextConfiguration *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,unsigned int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>(uint64_t result, int a2, int a3, char a4, double a5)
{
  switch(a3)
  {
    case 1:
      BOOL v5 = a4 == 0;
      int v6 = 9;
      int v7 = 41;
      goto LABEL_18;
    case 2:
      if (a4) {
        int v6 = 12;
      }
      else {
        int v6 = 44;
      }
      unsigned int v11 = 2 * a2;
      if (!a4) {
        unsigned int v11 = 2;
      }
      uint64_t v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_23;
    case 3:
      BOOL v5 = a4 == 0;
      int v6 = 3084;
      int v7 = 3116;
      goto LABEL_18;
    case 4:
      if (a4) {
        int v6 = 9;
      }
      else {
        int v6 = 41;
      }
      unsigned int v12 = 8 * a2;
      if (!a4) {
        unsigned int v12 = 8;
      }
      uint64_t v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_23;
    case 5:
      BOOL v5 = a4 == 0;
      int v6 = 12;
      int v7 = 44;
LABEL_18:
      if (v5) {
        int v6 = v7;
      }
      unsigned int v13 = 4 * a2;
      if (v5) {
        unsigned int v13 = 4;
      }
      uint64_t v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_23:
      LODWORD(v10) = a2;
      int v8 = 1819304813;
      break;
    default:
      int v8 = 0;
      int v6 = 0;
      uint64_t v9 = 0;
      a5 = 0.0;
      uint64_t v10 = 0;
      break;
  }
  *(double *)unint64_t result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(void *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(void *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>(uint64_t result, int a2, int a3, char a4, double a5)
{
  switch(a3)
  {
    case 1:
      BOOL v5 = a4 == 0;
      int v6 = 9;
      int v7 = 41;
      goto LABEL_18;
    case 2:
      if (a4) {
        int v6 = 12;
      }
      else {
        int v6 = 44;
      }
      unsigned int v11 = 2 * a2;
      if (!a4) {
        unsigned int v11 = 2;
      }
      uint64_t v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_23;
    case 3:
      BOOL v5 = a4 == 0;
      int v6 = 3084;
      int v7 = 3116;
      goto LABEL_18;
    case 4:
      if (a4) {
        int v6 = 9;
      }
      else {
        int v6 = 41;
      }
      unsigned int v12 = 8 * a2;
      if (!a4) {
        unsigned int v12 = 8;
      }
      uint64_t v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_23;
    case 5:
      BOOL v5 = a4 == 0;
      int v6 = 12;
      int v7 = 44;
LABEL_18:
      if (v5) {
        int v6 = v7;
      }
      unsigned int v13 = 4 * a2;
      if (v5) {
        unsigned int v13 = 4;
      }
      uint64_t v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_23:
      LODWORD(v10) = a2;
      int v8 = 1819304813;
      break;
    default:
      int v8 = 0;
      int v6 = 0;
      uint64_t v9 = 0;
      a5 = 0.0;
      uint64_t v10 = 0;
      break;
  }
  *(double *)unint64_t result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(void *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(void *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_248991874(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<adm::ConfigurationChangeRequest,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    long long v4 = (void **)(a1 + 192);
    std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
    long long v4 = (void **)(a1 + 168);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(unsigned char *)(a1 + 152))
    {
      uint64_t v2 = *(void **)(a1 + 128);
      if (v2)
      {
        *(void *)(a1 + 136) = v2;
        operator delete(v2);
      }
    }
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
  }
  return a1;
}

void std::default_delete<adm::CustomPropertyManager>::operator()[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(*(void **)(a1 + 64));
  MEMORY[0x24C586010](a1 + 40);
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  std::__function::__value_func<void ()(CA::PropertyAddress)>::~__value_func[abi:ne180100]((void *)a1);
  JUMPOUT(0x24C5866C0);
}

void std::default_delete<adm::graph::NodeManager>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](a1, 0);
  JUMPOUT(0x24C5866C0);
}

void std::default_delete<adm::graph::GraphBuilder>::operator()[abi:ne180100](void **this)
{
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  adm::SystemConfiguration::~SystemConfiguration(this);
  JUMPOUT(0x24C5866C0);
}

void std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__function::__value_func<void ()(CA::PropertyAddress)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_248991D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_2489920B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2489921EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2489922D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::DataRef::~DataRef(&a9);
  if (a2 == 4)
  {
    unsigned int v11 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v11);
  }
  if (a2 == 3)
  {
    unsigned int v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12, v13);
  }
  uint64_t v14 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    long long v15 = v14;
    adm::consume_exception_and_terminate(v15, v16);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v14);
}

void sub_248992340(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return this;
}

void sub_248992408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_248992524(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::DataRef::~DataRef((const void **)&a9);
  applesauce::CF::DataRef::~DataRef(&a10);
  if (a2 == 4)
  {
    unsigned int v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12);
  }
  if (a2 == 3)
  {
    unsigned int v13 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v13, v14);
  }
  long long v15 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    long long v16 = v15;
    adm::consume_exception_and_terminate(v16, v17);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v15);
}

void sub_2489925AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_24899304C()
{
}

void sub_2489931CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

uint64_t logConfigChangeRequestBasicInfo(const adm::ConfigurationChangeRequest *a1)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v37);
  uint64_t v2 = (const adm::ConfigurationChangeRequest *)*((void *)a1 + 1);
  if (v2 != (const adm::ConfigurationChangeRequest *)((char *)a1 + 16))
  {
    do
    {
      int v3 = *((char *)v2 + 55);
      if (v3 >= 0) {
        uint64_t v4 = (uint64_t)v2 + 32;
      }
      else {
        uint64_t v4 = *((void *)v2 + 4);
      }
      if (v3 >= 0) {
        uint64_t v5 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        uint64_t v5 = *((void *)v2 + 5);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, v4, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)",", 1);
      int v6 = (const adm::ConfigurationChangeRequest *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = *(const adm::ConfigurationChangeRequest **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (const adm::ConfigurationChangeRequest *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (const adm::ConfigurationChangeRequest *)((char *)a1 + 16));
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v31, (const ConfigurationChangeRequest *)a1);
  char v30 = v31;
  if (v32 != v31)
  {
    uint64_t v9 = 0;
    if ((unint64_t)((v32 - v31) / 24) <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = (v32 - v31) / 24;
    }
    unsigned int v11 = v31 + 8;
    do
    {
      if (v9) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)", ", 2);
      }
      uint64_t v12 = *(v11 - 1);
      int v13 = *(char *)(v12 + 23);
      if (v13 >= 0) {
        uint64_t v14 = *(v11 - 1);
      }
      else {
        uint64_t v14 = *(void *)v12;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v12 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)" [", 2);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *v11 + 32, (char *)&unk_2489B2B19);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      size_t v17 = strlen((const char *)p_buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_buf, v17);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"]", 1);
      ++v9;
      v11 += 3;
    }
    while (v10 != v9);
  }
  long long v18 = get_adm_log_object();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)a1) {
      long long v19 = "Activation";
    }
    else {
      long long v19 = "Deactivation";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl(&dword_248947000, v18, OS_LOG_TYPE_DEFAULT, "- %s", (uint8_t *)&buf, 0xCu);
  }

  uint8x8_t v20 = get_adm_log_object();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&buf, (uint64_t)v38);
    int v21 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)size_t v41 = 136315138;
    unint64_t v42 = (unint64_t)v21;
    _os_log_impl(&dword_248947000, v20, OS_LOG_TYPE_DEFAULT, "- semantics = %s", v41, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v22 = get_adm_log_object();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = (char *)a1 + 168;
    uint64_t v23 = *((void *)a1 + 21);
    uint64_t v24 = *((void *)v25 + 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&buf, (uint64_t)v34);
    long long v26 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)size_t v41 = 134218242;
    unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
    __int16 v43 = 2080;
    uint64_t v44 = v26;
    _os_log_impl(&dword_248947000, v22, OS_LOG_TYPE_DEFAULT, "- num stream IDs = %lu { %s }", v41, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  if (v30) {
    operator delete(v30);
  }
  uint64_t v33 = *MEMORY[0x263F8C2C8];
  uint64_t v27 = v33;
  uint64_t v28 = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)((char *)&v34[-1] + *(void *)(v33 - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v28;
  v34[0] = MEMORY[0x263F8C318] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24C586600](&v36);
  uint64_t v37 = v27;
  *(void *)((char *)&v38[-1] + *(void *)(v27 - adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24)) = v28;
  v38[0] = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete((void *)v38[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24C586600](&v40);
}

void sub_248993770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a13);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void adm::graph::NodeHandlers::~NodeHandlers(adm::graph::NodeHandlers *this)
{
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100]((void *)this + 36);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100]((void *)this + 32);
  std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100]((void *)this + 28);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 24);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 20);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)this + 12);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 4);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](this);
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void caulk::__expected_detail::destroy<adm::graph::GraphDescription,(void *)0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 80);
  int v3 = (void **)(a1 + 56);
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::optional<adm::ConfigurationChangeRequest>::operator=[abi:ne180100]<adm::ConfigurationChangeRequest,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 216);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 16);
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v6 = (void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 16);
    void *v5 = v7;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v8;
    if (v8)
    {
      *(void *)(v7 + 16) = v5;
      *(void *)(a2 + 8) = v6;
      void *v6 = 0;
      *(void *)(a2 + 24) = 0;
    }
    else
    {
      *(void *)(a1 + 8) = v5;
    }
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 64);
    long long v15 = *(_OWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 10std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = *(_OWORD *)(a2 + 105);
    *(_OWORD *)(a1 + 80) = v15;
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 64) = v14;
    size_t v17 = (void **)(a1 + 128);
    long long v18 = (__n128 *)(a2 + 128);
    if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
    {
      if (*(unsigned char *)(a1 + 152)) {
        std::vector<char>::__move_assign((uint64_t)v17, v18);
      }
    }
    else if (*(unsigned char *)(a1 + 152))
    {
      long long v19 = *v17;
      if (v19)
      {
        *(void *)(a1 + 136) = v19;
        operator delete(v19);
      }
      *(unsigned char *)(a1 + 152) = 0;
    }
    else
    {
      *size_t v17 = 0;
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      v18->n128_u64[0] = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
      *(unsigned char *)(a1 + 152) = 1;
    }
    int v26 = *(_DWORD *)(a2 + 160);
    uint64_t v28 = (void **)(a1 + 168);
    uint64_t v27 = *(void *)(a1 + 168);
    *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v26;
    if (v27)
    {
      std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)(a1 + 168));
      operator delete(*v28);
      *uint64_t v28 = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
    }
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    unsigned int v29 = (void **)(a1 + 192);
    uint64_t v30 = *(void *)(a1 + 192);
    if (v30)
    {
      uint64_t v31 = *(void *)(a1 + 200);
      char v32 = *(void **)(a1 + 192);
      if (v31 != v30)
      {
        do
        {
          v31 -= 216;
          std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v31);
        }
        while (v31 != v30);
        char v32 = *v29;
      }
      *(void *)(a1 + 200) = v30;
      operator delete(v32);
      void *v29 = 0;
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
    }
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v9 = (void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v10;
    uint64_t v11 = a1 + 16;
    uint64_t v12 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *(void *)(a2 + 8) = v9;
      void *v9 = 0;
      *(void *)(a2 + 24) = 0;
    }
    else
    {
      *(void *)(a1 + 8) = v11;
    }
    long long v20 = *(_OWORD *)(a2 + 64);
    long long v21 = *(_OWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 96);
    long long v23 = *(_OWORD *)(a2 + 105);
    long long v24 = *(_OWORD *)(a2 + 32);
    long long v25 = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 32) = v24;
    *(_OWORD *)(a1 + 48) = v25;
    *(_OWORD *)(a1 + 10std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = v23;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v22;
    *(_OWORD *)(a1 + 64) = v20;
    *(unsigned char *)(a1 + 152) = 0;
    if (*(unsigned char *)(a2 + 152))
    {
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
      *(unsigned char *)(a1 + 152) = 1;
    }
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    *(unsigned char *)(a1 + 216) = 1;
  }
  return a1;
}

void std::__optional_destruct_base<adm::ConfigurationChangeRequest,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    int v3 = (void **)(a1 + 192);
    std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
    int v3 = (void **)(a1 + 168);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(unsigned char *)(a1 + 152))
    {
      uint64_t v2 = *(void **)(a1 + 128);
      if (v2)
      {
        *(void *)(a1 + 136) = v2;
        operator delete(v2);
      }
    }
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
    *(unsigned char *)(a1 + 216) = 0;
  }
}

void adm::ConfigurationChangeRequest::~ConfigurationChangeRequest(adm::ConfigurationChangeRequest *this)
{
  int v3 = (void **)((char *)this + 192);
  std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 168);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((unsigned char *)this + 152))
  {
    uint64_t v2 = (void *)*((void *)this + 16);
    if (v2)
    {
      *((void *)this + 17) = v2;
      operator delete(v2);
    }
  }
  std::__tree<std::string>::destroy(*((char **)this + 2));
}

void adm::ScopedSignpostAdapt::closeNow(adm::ScopedSignpostAdapt *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this)
  {
    *(unsigned char *)this = 0;
    int v2 = *((unsigned __int8 *)this + 16);
    int v3 = get_adm_log_object();
    BOOL v4 = os_signpost_enabled(v3);
    if (v2)
    {
      if (v4)
      {
        uint64_t v5 = *((void *)this + 1);
        int v10 = 136315138;
        uint64_t v11 = v5;
        int v6 = "%s";
        uint64_t v7 = v3;
        os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_BEGIN;
        uint32_t v9 = 12;
LABEL_7:
        _os_signpost_emit_with_name_impl(&dword_248947000, v7, v8, 0xEEEEB0B5B2B2EEEELL, "ADM::Adapt", v6, (uint8_t *)&v10, v9);
      }
    }
    else if (v4)
    {
      LOWORD(v10) = 0;
      int v6 = (const char *)&unk_2489B4309;
      uint64_t v7 = v3;
      os_signpost_type_t v8 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v9 = 2;
      goto LABEL_7;
    }
  }
}

void std::vector<adm::DeviceConfiguration>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(void *)(**(void **)*a1 + 296), *(void *)(*a1 + 8), *(void *)(*a1 + 8) + 56);
  if (v10)
  {
    int v2 = *(void **)(v1 + 16);
    uint64_t v4 = *(void *)&v9.__val_;
    cat = v9.__cat_;
    if (v9.__cat_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v9.__cat_[1], 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    void *v2 = v4;
    v2[1] = cat;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
LABEL_8:
    if (v9.__cat_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9.__cat_);
    }
    return;
  }
  int v6 = get_adm_log_object();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v12 = v7;
    _os_log_error_impl(&dword_248947000, v6, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  if (v10) {
    goto LABEL_8;
  }
}

void sub_248994164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14)
  {
    if (a13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(void *)(**(void **)*a1 + 296), *(void ***)(*a1 + 8), *(void *)(*a1 + 8) + 56);
  if (v10)
  {
    int v2 = *(void **)(v1 + 16);
    uint64_t v4 = *(void *)&v9.__val_;
    cat = v9.__cat_;
    if (v9.__cat_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v9.__cat_[1], 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    void *v2 = v4;
    v2[1] = cat;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
LABEL_8:
    if (v9.__cat_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9.__cat_);
    }
    return;
  }
  int v6 = get_adm_log_object();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v12 = v7;
    _os_log_error_impl(&dword_248947000, v6, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  if (v10) {
    goto LABEL_8;
  }
}

void sub_2489942CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14)
  {
    if (a13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(void *)(**(void **)*a1 + 296), *(void *)(*a1 + 8), *(void *)(*a1 + 8) + 56);
  if (v10)
  {
    int v2 = *(void **)(v1 + 16);
    uint64_t v4 = *(void *)&v9.__val_;
    cat = v9.__cat_;
    if (v9.__cat_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v9.__cat_[1], 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    void *v2 = v4;
    v2[1] = cat;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
LABEL_8:
    if (v9.__cat_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9.__cat_);
    }
    return;
  }
  int v6 = get_adm_log_object();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v12 = v7;
    _os_log_error_impl(&dword_248947000, v6, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  if (v10) {
    goto LABEL_8;
  }
}

void sub_248994434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14)
  {
    if (a13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a13);
    }
  }
  _Unwind_Resume(a1);
}

void sub_248995140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a2)
  {
    *(void *)(v51 + 320) = v52;
    if (a10) {
      caulk::__expected_detail::destroy<adm::IOContextConfiguration,(void *)0>((uint64_t)&a15);
    }
    if (a25)
    {
      a37 = &a22;
      std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
    }
    adm::ConfigurationChangeRequest::~ConfigurationChangeRequest((adm::ConfigurationChangeRequest *)&a51);
    if (a31 < 0) {
      operator delete(__p);
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,adm::ScopedSignpostSimulate,adm::ScopedSignpostNegotiate>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a32);
    if (a2 == 4)
    {
      CFDictionaryRef v55 = (const std::exception *)__cxa_begin_catch(exception_object);
      adm::consume_exception_and_terminate(v55);
    }
    if (a2 == 3)
    {
      CFStringRef v56 = (const std::exception *)__cxa_begin_catch(exception_object);
      adm::consume_exception_and_terminate(v56, v57);
    }
    uint64_t v58 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      long long v59 = v58;
      adm::consume_exception_and_terminate(v59, v60);
    }
    adm::consume_unknown_exception_and_terminate((adm *)v58);
  }
  _Unwind_Resume(exception_object);
}

void sub_248995358(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void *std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x666666666666667) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    void v4[2] = &result[5 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      unint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_248995438(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void adm::NegotiateResponse::~NegotiateResponse(adm::NegotiateResponse *this)
{
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v3;
    operator delete(v3);
  }
}

void caulk::__expected_detail::destroy<adm::IOContextConfiguration,(void *)0>(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,adm::ScopedSignpostSimulate,adm::ScopedSignpostNegotiate>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26FCA3780[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3adm22ScopedSignpostSimulateENS9_23ScopedSignpostNegotiateEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS8_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
    int v3 = *(unsigned __int8 *)(a2 + 16);
    char v4 = get_adm_log_object();
    BOOL v5 = os_signpost_enabled(v4);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a2 + 8);
        int v11 = 136315138;
        uint64_t v12 = v6;
        uint64_t v7 = "%s";
        uint64_t v8 = v4;
        os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_BEGIN;
        uint32_t v10 = 12;
LABEL_7:
        _os_signpost_emit_with_name_impl(&dword_248947000, v8, v9, 0xEEEEB0B5B2B2EEEELL, "ADM::Negotiate", v7, (uint8_t *)&v11, v10);
      }
    }
    else if (v5)
    {
      LOWORD(v1boost::detail::shared_count::~shared_count(this + 1) = 0;
      uint64_t v7 = (const char *)&unk_2489B4309;
      uint64_t v8 = v4;
      os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v10 = 2;
      goto LABEL_7;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3adm22ScopedSignpostSimulateENS9_23ScopedSignpostNegotiateEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS8_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
    int v3 = *(unsigned __int8 *)(a2 + 16);
    char v4 = get_adm_log_object();
    BOOL v5 = os_signpost_enabled(v4);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a2 + 8);
        int v11 = 136315138;
        uint64_t v12 = v6;
        uint64_t v7 = "%s";
        uint64_t v8 = v4;
        os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_BEGIN;
        uint32_t v10 = 12;
LABEL_7:
        _os_signpost_emit_with_name_impl(&dword_248947000, v8, v9, 0xEEEEB0B5B2B2EEEELL, "ADM::Simulate", v7, (uint8_t *)&v11, v10);
      }
    }
    else if (v5)
    {
      LOWORD(v1boost::detail::shared_count::~shared_count(this + 1) = 0;
      uint64_t v7 = (const char *)&unk_2489B4309;
      uint64_t v8 = v4;
      os_signpost_type_t v9 = OS_SIGNPOST_INTERVAL_END;
      uint32_t v10 = 2;
      goto LABEL_7;
    }
  }
}

char *std::vector<adm::DeviceConfiguration>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*,adm::DeviceConfiguration*,adm::DeviceConfiguration*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v14 = this;
  long long v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v15;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      long long v10 = *(long long *)((char *)v6 + 40);
      *(_OWORD *)((char *)v4[2].__r_.__value_.__r.__words + std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = *(long long *)((char *)v6 + 53);
      *(_OWORD *)&v4[1].__r_.__value_.__r.__words[2] = v10;
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      uint64_t v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v8 + 3;
      long long v15 = v8 + 3;
    }
    while (v6 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_2489958B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 49) < 0) {
        operator delete(*(void **)(v3 - 72));
      }
      v3 -= 72;
    }
  }
  return a1;
}

void sub_248995A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DSPProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_248995D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, id a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  MEMORY[0x24C5866C0](v18, 0x10B2C407DFF903CLL);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a11);

  _Unwind_Resume(a1);
}

void sub_248995E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void adm::utility::getTemporaryPath(std::string *this)
{
  uint64_t v2 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v3 = [v2 temporaryDirectory];
  uint64_t v4 = [v3 path];
  id v6 = (id)[v4 mutableCopy];

  BOOL v5 = [MEMORY[0x263F08850] defaultManager];
  LODWORD(v4) = [v5 isWritableFileAtPath:v6];

  if (v4)
  {
    long long v7 = (std::string *)[v6 UTF8String];
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &v7);
  }
  else
  {
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    std::string::append[abi:ne180100]<char const*,0>(this, (std::string *)"/Library/Preferences/Audio/", (std::string *)"");
  }
}

void sub_2489960C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }

  _Unwind_Resume(a1);
}

void adm::exclaves::makeCaptureDefaultsKey(std::string *a1, int a2, int a3, int a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, (&off_265243258)[a2]);
  long long v7 = std::string::insert(&v21, 0, "ADMExclaveCaptures/", 0x13uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = (&off_265243280)[a3];
  size_t v10 = strlen(v9);
  int v11 = std::string::append(&v22, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::to_string(&v22, 0);
  if (a4) {
    char v13 = "Input";
  }
  else {
    char v13 = "Output";
  }
  if (a4) {
    std::string::size_type v14 = 5;
  }
  else {
    std::string::size_type v14 = 6;
  }
  long long v15 = std::string::insert(&v22, 0, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = &v21;
  }
  else {
    size_t v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  long long v19 = std::string::append(&__p, (const std::string::value_type *)v17, size);
  *a1 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2489962B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *adm::utility::readDefaultsDebugDumpEnablement(adm::utility *this)
{
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:@"com.apple.coreaudio"];
  uint64_t v2 = [v1 objectForKey:@"adm_enable_debug_dump"];

  if (v2) {
    uint64_t v2 = (void *)[v1 BOOLForKey:@"adm_enable_debug_dump"];
  }

  return v2;
}

void sub_248996398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void adm::utility::writeNSObjectToDisk(adm::utility *this, objc_object *a2, NSString *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  BOOL v5 = a2;
  if (v4)
  {
    id v26 = 0;
    id v6 = [MEMORY[0x263F08900] dataWithJSONObject:v4 options:1 error:&v26];
    id v7 = v26;
    if (!v6)
    {
      long long v8 = get_adm_log_object();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v29.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_error_impl(&dword_248947000, v8, OS_LOG_TYPE_ERROR, "Failed to serialize the input NSObject into json: %@", (uint8_t *)&v29, 0xCu);
      }
      goto LABEL_21;
    }
    long long v8 = [[NSString alloc] initWithData:v6 encoding:4];
    uint64_t v9 = objc_opt_new();
    [v9 setDateFormat:@"yyyy_MM_dd_HH_mm_ss_SSS"];
    size_t v10 = [MEMORY[0x263EFF910] date];
    int v11 = [v9 stringFromDate:v10];

    adm::utility::getTemporaryPath(&v29);
    long long v12 = get_adm_log_object();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      long long v23 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v28 = v23;
      _os_log_debug_impl(&dword_248947000, v12, OS_LOG_TYPE_DEBUG, "ADM temp debug directory is %s", buf, 0xCu);
    }

    char v13 = NSString;
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = &v29;
    }
    else {
      std::string::size_type v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    long long v15 = [NSString stringWithUTF8String:v14];
    long long v16 = [v13 stringWithFormat:@"%@/%@_%@.txt", v15, v5, v11];

    size_t v17 = [MEMORY[0x263F08850] defaultManager];
    int v18 = [v17 createFileAtPath:v16 contents:0 attributes:0];

    if (v18)
    {
      id v25 = v7;
      char v19 = [v8 writeToFile:v16 atomically:0 encoding:4 error:&v25];
      id v20 = v25;

      if (v19)
      {
LABEL_18:

        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }

        id v7 = v20;
LABEL_21:

        goto LABEL_22;
      }
      std::string v21 = get_adm_log_object();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        std::string v22 = &v29;
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v28 = v22;
        _os_log_error_impl(&dword_248947000, v21, OS_LOG_TYPE_ERROR, "ADM failed to write json file at temp debug directory %s", buf, 0xCu);
      }
    }
    else
    {
      std::string v21 = get_adm_log_object();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        long long v24 = &v29;
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v28 = v24;
        _os_log_error_impl(&dword_248947000, v21, OS_LOG_TYPE_ERROR, "ADM failed to create file at temp debug directory %s", buf, 0xCu);
      }
      id v20 = v7;
    }

    goto LABEL_18;
  }
LABEL_22:
}

void sub_24899673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void adm::graph::Node::createGetExpectedOutputSamplesForInputSamplesHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createGetRequiredInputSamplesForOutputSamplesHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createGetLatencyHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createUnregisterClientHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createEndProcessingHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createEndCycleHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createClientIOHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createBeginCycleHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createBeginProcessingHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

void adm::graph::Node::createRegisterClientHandler_(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelDidUnregisterClient(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 192);
  for (uint64_t i = *(void *)(this + 200); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t std::function<void ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelDidEndProcessing(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 168);
  for (uint64_t i = *(void *)(this + 176); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelDidEndCycle(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 144);
  for (uint64_t i = *(void *)(result + 152); v2 != i; v2 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(*(void *)(v2 + 32), a2);
  return result;
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelDidPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 120);
  for (uint64_t i = *(void *)(result + 128); v7 != i; v7 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12 = a2;
  uint64_t v11 = a4;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v8 = a7;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v12, a3, &v11, &v10, &v9, &v8);
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelWillPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 96);
  for (uint64_t i = *(void *)(result + 104); v7 != i; v7 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelWillBeginCycle(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 72);
  for (uint64_t i = *(void *)(result + 80); v2 != i; v2 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(*(void *)(v2 + 32), a2);
  return result;
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelWillBeginProcessing(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 48);
  for (uint64_t i = *(void *)(this + 56); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t non-virtual thunk to'adm::graph::HostNode::kernelWillRegisterClient(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 24);
  for (uint64_t i = *(void *)(this + 32); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

void non-virtual thunk to'adm::graph::HostNode::~HostNode(adm::graph::HostNode *this)
{
  adm::graph::HostNode::~HostNode((adm::graph::HostNode *)((char *)this - 128));
  JUMPOUT(0x24C5866C0);
}

{
  adm::graph::HostNode::~HostNode((adm::graph::HostNode *)((char *)this - 128));
}

uint64_t adm::graph::HostNode::kernelDidUnregisterClient(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 320);
  for (uint64_t i = *(void *)(this + 328); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t adm::graph::HostNode::kernelDidEndProcessing(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 296);
  for (uint64_t i = *(void *)(this + 304); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t adm::graph::HostNode::kernelDidEndCycle(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 272);
  for (uint64_t i = *(void *)(result + 280); v2 != i; v2 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(*(void *)(v2 + 32), a2);
  return result;
}

uint64_t adm::graph::HostNode::kernelDidPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 248);
  for (uint64_t i = *(void *)(result + 256); v7 != i; v7 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t adm::graph::HostNode::kernelWillPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 224);
  for (uint64_t i = *(void *)(result + 232); v7 != i; v7 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t adm::graph::HostNode::kernelWillBeginCycle(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 200);
  for (uint64_t i = *(void *)(result + 208); v2 != i; v2 += 40)
    unint64_t result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(*(void *)(v2 + 32), a2);
  return result;
}

uint64_t adm::graph::HostNode::kernelWillBeginProcessing(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 176);
  for (uint64_t i = *(void *)(this + 184); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t adm::graph::HostNode::kernelWillRegisterClient(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 152);
  for (uint64_t i = *(void *)(this + 160); v2 != i; v2 += 40)
    this = std::function<void ()>::operator()(*(void *)(v2 + 32), a2);
  return this;
}

uint64_t adm::graph::HostNode::createGetExpectedOutputSamplesForInputSamplesHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result), (result & 1) != 0))
  {
    uint64_t v6 = *((void *)this + 17);
    uint64_t v5 = *((void *)this + 18);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA46E0;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE9EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE9EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEEclEOySG_(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    long long v24 = buf;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v26, &adm::graph::HandlerName<(adm::graph::HandlerType)9>);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)buf, 2);
    v21[1] = (uint64_t *)v20;
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v15, (uint64_t)v20, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v17, (uint64_t)v15, 4);
    int v12 = std::string::insert(&v17, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v12->__r_.__value_.__r.__words[2];
    long long v18 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v21, v20[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[i + 8], v26[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v8 + 1, 1uLL);
  atomic_load((unint64_t *)v8 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v8 + 176))(v8))
  {
    uint64_t v9 = (*(uint64_t (**)(atomic_ullong *, void, uint64_t))(*v8 + 184))(v8, *a2, a3);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetExpectedOutputSamplesForInputSamples is not supported", buf, 2u);
    }
    uint64_t v9 = 0;
  }
  atomic_fetch_add(v8 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v9;
}

void sub_2489972E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>(uint64_t a1, char **a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(*a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void adm::graph::demangle(adm::graph *this, unint64_t a2)
{
  void v17[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a2 & 0x7FFFFFFFFFFFFFFFLL));
  int status = 0;
  outleuint64_t n = 0;
  if (v11 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  uint64_t v5 = __cxa_demangle((const char *)v4, 0, &outlen, &status);
  uint64_t v6 = v5;
  int v7 = status;
  if (status)
  {
    uint64_t v8 = 0;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100](&__dst, v5, outlen - 1);
  uint64_t v8 = __dst;
  v17[0] = *(void *)v13;
  *(void *)((char *)v17 + 7) = *(void *)&v13[7];
  char v2 = v14;
  if (v6) {
LABEL_6:
  }
    free(v6);
LABEL_7:
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "???");
  }
  else
  {
    uint64_t v9 = v17[0];
    *(void *)this = v8;
    *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
    *(void *)((char *)this + 1std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = *(void *)((char *)v17 + 7);
    *((unsigned char *)this + 23) = v2;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_248997A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    free(v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE18destroy_deallocateEv(void *__p)
{
  char v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7__cloneEPNS0_6__baseISH_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA46E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA46E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEED0Ev(void *a1)
{
  *a1 = &unk_26FCA46E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEED1Ev(void *a1)
{
  *a1 = &unk_26FCA46E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createGetRequiredInputSamplesForOutputSamplesHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result), (result & 1) != 0))
  {
    uint64_t v6 = *((void *)this + 17);
    uint64_t v5 = *((void *)this + 18);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA4650;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE8EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE8EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEEclEOy(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    char v22 = buf;
    char v23 = 1;
    uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v24, &adm::graph::HandlerName<(adm::graph::HandlerType)8>);
    char v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)buf, 2);
    v19[1] = (uint64_t *)v18;
    char v20 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v13, (uint64_t)v18, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v15, (uint64_t)v13, 4);
    uint64_t v10 = std::string::insert(&v15, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v10->__r_.__value_.__r.__words[2];
    long long v16 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19, v18[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[i + 8], v24[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v6 + 1, 1uLL);
  atomic_load((unint64_t *)v6 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v6 + 160))(v6))
  {
    uint64_t v7 = (*(uint64_t (**)(atomic_ullong *, void))(*v6 + 168))(v6, *a2);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetRequiredInputSamplesForOutputSamples is not supported", buf, 2u);
    }
    uint64_t v7 = 0;
  }
  atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

void sub_248997F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA4650;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA4650;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEED0Ev(void *a1)
{
  *a1 = &unk_26FCA4650;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEED1Ev(void *a1)
{
  *a1 = &unk_26FCA4650;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createGetLatencyHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result), (result & 1) != 0))
  {
    uint64_t v6 = *((void *)this + 17);
    uint64_t v5 = *((void *)this + 18);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA45C0;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE7EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE7EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEEclEv(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (uint64_t v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    char v20 = buf;
    char v21 = 1;
    uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v22, &adm::graph::HandlerName<(adm::graph::HandlerType)7>);
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)buf, 2);
    v17[1] = (uint64_t *)v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v16, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v13, (uint64_t)v11, 4);
    uint64_t v8 = std::string::insert(&v13, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v8->__r_.__value_.__r.__words[2];
    long long v14 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v4 + 1, 1uLL);
  atomic_load((unint64_t *)v4 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v4 + 144))(v4))
  {
    uint64_t v5 = (*(uint64_t (**)(atomic_ullong *))(*v4 + 152))(v4);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetLatency is not supported", buf, 2u);
    }
    uint64_t v5 = 0;
  }
  atomic_fetch_add(v4 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void sub_248998AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA45C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA45C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEED0Ev(void *a1)
{
  *a1 = &unk_26FCA45C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEED1Ev(void *a1)
{
  *a1 = &unk_26FCA45C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createUnregisterClientHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 40),
         uint64_t v6 = *((void *)this + 41),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA4540;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE6EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE6EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v19, "handler_name");
    char v20 = v19;
    char v21 = 1;
    uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v22, &adm::graph::HandlerName<(adm::graph::HandlerType)6>);
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v19, 2);
    v17[1] = (uint64_t *)v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v16, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v13, (uint64_t)v11, 4);
    uint64_t v8 = std::string::insert(&v13, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v8->__r_.__value_.__r.__words[2];
    long long v14 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v6 + 1, 1uLL);
  unint64_t v7 = atomic_load((unint64_t *)v6 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v6 + 128))(v6)) {
    (*(void (**)(atomic_ullong *, void))(*v6 + 136))(v6, *a2);
  }
  (*(void (**)(unint64_t, void))(*(void *)v7 + 72))(v7, *a2);
  atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_2489995B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA4540;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA4540;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(void *a1)
{
  *a1 = &unk_26FCA4540;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(void *a1)
{
  *a1 = &unk_26FCA4540;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createEndProcessingHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 37),
         uint64_t v6 = *((void *)this + 38),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA44C0;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE5EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE5EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v19, "handler_name");
    char v20 = v19;
    char v21 = 1;
    uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v22, &adm::graph::HandlerName<(adm::graph::HandlerType)5>);
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v19, 2);
    v17[1] = (uint64_t *)v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v16, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v13, (uint64_t)v11, 4);
    uint64_t v8 = std::string::insert(&v13, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v8->__r_.__value_.__r.__words[2];
    long long v14 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v6 + 1, 1uLL);
  unint64_t v7 = atomic_load((unint64_t *)v6 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v6 + 112))(v6)) {
    (*(void (**)(atomic_ullong *, void))(*v6 + 120))(v6, *a2);
  }
  (*(void (**)(unint64_t, void))(*(void *)v7 + 64))(v7, *a2);
  atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_24899A0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA44C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA44C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(void *a1)
{
  *a1 = &unk_26FCA44C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(void *a1)
{
  *a1 = &unk_26FCA44C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createEndCycleHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 34),
         uint64_t v6 = *((void *)this + 35),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA4440;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE4EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE4EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEEclEOjSJ_(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (char v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v21, "handler_name");
    char v22 = v21;
    char v23 = 1;
    uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v24, &adm::graph::HandlerName<(adm::graph::HandlerType)4>);
    char v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)v21, 2);
    v19[1] = (uint64_t *)v18;
    char v20 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v13, (uint64_t)v18, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v15, (uint64_t)v13, 4);
    uint64_t v10 = std::string::insert(&v15, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v10->__r_.__value_.__r.__words[2];
    long long v16 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19, v18[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[i + 8], v24[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v8 + 1, 1uLL);
  unint64_t v9 = atomic_load((unint64_t *)v8 + 2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v8 + 96))(v8)) {
    (*(void (**)(atomic_ullong *, void, uint64_t))(*v8 + 104))(v8, *a2, a3);
  }
  (*(void (**)(unint64_t, void, uint64_t))(*(void *)v9 + 56))(v9, *a2, a3);
  atomic_fetch_add(v8 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_24899ABC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA4440;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA4440;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED0Ev(void *a1)
{
  *a1 = &unk_26FCA4440;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED1Ev(void *a1)
{
  *a1 = &unk_26FCA4440;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createClientIOHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && (*((void *)this + 28) == *((void *)this + 29)
      ? (BOOL v5 = *((void *)this + 31) != *((void *)this + 32))
      : (BOOL v5 = 1),
        ((uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result), v5) || (result & 1) != 0)
     && ((result | v5) & 1) != 0))
  {
    uint64_t v7 = *((void *)this + 17);
    uint64_t v6 = *((void *)this + 18);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA43C0;
    a2[1] = v7;
    a2[2] = v6;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE3EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE3EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EEclEOjSJ_OmOSL_SP_SQ_(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (std::string v15 = std::__shared_weak_count::lock(v8)) == 0 || (v16 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v29, "handler_name");
    uint64_t v30 = v29;
    char v31 = 1;
    uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v32, &adm::graph::HandlerName<(adm::graph::HandlerType)3>);
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)v29, 2);
    v27[1] = (uint64_t *)v26;
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v26, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v23, (uint64_t)v21, 4);
    char v18 = std::string::insert(&v23, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18->__r_.__value_.__r.__words[2];
    long long v24 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v27, v26[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32[i + 8], v32[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v16 + 1, 1uLL);
  unint64_t v17 = atomic_load((unint64_t *)v16 + 2);
  (*(void (**)(unint64_t, void, uint64_t, void, void, void, void))(*(void *)v17 + 40))(v17, *a2, a3, *a4, *a5, *a6, *a7);
  if ((*(unsigned int (**)(atomic_ullong *))(*v16 + 80))(v16)) {
    (*(void (**)(atomic_ullong *, void, uint64_t, void, void, void, void))(*v16 + 88))(v16, *a2, a3, *a4, *a5, *a6, *a7);
  }
  (*(void (**)(unint64_t, void, uint64_t, void, void, void, void))(*(void *)v17 + 48))(v17, *a2, a3, *a4, *a5, *a6, *a7);
  atomic_fetch_add(v16 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
}

void sub_24899B764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(exception_object);
}

void sub_24899B840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,__int16 *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,int buf,int a44,int a45,__int16 a46,int *p_buf,void *a48,__int16 a49,int a50,int a51,int a52,__int16 *a53,char a54)
{
  if (a2)
  {
    uint64_t v58 = v54;
    atomic_fetch_add(v54 + 1, 0xFFFFFFFFFFFFFFFFLL);
    if (a2 == 3)
    {
      long long v59 = __cxa_begin_catch(a1);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
      {
        uint64_t v64 = (*(uint64_t (**)(void *))(*v59 + 16))(v59);
        uint64_t v65 = v59 + 2;
        if (*((char *)v59 + 39) < 0) {
          uint64_t v65 = (void *)*v65;
        }
        long long v66 = v59 + 6;
        if (*((char *)v59 + 71) < 0) {
          long long v66 = (void *)*v66;
        }
        int v67 = *((_DWORD *)v59 + 10);
        int v68 = *((_DWORD *)v59 + 2);
        std::string buf = 136316162;
        *(void *)(v55 + 4) = v64;
        a46 = 2080;
        *(void *)(v55 + 14) = v65;
        HIWORD(p_buf) = 2080;
        a48 = v66;
        a49 = 1024;
        *(_DWORD *)(v55 + 34) = v67;
        HIWORD(a50) = 1024;
        a51 = v68;
        _os_log_fault_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_FAULT, "DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x2Cu);
      }
    }
    else
    {
      uint64_t v61 = __cxa_begin_catch(a1);
      uint64_t v62 = get_adm_log_object();
      BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_FAULT);
      if (a2 == 2)
      {
        if (v63)
        {
          uint64_t v69 = (*(uint64_t (**)(void *))(*(void *)v61 + 16))(v61);
          std::string buf = 136315138;
          *(void *)(v55 + 4) = v69;
          _os_log_fault_impl(&dword_248947000, v62, OS_LOG_TYPE_FAULT, "exception in handler: %s", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v63)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)&a32, "handler_name");
        a36 = &a32;
        a37 = 1;
        a40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)&a38, &adm::graph::HandlerName<(adm::graph::HandlerType)3>);
        a41 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf, (uint64_t)&a32, 2);
        p_std::string buf = &buf;
        LOBYTE(a48) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)&a23, "internal_node_type");
        a25 = &a23;
        a26 = 1;
        adm::graph::demangle((adm::graph *)&a9, *(void *)(*(void *)(*v58 - 8) + 8));
        a29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&a27, (uint64_t)&a9);
        a30 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a49, (uint64_t)&a23, 2);
        a53 = &a49;
        a54 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a15, (uint64_t)&buf, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&__p, (uint64_t)&a15, 4);
        if (a22 >= 0) {
          p_p = (void **)&__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)(v56 - 128) = 136315138;
        *(void *)(v55 + 68) = p_p;
        _os_log_fault_impl(&dword_248947000, v62, OS_LOG_TYPE_FAULT, "exception in handler: %s", (uint8_t *)(v56 - 128), 0xCu);
        if (a22 < 0) {
          operator delete(__p);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a15);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a16, a15);
        for (uint64_t i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a49 + i);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a51 + i), *((unsigned __int8 *)&a49 + i));
        }
        for (uint64_t j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a27 + j);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a28 + j), *((unsigned __int8 *)&a27 + j));
        }
        if (a14 < 0) {
          operator delete(a9);
        }
        for (uint64_t k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a38 + k);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a39 + k), *((unsigned __int8 *)&a38 + k));
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x24899B5ECLL);
  }
  JUMPOUT(0x24899B838);
}

void sub_24899BBC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v36 + 8), a15);
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a36 + i + 32));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a36 + i + 40), *(&a36 + i + 32));
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a24 + j);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a25 + j), *((unsigned __int8 *)&a24 + j));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a32 + k);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a33 + k), *((unsigned __int8 *)&a32 + k));
  }
  __cxa_end_catch();
  JUMPOUT(0x24899B82CLL);
}

void sub_24899BD4C()
{
}

void sub_24899BD58(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x24899B838);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA43C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA43C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EED0Ev(void *a1)
{
  *a1 = &unk_26FCA43C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EED1Ev(void *a1)
{
  *a1 = &unk_26FCA43C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createBeginCycleHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 25),
         uint64_t v6 = *((void *)this + 26),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA4330;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE2EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE2EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEEclEOjSJ_(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (char v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v21, "handler_name");
    char v22 = v21;
    char v23 = 1;
    uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v24, &adm::graph::HandlerName<(adm::graph::HandlerType)2>);
    char v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)v21, 2);
    v19[1] = (uint64_t *)v18;
    char v20 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v13, (uint64_t)v18, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v15, (uint64_t)v13, 4);
    uint64_t v10 = std::string::insert(&v15, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v10->__r_.__value_.__r.__words[2];
    long long v16 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19, v18[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[i + 8], v24[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v8 + 1, 1uLL);
  unint64_t v9 = atomic_load((unint64_t *)v8 + 2);
  (*(void (**)(unint64_t, void, uint64_t))(*(void *)v9 + 32))(v9, *a2, a3);
  if ((*(unsigned int (**)(atomic_ullong *))(*v8 + 64))(v8)) {
    (*(void (**)(atomic_ullong *, void, uint64_t))(*v8 + 72))(v8, *a2, a3);
  }
  atomic_fetch_add(v8 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_24899C270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA4330;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA4330;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED0Ev(void *a1)
{
  *a1 = &unk_26FCA4330;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED1Ev(void *a1)
{
  *a1 = &unk_26FCA4330;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createBeginProcessingHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 22),
         uint64_t v6 = *((void *)this + 23),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA42B0;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE1EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE1EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v19, "handler_name");
    char v20 = v19;
    char v21 = 1;
    uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v22, &adm::graph::HandlerName<(adm::graph::HandlerType)1>);
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v19, 2);
    v17[1] = (uint64_t *)v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v16, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v13, (uint64_t)v11, 4);
    uint64_t v8 = std::string::insert(&v13, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v8->__r_.__value_.__r.__words[2];
    long long v14 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v6 + 1, 1uLL);
  unint64_t v7 = atomic_load((unint64_t *)v6 + 2);
  (*(void (**)(unint64_t, void))(*(void *)v7 + 24))(v7, *a2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v6 + 48))(v6)) {
    (*(void (**)(atomic_ullong *, void))(*v6 + 56))(v6, *a2);
  }
  atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_24899CD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA42B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA42B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(void *a1)
{
  *a1 = &unk_26FCA42B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(void *a1)
{
  *a1 = &unk_26FCA42B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t adm::graph::HostNode::createRegisterClientHandler_@<X0>(adm::graph::HostNode *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 17);
  if (result
    && ((uint64_t v5 = *((void *)this + 19),
         uint64_t v6 = *((void *)this + 20),
         uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (char v7 = 1) : (char v7 = result), (v7 & 1) != 0))
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v8 = *((void *)this + 18);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    *a2 = &unk_26FCA40E0;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE0EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE0EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *(atomic_ullong **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v19, "handler_name");
    char v20 = v19;
    char v21 = 1;
    uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v22, &adm::graph::HandlerName<(adm::graph::HandlerType)0>);
    char v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v19, 2);
    v17[1] = (uint64_t *)v16;
    char v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v16, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v13, (uint64_t)v11, 4);
    uint64_t v8 = std::string::insert(&v13, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v8->__r_.__value_.__r.__words[2];
    long long v14 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v16[0]);
    for (uint64_t i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[i + 8], v22[i]);
    }
    _os_crash();
    __break(1u);
  }
  atomic_fetch_add(v6 + 1, 1uLL);
  unint64_t v7 = atomic_load((unint64_t *)v6 + 2);
  (*(void (**)(unint64_t, void))(*(void *)v7 + 16))(v7, *a2);
  if ((*(unsigned int (**)(atomic_ullong *))(*v6 + 32))(v6)) {
    (*(void (**)(atomic_ullong *, void))(*v6 + 40))(v6, *a2);
  }
  atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_24899D870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26FCA40E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_26FCA40E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(void *a1)
{
  *a1 = &unk_26FCA40E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x24C5866C0);
}

void *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(void *a1)
{
  *a1 = &unk_26FCA40E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void adm::graph::Node::getInputSemantics(adm::graph::Node *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)v4 + 72);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        uint64_t v10 = *(void **)this;
        uint64_t v11 = ((uint64_t)v6 - *(void *)this) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        long long v16 = (void *)(v14 + 8 * v11);
        *long long v16 = v7;
        long long v9 = v16 + 1;
        if (v6 != v10)
        {
          do
          {
            uint64_t v17 = *--v6;
            *--long long v16 = v17;
          }
          while (v6 != v10);
          uint64_t v6 = *(void **)this;
        }
        *(void *)this = v16;
        *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
        *((void *)this + 2) = v14 + 8 * v15;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        void *v6 = v7;
        long long v9 = v6 + 1;
      }
      *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
      v4 += 8;
      uint64_t v6 = v9;
    }
    while (v4 != a3);
  }
}

void sub_24899E174(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getOutputSemantics(adm::graph::Node *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)v4 + 72);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        uint64_t v10 = *(void **)this;
        uint64_t v11 = ((uint64_t)v6 - *(void *)this) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        long long v16 = (void *)(v14 + 8 * v11);
        *long long v16 = v7;
        long long v9 = v16 + 1;
        if (v6 != v10)
        {
          do
          {
            uint64_t v17 = *--v6;
            *--long long v16 = v17;
          }
          while (v6 != v10);
          uint64_t v6 = *(void **)this;
        }
        *(void *)this = v16;
        *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
        *((void *)this + 2) = v14 + 8 * v15;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        void *v6 = v7;
        long long v9 = v6 + 1;
      }
      *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v9;
      v4 += 8;
      uint64_t v6 = v9;
    }
    while (v4 != a3);
  }
}

void sub_24899E2B4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getDescription(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    *this = *(std::string *)(a2 + 8);
  }
  this[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 32);
  uint64_t v4 = (std::string *)((char *)this + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a2 + 56);
  }
}

void sub_24899E358(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getTerminalDescriptions(int64x2_t *this, uint64_t a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  v59[1] = *MEMORY[0x263EF8340];
  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  id v47 = this + 1;
  uint64_t v45 = a2 + 64;
  v59[0] = 0x100000000;
  do
  {
    char v46 = v3;
    uint64_t v5 = (long long ***)(v45 + 24 * *((unsigned int *)v59 + v4));
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    while (v7 != v6)
    {
      unint64_t v8 = *v7;
      if (*((char *)*v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v48.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
      }
      LODWORD(v49[0]) = *((_DWORD *)v8 + 6);
      long long v11 = v8[2];
      long long v10 = v8[3];
      uint64_t v12 = *((void *)v8 + 9);
      *((void *)&v49[2] + boost::detail::shared_count::~shared_count(this + 1) = *((void *)v8 + 8);
      *(_OWORD *)((char *)v49 + 8) = v11;
      *(_OWORD *)((char *)&v49[1] + 8) = v10;
      *(void *)&long long v50 = v12;
      *(void *)&long long v10 = *((void *)v8 + 10);
      int v51 = *((_DWORD *)v8 + 22);
      *((void *)&v50 + boost::detail::shared_count::~shared_count(this + 1) = v10;
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v8 + 6);
      char v54 = *((unsigned char *)v8 + 128);
      unint64_t v13 = this->u64[1];
      unint64_t v14 = this[1].u64[0];
      if (v13 >= v14)
      {
        unint64_t v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v13 - this->i64[0]) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0x1E1E1E1E1E1E1E1) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v14 - this->i64[0]) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v24 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v58 = v47;
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t v26 = v24 + 136 * v21;
        unint64_t v55 = v24;
        v56.i64[0] = v26;
        unint64_t v57 = v24 + 136 * v25;
        long long v27 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
        memset(&v48, 0, sizeof(v48));
        *(_OWORD *)(v26 + 24) = v49[0];
        long long v28 = v49[1];
        long long v29 = v49[2];
        long long v30 = v50;
        *(_DWORD *)(v26 + 88) = v51;
        *(_OWORD *)(v26 + 72) = v30;
        *(_OWORD *)(v26 + ++*(_DWORD *)(this + 56) = v29;
        *(_OWORD *)(v26 + 40) = v28;
        *(unsigned char *)(v26 + 96) = 0;
        *(unsigned char *)(v26 + 120) = 0;
        if (v53)
        {
          long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v26 + 112) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v26 + 96) = v31;
          memset(&__p, 0, sizeof(__p));
          *(unsigned char *)(v26 + 120) = 1;
        }
        *(unsigned char *)(v24 + 136 * v21 + 128) = v54;
        unint64_t v20 = v26 + 136;
        v56.i64[1] = v26 + 136;
        uint64_t v33 = this->i64[0];
        unint64_t v32 = this->u64[1];
        uint64_t v34 = v56.i64[0];
        if (v32 == this->i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v32);
        }
        else
        {
          uint64_t v35 = 0;
          do
          {
            uint64_t v36 = v34 + v35;
            uint64_t v37 = v32 + v35;
            long long v38 = *(_OWORD *)(v32 + v35 - 136);
            *(void *)(v36 - 120) = *(void *)(v32 + v35 - 120);
            *(_OWORD *)(v36 - 136) = v38;
            *(void *)(v37 - 128) = 0;
            *(void *)(v37 - 120) = 0;
            *(void *)(v37 - 136) = 0;
            *(_OWORD *)(v36 - 112) = *(_OWORD *)(v32 + v35 - 112);
            long long v39 = *(_OWORD *)(v32 + v35 - 96);
            long long v40 = *(_OWORD *)(v32 + v35 - 80);
            long long v41 = *(_OWORD *)(v32 + v35 - 64);
            *(_DWORD *)(v36 - 48) = *(_DWORD *)(v32 + v35 - 48);
            *(_OWORD *)(v36 - 80) = v40;
            *(_OWORD *)(v36 - 64) = v41;
            *(_OWORD *)(v36 - 96) = v39;
            *(unsigned char *)(v34 + v35 - 40) = 0;
            *(unsigned char *)(v36 - 16) = 0;
            if (*(unsigned char *)(v32 + v35 - 16))
            {
              long long v42 = *(_OWORD *)(v37 - 40);
              *(void *)(v34 + v35 - 24) = *(void *)(v37 - 24);
              *(_OWORD *)(v34 + v35 - 40) = v42;
              *(void *)(v37 - 32) = 0;
              *(void *)(v37 - 24) = 0;
              *(void *)(v37 - 40) = 0;
              *(unsigned char *)(v36 - 16) = 1;
            }
            *(unsigned char *)(v36 - 8) = *(unsigned char *)(v37 - 8);
            v35 -= 136;
          }
          while (v32 + v35 != v33);
          v34 += v35;
          int64x2_t v43 = *this;
          unint64_t v20 = v56.u64[1];
        }
        this->i64[0] = v34;
        this->i64[1] = v20;
        int64x2_t v56 = v43;
        unint64_t v44 = this[1].u64[0];
        this[1].i64[0] = v57;
        unint64_t v57 = v44;
        unint64_t v55 = v43.i64[0];
        std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&v55);
      }
      else
      {
        long long v15 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(void *)(v13 + 16) = *((void *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v15;
        memset(&v48, 0, sizeof(v48));
        *(_OWORD *)(v13 + 24) = v49[0];
        long long v17 = v49[2];
        long long v16 = v50;
        int v18 = v51;
        *(_OWORD *)(v13 + 40) = v49[1];
        *(_DWORD *)(v13 + 88) = v18;
        *(_OWORD *)(v13 + 72) = v16;
        *(_OWORD *)(v13 + ++*(_DWORD *)(this + 56) = v17;
        *(unsigned char *)(v13 + 96) = 0;
        *(unsigned char *)(v13 + 120) = 0;
        if (v53)
        {
          long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v13 + 112) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v13 + 96) = v19;
          memset(&__p, 0, sizeof(__p));
          *(unsigned char *)(v13 + 120) = 1;
        }
        *(unsigned char *)(v13 + 128) = v54;
        unint64_t v20 = v13 + 136;
      }
      this->i64[1] = v20;
      if (v53 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      ++v7;
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v46 & 1) == 0);
}

void sub_24899E764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  adm::graph::TerminalDescription::~TerminalDescription((void **)va);
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void adm::graph::Node::getIOFormats_(void **a1, uint64_t a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = a2 + 24 * a3;
  uint64_t v4 = *(uint64_t **)(v3 + 64);
  uint64_t v5 = *(uint64_t **)(v3 + 72);
  if (v4 != v5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v4;
      long long v23 = *(_OWORD *)(*v4 + 32);
      long long v24 = *(_OWORD *)(*v4 + 48);
      uint64_t v25 = *(void *)(*v4 + 64);
      long long v9 = a1[2];
      if (v7 >= (_OWORD *)v9)
      {
        uint64_t v12 = *a1;
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x666666666666666) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x333333333333333) {
          unint64_t v16 = 0x666666666666666;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v18 = v16 + 40 * v13;
        *(_OWORD *)unint64_t v18 = v23;
        *(_OWORD *)(v18 + 16) = v24;
        *(void *)(v18 + 32) = v25;
        if (v7 == v12)
        {
          unint64_t v22 = v16 + 40 * v13;
        }
        else
        {
          unint64_t v19 = v16 + 40 * v13;
          do
          {
            long long v20 = *(_OWORD *)((char *)v7 - 40);
            long long v21 = *(_OWORD *)((char *)v7 - 24);
            unint64_t v22 = v19 - 40;
            *(void *)(v19 - 8) = *((void *)v7 - 1);
            *(_OWORD *)(v19 - 24) = v21;
            *(_OWORD *)(v19 - 40) = v20;
            uint64_t v7 = (_OWORD *)((char *)v7 - 40);
            v19 -= 40;
          }
          while (v7 != v12);
        }
        uint64_t v7 = (_OWORD *)(v18 + 40);
        *a1 = (void *)v22;
        a1[1] = (void *)(v18 + 40);
        a1[2] = (void *)(v16 + 40 * v17);
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)(v8 + 32);
        long long v11 = *(_OWORD *)(v8 + 48);
        *((void *)v7 + 4) = *(void *)(v8 + 64);
        *uint64_t v7 = v10;
        v7[1] = v11;
        uint64_t v7 = (_OWORD *)((char *)v7 + 40);
      }
      a1[1] = v7;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_24899E934(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::vendTerminal(adm::graph::Node *this, const adm::graph::TerminalDescription *a2)
{
  unsigned int v3 = *((_DWORD *)a2 + 20);
  if (v3 != -1)
  {
    if (v3 < 0x40)
    {
      uint64_t v4 = *((unsigned int *)a2 + 6);
      uint64_t v5 = *((void *)this + v4 + 14);
      if ((v5 & (1 << v3)) == 0)
      {
        *((void *)this + v4 + 14) = v5 | (1 << v3);
        operator new();
      }
      std::to_string(&v13, v3);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, "a terminal at index ", &v13);
      __n128 v9 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, &v15, " already exists");
      MEMORY[0x24C5862B0](&v24, &__p, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      adm::log_exception((adm *)&v24, v10);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&v15, &v24);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int v19 = -1;
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3C00;
      v15.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26FCA3C28;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v15);
      long long v21 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
      unint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
      int v23 = 101;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
      *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = v11;
      uint64_t v14 = v12;
      long long v11 = 0uLL;
      uint64_t v12 = 0;
      v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3EB8;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::to_string(&v13, v3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, "Terminal index", &v13);
    __n128 v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, &v15, " exceeds the limit");
    MEMORY[0x24C5862B0](&v24, &__p, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    adm::log_exception((adm *)&v24, v8);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v15, &v24);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3C00;
    v15.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26FCA3C28;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v15);
    long long v21 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
    unint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
    int v23 = 90;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = v11;
    uint64_t v14 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3EB8;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::operator+<char>();
  MEMORY[0x24C5862B0](&v24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  adm::log_exception((adm *)&v24, v6);
  __cxa_allocate_exception(0x40uLL);
  std::runtime_error::runtime_error((std::runtime_error *)&v15, &v24);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = -1;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3C00;
  v15.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26FCA3C28;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v15);
  long long v21 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
  unint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
  int v23 = 85;
  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = v11;
  uint64_t v14 = v12;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26FCA3EB8;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_24899EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a26);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a16);
  if (v32) {
    __cxa_free_exception(v31);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v33 - 96));
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_26FCA3BD0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = &unk_26FCA3C48;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26FCA3B30;
  *(void *)(a1 + 16) = &unk_26FCA3B68;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_26FCA3BA0;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_26FCA3BD0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26FCA3C48;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26FCA3B30;
  *(void *)(a1 + 16) = &unk_26FCA3B68;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_26FCA3BA0;
  return a1;
}

void sub_24899F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>()
{
}

void sub_24899F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_24899F55C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x24C5866C0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x24C5866C0);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_24899F794(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void sub_24899F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(v10);
  MEMORY[0x24C5866C0](v10, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_26FCA3C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

uint64_t adm::graph::Node::createHandlers(adm::graph::Node *this, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
}

void sub_24899FD7C(_Unwind_Exception *a1)
{
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_24899FDF0()
{
}

void sub_24899FDF8()
{
}

void sub_24899FE00()
{
}

void sub_24899FE08()
{
}

uint64_t std::shared_ptr<adm::graph::Kernel>::operator=[abi:ne180100]<adm::graph::Kernel,std::default_delete<adm::graph::Kernel>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

unint64_t *adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::operator=(unint64_t *a1, unint64_t a2)
{
  while (atomic_load(a1))
    sched_yield();
  return a1;
}

void adm::graph::KernelConfiguration::~KernelConfiguration(adm::graph::KernelConfiguration *this)
{
  uint64_t v7 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + boost::detail::shared_count::~shared_count(this + 1) = v6;
    operator delete(v6);
  }
}

uint64_t std::__shared_ptr_pointer<adm::graph::Kernel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm5graph6KernelEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<adm::graph::Kernel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<adm::graph::Kernel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24C5866C0);
}

uint64_t adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v9 = (void **)(a1 + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unsigned int v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void *adm::graph::DSPNode::getDSP(adm::graph::DSPNode *this)
{
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return v3;
}

uint64_t *adm::graph::HostNode::addClientIOCallback(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3 == 1)
  {
    unsigned int v9 = (atomic_fetch_add(adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID, 0x100u) | 4) + 256;
    long long v11 = (unsigned int *)result[32];
    unint64_t v10 = result[33];
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v19 = result[31];
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v11 - v19) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0x666666666666666) {
        goto LABEL_30;
      }
      unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v19) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x333333333333333) {
        unint64_t v23 = 0x666666666666666;
      }
      else {
        unint64_t v23 = v21;
      }
      long long v31 = v4 + 33;
      if (v23) {
        unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      unint64_t v26 = (unsigned int *)(v23 + 40 * v20);
      unint64_t v27 = v23;
      long long v28 = v26;
      unint64_t v30 = v23 + 40 * v24;
      unsigned int *v26 = v9;
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v26 + 2), a2);
      long long v29 = v26 + 10;
      std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(v4 + 31, &v27);
      uint64_t v12 = (_DWORD *)v4[32];
      uint64_t result = (uint64_t *)std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      *long long v11 = v9;
      uint64_t v12 = v11 + 10;
      uint64_t result = (uint64_t *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v11 + 2), a2);
    }
    v4[32] = (uint64_t)v12;
  }
  else if (!a3)
  {
    unsigned int v5 = (atomic_fetch_add(adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID, 0x100u) | 3) + 256;
    unint64_t v6 = result[30];
    uint64_t v7 = (unsigned int *)result[29];
    if ((unint64_t)v7 < v6)
    {
      *uint64_t v7 = v5;
      uint64_t v8 = v7 + 10;
      uint64_t result = (uint64_t *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v7 + 2), a2);
LABEL_25:
      v4[29] = (uint64_t)v8;
      return result;
    }
    uint64_t v13 = result[28];
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - v13) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 <= 0x666666666666666)
    {
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v13) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x333333333333333) {
        unint64_t v17 = 0x666666666666666;
      }
      else {
        unint64_t v17 = v15;
      }
      long long v31 = v4 + 30;
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v25 = (unsigned int *)(v17 + 40 * v14);
      unint64_t v27 = v17;
      long long v28 = v25;
      unint64_t v30 = v17 + 40 * v18;
      unsigned int *v25 = v5;
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v25 + 2), a2);
      long long v29 = v25 + 10;
      std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(v4 + 28, &v27);
      uint64_t v8 = (_DWORD *)v4[29];
      uint64_t result = (uint64_t *)std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer((uint64_t)&v27);
      goto LABEL_25;
    }
LABEL_30:
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unsigned int v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    int v7 = *(_DWORD *)(v4 - 40);
    v4 -= 40;
    *(_DWORD *)(v6 - 40) = v7;
    v6 -= 40;
    uint64_t result = (uint64_t *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *int v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t adm::CustomPropertyManager::CustomPropertyManager(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  uint64_t v3 = dispatch_queue_create("com.apple.coreaudio.ADMCustomPropertyManager", 0);
  dispatch_object_t object = v3;
  std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100](a1, (uint64_t)v7);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  MEMORY[0x24C586000](a1 + 40, &object);
  uint64_t v4 = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  do
  {
    atomic_store(HIDWORD(adm::CustomPropertyManager::kParameterMappings[v4 + 5]), (unsigned int *)std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 56), adm::CustomPropertyManager::kParameterMappings[v4 + 5], &adm::CustomPropertyManager::kParameterMappings[v4 + 5])+ 8);
    v4 += 6;
  }
  while (v4 != 24);
  if (object) {
    dispatch_release(object);
  }
  std::__function::__value_func<void ()(CA::PropertyAddress)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_2489A0750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10)
{
  uint64_t v12 = v10[4];
  if (v12) {
    dispatch_release(v12);
  }
  std::__function::__value_func<void ()(CA::PropertyAddress)>::~__value_func[abi:ne180100](v10);
  if (object) {
    dispatch_release(object);
  }
  std::__function::__value_func<void ()(CA::PropertyAddress)>::~__value_func[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *adm::CustomPropertyManager::onGraphParameterUpdate(uint64_t a1, unsigned int *a2, float a3)
{
  uint64_t result = std::map<unsigned int,std::atomic<float>>::at(*(uint64_t **)(a1 + 64), a2[10]);
  float v7 = COERCE_FLOAT(atomic_exchange((atomic_uint *volatile)result, LODWORD(a3)));
  if (v7 != a3 && *(void *)(a1 + 24))
  {
    unsigned int v8 = a2[10];
    if (v8 == 1936748642)
    {
      kdebug_trace();
      unsigned int v8 = a2[10];
    }
    uint64_t v10 = **(void **)a2;
    int v11 = *(_DWORD *)(*(void *)a2 + 8);
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 16))(*MEMORY[0x263F88690], 64, 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = a1;
    *(void *)(v9 + 32) = v10;
    *(_DWORD *)(v9 + 40) = v11;
    *(_DWORD *)(v9 + 44) = v8;
    *(float *)(v9 + 48) = v7;
    *(float *)(v9 + 52) = a3;
    *(void *)uint64_t v9 = &unk_26FCA4880;
    *(void *)(v9 + 8) = 0;
    return (uint64_t *)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 40), (caulk::concurrent::message *)v9);
  }
  return result;
}

uint64_t *std::map<unsigned int,std::atomic<float>>::at(uint64_t *a1, unsigned int a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((_DWORD *)a1 + 7);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 4;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::perform(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v12 = (caulk::concurrent::message *)a1;
  uint64_t v2 = *(void *)(a1 + 24);
  adm_log_dispatch_object_t object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 44);
    int v5 = bswap32(v4);
    *(_DWORD *)&buf[1] = v5;
    if (((char)v5 - 32) > 0x5E
      || (((__int16)v5 >> 8) - 32) > 0x5E
      || ((v5 << 8 >> 24) - 32) > 0x5E
      || ((v5 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v13, v4);
    }
    else
    {
      strcpy(&buf[5], "'");
      buf[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&v13, buf);
    }
    uint64_t v6 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    double v7 = *(float *)(a1 + 48);
    double v8 = *(float *)(a1 + 52);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v15 = 2048;
    double v16 = v7;
    __int16 v17 = 2048;
    double v18 = v8;
    _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "AudioDSPManager parameterID [%s] value changed %f -> %f", buf, 0x20u);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  int v9 = *(_DWORD *)(a1 + 40);
  *(void *)std::string buf = *(void *)(a1 + 32);
  *(_DWORD *)&uint8_t buf[8] = v9;
  uint64_t v10 = *(void *)(v2 + 24);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 48))(v10, buf);
  return caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::rt_cleanup::~rt_cleanup(&v12);
}

void sub_2489A0AD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x263F88690] + 24))(*MEMORY[0x263F88690], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x24C5866C0);
}

void adm::CustomPropertyManager::attachToNode(uint64_t a1, adm::graph::DSPNode **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v78 = *MEMORY[0x263EF8340];
  do
  {
    adm::CustomPropertyManager::onGraphParameterUpdate(a1, (unsigned int *)&adm::CustomPropertyManager::kParameterMappings[v6], *((float *)&adm::CustomPropertyManager::kParameterMappings[v6 + 5] + 1));
    v6 += 6;
  }
  while (v6 != 24);
  DSP = adm::graph::DSPNode::getDSP(*a2);
  (*(void (**)(void **__return_ptr))(*(void *)DSP + 48))(&v73);
  uint64_t v65 = (uint64_t **)a2;
  double v8 = adm::graph::DSPNode::getDSP(*a2);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 56))(&v71);
  int v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  unint64_t v66 = 0;
  int v11 = adm::CustomPropertyManager::kParameterMappings;
  do
  {
    float v70 = v9;
    uint64_t v13 = v11[2];
    uint64_t v12 = v11[3];
    while (1)
    {
      if (v13 == v12) {
        goto LABEL_64;
      }
      std::string::size_type v14 = *(void *)(v13 + 8);
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      __int16 v15 = *(const void **)v13;
      if (v14 >= 0x17)
      {
        uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v17 = v14 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_dst = (std::string *)operator new(v17 + 1);
        __dst.__r_.__value_.__l.__size_ = v14;
        __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
        memmove(p_dst, v15, v14);
        goto LABEL_14;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v13 + 8);
      p_dst = &__dst;
      if (v14) {
        goto LABEL_13;
      }
LABEL_14:
      p_dst->__r_.__value_.__s.__data_[v14] = 0;
      uint64_t v19 = std::__tree<std::string>::find<std::string>(a3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((void *)(a3 + 8) != v19) {
        break;
      }
      v13 += 16;
    }
    unint64_t v20 = v72;
    unint64_t v21 = wmemchr((__int32 *)v71, *((_DWORD *)v11 + 10), ((char *)v72 - (unsigned char *)v71) >> 2);
    if (v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = v20;
    }
    int v9 = v70;
    if (v22 != v72)
    {
      if ((unint64_t)v10 < v68)
      {
        *(_DWORD *)uint64_t v10 = *((_DWORD *)v11 + 10);
        v10 += 4;
        goto LABEL_65;
      }
      uint64_t v26 = (v10 - v70) >> 2;
      unint64_t v27 = v26 + 1;
      if (!((unint64_t)(v26 + 1) >> 62))
      {
        if ((uint64_t)(v68 - (void)v70) >> 1 > v27) {
          unint64_t v27 = (uint64_t)(v68 - (void)v70) >> 1;
        }
        if (v68 - (unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v37 = (char *)(v28 + 4 * v26);
        *(_DWORD *)uint64_t v37 = *((_DWORD *)v11 + 10);
        long long v38 = v37 + 4;
        while (v10 != v70)
        {
          int v39 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v37 - boost::detail::shared_count::~shared_count(this + 1) = v39;
          v37 -= 4;
        }
        unint64_t v68 = v28 + 4 * v29;
        if (v70) {
          operator delete(v70);
        }
        int v9 = v37;
        uint64_t v10 = v38;
        goto LABEL_65;
      }
LABEL_110:
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v23 = v74;
    uint64_t v24 = wmemchr((__int32 *)v73, *((_DWORD *)v11 + 10), ((char *)v74 - (unsigned char *)v73) >> 2);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v23;
    }
    if (v25 == v74)
    {
      adm_log_dispatch_object_t object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v31 = *((_DWORD *)v11 + 10);
        int v32 = bswap32(v31);
        *(_DWORD *)&buf[1] = v32;
        if (((char)v32 - 32) > 0x5E
          || (((__int16)v32 >> 8) - 32) > 0x5E
          || ((v32 << 8 >> 24) - 32) > 0x5E
          || ((v32 >> 24) - 32) > 0x5E)
        {
          std::to_string(&__dst, v31);
        }
        else
        {
          strcpy(&buf[5], "'");
          buf[0] = 39;
          std::string::basic_string[abi:ne180100]<0>(&__dst, buf);
        }
        long long v40 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v40;
        _os_log_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_DEFAULT, "warning: node missing expected parameter %s", buf, 0xCu);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
LABEL_64:
      int v9 = v70;
    }
    else
    {
      if ((unint64_t)v69 < v66)
      {
        *(_DWORD *)uint64_t v69 = *((_DWORD *)v11 + 10);
        v69 += 4;
        goto LABEL_65;
      }
      uint64_t v33 = (v69 - __p) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        goto LABEL_110;
      }
      if ((uint64_t)(v66 - (void)__p) >> 1 > v34) {
        unint64_t v34 = (uint64_t)(v66 - (void)__p) >> 1;
      }
      if (v66 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      long long v41 = (char *)(v35 + 4 * v33);
      *(_DWORD *)long long v41 = *((_DWORD *)v11 + 10);
      long long v42 = v41 + 4;
      if (v69 == __p)
      {
        unint64_t v44 = __p;
      }
      else
      {
        int64x2_t v43 = v69;
        unint64_t v44 = __p;
        do
        {
          *((_DWORD *)v41 - boost::detail::shared_count::~shared_count(this + 1) = *((_DWORD *)v43 - 1);
          v41 -= 4;
          v43 -= 4;
        }
        while (v43 != __p);
      }
      unint64_t v66 = v35 + 4 * v36;
      if (v44) {
        operator delete(v44);
      }
      std::string __p = v41;
      uint64_t v69 = v42;
    }
LABEL_65:
    v11 += 6;
  }
  while (v11 != (uint64_t *)0x26B1488C8);
  if (v9 == v10)
  {
    std::string v48 = __p;
    uint64_t v47 = a1;
  }
  else
  {
    uint64_t v45 = *v65;
    unint64_t v76 = 0;
    char v46 = operator new(0x30uLL);
    uint64_t v47 = a1;
    *char v46 = &unk_26FCA4770;
    v46[1] = a1;
    v46[2] = v9;
    v46[3] = v10;
    v46[4] = v68;
    v46[5] = v45;
    unint64_t v76 = v46;
    adm::graph::HostNode::addClientIOCallback(v45, (uint64_t)&__dst, 1);
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](&__dst);
    int v9 = 0;
    std::string v48 = __p;
  }
  if (v48 != v69)
  {
    long long v49 = 0;
    long long v50 = 0;
    int v51 = v48;
    uint64_t v52 = 0;
    do
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = *(_DWORD *)v51;
      int data = (int)__dst.__r_.__value_.__l.__data_;
      char v54 = std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v47 + 56), __dst.__r_.__value_.__l.__data_, &__dst)+ 4;
      if (v50 >= v49)
      {
        unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v52) >> 3) + 1;
        if (v55 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v49 - v52) >> 3) > v55) {
          unint64_t v55 = 0x5555555555555556 * ((v49 - v52) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v49 - v52) >> 3) >= 0x555555555555555) {
          unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v56 = v55;
        }
        unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v56);
        long long v59 = &v57[8 * ((v50 - v52) >> 3)];
        *(_DWORD *)long long v59 = data;
        *((void *)v59 + boost::detail::shared_count::~shared_count(this + 1) = v54;
        v59[16] = 0;
        v59[20] = 0;
        if (v50 == v52)
        {
          uint64_t v61 = &v57[8 * ((v50 - v52) >> 3)];
        }
        else
        {
          int v60 = &v57[8 * ((v50 - v52) >> 3)];
          do
          {
            uint64_t v61 = v60 - 24;
            long long v62 = *(_OWORD *)(v50 - 24);
            *((void *)v60 - boost::detail::shared_count::~shared_count(this + 1) = *((void *)v50 - 1);
            *(_OWORD *)(v60 - 24) = v62;
            v50 -= 24;
            v60 -= 24;
          }
          while (v50 != v52);
        }
        long long v49 = &v57[24 * v58];
        long long v50 = v59 + 24;
        if (v52) {
          operator delete(v52);
        }
        uint64_t v52 = v61;
      }
      else
      {
        *(_DWORD *)long long v50 = data;
        *((void *)v50 + boost::detail::shared_count::~shared_count(this + 1) = v54;
        v50[16] = 0;
        v50[20] = 0;
        v50 += 24;
      }
      v51 += 4;
    }
    while (v51 != v69);
    BOOL v63 = *v65;
    unint64_t v76 = 0;
    uint64_t v64 = operator new(0x30uLL);
    *uint64_t v64 = &unk_26FCA4800;
    v64[1] = a1;
    v64[2] = v52;
    v64[3] = v50;
    v64[4] = v49;
    v64[5] = v63;
    unint64_t v76 = v64;
    adm::graph::HostNode::addClientIOCallback(v63, (uint64_t)&__dst, 0);
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](&__dst);
    std::string v48 = __p;
  }
  if (v48) {
    operator delete(v48);
  }
  if (v9) {
    operator delete(v9);
  }
  if (v71)
  {
    int v72 = (__int32 *)v71;
    operator delete(v71);
  }
  if (v73)
  {
    uint64_t v74 = (__int32 *)v73;
    operator delete(v73);
  }
}

void sub_2489A12A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm21CustomPropertyManager12attachToNodeERKNSt3__110shared_ptrINS_5graph7DSPNodeEEERKNS1_3setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessISE_EENSC_ISE_EEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t result)
{
  uint64_t v1 = *(unsigned int **)(result + 16);
  uint64_t v2 = *(unsigned int **)(result + 24);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      float v4 = *((float *)v1 + 4);
      int v5 = *((unsigned __int8 *)v1 + 20);
      float v6 = COERCE_FLOAT(atomic_load(*((unsigned int **)v1 + 1)));
      *((float *)v1 + 4) = v6;
      *((unsigned char *)v1 + 20) = 1;
      if (v5) {
        BOOL v7 = v4 == v6;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7)
      {
        DSP = adm::graph::DSPNode::getDSP(*(adm::graph::DSPNode **)(v3 + 40));
        if (*((unsigned char *)v1 + 20)) {
          v9.n128_u32[0] = v1[4];
        }
        else {
          v9.n128_u64[0] = 0;
        }
        uint64_t result = (*(uint64_t (**)(void *, void, __n128))(*(void *)DSP + 40))(DSP, *v1, v9);
      }
      v1 += 6;
    }
    while (v1 != v2);
  }
  return result;
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26FCA4800;
  return std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(a2 + 1, (uint64_t *)(a1 + 8));
}

void *std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  int v5 = (long long *)a2[1];
  float v6 = (long long *)a2[2];
  if (v6 != v5)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    double v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7);
    a1[1] = v8;
    a1[2] = v8;
    a1[3] = &v8[3 * v9];
    do
    {
      long long v10 = *v5;
      _DWORD v8[2] = *((void *)v5 + 2);
      *(_OWORD *)double v8 = v10;
      v8 += 3;
      int v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v6);
    a1[2] = v8;
  }
  a1[4] = a2[4];
  return a1;
}

void sub_2489A15A4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26FCA4800;
  std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_2489A1614(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_26FCA4800;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24C5866C0);
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_26FCA4800;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3adm21CustomPropertyManager12attachToNodeERKNSt3__110shared_ptrINS_5graph7DSPNodeEEERKNS1_3setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessISE_EENSC_ISE_EEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t *result)
{
  uint64_t v1 = (unsigned int *)result[2];
  uint64_t v2 = (unsigned int *)result[3];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[1];
    do
    {
      uint64_t v5 = *v1;
      DSP = adm::graph::DSPNode::getDSP((adm::graph::DSPNode *)v3[5]);
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void *, uint64_t))(*(void *)DSP + 32))(DSP, v5);
      uint64_t v8 = 0;
      while (LODWORD(adm::CustomPropertyManager::kParameterMappings[v8 + 5]) != v5)
      {
        v8 += 6;
        if (v8 == 24) {
          goto LABEL_8;
        }
      }
      uint64_t result = adm::CustomPropertyManager::onGraphParameterUpdate(v4, (unsigned int *)&adm::CustomPropertyManager::kParameterMappings[v8], v7);
LABEL_8:
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *a2 = &unk_26FCA4770;
  a2[1] = v4;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = (const void *)a1[2];
  void *v2 = &unk_26FCA4770;
  v2[1] = v4;
  void v2[3] = 0;
  float v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 2);
  v2[5] = a1[5];
  return v2;
}

void sub_2489A1918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_26FCA4770;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24C5866C0);
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_26FCA4770;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void adm::CustomPropertyManager::getCustomPropertyList(adm::CustomPropertyManager *this)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v39 = 0uLL;
  unint64_t v40 = 0;
  uint64_t v1 = "SdAvtpni";
  uint64_t v2 = *MEMORY[0x263EFFB40];
  uint64_t v3 = *MEMORY[0x263EFFB38];
  do
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&p_valuePtr, "property selector");
    LODWORD(valuePtr) = *(_DWORD *)v1;
    uint64_t v42 = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v42)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v43, "property scope");
    LODWORD(valuePtr) = *((_DWORD *)v1 + 1);
    if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
    {
      unint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v45, "property element");
    LODWORD(valuePtr) = *((_DWORD *)v1 + 2);
    if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
    {
      int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
      __cxa_throw(v32, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v4 = (char *)*((void *)v1 + 2);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v47, "property data type");
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v48, v4);
    uint64_t v5 = (char *)*((void *)v1 + 4);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v49, "property qualifier data type");
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v50, v5);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v51, "property is invariant");
    v51[1] = v3;
    LODWORD(vstd::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5) = *((unsigned __int8 *)v1 + 48);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v52, "property is settable");
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v2;
    }
    uint64_t v53 = v6;
    v37[0] = &p_valuePtr;
    v37[1] = 7;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v37);
    CFDictionaryRef v8 = CFDictionaryRef;
    CFDictionaryRef v38 = CFDictionaryRef;
    uint64_t v9 = (void *)*((void *)&v39 + 1);
    if (*((void *)&v39 + 1) >= v40)
    {
      long long v10 = (void *)v39;
      uint64_t v11 = (uint64_t)(*((void *)&v39 + 1) - v39) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v40 - v39;
      if ((uint64_t)(v40 - v39) >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      unint64_t v57 = &v40;
      if (v14)
      {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        uint64_t v9 = (void *)*((void *)&v39 + 1);
        long long v10 = (void *)v39;
      }
      else
      {
        uint64_t v15 = 0;
      }
      double v16 = (CFDictionaryRef *)(v14 + 8 * v11);
      unint64_t v17 = v14 + 8 * v15;
      unint64_t v56 = v17;
      *double v16 = v8;
      uint64_t v18 = v16 + 1;
      CFDictionaryRef v38 = 0;
      *((void *)&v55 + boost::detail::shared_count::~shared_count(this + 1) = v16 + 1;
      if (v9 == v10)
      {
        CFDictionaryRef v20 = 0;
      }
      else
      {
        do
        {
          CFDictionaryRef v19 = (const __CFDictionary *)*--v9;
          *--double v16 = v19;
          void *v9 = 0;
        }
        while (v9 != v10);
        uint64_t v18 = (void *)*((void *)&v55 + 1);
        unint64_t v17 = v56;
        CFDictionaryRef v20 = v38;
      }
      long long v21 = v39;
      *(void *)&long long v39 = v16;
      *((void *)&v39 + boost::detail::shared_count::~shared_count(this + 1) = v18;
      long long v55 = v21;
      unint64_t v22 = v40;
      unint64_t v40 = v17;
      unint64_t v56 = v22;
      CFTypeRef valuePtr = (CFTypeRef)v21;
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&valuePtr);
      *((void *)&v39 + boost::detail::shared_count::~shared_count(this + 1) = v18;
      if (v20) {
        CFRelease(v20);
      }
    }
    else
    {
      **((void **)&v39 + boost::detail::shared_count::~shared_count(this + 1) = CFDictionaryRef;
      CFDictionaryRef v38 = 0;
      *((void *)&v39 + boost::detail::shared_count::~shared_count(this + 1) = v9 + 1;
    }
    for (uint64_t i = 0; i != -112; i -= 16)
    {
      uint64_t v24 = *(const void **)((char *)&v53 + i);
      if (v24) {
        CFRelease(v24);
      }
      uint64_t v25 = *(const void **)&v52[i];
      if (v25) {
        CFRelease(v25);
      }
    }
    v1 += 56;
  }
  while (v1 != (const char *)&off_265243498);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&valuePtr, "custom property info array");
  int64_t v26 = *((void *)&v39 + 1) - v39;
  if (*((void *)&v39 + 1) == (void)v39)
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0;
  }
  else
  {
    if (v26 < 0) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v26 >> 3);
    bzero(v27, v26);
    unint64_t v28 = &v27[v26];
    long long v29 = v39;
    if ((void)v39 != *((void *)&v39 + 1))
    {
      uint64_t v30 = 0;
      do
      {
        *(void *)&v27[v30] = *(void *)(v29 + v30);
        v30 += 8;
      }
      while ((void)v29 + v30 != *((void *)&v29 + 1));
    }
  }
  CFArrayRef v31 = CFArrayCreate(0, (const void **)v27, (v28 - v27) >> 3, MEMORY[0x263EFFF70]);
  if (!v31)
  {
    unint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v27) {
    operator delete(v27);
  }
  *(void *)&long long v55 = v31;
  p_CFTypeRef valuePtr = &valuePtr;
  uint64_t v42 = 1;
  *(void *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&p_valuePtr);
  if ((void)v55) {
    CFRelease((CFTypeRef)v55);
  }
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  p_CFTypeRef valuePtr = (CFTypeRef *)&v39;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_valuePtr);
}

void sub_2489A1EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,__int16 *a25,CFTypeRef a26,uint64_t a27,CFTypeRef cf,uint64_t a29,CFTypeRef a30)
{
  __cxa_free_exception(v31);
  if (v30) {
    operator delete(v30);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)(v32 - 136));
  a25 = &a20;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(void *)this = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_2489A2198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    CFIndex v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      uint64_t v6 = *v4;
      float v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        unsigned __int8 v9 = keys;
        uint64_t v10 = v37 - keys;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void **)(v13 + 8 * v10);
        *uint64_t v15 = v6;
        CFDictionaryRef v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            double v16 = *--v7;
            *--uint64_t v15 = v16;
          }
          while (v7 != v9);
          float v7 = keys;
        }
        keys = v15;
        unint64_t v38 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v37 = v6;
        CFDictionaryRef v8 = v7 + 1;
      }
      uint64_t v37 = v8;
      unint64_t v17 = v4[1];
      uint64_t v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        CFDictionaryRef v20 = values;
        uint64_t v21 = v34 - values;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        int64_t v26 = (void **)(v24 + 8 * v21);
        unsigned int *v26 = v17;
        CFDictionaryRef v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            unint64_t v27 = *--v18;
            *--int64_t v26 = v27;
          }
          while (v18 != v20);
          uint64_t v18 = values;
        }
        values = v26;
        unint64_t v35 = v24 + 8 * v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *unint64_t v34 = v17;
        CFDictionaryRef v19 = v18 + 1;
      }
      unint64_t v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  unint64_t v28 = keys;
  long long v29 = values;
  CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v30)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  return v30;
}

void sub_2489A2450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  unint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    CFIndex v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    float v7 = &v4[8 * v6];
    unsigned __int8 v9 = (char *)*a1;
    CFDictionaryRef v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - boost::detail::shared_count::~shared_count(this + 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      CFDictionaryRef v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void adm::CustomPropertyManager::getCustomProperty(applesauce::CF::DataRef *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (*(_DWORD *)a3 == 1684498541)
  {
    *(_DWORD *)std::string buf = 1684500589;
    uint64_t v26 = *(void *)(a3 + 4);
    if (a4) {
      CFRetain(a4);
    }
    CFDataRef v24 = (CFDataRef)a4;
    ParameterMapping = adm::CustomPropertyManager::findParameterMapping(buf, &v24);
    if (a4) {
      CFRelease(a4);
    }
    *(_DWORD *)bytes = ParameterMapping != 0;
    CFDataRef v8 = CFDataCreate(0, bytes, 4);
    if (v8) {
      goto LABEL_7;
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
LABEL_32:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a4) {
    CFRetain(a4);
  }
  CFDataRef v22 = (CFDataRef)a4;
  uint64_t v10 = (unsigned int *)adm::CustomPropertyManager::findParameterMapping((_DWORD *)a3, &v22);
  if (a4) {
    CFRelease(a4);
  }
  if (v10)
  {
    float v11 = COERCE_FLOAT(atomic_load((unsigned int *)std::map<unsigned int,std::atomic<float>>::at(*(uint64_t **)(a2 + 64), v10[10])));
    uint64_t v12 = *(int **)(*(void *)v10 + 16);
    uint64_t v13 = *(void *)(*(void *)v10 + 24);
    if (v13 == 7)
    {
      int v18 = *v12;
      int v19 = *(int *)((char *)v12 + 3);
      if (v18 != 1634692166 || v19 != 842232929) {
        goto LABEL_26;
      }
      *(float *)std::string buf = v11;
      CFDataRef v8 = CFDataCreate(0, buf, 4);
      if (!v8) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v13 != 6) {
        goto LABEL_26;
      }
      int v14 = *v12;
      int v15 = *((unsigned __int16 *)v12 + 2);
      if (v14 != 1953384789 || v15 != 12851) {
        goto LABEL_26;
      }
      *(_DWORD *)std::string buf = v11;
      CFDataRef v8 = CFDataCreate(0, buf, 4);
      if (!v8)
      {
LABEL_21:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(exception);
        goto LABEL_32;
      }
    }
LABEL_7:
    applesauce::CF::DataRef::DataRef(a1, v8);
    return;
  }
LABEL_26:
  adm_log_dispatch_object_t object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, "unsupported property address", buf, 2u);
  }
  *(void *)a1 = 0;
}

void sub_2489A27EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t *adm::CustomPropertyManager::findParameterMapping(_DWORD *a1, CFDataRef *a2)
{
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = &adm::CustomPropertyManager::kParameterMappings[v4];
    uint64_t v6 = adm::CustomPropertyManager::kParameterMappings[v4];
    int v7 = *(_DWORD *)v6;
    if (*a1 != 707406378 && v7 != 707406378 && v7 != *a1) {
      goto LABEL_37;
    }
    int v10 = *(_DWORD *)(v6 + 4);
    int v11 = a1[1];
    BOOL v12 = v11 == 707406378 || v10 == 707406378;
    if (!v12 && v10 != v11) {
      goto LABEL_37;
    }
    int v14 = *(_DWORD *)(v6 + 8);
    int v15 = a1[2];
    BOOL v16 = v15 == -1 || v14 == -1;
    if (!v16 && v14 != v15) {
      goto LABEL_37;
    }
    int v19 = *(int **)(v6 + 32);
    uint64_t v18 = *(void *)(v6 + 40);
    if (v18 != 6) {
      break;
    }
    int v20 = *v19;
    int v21 = *((unsigned __int16 *)v19 + 2);
    BOOL v22 = v20 == 1953384789 && v21 == 12851;
    if (!v22 || !*a2 || CFDataGetLength(*a2) != 4) {
      return 0;
    }
    if (!*a2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    BytePtr = CFDataGetBytePtr(*a2);
    if (BYTE4(adm::CustomPropertyManager::kParameterMappings[v4 + 1])
      && *(_DWORD *)BytePtr == LODWORD(adm::CustomPropertyManager::kParameterMappings[v4 + 1]))
    {
      return &adm::CustomPropertyManager::kParameterMappings[v4];
    }
LABEL_37:
    v4 += 6;
    if (v4 == 24) {
      return 0;
    }
  }
  if (v18 != 4 || *v19 != 1701736270) {
    return 0;
  }
  if (*a2 && CFDataGetLength(*a2)) {
    return 0;
  }
  return v5;
}

void sub_2489A29C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL adm::CustomPropertyManager::setCustomProperty(uint64_t a1, _DWORD *a2, CFDataRef *a3, const void *a4)
{
  if (a4) {
    CFRetain(a4);
  }
  CFDataRef v25 = (CFDataRef)a4;
  ParameterMapping = adm::CustomPropertyManager::findParameterMapping(a2, &v25);
  if (a4) {
    CFRelease(a4);
  }
  if (!ParameterMapping)
  {
    adm_log_dispatch_object_t object = get_adm_log_object();
    BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v23 = 0;
    unint64_t v17 = "unsupported property address";
    uint64_t v18 = (uint8_t *)&v23;
LABEL_31:
    _os_log_error_impl(&dword_248947000, adm_log_object, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    return 0;
  }
  unsigned __int8 v9 = *(int **)(*ParameterMapping + 16);
  uint64_t v10 = *(void *)(*ParameterMapping + 24);
  if (v10 == 7)
  {
    int v19 = *v9;
    int v20 = *(int *)((char *)v9 + 3);
    BOOL v21 = v19 == 1634692166 && v20 == 842232929;
    if (v21 && *a3 && CFDataGetLength(*a3) == 4)
    {
      if (*a3)
      {
        float v14 = *(float *)CFDataGetBytePtr(*a3);
        goto LABEL_29;
      }
LABEL_32:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else if (v10 == 6)
  {
    int v11 = *v9;
    int v12 = *((unsigned __int16 *)v9 + 2);
    BOOL v13 = v11 == 1953384789 && v12 == 12851;
    if (v13 && *a3 && CFDataGetLength(*a3) == 4)
    {
      if (*a3)
      {
        float v14 = (float)*(unsigned int *)CFDataGetBytePtr(*a3);
LABEL_29:
        adm::CustomPropertyManager::onGraphParameterUpdate(a1, (unsigned int *)ParameterMapping, v14);
        return 1;
      }
      goto LABEL_32;
    }
  }
  adm_log_dispatch_object_t object = get_adm_log_object();
  BOOL result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)std::string buf = 0;
    unint64_t v17 = "invalid property data";
    uint64_t v18 = buf;
    goto LABEL_31;
  }
  return result;
}

void sub_2489A2BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t audiodsptypes_streamdescription__encode(uint64_t a1, uint64_t a2)
{
  tb_message_encode_u32();
  tb_message_encode_u64();
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != 0xA324521D2548FDC2)
  {
    printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v3, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 2126);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = tb_message_encode_u64();
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5 <= 0x4709E2ED84FF14ALL)
  {
    if (v5 > (uint64_t)0xDB58BC24D81FB94ELL)
    {
      if (v5 == 0xDB58BC24D81FB94FLL) {
        return result;
      }
      unint64_t v6 = 0xEF2093B88F8E7C91;
    }
    else
    {
      if (v5 == 0xA35EFE3E1F8EBC3ALL) {
        return result;
      }
      unint64_t v6 = 0xD64B2C69CF7E5942;
    }
LABEL_14:
    if (v5 == v6) {
      return result;
    }
LABEL_17:
    printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v5, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 1898);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  if (v5 <= 0x26F9951B5B225FF2)
  {
    if (v5 == 0x4709E2ED84FF14BLL) {
      return result;
    }
    unint64_t v6 = 0xF3D427428C99B29;
    goto LABEL_14;
  }
  if (v5 != 0x26F9951B5B225FF3 && v5 != 0x4C7CB07FE50E5462)
  {
    unint64_t v6 = 0x5460BCD664C6C7FALL;
    goto LABEL_14;
  }
  return result;
}

uint64_t audiodspcontroller_audiodspcontrol_prepareforio(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7, uint64_t *a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  uint64_t v14 = tb_client_connection_message_construct();
  if (v14) {
    return v14;
  }
  tb_message_encode_u64();
  tb_message_encode_u32();
  audiodsptypes_streamdescription__encode((uint64_t)v20, a3);
  audiodsptypes_streamdescription__encode((uint64_t)v20, a4);
  audiodsptypes_streamdescription__encode((uint64_t)v20, a5);
  tb_message_encode_u64();
  uint64_t v15 = *a6;
  if (*a6 != 0x8C3BC6B79890B85 && v15 != 0x3DF307DCB53822F3) {
    goto LABEL_34;
  }
  tb_message_encode_u64();
  if (*a7 != 0x29D9165411843273)
  {
    printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", *a7, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 1703);
    _os_crash();
    __break(1u);
LABEL_34:
    printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v15, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 1769);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
  tb_message_encode_u64();
  uint64_t v16 = *a8;
  if (*a8 > (uint64_t)0xE0BAAD14F9DBDDEFLL)
  {
    if (v16 > 0x455F57CA4B039ED8)
    {
      if (v16 > 0x5814DD695070736ELL)
      {
        if (v16 == 0x5814DD695070736FLL) {
          goto LABEL_29;
        }
        unint64_t v17 = 0x7E234EE52CCEAB90;
      }
      else
      {
        if (v16 == 0x455F57CA4B039ED9) {
          goto LABEL_29;
        }
        unint64_t v17 = 0x57839668489FE6E1;
      }
    }
    else if (v16 > (uint64_t)0xFE52B066A3299AA0)
    {
      if (v16 == 0xFE52B066A3299AA1) {
        goto LABEL_29;
      }
      unint64_t v17 = 0x2F66DF9B2814CFB5;
    }
    else
    {
      if (v16 == 0xE0BAAD14F9DBDDF0) {
        goto LABEL_29;
      }
      unint64_t v17 = 0xF8050C060D986E6BLL;
    }
  }
  else if (v16 > (uint64_t)0xB89E299E0626F288)
  {
    if (v16 > (uint64_t)0xD333A5300DE06CEFLL)
    {
      if (v16 == 0xD333A5300DE06CF0) {
        goto LABEL_29;
      }
      unint64_t v17 = 0xDEBD14632E00370BLL;
    }
    else
    {
      if (v16 == 0xB89E299E0626F289) {
        goto LABEL_29;
      }
      unint64_t v17 = 0xC355D4D55002AF8CLL;
    }
  }
  else if (v16 > (uint64_t)0xAC3D9F9FC752B77CLL)
  {
    if (v16 == 0xAC3D9F9FC752B77DLL) {
      goto LABEL_29;
    }
    unint64_t v17 = 0xB5C617462A130B2FLL;
  }
  else
  {
    if (v16 == 0x92D97930F1887DE3) {
      goto LABEL_29;
    }
    unint64_t v17 = 0xA5B814BA7E080C1ALL;
  }
  if (v16 == v17)
  {
LABEL_29:
    tb_message_complete();
    uint64_t v18 = tb_connection_send_query();
    if ((v18 & 0xFFFFFFF7) != 0)
    {
      uint64_t v14 = v18;
      tb_client_connection_message_destruct();
    }
    else
    {
      tb_client_connection_message_destruct();
      return 4;
    }
    return v14;
  }
LABEL_35:
  printf("TB_FATAL: invalid value: unexpected case value, %llx (%s:%d)\n", v16, "/Library/Caches/com.apple.xbs/Binaries/AudioDSPManager/install/TempContent/Objects/AudioDSPManager.build/AudioDSPManager.build/DerivedSources/AudioDSPController_C.c", 1328);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void _GLOBAL__sub_I_DSPGraphKernel_mm()
{
  uint64_t v0 = (void *)MEMORY[0x24C586A50]();
}

void __cxx_global_var_init()
{
  {
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    int v9 = -1;
    std::bad_alloc::bad_alloc(&v10);
    unint64_t v6 = &unk_26FCA1EA8;
    v10.__vftable = (std::bad_alloc_vtbl *)&unk_26FCA1EC8;
    uint64_t v2 = 0;
    long long v3 = 0uLL;
    int v4 = -1;
    uint64_t v1 = &unk_26FCA1F30;
    v5[0].__vftable = (std::bad_alloc_vtbl *)&unk_26FCA1F60;
    v5[1].__vftable = (std::bad_alloc_vtbl *)&unk_26FCA1FA0;
    uint64_t v0 = 0;
    int v4 = v9;
    long long v3 = v8;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v2, 0);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v0);
    *(void *)&long long v3 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_"
                     "detail::bad_alloc_]";
    *((void *)&v3 + boost::detail::shared_count::~shared_count(this + 1) = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/"
                           "local/include/boost/exception/detail/exception_ptr.hpp";
    int v4 = 174;
    {
      operator new();
    }
    boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep;
    unk_26B1487D0 = unk_26B1487F0;
    if (unk_26B1487F0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(unk_26B1487F0 + 8), 1u, memory_order_relaxed);
    }
    std::bad_alloc::~bad_alloc(v5);
    uint64_t v1 = &unk_26FCA3C48;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v2);
    std::bad_alloc::~bad_alloc(&v10);
    unint64_t v6 = &unk_26FCA3C48;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v7);
    __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e, &dword_248947000);
  }
}

void sub_2489A3880(_Unwind_Exception *a1)
{
  MEMORY[0x24C5866C0](v5, 0x10F1C4085500448);
  std::bad_alloc::~bad_alloc(v4);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v3);
  std::bad_alloc::~bad_alloc(v2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_1()
{
  {
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    int v9 = -1;
    unint64_t v6 = &unk_26FCA2068;
    v10.__vftable = (std::bad_exception_vtbl *)&unk_26FCA2088;
    int v4 = -1;
    uint64_t v1 = &unk_26FCA20F0;
    uint64_t v2 = 0;
    v5[0].__vftable = (std::bad_exception_vtbl *)&unk_26FCA2120;
    v5[1].__vftable = (std::bad_exception_vtbl *)&unk_26FCA2160;
    uint64_t v0 = 0;
    long long v3 = 0uLL;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v2, 0);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v0);
    *(void *)&long long v3 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_"
                     "detail::bad_exception_]";
    *((void *)&v3 + boost::detail::shared_count::~shared_count(this + 1) = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/"
                           "local/include/boost/exception/detail/exception_ptr.hpp";
    int v4 = 174;
    {
      operator new();
    }
    boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep;
    unk_26B1487E0 = unk_26B148800;
    if (unk_26B148800) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(unk_26B148800 + 8), 1u, memory_order_relaxed);
    }
    std::bad_exception::~bad_exception(v5);
    uint64_t v1 = &unk_26FCA3C48;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v2);
    std::bad_exception::~bad_exception(&v10);
    unint64_t v6 = &unk_26FCA3C48;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v7);
    __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e, &dword_248947000);
  }
}

void sub_2489A3D4C(_Unwind_Exception *a1)
{
  MEMORY[0x24C5866C0](v5, 0x10F1C4085500448);
  std::bad_exception::~bad_exception(v4);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v3);
  std::bad_exception::~bad_exception(v2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_DSPProcessor_mm()
{
  uint64_t v0 = (void *)MEMORY[0x24C586A50]();
}

void *_GLOBAL__sub_I_CustomPropertyManager_cpp()
{
  adm::CustomPropertyManager::kParameterMappings[0] = (uint64_t)"SdAvtpni";
  byte_26B148810 = 0;
  byte_26B148814 = 0;
  qword_26B148820 = 0;
  qword_26B148828 = 0;
  qword_26B148818 = 0;
  uint64_t v0 = operator new(0x20uLL);
  *uint64_t v0 = xmmword_2652432F0;
  v0[1] = *(_OWORD *)&off_265243300;
  qword_26B148818 = (uint64_t)v0;
  qword_26B148820 = (uint64_t)(v0 + 2);
  qword_26B148828 = (uint64_t)(v0 + 2);
  *(void *)&dword_26B148830 = 1936748642;
  qword_26B148838 = (uint64_t)"ROIUbolg";
  byte_26B148840 = 0;
  byte_26B148844 = 0;
  qword_26B148850 = 0;
  qword_26B148858 = 0;
  qword_26B148848 = 0;
  uint64_t v1 = operator new(0x10uLL);
  void *v1 = "isolated audio muted talker detection";
  v1[1] = 37;
  qword_26B148848 = (uint64_t)v1;
  qword_26B148850 = (uint64_t)(v1 + 2);
  qword_26B148858 = (uint64_t)(v1 + 2);
  unk_26B148860 = 1969844082;
  dword_26B148870 = 1651797616;
  byte_26B148874 = 1;
  qword_26B148880 = 0;
  unk_26B148888 = 0;
  qword_26B148878 = 0;
  uint64_t v2 = operator new(0x10uLL);
  qword_26B148880 = (uint64_t)(v2 + 2);
  unk_26B148888 = v2 + 2;
  void *v2 = "isolated audio siri";
  v2[1] = 19;
  qword_26B148878 = (uint64_t)v2;
  dword_26B148890 = 1651797616;
  unk_26B148894 = 0;
  dword_26B1488A0 = 1987339878;
  byte_26B1488A4 = 1;
  qword_26B1488B0 = 0;
  unk_26B1488B8 = 0;
  qword_26B1488A8 = 0;
  uint64_t result = operator new(0x10uLL);
  qword_26B1488B0 = (uint64_t)(result + 2);
  unk_26B1488B8 = result + 2;
  void *result = "isolated audio siri";
  result[1] = 19;
  qword_26B1488A8 = (uint64_t)result;
  dword_26B1488C0 = 1987339878;
  unk_26B1488C4 = 0;
  return result;
}

void sub_2489A3FB4(_Unwind_Exception *exception_object)
{
  long long v3 = &qword_26B148898;
  while (1)
  {
    int v4 = (void *)*(v3 - 4);
    if (v4)
    {
      *(v3 - 3) = (uint64_t)v4;
      operator delete(v4);
    }
    v3 -= 6;
    if (v3 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x270F0FCC8](inAudioConverter, *(void *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x270F0FCD0](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x270F0FCD8](inSourceFormat, inDestinationFormat, outAudioConverter);
}

uint64_t CARegisterUIOrientation()
{
  return MEMORY[0x270EE2318]();
}

uint64_t CAUnregisterUIOrientation()
{
  return MEMORY[0x270EE2328]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x270EE4C50](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D40](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x270EE5230](theString, suffix);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

uint64_t ExtendedAudioBufferList_CreateWithFormat()
{
  return MEMORY[0x270F0FE10]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x270F0FE18]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x270F0FE20]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x270F95FE8]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x270F95FF8]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x270F96018]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph()
{
  return MEMORY[0x270F0FE48]();
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
}

uint64_t caulk::concurrent::messenger::shared_logging_priority(caulk::concurrent::messenger *this)
{
  return MEMORY[0x270F87AA8](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x270F87AB8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x270F87AC0]();
}

{
  return MEMORY[0x270F87AC8]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return MEMORY[0x270F0FE50](this);
}

uint64_t DSPGraph::Interpreter::compileFile()
{
  return MEMORY[0x270F0FE58]();
}

uint64_t DSPGraph::Interpreter::compileText()
{
  return MEMORY[0x270F0FE60]();
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
}

uint64_t DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  return MEMORY[0x270F0FE70](this);
}

uint64_t DSPGraph::ThrowException()
{
  return MEMORY[0x270F0FE78]();
}

uint64_t DSPGraph::Box::selfLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x270F0FE98](this);
}

uint64_t DSPGraph::Box::totalLatencyInSamples(DSPGraph::Box *this)
{
  return MEMORY[0x270F0FEA0](this);
}

uint64_t DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x270F0FEA8](this);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F0FED0](this, a2);
}

uint64_t DSPGraph::Graph::setSRCQuality(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FEE8](this);
}

uint64_t DSPGraph::Graph::processMultiple()
{
  return MEMORY[0x270F0FEF8]();
}

uint64_t DSPGraph::Graph::setSRCAlgorithm(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FF00](this);
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F0FF08](this, a2);
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2, const __CFString *a3)
{
  return MEMORY[0x270F0FF10](this, a2, a3);
}

uint64_t DSPGraph::Graph::setSliceDuration()
{
  return MEMORY[0x270F0FF18]();
}

uint64_t DSPGraph::Graph::setSRCMinimumPhase(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FF20](this);
}

uint64_t DSPGraph::Graph::box()
{
  return MEMORY[0x270F0FF38]();
}

uint64_t DSPGraph::Graph::reset(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FF40](this);
}

uint64_t DSPGraph::Graph::preflight()
{
  return MEMORY[0x270F0FF68]();
}

uint64_t DSPGraph::strprintf(DSPGraph *this, const char *a2, ...)
{
  return MEMORY[0x270F0FF88](this, a2);
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FF98](this);
}

uint64_t DSPGraph::Graph::in(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FFB0](this);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FFB8](this);
}

uint64_t DSPGraph::Graph::numInputs(DSPGraph::Graph *this)
{
  return MEMORY[0x270F0FFC0](this);
}

uint64_t DSPGraph::Exception::print()
{
  return MEMORY[0x270F0FFC8]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x270F98200](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x270F98210](retstr, this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982A0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x270F982D0](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x270F98310](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98320](this, a2);
}

void std::bad_exception::~bad_exception(std::bad_exception *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x270F983E8](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x270F984D8](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  return (std::system_error *)MEMORY[0x270F985F8](this, *(void *)&__ec.__val_, __ec.__cat_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x270F98600](this, *(void *)&__ec.__val_, __ec.__cat_, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
}

{
  MEMORY[0x270F98630](this);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A8]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return MEMORY[0x270F989B8](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x270F989D8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x270F98B08](a1, a2);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x270F98B60](a1, __ec);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x270F98BF0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x270F98E00](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E18](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x270F98E60](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x270F98EE8](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t _os_assert_log()
{
  return MEMORY[0x270ED8050]();
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x270ED8718](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x270ED8730](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

uint64_t exclaves_inbound_buffer_copyin()
{
  return MEMORY[0x270ED97E0]();
}

uint64_t exclaves_inbound_buffer_create()
{
  return MEMORY[0x270ED97E8]();
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x270EDA090]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

uint64_t tb_client_connection_activate()
{
  return MEMORY[0x270F7E0B0]();
}

uint64_t tb_client_connection_create_with_endpoint()
{
  return MEMORY[0x270F7E0C8]();
}

uint64_t tb_client_connection_message_construct()
{
  return MEMORY[0x270F7E0E8]();
}

uint64_t tb_client_connection_message_destruct()
{
  return MEMORY[0x270F7E0F0]();
}

uint64_t tb_conclave_endpoint_for_service()
{
  return MEMORY[0x270F7E100]();
}

uint64_t tb_connection_send_query()
{
  return MEMORY[0x270F7E110]();
}

uint64_t tb_endpoint_set_interface_identifier()
{
  return MEMORY[0x270F7E128]();
}

uint64_t tb_message_complete()
{
  return MEMORY[0x270F7E140]();
}

uint64_t tb_message_decode_BOOL()
{
  return MEMORY[0x270F7E158]();
}

uint64_t tb_message_decode_u64()
{
  return MEMORY[0x270F7E1B8]();
}

uint64_t tb_message_decode_u8()
{
  return MEMORY[0x270F7E1C8]();
}

uint64_t tb_message_encode_BOOL()
{
  return MEMORY[0x270F7E1D8]();
}

uint64_t tb_message_encode_u32()
{
  return MEMORY[0x270F7E220]();
}

uint64_t tb_message_encode_u64()
{
  return MEMORY[0x270F7E230]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}